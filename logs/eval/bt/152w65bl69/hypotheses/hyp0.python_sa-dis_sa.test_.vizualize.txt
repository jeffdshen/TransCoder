========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
def addOne ( x ) :					      Disassembly of <code object addOne at 0x7fbac<<unk>> d540, fi Disassembly of <code object addOne at 0x7f816a677930, file "< error : Traceback (most recent call last):   File
    return ( - ( ~ x ) ) ;				      2 0 LOAD_FAST 0 ( x )					    65 0 LOAD_CONST 1 ( ( - 1 , ) )				  "XLM/dis_script.py", line 59, in <module>	for
							      2 UNARY_INVERT						    2 RETURN_VALUE						  item in run_dis_script():   File "XLM/dis_script.p
							      4 UNARY_NEGATIVE						    NEW_LINE							  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 RETURN_VALUE NEW_LINE					    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      								    								  assembler.py", line 81, in to_co     co_consts.app
							      								    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      								    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      								    								  co	 self.co_cellvars, ValueError: code: varname
							      								    								  s is too small
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
def areaSquare ( side ) :				      Disassembly of <code object areaSquare at 0x7fbac0e8bc90, fil Disassembly of <code object areaSquare at 0x7f8169feb660, fil error : Traceback (most recent call last):   File
    area = side * side					      2 0 LOAD_FAST 0 ( side )					    69 0 LOAD_FAST 0 ( side )					  "XLM/dis_script.py", line 60, in <module>	exec
    return area						      2 LOAD_FAST 0 ( side )					    2 LOAD_CONST 1 ( None )					  (item)   File "main.py", line 29, in <module>	  Fi
							      4 BINARY_MULTIPLY						    4 COMPARE_OP 8 ( is )					  le "<dis>", line 2, in areaSquare UnboundLocalErro
							      6 STORE_FAST 1 ( area )					    6 POP_JUMP_IF_FALSE 12					  r: local variable 'side' referenced before assignm
							      								    								  ent
							      3 8 LOAD_FAST 1 ( area )					    70 8 LOAD_FAST 0 ( side )					  
							      10 RETURN_VALUE NEW_LINE					    10 LOAD_METHOD 0 ( append )					  
							      								    12 LOAD_CONST 2 ( 'side' )					  
							      								    14 LOAD_FAST 1 ( side )					  
							      								    16 CALL_METHOD 2						  
							      								    18 POP_TOP							  
							      								    >> 20 LOAD_CONST 1 ( None )					  
							      								    22 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
def circumference ( r ) :				      Disassembly of <code object circumference at 0x7fbac0e8bc90,  Disassembly of <code object circumference at 0x7f816a677930,  script_not_found : None
    return ( 2 * PI * r )				      2 0 LOAD_CONST 1 ( 2 )					    26 0 LOAD_CONST 1 ( 2 )					  
							      2 LOAD_GLOBAL 0 ( PI )					    2 LOAD_CONST 2 ( ( '*PI' , ) )				  
							      4 BINARY_MULTIPLY						    4 IMPORT_NAME 0 ( . . . . )					  
							      6 LOAD_FAST 0 ( r )					    6 IMPORT_FROM 1 ( PI )					  
							      8 BINARY_MULTIPLY						    8 STORE_FAST 1 ( PI )					  
							      10 RETURN_VALUE NEW_LINE					    10 POP_TOP							  
							      								    								  
							      								    27 12 LOAD_FAST 1 ( PI )					  
							      								    14 LOAD_FAST 0 ( r )					  
							      								    16 LOAD_CONST 3 ( '*PI' )					  
							      								    18 COMPARE_OP 2 ( == )					  
							      								    20 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    28 22 LOAD_FAST 1 ( PI )					  
							      								    24 LOAD_FAST 0 ( r )					  
							      								    26 LOAD_CONST 4 ( '*PI' )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      								    30 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    29 32 LOAD_FAST 1 ( PI )					  
							      								    34 LOAD_FAST 0 ( r )					  
							      								    36 LOAD_CONST 5 ( '*PI' )					  
							      								    38 COMPARE_OP 2 ( == )					  
							      								    40 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    30 42 LOAD_FAST 1 ( PI )					  
							      								    44 LOAD_FAST 0 ( r )					  
							      								    46 LOAD_CONST 6 ( '*PI' )					  
							      								    48 COMPARE_OP 2 ( == )					  
							      								    50 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    31 52 LOAD_FAST 1 ( PI )					  
							      								    54 LOAD_FAST 0 ( r )					  
							      								    56 LOAD_CONST 7 ( '*PI' )					  
							      								    58 COMPARE_OP 2 ( == )					  
							      								    60 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    32 62 LOAD_FAST 1 ( PI )					  
							      								    64 LOAD_FAST 0 ( r )					  
							      								    66 LOAD_CONST 8 ( '*PI' )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    33 72 LOAD_FAST 1 ( PI )					  
							      								    74 LOAD_FAST 0 ( r )					  
							      								    76 LOAD_CONST 9 ( '*PI' )					  
							      								    78 COMPARE_OP 2 ( == )					  
							      								    80 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    34 82 LOAD_FAST 1 ( PI )					  
							      								    84 LOAD_FAST 0 ( r )					  
							      								    86 LOAD_CONST 10 ( '*PI' )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    35 92 LOAD_FAST 1 ( PI )					  
							      								    94 LOAD_FAST 0 ( r )					  
							      								    96 LOAD_CONST 11 ( '*PI' )					  
							      								    98 COMPARE_OP 2 ( == )					  
							      								    100 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    36 102 LOAD_FAST 1 ( PI )					  
							      								    104 LOAD_CONST 12 ( '*PI' )					  
							      								    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    37 110 LOAD_FAST 1 ( PI )					  
							      								    112 LOAD_CONST 12 ( '*PI' )					  
							      								    114 COMPARE_OP 2 ( == )					  
							      								    116 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    38 >> 118 LOAD_FAST 1 ( PI )				  
							      								    120 LOAD_CONST 13 ( '*PI' )					  
							      								    122 COMPARE_OP 2 ( == )					  
							      								    124 POP_JUMP_IF_FALSE 30					  
							      								    126 LOAD_FAST 1 ( PI )					  
							      								    128 LOAD_CONST 14 ( '*PI' )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
def intersection ( n ) :				      Disassembly of <code object intersection at 0x7fbac<<unk>> d5 Disassembly of <code object intersection at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    return n * ( n - 1 ) ;				      2 0 LOAD_FAST 0 ( n )					    853 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( n )					    2 LOAD_METHOD 0 ( intersection )				  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_FAST 1 ( n )						  y", line 47, in run_dis_script     co_code, co_nlo
							      6 BINARY_SUBTRACT						    6 CALL_METHOD 1						  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_MULTIPLY						    8 intersection )						  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE						  pack non-iterable NoneType object
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUM<unk> BED_CIRCLE			      AREA_SQUARE_CIRCUM<unk> BED_CIRCLE			    AREA_SQUARE_CIRCUM<unk> BED_CIRCLE				  AREA_SQUARE_CIRCUM<unk> BED_CIRCLE
--							      --							    --								  --
def find_Area ( r ) :					      Disassembly of <code object find_Area at 0x7fbac0e8bc90, file Disassembly of <code object find_Area at 0x7f816a673a50, file script_not_found : None
    return ( 2 * r * r )				      2 0 LOAD_CONST 1 ( 2 )					    65 0 LOAD_CONST 1 ( 2 )					  
							      2 LOAD_FAST 0 ( r )					    2 LOAD_CONST 2 ( ( '*' , ) )				  
							      4 BINARY_MULTIPLY						    4 IMPORT_NAME 0 ( math )					  
							      6 LOAD_FAST 0 ( r )					    6 IMPORT_FROM 1 ( * math )					  
							      8 BINARY_MULTIPLY						    8 STORE_FAST 2 ( math )					  
							      10 RETURN_VALUE NEW_LINE					    10 POP_TOP							  
							      								    								  
							      								    66 12 LOAD_FAST 2 ( math )					  
							      								    14 LOAD_METHOD 2 ( floor )					  
							      								    16 LOAD_FAST 0 ( r )					  
							      								    18 CALL_METHOD 1						  
							      								    20 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CASSINIS_IDENTITY					      CASSINIS_IDENTITY						    CASSINIS_IDENTITY						  CASSINIS_IDENTITY
--							      --							    --								  --
def cassini ( n ) :					      Disassembly of <code object cassini at 0x7fbac<<unk>> d540, f Disassembly of <code object cassini at 0x7f816a673a50, file " failure : #Results: 0, 10
    return - 1 if ( n & 1 ) else 1			      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_CONST 1 ( - 1 )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_FAST 0 ( n )						  
							      4 BINARY_AND						    4 BINARY_MULTIPLY						  
							      6 POP_JUMP_IF_FALSE 12					    6 RETURN_VALUE NEW_LINE					  
							      8 LOAD_CONST 2 ( - 1 )					    								  
							      10 RETURN_VALUE						    								  
							      >> 12 LOAD_CONST 1 ( 1 )					    								  
							      14 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
def Circumference ( a ) :				      Disassembly of <code object Circumference at 0x7fbac0e89d20,  Disassembly of <code object Circumference at 0x7f816a6e4b70,  error : /bin/bash: line 1: 24035 Segmentation faul
    return ( 4 * a )					      2 0 LOAD_CONST 1 ( 4 )					    26 0 LOAD_CONST 1 ( 4 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_FAST 0 ( a )					    2 LOAD_CONST 2 ( ( 'a' , 'b' ) )				  ataset/bin/python XLM/dis_script.py --script_path
							      4 BINARY_MULTIPLY						    4 BUILD_CONST_KEY_MAP 2					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 RETURN_VALUE NEW_LINE					    6 STORE_FAST 1 ( a )					  eval_scripts/python_sa-dis_sa.test/PYTHON_PROGRAM_
							      								    								  FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE.dis
							      								    27 8 LOAD_FAST 0 ( a )					  
							      								    10 LOAD_FAST 1 ( a )					  
							      								    12 LOAD_FAST 2 ( b )					  
							      								    14 LOAD_FAST 1 ( a )					  
							      								    16 LOAD_FAST 3 ( b )					  
							      								    18 LOAD_FAST 1 ( a )					  
							      								    20 LOAD_FAST 3 ( b )					  
							      								    22 LOAD_FAST 4 ( b )					  
							      								    24 LOAD_FAST 5 ( b )					  
							      								    26 LOAD_FAST 6 ( b )					  
							      								    28 LOAD_FAST 7 ( b )					  
							      								    30 LOAD_FAST 8 ( b )					  
							      								    32 LOAD_FAST 9 ( b )					  
							      								    34 LOAD_FAST 10 ( b )					  
							      								    36 LOAD_FAST 11 ( b )					  
							      								    38 LOAD_FAST 12 ( b )					  
							      								    40 LOAD_FAST 13 ( b )					  
							      								    42 LOAD_FAST 14 ( b )					  
							      								    44 LOAD_FAST 15 ( b )					  
							      								    46 LOAD_FAST 14 ( b )					  
							      								    48 LOAD_FAST 15 ( b )					  
							      								    50 LOAD_FAST 16 ( b )					  
							      								    52 LOAD_FAST 15 ( b )					  
							      								    54 LOAD_FAST 16 ( b )					  
							      								    56 LOAD_FAST 17 ( b )					  
							      								    58 LOAD_FAST 18 ( b )					  
							      								    60 LOAD_FAST 19 ( b )					  
							      								    62 LOAD_FAST 20 ( b )					  
							      								    64 LOAD_FAST 21 ( b )					  
							      								    66 LOAD_FAST 22 ( b )					  
							      								    68 LOAD_FAST 21 ( b )					  
							      								    70 LOAD_FAST 22 ( b )					  
							      								    72 LOAD_FAST 21 ( b )					  
							      								    74 LOAD_FAST 22 ( b )					  
							      								    76 LOAD_FAST 21 ( b )					  
							      								    78 LOAD_FAST 22 ( b )					  
							      								    80 LOAD_FAST 22 ( b )					  
							      								    82 LOAD_FAST 21 ( b )					  
							      								    84 LOAD_FAST 22 ( b )					  
							      								    86 LOAD_FAST 21 ( b )					  
							      								    88 LOAD_FAST 22 ( b )					  
							      								    90 LOAD_FAST 21 ( b )					  
							      								    92 LOAD_FAST 22 ( b )					  
							      								    94 LOAD_FAST 21 ( b )					  
							      								    96 LOAD_FAST 22 ( b )					  
							      								    98 LOAD_FAST 21 ( b )					  
							      								    100 LOAD_FAST 22 ( b )					  
							      								    102 LOAD_FAST 21 ( b )					  
							      								    104 LOAD_FAST 22 ( b )					  
							      								    106 LOAD_CONST 2 ( ( 'a' , 'b' ) )				  
							      								    108 BUILD_CONST_KEY_MAP 6					  
							      								    110 CALL_METHOD 7						  
							      								    112 POP_TOP							  
							      								    114 LOAD_CONST 3 ( None )					  
							      								    116 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1
--							      --							    --								  --
def kthgroupsum ( k ) :					      Disassembly of <code object kthgroupsum at 0x7fbac0e8bc90, fi Disassembly of <code object kthgroupsum at 0x7f816a6e4ae0, fi error : Traceback (most recent call last):   File
    return k * k * k					      2 0 LOAD_FAST 0 ( k )					    20 0 LOAD_FAST 0 ( k )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( k )					    2 LOAD_CONST 1 ( k )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MULTIPLY						    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 0 ( k )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_MULTIPLY						    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 RETURN_VALUE NEW_LINE					    21 8 LOAD_GLOBAL 0 ( kthgroupsum )				  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      								    10 LOAD_FAST 0 ( k )					  n parse     constants[arg] = ast.literal_eval(argr
							      								    12 CALL_FUNCTION 1						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      								    14 RETURN_VALUE						  ib/python3.7/ast.py", line 91, in literal_eval
							      								    								   return _convert(node_or_string)   File "/home/ubu
							      								    22 >> 16 LOAD_GLOBAL 1 ( kthgroupsum )			  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      								    18 LOAD_FAST 0 ( k )					  line 90, in _convert	   return _convert_signed_nu
							      								    20 CALL_FUNCTION 1						  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      								    22 RETURN_VALUE						  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      								    24 LOAD_CONST 2 ( None )					  ed_num     return _convert_num(node)	 File "/home
							      								    26 RETURN_VALUE						  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      								    NEW_LINE							  y", line 55, in _convert_num	   raise ValueError(
							      								    								  'malformed node or string: ' + repr(node)) ValueEr
							      								    								  ror: malformed node or string: <_ast.Name object a
							      								    								  t 0x7f90916b32d0>
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
def isEven ( n ) :					      Disassembly of <code object isEven at 0x7fbac<<unk>> d540, fi Disassembly of <code object isEven at 0x7f816a677930, file "< error : /bin/bash: line 1: 24043 Segmentation faul
    return ( n % 2 == 0 )				      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 BINARY_MODULO						    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 LOAD_CONST 2 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/CHECK_WHETHER_G
							      8 COMPARE_OP 2 ( == )					    								  IVEN_NUMBER_EVEN_ODD.dis
							      10 RETURN_VALUE NEW_LINE					    27 8 LOAD_FAST 0 ( n )					  
							      								    10 LOAD_CONST 2 ( 0 )					  
							      								    12 COMPARE_OP 2 ( == )					  
							      								    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    28 >> 16 LOAD_FAST 0 ( n )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      								    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    29 24 LOAD_FAST 0 ( n )					  
							      								    26 LOAD_CONST 4 ( 2 )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      								    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    30 32 LOAD_FAST 0 ( n )					  
							      								    34 LOAD_CONST 5 ( 1 )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      								    38 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    31 40 LOAD_FAST 0 ( n )					  
							      								    42 LOAD_CONST 6 ( 2 )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    32 48 LOAD_FAST 0 ( n )					  
							      								    50 LOAD_CONST 7 ( 2 )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    33 56 LOAD_FAST 0 ( n )					  
							      								    58 LOAD_CONST 8 ( 2 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    34 64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 9 ( 1 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    35 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 10 ( 2 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    36 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 11 ( 1 )					  
							      								    84 INPLACE_ADD						  
							      								    86 STORE_FAST 0 ( n )					  
							      								    								  
							      								    37 >> 88 LOAD_FAST 0 ( n )					  
							      								    90 LOAD_CONST 12 ( 2 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    38 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 13 ( 2 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    39 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 6 ( 2 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    40 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_CONST 6 ( 2 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    41 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 6 ( 2 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    42 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 6 ( 2 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 6 ( 2 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    44 144 LOAD_FAST 0 ( n )					  
							      								    146 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
def check ( n ) :					      Disassembly of <code object check at 0x7fbac<<unk>> de40, fil Disassembly of <code object check at 0x7f816a673a50, file "<d error : Traceback (most recent call last):   File
    return 1162261467 % n == 0				      2 0 LOAD_CONST 1 ( 1162261467 )				    69 0 LOAD_GLOBAL 0 ( 1162261467 )				  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( n )					    2 CALL_FUNCTION 0						  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MODULO						    4 RETURN_VALUE						  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_CONST 2 ( 0 )					    NEW_LINE							  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 COMPARE_OP 2 ( == )					    								  assembler.py", line 81, in to_co     co_consts.app
							      10 RETURN_VALUE NEW_LINE					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      								    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      								    								  co	 self.co_cellvars, ValueError: code: varname
							      								    								  s is too small
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_TO_MULTIPLY_WITH_7			      EFFICIENT_WAY_TO_MULTIPLY_WITH_7				    EFFICIENT_WAY_TO_MULTIPLY_WITH_7				  EFFICIENT_WAY_TO_MULTIPLY_WITH_7
--							      --							    --								  --
def multiplyBySeven ( n ) :				      Disassembly of <code object multiplyBySeven at 0x7fbac<<unk>> Disassembly of <code object multiSynchronBySeven at 0x7f816a6 error : Traceback (most recent call last):   File
    return ( ( n << 3 ) - n )				      2 0 LOAD_FAST 0 ( n )					    69 0 LOAD_CONST 1 ( ( 3 << 3 ) - n )			  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 1 ( 3 )					    2 RETURN_VALUE						  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_LSHIFT						    NEW_LINE							  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 0 ( n )					    								  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_SUBTRACT						    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 RETURN_VALUE NEW_LINE					    								  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      								    								  n parse     constants[arg] = ast.literal_eval(argr
							      								    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      								    								  ib/python3.7/ast.py", line 91, in literal_eval
							      								    								   return _convert(node_or_string)   File "/home/ubu
							      								    								  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      								    								  line 83, in _convert	   left = _convert_signed_nu
							      								    								  m(node.left)	 File "/home/ubuntu/anaconda3/envs/d
							      								    								  ataset/lib/python3.7/ast.py", line 63, in _convert
							      								    								  _signed_num	  return _convert_num(node)   File "
							      								    								  /home/ubuntu/anaconda3/envs/dataset/lib/python3.7/
							      								    								  ast.py", line 55, in _convert_num	raise ValueE
							      								    								  rror('malformed node or string: ' + repr(node)) Va
							      								    								  lueError: malformed node or string: <_ast.BinOp ob
							      								    								  ject at 0x7f55e86e5110>
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
def getModulo ( n , d ) :				      Disassembly of <code object getModulo at 0x7fbac<<unk>> de40, Disassembly of <code object getModulo at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    return ( n & ( d - 1 ) )				      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_CONST 1 ( ( ( - d ) - 1 ) )			  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 1 ( d )					    2 RETURN_VALUE						  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_CONST 1 ( 1 )					    NEW_LINE							  y", line 47, in run_dis_script     co_code, co_nlo
							      6 BINARY_SUBTRACT						    								  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_AND						    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 RETURN_VALUE NEW_LINE					    								  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      								    								  n parse     constants[arg] = ast.literal_eval(argr
							      								    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      								    								  ib/python3.7/ast.py", line 91, in literal_eval
							      								    								   return _convert(node_or_string)   File "/home/ubu
							      								    								  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      								    								  line 83, in _convert	   left = _convert_signed_nu
							      								    								  m(node.left)	 File "/home/ubuntu/anaconda3/envs/d
							      								    								  ataset/lib/python3.7/ast.py", line 58, in _convert
							      								    								  _signed_num	  operand = _convert_num(node.operan
							      								    								  d)   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      								    								  /python3.7/ast.py", line 55, in _convert_num	   r
							      								    								  aise ValueError('malformed node or string: ' + rep
							      								    								  r(node)) ValueError: malformed node or string: <_a
							      								    								  st.Name object at 0x7f486ac22210>
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
def rangeGCD ( n , m ) :				      Disassembly of <code object rangeGCD at 0x7fbac<<unk>> de40,  Disassembly of <code object rangeGCD at 0x7f816a673a50, file  error : Traceback (most recent call last):   File
    return n if ( n == m ) else 1			      2 0 LOAD_FAST 0 ( n )					    144 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 1 ( m )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_FAST 0 ( n )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      10 RETURN_VALUE						    145 8 LOAD_FAST 0 ( n )					  pack non-iterable NoneType object
							      >> 12 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 2 ( 2 )					  
							      14 RETURN_VALUE NEW_LINE					    12 COMPARE_OP 2 ( == )					  
							      								    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    146 16 LOAD_FAST 0 ( n )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      								    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    147 >> 24 LOAD_FAST 0 ( n )					  
							      								    26 LOAD_CONST 4 ( 2 )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      								    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    148 32 LOAD_FAST 0 ( n )					  
							      								    34 LOAD_CONST 5 ( 1 )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      								    38 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    149 40 LOAD_FAST 0 ( n )					  
							      								    42 LOAD_CONST 6 ( 2 )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    150 48 LOAD_FAST 0 ( n )					  
							      								    50 LOAD_CONST 7 ( 2 )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    151 56 LOAD_FAST 0 ( n )					  
							      								    58 LOAD_CONST 8 ( 2 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    152 64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 9 ( 2 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    153 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 10 ( 2 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    154 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 11 ( 2 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    155 88 LOAD_FAST 0 ( n )					  
							      								    90 LOAD_CONST 12 ( 2 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    156 >> 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 12 ( 2 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    157 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 13 ( 2 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    158 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_CONST 6 ( 2 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    159 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 6 ( 2 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    160 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 6 ( 2 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    162 136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 6 ( 2 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    163 144 LOAD_FAST 0 ( n )					  
							      								    146								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_CIRCUM<unk> BED_CIRCLE_SQUARE			      AREA_CIRCUM<unk> BED_CIRCLE_SQUARE			    AREA_CIRCUM<unk> BED_CIRCLE_SQUARE				  AREA_CIRCUM<unk> BED_CIRCLE_SQUARE
--							      --							    --								  --
def areacircumscribed ( a ) :				      Disassembly of <code object areacircumscribed at 0x7fbac0e8bc Disassembly of <code object areacircumscribed at 0x7f816a6016 script_not_found : None
    return ( a * a * ( PI / 2 ) )			      2 0 LOAD_FAST 0 ( a )					    65 0 LOAD_CONST 1 ( ( '**PI/2/2/2/2/2/2/2/2/2/2/2/2/2//2/3//2 
							      2 LOAD_FAST 0 ( a )					    								  
							      4 BINARY_MULTIPLY						    								  
							      6 LOAD_GLOBAL 0 ( PI )					    								  
							      8 LOAD_CONST 1 ( 2 )					    								  
							      10 BINARY_TRUE_DIVIDE					    								  
							      12 BINARY_MULTIPLY					    								  
							      14 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
def slope ( x1 , y1 , x2 , y2 ) :			      Disassembly of <code object slope at 0x7fbac<<unk>> de40, fil Disassembly of <code object slope at 0x7f816a6e4b70, file "<d error : Traceback (most recent call last):   File
    return ( float ) ( y2 - y1 ) / ( x2 - x1 )		      2 0 LOAD_GLOBAL 0 ( float )				    149 0 LOAD_GLOBAL 0 ( float )				  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 3 ( y2 )					    2 LOAD_FAST 0 ( x1 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_FAST 1 ( y1 )					    4 LOAD_CONST 1 ( x2 )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 BINARY_SUBTRACT						    6 LOAD_CONST 2 ( - 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 CALL_FUNCTION 1						    8 LOAD_CONST 3 ( ( 'x2' , 'x2' ) )				  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 LOAD_FAST 2 ( x2 )					    10 CALL_FUNCTION_KW 2					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 LOAD_FAST 0 ( x1 )					    12 RETURN_VALUE						  n parse     constants[arg] = ast.literal_eval(argr
							      14 BINARY_SUBTRACT					    NEW_LINE							  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 BINARY_TRUE_DIVIDE					    								  ib/python3.7/ast.py", line 91, in literal_eval
							      18 RETURN_VALUE NEW_LINE					    								   return _convert(node_or_string)   File "/home/ubu
							      								    								  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      								    								  line 90, in _convert	   return _convert_signed_nu
							      								    								  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      								    								  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      								    								  ed_num     return _convert_num(node)	 File "/home
							      								    								  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      								    								  y", line 55, in _convert_num	   raise ValueError(
							      								    								  'malformed node or string: ' + repr(node)) ValueEr
							      								    								  ror: malformed node or string: <_ast.Name object a
							      								    								  t 0x7fd02c13b850>
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
def yMod ( y , x ) :					      Disassembly of <code object yMod at 0x7fbac<<unk>> d540, file Disassembly of <code object yMod at 0x7f816a677930, file "<di error : Traceback (most recent call last):   File
    return ( y % pow ( 2 , x ) )			      2 0 LOAD_FAST 0 ( y )					    47 0 LOAD_CONST 1 ( '%(pow(2)s' ) )				  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_GLOBAL 0 ( pow )					    2 LOAD_FAST 0 ( y )						  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_CONST 1 ( 2 )					    4 BINARY_MODULO						  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 1 ( x )					    6 RETURN_VALUE						  cals, co_varnames, co_names, co_consts, co_linesta
							      8 CALL_FUNCTION 2						    NEW_LINE							  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 BINARY_MODULO						    								  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 RETURN_VALUE NEW_LINE					    								  n parse     constants[arg] = ast.literal_eval(argr
							      								    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      								    								  ib/python3.7/ast.py", line 46, in literal_eval
							      								    								   node_or_string = parse(node_or_string, mode='eval
							      								    								  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      								    								  /python3.7/ast.py", line 35, in parse	    return c
							      								    								  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      								    								  le "<unknown>", line 1     '%(pow(2)s' )
							      								    								  	 ^ SyntaxError: unexpected EOF while parsing
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
def pentagonalNum ( n ) :				      Disassembly of <code object pentagonalNum at 0x7fbac<<unk>> d Disassembly of <code object pentagonalNum at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    return ( 3 * n * n - n ) / 2			      2 0 LOAD_CONST 1 ( 3 )					    31 0 LOAD_CONST 1 ( 3 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 2 ( 4 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MULTIPLY						    4 LOAD_CONST 3 ( 1 )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 0 ( n )					    6 LOAD_CONST 4 ( 2 )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_MULTIPLY						    8 LOAD_CONST 5 ( 3 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 6 ( 4 )					  pack non-iterable NoneType object
							      12 BINARY_SUBTRACT					    12 LOAD_CONST 7 ( 3 )					  
							      14 LOAD_CONST 2 ( 2 )					    14 LOAD_CONST 8 ( 4 )					  
							      16 BINARY_TRUE_DIVIDE					    16 LOAD_CONST 9 ( 4 )					  
							      18 RETURN_VALUE NEW_LINE					    18 LOAD_CONST 10 ( 3 )					  
							      								    20 LOAD_CONST 11 ( 4 )					  
							      								    22 LOAD_CONST 12 ( 5 )					  
							      								    24 LOAD_CONST 12 ( 6 )					  
							      								    26 LOAD_CONST 13 ( 7 )					  
							      								    28 LOAD_CONST 14 ( 8 )					  
							      								    30 LOAD_CONST 15 ( 8 )					  
							      								    32 LOAD_CONST 16 ( 6 )					  
							      								    34 LOAD_CONST 17 ( 8 )					  
							      								    36 LOAD_CONST 16 ( 6 )					  
							      								    38 LOAD_CONST 17 ( 8 )					  
							      								    40 LOAD_CONST 18 ( 6 )					  
							      								    42 LOAD_CONST 19 ( 8 )					  
							      								    44 LOAD_CONST 20 ( 6 )					  
							      								    46 LOAD_CONST 21 ( 8 )					  
							      								    48 LOAD_CONST 22 ( 6 )					  
							      								    50 LOAD_CONST 20 ( 6 )					  
							      								    52 LOAD_CONST 21 ( 8 )					  
							      								    54 LOAD_CONST 22 ( 6 )					  
							      								    56 LOAD_CONST 23 ( 8 )					  
							      								    58 LOAD_CONST 22 ( 6 )					  
							      								    60 LOAD_CONST 23 ( 8 )					  
							      								    62 LOAD_CONST 22 ( 6 )					  
							      								    64 LOAD_CONST 23 ( 8 )					  
							      								    66 LOAD_CONST 24 ( 6 )					  
							      								    68 LOAD_CONST 23 ( 8 )					  
							      								    70 LOAD_CONST 24 ( 6 )					  
							      								    72 LOAD_CONST 25 ( 8 )					  
							      								    74 LOAD_CONST 26 ( 6 )					  
							      								    76 LOAD_CONST 25 ( 9 )					  
							      								    78 LOAD_CONST 26 ( 6 )					  
							      								    80 LOAD_CONST 27 ( 6 )					  
							      								    82 LOAD_CONST 28 ( 6 )					  
							      								    84 LOAD_CONST 29 ( 8 )					  
							      								    86 LOAD_CONST 30 ( 6 )					  
							      								    88 LOAD_CONST 29 ( 8 )					  
							      								    90 LOAD_CONST 30 ( 6 )					  
							      								    92 LOAD_CONST 28 ( 7 )					  
							      								    94 LOAD_CONST 29 ( 8 )					  
							      								    96 LOAD_CONST 30 ( 6 )					  
							      								    98 LOAD_CONST 29 ( 8 )					  
							      								    100 LOAD_CONST 30 ( 6 )					  
							      								    102 LOAD_CONST 31 ( 8 )					  
							      								    104 LOAD_CONST 32 ( 6 )					  
							      								    106 LOAD_CONST 34 ( 6 )					  
							      								    108 LOAD_CONST 33 ( 8 )					  
							      								    110 LOAD_CONST 34 ( 6 )					  
							      								    112 LOAD_CONST 35 ( 8 )					  
							      								    114 LOAD_CONST 36 ( 6 )					  
							      								    116 LOAD_CONST 36 ( 6 )					  
							      								    118 LOAD_CONST 37 ( 7 )					  
							      								    120 LOAD_CONST 36 ( 6 )					  
							      								    122 LOAD_CONST 38 ( 7 )					  
							      								    124 LOAD_CONST 37 ( 8 )					  
							      								    126 LOAD_CONST 36 ( 6 )					  
							      								    128 LOAD_CONST 38 ( 7 )					  
							      								    130 LOAD_CONST 37 ( 8 )					  
							      								    132 LOAD_CONST 38 ( 6 )					  
							      								    134 LOAD_CONST 1 ( 3 )					  
							      								    136 LOAD_CONST 1 ( 3 )					  
							      								    138 LOAD_CONST 38 ( 6 )					  
							      								    140 LOAD_CONST 40 (						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
def oppositeSigns ( x , y ) :				      Disassembly of <code object oppositeSigns at 0x7fbac<<unk>> d Disassembly of <code object oppositeSigns at 0x7f816a673a50,  error : /bin/bash: line 1: 24121 Segmentation faul
    return ( ( x ^ y ) < 0 ) ;				      2 0 LOAD_FAST 0 ( x )					    26 0 LOAD_CONST 1 ( ( '^(?:)*?)$' , ) )			  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_FAST 1 ( y )					    2 STORE_FAST 1 ( y )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 BINARY_XOR						    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 LOAD_CONST 1 ( 0 )					    27 4 LOAD_CONST 2 ( '^(?:)$(?:)$' )				  eval_scripts/python_sa-dis_sa.test/DETECT_IF_TWO_I
							      8 COMPARE_OP 0 ( < )					    6 STORE_FAST 2 ( a )					  NTEGERS_HAVE_OPPOSITE_SIGNS.dis
							      10 RETURN_VALUE NEW_LINE					    								  
							      								    28 8 LOAD_FAST 0 ( x )					  
							      								    10 LOAD_CONST 3 ( '^(?:)$' )				  
							      								    12 LOAD_FAST 2 ( a )					  
							      								    14 LOAD_FAST 1 ( y )					  
							      								    16 BUILD_TUPLE 2						  
							      								    18 BINARY_MODULO						  
							      								    20 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
def compute_average ( a , b ) :				      Disassembly of <code object compute_average at 0x7fbac<<unk>> Disassembly of <code object compute_average at 0x7f816a6e4b70 error : Traceback (most recent call last):   File
    return floor ( ( a + b ) / 2 )			      2 0 LOAD_GLOBAL 0 ( floor )				    26 0 LOAD_GLOBAL 0 ( floor )				  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  (item)   File "main.py", line 30, in <module>	  Fi
							      4 LOAD_FAST 1 ( b )					    4 CALL_FUNCTION 1						  le "<dis>", line 2, in compute_average UnboundLoca
							      6 BINARY_ADD						    6 STORE_FAST 1 ( b )					  lError: local variable 'b' referenced before assig
							      8 LOAD_CONST 1 ( 2 )					    								  nment
							      10 BINARY_TRUE_DIVIDE					    27 8 LOAD_FAST 1 ( b )					  
							      12 CALL_FUNCTION 1					    10 LOAD_FAST 1 ( b )					  
							      14 RETURN_VALUE NEW_LINE					    12 LOAD_FAST 2 ( b )					  
							      								    14 LOAD_FAST 3 ( b )					  
							      								    16 CALL_FUNCTION 2						  
							      								    18 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
def reverse ( string ) :				      Disassembly of <code object reverse at 0x7fbac0e89d20, file " Disassembly of <code object reverse at 0x7f816a6e4b70, file " failure : #Results: 0, 10
    string = string [ : : - 1 ]				      2 0 LOAD_FAST 0 ( string )				    16 0 LOAD_FAST 0 ( string )					  
    return string					      2 LOAD_CONST 0 ( None )					    2 LOAD_CONST 1 ( - 1 )					  
							      4 LOAD_CONST 0 ( None )					    4 BINARY_SUBSCR						  
							      6 LOAD_CONST 1 ( - 1 )					    6 RETURN_VALUE						  
							      8 BUILD_SLICE 3						    NEW_LINE							  
							      10 BINARY_SUBSCR						    								  
							      12 STORE_FAST 0 ( string )				    								  
							      								    								  
							      3 14 LOAD_FAST 0 ( string )				    								  
							      16 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_FACTORIALS_TWO_NUMBERS				      GCD_FACTORIALS_TWO_NUMBERS				    GCD_FACTORIALS_TWO_NUMBERS					  GCD_FACTORIALS_TWO_NUMBERS
--							      --							    --								  --
def gcdOfFactorial ( m , n ) :				      Disassembly of <code object gcdOfFactorial at 0x7fbac<<unk>>  Disassembly of <code object gcdOfOfFactorial at 0x7f816a683a5 error : Traceback (most recent call last):   File
    return math.factorial ( min ( m , n ) )		      2 0 LOAD_GLOBAL 0 ( math )				    65 0 LOAD_GLOBAL 0 ( math )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_METHOD 1 ( factorial )				    2 LOAD_METHOD 1 ( factorial )				  (item)   File "main.py", line 30, in <module>	  Fi
							      4 LOAD_GLOBAL 2 ( min )					    4 LOAD_FAST 0 ( m )						  le "<dis>", line 2, in gcdOfFactorial UnboundLocal
							      6 LOAD_FAST 0 ( m )					    6 LOAD_FAST 1 ( n )						  Error: local variable 'n' referenced before assign
							      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 2 ( n )						  ment
							      10 CALL_FUNCTION 2					    10 CALL_METHOD 2						  
							      12 CALL_METHOD 1						    12 RETURN_VALUE						  
							      14 RETURN_VALUE NEW_LINE					    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_NUMBER_USING_LOG				      SQUARE_ROOT_NUMBER_USING_LOG				    SQUARE_ROOT_NUMBER_USING_LOG				  SQUARE_ROOT_NUMBER_USING_LOG
--							      --							    --								  --
def squareRoot ( n ) :					      Disassembly of <code object squareRoot at 0x7fbac0e89d20, fil Disassembly of <code object squareRoot at 0x7f816a6e4b70, fil script_not_found : None
    return pow ( 2 , 0.5 * math.log2 ( n ) )		      2 0 LOAD_GLOBAL 0 ( pow )					    26 0 LOAD_GLOBAL 0 ( pow )					  
							      2 LOAD_CONST 1 ( 2 )					    2 LOAD_FAST 0 ( n )						  
							      4 LOAD_CONST 2 ( 0.5 )					    4 CALL_FUNCTION 1						  
							      6 LOAD_GLOBAL 1 ( math )					    6 LOAD_GLOBAL 1 ( pow )					  
							      8 LOAD_METHOD 2 ( log2 )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_FAST 0 ( n )					    10 CALL_FUNCTION 1						  
							      12 CALL_METHOD 1						    12 LOAD_GLOBAL 1 ( pow )					  
							      14 BINARY_MULTIPLY					    14 LOAD_FAST 0 ( n )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 1						  
							      18 RETURN_VALUE NEW_LINE					    18 BINARY_MULTIPLY						  
							      								    20 BINARY_ADD						  
							      								    22 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
def numberOfSticks ( x ) :				      Disassembly of <code object numberOfSticks at 0x7fbac0e8bc90, Disassembly of <code object numberOfSticks at 0x7f816a673a50, error : Traceback (most recent call last):   File
    return ( 3 * x * ( x + 1 ) ) / 2			      2 0 LOAD_CONST 1 ( 3 )					    108 0 LOAD_CONST 1 ( 3 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( x )					    2 LOAD_CONST 2 ( 4 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MULTIPLY						    4 LOAD_CONST 3 ( 1 )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_FAST 0 ( x )					    6 LOAD_CONST 4 ( 2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 5 ( 3 )					  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_ADD						    10 LOAD_CONST 6 ( 4 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_MULTIPLY					    12 LOAD_CONST 7 ( 6 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 LOAD_CONST 3 ( 2 )					    14 LOAD_CONST 8 ( 7 )					  co	 self.co_cellvars, ValueError: code: varname
							      16 BINARY_TRUE_DIVIDE					    16 LOAD_CONST 9 ( 8 )					  s is too small
							      18 RETURN_VALUE NEW_LINE					    18 LOAD_CONST 10 ( 3 )					  
							      								    20 LOAD_CONST 11 ( 4 )					  
							      								    22 LOAD_CONST 12 ( 3 )					  
							      								    24 LOAD_CONST 12 ( 3 )					  
							      								    26 LOAD_CONST 13 ( 4 )					  
							      								    28 LOAD_CONST 14 ( 5 )					  
							      								    30 LOAD_CONST 15 ( 6 )					  
							      								    32 LOAD_CONST 16 ( 3 )					  
							      								    34 LOAD_CONST 17 ( 4 )					  
							      								    36 LOAD_CONST 16 ( 3 )					  
							      								    38 LOAD_CONST 17 ( 4 )					  
							      								    40 LOAD_CONST 18 ( 3 )					  
							      								    42 LOAD_CONST 19 ( 4 )					  
							      								    44 LOAD_CONST 20 ( 3 )					  
							      								    46 LOAD_CONST 19 ( 4 )					  
							      								    48 LOAD_CONST 20 ( 3 )					  
							      								    50 LOAD_CONST 21 ( 4 )					  
							      								    52 LOAD_CONST 22 ( 3 )					  
							      								    54 LOAD_CONST 23 ( 4 )					  
							      								    56 LOAD_CONST 22 ( 3 )					  
							      								    58 LOAD_CONST 23 ( 4 )					  
							      								    60 LOAD_CONST 22 ( 3 )					  
							      								    62 LOAD_CONST 23 ( 4 )					  
							      								    64 LOAD_CONST 22 ( 3 )					  
							      								    66 LOAD_CONST 23 ( 4 )					  
							      								    68 LOAD_CONST 24 ( 3 )					  
							      								    70 LOAD_CONST 25 ( 4 )					  
							      								    72 LOAD_CONST 26 ( 3 )					  
							      								    74 LOAD_CONST 27 ( 4 )					  
							      								    76 LOAD_CONST 28 ( 3 )					  
							      								    78 LOAD_CONST 30 ( 3 )					  
							      								    80 LOAD_CONST 29 ( 4 )					  
							      								    82 LOAD_CONST 30 ( 3 )					  
							      								    84 LOAD_CONST 28 ( 4 )					  
							      								    86 LOAD_CONST 29 ( 4 )					  
							      								    88 LOAD_CONST 30 ( 3 )					  
							      								    90 LOAD_CONST 30 ( 3 )					  
							      								    92 LOAD_CONST 29 ( 4 )					  
							      								    94 LOAD_CONST 30 ( 3 )					  
							      								    96 LOAD_CONST 30 ( 3 )					  
							      								    98 LOAD_CONST 31 ( 4 )					  
							      								    100 LOAD_CONST 32 ( 3 )					  
							      								    102 LOAD_CONST 34 ( 3 )					  
							      								    104 LOAD_CONST 36 ( 4 )					  
							      								    106 LOAD_CONST 35 ( 4 )					  
							      								    108 LOAD_CONST 36 ( 3 )					  
							      								    110 LOAD_CONST 36 ( 3 )					  
							      								    112 LOAD_CONST 37 ( 4 )					  
							      								    114 LOAD_CONST 36 ( 3 )					  
							      								    116 LOAD_CONST 37 ( 4 )					  
							      								    118 LOAD_CONST 38 ( 3 )					  
							      								    120 LOAD_CONST 38 ( 3 )					  
							      								    122 LOAD_CONST 39 ( 4 )					  
							      								    124 LOAD_CONST 40 ( 3 )					  
							      								    126 LOAD_CONST 41 ( 4 )					  
							      								    128 LOAD_CONST 40 ( 3 )					  
							      								    130 LOAD_CONST 41 ( 4 )					  
							      								    132 LOAD_CONST 42 ( 3 )					  
							      								    134 LOAD_CONST 43 ( 4 )					  
							      								    136 LOAD_CONST 44 ( 3 )					  
							      								    138 LOAD_CONST 45 ( 4 )					  
							      								    140 LOAD_CONST 46 ( 3 )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT				      POSITION_OF_RIGHTMOST_SET_BIT				    POSITION_OF_RIGHTMOST_SET_BIT				  POSITION_OF_RIGHTMOST_SET_BIT
--							      --							    --								  --
def getFirstSetBitPos ( n ) :				      Disassembly of <code object getFirstSetBitPos at 0x7fbac0e8bc Disassembly of <code object getFirstSetBitPos at 0x7f816a673a error : Traceback (most recent call last):   File
    return math.log2 ( n & - n ) + 1			      2 0 LOAD_GLOBAL 0 ( math )				    17 0 LOAD_GLOBAL 0 ( math )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_METHOD 1 ( log2 )					    2 LOAD_METHOD 1 ( log2 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_FAST 0 ( n )					    4 LOAD_CONST 1 ( - 1 )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_FAST 0 ( n )					    6 CALL_METHOD 1						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 UNARY_NEGATIVE						    8 RETURN_VALUE						  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_AND						    NEW_LINE							  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 CALL_METHOD 1						    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 LOAD_CONST 1 ( 1 )					    								  co	 self.co_cellvars, ValueError: code: varname
							      16 BINARY_ADD						    								  s is too small
							      18 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM	      PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		    PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		  PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM
--							      --							    --								  --
def findVolume ( l , b , h ) :				      Disassembly of <code object findVolume at 0x7fbac<<unk>> de40 Disassembly of <code object findVolume at 0x7f816a677930, fil error : Traceback (most recent call last):   File
    return ( ( l * b * h ) / 2 )			      2 0 LOAD_FAST 0 ( l )					    90 0 LOAD_FAST 0 ( l )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( b '*' )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MULTIPLY						    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 2 ( h )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_MULTIPLY						    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 LOAD_CONST 1 ( 2 )					    91 8 LOAD_FAST 0 ( l )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 BINARY_TRUE_DIVIDE					    10 LOAD_CONST 2 ( '*' )					  n parse     constants[arg] = ast.literal_eval(argr
							      14 RETURN_VALUE NEW_LINE					    12 COMPARE_OP 2 ( == )					  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      								    14 POP_JUMP_IF_FALSE 28					  ib/python3.7/ast.py", line 46, in literal_eval
							      								    								   node_or_string = parse(node_or_string, mode='eval
							      								    92 16 LOAD_CONST 3 ( '*' )					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      								    18 RETURN_VALUE						  /python3.7/ast.py", line 35, in parse	    return c
							      								    								  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      								    93 >> 20 LOAD_FAST 0 ( l )					  le "<unknown>", line 1     b '*'	   ^ SyntaxE
							      								    22 LOAD_CONST 4 ( '*' )					  rror: invalid syntax
							      								    24 COMPARE_OP 2 ( == )					  
							      								    26 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    94 28 LOAD_CONST 5 ( '**' )					  
							      								    30 RETURN_VALUE						  
							      								    								  
							      								    95 >> 32 LOAD_FAST 0 ( l )					  
							      								    34 LOAD_CONST 6 ( '*' )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      								    38 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    96 40 LOAD_CONST 7 ( '**' )					  
							      								    42 RETURN_VALUE						  
							      								    								  
							      								    98 >> 44 LOAD_CONST 8 ( '**' )				  
							      								    46 RETURN_VALUE						  
							      								    48 LOAD_CONST 9 ( None )					  
							      								    50 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			      MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			    MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			  MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA
--							      --							    --								  --
def minHeight ( area , base ) :				      Disassembly of <code object minHeight at 0x7fbac0e89d20, file Disassembly of <code object minHeight at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    return math.ceil ( ( 2 * area ) / base )		      2 0 LOAD_GLOBAL 0 ( math )				    17 0 LOAD_GLOBAL 0 ( math )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_METHOD 1 ( ceil )					    2 LOAD_METHOD 1 ( ceil )					  (item)   File "main.py", line 30, in <module>	  Fi
							      4 LOAD_CONST 1 ( 2 )					    4 LOAD_CONST 1 ( 2 )					  le "<dis>", line 2, in minHeight UnboundLocalError
							      6 LOAD_FAST 0 ( area )					    6 LOAD_FAST 0 ( area )					  : local variable 'base' referenced before assignme
							      8 BINARY_MULTIPLY						    8 LOAD_FAST 1 ( base )					  nt
							      10 LOAD_FAST 1 ( base )					    10 LOAD_FAST 2 ( base )					  
							      12 BINARY_TRUE_DIVIDE					    12 LOAD_FAST 3 ( base )					  
							      14 CALL_METHOD 1						    14 LOAD_FAST 4 ( base )					  
							      16 RETURN_VALUE NEW_LINE					    16 LOAD_FAST 5 ( base )					  
							      								    18 LOAD_FAST 6 ( base )					  
							      								    20 LOAD_FAST 7 ( base )					  
							      								    22 LOAD_FAST 8 ( base )					  
							      								    24 LOAD_FAST 9 ( base )					  
							      								    26 LOAD_FAST 10 ( base )					  
							      								    28 LOAD_FAST 11 ( base )					  
							      								    30 LOAD_FAST 12 ( base )					  
							      								    32 LOAD_FAST 13 ( base )					  
							      								    34 LOAD_FAST 14 ( base )					  
							      								    36 LOAD_FAST 15 ( base )					  
							      								    38 LOAD_FAST 16 ( base )					  
							      								    40 LOAD_FAST 17 ( base )					  
							      								    42 LOAD_FAST 18 ( base )					  
							      								    44 LOAD_FAST 19 ( base )					  
							      								    46 LOAD_FAST 20 ( base )					  
							      								    48 LOAD_FAST 21 ( base )					  
							      								    50 LOAD_FAST 22 ( base )					  
							      								    52 LOAD_FAST 21 ( base )					  
							      								    54 LOAD_FAST 22 ( base )					  
							      								    56 LOAD_FAST 21 ( base )					  
							      								    58 LOAD_FAST 22 ( base )					  
							      								    60 LOAD_FAST 21 ( base )					  
							      								    62 LOAD_FAST 22 ( base )					  
							      								    64 LOAD_FAST 21 ( base )					  
							      								    66 LOAD_FAST 22 ( base )					  
							      								    68 LOAD_FAST 21 ( base )					  
							      								    70 LOAD_FAST 22 ( base )					  
							      								    72 LOAD_FAST 21 ( base )					  
							      								    74 LOAD_FAST 22 ( base )					  
							      								    76 LOAD_FAST 21 ( base )					  
							      								    78 LOAD_FAST 22 ( base )					  
							      								    80 LOAD_FAST 21 ( base )					  
							      								    82 LOAD_FAST 22 ( base )					  
							      								    84 LOAD_FAST 21 ( base )					  
							      								    86 LOAD_FAST 22 ( base )					  
							      								    88 LOAD_FAST 21 ( base )					  
							      								    90 LOAD_FAST 22 ( base )					  
							      								    92 LOAD_FAST 21 ( base )					  
							      								    94 LOAD_FAST 22 ( base )					  
							      								    96 LOAD_FAST 21 ( base )					  
							      								    98 LOAD_FAST 22 ( base )					  
							      								    100 LOAD_FAST 21 ( base )					  
							      								    102 LOAD_FAST 22 ( base )					  
							      								    104 LOAD_FAST 22 ( base )					  
							      								    106 LOAD_FAST 21 ( base )					  
							      								    108 BUILD_TUPLE 21						  
							      								    110 LOAD_FAST 22 ( base )					  
							      								    112 LOAD_FAST 21 ( base )					  
							      								    114 LOAD_FAST 22 ( base )					  
							      								    116 LOAD_FAST 22 ( base )					  
							      								    118 BUILD_TUPLE 21						  
							      								    120 LOAD_FAST 22 ( base )					  
							      								    122 LOAD_FAST 22 ( base )					  
							      								    124 BUILD_TUPLE 21						  
							      								    126 LOAD_FAST 22 ( base )					  
							      								    128 LOAD_FAST 22 ( base )					  
							      								    130 BUILD_TUPLE 21						  
							      								    132 LOAD_FAST 22 ( base )					  
							      								    134 LOAD_FAST 21 ( base )					  
							      								    136 BUILD_TUPLE 21						  
							      								    138 LOAD_FAST 22 ( base )					  
							      								    140 LOAD_FAST 21 ( base )					  
							      								    142 BUILD_TUPLE 21						  
							      								    144 LOAD_FAST 22 ( base )					  
							      								    146 BUILD_TUPLE 21 NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10
--							      --							    --								  --
def isMultipleOf10 ( n ) :				      Disassembly of <code object isMultipleOf10 at 0x7fbac<<unk>>  Disassembly of <code object isMultipleOf10 at 0x7f816a6e4b70, error : /bin/bash: line 1: 24193 Segmentation faul
    return ( n % 15 == 0 )				      2 0 LOAD_FAST 0 ( n )					    16 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_CONST 1 ( 15 )					    2 LOAD_CONST 1 ( 15 )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 BINARY_MODULO						    4 COMPARE_OP 0 ( < )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 LOAD_CONST 2 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/EFFICIENT_WAY_C
							      8 COMPARE_OP 2 ( == )					    								  HECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10.dis
							      10 RETURN_VALUE NEW_LINE					    17 8 LOAD_FAST 0 ( n )					  
							      								    10 LOAD_CONST 2 ( 15 )					  
							      								    12 COMPARE_OP 0 ( < )					  
							      								    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    18 16 LOAD_FAST 0 ( n )					  
							      								    18 LOAD_CONST 3 ( 15 )					  
							      								    20 COMPARE_OP 0 ( < )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    19 >> 24 LOAD_FAST 0 ( n )					  
							      								    26 LOAD_CONST 4 ( 15 )					  
							      								    28 COMPARE_OP 0 ( < )					  
							      								    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    20 32 LOAD_FAST 0 ( n )					  
							      								    34 LOAD_CONST 5 ( 15 )					  
							      								    36 COMPARE_OP 0 ( < )					  
							      								    38 POP_JUMP_IF_FALSE 44					  
							      								    40 LOAD_FAST 0 ( n )					  
							      								    42 LOAD_CONST 6 ( 15 )					  
							      								    44 COMPARE_OP 0 ( < )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    21 48 LOAD_FAST 0 ( n )					  
							      								    50 LOAD_CONST 7 ( 15 )					  
							      								    52 COMPARE_OP 0 ( < )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    22 >> 56 LOAD_FAST 0 ( n )					  
							      								    58 LOAD_CONST 8 ( 15 )					  
							      								    60 COMPARE_OP 0 ( < )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    23 64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 9 ( 15 )					  
							      								    68 COMPARE_OP 0 ( < )					  
							      								    70 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    24 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 10 ( 15 )					  
							      								    76 COMPARE_OP 0 ( < )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    25 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 11 ( 15 )					  
							      								    84 COMPARE_OP 0 ( < )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    26 88 LOAD_FAST 0 ( n )					  
							      								    90 LOAD_CONST 12 ( 15 )					  
							      								    92 COMPARE_OP 0 ( < )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    27 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 13 ( 15 )					  
							      								    100 COMPARE_OP 0 ( < )					  
							      								    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    28 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 6 ( 15 )					  
							      								    108 COMPARE_OP 0 ( < )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    29 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_CONST 6 ( 15 )					  
							      								    116 COMPARE_OP 0 ( < )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    30 >> 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 6 ( 15 )					  
							      								    124 COMPARE_OP 0 ( < )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    31 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 6 ( 15 )					  
							      								    132 COMPARE_OP 0 ( < )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    32 136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 6 ( 15 )					  
							      								    140 COMPARE_OP 0 ( < )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    33 144 LOAD_FAST 0 ( n )					  
							      								    146 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
def getRemainder ( num , divisor ) :			      Disassembly of <code object getRemainder at 0x7fbac<<unk>> de Disassembly of <code object getRemainder at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    return ( num - divisor * ( num // divisor ) )	      2 0 LOAD_FAST 0 ( num )					    18 0 LOAD_CONST 1 ( - divisor )				  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 1 ( divisor )					    2 LOAD_FAST 0 ( num )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_FAST 0 ( num )					    4 LOAD_FAST 1 ( divisor )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 1 ( divisor )					    6 COMPARE_OP 2 ( == )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_FLOOR_DIVIDE					    8 POP_JUMP_IF_FALSE 20					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 BINARY_MULTIPLY					    								  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 BINARY_SUBTRACT					    19 10 LOAD_CONST 2 ( '%d divisor %d divisor %d divisor %d div n parse     constants[arg] = ast.literal_eval(argr
							      14 RETURN_VALUE NEW_LINE					    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      								    								  ib/python3.7/ast.py", line 91, in literal_eval
							      								    								   return _convert(node_or_string)   File "/home/ubu
							      								    								  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      								    								  line 90, in _convert	   return _convert_signed_nu
							      								    								  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      								    								  t/lib/python3.7/ast.py", line 58, in _convert_sign
							      								    								  ed_num     operand = _convert_num(node.operand)
							      								    								  File "/home/ubuntu/anaconda3/envs/dataset/lib/pyth
							      								    								  on3.7/ast.py", line 55, in _convert_num     raise
							      								    								  ValueError('malformed node or string: ' + repr(nod
							      								    								  e)) ValueError: malformed node or string: <_ast.Na
							      								    								  me object at 0x7f9367de2190>
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR
--							      --							    --								  --
def areaOfInscribedCircle ( a ) :			      Disassembly of <code object areaOfInscribedCircle at 0x7fbac< Disassembly of <code object areaOfInscriscriCircle at 0x7f816 script_not_found : None
    return ( PI / 4 ) * a * a				      2 0 LOAD_GLOBAL 0 ( PI )					    69 0 LOAD_CONST 1 ( PI )					  
							      2 LOAD_CONST 1 ( 4 )					    2 LOAD_CONST 2 ( 4 )					  
							      4 BINARY_TRUE_DIVIDE					    4 LOAD_CONST 3 ( ( '///////////////////////////////////////// 
							      6 LOAD_FAST 0 ( a )					    								  
							      8 BINARY_MULTIPLY						    								  
							      10 LOAD_FAST 0 ( a )					    								  
							      12 BINARY_MULTIPLY					    								  
							      14 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
def isPowerOfTwo ( x ) :				      Disassembly of <code object isPowerOfTwo at 0x7fbac<<unk>> d5 Disassembly of <code object isPowerOfTwo at 0x7f816a673a50, f error : /bin/bash: line 1: 24211 Segmentation faul
    return ( x and ( not ( x & ( x - 1 ) ) ) )		      2 0 LOAD_FAST 0 ( x )					    17 0 LOAD_FAST 0 ( x )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 JUMP_IF_FALSE_OR_POP 16					    2 LOAD_CONST 1 ( ( 1 , - 1 ) )				  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_FAST 0 ( x )					    4 COMPARE_OP 3 ( != )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 LOAD_FAST 0 ( x )					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/WRITE_ONE_LINE_
							      8 LOAD_CONST 1 ( 1 )					    								  C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1.
							      10 BINARY_SUBTRACT					    18 8 LOAD_FAST 0 ( x )					  dis
							      12 BINARY_AND						    10 LOAD_CONST 2 ( - 1 )					  
							      14 UNARY_NOT						    12 COMPARE_OP 3 ( != )					  
							      >> 16 RETURN_VALUE NEW_LINE				    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    19 16 LOAD_FAST 0 ( x )					  
							      								    18 LOAD_CONST 3 ( - 1 )					  
							      								    20 COMPARE_OP 3 ( != )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    20 >> 24 LOAD_FAST 0 ( x )					  
							      								    26 LOAD_CONST 4 ( - 1 )					  
							      								    28 COMPARE_OP 3 ( != )					  
							      								    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    21 32 LOAD_FAST 0 ( x )					  
							      								    34 LOAD_CONST 5 ( - 1 )					  
							      								    36 COMPARE_OP 3 ( != )					  
							      								    38 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    22 40 LOAD_FAST 0 ( x )					  
							      								    42 LOAD_CONST 6 ( - 1 )					  
							      								    44 COMPARE_OP 3 ( != )					  
							      								    46 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    23 48 LOAD_FAST 0 ( x )					  
							      								    50 LOAD_CONST 7 ( - 1 )					  
							      								    52 COMPARE_OP 3 ( != )					  
							      								    54 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    24 56 LOAD_FAST 0 ( x )					  
							      								    58 LOAD_CONST 8 ( - 1 )					  
							      								    60 COMPARE_OP 3 ( != )					  
							      								    62 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    25 64 LOAD_FAST 0 ( x )					  
							      								    66 LOAD_CONST 9 ( - 1 )					  
							      								    68 COMPARE_OP 3 ( != )					  
							      								    70 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    26 72 LOAD_FAST 0 ( x )					  
							      								    74 LOAD_CONST 10 ( - 1 )					  
							      								    76 COMPARE_OP 3 ( != )					  
							      								    78 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    27 80 LOAD_FAST 0 ( x )					  
							      								    82 LOAD_CONST 11 ( - 1 )					  
							      								    84 COMPARE_OP 3 ( != )					  
							      								    86 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    28 88 LOAD_FAST 0 ( x )					  
							      								    90 LOAD_CONST 12 ( - 1 )					  
							      								    92 COMPARE_OP 3 ( != )					  
							      								    94 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    29 96 LOAD_FAST 0 ( x )					  
							      								    98 LOAD_CONST 13 ( - 1 )					  
							      								    100 COMPARE_OP 3 ( != )					  
							      								    102 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    30 104 LOAD_FAST 0 ( x )					  
							      								    106 LOAD_CONST 14 ( - 1 )					  
							      								    108 COMPARE_OP 3 ( != )					  
							      								    110 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    31 112 LOAD_FAST 0 ( x )					  
							      								    114 LOAD_CONST 15 ( - 1 )					  
							      								    116 COMPARE_OP 3 ( != )					  
							      								    118 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    32 120 LOAD_FAST 0 ( x )					  
							      								    122 LOAD_CONST 15 ( - 1 )					  
							      								    124 COMPARE_OP 3 ( != )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    33 >> 128 LOAD_FAST 0 ( x )					  
							      								    130 LOAD_CONST 16 ( - 1 )					  
							      								    132 COMPARE_OP 3 ( != )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    34 >> 136 LOAD_FAST 0 ( x )					  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_HEXAGON					      AREA_OF_A_HEXAGON						    AREA_OF_A_HEXAGON						  AREA_OF_A_HEXAGON
--							      --							    --								  --
def hexagonArea ( s ) :					      Disassembly of <code object hexagonArea at 0x7fbac<<unk>> de4 Disassembly of <code object hexagonArea at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 ) ;      2 0 LOAD_CONST 1 ( 3 )					    65 0 LOAD_CONST 1 ( 3 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_GLOBAL 0 ( math )					    2 LOAD_CONST 2 ( 4 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_METHOD 1 ( sqrt )					    4 LOAD_CONST 3 ( 5 )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_CONST 1 ( 3 )					    6 LOAD_CONST 4 ( 6 )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 CALL_METHOD 1						    8 LOAD_CONST 5 ( 7 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      10 BINARY_MULTIPLY					    10 LOAD_CONST 6 ( 8 )					  pack non-iterable NoneType object
							      12 LOAD_FAST 0 ( s )					    12 LOAD_CONST 7 ( 9 )					  
							      14 LOAD_FAST 0 ( s )					    14 LOAD_CONST 8 ( 10 )					  
							      16 BINARY_MULTIPLY					    16 LOAD_CONST 9 ( 12 )					  
							      18 BINARY_MULTIPLY					    18 LOAD_CONST 10 ( 11 )					  
							      20 LOAD_CONST 2 ( 2 )					    20 LOAD_CONST 11 ( 12 )					  
							      22 BINARY_TRUE_DIVIDE					    22 LOAD_CONST 12 ( 14 )					  
							      24 RETURN_VALUE NEW_LINE					    24 LOAD_CONST 12 ( 14 )					  
							      								    26 LOAD_CONST 13 ( 14 )					  
							      								    28 LOAD_CONST 14 ( 16 )					  
							      								    30 LOAD_CONST 15 ( 14 )					  
							      								    32 LOAD_CONST 16 ( 14 )					  
							      								    34 LOAD_CONST 17 ( 16 )					  
							      								    36 LOAD_CONST 18 ( 17 )					  
							      								    38 LOAD_CONST 19 ( 16 )					  
							      								    40 LOAD_CONST 20 ( 18 )					  
							      								    42 LOAD_CONST 19 ( 17 )					  
							      								    44 LOAD_CONST 20 ( 18 )					  
							      								    46 LOAD_CONST 21 ( 19 )					  
							      								    48 LOAD_CONST 22 ( 20 )					  
							      								    50 LOAD_CONST 22 ( 20 )					  
							      								    52 LOAD_CONST 23 ( 22 )					  
							      								    54 LOAD_CONST 22 ( 20 )					  
							      								    56 LOAD_CONST 23 ( 22 )					  
							      								    58 LOAD_CONST 24 ( 20 )					  
							      								    60 LOAD_CONST 26 ( 21 )					  
							      								    62 LOAD_CONST 25 ( 22 )					  
							      								    64 LOAD_CONST 26 ( 20 )					  
							      								    66 LOAD_CONST 27 ( 22 )					  
							      								    68 LOAD_CONST 26 ( 21 )					  
							      								    70 LOAD_CONST 28 ( 22 )					  
							      								    72 LOAD_CONST 29 ( 22 )					  
							      								    74 LOAD_CONST 30 ( 20 )					  
							      								    76 LOAD_CONST 28 ( 22 )					  
							      								    78 LOAD_CONST 29 ( 22 )					  
							      								    80 LOAD_CONST 30 ( 20 )					  
							      								    82 LOAD_CONST 31 ( 22 )					  
							      								    84 LOAD_CONST 32 ( 21 )					  
							      								    86 LOAD_CONST 34 ( 20 )					  
							      								    88 LOAD_CONST 36 ( 22 )					  
							      								    90 LOAD_CONST 35 ( 20 )					  
							      								    92 LOAD_CONST 36 ( 22 )					  
							      								    94 LOAD_CONST 36 ( 21 )					  
							      								    96 LOAD_CONST 37 ( 22 )					  
							      								    98 LOAD_CONST 36 ( 20 )					  
							      								    100 LOAD_CONST 36 ( 22 )					  
							      								    102 LOAD_CONST 37 ( 22 )					  
							      								    104 LOAD_CONST 36 ( 24 )					  
							      								    106 LOAD_CONST 37 ( 26 )					  
							      								    108 LOAD_CONST 36 ( 20 )					  
							      								    110 LOAD_CONST 37 ( 22 )					  
							      								    112 LOAD_CONST 38 ( 24 )					  
							      								    114 LOAD_CONST 39 ( 26 )					  
							      								    116 LOAD_CONST 40 ( 20 )					  
							      								    118 LOAD_CONST 41 ( 22 )					  
							      								    120 LOAD_CONST 42 ( 24 )					  
							      								    122 LOAD_CONST 43 ( 26 )					  
							      								    124 LOAD_CONST 44 ( 20 )					  
							      								    126 LOAD_CONST 45 ( 22 )					  
							      								    128 LOAD_CONST 46 ( 20 )					  
							      								    130 LOAD_CONST 47 ( 22 )					  
							      								    132 LOAD_CONST 48 ( 20 )					  
							      								    134 LOAD_CONST 49 ( 22 )					  
							      								    136 LOAD_CONST 50 ( 20 )					  
							      								    138 LOAD_CONST 51 ( 22 )					  
							      								    140 LOAD_CONST 52 ( 24					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
def procal ( n ) :					      Disassembly of <code object procal at 0x7fbac<<unk>> d540, fi Disassembly of <code object procal at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )	      2 0 LOAD_CONST 1 ( 3.0 )					    20 0 LOAD_CONST 1 ( 3.0 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 2 ( 4.0 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MULTIPLY						    4 LOAD_CONST 3 ( 4.0 )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_CONST 2 ( 4.0 )					    6 LOAD_CONST 4 ( 4.0 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 0 ( n )					    8 LOAD_CONST 5 ( 4.0 )					  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 6 ( 4.0 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_MULTIPLY					    12 LOAD_CONST 7 ( 4.0 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_MULTIPLY					    14 LOAD_CONST 8 ( 4.0 )					  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_CONST 3 ( 1 )					    16 LOAD_CONST 9 ( 4.0 )					  s is too small
							      18 BINARY_SUBTRACT					    18 LOAD_CONST 10 ( 4.0 )					  
							      20 BINARY_TRUE_DIVIDE					    20 LOAD_CONST 11 ( 4.0 )					  
							      22 RETURN_VALUE NEW_LINE					    22 LOAD_CONST 12 ( 4.0 )					  
							      								    24 LOAD_CONST 12 ( 4.0 )					  
							      								    26 LOAD_CONST 13 ( 4.0 )					  
							      								    28 LOAD_CONST 14 ( 4.0 )					  
							      								    30 LOAD_CONST 15 ( 4.0 )					  
							      								    32 LOAD_CONST 16 ( 4.0 )					  
							      								    34 LOAD_CONST 17 ( 4.0 )					  
							      								    36 LOAD_CONST 18 ( 4.0 )					  
							      								    38 LOAD_CONST 19 ( 4.0 )					  
							      								    40 LOAD_CONST 20 ( 4.0 )					  
							      								    42 LOAD_CONST 21 ( 4.0 )					  
							      								    44 LOAD_CONST 22 ( 4.0 )					  
							      								    46 LOAD_CONST 23 ( 4.0 )					  
							      								    48 LOAD_CONST 22 ( 4.0 )					  
							      								    50 LOAD_CONST 23 ( 4.0 )					  
							      								    52 LOAD_CONST 24 ( 4.0 )					  
							      								    54 LOAD_CONST 23 ( 4.0 )					  
							      								    56 LOAD_CONST 22 ( 4.0 )					  
							      								    58 LOAD_CONST 23 ( 4.0 )					  
							      								    60 LOAD_CONST 24 ( 4.0 )					  
							      								    62 LOAD_CONST 23 ( 4.0 )					  
							      								    64 LOAD_CONST 24 ( 4.0 )					  
							      								    66 LOAD_CONST 25 ( 4.0 )					  
							      								    68 LOAD_CONST 26 ( 4.0 )					  
							      								    70 LOAD_CONST 25 ( 4.0 )					  
							      								    72 LOAD_CONST 26 ( 4.0 )					  
							      								    74 LOAD_CONST 28 ( 4.0 )					  
							      								    76 LOAD_CONST 29 ( 4.0 )					  
							      								    78 LOAD_CONST 30 ( 4.0 )					  
							      								    80 LOAD_CONST 29 ( 4.0 )					  
							      								    82 LOAD_CONST 30 ( 4.0 )					  
							      								    84 LOAD_CONST 31 ( 4.0 )					  
							      								    86 LOAD_CONST 32 ( 4.0 )					  
							      								    88 LOAD_CONST 34 ( 4.0 )					  
							      								    90 LOAD_CONST 33 ( 4.0 )					  
							      								    92 LOAD_CONST 34 ( 4.0 )					  
							      								    94 LOAD_CONST 35 ( 4.0 )					  
							      								    96 LOAD_CONST 36 ( 4.0 )					  
							      								    98 LOAD_CONST 34 ( 4.0 )					  
							      								    100 LOAD_CONST 35 ( 4.0 )					  
							      								    102 LOAD_CONST 36 ( 4.0 )					  
							      								    104 LOAD_CONST 37 ( 4.0 )					  
							      								    106 LOAD_CONST 38 ( 4.0 )					  
							      								    108 LOAD_CONST 39 ( 4.0 )					  
							      								    110 LOAD_CONST 40 ( 4.0 )					  
							      								    112 LOAD_CONST 41 ( 4.0 )					  
							      								    114 LOAD_CONST 41 ( 4.0 )					  
							      								    116 LOAD_CONST 40 ( 4.0 )					  
							      								    118 LOAD_CONST 41 ( 4.0 )					  
							      								    120 LOAD_CONST 41 ( 4.0 )					  
							      								    122 LOAD_CONST 40 ( 4.0 )					  
							      								    124 LOAD_CONST 41 ( 4.0 )					  
							      								    126 LOAD_CONST 41 ( 4.0 )					  
							      								    128 LOAD_CONST 42 ( 4.0 )					  
							      								    130 LOAD_CONST 43 ( 4.0 )					  
							      								    132 LOAD_CONST 44 ( 4.0 )					  
							      								    134 LOAD_CONST 43 ( 4.0 )					  
							      								    136 LOAD_CONST 44 ( 4.0 )					  
							      								    138 LOAD_CONST 43 ( 4.0 )					  
							      								    140 LOAD_CONST 44 ( 4.0 ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION						      TAIL_RECURSION						    TAIL_RECURSION						  TAIL_RECURSION
--							      --							    --								  --
def fact ( n ) :					      Disassembly of <code object fact at 0x7fbac<<unk>> de40, file Disassembly of <code object fact at 0x7f816a6e4b70, file "<di error : Traceback (most recent call last):   File
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 30, in <module>	  Fi
    return n * fact ( n - 1 )				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in fact TypeError: 'int' objec
							      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( fact )					  t is not subscriptable
							      								    								  
							      3 8 LOAD_CONST 2 ( 1 )					    27 8 LOAD_FAST 1 ( fact )					  
							      10 RETURN_VALUE						    10 LOAD_FAST 0 ( n )					  
							      								    12 LOAD_CONST 2 ( 1 )					  
							      4 >> 12 LOAD_FAST 0 ( n )					    14 BINARY_SUBSCR						  
							      14 LOAD_GLOBAL 0 ( fact )					    16 LOAD_CONST 3 ( 2 )					  
							      16 LOAD_FAST 0 ( n )					    18 BINARY_SUBSCR						  
							      18 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 4 ( 1 )					  
							      20 BINARY_SUBTRACT					    22 BINARY_SUBSCR						  
							      22 CALL_FUNCTION 1					    24 LOAD_CONST 5 ( 3 )					  
							      24 BINARY_MULTIPLY					    26 COMPARE_OP 2 ( == )					  
							      26 RETURN_VALUE NEW_LINE					    28 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      								    28 30 LOAD_FAST 1 ( fact )					  
							      								    32 LOAD_FAST 0 ( n )					  
							      								    34 LOAD_CONST 2 ( 1 )					  
							      								    36 BINARY_SUBSCR						  
							      								    38 LOAD_CONST 6 ( 4 )					  
							      								    40 COMPARE_OP 2 ( == )					  
							      								    42 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    29 44 LOAD_FAST 1 ( fact )					  
							      								    46 LOAD_FAST 0 ( n )					  
							      								    48 LOAD_CONST 2 ( 1 )					  
							      								    50 BINARY_SUBSCR						  
							      								    52 LOAD_CONST 7 ( 4 )					  
							      								    54 BINARY_SUBSCR						  
							      								    56 LOAD_CONST 8 ( 4 )					  
							      								    58 COMPARE_OP 2 ( == )					  
							      								    60 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    30 62 LOAD_FAST 1 ( fact )					  
							      								    64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 2 ( 1 )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 9 ( 4 )					  
							      								    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    31 76 LOAD_FAST 1 ( fact )					  
							      								    78 LOAD_FAST 0 ( n )					  
							      								    80 LOAD_CONST 2 ( 1 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_CONST 10 ( 4 )					  
							      								    86 COMPARE_OP 2 ( == )					  
							      								    88 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    32 90 LOAD_FAST 1 ( fact )					  
							      								    92 LOAD_FAST 0 ( n )					  
							      								    94 LOAD_CONST 2 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 11 ( 4 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 12 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 13 ( 2 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 14 ( 4 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    33 116 LOAD_FAST 1 ( fact )					  
							      								    118 LOAD_FAST 0 ( n )					  
							      								    120 LOAD_CONST 2 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 12 ( 1 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 13 ( 2 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 14 ( 4 )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    34 138 LOAD_FAST 1 ( fact )					  
							      								    140 LOAD_FAST 0 ( n )					  
							      								    142 LOAD_CONST 2 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 15 ( 2 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 16 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 17 ( 2 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 18 ( 4 )					  
							      								    160 BUILD_SLICE 2						  
							      								    162 BINARY_SUBSCR						  
							      								    164 RETURN_VALUE						  
							      								    								  
							      								    35 >> 166 LOAD_FAST 1 ( fact )				  
							      								    168 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
def surface_area_octahedron ( side ) :			      Disassembly of <code object surface_area_octahedron at 0x7fba Disassembly of <code object surface_area_octaron at 0x7f816a6 error : Traceback (most recent call last):   File
    return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )      2 0 LOAD_CONST 1 ( 2 )					    65 0 LOAD_CONST 1 ( 2 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_GLOBAL 0 ( math )					    2 LOAD_CONST 2 ( 3 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_METHOD 1 ( sqrt )					    4 LOAD_CONST 3 ( 4 )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_CONST 2 ( 3 )					    6 LOAD_CONST 4 ( 6 )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 CALL_METHOD 1						    8 LOAD_CONST 5 ( ( 'max_length' , 'max_length' ) )		  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 BINARY_MULTIPLY					    10 BUILD_CONST_KEY_MAP 3					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
							      12 LOAD_FAST 0 ( side )					    12 STORE_FAST 1 ( w )					  n parse     code.append(arg) ValueError: byte must
							      14 LOAD_FAST 0 ( side )					    								   be in range(0, 256)
							      16 BINARY_MULTIPLY					    66 14 LOAD_FAST 0 ( side )					  
							      18 BINARY_MULTIPLY					    16 LOAD_CONST 6 ( '' )					  
							      20 RETURN_VALUE NEW_LINE					    18 COMPARE_OP 2 ( == )					  
							      								    20 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    67 22 LOAD_FAST 0 ( side )					  
							      								    24 LOAD_CONST 7 ( '' )					  
							      								    26 COMPARE_OP 2 ( == )					  
							      								    28 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    68 30 LOAD_FAST 0 ( side )					  
							      								    32 LOAD_CONST 8 ( '' )					  
							      								    34 COMPARE_OP 2 ( == )					  
							      								    36 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      								    69 38 LOAD_FAST 0 ( side )					  
							      								    40 LOAD_CONST 9 ( '' )					  
							      								    42 COMPARE_OP 2 ( == )					  
							      								    44 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    70 46 LOAD_FAST 0 ( side )					  
							      								    48 LOAD_CONST 10 ( '' )					  
							      								    50 COMPARE_OP 2 ( == )					  
							      								    52 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    71 54 LOAD_FAST 0 ( side )					  
							      								    56 LOAD_CONST 10 ( '' )					  
							      								    58 COMPARE_OP 2 ( == )					  
							      								    60 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    72 62 LOAD_FAST 0 ( side )					  
							      								    64 LOAD_CONST 11 ( '' )					  
							      								    66 COMPARE_OP 2 ( == )					  
							      								    68 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    73 70 LOAD_FAST 0 ( side )					  
							      								    72 LOAD_CONST 12 ( '' )					  
							      								    74 COMPARE_OP 2 ( == )					  
							      								    76 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    74 78 LOAD_FAST 0 ( side )					  
							      								    80 LOAD_CONST 13 ( '' )					  
							      								    82 COMPARE_OP 2 ( == )					  
							      								    84 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    75 86 LOAD_FAST 0 ( side )					  
							      								    88 LOAD_CONST 6 ( '' )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      								    92 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    76 94 LOAD_FAST 0 ( side )					  
							      								    96 LOAD_CONST 6 ( '' )					  
							      								    98 JUMP_FORWARD 2 ( to 44 )					  
							      								    >> 100 LOAD_CONST 7 ( '' )					  
							      								    >> 102 COMPARE_OP 2 ( == )					  
							      								    104 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    77 106 LOAD_FAST 0 ( side )					  
							      								    108 LOAD_CONST 6 ( '' )					  
							      								    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    78 114 LOAD_FAST 0 ( side )					  
							      								    116 LOAD_CONST 6 ( '' )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    80 >> 122 LOAD_FAST 0 ( side )				  
							      								    124 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
def rectCount ( n , m ) :				      Disassembly of <code object rectCount at 0x7fbac<<unk>> de40, Disassembly of <code object rectCount at 0x7f816a677930, file error : Traceback (most recent call last):   File
    return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4	      2 0 LOAD_FAST 1 ( m )					    50 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MULTIPLY						    4 COMPARE_OP 4 ( > )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 0 ( n )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_CONST 1 ( 1 )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 BINARY_ADD						    51 8 LOAD_GLOBAL 0 ( int )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 BINARY_MULTIPLY					    10 LOAD_FAST 0 ( n )					  n parse     constants[arg] = ast.literal_eval(argr
							      14 LOAD_FAST 1 ( m )					    12 CALL_FUNCTION 1						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 2 ( 0 )					  ib/python3.7/ast.py", line 46, in literal_eval
							      18 BINARY_ADD						    16 COMPARE_OP 4 ( > )					   node_or_string = parse(node_or_string, mode='eval
							      20 BINARY_MULTIPLY					    18 POP_JUMP_IF_FALSE 28					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      22 LOAD_CONST 2 ( 4 )					    								  /python3.7/ast.py", line 35, in parse	    return c
							      24 BINARY_FLOOR_DIVIDE					    52 20 LOAD_GLOBAL 1 ( int )					  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      26 RETURN_VALUE NEW_LINE					    22 LOAD_FAST 0 ( n )					  le "<unknown>", line 1     >	   ^ SyntaxError: un
							      								    24 CALL_FUNCTION 1						  expected EOF while parsing
							      								    26 LOAD_CONST 3 ( 1 )					  
							      								    28 COMPARE_OP 4 ( > )					  
							      								    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    53 32 LOAD_GLOBAL 2 ( int )					  
							      								    34 LOAD_FAST 0 ( n )					  
							      								    36 CALL_FUNCTION 1						  
							      								    38 LOAD_CONST 4 ( > )					  
							      								    40 COMPARE_OP 4 ( > )					  
							      								    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    54 44 LOAD_GLOBAL 3 ( ValueError )				  
							      								    46 LOAD_CONST 5 ( 'Unknown cell %s must be a string of %s (%s 
							      								    48 LOAD_FAST 0 ( n )					  
							      								    50 BINARY_MODULO						  
							      								    52 CALL_FUNCTION 1						  
							      								    54 RAISE_VARARGS 1						  
							      								    >> 56 LOAD_CONST 6 ( None )					  
							      								    58 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1
--							      --							    --								  --
def countIntegralSolutions ( n ) :			      Disassembly of <code object countIntegralSolutions at 0x7fbac Disassembly of <code object countIntegralSolSolSolSolSolSolSo error : Traceback (most recent call last):   File
    return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )	      2 0 LOAD_GLOBAL 0 ( int )					    								  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( n )					    								  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_CONST 1 ( 1 )					    								  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 BINARY_ADD						    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 0 ( n )					    								  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_CONST 2 ( 2 )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_ADD						    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_MULTIPLY					    								  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_CONST 2 ( 2 )					    								  s is too small
							      18 BINARY_TRUE_DIVIDE					    								  
							      20 CALL_FUNCTION 1					    								  
							      22 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SEQUENCE_2_22_222					      SUM_SEQUENCE_2_22_222					    SUM_SEQUENCE_2_22_222					  SUM_SEQUENCE_2_22_222
--							      --							    --								  --
def sumOfSeries ( n ) :					      Disassembly of <code object sumOfSeries at 0x7fbac0e8bc90, fi Disassembly of <code object sumOfSeries at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    return 0.0246 * ( math.pow ( 10 , n ) - 1 - ( 9 * n ) )   2 0 LOAD_CONST 1 ( 0.0246 )				    16 0 LOAD_GLOBAL 0 ( 0.0246 )				  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_GLOBAL 0 ( math )					    2 LOAD_GLOBAL 1 ( math )					  (item)   File "main.py", line 30, in <module>	  Fi
							      4 LOAD_METHOD 1 ( pow )					    4 LOAD_METHOD 2 ( pow )					  le "<dis>", line 2, in sumOfSeries NameError: name
							      6 LOAD_CONST 2 ( 10 )					    6 LOAD_FAST 0 ( n )						   '0.0246' is not defined
							      8 LOAD_FAST 0 ( n )					    8 LOAD_CONST 1 ( 10 )					  
							      10 CALL_METHOD 2						    10 BINARY_MULTIPLY						  
							      12 LOAD_CONST 3 ( 1 )					    12 CALL_METHOD 1						  
							      14 BINARY_SUBTRACT					    14 CALL_FUNCTION 1						  
							      16 LOAD_CONST 4 ( 9 )					    16 RETURN_VALUE						  
							      18 LOAD_FAST 0 ( n )					    NEW_LINE							  
							      20 BINARY_MULTIPLY					    								  
							      22 BINARY_SUBTRACT					    								  
							      24 BINARY_MULTIPLY					    								  
							      26 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
def countNonEmptySubstr ( str ) :			      Disassembly of <code object countNonEmptySubstr at 0x7fbac<<u Disassembly of <code object countNonEmptySubstr at 0x7f816a67 error : Traceback (most recent call last):   File
    n = len ( str ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    return int ( n * ( n + 1 ) / 2 ) ;			      2 LOAD_FAST 0 ( str )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 29, in <module>	  Fi
							      4 CALL_FUNCTION 1						    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in countNonEmptySubstr Unbound
							      6 STORE_FAST 1 ( n )					    6 POP_JUMP_IF_FALSE 12					  LocalError: local variable 'n' referenced before a
							      								    								  ssignment
							      3 8 LOAD_GLOBAL 1 ( int )					    27 8 LOAD_CONST 2 ( '' )					  
							      10 LOAD_FAST 1 ( n )					    10 RETURN_VALUE						  
							      12 LOAD_FAST 1 ( n )					    								  
							      14 LOAD_CONST 1 ( 1 )					    28 >> 12 LOAD_CONST 3 ( '' )				  
							      16 BINARY_ADD						    14 RETURN_VALUE						  
							      18 BINARY_MULTIPLY					    NEW_LINE							  
							      20 LOAD_CONST 2 ( 2 )					    								  
							      22 BINARY_TRUE_DIVIDE					    								  
							      24 CALL_FUNCTION 1					    								  
							      26 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
def sumOfSeries ( n ) :					      Disassembly of <code object sumOfSeries at 0x7fbac<<unk>> d54 Disassembly of <code object sumOfSeries at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ;	      2 0 LOAD_CONST 1 ( 0.666 )				    26 0 LOAD_CONST 1 ( ( 0.666 ) * pow ( 10 ) )		  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 2 ( 1 )					    2 LOAD_CONST 2 ( 10 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_CONST 2 ( 1 )					    4 BINARY_MULTIPLY						  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_GLOBAL 0 ( pow )					    6 RETURN_VALUE						  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_CONST 3 ( 10 )					    NEW_LINE							  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 LOAD_FAST 0 ( n )					    								  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 CALL_FUNCTION 2					    								  n parse     constants[arg] = ast.literal_eval(argr
							      14 BINARY_TRUE_DIVIDE					    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 BINARY_SUBTRACT					    								  ib/python3.7/ast.py", line 91, in literal_eval
							      18 BINARY_MULTIPLY					    								   return _convert(node_or_string)   File "/home/ubu
							      20 RETURN_VALUE NEW_LINE					    								  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      								    								  line 90, in _convert	   return _convert_signed_nu
							      								    								  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      								    								  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      								    								  ed_num     return _convert_num(node)	 File "/home
							      								    								  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      								    								  y", line 55, in _convert_num	   raise ValueError(
							      								    								  'malformed node or string: ' + repr(node)) ValueEr
							      								    								  ror: malformed node or string: <_ast.BinOp object
							      								    								  at 0x7fcc841a9350>
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
def gcd ( a , b ) :					      Disassembly of <code object gcd at 0x7fbac<<unk>> de40, file  Disassembly of <code object gcd at 0x7f816a6e4b70, file "<dis error : Traceback (most recent call last):   File
    if a == 0 :						      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 60, in <module>	exec
	return b					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 30, in <module>	  Fi
    return gcd ( b % a , a )				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in gcd TypeError: 'int' object
							      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( b )					   is not subscriptable
							      								    								  
							      3 8 LOAD_FAST 1 ( b )					    27 8 LOAD_FAST 1 ( b )					  
							      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
							      								    12 BINARY_SUBSCR						  
							      4 >> 12 LOAD_GLOBAL 0 ( gcd )				    14 STORE_FAST 2 ( b )					  
							      14 LOAD_FAST 1 ( b )					    								  
							      16 LOAD_FAST 0 ( a )					    28 16 LOAD_FAST 1 ( b )					  
							      18 BINARY_MODULO						    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_FAST 0 ( a )					    20 BINARY_SUBSCR						  
							      22 CALL_FUNCTION 2					    22 STORE_FAST 3 ( b )					  
							      24 RETURN_VALUE NEW_LINE					    								  
							      								    29 24 LOAD_FAST 1 ( b )					  
							      								    26 LOAD_CONST 4 ( 2 )					  
							      								    28 BINARY_SUBSCR						  
							      								    30 STORE_FAST 4 ( b )					  
							      								    								  
							      								    30 32 LOAD_FAST 1 ( b )					  
							      								    34 LOAD_CONST 5 ( '%d = %d %d %d' )				  
							      								    36 LOAD_FAST 4 ( b )					  
							      								    38 BINARY_MODULO						  
							      								    40 LOAD_FAST 2 ( b )					  
							      								    42 BINARY_MODULO						  
							      								    44 LOAD_FAST 3 ( b )					  
							      								    46 BINARY_MODULO						  
							      								    48 BUILD_TUPLE 2						  
							      								    50 BINARY_MODULO						  
							      								    52 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2
--							      --							    --								  --
def singleNumber ( nums ) :				      Disassembly of <code object singleNumber at 0x7fbac<<unk>> de Disassembly of <code object singleNumber at 0x7f816a6e4b70, f script_not_found : None
    return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2    2 0 LOAD_CONST 1 ( 3 )					    26 0 LOAD_CONST 1 ( 3 )					  
							      2 LOAD_GLOBAL 0 ( sum )					    2 LOAD_CONST 2 ( ( 3 , 4 ) )				  
							      4 LOAD_GLOBAL 1 ( set )					    4 LOAD_CONST 3 ( ( 'n' , 'n' ) )				  
							      6 LOAD_FAST 0 ( nums )					    6 BUILD_CONST_KEY_MAP 2					  
							      8 CALL_FUNCTION 1						    8 STORE_FAST 1 ( n )					  
							      10 CALL_FUNCTION 1					    								  
							      12 BINARY_MULTIPLY					    27 10 LOAD_FAST 1 ( n )					  
							      14 LOAD_GLOBAL 0 ( sum )					    12 LOAD_CONST 4 ( 1 )					  
							      16 LOAD_FAST 0 ( nums )					    14 COMPARE_OP 2 ( == )					  
							      18 CALL_FUNCTION 1					    16 POP_JUMP_IF_FALSE 28					  
							      20 BINARY_SUBTRACT					    								  
							      22 LOAD_CONST 2 ( 2 )					    28 18 LOAD_FAST 1 ( n )					  
							      24 BINARY_TRUE_DIVIDE					    20 LOAD_CONST 5 ( 1 )					  
							      26 RETURN_VALUE NEW_LINE					    22 COMPARE_OP 2 ( == )					  
							      								    24 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    29 26 LOAD_FAST 1 ( n )					  
							      								    28 LOAD_CONST 6 ( 2 )					  
							      								    30 COMPARE_OP 2 ( == )					  
							      								    32 POP_JUMP_IF_FALSE 38					  
							      								    34 LOAD_FAST 1 ( n )					  
							      								    36 LOAD_CONST 7 ( 2 )					  
							      								    38 COMPARE_OP 2 ( == )					  
							      								    40 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    30 >> 42 LOAD_FAST 1 ( n )					  
							      								    44 LOAD_CONST 5 ( 1 )					  
							      								    46 COMPARE_OP 2 ( == )					  
							      								    48 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    31 50 LOAD_FAST 1 ( n )					  
							      								    52 LOAD_CONST 5 ( 1 )					  
							      								    54 COMPARE_OP 2 ( == )					  
							      								    56 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    32 58 LOAD_FAST 1 ( n )					  
							      								    60 LOAD_CONST 5 ( 1 )					  
							      								    62 COMPARE_OP 2 ( == )					  
							      								    64 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    33 66 LOAD_FAST 1 ( n )					  
							      								    68 LOAD_CONST 5 ( 1 )					  
							      								    70 COMPARE_OP 2 ( == )					  
							      								    72 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    34 74 LOAD_FAST 1 ( n )					  
							      								    76 LOAD_CONST 7 ( 2 )					  
							      								    78 COMPARE_OP 2 ( == )					  
							      								    80 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    35 82 LOAD_FAST 1 ( n )					  
							      								    84 LOAD_CONST 5 ( 1 )					  
							      								    86 COMPARE_OP 2 ( == )					  
							      								    88 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    36 >> 90 LOAD_FAST 1 ( n )					  
							      								    92 LOAD_CONST 5 ( 1 )					  
							      								    94 COMPARE_OP 2 ( == )					  
							      								    96 POP_JUMP_IF_FALSE 104					  
							      								    								  
							      								    37 98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_CONST 5 ( 1 )					  
							      								    102 COMPARE_OP 2 ( == )					  
							      								    104 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    38 106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_CONST 5 ( 1 )					  
							      								    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    39 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 5 ( 1 )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    40 122 LOAD_FAST 1 ( n )					  
							      								    124 LOAD_CONST 5 ( 1 )					  
							      								    126 COMPARE_OP 2 ( == )					  
							      								    128 POP_JUMP_IF_FALSE 126					  
							      								    130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_CONST 5 ( 1 )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    41 >> 138 LOAD_FAST 1 ( n )					  
							      								    140 RETURN_VALUE						  
							      								    								  
							      								    42 >> 142 LOAD_FAST 1 ( n )					  
							      								    144								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
def minSum ( A ) :					      Disassembly of <code object minSum at 0x7fbac<<unk>> d540, fi Disassembly of <code object minSum at 0x7f816a673a50, file "< script_not_found : None
    min_val = min ( A ) ;				      2 0 LOAD_GLOBAL 0 ( min )					    26 0 LOAD_FAST 1 ( min_val )				  
    return min_val * ( len ( A ) - 1 )			      2 LOAD_FAST 0 ( A )					    2 LOAD_FAST 0 ( A )						  
							      4 CALL_FUNCTION 1						    4 BINARY_MULTIPLY						  
							      6 STORE_FAST 1 ( min_val )				    6 LOAD_FAST 0 ( A )						  
							      								    8 BINARY_MULTIPLY						  
							      3 8 LOAD_FAST 1 ( min_val )				    10 LOAD_FAST 0 ( A )					  
							      10 LOAD_GLOBAL 1 ( len )					    12 BINARY_MULTIPLY						  
							      12 LOAD_FAST 0 ( A )					    14 LOAD_FAST 0 ( A )					  
							      14 CALL_FUNCTION 1					    16 BINARY_MULTIPLY						  
							      16 LOAD_CONST 1 ( 1 )					    18 LOAD_FAST 0 ( A )					  
							      18 BINARY_SUBTRACT					    20 BINARY_MULTIPLY						  
							      20 BINARY_MULTIPLY					    22 BINARY_ADD						  
							      22 RETURN_VALUE NEW_LINE					    24 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
def Resources ( process , need ) :			      Disassembly of <code object Resources at 0x7fbac0e89d20, file Disassembly of <code object Resources at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    minResources = 0					      2 0 LOAD_CONST 1 ( 0 )					    113 0 LOAD_GLOBAL 0 ( minResources )			  "XLM/dis_script.py", line 59, in <module>	for
    minResources = process * ( need - 1 ) + 1		      2 STORE_FAST 2 ( minResources )				    2 LOAD_METHOD 1 ( need )					  item in run_dis_script():   File "XLM/dis_script.p
    return minResources					      								    4 LOAD_CONST 1 ( 1 )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      3 4 LOAD_FAST 0 ( process )				    6 CALL_METHOD 1						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      6 LOAD_FAST 1 ( need )					    8 POP_TOP							  assembler.py", line 81, in to_co     co_consts.app
							      8 LOAD_CONST 2 ( 1 )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 BINARY_SUBTRACT					    114 10 LOAD_GLOBAL 2 ( len )				  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 BINARY_MULTIPLY					    12 LOAD_FAST 0 ( process )					  co	 self.co_cellvars, ValueError: code: varname
							      14 LOAD_CONST 2 ( 1 )					    14 CALL_FUNCTION 1						  s is too small
							      16 BINARY_ADD						    16 LOAD_CONST 2 ( 0 )					  
							      18 STORE_FAST 2 ( minResources )				    18 COMPARE_OP 4 ( > )					  
							      								    20 POP_JUMP_IF_FALSE 30					  
							      4 20 LOAD_FAST 2 ( minResources )				    22 LOAD_FAST 0 ( process )					  
							      22 RETURN_VALUE NEW_LINE					    24 LOAD_CONST 3 ( 1 )					  
							      								    26 COMPARE_OP 4 ( > )					  
							      								    28 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    115 30 LOAD_FAST 0 ( process )				  
							      								    32 LOAD_METHOD 3 ( append )					  
							      								    34 LOAD_CONST 4 ( '{} {} {}' )				  
							      								    36 LOAD_METHOD 4 ( format )					  
							      								    38 LOAD_FAST 0 ( process )					  
							      								    40 CALL_METHOD 1						  
							      								    42 CALL_METHOD 1						  
							      								    44 POP_TOP							  
							      								    >> 46 LOAD_CONST 0 ( None )					  
							      								    48 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE				      LONGEST_INCREASING_SUBSEQUENCE				    LONGEST_INCREASING_SUBSEQUENCE				  LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr ) :					      Disassembly of <code object lis at 0x7fbac<<unk>> de40, file  Disassembly of <code object lis at 0x7f816a6e4b70, file "<dis script_not_found : None
    global maximum					      3 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( n )					  
    n = len ( arr )					      2 LOAD_FAST 0 ( arr )					    2 LOAD_CONST 1 ( 'States' )					  
    maximum = 1						      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    _lis ( arr , n )					      6 STORE_FAST 1 ( n )					    6 STORE_FAST 2 ( c )					  
    return maximum					      								    								  
							      4 8 LOAD_CONST 1 ( 1 )					    27 8 LOAD_FAST 0 ( arr )					  
							      10 STORE_GLOBAL 1 ( maximum )				    10 LOAD_METHOD 0 ( append )					  
							      								    12 LOAD_FAST 2 ( c )					  
							      5 12 LOAD_GLOBAL 2 ( _lis )				    14 CALL_METHOD 1						  
							      14 LOAD_FAST 0 ( arr )					    16 POP_TOP							  
							      16 LOAD_FAST 1 ( n )					    								  
							      18 CALL_FUNCTION 2					    28 18 LOAD_FAST 0 ( arr )					  
							      20 POP_TOP						    20 LOAD_METHOD 0 ( append )					  
							      								    22 LOAD_FAST 1 ( n )					  
							      6 22 LOAD_GLOBAL 1 ( maximum )				    24 CALL_METHOD 1						  
							      24 RETURN_VALUE NEW_LINE					    26 POP_TOP							  
							      								    28 LOAD_CONST 0 ( None )					  
							      								    30 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_MID_POINT_LINE				      PROGRAM_FIND_MID_POINT_LINE				    PROGRAM_FIND_MID_POINT_LINE					  PROGRAM_FIND_MID_POINT_LINE
--							      --							    --								  --
def midpoint ( x1 , x2 , y1 , y2 ) :			      Disassembly of <code object midpoint at 0x7fbac<<unk>> de40,  Disassembly of <code object midpoint at 0x7f816a673a50, file  script_not_found : None
    print ( ( x1 + x2 ) // 2 , " , " , ( y1 + y2 ) // 2 )     2 0 LOAD_GLOBAL 0 ( print )				    746 0 LOAD_GLOBAL 0 ( print )				  
							      2 LOAD_FAST 0 ( x1 )					    2 LOAD_CONST 1 ( '+' )					  
							      4 LOAD_FAST 1 ( x2 )					    4 LOAD_FAST 0 ( x1 )					  
							      6 BINARY_ADD						    6 BINARY_MULTIPLY						  
							      8 LOAD_CONST 1 ( 2 )					    8 CALL_FUNCTION 1						  
							      10 BINARY_FLOOR_DIVIDE					    10 POP_TOP							  
							      12 LOAD_CONST 2 ( ' , ' )					    								  
							      14 LOAD_FAST 2 ( y1 )					    747 12 LOAD_GLOBAL 1 ( print )				  
							      16 LOAD_FAST 3 ( y2 )					    14 LOAD_CONST 2 ( '+' )					  
							      18 BINARY_ADD						    16 LOAD_FAST 0 ( x1 )					  
							      20 LOAD_CONST 1 ( 2 )					    18 BINARY_MULTIPLY						  
							      22 BINARY_FLOOR_DIVIDE					    20 CALL_FUNCTION 1						  
							      24 CALL_FUNCTION 3					    22 POP_TOP							  
							      26 POP_TOP						    24 LOAD_CONST 0 ( None )					  
							      28 LOAD_CONST 0 ( None )					    26 RETURN_VALUE						  
							      30 RETURN_VALUE NEW_LINE					    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7fbac<<unk>> de40, Disassembly of <code object factorial at 0x7f816afaa150, file error : Traceback (most recent call last):   File
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    16 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in factorial UnboundLocalError
							      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( 1 )					  : local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 COMPARE_OP 2 ( == )					  
							      10 LOAD_CONST 2 ( 0 )					    10 POP_JUMP_IF_FALSE 20					  
							      12 COMPARE_OP 2 ( == )					    								  
							      14 POP_JUMP_IF_FALSE 20					    17 12 LOAD_FAST 1 ( n )					  
							      >> 16 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 0 )					  
							      18 RETURN_VALUE						    16 BINARY_SUBSCR						  
							      >> 20 LOAD_FAST 0 ( n )					    18 LOAD_CONST 3 ( 1 )					  
							      22 LOAD_GLOBAL 0 ( factorial )				    20 COMPARE_OP 2 ( == )					  
							      24 LOAD_FAST 0 ( n )					    22 POP_JUMP_IF_FALSE 28					  
							      26 LOAD_CONST 1 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    18 24 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 1					    26 LOAD_CONST 1 ( 0 )					  
							      32 BINARY_MULTIPLY					    28 BINARY_SUBSCR						  
							      34 RETURN_VALUE NEW_LINE					    30 LOAD_CONST 4 ( 1 )					  
							      								    32 BINARY_SUBSCR						  
							      								    34 LOAD_CONST 5 ( 1 )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      								    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    19 40 LOAD_FAST 1 ( n )					  
							      								    42 LOAD_CONST 1 ( 0 )					  
							      								    44 BINARY_SUBSCR						  
							      								    46 LOAD_CONST 6 ( 1 )					  
							      								    48 BINARY_SUBSCR						  
							      								    50 LOAD_CONST 7 ( 1 )					  
							      								    52 BINARY_SUBSCR						  
							      								    54 LOAD_CONST 8 ( 1 )					  
							      								    56 BINARY_SUBSCR						  
							      								    58 LOAD_CONST 9 ( 1 )					  
							      								    60 BINARY_SUBSCR						  
							      								    62 LOAD_CONST 10 ( 1 )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 LOAD_CONST 11 ( 1 )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 12 ( 1 )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_CONST 5 ( 1 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_CONST 12 ( 1 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 13 ( 1 )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 14 ( 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 12 ( 1 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 13 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 14 ( 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    19 104 LOAD_FAST 1 ( n )					  
							      								    106 LOAD_CONST 15 ( 1 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 16 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 17 ( 1 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 18 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 16 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 17 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 18 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 19 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 20 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 21 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 22 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 21 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 22 ( 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 21 ( 1 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 22 ( 1 )					  
							      								    164 BINARY_SUBSCR						  
							      								    166 LOAD_CONST 23 ( 1 )					  
							      								    168 BINARY_SUBSCR						  
							      								    170 LOAD_CONST 22 ( 1 )					  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 21 ( 1 )					  
							      								    176 BINARY_SUBSCR						  
							      								    178 LOAD_CONST 22 ( 1 )					  
							      								    180 BINARY_SUBSCR						  
							      								    182 LOAD_CONST 23 ( 1 )					  
							      								    184 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE      DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr ) :					      Disassembly of <code object lis at 0x7fbac<<unk>> de40, file  Disassembly of <code object lis at 0x7f816a6e4b70, file "<dis script_not_found : None
    global maximum					      3 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( n )					  
    n = len ( arr )					      2 LOAD_FAST 0 ( arr )					    2 LOAD_CONST 1 ( 'States' )					  
    maximum = 1						      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    _lis ( arr , n )					      6 STORE_FAST 1 ( n )					    6 STORE_FAST 2 ( c )					  
    return maximum					      								    								  
							      4 8 LOAD_CONST 1 ( 1 )					    27 8 LOAD_FAST 0 ( arr )					  
							      10 STORE_GLOBAL 1 ( maximum )				    10 LOAD_METHOD 0 ( append )					  
							      								    12 LOAD_FAST 2 ( c )					  
							      5 12 LOAD_GLOBAL 2 ( _lis )				    14 CALL_METHOD 1						  
							      14 LOAD_FAST 0 ( arr )					    16 POP_TOP							  
							      16 LOAD_FAST 1 ( n )					    								  
							      18 CALL_FUNCTION 2					    28 18 LOAD_FAST 0 ( arr )					  
							      20 POP_TOP						    20 LOAD_METHOD 0 ( append )					  
							      								    22 LOAD_FAST 1 ( n )					  
							      6 22 LOAD_GLOBAL 1 ( maximum )				    24 CALL_METHOD 1						  
							      24 RETURN_VALUE NEW_LINE					    26 POP_TOP							  
							      								    28 LOAD_CONST 0 ( None )					  
							      								    30 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
def isPossible ( str , n ) :				      Disassembly of <code object isPossible at 0x7fbac<<unk>> de40 Disassembly of <code object isPossible at 0x7f816a673a50, fil error : /bin/bash: line 1: 24339 Segmentation faul
    l = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    22 0 LOAD_FAST 0 ( str )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    if ( l >= n ) :					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 1 ( n )						  ataset/bin/python XLM/dis_script.py --script_path
	return True					      4 CALL_FUNCTION 1						    4 LOAD_CONST 1 ( 1 )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    return False					      6 STORE_FAST 2 ( l )					    6 BINARY_ADD						  eval_scripts/python_sa-dis_sa.test/CHECK_IF_STRING
							      								    8 LOAD_CONST 2 ( 2 )					  _REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBER_OF
							      3 8 LOAD_FAST 2 ( l )					    10 BINARY_ADD						  _CHARACTERS.dis
							      10 LOAD_FAST 1 ( n )					    12 LOAD_CONST 3 ( 3 )					  
							      12 COMPARE_OP 5 ( >= )					    14 BINARY_ADD						  
							      14 POP_JUMP_IF_FALSE 20					    16 LOAD_CONST 4 ( 4 )					  
							      								    18 BINARY_ADD						  
							      4 16 LOAD_CONST 1 ( True )				    20 LOAD_CONST 5 ( 1 )					  
							      18 RETURN_VALUE						    22 BINARY_ADD						  
							      								    24 LOAD_CONST 6 ( 2 )					  
							      5 >> 20 LOAD_CONST 2 ( False )				    26 BINARY_ADD						  
							      22 RETURN_VALUE NEW_LINE					    28 LOAD_CONST 7 ( 3 )					  
							      								    30 BINARY_ADD						  
							      								    32 LOAD_CONST 8 ( 4 )					  
							      								    34 BINARY_ADD						  
							      								    36 LOAD_CONST 9 ( 4 )					  
							      								    38 BINARY_ADD						  
							      								    40 LOAD_CONST 10 ( 2 )					  
							      								    42 BINARY_ADD						  
							      								    44 LOAD_CONST 11 ( 4 )					  
							      								    46 BINARY_ADD						  
							      								    48 LOAD_CONST 12 ( 4 )					  
							      								    50 BINARY_ADD						  
							      								    52 LOAD_CONST 12 ( 4 )					  
							      								    54 BINARY_ADD						  
							      								    56 LOAD_CONST 13 ( 4 )					  
							      								    58 BINARY_ADD						  
							      								    60 LOAD_CONST 14 ( 2 )					  
							      								    62 BINARY_ADD						  
							      								    64 LOAD_CONST 15 ( 4 )					  
							      								    66 BINARY_ADD						  
							      								    68 LOAD_CONST 16 ( 4 )					  
							      								    70 BINARY_ADD						  
							      								    72 LOAD_CONST 17 ( 4 )					  
							      								    74 BINARY_ADD						  
							      								    76 LOAD_CONST 18 ( 4 )					  
							      								    78 BINARY_ADD						  
							      								    80 LOAD_CONST 16 ( 4 )					  
							      								    82 BINARY_ADD						  
							      								    84 LOAD_CONST 17 ( 4 )					  
							      								    86 BINARY_ADD						  
							      								    88 LOAD_CONST 18 ( 4 )					  
							      								    90 BINARY_ADD						  
							      								    92 LOAD_CONST 19 ( 4 )					  
							      								    94 BINARY_ADD						  
							      								    96 LOAD_CONST 18 ( 4 )					  
							      								    98 BINARY_ADD						  
							      								    100 LOAD_CONST 19 ( 4 )					  
							      								    102 BINARY_ADD						  
							      								    104 LOAD_CONST 20 ( 4 )					  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_CONST 22 ( 4 )					  
							      								    110 BINARY_ADD						  
							      								    112 LOAD_CONST 21 ( 4 )					  
							      								    114 BINARY_ADD						  
							      								    116 LOAD_CONST 22 ( 4 )					  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_CONST 22 ( 4 )					  
							      								    122 BINARY_ADD						  
							      								    124 LOAD_CONST 23 ( 4 )					  
							      								    126 BINARY_ADD						  
							      								    128 LOAD_CONST 22 ( 4 )					  
							      								    130 BINARY_ADD						  
							      								    132 LOAD_CONST 23 ( 4 )					  
							      								    134 BINARY_ADD						  
							      								    136 LOAD_CONST 22 ( 4 )					  
							      								    138 LOAD_CONST 23 ( 4 )					  
							      								    140 LOAD_CONST 24 ( 4 )					  
							      								    142 LOAD_CONST 25 ( 4 )					  
							      								    144 LOAD_CONST 26 ( 4 )					  
							      								    146 LOAD_CONST 25 ( 4 )					  
							      								    148 LOAD_CONST 26 ( 2 )					  
							      								    150 LOAD_CONST 25 ( 4 )					  
							      								    152 LOAD_CONST 26 ( 2 )					  
							      								    154 LOAD_CONST 25 ( 4 )					  
							      								    156 LOAD_CONST 26 ( 2 )					  
							      								    158 LOAD_CONST 27 ( 4 )					  
							      								    160 LOAD_CONST 26 ( 2 )					  
							      								    162 LOAD_CONST 28 ( 4 )					  
							      								    164 LOAD_CONST 27 ( 4 )					  
							      								    166 LOAD_CONST 28 ( 4 )					  
							      								    168 LOAD_CONST 29 ( 4 )					  
							      								    170 LOAD_CONST 30 ( 2 )					  
							      								    172 LOAD_CONST 29 ( 4 )					  
							      								    174 LOAD_CONST 30 ( 2 )					  
							      								    176 LOAD_CONST 29 ( 4 )					  
							      								    178 LOAD_CONST 30 ( 2 )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
def sortit ( arr , n ) :				      Disassembly of <code object sortit at 0x7fbac0e89d20, file "< Disassembly of <code object sortit at 0x7f816a673a50, file "< error : /bin/bash: line 1: 24338 Segmentation faul
    for i in range ( n ) :				      2 0 SETUP_LOOP 28 ( to 30 )				    26 0 SETUP_LOOP 22 ( to 24 )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	arr [ i ] = i + 1				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( arr )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_FAST 1 ( n )					    4 GET_ITER							  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 CALL_FUNCTION 1						    >> 6 FOR_ITER 14 ( to 22 )					  eval_scripts/python_sa-dis_sa.test/SORT_ARRAY_CONT
							      8 GET_ITER						    8 STORE_FAST 1 ( n )					  AIN_1_N_VALUES.dis
							      >> 10 FOR_ITER 16 ( to 28 )				    								  
							      12 STORE_FAST 2 ( i )					    27 10 LOAD_FAST 1 ( n )					  
							      								    12 LOAD_CONST 1 ( 1 )					  
							      3 14 LOAD_FAST 2 ( i )					    14 INPLACE_ADD						  
							      16 LOAD_CONST 1 ( 1 )					    16 STORE_FAST 1 ( n )					  
							      18 BINARY_ADD						    								  
							      20 LOAD_FAST 0 ( arr )					    28 18 LOAD_FAST 1 ( n )					  
							      22 LOAD_FAST 2 ( i )					    20 LOAD_CONST 2 ( 0 )					  
							      24 STORE_SUBSCR						    22 COMPARE_OP 4 ( > )					  
							      26 JUMP_ABSOLUTE 10					    24 POP_JUMP_IF_FALSE 6					  
							      >> 28 POP_BLOCK						    								  
							      >> 30 LOAD_CONST 0 ( None )				    29 26 LOAD_FAST 1 ( n )					  
							      32 RETURN_VALUE NEW_LINE					    28 LOAD_CONST 3 ( 1 )					  
							      								    30 INPLACE_ADD						  
							      								    32 STORE_FAST 1 ( n )					  
							      								    34 JUMP_ABSOLUTE 6						  
							      								    >> 36 POP_BLOCK						  
							      								    								  
							      								    30 >> 38 LOAD_FAST 1 ( n )					  
							      								    40 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING      COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
def getAbs ( n ) :					      Disassembly of <code object getAbs at 0x7fbac0e89d20, file "< Disassembly of <code object getAbs at 0x7f816a6e4b70, file "< script_not_found : None
    mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;		      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
    return ( ( n + mask ) ^ mask ) ;			      2 LOAD_GLOBAL 0 ( SIZE_INT )				    2 LOAD_CONST 1 ( ( 'mask' , ) )				  
							      4 LOAD_GLOBAL 1 ( CHARBIT )				    4 COMPARE_OP 3 ( != )					  
							      6 BINARY_MULTIPLY						    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_CONST 1 ( 1 )					    								  
							      10 BINARY_SUBTRACT					    27 8 LOAD_GLOBAL 0 ( int )					  
							      12 BINARY_RSHIFT						    10 LOAD_FAST 0 ( n )					  
							      14 STORE_FAST 1 ( mask )					    12 CALL_FUNCTION 1						  
							      								    14 LOAD_CONST 2 ( ( 'mask' , ) )				  
							      3 16 LOAD_FAST 0 ( n )					    16 CALL_FUNCTION_KW 1					  
							      18 LOAD_FAST 1 ( mask )					    18 LOAD_CONST 3 ( ( 'mask' , ) )				  
							      20 BINARY_ADD						    20 CALL_FUNCTION_KW 1					  
							      22 LOAD_FAST 1 ( mask )					    22 STORE_FAST 1 ( mask )					  
							      24 BINARY_XOR						    								  
							      26 RETURN_VALUE NEW_LINE					    28 24 LOAD_FAST 1 ( mask )					  
							      								    26 LOAD_CONST 4 ( ( 'mask' , ) )				  
							      								    28 CALL_FUNCTION_KW 1					  
							      								    30 STORE_FAST 2 ( mask )					  
							      								    								  
							      								    29 32 LOAD_FAST 0 ( n )					  
							      								    34 LOAD_FAST 2 ( mask )					  
							      								    36 COMPARE_OP 3 ( != )					  
							      								    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    30 40 LOAD_FAST 2 ( mask )					  
							      								    42 LOAD_FAST 1 ( mask )					  
							      								    44 COMPARE_OP 3 ( != )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    31 48 LOAD_FAST 2 ( mask )					  
							      								    50 LOAD_FAST 1 ( mask )					  
							      								    52 COMPARE_OP 3 ( != )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    32 56 LOAD_FAST 2 ( mask )					  
							      								    58 LOAD_FAST 1 ( mask )					  
							      								    60 LOAD_CONST 5 ( ( 'mask' , ) )				  
							      								    62 CALL_FUNCTION_KW 1					  
							      								    64 RETURN_VALUE						  
							      								    >> 66 LOAD_CONST 6 ( None )					  
							      								    68 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_AREA_TETRAHEDRON				      CALCULATE_AREA_TETRAHEDRON				    CALCULATE_AREA_TETRAHEDRON					  CALCULATE_AREA_TETRAHEDRON
--							      --							    --								  --
def vol_tetra ( side ) :				      Disassembly of <code object vol_tetra at 0x7fbac0e8bc90, file Disassembly of <code object vol_tetra at 0x7f816a6e4ae0, file error : Traceback (most recent call last):   File
    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )	      2 0 LOAD_FAST 0 ( side )					    31 0 LOAD_FAST 1 ( volume )					  "XLM/dis_script.py", line 60, in <module>	exec
    return round ( volume , 2 )				      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  (item)   File "main.py", line 31, in <module>	  Fi
							      4 BINARY_POWER						    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in vol_tetra UnboundLocalError
							      6 LOAD_CONST 2 ( 6 )					    6 POP_JUMP_IF_FALSE 12					  : local variable 'volume' referenced before assign
							      8 LOAD_GLOBAL 0 ( math )					    								  ment
							      10 LOAD_METHOD 1 ( sqrt )					    32 8 LOAD_GLOBAL 0 ( round )				  
							      12 LOAD_CONST 3 ( 2 )					    10 LOAD_FAST 1 ( volume )					  
							      14 CALL_METHOD 1						    12 LOAD_CONST 2 ( 4 )					  
							      16 BINARY_MULTIPLY					    14 CALL_FUNCTION 2						  
							      18 BINARY_TRUE_DIVIDE					    16 LOAD_CONST 3 ( 1 )					  
							      20 STORE_FAST 1 ( volume )				    18 COMPARE_OP 2 ( == )					  
							      								    20 POP_JUMP_IF_FALSE 28					  
							      3 22 LOAD_GLOBAL 2 ( round )				    								  
							      24 LOAD_FAST 1 ( volume )					    33 22 LOAD_GLOBAL 1 ( round )				  
							      26 LOAD_CONST 3 ( 2 )					    24 LOAD_FAST 1 ( volume )					  
							      28 CALL_FUNCTION 2					    26 LOAD_CONST 2 ( 4 )					  
							      30 RETURN_VALUE NEW_LINE					    28 CALL_FUNCTION 2						  
							      								    30 LOAD_CONST 4 ( 1 )					  
							      								    32 COMPARE_OP 2 ( == )					  
							      								    34 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      								    34 36 LOAD_GLOBAL 2 ( round )				  
							      								    38 LOAD_FAST 1 ( volume )					  
							      								    40 LOAD_CONST 2 ( 4 )					  
							      								    42 CALL_FUNCTION 2						  
							      								    44 LOAD_CONST 5 ( 1 )					  
							      								    46 COMPARE_OP 2 ( == )					  
							      								    48 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    35 50 LOAD_GLOBAL 3 ( round )				  
							      								    52 LOAD_FAST 1 ( volume )					  
							      								    54 LOAD_CONST 2 ( 4 )					  
							      								    56 CALL_FUNCTION 2						  
							      								    58 LOAD_CONST 6 ( 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    36 64 LOAD_GLOBAL 4 ( round )				  
							      								    66 LOAD_FAST 1 ( volume )					  
							      								    68 LOAD_CONST 2 ( 4 )					  
							      								    70 CALL_FUNCTION 2						  
							      								    72 LOAD_CONST 7 ( 1 )					  
							      								    74 COMPARE_OP 2 ( == )					  
							      								    76 POP_JUMP_IF_FALSE 80					  
							      								    78 LOAD_GLOBAL 5 ( round )					  
							      								    80 LOAD_FAST 1 ( volume )					  
							      								    82 CALL_FUNCTION 1						  
							      								    84 LOAD_CONST 8 ( 1 )					  
							      								    86 COMPARE_OP 2 ( == )					  
							      								    88 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    37 >> 90 LOAD_GLOBAL 6 ( round )				  
							      								    92 LOAD_FAST 1 ( volume )					  
							      								    94 LOAD_CONST 9 ( 2 )					  
							      								    96 CALL_FUNCTION 2						  
							      								    98 LOAD_CONST 10 ( 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    38 104 LOAD_GLOBAL 7 ( round )				  
							      								    106 LOAD_FAST 1 ( volume )					  
							      								    108 CALL_FUNCTION 1						  
							      								    110 LOAD_CONST 11 ( 1 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    39 116 LOAD_GLOBAL 8 ( round )				  
							      								    118 LOAD_FAST 1 ( volume )					  
							      								    120 CALL_FUNCTION 1						  
							      								    122 LOAD_CONST 12 ( 1 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    40 128 LOAD_GLOBAL 9 ( round )				  
							      								    130 LOAD_FAST 1 ( volume )					  
							      								    132 LOAD_CONST 3 ( 1 )					  
							      								    134 CALL_FUNCTION 2						  
							      								    136 POP_TOP							  
							      								    								  
							      								    41 >> 138 LOAD_GLOBAL 10 ( round )				  
							      								    140 LOAD_FAST 1 ( volume )					  
							      								    142 CALL_FUNCTION 1						  
							      								    144 LOAD_CONST 12 ( 1 )					  
							      								    146 COMPARE_OP 2 ( == )					  
							      								    148 POP_JUMP_IF_FALSE 154					  
							      								    								  
							      								    42 150 LOAD_CONST 13 ( 1 )					  
							      								    152 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		      ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		    ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER			  ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7fbac<<unk>> d540, Disassembly of <code object factorial at 0x7f816afaa150, file error : Traceback (most recent call last):   File
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    16 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in factorial UnboundLocalError
							      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( 1 )					  : local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 COMPARE_OP 2 ( == )					  
							      10 LOAD_CONST 2 ( 0 )					    10 POP_JUMP_IF_FALSE 20					  
							      12 COMPARE_OP 2 ( == )					    								  
							      14 POP_JUMP_IF_FALSE 20					    17 12 LOAD_FAST 1 ( n )					  
							      >> 16 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 0 )					  
							      18 RETURN_VALUE						    16 BINARY_SUBSCR						  
							      >> 20 LOAD_FAST 0 ( n )					    18 LOAD_CONST 3 ( 1 )					  
							      22 LOAD_GLOBAL 0 ( factorial )				    20 COMPARE_OP 2 ( == )					  
							      24 LOAD_FAST 0 ( n )					    22 POP_JUMP_IF_FALSE 28					  
							      26 LOAD_CONST 1 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    18 24 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 1					    26 LOAD_CONST 1 ( 0 )					  
							      32 BINARY_MULTIPLY					    28 BINARY_SUBSCR						  
							      34 RETURN_VALUE NEW_LINE					    30 LOAD_CONST 4 ( 1 )					  
							      								    32 BINARY_SUBSCR						  
							      								    34 LOAD_CONST 5 ( 1 )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      								    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    19 40 LOAD_FAST 1 ( n )					  
							      								    42 LOAD_CONST 1 ( 0 )					  
							      								    44 BINARY_SUBSCR						  
							      								    46 LOAD_CONST 6 ( 1 )					  
							      								    48 BINARY_SUBSCR						  
							      								    50 LOAD_CONST 7 ( 1 )					  
							      								    52 BINARY_SUBSCR						  
							      								    54 LOAD_CONST 8 ( 1 )					  
							      								    56 BINARY_SUBSCR						  
							      								    58 LOAD_CONST 9 ( 1 )					  
							      								    60 BINARY_SUBSCR						  
							      								    62 LOAD_CONST 10 ( 1 )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 LOAD_CONST 11 ( 1 )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 12 ( 1 )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_CONST 5 ( 1 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_CONST 12 ( 1 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 13 ( 1 )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 14 ( 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 12 ( 1 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 13 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 14 ( 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    19 104 LOAD_FAST 1 ( n )					  
							      								    106 LOAD_CONST 15 ( 1 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 16 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 17 ( 1 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 18 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 16 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 17 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 18 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 19 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 20 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 21 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 22 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 21 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 22 ( 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 21 ( 1 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 22 ( 1 )					  
							      								    164 BINARY_SUBSCR						  
							      								    166 LOAD_CONST 23 ( 1 )					  
							      								    168 BINARY_SUBSCR						  
							      								    170 LOAD_CONST 22 ( 1 )					  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 21 ( 1 )					  
							      								    176 BINARY_SUBSCR						  
							      								    178 LOAD_CONST 22 ( 1 )					  
							      								    180 BINARY_SUBSCR						  
							      								    182 LOAD_CONST 23 ( 1 )					  
							      								    184 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1
--							      --							    --								  --
def MaximumHeight ( a , n ) :				      Disassembly of <code object MaximumHeight at 0x7fbac<<unk>> d Disassembly of <code object portHeight at 0x7f816a6e4b70, fil error : Traceback (most recent call last):   File
    return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2 2 0 LOAD_CONST 1 ( - 1 )					    26 0 LOAD_CONST 1 ( - 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_GLOBAL 0 ( int )					    2 LOAD_CONST 2 ( ( 'n' , ) )				  (item)   File "main.py", line 30, in <module>	  Fi
							      4 LOAD_GLOBAL 1 ( math )					    4 IMPORT_NAME 0 ( math )					  le "<dis>", line 2, in MaximumHeight ValueError: l
							      6 LOAD_METHOD 2 ( sqrt )					    6 IMPORT_FROM 1 ( n )					  evel must be >= 0
							      8 LOAD_CONST 2 ( 1 )					    8 STORE_FAST 1 ( n )					  
							      10 LOAD_CONST 3 ( 8 )					    10 POP_TOP							  
							      12 LOAD_FAST 1 ( n )					    								  
							      14 BINARY_MULTIPLY					    27 12 LOAD_FAST 1 ( n )					  
							      16 BINARY_ADD						    14 LOAD_CONST 3 ( 1 )					  
							      18 CALL_METHOD 1						    16 COMPARE_OP 2 ( == )					  
							      20 CALL_FUNCTION 1					    18 POP_JUMP_IF_FALSE 28					  
							      22 BINARY_ADD						    								  
							      24 LOAD_CONST 4 ( 2 )					    28 20 LOAD_CONST 4 ( - 1 )					  
							      26 BINARY_FLOOR_DIVIDE					    22 RETURN_VALUE						  
							      28 RETURN_VALUE NEW_LINE					    								  
							      								    29 >> 24 LOAD_CONST 5 ( - 1 )				  
							      								    26 RETURN_VALUE						  
							      								    28 LOAD_CONST 6 ( None )					  
							      								    30 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12_1				      SUM_SERIES_12_32_52_2N_12_1				    SUM_SERIES_12_32_52_2N_12_1					  SUM_SERIES_12_32_52_2N_12_1
--							      --							    --								  --
def sumOfSeries ( n ) :					      Disassembly of <code object sumOfSeries at 0x7fbac<<unk>> d54 Disassembly of <code object sumOfSeries at 0x7f816a6e4b70, fi error : /bin/bash: line 1: 24377 Segmentation faul
    return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )  2 0 LOAD_GLOBAL 0 ( int )					    26 0 LOAD_GLOBAL 0 ( int )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_CONST 1 ( 2 )					    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 LOAD_FAST 0 ( n )					    6 LOAD_CONST 1 ( 1 )					  eval_scripts/python_sa-dis_sa.test/SUM_SERIES_12_3
							      8 BINARY_MULTIPLY						    8 COMPARE_OP 2 ( == )					  2_52_2N_12_1.dis
							      10 LOAD_CONST 2 ( 1 )					    10 POP_JUMP_IF_FALSE 16					  
							      12 BINARY_SUBTRACT					    								  
							      14 BINARY_MULTIPLY					    27 12 LOAD_CONST 2 ( '%d = %d' )				  
							      16 LOAD_CONST 1 ( 2 )					    14 LOAD_FAST 0 ( n )					  
							      18 LOAD_FAST 0 ( n )					    16 BINARY_MODULO						  
							      20 BINARY_MULTIPLY					    18 RETURN_VALUE						  
							      22 LOAD_CONST 2 ( 1 )					    								  
							      24 BINARY_ADD						    28 >> 20 LOAD_GLOBAL 1 ( int )				  
							      26 BINARY_MULTIPLY					    22 LOAD_FAST 0 ( n )					  
							      28 LOAD_CONST 3 ( 3 )					    24 CALL_FUNCTION 1						  
							      30 BINARY_TRUE_DIVIDE					    26 LOAD_CONST 3 ( 1 )					  
							      32 CALL_FUNCTION 1					    28 BINARY_SUBTRACT						  
							      34 RETURN_VALUE NEW_LINE					    30 LOAD_CONST 4 ( 2 )					  
							      								    32 BINARY_TRUE_DIVIDE					  
							      								    34 CALL_FUNCTION 1						  
							      								    36 RETURN_VALUE						  
							      								    38 LOAD_CONST 0 ( None )					  
							      								    40 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		  HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
def turnOffK ( n , k ) :				      Disassembly of <code object turnOffK at 0x7fbac0e8bc90, file  Disassembly of <code object turnOffK at 0x7f816a601660, file  error : Traceback (most recent call last):   File
    if ( k <= 0 ) :					      2 0 LOAD_FAST 1 ( k )					    149 0 LOAD_FAST 1 ( k )					  "XLM/dis_script.py", line 60, in <module>	exec
	return n					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 30, in <module>	  Fi
    return ( n & ~ ( 1 << ( k - 1 ) ) )			      4 COMPARE_OP 1 ( <= )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in turnOffK TypeError: 'int' o
							      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 2 ( l )					  bject is not subscriptable
							      								    								  
							      3 8 LOAD_FAST 0 ( n )					    150 8 LOAD_FAST 0 ( n )					  
							      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
							      								    12 BINARY_SUBSCR						  
							      4 >> 12 LOAD_FAST 0 ( n )					    14 STORE_FAST 3 ( l )					  
							      14 LOAD_CONST 2 ( 1 )					    								  
							      16 LOAD_FAST 1 ( k )					    151 16 LOAD_FAST 2 ( l )					  
							      18 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 3 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBSCR						  
							      22 BINARY_LSHIFT						    22 STORE_FAST 4 ( l )					  
							      24 UNARY_INVERT						    								  
							      26 BINARY_AND						    152 24 LOAD_FAST 3 ( l )					  
							      28 RETURN_VALUE NEW_LINE					    26 LOAD_CONST 4 ( 1 )					  
							      								    28 BINARY_SUBSCR						  
							      								    30 LOAD_CONST 5 ( 1 )					  
							      								    32 BINARY_SUBSCR						  
							      								    34 STORE_FAST 5 ( l )					  
							      								    								  
							      								    153 36 LOAD_FAST 5 ( l )					  
							      								    38 LOAD_CONST 6 ( '%s %s %s' )				  
							      								    40 LOAD_FAST 4 ( l )					  
							      								    42 LOAD_FAST 5 ( l )					  
							      								    44 LOAD_FAST 1 ( k )					  
							      								    46 LOAD_FAST 5 ( l )					  
							      								    48 LOAD_FAST 6 ( l )					  
							      								    50 LOAD_FAST 5 ( l )					  
							      								    52 LOAD_FAST 1 ( k )					  
							      								    54 LOAD_FAST 5 ( l )					  
							      								    56 LOAD_FAST 6 ( l )					  
							      								    58 LOAD_FAST 1 ( k )					  
							      								    60 LOAD_FAST 5 ( l )					  
							      								    62 LOAD_FAST 6 ( l )					  
							      								    64 LOAD_FAST 7 ( l )					  
							      								    66 LOAD_FAST 8 ( l )					  
							      								    68 LOAD_FAST 9 ( l )					  
							      								    70 LOAD_FAST 10 ( l )					  
							      								    72 LOAD_FAST 11 ( l )					  
							      								    74 LOAD_FAST 12 ( l )					  
							      								    76 LOAD_FAST 13 ( l )					  
							      								    78 LOAD_FAST 14 ( l )					  
							      								    80 LOAD_FAST 15 ( l )					  
							      								    82 LOAD_FAST 14 ( l )					  
							      								    84 LOAD_FAST 15 ( l )					  
							      								    86 LOAD_FAST 16 ( l )					  
							      								    88 LOAD_FAST 15 ( l )					  
							      								    90 LOAD_FAST 15 ( l )					  
							      								    92 LOAD_FAST 16 ( l )					  
							      								    94 LOAD_FAST 17 ( l )					  
							      								    96 LOAD_FAST 18 ( l )					  
							      								    98 LOAD_FAST 19 ( l )					  
							      								    100 LOAD_FAST 20 ( l )					  
							      								    102 LOAD_FAST 21 ( l )					  
							      								    104 LOAD_FAST 20 ( l )					  
							      								    106 LOAD_FAST 22 ( l )					  
							      								    108 LOAD_FAST 21 ( l )					  
							      								    110 LOAD_FAST 22 ( l )					  
							      								    112 LOAD_FAST 23 ( l )					  
							      								    114 BUILD_TUPLE 15						  
							      								    116 LOAD_FAST 20 ( l )					  
							      								    118 LOAD_FAST 21 ( l )					  
							      								    120 LOAD_FAST 22 ( l )					  
							      								    122 LOAD_FAST 23 ( l )					  
							      								    124 LOAD_FAST 22 ( l )					  
							      								    126 BUILD_TUPLE 15						  
							      								    128 LOAD_FAST 20 ( l )					  
							      								    130 LOAD_FAST 21 ( l )					  
							      								    132 LOAD_FAST 22 ( l )					  
							      								    134 BUILD_TUPLE 15						  
							      								    136 BINARY_ADD						  
							      								    138 LOAD_FAST 20 ( l )					  
							      								    140 BUILD_TUPLE 15						  
							      								    142 BINARY_ADD						  
							      								    144 LOAD_FAST 5 ( l )					  
							      								    146 BINARY_ADD						  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL					      DOUBLE_FACTORIAL						    DOUBLE_FACTORIAL						  DOUBLE_FACTORIAL
--							      --							    --								  --
def doublefactorial ( n ) :				      Disassembly of <code object doublefactorial at 0x7fbac0e8bc90 Disassembly of <code object doublefactorial at 0x7f816a673a50 error : /bin/bash: line 1: 24392 Segmentation faul
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 0 ( n )					    149 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return 1 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    return n * doublefactorial ( n - 2 ) ;		      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/DOUBLE_FACTORIA
							      8 LOAD_FAST 0 ( n )					    								  L.dis
							      10 LOAD_CONST 2 ( 1 )					    150 8 LOAD_FAST 0 ( n )					  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_CONST 2 ( 2 )					  
							      14 POP_JUMP_IF_FALSE 20					    12 COMPARE_OP 2 ( == )					  
							      								    14 POP_JUMP_IF_FALSE 28					  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    								  
							      18 RETURN_VALUE						    151 16 LOAD_CONST 3 ( 1 )					  
							      								    18 RETURN_VALUE						  
							      4 >> 20 LOAD_FAST 0 ( n )					    								  
							      22 LOAD_GLOBAL 0 ( doublefactorial )			    152 >> 20 LOAD_CONST 4 ( 1 )				  
							      24 LOAD_FAST 0 ( n )					    22 RETURN_VALUE						  
							      26 LOAD_CONST 3 ( 2 )					    24 LOAD_CONST 0 ( None )					  
							      28 BINARY_SUBTRACT					    26 RETURN_VALUE						  
							      30 CALL_FUNCTION 1					    NEW_LINE							  
							      32 BINARY_MULTIPLY					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2
--							      --							    --								  --
def getRemainder ( num , divisor ) :			      Disassembly of <code object getRemainder at 0x7fbac0e89d20, f Disassembly of <code object getRemainder at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    while ( num >= divisor ) :				      2 0 SETUP_LOOP 20 ( to 22 )				    20 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
	num -= divisor ;				      >> 2 LOAD_FAST 0 ( num )					    2 STORE_FAST 1 ( divisor )					  item in run_dis_script():   File "XLM/dis_script.p
    return num ;					      4 LOAD_FAST 1 ( divisor )					    								  y", line 47, in run_dis_script     co_code, co_nlo
							      6 COMPARE_OP 5 ( >= )					    21 4 LOAD_FAST 1 ( divisor )				  cals, co_varnames, co_names, co_consts, co_linesta
							      8 POP_JUMP_IF_FALSE 20					    6 LOAD_CONST 2 ( 1 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      								    8 COMPARE_OP 2 ( == )					  pack non-iterable NoneType object
							      3 10 LOAD_FAST 0 ( num )					    10 POP_JUMP_IF_FALSE 20					  
							      12 LOAD_FAST 1 ( divisor )				    								  
							      14 INPLACE_SUBTRACT					    22 12 LOAD_CONST 3 ( '%s divisor for %s' )			  
							      16 STORE_FAST 0 ( num )					    14 LOAD_FAST 1 ( divisor )					  
							      18 JUMP_ABSOLUTE 2					    16 BINARY_MODULO						  
							      >> 20 POP_BLOCK						    18 STORE_FAST 1 ( divisor )					  
							      								    								  
							      4 >> 22 LOAD_FAST 0 ( num )				    23 20 LOAD_FAST 1 ( divisor )				  
							      24 RETURN_VALUE NEW_LINE					    22 LOAD_CONST 4 ( 1 )					  
							      								    24 COMPARE_OP 2 ( == )					  
							      								    26 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      								    24 28 LOAD_CONST 5 ( '%s divisor for %s' )			  
							      								    30 LOAD_FAST 1 ( divisor )					  
							      								    32 BINARY_MODULO						  
							      								    34 STORE_FAST 1 ( divisor )					  
							      								    								  
							      								    25 >> 36 LOAD_FAST 1 ( divisor )				  
							      								    38 LOAD_FAST 0 ( num )					  
							      								    40 LOAD_FAST 0 ( num )					  
							      								    42 LOAD_FAST 0 ( num )					  
							      								    44 LOAD_FAST 0 ( num )					  
							      								    46 LOAD_FAST 0 ( num )					  
							      								    48 LOAD_FAST 0 ( num )					  
							      								    50 LOAD_FAST 0 ( num )					  
							      								    52 LOAD_FAST 0 ( num )					  
							      								    54 LOAD_FAST 0 ( num )					  
							      								    56 LOAD_FAST 0 ( num )					  
							      								    58 LOAD_FAST 0 ( num )					  
							      								    60 LOAD_FAST 0 ( num )					  
							      								    62 LOAD_FAST 0 ( num )					  
							      								    64 LOAD_FAST 0 ( num )					  
							      								    66 LOAD_FAST 0 ( num )					  
							      								    68 LOAD_FAST 0 ( num )					  
							      								    70 LOAD_FAST 0 ( num )					  
							      								    72 LOAD_FAST 0 ( num )					  
							      								    74 LOAD_FAST 0 ( num )					  
							      								    76 LOAD_FAST 0 ( num )					  
							      								    78 LOAD_FAST 0 ( num )					  
							      								    80 LOAD_FAST 0 ( num )					  
							      								    82 LOAD_FAST 0 ( num )					  
							      								    84 LOAD_FAST 0 ( num )					  
							      								    86 LOAD_FAST 0 ( num )					  
							      								    88 LOAD_FAST 0 ( num )					  
							      								    90 LOAD_FAST 0 ( num )					  
							      								    92 LOAD_FAST 0 ( num )					  
							      								    94 LOAD_FAST 0 ( num )					  
							      								    96 LOAD_FAST 0 ( num )					  
							      								    98 LOAD_FAST 0 ( num )					  
							      								    100 LOAD_FAST 0 ( num )					  
							      								    102 LOAD_FAST 0 ( num )					  
							      								    104 LOAD_FAST 0 ( num )					  
							      								    106 LOAD_FAST 0 ( num )					  
							      								    108 LOAD_FAST 0 ( num )					  
							      								    110 LOAD_FAST 0 ( num )					  
							      								    112 LOAD_FAST 0 ( num )					  
							      								    114 LOAD_FAST 0 ( num )					  
							      								    116 LOAD_FAST 0 ( num )					  
							      								    118 LOAD_FAST 0 ( num )					  
							      								    120 LOAD_FAST 0 ( num )					  
							      								    122 LOAD_FAST 0 ( num )					  
							      								    124 LOAD_FAST 0 ( num )					  
							      								    126 LOAD_FAST 0 ( num )					  
							      								    128 LOAD_FAST 0 ( num )					  
							      								    130 LOAD_FAST 0 ( num )					  
							      								    132 LOAD_FAST 0 ( num )					  
							      								    134								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POWER_POWER_MOD_PRIME				      FIND_POWER_POWER_MOD_PRIME				    FIND_POWER_POWER_MOD_PRIME					  FIND_POWER_POWER_MOD_PRIME
--							      --							    --								  --
def calculate ( A , B , C , M ) :			      Disassembly of <code object calculate at 0x7fbac<<unk>> de40, Disassembly of <code object calculate at 0x7f8169feb660, file error : Traceback (most recent call last):   File
    res = pow ( B , C , M - 1 )				      2 0 LOAD_GLOBAL 0 ( pow )					    64 0 LOAD_GLOBAL 0 ( pow )					  "XLM/dis_script.py", line 59, in <module>	for
    ans = pow ( A , res , M )				      2 LOAD_FAST 1 ( B )					    2 LOAD_FAST 0 ( A )						  item in run_dis_script():   File "XLM/dis_script.p
    return ans						      4 LOAD_FAST 2 ( C )					    4 LOAD_FAST 1 ( B )						  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_FAST 3 ( M )					    6 LOAD_FAST 2 ( M )						  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_CONST 1 ( 1 )					    8 LOAD_FAST 3 ( alpha )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      10 BINARY_SUBTRACT					    10 LOAD_FAST 4 ( alpha )					  pack non-iterable NoneType object
							      12 CALL_FUNCTION 3					    12 LOAD_FAST 5 ( alpha )					  
							      14 STORE_FAST 4 ( res )					    14 LOAD_FAST 6 ( alpha )					  
							      								    16 LOAD_FAST 7 ( alpha )					  
							      3 16 LOAD_GLOBAL 0 ( pow )				    18 LOAD_FAST 8 ( alpha )					  
							      18 LOAD_FAST 0 ( A )					    20 LOAD_FAST 9 ( alpha )					  
							      20 LOAD_FAST 4 ( res )					    22 LOAD_FAST 10 ( alpha )					  
							      22 LOAD_FAST 3 ( M )					    24 LOAD_FAST 11 ( alpha )					  
							      24 CALL_FUNCTION 3					    26 LOAD_FAST 12 ( alpha )					  
							      26 STORE_FAST 5 ( ans )					    28 LOAD_FAST 13 ( alpha )					  
							      								    30 LOAD_FAST 14 ( alpha )					  
							      4 28 LOAD_FAST 5 ( ans )					    32 LOAD_FAST 15 ( alpha )					  
							      30 RETURN_VALUE NEW_LINE					    34 LOAD_FAST 14 ( alpha )					  
							      								    36 LOAD_FAST 15 ( alpha )					  
							      								    38 LOAD_FAST 16 ( alpha )					  
							      								    40 LOAD_FAST 17 ( alpha )					  
							      								    42 LOAD_FAST 18 ( alpha )					  
							      								    44 LOAD_FAST 19 ( alpha )					  
							      								    46 LOAD_FAST 20 ( alpha )					  
							      								    48 LOAD_FAST 21 ( alpha )					  
							      								    50 LOAD_FAST 22 ( alpha )					  
							      								    52 LOAD_FAST 21 ( alpha )					  
							      								    54 LOAD_FAST 22 ( alpha )					  
							      								    56 LOAD_FAST 21 ( alpha )					  
							      								    58 LOAD_FAST 22 ( alpha )					  
							      								    60 LOAD_FAST 21 ( alpha )					  
							      								    62 LOAD_FAST 22 ( alpha )					  
							      								    64 LOAD_FAST 21 ( alpha )					  
							      								    66 LOAD_FAST 22 ( alpha )					  
							      								    68 LOAD_FAST 21 ( alpha )					  
							      								    70 LOAD_FAST 22 ( alpha )					  
							      								    72 LOAD_FAST 23 ( alpha )					  
							      								    74 LOAD_FAST 22 ( alpha )					  
							      								    76 LOAD_FAST 23 ( alpha )					  
							      								    78 LOAD_FAST 22 ( alpha )					  
							      								    80 LOAD_FAST 23 ( alpha )					  
							      								    82 LOAD_FAST 22 ( alpha )					  
							      								    84 LOAD_FAST 24 ( alpha )					  
							      								    86 LOAD_FAST 23 ( alpha )					  
							      								    88 LOAD_FAST 22 ( alpha )					  
							      								    90 LOAD_FAST 23 ( alpha )					  
							      								    92 LOAD_FAST 24 ( alpha )					  
							      								    94 LOAD_FAST 22 ( alpha )					  
							      								    96 LOAD_FAST 23 ( alpha )					  
							      								    98 LOAD_FAST 22 ( alpha )					  
							      								    100 LOAD_FAST 24 ( alpha )					  
							      								    102 LOAD_FAST 23 ( alpha )					  
							      								    104 LOAD_FAST 24 ( alpha )					  
							      								    106 LOAD_FAST 26 ( alpha )					  
							      								    108 LOAD_FAST 25 ( alpha )					  
							      								    110 LOAD_FAST 26 ( alpha )					  
							      								    112 LOAD_FAST 27 ( alpha )					  
							      								    114 LOAD_FAST 28 ( alpha )					  
							      								    116 LOAD_FAST 30 ( alpha )					  
							      								    118 LOAD_FAST 29 ( alpha )					  
							      								    120 LOAD_FAST 30 ( alpha )					  
							      								    122 LOAD_FAST 30 ( alpha )					  
							      								    124 LOAD_FAST 30 ( alpha )					  
							      								    126 LOAD_FAST 30 ( alpha )					  
							      								    128 LOAD_FAST 30 ( alpha )					  
							      								    130 LOAD_FAST 30 ( alpha )					  
							      								    132 LOAD_FAST 30 ( alpha )					  
							      								    134 LOAD_FAST 31 ( alpha )					  
							      								    136 LOAD_FAST 30 ( alpha )					  
							      								    138 LOAD_FAST 31 ( alpha )					  
							      								    140 LOAD_FAST 30 ( alpha )					  
							      								    142								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1
--							      --							    --								  --
def compute_average ( a , b ) :				      Disassembly of <code object compute_average at 0x7fbac<<unk>> Disassembly of <code object compute_average at 0x7f816a673a50 error : Traceback (most recent call last):   File
    return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_CONST 1 ( 2 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 2 ( 3 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_FLOOR_DIVIDE					    4 LOAD_CONST 3 ( 4 )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_FAST 1 ( b )					    6 LOAD_CONST 4 ( 6 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_CONST 1 ( 2 )					    8 LOAD_CONST 5 ( 7 )					  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_FLOOR_DIVIDE					    10 LOAD_CONST 6 ( 8 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_ADD						    12 LOAD_CONST 7 ( 9 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 LOAD_FAST 0 ( a )					    14 LOAD_CONST 8 ( 10 )					  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_CONST 1 ( 2 )					    16 LOAD_CONST 9 ( 8 )					  s is too small
							      18 BINARY_MODULO						    18 LOAD_CONST 10 ( 9 )					  
							      20 LOAD_FAST 1 ( b )					    20 LOAD_CONST 11 ( 10 )					  
							      22 LOAD_CONST 1 ( 2 )					    22 LOAD_CONST 12 ( 11 )					  
							      24 BINARY_MODULO						    24 LOAD_CONST 12 ( 12 )					  
							      26 BINARY_ADD						    26 LOAD_CONST 13 ( 10 )					  
							      28 LOAD_CONST 1 ( 2 )					    28 LOAD_CONST 14 ( 12 )					  
							      30 BINARY_FLOOR_DIVIDE					    30 LOAD_CONST 15 ( 11 )					  
							      32 BINARY_ADD						    32 LOAD_CONST 16 ( 12 )					  
							      34 RETURN_VALUE NEW_LINE					    34 LOAD_CONST 17 ( 10 )					  
							      								    36 LOAD_CONST 18 ( 12 )					  
							      								    38 LOAD_CONST 19 ( 13 )					  
							      								    40 LOAD_CONST 20 ( 14 )					  
							      								    42 LOAD_CONST 21 ( 16 )					  
							      								    44 LOAD_CONST 22 ( 13 )					  
							      								    46 LOAD_CONST 22 ( 14 )					  
							      								    48 LOAD_CONST 23 ( 16 )					  
							      								    50 LOAD_CONST 22 ( 14 )					  
							      								    52 LOAD_CONST 23 ( 16 )					  
							      								    54 LOAD_CONST 22 ( 14 )					  
							      								    56 LOAD_CONST 23 ( 16 )					  
							      								    58 LOAD_CONST 24 ( 14 )					  
							      								    60 LOAD_CONST 26 ( 15 )					  
							      								    62 LOAD_CONST 25 ( 16 )					  
							      								    64 LOAD_CONST 26 ( 15 )					  
							      								    66 LOAD_CONST 27 ( 16 )					  
							      								    68 LOAD_CONST 28 ( 17 )					  
							      								    70 LOAD_CONST 30 ( 16 )					  
							      								    72 LOAD_CONST 28 ( 17 )					  
							      								    74 LOAD_CONST 30 ( 16 )					  
							      								    76 LOAD_CONST 29 ( 17 )					  
							      								    78 LOAD_CONST 30 ( 16 )					  
							      								    80 LOAD_CONST 28 ( 17 )					  
							      								    82 LOAD_CONST 29 ( 18 )					  
							      								    84 LOAD_CONST 30 ( 19 )					  
							      								    86 LOAD_CONST 32 ( 18 )					  
							      								    88 LOAD_CONST 33 ( 19 )					  
							      								    90 LOAD_CONST 34 ( 20 )					  
							      								    92 LOAD_CONST 36 ( 18 )					  
							      								    94 LOAD_CONST 35 ( 20 )					  
							      								    96 LOAD_CONST 36 ( 19 )					  
							      								    98 LOAD_CONST 36 ( 20 )					  
							      								    100 LOAD_CONST 37 ( 20 )					  
							      								    102 LOAD_CONST 36 ( 20 )					  
							      								    104 LOAD_CONST 37 ( 20 )					  
							      								    106 LOAD_CONST 38 ( 20 )					  
							      								    108 LOAD_CONST 39 ( 22 )					  
							      								    110 LOAD_CONST 40 ( 20 )					  
							      								    112 LOAD_CONST 41 ( 22 )					  
							      								    114 LOAD_CONST 41 ( 20 )					  
							      								    116 LOAD_CONST 40 ( 20 )					  
							      								    118 LOAD_CONST 41 ( 22 )					  
							      								    120 LOAD_CONST 42 ( 20 )					  
							      								    122 LOAD_CONST 43 ( 22 )					  
							      								    124 LOAD_CONST 44 ( 20 )					  
							      								    126 LOAD_CONST 43 ( 22 )					  
							      								    128 LOAD_CONST 44 ( 20 )					  
							      								    130 LOAD_CONST 45 ( 22 )					  
							      								    132 LOAD_CONST 46 ( 21 )					  
							      								    134 LOAD_CONST 47 ( 22 )					  
							      								    136 LOAD_CONST 48 ( 20 )					  
							      								    138 LOAD_CONST 50 ( 21 )					  
							      								    140 LOAD_CONST 51 ( 22 ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
def myCopy ( s1 , s2 ) :				      Disassembly of <code object myCopy at 0x7fbac<<unk>> d540, fi Disassembly of <code object myCopy at 0x7f816a6e4b70, file "< script_not_found : None
    for i in range ( len ( s1 ) ) :			      2 0 SETUP_LOOP 32 ( to 34 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	s2 [ i ] = s1 [ i ] ;				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
							      4 LOAD_GLOBAL 1 ( len )					    4 LOAD_FAST 0 ( s1 )					  
							      6 LOAD_FAST 0 ( s1 )					    6 CALL_FUNCTION 1						  
							      8 CALL_FUNCTION 1						    8 GET_ITER							  
							      10 CALL_FUNCTION 1					    >> 10 FOR_ITER 14 ( to 22 )					  
							      12 GET_ITER						    12 STORE_FAST 1 ( s2 )					  
							      >> 14 FOR_ITER 16 ( to 32 )				    								  
							      16 STORE_FAST 2 ( i )					    27 14 LOAD_FAST 1 ( s2 )					  
							      								    16 LOAD_METHOD 1 ( append )					  
							      3 18 LOAD_FAST 0 ( s1 )					    18 LOAD_FAST 0 ( s1 )					  
							      20 LOAD_FAST 2 ( i )					    20 CALL_METHOD 1						  
							      22 BINARY_SUBSCR						    22 POP_TOP							  
							      24 LOAD_FAST 1 ( s2 )					    24 JUMP_ABSOLUTE 10						  
							      26 LOAD_FAST 2 ( i )					    >> 26 POP_BLOCK						  
							      28 STORE_SUBSCR						    >> 28 LOAD_CONST 0 ( None )					  
							      30 JUMP_ABSOLUTE 14					    30 RETURN_VALUE						  
							      >> 32 POP_BLOCK						    NEW_LINE							  
							      >> 34 LOAD_CONST 0 ( None )				    								  
							      36 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
def countSetBits ( n ) :				      Disassembly of <code object countSetBits at 0x7fbac0e8bc90, f Disassembly of <code object countSetBits at 0x7f816a6e4ae0, f failure : #Results: 0, 10
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    else :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return ( n & 1 ) + countSetBits ( n >> 1 )	      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      3 8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_CONST 2 ( 1 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      5 >> 12 LOAD_FAST 0 ( n )					    28 >> 12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 BINARY_AND						    16 COMPARE_OP 2 ( == )					  
							      18 LOAD_GLOBAL 0 ( countSetBits )				    18 POP_JUMP_IF_FALSE 28					  
							      20 LOAD_FAST 0 ( n )					    								  
							      22 LOAD_CONST 2 ( 1 )					    29 20 LOAD_CONST 3 ( 1 )					  
							      24 BINARY_RSHIFT						    22 RETURN_VALUE						  
							      26 CALL_FUNCTION 1					    								  
							      28 BINARY_ADD						    30 >> 24 LOAD_CONST 4 ( 1 )					  
							      30 RETURN_VALUE						    26 RETURN_VALUE						  
							      32 LOAD_CONST 0 ( None )					    28 LOAD_CONST 0 ( None )					  
							      34 RETURN_VALUE NEW_LINE					    30 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
def getOddOccurrence ( arr ) :				      Disassembly of <code object getOddOccurrence at 0x7fbac0e8bc9 Disassembly of <code object getOddOccurrence at 0x7f816a6e4b7 script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( arr )					  
    for element in arr :				      2 STORE_FAST 1 ( res )					    2 LOAD_METHOD 0 ( res )					  
	res = res ^ element				      								    4 CALL_METHOD 0						  
    return res						      3 4 SETUP_LOOP 20 ( to 26 )				    6 STORE_FAST 1 ( res )					  
							      6 LOAD_FAST 0 ( arr )					    								  
							      8 GET_ITER						    27 8 LOAD_FAST 1 ( res )					  
							      >> 10 FOR_ITER 12 ( to 24 )				    10 LOAD_METHOD 1 ( append )					  
							      12 STORE_FAST 2 ( element )				    12 LOAD_FAST 1 ( res )					  
							      								    14 CALL_METHOD 1						  
							      4 14 LOAD_FAST 1 ( res )					    16 POP_TOP							  
							      16 LOAD_FAST 2 ( element )				    								  
							      18 BINARY_XOR						    28 18 LOAD_FAST 1 ( res )					  
							      20 STORE_FAST 1 ( res )					    20 RETURN_VALUE						  
							      22 JUMP_ABSOLUTE 10					    NEW_LINE							  
							      >> 24 POP_BLOCK						    								  
							      								    								  
							      5 >> 26 LOAD_FAST 1 ( res )				    								  
							      28 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER				      COUNT_SET_BITS_IN_AN_INTEGER				    COUNT_SET_BITS_IN_AN_INTEGER				  COUNT_SET_BITS_IN_AN_INTEGER
--							      --							    --								  --
def countSetBits ( n ) :				      Disassembly of <code object countSetBits at 0x7fbac<<unk>> dd Disassembly of <code object countSetBits at 0x7f816a6e4ae0, f error : /bin/bash: line 1: 24448 Segmentation faul
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    18 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    while ( n ) :					      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  ataset/bin/python XLM/dis_script.py --script_path
	count += n & 1					      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	n >>= 1						      3 4 SETUP_LOOP 28 ( to 34 )				    19 4 LOAD_FAST 1 ( count )					  eval_scripts/python_sa-dis_sa.test/COUNT_SET_BITS_
    return count					      >> 6 LOAD_FAST 0 ( n )					    6 LOAD_CONST 1 ( 0 )					  IN_AN_INTEGER.dis
							      8 POP_JUMP_IF_FALSE 32					    8 COMPARE_OP 4 ( > )					  
							      								    10 POP_JUMP_IF_FALSE 20					  
							      4 10 LOAD_FAST 1 ( count )				    								  
							      12 LOAD_FAST 0 ( n )					    20 12 LOAD_CONST 2 ( 1 )					  
							      14 LOAD_CONST 2 ( 1 )					    14 STORE_FAST 1 ( count )					  
							      16 BINARY_AND						    								  
							      18 INPLACE_ADD						    21 >> 16 LOAD_FAST 1 ( count )				  
							      20 STORE_FAST 1 ( count )					    18 LOAD_CONST 3 ( 1 )					  
							      								    20 COMPARE_OP 4 ( > )					  
							      5 22 LOAD_FAST 0 ( n )					    22 POP_JUMP_IF_FALSE 28					  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 INPLACE_RSHIFT						    22 24 LOAD_CONST 4 ( 1 )					  
							      28 STORE_FAST 0 ( n )					    26 STORE_FAST 1 ( count )					  
							      30 JUMP_ABSOLUTE 6					    								  
							      >> 32 POP_BLOCK						    24 >> 28 LOAD_FAST 1 ( count )				  
							      								    30 LOAD_CONST 5 ( 1 )					  
							      6 >> 34 LOAD_FAST 1 ( count )				    32 COMPARE_OP 4 ( > )					  
							      36 RETURN_VALUE NEW_LINE					    34 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    25 36 LOAD_CONST 6 ( 1 )					  
							      								    38 STORE_FAST 1 ( count )					  
							      								    								  
							      								    26 >> 40 LOAD_FAST 1 ( count )				  
							      								    42 LOAD_CONST 7 ( 1 )					  
							      								    44 COMPARE_OP 4 ( > )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    27 48 LOAD_CONST 8 ( 1 )					  
							      								    50 STORE_FAST 1 ( count )					  
							      								    								  
							      								    28 >> 52 LOAD_FAST 1 ( count )				  
							      								    54 LOAD_CONST 9 ( 1 )					  
							      								    56 INPLACE_ADD						  
							      								    58 STORE_FAST 1 ( count )					  
							      								    								  
							      								    29 60 LOAD_FAST 1 ( count )					  
							      								    62 LOAD_CONST 10 ( 1 )					  
							      								    64 INPLACE_ADD						  
							      								    66 STORE_FAST 1 ( count )					  
							      								    								  
							      								    30 >> 68 LOAD_FAST 1 ( count )				  
							      								    70 LOAD_CONST 11 ( 2 )					  
							      								    72 INPLACE_ADD						  
							      								    74 STORE_FAST 1 ( count )					  
							      								    								  
							      								    31 76 LOAD_FAST 1 ( count )					  
							      								    78 LOAD_CONST 12 ( 2 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( count )					  
							      								    								  
							      								    32 84 LOAD_FAST 1 ( count )					  
							      								    86 LOAD_CONST 13 ( 2 )					  
							      								    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( count )					  
							      								    								  
							      								    33 92 LOAD_FAST 1 ( count )					  
							      								    94 LOAD_CONST 14 ( 2 )					  
							      								    96 INPLACE_ADD						  
							      								    98 STORE_FAST 1 ( count )					  
							      								    								  
							      								    34 100 LOAD_FAST 1 ( count )				  
							      								    102 LOAD_CONST 15 ( 1 )					  
							      								    104 INPLACE_ADD						  
							      								    106 STORE_FAST 1 ( count )					  
							      								    108 JUMP_FORWARD 14 ( to 128 )				  
							      								    								  
							      								    35 >> 110 LOAD_FAST 1 ( count )				  
							      								    112 LOAD_CONST 16 ( 1 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( count )					  
							      								    								  
							      								    36 >> 118 LOAD_FAST 1 ( count )				  
							      								    120 LOAD_CONST 16 ( 1 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( count )					  
							      								    126 JUMP_FORWARD 2 ( to 128 )				  
							      								    								  
							      								    37 >> 128 LOAD_FAST 1 ( count )				  
							      								    130 LOAD_CONST 17 ( 1 )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( count )					  
							      								    								  
							      								    38 >> 136 LOAD_FAST 1 ( count )				  
							      								    138 LOAD_CONST 18 ( 1 )					  
							      								    140 INPLACE_ADD						  
							      								    142 STORE_FAST 1 ( count ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
def repeat ( s , n ) :					      Disassembly of <code object repeat at 0x7fbac<<unk>> de40, fi Disassembly of <code object repeat at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    s1 = s						      2 0 LOAD_FAST 0 ( s )					    157 0 LOAD_FAST 0 ( s )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( 1 , n ) :				      2 STORE_FAST 2 ( s1 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	s += s1						      								    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
    return s						      3 4 SETUP_LOOP 26 ( to 32 )				    6 LOAD_FAST 0 ( s )						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      6 LOAD_GLOBAL 0 ( range )					    8 LOAD_CONST 2 ( 1 )					  assembler.py", line 81, in to_co     co_consts.app
							      8 LOAD_CONST 1 ( 1 )					    10 BINARY_SUBSCR						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 LOAD_FAST 1 ( n )					    12 LOAD_CONST 3 ( 2 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 CALL_FUNCTION 2					    14 BINARY_SUBSCR						  co	 self.co_cellvars, ValueError: code: varname
							      14 GET_ITER						    16 LOAD_CONST 4 ( 3 )					  s is too small
							      >> 16 FOR_ITER 12 ( to 30 )				    18 COMPARE_OP 2 ( == )					  
							      18 STORE_FAST 3 ( i )					    20 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      4 20 LOAD_FAST 0 ( s )					    158 22 LOAD_FAST 0 ( s )					  
							      22 LOAD_FAST 2 ( s1 )					    24 LOAD_CONST 5 ( 1 )					  
							      24 INPLACE_ADD						    26 BINARY_SUBSCR						  
							      26 STORE_FAST 0 ( s )					    28 LOAD_CONST 6 ( 2 )					  
							      28 JUMP_ABSOLUTE 16					    30 COMPARE_OP 2 ( == )					  
							      >> 30 POP_BLOCK						    32 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      5 >> 32 LOAD_FAST 0 ( s )					    159 34 LOAD_FAST 0 ( s )					  
							      34 RETURN_VALUE NEW_LINE					    36 LOAD_CONST 7 ( 1 )					  
							      								    38 BINARY_SUBSCR						  
							      								    40 LOAD_CONST 8 ( 2 )					  
							      								    42 COMPARE_OP 2 ( == )					  
							      								    44 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    160 46 LOAD_FAST 0 ( s )					  
							      								    48 LOAD_CONST 5 ( 1 )					  
							      								    50 BINARY_SUBSCR						  
							      								    52 LOAD_CONST 6 ( 2 )					  
							      								    54 COMPARE_OP 2 ( == )					  
							      								    56 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    161 58 LOAD_FAST 0 ( s )					  
							      								    60 LOAD_CONST 5 ( 1 )					  
							      								    62 BINARY_SUBSCR						  
							      								    64 LOAD_CONST 6 ( 2 )					  
							      								    66 COMPARE_OP 2 ( == )					  
							      								    68 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    162 70 LOAD_FAST 0 ( s )					  
							      								    72 LOAD_CONST 5 ( 1 )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_CONST 6 ( 2 )					  
							      								    78 COMPARE_OP 2 ( == )					  
							      								    80 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    163 82 LOAD_FAST 0 ( s )					  
							      								    84 LOAD_CONST 7 ( 1 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_CONST 8 ( 2 )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      								    92 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      								    164 94 LOAD_FAST 0 ( s )					  
							      								    96 LOAD_CONST 9 ( 2 )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_CONST 10 ( 2 )					  
							      								    102 COMPARE_OP 2 ( == )					  
							      								    104 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    165 106 LOAD_FAST 0 ( s )					  
							      								    108 LOAD_CONST 5 ( 1 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 6 ( 2 )					  
							      								    114 COMPARE_OP 2 ( == )					  
							      								    116 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    166 118 LOAD_FAST 0 ( s )					  
							      								    120 LOAD_CONST 5 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 6 ( 2 )					  
							      								    126 COMPARE_OP 2 ( == )					  
							      								    128 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    167 130 LOAD_FAST 0 ( s )					  
							      								    132 LOAD_CONST 5 ( 1 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 6 ( 2 )					  
							      								    138 COMPARE_OP 2 ( == )					  
							      								    140 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    168 142 LOAD_FAST 0 ( s )					  
							      								    144 LOAD_CONST 5 ( 1 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 6 ( 2 )					  
							      								    150 COMPARE_OP 2 ( == )					  
							      								    152 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    169 154 LOAD_FAST 0 ( s )					  
							      								    156 LOAD_CONST 5 ( 1 )					  
							      								    158 BINARY_SUBSCR						  
							      								    >> 160 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
def search ( arr , n , x ) :				      Disassembly of <code object search at 0x7fbac0e8bc90, file "< Disassembly of <code object search at 0x7f816a673a50, file "< script_not_found : None
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 34 ( to 36 )				    108 0 SETUP_LOOP 22 ( to 24 )				  
	if ( arr [ i ] == x ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( arr )					  
	    return i ;					      4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  
    return - 1 ;					      6 LOAD_FAST 1 ( n )					    >> 6 FOR_ITER 14 ( to 22 )					  
							      8 CALL_FUNCTION 2						    8 STORE_FAST 1 ( n )					  
							      10 GET_ITER						    								  
							      >> 12 FOR_ITER 20 ( to 34 )				    109 10 LOAD_FAST 1 ( n )					  
							      14 STORE_FAST 3 ( i )					    12 LOAD_CONST 0 ( None )					  
							      								    14 COMPARE_OP 9 ( is not )					  
							      3 16 LOAD_FAST 0 ( arr )					    16 POP_JUMP_IF_FALSE 6					  
							      18 LOAD_FAST 3 ( i )					    								  
							      20 BINARY_SUBSCR						    110 18 LOAD_FAST 1 ( n )					  
							      22 LOAD_FAST 2 ( x )					    20 LOAD_CONST 1 ( 0 )					  
							      24 COMPARE_OP 2 ( == )					    22 COMPARE_OP 4 ( > )					  
							      26 POP_JUMP_IF_FALSE 12					    24 POP_JUMP_IF_FALSE 6					  
							      								    								  
							      4 28 LOAD_FAST 3 ( i )					    111 26 LOAD_FAST 1 ( n )					  
							      30 RETURN_VALUE						    28 LOAD_CONST 2 ( 1 )					  
							      32 JUMP_ABSOLUTE 12					    30 INPLACE_ADD						  
							      >> 34 POP_BLOCK						    32 STORE_FAST 1 ( n )					  
							      								    34 JUMP_ABSOLUTE 6						  
							      5 >> 36 LOAD_CONST 2 ( - 1 )				    >> 36 POP_BLOCK						  
							      38 RETURN_VALUE NEW_LINE					    								  
							      								    112 >> 38 LOAD_FAST 1 ( n )					  
							      								    40 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI
--							      --							    --								  --
def numberOfSquares ( base ) :				      Disassembly of <code object numberOfSquares at 0x7fbac0e89d20 Disassembly of <code object numberOfSquares at 0x7f816a6e4b70 error : /bin/bash: line 1: 24461 Segmentation faul
    base = ( base - 2 )					      2 0 LOAD_FAST 0 ( base )					    26 0 LOAD_CONST 1 ( - 2 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    base = base / 2					      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 2 ( 2 )					  ataset/bin/python XLM/dis_script.py --script_path
    return base * ( base + 1 ) / 2			      4 BINARY_SUBTRACT						    4 LOAD_CONST 3 ( 3 )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
							      6 STORE_FAST 0 ( base )					    6 LOAD_CONST 4 ( 4 )					  eval_scripts/python_sa-dis_sa.test/MAXIMUM_NUMBER_
							      								    8 LOAD_CONST 5 ( ( 'base' , 'num_num_num' ) )		  2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRIANGL
							      3 8 LOAD_FAST 0 ( base )					    10 BUILD_CONST_KEY_MAP 3					  E.dis
							      10 LOAD_CONST 1 ( 2 )					    12 STORE_FAST 1 ( base )					  
							      12 BINARY_TRUE_DIVIDE					    								  
							      14 STORE_FAST 0 ( base )					    27 14 LOAD_FAST 1 ( base )					  
							      								    16 LOAD_CONST 6 ( 'num_num_num' )				  
							      4 16 LOAD_FAST 0 ( base )					    18 COMPARE_OP 2 ( == )					  
							      18 LOAD_FAST 0 ( base )					    20 POP_JUMP_IF_FALSE 26					  
							      20 LOAD_CONST 2 ( 1 )					    22 LOAD_FAST 1 ( base )					  
							      22 BINARY_ADD						    24 LOAD_CONST 7 ( 'num_num_num' )				  
							      24 BINARY_MULTIPLY					    26 COMPARE_OP 2 ( == )					  
							      26 LOAD_CONST 1 ( 2 )					    28 POP_JUMP_IF_FALSE 28					  
							      28 BINARY_TRUE_DIVIDE					    								  
							      30 RETURN_VALUE NEW_LINE					    28 30 LOAD_FAST 1 ( base )					  
							      								    32 LOAD_CONST 8 ( 'num_num_num' )				  
							      								    34 COMPARE_OP 2 ( == )					  
							      								    36 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      								    29 38 LOAD_FAST 1 ( base )					  
							      								    40 LOAD_CONST 9 ( 'num_num_num' )				  
							      								    42 COMPARE_OP 2 ( == )					  
							      								    44 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      								    30 >> 46 LOAD_FAST 1 ( base )				  
							      								    48 LOAD_CONST 10 ( 'num_num_num' )				  
							      								    50 COMPARE_OP 2 ( == )					  
							      								    52 POP_JUMP_IF_FALSE 58					  
							      								    								  
							      								    31 54 LOAD_FAST 1 ( base )					  
							      								    56 LOAD_CONST 11 ( 'num_num_num_num' )			  
							      								    58 COMPARE_OP 2 ( == )					  
							      								    60 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    32 62 LOAD_FAST 1 ( base )					  
							      								    64 LOAD_CONST 12 ( 'num_num_num_num_num' )			  
							      								    66 COMPARE_OP 2 ( == )					  
							      								    68 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    33 70 LOAD_FAST 1 ( base )					  
							      								    72 LOAD_CONST 13 ( 'num_num_num_num' )			  
							      								    74 COMPARE_OP 2 ( == )					  
							      								    76 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    34 78 LOAD_FAST 1 ( base )					  
							      								    80 LOAD_CONST 12 ( 'num_num_num_num' )			  
							      								    82 COMPARE_OP 2 ( == )					  
							      								    84 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    35 86 LOAD_FAST 1 ( base )					  
							      								    88 LOAD_CONST 13 ( 'num_num_num' )				  
							      								    90 COMPARE_OP 2 ( == )					  
							      								    92 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    36 94 LOAD_FAST 1 ( base )					  
							      								    96 LOAD_CONST 14 ( 'num_num_num_num' )			  
							      								    98 COMPARE_OP 2 ( == )					  
							      								    100 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    37 102 LOAD_FAST 1 ( base )					  
							      								    104 LOAD_CONST 15 ( 'num_num_num_num' )			  
							      								    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    38 >> 110 LOAD_FAST 1 ( base )				  
							      								    112 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER	  WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER
--							      --							    --								  --
def getParity ( n ) :					      Disassembly of <code object getParity at 0x7fbac0e89d20, file Disassembly of <code object getParity at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    parity = 0						      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_GLOBAL 0 ( parity )				  "XLM/dis_script.py", line 60, in <module>	exec
    while n :						      2 STORE_FAST 1 ( parity )					    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 32, in <module>	  Fi
	parity = ~ parity				      								    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in getParity NameError: name '
	n = n & ( n - 1 )				      3 4 SETUP_LOOP 26 ( to 32 )				    6 COMPARE_OP 2 ( == )					  parity' is not defined
    return parity					      >> 6 LOAD_FAST 0 ( n )					    8 POP_JUMP_IF_FALSE 22					  
							      8 POP_JUMP_IF_FALSE 30					    								  
							      								    66 10 LOAD_GLOBAL 1 ( OSError )				  
							      4 10 LOAD_FAST 1 ( parity )				    12 LOAD_CONST 2 ( 'Could not find %s in %s' )		  
							      12 UNARY_INVERT						    14 LOAD_FAST 0 ( n )					  
							      14 STORE_FAST 1 ( parity )				    16 BINARY_MODULO						  
							      								    18 CALL_FUNCTION 1						  
							      5 16 LOAD_FAST 0 ( n )					    20 RAISE_VARARGS 1						  
							      18 LOAD_FAST 0 ( n )					    								  
							      20 LOAD_CONST 2 ( 1 )					    67 >> 22 LOAD_GLOBAL 2 ( parity )				  
							      22 BINARY_SUBTRACT					    24 LOAD_FAST 0 ( n )					  
							      24 BINARY_AND						    26 CALL_FUNCTION 1						  
							      26 STORE_FAST 0 ( n )					    28 RAISE_VARARGS 1						  
							      28 JUMP_ABSOLUTE 6					    30 LOAD_CONST 0 ( None )					  
							      >> 30 POP_BLOCK						    32 RETURN_VALUE						  
							      								    NEW_LINE							  
							      6 >> 32 LOAD_FAST 1 ( parity )				    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
def CountSquares ( a , b ) :				      Disassembly of <code object CountSquares at 0x7fbac0e89d20, f Disassembly of <code object CountSquares at 0x7f816a6e4b70, f script_not_found : None
    return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 2 0 LOAD_GLOBAL 0 ( math )				    26 0 LOAD_GLOBAL 0 ( math )					  
							      2 LOAD_METHOD 1 ( floor )					    2 LOAD_METHOD 1 ( floor )					  
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_FAST 0 ( a )						  
							      6 LOAD_METHOD 2 ( sqrt )					    6 LOAD_CONST 1 ( b )					  
							      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 1 ( b )						  
							      10 CALL_METHOD 1						    10 LOAD_FAST 2 ( b )					  
							      12 CALL_METHOD 1						    12 LOAD_FAST 3 ( b )					  
							      14 LOAD_GLOBAL 0 ( math )					    14 LOAD_FAST 4 ( b )					  
							      16 LOAD_METHOD 3 ( ceil )					    16 CALL_METHOD 4						  
							      18 LOAD_GLOBAL 0 ( math )					    18 RETURN_VALUE NEW_LINE					  
							      20 LOAD_METHOD 2 ( sqrt )					    								  
							      22 LOAD_FAST 0 ( a )					    								  
							      24 CALL_METHOD 1						    								  
							      26 CALL_METHOD 1						    								  
							      28 BINARY_SUBTRACT					    								  
							      30 LOAD_CONST 1 ( 1 )					    								  
							      32 BINARY_ADD						    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
def maxTripletSum ( arr , n ) :				      Disassembly of <code object maxTripletSum at 0x7fbac0e8bc90,  Disassembly of <code object maxTripletSum at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    31 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] )  2 LOAD_METHOD 0 ( sort )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 29, in <module>	  Fi
							      4 CALL_METHOD 0						    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in maxTripletSum UnboundLocalE
							      6 POP_TOP							    6 BINARY_ADD						  rror: local variable 'n' referenced before assignm
							      								    8 LOAD_FAST 2 ( n )						  ent
							      3 8 LOAD_FAST 0 ( arr )					    10 LOAD_CONST 2 ( 2 )					  
							      10 LOAD_FAST 1 ( n )					    12 BINARY_ADD						  
							      12 LOAD_CONST 1 ( 1 )					    14 LOAD_FAST 1 ( n )					  
							      14 BINARY_SUBTRACT					    16 LOAD_CONST 3 ( 3 )					  
							      16 BINARY_SUBSCR						    18 BINARY_ADD						  
							      18 LOAD_FAST 0 ( arr )					    20 LOAD_FAST 2 ( n )					  
							      20 LOAD_FAST 1 ( n )					    22 LOAD_CONST 4 ( 3 )					  
							      22 LOAD_CONST 2 ( 2 )					    24 BINARY_ADD						  
							      24 BINARY_SUBTRACT					    26 LOAD_FAST 1 ( n )					  
							      26 BINARY_SUBSCR						    28 LOAD_CONST 5 ( 4 )					  
							      28 BINARY_ADD						    30 BINARY_ADD						  
							      30 LOAD_FAST 0 ( arr )					    32 LOAD_FAST 2 ( n )					  
							      32 LOAD_FAST 1 ( n )					    34 LOAD_CONST 6 ( 3 )					  
							      34 LOAD_CONST 3 ( 3 )					    36 BINARY_ADD						  
							      36 BINARY_SUBTRACT					    38 LOAD_FAST 2 ( n )					  
							      38 BINARY_SUBSCR						    40 BINARY_ADD						  
							      40 BINARY_ADD						    42 BUILD_SLICE 2						  
							      42 RETURN_VALUE NEW_LINE					    44 BINARY_SUBSCR						  
							      								    46 BINARY_ADD						  
							      								    48 LOAD_FAST 1 ( n )					  
							      								    50 LOAD_CONST 7 ( 3 )					  
							      								    52 BINARY_ADD						  
							      								    54 LOAD_FAST 2 ( n )					  
							      								    56 LOAD_CONST 8 ( 2 )					  
							      								    58 BINARY_ADD						  
							      								    60 BINARY_ADD						  
							      								    62 BUILD_SLICE 2						  
							      								    64 BINARY_SUBSCR						  
							      								    66 BINARY_ADD						  
							      								    68 LOAD_FAST 2 ( n )					  
							      								    70 LOAD_CONST 9 ( 3 )					  
							      								    72 BINARY_ADD						  
							      								    74 BUILD_SLICE 2						  
							      								    76 BINARY_SUBSCR						  
							      								    78 BINARY_ADD						  
							      								    80 LOAD_FAST 2 ( n )					  
							      								    82 LOAD_CONST 10 ( 3 )					  
							      								    84 BINARY_ADD						  
							      								    86 BINARY_ADD						  
							      								    88 LOAD_FAST 2 ( n )					  
							      								    90 LOAD_CONST 11 ( 3 )					  
							      								    92 BINARY_ADD						  
							      								    94 BINARY_ADD						  
							      								    96 BUILD_SLICE 2						  
							      								    98 BINARY_SUBSCR						  
							      								    100 BINARY_ADD						  
							      								    102 LOAD_FAST 2 ( n )					  
							      								    104 LOAD_CONST 12 ( 3 )					  
							      								    106 BINARY_ADD						  
							      								    108 BUILD_SLICE 2						  
							      								    110 BINARY_SUBSCR						  
							      								    112 BINARY_ADD						  
							      								    114 LOAD_FAST 2 ( n )					  
							      								    116 LOAD_CONST 13 ( 3 )					  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_FAST 2 ( n )					  
							      								    122 LOAD_CONST 6 ( 3 )					  
							      								    124 BINARY_ADD						  
							      								    126 BUILD_SLICE 2						  
							      								    128 BINARY_SUBSCR						  
							      								    130 BINARY_ADD						  
							      								    132 LOAD_FAST 2 ( n )					  
							      								    134 LOAD_CONST 6 ( 3 )					  
							      								    136 BINARY_ADD						  
							      								    138 BUILD_SLICE 2						  
							      								    140 BINARY_SUBSCR						  
							      								    142 BINARY_ADD						  
							      								    144 LOAD_FAST 2 ( n )					  
							      								    146 LOAD_CONST 6 ( 3 )					  
							      								    148 BINARY_ADD						  
							      								    150 BUILD_SLICE 2						  
							      								    152 BINARY_SUBSCR						  
							      								    154 BINARY_ADD						  
							      								    156 LOAD_FAST 2 ( n )					  
							      								    158 LOAD_CONST 6 ( 3 )					  
							      								    160 BINARY_ADD						  
							      								    162 BUILD_SLICE 2						  
							      								    164 BINARY_SUBSCR						  
							      								    166 BINARY_ADD						  
							      								    								  
							      								    33 164 LOAD_FAST 2 ( n )					  
							      								    166 LOAD_CONST 6 ( 3 )					  
							      								    168 BINARY_ADD						  
							      								    170 BUILD_SLICE 2						  
							      								    168 BINARY_SUBSCR						  
							      								    170 BINARY_ADD						  
							      								    								  
							      								    34 172 LOAD_FAST 2 ( n )					  
							      								    174 LOAD_CONST 7 ( 3 )					  
							      								    176 BINARY_ADD						  
							      								    178 LOAD_FAST 2 ( n )					  
							      								    180 LOAD_CONST 6 ( 3 )					  
							      								    								  
							      								    35 170 LOAD_FAST 2 ( n )					  
							      								    172 LOAD_CONST 6 ( 3 )					  
							      								    174 BINARY_ADD						  
							      								    								  
							      								    36 176 LOAD_FAST 2 ( n )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		  SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
def findElement ( arr , n , key ) :			      Disassembly of <code object findElement at 0x7fbac<<unk>> d54 Disassembly of <code object findElement at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    for i in range ( n ) :				      2 0 SETUP_LOOP 32 ( to 34 )				    65 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 60, in <module>	exec
	if ( arr [ i ] == key ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 31, in <module>	  Fi
	    return i					      4 LOAD_FAST 1 ( n )					    4 GET_ITER							  le "<dis>", line 2, in findElement TypeError: 'int
    return - 1						      6 CALL_FUNCTION 1						    >> 6 FOR_ITER 14 ( to 22 )					  ' object is not iterable
							      8 GET_ITER						    8 STORE_FAST 2 ( n )					  
							      >> 10 FOR_ITER 20 ( to 32 )				    								  
							      12 STORE_FAST 3 ( i )					    66 10 LOAD_FAST 0 ( arr )					  
							      								    12 LOAD_METHOD 0 ( append )					  
							      3 14 LOAD_FAST 0 ( arr )					    14 LOAD_FAST 2 ( n )					  
							      16 LOAD_FAST 3 ( i )					    16 CALL_METHOD 1						  
							      18 BINARY_SUBSCR						    18 POP_TOP							  
							      20 LOAD_FAST 2 ( key )					    20 JUMP_ABSOLUTE 6						  
							      22 COMPARE_OP 2 ( == )					    >> 22 POP_BLOCK						  
							      24 POP_JUMP_IF_FALSE 10					    >> 24 LOAD_CONST 0 ( None )					  
							      								    26 RETURN_VALUE						  
							      4 26 LOAD_FAST 3 ( i )					    NEW_LINE							  
							      28 RETURN_VALUE						    								  
							      30 JUMP_ABSOLUTE 10					    								  
							      >> 32 POP_BLOCK						    								  
							      								    								  
							      5 >> 34 LOAD_CONST 1 ( - 1 )				    								  
							      36 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y				    FIND_UNIT_DIGIT_X_RAISED_POWER_Y				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y
--							      --							    --								  --
def unitDigitXRaisedY ( x , y ) :			      Disassembly of <code object unitDigitXRaisedY at 0x7fbac<<unk Disassembly of <code object unitindroXsedsedY at 0x7f816a6e4b error : /bin/bash: line 1: 24497 Segmentation faul
    res = 1						      2 0 LOAD_CONST 1 ( 1 )					    31 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( y ) :				      2 STORE_FAST 2 ( res )					    2 STORE_FAST 1 ( y )					  ataset/bin/python XLM/dis_script.py --script_path
	res = ( res * x ) % 10				      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    return res						      3 4 SETUP_LOOP 28 ( to 34 )				    32 4 LOAD_CONST 2 ( 2 )					  eval_scripts/python_sa-dis_sa.test/FIND_UNIT_DIGIT
							      6 LOAD_GLOBAL 0 ( range )					    6 STORE_FAST 2 ( y )					  _X_RAISED_POWER_Y.dis
							      8 LOAD_FAST 1 ( y )					    								  
							      10 CALL_FUNCTION 1					    33 8 LOAD_FAST 1 ( y )					  
							      12 GET_ITER						    10 LOAD_CONST 3 ( 3 )					  
							      >> 14 FOR_ITER 16 ( to 32 )				    12 COMPARE_OP 2 ( == )					  
							      16 STORE_FAST 3 ( i )					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      4 18 LOAD_FAST 2 ( res )					    34 16 LOAD_CONST 4 ( 3 )					  
							      20 LOAD_FAST 0 ( x )					    18 STORE_FAST 1 ( y )					  
							      22 BINARY_MULTIPLY					    								  
							      24 LOAD_CONST 2 ( 10 )					    35 >> 20 LOAD_FAST 1 ( y )					  
							      26 BINARY_MODULO						    22 LOAD_FAST 2 ( y )					  
							      28 STORE_FAST 2 ( res )					    24 LOAD_FAST 1 ( y )					  
							      30 JUMP_ABSOLUTE 14					    26 LOAD_FAST 1 ( y )					  
							      >> 32 POP_BLOCK						    28 LOAD_FAST 2 ( y )					  
							      								    30 BUILD_TUPLE 3						  
							      5 >> 34 LOAD_FAST 2 ( res )				    32 BINARY_MODULO						  
							      36 RETURN_VALUE NEW_LINE					    34 STORE_FAST 1 ( y )					  
							      								    								  
							      								    36 36 LOAD_FAST 1 ( y )					  
							      								    38 LOAD_FAST 2 ( y )					  
							      								    40 BUILD_TUPLE 2						  
							      								    42 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
def divisibleBy20 ( num ) :				      Disassembly of <code object divisibleBy20 at 0x7fbac0e89d20,  Disassembly of <code object divisibleBy20 at 0x7f816a6e4b70,  script_not_found : None
    lastTwoDigits = int ( num [ - 2 : ] )		      2 0 LOAD_GLOBAL 0 ( int )					    21 0 LOAD_FAST 1 ( lastTwoDigits )				  
    return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 = 2 LOAD_FAST 0 ( num )					    2 LOAD_CONST 1 ( - 2 )					  
							      4 LOAD_CONST 1 ( - 2 )					    4 BINARY_SUBSCR						  
							      6 LOAD_CONST 0 ( None )					    6 STORE_FAST 5 ( lastTwoDigits )				  
							      8 BUILD_SLICE 2						    								  
							      10 BINARY_SUBSCR						    22 8 LOAD_FAST 0 ( num )					  
							      12 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( - 3 )					  
							      14 STORE_FAST 1 ( lastTwoDigits )				    12 BINARY_SUBSCR						  
							      								    14 STORE_FAST 6 ( lastTwoDigits )				  
							      3 16 LOAD_FAST 1 ( lastTwoDigits )			    								  
							      18 LOAD_CONST 2 ( 5 )					    23 16 LOAD_FAST 0 ( num )					  
							      20 BINARY_MODULO						    18 LOAD_CONST 3 ( - 5 )					  
							      22 LOAD_CONST 3 ( 0 )					    20 BINARY_SUBSCR						  
							      24 COMPARE_OP 2 ( == )					    22 STORE_FAST 7 ( lastTwoDigits )				  
							      26 JUMP_IF_FALSE_OR_POP 38				    								  
							      28 LOAD_FAST 1 ( lastTwoDigits )				    24 24 LOAD_FAST 0 ( num )					  
							      30 LOAD_CONST 4 ( 4 )					    26 LOAD_CONST 4 ( - 5 )					  
							      32 BINARY_MODULO						    28 BINARY_SUBSCR						  
							      34 LOAD_CONST 3 ( 0 )					    30 LOAD_CONST 5 ( '%d %d %d %d %d' )			  
							      36 COMPARE_OP 2 ( == )					    32 LOAD_FAST 5 ( lastTwoDigits )				  
							      >> 38 RETURN_VALUE NEW_LINE				    34 BINARY_MODULO						  
							      								    36 LOAD_FAST 7 ( lastTwoDigits )				  
							      								    38 BINARY_MODULO						  
							      								    40 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
def isNumber ( s ) :					      Disassembly of <code object isNumber at 0x7fbac0e8bc90, file  Disassembly of <code object isNumber at 0x7f816a677930, file  error : Traceback (most recent call last):   File
    for i in range ( len ( s ) ) :			      2 0 SETUP_LOOP 40 ( to 42 )				    26 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 59, in <module>	for
	if s [ i ].isdigit ( ) != True :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  item in run_dis_script():   File "XLM/dis_script.p
	    return False				      4 LOAD_GLOBAL 1 ( len )					    4 LOAD_FAST 0 ( s )						  y", line 47, in run_dis_script     co_code, co_nlo
    return True						      6 LOAD_FAST 0 ( s )					    6 CALL_FUNCTION 1						  cals, co_varnames, co_names, co_consts, co_linesta
							      8 CALL_FUNCTION 1						    8 GET_ITER							  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 CALL_FUNCTION 1					    >> 10 FOR_ITER 14 ( to 22 )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 GET_ITER						    12 STORE_FAST 1 ( i )					  n parse     constants[arg] = ast.literal_eval(argr
							      >> 14 FOR_ITER 24 ( to 40 )				    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 STORE_FAST 1 ( i )					    27 14 LOAD_FAST 1 ( i )					  ib/python3.7/ast.py", line 46, in literal_eval
							      								    16 LOAD_CONST 1 ( 0 )					   node_or_string = parse(node_or_string, mode='eval
							      3 18 LOAD_FAST 0 ( s )					    18 COMPARE_OP 4 ( > )					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      20 LOAD_FAST 1 ( i )					    20 POP_JUMP_IF_FALSE 10					  /python3.7/ast.py", line 35, in parse	    return c
							      22 BINARY_SUBSCR						    								  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      24 LOAD_METHOD 2 ( isdigit )				    28 22 LOAD_FAST 1 ( i )					  le "<unknown>", line 1     >	   ^ SyntaxError: un
							      26 CALL_METHOD 0						    24 LOAD_CONST 2 ( 1 )					  expected EOF while parsing
							      28 LOAD_CONST 1 ( True )					    26 COMPARE_OP 4 ( > )					  
							      30 COMPARE_OP 3 ( != )					    28 POP_JUMP_IF_FALSE 10					  
							      32 POP_JUMP_IF_FALSE 14					    								  
							      								    29 30 LOAD_FAST 1 ( i )					  
							      4 34 LOAD_CONST 2 ( False )				    32 LOAD_CONST 3 ( 1 )					  
							      36 RETURN_VALUE						    34 COMPARE_OP 4 ( > )					  
							      38 JUMP_ABSOLUTE 14					    36 POP_JUMP_IF_FALSE 10					  
							      >> 40 POP_BLOCK						    								  
							      								    30 >> 38 LOAD_FAST 1 ( i )					  
							      5 >> 42 LOAD_CONST 1 ( True )				    40 LOAD_CONST 4 ( > )					  
							      44 RETURN_VALUE NEW_LINE					    42 COMPARE_OP 4 ( > )					  
							      								    44 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    31 46 LOAD_FAST 1 ( i )					  
							      								    48 LOAD_CONST 5 ( 0 )					  
							      								    50 COMPARE_OP 4 ( > )					  
							      								    52 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    32 54 LOAD_FAST 1 ( i )					  
							      								    56 LOAD_CONST 6 ( - 1 )					  
							      								    58 COMPARE_OP 4 ( > )					  
							      								    60 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    33 62 LOAD_FAST 1 ( i )					  
							      								    64 LOAD_CONST 7 ( 1 )					  
							      								    66 COMPARE_OP 4 ( > )					  
							      								    68 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    34 70 LOAD_FAST 1 ( i )					  
							      								    72 LOAD_CONST 8 ( - 1 )					  
							      								    74 COMPARE_OP 4 ( > )					  
							      								    76 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    35 78 LOAD_FAST 1 ( i )					  
							      								    80 LOAD_CONST 9 ( - 1 )					  
							      								    82 COMPARE_OP 4 ( > )					  
							      								    84 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    36 86 LOAD_FAST 1 ( i )					  
							      								    88 LOAD_CONST 10 ( - 1 )					  
							      								    90 COMPARE_OP 4 ( > )					  
							      								    92 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    37 >> 94 LOAD_FAST 1 ( i )					  
							      								    96 LOAD_CONST 11 ( - 1 )					  
							      								    98 COMPARE_OP 4 ( > )					  
							      								    100 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    38 102 LOAD_FAST 1 ( i )					  
							      								    104 LOAD_CONST 12 ( - 1 )					  
							      								    106 COMPARE_OP 4 ( > )					  
							      								    108 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    39 110 LOAD_FAST 1 ( i )					  
							      								    112 LOAD_CONST 13 ( - 1 )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      								    116 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    40 118 LOAD_FAST 1 ( i )					  
							      								    120 LOAD_CONST 6 ( - 1 )					  
							      								    122 COMPARE_OP 4 ( > )					  
							      								    124 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    41 126 LOAD_FAST 1 ( i )					  
							      								    128 LOAD_CONST 6 ( - 1 )					  
							      								    130 COMPARE_OP 4 ( > )					  
							      								    132 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    42 134 LOAD_FAST 1 ( i )					  
							      								    136 LOAD_CONST 6 ( - 1 )					  
							      								    138 COMPARE_OP 4 ( > )					  
							      								    140 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    43 142 LOAD_FAST 1 ( i )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	      SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE
--							      --							    --								  --
def calculateSum ( n ) :				      Disassembly of <code object calculateSum at 0x7fbac0e8bc90, f Disassembly of <code object calculateSum at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( sum )					  "XLM/dis_script.py", line 60, in <module>	exec
    for row in range ( n ) :				      2 STORE_FAST 1 ( sum )					    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 31, in <module>	  Fi
	sum = sum + ( 1 << row )			      								    4 CALL_FUNCTION 1						  le "<dis>", line 2, in calculateSum TypeError: 'in
    return sum						      3 4 SETUP_LOOP 28 ( to 34 )				    6 LOAD_GLOBAL 1 ( sum )					  t' object is not iterable
							      6 LOAD_GLOBAL 0 ( range )					    8 LOAD_FAST 0 ( n )						  
							      8 LOAD_FAST 0 ( n )					    10 CALL_FUNCTION 1						  
							      10 CALL_FUNCTION 1					    12 BINARY_MULTIPLY						  
							      12 GET_ITER						    14 LOAD_GLOBAL 1 ( sum )					  
							      >> 14 FOR_ITER 16 ( to 32 )				    16 LOAD_FAST 0 ( n )					  
							      16 STORE_FAST 2 ( row )					    18 CALL_FUNCTION 1						  
							      								    20 BINARY_MULTIPLY						  
							      4 18 LOAD_FAST 1 ( sum )					    22 LOAD_GLOBAL 1 ( sum )					  
							      20 LOAD_CONST 2 ( 1 )					    24 LOAD_FAST 0 ( n )					  
							      22 LOAD_FAST 2 ( row )					    26 CALL_FUNCTION 1						  
							      24 BINARY_LSHIFT						    28 BINARY_MULTIPLY						  
							      26 BINARY_ADD						    30 BINARY_ADD						  
							      28 STORE_FAST 1 ( sum )					    32 BINARY_MULTIPLY						  
							      30 JUMP_ABSOLUTE 14					    34 RETURN_VALUE						  
							      >> 32 POP_BLOCK						    NEW_LINE							  
							      								    								  
							      5 >> 34 LOAD_FAST 1 ( sum )				    								  
							      36 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
def smallest ( x , y , z ) :				      Disassembly of <code object smallest at 0x7fbac0e8bc90, file  Disassembly of <code object smallest at 0x7f816a6e4b70, file  error : Traceback (most recent call last):   File
    if ( not ( y / x ) ) :				      2 0 LOAD_FAST 1 ( y )					    17 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 60, in <module>	exec
	return y if ( not ( y / z ) ) else z		      2 LOAD_FAST 0 ( x )					    2 LOAD_ATTR 0 ( x )						  (item)   File "main.py", line 30, in <module>	  Fi
    return x if ( not ( x / z ) ) else z		      4 BINARY_TRUE_DIVIDE					    4 LOAD_FAST 1 ( y )						  le "<dis>", line 2, in smallest AttributeError: 'i
							      6 POP_JUMP_IF_TRUE 24					    6 BINARY_MULTIPLY						  nt' object has no attribute 'x'
							      								    8 LOAD_FAST 2 ( y )						  
							      3 8 LOAD_FAST 1 ( y )					    10 BINARY_MULTIPLY						  
							      10 LOAD_FAST 2 ( z )					    12 LOAD_FAST 3 ( y )					  
							      12 BINARY_TRUE_DIVIDE					    14 BINARY_MULTIPLY						  
							      14 POP_JUMP_IF_TRUE 20					    16 LOAD_FAST 4 ( y )					  
							      16 LOAD_FAST 1 ( y )					    18 BINARY_MULTIPLY						  
							      18 RETURN_VALUE						    20 LOAD_FAST 5 ( alpha )					  
							      >> 20 LOAD_FAST 2 ( z )					    22 BINARY_MULTIPLY						  
							      22 RETURN_VALUE						    24 LOAD_FAST 6 ( alpha )					  
							      								    26 BINARY_MULTIPLY						  
							      4 >> 24 LOAD_FAST 0 ( x )					    28 BINARY_MULTIPLY						  
							      26 LOAD_FAST 2 ( z )					    30 BINARY_ADD						  
							      28 BINARY_TRUE_DIVIDE					    32 RETURN_VALUE						  
							      30 POP_JUMP_IF_TRUE 36					    NEW_LINE							  
							      32 LOAD_FAST 0 ( x )					    								  
							      34 RETURN_VALUE						    								  
							      >> 36 LOAD_FAST 2 ( z )					    								  
							      38 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
def getMissingNo ( A ) :				      Disassembly of <code object getMissingNo at 0x7fbac<<unk>> de Disassembly of <code object getMissingNo at 0x7f816a673a50, f script_not_found : None
    n = len ( A )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( A )					  
    total = ( n + 1 ) * ( n + 2 ) / 2			      2 LOAD_FAST 0 ( A )					    2 LOAD_CONST 1 ( 1 )					  
    sum_of_A = sum ( A )				      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    return total - sum_of_A				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
							      								    								  
							      3 8 LOAD_FAST 1 ( n )					    27 8 LOAD_GLOBAL 0 ( sum )					  
							      10 LOAD_CONST 1 ( 1 )					    10 LOAD_FAST 1 ( n )					  
							      12 BINARY_ADD						    12 CALL_FUNCTION 1						  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_CONST 2 ( - 1 )					  
							      16 LOAD_CONST 2 ( 2 )					    16 COMPARE_OP 2 ( == )					  
							      18 BINARY_ADD						    18 POP_JUMP_IF_FALSE 30					  
							      20 BINARY_MULTIPLY					    								  
							      22 LOAD_CONST 2 ( 2 )					    28 20 LOAD_GLOBAL 1 ( sum )					  
							      24 BINARY_TRUE_DIVIDE					    22 LOAD_FAST 1 ( n )					  
							      26 STORE_FAST 2 ( total )					    24 CALL_FUNCTION 1						  
							      								    26 LOAD_CONST 3 ( 1 )					  
							      4 28 LOAD_GLOBAL 1 ( sum )				    28 COMPARE_OP 2 ( == )					  
							      30 LOAD_FAST 0 ( A )					    30 POP_JUMP_IF_FALSE 30					  
							      32 CALL_FUNCTION 1					    								  
							      34 STORE_FAST 3 ( sum_of_A )				    29 32 LOAD_FAST 1 ( n )					  
							      								    34 LOAD_CONST 4 ( - 1 )					  
							      5 36 LOAD_FAST 2 ( total )				    36 COMPARE_OP 2 ( == )					  
							      38 LOAD_FAST 3 ( sum_of_A )				    38 POP_JUMP_IF_FALSE 30					  
							      40 BINARY_SUBTRACT					    								  
							      42 RETURN_VALUE NEW_LINE					    30 40 LOAD_FAST 1 ( n )					  
							      								    42 LOAD_CONST 5 ( 1 )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    31 48 LOAD_FAST 1 ( n )					  
							      								    50 LOAD_CONST 6 ( - 1 )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    32 56 LOAD_FAST 1 ( n )					  
							      								    58 LOAD_CONST 7 ( - 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    33 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 8 ( - 1 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 30					  
							      								    72 LOAD_FAST 1 ( n )					  
							      								    74 LOAD_CONST 9 ( - 1 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    34 80 LOAD_FAST 1 ( n )					  
							      								    82 LOAD_CONST 10 ( - 1 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    35 88 LOAD_FAST 1 ( n )					  
							      								    90 LOAD_CONST 11 ( - 1 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    36 96 LOAD_FAST 1 ( n )					  
							      								    98 LOAD_CONST 12 ( - 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    37 104 LOAD_FAST 1 ( n )					  
							      								    106 LOAD_CONST 13 ( - 1 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    38 >> 112 LOAD_FAST 1 ( n )					  
							      								    114 LOAD_CONST 6 ( - 1 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    39 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_CONST 6 ( - 1 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    40 128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_CONST 6 ( - 1 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    41 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_CONST 7 ( - 1 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    42 144 LOAD_FAST 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
def printNos ( n ) :					      Disassembly of <code object printNos at 0x7fbac<<unk>> d540,  Disassembly of <code object printNos at 0x7f816a6e4b70, file  script_not_found : None
    if n > 0 :						      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
	printNos ( n - 1 )				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( - 1 )					  
	print ( n , end = ' ' )				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
							      6 POP_JUMP_IF_FALSE 32					    6 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      3 8 LOAD_GLOBAL 0 ( printNos )				    27 8 LOAD_GLOBAL 0 ( printNos )				  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 CALL_FUNCTION 1						  
							      14 BINARY_SUBTRACT					    14 POP_TOP							  
							      16 CALL_FUNCTION 1					    >> 16 LOAD_CONST 0 ( None )					  
							      18 POP_TOP						    18 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 20 LOAD_GLOBAL 1 ( print )				    								  
							      22 LOAD_FAST 0 ( n )					    								  
							      24 LOAD_CONST 3 ( ' ' )					    								  
							      26 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      28 CALL_FUNCTION_KW 2					    								  
							      30 POP_TOP						    								  
							      >> 32 LOAD_CONST 0 ( None )				    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_1				      POSITION_OF_RIGHTMOST_SET_BIT_1				    POSITION_OF_RIGHTMOST_SET_BIT_1				  POSITION_OF_RIGHTMOST_SET_BIT_1
--							      --							    --								  --
def PositionRightmostSetbit ( n ) :			      Disassembly of <code object PositionRightmostSetbit at 0x7fba Disassembly of <code object PositionRightmostSetbit at 0x7f81 error : Traceback (most recent call last):   File
    position = 1					      2 0 LOAD_CONST 1 ( 1 )					    182 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 59, in <module>	for
    m = 1						      2 STORE_FAST 1 ( position )				    2 STORE_FAST 1 ( m )					  item in run_dis_script():   File "XLM/dis_script.p
    while ( not ( n & m ) ) :				      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	m = m << 1					      3 4 LOAD_CONST 1 ( 1 )					    183 4 LOAD_FAST 0 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	position += 1					      6 STORE_FAST 2 ( m )					    6 LOAD_CONST 2 ( 1 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
    return position					      								    8 COMPARE_OP 2 ( == )					  pack non-iterable NoneType object
							      4 8 SETUP_LOOP 28 ( to 38 )				    10 POP_JUMP_IF_FALSE 20					  
							      >> 10 LOAD_FAST 0 ( n )					    								  
							      12 LOAD_FAST 2 ( m )					    184 12 LOAD_FAST 1 ( m )					  
							      14 BINARY_AND						    14 LOAD_CONST 3 ( 1 )					  
							      16 POP_JUMP_IF_TRUE 36					    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 24					  
							      5 18 LOAD_FAST 2 ( m )					    								  
							      20 LOAD_CONST 1 ( 1 )					    185 20 LOAD_FAST 1 ( m )					  
							      22 BINARY_LSHIFT						    22 LOAD_CONST 4 ( 2 )					  
							      24 STORE_FAST 2 ( m )					    24 COMPARE_OP 2 ( == )					  
							      								    26 POP_JUMP_IF_FALSE 32					  
							      6 26 LOAD_FAST 1 ( position )				    								  
							      28 LOAD_CONST 1 ( 1 )					    186 28 LOAD_FAST 1 ( m )					  
							      30 INPLACE_ADD						    30 LOAD_CONST 5 ( 1 )					  
							      32 STORE_FAST 1 ( position )				    32 COMPARE_OP 2 ( == )					  
							      34 JUMP_ABSOLUTE 10					    34 POP_JUMP_IF_FALSE 40					  
							      >> 36 POP_BLOCK						    								  
							      								    187 36 LOAD_FAST 1 ( m )					  
							      7 >> 38 LOAD_FAST 1 ( position )				    38 LOAD_CONST 6 ( 2 )					  
							      40 RETURN_VALUE NEW_LINE					    40 COMPARE_OP 2 ( == )					  
							      								    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    188 44 LOAD_FAST 1 ( m )					  
							      								    46 LOAD_CONST 7 ( 2 )					  
							      								    48 COMPARE_OP 2 ( == )					  
							      								    50 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    189 52 LOAD_FAST 1 ( m )					  
							      								    54 LOAD_CONST 8 ( 2 )					  
							      								    56 COMPARE_OP 2 ( == )					  
							      								    58 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    190 60 LOAD_FAST 1 ( m )					  
							      								    62 LOAD_CONST 9 ( 2 )					  
							      								    64 COMPARE_OP 2 ( == )					  
							      								    66 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    191 68 LOAD_FAST 1 ( m )					  
							      								    70 LOAD_CONST 10 ( 2 )					  
							      								    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      								    192 76 LOAD_FAST 1 ( m )					  
							      								    78 LOAD_CONST 10 ( 2 )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      								    193 84 LOAD_FAST 1 ( m )					  
							      								    86 LOAD_CONST 11 ( 2 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      								    194 92 LOAD_FAST 1 ( m )					  
							      								    94 LOAD_CONST 12 ( 2 )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    195 100 LOAD_FAST 1 ( m )					  
							      								    102 LOAD_CONST 13 ( 2 )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    196 108 LOAD_FAST 1 ( m )					  
							      								    110 LOAD_CONST 14 ( 2 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 124					  
							      								    								  
							      								    197 116 LOAD_FAST 1 ( m )					  
							      								    118 LOAD_CONST 15 ( 2 )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    198 124 LOAD_FAST 1 ( m )					  
							      								    126 LOAD_CONST 16 ( 2 )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    199 132 LOAD_FAST 1 ( m )					  
							      								    134 LOAD_CONST 15 ( 2 )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    199 140 LOAD_FAST 1 ( m )					  
							      								    142 LOAD_CONST 16 ( 2 )					  
							      								    144 COMPARE_OP 2 ( ==					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
def check ( degree , n ) :				      Disassembly of <code object check at 0x7fbac<<unk>> de40, fil Disassembly of <code object check at 0x7f816a6e4b70, file "<d error : Traceback (most recent call last):   File
    deg_sum = sum ( degree )				      2 0 LOAD_GLOBAL 0 ( sum )					    26 0 LOAD_GLOBAL 0 ( deg_sum )				  "XLM/dis_script.py", line 60, in <module>	exec
    if ( 2 * ( n - 1 ) == deg_sum ) :			      2 LOAD_FAST 0 ( degree )					    2 LOAD_FAST 0 ( degree )					  (item)   File "main.py", line 32, in <module>	  Fi
	return True					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in check NameError: name 'deg_
    else :						      6 STORE_FAST 2 ( deg_sum )				    6 STORE_FAST 1 ( n )					  sum' is not defined
	return False					      								    								  
							      3 8 LOAD_CONST 1 ( 2 )					    27 8 LOAD_FAST 1 ( n )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_CONST 1 ( 1 )					  
							      12 LOAD_CONST 2 ( 1 )					    12 COMPARE_OP 4 ( > )					  
							      14 BINARY_SUBTRACT					    14 POP_JUMP_IF_FALSE 20					  
							      16 BINARY_MULTIPLY					    								  
							      18 LOAD_FAST 2 ( deg_sum )				    28 16 LOAD_CONST 2 ( True )					  
							      20 COMPARE_OP 2 ( == )					    18 RETURN_VALUE						  
							      22 POP_JUMP_IF_FALSE 28					    								  
							      								    29 >> 20 LOAD_CONST 3 ( False )				  
							      4 24 LOAD_CONST 3 ( True )				    22 RETURN_VALUE						  
							      26 RETURN_VALUE						    24 LOAD_CONST 0 ( None )					  
							      								    26 RETURN_VALUE						  
							      6 >> 28 LOAD_CONST 4 ( False )				    NEW_LINE							  
							      30 RETURN_VALUE						    								  
							      32 LOAD_CONST 0 ( None )					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_ALL_ODD_AND_EVEN_BITS				      SWAP_ALL_ODD_AND_EVEN_BITS				    SWAP_ALL_ODD_AND_EVEN_BITS					  SWAP_ALL_ODD_AND_EVEN_BITS
--							      --							    --								  --
def swapBits ( x ) :					      Disassembly of <code object swapBits at 0x7fbac<<unk>> de40,  Disassembly of <code object swapBits at 0x7f8169febf60, file  error : Traceback (most recent call last):   File
    even_bits = x & 0xAAAAAAAA				      2 0 LOAD_FAST 0 ( x )					    106 0 LOAD_FAST 1 ( even_bits )				  "XLM/dis_script.py", line 59, in <module>	for
    odd_bits = x & 0x55555555				      2 LOAD_CONST 1 ( 2863311530 )				    2 LOAD_CONST 1 ( 0x5685685555 )				  item in run_dis_script():   File "XLM/dis_script.p
    even_bits >>= 1					      4 BINARY_AND						    4 COMPARE_OP 0 ( < )					  y", line 47, in run_dis_script     co_code, co_nlo
    odd_bits <<= 1					      6 STORE_FAST 1 ( even_bits )				    6 POP_JUMP_IF_FALSE 16					  cals, co_varnames, co_names, co_consts, co_linesta
    return ( even_bits | odd_bits )			      								    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      3 8 LOAD_FAST 0 ( x )					    107 8 LOAD_CONST 2 ( - 0.5685685555 )			  pack non-iterable NoneType object
							      10 LOAD_CONST 2 ( 1431655765 )				    10 RETURN_VALUE						  
							      12 BINARY_AND						    								  
							      14 STORE_FAST 2 ( odd_bits )				    108 >> 12 LOAD_FAST 1 ( even_bits )				  
							      								    14 LOAD_CONST 3 ( 1 )					  
							      4 16 LOAD_FAST 1 ( even_bits )				    16 COMPARE_OP 2 ( == )					  
							      18 LOAD_CONST 3 ( 1 )					    18 POP_JUMP_IF_FALSE 28					  
							      20 INPLACE_RSHIFT						    								  
							      22 STORE_FAST 1 ( even_bits )				    109 20 LOAD_FAST 1 ( even_bits )				  
							      								    22 LOAD_CONST 1 ( 1 )					  
							      5 24 LOAD_FAST 2 ( odd_bits )				    24 INPLACE_ADD						  
							      26 LOAD_CONST 3 ( 1 )					    26 STORE_FAST 1 ( even_bits )				  
							      28 INPLACE_LSHIFT						    								  
							      30 STORE_FAST 2 ( odd_bits )				    110 >> 28 LOAD_FAST 1 ( even_bits )				  
							      								    30 LOAD_CONST 1 ( 1 )					  
							      6 32 LOAD_FAST 1 ( even_bits )				    32 INPLACE_ADD						  
							      34 LOAD_FAST 2 ( odd_bits )				    34 STORE_FAST 1 ( even_bits )				  
							      36 BINARY_OR						    								  
							      38 RETURN_VALUE NEW_LINE					    111 36 LOAD_FAST 1 ( even_bits )				  
							      								    38 LOAD_FAST 0 ( self )					  
							      								    40 LOAD_ATTR 0 ( _max_bits )				  
							      								    42 LOAD_FAST 0 ( self )					  
							      								    44 LOAD_ATTR 1 ( even_bits )				  
							      								    46 LOAD_FAST 0 ( self )					  
							      								    48 LOAD_ATTR 2 ( _max_bits )				  
							      								    50 LOAD_FAST 0 ( self )					  
							      								    52 LOAD_ATTR 3 ( _max_bits )				  
							      								    54 LOAD_FAST 0 ( self )					  
							      								    56 LOAD_ATTR 4 ( _max_bits )				  
							      								    58 LOAD_FAST 0 ( self )					  
							      								    60 LOAD_ATTR 5 ( _max_bits )				  
							      								    62 LOAD_FAST 0 ( self )					  
							      								    64 LOAD_ATTR 6 ( _max_bits )				  
							      								    66 LOAD_FAST 0 ( self )					  
							      								    68 LOAD_ATTR 7 ( _max_bits )				  
							      								    70 LOAD_FAST 0 ( self )					  
							      								    72 LOAD_ATTR 8 ( _max_bits )				  
							      								    74 LOAD_FAST 0 ( self )					  
							      								    76 LOAD_ATTR 9 ( _max_bits )				  
							      								    78 LOAD_FAST 0 ( self )					  
							      								    80 LOAD_ATTR 10 ( _max_bits )				  
							      								    82 LOAD_FAST 0 ( self )					  
							      								    84 LOAD_ATTR 11 ( _max_bits )				  
							      								    86 LOAD_FAST 0 ( self )					  
							      								    88 LOAD_ATTR 12 ( _max_bits )				  
							      								    90 LOAD_FAST 0 ( self )					  
							      								    92 LOAD_ATTR 13 ( _max_bits )				  
							      								    94 LOAD_FAST 0 ( self )					  
							      								    96 LOAD_ATTR 14 ( _max_bits )				  
							      								    98 LOAD_FAST 0 ( self )					  
							      								    100 LOAD_ATTR 15 ( _max_bits )				  
							      								    102 LOAD_FAST 0 ( self )					  
							      								    104 LOAD_ATTR 16 ( _max_bits )				  
							      								    106 LOAD_FAST 0 ( self )					  
							      								    108 LOAD_ATTR 17 ( _max_bits )				  
							      								    								  
							      								    108 110 LOAD_FAST 0 ( self )				  
							      								    112 LOAD_ATTR 18 ( _max_bits )				  
							      								    114 LOAD_FAST 0 ( self )					  
							      								    116 LOAD_ATTR 19 ( _max_bits )				  
							      								    118 LOAD_FAST 0 ( self )					  
							      								    120 LOAD_ATTR 20 ( _max_bits )				  
							      								    122 LOAD_FAST 0 ( self )					  
							      								    124 LOAD_ATTR 19 ( _max_bits )				  
							      								    126								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION_FIBONACCI				      TAIL_RECURSION_FIBONACCI					    TAIL_RECURSION_FIBONACCI					  TAIL_RECURSION_FIBONACCI
--							      --							    --								  --
def fib ( n , a = 0 , b = 1 ) :				      Disassembly of <code object fib at 0x7fbac0e8bc90, file "<dis Disassembly of <code object fib at 0x7f816a673a50, file "<dis error : Traceback (most recent call last):   File
    if n == 0 :						      2 0 LOAD_FAST 0 ( n )					    51 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
	return a					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    if n == 1 :						      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
	return b					      6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 1 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    return fib ( n - 1 , b , a + b ) ;			      								    8 COMPARE_OP 2 ( == )					  assembler.py", line 81, in to_co     co_consts.app
							      3 8 LOAD_FAST 1 ( a )					    10 POP_JUMP_IF_FALSE 20					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 RETURN_VALUE						    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      								    52 12 LOAD_GLOBAL 0 ( fib )					  co	 self.co_cellvars, ValueError: code: varname
							      4 >> 12 LOAD_FAST 0 ( n )					    14 LOAD_CONST 3 ( 1 )					  s is too small
							      14 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 4 ( 2 )					  
							      16 COMPARE_OP 2 ( == )					    18 BINARY_SUBSCR						  
							      18 POP_JUMP_IF_FALSE 24					    20 LOAD_CONST 5 ( 1 )					  
							      								    22 LOAD_CONST 6 ( 2 )					  
							      5 20 LOAD_FAST 2 ( b )					    24 BINARY_SUBSCR						  
							      22 RETURN_VALUE						    26 LOAD_CONST 7 ( 3 )					  
							      								    28 LOAD_CONST 8 ( 3 )					  
							      6 >> 24 LOAD_GLOBAL 0 ( fib )				    30 LOAD_CONST 9 ( 4 )					  
							      26 LOAD_FAST 0 ( n )					    32 LOAD_CONST 10 ( 3 )					  
							      28 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 11 ( 4 )					  
							      30 BINARY_SUBTRACT					    36 LOAD_CONST 12 ( 3 )					  
							      32 LOAD_FAST 2 ( b )					    38 LOAD_CONST 12 ( 3 )					  
							      34 LOAD_FAST 1 ( a )					    40 LOAD_CONST 12 ( 3 )					  
							      36 LOAD_FAST 2 ( b )					    42 LOAD_CONST 12 ( 3 )					  
							      38 BINARY_ADD						    44 LOAD_CONST 13 ( 4 )					  
							      40 CALL_FUNCTION 3					    46 LOAD_CONST 14 ( 3 )					  
							      42 RETURN_VALUE NEW_LINE					    48 LOAD_CONST 15 ( 4 )					  
							      								    50 LOAD_CONST 16 ( 3 )					  
							      								    52 LOAD_CONST 17 ( 4 )					  
							      								    54 LOAD_CONST 16 ( 3 )					  
							      								    56 LOAD_CONST 17 ( 4 )					  
							      								    58 LOAD_CONST 18 ( 3 )					  
							      								    60 LOAD_CONST 19 ( 4 )					  
							      								    62 LOAD_CONST 20 ( 3 )					  
							      								    64 LOAD_CONST 19 ( 4 )					  
							      								    66 LOAD_CONST 20 ( 3 )					  
							      								    68 LOAD_CONST 21 ( 4 )					  
							      								    70 LOAD_CONST 22 ( 3 )					  
							      								    72 LOAD_CONST 22 ( 3 )					  
							      								    74 LOAD_CONST 23 ( 4 )					  
							      								    76 LOAD_CONST 22 ( 3 )					  
							      								    78 LOAD_CONST 23 ( 4 )					  
							      								    80 LOAD_CONST 22 ( 3 )					  
							      								    82 LOAD_CONST 23 ( 4 )					  
							      								    84 LOAD_CONST 22 ( 3 )					  
							      								    86 LOAD_CONST 23 ( 4 )					  
							      								    88 LOAD_CONST 22 ( 3 )					  
							      								    90 LOAD_CONST 23 ( 4 )					  
							      								    92 LOAD_CONST 22 ( 3 )					  
							      								    94 LOAD_CONST 23 ( 4 )					  
							      								    96 LOAD_CONST 24 ( 3 )					  
							      								    98 LOAD_CONST 23 ( 4 )					  
							      								    100 LOAD_CONST 22 ( 3 )					  
							      								    102 LOAD_CONST 23 ( 4 )					  
							      								    104 LOAD_CONST 24 ( 3 )					  
							      								    106 LOAD_CONST 25 ( 4 )					  
							      								    108 LOAD_CONST 26 ( 3 )					  
							      								    110 LOAD_CONST 26 ( 3 )					  
							      								    112 LOAD_CONST 27 ( 4 )					  
							      								    114 LOAD_CONST 28 ( 3 )					  
							      								    116 LOAD_CONST 30 ( 3 )					  
							      								    118 LOAD_CONST 29 ( 4 )					  
							      								    120 LOAD_CONST 30 ( 3 )					  
							      								    122 LOAD_CONST 28 ( 3 )					  
							      								    124 LOAD_CONST 29 ( 4 )					  
							      								    126 LOAD_CONST 30 ( 3 )					  
							      								    128 LOAD_CONST 31 ( 4 )					  
							      								    130 LOAD_CONST 30 ( 3 )					  
							      								    132 LOAD_CONST 29 ( 4 )					  
							      								    134 LOAD_CONST 30 ( 3 )					  
							      								    136 LOAD_CONST 31 ( 4 )					  
							      								    138 LOAD_CONST 30 ( 3 )					  
							      								    140 LOAD_CONST 31 ( 3 )					  
							      								    142 LOAD_CONST 30 ( 3 )					  
							      								    144 CALL_FUNCTION 3						  
							      								    146 BUILD_LIST 5						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
def arcLength ( diameter , angle ) :			      Disassembly of <code object arcLength at 0x7fbac<<unk>> de40, Disassembly of <code object arcLength at 0x7f816a673a50, file script_not_found : None
    if angle >= 360 :					      2 0 LOAD_FAST 1 ( angle )					    182 0 LOAD_FAST 1 ( angle )					  
	print ( "Angle cannot be formed" )		      2 LOAD_CONST 1 ( 360 )					    2 LOAD_CONST 1 ( 360 )					  
	return 0					      4 COMPARE_OP 5 ( >= )					    4 BINARY_MULTIPLY						  
    else :						      6 POP_JUMP_IF_FALSE 20					    6 STORE_FAST 2 ( diameter )					  
	arc = ( 3.142857142857143 * diameter ) * ( angle / 36 								    								  
	return arc					      3 8 LOAD_GLOBAL 0 ( print )				    183 8 LOAD_FAST 0 ( diameter )				  
							      10 LOAD_CONST 2 ( 'Angle cannot be formed' )		    10 LOAD_CONST 2 ( 0.57575757575757575757575757575757575757575 
							      12 CALL_FUNCTION 1					    								  
							      14 POP_TOP						    								  
							      								    								  
							      4 16 LOAD_CONST 3 ( 0 )					    								  
							      18 RETURN_VALUE						    								  
							      								    								  
							      6 >> 20 LOAD_CONST 4 ( 3.142857142857143 )		    								  
							      22 LOAD_FAST 0 ( diameter )				    								  
							      24 BINARY_MULTIPLY					    								  
							      26 LOAD_FAST 1 ( angle )					    								  
							      28 LOAD_CONST 5 ( 360.0 )					    								  
							      30 BINARY_TRUE_DIVIDE					    								  
							      32 BINARY_MULTIPLY					    								  
							      34 STORE_FAST 2 ( arc )					    								  
							      								    								  
							      7 36 LOAD_FAST 2 ( arc )					    								  
							      38 RETURN_VALUE						    								  
							      40 LOAD_CONST 0 ( None )					    								  
							      42 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
def countPaths ( n , m ) :				      Disassembly of <code object countPaths at 0x7fbac0e8bc90, fil Disassembly of <code object countPaths at 0x7f816a673a50, fil script_not_found : None
    if ( n == 0 or m == 0 ) :				      2 0 LOAD_FAST 0 ( n )					    113 0 LOAD_FAST 0 ( self )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_ATTR 0 ( countPaths )				  
    return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  4 COMPARE_OP 2 ( == )					    4 LOAD_CONST 1 ( 1 )					  
							      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( ( '-1,1,1))				  
							      8 LOAD_FAST 1 ( m )					    8LOAD_CONST3( ( '-1,1,1))					  
							      10 LOAD_CONST 1 ( 0 )					    10LOAD_CONST4( ( '-1,1,1,1))				  
							      12 COMPARE_OP 2 ( == )					    12LOAD_CONST5( ( '-1,1,1))					  
							      14 POP_JUMP_IF_FALSE 20					    14LOAD_CONST6( ( '-1,1,1))					  
							      								    16LOAD_CONST7( ( '-1,1,1))					  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    18LOAD_CONST8( ( '-1,1,1))					  
							      18 RETURN_VALUE						    20LOAD_CONST9( ( '-1,1,1))					  
							      								    22LOAD_CONST10( ( '-1,1,1))					  
							      4 >> 20 LOAD_GLOBAL 0 ( countPaths )			    24LOAD_CONST11( ( '-1,1,1))					  
							      22 LOAD_FAST 0 ( n )					    26LOAD_CONST12( ( '-1,1,1))					  
							      24 LOAD_CONST 2 ( 1 )					    28LOAD_CONST13( ( '-1,1))					  
							      26 BINARY_SUBTRACT					    30LOAD_CONST14( ( '-1,1))					  
							      28 LOAD_FAST 1 ( m )					    32LOAD_CONST15( ( '-1,1))					  
							      30 CALL_FUNCTION 2					    34LOAD_CONST16( ( '-1,1,1))					  
							      32 LOAD_GLOBAL 0 ( countPaths )				    36LOAD_CONST17( ( '-1,1,1))					  
							      34 LOAD_FAST 0 ( n )					    38LOAD_CONST16( ( '-1,1,1))					  
							      36 LOAD_FAST 1 ( m )					    40LOAD_CONST17( ( '-1,1))					  
							      38 LOAD_CONST 2 ( 1 )					    42LOAD_CONST18( ( '-1,1))					  
							      40 BINARY_SUBTRACT					    44LOAD_CONST19( ( '-1,1))					  
							      42 CALL_FUNCTION 2					    46LOAD_CONST20( ( '-1,1))					  
							      44 BINARY_ADD						    48LOAD_CONST19( ( '-1,1))					  
							      46 RETURN_VALUE NEW_LINE					    50LOAD_CONST20( ( '-1,1))					  
							      								    52LOAD_CONST21( ( '-1,1))					  
							      								    54LOAD_CONST22( ( '-1,1,1))					  
							      								    56LOAD_CONST23( ( '-1,1))					  
							      								    58LOAD_CONST22( ( '-1,1))					  
							      								    60LOAD_CONST23( ( '-1,1))					  
							      								    62LOAD_CONST22( ( '-1,1))					  
							      								    64LOAD_CONST23( ( '-1,1))					  
							      								    66LOAD_CONST23( ( '-1,1))					  
							      								    68LOAD_CONST23( ( '-1,1))					  
							      								    70LOAD_CONST23( ( '-1,1))					  
							      								    72LOAD_CONST23( ( '-1,1))					  
							      								    74								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN_1			      COUNTS_PATHS_POINT_REACH_ORIGIN_1				    COUNTS_PATHS_POINT_REACH_ORIGIN_1				  COUNTS_PATHS_POINT_REACH_ORIGIN_1
--							      --							    --								  --
def countPaths ( n , m ) :				      Disassembly of <code object countPaths at 0x7fbac<<unk>> de40 Disassembly of <code object countPaths at 0x7f816a673a50, fil script_not_found : None
    if ( n == 0 or m == 0 ) :				      2 0 LOAD_FAST 0 ( n )					    113 0 LOAD_FAST 0 ( self )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_ATTR 0 ( countPaths )				  
    return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  4 COMPARE_OP 2 ( == )					    4 LOAD_CONST 1 ( 1 )					  
							      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( ( '-1,1,1))				  
							      8 LOAD_FAST 1 ( m )					    8LOAD_CONST3( ( '-1,1,1))					  
							      10 LOAD_CONST 1 ( 0 )					    10LOAD_CONST4( ( '-1,1,1,1))				  
							      12 COMPARE_OP 2 ( == )					    12LOAD_CONST5( ( '-1,1,1))					  
							      14 POP_JUMP_IF_FALSE 20					    14LOAD_CONST6( ( '-1,1,1))					  
							      								    16LOAD_CONST7( ( '-1,1,1))					  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    18LOAD_CONST8( ( '-1,1,1))					  
							      18 RETURN_VALUE						    20LOAD_CONST9( ( '-1,1,1))					  
							      								    22LOAD_CONST10( ( '-1,1,1))					  
							      4 >> 20 LOAD_GLOBAL 0 ( countPaths )			    24LOAD_CONST11( ( '-1,1,1))					  
							      22 LOAD_FAST 0 ( n )					    26LOAD_CONST12( ( '-1,1,1))					  
							      24 LOAD_CONST 2 ( 1 )					    28LOAD_CONST13( ( '-1,1))					  
							      26 BINARY_SUBTRACT					    30LOAD_CONST14( ( '-1,1))					  
							      28 LOAD_FAST 1 ( m )					    32LOAD_CONST15( ( '-1,1))					  
							      30 CALL_FUNCTION 2					    34LOAD_CONST16( ( '-1,1,1))					  
							      32 LOAD_GLOBAL 0 ( countPaths )				    36LOAD_CONST17( ( '-1,1,1))					  
							      34 LOAD_FAST 0 ( n )					    38LOAD_CONST16( ( '-1,1,1))					  
							      36 LOAD_FAST 1 ( m )					    40LOAD_CONST17( ( '-1,1))					  
							      38 LOAD_CONST 2 ( 1 )					    42LOAD_CONST18( ( '-1,1))					  
							      40 BINARY_SUBTRACT					    44LOAD_CONST19( ( '-1,1))					  
							      42 CALL_FUNCTION 2					    46LOAD_CONST20( ( '-1,1))					  
							      44 BINARY_ADD						    48LOAD_CONST19( ( '-1,1))					  
							      46 RETURN_VALUE NEW_LINE					    50LOAD_CONST20( ( '-1,1))					  
							      								    52LOAD_CONST21( ( '-1,1))					  
							      								    54LOAD_CONST22( ( '-1,1,1))					  
							      								    56LOAD_CONST23( ( '-1,1))					  
							      								    58LOAD_CONST22( ( '-1,1))					  
							      								    60LOAD_CONST23( ( '-1,1))					  
							      								    62LOAD_CONST22( ( '-1,1))					  
							      								    64LOAD_CONST23( ( '-1,1))					  
							      								    66LOAD_CONST23( ( '-1,1))					  
							      								    68LOAD_CONST23( ( '-1,1))					  
							      								    70LOAD_CONST23( ( '-1,1))					  
							      								    72LOAD_CONST23( ( '-1,1))					  
							      								    74								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_ARRII					      MAXIMIZE_SUM_ARRII					    MAXIMIZE_SUM_ARRII						  MAXIMIZE_SUM_ARRII
--							      --							    --								  --
def maxSum ( arr , n ) :				      Disassembly of <code object maxSum at 0x7fbac0e89d20, file "< Disassembly of <code object maxSum at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    17 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    sum = 0						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 32, in <module>	  Fi
    for i in range ( n ) :				      4 CALL_METHOD 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in maxSum TypeError: 'NoneType
	sum += arr [ i ] * i				      6 POP_TOP							    6 STORE_FAST 1 ( n )					  ' object is not subscriptable
    return sum						      								    								  
							      3 8 LOAD_CONST 1 ( 0 )					    18 8 LOAD_FAST 1 ( n )					  
							      10 STORE_FAST 2 ( sum )					    10 LOAD_CONST 1 ( 0 )					  
							      								    12 BINARY_SUBSCR						  
							      4 12 SETUP_LOOP 32 ( to 46 )				    14 STORE_FAST 2 ( maxSum )					  
							      14 LOAD_GLOBAL 1 ( range )				    								  
							      16 LOAD_FAST 1 ( n )					    19 16 LOAD_FAST 2 ( maxSum )				  
							      18 CALL_FUNCTION 1					    18 LOAD_FAST 1 ( n )					  
							      20 GET_ITER						    20 LOAD_CONST 2 ( 1 )					  
							      >> 22 FOR_ITER 20 ( to 44 )				    22 BINARY_SUBSCR						  
							      24 STORE_FAST 3 ( i )					    24 LOAD_FAST 1 ( n )					  
							      								    26 LOAD_CONST 3 ( 1 )					  
							      5 26 LOAD_FAST 2 ( sum )					    28 BINARY_SUBSCR						  
							      28 LOAD_FAST 0 ( arr )					    30 LOAD_FAST 1 ( n )					  
							      30 LOAD_FAST 3 ( i )					    32 LOAD_CONST 4 ( - 1 )					  
							      32 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      34 LOAD_FAST 3 ( i )					    36 LOAD_FAST 1 ( n )					  
							      36 BINARY_MULTIPLY					    38 LOAD_CONST 5 ( - 1 )					  
							      38 INPLACE_ADD						    40 BINARY_SUBSCR						  
							      40 STORE_FAST 2 ( sum )					    42 LOAD_FAST 1 ( n )					  
							      42 JUMP_ABSOLUTE 22					    44 LOAD_CONST 6 ( - 1 )					  
							      >> 44 POP_BLOCK						    46 BINARY_SUBSCR						  
							      								    48 LOAD_FAST 1 ( n )					  
							      6 >> 46 LOAD_FAST 2 ( sum )				    50 LOAD_CONST 7 ( - 1 )					  
							      48 RETURN_VALUE NEW_LINE					    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 1 ( n )					  
							      								    56 LOAD_CONST 8 ( - 1 )					  
							      								    58 BINARY_SUBSCR						  
							      								    60 LOAD_FAST 1 ( n )					  
							      								    62 LOAD_CONST 9 ( - 1 )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 1 ( n )					  
							      								    68 LOAD_CONST 10 ( - 1 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 LOAD_FAST 1 ( n )					  
							      								    74 LOAD_CONST 11 ( - 1 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 1 ( n )					  
							      								    80 LOAD_CONST 12 ( - 1 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 1 ( n )					  
							      								    86 LOAD_CONST 13 ( - 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 1 ( n )					  
							      								    92 LOAD_CONST 6 ( - 1 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( n )					  
							      								    98 LOAD_CONST 6 ( - 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_CONST 7 ( - 1 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 1 ( n )					  
							      								    110 LOAD_CONST 6 ( - 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 6 ( - 1 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_CONST 6 ( - 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_CONST 6 ( - 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_CONST 6 ( - 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 LOAD_CONST 7 ( - 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_FAST 1 ( n )					  
							      								    146 LOAD_CONST 6 ( - 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 BINARY_ADD						  
							      								    152 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
def findLastIndex ( str , x ) :				      Disassembly of <code object findLastIndex at 0x7fbac<<unk>> d Disassembly of <code object findLastIndex at 0x7f816a673a50,  script_not_found : None
    index = - 1						      2 0 LOAD_CONST 1 ( - 1 )					    17 0 LOAD_CONST 1 ( - 1 )					  
    for i in range ( 0 , len ( str ) ) :		      2 STORE_FAST 2 ( index )					    2 STORE_FAST 1 ( x )					  
	if str [ i ] == x :				      								    								  
	    index = i					      3 4 SETUP_LOOP 38 ( to 44 )				    18 4 LOAD_FAST 1 ( x )					  
    return index					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_CONST 2 ( 0 )					  
							      8 LOAD_CONST 2 ( 0 )					    8 COMPARE_OP 4 ( > )					  
							      10 LOAD_GLOBAL 1 ( len )					    10 POP_JUMP_IF_FALSE 20					  
							      12 LOAD_FAST 0 ( str )					    								  
							      14 CALL_FUNCTION 1					    19 12 LOAD_FAST 1 ( x )					  
							      16 CALL_FUNCTION 2					    14 LOAD_CONST 3 ( 1 )					  
							      18 GET_ITER						    16 INPLACE_ADD						  
							      >> 20 FOR_ITER 20 ( to 42 )				    18 STORE_FAST 1 ( x )					  
							      22 STORE_FAST 3 ( i )					    								  
							      								    20 20 LOAD_FAST 1 ( x )					  
							      4 24 LOAD_FAST 0 ( str )					    22 LOAD_CONST 4 ( - 1 )					  
							      26 LOAD_FAST 3 ( i )					    24 INPLACE_ADD						  
							      28 BINARY_SUBSCR						    26 STORE_FAST 1 ( x )					  
							      30 LOAD_FAST 1 ( x )					    								  
							      32 COMPARE_OP 2 ( == )					    21 >> 28 LOAD_FAST 1 ( x )					  
							      34 POP_JUMP_IF_FALSE 20					    30 LOAD_CONST 5 ( - 1 )					  
							      								    32 INPLACE_ADD						  
							      5 36 LOAD_FAST 3 ( i )					    34 STORE_FAST 1 ( x )					  
							      38 STORE_FAST 2 ( index )					    								  
							      40 JUMP_ABSOLUTE 20					    22 36 LOAD_FAST 1 ( x )					  
							      >> 42 POP_BLOCK						    38 LOAD_CONST 6 ( - 1 )					  
							      								    40 INPLACE_ADD						  
							      6 >> 44 LOAD_FAST 2 ( index )				    42 STORE_FAST 1 ( x )					  
							      46 RETURN_VALUE NEW_LINE					    44 JUMP_FORWARD 2 ( to 52 )					  
							      								    								  
							      								    23 >> 46 LOAD_FAST 1 ( x )					  
							      								    48 LOAD_CONST 7 ( - 1 )					  
							      								    50 INPLACE_ADD						  
							      								    52 STORE_FAST 1 ( x )					  
							      								    								  
							      								    24 54 LOAD_FAST 1 ( x )					  
							      								    56 LOAD_CONST 8 ( - 1 )					  
							      								    58 INPLACE_ADD						  
							      								    60 STORE_FAST 1 ( x )					  
							      								    								  
							      								    25 62 LOAD_FAST 1 ( x )					  
							      								    64 LOAD_CONST 9 ( - 1 )					  
							      								    66 INPLACE_ADD						  
							      								    68 STORE_FAST 1 ( x )					  
							      								    								  
							      								    26 70 LOAD_FAST 1 ( x )					  
							      								    72 LOAD_CONST 10 ( - 1 )					  
							      								    74 INPLACE_ADD						  
							      								    76 STORE_FAST 1 ( x )					  
							      								    78 JUMP_FORWARD 2 ( to 52 )					  
							      								    								  
							      								    27 >> 80 LOAD_FAST 1 ( x )					  
							      								    82 LOAD_CONST 11 ( - 1 )					  
							      								    84 INPLACE_ADD						  
							      								    86 STORE_FAST 1 ( x )					  
							      								    								  
							      								    28 88 LOAD_FAST 1 ( x )					  
							      								    90 LOAD_CONST 12 ( - 1 )					  
							      								    92 INPLACE_ADD						  
							      								    94 STORE_FAST 1 ( x )					  
							      								    								  
							      								    29 96 LOAD_FAST 1 ( x )					  
							      								    98 LOAD_CONST 13 ( - 1 )					  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 1 ( x )					  
							      								    								  
							      								    30 104 LOAD_FAST 1 ( x )					  
							      								    106 LOAD_FAST 0 ( str )					  
							      								    108 LOAD_CONST 14 ( - 1 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( x )					  
							      								    								  
							      								    31 114 LOAD_FAST 1 ( x )					  
							      								    116 LOAD_CONST 15 ( - 1 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( x )					  
							      								    122 JUMP_FORWARD 2 ( to 52 )				  
							      								    								  
							      								    32 >> 124 LOAD_FAST 1 ( x )					  
							      								    126 LOAD_CONST 15 ( - 1 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( x )					  
							      								    								  
							      								    33 >> 132 LOAD_FAST 1 ( x )					  
							      								    134 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_LENGTH_PALINDROME				      NTH_EVEN_LENGTH_PALINDROME				    NTH_EVEN_LENGTH_PALINDROME					  NTH_EVEN_LENGTH_PALINDROME
--							      --							    --								  --
def evenlength ( n ) :					      Disassembly of <code object evenlength at 0x7fbac0e89d20, fil Disassembly of <code object evenlength at 0x7f816a6e4b70, fil error : Traceback (most recent call last):   File
    res = n						      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 1 ( res )					  "XLM/dis_script.py", line 60, in <module>	exec
    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :	      2 STORE_FAST 1 ( res )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 31, in <module>	  Fi
	res += n [ j ]					      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in evenlength UnboundLocalErro
    return res						      3 4 SETUP_LOOP 40 ( to 46 )				    6 LOAD_CONST 2 ( 1 )					  r: local variable 'res' referenced before assignme
							      6 LOAD_GLOBAL 0 ( range )					    8 BINARY_SUBSCR						  nt
							      8 LOAD_GLOBAL 1 ( len )					    10 LOAD_CONST 3 ( 2 )					  
							      10 LOAD_FAST 0 ( n )					    12 BINARY_SUBSCR						  
							      12 CALL_FUNCTION 1					    14 LOAD_CONST 4 ( 3 )					  
							      14 LOAD_CONST 1 ( 1 )					    16 COMPARE_OP 2 ( == )					  
							      16 BINARY_SUBTRACT					    18 POP_JUMP_IF_FALSE 24					  
							      18 LOAD_CONST 2 ( - 1 )					    								  
							      20 LOAD_CONST 2 ( - 1 )					    27 20 LOAD_FAST 1 ( res )					  
							      22 CALL_FUNCTION 3					    22 LOAD_CONST 5 ( '%d %d %d %d %d %d %d %d %d %d %d %d %d %d  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 16 ( to 44 )				    27 28 LOAD_FAST 1 ( res )					  
							      28 STORE_FAST 2 ( j )					    30 LOAD_FAST 0 ( n )					  
							      								    32 BUILD_TUPLE 3						  
							      4 30 LOAD_FAST 1 ( res )					    34 BINARY_MODULO						  
							      32 LOAD_FAST 0 ( n )					    36 RETURN_VALUE						  
							      34 LOAD_FAST 2 ( j )					    NEW_LINE							  
							      36 BINARY_SUBSCR						    								  
							      38 INPLACE_ADD						    								  
							      40 STORE_FAST 1 ( res )					    								  
							      42 JUMP_ABSOLUTE 26					    								  
							      >> 44 POP_BLOCK						    								  
							      								    								  
							      5 >> 46 LOAD_FAST 1 ( res )				    								  
							      48 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
def horner ( poly , n , x ) :				      Disassembly of <code object horner at 0x7fbac<<unk>> d540, fi Disassembly of <code object horner at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    result = poly [ 0 ]					      2 0 LOAD_FAST 0 ( poly )					    26 0 LOAD_FAST 0 ( poly )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( 1 , n ) :				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_FAST 1 ( n )						  item in run_dis_script():   File "XLM/dis_script.p
	result = result * x + poly [ i ]		      4 BINARY_SUBSCR						    4 BINARY_MULTIPLY						  y", line 54, in run_dis_script     hyp_co = mco.to
    return result					      6 STORE_FAST 3 ( result )					    6 RETURN_VALUE						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      								    NEW_LINE							  assembler.py", line 81, in to_co     co_consts.app
							      3 8 SETUP_LOOP 34 ( to 44 )				    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 LOAD_GLOBAL 0 ( range )				    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 LOAD_CONST 2 ( 1 )					    								  co	 self.co_cellvars, ValueError: code: varname
							      14 LOAD_FAST 1 ( n )					    								  s is too small
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 20 ( to 42 )				    								  
							      22 STORE_FAST 4 ( i )					    								  
							      								    								  
							      4 24 LOAD_FAST 3 ( result )				    								  
							      26 LOAD_FAST 2 ( x )					    								  
							      28 BINARY_MULTIPLY					    								  
							      30 LOAD_FAST 0 ( poly )					    								  
							      32 LOAD_FAST 4 ( i )					    								  
							      34 BINARY_SUBSCR						    								  
							      36 BINARY_ADD						    								  
							      38 STORE_FAST 3 ( result )				    								  
							      40 JUMP_ABSOLUTE 20					    								  
							      >> 42 POP_BLOCK						    								  
							      								    								  
							      5 >> 44 LOAD_FAST 3 ( result )				    								  
							      46 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
def search ( arr , n , x ) :				      Disassembly of <code object search at 0x7fbac<<unk>> de40, fi Disassembly of <code object search at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( i , n ) :				      2 STORE_FAST 3 ( i )					    2 LOAD_METHOD 0 ( append )					  item in run_dis_script():   File "XLM/dis_script.p
	if ( arr [ i ] == x ) :				      								    4 LOAD_FAST 1 ( n )						  y", line 54, in run_dis_script     hyp_co = mco.to
	    return i					      3 4 SETUP_LOOP 34 ( to 40 )				    6 CALL_METHOD 1						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    return - 1						      6 LOAD_GLOBAL 0 ( range )					    8 POP_TOP							  assembler.py", line 81, in to_co     co_consts.app
							      8 LOAD_FAST 3 ( i )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 LOAD_FAST 1 ( n )					    27 10 LOAD_FAST 0 ( arr )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 CALL_FUNCTION 2					    12 LOAD_METHOD 1 ( append )					  co	 self.co_cellvars, ValueError: code: varname
							      14 GET_ITER						    14 LOAD_FAST 1 ( n )					  s is too small
							      >> 16 FOR_ITER 20 ( to 38 )				    16 CALL_METHOD 1						  
							      18 STORE_FAST 3 ( i )					    18 POP_TOP							  
							      								    20 LOAD_CONST 0 ( None )					  
							      4 20 LOAD_FAST 0 ( arr )					    22 RETURN_VALUE						  
							      22 LOAD_FAST 3 ( i )					    NEW_LINE							  
							      24 BINARY_SUBSCR						    								  
							      26 LOAD_FAST 2 ( x )					    								  
							      28 COMPARE_OP 2 ( == )					    								  
							      30 POP_JUMP_IF_FALSE 16					    								  
							      								    								  
							      5 32 LOAD_FAST 3 ( i )					    								  
							      34 RETURN_VALUE						    								  
							      36 JUMP_ABSOLUTE 16					    								  
							      >> 38 POP_BLOCK						    								  
							      								    								  
							      6 >> 40 LOAD_CONST 2 ( - 1 )				    								  
							      42 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
def isPrime ( n ) :					      Disassembly of <code object isPrime at 0x7fbac<<unk>> d540, f Disassembly of <code object isPrime at 0x7f816a683d20, file " failure : #Results: 0, 10
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    36 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    for i in range ( 2 , n ) :				      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 2 ( == )					  
	if ( n % i == 0 ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	    return False				      								    								  
    return True						      3 8 LOAD_CONST 2 ( False )				    37 8 LOAD_CONST 2 ( 0 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 SETUP_LOOP 34 ( to 48 )				    38 >> 12 LOAD_CONST 3 ( False )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 RETURN_VALUE						  
							      16 LOAD_CONST 3 ( 2 )					    NEW_LINE							  
							      18 LOAD_FAST 0 ( n )					    								  
							      20 CALL_FUNCTION 2					    								  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 20 ( to 46 )				    								  
							      26 STORE_FAST 1 ( i )					    								  
							      								    								  
							      5 28 LOAD_FAST 0 ( n )					    								  
							      30 LOAD_FAST 1 ( i )					    								  
							      32 BINARY_MODULO						    								  
							      34 LOAD_CONST 4 ( 0 )					    								  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 24					    								  
							      								    								  
							      6 40 LOAD_CONST 2 ( False )				    								  
							      42 RETURN_VALUE						    								  
							      44 JUMP_ABSOLUTE 24					    								  
							      >> 46 POP_BLOCK						    								  
							      								    								  
							      7 >> 48 LOAD_CONST 5 ( True )				    								  
							      50 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER			  FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
def center ( x1 , x2 , y1 , y2 ) :			      Disassembly of <code object center at 0x7fbac<<unk>> de40, fi Disassembly of <code object center at 0x7f816a6e4b70, file "< script_not_found : None
    print ( int ( ( x1 + x2 ) / 2 ) , end = "" )	      2 0 LOAD_GLOBAL 0 ( print )				    y1 0 LOAD_GLOBAL 0 ( print )				  
    print ( "," , int ( ( y1 + y2 ) / 2 ) )		      2 LOAD_GLOBAL 1 ( int )					    2 LOAD_GLOBAL 1 ( int )					  
							      4 LOAD_FAST 0 ( x1 )					    4 LOAD_FAST 0 ( x1 )					  
							      6 LOAD_FAST 1 ( x2 )					    6 CALL_FUNCTION 1						  
							      8 BINARY_ADD						    8 LOAD_CONST 1 ( 2 )					  
							      10 LOAD_CONST 1 ( 2 )					    10 BINARY_POWER						  
							      12 BINARY_TRUE_DIVIDE					    12 CALL_FUNCTION 1						  
							      14 CALL_FUNCTION 1					    14 POP_TOP							  
							      16 LOAD_CONST 2 ( '' )					    16 LOAD_CONST 0 ( None )					  
							      18 LOAD_CONST 3 ( ( 'end' , ) )				    18 RETURN_VALUE						  
							      20 CALL_FUNCTION_KW 2					    NEW_LINE							  
							      22 POP_TOP						    								  
							      								    								  
							      3 24 LOAD_GLOBAL 0 ( print )				    								  
							      26 LOAD_CONST 4 ( ',' )					    								  
							      28 LOAD_GLOBAL 1 ( int )					    								  
							      30 LOAD_FAST 2 ( y1 )					    								  
							      32 LOAD_FAST 3 ( y2 )					    								  
							      34 BINARY_ADD						    								  
							      36 LOAD_CONST 1 ( 2 )					    								  
							      38 BINARY_TRUE_DIVIDE					    								  
							      40 CALL_FUNCTION 1					    								  
							      42 CALL_FUNCTION 2					    								  
							      44 POP_TOP						    								  
							      46 LOAD_CONST 0 ( None )					    								  
							      48 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
def findLastIndex ( str , x ) :				      Disassembly of <code object findLastIndex at 0x7fbac0e8bc90,  Disassembly of <code object findLastIndex at 0x7f816a673a50,  script_not_found : None
    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	      2 0 SETUP_LOOP 44 ( to 46 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	if ( str [ i ] == x ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    return i					      4 LOAD_GLOBAL 1 ( len )					    4 LOAD_CONST 1 ( 1 )					  
    return - 1						      6 LOAD_FAST 0 ( str )					    6 CALL_FUNCTION 1						  
							      8 CALL_FUNCTION 1						    8 GET_ITER							  
							      10 LOAD_CONST 1 ( 1 )					    >> 10 FOR_ITER 14 ( to 22 )					  
							      12 BINARY_SUBTRACT					    12 STORE_FAST 1 ( x )					  
							      14 LOAD_CONST 2 ( - 1 )					    								  
							      16 LOAD_CONST 2 ( - 1 )					    27 14 LOAD_FAST 1 ( x )					  
							      18 CALL_FUNCTION 3					    16 LOAD_METHOD 1 ( append )					  
							      20 GET_ITER						    18 LOAD_FAST 0 ( str )					  
							      >> 22 FOR_ITER 20 ( to 44 )				    20 CALL_METHOD 1						  
							      24 STORE_FAST 2 ( i )					    22 POP_TOP							  
							      								    24 JUMP_ABSOLUTE 10						  
							      3 26 LOAD_FAST 0 ( str )					    >> 26 POP_BLOCK						  
							      28 LOAD_FAST 2 ( i )					    >> 28 LOAD_CONST 2 ( None )					  
							      30 BINARY_SUBSCR						    30 RETURN_VALUE						  
							      32 LOAD_FAST 1 ( x )					    NEW_LINE							  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_FALSE 22					    								  
							      								    								  
							      4 38 LOAD_FAST 2 ( i )					    								  
							      40 RETURN_VALUE						    								  
							      42 JUMP_ABSOLUTE 22					    								  
							      >> 44 POP_BLOCK						    								  
							      								    								  
							      5 >> 46 LOAD_CONST 2 ( - 1 )				    								  
							      48 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
def checkValidity ( a , b , c ) :			      Disassembly of <code object checkValidity at 0x7fbac<<unk>> d Disassembly of <code object checkValidity at 0x7f816a6e4b70,  error : Traceback (most recent call last):   File
    if ( a + b <= c ) or ( a + c <= b ) or ( b + c <= a ) :   2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
	return False					      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( b )					  item in run_dis_script():   File "XLM/dis_script.p
    else :						      4 BINARY_ADD						    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
	return True					      6 LOAD_FAST 2 ( c )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 COMPARE_OP 1 ( <= )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 POP_JUMP_IF_TRUE 36					    27 8 LOAD_CONST 2 ( True )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 LOAD_FAST 0 ( a )					    10 RETURN_VALUE						  n parse     constants[arg] = ast.literal_eval(argr
							      14 LOAD_FAST 2 ( c )					    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 BINARY_ADD						    28 >> 12 LOAD_CONST 3 ( True )				  ib/python3.7/ast.py", line 91, in literal_eval
							      18 LOAD_FAST 1 ( b )					    14 RETURN_VALUE						   return _convert(node_or_string)   File "/home/ubu
							      20 COMPARE_OP 1 ( <= )					    NEW_LINE							  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      22 POP_JUMP_IF_TRUE 36					    								  line 90, in _convert	   return _convert_signed_nu
							      24 LOAD_FAST 1 ( b )					    								  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      26 LOAD_FAST 2 ( c )					    								  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      28 BINARY_ADD						    								  ed_num     return _convert_num(node)	 File "/home
							      30 LOAD_FAST 0 ( a )					    								  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      32 COMPARE_OP 1 ( <= )					    								  y", line 55, in _convert_num	   raise ValueError(
							      34 POP_JUMP_IF_FALSE 40					    								  'malformed node or string: ' + repr(node)) ValueEr
							      								    								  ror: malformed node or string: <_ast.Name object a
							      3 >> 36 LOAD_CONST 1 ( False )				    								  t 0x7f99d2a4f290>
							      38 RETURN_VALUE						    								  
							      								    								  
							      5 >> 40 LOAD_CONST 2 ( True )				    								  
							      42 RETURN_VALUE						    								  
							      44 LOAD_CONST 0 ( None )					    								  
							      46 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE_1			      SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				    SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				  SQUARE_ROOT_OF_A_PERFECT_SQUARE_1
--							      --							    --								  --
def squareRoot ( n ) :					      Disassembly of <code object squareRoot at 0x7fbac<<unk>> de40 Disassembly of <code object squareRoot at 0x7f816a6e4b70, fil script_not_found : None
    x = n ;						      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 1 ( x )					  
    y = 1 ;						      2 STORE_FAST 1 ( x )					    2 LOAD_CONST 1 ( 0 )					  
    while ( x > y ) :					      								    4 BINARY_SUBSCR						  
	x = ( x + y ) / 2 ;				      3 4 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
	y = n / x ;					      6 STORE_FAST 2 ( y )					    8 COMPARE_OP 2 ( == )					  
    return x ;						      								    10 POP_JUMP_IF_FALSE 20					  
							      4 8 SETUP_LOOP 32 ( to 42 )				    								  
							      >> 10 LOAD_FAST 1 ( x )					    27 12 LOAD_FAST 1 ( x )					  
							      12 LOAD_FAST 2 ( y )					    14 LOAD_CONST 3 ( 1 )					  
							      14 COMPARE_OP 4 ( > )					    16 BINARY_SUBSCR						  
							      16 POP_JUMP_IF_FALSE 40					    18 LOAD_CONST 4 ( 2 )					  
							      								    20 COMPARE_OP 2 ( == )					  
							      5 18 LOAD_FAST 1 ( x )					    22 POP_JUMP_IF_FALSE 28					  
							      20 LOAD_FAST 2 ( y )					    								  
							      22 BINARY_ADD						    28 24 LOAD_FAST 1 ( x )					  
							      24 LOAD_CONST 2 ( 2 )					    26 LOAD_CONST 5 ( 1 )					  
							      26 BINARY_TRUE_DIVIDE					    28 BINARY_SUBSCR						  
							      28 STORE_FAST 1 ( x )					    30 LOAD_CONST 6 ( 2 )					  
							      								    32 COMPARE_OP 2 ( == )					  
							      6 30 LOAD_FAST 0 ( n )					    34 POP_JUMP_IF_FALSE 38					  
							      32 LOAD_FAST 1 ( x )					    								  
							      34 BINARY_TRUE_DIVIDE					    29 36 LOAD_FAST 1 ( x )					  
							      36 STORE_FAST 2 ( y )					    38 LOAD_CONST 7 ( 2 )					  
							      38 JUMP_ABSOLUTE 10					    40 BINARY_SUBSCR						  
							      >> 40 POP_BLOCK						    42 LOAD_CONST 8 ( 2 )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      7 >> 42 LOAD_FAST 1 ( x )					    46 POP_JUMP_IF_FALSE 52					  
							      44 RETURN_VALUE NEW_LINE					    								  
							      								    30 48 LOAD_FAST 1 ( x )					  
							      								    50 LOAD_CONST 5 ( 1 )					  
							      								    52 BINARY_SUBSCR						  
							      								    54 LOAD_CONST 9 ( 2 )					  
							      								    56 BINARY_SUBSCR						  
							      								    58 LOAD_CONST 10 ( 2 )					  
							      								    60 BINARY_SUBSCR						  
							      								    62 LOAD_CONST 11 ( 3 )					  
							      								    64 COMPARE_OP 2 ( == )					  
							      								    66 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    31 68 LOAD_FAST 1 ( x )					  
							      								    70 LOAD_CONST 5 ( 1 )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_CONST 12 ( 2 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_CONST 13 ( 3 )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    32 84 LOAD_FAST 1 ( x )					  
							      								    86 LOAD_CONST 5 ( 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 6 ( 2 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 7 ( 2 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 6 ( 2 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 8 ( 2 )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    33 108 LOAD_FAST 1 ( x )					  
							      								    110 LOAD_CONST 5 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 6 ( 2 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 7 ( 2 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 8 ( 2 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 6 ( 2 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 7 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 8 ( 2 )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    34 140 LOAD_FAST 1 ( x )					  
							      								    142 LOAD_CONST 5 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 9 ( 2 )					  
							      								    148 COMPARE_OP 2 ( == )					  
							      								    150 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    35 152 LOAD_FAST 1 ( x )					  
							      								    154 LOAD_CONST 10 ( 2 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 11 ( 3 )					  
							      								    160 COMPARE_OP 2 ( == )					  
							      								    162 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    36 >> 164 LOAD_FAST 1 ( x )					  
							      								    166 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f Disassembly of <code object nextPowerOf2 at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    p = 1						      2 0 LOAD_CONST 1 ( 1 )					    20 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    if ( n and not ( n & ( n - 1 ) ) ) :		      2 STORE_FAST 1 ( p )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 33, in <module>	  Fi
	return n					      								    4 COMPARE_OP 3 ( != )					  le "<dis>", line 2, in nextPowerOf2 UnboundLocalEr
    while ( p < n ) :					      3 4 LOAD_FAST 0 ( n )					    6 POP_JUMP_IF_FALSE 12					  ror: local variable 'n' referenced before assignme
	p <<= 1						      6 POP_JUMP_IF_FALSE 24					    								  nt
    return p ;						      8 LOAD_FAST 0 ( n )					    21 8 LOAD_FAST 1 ( n )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 1 ( 0 )					  
							      12 LOAD_CONST 1 ( 1 )					    12 COMPARE_OP 3 ( != )					  
							      14 BINARY_SUBTRACT					    14 POP_JUMP_IF_FALSE 28					  
							      16 BINARY_AND						    								  
							      18 POP_JUMP_IF_TRUE 24					    22 16 LOAD_FAST 1 ( n )					  
							      								    18 LOAD_CONST 1 ( 0 )					  
							      4 20 LOAD_FAST 0 ( n )					    20 COMPARE_OP 3 ( != )					  
							      22 RETURN_VALUE						    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 >> 24 SETUP_LOOP 20 ( to 46 )				    23 24 LOAD_FAST 1 ( n )					  
							      >> 26 LOAD_FAST 1 ( p )					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 0 ( n )					    28 COMPARE_OP 3 ( != )					  
							      30 COMPARE_OP 0 ( < )					    30 POP_JUMP_IF_FALSE 28					  
							      32 POP_JUMP_IF_FALSE 44					    								  
							      								    24 32 LOAD_FAST 1 ( n )					  
							      6 34 LOAD_FAST 1 ( p )					    34 LOAD_CONST 1 ( 0 )					  
							      36 LOAD_CONST 1 ( 1 )					    36 COMPARE_OP 3 ( != )					  
							      38 INPLACE_LSHIFT						    38 POP_JUMP_IF_FALSE 44					  
							      40 STORE_FAST 1 ( p )					    40 LOAD_FAST 1 ( n )					  
							      42 JUMP_ABSOLUTE 26					    42 LOAD_CONST 1 ( 0 )					  
							      >> 44 POP_BLOCK						    44 COMPARE_OP 3 ( != )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      7 >> 46 LOAD_FAST 1 ( p )					    								  
							      48 RETURN_VALUE NEW_LINE					    25 48 LOAD_FAST 1 ( n )					  
							      								    50 LOAD_CONST 1 ( 0 )					  
							      								    52 COMPARE_OP 3 ( != )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    26 56 LOAD_FAST 1 ( n )					  
							      								    58 LOAD_CONST 1 ( 0 )					  
							      								    60 COMPARE_OP 3 ( != )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    27 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 1 ( 0 )					  
							      								    68 COMPARE_OP 3 ( != )					  
							      								    70 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    28 >> 72 LOAD_FAST 1 ( n )					  
							      								    74 LOAD_CONST 1 ( 0 )					  
							      								    76 COMPARE_OP 3 ( != )					  
							      								    78 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    29 80 LOAD_FAST 1 ( n )					  
							      								    82 LOAD_CONST 1 ( 0 )					  
							      								    84 COMPARE_OP 3 ( != )					  
							      								    86 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    30 88 LOAD_FAST 1 ( n )					  
							      								    90 LOAD_CONST 1 ( 0 )					  
							      								    92 COMPARE_OP 3 ( != )					  
							      								    94 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    31 96 LOAD_FAST 1 ( n )					  
							      								    98 LOAD_CONST 1 ( 0 )					  
							      								    100 COMPARE_OP 3 ( != )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    32 104 LOAD_FAST 1 ( n )					  
							      								    106 LOAD_CONST 1 ( 0 )					  
							      								    108 COMPARE_OP 3 ( != )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    33 112 LOAD_FAST 1 ( n )					  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 COMPARE_OP 3 ( != )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    34 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 COMPARE_OP 3 ( != )					  
							      								    126 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    35 128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 COMPARE_OP 3 ( != )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    36 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_CONST 1 ( 0 )					  
							      								    140 COMPARE_OP 3 ( != )					  
							      								    142 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    37 144 LOAD_FAST 1 ( n )					  
							      								    146 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
def spiralDiaSum ( n ) :				      Disassembly of <code object spiralDiaSum at 0x7fbac0e8bc90, f Disassembly of <code object spiralDiaSum at 0x7f816a601660, f script_not_found : None
    if n == 1 :						      2 0 LOAD_FAST 0 ( n )					    65 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) 4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      3 8 LOAD_CONST 1 ( 1 )					    66 8 LOAD_CONST 2 ( - 1 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_CONST 2 ( 4 )				    67 >> 12 LOAD_CONST 3 ( - 1 )				  
							      14 LOAD_FAST 0 ( n )					    14 RETURN_VALUE						  
							      16 BINARY_MULTIPLY					    NEW_LINE							  
							      18 LOAD_FAST 0 ( n )					    								  
							      20 BINARY_MULTIPLY					    								  
							      22 LOAD_CONST 3 ( 6 )					    								  
							      24 LOAD_FAST 0 ( n )					    								  
							      26 BINARY_MULTIPLY					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 LOAD_CONST 3 ( 6 )					    								  
							      32 BINARY_ADD						    								  
							      34 LOAD_GLOBAL 0 ( spiralDiaSum )				    								  
							      36 LOAD_FAST 0 ( n )					    								  
							      38 LOAD_CONST 4 ( 2 )					    								  
							      40 BINARY_SUBTRACT					    								  
							      42 CALL_FUNCTION 1					    								  
							      44 BINARY_ADD						    								  
							      46 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
def compute ( a , b ) :					      Disassembly of <code object compute at 0x7fbac0e89d20, file " Disassembly of <code object compute at 0x7f816a6e4b70, file " error : Traceback (most recent call last):   File
    AM = ( a + b ) / 2					      2 0 LOAD_FAST 0 ( a )					    58 0 LOAD_GLOBAL 0 ( AM )					  "XLM/dis_script.py", line 59, in <module>	for
    GM = math.sqrt ( a * b )				      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( b '/' )					  item in run_dis_script():   File "XLM/dis_script.p
    HM = ( GM * GM ) / AM				      4 BINARY_ADD						    4 CALL_FUNCTION 1						  y", line 47, in run_dis_script     co_code, co_nlo
    return HM						      6 LOAD_CONST 1 ( 2 )					    6 STORE_FAST 1 ( b )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 BINARY_TRUE_DIVIDE					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 STORE_FAST 2 ( AM )					    59 8 LOAD_GLOBAL 1 ( GM )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      								    10 LOAD_CONST 2 ( '//' )					  n parse     constants[arg] = ast.literal_eval(argr
							      3 12 LOAD_GLOBAL 0 ( math )				    12 CALL_FUNCTION 1						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      14 LOAD_METHOD 1 ( sqrt )					    14 STORE_FAST 2 ( a )					  ib/python3.7/ast.py", line 46, in literal_eval
							      16 LOAD_FAST 0 ( a )					    								   node_or_string = parse(node_or_string, mode='eval
							      18 LOAD_FAST 1 ( b )					    60 16 LOAD_GLOBAL 2 ( PM )					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      20 BINARY_MULTIPLY					    18 LOAD_FAST 1 ( b )					  /python3.7/ast.py", line 35, in parse	    return c
							      22 CALL_METHOD 1						    20 CALL_FUNCTION 1						  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      24 STORE_FAST 3 ( GM )					    22 STORE_FAST 3 ( a )					  le "<unknown>", line 1     b '/'	   ^ SyntaxE
							      								    								  rror: invalid syntax
							      4 26 LOAD_FAST 3 ( GM )					    61 24 LOAD_GLOBAL 3 ( PM )					  
							      28 LOAD_FAST 3 ( GM )					    26 LOAD_FAST 2 ( a )					  
							      30 BINARY_MULTIPLY					    28 CALL_FUNCTION 1						  
							      32 LOAD_FAST 2 ( AM )					    30 STORE_FAST 4 ( b )					  
							      34 BINARY_TRUE_DIVIDE					    								  
							      36 STORE_FAST 4 ( HM )					    62 32 LOAD_FAST 3 ( a )					  
							      								    34 LOAD_FAST 4 ( b )					  
							      5 38 LOAD_FAST 4 ( HM )					    36 COMPARE_OP 2 ( == )					  
							      40 RETURN_VALUE NEW_LINE					    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    63 40 LOAD_FAST 3 ( a )					  
							      								    42 LOAD_FAST 4 ( b )					  
							      								    44 LOAD_FAST 4 ( b )					  
							      								    46 LOAD_FAST 1 ( b )					  
							      								    48 LOAD_FAST 2 ( a )					  
							      								    50 LOAD_FAST 4 ( b )					  
							      								    52 LOAD_FAST 1 ( b )					  
							      								    54 LOAD_FAST 2 ( a )					  
							      								    56 LOAD_FAST 3 ( a )					  
							      								    58 LOAD_FAST 4 ( b )					  
							      								    60 LOAD_FAST 1 ( b )					  
							      								    62 LOAD_FAST 2 ( a )					  
							      								    64 LOAD_FAST 4 ( b )					  
							      								    66 LOAD_FAST 1 ( b )					  
							      								    68 LOAD_FAST 4 ( b )					  
							      								    70 BUILD_TUPLE 4						  
							      								    72 CALL_FUNCTION 3						  
							      								    74 RETURN_VALUE						  
							      								    								  
							      								    64 >> 76 LOAD_GLOBAL 4 ( PM )				  
							      								    78 LOAD_FAST 1 ( b )					  
							      								    80 LOAD_FAST 4 ( b )					  
							      								    82 LOAD_FAST 2 ( a )					  
							      								    84 LOAD_FAST 3 ( a )					  
							      								    86 LOAD_FAST 4 ( b )					  
							      								    88 LOAD_FAST 1 ( b )					  
							      								    90 LOAD_FAST 4 ( b )					  
							      								    92 LOAD_FAST 1 ( b )					  
							      								    94 LOAD_FAST 4 ( b )					  
							      								    96 LOAD_FAST 2 ( a )					  
							      								    98 LOAD_FAST 3 ( a )					  
							      								    100 LOAD_FAST 4 ( b )					  
							      								    102 LOAD_FAST 1 ( b )					  
							      								    104 LOAD_FAST 4 ( b )					  
							      								    106 LOAD_FAST 4 ( b )					  
							      								    108 LOAD_FAST 1 ( b )					  
							      								    110 LOAD_FAST 4 ( b )					  
							      								    112 LOAD_FAST 1 ( b )					  
							      								    114 LOAD_FAST 4 ( b )					  
							      								    116 BUILD_TUPLE 4						  
							      								    118 CALL_FUNCTION 3						  
							      								    120 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
def search ( arr , x ) :				      Disassembly of <code object search at 0x7fbac0e8bc90, file "< Disassembly of <code object search at 0x7f816a673a50, file "< script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( arr )					  
    for j in range ( 0 , n ) :				      2 LOAD_FAST 0 ( arr )					    2 LOAD_METHOD 0 ( append )					  
	if ( x == arr [ j ] ) :				      4 CALL_FUNCTION 1						    4 LOAD_FAST 1 ( x )						  
	    return j					      6 STORE_FAST 2 ( n )					    6 CALL_METHOD 1						  
    return - 1						      								    8 POP_TOP							  
							      3 8 SETUP_LOOP 34 ( to 44 )				    								  
							      10 LOAD_GLOBAL 1 ( range )				    27 10 LOAD_FAST 0 ( arr )					  
							      12 LOAD_CONST 1 ( 0 )					    12 LOAD_METHOD 1 ( append )					  
							      14 LOAD_FAST 2 ( n )					    14 LOAD_FAST 1 ( x )					  
							      16 CALL_FUNCTION 2					    16 CALL_METHOD 1						  
							      18 GET_ITER						    18 POP_TOP							  
							      >> 20 FOR_ITER 20 ( to 42 )				    20 LOAD_CONST 0 ( None )					  
							      22 STORE_FAST 3 ( j )					    22 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 24 LOAD_FAST 1 ( x )					    								  
							      26 LOAD_FAST 0 ( arr )					    								  
							      28 LOAD_FAST 3 ( j )					    								  
							      30 BINARY_SUBSCR						    								  
							      32 COMPARE_OP 2 ( == )					    								  
							      34 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      5 36 LOAD_FAST 3 ( j )					    								  
							      38 RETURN_VALUE						    								  
							      40 JUMP_ABSOLUTE 20					    								  
							      >> 42 POP_BLOCK						    								  
							      								    								  
							      6 >> 44 LOAD_CONST 2 ( - 1 )				    								  
							      46 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
def PowerOFPINnfactorial ( n , p ) :			      Disassembly of <code object PowerOFPINnfactorial at 0x7fbac<< Disassembly of <code object PowerOFPINfactorial at 0x7f816a67 error : /bin/bash: line 1: 24648 Segmentation faul
    ans = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    temp = p ;						      2 STORE_FAST 2 ( ans )					    2 LOAD_CONST 2 ( ( 'temp' , ) )				  ataset/bin/python XLM/dis_script.py --script_path
    while ( temp <= n ) :				      								    4 IMPORT_NAME 0 ( ans . temp )				  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	ans += n / temp ;				      3 4 LOAD_FAST 1 ( p )					    6 IMPORT_FROM 1 ( temp )					  eval_scripts/python_sa-dis_sa.test/FINDING_POWER_P
	temp = temp * p ;				      6 STORE_FAST 3 ( temp )					    8 STORE_FAST 1 ( temp )					  RIME_NUMBER_P_N.dis
    return ans ;					      								    10 POP_TOP							  
							      4 8 SETUP_LOOP 32 ( to 42 )				    								  
							      >> 10 LOAD_FAST 3 ( temp )				    27 12 LOAD_FAST 1 ( temp )					  
							      12 LOAD_FAST 0 ( n )					    14 LOAD_METHOD 2 ( temp )					  
							      14 COMPARE_OP 1 ( <= )					    16 CALL_METHOD 0						  
							      16 POP_JUMP_IF_FALSE 40					    18 STORE_FAST 2 ( temp )					  
							      								    								  
							      5 18 LOAD_FAST 2 ( ans )					    28 20 LOAD_FAST 1 ( temp )					  
							      20 LOAD_FAST 0 ( n )					    22 LOAD_METHOD 3 ( temp )					  
							      22 LOAD_FAST 3 ( temp )					    24 CALL_METHOD 0						  
							      24 BINARY_TRUE_DIVIDE					    26 STORE_FAST 3 ( temp )					  
							      26 INPLACE_ADD						    								  
							      28 STORE_FAST 2 ( ans )					    29 28 LOAD_FAST 1 ( temp )					  
							      								    30 LOAD_METHOD 4 ( temp )					  
							      6 30 LOAD_FAST 3 ( temp )					    32 CALL_METHOD 0						  
							      32 LOAD_FAST 1 ( p )					    34 STORE_FAST 4 ( temp )					  
							      34 BINARY_MULTIPLY					    								  
							      36 STORE_FAST 3 ( temp )					    30 36 LOAD_FAST 0 ( self )					  
							      38 JUMP_ABSOLUTE 10					    38 LOAD_METHOD 5 ( assertEqual )				  
							      >> 40 POP_BLOCK						    40 LOAD_FAST 4 ( temp )					  
							      								    42 LOAD_METHOD 6 ( temp )					  
							      7 >> 42 LOAD_FAST 2 ( ans )				    44 CALL_METHOD 0						  
							      44 RETURN_VALUE NEW_LINE					    46 LOAD_CONST 3 ( 0 )					  
							      								    48 CALL_METHOD 2						  
							      								    50 POP_TOP							  
							      								    52 LOAD_CONST 0 ( None )					  
							      								    54 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
def numberOfPaths ( m , n ) :				      Disassembly of <code object numberOfPaths at 0x7fbac0e89d20,  Disassembly of <code object numberOfPaths at 0x7f816a673a50,  script_not_found : None
    if ( m == 1 or n == 1 ) :				      2 0 LOAD_FAST 0 ( m )					    49 0 LOAD_FAST 0 ( m )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m ,  4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_FAST 1 ( n )					    								  
							      10 LOAD_CONST 1 ( 1 )					    50 8 LOAD_FAST 0 ( m )					  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_CONST 1 ( 1 )					  
							      14 POP_JUMP_IF_FALSE 20					    12 COMPARE_OP 2 ( == )					  
							      								    14 POP_JUMP_IF_FALSE 28					  
							      3 >> 16 LOAD_CONST 1 ( 1 )				    								  
							      18 RETURN_VALUE						    51 16 LOAD_FAST 0 ( m )					  
							      								    18 LOAD_CONST 1 ( 1 )					  
							      4 >> 20 LOAD_GLOBAL 0 ( numberOfPaths )			    20 COMPARE_OP 2 ( == )					  
							      22 LOAD_FAST 0 ( m )					    22 POP_JUMP_IF_FALSE 28					  
							      24 LOAD_CONST 1 ( 1 )					    								  
							      26 BINARY_SUBTRACT					    52 >> 24 LOAD_FAST 0 ( m )					  
							      28 LOAD_FAST 1 ( n )					    26 LOAD_CONST 1 ( 1 )					  
							      30 CALL_FUNCTION 2					    28 COMPARE_OP 2 ( == )					  
							      32 LOAD_GLOBAL 0 ( numberOfPaths )			    30 POP_JUMP_IF_FALSE 48					  
							      34 LOAD_FAST 0 ( m )					    								  
							      36 LOAD_FAST 1 ( n )					    53 32 LOAD_FAST 0 ( m )					  
							      38 LOAD_CONST 1 ( 1 )					    34 LOAD_CONST 1 ( 1 )					  
							      40 BINARY_SUBTRACT					    36 COMPARE_OP 2 ( == )					  
							      42 CALL_FUNCTION 2					    38 POP_JUMP_IF_FALSE 48					  
							      44 BINARY_ADD						    								  
							      46 RETURN_VALUE NEW_LINE					    54 40 LOAD_FAST 0 ( m )					  
							      								    42 LOAD_CONST 1 ( 1 )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    55 48 LOAD_FAST 0 ( m )					  
							      								    50 LOAD_CONST 1 ( 1 )					  
							      								    52 INPLACE_ADD						  
							      								    54 STORE_FAST 0 ( m )					  
							      								    								  
							      								    56 56 LOAD_FAST 0 ( m )					  
							      								    58 LOAD_CONST 1 ( 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    57 64 LOAD_FAST 0 ( m )					  
							      								    66 LOAD_CONST 1 ( 1 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    58 72 LOAD_FAST 0 ( m )					  
							      								    74 LOAD_CONST 1 ( 1 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    59 80 LOAD_FAST 0 ( m )					  
							      								    82 LOAD_CONST 1 ( 1 )					  
							      								    84 INPLACE_ADD						  
							      								    86 STORE_FAST 0 ( m )					  
							      								    88 JUMP_FORWARD 2 ( to 48 )					  
							      								    								  
							      								    60 >> 90 LOAD_FAST 0 ( m )					  
							      								    92 LOAD_CONST 1 ( 1 )					  
							      								    94 COMPARE_OP 2 ( == )					  
							      								    96 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    61 98 LOAD_FAST 0 ( m )					  
							      								    100 LOAD_CONST 1 ( 1 )					  
							      								    102 COMPARE_OP 2 ( == )					  
							      								    104 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    61 106 LOAD_FAST 0 ( m )					  
							      								    108 LOAD_CONST 1 ( 1 )					  
							      								    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    62 114 LOAD_FAST 0 ( m )					  
							      								    116 LOAD_CONST 1 ( 1 )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    63 122 LOAD_FAST 0 ( m )					  
							      								    124 LOAD_CONST 1 ( 1 )					  
							      								    126 COMPARE_OP 2 ( == )					  
							      								    128 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    64 130 LOAD_FAST 0 ( m )					  
							      								    132 LOAD_CONST 1 ( 1 )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    65 >> 138 LOAD_FAST 0 ( m )					  
							      								    140 LOAD_CONST 1 ( 1 )					  
							      								    142 COMPARE_OP 2 ( == )					  
							      								    144 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    66 146 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING		      LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			    LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			  LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING
--							      --							    --								  --
def LexicographicalMaxString ( str ) :			      Disassembly of <code object LexicographicalMaxString at 0x7fb Disassembly of <code object LexicographicalMaxString at 0x7f8 error : Traceback (most recent call last):   File
    mx = ""						      2 0 LOAD_CONST 1 ( '' )					    26 0 LOAD_CONST 1 ( "mx" )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( len ( str ) ) :			      2 STORE_FAST 1 ( mx )					    2 STORE_FAST 1 ( mx )					  item in run_dis_script():   File "XLM/dis_script.p
	mx = max ( mx , str [ i : ] )			      								    								  y", line 47, in run_dis_script     co_code, co_nlo
    return mx						      3 4 SETUP_LOOP 38 ( to 44 )				    27 4 LOAD_GLOBAL 0 ( max )					  cals, co_varnames, co_names, co_consts, co_linesta
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_FAST 1 ( mx )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      8 LOAD_GLOBAL 1 ( len )					    8 CALL_FUNCTION 1						  pack non-iterable NoneType object
							      10 LOAD_FAST 0 ( str )					    10 STORE_FAST 2 ( mx )					  
							      12 CALL_FUNCTION 1					    								  
							      14 CALL_FUNCTION 1					    28 12 LOAD_FAST 2 ( mx )					  
							      16 GET_ITER						    14 LOAD_CONST 2 ( 0 )					  
							      >> 18 FOR_ITER 22 ( to 42 )				    16 BINARY_SUBSCR						  
							      20 STORE_FAST 2 ( i )					    18 STORE_FAST 3 ( mx )					  
							      								    								  
							      4 22 LOAD_GLOBAL 2 ( max )				    29 20 LOAD_FAST 3 ( mx )					  
							      24 LOAD_FAST 1 ( mx )					    22 LOAD_CONST 3 ( 0 )					  
							      26 LOAD_FAST 0 ( str )					    24 BINARY_SUBSCR						  
							      28 LOAD_FAST 2 ( i )					    26 STORE_FAST 4 ( mx )					  
							      30 LOAD_CONST 0 ( None )					    								  
							      32 BUILD_SLICE 2						    30 28 LOAD_FAST 0 ( self )					  
							      34 BINARY_SUBSCR						    30 LOAD_METHOD 1 ( _lexlexlexlexlexlexlexlexlexlexlexlexlexle 
							      36 CALL_FUNCTION 2					    								  
							      38 STORE_FAST 1 ( mx )					    								  
							      40 JUMP_ABSOLUTE 18					    								  
							      >> 42 POP_BLOCK						    								  
							      								    								  
							      5 >> 44 LOAD_FAST 1 ( mx )				    								  
							      46 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			    FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1
--							      --							    --								  --
def unitnumber ( x , y ) :				      Disassembly of <code object unitnumber at 0x7fbac<<unk>> d540 Disassembly of <code object unitnumber at 0x7f816a6e4b70, fil error : Traceback (most recent call last):   File
    x = x % 10						      2 0 LOAD_FAST 0 ( x )					    26 0 LOAD_FAST 1 ( y )					  "XLM/dis_script.py", line 59, in <module>	for
    if y != 0 :						      2 LOAD_CONST 1 ( 10 )					    2 LOAD_FAST 0 ( self )					  item in run_dis_script():   File "XLM/dis_script.p
	y = y % 4 + 4					      4 BINARY_MODULO						    4 COMPARE_OP 3 ( != )					  y", line 47, in run_dis_script     co_code, co_nlo
    return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )	      6 STORE_FAST 0 ( x )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
							      								    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      3 8 LOAD_FAST 1 ( y )					    27 8 LOAD_GLOBAL 0 ( int )					  pack non-iterable NoneType object
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_FAST 1 ( y )					  
							      12 COMPARE_OP 3 ( != )					    12 CALL_FUNCTION 1						  
							      14 POP_JUMP_IF_FALSE 28					    14 LOAD_CONST 1 ( 10 )					  
							      								    16 COMPARE_OP 3 ( != )					  
							      4 16 LOAD_FAST 1 ( y )					    18 POP_JUMP_IF_FALSE 28					  
							      18 LOAD_CONST 3 ( 4 )					    								  
							      20 BINARY_MODULO						    28 20 LOAD_GLOBAL 1 ( int )					  
							      22 LOAD_CONST 3 ( 4 )					    22 LOAD_FAST 1 ( y )					  
							      24 BINARY_ADD						    24 CALL_FUNCTION 1						  
							      26 STORE_FAST 1 ( y )					    26 LOAD_CONST 2 ( 1 )					  
							      								    28 COMPARE_OP 3 ( != )					  
							      5 >> 28 LOAD_GLOBAL 0 ( int )				    30 POP_JUMP_IF_FALSE 28					  
							      30 LOAD_GLOBAL 1 ( math )					    								  
							      32 LOAD_METHOD 2 ( pow )					    29 32 LOAD_FAST 1 ( y )					  
							      34 LOAD_FAST 0 ( x )					    34 LOAD_FAST 0 ( self )					  
							      36 LOAD_FAST 1 ( y )					    36 COMPARE_OP 3 ( != )					  
							      38 CALL_METHOD 2						    38 POP_JUMP_IF_FALSE 44					  
							      40 CALL_FUNCTION 1					    40 LOAD_FAST 1 ( y )					  
							      42 LOAD_CONST 1 ( 10 )					    42 LOAD_FAST 0 ( self )					  
							      44 BINARY_MODULO						    44 COMPARE_OP 3 ( != )					  
							      46 RETURN_VALUE NEW_LINE					    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    30 48 LOAD_FAST 1 ( y )					  
							      								    50 LOAD_FAST 0 ( self )					  
							      								    52 COMPARE_OP 3 ( != )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    31 56 LOAD_FAST 1 ( y )					  
							      								    58 LOAD_FAST 0 ( self )					  
							      								    60 COMPARE_OP 3 ( != )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    32 64 LOAD_FAST 1 ( y )					  
							      								    66 LOAD_FAST 0 ( self )					  
							      								    68 COMPARE_OP 3 ( != )					  
							      								    70 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    33 72 LOAD_FAST 1 ( y )					  
							      								    74 LOAD_FAST 0 ( self )					  
							      								    76 COMPARE_OP 3 ( != )					  
							      								    78 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    34 80 LOAD_FAST 1 ( y )					  
							      								    82 LOAD_FAST 0 ( self )					  
							      								    84 COMPARE_OP 3 ( != )					  
							      								    86 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    35 88 LOAD_FAST 1 ( y )					  
							      								    90 LOAD_FAST 0 ( self )					  
							      								    92 COMPARE_OP 3 ( != )					  
							      								    94 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    36 >> 96 LOAD_FAST 1 ( y )					  
							      								    98 LOAD_FAST 0 ( self )					  
							      								    100 COMPARE_OP 3 ( != )					  
							      								    102 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    37 104 LOAD_FAST 1 ( y )					  
							      								    106 LOAD_FAST 0 ( self )					  
							      								    108 COMPARE_OP 3 ( != )					  
							      								    110 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    38 >> 112 LOAD_FAST 1 ( y )					  
							      								    114 LOAD_FAST 0 ( self )					  
							      								    116 COMPARE_OP 3 ( != )					  
							      								    118 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    39 120 LOAD_FAST 1 ( y )					  
							      								    122 LOAD_FAST 0 ( self )					  
							      								    124 COMPARE_OP 3 ( != )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    128 LOAD_FAST 1 ( y )					  
							      								    130 LOAD_FAST 0 ( self )					  
							      								    132 COMPARE_OP 3 ( != )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    136 LOAD_FAST 1 ( y )					  
							      								    138 LOAD_FAST 0 ( self )					  
							      								    140 COMPARE_OP 3 ( != )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    40 144 LOAD_FAST 1 ( y )					  
							      								    146 RETURN_VALUE						  
							      								    								  
							      								    42 >> 148 LOAD_FAST 1 ( y )					  
							      								    150								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
def largest ( arr , n ) :				      Disassembly of <code object largest at 0x7fbac<<unk>> d540, f Disassembly of <code object largest at 0x7f816a6e4b70, file " script_not_found : None
    max = arr [ 0 ]					      2 0 LOAD_FAST 0 ( arr )					    17 0 LOAD_FAST 1 ( n )					  
    for i in range ( 1 , n ) :				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_FAST 0 ( arr )					  
	if arr [ i ] > max :				      4 BINARY_SUBSCR						    4 BINARY_MULTIPLY						  
	    max = arr [ i ]				      6 STORE_FAST 2 ( max )					    6 LOAD_FAST 0 ( arr )					  
    return max						      								    8 BINARY_MULTIPLY						  
							      3 8 SETUP_LOOP 38 ( to 48 )				    10 LOAD_FAST 0 ( arr )					  
							      10 LOAD_GLOBAL 0 ( range )				    12 BINARY_MULTIPLY						  
							      12 LOAD_CONST 2 ( 1 )					    14 BINARY_ADD						  
							      14 LOAD_FAST 1 ( n )					    16 RETURN_VALUE						  
							      16 CALL_FUNCTION 2					    NEW_LINE							  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 24 ( to 46 )				    								  
							      22 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 24 LOAD_FAST 0 ( arr )					    								  
							      26 LOAD_FAST 3 ( i )					    								  
							      28 BINARY_SUBSCR						    								  
							      30 LOAD_FAST 2 ( max )					    								  
							      32 COMPARE_OP 4 ( > )					    								  
							      34 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      5 36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 3 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 STORE_FAST 2 ( max )					    								  
							      44 JUMP_ABSOLUTE 20					    								  
							      >> 46 POP_BLOCK						    								  
							      								    								  
							      6 >> 48 LOAD_FAST 2 ( max )				    								  
							      50 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
def Right_most_setbit ( num ) :				      Disassembly of <code object Right_most_setbit at 0x7fbac0e89d Disassembly of <code object Rft_most_most_setbit at 0x7f816a6 script_not_found : None
    pos = 1						      2 0 LOAD_CONST 1 ( 1 )					    139 0 LOAD_CONST 1 ( 1 )					  
    for i in range ( INT_SIZE ) :			      2 STORE_FAST 1 ( pos )					    2 STORE_FAST 1 ( i )					  
	if not ( num & ( 1 << i ) ) :			      								    								  
	    pos += 1					      3 4 SETUP_LOOP 40 ( to 46 )				    140 4 LOAD_FAST 0 ( num )					  
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_CONST 2 ( 1 )					  
	    break					      8 LOAD_GLOBAL 1 ( INT_SIZE )				    8 COMPARE_OP 2 ( == )					  
    return pos						      10 CALL_FUNCTION 1					    10 POP_JUMP_IF_FALSE 20					  
							      12 GET_ITER						    								  
							      >> 14 FOR_ITER 28 ( to 44 )				    141 12 LOAD_CONST 3 ( 0 )					  
							      16 STORE_FAST 2 ( i )					    14 STORE_FAST 1 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 0 ( num )					    142 16 LOAD_FAST 1 ( i )					  
							      20 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_FAST 2 ( i )					    20 COMPARE_OP 2 ( == )					  
							      24 BINARY_LSHIFT						    22 POP_JUMP_IF_FALSE 28					  
							      26 BINARY_AND						    								  
							      28 POP_JUMP_IF_TRUE 40					    143 24 LOAD_CONST 4 ( 0 )					  
							      								    26 STORE_FAST 1 ( i )					  
							      5 30 LOAD_FAST 1 ( pos )					    								  
							      32 LOAD_CONST 1 ( 1 )					    144 >> 28 LOAD_FAST 1 ( i )					  
							      34 INPLACE_ADD						    30 LOAD_CONST 2 ( 1 )					  
							      36 STORE_FAST 1 ( pos )					    32 COMPARE_OP 2 ( == )					  
							      38 JUMP_ABSOLUTE 14					    34 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 >> 40 BREAK_LOOP					    145 36 LOAD_CONST 5 ( 0 )					  
							      42 JUMP_ABSOLUTE 14					    38 STORE_FAST 1 ( i )					  
							      >> 44 POP_BLOCK						    								  
							      								    146 40 LOAD_FAST 1 ( i )					  
							      8 >> 46 LOAD_FAST 1 ( pos )				    42 LOAD_CONST 2 ( 1 )					  
							      48 RETURN_VALUE NEW_LINE					    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    147 48 LOAD_CONST 6 ( 0 )					  
							      								    50 STORE_FAST 1 ( i )					  
							      								    								  
							      								    148 >> 52 LOAD_FAST 1 ( i )					  
							      								    54 LOAD_CONST 2 ( 1 )					  
							      								    56 COMPARE_OP 2 ( == )					  
							      								    58 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    149 60 LOAD_CONST 7 ( 0 )					  
							      								    62 STORE_FAST 1 ( i )					  
							      								    								  
							      								    150 64 LOAD_FAST 1 ( i )					  
							      								    66 LOAD_CONST 2 ( 1 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 76					  
							      								    72 LOAD_CONST 8 ( 1 )					  
							      								    74 JUMP_FORWARD 2 ( to 76 )					  
							      								    >> 76 LOAD_CONST 9 ( 1 )					  
							      								    78 COMPARE_OP 2 ( == )					  
							      								    80 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    151 82 LOAD_CONST 10 ( 0 )					  
							      								    84 STORE_FAST 1 ( i )					  
							      								    								  
							      								    152 86 LOAD_FAST 1 ( i )					  
							      								    88 LOAD_CONST 2 ( 1 )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      								    92 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    153 94 LOAD_CONST 11 ( 0 )					  
							      								    96 STORE_FAST 1 ( i )					  
							      								    								  
							      								    154 98 LOAD_FAST 1 ( i )					  
							      								    100 LOAD_CONST 2 ( 1 )					  
							      								    102 COMPARE_OP 2 ( == )					  
							      								    104 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    155 106 LOAD_CONST 12 ( 0 )					  
							      								    108 STORE_FAST 1 ( i )					  
							      								    								  
							      								    156 >> 110 LOAD_FAST 1 ( i )				  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 COMPARE_OP 2 ( == )					  
							      								    116 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    157 118 LOAD_FAST 1 ( i )					  
							      								    120 LOAD_CONST 2 ( 1 )					  
							      								    122 COMPARE_OP 2 ( == )					  
							      								    124 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    158 126 LOAD_FAST 1 ( i )					  
							      								    128 LOAD_CONST 2 ( 1 )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 132					  
							      								    								  
							      								    159 134 LOAD_CONST 12 ( 0 )					  
							      								    136 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
def sequence ( n ) :					      Disassembly of <code object sequence at 0x7fbac<<unk>> de40,  Disassembly of <code object sequence at 0x7f816a673a50, file  script_not_found : None
    if n == 1 or n == 2 :				      2 0 LOAD_FAST 0 ( n )					    148 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    else :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return sequence ( sequence ( n - 1 ) ) + sequence ( n 6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_FAST 0 ( n )					    								  
							      10 LOAD_CONST 2 ( 2 )					    149 8 LOAD_GLOBAL 0 ( sequence )				  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_FAST 0 ( n )					  
							      14 POP_JUMP_IF_FALSE 20					    12 CALL_FUNCTION 1						  
							      								    14 RETURN_VALUE						  
							      3 >> 16 LOAD_CONST 1 ( 1 )				    								  
							      18 RETURN_VALUE						    149 >> 16 LOAD_FAST 0 ( n )					  
							      								    18 LOAD_CONST 2 ( 1 )					  
							      5 >> 20 LOAD_GLOBAL 0 ( sequence )			    20 COMPARE_OP 2 ( == )					  
							      22 LOAD_GLOBAL 0 ( sequence )				    22 POP_JUMP_IF_FALSE 28					  
							      24 LOAD_FAST 0 ( n )					    								  
							      26 LOAD_CONST 1 ( 1 )					    150 24 LOAD_FAST 0 ( n )					  
							      28 BINARY_SUBTRACT					    26 LOAD_CONST 3 ( 1 )					  
							      30 CALL_FUNCTION 1					    28 COMPARE_OP 2 ( == )					  
							      32 CALL_FUNCTION 1					    30 POP_JUMP_IF_FALSE 38					  
							      34 LOAD_GLOBAL 0 ( sequence )				    								  
							      36 LOAD_FAST 0 ( n )					    151 32 LOAD_FAST 0 ( n )					  
							      38 LOAD_GLOBAL 0 ( sequence )				    34 LOAD_CONST 4 ( - 1 )					  
							      40 LOAD_FAST 0 ( n )					    36 COMPARE_OP 2 ( == )					  
							      42 LOAD_CONST 1 ( 1 )					    38 POP_JUMP_IF_FALSE 44					  
							      44 BINARY_SUBTRACT					    40 LOAD_FAST 0 ( n )					  
							      46 CALL_FUNCTION 1					    42 LOAD_CONST 5 ( - 1 )					  
							      48 BINARY_SUBTRACT					    44 COMPARE_OP 2 ( == )					  
							      50 CALL_FUNCTION 1					    46 POP_JUMP_IF_FALSE 44					  
							      52 BINARY_ADD						    								  
							      54 RETURN_VALUE						    152 48 LOAD_FAST 0 ( n )					  
							      56 LOAD_CONST 0 ( None )					    50 LOAD_CONST 6 ( - 1 )					  
							      58 RETURN_VALUE NEW_LINE					    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    153 56 LOAD_FAST 0 ( n )					  
							      								    58 LOAD_CONST 7 ( - 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    154 64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 8 ( - 1 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    155 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 9 ( - 1 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    156 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 10 ( - 1 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    157 88 LOAD_FAST 0 ( n )					  
							      								    90 LOAD_CONST 11 ( - 1 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    158 >> 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 12 ( - 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 13 ( - 1 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    159 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_CONST 6 ( - 1 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    160 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 6 ( - 1 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    161 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 6 ( - 1 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    162 136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 6 ( - 1 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    163 144 LOAD_FAST 0 (					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			      MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			    MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			  MULTIPLICATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
def modInverse ( a , m ) :				      Disassembly of <code object modInverse at 0x7fbac<<unk>> d540 Disassembly of <code object modInverse at 0x7f816a6e4b70, fil script_not_found : None
    a = a % m ;						      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_CONST 1 ( '%m;' )					  
    for x in range ( 1 , m ) :				      2 LOAD_FAST 1 ( m )					    2 STORE_FAST 1 ( m )					  
	if ( ( a * x ) % m == 1 ) :			      4 BINARY_MODULO						    								  
	    return x					      6 STORE_FAST 0 ( a )					    27 4 LOAD_FAST 1 ( m )					  
    return 1						      								    6 LOAD_CONST 2 ( 1 )					  
							      3 8 SETUP_LOOP 38 ( to 48 )				    8 COMPARE_OP 2 ( == )					  
							      10 LOAD_GLOBAL 0 ( range )				    10 POP_JUMP_IF_FALSE 20					  
							      12 LOAD_CONST 1 ( 1 )					    								  
							      14 LOAD_FAST 1 ( m )					    28 12 LOAD_FAST 1 ( m )					  
							      16 CALL_FUNCTION 2					    14 LOAD_CONST 3 ( 1 )					  
							      18 GET_ITER						    16 COMPARE_OP 2 ( == )					  
							      >> 20 FOR_ITER 24 ( to 46 )				    18 POP_JUMP_IF_FALSE 24					  
							      22 STORE_FAST 2 ( x )					    								  
							      								    29 20 LOAD_FAST 1 ( m )					  
							      4 24 LOAD_FAST 0 ( a )					    22 LOAD_CONST 4 ( 1 )					  
							      26 LOAD_FAST 2 ( x )					    24 COMPARE_OP 2 ( == )					  
							      28 BINARY_MULTIPLY					    26 POP_JUMP_IF_FALSE 32					  
							      30 LOAD_FAST 1 ( m )					    								  
							      32 BINARY_MODULO						    30 28 LOAD_FAST 1 ( m )					  
							      34 LOAD_CONST 1 ( 1 )					    30 LOAD_CONST 5 ( 1 )					  
							      36 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      38 POP_JUMP_IF_FALSE 20					    34 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      5 40 LOAD_FAST 2 ( x )					    31 36 LOAD_FAST 1 ( m )					  
							      42 RETURN_VALUE						    38 LOAD_CONST 6 ( 2 )					  
							      44 JUMP_ABSOLUTE 20					    40 COMPARE_OP 2 ( == )					  
							      >> 46 POP_BLOCK						    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      6 >> 48 LOAD_CONST 1 ( 1 )				    32 44 LOAD_FAST 1 ( m )					  
							      50 RETURN_VALUE NEW_LINE					    46 LOAD_CONST 7 ( 1 )					  
							      								    48 COMPARE_OP 2 ( == )					  
							      								    50 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    33 52 LOAD_FAST 1 ( m )					  
							      								    54 LOAD_CONST 8 ( 2 )					  
							      								    56 COMPARE_OP 2 ( == )					  
							      								    58 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    34 60 LOAD_FAST 1 ( m )					  
							      								    62 LOAD_CONST 9 ( 2 )					  
							      								    64 COMPARE_OP 2 ( == )					  
							      								    66 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    35 68 LOAD_FAST 1 ( m )					  
							      								    70 LOAD_CONST 10 ( 2 )					  
							      								    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    36 76 LOAD_FAST 1 ( m )					  
							      								    78 LOAD_CONST 11 ( 2 )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    37 84 LOAD_FAST 1 ( m )					  
							      								    86 LOAD_CONST 12 ( 2 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    38 92 LOAD_FAST 1 ( m )					  
							      								    94 LOAD_CONST 12 ( 2 )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    39 100 LOAD_FAST 1 ( m )					  
							      								    102 LOAD_CONST 13 ( 2 )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    40 108 LOAD_FAST 1 ( m )					  
							      								    110 LOAD_CONST 14 ( 2 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    41 116 LOAD_FAST 1 ( m )					  
							      								    118 LOAD_CONST 15 ( 2 )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    42 124 LOAD_FAST 1 ( m )					  
							      								    126 LOAD_CONST 16 ( 2 )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 132 LOAD_FAST 1 ( m )					  
							      								    134 LOAD_CONST 17 ( 2 )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    44 140 LOAD_FAST 1 ( m )					  
							      								    142 RETURN_VALUE						  
							      								    								  
							      								    45 >> 144 LOAD_FAST 1 ( m )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
def PowerOFPINnfactorial ( n , p ) :			      Disassembly of <code object PowerOFPINnfactorial at 0x7fbac<< Disassembly of <code object PowerOFPINfactorial at 0x7f816a67 error : Traceback (most recent call last):   File
    ans = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( p )					  "XLM/dis_script.py", line 60, in <module>	exec
    temp = p						      2 STORE_FAST 2 ( ans )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 33, in <module>	  Fi
    while ( temp <= n ) :				      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in PowerOFPINnfactorial TypeEr
	ans += n / temp					      3 4 LOAD_FAST 1 ( p )					    6 STORE_FAST 2 ( n )					  ror: 'int' object is not subscriptable
	temp = temp * p					      6 STORE_FAST 3 ( temp )					    								  
    return int ( ans )					      								    27 8 LOAD_FAST 2 ( n )					  
							      4 8 SETUP_LOOP 32 ( to 42 )				    10 LOAD_CONST 2 ( 1 )					  
							      >> 10 LOAD_FAST 3 ( temp )				    12 BINARY_SUBSCR						  
							      12 LOAD_FAST 0 ( n )					    14 LOAD_CONST 3 ( 2 )					  
							      14 COMPARE_OP 1 ( <= )					    16 BINARY_SUBSCR						  
							      16 POP_JUMP_IF_FALSE 40					    18 STORE_FAST 3 ( n )					  
							      								    								  
							      5 18 LOAD_FAST 2 ( ans )					    28 20 LOAD_FAST 0 ( self )					  
							      20 LOAD_FAST 0 ( n )					    22 LOAD_METHOD 0 ( check )					  
							      22 LOAD_FAST 3 ( temp )					    24 LOAD_FAST 1 ( p )					  
							      24 BINARY_TRUE_DIVIDE					    26 LOAD_CONST 4 ( 1 )					  
							      26 INPLACE_ADD						    28 BINARY_SUBSCR						  
							      28 STORE_FAST 2 ( ans )					    30 LOAD_CONST 5 ( 3 )					  
							      								    32 CALL_METHOD 2						  
							      6 30 LOAD_FAST 3 ( temp )					    34 POP_TOP							  
							      32 LOAD_FAST 1 ( p )					    								  
							      34 BINARY_MULTIPLY					    29 36 LOAD_FAST 0 ( self )					  
							      36 STORE_FAST 3 ( temp )					    38 LOAD_METHOD 0 ( check )					  
							      38 JUMP_ABSOLUTE 10					    40 LOAD_FAST 3 ( n )					  
							      >> 40 POP_BLOCK						    42 LOAD_CONST 6 ( 4 )					  
							      								    44 BINARY_SUBSCR						  
							      7 >> 42 LOAD_GLOBAL 0 ( int )				    46 CALL_METHOD 1						  
							      44 LOAD_FAST 2 ( ans )					    48 POP_TOP							  
							      46 CALL_FUNCTION 1					    50 LOAD_CONST 0 ( None )					  
							      48 RETURN_VALUE NEW_LINE					    52 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1
--							      --							    --								  --
def findElements ( arr , n ) :				      Disassembly of <code object findElements at 0x7fbac<<unk>> d5 Disassembly of <code object findElements at 0x7f816a673a50, f script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    65 0 LOAD_FAST 0 ( arr )					  
    for i in range ( 0 , n - 2 ) :			      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
	print ( arr [ i ] , end = " " )			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
							      6 POP_TOP							    6 STORE_FAST 1 ( n )					  
							      								    								  
							      3 8 SETUP_LOOP 38 ( to 48 )				    66 8 LOAD_FAST 1 ( n )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_CONST 1 ( 0 )					  
							      12 LOAD_CONST 1 ( 0 )					    12 BINARY_SUBSCR						  
							      14 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( i )					  
							      16 LOAD_CONST 2 ( 2 )					    								  
							      18 BINARY_SUBTRACT					    67 16 LOAD_FAST 2 ( i )					  
							      20 CALL_FUNCTION 2					    18 LOAD_CONST 2 ( 1 )					  
							      22 GET_ITER						    20 COMPARE_OP 2 ( == )					  
							      >> 24 FOR_ITER 20 ( to 46 )				    22 POP_JUMP_IF_FALSE 28					  
							      26 STORE_FAST 2 ( i )					    								  
							      								    68 24 LOAD_FAST 2 ( i )					  
							      4 28 LOAD_GLOBAL 2 ( print )				    26 LOAD_CONST 3 ( 1 )					  
							      30 LOAD_FAST 0 ( arr )					    28 INPLACE_ADD						  
							      32 LOAD_FAST 2 ( i )					    30 STORE_FAST 2 ( i )					  
							      34 BINARY_SUBSCR						    								  
							      36 LOAD_CONST 3 ( ' ' )					    69 32 LOAD_FAST 2 ( i )					  
							      38 LOAD_CONST 4 ( ( 'end' , ) )				    34 LOAD_CONST 4 ( 2 )					  
							      40 CALL_FUNCTION_KW 2					    36 COMPARE_OP 2 ( == )					  
							      42 POP_TOP						    38 POP_JUMP_IF_FALSE 44					  
							      44 JUMP_ABSOLUTE 24					    40 LOAD_FAST 2 ( i )					  
							      >> 46 POP_BLOCK						    42 LOAD_CONST 5 ( 1 )					  
							      >> 48 LOAD_CONST 0 ( None )				    44 INPLACE_ADD						  
							      50 RETURN_VALUE NEW_LINE					    46 STORE_FAST 2 ( i )					  
							      								    48 JUMP_FORWARD 2 ( to 44 )					  
							      								    								  
							      								    70 >> 50 LOAD_FAST 2 ( i )					  
							      								    52 LOAD_CONST 6 ( 2 )					  
							      								    54 INPLACE_ADD						  
							      								    56 STORE_FAST 2 ( i )					  
							      								    								  
							      								    71 58 LOAD_FAST 2 ( i )					  
							      								    60 LOAD_CONST 7 ( 3 )					  
							      								    62 INPLACE_ADD						  
							      								    64 STORE_FAST 2 ( i )					  
							      								    								  
							      								    72 >> 66 LOAD_FAST 2 ( i )					  
							      								    68 LOAD_CONST 8 ( 2 )					  
							      								    70 INPLACE_ADD						  
							      								    72 STORE_FAST 2 ( i )					  
							      								    74 JUMP_FORWARD 2 ( to 44 )					  
							      								    								  
							      								    73 >> 76 LOAD_FAST 2 ( i )					  
							      								    78 LOAD_CONST 9 ( 4 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 2 ( i )					  
							      								    								  
							      								    74 >> 84 LOAD_FAST 2 ( i )					  
							      								    86 LOAD_CONST 10 ( 4 )					  
							      								    88 INPLACE_ADD						  
							      								    90 STORE_FAST 2 ( i )					  
							      								    								  
							      								    75 92 LOAD_FAST 2 ( i )					  
							      								    94 LOAD_CONST 11 ( 2 )					  
							      								    96 INPLACE_ADD						  
							      								    98 STORE_FAST 2 ( i )					  
							      								    								  
							      								    76 100 LOAD_FAST 2 ( i )					  
							      								    102 LOAD_CONST 12 ( 2 )					  
							      								    104 INPLACE_ADD						  
							      								    106 STORE_FAST 2 ( i )					  
							      								    108 JUMP_FORWARD 2 ( to 44 )				  
							      								    								  
							      								    77 >> 110 LOAD_FAST 2 ( i )					  
							      								    112 LOAD_CONST 12 ( 2 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 2 ( i )					  
							      								    								  
							      								    78 118 LOAD_FAST 2 ( i )					  
							      								    120 LOAD_CONST 12 ( 2 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 2 ( i )					  
							      								    								  
							      								    80 >> 126 LOAD_FAST 2 ( i )					  
							      								    128 LOAD_CONST 13 ( 2 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 2 ( i )					  
							      								    134 LOAD_FAST 2 ( i )					  
							      								    136 LOAD_CONST 14 ( 2 )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 2 ( i )					  
							      								    								  
							      								    81 142 LOAD_FAST 2 ( i )					  
							      								    144 LOAD_CONST 15 ( 2 )					  
							      								    146 INPLACE_ADD						  
							      								    148 STORE_FAST 2 ( i )					  
							      								    								  
							      								    82								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
def countOccurrences ( arr , n , x ) :			      Disassembly of <code object countOccurrences at 0x7fbac0e89d2 Disassembly of <code object countOccurrences at 0x7f816a683a5 error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    106 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 STORE_FAST 3 ( res )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	if x == arr [ i ] :				      								    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
	    res += 1					      3 4 SETUP_LOOP 36 ( to 42 )				    6 STORE_FAST 2 ( res )					  cals, co_varnames, co_names, co_consts, co_linesta
    return res						      6 LOAD_GLOBAL 0 ( range )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      8 LOAD_FAST 1 ( n )					    107 8 LOAD_FAST 0 ( arr )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
							      10 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( 1 )					  n parse     code.append(arg) ValueError: byte must
							      12 GET_ITER						    12 BINARY_SUBSCR						   be in range(0, 256)
							      >> 14 FOR_ITER 24 ( to 40 )				    14 STORE_FAST 3 ( res )					  
							      16 STORE_FAST 4 ( i )					    								  
							      								    108 16 LOAD_FAST 0 ( arr )					  
							      4 18 LOAD_FAST 2 ( x )					    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_FAST 0 ( arr )					    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 4 ( i )					    22 STORE_FAST 4 ( res )					  
							      24 BINARY_SUBSCR						    								  
							      26 COMPARE_OP 2 ( == )					    109 24 LOAD_FAST 0 ( arr )					  
							      28 POP_JUMP_IF_FALSE 14					    26 LOAD_CONST 4 ( 1 )					  
							      								    28 BINARY_SUBSCR						  
							      5 30 LOAD_FAST 3 ( res )					    30 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_CONST 2 ( 1 )					    32 BINARY_SUBSCR						  
							      34 INPLACE_ADD						    34 STORE_FAST 5 ( res )					  
							      36 STORE_FAST 3 ( res )					    								  
							      38 JUMP_ABSOLUTE 14					    110 36 LOAD_FAST 0 ( arr )					  
							      >> 40 POP_BLOCK						    38 LOAD_CONST 6 ( 2 )					  
							      								    40 BINARY_SUBSCR						  
							      6 >> 42 LOAD_FAST 3 ( res )				    42 LOAD_CONST 7 ( 3 )					  
							      44 RETURN_VALUE NEW_LINE					    44 COMPARE_OP 4 ( > )					  
							      								    46 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    111 48 LOAD_FAST 0 ( arr )					  
							      								    50 LOAD_METHOD 0 ( append )					  
							      								    52 LOAD_FAST 5 ( res )					  
							      								    54 LOAD_FAST 4 ( res )					  
							      								    56 CALL_METHOD 2						  
							      								    58 POP_TOP							  
							      								    60 JUMP_FORWARD 22 ( to 78 )				  
							      								    								  
							      								    112 >> 62 LOAD_FAST 0 ( arr )				  
							      								    64 LOAD_CONST 8 ( 1 )					  
							      								    66 BINARY_SUBSCR						  
							      								    68 LOAD_CONST 9 ( 2 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 STORE_FAST 6 ( res )					  
							      								    								  
							      								    113 74 LOAD_FAST 0 ( arr )					  
							      								    76 LOAD_METHOD 0 ( append )					  
							      								    78 LOAD_FAST 6 ( res )					  
							      								    80 CALL_METHOD 1						  
							      								    82 POP_TOP							  
							      								    84 JUMP_FORWARD 22 ( to 78 )				  
							      								    								  
							      								    114 >> 86 LOAD_FAST 0 ( arr )				  
							      								    88 LOAD_METHOD 0 ( append )					  
							      								    90 LOAD_FAST 6 ( res )					  
							      								    92 CALL_METHOD 1						  
							      								    94 POP_TOP							  
							      								    >> 96 LOAD_CONST 0 ( None )					  
							      								    98 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY	      QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
def leftRotate ( arr , n , k ) :			      Disassembly of <code object leftRotate at 0x7fbac<<unk>> de40 Disassembly of <code object leftRotate at 0x7f816a673a50, fil script_not_found : None
    for i in range ( k , k + n ) :			      2 0 SETUP_LOOP 46 ( to 48 )				    69 0 SETUP_LOOP 22 ( to 24 )				  
	print ( str ( arr [ i % n ] ) , end = " " )	      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( print )					  
							      4 LOAD_FAST 2 ( k )					    4 LOAD_FAST 0 ( arr )					  
							      6 LOAD_FAST 2 ( k )					    6 LOAD_ATTR 1 ( text )					  
							      8 LOAD_FAST 1 ( n )					    8 CALL_FUNCTION 1						  
							      10 BINARY_ADD						    10 POP_TOP							  
							      12 CALL_FUNCTION 2					    12 JUMP_ABSOLUTE 2						  
							      14 GET_ITER						    >> 14 POP_BLOCK						  
							      >> 16 FOR_ITER 28 ( to 46 )				    >> 16 LOAD_CONST 0 ( None )					  
							      18 STORE_FAST 3 ( i )					    18 RETURN_VALUE						  
							      								    NEW_LINE							  
							      3 20 LOAD_GLOBAL 1 ( print )				    								  
							      22 LOAD_GLOBAL 2 ( str )					    								  
							      24 LOAD_FAST 0 ( arr )					    								  
							      26 LOAD_FAST 3 ( i )					    								  
							      28 LOAD_FAST 1 ( n )					    								  
							      30 BINARY_MODULO						    								  
							      32 BINARY_SUBSCR						    								  
							      34 CALL_FUNCTION 1					    								  
							      36 LOAD_CONST 1 ( ' ' )					    								  
							      38 LOAD_CONST 2 ( ( 'end' , ) )				    								  
							      40 CALL_FUNCTION_KW 2					    								  
							      42 POP_TOP						    								  
							      44 JUMP_ABSOLUTE 16					    								  
							      >> 46 POP_BLOCK						    								  
							      >> 48 LOAD_CONST 0 ( None )				    								  
							      50 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
def binomialCoeff ( n , k ) :				      Disassembly of <code object binomialCoeff at 0x7fbac0e89d20,  Disassembly of <code object binomialdivider at 0x7f816a683d20 script_not_found : None
    if k == 0 or k == n :				      2 0 LOAD_FAST 1 ( k )					    28 0 LOAD_FAST 1 ( k )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff (  4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_FAST 1 ( k )					    								  
							      10 LOAD_FAST 0 ( n )					    29 8 LOAD_GLOBAL 0 ( binomialdivider )			  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_FAST 1 ( k )					  
							      14 POP_JUMP_IF_FALSE 20					    12 CALL_FUNCTION 1						  
							      								    14 STORE_FAST 1 ( k )					  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    								  
							      18 RETURN_VALUE						    30 16 LOAD_FAST 1 ( k )					  
							      								    18 LOAD_CONST 1 ( 0 )					  
							      4 >> 20 LOAD_GLOBAL 0 ( binomialCoeff )			    20 COMPARE_OP 2 ( == )					  
							      22 LOAD_FAST 0 ( n )					    22 POP_JUMP_IF_FALSE 28					  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 BINARY_SUBTRACT					    31 24 LOAD_FAST 1 ( k )					  
							      28 LOAD_FAST 1 ( k )					    26 LOAD_CONST 1 ( 0 )					  
							      30 LOAD_CONST 2 ( 1 )					    28 COMPARE_OP 2 ( == )					  
							      32 BINARY_SUBTRACT					    30 POP_JUMP_IF_FALSE 28					  
							      34 CALL_FUNCTION 2					    								  
							      36 LOAD_GLOBAL 0 ( binomialCoeff )			    32 32 LOAD_FAST 1 ( k )					  
							      38 LOAD_FAST 0 ( n )					    34 LOAD_CONST 1 ( 0 )					  
							      40 LOAD_CONST 2 ( 1 )					    36 COMPARE_OP 2 ( == )					  
							      42 BINARY_SUBTRACT					    38 POP_JUMP_IF_FALSE 42					  
							      44 LOAD_FAST 1 ( k )					    								  
							      46 CALL_FUNCTION 2					    33 40 LOAD_FAST 1 ( k )					  
							      48 BINARY_ADD						    42 LOAD_CONST 1 ( 0 )					  
							      50 RETURN_VALUE NEW_LINE					    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    34 48 LOAD_FAST 1 ( k )					  
							      								    50 LOAD_CONST 1 ( 0 )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    35 56 LOAD_FAST 1 ( k )					  
							      								    58 LOAD_CONST 1 ( 0 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    36 64 LOAD_FAST 1 ( k )					  
							      								    66 LOAD_CONST 1 ( 0 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    37 72 LOAD_FAST 1 ( k )					  
							      								    74 LOAD_CONST 1 ( 0 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      								    38 80 LOAD_FAST 1 ( k )					  
							      								    82 LOAD_CONST 1 ( 0 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      								    39 88 LOAD_FAST 1 ( k )					  
							      								    90 LOAD_CONST 1 ( 0 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    40 >> 96 LOAD_FAST 1 ( k )					  
							      								    98 LOAD_CONST 1 ( 0 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    41 104 LOAD_FAST 1 ( k )					  
							      								    106 LOAD_CONST 1 ( 0 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    42 112 LOAD_FAST 1 ( k )					  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    43 120 LOAD_FAST 1 ( k )					  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    44 128 LOAD_FAST 1 ( k )					  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    45 136 LOAD_FAST 1 ( k )					  
							      								    138 LOAD_CONST 1 ( 0 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    46 144 LOAD_FAST 1 ( k ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
def evenFib ( n ) :					      Disassembly of <code object evenFib at 0x7fbac<<unk>> d540, f Disassembly of <code object evenFib at 0x7f816a673a50, file " script_not_found : None
    if ( n < 1 ) :					      2 0 LOAD_FAST 0 ( n )					    34 0 LOAD_FAST 0 ( n )					  
	return n					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n == 1 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 2 ( == )					  
	return 2					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )  								    								  
							      3 8 LOAD_FAST 0 ( n )					    35 8 LOAD_CONST 2 ( 4 )					  
							      10 RETURN_VALUE						    10 STORE_FAST 1 ( evenFib )					  
							      								    								  
							      4 >> 12 LOAD_FAST 0 ( n )					    36 12 LOAD_CONST 3 ( 4 )					  
							      14 LOAD_CONST 1 ( 1 )					    14 STORE_FAST 2 ( n )					  
							      16 COMPARE_OP 2 ( == )					    								  
							      18 POP_JUMP_IF_FALSE 24					    37 16 LOAD_FAST 0 ( n )					  
							      								    18 LOAD_CONST 1 ( 1 )					  
							      5 20 LOAD_CONST 2 ( 2 )					    20 COMPARE_OP 2 ( == )					  
							      22 RETURN_VALUE						    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      6 >> 24 LOAD_CONST 3 ( 4 )				    38 24 LOAD_CONST 4 ( 2 )					  
							      26 LOAD_GLOBAL 0 ( evenFib )				    26 STORE_FAST 1 ( evenFib )					  
							      28 LOAD_FAST 0 ( n )					    								  
							      30 LOAD_CONST 1 ( 1 )					    39 >> 28 LOAD_CONST 5 ( 2 )					  
							      32 BINARY_SUBTRACT					    30 STORE_FAST 1 ( evenFib )					  
							      34 CALL_FUNCTION 1					    								  
							      36 BINARY_MULTIPLY					    40 32 LOAD_FAST 0 ( n )					  
							      38 LOAD_GLOBAL 0 ( evenFib )				    34 LOAD_FAST 1 ( evenFib )					  
							      40 LOAD_FAST 0 ( n )					    36 COMPARE_OP 6 ( in )					  
							      42 LOAD_CONST 2 ( 2 )					    38 POP_JUMP_IF_FALSE 44					  
							      44 BINARY_SUBTRACT					    								  
							      46 CALL_FUNCTION 1					    41 40 LOAD_CONST 6 ( '%d = %d' )				  
							      48 BINARY_ADD						    42 LOAD_FAST 1 ( evenFib )					  
							      50 RETURN_VALUE NEW_LINE					    44 BINARY_MODULO						  
							      								    46 STORE_FAST 1 ( evenFib )					  
							      								    								  
							      								    42 48 LOAD_FAST 0 ( n )					  
							      								    50 LOAD_FAST 1 ( evenFib )					  
							      								    52 COMPARE_OP 6 ( in )					  
							      								    54 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    43 56 LOAD_CONST 7 ( '%d = %d' )				  
							      								    58 LOAD_FAST 1 ( evenFib )					  
							      								    60 BINARY_MODULO						  
							      								    62 STORE_FAST 1 ( evenFib )					  
							      								    								  
							      								    44 64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_FAST 1 ( evenFib )					  
							      								    68 COMPARE_OP 6 ( in )					  
							      								    70 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    45 72 LOAD_CONST 8 ( '%d = %d' )				  
							      								    74 LOAD_FAST 1 ( evenFib )					  
							      								    76 BINARY_MODULO						  
							      								    78 STORE_FAST 1 ( evenFib )					  
							      								    								  
							      								    46 >> 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_FAST 1 ( evenFib )					  
							      								    84 COMPARE_OP 6 ( in )					  
							      								    86 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    47 88 LOAD_CONST 9 ( '%d = %d' )				  
							      								    90 LOAD_FAST 1 ( evenFib )					  
							      								    92 BINARY_MODULO						  
							      								    94 STORE_FAST 1 ( evenFib )					  
							      								    								  
							      								    48 >> 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_FAST 1 ( evenFib )					  
							      								    100 COMPARE_OP 6 ( in )					  
							      								    102 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    49 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_FAST 1 ( evenFib )					  
							      								    108 COMPARE_OP 6 ( in )					  
							      								    110 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    50 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_FAST 1 ( evenFib )					  
							      								    116 COMPARE_OP 6 ( in )					  
							      								    118 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    51 120 LOAD_CONST 10 ( '%d = %d' )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
def maxvolume ( s ) :					      Disassembly of <code object maxvolume at 0x7fbac<<unk>> d540, Disassembly of <code object maxvolume at 0x7f816a66ec00, file error : Traceback (most recent call last):   File
    length = int ( s / 3 )				      2 0 LOAD_GLOBAL 0 ( int )					    101 0 LOAD_FAST 1 ( s )					  "XLM/dis_script.py", line 60, in <module>	exec
    s -= length						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  (item)   File "main.py", line 32, in <module>	  Fi
    breadth = s / 2					      4 LOAD_CONST 1 ( 3 )					    4 BINARY_MULTIPLY						  le "<dis>", line 2, in maxvolume UnboundLocalError
    height = s - breadth				      6 BINARY_TRUE_DIVIDE					    6 STORE_FAST 2 ( maxth )					  : local variable 's' referenced before assignment
    return int ( length * breadth * height )		      8 CALL_FUNCTION 1						    								  
							      10 STORE_FAST 1 ( length )				    102 8 LOAD_GLOBAL 0 ( int )					  
							      								    10 LOAD_FAST 2 ( maxth )					  
							      3 12 LOAD_FAST 0 ( s )					    12 CALL_FUNCTION 1						  
							      14 LOAD_FAST 1 ( length )					    14 LOAD_CONST 1 ( 1 )					  
							      16 INPLACE_SUBTRACT					    16 COMPARE_OP 4 ( > )					  
							      18 STORE_FAST 0 ( s )					    18 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      4 20 LOAD_FAST 0 ( s )					    103 20 LOAD_FAST 2 ( maxth )				  
							      22 LOAD_CONST 2 ( 2 )					    22 LOAD_FAST 0 ( s )					  
							      24 BINARY_TRUE_DIVIDE					    24 BINARY_MULTIPLY						  
							      26 STORE_FAST 2 ( breadth )				    26 STORE_FAST 2 ( maxth )					  
							      								    								  
							      5 28 LOAD_FAST 0 ( s )					    104 28 LOAD_FAST 2 ( maxth )				  
							      30 LOAD_FAST 2 ( breadth )				    30 LOAD_FAST 0 ( s )					  
							      32 BINARY_SUBTRACT					    32 BINARY_MULTIPLY						  
							      34 STORE_FAST 3 ( height )				    34 LOAD_FAST 0 ( s )					  
							      								    36 LOAD_FAST 1 ( s )					  
							      6 36 LOAD_GLOBAL 0 ( int )				    38 BINARY_MULTIPLY						  
							      38 LOAD_FAST 1 ( length )					    40 LOAD_FAST 2 ( maxth )					  
							      40 LOAD_FAST 2 ( breadth )				    42 BINARY_MULTIPLY						  
							      42 BINARY_MULTIPLY					    44 BINARY_ADD						  
							      44 LOAD_FAST 3 ( height )					    46 LOAD_FAST 0 ( s )					  
							      46 BINARY_MULTIPLY					    48 LOAD_FAST 1 ( s )					  
							      48 CALL_FUNCTION 1					    50 BINARY_MULTIPLY						  
							      50 RETURN_VALUE NEW_LINE					    52 BINARY_ADD						  
							      								    54 LOAD_FAST 2 ( maxth )					  
							      								    56 BINARY_MULTIPLY						  
							      								    58 BINARY_ADD						  
							      								    60 LOAD_FAST 0 ( s )					  
							      								    62 BINARY_MULTIPLY						  
							      								    64 BINARY_ADD						  
							      								    66 LOAD_FAST 2 ( maxth )					  
							      								    68 BINARY_MULTIPLY						  
							      								    70 BINARY_ADD						  
							      								    72 LOAD_FAST 0 ( s )					  
							      								    74 BINARY_MULTIPLY						  
							      								    76 BINARY_ADD						  
							      								    78 LOAD_FAST 0 ( s )					  
							      								    80 BINARY_MULTIPLY						  
							      								    82 BINARY_ADD						  
							      								    84 LOAD_FAST 2 ( maxth )					  
							      								    86 BINARY_MULTIPLY						  
							      								    88 BINARY_ADD						  
							      								    90 LOAD_FAST 0 ( s )					  
							      								    92 BINARY_ADD						  
							      								    94 LOAD_FAST 2 ( maxth )					  
							      								    96 BINARY_MULTIPLY						  
							      								    98 BINARY_ADD						  
							      								    100 LOAD_FAST 0 ( s )					  
							      								    102 BINARY_MULTIPLY						  
							      								    104 BINARY_ADD						  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_FAST 0 ( s )					  
							      								    110 BINARY_ADD						  
							      								    112 BINARY_MULTIPLY						  
							      								    114 BINARY_ADD						  
							      								    116 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
def first ( str , i ) :					      Disassembly of <code object first at 0x7fbac0e8bc90, file "<d Disassembly of <code object first at 0x7f816a673a50, file "<d script_not_found : None
    if ( str [ i ] == '\0' ) :				      2 0 LOAD_FAST 0 ( str )					    26 0 LOAD_FAST 0 ( str )					  
	return 0					      2 LOAD_FAST 1 ( i )					    2 LOAD_CONST 1 ( '\0' )					  
    if ( str [ i ].isupper ( ) ) :			      4 BINARY_SUBSCR						    4 COMPARE_OP 2 ( == )					  
	return str [ i ]				      6 LOAD_CONST 1 ( '\x00' )					    6 POP_JUMP_IF_FALSE 12					  
    return first ( str , i + 1 )			      8 COMPARE_OP 2 ( == )					    								  
							      10 POP_JUMP_IF_FALSE 16					    27 8 LOAD_FAST 0 ( str )					  
							      								    10 LOAD_CONST 2 ( '*' )					  
							      3 12 LOAD_CONST 2 ( 0 )					    12 COMPARE_OP 2 ( == )					  
							      14 RETURN_VALUE						    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      4 >> 16 LOAD_FAST 0 ( str )				    28 >> 16 LOAD_FAST 0 ( str )				  
							      18 LOAD_FAST 1 ( i )					    18 LOAD_CONST 3 ( '*' )					  
							      20 BINARY_SUBSCR						    20 COMPARE_OP 2 ( == )					  
							      22 LOAD_METHOD 0 ( isupper )				    22 POP_JUMP_IF_FALSE 28					  
							      24 CALL_METHOD 0						    								  
							      26 POP_JUMP_IF_FALSE 36					    29 24 LOAD_FAST 0 ( str )					  
							      								    26 LOAD_CONST 4 ( '*' )					  
							      5 28 LOAD_FAST 0 ( str )					    28 COMPARE_OP 2 ( == )					  
							      30 LOAD_FAST 1 ( i )					    30 POP_JUMP_IF_FALSE 28					  
							      32 BINARY_SUBSCR						    								  
							      34 RETURN_VALUE						    30 >> 32 LOAD_FAST 0 ( str )				  
							      								    34 LOAD_CONST 5 ( '*' )					  
							      6 >> 36 LOAD_GLOBAL 1 ( first )				    36 COMPARE_OP 2 ( == )					  
							      38 LOAD_FAST 0 ( str )					    38 POP_JUMP_IF_FALSE 44					  
							      40 LOAD_FAST 1 ( i )					    								  
							      42 LOAD_CONST 3 ( 1 )					    31 40 LOAD_FAST 0 ( str )					  
							      44 BINARY_ADD						    42 LOAD_CONST 6 ( '*' )					  
							      46 CALL_FUNCTION 2					    44 COMPARE_OP 2 ( == )					  
							      48 RETURN_VALUE NEW_LINE					    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    32 48 LOAD_FAST 0 ( str )					  
							      								    50 LOAD_CONST 7 ( '*' )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    33 56 LOAD_FAST 0 ( str )					  
							      								    58 LOAD_CONST 8 ( '*' )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    34 64 LOAD_FAST 0 ( str )					  
							      								    66 LOAD_CONST 9 ( '*' )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    35 72 LOAD_FAST 0 ( str )					  
							      								    74 LOAD_CONST 10 ( '*' )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    36 80 LOAD_FAST 0 ( str )					  
							      								    82 LOAD_CONST 11 ( '*' )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    37 >> 88 LOAD_FAST 0 ( str )				  
							      								    90 LOAD_CONST 12 ( '*' )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 104					  
							      								    								  
							      								    38 >> 96 LOAD_FAST 0 ( str )				  
							      								    98 LOAD_CONST 13 ( '*' )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    104 LOAD_FAST 0 ( str )					  
							      								    106 LOAD_CONST 6 ( '*' )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    39 112 LOAD_FAST 0 ( str )					  
							      								    114 LOAD_CONST 6 ( '*' )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    40 >> 120 LOAD_FAST 0 ( str )				  
							      								    122 LOAD_CONST 7 ( '\0' )					  
							      								    124 BINARY_ADD						  
							      								    126 CALL_FUNCTION 1						  
							      								    128 RETURN_VALUE						  
							      								    								  
							      								    42 >> 130 LOAD_FAST 0 ( str )				  
							      								    132 LOAD_CONST 7 ( '\0' )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 146					  
							      								    138 LOAD_FAST 0 ( str ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET
--							      --							    --								  --
def minRevolutions ( r , x1 , y1 , x2 , y2 ) :		      Disassembly of <code object minRevolutions at 0x7fbac<<unk>>  Disassembly of <code object minRevolutions at 0x7f816a673a50, script_not_found : None
    d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 2 0 LOAD_GLOBAL 0 ( math )				    26 0 LOAD_GLOBAL 0 ( d )					  
    return math.ceil ( d // ( 2 * r ) )			      2 LOAD_METHOD 1 ( sqrt )					    2 LOAD_METHOD 1 ( sqrt )					  
							      4 LOAD_FAST 1 ( x1 )					    4 LOAD_CONST 1 ( 2 )					  
							      6 LOAD_FAST 3 ( x2 )					    6 LOAD_CONST 2 ( - 1 )					  
							      8 BINARY_SUBTRACT						    8 LOAD_FAST 0 ( r )						  
							      10 LOAD_FAST 1 ( x1 )					    10 LOAD_FAST 1 ( x1 )					  
							      12 LOAD_FAST 3 ( x2 )					    12 LOAD_FAST 2 ( x2 )					  
							      14 BINARY_SUBTRACT					    14 LOAD_FAST 3 ( x2 )					  
							      16 BINARY_MULTIPLY					    16 LOAD_FAST 4 ( x2 )					  
							      18 LOAD_FAST 2 ( y1 )					    18 LOAD_FAST 5 ( x2 )					  
							      20 LOAD_FAST 4 ( y2 )					    20 LOAD_FAST 6 ( x2 )					  
							      22 BINARY_SUBTRACT					    22 LOAD_FAST 7 ( x2 )					  
							      24 LOAD_FAST 2 ( y1 )					    24 LOAD_FAST 8 ( x2 )					  
							      26 LOAD_FAST 4 ( y2 )					    26 LOAD_FAST 9 ( x2 )					  
							      28 BINARY_SUBTRACT					    28 LOAD_FAST 10 ( x2 )					  
							      30 BINARY_MULTIPLY					    30 LOAD_FAST 11 ( x2 )					  
							      32 BINARY_ADD						    32 LOAD_FAST 12 ( x2 )					  
							      34 CALL_METHOD 1						    34 LOAD_FAST 13 ( x2 )					  
							      36 STORE_FAST 5 ( d )					    36 LOAD_FAST 14 ( x2 )					  
							      								    38 LOAD_FAST 15 ( x2 )					  
							      3 38 LOAD_GLOBAL 0 ( math )				    40 LOAD_FAST 16 ( x2 )					  
							      40 LOAD_METHOD 2 ( ceil )					    42 LOAD_FAST 17 ( x2 )					  
							      42 LOAD_FAST 5 ( d )					    44 LOAD_FAST 18 ( x2 )					  
							      44 LOAD_CONST 1 ( 2 )					    46 LOAD_FAST 19 ( x2 )					  
							      46 LOAD_FAST 0 ( r )					    48 LOAD_FAST 20 ( x2 )					  
							      48 BINARY_MULTIPLY					    50 LOAD_FAST 19 ( x2 )					  
							      50 BINARY_FLOOR_DIVIDE					    52 LOAD_FAST 20 ( x2 )					  
							      52 CALL_METHOD 1						    54 LOAD_FAST 21 ( x2 )					  
							      54 RETURN_VALUE NEW_LINE					    56 LOAD_FAST 22 ( x2 )					  
							      								    58 LOAD_FAST 21 ( x2 )					  
							      								    60 LOAD_FAST 22 ( x2 )					  
							      								    62 LOAD_FAST 21 ( x2 )					  
							      								    64 LOAD_FAST 22 ( x2 )					  
							      								    66 LOAD_FAST 21 ( x2 )					  
							      								    68 LOAD_FAST 22 ( x2 )					  
							      								    70 LOAD_FAST 21 ( x2 )					  
							      								    72 LOAD_FAST 22 ( x2 )					  
							      								    74 LOAD_FAST 21 ( x2 )					  
							      								    76 LOAD_FAST 22 ( x2 )					  
							      								    78 LOAD_FAST 21 ( x2 )					  
							      								    80 LOAD_FAST 22 ( x2 )					  
							      								    82 LOAD_FAST 21 ( x2 )					  
							      								    84 LOAD_FAST 22 ( x2 )					  
							      								    86 LOAD_FAST 21 ( x2 )					  
							      								    88 LOAD_FAST 22 ( x2 )					  
							      								    90 LOAD_FAST 21 ( x2 )					  
							      								    92 LOAD_FAST 22 ( x2 )					  
							      								    94 LOAD_FAST 21 ( x2 )					  
							      								    96 LOAD_FAST 22 ( x2 )					  
							      								    98 LOAD_FAST 21 ( x2 )					  
							      								    100 LOAD_FAST 22 ( x2 )					  
							      								    102 LOAD_FAST 21 ( x2 )					  
							      								    104 LOAD_FAST 22 ( x2 )					  
							      								    106 LOAD_FAST 22 ( x2 )					  
							      								    108 LOAD_FAST 21 ( x2 )					  
							      								    110 LOAD_FAST 22 ( x2 )					  
							      								    112 LOAD_FAST 23 ( x2 )					  
							      								    114 LOAD_FAST 22 ( x2 )					  
							      								    116 LOAD_FAST 23 ( x2 )					  
							      								    118 LOAD_FAST 22 ( x2 )					  
							      								    120 LOAD_FAST 23 ( x2 )					  
							      								    122 LOAD_FAST 22 ( x2 )					  
							      								    124 LOAD_FAST 23 ( x2 )					  
							      								    126 LOAD_FAST 22 ( x2 )					  
							      								    128 LOAD_FAST 23 ( x2 )					  
							      								    130 LOAD_FAST 22 ( x2 )					  
							      								    132 LOAD_FAST 24 ( x2 )					  
							      								    134 LOAD_FAST 23 ( x2 )					  
							      								    136 LOAD_FAST 22 ( x2 )					  
							      								    138 LOAD_FAST 24 ( x2 )					  
							      								    140 LOAD_FAST 23 (						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD		  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD
--							      --							    --								  --
def isPrime ( n ) :					      Disassembly of <code object isPrime at 0x7fbac<<unk>> d540, f Disassembly of <code object isPrime at 0x7f816a683d20, file " failure : #Results: 0, 10
    if n <= 1 :						      2 0 LOAD_FAST 0 ( n )					    36 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    for i in range ( 2 , n ) :				      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 2 ( == )					  
	if n % i == 0 :					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	    return False ;				      								    								  
    return True						      3 8 LOAD_CONST 2 ( False )				    37 8 LOAD_CONST 2 ( 0 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 SETUP_LOOP 34 ( to 48 )				    38 >> 12 LOAD_CONST 3 ( False )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 RETURN_VALUE						  
							      16 LOAD_CONST 3 ( 2 )					    NEW_LINE							  
							      18 LOAD_FAST 0 ( n )					    								  
							      20 CALL_FUNCTION 2					    								  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 20 ( to 46 )				    								  
							      26 STORE_FAST 1 ( i )					    								  
							      								    								  
							      5 28 LOAD_FAST 0 ( n )					    								  
							      30 LOAD_FAST 1 ( i )					    								  
							      32 BINARY_MODULO						    								  
							      34 LOAD_CONST 4 ( 0 )					    								  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 24					    								  
							      								    								  
							      6 40 LOAD_CONST 2 ( False )				    								  
							      42 RETURN_VALUE						    								  
							      44 JUMP_ABSOLUTE 24					    								  
							      >> 46 POP_BLOCK						    								  
							      								    								  
							      7 >> 48 LOAD_CONST 5 ( True )				    								  
							      50 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
def isPower ( x , y ) :					      Disassembly of <code object isPower at 0x7fbac0e8bc90, file " Disassembly of <code object isPower at 0x7f816a677930, file " error : Traceback (most recent call last):   File
    if ( x == 1 ) :					      2 0 LOAD_FAST 0 ( x )					    65 0 LOAD_FAST 0 ( x )					  "XLM/dis_script.py", line 59, in <module>	for
	return ( y == 1 )				      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    pow = 1						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
    while ( pow < y ) :					      6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	pow = pow * x					      								    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
    return ( pow == y )					      3 8 LOAD_FAST 1 ( y )					    66 8 LOAD_GLOBAL 0 ( pow )					  pack non-iterable NoneType object
							      10 LOAD_CONST 1 ( 1 )					    10 LOAD_FAST 0 ( x )					  
							      12 COMPARE_OP 2 ( == )					    12 LOAD_CONST 2 ( 1 )					  
							      14 RETURN_VALUE						    14 BINARY_SUBTRACT						  
							      								    16 CALL_FUNCTION 1						  
							      4 >> 16 LOAD_CONST 1 ( 1 )				    18 LOAD_FAST 0 ( x )					  
							      18 STORE_FAST 2 ( pow )					    20 LOAD_CONST 3 ( 1 )					  
							      								    22 BINARY_SUBTRACT						  
							      5 20 SETUP_LOOP 20 ( to 42 )				    24 BINARY_MULTIPLY						  
							      >> 22 LOAD_FAST 2 ( pow )					    26 LOAD_FAST 0 ( x )					  
							      24 LOAD_FAST 1 ( y )					    28 LOAD_CONST 4 ( 2 )					  
							      26 COMPARE_OP 0 ( < )					    30 BINARY_POWER						  
							      28 POP_JUMP_IF_FALSE 40					    32 BINARY_MULTIPLY						  
							      								    34 LOAD_FAST 0 ( x )					  
							      6 30 LOAD_FAST 2 ( pow )					    36 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_FAST 0 ( x )					    38 BINARY_SUBTRACT						  
							      34 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      36 STORE_FAST 2 ( pow )					    42 LOAD_FAST 0 ( x )					  
							      38 JUMP_ABSOLUTE 22					    44 LOAD_CONST 6 ( 2 )					  
							      >> 40 POP_BLOCK						    46 BINARY_POWER						  
							      								    48 BINARY_MULTIPLY						  
							      7 >> 42 LOAD_FAST 2 ( pow )				    50 LOAD_FAST 0 ( x )					  
							      44 LOAD_FAST 1 ( y )					    52 LOAD_CONST 7 ( 2 )					  
							      46 COMPARE_OP 2 ( == )					    54 BINARY_POWER						  
							      48 RETURN_VALUE NEW_LINE					    56 BINARY_MULTIPLY						  
							      								    58 BINARY_ADD						  
							      								    60 LOAD_FAST 0 ( x )					  
							      								    62 LOAD_CONST 8 ( 2 )					  
							      								    64 BINARY_POWER						  
							      								    66 BINARY_MULTIPLY						  
							      								    68 LOAD_FAST 0 ( x )					  
							      								    70 LOAD_CONST 9 ( 2 )					  
							      								    72 BINARY_POWER						  
							      								    74 BINARY_MULTIPLY						  
							      								    76 BINARY_ADD						  
							      								    78 LOAD_FAST 0 ( x )					  
							      								    80 LOAD_CONST 10 ( 2 )					  
							      								    82 BINARY_POWER						  
							      								    84 BINARY_MULTIPLY						  
							      								    86 LOAD_FAST 0 ( x )					  
							      								    88 LOAD_CONST 11 ( 2 )					  
							      								    90 BINARY_POWER						  
							      								    92 BINARY_MULTIPLY						  
							      								    94 BINARY_ADD						  
							      								    96 LOAD_FAST 0 ( x )					  
							      								    98 LOAD_CONST 12 ( 2 )					  
							      								    100 BINARY_POWER						  
							      								    102 BINARY_MULTIPLY						  
							      								    104 BINARY_ADD						  
							      								    106 LOAD_FAST 0 ( x )					  
							      								    108 LOAD_CONST 13 ( 1 )					  
							      								    110 BINARY_ADD						  
							      								    112 BINARY_MULTIPLY						  
							      								    114 BINARY_ADD						  
							      								    116 LOAD_FAST 0 ( x )					  
							      								    118 LOAD_CONST 14 ( 2 )					  
							      								    120 BINARY_POWER						  
							      								    122 BINARY_MULTIPLY						  
							      								    124 BINARY_ADD						  
							      								    126 LOAD_FAST 0 ( x )					  
							      								    128 LOAD_CONST 15 ( 2 )					  
							      								    130 BINARY_POWER						  
							      								    132 BINARY_MULTIPLY						  
							      								    134 BINARY_ADD						  
							      								    136 LOAD_FAST 0 ( x )					  
							      								    138 LOAD_CONST 16 ( 2 )					  
							      								    140 BINARY_POWER						  
							      								    142 BINARY_MULTIPLY						  
							      								    144 BINARY_ADD						  
							      								    146 LOAD_FAST 0 ( x )					  
							      								    148 LOAD_CONST 17 ( 2 )					  
							      								    150 BINARY_POWER						  
							      								    152 BINARY_ADD						  
							      								    154 BINARY_ADD						  
							      								    156 LOAD_FAST 0 ( x )					  
							      								    158 LOAD_CONST 18 ( 2 )					  
							      								    160 BINARY_POWER						  
							      								    162 BINARY_ADD						  
							      								    164 LOAD_FAST 0 ( x )					  
							      								    166 LOAD_CONST 19 ( 2 )					  
							      								    168 BINARY_POWER						  
							      								    170 BINARY_MULTIPLY						  
							      								    								  
							      								    67 148 LOAD_FAST 0 ( x )					  
							      								    150 LOAD_CONST 18 ( 2 )					  
							      								    152 BINARY_POWER						  
							      								    154 BINARY_MULTIPLY						  
							      								    156 BINARY_ADD						  
							      								    158 LOAD_FAST 0 ( x )					  
							      								    160 LOAD_CONST 19 ( 2 )					  
							      								    162 BINARY_POWER						  
							      								    164 BINARY_ADD						  
							      								    166 LOAD_FAST 0 ( x )					  
							      								    168 LOAD_CONST 20 ( 2 )					  
							      								    170 BINARY_POWER						  
							      								    172 BINARY_ADD						  
							      								    174 BINARY_ADD						  
							      								    								  
							      								    68 176 LOAD_FAST 0 ( x					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			      NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			    NUMBER_DAYS_TANK_WILL_BECOME_EMPTY				  NUMBER_DAYS_TANK_WILL_BECOME_EMPTY
--							      --							    --								  --
def minDaysToEmpty ( C , l ) :				      Disassembly of <code object minDaysToEmpty at 0x7fbac<<unk>>  Disassembly of <code object minDaysToEmpty at 0x7f816a601660, error : Traceback (most recent call last):   File
    if ( l >= C ) : return C				      2 0 LOAD_FAST 1 ( l )					    144 0 LOAD_FAST 0 ( C )					  "XLM/dis_script.py", line 59, in <module>	for
    eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2     2 LOAD_FAST 0 ( C )					    2 LOAD_CONST 1 ( 8 )					  item in run_dis_script():   File "XLM/dis_script.p
    return math.ceil ( eq_root ) + l			      4 COMPARE_OP 5 ( >= )					    4 BINARY_MULTIPLY						  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 POP_JUMP_IF_FALSE 12					    6 RETURN_VALUE						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 0 ( C )					    NEW_LINE							  assembler.py", line 81, in to_co     co_consts.app
							      10 RETURN_VALUE						    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      								    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      3 >> 12 LOAD_GLOBAL 0 ( math )				    								  co	 self.co_cellvars, ValueError: code: varname
							      14 LOAD_METHOD 1 ( sqrt )					    								  s is too small
							      16 LOAD_CONST 1 ( 1 )					    								  
							      18 LOAD_CONST 2 ( 8 )					    								  
							      20 LOAD_FAST 0 ( C )					    								  
							      22 LOAD_FAST 1 ( l )					    								  
							      24 BINARY_SUBTRACT					    								  
							      26 BINARY_MULTIPLY					    								  
							      28 BINARY_ADD						    								  
							      30 CALL_METHOD 1						    								  
							      32 LOAD_CONST 1 ( 1 )					    								  
							      34 BINARY_SUBTRACT					    								  
							      36 LOAD_CONST 3 ( 2 )					    								  
							      38 BINARY_TRUE_DIVIDE					    								  
							      40 STORE_FAST 2 ( eq_root )				    								  
							      								    								  
							      4 42 LOAD_GLOBAL 0 ( math )				    								  
							      44 LOAD_METHOD 2 ( ceil )					    								  
							      46 LOAD_FAST 2 ( eq_root )				    								  
							      48 CALL_METHOD 1						    								  
							      50 LOAD_FAST 1 ( l )					    								  
							      52 BINARY_ADD						    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1
--							      --							    --								  --
def transpose ( A , B ) :				      Disassembly of <code object transpose at 0x7fbac0e8bc90, file Disassembly of <code object transpose at 0x7f816a6e4ae0, file script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 54 ( to 56 )				    28 0 SETUP_LOOP 28 ( to 30 )				  
	for j in range ( M ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    B [ i ] [ j ] = A [ j ] [ i ]		      4 LOAD_GLOBAL 1 ( N )					    4 LOAD_CONST 1 ( 0 )					  
							      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
							      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 42 ( to 54 )				    >> 10 FOR_ITER 14 ( to 28 )					  
							      12 STORE_FAST 2 ( i )					    12 STORE_FAST 1 ( B )					  
							      								    								  
							      3 14 SETUP_LOOP 36 ( to 52 )				    29 14 LOAD_FAST 0 ( A )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_FAST 1 ( B )					  
							      18 LOAD_GLOBAL 2 ( M )					    18 LOAD_FAST 2 ( B )					  
							      20 CALL_FUNCTION 1					    20 BUILD_TUPLE 2						  
							      22 GET_ITER						    22 YIELD_VALUE						  
							      >> 24 FOR_ITER 24 ( to 50 )				    24 POP_TOP							  
							      26 STORE_FAST 3 ( j )					    26 JUMP_ABSOLUTE 10						  
							      								    >> 28 POP_BLOCK						  
							      4 28 LOAD_FAST 0 ( A )					    >> 30 LOAD_CONST 2 ( None )					  
							      30 LOAD_FAST 3 ( j )					    32 RETURN_VALUE						  
							      32 BINARY_SUBSCR						    NEW_LINE							  
							      34 LOAD_FAST 2 ( i )					    								  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 1 ( B )					    								  
							      40 LOAD_FAST 2 ( i )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 3 ( j )					    								  
							      46 STORE_SUBSCR						    								  
							      48 JUMP_ABSOLUTE 24					    								  
							      >> 50 POP_BLOCK						    								  
							      >> 52 JUMP_ABSOLUTE 10					    								  
							      >> 54 POP_BLOCK						    								  
							      >> 56 LOAD_CONST 0 ( None )				    								  
							      58 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
def printFun ( test ) :					      Disassembly of <code object printFun at 0x7fbac<<unk>> d540,  Disassembly of <code object printFun at 0x7f816a683c00, file  script_not_found : None
    if ( test < 1 ) :					      2 0 LOAD_FAST 0 ( test )					    65 0 LOAD_FAST 0 ( test )					  
	return						      2 LOAD_CONST 1 ( 1 )					    2 LOAD_METHOD 0 ( append )					  
    else :						      4 COMPARE_OP 0 ( < )					    4 LOAD_CONST 1 ( 'end' )					  
	print ( test , end = " " )			      6 POP_JUMP_IF_FALSE 12					    6 CALL_METHOD 1						  
	printFun ( test - 1 )				      								    8 POP_TOP							  
	print ( test , end = " " )			      3 8 LOAD_CONST 0 ( None )					    								  
	return						      10 RETURN_VALUE						    66 10 LOAD_FAST 0 ( test )					  
							      								    12 LOAD_METHOD 1 ( append )					  
							      5 >> 12 LOAD_GLOBAL 0 ( print )				    14 LOAD_CONST 2 ( '\n' )					  
							      14 LOAD_FAST 0 ( test )					    16 CALL_METHOD 1						  
							      16 LOAD_CONST 2 ( ' ' )					    18 POP_TOP							  
							      18 LOAD_CONST 3 ( ( 'end' , ) )				    20 LOAD_CONST 0 ( None )					  
							      20 CALL_FUNCTION_KW 2					    22 RETURN_VALUE						  
							      22 POP_TOP						    NEW_LINE							  
							      								    								  
							      6 24 LOAD_GLOBAL 1 ( printFun )				    								  
							      26 LOAD_FAST 0 ( test )					    								  
							      28 LOAD_CONST 1 ( 1 )					    								  
							      30 BINARY_SUBTRACT					    								  
							      32 CALL_FUNCTION 1					    								  
							      34 POP_TOP						    								  
							      								    								  
							      7 36 LOAD_GLOBAL 0 ( print )				    								  
							      38 LOAD_FAST 0 ( test )					    								  
							      40 LOAD_CONST 2 ( ' ' )					    								  
							      42 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      44 CALL_FUNCTION_KW 2					    								  
							      46 POP_TOP						    								  
							      								    								  
							      8 48 LOAD_CONST 0 ( None )				    								  
							      50 RETURN_VALUE						    								  
							      52 LOAD_CONST 0 ( None )					    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
def findFrequency ( arr , n , left , right , element ) :      Disassembly of <code object findFrequency at 0x7fbac0e8bc90,  Disassembly of <code object findFrequency at 0x7f816a6e4b70,  script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( left - 1 , right ) :		      2 STORE_FAST 5 ( count )					    2 STORE_FAST 1 ( n )					  
	if ( arr [ i ] == element ) :			      								    								  
	    count += 1					      3 4 SETUP_LOOP 42 ( to 48 )				    27 4 SETUP_LOOP 52 ( to 54 )				  
    return count					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_FAST 0 ( arr )					  
							      8 LOAD_FAST 2 ( left )					    8 GET_ITER							  
							      10 LOAD_CONST 2 ( 1 )					    >> 10 FOR_ITER 52 ( to 52 )					  
							      12 BINARY_SUBTRACT					    12 STORE_FAST 2 ( i )					  
							      14 LOAD_FAST 3 ( right )					    								  
							      16 CALL_FUNCTION 2					    28 14 LOAD_FAST 1 ( n )					  
							      18 GET_ITER						    16 LOAD_CONST 2 ( 1 )					  
							      >> 20 FOR_ITER 24 ( to 46 )				    18 INPLACE_ADD						  
							      22 STORE_FAST 6 ( i )					    20 STORE_FAST 1 ( n )					  
							      								    								  
							      4 24 LOAD_FAST 0 ( arr )					    29 22 LOAD_FAST 1 ( n )					  
							      26 LOAD_FAST 6 ( i )					    24 LOAD_CONST 3 ( 1 )					  
							      28 BINARY_SUBSCR						    26 INPLACE_ADD						  
							      30 LOAD_FAST 4 ( element )				    28 STORE_FAST 1 ( n )					  
							      32 COMPARE_OP 2 ( == )					    30 JUMP_ABSOLUTE 10						  
							      34 POP_JUMP_IF_FALSE 20					    >> 32 POP_BLOCK						  
							      								    								  
							      5 36 LOAD_FAST 5 ( count )				    30 >> 34 LOAD_FAST 1 ( n )					  
							      38 LOAD_CONST 2 ( 1 )					    36 RETURN_VALUE						  
							      40 INPLACE_ADD						    NEW_LINE							  
							      42 STORE_FAST 5 ( count )					    								  
							      44 JUMP_ABSOLUTE 20					    								  
							      >> 46 POP_BLOCK						    								  
							      								    								  
							      6 >> 48 LOAD_FAST 5 ( count )				    								  
							      50 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
def sumBetweenTwoKth ( arr , n , k1 , k2 ) :		      Disassembly of <code object sumBetweenTwoKth at 0x7fbac0e89d2 Disassembly of <code object sumBetweenTwoTwoth at 0x7f816a673 script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    50 0 LOAD_FAST 0 ( arr )					  
    result = 0						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( k1 , k2 - 1 ) :			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
	result += arr [ i ]				      6 POP_TOP							    6 STORE_FAST 1 ( n )					  
    return result					      								    								  
							      3 8 LOAD_CONST 1 ( 0 )					    51 8 LOAD_FAST 1 ( n )					  
							      10 STORE_FAST 4 ( result )				    10 LOAD_CONST 1 ( 1 )					  
							      								    12 INPLACE_ADD						  
							      4 12 SETUP_LOOP 34 ( to 48 )				    14 STORE_FAST 1 ( n )					  
							      14 LOAD_GLOBAL 1 ( range )				    								  
							      16 LOAD_FAST 2 ( k1 )					    52 16 LOAD_FAST 1 ( n )					  
							      18 LOAD_FAST 3 ( k2 )					    18 LOAD_CONST 2 ( 2 )					  
							      20 LOAD_CONST 2 ( 1 )					    20 INPLACE_ADD						  
							      22 BINARY_SUBTRACT					    22 STORE_FAST 1 ( n )					  
							      24 CALL_FUNCTION 2					    								  
							      26 GET_ITER						    53 24 LOAD_FAST 1 ( n )					  
							      >> 28 FOR_ITER 16 ( to 46 )				    26 LOAD_CONST 3 ( 1 )					  
							      30 STORE_FAST 5 ( i )					    28 INPLACE_ADD						  
							      								    30 STORE_FAST 1 ( n )					  
							      5 32 LOAD_FAST 4 ( result )				    								  
							      34 LOAD_FAST 0 ( arr )					    54 32 LOAD_FAST 1 ( n )					  
							      36 LOAD_FAST 5 ( i )					    34 LOAD_CONST 4 ( 2 )					  
							      38 BINARY_SUBSCR						    36 INPLACE_ADD						  
							      40 INPLACE_ADD						    38 STORE_FAST 1 ( n )					  
							      42 STORE_FAST 4 ( result )				    								  
							      44 JUMP_ABSOLUTE 28					    55 40 LOAD_FAST 1 ( n )					  
							      >> 46 POP_BLOCK						    42 LOAD_CONST 5 ( 1 )					  
							      								    44 INPLACE_ADD						  
							      6 >> 48 LOAD_FAST 4 ( result )				    46 STORE_FAST 1 ( n )					  
							      50 RETURN_VALUE NEW_LINE					    								  
							      								    56 48 LOAD_FAST 1 ( n )					  
							      								    50 LOAD_CONST 6 ( 2 )					  
							      								    52 INPLACE_ADD						  
							      								    54 STORE_FAST 1 ( n )					  
							      								    								  
							      								    57 56 LOAD_FAST 1 ( n )					  
							      								    58 LOAD_CONST 7 ( 2 )					  
							      								    60 INPLACE_ADD						  
							      								    62 STORE_FAST 1 ( n )					  
							      								    								  
							      								    58 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 8 ( 2 )					  
							      								    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( n )					  
							      								    								  
							      								    59 72 LOAD_FAST 1 ( n )					  
							      								    74 LOAD_CONST 9 ( 2 )					  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 1 ( n )					  
							      								    80 STORE_FAST 1 ( n )					  
							      								    								  
							      								    60 82 LOAD_FAST 1 ( n )					  
							      								    84 LOAD_CONST 10 ( 2 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( n )					  
							      								    								  
							      								    61 90 LOAD_FAST 1 ( n )					  
							      								    92 LOAD_CONST 11 ( 3 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 1 ( n )					  
							      								    								  
							      								    62 98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_FAST 1 ( n )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( n )					  
							      								    								  
							      								    63 106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_CONST 12 ( 2 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( n )					  
							      								    								  
							      								    64 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_FAST 0 ( arr )					  
							      								    118 LOAD_FAST 1 ( n )					  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 1 ( n )					  
							      								    								  
							      								    65 124 LOAD_FAST 1 ( n )					  
							      								    126 LOAD_FAST 1 ( n )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    								  
							      								    66 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_FAST 1 ( n )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    67 140 LOAD_FAST 1 ( n )					  
							      								    142 LOAD_FAST 1 ( n )					  
							      								    144 INPLACE_ADD						  
							      								    146 STORE_FAST 1 ( n )					  
							      								    148 LOAD_CONST 13 ( 2 )					  
							      								    150 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM
--							      --							    --								  --
def summingSeries ( n ) :				      Disassembly of <code object summingSeries at 0x7fbac<<unk>> d Disassembly of <code object summingSeries at 0x7f816a6e4b70,  error : Traceback (most recent call last):   File
    S = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( S )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( S )					    2 LOAD_METHOD 1 ( count )					  item in run_dis_script():   File "XLM/dis_script.p
	S += i * i - ( i - 1 ) * ( i - 1 )		      								    4 CALL_METHOD 0						  y", line 54, in run_dis_script     hyp_co = mco.to
    return S						      3 4 SETUP_LOOP 50 ( to 56 )				    6 RETURN_VALUE NEW_LINE					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      6 LOAD_GLOBAL 0 ( range )					    								  assembler.py", line 81, in to_co     co_consts.app
							      8 LOAD_CONST 2 ( 1 )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 LOAD_FAST 0 ( n )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 LOAD_CONST 2 ( 1 )					    								  co	 self.co_cellvars, ValueError: code: varname
							      14 BINARY_ADD						    								  s is too small
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 32 ( to 54 )				    								  
							      22 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 24 LOAD_FAST 1 ( S )					    								  
							      26 LOAD_FAST 2 ( i )					    								  
							      28 LOAD_FAST 2 ( i )					    								  
							      30 BINARY_MULTIPLY					    								  
							      32 LOAD_FAST 2 ( i )					    								  
							      34 LOAD_CONST 2 ( 1 )					    								  
							      36 BINARY_SUBTRACT					    								  
							      38 LOAD_FAST 2 ( i )					    								  
							      40 LOAD_CONST 2 ( 1 )					    								  
							      42 BINARY_SUBTRACT					    								  
							      44 BINARY_MULTIPLY					    								  
							      46 BINARY_SUBTRACT					    								  
							      48 INPLACE_ADD						    								  
							      50 STORE_FAST 1 ( S )					    								  
							      52 JUMP_ABSOLUTE 20					    								  
							      >> 54 POP_BLOCK						    								  
							      								    								  
							      5 >> 56 LOAD_FAST 1 ( S )					    								  
							      58 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def getSum ( n ) :					      Disassembly of <code object getSum at 0x7fbac<<unk>> de40, fi Disassembly of <code object getSum at 0x7f816a6e4b70, file "< error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( sum )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( n > 0 ) :					      2 STORE_FAST 1 ( sum )					    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 32, in <module>	  Fi
	sum += int ( n % 10 )				      								    4 CALL_FUNCTION 1						  le "<dis>", line 2, in getSum TypeError: 'int' obj
	n = int ( n / 10 )				      3 4 SETUP_LOOP 40 ( to 46 )				    6 LOAD_CONST 1 ( 10 )					  ect is not iterable
    return sum						      >> 6 LOAD_FAST 0 ( n )					    8 COMPARE_OP 0 ( < )					  
							      8 LOAD_CONST 1 ( 0 )					    10 POP_JUMP_IF_FALSE 20					  
							      10 COMPARE_OP 4 ( > )					    								  
							      12 POP_JUMP_IF_FALSE 44					    27 12 LOAD_GLOBAL 1 ( sum )					  
							      								    14 LOAD_FAST 0 ( n )					  
							      4 14 LOAD_FAST 1 ( sum )					    16 CALL_FUNCTION 1						  
							      16 LOAD_GLOBAL 0 ( int )					    18 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_FAST 0 ( n )					    20 COMPARE_OP 4 ( > )					  
							      20 LOAD_CONST 2 ( 10 )					    22 POP_JUMP_IF_FALSE 28					  
							      22 BINARY_MODULO						    								  
							      24 CALL_FUNCTION 1					    28 24 LOAD_GLOBAL 2 ( sum )					  
							      26 INPLACE_ADD						    26 LOAD_FAST 0 ( n )					  
							      28 STORE_FAST 1 ( sum )					    28 CALL_FUNCTION 1						  
							      								    30 LOAD_CONST 3 ( 1 )					  
							      5 30 LOAD_GLOBAL 0 ( int )				    32 COMPARE_OP 4 ( > )					  
							      32 LOAD_FAST 0 ( n )					    34 POP_JUMP_IF_FALSE 44					  
							      34 LOAD_CONST 2 ( 10 )					    								  
							      36 BINARY_TRUE_DIVIDE					    29 36 LOAD_GLOBAL 3 ( sum )					  
							      38 CALL_FUNCTION 1					    38 LOAD_FAST 0 ( n )					  
							      40 STORE_FAST 0 ( n )					    40 CALL_FUNCTION 1						  
							      42 JUMP_ABSOLUTE 6					    42 LOAD_CONST 4 ( 0 )					  
							      >> 44 POP_BLOCK						    44 COMPARE_OP 4 ( > )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      6 >> 46 LOAD_FAST 1 ( sum )				    								  
							      48 RETURN_VALUE NEW_LINE					    30 48 LOAD_GLOBAL 4 ( sum )					  
							      								    50 LOAD_FAST 0 ( n )					  
							      								    52 CALL_FUNCTION 1						  
							      								    54 LOAD_CONST 5 ( 1 )					  
							      								    56 COMPARE_OP 4 ( > )					  
							      								    58 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    31 60 LOAD_GLOBAL 5 ( sum )					  
							      								    62 LOAD_FAST 0 ( n )					  
							      								    64 CALL_FUNCTION 1						  
							      								    66 LOAD_CONST 6 ( 1 )					  
							      								    68 COMPARE_OP 4 ( > )					  
							      								    70 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    32 72 LOAD_GLOBAL 6 ( sum )					  
							      								    74 LOAD_FAST 0 ( n )					  
							      								    76 CALL_FUNCTION 1						  
							      								    78 LOAD_CONST 7 ( 1 )					  
							      								    80 COMPARE_OP 4 ( > )					  
							      								    82 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    33 84 LOAD_GLOBAL 7 ( sum )					  
							      								    86 LOAD_FAST 0 ( n )					  
							      								    88 CALL_FUNCTION 1						  
							      								    90 LOAD_CONST 8 ( 1 )					  
							      								    92 COMPARE_OP 4 ( > )					  
							      								    94 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    34 96 LOAD_GLOBAL 8 ( sum )					  
							      								    98 LOAD_FAST 0 ( n )					  
							      								    100 CALL_FUNCTION 1						  
							      								    102 LOAD_CONST 9 ( 1 )					  
							      								    104 COMPARE_OP 4 ( > )					  
							      								    106 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    35 108 LOAD_GLOBAL 9 ( sum )				  
							      								    110 LOAD_FAST 0 ( n )					  
							      								    112 CALL_FUNCTION 1						  
							      								    114 LOAD_CONST 10 ( 1 )					  
							      								    116 COMPARE_OP 4 ( > )					  
							      								    118 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    36 120 LOAD_GLOBAL 10 ( sum )				  
							      								    122 LOAD_FAST 0 ( n )					  
							      								    124 CALL_FUNCTION 1						  
							      								    126 LOAD_CONST 11 ( 1 )					  
							      								    128 COMPARE_OP 4 ( > )					  
							      								    130 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    37 132 LOAD_GLOBAL 11 ( sum )				  
							      								    134 LOAD_FAST 0 ( n )					  
							      								    136 CALL_FUNCTION 1						  
							      								    138 LOAD_CONST 12 ( 0 )					  
							      								    140 COMPARE_OP 4 ( > )					  
							      								    142 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    38 144 LOAD_FAST 0 ( n )					  
							      								    146 RETURN_VALUE						  
							      								    								  
							      								    39 >> 148 LOAD_FAST 0 ( n )					  
							      								    150 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT
--							      --							    --								  --
def check ( num ) :					      Disassembly of <code object check at 0x7fbac0e8bc90, file "<d Disassembly of <code object check at 0x7f816afaa150, file "<d script_not_found : None
    digitSum = 0					      2 0 LOAD_CONST 1 ( 0 )					    16 0 LOAD_GLOBAL 0 ( digitSum )				  
    while num > 0 :					      2 STORE_FAST 1 ( digitSum )				    2 CALL_FUNCTION 0						  
	rem = num % 10					      								    4 STORE_FAST 1 ( num )					  
	digitSum = digitSum + rem			      3 4 SETUP_LOOP 36 ( to 42 )				    								  
	num = num / 10					      >> 6 LOAD_FAST 0 ( num )					    17 6 LOAD_CONST 1 ( 0 )					  
    return ( digitSum % 3 == 0 )			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 10 )					  
							      10 COMPARE_OP 4 ( > )					    10 COMPARE_OP 0 ( < )					  
							      12 POP_JUMP_IF_FALSE 40					    12 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      4 14 LOAD_FAST 0 ( num )					    18 14 LOAD_CONST 3 ( 1 )					  
							      16 LOAD_CONST 2 ( 10 )					    16 RETURN_VALUE						  
							      18 BINARY_MODULO						    								  
							      20 STORE_FAST 2 ( rem )					    19 >> 18 LOAD_CONST 4 ( '%d%d%d' )				  
							      								    20 LOAD_FAST 1 ( num )					  
							      5 22 LOAD_FAST 1 ( digitSum )				    22 BINARY_MODULO						  
							      24 LOAD_FAST 2 ( rem )					    24 LOAD_CONST 5 ( '%d%d' )					  
							      26 BINARY_ADD						    26 LOAD_FAST 1 ( num )					  
							      28 STORE_FAST 1 ( digitSum )				    28 BINARY_MODULO						  
							      								    30 LOAD_CONST 6 ( '%d' )					  
							      6 30 LOAD_FAST 0 ( num )					    32 LOAD_FAST 1 ( num )					  
							      32 LOAD_CONST 2 ( 10 )					    34 BINARY_MODULO						  
							      34 BINARY_TRUE_DIVIDE					    36 BUILD_TUPLE 2						  
							      36 STORE_FAST 0 ( num )					    38 BINARY_MODULO						  
							      38 JUMP_ABSOLUTE 6					    40 RETURN_VALUE						  
							      >> 40 POP_BLOCK						    NEW_LINE							  
							      								    								  
							      7 >> 42 LOAD_FAST 1 ( digitSum )				    								  
							      44 LOAD_CONST 3 ( 3 )					    								  
							      46 BINARY_MODULO						    								  
							      48 LOAD_CONST 1 ( 0 )					    								  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_N_UNDER_MODULO_P				      COMPUTE_N_UNDER_MODULO_P					    COMPUTE_N_UNDER_MODULO_P					  COMPUTE_N_UNDER_MODULO_P
--							      --							    --								  --
def modFact ( n , p ) :					      Disassembly of <code object modFact at 0x7fbac<<unk>> de40, f Disassembly of <code object modadjadjn at 0x7f816a673a50, fil error : Traceback (most recent call last):   File
    if n >= p :						      2 0 LOAD_FAST 0 ( n )					    65 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_FAST 1 ( p )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 33, in <module>	  Fi
    result = 1						      4 COMPARE_OP 5 ( >= )					    4 INPLACE_ADD						  le "<dis>", line 2, in modFact TypeError: unsuppor
    for i in range ( 1 , n + 1 ) :			      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( p )					  ted operand type(s) for +=: 'int' and 'str'
	result = ( result * i ) % p			      								    								  
    return result					      3 8 LOAD_CONST 1 ( 0 )					    66 8 LOAD_FAST 1 ( p )					  
							      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 2 )					  
							      								    12 INPLACE_ADD						  
							      4 >> 12 LOAD_CONST 2 ( 1 )				    14 STORE_FAST 1 ( p )					  
							      14 STORE_FAST 2 ( result )				    								  
							      								    67 16 LOAD_FAST 1 ( p )					  
							      5 16 SETUP_LOOP 34 ( to 52 )				    18 LOAD_CONST 3 ( 1 )					  
							      18 LOAD_GLOBAL 0 ( range )				    20 INPLACE_ADD						  
							      20 LOAD_CONST 2 ( 1 )					    22 STORE_FAST 1 ( p )					  
							      22 LOAD_FAST 0 ( n )					    								  
							      24 LOAD_CONST 2 ( 1 )					    68 24 LOAD_FAST 1 ( p )					  
							      26 BINARY_ADD						    26 LOAD_CONST 4 ( 2 )					  
							      28 CALL_FUNCTION 2					    28 INPLACE_ADD						  
							      30 GET_ITER						    30 STORE_FAST 1 ( p )					  
							      >> 32 FOR_ITER 16 ( to 50 )				    								  
							      34 STORE_FAST 3 ( i )					    69 32 LOAD_FAST 1 ( p )					  
							      								    34 LOAD_CONST 5 ( 1 )					  
							      6 36 LOAD_FAST 2 ( result )				    36 INPLACE_ADD						  
							      38 LOAD_FAST 3 ( i )					    38 STORE_FAST 1 ( p )					  
							      40 BINARY_MULTIPLY					    								  
							      42 LOAD_FAST 1 ( p )					    70 40 LOAD_FAST 1 ( p )					  
							      44 BINARY_MODULO						    42 LOAD_CONST 6 ( 2 )					  
							      46 STORE_FAST 2 ( result )				    44 INPLACE_ADD						  
							      48 JUMP_ABSOLUTE 32					    46 STORE_FAST 1 ( p )					  
							      >> 50 POP_BLOCK						    								  
							      								    71 48 LOAD_FAST 1 ( p )					  
							      7 >> 52 LOAD_FAST 2 ( result )				    50 LOAD_CONST 7 ( 2 )					  
							      54 RETURN_VALUE NEW_LINE					    52 INPLACE_ADD						  
							      								    54 STORE_FAST 1 ( p )					  
							      								    								  
							      								    72 56 LOAD_FAST 1 ( p )					  
							      								    58 LOAD_CONST 8 ( 2 )					  
							      								    60 INPLACE_ADD						  
							      								    62 STORE_FAST 1 ( p )					  
							      								    								  
							      								    73 64 LOAD_FAST 1 ( p )					  
							      								    66 LOAD_CONST 9 ( 2 )					  
							      								    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( p )					  
							      								    								  
							      								    74 72 LOAD_FAST 1 ( p )					  
							      								    74 LOAD_CONST 10 ( 2 )					  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 1 ( p )					  
							      								    80 LOAD_CONST 11 ( 3 )					  
							      								    82 INPLACE_ADD						  
							      								    84 STORE_FAST 1 ( p )					  
							      								    								  
							      								    75 86 LOAD_FAST 1 ( p )					  
							      								    88 LOAD_CONST 12 ( 2 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 1 ( p )					  
							      								    								  
							      								    76 94 LOAD_FAST 1 ( p )					  
							      								    96 LOAD_CONST 13 ( 3 )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 1 ( p )					  
							      								    								  
							      								    77 102 LOAD_FAST 1 ( p )					  
							      								    104 LOAD_CONST 14 ( 2 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( p )					  
							      								    110 STORE_FAST 2 ( p )					  
							      								    								  
							      								    78 112 LOAD_FAST 1 ( p )					  
							      								    114 LOAD_CONST 15 ( 2 )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 1 ( p )					  
							      								    								  
							      								    79 120 LOAD_FAST 1 ( p )					  
							      								    122 LOAD_CONST 16 ( 2 )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 1 ( p )					  
							      								    								  
							      								    80 128 LOAD_FAST 1 ( p )					  
							      								    130 LOAD_CONST 16 ( 2 )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( p )					  
							      								    136 STORE_FAST 2 ( p )					  
							      								    								  
							      								    81 138 LOAD_FAST 1 ( p )					  
							      								    140 LOAD_CONST 17 ( 3 )					  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( p )					  
							      								    								  
							      								    82 146 LOAD_FAST 1 ( p )					  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
def squareRoot ( n ) :					      Disassembly of <code object squareRoot at 0x7fbac0e8bc90, fil Disassembly of <code object squareRoot at 0x7f816a6e4b70, fil error : Traceback (most recent call last):   File
    x = n						      2 0 LOAD_FAST 0 ( n )					    20 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    y = 1						      2 STORE_FAST 1 ( x )					    2 LOAD_CONST 1 ( 0.000001 )					  (item)   File "main.py", line 34, in <module>	  Fi
    e = 0.000001					      								    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in squareRoot UnboundLocalErro
    while ( x - y > e ) :				      3 4 LOAD_CONST 1 ( 1 )					    6 POP_JUMP_IF_FALSE 12					  r: local variable 'n' referenced before assignment
	x = ( x + y ) / 2				      6 STORE_FAST 2 ( y )					    								  
	y = n / x					      								    21 8 LOAD_CONST 2 ( 0.000001 )				  
    return x						      4 8 LOAD_CONST 2 ( 1e-06 )				    10 RETURN_VALUE						  
							      10 STORE_FAST 3 ( e )					    								  
							      								    22 >> 12 LOAD_CONST 3 ( 0.000001 )				  
							      5 12 SETUP_LOOP 36 ( to 50 )				    14 RETURN_VALUE						  
							      >> 14 LOAD_FAST 1 ( x )					    16 LOAD_CONST 0 ( None )					  
							      16 LOAD_FAST 2 ( y )					    18 RETURN_VALUE						  
							      18 BINARY_SUBTRACT					    NEW_LINE							  
							      20 LOAD_FAST 3 ( e )					    								  
							      22 COMPARE_OP 4 ( > )					    								  
							      24 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      6 26 LOAD_FAST 1 ( x )					    								  
							      28 LOAD_FAST 2 ( y )					    								  
							      30 BINARY_ADD						    								  
							      32 LOAD_CONST 3 ( 2 )					    								  
							      34 BINARY_TRUE_DIVIDE					    								  
							      36 STORE_FAST 1 ( x )					    								  
							      								    								  
							      7 38 LOAD_FAST 0 ( n )					    								  
							      40 LOAD_FAST 1 ( x )					    								  
							      42 BINARY_TRUE_DIVIDE					    								  
							      44 STORE_FAST 2 ( y )					    								  
							      46 JUMP_ABSOLUTE 14					    								  
							      >> 48 POP_BLOCK						    								  
							      								    								  
							      8 >> 50 LOAD_FAST 1 ( x )					    								  
							      52 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
def checkcircle ( r , R , r1 , x1 , y1 ) :		      Disassembly of <code object checkcircle at 0x7fbac<<unk>> d54 Disassembly of <code object checkcircle at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )	      2 0 LOAD_GLOBAL 0 ( int )					    26 0 LOAD_FAST 1 ( R )					  "XLM/dis_script.py", line 59, in <module>	for
    return ( dis - r1 >= R and dis + r1 <= r )		      2 LOAD_GLOBAL 1 ( math )					    2 LOAD_CONST 1 ( 2 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_METHOD 2 ( sqrt )					    4 BINARY_MULTIPLY						  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_FAST 3 ( x1 )					    6 LOAD_FAST 0 ( r )						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 3 ( x1 )					    8 LOAD_CONST 2 ( - 1 )					  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 LOAD_FAST 4 ( y1 )					    12 LOAD_FAST 0 ( r )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 LOAD_FAST 4 ( y1 )					    14 LOAD_CONST 3 ( - 1 )					  co	 self.co_cellvars, ValueError: code: varname
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  s is too small
							      18 BINARY_ADD						    18 LOAD_FAST 0 ( r )					  
							      20 CALL_METHOD 1						    20 LOAD_CONST 4 ( - 1 )					  
							      22 CALL_FUNCTION 1					    22 BINARY_MULTIPLY						  
							      24 STORE_FAST 5 ( dis )					    24 BINARY_ADD						  
							      								    26 LOAD_CONST 5 ( - 1 )					  
							      3 26 LOAD_FAST 5 ( dis )					    28 BINARY_MULTIPLY						  
							      28 LOAD_FAST 2 ( r1 )					    30 BINARY_ADD						  
							      30 BINARY_SUBTRACT					    32 LOAD_CONST 6 ( - 1 )					  
							      32 LOAD_FAST 1 ( R )					    34 BINARY_MULTIPLY						  
							      34 COMPARE_OP 5 ( >= )					    36 LOAD_FAST 0 ( r )					  
							      36 JUMP_IF_FALSE_OR_POP 48				    38 LOAD_CONST 7 ( - 1 )					  
							      38 LOAD_FAST 5 ( dis )					    40 BINARY_MULTIPLY						  
							      40 LOAD_FAST 2 ( r1 )					    42 BINARY_ADD						  
							      42 BINARY_ADD						    44 LOAD_FAST 0 ( r )					  
							      44 LOAD_FAST 0 ( r )					    46 LOAD_CONST 8 ( - 1 )					  
							      46 COMPARE_OP 1 ( <= )					    48 BINARY_MULTIPLY						  
							      >> 48 RETURN_VALUE NEW_LINE				    50 BINARY_ADD						  
							      								    52 LOAD_FAST 0 ( r )					  
							      								    54 LOAD_CONST 9 ( - 1 )					  
							      								    56 BINARY_MULTIPLY						  
							      								    58 BINARY_ADD						  
							      								    60 BINARY_MULTIPLY						  
							      								    62 BINARY_ADD						  
							      								    64 LOAD_FAST 0 ( r )					  
							      								    66 LOAD_CONST 10 ( - 1 )					  
							      								    68 BINARY_MULTIPLY						  
							      								    70 BINARY_ADD						  
							      								    72 LOAD_CONST 11 ( - 1 )					  
							      								    74 BINARY_MULTIPLY						  
							      								    76 BINARY_ADD						  
							      								    78 LOAD_FAST 0 ( r )					  
							      								    80 LOAD_CONST 12 ( - 1 )					  
							      								    82 BINARY_MULTIPLY						  
							      								    84 BINARY_ADD						  
							      								    86 LOAD_CONST 13 ( - 1 )					  
							      								    88 BINARY_ADD						  
							      								    90 LOAD_CONST 14 ( - 1 )					  
							      								    92 BINARY_ADD						  
							      								    94 LOAD_CONST 15 ( - 1 )					  
							      								    96 BINARY_ADD						  
							      								    98 LOAD_CONST 16 ( - 1 )					  
							      								    100 BINARY_ADD						  
							      								    102 LOAD_CONST 17 ( - 1 )					  
							      								    104 BINARY_ADD						  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_FAST 0 ( r )					  
							      								    110 LOAD_CONST 12 ( - 1 )					  
							      								    112 BINARY_ADD						  
							      								    114 LOAD_CONST 14 ( - 1 )					  
							      								    116 BINARY_ADD						  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_CONST 15 ( - 1 )					  
							      								    122 BINARY_ADD						  
							      								    124 BINARY_ADD						  
							      								    126 LOAD_FAST 0 ( r )					  
							      								    128 LOAD_CONST 16 ( - 1 )					  
							      								    130 BINARY_ADD						  
							      								    132 BINARY_ADD						  
							      								    134 LOAD_CONST 17 ( - 1 )					  
							      								    136 BINARY_ADD						  
							      								    138 LOAD_CONST 18 ( - 1 )					  
							      								    140 BINARY_ADD						  
							      								    142 LOAD_CONST 19 ( - 1 )					  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_CONST 18 ( - 1 )					  
							      								    150 BINARY_ADD						  
							      								    152 BINARY_ADD						  
							      								    154 BINARY_MULTIPLY						  
							      								    156 BINARY_ADD						  
							      								    								  
							      								    29 158 LOAD_FAST 0 ( r )					  
							      								    160 LOAD_CONST 16 ( - 1 )					  
							      								    162 BINARY_ADD						  
							      								    164 BINARY_ADD						  
							      								    166 LOAD_CONST 17 ( - 1 )					  
							      								    168 BINARY_ADD						  
							      								    170 BINARY_MULTIPLY						  
							      								    172 BINARY_ADD						  
							      								    174 LOAD_FAST 0 ( r )					  
							      								    176 LOAD_CONST 18 ( - 1 )					  
							      								    174 BINARY_ADD						  
							      								    176 BINARY_ADD						  
							      								    178 LOAD_CONST 19 ( - 1 )					  
							      								    180 BINARY_ADD						  
							      								    182 BINARY_ADD						  
							      								    180 LOAD_CONST 20 ( - 1 )					  
							      								    182 BINARY_ADD						  
							      								    184 LOAD_FAST 0 ( r ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def getSum ( n ) :					      Disassembly of <code object getSum at 0x7fbac<<unk>> d540, fi Disassembly of <code object getSum at 0x7f816a6e4b70, file "< error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( sum )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( n != 0 ) :					      2 STORE_FAST 1 ( sum )					    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 32, in <module>	  Fi
	sum = sum + int ( n % 10 )			      								    4 CALL_FUNCTION 1						  le "<dis>", line 2, in getSum TypeError: 'int' obj
	n = int ( n / 10 )				      3 4 SETUP_LOOP 40 ( to 46 )				    6 LOAD_GLOBAL 1 ( sum )					  ect is not iterable
    return sum						      >> 6 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      8 LOAD_CONST 1 ( 0 )					    10 CALL_FUNCTION 1						  
							      10 COMPARE_OP 3 ( != )					    12 BINARY_MULTIPLY						  
							      12 POP_JUMP_IF_FALSE 44					    14 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 14 LOAD_FAST 1 ( sum )					    								  
							      16 LOAD_GLOBAL 0 ( int )					    								  
							      18 LOAD_FAST 0 ( n )					    								  
							      20 LOAD_CONST 2 ( 10 )					    								  
							      22 BINARY_MODULO						    								  
							      24 CALL_FUNCTION 1					    								  
							      26 BINARY_ADD						    								  
							      28 STORE_FAST 1 ( sum )					    								  
							      								    								  
							      5 30 LOAD_GLOBAL 0 ( int )				    								  
							      32 LOAD_FAST 0 ( n )					    								  
							      34 LOAD_CONST 2 ( 10 )					    								  
							      36 BINARY_TRUE_DIVIDE					    								  
							      38 CALL_FUNCTION 1					    								  
							      40 STORE_FAST 0 ( n )					    								  
							      42 JUMP_ABSOLUTE 6					    								  
							      >> 44 POP_BLOCK						    								  
							      								    								  
							      6 >> 46 LOAD_FAST 1 ( sum )				    								  
							      48 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
def playGame ( arr , n ) :				      Disassembly of <code object playGame at 0x7fbac0e89d20, file  Disassembly of <code object playGame at 0x7f816a6e4ae0, file  script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    31 0 LOAD_GLOBAL 0 ( set )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	s.add ( arr [ i ] )				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 1 ( n )					  
    return 1 if len ( s ) % 2 == 0 else 2		      								    								  
							      3 6 SETUP_LOOP 30 ( to 38 )				    32 6 LOAD_FAST 1 ( n )					  
							      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 BINARY_SUBSCR						  
							      12 CALL_FUNCTION 1					    12 STORE_FAST 2 ( s )					  
							      14 GET_ITER						    								  
							      >> 16 FOR_ITER 18 ( to 36 )				    33 14 LOAD_FAST 0 ( arr )					  
							      18 STORE_FAST 3 ( i )					    16 LOAD_CONST 2 ( 1 )					  
							      								    18 BINARY_SUBSCR						  
							      4 20 LOAD_FAST 2 ( s )					    20 STORE_FAST 3 ( s )					  
							      22 LOAD_METHOD 2 ( add )					    								  
							      24 LOAD_FAST 0 ( arr )					    34 22 LOAD_FAST 1 ( n )					  
							      26 LOAD_FAST 3 ( i )					    24 LOAD_CONST 3 ( 1 )					  
							      28 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      30 CALL_METHOD 1						    28 STORE_FAST 4 ( s )					  
							      32 POP_TOP						    								  
							      34 JUMP_ABSOLUTE 16					    35 30 LOAD_FAST 0 ( arr )					  
							      >> 36 POP_BLOCK						    32 LOAD_CONST 4 ( 1 )					  
							      								    34 BINARY_SUBSCR						  
							      5 >> 38 LOAD_GLOBAL 3 ( len )				    36 LOAD_FAST 2 ( s )					  
							      40 LOAD_FAST 2 ( s )					    38 LOAD_CONST 5 ( 2 )					  
							      42 CALL_FUNCTION 1					    40 BINARY_SUBSCR						  
							      44 LOAD_CONST 1 ( 2 )					    42 LOAD_FAST 3 ( s )					  
							      46 BINARY_MODULO						    44 LOAD_CONST 6 ( '%s' )					  
							      48 LOAD_CONST 2 ( 0 )					    46 LOAD_FAST 4 ( s )					  
							      50 COMPARE_OP 2 ( == )					    48 LOAD_FAST 3 ( s )					  
							      52 POP_JUMP_IF_FALSE 58					    50 LOAD_CONST 7 ( '%s' )					  
							      54 LOAD_CONST 3 ( 1 )					    52 LOAD_FAST 4 ( s )					  
							      56 RETURN_VALUE						    54 LOAD_FAST 3 ( s )					  
							      >> 58 LOAD_CONST 1 ( 2 )					    56 BUILD_TUPLE 4						  
							      60 RETURN_VALUE NEW_LINE					    58 BINARY_MODULO						  
							      								    60 CALL_FUNCTION 1						  
							      								    62 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
def numberOfWays ( x ) :				      Disassembly of <code object numberOfWays at 0x7fbac0e8bc90, f Disassembly of <code object numberOfWays at 0x7f816a681780, f script_not_found : None
    if x == 0 or x == 1 :				      2 0 LOAD_FAST 0 ( x )					    113 0 LOAD_FAST 0 ( x )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 1 )					  
    else :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_FAST 0 ( x )					    								  
							      10 LOAD_CONST 2 ( 1 )					    114 8 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    10 STORE_FAST 1 ( s )					  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    115 12 LOAD_FAST 1 ( s )					  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    14 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 28					  
							      5 >> 20 LOAD_GLOBAL 0 ( numberOfWays )			    								  
							      22 LOAD_FAST 0 ( x )					    116 20 LOAD_CONST 3 ( 0 )					  
							      24 LOAD_CONST 2 ( 1 )					    22 RETURN_VALUE						  
							      26 BINARY_SUBTRACT					    								  
							      28 CALL_FUNCTION 1					    117 >> 24 LOAD_CONST 4 ( 0 )				  
							      30 LOAD_FAST 0 ( x )					    26 RETURN_VALUE						  
							      32 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 0 ( None )					  
							      34 BINARY_SUBTRACT					    30 RETURN_VALUE						  
							      36 LOAD_GLOBAL 0 ( numberOfWays )				    NEW_LINE							  
							      38 LOAD_FAST 0 ( x )					    								  
							      40 LOAD_CONST 3 ( 2 )					    								  
							      42 BINARY_SUBTRACT					    								  
							      44 CALL_FUNCTION 1					    								  
							      46 BINARY_MULTIPLY					    								  
							      48 BINARY_ADD						    								  
							      50 RETURN_VALUE						    								  
							      52 LOAD_CONST 0 ( None )					    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
def numberOfPaths ( m , n ) :				      Disassembly of <code object numberOfPaths at 0x7fbac0e89d20,  Disassembly of <code object numberOfPaths at 0x7f816a673a50,  script_not_found : None
    for i in range ( n , ( m + n - 1 ) ) :		      2 0 SETUP_LOOP 50 ( to 52 )				    51 0 SETUP_LOOP 22 ( to 24 )				  
	path *= i ;					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 1 ( n )						  
	path //= ( i - n + 1 ) ;			      4 LOAD_FAST 1 ( n )					    4 GET_ITER							  
    return path ;					      6 LOAD_FAST 0 ( m )					    >> 6 FOR_ITER 14 ( to 22 )					  
							      8 LOAD_FAST 1 ( n )					    8 STORE_FAST 2 ( n )					  
							      10 BINARY_ADD						    								  
							      12 LOAD_CONST 1 ( 1 )					    52 10 LOAD_FAST 0 ( m )					  
							      14 BINARY_SUBTRACT					    12 LOAD_METHOD 0 ( append )					  
							      16 CALL_FUNCTION 2					    14 LOAD_FAST 2 ( n )					  
							      18 GET_ITER						    16 CALL_METHOD 1						  
							      >> 20 FOR_ITER 28 ( to 50 )				    18 POP_TOP							  
							      22 STORE_FAST 2 ( i )					    20 JUMP_ABSOLUTE 6						  
							      								    >> 22 POP_BLOCK						  
							      3 24 LOAD_FAST 3 ( path )					    >> 24 LOAD_CONST 0 ( None )					  
							      26 LOAD_FAST 2 ( i )					    26 RETURN_VALUE						  
							      28 INPLACE_MULTIPLY					    NEW_LINE							  
							      30 STORE_FAST 3 ( path )					    								  
							      								    								  
							      4 32 LOAD_FAST 3 ( path )					    								  
							      34 LOAD_FAST 2 ( i )					    								  
							      36 LOAD_FAST 1 ( n )					    								  
							      38 BINARY_SUBTRACT					    								  
							      40 LOAD_CONST 1 ( 1 )					    								  
							      42 BINARY_ADD						    								  
							      44 INPLACE_FLOOR_DIVIDE					    								  
							      46 STORE_FAST 3 ( path )					    								  
							      48 JUMP_ABSOLUTE 20					    								  
							      >> 50 POP_BLOCK						    								  
							      								    								  
							      5 >> 52 LOAD_FAST 3 ( path )				    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_
--							      --							    --								  --
def isPossibleToMakeDivisible ( arr , n ) :		      Disassembly of <code object isPossibleToMakeDivisible at 0x7f Disassembly of <code object isPossiblebleDivisible at 0x7f816 error : /bin/bash: line 1: 24784 Segmentation faul
    remainder = 0					      2 0 LOAD_CONST 1 ( 0 )					    118 0 LOAD_FAST 1 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( remainder )				    2 LOAD_CONST 1 ( 2 )					  ataset/bin/python XLM/dis_script.py --script_path
	remainder = ( remainder + arr [ i ] ) % 3	      								    4 BINARY_MULTIPLY						  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    return ( remainder == 0 )				      3 4 SETUP_LOOP 34 ( to 40 )				    6 STORE_FAST 2 ( n )					  eval_scripts/python_sa-dis_sa.test/POSSIBLE_TO_MAK
							      6 LOAD_GLOBAL 0 ( range )					    								  E_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_AN_A
							      8 LOAD_CONST 1 ( 0 )					    119 8 LOAD_FAST 0 ( arr )					  RRAY.dis
							      10 LOAD_FAST 1 ( n )					    10 LOAD_CONST 2 ( 1 )					  
							      12 CALL_FUNCTION 2					    12 BINARY_MULTIPLY						  
							      14 GET_ITER						    14 LOAD_FAST 2 ( n )					  
							      >> 16 FOR_ITER 20 ( to 38 )				    16 LOAD_CONST 3 ( 2 )					  
							      18 STORE_FAST 3 ( i )					    18 BINARY_MULTIPLY						  
							      								    20 BINARY_MULTIPLY						  
							      4 20 LOAD_FAST 2 ( remainder )				    22 LOAD_FAST 2 ( n )					  
							      22 LOAD_FAST 0 ( arr )					    24 BINARY_MULTIPLY						  
							      24 LOAD_FAST 3 ( i )					    26 BINARY_ADD						  
							      26 BINARY_SUBSCR						    28 LOAD_FAST 1 ( n )					  
							      28 BINARY_ADD						    30 LOAD_CONST 4 ( 3 )					  
							      30 LOAD_CONST 2 ( 3 )					    32 BINARY_MULTIPLY						  
							      32 BINARY_MODULO						    34 BINARY_ADD						  
							      34 STORE_FAST 2 ( remainder )				    36 LOAD_FAST 2 ( n )					  
							      36 JUMP_ABSOLUTE 16					    38 BINARY_MULTIPLY						  
							      >> 38 POP_BLOCK						    40 BINARY_ADD						  
							      								    42 LOAD_FAST 1 ( n )					  
							      5 >> 40 LOAD_FAST 2 ( remainder )				    44 LOAD_CONST 5 ( 2 )					  
							      42 LOAD_CONST 1 ( 0 )					    46 BINARY_MULTIPLY						  
							      44 COMPARE_OP 2 ( == )					    48 BINARY_ADD						  
							      46 RETURN_VALUE NEW_LINE					    50 LOAD_FAST 2 ( n )					  
							      								    52 BINARY_MULTIPLY						  
							      								    54 BINARY_ADD						  
							      								    56 LOAD_FAST 1 ( n )					  
							      								    58 BINARY_MULTIPLY						  
							      								    60 BINARY_ADD						  
							      								    62 LOAD_FAST 2 ( n )					  
							      								    64 BINARY_ADD						  
							      								    66 BINARY_MULTIPLY						  
							      								    68 BINARY_ADD						  
							      								    70 LOAD_FAST 2 ( n )					  
							      								    72 LOAD_CONST 6 ( 1 )					  
							      								    74 BINARY_ADD						  
							      								    76 BINARY_MULTIPLY						  
							      								    78 BINARY_ADD						  
							      								    80 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
def isPower ( x , y ) :					      Disassembly of <code object isPower at 0x7fbac<<unk>> d540, f Disassembly of <code object isPower at 0x7f816a673a50, file " error : Traceback (most recent call last):   File
    res1 = math.log ( y ) / math.log ( x ) ;		      2 0 LOAD_GLOBAL 0 ( math )				    69 0 LOAD_GLOBAL 0 ( res1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    res2 = math.log ( y ) / math.log ( x ) ;		      2 LOAD_METHOD 1 ( log )					    2 LOAD_GLOBAL 1 ( math )					  (item)   File "main.py", line 32, in <module>	  Fi
    return 1 if ( res1 == res2 ) else 0 ;		      4 LOAD_FAST 1 ( y )					    4 LOAD_METHOD 2 ( log )					  le "<dis>", line 2, in isPower NameError: name 're
							      6 CALL_METHOD 1						    6 LOAD_CONST 1 ( 0 )					  s1' is not defined
							      8 LOAD_GLOBAL 0 ( math )					    8 LOAD_FAST 1 ( y )						  
							      10 LOAD_METHOD 1 ( log )					    10 LOAD_FAST 2 ( res1 )					  
							      12 LOAD_FAST 0 ( x )					    12 CALL_METHOD 3						  
							      14 CALL_METHOD 1						    14 CALL_FUNCTION 1						  
							      16 BINARY_TRUE_DIVIDE					    16 RETURN_VALUE						  
							      18 STORE_FAST 2 ( res1 )					    NEW_LINE							  
							      								    								  
							      3 20 LOAD_GLOBAL 0 ( math )				    								  
							      22 LOAD_METHOD 1 ( log )					    								  
							      24 LOAD_FAST 1 ( y )					    								  
							      26 CALL_METHOD 1						    								  
							      28 LOAD_GLOBAL 0 ( math )					    								  
							      30 LOAD_METHOD 1 ( log )					    								  
							      32 LOAD_FAST 0 ( x )					    								  
							      34 CALL_METHOD 1						    								  
							      36 BINARY_TRUE_DIVIDE					    								  
							      38 STORE_FAST 3 ( res2 )					    								  
							      								    								  
							      4 40 LOAD_FAST 2 ( res1 )					    								  
							      42 LOAD_FAST 3 ( res2 )					    								  
							      44 COMPARE_OP 2 ( == )					    								  
							      46 POP_JUMP_IF_FALSE 52					    								  
							      48 LOAD_CONST 1 ( 1 )					    								  
							      50 RETURN_VALUE						    								  
							      >> 52 LOAD_CONST 2 ( 0 )					    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1
--							      --							    --								  --
def countDigits ( a , b ) :				      Disassembly of <code object countDigits at 0x7fbac0e8bc90, fi Disassembly of <code object countDigits at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    if ( a == 0 or b == 0 ) :				      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    return math.floor ( math.log10 ( abs ( a ) ) + math.log10 4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 1 ( b )					    								  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_CONST 1 ( 0 )					    27 8 LOAD_GLOBAL 0 ( math )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 COMPARE_OP 2 ( == )					    10 LOAD_METHOD 1 ( log10 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 POP_JUMP_IF_FALSE 20					    12 LOAD_FAST 0 ( a )					  co	 self.co_cellvars, ValueError: code: varname
							      								    14 CALL_METHOD 1						  s is too small
							      3 >> 16 LOAD_CONST 2 ( 1 )				    16 LOAD_CONST 2 ( 1 )					  
							      18 RETURN_VALUE						    18 COMPARE_OP 2 ( == )					  
							      								    20 POP_JUMP_IF_FALSE 28					  
							      4 >> 20 LOAD_GLOBAL 0 ( math )				    								  
							      22 LOAD_METHOD 1 ( floor )				    28 22 LOAD_GLOBAL 2 ( math )				  
							      24 LOAD_GLOBAL 0 ( math )					    24 LOAD_METHOD 3 ( log10 )					  
							      26 LOAD_METHOD 2 ( log10 )				    26 LOAD_FAST 0 ( a )					  
							      28 LOAD_GLOBAL 3 ( abs )					    28 CALL_METHOD 1						  
							      30 LOAD_FAST 0 ( a )					    30 LOAD_CONST 3 ( 1 )					  
							      32 CALL_FUNCTION 1					    32 COMPARE_OP 2 ( == )					  
							      34 CALL_METHOD 1						    34 POP_JUMP_IF_FALSE 38					  
							      36 LOAD_GLOBAL 0 ( math )					    								  
							      38 LOAD_METHOD 2 ( log10 )				    29 36 LOAD_GLOBAL 2 ( math )				  
							      40 LOAD_GLOBAL 3 ( abs )					    38 LOAD_METHOD 4 ( floor )					  
							      42 LOAD_FAST 1 ( b )					    40 LOAD_FAST 0 ( a )					  
							      44 CALL_FUNCTION 1					    42 CALL_METHOD 1						  
							      46 CALL_METHOD 1						    44 LOAD_CONST 4 ( - 1 )					  
							      48 BINARY_ADD						    46 COMPARE_OP 2 ( == )					  
							      50 CALL_METHOD 1						    48 POP_JUMP_IF_FALSE 52					  
							      52 LOAD_CONST 2 ( 1 )					    								  
							      54 BINARY_ADD						    30 50 LOAD_GLOBAL 2 ( math )				  
							      56 RETURN_VALUE NEW_LINE					    52 LOAD_METHOD 5 ( floor )					  
							      								    54 LOAD_FAST 0 ( a )					  
							      								    56 CALL_METHOD 1						  
							      								    58 LOAD_CONST 5 ( - 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    31 64 LOAD_GLOBAL 2 ( math )				  
							      								    66 LOAD_METHOD 6 ( floor )					  
							      								    68 LOAD_FAST 0 ( a )					  
							      								    70 CALL_METHOD 1						  
							      								    72 LOAD_CONST 6 ( - 1 )					  
							      								    74 COMPARE_OP 2 ( == )					  
							      								    76 POP_JUMP_IF_FALSE 82					  
							      								    78 LOAD_GLOBAL 2 ( math )					  
							      								    80 LOAD_METHOD 7 ( floor )					  
							      								    82 LOAD_FAST 0 ( a )					  
							      								    84 CALL_METHOD 1						  
							      								    86 LOAD_CONST 7 ( - 1 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      								    32 92 LOAD_GLOBAL 2 ( math )				  
							      								    94 LOAD_METHOD 8 ( floor )					  
							      								    96 LOAD_FAST 0 ( a )					  
							      								    98 CALL_METHOD 1						  
							      								    100 LOAD_CONST 8 ( - 1 )					  
							      								    102 COMPARE_OP 2 ( == )					  
							      								    104 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    33 106 LOAD_GLOBAL 2 ( math )				  
							      								    108 LOAD_METHOD 9 ( floor )					  
							      								    110 LOAD_FAST 0 ( a )					  
							      								    112 CALL_METHOD 1						  
							      								    114 LOAD_CONST 9 ( - 1 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    34 120 LOAD_GLOBAL 2 ( math )				  
							      								    122 LOAD_METHOD 10 ( floor )				  
							      								    124 LOAD_FAST 0 ( a )					  
							      								    126 CALL_METHOD 1						  
							      								    128 LOAD_CONST 10 ( - 1 )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 134					  
							      								    134 LOAD_FAST 0 ( a )					  
							      								    136 LOAD_CONST 11 ( - 1 )					  
							      								    138 COMPARE_OP 2 ( == )					  
							      								    140 POP_JUMP_IF_FALSE 138					  
							      								    142 LOAD_FAST 0 ( a )					  
							      								    144 LOAD_CONST 12 ( - 1 )					  
							      								    146 COMPARE_OP 2 ( == )					  
							      								    148 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    35 150 LOAD_CONST 12 ( 1 )					  
							      								    152 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
def exponential ( n , x ) :				      Disassembly of <code object exponential at 0x7fbac<<unk>> de4 Disassembly of <code object exponential at 0x7f816a6e4b70, fi script_not_found : None
    sum = 1.0						      2 0 LOAD_CONST 1 ( 1.0 )					    26 0 LOAD_GLOBAL 0 ( sum )					  
    for i in range ( n , 0 , - 1 ) :			      2 STORE_FAST 2 ( sum )					    2 LOAD_FAST 0 ( n )						  
	sum = 1 + x * sum / i				      								    4 CALL_FUNCTION 1						  
    print ( "e^x =" , sum )				      3 4 SETUP_LOOP 36 ( to 42 )				    6 LOAD_GLOBAL 1 ( sum )					  
							      6 LOAD_GLOBAL 0 ( range )					    8 LOAD_FAST 1 ( x )						  
							      8 LOAD_FAST 0 ( n )					    10 CALL_FUNCTION 1						  
							      10 LOAD_CONST 2 ( 0 )					    12 BINARY_MULTIPLY						  
							      12 LOAD_CONST 3 ( - 1 )					    14 LOAD_GLOBAL 2 ( sum )					  
							      14 CALL_FUNCTION 3					    16 LOAD_FAST 0 ( n )					  
							      16 GET_ITER						    18 CALL_FUNCTION 1						  
							      >> 18 FOR_ITER 20 ( to 40 )				    20 BINARY_MULTIPLY						  
							      20 STORE_FAST 3 ( i )					    22 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 22 LOAD_CONST 4 ( 1 )					    								  
							      24 LOAD_FAST 1 ( x )					    								  
							      26 LOAD_FAST 2 ( sum )					    								  
							      28 BINARY_MULTIPLY					    								  
							      30 LOAD_FAST 3 ( i )					    								  
							      32 BINARY_TRUE_DIVIDE					    								  
							      34 BINARY_ADD						    								  
							      36 STORE_FAST 2 ( sum )					    								  
							      38 JUMP_ABSOLUTE 18					    								  
							      >> 40 POP_BLOCK						    								  
							      								    								  
							      5 >> 42 LOAD_GLOBAL 1 ( print )				    								  
							      44 LOAD_CONST 5 ( 'e^x =' )				    								  
							      46 LOAD_FAST 2 ( sum )					    								  
							      48 CALL_FUNCTION 2					    								  
							      50 POP_TOP						    								  
							      52 LOAD_CONST 0 ( None )					    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
def answer_query ( a , n , l , r ) :			      Disassembly of <code object answer_query at 0x7fbac0e89d20, f Disassembly of <code object answer_query at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    137 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( l , r ) :				      2 STORE_FAST 4 ( count )					    2 STORE_FAST 1 ( l )					  item in run_dis_script():   File "XLM/dis_script.p
	if ( a [ i ] == a [ i + 1 ] ) :			      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	    count += 1					      3 4 SETUP_LOOP 46 ( to 52 )				    138 4 LOAD_FAST 1 ( l )					  cals, co_varnames, co_names, co_consts, co_linesta
    return count					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_CONST 2 ( 1 )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      8 LOAD_FAST 2 ( l )					    8 COMPARE_OP 2 ( == )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
							      10 LOAD_FAST 3 ( r )					    10 POP_JUMP_IF_FALSE 20					  n parse     code.append(arg) ValueError: byte must
							      12 CALL_FUNCTION 2					    								   be in range(0, 256)
							      14 GET_ITER						    139 12 LOAD_FAST 1 ( l )					  
							      >> 16 FOR_ITER 32 ( to 50 )				    14 LOAD_CONST 3 ( 1 )					  
							      18 STORE_FAST 5 ( i )					    16 INPLACE_ADD						  
							      								    18 STORE_FAST 1 ( l )					  
							      4 20 LOAD_FAST 0 ( a )					    								  
							      22 LOAD_FAST 5 ( i )					    140 >> 20 LOAD_FAST 1 ( l )					  
							      24 BINARY_SUBSCR						    22 LOAD_CONST 4 ( 1 )					  
							      26 LOAD_FAST 0 ( a )					    24 INPLACE_ADD						  
							      28 LOAD_FAST 5 ( i )					    26 STORE_FAST 1 ( l )					  
							      30 LOAD_CONST 2 ( 1 )					    								  
							      32 BINARY_ADD						    141 28 LOAD_FAST 1 ( l )					  
							      34 BINARY_SUBSCR						    30 LOAD_CONST 5 ( '' )					  
							      36 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      38 POP_JUMP_IF_FALSE 16					    34 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      5 40 LOAD_FAST 4 ( count )				    142 36 LOAD_FAST 1 ( l )					  
							      42 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 6 ( '' )					  
							      44 INPLACE_ADD						    40 COMPARE_OP 2 ( == )					  
							      46 STORE_FAST 4 ( count )					    42 POP_JUMP_IF_FALSE 44					  
							      48 JUMP_ABSOLUTE 16					    								  
							      >> 50 POP_BLOCK						    143 44 LOAD_FAST 1 ( l )					  
							      								    46 LOAD_CONST 7 ( '' )					  
							      6 >> 52 LOAD_FAST 4 ( count )				    48 COMPARE_OP 2 ( == )					  
							      54 RETURN_VALUE NEW_LINE					    50 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    144 52 LOAD_FAST 1 ( l )					  
							      								    54 LOAD_CONST 8 ( 1 )					  
							      								    56 INPLACE_ADD						  
							      								    58 STORE_FAST 1 ( l )					  
							      								    								  
							      								    145 >> 60 LOAD_FAST 1 ( l )					  
							      								    62 LOAD_CONST 9 ( 1 )					  
							      								    64 INPLACE_ADD						  
							      								    66 STORE_FAST 1 ( l )					  
							      								    68 JUMP_FORWARD 2 ( to 44 )					  
							      								    								  
							      								    146 >> 70 LOAD_FAST 1 ( l )					  
							      								    72 LOAD_CONST 10 ( 1 )					  
							      								    74 INPLACE_ADD						  
							      								    76 STORE_FAST 1 ( l )					  
							      								    								  
							      								    147 78 LOAD_FAST 1 ( l )					  
							      								    80 LOAD_CONST 11 ( 1 )					  
							      								    82 INPLACE_ADD						  
							      								    84 STORE_FAST 1 ( l )					  
							      								    								  
							      								    148 86 LOAD_FAST 1 ( l )					  
							      								    88 LOAD_CONST 12 ( 1 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 1 ( l )					  
							      								    								  
							      								    149 94 LOAD_FAST 1 ( l )					  
							      								    96 LOAD_CONST 13 ( 1 )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 1 ( l )					  
							      								    								  
							      								    150 102 LOAD_FAST 1 ( l )					  
							      								    104 LOAD_CONST 14 ( 1 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( l )					  
							      								    110 STORE_FAST 1 ( l )					  
							      								    								  
							      								    151 112 LOAD_FAST 1 ( l )					  
							      								    114 LOAD_FAST 1 ( l )					  
							      								    116 LOAD_CONST 15 ( 1 )					  
							      								    118 INPLACE_ADD						  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 1 ( l )					  
							      								    								  
							      								    152 124 LOAD_FAST 1 ( l )					  
							      								    126 LOAD_FAST 1 ( l )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( l )					  
							      								    								  
							      								    153 132 LOAD_FAST 1 ( l )					  
							      								    134 LOAD_CONST 15 ( 1 )					  
							      								    136 INPLACE_ADD						  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( l )					  
							      								    								  
							      								    154 154 LOAD_FAST 1 ( l )					  
							      								    156 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
def maxArea ( a , b , c , d ) :				      Disassembly of <code object maxArea at 0x7fbac0e89d20, file " Disassembly of <code object maxArea at 0x7f816a673a50, file " script_not_found : None
    semiperimeter = ( a + b + c + d ) / 2		      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_GLOBAL 0 ( semiperimeter )			  
    return math.sqrt ( ( semiperimeter - a ) * ( semiperimete 2 LOAD_FAST 1 ( b )					    2 LOAD_FAST 0 ( a )						  
							      4 BINARY_ADD						    4 LOAD_FAST 1 ( b )						  
							      6 LOAD_FAST 2 ( c )					    6 BINARY_MULTIPLY						  
							      8 BINARY_ADD						    8 CALL_FUNCTION 1						  
							      10 LOAD_FAST 3 ( d )					    10 RETURN_VALUE						  
							      12 BINARY_ADD						    NEW_LINE							  
							      14 LOAD_CONST 1 ( 2 )					    								  
							      16 BINARY_TRUE_DIVIDE					    								  
							      18 STORE_FAST 4 ( semiperimeter )				    								  
							      								    								  
							      3 20 LOAD_GLOBAL 0 ( math )				    								  
							      22 LOAD_METHOD 1 ( sqrt )					    								  
							      24 LOAD_FAST 4 ( semiperimeter )				    								  
							      26 LOAD_FAST 0 ( a )					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 LOAD_FAST 4 ( semiperimeter )				    								  
							      32 LOAD_FAST 1 ( b )					    								  
							      34 BINARY_SUBTRACT					    								  
							      36 BINARY_MULTIPLY					    								  
							      38 LOAD_FAST 4 ( semiperimeter )				    								  
							      40 LOAD_FAST 2 ( c )					    								  
							      42 BINARY_SUBTRACT					    								  
							      44 BINARY_MULTIPLY					    								  
							      46 LOAD_FAST 4 ( semiperimeter )				    								  
							      48 LOAD_FAST 3 ( d )					    								  
							      50 BINARY_SUBTRACT					    								  
							      52 BINARY_MULTIPLY					    								  
							      54 CALL_METHOD 1						    								  
							      56 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
def findTrailingZeros ( n ) :				      Disassembly of <code object findTrailingZeros at 0x7fbac0e89d Disassembly of <code object findTrailingZeros at 0x7f816a673a error : /bin/bash: line 1: 24818 Segmentation faul
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    i = 5						      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( i )					  ataset/bin/python XLM/dis_script.py --script_path
    while ( n / i >= 1 ) :				      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	count += int ( n / i )				      3 4 LOAD_CONST 2 ( 5 )					    27 4 LOAD_CONST 2 ( 1 )					  eval_scripts/python_sa-dis_sa.test/COUNT_TRAILING_
	i *= 5						      6 STORE_FAST 2 ( i )					    6 STORE_FAST 2 ( i )					  ZEROES_FACTORIAL_NUMBER.dis
    return int ( count )				      								    								  
							      4 8 SETUP_LOOP 40 ( to 50 )				    28 8 LOAD_FAST 0 ( n )					  
							      >> 10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 3 ( 1 )					  
							      12 LOAD_FAST 2 ( i )					    12 INPLACE_ADD						  
							      14 BINARY_TRUE_DIVIDE					    14 STORE_FAST 1 ( i )					  
							      16 LOAD_CONST 3 ( 1 )					    								  
							      18 COMPARE_OP 5 ( >= )					    29 16 LOAD_FAST 1 ( i )					  
							      20 POP_JUMP_IF_FALSE 48					    18 LOAD_CONST 4 ( 2 )					  
							      								    20 INPLACE_ADD						  
							      5 22 LOAD_FAST 1 ( count )				    22 STORE_FAST 1 ( i )					  
							      24 LOAD_GLOBAL 0 ( int )					    								  
							      26 LOAD_FAST 0 ( n )					    30 24 LOAD_FAST 1 ( i )					  
							      28 LOAD_FAST 2 ( i )					    26 LOAD_CONST 5 ( 3 )					  
							      30 BINARY_TRUE_DIVIDE					    28 INPLACE_ADD						  
							      32 CALL_FUNCTION 1					    30 STORE_FAST 1 ( i )					  
							      34 INPLACE_ADD						    								  
							      36 STORE_FAST 1 ( count )					    31 32 LOAD_FAST 1 ( i )					  
							      								    34 LOAD_CONST 6 ( 4 )					  
							      6 38 LOAD_FAST 2 ( i )					    36 INPLACE_ADD						  
							      40 LOAD_CONST 2 ( 5 )					    38 STORE_FAST 1 ( i )					  
							      42 INPLACE_MULTIPLY					    								  
							      44 STORE_FAST 2 ( i )					    32 40 LOAD_FAST 1 ( i )					  
							      46 JUMP_ABSOLUTE 10					    42 LOAD_CONST 7 ( 4 )					  
							      >> 48 POP_BLOCK						    44 INPLACE_ADD						  
							      								    46 STORE_FAST 1 ( i )					  
							      7 >> 50 LOAD_GLOBAL 0 ( int )				    								  
							      52 LOAD_FAST 1 ( count )					    33 48 LOAD_FAST 1 ( i )					  
							      54 CALL_FUNCTION 1					    50 LOAD_CONST 8 ( 2 )					  
							      56 RETURN_VALUE NEW_LINE					    52 INPLACE_ADD						  
							      								    54 STORE_FAST 1 ( i )					  
							      								    								  
							      								    34 56 LOAD_FAST 1 ( i )					  
							      								    58 LOAD_CONST 9 ( 4 )					  
							      								    60 INPLACE_ADD						  
							      								    62 STORE_FAST 1 ( i )					  
							      								    								  
							      								    35 64 LOAD_FAST 1 ( i )					  
							      								    66 LOAD_CONST 10 ( 3 )					  
							      								    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( i )					  
							      								    								  
							      								    36 72 LOAD_FAST 1 ( i )					  
							      								    74 LOAD_CONST 11 ( 4 )					  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 1 ( i )					  
							      								    80 STORE_FAST 2 ( i )					  
							      								    								  
							      								    37 82 LOAD_FAST 1 ( i )					  
							      								    84 LOAD_CONST 12 ( 4 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( i )					  
							      								    								  
							      								    38 90 LOAD_FAST 1 ( i )					  
							      								    92 LOAD_CONST 13 ( 4 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 1 ( i )					  
							      								    								  
							      								    39 98 LOAD_FAST 1 ( i )					  
							      								    100 LOAD_CONST 6 ( 4 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( i )					  
							      								    								  
							      								    40 106 LOAD_FAST 1 ( i )					  
							      								    108 LOAD_CONST 6 ( 4 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( i )					  
							      								    114 STORE_FAST 2 ( i )					  
							      								    								  
							      								    41 116 LOAD_FAST 1 ( i )					  
							      								    118 LOAD_CONST 6 ( 4 )					  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 1 ( i )					  
							      								    								  
							      								    42 124 LOAD_FAST 1 ( i )					  
							      								    126 LOAD_CONST 6 ( 4 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( i )					  
							      								    								  
							      								    43 132 LOAD_FAST 1 ( i )					  
							      								    134 LOAD_CONST 7 ( 4 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( i )					  
							      								    								  
							      								    44 140 LOAD_FAST 1 ( i )					  
							      								    142 LOAD_CONST 6 ( 4 )					  
							      								    144 INPLACE_ADD						  
							      								    146 STORE_FAST 1 ( i )					  
							      								    								  
							      								    45 148 LOAD_FAST 1 ( i ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS
--							      --							    --								  --
def squareRootExists ( n , p ) :			      Disassembly of <code object squareRootExists at 0x7fbac<<unk> Disassembly of <code object squareRootExists at 0x7f816a673a5 error : Traceback (most recent call last):   File
    n = n % p						      2 0 LOAD_FAST 0 ( n )					    106 0 LOAD_FAST 1 ( p )					  "XLM/dis_script.py", line 59, in <module>	for
    for x in range ( 2 , p , 1 ) :			      2 LOAD_FAST 1 ( p )					    2 LOAD_CONST 1 ( 2 )					  item in run_dis_script():   File "XLM/dis_script.p
	if ( ( x * x ) % p == n ) :			      4 BINARY_MODULO						    4 BINARY_MULTIPLY						  y", line 54, in run_dis_script     hyp_co = mco.to
	    return True					      6 STORE_FAST 0 ( n )					    6 STORE_FAST 2 ( d )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    return False					      								    								  assembler.py", line 81, in to_co     co_consts.app
							      3 8 SETUP_LOOP 40 ( to 50 )				    107 8 LOAD_FAST 0 ( n )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_CONST 2 ( 1 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 LOAD_CONST 1 ( 2 )					    12 BINARY_MULTIPLY						  co	 self.co_cellvars, TypeError: name tuples mu
							      14 LOAD_FAST 1 ( p )					    14 STORE_FAST 3 ( d )					  st contain only strings, not 'NoneType'
							      16 LOAD_CONST 2 ( 1 )					    								  
							      18 CALL_FUNCTION 3					    108 16 LOAD_FAST 0 ( n )					  
							      20 GET_ITER						    18 LOAD_CONST 3 ( 1 )					  
							      >> 22 FOR_ITER 24 ( to 48 )				    20 BINARY_MULTIPLY						  
							      24 STORE_FAST 2 ( x )					    22 LOAD_FAST 2 ( d )					  
							      								    24 LOAD_CONST 4 ( 2 )					  
							      4 26 LOAD_FAST 2 ( x )					    26 BINARY_MULTIPLY						  
							      28 LOAD_FAST 2 ( x )					    28 BINARY_MULTIPLY						  
							      30 BINARY_MULTIPLY					    30 LOAD_FAST 3 ( d )					  
							      32 LOAD_FAST 1 ( p )					    32 LOAD_CONST 5 ( 3 )					  
							      34 BINARY_MODULO						    34 BINARY_MULTIPLY						  
							      36 LOAD_FAST 0 ( n )					    36 BINARY_ADD						  
							      38 COMPARE_OP 2 ( == )					    38 LOAD_FAST 2 ( d )					  
							      40 POP_JUMP_IF_FALSE 22					    40 LOAD_CONST 6 ( 4 )					  
							      								    42 BINARY_MULTIPLY						  
							      5 42 LOAD_CONST 3 ( True )				    44 BINARY_ADD						  
							      44 RETURN_VALUE						    46 BINARY_MULTIPLY						  
							      46 JUMP_ABSOLUTE 22					    48 LOAD_FAST 3 ( d )					  
							      >> 48 POP_BLOCK						    50 LOAD_CONST 7 ( 3 )					  
							      								    52 BINARY_MULTIPLY						  
							      6 >> 50 LOAD_CONST 4 ( False )				    54 BINARY_ADD						  
							      52 RETURN_VALUE NEW_LINE					    56 LOAD_FAST 2 ( d )					  
							      								    58 LOAD_CONST 8 ( 4 )					  
							      								    60 BINARY_MULTIPLY						  
							      								    62 BINARY_ADD						  
							      								    64 BINARY_MULTIPLY						  
							      								    66 LOAD_FAST 3 ( d )					  
							      								    68 LOAD_CONST 9 ( 4 )					  
							      								    70 BINARY_MULTIPLY						  
							      								    72 BINARY_ADD						  
							      								    74 BINARY_MULTIPLY						  
							      								    76 BINARY_ADD						  
							      								    78 LOAD_FAST 2 ( d )					  
							      								    80 LOAD_CONST 10 ( 4 )					  
							      								    82 BINARY_MULTIPLY						  
							      								    84 BINARY_ADD						  
							      								    86 BINARY_MULTIPLY						  
							      								    88 BINARY_ADD						  
							      								    90 LOAD_FAST 3 ( d )					  
							      								    92 LOAD_CONST 11 ( 4 )					  
							      								    94 BINARY_MULTIPLY						  
							      								    96 BINARY_ADD						  
							      								    98 LOAD_FAST 3 ( d )					  
							      								    100 LOAD_CONST 12 ( 2 )					  
							      								    102 BINARY_MULTIPLY						  
							      								    104 BINARY_ADD						  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_FAST 3 ( d )					  
							      								    110 LOAD_CONST 13 ( 3 )					  
							      								    112 BINARY_MULTIPLY						  
							      								    114 BINARY_ADD						  
							      								    116 BINARY_MULTIPLY						  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_FAST 3 ( d )					  
							      								    122 LOAD_CONST 14 ( 4 )					  
							      								    124 BINARY_MULTIPLY						  
							      								    126 BINARY_ADD						  
							      								    128 BINARY_MULTIPLY						  
							      								    130 LOAD_FAST 3 ( d )					  
							      								    132 LOAD_CONST 15 ( 3 )					  
							      								    134 BINARY_MULTIPLY						  
							      								    136 BINARY_ADD						  
							      								    138 LOAD_FAST 3 ( d )					  
							      								    140 LOAD_CONST 16 ( 4 )					  
							      								    142 BINARY_MULTIPLY						  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_MULTIPLY						  
							      								    148 BINARY_ADD						  
							      								    150 LOAD_FAST 3 ( d )					  
							      								    152 LOAD_CONST 17 ( 4 )					  
							      								    154 BINARY_MULTIPLY						  
							      								    156 BINARY_ADD						  
							      								    158 BINARY_MULTIPLY						  
							      								    160 BINARY_ADD						  
							      								    162 LOAD_FAST 3 ( d )					  
							      								    164 LOAD_CONST 18 ( 4 )					  
							      								    162 BINARY_MULTIPLY						  
							      								    164 BINARY_ADD						  
							      								    166 BINARY_MULTIPLY						  
							      								    168 BINARY_ADD						  
							      								    								  
							      								    109 170 LOAD_FAST 3 ( d )					  
							      								    172 LOAD_CONST 19 ( 4 )					  
							      								    174 BINARY_MULTIPLY						  
							      								    176 BINARY_ADD						  
							      								    								  
							      								    110 110 LOAD_FAST 3 ( d )					  
							      								    112 LOAD_CONST 20 ( 4 )					  
							      								    114 BINARY_MULTIPLY						  
							      								    116 BINARY_ADD						  
							      								    118 LOAD_FAST 3 ( d )					  
							      								    120 LOAD_CONST 21 ( 4 )					  
							      								    122 BINARY_MULTIPLY						  
							      								    124 BINARY_ADD						  
							      								    126 LOAD_FAST 3 ( d )					  
							      								    128 BINARY_MULTIPLY						  
							      								    130 BINARY_ADD						  
							      								    132 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
def printFactorialNums ( n ) :				      Disassembly of <code object printFactorialNums at 0x7fbac0e89 Disassembly of <code object printFactorialNums at 0x7f816a6e4 script_not_found : None
    fact = 1						      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_GLOBAL 0 ( fact )					  
    x = 2						      2 STORE_FAST 1 ( fact )					    2 LOAD_FAST 0 ( n )						  
    while fact <= n :					      								    4 CALL_FUNCTION 1						  
	print ( fact , end = " " )			      3 4 LOAD_CONST 2 ( 2 )					    6 STORE_FAST 1 ( end )					  
	fact = fact * x					      6 STORE_FAST 2 ( x )					    								  
	x += 1						      								    27 8 LOAD_GLOBAL 1 ( fact )					  
							      4 8 SETUP_LOOP 40 ( to 50 )				    10 LOAD_FAST 1 ( end )					  
							      >> 10 LOAD_FAST 1 ( fact )				    12 CALL_FUNCTION 1						  
							      12 LOAD_FAST 0 ( n )					    14 STORE_FAST 2 ( fact )					  
							      14 COMPARE_OP 1 ( <= )					    								  
							      16 POP_JUMP_IF_FALSE 48					    28 16 LOAD_GLOBAL 2 ( fact )				  
							      								    18 LOAD_FAST 2 ( fact )					  
							      5 18 LOAD_GLOBAL 0 ( print )				    20 CALL_FUNCTION 1						  
							      20 LOAD_FAST 1 ( fact )					    22 STORE_FAST 3 ( fact )					  
							      22 LOAD_CONST 3 ( ' ' )					    								  
							      24 LOAD_CONST 4 ( ( 'end' , ) )				    29 24 LOAD_GLOBAL 3 ( fact )				  
							      26 CALL_FUNCTION_KW 2					    26 LOAD_FAST 3 ( fact )					  
							      28 POP_TOP						    28 CALL_FUNCTION 1						  
							      								    30 STORE_FAST 4 ( fact )					  
							      6 30 LOAD_FAST 1 ( fact )					    								  
							      32 LOAD_FAST 2 ( x )					    30 32 LOAD_FAST 4 ( fact )					  
							      34 BINARY_MULTIPLY					    34 LOAD_FAST 2 ( fact )					  
							      36 STORE_FAST 1 ( fact )					    36 LOAD_FAST 4 ( fact )					  
							      								    38 LOAD_FAST 5 ( fact )					  
							      7 38 LOAD_FAST 2 ( x )					    40 LOAD_FAST 6 ( fact )					  
							      40 LOAD_CONST 1 ( 1 )					    42 LOAD_FAST 7 ( fact )					  
							      42 INPLACE_ADD						    44 LOAD_FAST 8 ( fact )					  
							      44 STORE_FAST 2 ( x )					    46 LOAD_FAST 9 ( fact )					  
							      46 JUMP_ABSOLUTE 10					    48 LOAD_FAST 10 ( fact )					  
							      >> 48 POP_BLOCK						    50 LOAD_FAST 11 ( fact )					  
							      >> 50 LOAD_CONST 0 ( None )				    52 LOAD_FAST 12 ( fact )					  
							      52 RETURN_VALUE NEW_LINE					    54 LOAD_FAST 13 ( fact )					  
							      								    56 LOAD_FAST 14 ( fact )					  
							      								    58 LOAD_FAST 15 ( fact )					  
							      								    60 LOAD_FAST 16 ( fact )					  
							      								    62 BUILD_TUPLE 13						  
							      								    64 LOAD_FAST 15 ( fact )					  
							      								    66 LOAD_FAST 16 ( fact )					  
							      								    68 BUILD_TUPLE 13						  
							      								    70 BUILD_TUPLE 13						  
							      								    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH      COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	    COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	  COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH
--							      --							    --								  --
def compute ( graph , N ) :				      Disassembly of <code object compute at 0x7fbac<<unk>> de40, f Disassembly of <code object compute at 0x7f816a6e4b70, file " script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( N )					  
    for i in range ( 1 , N + 1 ) :			      2 STORE_FAST 2 ( count )					    2 LOAD_CONST 1 ( N )					  
	if ( len ( graph [ i ] ) == 0 ) :		      								    4 COMPARE_OP 2 ( == )					  
	    count += 1					      3 4 SETUP_LOOP 46 ( to 52 )				    6 POP_JUMP_IF_FALSE 12					  
    return count					      6 LOAD_GLOBAL 0 ( range )					    								  
							      8 LOAD_CONST 2 ( 1 )					    27 8 LOAD_GLOBAL 0 ( print )				  
							      10 LOAD_FAST 1 ( N )					    10 LOAD_CONST 2 ( 'compute compute compute compute compute co 
							      12 LOAD_CONST 2 ( 1 )					    								  
							      14 BINARY_ADD						    								  
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 28 ( to 50 )				    								  
							      22 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 24 LOAD_GLOBAL 1 ( len )				    								  
							      26 LOAD_FAST 0 ( graph )					    								  
							      28 LOAD_FAST 3 ( i )					    								  
							      30 BINARY_SUBSCR						    								  
							      32 CALL_FUNCTION 1					    								  
							      34 LOAD_CONST 1 ( 0 )					    								  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      5 40 LOAD_FAST 2 ( count )				    								  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 INPLACE_ADD						    								  
							      46 STORE_FAST 2 ( count )					    								  
							      48 JUMP_ABSOLUTE 20					    								  
							      >> 50 POP_BLOCK						    								  
							      								    								  
							      6 >> 52 LOAD_FAST 2 ( count )				    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		      PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		    PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		  PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX
--							      --							    --								  --
def scalarProductMat ( mat , k ) :			      Disassembly of <code object scalarProductMat at 0x7fbac<<unk> Disassembly of <code object scalarProductMat at 0x7f816a60166 script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 58 ( to 60 )				    139 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( N ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 1 ( k )						  
	    mat [ i ] [ j ] = mat [ i ] [ j ] * k	      4 LOAD_GLOBAL 1 ( N )					    4 GET_ITER							  
							      6 CALL_FUNCTION 1						    >> 6 FOR_ITER 14 ( to 22 )					  
							      8 GET_ITER						    8 STORE_FAST 2 ( v )					  
							      >> 10 FOR_ITER 46 ( to 58 )				    								  
							      12 STORE_FAST 2 ( i )					    140 10 LOAD_FAST 0 ( mat )					  
							      								    12 LOAD_METHOD 0 ( append )					  
							      3 14 SETUP_LOOP 40 ( to 56 )				    14 LOAD_FAST 2 ( v )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 CALL_METHOD 1						  
							      18 LOAD_GLOBAL 1 ( N )					    18 POP_TOP							  
							      20 CALL_FUNCTION 1					    20 JUMP_ABSOLUTE 6						  
							      22 GET_ITER						    >> 22 POP_BLOCK						  
							      >> 24 FOR_ITER 28 ( to 54 )				    >> 24 LOAD_CONST 0 ( None )					  
							      26 STORE_FAST 3 ( j )					    26 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 28 LOAD_FAST 0 ( mat )					    								  
							      30 LOAD_FAST 2 ( i )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_FAST 3 ( j )					    								  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 1 ( k )					    								  
							      40 BINARY_MULTIPLY					    								  
							      42 LOAD_FAST 0 ( mat )					    								  
							      44 LOAD_FAST 2 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 3 ( j )					    								  
							      50 STORE_SUBSCR						    								  
							      52 JUMP_ABSOLUTE 24					    								  
							      >> 54 POP_BLOCK						    								  
							      >> 56 JUMP_ABSOLUTE 10					    								  
							      >> 58 POP_BLOCK						    								  
							      >> 60 LOAD_CONST 0 ( None )				    								  
							      62 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
def swap ( xp , yp ) :					      Disassembly of <code object swap at 0x7fbac0e8bc90, file "<di Disassembly of <code object swap at 0x7f816a683d20, file "<di error : Traceback (most recent call last):   File
    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      2 0 LOAD_FAST 0 ( xp )					    26 0 LOAD_FAST 0 ( xp )					  "XLM/dis_script.py", line 59, in <module>	for
    yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_FAST 1 ( yp )					    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_CONST 1 ( 0 )					    27 6 LOAD_FAST 0 ( xp )					  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_SUBSCR						    8 LOAD_CONST 2 ( 1 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_XOR						    10 BINARY_SUBSCR						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 LOAD_FAST 0 ( xp )					    12 LOAD_CONST 3 ( 0 )					  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_CONST 1 ( 0 )					    14 BINARY_SUBSCR						  s is too small
							      18 STORE_SUBSCR						    16 LOAD_CONST 4 ( 1 )					  
							      								    18 BINARY_SUBSCR						  
							      3 20 LOAD_FAST 0 ( xp )					    20 LOAD_CONST 5 ( 1 )					  
							      22 LOAD_CONST 1 ( 0 )					    22 BINARY_SUBSCR						  
							      24 BINARY_SUBSCR						    24 LOAD_CONST 6 ( '%s %s' )					  
							      26 LOAD_FAST 1 ( yp )					    26 LOAD_FAST 0 ( xp )					  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 7 ( '%s %s' )					  
							      30 BINARY_SUBSCR						    30 LOAD_FAST 0 ( xp )					  
							      32 BINARY_XOR						    32 BINARY_MODULO						  
							      34 LOAD_FAST 1 ( yp )					    34 BUILD_TUPLE 2						  
							      36 LOAD_CONST 1 ( 0 )					    36 BINARY_MODULO						  
							      38 STORE_SUBSCR						    38 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 40 LOAD_FAST 0 ( xp )					    								  
							      42 LOAD_CONST 1 ( 0 )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_FAST 1 ( yp )					    								  
							      48 LOAD_CONST 1 ( 0 )					    								  
							      50 BINARY_SUBSCR						    								  
							      52 BINARY_XOR						    								  
							      54 LOAD_FAST 0 ( xp )					    								  
							      56 LOAD_CONST 1 ( 0 )					    								  
							      58 STORE_SUBSCR						    								  
							      60 LOAD_CONST 0 ( None )					    								  
							      62 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
def countSubStr ( st , n ) :				      Disassembly of <code object countSubStr at 0x7fbac<<unk>> de4 Disassembly of <code object countSubStr at 0x7f816a673a50, fi script_not_found : None
    m = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( m )					    2 STORE_FAST 1 ( n )					  
	if ( st [ i ] == '1' ) :			      								    								  
	    m = m + 1					      3 4 SETUP_LOOP 38 ( to 44 )				    27 4 SETUP_LOOP 52 ( to 54 )				  
    return m * ( m - 1 ) // 2				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 1 ( n )					    10 CALL_FUNCTION 1						  
							      12 CALL_FUNCTION 2					    12 GET_ITER							  
							      14 GET_ITER						    >> 14 FOR_ITER 52 ( to 52 )					  
							      >> 16 FOR_ITER 24 ( to 42 )				    16 STORE_FAST 2 ( i )					  
							      18 STORE_FAST 3 ( i )					    								  
							      								    28 18 LOAD_FAST 0 ( st )					  
							      4 20 LOAD_FAST 0 ( st )					    20 LOAD_METHOD 1 ( append )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 1 ( n )					  
							      24 BINARY_SUBSCR						    24 CALL_METHOD 1						  
							      26 LOAD_CONST 2 ( '1' )					    26 POP_TOP							  
							      28 COMPARE_OP 2 ( == )					    28 JUMP_ABSOLUTE 14						  
							      30 POP_JUMP_IF_FALSE 16					    >> 30 POP_BLOCK						  
							      								    >> 32 LOAD_CONST 0 ( None )					  
							      5 32 LOAD_FAST 2 ( m )					    34 RETURN_VALUE						  
							      34 LOAD_CONST 3 ( 1 )					    NEW_LINE							  
							      36 BINARY_ADD						    								  
							      38 STORE_FAST 2 ( m )					    								  
							      40 JUMP_ABSOLUTE 16					    								  
							      >> 42 POP_BLOCK						    								  
							      								    								  
							      6 >> 44 LOAD_FAST 2 ( m )					    								  
							      46 LOAD_FAST 2 ( m )					    								  
							      48 LOAD_CONST 3 ( 1 )					    								  
							      50 BINARY_SUBTRACT					    								  
							      52 BINARY_MULTIPLY					    								  
							      54 LOAD_CONST 4 ( 2 )					    								  
							      56 BINARY_FLOOR_DIVIDE					    								  
							      58 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f Disassembly of <code object nextPowerOf2 at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    count = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    if ( n and not ( n & ( n - 1 ) ) ) :		      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  item in run_dis_script():   File "XLM/dis_script.p
	return n					      								    								  y", line 54, in run_dis_script     hyp_co = mco.to
    while ( n != 0 ) :					      3 4 LOAD_FAST 0 ( n )					    21 4 LOAD_FAST 1 ( count )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	n >>= 1						      6 POP_JUMP_IF_FALSE 24					    6 LOAD_CONST 2 ( 1 )					  assembler.py", line 81, in to_co     co_consts.app
	count += 1					      8 LOAD_FAST 0 ( n )					    8 INPLACE_ADD						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    return 1 << count ;					      10 LOAD_FAST 0 ( n )					    10 STORE_FAST 1 ( count )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 LOAD_CONST 2 ( 1 )					    								  co	 self.co_cellvars, TypeError: name tuples mu
							      14 BINARY_SUBTRACT					    22 12 LOAD_FAST 1 ( count )					  st contain only strings, not 'NoneType'
							      16 BINARY_AND						    14 LOAD_CONST 3 ( 1 )					  
							      18 POP_JUMP_IF_TRUE 24					    16 INPLACE_ADD						  
							      								    18 STORE_FAST 1 ( count )					  
							      4 20 LOAD_FAST 0 ( n )					    								  
							      22 RETURN_VALUE						    23 20 LOAD_FAST 1 ( count )					  
							      								    22 LOAD_CONST 4 ( 1 )					  
							      5 >> 24 SETUP_LOOP 28 ( to 54 )				    24 INPLACE_ADD						  
							      >> 26 LOAD_FAST 0 ( n )					    26 STORE_FAST 1 ( count )					  
							      28 LOAD_CONST 1 ( 0 )					    								  
							      30 COMPARE_OP 3 ( != )					    24 28 LOAD_FAST 1 ( count )					  
							      32 POP_JUMP_IF_FALSE 52					    30 LOAD_CONST 5 ( 1 )					  
							      								    32 INPLACE_ADD						  
							      6 34 LOAD_FAST 0 ( n )					    34 STORE_FAST 1 ( count )					  
							      36 LOAD_CONST 2 ( 1 )					    								  
							      38 INPLACE_RSHIFT						    25 36 LOAD_FAST 1 ( count )					  
							      40 STORE_FAST 0 ( n )					    38 LOAD_CONST 6 ( 2 )					  
							      								    40 INPLACE_ADD						  
							      7 42 LOAD_FAST 1 ( count )				    42 STORE_FAST 1 ( count )					  
							      44 LOAD_CONST 2 ( 1 )					    								  
							      46 INPLACE_ADD						    26 44 LOAD_FAST 1 ( count )					  
							      48 STORE_FAST 1 ( count )					    46 LOAD_CONST 7 ( 1 )					  
							      50 JUMP_ABSOLUTE 26					    48 INPLACE_ADD						  
							      >> 52 POP_BLOCK						    50 STORE_FAST 1 ( count )					  
							      								    								  
							      8 >> 54 LOAD_CONST 2 ( 1 )				    27 52 LOAD_FAST 1 ( count )					  
							      56 LOAD_FAST 1 ( count )					    54 LOAD_CONST 8 ( 2 )					  
							      58 BINARY_LSHIFT						    56 INPLACE_ADD						  
							      60 RETURN_VALUE NEW_LINE					    58 STORE_FAST 1 ( count )					  
							      								    								  
							      								    28 60 LOAD_FAST 1 ( count )					  
							      								    62 LOAD_CONST 9 ( 2 )					  
							      								    64 INPLACE_ADD						  
							      								    66 STORE_FAST 1 ( count )					  
							      								    								  
							      								    29 68 LOAD_FAST 1 ( count )					  
							      								    70 LOAD_CONST 10 ( 2 )					  
							      								    72 INPLACE_ADD						  
							      								    74 STORE_FAST 1 ( count )					  
							      								    								  
							      								    30 76 LOAD_FAST 1 ( count )					  
							      								    78 LOAD_CONST 11 ( 3 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( count )					  
							      								    								  
							      								    31 84 LOAD_FAST 1 ( count )					  
							      								    86 LOAD_CONST 12 ( 2 )					  
							      								    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( count )					  
							      								    92 JUMP_FORWARD 10 ( to 106 )				  
							      								    								  
							      								    33 >> 94 LOAD_FAST 1 ( count )				  
							      								    96 LOAD_CONST 13 ( 3 )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 1 ( count )					  
							      								    								  
							      								    34 102 LOAD_FAST 1 ( count )				  
							      								    104 LOAD_CONST 14 ( 2 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( count )					  
							      								    								  
							      								    35 110 LOAD_FAST 1 ( count )				  
							      								    112 LOAD_CONST 15 ( 2 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( count )					  
							      								    								  
							      								    36 118 LOAD_FAST 1 ( count )				  
							      								    120 LOAD_CONST 16 ( 2 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( count )					  
							      								    								  
							      								    37 126 LOAD_FAST 1 ( count )				  
							      								    128 LOAD_CONST 16 ( 2 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( count )					  
							      								    								  
							      								    38 134 LOAD_FAST 1 ( count )				  
							      								    136 LOAD_CONST 17 ( 3 )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( count )					  
							      								    								  
							      								    39 142 LOAD_FAST 1 ( count )				  
							      								    144 LOAD_CONST 18 ( 2 )					  
							      								    146 INPLACE_ADD						  
							      								    148 STORE_FAST 1 ( count )					  
							      								    								  
							      								    40 >> 150 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE		  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
--							      --							    --								  --
def arraySortedOrNot ( arr ) :				      Disassembly of <code object arraySortedOrNot at 0x7fbac<<unk> Disassembly of <code object SortedarrayOrNot at 0x7f816a6e4b7 script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( arr )					  
    if n == 1 or n == 0 :				      2 LOAD_FAST 0 ( arr )					    2 LOAD_CONST 1 ( 0 )					  
	return True					      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    return arr [ 0 ] <= arr [ 1 ] and arraySortedOrNot ( arr  6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( arr )					  
							      								    								  
							      3 8 LOAD_FAST 1 ( n )					    27 8 LOAD_FAST 1 ( arr )					  
							      10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    12 BINARY_SUBSCR						  
							      14 POP_JUMP_IF_TRUE 24					    14 STORE_FAST 2 ( array_list )				  
							      16 LOAD_FAST 1 ( n )					    								  
							      18 LOAD_CONST 2 ( 0 )					    28 16 LOAD_FAST 1 ( arr )					  
							      20 COMPARE_OP 2 ( == )					    18 LOAD_FAST 2 ( array_list )				  
							      22 POP_JUMP_IF_FALSE 28					    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 32					  
							      4 >> 24 LOAD_CONST 3 ( True )				    								  
							      26 RETURN_VALUE						    29 24 LOAD_CONST 3 ( True )					  
							      								    26 RETURN_VALUE						  
							      5 >> 28 LOAD_FAST 0 ( arr )				    								  
							      30 LOAD_CONST 2 ( 0 )					    30 >> 28 LOAD_FAST 1 ( arr )				  
							      32 BINARY_SUBSCR						    30 LOAD_FAST 2 ( array_list )				  
							      34 LOAD_FAST 0 ( arr )					    32 COMPARE_OP 2 ( == )					  
							      36 LOAD_CONST 1 ( 1 )					    34 POP_JUMP_IF_FALSE 40					  
							      38 BINARY_SUBSCR						    								  
							      40 COMPARE_OP 1 ( <= )					    31 36 LOAD_CONST 4 ( True )					  
							      42 JUMP_IF_FALSE_OR_POP 58				    38 RETURN_VALUE						  
							      44 LOAD_GLOBAL 1 ( arraySortedOrNot )			    								  
							      46 LOAD_FAST 0 ( arr )					    32 >> 40 LOAD_CONST 5 ( True )				  
							      48 LOAD_CONST 1 ( 1 )					    42 RETURN_VALUE						  
							      50 LOAD_CONST 0 ( None )					    NEW_LINE							  
							      52 BUILD_SLICE 2						    								  
							      54 BINARY_SUBSCR						    								  
							      56 CALL_FUNCTION 1					    								  
							      >> 58 RETURN_VALUE NEW_LINE				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
def countInRange ( arr , n , x , y ) :			      Disassembly of <code object countInRange at 0x7fbac0e8bc90, f Disassembly of <code object countApproApproApproApproApproApp error : Traceback (most recent call last):   File
    count = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    								  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 STORE_FAST 4 ( count )					    								  item in run_dis_script():   File "XLM/dis_script.p
	if ( arr [ i ] >= x and arr [ i ] <= y ) :	      								    								  y", line 54, in run_dis_script     hyp_co = mco.to
	    count += 1					      3 4 SETUP_LOOP 48 ( to 54 )				    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    return count					      6 LOAD_GLOBAL 0 ( range )					    								  assembler.py", line 81, in to_co     co_consts.app
							      8 LOAD_FAST 1 ( n )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 CALL_FUNCTION 1					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 GET_ITER						    								  co	 self.co_cellvars, ValueError: code: varname
							      >> 14 FOR_ITER 36 ( to 52 )				    								  s is too small
							      16 STORE_FAST 5 ( i )					    								  
							      								    								  
							      4 18 LOAD_FAST 0 ( arr )					    								  
							      20 LOAD_FAST 5 ( i )					    								  
							      22 BINARY_SUBSCR						    								  
							      24 LOAD_FAST 2 ( x )					    								  
							      26 COMPARE_OP 5 ( >= )					    								  
							      28 POP_JUMP_IF_FALSE 14					    								  
							      30 LOAD_FAST 0 ( arr )					    								  
							      32 LOAD_FAST 5 ( i )					    								  
							      34 BINARY_SUBSCR						    								  
							      36 LOAD_FAST 3 ( y )					    								  
							      38 COMPARE_OP 1 ( <= )					    								  
							      40 POP_JUMP_IF_FALSE 14					    								  
							      								    								  
							      5 42 LOAD_FAST 4 ( count )				    								  
							      44 LOAD_CONST 2 ( 1 )					    								  
							      46 INPLACE_ADD						    								  
							      48 STORE_FAST 4 ( count )					    								  
							      50 JUMP_ABSOLUTE 14					    								  
							      >> 52 POP_BLOCK						    								  
							      								    								  
							      6 >> 54 LOAD_FAST 4 ( count )				    								  
							      56 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
def query ( s , i , j ) :				      Disassembly of <code object query at 0x7fbac0e89d20, file "<d Disassembly of <code object query at 0x7f816a6e4b70, file "<d script_not_found : None
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    30 0 LOAD_FAST 0 ( s )					  
    i %= n						      2 LOAD_FAST 0 ( s )					    2 LOAD_METHOD 0 ( lower )					  
    j %= n						      4 CALL_FUNCTION 1						    4 CALL_METHOD 0						  
    print ( "Yes" ) if s [ i ] == s [ j ] else print ( "No" ) 6 STORE_FAST 3 ( n )					    6 STORE_FAST 1 ( i )					  
							      								    								  
							      3 8 LOAD_FAST 1 ( i )					    31 8 LOAD_FAST 1 ( i )					  
							      10 LOAD_FAST 3 ( n )					    10 LOAD_CONST 1 ( 0 )					  
							      12 INPLACE_MODULO						    12 BINARY_SUBSCR						  
							      14 STORE_FAST 1 ( i )					    14 LOAD_CONST 2 ( 'No found' )				  
							      								    16 COMPARE_OP 2 ( == )					  
							      4 16 LOAD_FAST 2 ( j )					    18 POP_JUMP_IF_FALSE 32					  
							      18 LOAD_FAST 3 ( n )					    								  
							      20 INPLACE_MODULO						    32 20 LOAD_FAST 1 ( i )					  
							      22 STORE_FAST 2 ( j )					    22 LOAD_CONST 3 ( 1 )					  
							      								    24 BINARY_SUBSCR						  
							      5 24 LOAD_FAST 0 ( s )					    26 LOAD_CONST 4 ( 'Yes' )					  
							      26 LOAD_FAST 1 ( i )					    28 COMPARE_OP 2 ( == )					  
							      28 BINARY_SUBSCR						    30 POP_JUMP_IF_FALSE 32					  
							      30 LOAD_FAST 0 ( s )					    								  
							      32 LOAD_FAST 2 ( j )					    33 32 LOAD_FAST 1 ( i )					  
							      34 BINARY_SUBSCR						    34 LOAD_CONST 5 ( 1 )					  
							      36 COMPARE_OP 2 ( == )					    36 BINARY_SUBSCR						  
							      38 POP_JUMP_IF_FALSE 48					    38 LOAD_CONST 6 ( 'No found' )				  
							      40 LOAD_GLOBAL 1 ( print )				    40 COMPARE_OP 2 ( == )					  
							      42 LOAD_CONST 1 ( 'Yes' )					    42 POP_JUMP_IF_FALSE 48					  
							      44 CALL_FUNCTION 1					    								  
							      46 JUMP_FORWARD 6 ( to 54 )				    34 44 LOAD_FAST 1 ( i )					  
							      >> 48 LOAD_GLOBAL 1 ( print )				    46 LOAD_CONST 7 ( 1 )					  
							      50 LOAD_CONST 2 ( 'No' )					    48 BINARY_SUBSCR						  
							      52 CALL_FUNCTION 1					    50 LOAD_CONST 8 ( 'No found' )				  
							      >> 54 POP_TOP						    52 COMPARE_OP 2 ( == )					  
							      56 LOAD_CONST 0 ( None )					    54 POP_JUMP_IF_FALSE 48					  
							      58 RETURN_VALUE NEW_LINE					    								  
							      								    35 56 LOAD_FAST 1 ( i )					  
							      								    58 LOAD_CONST 9 ( 1 )					  
							      								    60 BINARY_SUBSCR						  
							      								    62 LOAD_CONST 10 ( 'No found' )				  
							      								    64 COMPARE_OP 2 ( == )					  
							      								    66 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    36 68 LOAD_FAST 1 ( i )					  
							      								    70 LOAD_CONST 3 ( 1 )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_CONST 11 ( 2 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_CONST 12 ( 'No found' )				  
							      								    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    37 84 LOAD_FAST 1 ( i )					  
							      								    86 LOAD_CONST 3 ( 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 12 ( 'No found' )				  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    38 96 LOAD_FAST 1 ( i )					  
							      								    98 LOAD_CONST 3 ( 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 4 ( 'No found' )				  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    39 108 LOAD_FAST 1 ( i )					  
							      								    110 LOAD_CONST 3 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 12 ( 'No found' )				  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    40 >> 120 LOAD_FAST 1 ( i )					  
							      								    122 LOAD_CONST 3 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 STORE_FAST 1 ( i )					  
							      								    								  
							      								    41 >> 128 LOAD_FAST 1 ( i )					  
							      								    130 LOAD_CONST 3 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 12 ( 'No found' )				  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    42 140 LOAD_FAST 1 ( i )					  
							      								    142 LOAD_CONST 3 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
def isPowerOfFour ( n ) :				      Disassembly of <code object isPowerOfFour at 0x7fbac0e89d20,  Disassembly of <code object isPowerOfFour at 0x7f816a673a50,  failure : #Results: 9, 10
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    while ( n != 1 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 4 ( > )					  
	if ( n % 4 != 0 ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	    return False				      								    								  
	n = n // 4					      3 8 LOAD_CONST 2 ( False )				    27 8 LOAD_CONST 2 ( 1 )					  
    return True						      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 SETUP_LOOP 36 ( to 50 )				    28 >> 12 LOAD_CONST 3 ( False )				  
							      >> 14 LOAD_FAST 0 ( n )					    14 RETURN_VALUE						  
							      16 LOAD_CONST 3 ( 1 )					    NEW_LINE							  
							      18 COMPARE_OP 3 ( != )					    								  
							      20 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      5 22 LOAD_FAST 0 ( n )					    								  
							      24 LOAD_CONST 4 ( 4 )					    								  
							      26 BINARY_MODULO						    								  
							      28 LOAD_CONST 1 ( 0 )					    								  
							      30 COMPARE_OP 3 ( != )					    								  
							      32 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      6 34 LOAD_CONST 2 ( False )				    								  
							      36 RETURN_VALUE						    								  
							      								    								  
							      7 >> 38 LOAD_FAST 0 ( n )					    								  
							      40 LOAD_CONST 4 ( 4 )					    								  
							      42 BINARY_FLOOR_DIVIDE					    								  
							      44 STORE_FAST 0 ( n )					    								  
							      46 JUMP_ABSOLUTE 14					    								  
							      >> 48 POP_BLOCK						    								  
							      								    								  
							      8 >> 50 LOAD_CONST 5 ( True )				    								  
							      52 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_SECTOR					      AREA_OF_A_SECTOR						    AREA_OF_A_SECTOR						  AREA_OF_A_SECTOR
--							      --							    --								  --
def SectorArea ( radius , angle ) :			      Disassembly of <code object SectorArea at 0x7fbac0e8bc90, fil Disassembly of <code object SectorArea at 0x7f816a673a50, fil script_not_found : None
    pi = 22 / 7						      2 0 LOAD_CONST 1 ( 3.142857142857143 )			    26 0 LOAD_CONST 1 ( 'Angle' )				  
    if angle >= 360 :					      2 STORE_FAST 2 ( pi )					    2 LOAD_FAST 0 ( radius )					  
	print ( "Angle not possible" )			      								    4 BINARY_MULTIPLY						  
	return						      3 4 LOAD_FAST 1 ( angle )					    6 LOAD_FAST 0 ( radius )					  
    else :						      6 LOAD_CONST 2 ( 360 )					    8 BINARY_MULTIPLY						  
	sector = ( pi * radius ** 2 ) * ( angle / 360 )	      8 COMPARE_OP 5 ( >= )					    10 LOAD_FAST 0 ( radius )					  
	print ( sector )				      10 POP_JUMP_IF_FALSE 24					    12 BINARY_MULTIPLY						  
	return						      								    14 LOAD_FAST 0 ( radius )					  
							      4 12 LOAD_GLOBAL 0 ( print )				    16 BINARY_MULTIPLY						  
							      14 LOAD_CONST 3 ( 'Angle not possible' )			    18 LOAD_FAST 0 ( radius )					  
							      16 CALL_FUNCTION 1					    20 BINARY_MULTIPLY						  
							      18 POP_TOP						    22 LOAD_FAST 0 ( radius )					  
							      								    24 BINARY_MULTIPLY						  
							      5 20 LOAD_CONST 0 ( None )				    26 LOAD_FAST 0 ( radius )					  
							      22 RETURN_VALUE						    28 BINARY_MULTIPLY						  
							      								    30 LOAD_FAST 0 ( radius )					  
							      7 >> 24 LOAD_FAST 2 ( pi )				    32 BINARY_MULTIPLY						  
							      26 LOAD_FAST 0 ( radius )					    34 LOAD_FAST 0 ( radius )					  
							      28 LOAD_CONST 4 ( 2 )					    36 BINARY_MULTIPLY						  
							      30 BINARY_POWER						    38 LOAD_FAST 0 ( radius )					  
							      32 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      34 LOAD_FAST 1 ( angle )					    42 LOAD_FAST 0 ( radius )					  
							      36 LOAD_CONST 2 ( 360 )					    44 BINARY_MULTIPLY						  
							      38 BINARY_TRUE_DIVIDE					    46 LOAD_FAST 0 ( radius )					  
							      40 BINARY_MULTIPLY					    48 BINARY_MULTIPLY						  
							      42 STORE_FAST 3 ( sector )				    50 LOAD_FAST 0 ( radius )					  
							      								    52 BINARY_MULTIPLY						  
							      8 44 LOAD_GLOBAL 0 ( print )				    54 LOAD_FAST 0 ( radius )					  
							      46 LOAD_FAST 3 ( sector )					    56 BINARY_MULTIPLY						  
							      48 CALL_FUNCTION 1					    58 LOAD_FAST 0 ( radius )					  
							      50 POP_TOP						    60 BINARY_MULTIPLY						  
							      								    62 LOAD_FAST 0 ( radius )					  
							      9 52 LOAD_CONST 0 ( None )				    64 BINARY_MULTIPLY						  
							      54 RETURN_VALUE						    66 LOAD_FAST 0 ( radius )					  
							      56 LOAD_CONST 0 ( None )					    68 BINARY_MULTIPLY						  
							      58 RETURN_VALUE NEW_LINE					    70 LOAD_FAST 0 ( radius )					  
							      								    72 BINARY_MULTIPLY						  
							      								    74 LOAD_FAST 0 ( radius )					  
							      								    76 BINARY_MULTIPLY						  
							      								    78 BINARY_MULTIPLY						  
							      								    80 LOAD_FAST 0 ( radius )					  
							      								    82 BINARY_MULTIPLY						  
							      								    84 LOAD_FAST 0 ( radius )					  
							      								    86 BINARY_MULTIPLY						  
							      								    88 LOAD_FAST 0 ( radius )					  
							      								    90 BINARY_MULTIPLY						  
							      								    92 LOAD_FAST 0 ( radius )					  
							      								    94 BINARY_MULTIPLY						  
							      								    96 LOAD_FAST 0 ( radius )					  
							      								    98 BINARY_MULTIPLY						  
							      								    100 LOAD_FAST 0 ( radius )					  
							      								    102 BINARY_MULTIPLY						  
							      								    104 LOAD_FAST 0 ( radius )					  
							      								    106 BINARY_MULTIPLY						  
							      								    108 BINARY_MULTIPLY						  
							      								    110 LOAD_FAST 0 ( radius )					  
							      								    112 BINARY_MULTIPLY						  
							      								    114 LOAD_FAST 0 ( radius )					  
							      								    116 BINARY_MULTIPLY						  
							      								    118 LOAD_FAST 0 ( radius )					  
							      								    120 BINARY_MULTIPLY						  
							      								    122 LOAD_FAST 0 ( radius )					  
							      								    124 BINARY_MULTIPLY						  
							      								    126 LOAD_FAST 0 ( radius )					  
							      								    128 BINARY_MULTIPLY						  
							      								    130 LOAD_FAST 0 ( radius )					  
							      								    132 BINARY_MULTIPLY						  
							      								    134 LOAD_FAST 0 ( radius )					  
							      								    136 BINARY_MULTIPLY						  
							      								    138 LOAD_FAST 0 ( radius )					  
							      								    140 BINARY_MULTIPLY						  
							      								    142 LOAD_FAST 0 ( radius )					  
							      								    144 BINARY_MULTIPLY						  
							      								    146 LOAD_FAST 0 ( radius )					  
							      								    148 BINARY_MULTIPLY						  
							      								    150 LOAD_FAST 0 ( radius )					  
							      								    152 LOAD_FAST 0 ( radius )					  
							      								    154 BINARY_MULTIPLY						  
							      								    156 LOAD_FAST 0 ( radius )					  
							      								    158 BINARY_MULTIPLY						  
							      								    160 BINARY_MULTIPLY						  
							      								    162 LOAD_FAST 0 ( radius )					  
							      								    164 BINARY_MULTIPLY						  
							      								    166 LOAD_FAST 0 ( radius )					  
							      								    168 BINARY_MULTIPLY						  
							      								    170 BINARY_MULTIPLY						  
							      								    								  
							      								    27 172 LOAD_FAST 0 ( radius )				  
							      								    174 LOAD_FAST 0 ( radius )					  
							      								    176 BINARY_MULTIPLY						  
							      								    174 LOAD_FAST 0 ( radius )					  
							      								    176 BINARY_MULTIPLY						  
							      								    								  
							      								    28 172 LOAD_FAST 0 ( radius )				  
							      								    174 LOAD_FAST 0 ( radius )					  
							      								    176 BINARY_MULTIPLY						  
							      								    178 LOAD_FAST 0 ( radius )					  
							      								    180 BINARY_MULTIPLY						  
							      								    								  
							      								    29 176 LOAD_FAST 0 ( radius )				  
							      								    178								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY
--							      --							    --								  --
def countRotations ( arr , n ) :			      Disassembly of <code object countRotations at 0x7fbac0e89d20, Disassembly of <code object countRotations at 0x7f816a673a50, script_not_found : None
    min = arr [ 0 ]					      2 0 LOAD_FAST 0 ( arr )					    20 0 LOAD_FAST 1 ( n )					  
    for i in range ( 0 , n ) :				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
	if ( min > arr [ i ] ) :			      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
	    min = arr [ i ]				      6 STORE_FAST 2 ( min )					    6 STORE_FAST 2 ( i )					  
	    min_index = i				      								    								  
    return min_index ;					      3 8 SETUP_LOOP 42 ( to 52 )				    21 8 LOAD_FAST 0 ( arr )					  
							      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_METHOD 0 ( append )					  
							      12 LOAD_CONST 1 ( 0 )					    12 LOAD_FAST 2 ( i )					  
							      14 LOAD_FAST 1 ( n )					    14 CALL_METHOD 1						  
							      16 CALL_FUNCTION 2					    16 POP_TOP							  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 28 ( to 50 )				    22 18 LOAD_FAST 0 ( arr )					  
							      22 STORE_FAST 3 ( i )					    20 LOAD_METHOD 0 ( append )					  
							      								    22 LOAD_FAST 1 ( n )					  
							      4 24 LOAD_FAST 2 ( min )					    24 CALL_METHOD 1						  
							      26 LOAD_FAST 0 ( arr )					    26 POP_TOP							  
							      28 LOAD_FAST 3 ( i )					    								  
							      30 BINARY_SUBSCR						    23 28 LOAD_FAST 0 ( arr )					  
							      32 COMPARE_OP 4 ( > )					    30 LOAD_METHOD 0 ( append )					  
							      34 POP_JUMP_IF_FALSE 20					    32 LOAD_FAST 2 ( i )					  
							      								    34 CALL_METHOD 1						  
							      5 36 LOAD_FAST 0 ( arr )					    36 POP_TOP							  
							      38 LOAD_FAST 3 ( i )					    38 LOAD_CONST 0 ( None )					  
							      40 BINARY_SUBSCR						    40 RETURN_VALUE						  
							      42 STORE_FAST 2 ( min )					    NEW_LINE							  
							      								    								  
							      6 44 LOAD_FAST 3 ( i )					    								  
							      46 STORE_FAST 4 ( min_index )				    								  
							      48 JUMP_ABSOLUTE 20					    								  
							      >> 50 POP_BLOCK						    								  
							      								    								  
							      7 >> 52 LOAD_FAST 4 ( min_index )				    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
def check ( st ) :					      Disassembly of <code object check at 0x7fbac0e8bc90, file "<d Disassembly of <code object check at 0x7f816a6e4b70, file "<d script_not_found : None
    n = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_GLOBAL 0 ( len )					  
    digitSum = 0					      2 LOAD_FAST 0 ( st )					    2 LOAD_GLOBAL 1 ( l )					  
    for i in range ( 0 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	digitSum = digitSum + ( int ) ( st [ i ] )	      6 STORE_FAST 1 ( n )					    6 LOAD_GLOBAL 2 ( digitSum )				  
    return ( digitSum % 9 == 0 )			      								    8 COMPARE_OP 2 ( == )					  
							      3 8 LOAD_CONST 1 ( 0 )					    10 POP_JUMP_IF_FALSE 20					  
							      10 STORE_FAST 2 ( digitSum )				    								  
							      								    27 12 LOAD_GLOBAL 3 ( digitSum )				  
							      4 12 SETUP_LOOP 34 ( to 48 )				    14 LOAD_CONST 1 ( 0 )					  
							      14 LOAD_GLOBAL 1 ( range )				    16 BINARY_SUBSCR						  
							      16 LOAD_CONST 1 ( 0 )					    18 LOAD_GLOBAL 4 ( digitSum )				  
							      18 LOAD_FAST 1 ( n )					    20 COMPARE_OP 2 ( == )					  
							      20 CALL_FUNCTION 2					    22 POP_JUMP_IF_FALSE 28					  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 20 ( to 46 )				    28 24 LOAD_GLOBAL 5 ( digitSum )				  
							      26 STORE_FAST 3 ( i )					    26 LOAD_CONST 2 ( 1 )					  
							      								    28 LOAD_CONST 3 ( 2 )					  
							      5 28 LOAD_FAST 2 ( digitSum )				    30 LOAD_CONST 4 ( 3 )					  
							      30 LOAD_GLOBAL 2 ( int )					    32 LOAD_CONST 5 ( ( 'max_length' , 'max_length' ) )		  
							      32 LOAD_FAST 0 ( st )					    34 CALL_FUNCTION_KW 3					  
							      34 LOAD_FAST 3 ( i )					    36 CALL_FUNCTION 1						  
							      36 BINARY_SUBSCR						    38 STORE_FAST 1 ( l )					  
							      38 CALL_FUNCTION 1					    								  
							      40 BINARY_ADD						    29 40 LOAD_FAST 1 ( l )					  
							      42 STORE_FAST 2 ( digitSum )				    42 LOAD_METHOD 6 ( append )					  
							      44 JUMP_ABSOLUTE 24					    44 LOAD_FAST 0 ( st )					  
							      >> 46 POP_BLOCK						    46 CALL_METHOD 1						  
							      								    48 POP_TOP							  
							      6 >> 48 LOAD_FAST 2 ( digitSum )				    								  
							      50 LOAD_CONST 2 ( 9 )					    30 50 LOAD_FAST 1 ( l )					  
							      52 BINARY_MODULO						    52 LOAD_METHOD 6 ( append )					  
							      54 LOAD_CONST 1 ( 0 )					    54 LOAD_FAST 0 ( st )					  
							      56 COMPARE_OP 2 ( == )					    56 CALL_METHOD 1						  
							      58 RETURN_VALUE NEW_LINE					    58 POP_TOP							  
							      								    60 JUMP_FORWARD 22 ( to 76 )				  
							      								    								  
							      								    31 >> 62 LOAD_FAST 1 ( l )					  
							      								    64 LOAD_METHOD 6 ( append )					  
							      								    66 LOAD_FAST 0 ( st )					  
							      								    68 CALL_METHOD 1						  
							      								    70 POP_TOP							  
							      								    >> 72 LOAD_CONST 0 ( None )					  
							      								    74 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	      FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	    FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	  FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY
--							      --							    --								  --
def findSmallest ( arr , n ) :				      Disassembly of <code object findSmallest at 0x7fbac<<unk>> d5 Disassembly of <code object findSmallest at 0x7f816a673a50, f error : /bin/bash: line 1: 24873 Segmentation faul
    res = 1						      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( res )					    2 STORE_FAST 1 ( n )					  ataset/bin/python XLM/dis_script.py --script_path
	if arr [ i ] <= res :				      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	    res = res + arr [ i ]			      3 4 SETUP_LOOP 46 ( to 52 )				    27 4 LOAD_FAST 1 ( n )					  eval_scripts/python_sa-dis_sa.test/FIND_SMALLEST_V
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_CONST 2 ( 0 )					  ALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY.dis
	    break					      8 LOAD_CONST 2 ( 0 )					    8 COMPARE_OP 4 ( > )					  
    return res						      10 LOAD_FAST 1 ( n )					    10 POP_JUMP_IF_FALSE 20					  
							      12 CALL_FUNCTION 2					    								  
							      14 GET_ITER						    28 12 LOAD_CONST 3 ( '' )					  
							      >> 16 FOR_ITER 32 ( to 50 )				    14 STORE_FAST 1 ( n )					  
							      18 STORE_FAST 3 ( i )					    								  
							      								    29 >> 16 LOAD_FAST 1 ( n )					  
							      4 20 LOAD_FAST 0 ( arr )					    18 LOAD_CONST 4 ( 0 )					  
							      22 LOAD_FAST 3 ( i )					    20 COMPARE_OP 4 ( > )					  
							      24 BINARY_SUBSCR						    22 POP_JUMP_IF_FALSE 28					  
							      26 LOAD_FAST 2 ( res )					    								  
							      28 COMPARE_OP 1 ( <= )					    30 24 LOAD_CONST 5 ( '' )					  
							      30 POP_JUMP_IF_FALSE 46					    26 STORE_FAST 1 ( n )					  
							      								    								  
							      5 32 LOAD_FAST 2 ( res )					    31 >> 28 LOAD_FAST 1 ( n )					  
							      34 LOAD_FAST 0 ( arr )					    30 LOAD_CONST 6 ( '' )					  
							      36 LOAD_FAST 3 ( i )					    32 COMPARE_OP 2 ( == )					  
							      38 BINARY_SUBSCR						    34 POP_JUMP_IF_FALSE 44					  
							      40 BINARY_ADD						    								  
							      42 STORE_FAST 2 ( res )					    32 36 LOAD_CONST 7 ( '' )					  
							      44 JUMP_ABSOLUTE 16					    38 STORE_FAST 1 ( n )					  
							      								    								  
							      7 >> 46 BREAK_LOOP					    33 >> 40 LOAD_FAST 1 ( n )					  
							      48 JUMP_ABSOLUTE 16					    42 LOAD_CONST 8 ( 0 )					  
							      >> 50 POP_BLOCK						    44 COMPARE_OP 4 ( > )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      8 >> 52 LOAD_FAST 2 ( res )				    								  
							      54 RETURN_VALUE NEW_LINE					    34 48 LOAD_CONST 9 ( '' )					  
							      								    50 STORE_FAST 1 ( n )					  
							      								    								  
							      								    35 >> 52 LOAD_FAST 1 ( n )					  
							      								    54 LOAD_CONST 10 ( 0 )					  
							      								    56 COMPARE_OP 4 ( > )					  
							      								    58 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    36 60 LOAD_CONST 11 ( '' )					  
							      								    62 STORE_FAST 1 ( n )					  
							      								    								  
							      								    37 >> 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 12 ( 0 )					  
							      								    68 COMPARE_OP 4 ( > )					  
							      								    70 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    38 72 LOAD_CONST 13 ( '' )					  
							      								    74 STORE_FAST 1 ( n )					  
							      								    								  
							      								    39 >> 76 LOAD_FAST 1 ( n )					  
							      								    78 LOAD_CONST 14 ( 0 )					  
							      								    80 COMPARE_OP 4 ( > )					  
							      								    82 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    40 84 LOAD_CONST 15 ( '' )					  
							      								    86 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 >> 88 LOAD_FAST 1 ( n )					  
							      								    90 LOAD_CONST 16 ( 0 )					  
							      								    92 COMPARE_OP 4 ( > )					  
							      								    94 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    42 96 LOAD_FAST 1 ( n )					  
							      								    98 LOAD_CONST 17 ( 0 )					  
							      								    100 COMPARE_OP 4 ( > )					  
							      								    102 POP_JUMP_IF_FALSE 94					  
							      								    104 LOAD_FAST 1 ( n )					  
							      								    106 LOAD_CONST 18 ( 0 )					  
							      								    108 COMPARE_OP 4 ( > )					  
							      								    110 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    43 112 LOAD_FAST 1 ( n )					  
							      								    114 LOAD_CONST 18 ( 0 )					  
							      								    116 COMPARE_OP 4 ( > )					  
							      								    118 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    44 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_CONST 19 ( 0 )					  
							      								    124 COMPARE_OP 4 ( > )					  
							      								    126 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    45 128 LOAD_FAST 1 ( n )					  
							      								    130 RETURN_VALUE						  
							      								    >> 132 LOAD_CONST 0 ( None )				  
							      								    134 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
def kthgroupsum ( k ) :					      Disassembly of <code object kthgroupsum at 0x7fbac<<unk>> d54 Disassembly of <code object kthgroupsum at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    cur = int ( ( k * ( k - 1 ) ) + 1 )			      2 0 LOAD_GLOBAL 0 ( int )					    65 0 LOAD_GLOBAL 0 ( cur )					  "XLM/dis_script.py", line 60, in <module>	exec
    sum = 0						      2 LOAD_FAST 0 ( k )					    2 LOAD_METHOD 1 ( int )					  (item)   File "main.py", line 34, in <module>	  Fi
    while k :						      4 LOAD_FAST 0 ( k )					    4 LOAD_FAST 0 ( k )						  le "<dis>", line 2, in kthgroupsum NameError: name
	sum += cur					      6 LOAD_CONST 1 ( 1 )					    6 CALL_METHOD 1						   'cur' is not defined
	cur += 2					      8 BINARY_SUBTRACT						    8 STORE_FAST 1 ( cur )					  
	k = k - 1					      10 BINARY_MULTIPLY					    								  
    return sum						      12 LOAD_CONST 1 ( 1 )					    66 10 LOAD_FAST 1 ( cur )					  
							      14 BINARY_ADD						    12 LOAD_METHOD 2 ( cur )					  
							      16 CALL_FUNCTION 1					    14 LOAD_FAST 0 ( k )					  
							      18 STORE_FAST 1 ( cur )					    16 CALL_METHOD 1						  
							      								    18 POP_TOP							  
							      3 20 LOAD_CONST 2 ( 0 )					    								  
							      22 STORE_FAST 2 ( sum )					    67 20 LOAD_FAST 1 ( cur )					  
							      								    22 LOAD_METHOD 3 ( cur )					  
							      4 24 SETUP_LOOP 32 ( to 58 )				    24 CALL_METHOD 0						  
							      >> 26 LOAD_FAST 0 ( k )					    26 POP_TOP							  
							      28 POP_JUMP_IF_FALSE 56					    28 LOAD_CONST 0 ( None )					  
							      								    30 RETURN_VALUE						  
							      5 30 LOAD_FAST 2 ( sum )					    NEW_LINE							  
							      32 LOAD_FAST 1 ( cur )					    								  
							      34 INPLACE_ADD						    								  
							      36 STORE_FAST 2 ( sum )					    								  
							      								    								  
							      6 38 LOAD_FAST 1 ( cur )					    								  
							      40 LOAD_CONST 3 ( 2 )					    								  
							      42 INPLACE_ADD						    								  
							      44 STORE_FAST 1 ( cur )					    								  
							      								    								  
							      7 46 LOAD_FAST 0 ( k )					    								  
							      48 LOAD_CONST 1 ( 1 )					    								  
							      50 BINARY_SUBTRACT					    								  
							      52 STORE_FAST 0 ( k )					    								  
							      54 JUMP_ABSOLUTE 26					    								  
							      >> 56 POP_BLOCK						    								  
							      								    								  
							      8 >> 58 LOAD_FAST 2 ( sum )				    								  
							      60 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE
--							      --							    --								  --
def printCountRec ( dist ) :				      Disassembly of <code object printCountRec at 0x7fbac0e8bc90,  Disassembly of <code object printCountRec at 0x7f816a6e4b70,  script_not_found : None
    if dist < 0 :					      2 0 LOAD_FAST 0 ( dist )					    26 0 LOAD_FAST 0 ( dist )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if dist == 0 :					      4 COMPARE_OP 0 ( < )					    4 BINARY_SUBSCR						  
	return 1					      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( printCountRec )				  
    return ( printCountRec ( dist - 1 ) + printCountRec ( dis 								    								  
							      3 8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 1 ( printCountRec )				  
							      10 RETURN_VALUE						    10 LOAD_FAST 0 ( dist )					  
							      								    12 LOAD_CONST 2 ( 1 )					  
							      4 >> 12 LOAD_FAST 0 ( dist )				    14 BINARY_SUBSCR						  
							      14 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 3 ( 2 )					  
							      16 COMPARE_OP 2 ( == )					    18 BINARY_SUBSCR						  
							      18 POP_JUMP_IF_FALSE 24					    20 LOAD_CONST 4 ( 1 )					  
							      								    22 BINARY_SUBSCR						  
							      5 20 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 5 ( '%s %s' )					  
							      22 RETURN_VALUE						    26 LOAD_FAST 1 ( printCountRec )				  
							      								    28 BINARY_MODULO						  
							      6 >> 24 LOAD_GLOBAL 0 ( printCountRec )			    30 LOAD_CONST 6 ( '%s %s' )					  
							      26 LOAD_FAST 0 ( dist )					    32 LOAD_FAST 1 ( printCountRec )				  
							      28 LOAD_CONST 2 ( 1 )					    34 BINARY_MODULO						  
							      30 BINARY_SUBTRACT					    36 BUILD_TUPLE 2						  
							      32 CALL_FUNCTION 1					    38 BINARY_MODULO						  
							      34 LOAD_GLOBAL 0 ( printCountRec )			    40 RETURN_VALUE						  
							      36 LOAD_FAST 0 ( dist )					    NEW_LINE							  
							      38 LOAD_CONST 3 ( 2 )					    								  
							      40 BINARY_SUBTRACT					    								  
							      42 CALL_FUNCTION 1					    								  
							      44 BINARY_ADD						    								  
							      46 LOAD_GLOBAL 0 ( printCountRec )			    								  
							      48 LOAD_FAST 0 ( dist )					    								  
							      50 LOAD_CONST 4 ( 3 )					    								  
							      52 BINARY_SUBTRACT					    								  
							      54 CALL_FUNCTION 1					    								  
							      56 BINARY_ADD						    								  
							      58 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
def firstFactorialDivisibleNumber ( x ) :		      Disassembly of <code object firstFactorialDivisibleNumber at  Disassembly of <code object firstFactFactDibleNumber at 0x7f8 error : Traceback (most recent call last):   File
    i = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    38 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    fact = 1 ;						      2 STORE_FAST 1 ( i )					    2 STORE_FAST 1 ( i )					  (item)   File "main.py", line 34, in <module>	  Fi
    for i in range ( 1 , x ) :				      								    								  le "<dis>", line 2, in firstFactorialDivisibleNumb
	fact = fact * i					      3 4 LOAD_CONST 1 ( 1 )					    39 4 LOAD_GLOBAL 0 ( fact )					  er NameError: name 'fact' is not defined
	if ( fact % x == 0 ) :				      6 STORE_FAST 2 ( fact )					    6 LOAD_FAST 1 ( i )						  
	    break					      								    8 COMPARE_OP 0 ( < )					  
    return i						      4 8 SETUP_LOOP 40 ( to 50 )				    10 POP_JUMP_IF_FALSE 24					  
							      10 LOAD_GLOBAL 0 ( range )				    								  
							      12 LOAD_CONST 1 ( 1 )					    40 12 LOAD_CONST 2 ( 1 )					  
							      14 LOAD_FAST 0 ( x )					    14 STORE_FAST 1 ( i )					  
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    41 16 LOAD_CONST 3 ( 1 )					  
							      >> 20 FOR_ITER 26 ( to 48 )				    18 STORE_FAST 1 ( i )					  
							      22 STORE_FAST 1 ( i )					    								  
							      								    42 20 LOAD_FAST 1 ( i )					  
							      5 24 LOAD_FAST 2 ( fact )					    22 LOAD_CONST 4 ( - 1 )					  
							      26 LOAD_FAST 1 ( i )					    24 COMPARE_OP 2 ( == )					  
							      28 BINARY_MULTIPLY					    26 POP_JUMP_IF_FALSE 32					  
							      30 STORE_FAST 2 ( fact )					    								  
							      								    43 28 LOAD_CONST 5 ( 1 )					  
							      6 32 LOAD_FAST 2 ( fact )					    30 STORE_FAST 1 ( i )					  
							      34 LOAD_FAST 0 ( x )					    								  
							      36 BINARY_MODULO						    44 >> 32 LOAD_FAST 1 ( i )					  
							      38 LOAD_CONST 2 ( 0 )					    34 LOAD_CONST 4 ( - 1 )					  
							      40 COMPARE_OP 2 ( == )					    36 COMPARE_OP 2 ( == )					  
							      42 POP_JUMP_IF_FALSE 20					    38 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      7 44 BREAK_LOOP						    45 40 LOAD_CONST 6 ( 1 )					  
							      46 JUMP_ABSOLUTE 20					    42 STORE_FAST 1 ( i )					  
							      >> 48 POP_BLOCK						    								  
							      								    46 44 LOAD_FAST 1 ( i )					  
							      8 >> 50 LOAD_FAST 1 ( i )					    46 LOAD_CONST 4 ( - 1 )					  
							      52 RETURN_VALUE NEW_LINE					    48 COMPARE_OP 2 ( == )					  
							      								    50 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    47 52 LOAD_CONST 7 ( 1 )					  
							      								    54 STORE_FAST 1 ( i )					  
							      								    								  
							      								    48 56 LOAD_FAST 1 ( i )					  
							      								    58 LOAD_CONST 4 ( - 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    49 64 LOAD_CONST 8 ( 1 )					  
							      								    66 STORE_FAST 1 ( i )					  
							      								    								  
							      								    50 >> 68 LOAD_FAST 1 ( i )					  
							      								    70 LOAD_CONST 4 ( - 1 )					  
							      								    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    51 76 LOAD_CONST 9 ( 1 )					  
							      								    78 STORE_FAST 1 ( i )					  
							      								    								  
							      								    52 >> 80 LOAD_FAST 1 ( i )					  
							      								    82 LOAD_CONST 4 ( - 1 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    53 88 LOAD_CONST 10 ( 1 )					  
							      								    90 STORE_FAST 1 ( i )					  
							      								    								  
							      								    54 >> 92 LOAD_FAST 1 ( i )					  
							      								    94 LOAD_CONST 4 ( - 1 )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    55 100 LOAD_CONST 11 ( 1 )					  
							      								    102 STORE_FAST 1 ( i )					  
							      								    								  
							      								    56 104 LOAD_FAST 1 ( i )					  
							      								    106 LOAD_CONST 4 ( - 1 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    57 112 LOAD_CONST 1 ( 1 )					  
							      								    114 STORE_FAST 1 ( i )					  
							      								    								  
							      								    58 >> 116 LOAD_FAST 1 ( i )					  
							      								    118 LOAD_CONST 4 ( - 1 )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    59 124 LOAD_CONST 1 ( 1 )					  
							      								    126 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
def isPerfectSquare ( n ) :				      Disassembly of <code object isPerfectSquare at 0x7fbac0e89d20 Disassembly of <code object isPerfectSquare at 0x7f8169feb270 error : /bin/bash: line 1: 24898 Segmentation faul
    i = 1						      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    the_sum = 0						      2 STORE_FAST 1 ( i )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    while the_sum < n :					      								    4 INPLACE_ADD						  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	the_sum += i					      3 4 LOAD_CONST 2 ( 0 )					    6 STORE_FAST 1 ( the_sum )					  eval_scripts/python_sa-dis_sa.test/CHECK_NUMBER_IS
	if the_sum == n :				      6 STORE_FAST 2 ( the_sum )				    								  _PERFECT_SQUARE_USING_ADDITIONSUBTRACTION.dis
	    return True					      								    27 8 LOAD_FAST 1 ( the_sum )				  
	i += 2						      4 8 SETUP_LOOP 40 ( to 50 )				    10 LOAD_CONST 2 ( 2 )					  
    return False					      >> 10 LOAD_FAST 2 ( the_sum )				    12 BINARY_POWER						  
							      12 LOAD_FAST 0 ( n )					    14 LOAD_CONST 3 ( 3 )					  
							      14 COMPARE_OP 0 ( < )					    16 BINARY_POWER						  
							      16 POP_JUMP_IF_FALSE 48					    18 LOAD_FAST 1 ( the_sum )					  
							      								    20 LOAD_CONST 4 ( 2 )					  
							      5 18 LOAD_FAST 2 ( the_sum )				    22 BINARY_POWER						  
							      20 LOAD_FAST 1 ( i )					    24 BINARY_MULTIPLY						  
							      22 INPLACE_ADD						    26 LOAD_FAST 1 ( the_sum )					  
							      24 STORE_FAST 2 ( the_sum )				    28 BINARY_MULTIPLY						  
							      								    30 BINARY_ADD						  
							      6 26 LOAD_FAST 2 ( the_sum )				    32 RETURN_VALUE						  
							      28 LOAD_FAST 0 ( n )					    NEW_LINE							  
							      30 COMPARE_OP 2 ( == )					    								  
							      32 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      7 34 LOAD_CONST 3 ( True )				    								  
							      36 RETURN_VALUE						    								  
							      								    								  
							      8 >> 38 LOAD_FAST 1 ( i )					    								  
							      40 LOAD_CONST 4 ( 2 )					    								  
							      42 INPLACE_ADD						    								  
							      44 STORE_FAST 1 ( i )					    								  
							      46 JUMP_ABSOLUTE 10					    								  
							      >> 48 POP_BLOCK						    								  
							      								    								  
							      9 >> 50 LOAD_CONST 5 ( False )				    								  
							      52 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2					      SORT_ARRAY_WAVE_FORM_2					    SORT_ARRAY_WAVE_FORM_2					  SORT_ARRAY_WAVE_FORM_2
--							      --							    --								  --
def sortInWave ( arr , n ) :				      Disassembly of <code object sortInWave at 0x7fbac<<unk>> d540 Disassembly of <code object sortInWave at 0x7f816a673a50, fil error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    164 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n - 1 , 2 ) :			      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 42, in <module>	  Fi
	arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] 4 CALL_METHOD 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in sortInWave TypeError: 'None
							      6 POP_TOP							    6 STORE_FAST 1 ( n )					  Type' object is not subscriptable
							      								    								  
							      3 8 SETUP_LOOP 58 ( to 68 )				    165 8 LOAD_FAST 1 ( n )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_CONST 1 ( 1 )					  
							      12 LOAD_CONST 1 ( 0 )					    12 BINARY_SUBSCR						  
							      14 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( ret )					  
							      16 LOAD_CONST 2 ( 1 )					    								  
							      18 BINARY_SUBTRACT					    166 16 LOAD_FAST 2 ( ret )					  
							      20 LOAD_CONST 3 ( 2 )					    18 LOAD_CONST 2 ( 0 )					  
							      22 CALL_FUNCTION 3					    20 BINARY_SUBSCR						  
							      24 GET_ITER						    22 STORE_FAST 3 ( ret )					  
							      >> 26 FOR_ITER 38 ( to 66 )				    								  
							      28 STORE_FAST 2 ( i )					    167 24 LOAD_FAST 3 ( ret )					  
							      								    26 LOAD_CONST 3 ( 1 )					  
							      4 30 LOAD_FAST 0 ( arr )					    28 BINARY_SUBSCR						  
							      32 LOAD_FAST 2 ( i )					    30 LOAD_CONST 4 ( 2 )					  
							      34 LOAD_CONST 2 ( 1 )					    32 BINARY_SUBSCR						  
							      36 BINARY_ADD						    34 STORE_FAST 4 ( ret )					  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 0 ( arr )					    168 36 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 2 ( i )					    38 LOAD_CONST 5 ( 1 )					  
							      44 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      46 ROT_TWO						    42 LOAD_CONST 6 ( 2 )					  
							      48 LOAD_FAST 0 ( arr )					    44 BINARY_SUBSCR						  
							      50 LOAD_FAST 2 ( i )					    46 STORE_FAST 5 ( ret )					  
							      52 STORE_SUBSCR						    								  
							      54 LOAD_FAST 0 ( arr )					    169 48 LOAD_FAST 0 ( arr )					  
							      56 LOAD_FAST 2 ( i )					    50 LOAD_CONST 7 ( 3 )					  
							      58 LOAD_CONST 2 ( 1 )					    52 BINARY_SUBSCR						  
							      60 BINARY_ADD						    54 STORE_FAST 6 ( ret )					  
							      62 STORE_SUBSCR						    								  
							      64 JUMP_ABSOLUTE 26					    170 56 LOAD_FAST 0 ( arr )					  
							      >> 66 POP_BLOCK						    58 LOAD_CONST 8 ( 0 )					  
							      >> 68 LOAD_CONST 0 ( None )				    60 BINARY_SUBSCR						  
							      70 RETURN_VALUE NEW_LINE					    62 STORE_FAST 7 ( ret )					  
							      								    								  
							      								    171 64 LOAD_FAST 0 ( arr )					  
							      								    66 LOAD_CONST 9 ( 1 )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 STORE_FAST 8 ( ret )					  
							      								    								  
							      								    172 72 LOAD_FAST 0 ( arr )					  
							      								    74 LOAD_CONST 10 ( 0 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_CONST 11 ( 1 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 12 ( 2 )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 STORE_FAST 9 ( ret )					  
							      								    								  
							      								    173 88 LOAD_FAST 0 ( arr )					  
							      								    90 LOAD_CONST 13 ( 1 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 14 ( 2 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 STORE_FAST 10 ( ret )					  
							      								    								  
							      								    174 100 LOAD_FAST 0 ( arr )					  
							      								    102 LOAD_CONST 15 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 STORE_FAST 11 ( ret )					  
							      								    								  
							      								    175 108 LOAD_FAST 0 ( arr )					  
							      								    110 LOAD_CONST 16 ( 0 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 7 ( ret )					  
							      								    116 LOAD_CONST 17 ( 1 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 18 ( 2 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_FAST 8 ( ret )					  
							      								    126 LOAD_CONST 19 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_FAST 9 ( ret )					  
							      								    132 LOAD_CONST 20 ( 0 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 BUILD_TUPLE 3						  
							      								    138 COMPARE_OP 4 ( > )					  
							      								    140 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    176 142 LOAD_FAST 0 ( arr )					  
							      								    144 RETURN_VALUE						  
							      								    								  
							      								    177 >> 146 LOAD_FAST 0 ( arr )				  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
def catalan ( n ) :					      Disassembly of <code object catalan at 0x7fbac<<unk>> d540, f Disassembly of <code object catalan at 0x7f816a673a50, file " script_not_found : None
    if n <= 1 :						      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    res = 0						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    for i in range ( n ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	res += catalan ( i ) * catalan ( n - i - 1 )	      								    								  
    return res						      3 8 LOAD_CONST 1 ( 1 )					    27 8 LOAD_FAST 0 ( n )					  
							      10 RETURN_VALUE						    10 LOAD_CONST 2 ( - 1 )					  
							      								    12 COMPARE_OP 2 ( == )					  
							      4 >> 12 LOAD_CONST 2 ( 0 )				    14 POP_JUMP_IF_FALSE 28					  
							      14 STORE_FAST 1 ( res )					    								  
							      								    28 >> 16 LOAD_CONST 3 ( 1 )					  
							      5 16 SETUP_LOOP 44 ( to 62 )				    18 RETURN_VALUE						  
							      18 LOAD_GLOBAL 0 ( range )				    								  
							      20 LOAD_FAST 0 ( n )					    29 >> 20 LOAD_CONST 4 ( 0 )					  
							      22 CALL_FUNCTION 1					    22 RETURN_VALUE						  
							      24 GET_ITER						    24 LOAD_CONST 0 ( None )					  
							      >> 26 FOR_ITER 32 ( to 60 )				    26 RETURN_VALUE						  
							      28 STORE_FAST 2 ( i )					    NEW_LINE							  
							      								    								  
							      6 30 LOAD_FAST 1 ( res )					    								  
							      32 LOAD_GLOBAL 1 ( catalan )				    								  
							      34 LOAD_FAST 2 ( i )					    								  
							      36 CALL_FUNCTION 1					    								  
							      38 LOAD_GLOBAL 1 ( catalan )				    								  
							      40 LOAD_FAST 0 ( n )					    								  
							      42 LOAD_FAST 2 ( i )					    								  
							      44 BINARY_SUBTRACT					    								  
							      46 LOAD_CONST 1 ( 1 )					    								  
							      48 BINARY_SUBTRACT					    								  
							      50 CALL_FUNCTION 1					    								  
							      52 BINARY_MULTIPLY					    								  
							      54 INPLACE_ADD						    								  
							      56 STORE_FAST 1 ( res )					    								  
							      58 JUMP_ABSOLUTE 26					    								  
							      >> 60 POP_BLOCK						    								  
							      								    								  
							      7 >> 62 LOAD_FAST 1 ( res )				    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER						      DELANNOY_NUMBER						    DELANNOY_NUMBER						  DELANNOY_NUMBER
--							      --							    --								  --
def dealnnoy ( n , m ) :				      Disassembly of <code object dealnnoy at 0x7fbac<<unk>> de40,  Disassembly of <code object dealnnoy at 0x7f816a673a50, file  script_not_found : None
    if ( m == 0 or n == 0 ) :				      2 0 LOAD_FAST 1 ( m )					    26 0 LOAD_FAST 0 ( self )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_ATTR 0 ( dealnnoy )					  
    return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  4 COMPARE_OP 2 ( == )					    4 LOAD_CONST 1 ( 1 )					  
							      6 POP_JUMP_IF_TRUE 16					    6 COMPARE_OP 2 ( == )					  
							      8 LOAD_FAST 0 ( n )					    8 POP_JUMP_IF_FALSE 20					  
							      10 LOAD_CONST 1 ( 0 )					    								  
							      12 COMPARE_OP 2 ( == )					    27 10 LOAD_FAST 0 ( self )					  
							      14 POP_JUMP_IF_FALSE 20					    12 LOAD_METHOD 1 ( dealnnoy )				  
							      								    14 LOAD_FAST 0 ( self )					  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    16 LOAD_ATTR 0 ( dealnnoy )					  
							      18 RETURN_VALUE						    18 LOAD_FAST 0 ( self )					  
							      								    20 LOAD_ATTR 0 ( dealnnoy )					  
							      4 >> 20 LOAD_GLOBAL 0 ( dealnnoy )			    22 LOAD_FAST 0 ( self )					  
							      22 LOAD_FAST 1 ( m )					    24 LOAD_ATTR 0 ( dealnnoy )					  
							      24 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 0 ( self )					  
							      26 BINARY_SUBTRACT					    28 LOAD_ATTR 0 ( dealnnoy )					  
							      28 LOAD_FAST 0 ( n )					    30 LOAD_FAST 0 ( self )					  
							      30 CALL_FUNCTION 2					    32 LOAD_ATTR 0 ( dealnnoy )					  
							      32 LOAD_GLOBAL 0 ( dealnnoy )				    34 LOAD_FAST 0 ( self )					  
							      34 LOAD_FAST 1 ( m )					    36 LOAD_ATTR 0 ( dealnnoy )					  
							      36 LOAD_CONST 2 ( 1 )					    38 LOAD_FAST 0 ( self )					  
							      38 BINARY_SUBTRACT					    40 LOAD_ATTR 0 ( dealnnoy )					  
							      40 LOAD_FAST 0 ( n )					    42 LOAD_FAST 0 ( self )					  
							      42 LOAD_CONST 2 ( 1 )					    44 LOAD_ATTR 0 ( dealnnoy )					  
							      44 BINARY_SUBTRACT					    46 LOAD_FAST 0 ( self )					  
							      46 CALL_FUNCTION 2					    48 LOAD_ATTR 0 ( dealnnoy )					  
							      48 BINARY_ADD						    50 LOAD_FAST 0 ( self )					  
							      50 LOAD_GLOBAL 0 ( dealnnoy )				    52 LOAD_ATTR 0 ( dealnnoy )					  
							      52 LOAD_FAST 1 ( m )					    54 LOAD_FAST 0 ( self )					  
							      54 LOAD_FAST 0 ( n )					    56 LOAD_ATTR 0 ( dealnnoy )					  
							      56 LOAD_CONST 2 ( 1 )					    58 LOAD_FAST 0 ( self )					  
							      58 BINARY_SUBTRACT					    60 LOAD_ATTR 0 ( dealnnoy )					  
							      60 CALL_FUNCTION 2					    62 LOAD_FAST 0 ( self )					  
							      62 BINARY_ADD						    64 LOAD_ATTR 0 ( dealnnoy )					  
							      64 RETURN_VALUE NEW_LINE					    66 LOAD_FAST 0 ( self )					  
							      								    68 LOAD_ATTR 0 ( dealnnoy )					  
							      								    70 LOAD_FAST 0 ( self )					  
							      								    72 LOAD_ATTR 0 ( dealnnoy )					  
							      								    74 LOAD_FAST 0 ( self )					  
							      								    76 LOAD_ATTR 0 ( dealnnoy )					  
							      								    78 LOAD_FAST 0 ( self )					  
							      								    80 LOAD_ATTR 0 ( dealnnoy )					  
							      								    82 LOAD_FAST 0 ( self )					  
							      								    84 LOAD_ATTR 0 ( dealnnoy )					  
							      								    86 LOAD_FAST 0 ( self )					  
							      								    88 LOAD_ATTR 0 ( dealnnoy )					  
							      								    90 LOAD_FAST 0 ( self )					  
							      								    92 LOAD_ATTR 0 ( dealnnoy )					  
							      								    94 LOAD_FAST 0 ( self )					  
							      								    96 LOAD_ATTR 0 ( dealnnoy )					  
							      								    98 LOAD_FAST 0 ( self )					  
							      								    100 LOAD_ATTR 0 ( dealnnoy )				  
							      								    102 LOAD_FAST 0 ( self )					  
							      								    104 LOAD_ATTR 0 ( dealnnoy )				  
							      								    106 LOAD_FAST 0 ( self )					  
							      								    108 LOAD_ATTR 0 ( dealnnoy )				  
							      								    110 LOAD_FAST 0 ( self )					  
							      								    112 LOAD_ATTR 0 ( dealnnoy )				  
							      								    114 LOAD_FAST 0 ( self )					  
							      								    116 LOAD_ATTR 0 ( dealnnoy )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
def multiply ( A , B , C ) :				      Disassembly of <code object multiply at 0x7fbac<<unk>> d540,  Disassembly of <code object multiply at 0x7f816a673a50, file  script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 66 ( to 68 )				    64 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( N ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]     4 LOAD_GLOBAL 1 ( N )					    4 LOAD_FAST 0 ( A )						  
							      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
							      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 54 ( to 66 )				    >> 10 FOR_ITER 22 ( to 22 )					  
							      12 STORE_FAST 3 ( i )					    12 UNPACK_SEQUENCE 2					  
							      								    14 STORE_FAST 1 ( B )					  
							      3 14 SETUP_LOOP 48 ( to 64 )				    16 STORE_FAST 2 ( i )					  
							      16 LOAD_GLOBAL 0 ( range )				    								  
							      18 LOAD_GLOBAL 1 ( N )					    65 18 LOAD_FAST 0 ( A )					  
							      20 CALL_FUNCTION 1					    20 LOAD_FAST 1 ( B )					  
							      22 GET_ITER						    22 BINARY_MULTIPLY						  
							      >> 24 FOR_ITER 36 ( to 62 )				    24 LOAD_FAST 2 ( i )					  
							      26 STORE_FAST 4 ( j )					    26 BINARY_MULTIPLY						  
							      								    28 LOAD_FAST 2 ( i )					  
							      4 28 LOAD_FAST 0 ( A )					    30 BINARY_MULTIPLY						  
							      30 LOAD_FAST 3 ( i )					    32 BINARY_ADD						  
							      32 BINARY_SUBSCR						    34 STORE_FAST 3 ( i )					  
							      34 LOAD_FAST 4 ( j )					    								  
							      36 BINARY_SUBSCR						    66 36 LOAD_FAST 0 ( A )					  
							      38 LOAD_FAST 1 ( B )					    38 LOAD_FAST 3 ( i )					  
							      40 LOAD_FAST 3 ( i )					    40 BINARY_MULTIPLY						  
							      42 BINARY_SUBSCR						    42 LOAD_FAST 2 ( i )					  
							      44 LOAD_FAST 4 ( j )					    44 BINARY_MULTIPLY						  
							      46 BINARY_SUBSCR						    46 BINARY_ADD						  
							      48 BINARY_SUBTRACT					    48 LOAD_FAST 3 ( i )					  
							      50 LOAD_FAST 2 ( C )					    50 BINARY_MULTIPLY						  
							      52 LOAD_FAST 3 ( i )					    52 BINARY_ADD						  
							      54 BINARY_SUBSCR						    54 LOAD_FAST 2 ( i )					  
							      56 LOAD_FAST 4 ( j )					    56 BINARY_MULTIPLY						  
							      58 STORE_SUBSCR						    58 BINARY_ADD						  
							      60 JUMP_ABSOLUTE 24					    60 STORE_FAST 4 ( i )					  
							      >> 62 POP_BLOCK						    								  
							      >> 64 JUMP_ABSOLUTE 10					    67 62 LOAD_FAST 0 ( A )					  
							      >> 66 POP_BLOCK						    64 LOAD_FAST 4 ( i )					  
							      >> 68 LOAD_CONST 0 ( None )				    66 BINARY_MULTIPLY						  
							      70 RETURN_VALUE NEW_LINE					    68 STORE_FAST 5 ( i )					  
							      								    70 JUMP_ABSOLUTE 10						  
							      								    >> 72 POP_BLOCK						  
							      								    >> 74 JUMP_ABSOLUTE 10					  
							      								    >> 76 POP_BLOCK						  
							      								    >> 78 LOAD_CONST 0 ( None )					  
							      								    80 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
def minSum ( n ) :					      Disassembly of <code object minSum at 0x7fbac0e8bc90, file "< Disassembly of <code object minSum at 0x7f816a6e4b70, file "< error : /bin/bash: line 1: 24919 Segmentation faul
    sum = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    11 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    while ( n > 0 ) :					      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  ataset/bin/python XLM/dis_script.py --script_path
	sum += ( n % 10 ) ;				      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	n //= 10 ;					      3 4 SETUP_LOOP 32 ( to 38 )				    12 4 SETUP_LOOP 32 ( to 38 )				  eval_scripts/python_sa-dis_sa.test/MINIMIZE_THE_SU
    if ( sum == 1 ) :					      >> 6 LOAD_FAST 0 ( n )					    6 LOAD_GLOBAL 0 ( range )					  M_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N.dis
	return 10 ;					      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 10 )					  
    return sum ;					      10 COMPARE_OP 4 ( > )					    10 CALL_FUNCTION 1						  
							      12 POP_JUMP_IF_FALSE 36					    12 GET_ITER							  
							      								    >> 14 FOR_ITER 14 ( to 36 )					  
							      4 14 LOAD_FAST 1 ( sum )					    16 STORE_FAST 2 ( i )					  
							      16 LOAD_FAST 0 ( n )					    								  
							      18 LOAD_CONST 2 ( 10 )					    13 18 LOAD_FAST 1 ( sum )					  
							      20 BINARY_MODULO						    20 LOAD_CONST 3 ( 1 )					  
							      22 INPLACE_ADD						    22 COMPARE_OP 0 ( < )					  
							      24 STORE_FAST 1 ( sum )					    24 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      5 26 LOAD_FAST 0 ( n )					    14 26 LOAD_FAST 1 ( sum )					  
							      28 LOAD_CONST 2 ( 10 )					    28 LOAD_CONST 4 ( 1 )					  
							      30 INPLACE_FLOOR_DIVIDE					    30 INPLACE_ADD						  
							      32 STORE_FAST 0 ( n )					    32 STORE_FAST 1 ( sum )					  
							      34 JUMP_ABSOLUTE 6					    								  
							      >> 36 POP_BLOCK						    15 34 LOAD_FAST 1 ( sum )					  
							      								    36 LOAD_CONST 5 ( 1 )					  
							      6 >> 38 LOAD_FAST 1 ( sum )				    38 INPLACE_ADD						  
							      40 LOAD_CONST 3 ( 1 )					    40 STORE_FAST 1 ( sum )					  
							      42 COMPARE_OP 2 ( == )					    42 JUMP_ABSOLUTE 14						  
							      44 POP_JUMP_IF_FALSE 50					    >> 44 POP_BLOCK						  
							      								    								  
							      7 46 LOAD_CONST 2 ( 10 )					    16 >> 46 LOAD_FAST 1 ( sum )				  
							      48 RETURN_VALUE						    48 LOAD_CONST 6 ( 1 )					  
							      								    50 INPLACE_ADD						  
							      8 >> 50 LOAD_FAST 1 ( sum )				    52 STORE_FAST 1 ( sum )					  
							      52 RETURN_VALUE NEW_LINE					    								  
							      								    17 54 LOAD_FAST 1 ( sum )					  
							      								    56 LOAD_CONST 7 ( 1 )					  
							      								    58 INPLACE_ADD						  
							      								    60 STORE_FAST 1 ( sum )					  
							      								    62 JUMP_FORWARD 14 ( to 76 )				  
							      								    								  
							      								    18 >> 64 LOAD_FAST 1 ( sum )				  
							      								    66 LOAD_CONST 8 ( 1 )					  
							      								    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( sum )					  
							      								    72 JUMP_FORWARD 14 ( to 76 )				  
							      								    								  
							      								    19 >> 74 LOAD_FAST 1 ( sum )				  
							      								    76 LOAD_CONST 9 ( 1 )					  
							      								    78 INPLACE_ADD						  
							      								    80 STORE_FAST 1 ( sum )					  
							      								    82 JUMP_ABSOLUTE 14						  
							      								    >> 84 POP_BLOCK						  
							      								    								  
							      								    20 >> 86 LOAD_FAST 1 ( sum )				  
							      								    88 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS
--							      --							    --								  --
def countDigits ( a , b ) :				      Disassembly of <code object countDigits at 0x7fbac<<unk>> de4 Disassembly of <code object countDigits at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    p = abs ( a * b )					      2 STORE_FAST 2 ( count )					    2 STORE_FAST 1 ( b )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( p == 0 ) :					      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	return 1					      3 4 LOAD_GLOBAL 0 ( abs )					    27 4 SETUP_LOOP 52 ( to 54 )				  cals, co_varnames, co_names, co_consts, co_linesta
    while ( p > 0 ) :					      6 LOAD_FAST 0 ( a )					    6 LOAD_GLOBAL 0 ( range )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
	count = count + 1				      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 1 ( b )						  pack non-iterable NoneType object
	p = p // 10					      10 BINARY_MULTIPLY					    10 CALL_FUNCTION 1						  
    return count					      12 CALL_FUNCTION 1					    12 GET_ITER							  
							      14 STORE_FAST 3 ( p )					    >> 14 FOR_ITER 52 ( to 52 )					  
							      								    16 STORE_FAST 2 ( i )					  
							      4 16 LOAD_FAST 3 ( p )					    								  
							      18 LOAD_CONST 1 ( 0 )					    28 18 LOAD_FAST 0 ( a )					  
							      20 COMPARE_OP 2 ( == )					    20 LOAD_FAST 2 ( i )					  
							      22 POP_JUMP_IF_FALSE 28					    22 BINARY_SUBSCR						  
							      								    24 LOAD_FAST 1 ( b )					  
							      5 24 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 2 ( i )					  
							      26 RETURN_VALUE						    28 BINARY_SUBSCR						  
							      								    30 LOAD_CONST 2 ( 1 )					  
							      6 >> 28 SETUP_LOOP 28 ( to 58 )				    32 BINARY_SUBTRACT						  
							      >> 30 LOAD_FAST 3 ( p )					    34 LOAD_FAST 2 ( i )					  
							      32 LOAD_CONST 1 ( 0 )					    36 BINARY_SUBSCR						  
							      34 COMPARE_OP 4 ( > )					    38 LOAD_CONST 3 ( 1 )					  
							      36 POP_JUMP_IF_FALSE 56					    40 BINARY_SUBTRACT						  
							      								    42 LOAD_FAST 2 ( i )					  
							      7 38 LOAD_FAST 2 ( count )				    44 BINARY_SUBSCR						  
							      40 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 4 ( 2 )					  
							      42 BINARY_ADD						    48 BINARY_MULTIPLY						  
							      44 STORE_FAST 2 ( count )					    50 LOAD_FAST 2 ( i )					  
							      								    52 BINARY_SUBSCR						  
							      8 46 LOAD_FAST 3 ( p )					    54 LOAD_CONST 5 ( 1 )					  
							      48 LOAD_CONST 3 ( 10 )					    56 BINARY_SUBTRACT						  
							      50 BINARY_FLOOR_DIVIDE					    58 BINARY_MULTIPLY						  
							      52 STORE_FAST 3 ( p )					    60 BINARY_ADD						  
							      54 JUMP_ABSOLUTE 30					    62 STORE_FAST 3 ( i )					  
							      >> 56 POP_BLOCK						    								  
							      								    29 64 LOAD_FAST 0 ( a )					  
							      9 >> 58 LOAD_FAST 2 ( count )				    66 LOAD_FAST 3 ( i )					  
							      60 RETURN_VALUE NEW_LINE					    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 6 ( 2 )					  
							      								    72 BINARY_MULTIPLY						  
							      								    74 BINARY_ADD						  
							      								    76 LOAD_FAST 2 ( i )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 7 ( 3 )					  
							      								    82 BINARY_MULTIPLY						  
							      								    84 BINARY_ADD						  
							      								    86 LOAD_FAST 3 ( i )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 8 ( 2 )					  
							      								    92 BINARY_MULTIPLY						  
							      								    94 BINARY_ADD						  
							      								    96 LOAD_FAST 3 ( i )					  
							      								    98 LOAD_CONST 9 ( 4 )					  
							      								    100 BINARY_MULTIPLY						  
							      								    102 BINARY_ADD						  
							      								    104 LOAD_FAST 2 ( i )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 10 ( 3 )					  
							      								    110 BINARY_ADD						  
							      								    112 BINARY_MULTIPLY						  
							      								    114 BINARY_ADD						  
							      								    116 LOAD_FAST 3 ( i )					  
							      								    118 LOAD_CONST 10 ( 3 )					  
							      								    120 BINARY_ADD						  
							      								    122 BINARY_ADD						  
							      								    124 BINARY_ADD						  
							      								    126 LOAD_FAST 2 ( i )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 BINARY_ADD						  
							      								    132 LOAD_FAST 3 ( i )					  
							      								    134 LOAD_CONST 10 ( 3 )					  
							      								    136 BINARY_ADD						  
							      								    138 BINARY_ADD						  
							      								    140 BINARY_ADD						  
							      								    142 LOAD_CONST 11 ( 1 )					  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_FAST 3 ( i )					  
							      								    150 LOAD_CONST 10 ( 3 )					  
							      								    152 BINARY_ADD						  
							      								    154 BINARY_ADD						  
							      								    156 BINARY_ADD						  
							      								    								  
							      								    29 29 LOAD_FAST 1 ( b )					  
							      								    158 LOAD_CONST 10 ( 3 )					  
							      								    160 BINARY_ADD						  
							      								    162 BINARY_ADD						  
							      								    164 LOAD_FAST 2 ( i )					  
							      								    166 BINARY_ADD						  
							      								    168 BINARY_MULTIPLY						  
							      								    170 BINARY_ADD						  
							      								    								  
							      								    30 172 LOAD_FAST 1 ( b )					  
							      								    174 LOAD_CONST 11 ( 1 )					  
							      								    176 BINARY_ADD						  
							      								    178 LOAD_FAST 3 ( i )					  
							      								    180 BINARY_ADD						  
							      								    182 BINARY_ADD						  
							      								    184 BUILD_SLICE 2						  
							      								    186 BINARY_SUBSCR						  
							      								    188 BINARY_ADD						  
							      								    190 LOAD_FAST 3 ( i )					  
							      								    192 LOAD_CONST 12 ( 3 )					  
							      								    194 BINARY_ADD						  
							      								    								  
							      								    31								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_2				      FIND_REPETITIVE_ELEMENT_1_N_1_2				    FIND_REPETITIVE_ELEMENT_1_N_1_2				  FIND_REPETITIVE_ELEMENT_1_N_1_2
--							      --							    --								  --
def findRepeating ( arr , n ) :				      Disassembly of <code object findRepeating at 0x7fbac0e8bc90,  Disassembly of <code object findRepeating at 0x7f816a6e4b70,  error : /bin/bash: line 1: 24938 Segmentation faul
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 BUILD_LIST 0						  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n - 1 ) :			      2 STORE_FAST 2 ( res )					    2 STORE_FAST 1 ( n )					  ataset/bin/python XLM/dis_script.py --script_path
	res = res ^ ( i + 1 ) ^ arr [ i ]		      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    res = res ^ arr [ n - 1 ]				      3 4 SETUP_LOOP 42 ( to 48 )				    27 4 SETUP_LOOP 52 ( to 54 )				  eval_scripts/python_sa-dis_sa.test/FIND_REPETITIVE
    return res						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  _ELEMENT_1_N_1_2.dis
							      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 1 ( 1 )					  
							      10 LOAD_FAST 1 ( n )					    10 CALL_FUNCTION 1						  
							      12 LOAD_CONST 2 ( 1 )					    12 GET_ITER							  
							      14 BINARY_SUBTRACT					    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 CALL_FUNCTION 2					    16 STORE_FAST 2 ( i )					  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 24 ( to 46 )				    28 18 LOAD_FAST 0 ( arr )					  
							      22 STORE_FAST 3 ( i )					    20 LOAD_METHOD 1 ( append )					  
							      								    22 LOAD_FAST 1 ( n )					  
							      4 24 LOAD_FAST 2 ( res )					    24 CALL_METHOD 1						  
							      26 LOAD_FAST 3 ( i )					    26 POP_TOP							  
							      28 LOAD_CONST 2 ( 1 )					    28 JUMP_ABSOLUTE 14						  
							      30 BINARY_ADD						    >> 30 POP_BLOCK						  
							      32 BINARY_XOR						    >> 32 LOAD_CONST 0 ( None )					  
							      34 LOAD_FAST 0 ( arr )					    34 RETURN_VALUE						  
							      36 LOAD_FAST 3 ( i )					    NEW_LINE							  
							      38 BINARY_SUBSCR						    								  
							      40 BINARY_XOR						    								  
							      42 STORE_FAST 2 ( res )					    								  
							      44 JUMP_ABSOLUTE 20					    								  
							      >> 46 POP_BLOCK						    								  
							      								    								  
							      5 >> 48 LOAD_FAST 2 ( res )				    								  
							      50 LOAD_FAST 0 ( arr )					    								  
							      52 LOAD_FAST 1 ( n )					    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_SUBSCR						    								  
							      60 BINARY_XOR						    								  
							      62 STORE_FAST 2 ( res )					    								  
							      								    								  
							      6 64 LOAD_FAST 2 ( res )					    								  
							      66 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN
--							      --							    --								  --
def findSum ( N ) :					      Disassembly of <code object findSum at 0x7fbac<<unk>> d8a0, f Disassembly of <code object findSum at 0x7f816a6e4b70, file " error : /bin/bash: line 1: 24948 Segmentation faul
    ans = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( N )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 1 , N + 1 ) :			      2 STORE_FAST 1 ( ans )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( 1 , N + 1 ) :			      								    4 BINARY_ADD						  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	    ans += i // j				      3 4 SETUP_LOOP 58 ( to 64 )				    6 STORE_FAST 1 ( N )					  eval_scripts/python_sa-dis_sa.test/SUM_MATRIX_ELEM
    return ans						      6 LOAD_GLOBAL 0 ( range )					    								  ENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN.dis
							      8 LOAD_CONST 2 ( 1 )					    27 8 LOAD_FAST 1 ( N )					  
							      10 LOAD_FAST 0 ( N )					    10 LOAD_CONST 2 ( 0 )					  
							      12 LOAD_CONST 2 ( 1 )					    12 COMPARE_OP 4 ( > )					  
							      14 BINARY_ADD						    14 POP_JUMP_IF_FALSE 20					  
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    28 16 LOAD_CONST 3 ( '%d = %d' )				  
							      >> 20 FOR_ITER 40 ( to 62 )				    18 LOAD_FAST 1 ( N )					  
							      22 STORE_FAST 2 ( i )					    20 BINARY_MODULO						  
							      								    22 STORE_FAST 1 ( N )					  
							      4 24 SETUP_LOOP 34 ( to 60 )				    								  
							      26 LOAD_GLOBAL 0 ( range )				    29 >> 24 LOAD_FAST 1 ( N )					  
							      28 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 4 ( 0 )					  
							      30 LOAD_FAST 0 ( N )					    28 COMPARE_OP 4 ( > )					  
							      32 LOAD_CONST 2 ( 1 )					    30 POP_JUMP_IF_FALSE 40					  
							      34 BINARY_ADD						    								  
							      36 CALL_FUNCTION 2					    30 32 LOAD_CONST 5 ( '%d = %d' )				  
							      38 GET_ITER						    34 LOAD_FAST 1 ( N )					  
							      >> 40 FOR_ITER 16 ( to 58 )				    36 BINARY_MODULO						  
							      42 STORE_FAST 3 ( j )					    38 STORE_FAST 1 ( N )					  
							      								    								  
							      5 44 LOAD_FAST 1 ( ans )					    31 40 LOAD_FAST 1 ( N )					  
							      46 LOAD_FAST 2 ( i )					    42 LOAD_CONST 6 ( '%d = %d' )				  
							      48 LOAD_FAST 3 ( j )					    44 LOAD_FAST 1 ( N )					  
							      50 BINARY_FLOOR_DIVIDE					    46 BINARY_MODULO						  
							      52 INPLACE_ADD						    48 BINARY_MODULO						  
							      54 STORE_FAST 1 ( ans )					    50 STORE_FAST 1 ( N )					  
							      56 JUMP_ABSOLUTE 40					    								  
							      >> 58 POP_BLOCK						    32 >> 52 LOAD_FAST 1 ( N )					  
							      >> 60 JUMP_ABSOLUTE 20					    54 LOAD_CONST 7 ( '%d = %d' )				  
							      >> 62 POP_BLOCK						    56 LOAD_FAST 1 ( N )					  
							      								    58 BINARY_MODULO						  
							      6 >> 64 LOAD_FAST 1 ( ans )				    60 STORE_FAST 1 ( N )					  
							      66 RETURN_VALUE NEW_LINE					    								  
							      								    33 62 LOAD_FAST 1 ( N )					  
							      								    64 LOAD_CONST 8 ( '%d = %d' )				  
							      								    66 LOAD_FAST 1 ( N )					  
							      								    68 BINARY_MODULO						  
							      								    70 LOAD_FAST 1 ( N )					  
							      								    72 BINARY_MODULO						  
							      								    74 STORE_FAST 1 ( N )					  
							      								    								  
							      								    34 76 LOAD_FAST 1 ( N )					  
							      								    78 LOAD_CONST 9 ( 1 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( N )					  
							      								    								  
							      								    35 84 LOAD_FAST 1 ( N )					  
							      								    86 LOAD_FAST 1 ( N )					  
							      								    88 BINARY_MODULO						  
							      								    90 STORE_FAST 2 ( N )					  
							      								    								  
							      								    36 92 LOAD_FAST 1 ( N )					  
							      								    94 LOAD_CONST 10 ( 0 )					  
							      								    96 COMPARE_OP 4 ( > )					  
							      								    98 POP_JUMP_IF_FALSE 100					  
							      								    								  
							      								    37 100 LOAD_FAST 1 ( N )					  
							      								    102 LOAD_FAST 2 ( N )					  
							      								    104 LOAD_CONST 11 ( 1 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( N )					  
							      								    								  
							      								    38 110 LOAD_FAST 1 ( N )					  
							      								    112 LOAD_CONST 12 ( 0 )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      								    116 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    39 118 LOAD_FAST 1 ( N )					  
							      								    120 LOAD_FAST 2 ( N )					  
							      								    122 LOAD_CONST 12 ( 0 )					  
							      								    124 COMPARE_OP 4 ( > )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    40 128 LOAD_FAST 1 ( N )					  
							      								    130 RETURN_VALUE						  
							      								    								  
							      								    42 >> 132 LOAD_FAST 1 ( N )					  
							      								    134 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
def add ( A , B , C ) :					      Disassembly of <code object add at 0x7fbac0e89d20, file "<dis Disassembly of <code object add at 0x7f816a683d20, file "<dis script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 66 ( to 68 )				    754 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( N ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]     4 LOAD_GLOBAL 1 ( N )					    4 LOAD_CONST 1 ( 10 )					  
							      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
							      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 54 ( to 66 )				    >> 10 FOR_ITER 14 ( to 22 )					  
							      12 STORE_FAST 3 ( i )					    12 STORE_FAST 1 ( B )					  
							      								    								  
							      3 14 SETUP_LOOP 48 ( to 64 )				    755 14 LOAD_FAST 0 ( A )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_FAST 1 ( B )					  
							      18 LOAD_GLOBAL 1 ( N )					    18 COMPARE_OP 2 ( == )					  
							      20 CALL_FUNCTION 1					    20 POP_JUMP_IF_FALSE 10					  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 36 ( to 62 )				    756 22 LOAD_FAST 0 ( A )					  
							      26 STORE_FAST 4 ( j )					    24 LOAD_FAST 1 ( B )					  
							      								    26 COMPARE_OP 2 ( == )					  
							      4 28 LOAD_FAST 0 ( A )					    28 POP_JUMP_IF_FALSE 10					  
							      30 LOAD_FAST 3 ( i )					    								  
							      32 BINARY_SUBSCR						    757 30 LOAD_FAST 0 ( A )					  
							      34 LOAD_FAST 4 ( j )					    32 LOAD_FAST 1 ( B )					  
							      36 BINARY_SUBSCR						    34 COMPARE_OP 2 ( == )					  
							      38 LOAD_FAST 1 ( B )					    36 POP_JUMP_IF_FALSE 10					  
							      40 LOAD_FAST 3 ( i )					    								  
							      42 BINARY_SUBSCR						    758 38 LOAD_FAST 0 ( A )					  
							      44 LOAD_FAST 4 ( j )					    40 LOAD_FAST 1 ( B )					  
							      46 BINARY_SUBSCR						    42 COMPARE_OP 2 ( == )					  
							      48 BINARY_ADD						    44 POP_JUMP_IF_FALSE 10					  
							      50 LOAD_FAST 2 ( C )					    								  
							      52 LOAD_FAST 3 ( i )					    759 46 LOAD_FAST 0 ( A )					  
							      54 BINARY_SUBSCR						    48 LOAD_FAST 1 ( B )					  
							      56 LOAD_FAST 4 ( j )					    50 COMPARE_OP 2 ( == )					  
							      58 STORE_SUBSCR						    52 POP_JUMP_IF_FALSE 10					  
							      60 JUMP_ABSOLUTE 24					    								  
							      >> 62 POP_BLOCK						    760 54 LOAD_FAST 0 ( A )					  
							      >> 64 JUMP_ABSOLUTE 10					    56 LOAD_FAST 1 ( B )					  
							      >> 66 POP_BLOCK						    58 COMPARE_OP 2 ( == )					  
							      >> 68 LOAD_CONST 0 ( None )				    60 POP_JUMP_IF_FALSE 10					  
							      70 RETURN_VALUE NEW_LINE					    								  
							      								    761 62 LOAD_FAST 0 ( A )					  
							      								    64 LOAD_FAST 1 ( B )					  
							      								    66 COMPARE_OP 2 ( == )					  
							      								    68 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    762 70 LOAD_FAST 0 ( A )					  
							      								    72 LOAD_FAST 1 ( B )					  
							      								    74 COMPARE_OP 2 ( == )					  
							      								    76 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    763 78 LOAD_FAST 0 ( A )					  
							      								    80 LOAD_FAST 1 ( B )					  
							      								    82 COMPARE_OP 2 ( == )					  
							      								    84 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    764 86 LOAD_FAST 0 ( A )					  
							      								    88 LOAD_FAST 1 ( B )					  
							      								    90 LOAD_FAST 1 ( B )					  
							      								    92 BUILD_TUPLE 2						  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( B )					  
							      								    98 LOAD_FAST 1 ( B )					  
							      								    100 BUILD_TUPLE 2						  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_FAST 1 ( B )					  
							      								    106 LOAD_FAST 1 ( B )					  
							      								    108 BUILD_TUPLE 2						  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_FAST 1 ( B )					  
							      								    114 BUILD_TUPLE 2						  
							      								    116 BINARY_MODULO						  
							      								    118 CALL_FUNCTION 1						  
							      								    120 POP_TOP							  
							      								    122 JUMP_ABSOLUTE 10					  
							      								    >> 124 POP_BLOCK						  
							      								    >> 126 JUMP_ABSOLUTE 10					  
							      								    >> 128 POP_BLOCK						  
							      								    >> 130 JUMP_ABSOLUTE 10					  
							      								    >> 132 POP_BLOCK						  
							      								    >> 134 JUMP_ABSOLUTE 10					  
							      								    >> 136 POP_BLOCK						  
							      								    >> 138 LOAD_CONST 2 ( None )				  
							      								    140 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT
--							      --							    --								  --
def countToMake0lternate ( s ) :			      Disassembly of <code object countToMake0lternate at 0x7fbac<< Disassembly of <code object countMakeToMake0lternate at 0x7f8 script_not_found : None
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    69 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( len ( s ) - 1 ) :			      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  
	if ( s [ i ] == s [ i + 1 ] ) :			      								    								  
	    result += 1					      3 4 SETUP_LOOP 52 ( to 58 )				    70 4 SETUP_LOOP 52 ( to 54 )				  
    return result					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_FAST 1 ( result )					  
							      10 LOAD_FAST 0 ( s )					    10 CALL_FUNCTION 1						  
							      12 CALL_FUNCTION 1					    12 GET_ITER							  
							      14 LOAD_CONST 2 ( 1 )					    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 BINARY_SUBTRACT					    16 STORE_FAST 2 ( i )					  
							      18 CALL_FUNCTION 1					    								  
							      20 GET_ITER						    71 18 LOAD_FAST 0 ( s )					  
							      >> 22 FOR_ITER 32 ( to 56 )				    20 LOAD_METHOD 1 ( append )					  
							      24 STORE_FAST 2 ( i )					    22 LOAD_FAST 2 ( i )					  
							      								    24 CALL_METHOD 1						  
							      4 26 LOAD_FAST 0 ( s )					    26 POP_TOP							  
							      28 LOAD_FAST 2 ( i )					    28 JUMP_ABSOLUTE 14						  
							      30 BINARY_SUBSCR						    >> 30 POP_BLOCK						  
							      32 LOAD_FAST 0 ( s )					    >> 32 LOAD_CONST 2 ( None )					  
							      34 LOAD_FAST 2 ( i )					    34 RETURN_VALUE						  
							      36 LOAD_CONST 2 ( 1 )					    NEW_LINE							  
							      38 BINARY_ADD						    								  
							      40 BINARY_SUBSCR						    								  
							      42 COMPARE_OP 2 ( == )					    								  
							      44 POP_JUMP_IF_FALSE 22					    								  
							      								    								  
							      5 46 LOAD_FAST 1 ( result )				    								  
							      48 LOAD_CONST 2 ( 1 )					    								  
							      50 INPLACE_ADD						    								  
							      52 STORE_FAST 1 ( result )				    								  
							      54 JUMP_ABSOLUTE 22					    								  
							      >> 56 POP_BLOCK						    								  
							      								    								  
							      6 >> 58 LOAD_FAST 1 ( result )				    								  
							      60 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
def isDivBy9 ( n ) :					      Disassembly of <code object isDivBy9 at 0x7fbac0e8bc90, file  Disassembly of <code object isDivBy9 at 0x7f816a673a50, file  failure : #Results: 0, 10
    if ( n == 0 or n == 9 ) :				      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
	return True					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 9 )					  
    if ( n < 9 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 9 ( is not )					  
	return False					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
    return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 )  8 LOAD_FAST 0 ( n )					    								  
							      10 LOAD_CONST 2 ( 9 )					    27 8 LOAD_CONST 2 ( False )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    28 >> 12 LOAD_GLOBAL 0 ( isDivBy9 )				  
							      3 >> 16 LOAD_CONST 3 ( True )				    14 LOAD_FAST 0 ( n )					  
							      18 RETURN_VALUE						    16 LOAD_CONST 1 ( 9 )					  
							      								    18 COMPARE_OP 9 ( is not )					  
							      4 >> 20 LOAD_FAST 0 ( n )					    20 POP_JUMP_IF_FALSE 32					  
							      22 LOAD_CONST 2 ( 9 )					    								  
							      24 COMPARE_OP 0 ( < )					    29 22 LOAD_CONST 3 ( False )				  
							      26 POP_JUMP_IF_FALSE 32					    24 RETURN_VALUE						  
							      								    								  
							      5 28 LOAD_CONST 4 ( False )				    30 >> 26 LOAD_CONST 4 ( False )				  
							      30 RETURN_VALUE						    28 RETURN_VALUE						  
							      								    30 LOAD_CONST 0 ( None )					  
							      6 >> 32 LOAD_GLOBAL 0 ( isDivBy9 )			    32 RETURN_VALUE						  
							      34 LOAD_GLOBAL 1 ( int )					    NEW_LINE							  
							      36 LOAD_FAST 0 ( n )					    								  
							      38 LOAD_CONST 5 ( 3 )					    								  
							      40 BINARY_RSHIFT						    								  
							      42 CALL_FUNCTION 1					    								  
							      44 LOAD_GLOBAL 1 ( int )					    								  
							      46 LOAD_FAST 0 ( n )					    								  
							      48 LOAD_CONST 6 ( 7 )					    								  
							      50 BINARY_AND						    								  
							      52 CALL_FUNCTION 1					    								  
							      54 BINARY_SUBTRACT					    								  
							      56 CALL_FUNCTION 1					    								  
							      58 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
def isCornerPresent ( str , corner ) :			      Disassembly of <code object isCornerPresent at 0x7fbac0e89d20 Disassembly of <code object isCornerPresent at 0x7f816a6e4b70 error : Traceback (most recent call last):   File
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 60, in <module>	exec
    cl = len ( corner )					      2 LOAD_FAST 0 ( str )					    2 LOAD_ATTR 0 ( n )						  (item)   File "main.py", line 32, in <module>	  Fi
    if ( n < cl ) :					      4 CALL_FUNCTION 1						    4 STORE_FAST 1 ( corner )					  le "<dis>", line 2, in isCornerPresent AttributeEr
	return False					      6 STORE_FAST 2 ( n )					    								  ror: 'str' object has no attribute 'n'
    return ( ( str [ : cl ] == corner ) and ( str [ n - cl :  								    27 6 LOAD_FAST 1 ( corner )					  
							      3 8 LOAD_GLOBAL 0 ( len )					    8 LOAD_FAST 0 ( self )					  
							      10 LOAD_FAST 1 ( corner )					    10 LOAD_ATTR 1 ( corner )					  
							      12 CALL_FUNCTION 1					    12 COMPARE_OP 6 ( in )					  
							      14 STORE_FAST 3 ( cl )					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      4 16 LOAD_FAST 2 ( n )					    28 16 LOAD_CONST 1 ( False )				  
							      18 LOAD_FAST 3 ( cl )					    18 RETURN_VALUE						  
							      20 COMPARE_OP 0 ( < )					    								  
							      22 POP_JUMP_IF_FALSE 28					    29 >> 20 LOAD_FAST 1 ( corner )				  
							      								    22 LOAD_FAST 0 ( self )					  
							      5 24 LOAD_CONST 1 ( False )				    24 LOAD_ATTR 2 ( corner )					  
							      26 RETURN_VALUE						    26 COMPARE_OP 6 ( in )					  
							      								    28 POP_JUMP_IF_FALSE 38					  
							      6 >> 28 LOAD_FAST 0 ( str )				    								  
							      30 LOAD_CONST 0 ( None )					    30 30 LOAD_CONST 1 ( False )				  
							      32 LOAD_FAST 3 ( cl )					    32 RETURN_VALUE						  
							      34 BUILD_SLICE 2						    								  
							      36 BINARY_SUBSCR						    31 >> 34 LOAD_FAST 1 ( corner )				  
							      38 LOAD_FAST 1 ( corner )					    36 LOAD_FAST 0 ( self )					  
							      40 COMPARE_OP 2 ( == )					    38 LOAD_ATTR 3 ( corner )					  
							      42 JUMP_IF_FALSE_OR_POP 62				    40 COMPARE_OP 6 ( in )					  
							      44 LOAD_FAST 0 ( str )					    42 POP_JUMP_IF_FALSE 48					  
							      46 LOAD_FAST 2 ( n )					    								  
							      48 LOAD_FAST 3 ( cl )					    32 44 LOAD_CONST 1 ( False )				  
							      50 BINARY_SUBTRACT					    46 RETURN_VALUE						  
							      52 LOAD_CONST 0 ( None )					    								  
							      54 BUILD_SLICE 2						    33 >> 48 LOAD_CONST 1 ( False )				  
							      56 BINARY_SUBSCR						    50 RETURN_VALUE						  
							      58 LOAD_FAST 1 ( corner )					    NEW_LINE							  
							      60 COMPARE_OP 2 ( == )					    								  
							      >> 62 RETURN_VALUE NEW_LINE				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1
--							      --							    --								  --
def findSum ( N , K ) :					      Disassembly of <code object findSum at 0x7fbac<<unk>> d540, f Disassembly of <code object findSum at 0x7f816a6e4b70, file " error : Traceback (most recent call last):   File
    ans = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    y = N / K ;						      2 STORE_FAST 2 ( ans )					    2 LOAD_CONST 2 ( N )					  item in run_dis_script():   File "XLM/dis_script.p
    x = N % K ;						      								    4 BINARY_MULTIPLY						  y", line 47, in run_dis_script     co_code, co_nlo
    ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 3 4 LOAD_FAST 0 ( N )					    6 STORE_FAST 1 ( K )					  cals, co_varnames, co_names, co_consts, co_linesta
    return int ( ans ) ;				      6 LOAD_FAST 1 ( K )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      8 BINARY_TRUE_DIVIDE					    27 8 LOAD_GLOBAL 0 ( K )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      10 STORE_FAST 3 ( y )					    10 LOAD_CONST 3 ( 1 )					  n parse     constants[arg] = ast.literal_eval(argr
							      								    12 LOAD_CONST 4 ( 2 )					  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      4 12 LOAD_FAST 0 ( N )					    14 BINARY_MULTIPLY						  ib/python3.7/ast.py", line 91, in literal_eval
							      14 LOAD_FAST 1 ( K )					    16 LOAD_FAST 1 ( K )					   return _convert(node_or_string)   File "/home/ubu
							      16 BINARY_MODULO						    18 LOAD_CONST 5 ( 3 )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      18 STORE_FAST 4 ( x )					    20 BINARY_MULTIPLY						  line 90, in _convert	   return _convert_signed_nu
							      								    22 LOAD_FAST 1 ( K )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      5 20 LOAD_FAST 1 ( K )					    24 LOAD_CONST 6 ( 4 )					  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      22 LOAD_FAST 1 ( K )					    26 BINARY_MULTIPLY						  ed_num     return _convert_num(node)	 File "/home
							      24 LOAD_CONST 2 ( 1 )					    28 LOAD_FAST 1 ( K )					  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      26 BINARY_SUBTRACT					    30 LOAD_CONST 7 ( 3 )					  y", line 55, in _convert_num	   raise ValueError(
							      28 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  'malformed node or string: ' + repr(node)) ValueEr
							      30 LOAD_CONST 3 ( 2 )					    34 LOAD_FAST 1 ( K )					  ror: malformed node or string: <_ast.Name object a
							      32 BINARY_TRUE_DIVIDE					    36 LOAD_CONST 8 ( 4 )					  t 0x7fd702563950>
							      34 LOAD_FAST 3 ( y )					    38 BINARY_MULTIPLY						  
							      36 BINARY_MULTIPLY					    40 LOAD_FAST 1 ( K )					  
							      38 LOAD_FAST 4 ( x )					    42 LOAD_CONST 9 ( 4 )					  
							      40 LOAD_FAST 4 ( x )					    44 BINARY_MULTIPLY						  
							      42 LOAD_CONST 2 ( 1 )					    46 LOAD_FAST 1 ( K )					  
							      44 BINARY_ADD						    48 LOAD_CONST 10 ( 4 )					  
							      46 BINARY_MULTIPLY					    50 BINARY_MULTIPLY						  
							      48 LOAD_CONST 3 ( 2 )					    52 LOAD_FAST 1 ( K )					  
							      50 BINARY_TRUE_DIVIDE					    54 LOAD_CONST 11 ( 4 )					  
							      52 BINARY_ADD						    56 BINARY_MULTIPLY						  
							      54 STORE_FAST 2 ( ans )					    58 BINARY_ADD						  
							      								    60 LOAD_FAST 1 ( K )					  
							      6 56 LOAD_GLOBAL 0 ( int )				    62 LOAD_CONST 12 ( 4 )					  
							      58 LOAD_FAST 2 ( ans )					    64 BINARY_MULTIPLY						  
							      60 CALL_FUNCTION 1					    66 BINARY_MULTIPLY						  
							      62 RETURN_VALUE NEW_LINE					    68 BINARY_ADD						  
							      								    70 LOAD_FAST 1 ( K )					  
							      								    72 LOAD_CONST 13 ( 4 )					  
							      								    74 BINARY_MULTIPLY						  
							      								    76 BINARY_ADD						  
							      								    78 BINARY_MULTIPLY						  
							      								    80 BINARY_ADD						  
							      								    82 LOAD_FAST 1 ( K )					  
							      								    84 LOAD_CONST 14 ( 4 )					  
							      								    86 BINARY_MULTIPLY						  
							      								    88 BINARY_ADD						  
							      								    90 LOAD_FAST 1 ( K )					  
							      								    92 LOAD_CONST 15 ( 4 )					  
							      								    94 BINARY_MULTIPLY						  
							      								    96 BINARY_ADD						  
							      								    98 LOAD_FAST 1 ( K )					  
							      								    100 LOAD_CONST 16 ( 4 )					  
							      								    102 BINARY_MULTIPLY						  
							      								    104 BINARY_ADD						  
							      								    106 LOAD_FAST 1 ( K )					  
							      								    108 LOAD_CONST 17 ( 4 )					  
							      								    110 BINARY_MULTIPLY						  
							      								    112 BINARY_ADD						  
							      								    114 LOAD_FAST 1 ( K )					  
							      								    116 LOAD_CONST 18 ( 4 )					  
							      								    118 BINARY_MULTIPLY						  
							      								    120 BINARY_ADD						  
							      								    122 LOAD_FAST 1 ( K )					  
							      								    124 LOAD_CONST 19 ( 4 )					  
							      								    126 BINARY_MULTIPLY						  
							      								    128 BINARY_ADD						  
							      								    130 LOAD_FAST 1 ( K )					  
							      								    132 LOAD_CONST 20 ( 4 )					  
							      								    134 BINARY_MULTIPLY						  
							      								    136 BINARY_ADD						  
							      								    138 LOAD_FAST 1 ( K )					  
							      								    140 LOAD_CONST 21 ( 4 )					  
							      								    142 BINARY_MULTIPLY						  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_MULTIPLY						  
							      								    148 BINARY_ADD						  
							      								    150 LOAD_FAST 1 ( K )					  
							      								    152 LOAD_CONST 22 ( 4 )					  
							      								    154 BINARY_MULTIPLY						  
							      								    156 BINARY_ADD						  
							      								    158 BINARY_MULTIPLY						  
							      								    								  
							      								    29 156 LOAD_FAST 1 ( K )					  
							      								    158 LOAD_CONST 21 ( 4 )					  
							      								    160 BINARY_MULTIPLY						  
							      								    162 BINARY_ADD						  
							      								    164 BINARY_MULTIPLY						  
							      								    166 BINARY_ADD						  
							      								    164 LOAD_FAST 1 ( K )					  
							      								    168 LOAD_CONST 23 ( 4 )					  
							      								    170 BINARY_MULTIPLY						  
							      								    172 BINARY_ADD						  
							      								    174 BINARY_MULTIPLY						  
							      								    176 BINARY_ADD						  
							      								    								  
							      								    30 30 LOAD_FAST 1 ( K )					  
							      								    32 LOAD_CONST 23 ( 4 )					  
							      								    34 BINARY_MULTIPLY						  
							      								    36 BINARY_ADD						  
							      								    38 LOAD_FAST 1 ( K )					  
							      								    40 LOAD_CONST 23 ( 4					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
def gcd ( a , b ) :					      Disassembly of <code object gcd at 0x7fbac0e8bc90, file "<dis Disassembly of <code object gcd at 0x7f816a6e4b70, file "<dis script_not_found : None
    if ( a < b ) :					      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 0 ( a )					  
	return gcd ( b , a )				      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( 0 )					  
    if ( abs ( b ) < 0.001 ) :				      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
	return a					      6 POP_JUMP_IF_FALSE 18					    6 POP_JUMP_IF_FALSE 12					  
    else :						      								    								  
	return ( gcd ( b , a - math.floor ( a / b ) * b ) )   3 8 LOAD_GLOBAL 0 ( gcd )					    27 8 LOAD_GLOBAL 0 ( gcd )					  
							      10 LOAD_FAST 1 ( b )					    10 LOAD_FAST 0 ( a )					  
							      12 LOAD_FAST 0 ( a )					    12 LOAD_CONST 2 ( 1 )					  
							      14 CALL_FUNCTION 2					    14 LOAD_CONST 3 ( 2 )					  
							      16 RETURN_VALUE						    16 LOAD_CONST 4 ( 3 )					  
							      								    18 LOAD_CONST 4 ( 3 )					  
							      4 >> 18 LOAD_GLOBAL 1 ( abs )				    20 LOAD_CONST 4 ( 3 )					  
							      20 LOAD_FAST 1 ( b )					    22 LOAD_CONST 4 ( 3 )					  
							      22 CALL_FUNCTION 1					    24 LOAD_CONST 4 ( 3 )					  
							      24 LOAD_CONST 1 ( 0.001 )					    26 LOAD_CONST 4 ( 3 )					  
							      26 COMPARE_OP 0 ( < )					    28 LOAD_CONST 4 ( 3 )					  
							      28 POP_JUMP_IF_FALSE 34					    30 LOAD_CONST 4 ( 3 )					  
							      								    32 LOAD_CONST 4 ( 3 )					  
							      5 30 LOAD_FAST 0 ( a )					    34 LOAD_CONST 4 ( 3 )					  
							      32 RETURN_VALUE						    36 LOAD_CONST 4 ( 3 )					  
							      								    38 LOAD_CONST 4 ( 3 )					  
							      7 >> 34 LOAD_GLOBAL 0 ( gcd )				    40 LOAD_CONST 4 ( 3 )					  
							      36 LOAD_FAST 1 ( b )					    42 LOAD_CONST 4 ( 3 )					  
							      38 LOAD_FAST 0 ( a )					    44 LOAD_CONST 4 ( 3 )					  
							      40 LOAD_GLOBAL 2 ( math )					    46 LOAD_CONST 4 ( 3 )					  
							      42 LOAD_METHOD 3 ( floor )				    48 LOAD_CONST 4 ( 3 )					  
							      44 LOAD_FAST 0 ( a )					    50 LOAD_CONST 4 ( 3 )					  
							      46 LOAD_FAST 1 ( b )					    52 LOAD_CONST 4 ( 3 )					  
							      48 BINARY_TRUE_DIVIDE					    54 LOAD_CONST 4 ( 3 )					  
							      50 CALL_METHOD 1						    56 LOAD_CONST 4 ( 3 )					  
							      52 LOAD_FAST 1 ( b )					    58 LOAD_CONST 4 ( 3 )					  
							      54 BINARY_MULTIPLY					    60 LOAD_CONST 4 ( 3 )					  
							      56 BINARY_SUBTRACT					    62 LOAD_CONST 4 ( 3 )					  
							      58 CALL_FUNCTION 2					    64 LOAD_CONST 4 ( 3 )					  
							      60 RETURN_VALUE						    66 LOAD_CONST 4 ( 3 )					  
							      62 LOAD_CONST 0 ( None )					    68 LOAD_CONST 4 ( 3 )					  
							      64 RETURN_VALUE NEW_LINE					    70 LOAD_CONST 4 ( 3 )					  
							      								    72 LOAD_CONST 4 ( 3 )					  
							      								    74 LOAD_CONST 4 ( 3 )					  
							      								    76 LOAD_CONST 4 ( 3 )					  
							      								    78 LOAD_CONST 4 ( 3 )					  
							      								    80 LOAD_CONST 4 ( 3 )					  
							      								    82 LOAD_CONST 4 ( 3 )					  
							      								    84 LOAD_CONST 4 ( 3 )					  
							      								    86 LOAD_CONST 4 ( 3 )					  
							      								    88 LOAD_CONST 4 ( 3 )					  
							      								    90 LOAD_CONST 4 ( 3 )					  
							      								    92 LOAD_CONST 4 ( 3 )					  
							      								    94 LOAD_CONST 4 ( 3 )					  
							      								    96 LOAD_CONST 4 ( 3 )					  
							      								    98 LOAD_CONST 4 ( 3 )					  
							      								    100 LOAD_CONST 4 ( 3 )					  
							      								    102 LOAD_CONST 4 ( 3 )					  
							      								    104 LOAD_CONST 4 ( 3 )					  
							      								    106 LOAD_CONST 4 ( 3 )					  
							      								    108 LOAD_CONST 4 ( 3 )					  
							      								    110 LOAD_CONST 4 ( 3 )					  
							      								    112 LOAD_CONST 4 ( 3 )					  
							      								    114 LOAD_CONST 4 ( 3 )					  
							      								    116 LOAD_CONST 4 ( 3 )					  
							      								    118 LOAD_CONST 4 ( 3 )					  
							      								    120 LOAD_CONST 4 ( 3 )					  
							      								    122 LOAD_CONST 4 ( 3 )					  
							      								    124 LOAD_CONST 4 ( 3 )					  
							      								    126 LOAD_CONST 4 ( 3 )					  
							      								    128 LOAD_CONST 4 ( 3 )					  
							      								    130 LOAD_CONST 4 ( 3 )					  
							      								    132 LOAD_CONST 4 ( 3 )					  
							      								    134 LOAD_CONST 4 ( 3 )					  
							      								    136 LOAD_CONST 4 ( 3 )					  
							      								    138 LOAD_CONST 4 ( 3 )					  
							      								    140 LOAD_CONST 4 ( 3 )					  
							      								    142 LOAD_CONST 4						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
def sumNodes ( l ) :					      Disassembly of <code object sumNodes at 0x7fbac<<unk>> de40,  Disassembly of <code object sumNodes at 0x7f816a673a50, file  error : Traceback (most recent call last):   File
    leafNodeCount = math.pow ( 2 , l - 1 ) ;		      2 0 LOAD_GLOBAL 0 ( math )				    16 0 LOAD_GLOBAL 0 ( leafNodeCount )			  "XLM/dis_script.py", line 59, in <module>	for
    sumLastLevel = 0 ;					      2 LOAD_METHOD 1 ( pow )					    2 LOAD_FAST 0 ( l )						  item in run_dis_script():   File "XLM/dis_script.p
    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 )  4 LOAD_CONST 1 ( 2 )					    4 CALL_FUNCTION 1						  y", line 54, in run_dis_script     hyp_co = mco.to
    sum = sumLastLevel * l ;				      6 LOAD_FAST 0 ( l )					    6 STORE_FAST 1 ( l )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    return int ( sum ) ;				      8 LOAD_CONST 2 ( 1 )					    								  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_SUBTRACT					    17 8 LOAD_GLOBAL 1 ( leafNodeCount )			  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 CALL_METHOD 2						    10 LOAD_FAST 1 ( l )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 STORE_FAST 1 ( leafNodeCount )				    12 CALL_FUNCTION 1						  co	 self.co_cellvars, TypeError: name tuples mu
							      								    14 STORE_FAST 2 ( l )					  st contain only strings, not 'NoneType'
							      3 16 LOAD_CONST 3 ( 0 )					    								  
							      18 STORE_FAST 2 ( sumLastLevel )				    18 16 LOAD_GLOBAL 2 ( sum )					  
							      								    18 LOAD_FAST 2 ( l )					  
							      4 20 LOAD_FAST 1 ( leafNodeCount )			    20 CALL_FUNCTION 1						  
							      22 LOAD_FAST 1 ( leafNodeCount )				    22 STORE_FAST 3 ( l )					  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 BINARY_ADD						    19 24 LOAD_GLOBAL 3 ( sum )					  
							      28 BINARY_MULTIPLY					    26 LOAD_FAST 3 ( l )					  
							      30 LOAD_CONST 1 ( 2 )					    28 CALL_FUNCTION 1						  
							      32 BINARY_TRUE_DIVIDE					    30 LOAD_CONST 1 ( 1 )					  
							      34 STORE_FAST 2 ( sumLastLevel )				    32 BINARY_SUBTRACT						  
							      								    34 STORE_FAST 4 ( l )					  
							      5 36 LOAD_FAST 2 ( sumLastLevel )				    								  
							      38 LOAD_FAST 0 ( l )					    20 36 LOAD_FAST 0 ( l )					  
							      40 BINARY_MULTIPLY					    38 LOAD_FAST 4 ( l )					  
							      42 STORE_FAST 3 ( sum )					    40 LOAD_FAST 2 ( l )					  
							      								    42 LOAD_FAST 3 ( l )					  
							      6 44 LOAD_GLOBAL 2 ( int )				    44 LOAD_FAST 4 ( l )					  
							      46 LOAD_FAST 3 ( sum )					    46 LOAD_FAST 4 ( l )					  
							      48 CALL_FUNCTION 1					    48 LOAD_FAST 5 ( l )					  
							      50 RETURN_VALUE NEW_LINE					    50 LOAD_FAST 6 ( l )					  
							      								    52 LOAD_FAST 7 ( l )					  
							      								    54 LOAD_FAST 8 ( l )					  
							      								    56 LOAD_FAST 9 ( l )					  
							      								    58 LOAD_FAST 10 ( l )					  
							      								    60 LOAD_FAST 11 ( l )					  
							      								    62 LOAD_FAST 12 ( l )					  
							      								    64 LOAD_FAST 13 ( l )					  
							      								    66 LOAD_FAST 14 ( l )					  
							      								    68 LOAD_FAST 15 ( l )					  
							      								    70 LOAD_FAST 15 ( l )					  
							      								    72 LOAD_FAST 16 ( l )					  
							      								    74 LOAD_FAST 17 ( l )					  
							      								    76 LOAD_FAST 18 ( l )					  
							      								    78 LOAD_FAST 19 ( l )					  
							      								    80 LOAD_FAST 20 ( l )					  
							      								    82 LOAD_FAST 19 ( l )					  
							      								    84 LOAD_FAST 20 ( l )					  
							      								    86 LOAD_FAST 21 ( l )					  
							      								    88 LOAD_FAST 20 ( l )					  
							      								    90 LOAD_FAST 21 ( l )					  
							      								    92 LOAD_FAST 20 ( l )					  
							      								    94 LOAD_FAST 21 ( l )					  
							      								    96 LOAD_FAST 20 ( l )					  
							      								    98 LOAD_FAST 21 ( l )					  
							      								    100 LOAD_FAST 20 ( l )					  
							      								    102 LOAD_FAST 21 ( l )					  
							      								    104 LOAD_FAST 22 ( l )					  
							      								    106 LOAD_FAST 23 ( l )					  
							      								    108 LOAD_FAST 22 ( l )					  
							      								    110 LOAD_FAST 23 ( l )					  
							      								    112 LOAD_FAST 22 ( l )					  
							      								    114 LOAD_FAST 23 ( l )					  
							      								    116 LOAD_FAST 22 ( l )					  
							      								    118 LOAD_FAST 23 ( l )					  
							      								    120 LOAD_FAST 22 ( l )					  
							      								    122 LOAD_FAST 23 ( l )					  
							      								    124 LOAD_FAST 24 ( l )					  
							      								    126 LOAD_FAST 23 ( l )					  
							      								    128 LOAD_FAST 22 ( l )					  
							      								    130 LOAD_FAST 23 ( l )					  
							      								    132 LOAD_FAST 24 ( l )					  
							      								    134 LOAD_FAST 23 ( l )					  
							      								    136 BUILD_TUPLE 7						  
							      								    138 LOAD_FAST 24 ( l )					  
							      								    140 BINARY_ADD						  
							      								    142 LOAD_FAST 23 ( l )					  
							      								    144 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
def isSymmetric ( mat , N ) :				      Disassembly of <code object isSymmetric at 0x7fbac0e8bc90, fi Disassembly of <code object isSymmetric at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    for i in range ( N ) :				      2 0 SETUP_LOOP 62 ( to 64 )				    26 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 59, in <module>	for
	for j in range ( N ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  item in run_dis_script():   File "XLM/dis_script.p
	    if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :	      4 LOAD_FAST 1 ( N )					    4 LOAD_FAST 0 ( mat )					  y", line 47, in run_dis_script     co_code, co_nlo
		return False				      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  cals, co_varnames, co_names, co_consts, co_linesta
    return True						      8 GET_ITER						    8 GET_ITER							  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      >> 10 FOR_ITER 50 ( to 62 )				    >> 10 FOR_ITER 14 ( to 22 )					  pack non-iterable NoneType object
							      12 STORE_FAST 2 ( i )					    12 STORE_FAST 1 ( N )					  
							      								    								  
							      3 14 SETUP_LOOP 44 ( to 60 )				    27 14 LOAD_FAST 1 ( N )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 1 ( N )					    18 COMPARE_OP 4 ( > )					  
							      20 CALL_FUNCTION 1					    20 POP_JUMP_IF_FALSE 10					  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 32 ( to 58 )				    28 22 LOAD_FAST 1 ( N )					  
							      26 STORE_FAST 3 ( j )					    24 LOAD_CONST 2 ( 1 )					  
							      								    26 COMPARE_OP 4 ( > )					  
							      4 28 LOAD_FAST 0 ( mat )					    28 POP_JUMP_IF_FALSE 10					  
							      30 LOAD_FAST 2 ( i )					    								  
							      32 BINARY_SUBSCR						    29 30 LOAD_FAST 1 ( N )					  
							      34 LOAD_FAST 3 ( j )					    32 LOAD_CONST 3 ( 1 )					  
							      36 BINARY_SUBSCR						    34 COMPARE_OP 4 ( > )					  
							      38 LOAD_FAST 0 ( mat )					    36 POP_JUMP_IF_FALSE 10					  
							      40 LOAD_FAST 3 ( j )					    								  
							      42 BINARY_SUBSCR						    30 >> 38 LOAD_FAST 1 ( N )					  
							      44 LOAD_FAST 2 ( i )					    40 LOAD_CONST 4 ( 4 )					  
							      46 BINARY_SUBSCR						    42 COMPARE_OP 4 ( > )					  
							      48 COMPARE_OP 3 ( != )					    44 POP_JUMP_IF_FALSE 10					  
							      50 POP_JUMP_IF_FALSE 24					    								  
							      								    31 46 LOAD_FAST 1 ( N )					  
							      5 52 LOAD_CONST 1 ( False )				    48 LOAD_CONST 5 ( 1 )					  
							      54 RETURN_VALUE						    50 COMPARE_OP 4 ( > )					  
							      56 JUMP_ABSOLUTE 24					    52 POP_JUMP_IF_FALSE 10					  
							      >> 58 POP_BLOCK						    								  
							      >> 60 JUMP_ABSOLUTE 10					    32 54 LOAD_FAST 1 ( N )					  
							      >> 62 POP_BLOCK						    56 LOAD_CONST 6 ( 2 )					  
							      								    58 COMPARE_OP 4 ( > )					  
							      6 >> 64 LOAD_CONST 2 ( True )				    60 POP_JUMP_IF_FALSE 10					  
							      66 RETURN_VALUE NEW_LINE					    								  
							      								    33 62 LOAD_FAST 1 ( N )					  
							      								    64 LOAD_CONST 7 ( 1 )					  
							      								    66 COMPARE_OP 4 ( > )					  
							      								    68 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    34 70 LOAD_FAST 1 ( N )					  
							      								    72 LOAD_CONST 8 ( 2 )					  
							      								    74 COMPARE_OP 4 ( > )					  
							      								    76 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    35 78 LOAD_FAST 1 ( N )					  
							      								    80 LOAD_CONST 9 ( 2 )					  
							      								    82 COMPARE_OP 4 ( > )					  
							      								    84 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    36 86 LOAD_FAST 1 ( N )					  
							      								    88 LOAD_CONST 10 ( 2 )					  
							      								    90 COMPARE_OP 4 ( > )					  
							      								    92 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    37 94 LOAD_FAST 1 ( N )					  
							      								    96 LOAD_CONST 11 ( 2 )					  
							      								    98 COMPARE_OP 4 ( > )					  
							      								    100 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    38 102 LOAD_FAST 1 ( N )					  
							      								    104 LOAD_CONST 12 ( 2 )					  
							      								    106 COMPARE_OP 4 ( > )					  
							      								    108 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    39 110 LOAD_FAST 1 ( N )					  
							      								    112 LOAD_CONST 13 ( 1 )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      								    116 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    40 118 LOAD_FAST 1 ( N )					  
							      								    120 LOAD_CONST 6 ( 2 )					  
							      								    122 COMPARE_OP 4 ( > )					  
							      								    124 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    41 126 LOAD_FAST 1 ( N )					  
							      								    128 LOAD_CONST 6 ( 2 )					  
							      								    130 COMPARE_OP 4 ( > )					  
							      								    132 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    42 134 LOAD_FAST 1 ( N )					  
							      								    136 LOAD_CONST 7 ( 1 )					  
							      								    138 COMPARE_OP 4 ( > )					  
							      								    140 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    43 142 LOAD_FAST 1 ( N )					  
							      								    144 RETURN_VALUE						  
							      								    								  
							      								    44 >> 146 LOAD_FAST 1 (					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
def search ( arr , n , x ) :				      Disassembly of <code object search at 0x7fbac<<unk>> de40, fi Disassembly of <code object search at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    108 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    while ( i <= n - 1 ) :				      2 STORE_FAST 3 ( i )					    2 LOAD_CONST 1 ( - 1 )					  item in run_dis_script():   File "XLM/dis_script.p
	if ( arr [ i ] == x ) :				      								    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
	    return i					      3 4 SETUP_LOOP 52 ( to 58 )				    6 LOAD_CONST 2 ( 0 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	i += abs ( arr [ i ] - x )			      >> 6 LOAD_FAST 3 ( i )					    8 BINARY_SUBSCR						  assembler.py", line 81, in to_co     co_consts.app
    return - 1						      8 LOAD_FAST 1 ( n )					    10 STORE_FAST 1 ( n )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 LOAD_CONST 2 ( 1 )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 BINARY_SUBTRACT					    109 12 LOAD_FAST 1 ( n )					  co	 self.co_cellvars, ValueError: code: varname
							      14 COMPARE_OP 1 ( <= )					    14 LOAD_CONST 3 ( 1 )					  s is too small
							      16 POP_JUMP_IF_FALSE 56					    16 BINARY_SUBSCR						  
							      								    18 LOAD_FAST 1 ( n )					  
							      4 18 LOAD_FAST 0 ( arr )					    20 LOAD_CONST 4 ( 2 )					  
							      20 LOAD_FAST 3 ( i )					    22 BINARY_SUBSCR						  
							      22 BINARY_SUBSCR						    24 LOAD_CONST 5 ( 1 )					  
							      24 LOAD_FAST 2 ( x )					    26 BINARY_SUBSCR						  
							      26 COMPARE_OP 2 ( == )					    28 LOAD_CONST 6 ( 2 )					  
							      28 POP_JUMP_IF_FALSE 34					    30 BINARY_SUBSCR						  
							      								    32 LOAD_CONST 7 ( 3 )					  
							      5 30 LOAD_FAST 3 ( i )					    34 BINARY_SUBSCR						  
							      32 RETURN_VALUE						    36 LOAD_CONST 8 ( 2 )					  
							      								    38 BINARY_SUBSCR						  
							      6 >> 34 LOAD_FAST 3 ( i )					    40 LOAD_CONST 9 ( 1 )					  
							      36 LOAD_GLOBAL 0 ( abs )					    42 BINARY_SUBSCR						  
							      38 LOAD_FAST 0 ( arr )					    44 LOAD_CONST 10 ( 2 )					  
							      40 LOAD_FAST 3 ( i )					    46 BINARY_SUBSCR						  
							      42 BINARY_SUBSCR						    48 LOAD_CONST 11 ( 3 )					  
							      44 LOAD_FAST 2 ( x )					    50 BINARY_SUBSCR						  
							      46 BINARY_SUBTRACT					    52 LOAD_CONST 12 ( 2 )					  
							      48 CALL_FUNCTION 1					    54 BINARY_SUBSCR						  
							      50 INPLACE_ADD						    56 LOAD_CONST 13 ( 3 )					  
							      52 STORE_FAST 3 ( i )					    58 BINARY_SUBSCR						  
							      54 JUMP_ABSOLUTE 6					    60 LOAD_CONST 14 ( 2 )					  
							      >> 56 POP_BLOCK						    62 BINARY_SUBSCR						  
							      								    64 LOAD_CONST 6 ( 2 )					  
							      7 >> 58 LOAD_CONST 3 ( - 1 )				    66 BINARY_SUBSCR						  
							      60 RETURN_VALUE NEW_LINE					    68 LOAD_CONST 6 ( 2 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 LOAD_CONST 8 ( 2 )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_CONST 6 ( 2 )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 6 ( 2 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_CONST 6 ( 2 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_CONST 7 ( 3 )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 6 ( 2 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 8 ( 2 )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_CONST 9 ( 1 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 6 ( 2 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 7 ( 3 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 8 ( 2 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 9 ( 1 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 10 ( 2 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 11 ( 3 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 12 ( 2 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 13 ( 3 )					  
							      								    134 LOAD_CONST 14 ( 2 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 15 ( 3 )					  
							      								    140 LOAD_CONST 16 ( 2 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 17 ( 3 )					  
							      								    146 LOAD_CONST 18 ( 2 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 19 ( 3 )					  
							      								    152 LOAD_CONST 20 ( 2 )					  
							      								    154 STORE_SUBSCR						  
							      								    								  
							      								    109 156 LOAD_FAST 1 ( n )					  
							      								    158 LOAD_CONST 6 ( 2 )					  
							      								    160 STORE_SUBSCR						  
							      								    								  
							      								    110 162 LOAD_FAST 1 ( n )					  
							      								    164 LOAD_CONST 6 ( 2 )					  
							      								    166 STORE_SUBSCR						  
							      								    								  
							      								    111 168 LOAD_FAST 1 ( n )					  
							      								    170 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		      PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		    PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER			  PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER
--							      --							    --								  --
def Print ( n , k ) :					      Disassembly of <code object Print at 0x7fbac<<unk>> de40, fil Disassembly of <code object Print at 0x7f816a673a50, file "<d script_not_found : None
    rem = 1						      2 0 LOAD_CONST 1 ( 1 )					    128 0 LOAD_CONST 1 ( 1 )					  
    for i in range ( 0 , k ) :				      2 STORE_FAST 2 ( rem )					    2 STORE_FAST 1 ( k )					  
	print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = " 								    								  
	rem = ( 10 * rem ) % n				      3 4 SETUP_LOOP 56 ( to 62 )				    129 4 LOAD_GLOBAL 0 ( math )				  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_METHOD 1 ( floor )					  
							      8 LOAD_CONST 2 ( 0 )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_FAST 1 ( k )					    10 LOAD_FAST 1 ( k )					  
							      12 CALL_FUNCTION 2					    12 BINARY_MULTIPLY						  
							      14 GET_ITER						    14 CALL_METHOD 1						  
							      >> 16 FOR_ITER 42 ( to 60 )				    16 LOAD_CONST 2 ( 1 )					  
							      18 STORE_FAST 3 ( i )					    18 BINARY_ADD						  
							      								    20 LOAD_CONST 3 ( 2 )					  
							      4 20 LOAD_GLOBAL 1 ( print )				    22 BINARY_MULTIPLY						  
							      22 LOAD_GLOBAL 2 ( math )					    24 LOAD_FAST 1 ( k )					  
							      24 LOAD_METHOD 3 ( floor )				    26 BINARY_MULTIPLY						  
							      26 LOAD_CONST 3 ( 10 )					    28 BINARY_ADD						  
							      28 LOAD_FAST 2 ( rem )					    30 LOAD_FAST 1 ( k )					  
							      30 BINARY_MULTIPLY					    32 BINARY_MULTIPLY						  
							      32 LOAD_FAST 0 ( n )					    34 BINARY_ADD						  
							      34 BINARY_TRUE_DIVIDE					    36 LOAD_FAST 1 ( k )					  
							      36 CALL_METHOD 1						    38 BINARY_MULTIPLY						  
							      38 LOAD_CONST 4 ( '' )					    40 BINARY_ADD						  
							      40 LOAD_CONST 5 ( ( 'end' , ) )				    42 LOAD_FAST 1 ( k )					  
							      42 CALL_FUNCTION_KW 2					    44 BINARY_MULTIPLY						  
							      44 POP_TOP						    46 BINARY_ADD						  
							      								    48 LOAD_FAST 1 ( k )					  
							      5 46 LOAD_CONST 3 ( 10 )					    50 BINARY_ADD						  
							      48 LOAD_FAST 2 ( rem )					    52 LOAD_FAST 1 ( k )					  
							      50 BINARY_MULTIPLY					    54 BINARY_MULTIPLY						  
							      52 LOAD_FAST 0 ( n )					    56 BINARY_ADD						  
							      54 BINARY_MODULO						    58 LOAD_FAST 1 ( k )					  
							      56 STORE_FAST 2 ( rem )					    60 BINARY_MULTIPLY						  
							      58 JUMP_ABSOLUTE 16					    62 BINARY_ADD						  
							      >> 60 POP_BLOCK						    64 LOAD_FAST 1 ( k )					  
							      >> 62 LOAD_CONST 0 ( None )				    66 BINARY_MULTIPLY						  
							      64 RETURN_VALUE NEW_LINE					    68 BINARY_ADD						  
							      								    70 LOAD_FAST 1 ( k )					  
							      								    72 BINARY_MULTIPLY						  
							      								    74 BINARY_ADD						  
							      								    76 BINARY_ADD						  
							      								    78 LOAD_FAST 1 ( k )					  
							      								    80 BINARY_MULTIPLY						  
							      								    82 BINARY_ADD						  
							      								    84 LOAD_FAST 1 ( k )					  
							      								    86 BINARY_ADD						  
							      								    88 BINARY_MULTIPLY						  
							      								    90 BINARY_ADD						  
							      								    92 LOAD_FAST 1 ( k )					  
							      								    94 BINARY_ADD						  
							      								    96 BINARY_MULTIPLY						  
							      								    98 BINARY_ADD						  
							      								    100 BINARY_ADD						  
							      								    102 LOAD_FAST 1 ( k )					  
							      								    104 BINARY_ADD						  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_FAST 1 ( k )					  
							      								    110 BINARY_ADD						  
							      								    112 BINARY_ADD						  
							      								    114 BINARY_ADD						  
							      								    116 LOAD_FAST 1 ( k )					  
							      								    118 BINARY_ADD						  
							      								    120 BINARY_ADD						  
							      								    122 BINARY_ADD						  
							      								    124 LOAD_FAST 1 ( k )					  
							      								    126 BINARY_ADD						  
							      								    128 BINARY_ADD						  
							      								    130 LOAD_FAST 1 ( k )					  
							      								    132 BINARY_ADD						  
							      								    134 BINARY_ADD						  
							      								    136 BINARY_ADD						  
							      								    138 LOAD_FAST 1 ( k )					  
							      								    140 BINARY_ADD						  
							      								    142 BINARY_ADD						  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_ADD						  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT				      CHECK_TWO_GIVEN_SETS_DISJOINT				    CHECK_TWO_GIVEN_SETS_DISJOINT				  CHECK_TWO_GIVEN_SETS_DISJOINT
--							      --							    --								  --
def areDisjoint ( set1 , set2 , m , n ) :		      Disassembly of <code object areDisjoint at 0x7fbac<<unk>> d54 Disassembly of <code object arearejoint at 0x7f816a673a50, fi script_not_found : None
    for i in range ( 0 , m ) :				      2 0 SETUP_LOOP 58 ( to 60 )				    24 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( 0 , n ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    if ( set1 [ i ] == set2 [ j ] ) :		      4 LOAD_CONST 1 ( 0 )					    4 LOAD_FAST 1 ( x )						  
		return False				      6 LOAD_FAST 2 ( m )					    6 CALL_FUNCTION 1						  
    return True						      8 CALL_FUNCTION 2						    8 GET_ITER							  
							      10 GET_ITER						    >> 10 FOR_ITER 14 ( to 22 )					  
							      >> 12 FOR_ITER 44 ( to 58 )				    12 STORE_FAST 2 ( i )					  
							      14 STORE_FAST 4 ( i )					    								  
							      								    25 14 LOAD_FAST 2 ( i )					  
							      3 16 SETUP_LOOP 38 ( to 56 )				    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_GLOBAL 0 ( range )				    18 COMPARE_OP 4 ( > )					  
							      20 LOAD_CONST 1 ( 0 )					    20 POP_JUMP_IF_FALSE 10					  
							      22 LOAD_FAST 3 ( n )					    								  
							      24 CALL_FUNCTION 2					    26 22 LOAD_FAST 2 ( i )					  
							      26 GET_ITER						    24 LOAD_CONST 2 ( 1 )					  
							      >> 28 FOR_ITER 24 ( to 54 )				    26 COMPARE_OP 4 ( > )					  
							      30 STORE_FAST 5 ( j )					    28 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      4 32 LOAD_FAST 0 ( set1 )					    27 30 LOAD_FAST 2 ( i )					  
							      34 LOAD_FAST 4 ( i )					    32 LOAD_CONST 3 ( 1 )					  
							      36 BINARY_SUBSCR						    34 COMPARE_OP 4 ( > )					  
							      38 LOAD_FAST 1 ( set2 )					    36 POP_JUMP_IF_FALSE 10					  
							      40 LOAD_FAST 5 ( j )					    								  
							      42 BINARY_SUBSCR						    28 >> 38 LOAD_FAST 2 ( i )					  
							      44 COMPARE_OP 2 ( == )					    40 LOAD_CONST 4 ( > )					  
							      46 POP_JUMP_IF_FALSE 28					    42 COMPARE_OP 4 ( > )					  
							      								    44 POP_JUMP_IF_FALSE 10					  
							      5 48 LOAD_CONST 2 ( False )				    								  
							      50 RETURN_VALUE						    29 46 LOAD_FAST 2 ( i )					  
							      52 JUMP_ABSOLUTE 28					    48 LOAD_CONST 5 ( 1 )					  
							      >> 54 POP_BLOCK						    50 COMPARE_OP 4 ( > )					  
							      >> 56 JUMP_ABSOLUTE 12					    52 POP_JUMP_IF_FALSE 10					  
							      >> 58 POP_BLOCK						    								  
							      								    30 54 LOAD_FAST 2 ( i )					  
							      6 >> 60 LOAD_CONST 3 ( True )				    56 LOAD_CONST 6 ( > )					  
							      62 RETURN_VALUE NEW_LINE					    58 COMPARE_OP 4 ( > )					  
							      								    60 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    31 62 LOAD_FAST 2 ( i )					  
							      								    64 LOAD_CONST 7 ( 1 )					  
							      								    66 INPLACE_ADD						  
							      								    68 STORE_FAST 2 ( i )					  
							      								    70 JUMP_ABSOLUTE 10						  
							      								    >> 72 POP_BLOCK						  
							      								    								  
							      								    32 >> 74 LOAD_FAST 2 ( i )					  
							      								    76 LOAD_CONST 8 ( - 1 )					  
							      								    78 COMPARE_OP 4 ( > )					  
							      								    80 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    33 82 LOAD_FAST 2 ( i )					  
							      								    84 LOAD_CONST 9 ( 1 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 2 ( i )					  
							      								    90 JUMP_ABSOLUTE 10						  
							      								    >> 92 POP_BLOCK						  
							      								    >> 94 LOAD_CONST 10 ( None )				  
							      								    96 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
def countCommon ( mat , n ) :				      Disassembly of <code object countCommon at 0x7fbac0e89d20, fi Disassembly of <code object countCommon at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( mat )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 2 ( res )					    2 LOAD_METHOD 0 ( lower )					  (item)   File "main.py", line 32, in <module>	  Fi
	if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	      								    4 CALL_METHOD 0						  le "<dis>", line 2, in countCommon AttributeError:
	    res = res + 1				      3 4 SETUP_LOOP 56 ( to 62 )				    6 UNPACK_SEQUENCE 2						   'list' object has no attribute 'lower'
    return res						      6 LOAD_GLOBAL 0 ( range )					    8 STORE_FAST 1 ( n )					  
							      8 LOAD_FAST 1 ( n )					    10 STORE_FAST 2 ( v )					  
							      10 CALL_FUNCTION 1					    								  
							      12 GET_ITER						    27 12 LOAD_FAST 1 ( n )					  
							      >> 14 FOR_ITER 44 ( to 60 )				    14 LOAD_CONST 1 ( 1 )					  
							      16 STORE_FAST 3 ( i )					    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 28					  
							      4 18 LOAD_FAST 0 ( mat )					    								  
							      20 LOAD_FAST 3 ( i )					    28 20 LOAD_FAST 1 ( n )					  
							      22 BINARY_SUBSCR						    22 LOAD_CONST 1 ( 1 )					  
							      24 LOAD_FAST 3 ( i )					    24 INPLACE_ADD						  
							      26 BINARY_SUBSCR						    26 STORE_FAST 1 ( n )					  
							      28 LOAD_FAST 0 ( mat )					    								  
							      30 LOAD_FAST 3 ( i )					    29 28 LOAD_FAST 1 ( n )					  
							      32 BINARY_SUBSCR						    30 LOAD_CONST 1 ( 1 )					  
							      34 LOAD_FAST 1 ( n )					    32 INPLACE_ADD						  
							      36 LOAD_FAST 3 ( i )					    34 STORE_FAST 1 ( n )					  
							      38 BINARY_SUBTRACT					    								  
							      40 LOAD_CONST 2 ( 1 )					    30 36 LOAD_FAST 1 ( n )					  
							      42 BINARY_SUBTRACT					    38 LOAD_CONST 1 ( 1 )					  
							      44 BINARY_SUBSCR						    40 INPLACE_ADD						  
							      46 COMPARE_OP 2 ( == )					    42 STORE_FAST 1 ( n )					  
							      48 POP_JUMP_IF_FALSE 14					    								  
							      								    31 44 LOAD_FAST 1 ( n )					  
							      5 50 LOAD_FAST 2 ( res )					    46 LOAD_CONST 1 ( 1 )					  
							      52 LOAD_CONST 2 ( 1 )					    48 INPLACE_ADD						  
							      54 BINARY_ADD						    50 STORE_FAST 1 ( n )					  
							      56 STORE_FAST 2 ( res )					    								  
							      58 JUMP_ABSOLUTE 14					    32 52 LOAD_FAST 1 ( n )					  
							      >> 60 POP_BLOCK						    54 LOAD_CONST 1 ( 1 )					  
							      								    56 INPLACE_ADD						  
							      6 >> 62 LOAD_FAST 2 ( res )				    58 STORE_FAST 1 ( n )					  
							      64 RETURN_VALUE NEW_LINE					    								  
							      								    33 60 LOAD_FAST 1 ( n )					  
							      								    62 LOAD_CONST 1 ( 1 )					  
							      								    64 INPLACE_ADD						  
							      								    66 STORE_FAST 1 ( n )					  
							      								    								  
							      								    34 68 LOAD_FAST 1 ( n )					  
							      								    70 LOAD_CONST 1 ( 1 )					  
							      								    72 INPLACE_ADD						  
							      								    74 STORE_FAST 1 ( n )					  
							      								    								  
							      								    35 76 LOAD_FAST 1 ( n )					  
							      								    78 LOAD_CONST 1 ( 1 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( n )					  
							      								    								  
							      								    36 84 LOAD_FAST 1 ( n )					  
							      								    86 LOAD_CONST 1 ( 1 )					  
							      								    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( n )					  
							      								    								  
							      								    37 92 LOAD_FAST 1 ( n )					  
							      								    94 LOAD_CONST 1 ( 1 )					  
							      								    96 INPLACE_ADD						  
							      								    98 STORE_FAST 1 ( n )					  
							      								    								  
							      								    38 100 LOAD_FAST 1 ( n )					  
							      								    102 LOAD_FAST 1 ( n )					  
							      								    104 INPLACE_ADD						  
							      								    106 STORE_FAST 1 ( n )					  
							      								    108 JUMP_FORWARD 4 ( to 112 )				  
							      								    								  
							      								    39 >> 110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_FAST 1 ( n )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 >> 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_FAST 1 ( n )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 1 ( n )					  
							      								    130 INPLACE_ADD						  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 >> 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 INPLACE_ADD						  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    43 146 LOAD_FAST 1 ( n )					  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
def findRepeating ( arr , n ) :				      Disassembly of <code object findRepeating at 0x7fbac0e89d20,  Disassembly of <code object findRepeating at 0x7f816a673a50,  script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    26 0 LOAD_GLOBAL 0 ( set )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	if arr [ i ] in s :				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 1 ( n )					  
	    return arr [ i ]				      								    								  
	s.add ( arr [ i ] )				      3 6 SETUP_LOOP 50 ( to 58 )				    27 6 LOAD_FAST 1 ( n )					  
    rteurn - 1						      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_FAST 0 ( arr )					  
							      10 LOAD_FAST 1 ( n )					    10 COMPARE_OP 6 ( in )					  
							      12 CALL_FUNCTION 1					    12 POP_JUMP_IF_FALSE 20					  
							      14 GET_ITER						    								  
							      >> 16 FOR_ITER 38 ( to 56 )				    28 14 LOAD_FAST 1 ( n )					  
							      18 STORE_FAST 3 ( i )					    16 LOAD_FAST 0 ( arr )					  
							      								    18 COMPARE_OP 6 ( in )					  
							      4 20 LOAD_FAST 0 ( arr )					    20 POP_JUMP_IF_FALSE 26					  
							      22 LOAD_FAST 3 ( i )					    								  
							      24 BINARY_SUBSCR						    29 22 LOAD_FAST 1 ( n )					  
							      26 LOAD_FAST 2 ( s )					    24 LOAD_FAST 0 ( arr )					  
							      28 COMPARE_OP 6 ( in )					    26 COMPARE_OP 6 ( in )					  
							      30 POP_JUMP_IF_FALSE 40					    28 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 32 LOAD_FAST 0 ( arr )					    30 30 LOAD_FAST 1 ( n )					  
							      34 LOAD_FAST 3 ( i )					    32 LOAD_FAST 0 ( arr )					  
							      36 BINARY_SUBSCR						    34 COMPARE_OP 6 ( in )					  
							      38 RETURN_VALUE						    36 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 >> 40 LOAD_FAST 2 ( s )					    31 38 LOAD_FAST 1 ( n )					  
							      42 LOAD_METHOD 2 ( add )					    40 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 0 ( arr )					    42 COMPARE_OP 6 ( in )					  
							      46 LOAD_FAST 3 ( i )					    44 POP_JUMP_IF_FALSE 44					  
							      48 BINARY_SUBSCR						    								  
							      50 CALL_METHOD 1						    32 46 LOAD_FAST 1 ( n )					  
							      52 POP_TOP						    48 LOAD_FAST 0 ( arr )					  
							      54 JUMP_ABSOLUTE 16					    50 COMPARE_OP 6 ( in )					  
							      >> 56 POP_BLOCK						    52 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 >> 58 LOAD_GLOBAL 3 ( rteurn )				    33 54 LOAD_FAST 1 ( n )					  
							      60 LOAD_CONST 1 ( 1 )					    56 LOAD_FAST 0 ( arr )					  
							      62 BINARY_SUBTRACT					    58 COMPARE_OP 6 ( in )					  
							      64 POP_TOP						    60 POP_JUMP_IF_FALSE 60					  
							      66 LOAD_CONST 0 ( None )					    								  
							      68 RETURN_VALUE NEW_LINE					    34 62 LOAD_FAST 1 ( n )					  
							      								    64 LOAD_FAST 0 ( arr )					  
							      								    66 COMPARE_OP 6 ( in )					  
							      								    68 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    35 70 LOAD_FAST 1 ( n )					  
							      								    72 LOAD_FAST 0 ( arr )					  
							      								    74 COMPARE_OP 6 ( in )					  
							      								    76 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    36 78 LOAD_FAST 1 ( n )					  
							      								    80 LOAD_FAST 0 ( arr )					  
							      								    82 COMPARE_OP 6 ( in )					  
							      								    84 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    37 >> 86 LOAD_FAST 1 ( n )					  
							      								    88 LOAD_FAST 0 ( arr )					  
							      								    90 COMPARE_OP 6 ( in )					  
							      								    92 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    38 94 LOAD_FAST 1 ( n )					  
							      								    96 LOAD_FAST 0 ( arr )					  
							      								    98 COMPARE_OP 6 ( in )					  
							      								    100 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    39 102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_FAST 0 ( arr )					  
							      								    106 COMPARE_OP 6 ( in )					  
							      								    108 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    40 110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_FAST 0 ( arr )					  
							      								    114 COMPARE_OP 6 ( in )					  
							      								    116 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    41 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_FAST 0 ( arr )					  
							      								    122 COMPARE_OP 6 ( in )					  
							      								    124 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    42 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 0 ( arr )					  
							      								    130 COMPARE_OP 6 ( in )					  
							      								    132 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_FAST 0 ( arr )					  
							      								    138 COMPARE_OP 6 ( in )					  
							      								    140 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    44 142 LOAD_FAST 1 ( n )					  
							      								    144 RETURN_VALUE						  
							      								    								  
							      								    46 >> 146 LOAD_FAST 1					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA
--							      --							    --								  --
def russianPeasant ( a , b ) :				      Disassembly of <code object russianPeasant at 0x7fbac<<unk>>  Disassembly of <code object russianPePePeant at 0x7f816a673a5 error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    31 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( b > 0 ) :					      2 STORE_FAST 2 ( res )					    2 STORE_FAST 1 ( b )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( b & 1 ) :					      								    								  le "<dis>", line 2, in russianPeasant TypeError: '
	    res = res + a				      3 4 SETUP_LOOP 44 ( to 50 )				    32 4 SETUP_LOOP 22 ( to 28 )				  int' object is not iterable
	a = a << 1					      >> 6 LOAD_FAST 1 ( b )					    6 LOAD_FAST 0 ( a )						  
	b = b >> 1					      8 LOAD_CONST 1 ( 0 )					    8 GET_ITER							  
    return res						      10 COMPARE_OP 4 ( > )					    >> 10 FOR_ITER 14 ( to 26 )					  
							      12 POP_JUMP_IF_FALSE 48					    12 STORE_FAST 2 ( a )					  
							      								    								  
							      4 14 LOAD_FAST 1 ( b )					    33 14 LOAD_FAST 1 ( b )					  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_METHOD 0 ( append )					  
							      18 BINARY_AND						    18 LOAD_FAST 2 ( a )					  
							      20 POP_JUMP_IF_FALSE 30					    20 CALL_METHOD 1						  
							      								    22 POP_TOP							  
							      5 22 LOAD_FAST 2 ( res )					    24 JUMP_ABSOLUTE 10						  
							      24 LOAD_FAST 0 ( a )					    >> 26 POP_BLOCK						  
							      26 BINARY_ADD						    >> 28 LOAD_CONST 2 ( None )					  
							      28 STORE_FAST 2 ( res )					    30 RETURN_VALUE						  
							      								    NEW_LINE							  
							      6 >> 30 LOAD_FAST 0 ( a )					    								  
							      32 LOAD_CONST 2 ( 1 )					    								  
							      34 BINARY_LSHIFT						    								  
							      36 STORE_FAST 0 ( a )					    								  
							      								    								  
							      7 38 LOAD_FAST 1 ( b )					    								  
							      40 LOAD_CONST 2 ( 1 )					    								  
							      42 BINARY_RSHIFT						    								  
							      44 STORE_FAST 1 ( b )					    								  
							      46 JUMP_ABSOLUTE 6					    								  
							      >> 48 POP_BLOCK						    								  
							      								    								  
							      8 >> 50 LOAD_FAST 2 ( res )				    								  
							      52 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS	      MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		    MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		  MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS
--							      --							    --								  --
def findMinSum ( a , b , n ) :				      Disassembly of <code object findMinSum at 0x7fbac<<unk>> d540 Disassembly of <code object findMinSum at 0x7f816a6e4b70, fil script_not_found : None
    a.sort ( )						      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 0 ( a )					  
    b.sort ( )						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    sum = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
    for i in range ( n ) :				      6 POP_TOP							    6 STORE_FAST 1 ( b )					  
	sum = sum + abs ( a [ i ] - b [ i ] )		      								    								  
    return sum						      3 8 LOAD_FAST 1 ( b )					    27 8 LOAD_FAST 1 ( b )					  
							      10 LOAD_METHOD 0 ( sort )					    10 LOAD_METHOD 1 ( sort )					  
							      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
							      14 POP_TOP						    14 STORE_FAST 2 ( a )					  
							      								    								  
							      4 16 LOAD_CONST 1 ( 0 )					    28 16 LOAD_FAST 0 ( a )					  
							      18 STORE_FAST 3 ( sum )					    18 LOAD_METHOD 2 ( sort )					  
							      								    20 CALL_METHOD 0						  
							      5 20 SETUP_LOOP 40 ( to 62 )				    22 POP_TOP							  
							      22 LOAD_GLOBAL 1 ( range )				    								  
							      24 LOAD_FAST 2 ( n )					    29 24 LOAD_FAST 0 ( a )					  
							      26 CALL_FUNCTION 1					    26 LOAD_METHOD 3 ( sort )					  
							      28 GET_ITER						    28 CALL_METHOD 0						  
							      >> 30 FOR_ITER 28 ( to 60 )				    30 POP_TOP							  
							      32 STORE_FAST 4 ( i )					    32 LOAD_CONST 0 ( None )					  
							      								    34 RETURN_VALUE						  
							      6 34 LOAD_FAST 3 ( sum )					    NEW_LINE							  
							      36 LOAD_GLOBAL 2 ( abs )					    								  
							      38 LOAD_FAST 0 ( a )					    								  
							      40 LOAD_FAST 4 ( i )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 1 ( b )					    								  
							      46 LOAD_FAST 4 ( i )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 BINARY_SUBTRACT					    								  
							      52 CALL_FUNCTION 1					    								  
							      54 BINARY_ADD						    								  
							      56 STORE_FAST 3 ( sum )					    								  
							      58 JUMP_ABSOLUTE 30					    								  
							      >> 60 POP_BLOCK						    								  
							      								    								  
							      7 >> 62 LOAD_FAST 3 ( sum )				    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      Disassembly of <code object middleOfThree at 0x7fbac<<unk>> d Disassembly of <code object middleOfThree at 0x7f816a6e4b70,  error : Traceback (most recent call last):   File
    x = a - b						      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 1 ( b )					  "XLM/dis_script.py", line 60, in <module>	exec
    y = b - c						      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( - 1 )					  (item)   File "main.py", line 36, in <module>	  Fi
    z = a - c						      4 BINARY_SUBTRACT						    4 BINARY_SUBSCR						  le "<dis>", line 2, in middleOfThree TypeError: 'i
    if x * y > 0 :					      6 STORE_FAST 3 ( x )					    6 STORE_FAST 2 ( a )					  nt' object is not subscriptable
	return b					      								    								  
    elif ( x * z > 0 ) :				      3 8 LOAD_FAST 1 ( b )					    27 8 LOAD_FAST 0 ( a )					  
	return						      10 LOAD_FAST 2 ( c )					    10 LOAD_FAST 2 ( a )					  
    else :						      12 BINARY_SUBTRACT					    12 LOAD_FAST 1 ( b )					  
	return a					      14 STORE_FAST 4 ( y )					    14 LOAD_FAST 2 ( a )					  
							      								    16 LOAD_FAST 3 ( b )					  
							      4 16 LOAD_FAST 0 ( a )					    18 LOAD_FAST 4 ( b )					  
							      18 LOAD_FAST 2 ( c )					    20 LOAD_FAST 5 ( b )					  
							      20 BINARY_SUBTRACT					    22 LOAD_FAST 6 ( b )					  
							      22 STORE_FAST 5 ( z )					    24 LOAD_FAST 7 ( b )					  
							      								    26 LOAD_FAST 8 ( b )					  
							      5 24 LOAD_FAST 3 ( x )					    28 LOAD_FAST 9 ( b )					  
							      26 LOAD_FAST 4 ( y )					    30 LOAD_FAST 10 ( b )					  
							      28 BINARY_MULTIPLY					    32 LOAD_FAST 11 ( b )					  
							      30 LOAD_CONST 1 ( 0 )					    34 LOAD_FAST 12 ( b )					  
							      32 COMPARE_OP 4 ( > )					    36 LOAD_FAST 13 ( b )					  
							      34 POP_JUMP_IF_FALSE 40					    38 LOAD_FAST 14 ( b )					  
							      								    40 LOAD_FAST 15 ( b )					  
							      6 36 LOAD_FAST 1 ( b )					    42 LOAD_FAST 16 ( b )					  
							      38 RETURN_VALUE						    44 LOAD_FAST 15 ( b )					  
							      								    46 LOAD_FAST 16 ( b )					  
							      7 >> 40 LOAD_FAST 3 ( x )					    48 LOAD_FAST 17 ( b )					  
							      42 LOAD_FAST 5 ( z )					    50 LOAD_FAST 18 ( b )					  
							      44 BINARY_MULTIPLY					    52 LOAD_FAST 19 ( b )					  
							      46 LOAD_CONST 1 ( 0 )					    54 LOAD_FAST 20 ( b )					  
							      48 COMPARE_OP 4 ( > )					    56 LOAD_FAST 21 ( b )					  
							      50 POP_JUMP_IF_FALSE 56					    58 LOAD_FAST 22 ( b )					  
							      								    60 LOAD_FAST 21 ( b )					  
							      8 52 LOAD_CONST 0 ( None )				    62 LOAD_FAST 22 ( b )					  
							      54 RETURN_VALUE						    64 LOAD_FAST 21 ( b )					  
							      								    66 LOAD_FAST 22 ( b )					  
							      10 >> 56 LOAD_FAST 0 ( a )				    68 LOAD_FAST 21 ( b )					  
							      58 RETURN_VALUE						    70 LOAD_FAST 22 ( b )					  
							      60 LOAD_CONST 0 ( None )					    72 LOAD_FAST 21 ( b )					  
							      62 RETURN_VALUE NEW_LINE					    74 LOAD_FAST 22 ( b )					  
							      								    76 LOAD_FAST 21 ( b )					  
							      								    78 LOAD_FAST 22 ( b )					  
							      								    80 LOAD_FAST 21 ( b )					  
							      								    82 LOAD_FAST 22 ( b )					  
							      								    84 LOAD_FAST 21 ( b )					  
							      								    86 LOAD_FAST 22 ( b )					  
							      								    88 LOAD_FAST 21 ( b )					  
							      								    90 LOAD_FAST 22 ( b )					  
							      								    92 LOAD_FAST 21 ( b )					  
							      								    94 LOAD_FAST 22 ( b )					  
							      								    96 LOAD_FAST 21 ( b )					  
							      								    98 LOAD_FAST 22 ( b )					  
							      								    100 LOAD_FAST 21 ( b )					  
							      								    102 LOAD_FAST 22 ( b )					  
							      								    104 LOAD_FAST 21 ( b )					  
							      								    106 LOAD_FAST 22 ( b )					  
							      								    108 LOAD_FAST 21 ( b )					  
							      								    110 LOAD_FAST 22 ( b )					  
							      								    112 LOAD_FAST 21 ( b )					  
							      								    114 BUILD_TUPLE 21						  
							      								    116 LOAD_FAST 22 ( b )					  
							      								    118 LOAD_FAST 23 ( b )					  
							      								    120 LOAD_FAST 22 ( b )					  
							      								    122 LOAD_FAST 21 ( b )					  
							      								    124 LOAD_FAST 22 ( b )					  
							      								    126 BUILD_TUPLE 21						  
							      								    128 LOAD_FAST 22 ( b )					  
							      								    130 LOAD_FAST 23 ( b )					  
							      								    132 LOAD_FAST 22 ( b )					  
							      								    134 BUILD_TUPLE 21						  
							      								    136 BUILD_TUPLE 4						  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN	      SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		    SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		  SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN
--							      --							    --								  --
def minTime ( n , k , a ) :				      Disassembly of <code object minTime at 0x7fbac0e8bc90, file " Disassembly of <code object minTime at 0x7f816a6e4b70, file " script_not_found : None
    a.sort ( reverse = True ) ;				      2 0 LOAD_FAST 2 ( a )					    26 0 LOAD_FAST 0 ( n )					  
    minTime = 0 ;					      2 LOAD_ATTR 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( 0 , n , k ) :			      4 LOAD_CONST 1 ( True )					    4 CALL_METHOD 0						  
	minTime += ( 2 * a [ i ] ) ;			      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 STORE_FAST 1 ( k )					  
    return minTime ;					      8 CALL_FUNCTION_KW 1					    								  
							      10 POP_TOP						    27 8 LOAD_FAST 1 ( k )					  
							      								    10 LOAD_CONST 1 ( 0 )					  
							      3 12 LOAD_CONST 3 ( 0 )					    12 BINARY_SUBSCR						  
							      14 STORE_FAST 3 ( minTime )				    14 STORE_FAST 2 ( v )					  
							      								    								  
							      4 16 SETUP_LOOP 36 ( to 54 )				    28 16 LOAD_FAST 2 ( v )					  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_CONST 2 ( 1 )					  
							      20 LOAD_CONST 3 ( 0 )					    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 0 ( n )					    22 STORE_FAST 3 ( v )					  
							      24 LOAD_FAST 1 ( k )					    								  
							      26 CALL_FUNCTION 3					    29 24 LOAD_FAST 3 ( v )					  
							      28 GET_ITER						    26 LOAD_CONST 3 ( 1 )					  
							      >> 30 FOR_ITER 20 ( to 52 )				    28 BINARY_SUBSCR						  
							      32 STORE_FAST 4 ( i )					    30 LOAD_FAST 1 ( k )					  
							      								    32 LOAD_CONST 4 ( 2 )					  
							      5 34 LOAD_FAST 3 ( minTime )				    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 4 ( 2 )					    36 LOAD_FAST 1 ( k )					  
							      38 LOAD_FAST 2 ( a )					    38 LOAD_CONST 5 ( 3 )					  
							      40 LOAD_FAST 4 ( i )					    40 BINARY_SUBSCR						  
							      42 BINARY_SUBSCR						    42 LOAD_FAST 1 ( k )					  
							      44 BINARY_MULTIPLY					    44 LOAD_CONST 6 ( '%s' )					  
							      46 INPLACE_ADD						    46 BINARY_SUBSCR						  
							      48 STORE_FAST 3 ( minTime )				    48 LOAD_FAST 1 ( k )					  
							      50 JUMP_ABSOLUTE 30					    50 LOAD_CONST 7 ( 3 )					  
							      >> 52 POP_BLOCK						    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 1 ( k )					  
							      6 >> 54 LOAD_FAST 3 ( minTime )				    56 LOAD_CONST 8 ( '%s' )					  
							      56 RETURN_VALUE NEW_LINE					    58 BINARY_SUBSCR						  
							      								    60 LOAD_FAST 1 ( k )					  
							      								    62 LOAD_CONST 9 ( '%s' )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 1 ( k )					  
							      								    68 LOAD_CONST 10 ( '%s' )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 LOAD_FAST 1 ( k )					  
							      								    74 LOAD_CONST 11 ( '%s' )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 1 ( k )					  
							      								    80 LOAD_CONST 12 ( '%s' )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 1 ( k )					  
							      								    86 LOAD_CONST 13 ( '%s' )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 1 ( k )					  
							      								    92 LOAD_CONST 14 ( '%s' )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( k )					  
							      								    98 LOAD_CONST 15 ( '%s' )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 1 ( k )					  
							      								    104 LOAD_CONST 16 ( '%s' )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 1 ( k )					  
							      								    110 LOAD_CONST 17 ( '%s' )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 BUILD_TUPLE 3						  
							      								    116 BINARY_MODULO						  
							      								    118 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
def printSquares ( n ) :				      Disassembly of <code object printSquares at 0x7fbac0e8bc90, f Disassembly of <code object printSquares at 0x7f816a6e4b70, f script_not_found : None
    square = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( square )				  
    odd = 1						      2 STORE_FAST 1 ( square )					    2 LOAD_CONST 1 ( 1 )					  
    for x in range ( 0 , n ) :				      								    4 LOAD_CONST 2 ( 2 )					  
	print ( square , end = " " )			      3 4 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 3 ( 3 )					  
	square = square + odd				      6 STORE_FAST 2 ( odd )					    8 LOAD_CONST 4 ( 4 )					  
	odd = odd + 2					      								    10 LOAD_CONST 5 ( 6 )					  
							      4 8 SETUP_LOOP 46 ( to 56 )				    12 LOAD_CONST 6 ( 7 )					  
							      10 LOAD_GLOBAL 0 ( range )				    14 LOAD_CONST 7 ( 8 )					  
							      12 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 8 ( 10 )					  
							      14 LOAD_FAST 0 ( n )					    18 LOAD_CONST 9 ( 4 )					  
							      16 CALL_FUNCTION 2					    20 LOAD_CONST 10 ( 8 )					  
							      18 GET_ITER						    22 LOAD_CONST 10 ( 9 )					  
							      >> 20 FOR_ITER 32 ( to 54 )				    24 LOAD_CONST 11 ( 10 )					  
							      22 STORE_FAST 3 ( x )					    26 LOAD_CONST 12 ( 11 )					  
							      								    28 LOAD_CONST 12 ( 12 )					  
							      5 24 LOAD_GLOBAL 1 ( print )				    30 LOAD_CONST 13 ( 12 )					  
							      26 LOAD_FAST 1 ( square )					    32 LOAD_CONST 14 ( 13 )					  
							      28 LOAD_CONST 3 ( ' ' )					    34 LOAD_CONST 15 ( 14 )					  
							      30 LOAD_CONST 4 ( ( 'end' , ) )				    36 LOAD_CONST 16 ( 9 )					  
							      32 CALL_FUNCTION_KW 2					    38 LOAD_CONST 17 ( 10 )					  
							      34 POP_TOP						    40 LOAD_CONST 18 ( 12 )					  
							      								    42 LOAD_CONST 17 ( 10 )					  
							      6 36 LOAD_FAST 1 ( square )				    44 LOAD_CONST 18 ( 12 )					  
							      38 LOAD_FAST 2 ( odd )					    46 LOAD_CONST 19 ( 12 )					  
							      40 BINARY_ADD						    48 LOAD_CONST 20 ( 13 )					  
							      42 STORE_FAST 1 ( square )				    50 LOAD_CONST 22 ( 14 )					  
							      								    52 LOAD_CONST 21 ( 16 )					  
							      7 44 LOAD_FAST 2 ( odd )					    54 LOAD_CONST 22 ( 14 )					  
							      46 LOAD_CONST 5 ( 2 )					    56 LOAD_CONST 23 ( 16 )					  
							      48 BINARY_ADD						    58 LOAD_CONST 22 ( 17 )					  
							      50 STORE_FAST 2 ( odd )					    60 LOAD_CONST 24 ( 18 )					  
							      52 JUMP_ABSOLUTE 20					    62 LOAD_CONST 23 ( 16 )					  
							      >> 54 POP_BLOCK						    64 LOAD_CONST 22 ( 17 )					  
							      >> 56 LOAD_CONST 0 ( None )				    66 LOAD_CONST 23 ( 16 )					  
							      58 RETURN_VALUE NEW_LINE					    68 LOAD_CONST 24 ( 18 )					  
							      								    70 LOAD_CONST 23 ( 16 )					  
							      								    72 LOAD_CONST 24 ( 18 )					  
							      								    74 LOAD_CONST 25 ( 20 )					  
							      								    76 LOAD_CONST 26 ( 19 )					  
							      								    78 LOAD_CONST 26 ( 20 )					  
							      								    80 LOAD_CONST 28 ( 18 )					  
							      								    82 LOAD_CONST 27 ( 20 )					  
							      								    84 LOAD_CONST 28 ( 19 )					  
							      								    86 LOAD_CONST 30 ( 20 )					  
							      								    88 LOAD_CONST 29 ( 22 )					  
							      								    90 LOAD_CONST 30 ( 20 )					  
							      								    92 LOAD_CONST 30 ( 21 )					  
							      								    94 LOAD_CONST 29 ( 20 )					  
							      								    96 LOAD_CONST 30 ( 20 )					  
							      								    98 LOAD_CONST 30 ( 21 )					  
							      								    100 LOAD_CONST 31 ( 20 )					  
							      								    102 LOAD_CONST 30 ( 20 )					  
							      								    104 LOAD_CONST 31 ( 22 )					  
							      								    106 LOAD_CONST 32 ( 20 )					  
							      								    108 LOAD_CONST 34 ( 21 )					  
							      								    110 LOAD_CONST 36 ( 22 )					  
							      								    112 LOAD_CONST 35 ( 20 )					  
							      								    114 LOAD_CONST 36 ( 22 )					  
							      								    116 LOAD_CONST 36 ( 20 )					  
							      								    118 LOAD_CONST 37 ( 22 )					  
							      								    120 LOAD_CONST 36 ( 20 )					  
							      								    122 LOAD_CONST 36 ( 22 )					  
							      								    124 LOAD_CONST 37 ( 20 )					  
							      								    126 LOAD_CONST 36 ( 22 )					  
							      								    128 LOAD_CONST 37 ( 20 )					  
							      								    130 LOAD_CONST 38 ( 21 )					  
							      								    132 LOAD_CONST 37 ( 20 )					  
							      								    134 LOAD_CONST 1 ( 1 )					  
							      								    136 LOAD_CONST 1 ( 1 )					  
							      								    138 LOAD_CONST 1 ( 1 )					  
							      								    140 LOAD_CONST 1 ( 1 ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
def mirrorImage ( a , b , c , x1 , y1 ) :		      Disassembly of <code object mirrorImage at 0x7fbac0e89d20, fi Disassembly of <code object mirrorImage at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )  2 0 LOAD_CONST 1 ( - 2 )					    26 0 LOAD_CONST 1 ( - 2 )					  "XLM/dis_script.py", line 59, in <module>	for
    x = temp * a + x1					      2 LOAD_FAST 0 ( a )					    2 LOAD_CONST 2 ( - 2 )					  item in run_dis_script():   File "XLM/dis_script.p
    y = temp * b + y1					      4 LOAD_FAST 3 ( x1 )					    4 BINARY_MULTIPLY						  y", line 54, in run_dis_script     hyp_co = mco.to
    return ( x , y )					      6 BINARY_MULTIPLY						    6 STORE_FAST 1 ( b )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 1 ( b )					    								  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_FAST 4 ( y1 )					    27 8 LOAD_FAST 1 ( b )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_MULTIPLY					    10 LOAD_FAST 0 ( a )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_ADD						    12 BINARY_MULTIPLY						  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_FAST 2 ( c )					    14 STORE_FAST 2 ( b )					  s is too small
							      18 BINARY_ADD						    								  
							      20 BINARY_MULTIPLY					    28 16 LOAD_FAST 1 ( b )					  
							      22 LOAD_FAST 0 ( a )					    18 LOAD_FAST 2 ( b )					  
							      24 LOAD_FAST 0 ( a )					    20 BINARY_MULTIPLY						  
							      26 BINARY_MULTIPLY					    22 LOAD_FAST 0 ( a )					  
							      28 LOAD_FAST 1 ( b )					    24 BINARY_MULTIPLY						  
							      30 LOAD_FAST 1 ( b )					    26 LOAD_FAST 0 ( a )					  
							      32 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      34 BINARY_ADD						    30 BINARY_ADD						  
							      36 BINARY_TRUE_DIVIDE					    32 RETURN_VALUE						  
							      38 STORE_FAST 5 ( temp )					    NEW_LINE							  
							      								    								  
							      3 40 LOAD_FAST 5 ( temp )					    								  
							      42 LOAD_FAST 0 ( a )					    								  
							      44 BINARY_MULTIPLY					    								  
							      46 LOAD_FAST 3 ( x1 )					    								  
							      48 BINARY_ADD						    								  
							      50 STORE_FAST 6 ( x )					    								  
							      								    								  
							      4 52 LOAD_FAST 5 ( temp )					    								  
							      54 LOAD_FAST 1 ( b )					    								  
							      56 BINARY_MULTIPLY					    								  
							      58 LOAD_FAST 4 ( y1 )					    								  
							      60 BINARY_ADD						    								  
							      62 STORE_FAST 7 ( y )					    								  
							      								    								  
							      5 64 LOAD_FAST 6 ( x )					    								  
							      66 LOAD_FAST 7 ( y )					    								  
							      68 BUILD_TUPLE 2						    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
def findRotations ( str ) :				      Disassembly of <code object findRotations at 0x7fbac<<unk>> d Disassembly of <code object findRotations at 0x7f816a6e4b70,  error : Traceback (most recent call last):   File
    tmp = str + str					      2 0 LOAD_FAST 0 ( str )					    26 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 60, in <module>	exec
    n = len ( str )					      2 LOAD_FAST 0 ( str )					    2 LOAD_METHOD 0 ( substring )				  (item)   File "main.py", line 34, in <module>	  Fi
    for i in range ( 1 , n + 1 ) :			      4 BINARY_ADD						    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in findRotations AttributeErro
	substring = tmp [ i : n ]			      6 STORE_FAST 1 ( tmp )					    6 CALL_METHOD 1						  r: 'str' object has no attribute 'substring'
	if ( str == substring ) :			      								    8 STORE_FAST 2 ( substring )				  
	    return i					      3 8 LOAD_GLOBAL 0 ( len )					    								  
    return n						      10 LOAD_FAST 0 ( str )					    27 10 LOAD_FAST 2 ( substring )				  
							      12 CALL_FUNCTION 1					    12 LOAD_CONST 1 ( 0 )					  
							      14 STORE_FAST 2 ( n )					    14 COMPARE_OP 4 ( > )					  
							      								    16 POP_JUMP_IF_FALSE 22					  
							      4 16 SETUP_LOOP 46 ( to 64 )				    18 LOAD_FAST 2 ( substring )				  
							      18 LOAD_GLOBAL 1 ( range )				    20 LOAD_CONST 1 ( 0 )					  
							      20 LOAD_CONST 1 ( 1 )					    22 COMPARE_OP 4 ( > )					  
							      22 LOAD_FAST 2 ( n )					    24 POP_JUMP_IF_FALSE 22					  
							      24 LOAD_CONST 1 ( 1 )					    								  
							      26 BINARY_ADD						    28 26 LOAD_FAST 2 ( substring )				  
							      28 CALL_FUNCTION 2					    28 LOAD_CONST 1 ( 0 )					  
							      30 GET_ITER						    30 COMPARE_OP 4 ( > )					  
							      >> 32 FOR_ITER 28 ( to 62 )				    32 POP_JUMP_IF_FALSE 22					  
							      34 STORE_FAST 3 ( i )					    								  
							      								    29 34 LOAD_FAST 2 ( substring )				  
							      5 36 LOAD_FAST 1 ( tmp )					    36 LOAD_CONST 1 ( 0 )					  
							      38 LOAD_FAST 3 ( i )					    38 COMPARE_OP 4 ( > )					  
							      40 LOAD_FAST 2 ( n )					    40 POP_JUMP_IF_FALSE 22					  
							      42 BUILD_SLICE 2						    								  
							      44 BINARY_SUBSCR						    30 42 LOAD_FAST 2 ( substring )				  
							      46 STORE_FAST 4 ( substring )				    44 LOAD_CONST 1 ( 0 )					  
							      								    46 COMPARE_OP 4 ( > )					  
							      6 48 LOAD_FAST 0 ( str )					    48 POP_JUMP_IF_FALSE 22					  
							      50 LOAD_FAST 4 ( substring )				    								  
							      52 COMPARE_OP 2 ( == )					    31 50 LOAD_FAST 2 ( substring )				  
							      54 POP_JUMP_IF_FALSE 32					    52 LOAD_CONST 1 ( 0 )					  
							      								    54 BINARY_SUBSCR						  
							      7 56 LOAD_FAST 3 ( i )					    56 LOAD_CONST 1 ( 0 )					  
							      58 RETURN_VALUE						    58 COMPARE_OP 4 ( > )					  
							      60 JUMP_ABSOLUTE 32					    60 POP_JUMP_IF_FALSE 22					  
							      >> 62 POP_BLOCK						    								  
							      								    32 62 LOAD_FAST 2 ( substring )				  
							      8 >> 64 LOAD_FAST 2 ( n )					    64 LOAD_CONST 1 ( 0 )					  
							      66 RETURN_VALUE NEW_LINE					    66 BINARY_SUBSCR						  
							      								    68 LOAD_CONST 1 ( 0 )					  
							      								    70 COMPARE_OP 4 ( > )					  
							      								    72 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    33 74 LOAD_FAST 2 ( substring )				  
							      								    76 LOAD_CONST 1 ( 0 )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 1 ( 0 )					  
							      								    82 COMPARE_OP 4 ( > )					  
							      								    84 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    34 86 LOAD_FAST 2 ( substring )				  
							      								    88 LOAD_CONST 1 ( 0 )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 1 ( 0 )					  
							      								    94 COMPARE_OP 4 ( > )					  
							      								    96 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    35 98 LOAD_FAST 2 ( substring )				  
							      								    100 LOAD_CONST 1 ( 0 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 1 ( 0 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 1 ( 0 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 1 ( 0 )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      								    116 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    36 118 LOAD_FAST 2 ( substring )				  
							      								    120 LOAD_CONST 1 ( 0 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 1 ( 0 )					  
							      								    126 COMPARE_OP 4 ( > )					  
							      								    128 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    37 130 LOAD_FAST 2 ( substring )				  
							      								    132 LOAD_CONST 1 ( 0 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 1 ( 0 )					  
							      								    138 COMPARE_OP 4 ( > )					  
							      								    140 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    38 142 LOAD_FAST 2 ( substring )				  
							      								    144 LOAD_CONST 1 ( 0 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 1 ( 0 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 RETURN_VALUE						  
							      								    >> 154 LOAD_CONST 1 ( 0 )					  
							      								    156 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
def randomize ( arr , n ) :				      Disassembly of <code object randomize at 0x7fbac<<unk>> d540, Disassembly of <code object randomize at 0x7f816afaa150, file error : /bin/bash: line 1: 25055 Segmentation faul
    for i in range ( n - 1 , 0 , - 1 ) :		      2 0 SETUP_LOOP 66 ( to 68 )				    16 0 SETUP_LOOP 24 ( to 26 )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	j = random.randint ( 0 , i + 1 )		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	      4 LOAD_FAST 1 ( n )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    return arr						      6 LOAD_CONST 1 ( 1 )					    6 CALL_FUNCTION 1						  eval_scripts/python_sa-dis_sa.test/SHUFFLE_A_GIVEN
							      8 BINARY_SUBTRACT						    8 GET_ITER							  _ARRAY.dis
							      10 LOAD_CONST 2 ( 0 )					    >> 10 FOR_ITER 14 ( to 24 )					  
							      12 LOAD_CONST 3 ( - 1 )					    12 STORE_FAST 1 ( n )					  
							      14 CALL_FUNCTION 3					    								  
							      16 GET_ITER						    17 14 LOAD_FAST 1 ( n )					  
							      >> 18 FOR_ITER 46 ( to 66 )				    16 LOAD_CONST 2 ( 1 )					  
							      20 STORE_FAST 2 ( i )					    18 COMPARE_OP 4 ( > )					  
							      								    20 POP_JUMP_IF_FALSE 10					  
							      3 22 LOAD_GLOBAL 1 ( random )				    								  
							      24 LOAD_METHOD 2 ( randint )				    18 22 LOAD_FAST 1 ( n )					  
							      26 LOAD_CONST 2 ( 0 )					    24 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_FAST 2 ( i )					    26 INPLACE_ADD						  
							      30 LOAD_CONST 1 ( 1 )					    28 STORE_FAST 1 ( n )					  
							      32 BINARY_ADD						    30 JUMP_ABSOLUTE 10						  
							      34 CALL_METHOD 2						    >> 32 POP_BLOCK						  
							      36 STORE_FAST 3 ( j )					    								  
							      								    19 >> 34 LOAD_FAST 1 ( n )					  
							      4 38 LOAD_FAST 0 ( arr )					    36 RETURN_VALUE						  
							      40 LOAD_FAST 3 ( j )					    NEW_LINE							  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 0 ( arr )					    								  
							      46 LOAD_FAST 2 ( i )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 ROT_TWO						    								  
							      52 LOAD_FAST 0 ( arr )					    								  
							      54 LOAD_FAST 2 ( i )					    								  
							      56 STORE_SUBSCR						    								  
							      58 LOAD_FAST 0 ( arr )					    								  
							      60 LOAD_FAST 3 ( j )					    								  
							      62 STORE_SUBSCR						    								  
							      64 JUMP_ABSOLUTE 18					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      5 >> 68 LOAD_FAST 0 ( arr )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
def printSquares ( n ) :				      Disassembly of <code object printSquares at 0x7fbac<<unk>> d5 Disassembly of <code object printSquares at 0x7f816a6e4b70, f script_not_found : None
    square = 0 ; prev_x = 0 ;				      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( square )				  
    for x in range ( 0 , n ) :				      2 STORE_FAST 1 ( square )					    2 LOAD_FAST 0 ( n )						  
	square = ( square + x + prev_x )		      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
	print ( square , end = " " )			      6 STORE_FAST 2 ( prev_x )					    6 BINARY_SUBSCR						  
	prev_x = x					      								    8 LOAD_GLOBAL 1 ( square )					  
							      3 8 SETUP_LOOP 46 ( to 56 )				    10 LOAD_FAST 0 ( n )					  
							      10 LOAD_GLOBAL 0 ( range )				    12 LOAD_CONST 2 ( 1 )					  
							      12 LOAD_CONST 1 ( 0 )					    14 BINARY_SUBSCR						  
							      14 LOAD_FAST 0 ( n )					    16 CALL_FUNCTION 2						  
							      16 CALL_FUNCTION 2					    18 LOAD_CONST 3 ( 1 )					  
							      18 GET_ITER						    20 BINARY_SUBSCR						  
							      >> 20 FOR_ITER 32 ( to 54 )				    22 LOAD_CONST 4 ( 2 )					  
							      22 STORE_FAST 3 ( x )					    24 BINARY_SUBSCR						  
							      								    26 LOAD_CONST 5 ( 3 )					  
							      4 24 LOAD_FAST 1 ( square )				    28 LOAD_CONST 6 ( 4 )					  
							      26 LOAD_FAST 3 ( x )					    30 BINARY_SUBSCR						  
							      28 BINARY_ADD						    32 LOAD_CONST 7 ( 3 )					  
							      30 LOAD_FAST 2 ( prev_x )					    34 LOAD_CONST 8 ( 3 )					  
							      32 BINARY_ADD						    36 LOAD_CONST 9 ( 4 )					  
							      34 STORE_FAST 1 ( square )				    38 BINARY_SUBSCR						  
							      								    40 LOAD_CONST 10 ( 3 )					  
							      5 36 LOAD_GLOBAL 1 ( print )				    42 LOAD_CONST 11 ( 4 )					  
							      38 LOAD_FAST 1 ( square )					    44 BINARY_SUBSCR						  
							      40 LOAD_CONST 2 ( ' ' )					    46 LOAD_CONST 12 ( 3 )					  
							      42 LOAD_CONST 3 ( ( 'end' , ) )				    48 LOAD_CONST 12 ( 3 )					  
							      44 CALL_FUNCTION_KW 2					    50 LOAD_CONST 12 ( 3 )					  
							      46 POP_TOP						    52 LOAD_CONST 12 ( 3 )					  
							      								    54 LOAD_CONST 13 ( 4 )					  
							      6 48 LOAD_FAST 3 ( x )					    56 BINARY_SUBSCR						  
							      50 STORE_FAST 2 ( prev_x )				    58 LOAD_CONST 14 ( 4 )					  
							      52 JUMP_ABSOLUTE 20					    60 LOAD_CONST 15 ( 4 )					  
							      >> 54 POP_BLOCK						    62 LOAD_CONST 16 ( 3 )					  
							      >> 56 LOAD_CONST 0 ( None )				    64 LOAD_CONST 17 ( 4 )					  
							      58 RETURN_VALUE NEW_LINE					    66 LOAD_CONST 18 ( 3 )					  
							      								    68 LOAD_CONST 19 ( 4 )					  
							      								    70 LOAD_CONST 20 ( 3 )					  
							      								    72 LOAD_CONST 19 ( 4 )					  
							      								    74 LOAD_CONST 20 ( 3 )					  
							      								    76 LOAD_CONST 21 ( 4 )					  
							      								    78 LOAD_CONST 22 ( 3 )					  
							      								    80 LOAD_CONST 21 ( 4 )					  
							      								    82 LOAD_CONST 22 ( 3 )					  
							      								    84 LOAD_CONST 23 ( 4 )					  
							      								    86 LOAD_CONST 22 ( 3 )					  
							      								    88 LOAD_CONST 23 ( 4 )					  
							      								    90 LOAD_CONST 22 ( 3 )					  
							      								    92 LOAD_CONST 23 ( 4 )					  
							      								    94 LOAD_CONST 22 ( 3 )					  
							      								    96 LOAD_CONST 23 ( 4 )					  
							      								    98 LOAD_CONST 22 ( 3 )					  
							      								    100 LOAD_CONST 23 ( 4 )					  
							      								    102 LOAD_CONST 22 ( 3 )					  
							      								    104 LOAD_CONST 23 ( 4 )					  
							      								    106 LOAD_CONST 24 ( 3 )					  
							      								    108 LOAD_CONST 23 ( 4 )					  
							      								    110 LOAD_CONST 24 ( 3 )					  
							      								    112 LOAD_CONST 25 ( 4 )					  
							      								    114 LOAD_CONST 26 ( 3 )					  
							      								    116 LOAD_CONST 26 ( 3 )					  
							      								    118 LOAD_CONST 27 ( 4 )					  
							      								    120 LOAD_CONST 28 ( 3 )					  
							      								    122 LOAD_CONST 30 ( 3 )					  
							      								    124 LOAD_CONST 29 ( 4 )					  
							      								    126 LOAD_CONST 30 ( 3 )					  
							      								    128 LOAD_CONST 29 ( 4 )					  
							      								    130 LOAD_CONST 30 ( 3 )					  
							      								    132 LOAD_CONST 28 ( 3 )					  
							      								    134 LOAD_CONST 29 ( 4 )					  
							      								    136 LOAD_CONST 30 ( 3 )					  
							      								    138 LOAD_CONST 29 ( 4 )					  
							      								    140 LOAD_CONST 30 ( 3 )					  
							      								    142 LOAD_CONST 31 ( 4 )					  
							      								    144 LOAD_CONST 30 ( 3 )					  
							      								    146 LOAD_CONST 31 ( 4 )					  
							      								    148 LOAD_CONST 30 ( 3 )					  
							      								    150 LOAD_CONST 31 ( 4 ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		      SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		    SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		  SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO
--							      --							    --								  --
def section ( x1 , x2 , y1 , y2 , m , n ) :		      Disassembly of <code object section at 0x7fbac<<unk>> d540, f Disassembly of <code object section at 0x7f816a683d20, file " script_not_found : None
    x = ( float ) ( ( n * x1 ) + ( m * x2 ) ) / ( m + n )     2 0 LOAD_GLOBAL 0 ( float )				    754 0 LOAD_FAST 0 ( x1 )					  
    y = ( float ) ( ( n * y1 ) + ( m * y2 ) ) / ( m + n )     2 LOAD_FAST 5 ( n )					    2 LOAD_CONST 1 ( 2 )					  
    print ( x , y )					      4 LOAD_FAST 0 ( x1 )					    4 BINARY_MULTIPLY						  
							      6 BINARY_MULTIPLY						    6 LOAD_FAST 1 ( x2 )					  
							      8 LOAD_FAST 4 ( m )					    8 BINARY_MULTIPLY						  
							      10 LOAD_FAST 1 ( x2 )					    10 LOAD_FAST 2 ( x2 )					  
							      12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 1					    16 RETURN_VALUE						  
							      18 LOAD_FAST 4 ( m )					    NEW_LINE							  
							      20 LOAD_FAST 5 ( n )					    								  
							      22 BINARY_ADD						    								  
							      24 BINARY_TRUE_DIVIDE					    								  
							      26 STORE_FAST 6 ( x )					    								  
							      								    								  
							      3 28 LOAD_GLOBAL 0 ( float )				    								  
							      30 LOAD_FAST 5 ( n )					    								  
							      32 LOAD_FAST 2 ( y1 )					    								  
							      34 BINARY_MULTIPLY					    								  
							      36 LOAD_FAST 4 ( m )					    								  
							      38 LOAD_FAST 3 ( y2 )					    								  
							      40 BINARY_MULTIPLY					    								  
							      42 BINARY_ADD						    								  
							      44 CALL_FUNCTION 1					    								  
							      46 LOAD_FAST 4 ( m )					    								  
							      48 LOAD_FAST 5 ( n )					    								  
							      50 BINARY_ADD						    								  
							      52 BINARY_TRUE_DIVIDE					    								  
							      54 STORE_FAST 7 ( y )					    								  
							      								    								  
							      4 56 LOAD_GLOBAL 1 ( print )				    								  
							      58 LOAD_FAST 6 ( x )					    								  
							      60 LOAD_FAST 7 ( y )					    								  
							      62 CALL_FUNCTION 2					    								  
							      64 POP_TOP						    								  
							      66 LOAD_CONST 0 ( None )					    								  
							      68 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS     SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	    SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS
--							      --							    --								  --
def getTotalNumberOfSequences ( m , n ) :		      Disassembly of <code object getTotalNumberOfSequences at 0x7f Disassembly of <code object getTotalTotalSequences at 0x7f816 error : Traceback (most recent call last):   File
    if m < n :						      2 0 LOAD_FAST 0 ( m )					    26 0 LOAD_FAST 0 ( m )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_FAST 1 ( n )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 33, in <module>	  Fi
    if n == 0 :						      4 COMPARE_OP 0 ( < )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in getTotalNumberOfSequences T
	return 1					      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( n )					  ypeError: 'int' object is not subscriptable
    res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTota 								    								  
    return res						      3 8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 1 ( n )					  
							      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
							      								    12 BINARY_SUBSCR						  
							      4 >> 12 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( n )					  
							      14 LOAD_CONST 1 ( 0 )					    								  
							      16 COMPARE_OP 2 ( == )					    28 16 LOAD_FAST 2 ( n )					  
							      18 POP_JUMP_IF_FALSE 24					    18 LOAD_CONST 3 ( 1 )					  
							      								    20 BINARY_SUBSCR						  
							      5 20 LOAD_CONST 2 ( 1 )					    22 STORE_FAST 3 ( n )					  
							      22 RETURN_VALUE						    								  
							      								    29 24 LOAD_FAST 1 ( n )					  
							      6 >> 24 LOAD_GLOBAL 0 ( getTotalNumberOfSequences )	    26 LOAD_CONST 4 ( 1 )					  
							      26 LOAD_FAST 0 ( m )					    28 BINARY_SUBSCR						  
							      28 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 5 ( 1 )					  
							      30 BINARY_SUBTRACT					    32 BINARY_SUBSCR						  
							      32 LOAD_FAST 1 ( n )					    34 LOAD_CONST 6 ( 2 )					  
							      34 CALL_FUNCTION 2					    36 BINARY_SUBSCR						  
							      36 LOAD_GLOBAL 0 ( getTotalNumberOfSequences )		    38 STORE_FAST 4 ( n )					  
							      38 LOAD_FAST 0 ( m )					    								  
							      40 LOAD_CONST 3 ( 2 )					    30 40 LOAD_FAST 0 ( m )					  
							      42 BINARY_FLOOR_DIVIDE					    42 LOAD_CONST 7 ( 1 )					  
							      44 LOAD_FAST 1 ( n )					    44 BINARY_SUBSCR						  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_FAST 3 ( n )					  
							      48 BINARY_SUBTRACT					    48 LOAD_CONST 8 ( 2 )					  
							      50 CALL_FUNCTION 2					    50 BINARY_SUBSCR						  
							      52 BINARY_ADD						    52 LOAD_CONST 9 ( 1 )					  
							      54 STORE_FAST 2 ( res )					    54 BINARY_SUBSCR						  
							      								    56 LOAD_CONST 10 ( 2 )					  
							      7 56 LOAD_FAST 2 ( res )					    58 BINARY_SUBSCR						  
							      58 RETURN_VALUE NEW_LINE					    60 LOAD_CONST 11 ( 1 )					  
							      								    62 BINARY_SUBSCR						  
							      								    64 LOAD_CONST 12 ( 1 )					  
							      								    66 BINARY_SUBSCR						  
							      								    68 LOAD_CONST 13 ( 1 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 LOAD_CONST 14 ( 2 )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_CONST 15 ( 1 )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 16 ( 2 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_CONST 17 ( 1 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_CONST 16 ( 2 )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 17 ( 1 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 18 ( 1 )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_CONST 16 ( 2 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 17 ( 1 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 18 ( 1 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 19 ( 1 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 20 ( 2 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 21 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 22 ( 2 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 21 ( 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 22 ( 2 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 23 ( 1 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 22 ( 2 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 23 ( 1 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 22 ( 2 )					  
							      								    150 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 23 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 22 ( 2 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 23 ( 1 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 24 ( 2 )					  
							      								    164 BINARY_SUBSCR						  
							      								    166 LOAD_CONST 23 ( 1 )					  
							      								    168 BINARY_SUBSCR						  
							      								    170 LOAD_CONST 24 ( 2 )					  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 25 ( 2 )					  
							      								    176 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 24 ( 2 )					  
							      								    176 BINARY_SUBSCR						  
							      								    178 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
def minimum_cost ( a , n ) :				      Disassembly of <code object minimum_cost at 0x7fbac<<unk>> de Disassembly of <code object minimum_cost at 0x7f816a673a50, f error : /bin/bash: line 1: 25073 Segmentation faul
    mn = sys.maxsize					      2 0 LOAD_GLOBAL 0 ( sys )					    26 0 LOAD_GLOBAL 0 ( sys )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    sum = 0						      2 LOAD_ATTR 1 ( maxsize )					    2 LOAD_ATTR 1 ( maxsize )					  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( n ) :				      4 STORE_FAST 2 ( mn )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	mn = min ( a [ i ] , mn )			      								    6 COMPARE_OP 4 ( > )					  eval_scripts/python_sa-dis_sa.test/MINIMUM_COST_CO
	sum += a [ i ]					      3 6 LOAD_CONST 1 ( 0 )					    8 POP_JUMP_IF_FALSE 20					  NNECT_WEIGHTED_NODES_REPRESENTED_ARRAY.dis
    return mn * ( sum - mn )				      8 STORE_FAST 3 ( sum )					    								  
							      								    27 10 LOAD_GLOBAL 2 ( max )					  
							      4 10 SETUP_LOOP 42 ( to 54 )				    12 LOAD_FAST 0 ( a )					  
							      12 LOAD_GLOBAL 2 ( range )				    14 CALL_FUNCTION 1						  
							      14 LOAD_FAST 1 ( n )					    16 STORE_FAST 1 ( n )					  
							      16 CALL_FUNCTION 1					    								  
							      18 GET_ITER						    28 18 LOAD_FAST 1 ( n )					  
							      >> 20 FOR_ITER 30 ( to 52 )				    20 LOAD_CONST 2 ( 1 )					  
							      22 STORE_FAST 4 ( i )					    22 COMPARE_OP 4 ( > )					  
							      								    24 POP_JUMP_IF_FALSE 30					  
							      5 24 LOAD_GLOBAL 3 ( min )				    								  
							      26 LOAD_FAST 0 ( a )					    29 26 LOAD_FAST 1 ( n )					  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_CONST 3 ( 1 )					  
							      30 BINARY_SUBSCR						    30 INPLACE_ADD						  
							      32 LOAD_FAST 2 ( mn )					    32 STORE_FAST 1 ( n )					  
							      34 CALL_FUNCTION 2					    								  
							      36 STORE_FAST 2 ( mn )					    30 >> 34 LOAD_FAST 1 ( n )					  
							      								    36 LOAD_CONST 4 ( - 1 )					  
							      6 38 LOAD_FAST 3 ( sum )					    38 INPLACE_ADD						  
							      40 LOAD_FAST 0 ( a )					    40 STORE_FAST 1 ( n )					  
							      42 LOAD_FAST 4 ( i )					    								  
							      44 BINARY_SUBSCR						    31 42 LOAD_FAST 1 ( n )					  
							      46 INPLACE_ADD						    44 LOAD_CONST 5 ( 1 )					  
							      48 STORE_FAST 3 ( sum )					    46 INPLACE_ADD						  
							      50 JUMP_ABSOLUTE 20					    48 STORE_FAST 1 ( n )					  
							      >> 52 POP_BLOCK						    								  
							      								    32 50 LOAD_FAST 1 ( n )					  
							      7 >> 54 LOAD_FAST 2 ( mn )				    52 LOAD_CONST 6 ( 2 )					  
							      56 LOAD_FAST 3 ( sum )					    54 INPLACE_ADD						  
							      58 LOAD_FAST 2 ( mn )					    56 STORE_FAST 1 ( n )					  
							      60 BINARY_SUBTRACT					    								  
							      62 BINARY_MULTIPLY					    33 58 LOAD_FAST 1 ( n )					  
							      64 RETURN_VALUE NEW_LINE					    60 LOAD_CONST 7 ( 2 )					  
							      								    62 INPLACE_ADD						  
							      								    64 STORE_FAST 1 ( n )					  
							      								    								  
							      								    34 66 LOAD_FAST 1 ( n )					  
							      								    68 LOAD_CONST 8 ( 2 )					  
							      								    70 INPLACE_ADD						  
							      								    72 STORE_FAST 1 ( n )					  
							      								    74 JUMP_FORWARD 4 ( to 78 )					  
							      								    								  
							      								    35 >> 76 LOAD_FAST 1 ( n )					  
							      								    78 LOAD_CONST 9 ( 2 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( n )					  
							      								    								  
							      								    36 84 LOAD_FAST 1 ( n )					  
							      								    86 LOAD_CONST 10 ( 2 )					  
							      								    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( n )					  
							      								    								  
							      								    37 >> 92 LOAD_FAST 1 ( n )					  
							      								    94 LOAD_FAST 0 ( a )					  
							      								    96 LOAD_FAST 0 ( a )					  
							      								    98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_FAST 2 ( n )					  
							      								    102 LOAD_FAST 2 ( n )					  
							      								    104 BUILD_TUPLE 3						  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( n )					  
							      								    								  
							      								    38 110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_FAST 0 ( a )					  
							      								    114 LOAD_FAST 2 ( n )					  
							      								    116 BUILD_TUPLE 3						  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( n )					  
							      								    								  
							      								    39 122 LOAD_FAST 1 ( n )					  
							      								    124 LOAD_FAST 2 ( n )					  
							      								    126 BUILD_TUPLE 3						  
							      								    128 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
def isPrime ( n , i = 2 ) :				      Disassembly of <code object isPrime at 0x7fbac0e89d20, file " Disassembly of <code object isPrime at 0x7f816a6e4b70, file " script_not_found : None
    if ( n <= 2 ) :					      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
	return True if ( n == 2 ) else False		      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  
    if ( n % i == 0 ) :					      4 COMPARE_OP 1 ( <= )					    4 BINARY_MULTIPLY						  
	return False					      6 POP_JUMP_IF_FALSE 24					    6 LOAD_FAST 0 ( n )						  
    if ( i * i > n ) :					      								    8 LOAD_CONST 2 ( 2 )					  
	return true					      3 8 LOAD_FAST 0 ( n )					    10 BINARY_MULTIPLY						  
    return isPrime ( n , i + 1 )			      10 LOAD_CONST 1 ( 2 )					    12 LOAD_CONST 3 ( 3 )					  
							      12 COMPARE_OP 2 ( == )					    14 BINARY_MULTIPLY						  
							      14 POP_JUMP_IF_FALSE 20					    16 LOAD_CONST 4 ( - 2 )					  
							      16 LOAD_CONST 2 ( True )					    18 BINARY_MULTIPLY						  
							      18 RETURN_VALUE						    20 LOAD_CONST 5 ( 2 )					  
							      >> 20 LOAD_CONST 3 ( False )				    22 BINARY_MULTIPLY						  
							      22 RETURN_VALUE						    24 LOAD_CONST 6 ( 3 )					  
							      								    26 BINARY_MULTIPLY						  
							      4 >> 24 LOAD_FAST 0 ( n )					    28 LOAD_CONST 7 ( - 1 )					  
							      26 LOAD_FAST 1 ( i )					    30 BINARY_MULTIPLY						  
							      28 BINARY_MODULO						    32 BINARY_ADD						  
							      30 LOAD_CONST 4 ( 0 )					    34 LOAD_CONST 8 ( - 1 )					  
							      32 COMPARE_OP 2 ( == )					    36 BINARY_MULTIPLY						  
							      34 POP_JUMP_IF_FALSE 40					    38 LOAD_FAST 0 ( n )					  
							      								    40 BINARY_MULTIPLY						  
							      5 36 LOAD_CONST 3 ( False )				    42 BINARY_ADD						  
							      38 RETURN_VALUE						    44 BINARY_MULTIPLY						  
							      								    46 BINARY_ADD						  
							      6 >> 40 LOAD_FAST 1 ( i )					    48 RETURN_VALUE						  
							      42 LOAD_FAST 1 ( i )					    NEW_LINE							  
							      44 BINARY_MULTIPLY					    								  
							      46 LOAD_FAST 0 ( n )					    								  
							      48 COMPARE_OP 4 ( > )					    								  
							      50 POP_JUMP_IF_FALSE 56					    								  
							      								    								  
							      7 52 LOAD_GLOBAL 0 ( true )				    								  
							      54 RETURN_VALUE						    								  
							      								    								  
							      8 >> 56 LOAD_GLOBAL 1 ( isPrime )				    								  
							      58 LOAD_FAST 0 ( n )					    								  
							      60 LOAD_FAST 1 ( i )					    								  
							      62 LOAD_CONST 5 ( 1 )					    								  
							      64 BINARY_ADD						    								  
							      66 CALL_FUNCTION 2					    								  
							      68 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				      EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				    EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				  EQUILIBRIUM_INDEX_OF_AN_ARRAY_1
--							      --							    --								  --
def equilibrium ( arr ) :				      Disassembly of <code object equilibrium at 0x7fbac<<unk>> de4 Disassembly of <code object equilibrium at 0x7f816a673a50, fi script_not_found : None
    total_sum = sum ( arr )				      2 0 LOAD_GLOBAL 0 ( sum )					    69 0 LOAD_FAST 0 ( arr )					  
    leftsum = 0						      2 LOAD_FAST 0 ( arr )					    2 LOAD_METHOD 0 ( total_sum )				  
    for i , num in enumerate ( arr ) :			      4 CALL_FUNCTION 1						    4 CALL_METHOD 0						  
	total_sum -= num				      6 STORE_FAST 1 ( total_sum )				    6 STORE_FAST 1 ( num )					  
	if leftsum == total_sum :			      								    								  
	    return i					      3 8 LOAD_CONST 1 ( 0 )					    70 8 LOAD_FAST 1 ( num )					  
	leftsum += num					      10 STORE_FAST 2 ( leftsum )				    10 LOAD_CONST 1 ( 0 )					  
    return - 1						      								    12 BINARY_SUBSCR						  
							      4 12 SETUP_LOOP 48 ( to 62 )				    14 STORE_FAST 2 ( num )					  
							      14 LOAD_GLOBAL 1 ( enumerate )				    								  
							      16 LOAD_FAST 0 ( arr )					    71 16 LOAD_FAST 2 ( num )					  
							      18 CALL_FUNCTION 1					    18 LOAD_CONST 2 ( 0 )					  
							      20 GET_ITER						    20 BINARY_SUBSCR						  
							      >> 22 FOR_ITER 36 ( to 60 )				    22 STORE_FAST 3 ( num )					  
							      24 UNPACK_SEQUENCE 2					    								  
							      26 STORE_FAST 3 ( i )					    72 24 LOAD_FAST 3 ( num )					  
							      28 STORE_FAST 4 ( num )					    26 LOAD_CONST 3 ( 1 )					  
							      								    28 BINARY_SUBSCR						  
							      5 30 LOAD_FAST 1 ( total_sum )				    30 STORE_FAST 4 ( num )					  
							      32 LOAD_FAST 4 ( num )					    								  
							      34 INPLACE_SUBTRACT					    73 32 LOAD_FAST 0 ( arr )					  
							      36 STORE_FAST 1 ( total_sum )				    34 LOAD_FAST 4 ( num )					  
							      								    36 LOAD_CONST 4 ( 1 )					  
							      6 38 LOAD_FAST 2 ( leftsum )				    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 1 ( total_sum )				    40 LOAD_FAST 2 ( num )					  
							      42 COMPARE_OP 2 ( == )					    42 LOAD_CONST 5 ( 2 )					  
							      44 POP_JUMP_IF_FALSE 50					    44 BINARY_SUBSCR						  
							      								    46 LOAD_FAST 3 ( num )					  
							      7 46 LOAD_FAST 3 ( i )					    48 LOAD_CONST 6 ( 1 )					  
							      48 RETURN_VALUE						    50 BINARY_SUBSCR						  
							      								    52 LOAD_FAST 4 ( num )					  
							      8 >> 50 LOAD_FAST 2 ( leftsum )				    54 LOAD_CONST 7 ( 3 )					  
							      52 LOAD_FAST 4 ( num )					    56 BINARY_SUBSCR						  
							      54 INPLACE_ADD						    58 LOAD_FAST 4 ( num )					  
							      56 STORE_FAST 2 ( leftsum )				    60 LOAD_CONST 8 ( 1 )					  
							      58 JUMP_ABSOLUTE 22					    62 BINARY_SUBSCR						  
							      >> 60 POP_BLOCK						    64 BINARY_ADD						  
							      								    66 LOAD_FAST 4 ( num )					  
							      9 >> 62 LOAD_CONST 2 ( - 1 )				    68 LOAD_CONST 9 ( 1 )					  
							      64 RETURN_VALUE NEW_LINE					    70 BINARY_SUBSCR						  
							      								    72 LOAD_FAST 4 ( num )					  
							      								    74 LOAD_CONST 10 ( 4 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 4 ( num )					  
							      								    80 LOAD_CONST 11 ( 1 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 4 ( num )					  
							      								    86 LOAD_CONST 12 ( 2 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 4 ( num )					  
							      								    92 LOAD_CONST 13 ( 1 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 14 ( 2 )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 4 ( num )					  
							      								    102 LOAD_CONST 15 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 16 ( 2 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 17 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 4 ( num )					  
							      								    116 LOAD_CONST 16 ( 4 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 17 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 18 ( 2 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 4 ( num )					  
							      								    130 LOAD_CONST 19 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 4 ( num )					  
							      								    138 LOAD_CONST 20 ( 2 )					  
							      								    140 STORE_SUBSCR						  
							      								    								  
							      								    71 142 LOAD_FAST 0 ( arr )					  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
def selectRandom ( x ) :				      Disassembly of <code object selectRandom at 0x7fbac0e8bc90, f Disassembly of <code object selectRandom at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    res = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    31 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    count = 0 ;						      2 STORE_FAST 1 ( res )					    2 LOAD_CONST 2 ( ( 'count' , ) )				  (item)   File "main.py", line 37, in <module>	  Fi
    count += 1 ;					      								    4 IMPORT_NAME 0 ( random . random )				  le "<dis>", line 2, in selectRandom ModuleNotFound
    if ( count == 1 ) :					      3 4 LOAD_CONST 1 ( 0 )					    6 IMPORT_FROM 1 ( count )					  Error: No module named 'random '
	res = x ;					      6 STORE_FAST 2 ( count )					    8 STORE_FAST 1 ( count )					  
    else :						      								    10 POP_TOP							  
	i = random.randrange ( count ) ;		      4 8 LOAD_FAST 2 ( count )					    								  
	if ( i == count - 1 ) :				      10 LOAD_CONST 2 ( 1 )					    32 12 LOAD_FAST 1 ( count )					  
	    res = x ;					      12 INPLACE_ADD						    14 LOAD_CONST 3 ( 1 )					  
    return res ;					      14 STORE_FAST 2 ( count )					    16 LOAD_CONST 4 ( 2 )					  
							      								    18 COMPARE_OP 2 ( == )					  
							      5 16 LOAD_FAST 2 ( count )				    20 POP_JUMP_IF_FALSE 30					  
							      18 LOAD_CONST 2 ( 1 )					    								  
							      20 COMPARE_OP 2 ( == )					    33 22 LOAD_FAST 1 ( count )					  
							      22 POP_JUMP_IF_FALSE 30					    24 LOAD_CONST 5 ( 1 )					  
							      								    26 LOAD_CONST 6 ( 2 )					  
							      6 24 LOAD_FAST 0 ( x )					    28 BUILD_SLICE 2						  
							      26 STORE_FAST 1 ( res )					    30 BINARY_SUBSCR						  
							      28 JUMP_FORWARD 26 ( to 56 )				    32 LOAD_CONST 7 ( 3 )					  
							      								    34 COMPARE_OP 2 ( == )					  
							      8 >> 30 LOAD_GLOBAL 0 ( random )				    36 POP_JUMP_IF_FALSE 44					  
							      32 LOAD_METHOD 1 ( randrange )				    								  
							      34 LOAD_FAST 2 ( count )					    34 38 LOAD_FAST 1 ( count )					  
							      36 CALL_METHOD 1						    40 LOAD_CONST 8 ( 1 )					  
							      38 STORE_FAST 3 ( i )					    42 LOAD_CONST 9 ( 2 )					  
							      								    44 BUILD_SLICE 2						  
							      9 40 LOAD_FAST 3 ( i )					    46 BINARY_SUBSCR						  
							      42 LOAD_FAST 2 ( count )					    48 LOAD_CONST 10 ( 3 )					  
							      44 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 11 ( 2 )					  
							      46 BINARY_SUBTRACT					    52 BUILD_SLICE 2						  
							      48 COMPARE_OP 2 ( == )					    54 BINARY_SUBSCR						  
							      50 POP_JUMP_IF_FALSE 56					    56 LOAD_CONST 12 ( 2 )					  
							      								    58 BUILD_SLICE 2						  
							      10 52 LOAD_FAST 0 ( x )					    60 BINARY_SUBSCR						  
							      54 STORE_FAST 1 ( res )					    62 LOAD_CONST 13 ( 2 )					  
							      								    64 LOAD_CONST 6 ( 2 )					  
							      11 >> 56 LOAD_FAST 1 ( res )				    66 BUILD_SLICE 2						  
							      58 RETURN_VALUE NEW_LINE					    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 14 ( 2 )					  
							      								    72 BUILD_SLICE 2						  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_CONST 15 ( 3 )					  
							      								    78 BUILD_SLICE 2						  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 16 ( 3 )					  
							      								    84 LOAD_CONST 17 ( 2 )					  
							      								    86 BUILD_SLICE 2						  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 18 ( 2 )					  
							      								    92 BUILD_SLICE 2						  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 16 ( 3 )					  
							      								    98 LOAD_CONST 17 ( 2 )					  
							      								    100 BUILD_SLICE 2						  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 18 ( 2 )					  
							      								    106 BUILD_SLICE 2						  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 19 ( 2 )					  
							      								    112 BUILD_SLICE 2						  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 20 ( 3 )					  
							      								    118 BUILD_SLICE 2						  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 21 ( 2 )					  
							      								    124 BUILD_SLICE 2						  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 22 ( 2 )					  
							      								    130 BUILD_SLICE 2						  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 21 ( 2 )					  
							      								    136 BUILD_SLICE 2						  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 22 ( 2 )					  
							      								    142 BUILD_SLICE 2						  
							      								    144 BINARY_SUBSCR						  
							      								    146 BUILD_TUPLE 2						  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			      SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			    SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES				  SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES
--							      --							    --								  --
def findS ( s ) :					      Disassembly of <code object findS at 0x7fbac<<unk>> de40, fil Disassembly of <code object findS at 0x7f816a6e4b70, file "<d error : /bin/bash: line 1: 25102 Segmentation faul
    _sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( s )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    n = 1						      2 STORE_FAST 1 ( _sum )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    while ( _sum < s ) :				      								    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	_sum += n * n					      3 4 LOAD_CONST 2 ( 1 )					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/SQUARE_PYRAMIDA
	n += 1						      6 STORE_FAST 2 ( n )					    								  L_NUMBER_SUM_SQUARES.dis
    n -= 1						      								    27 8 LOAD_FAST 0 ( s )					  
    if _sum == s :					      4 8 SETUP_LOOP 32 ( to 42 )				    10 LOAD_CONST 1 ( 1 )					  
	return n					      >> 10 LOAD_FAST 1 ( _sum )				    12 COMPARE_OP 2 ( == )					  
    return - 1						      12 LOAD_FAST 0 ( s )					    14 POP_JUMP_IF_FALSE 28					  
							      14 COMPARE_OP 0 ( < )					    								  
							      16 POP_JUMP_IF_FALSE 40					    28 >> 16 LOAD_FAST 0 ( s )					  
							      								    18 LOAD_CONST 2 ( 2 )					  
							      5 18 LOAD_FAST 1 ( _sum )					    20 COMPARE_OP 2 ( == )					  
							      20 LOAD_FAST 2 ( n )					    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_FAST 2 ( n )					    								  
							      24 BINARY_MULTIPLY					    29 24 LOAD_FAST 0 ( s )					  
							      26 INPLACE_ADD						    26 LOAD_CONST 3 ( 1 )					  
							      28 STORE_FAST 1 ( _sum )					    28 INPLACE_ADD						  
							      								    30 STORE_FAST 0 ( s )					  
							      6 30 LOAD_FAST 2 ( n )					    								  
							      32 LOAD_CONST 2 ( 1 )					    30 >> 32 LOAD_FAST 0 ( s )					  
							      34 INPLACE_ADD						    34 LOAD_CONST 4 ( 2 )					  
							      36 STORE_FAST 2 ( n )					    36 COMPARE_OP 2 ( == )					  
							      38 JUMP_ABSOLUTE 10					    38 POP_JUMP_IF_FALSE 48					  
							      >> 40 POP_BLOCK						    								  
							      								    31 40 LOAD_FAST 0 ( s )					  
							      7 >> 42 LOAD_FAST 2 ( n )					    42 LOAD_CONST 5 ( 1 )					  
							      44 LOAD_CONST 2 ( 1 )					    44 INPLACE_ADD						  
							      46 INPLACE_SUBTRACT					    46 STORE_FAST 0 ( s )					  
							      48 STORE_FAST 2 ( n )					    								  
							      								    32 >> 48 LOAD_FAST 0 ( s )					  
							      8 50 LOAD_FAST 1 ( _sum )					    50 LOAD_CONST 6 ( 2 )					  
							      52 LOAD_FAST 0 ( s )					    52 INPLACE_ADD						  
							      54 COMPARE_OP 2 ( == )					    54 STORE_FAST 0 ( s )					  
							      56 POP_JUMP_IF_FALSE 62					    								  
							      								    33 56 LOAD_FAST 0 ( s )					  
							      9 58 LOAD_FAST 2 ( n )					    58 LOAD_CONST 7 ( 2 )					  
							      60 RETURN_VALUE						    60 INPLACE_ADD						  
							      								    62 STORE_FAST 0 ( s )					  
							      10 >> 62 LOAD_CONST 3 ( - 1 )				    								  
							      64 RETURN_VALUE NEW_LINE					    34 64 LOAD_FAST 0 ( s )					  
							      								    66 LOAD_CONST 8 ( 3 )					  
							      								    68 INPLACE_ADD						  
							      								    70 STORE_FAST 0 ( s )					  
							      								    								  
							      								    35 72 LOAD_FAST 0 ( s )					  
							      								    74 LOAD_CONST 9 ( 4 )					  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 0 ( s )					  
							      								    80 STORE_FAST 0 ( s )					  
							      								    82 JUMP_FORWARD 10 ( to 106 )				  
							      								    								  
							      								    36 >> 84 LOAD_FAST 0 ( s )					  
							      								    86 LOAD_FAST 0 ( s )					  
							      								    88 LOAD_FAST 0 ( s )					  
							      								    90 LOAD_FAST 0 ( s )					  
							      								    92 LOAD_FAST 0 ( s )					  
							      								    94 LOAD_FAST 0 ( s )					  
							      								    96 LOAD_FAST 0 ( s )					  
							      								    98 LOAD_FAST 1 ( s )					  
							      								    100 LOAD_FAST 0 ( s )					  
							      								    102 LOAD_FAST 0 ( s )					  
							      								    104 LOAD_FAST 0 ( s )					  
							      								    106 LOAD_FAST 1 ( s )					  
							      								    108 BUILD_TUPLE 3						  
							      								    110 BINARY_MODULO						  
							      								    112 INPLACE_ADD						  
							      								    114 STORE_FAST 0 ( s )					  
							      								    								  
							      								    37 >> 116 LOAD_FAST 0 ( s )					  
							      								    118 LOAD_FAST 0 ( s )					  
							      								    120 LOAD_FAST 0 ( s )					  
							      								    122 LOAD_FAST 0 ( s )					  
							      								    124 BUILD_TUPLE 3						  
							      								    126 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		    PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
def isPossible ( a , b , n , k ) :			      Disassembly of <code object isPossible at 0x7fbac<<unk>> d540 Disassembly of <code object isPossible at 0x7f816a673a50, fil error : Traceback (most recent call last):   File
    a.sort ( reverse = True )				      2 0 LOAD_FAST 0 ( a )					    204 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
    b.sort ( )						      2 LOAD_ATTR 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( n ) :				      4 LOAD_CONST 1 ( True )					    4 CALL_METHOD 0						  y", line 54, in run_dis_script     hyp_co = mco.to
	if ( a [ i ] + b [ i ] < k ) :			      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 STORE_FAST 1 ( b )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	    return False				      8 CALL_FUNCTION_KW 1					    								  assembler.py", line 81, in to_co     co_consts.app
    return True						      10 POP_TOP						    205 8 LOAD_FAST 1 ( b )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      								    10 LOAD_METHOD 1 ( sort )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      3 12 LOAD_FAST 1 ( b )					    12 CALL_METHOD 0						  co	 self.co_cellvars, ValueError: code: varname
							      14 LOAD_METHOD 0 ( sort )					    14 STORE_FAST 2 ( a )					  s is too small
							      16 CALL_METHOD 0						    								  
							      18 POP_TOP						    206 16 LOAD_FAST 2 ( a )					  
							      								    18 LOAD_METHOD 2 ( sort )					  
							      4 20 SETUP_LOOP 40 ( to 62 )				    20 CALL_METHOD 0						  
							      22 LOAD_GLOBAL 1 ( range )				    22 POP_TOP							  
							      24 LOAD_FAST 2 ( n )					    								  
							      26 CALL_FUNCTION 1					    207 24 LOAD_FAST 0 ( a )					  
							      28 GET_ITER						    26 LOAD_METHOD 3 ( sort )					  
							      >> 30 FOR_ITER 28 ( to 60 )				    28 CALL_METHOD 0						  
							      32 STORE_FAST 4 ( i )					    30 POP_TOP							  
							      								    32 LOAD_CONST 0 ( None )					  
							      5 34 LOAD_FAST 0 ( a )					    34 RETURN_VALUE						  
							      36 LOAD_FAST 4 ( i )					    NEW_LINE							  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 1 ( b )					    								  
							      42 LOAD_FAST 4 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 BINARY_ADD						    								  
							      48 LOAD_FAST 3 ( k )					    								  
							      50 COMPARE_OP 0 ( < )					    								  
							      52 POP_JUMP_IF_FALSE 30					    								  
							      								    								  
							      6 54 LOAD_CONST 3 ( False )				    								  
							      56 RETURN_VALUE						    								  
							      58 JUMP_ABSOLUTE 30					    								  
							      >> 60 POP_BLOCK						    								  
							      								    								  
							      7 >> 62 LOAD_CONST 1 ( True )				    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7fbac<<unk>> de Disassembly of <code object nextPowerOf2 at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    n -= 1						      2 0 LOAD_FAST 0 ( n )					    20 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    n |= n >> 1						      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    n |= n >> 2						      4 INPLACE_SUBTRACT					    4 INPLACE_ADD						  y", line 47, in run_dis_script     co_code, co_nlo
    n |= n >> 4						      6 STORE_FAST 0 ( n )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
    n |= n >> 8						      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    n |= n >> 16					      3 8 LOAD_FAST 0 ( n )					    21 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
    n += 1						      10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 2 ( 2 )					  n parse     code.append(arg) ValueError: byte must
    return n						      12 LOAD_CONST 1 ( 1 )					    12 BINARY_MULTIPLY						   be in range(0, 256)
							      14 BINARY_RSHIFT						    14 LOAD_FAST 1 ( n )					  
							      16 INPLACE_OR						    16 LOAD_CONST 3 ( 1 )					  
							      18 STORE_FAST 0 ( n )					    18 BINARY_ADD						  
							      								    20 INPLACE_ADD						  
							      4 20 LOAD_FAST 0 ( n )					    22 STORE_FAST 1 ( n )					  
							      22 LOAD_FAST 0 ( n )					    								  
							      24 LOAD_CONST 2 ( 2 )					    22 24 LOAD_FAST 1 ( n )					  
							      26 BINARY_RSHIFT						    26 LOAD_CONST 4 ( 2 )					  
							      28 INPLACE_OR						    28 BINARY_MULTIPLY						  
							      30 STORE_FAST 0 ( n )					    30 INPLACE_ADD						  
							      								    32 STORE_FAST 1 ( n )					  
							      5 32 LOAD_FAST 0 ( n )					    								  
							      34 LOAD_FAST 0 ( n )					    23 34 LOAD_FAST 1 ( n )					  
							      36 LOAD_CONST 3 ( 4 )					    36 LOAD_CONST 5 ( 3 )					  
							      38 BINARY_RSHIFT						    38 BINARY_MULTIPLY						  
							      40 INPLACE_OR						    40 INPLACE_ADD						  
							      42 STORE_FAST 0 ( n )					    42 STORE_FAST 1 ( n )					  
							      								    								  
							      6 44 LOAD_FAST 0 ( n )					    24 44 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 0 ( n )					    46 LOAD_CONST 6 ( 4 )					  
							      48 LOAD_CONST 4 ( 8 )					    48 BINARY_MULTIPLY						  
							      50 BINARY_RSHIFT						    50 INPLACE_ADD						  
							      52 INPLACE_OR						    52 STORE_FAST 1 ( n )					  
							      54 STORE_FAST 0 ( n )					    								  
							      								    25 54 LOAD_FAST 1 ( n )					  
							      7 56 LOAD_FAST 0 ( n )					    56 LOAD_CONST 7 ( 3 )					  
							      58 LOAD_FAST 0 ( n )					    58 BINARY_MULTIPLY						  
							      60 LOAD_CONST 5 ( 16 )					    60 INPLACE_ADD						  
							      62 BINARY_RSHIFT						    62 STORE_FAST 1 ( n )					  
							      64 INPLACE_OR						    								  
							      66 STORE_FAST 0 ( n )					    26 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 8 ( 2 )					  
							      8 68 LOAD_FAST 0 ( n )					    68 BINARY_MULTIPLY						  
							      70 LOAD_CONST 1 ( 1 )					    70 INPLACE_ADD						  
							      72 INPLACE_ADD						    72 STORE_FAST 1 ( n )					  
							      74 STORE_FAST 0 ( n )					    74 JUMP_FORWARD 14 ( to 80 )				  
							      								    								  
							      9 76 LOAD_FAST 0 ( n )					    27 >> 76 LOAD_FAST 1 ( n )					  
							      78 RETURN_VALUE NEW_LINE					    78 LOAD_CONST 9 ( 4 )					  
							      								    80 BINARY_MULTIPLY						  
							      								    82 INPLACE_ADD						  
							      								    84 STORE_FAST 1 ( n )					  
							      								    								  
							      								    28 86 LOAD_FAST 1 ( n )					  
							      								    88 LOAD_CONST 10 ( 4 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 1 ( n )					  
							      								    								  
							      								    29 94 LOAD_FAST 1 ( n )					  
							      								    96 LOAD_CONST 11 ( 2 )					  
							      								    98 BINARY_MULTIPLY						  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 1 ( n )					  
							      								    								  
							      								    30 104 LOAD_FAST 1 ( n )					  
							      								    106 LOAD_CONST 12 ( 2 )					  
							      								    108 BINARY_MULTIPLY						  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( n )					  
							      								    114 JUMP_FORWARD 14 ( to 80 )				  
							      								    								  
							      								    31 >> 116 LOAD_FAST 1 ( n )					  
							      								    118 LOAD_FAST 0 ( n )					  
							      								    120 BINARY_MULTIPLY						  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    								  
							      								    32 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 0 ( n )					  
							      								    130 BINARY_MULTIPLY						  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    								  
							      								    33 >> 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_FAST 0 ( n )					  
							      								    140 BINARY_MULTIPLY						  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    34 >> 146 LOAD_FAST 1 ( n )					  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def arraySortedOrNot ( arr , n ) :			      Disassembly of <code object arraySortedOrNot at 0x7fbac<<unk> Disassembly of <code object SortedSortedOrNot at 0x7f816a6e4b error : Traceback (most recent call last):   File
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 1 ( n )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
	return True					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 33, in <module>	  Fi
    for i in range ( 1 , n ) :				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in arraySortedOrNot TypeError:
	if ( arr [ i - 1 ] > arr [ i ] ) :		      6 POP_JUMP_IF_TRUE 16					    6 STORE_FAST 1 ( n )					   'int' object is not subscriptable
	    return False				      8 LOAD_FAST 1 ( n )					    								  
    return True						      10 LOAD_CONST 2 ( 1 )					    27 8 LOAD_FAST 1 ( n )					  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_CONST 2 ( 1 )					  
							      14 POP_JUMP_IF_FALSE 20					    12 BINARY_SUBSCR						  
							      								    14 STORE_FAST 2 ( n )					  
							      3 >> 16 LOAD_CONST 3 ( True )				    								  
							      18 RETURN_VALUE						    28 16 LOAD_FAST 2 ( n )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 >> 20 SETUP_LOOP 42 ( to 64 )				    20 BINARY_SUBSCR						  
							      22 LOAD_GLOBAL 0 ( range )				    22 STORE_FAST 3 ( n )					  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 LOAD_FAST 1 ( n )					    29 24 LOAD_FAST 1 ( n )					  
							      28 CALL_FUNCTION 2					    26 LOAD_CONST 4 ( 1 )					  
							      30 GET_ITER						    28 BINARY_SUBSCR						  
							      >> 32 FOR_ITER 28 ( to 62 )				    30 LOAD_CONST 5 ( 1 )					  
							      34 STORE_FAST 2 ( i )					    32 BINARY_SUBSCR						  
							      								    34 STORE_FAST 4 ( n )					  
							      5 36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 2 ( i )					    30 36 LOAD_FAST 0 ( arr )					  
							      40 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 6 ( 2 )					  
							      42 BINARY_SUBTRACT					    40 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    42 STORE_FAST 5 ( n )					  
							      46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_FAST 2 ( i )					    31 44 LOAD_FAST 0 ( arr )					  
							      50 BINARY_SUBSCR						    46 LOAD_FAST 5 ( n )					  
							      52 COMPARE_OP 4 ( > )					    48 LOAD_CONST 7 ( 1 )					  
							      54 POP_JUMP_IF_FALSE 32					    50 BINARY_SUBSCR						  
							      								    52 LOAD_CONST 8 ( 2 )					  
							      6 56 LOAD_CONST 4 ( False )				    54 BINARY_SUBSCR						  
							      58 RETURN_VALUE						    56 LOAD_CONST 9 ( 1 )					  
							      60 JUMP_ABSOLUTE 32					    58 BINARY_SUBSCR						  
							      >> 62 POP_BLOCK						    60 LOAD_CONST 10 ( 2 )					  
							      								    62 BINARY_SUBSCR						  
							      7 >> 64 LOAD_CONST 3 ( True )				    64 LOAD_CONST 11 ( 1 )					  
							      66 RETURN_VALUE NEW_LINE					    66 BINARY_SUBSCR						  
							      								    68 LOAD_CONST 12 ( 2 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 LOAD_CONST 13 ( 1 )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_CONST 14 ( 2 )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 15 ( 1 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_CONST 16 ( 2 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_CONST 17 ( 1 )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 16 ( 2 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 17 ( 1 )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_CONST 18 ( 2 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 19 ( 1 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 20 ( 2 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 21 ( 1 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 22 ( 2 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 21 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 22 ( 2 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 23 ( 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 22 ( 2 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 23 ( 1 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 22 ( 2 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 23 ( 1 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 22 ( 2 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 23 ( 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 24 ( 2 )					  
							      								    158 STORE_SUBSCR						  
							      								    								  
							      								    28 >> 160 LOAD_FAST 0 ( arr )				  
							      								    162 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
def isDiagonalMatrix ( mat ) :				      Disassembly of <code object isDiagonalMatrix at 0x7fbac<<unk> Disassembly of <code object isDiagonalMatrix at 0x7f816a673a5 script_not_found : None
    for i in range ( 0 , N ) :				      2 0 SETUP_LOOP 66 ( to 68 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( 0 , N ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  4 LOAD_CONST 1 ( 0 )					    4 LOAD_FAST 0 ( mat )					  
		return False				      6 LOAD_GLOBAL 1 ( N )					    6 CALL_FUNCTION 1						  
    return True						      8 CALL_FUNCTION 2						    8 GET_ITER							  
							      10 GET_ITER						    >> 10 FOR_ITER 22 ( to 24 )					  
							      >> 12 FOR_ITER 52 ( to 66 )				    12 STORE_FAST 1 ( N )					  
							      14 STORE_FAST 1 ( i )					    								  
							      								    27 14 LOAD_FAST 1 ( N )					  
							      3 16 SETUP_LOOP 46 ( to 64 )				    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_GLOBAL 0 ( range )				    18 COMPARE_OP 4 ( > )					  
							      20 LOAD_CONST 1 ( 0 )					    20 POP_JUMP_IF_FALSE 10					  
							      22 LOAD_GLOBAL 1 ( N )					    								  
							      24 CALL_FUNCTION 2					    28 22 LOAD_FAST 1 ( N )					  
							      26 GET_ITER						    24 LOAD_CONST 2 ( 1 )					  
							      >> 28 FOR_ITER 32 ( to 62 )				    26 COMPARE_OP 4 ( > )					  
							      30 STORE_FAST 2 ( j )					    28 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      4 32 LOAD_FAST 1 ( i )					    29 30 LOAD_FAST 1 ( N )					  
							      34 LOAD_FAST 2 ( j )					    32 LOAD_CONST 3 ( 1 )					  
							      36 COMPARE_OP 3 ( != )					    34 COMPARE_OP 4 ( > )					  
							      38 POP_JUMP_IF_FALSE 28					    36 POP_JUMP_IF_FALSE 10					  
							      40 LOAD_FAST 0 ( mat )					    								  
							      42 LOAD_FAST 1 ( i )					    30 >> 38 LOAD_FAST 1 ( N )					  
							      44 BINARY_SUBSCR						    40 LOAD_CONST 4 ( 0 )					  
							      46 LOAD_FAST 2 ( j )					    42 COMPARE_OP 4 ( > )					  
							      48 BINARY_SUBSCR						    44 POP_JUMP_IF_FALSE 10					  
							      50 LOAD_CONST 1 ( 0 )					    								  
							      52 COMPARE_OP 3 ( != )					    31 46 LOAD_FAST 1 ( N )					  
							      54 POP_JUMP_IF_FALSE 28					    48 LOAD_CONST 5 ( 1 )					  
							      								    50 COMPARE_OP 4 ( > )					  
							      5 56 LOAD_CONST 2 ( False )				    52 POP_JUMP_IF_FALSE 10					  
							      58 RETURN_VALUE						    								  
							      60 JUMP_ABSOLUTE 28					    32 54 LOAD_FAST 1 ( N )					  
							      >> 62 POP_BLOCK						    56 LOAD_CONST 6 ( 2 )					  
							      >> 64 JUMP_ABSOLUTE 12					    58 COMPARE_OP 4 ( > )					  
							      >> 66 POP_BLOCK						    60 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      6 >> 68 LOAD_CONST 3 ( True )				    33 62 LOAD_FAST 1 ( N )					  
							      70 RETURN_VALUE NEW_LINE					    64 LOAD_CONST 7 ( 1 )					  
							      								    66 COMPARE_OP 4 ( > )					  
							      								    68 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    34 70 LOAD_FAST 1 ( N )					  
							      								    72 LOAD_CONST 8 ( 2 )					  
							      								    74 COMPARE_OP 4 ( > )					  
							      								    76 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    35 78 LOAD_FAST 1 ( N )					  
							      								    80 LOAD_CONST 9 ( 2 )					  
							      								    82 COMPARE_OP 4 ( > )					  
							      								    84 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    36 86 LOAD_FAST 1 ( N )					  
							      								    88 LOAD_CONST 10 ( 2 )					  
							      								    90 COMPARE_OP 4 ( > )					  
							      								    92 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    37 94 LOAD_FAST 1 ( N )					  
							      								    96 LOAD_CONST 11 ( 2 )					  
							      								    98 COMPARE_OP 4 ( > )					  
							      								    100 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    38 102 LOAD_FAST 1 ( N )					  
							      								    104 LOAD_CONST 12 ( 2 )					  
							      								    106 COMPARE_OP 4 ( > )					  
							      								    108 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    39 110 LOAD_FAST 1 ( N )					  
							      								    112 LOAD_CONST 13 ( 1 )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      								    116 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    40 118 LOAD_FAST 1 ( N )					  
							      								    120 LOAD_CONST 6 ( 2 )					  
							      								    122 COMPARE_OP 4 ( > )					  
							      								    124 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    41 126 LOAD_FAST 1 ( N )					  
							      								    128 LOAD_CONST 6 ( 2 )					  
							      								    130 COMPARE_OP 4 ( > )					  
							      								    132 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    42 134 LOAD_FAST 1 ( N )					  
							      								    136 LOAD_CONST 7 ( 1 )					  
							      								    138 COMPARE_OP 4 ( > )					  
							      								    140 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    43 142 LOAD_FAST 1 ( N )					  
							      								    144 RETURN_VALUE						  
							      								    								  
							      								    44 >> 146							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
def countNonDecreasing ( n ) :				      Disassembly of <code object countNonDecreasing at 0x7fbac0e89 Disassembly of <code object countNonDecreasing at 0x7f816a443 error : Traceback (most recent call last):   File
    N = 10						      2 0 LOAD_CONST 1 ( 10 )					    165 0 LOAD_CONST 1 ( 10 )					  "XLM/dis_script.py", line 59, in <module>	for
    count = 1						      2 STORE_FAST 1 ( N )					    2 STORE_FAST 1 ( n )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 1 , n + 1 ) :			      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	count = int ( count * ( N + i - 1 ) )		      3 4 LOAD_CONST 2 ( 1 )					    166 4 LOAD_CONST 2 ( 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
	count = int ( count / i )			      6 STORE_FAST 2 ( count )					    6 STORE_FAST 2 ( d )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    return count					      								    								  /TransCoder/XLM/src/dis_assembler.py", line 233, i
							      4 8 SETUP_LOOP 54 ( to 64 )				    167 8 LOAD_FAST 0 ( n )					  n parse     code.append(arg) ValueError: byte must
							      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_CONST 3 ( 1 )					   be in range(0, 256)
							      12 LOAD_CONST 2 ( 1 )					    12 COMPARE_OP 2 ( == )					  
							      14 LOAD_FAST 0 ( n )					    14 POP_JUMP_IF_FALSE 28					  
							      16 LOAD_CONST 2 ( 1 )					    								  
							      18 BINARY_ADD						    168 16 LOAD_CONST 4 ( 1 )					  
							      20 CALL_FUNCTION 2					    18 STORE_FAST 2 ( d )					  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 36 ( to 62 )				    169 >> 20 LOAD_FAST 1 ( n )					  
							      26 STORE_FAST 3 ( i )					    22 LOAD_CONST 3 ( 1 )					  
							      								    24 COMPARE_OP 2 ( == )					  
							      5 28 LOAD_GLOBAL 1 ( int )				    26 POP_JUMP_IF_FALSE 28					  
							      30 LOAD_FAST 2 ( count )					    								  
							      32 LOAD_FAST 1 ( N )					    170 28 LOAD_CONST 5 ( 1 )					  
							      34 LOAD_FAST 3 ( i )					    30 STORE_FAST 2 ( d )					  
							      36 BINARY_ADD						    								  
							      38 LOAD_CONST 2 ( 1 )					    171 32 LOAD_FAST 0 ( n )					  
							      40 BINARY_SUBTRACT					    34 LOAD_CONST 3 ( 1 )					  
							      42 BINARY_MULTIPLY					    36 COMPARE_OP 2 ( == )					  
							      44 CALL_FUNCTION 1					    38 POP_JUMP_IF_FALSE 52					  
							      46 STORE_FAST 2 ( count )					    								  
							      								    172 40 LOAD_CONST 6 ( 1 )					  
							      6 48 LOAD_GLOBAL 1 ( int )				    42 STORE_FAST 2 ( d )					  
							      50 LOAD_FAST 2 ( count )					    								  
							      52 LOAD_FAST 3 ( i )					    173 44 LOAD_FAST 0 ( n )					  
							      54 BINARY_TRUE_DIVIDE					    46 LOAD_CONST 3 ( 1 )					  
							      56 CALL_FUNCTION 1					    48 INPLACE_ADD						  
							      58 STORE_FAST 2 ( count )					    50 STORE_FAST 2 ( d )					  
							      60 JUMP_ABSOLUTE 24					    								  
							      >> 62 POP_BLOCK						    174 >> 52 LOAD_FAST 2 ( d )					  
							      								    54 LOAD_CONST 3 ( 1 )					  
							      7 >> 64 LOAD_FAST 2 ( count )				    56 INPLACE_ADD						  
							      66 RETURN_VALUE NEW_LINE					    58 STORE_FAST 2 ( d )					  
							      								    								  
							      								    175 60 LOAD_FAST 0 ( n )					  
							      								    62 LOAD_CONST 3 ( 1 )					  
							      								    64 INPLACE_ADD						  
							      								    66 STORE_FAST 2 ( d )					  
							      								    								  
							      								    176 68 LOAD_FAST 0 ( n )					  
							      								    70 LOAD_CONST 3 ( 1 )					  
							      								    72 INPLACE_ADD						  
							      								    74 STORE_FAST 2 ( d )					  
							      								    76 JUMP_FORWARD 16 ( to 78 )				  
							      								    								  
							      								    177 >> 78 LOAD_FAST 0 ( n )					  
							      								    80 LOAD_CONST 3 ( 1 )					  
							      								    82 INPLACE_ADD						  
							      								    84 STORE_FAST 2 ( d )					  
							      								    86 JUMP_FORWARD 2 ( to 78 )					  
							      								    								  
							      								    178 >> 88 LOAD_FAST 2 ( d )					  
							      								    90 LOAD_CONST 3 ( 1 )					  
							      								    92 INPLACE_ADD						  
							      								    94 STORE_FAST 2 ( d )					  
							      								    								  
							      								    179 96 LOAD_FAST 2 ( d )					  
							      								    98 LOAD_CONST 3 ( 1 )					  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 2 ( d )					  
							      								    								  
							      								    180 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 3 ( 1 )					  
							      								    108 INPLACE_ADD						  
							      								    110 STORE_FAST 2 ( d )					  
							      								    								  
							      								    181 112 LOAD_FAST 2 ( d )					  
							      								    114 LOAD_CONST 3 ( 1 )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 2 ( d )					  
							      								    								  
							      								    182 >> 120 LOAD_FAST 2 ( d )				  
							      								    122 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
def shuffle ( card , n ) :				      Disassembly of <code object shuffle at 0x7fbac<<unk>> d540, f Disassembly of <code object shuffle at 0x7f816a6e4b70, file " script_not_found : None
    for i in range ( n ) :				      2 0 SETUP_LOOP 68 ( to 70 )				    26 0 SETUP_LOOP 28 ( to 30 )				  
	r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )    2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	tmp = card [ i ]				      4 LOAD_FAST 1 ( n )					    4 LOAD_CONST 1 ( 55 )					  
	card [ i ] = card [ r ]				      6 CALL_FUNCTION 1						    6 LOAD_CONST 2 ( ( 'n' , 'n' ) )				  
	card [ r ] = tmp				      8 GET_ITER						    8 CALL_FUNCTION_KW 1					  
							      >> 10 FOR_ITER 56 ( to 68 )				    10 GET_ITER							  
							      12 STORE_FAST 2 ( i )					    >> 12 FOR_ITER 14 ( to 28 )					  
							      								    14 STORE_FAST 1 ( n )					  
							      3 14 LOAD_FAST 2 ( i )					    								  
							      16 LOAD_GLOBAL 1 ( random )				    27 16 LOAD_FAST 1 ( n )					  
							      18 LOAD_METHOD 2 ( randint )				    18 LOAD_FAST 0 ( self )					  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_ATTR 1 ( _size )					  
							      22 LOAD_CONST 2 ( 55 )					    22 COMPARE_OP 0 ( < )					  
							      24 CALL_METHOD 2						    24 POP_JUMP_IF_FALSE 12					  
							      26 LOAD_CONST 3 ( 52 )					    								  
							      28 LOAD_FAST 2 ( i )					    28 26 LOAD_FAST 1 ( n )					  
							      30 BINARY_SUBTRACT					    28 LOAD_FAST 0 ( self )					  
							      32 BINARY_MODULO						    30 LOAD_ATTR 2 ( _size )					  
							      34 BINARY_ADD						    32 COMPARE_OP 0 ( < )					  
							      36 STORE_FAST 3 ( r )					    34 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      4 38 LOAD_FAST 0 ( card )					    29 36 LOAD_FAST 1 ( n )					  
							      40 LOAD_FAST 2 ( i )					    38 LOAD_FAST 0 ( self )					  
							      42 BINARY_SUBSCR						    40 LOAD_ATTR 3 ( _size )					  
							      44 STORE_FAST 4 ( tmp )					    42 COMPARE_OP 0 ( < )					  
							      								    44 POP_JUMP_IF_FALSE 12					  
							      5 46 LOAD_FAST 0 ( card )					    								  
							      48 LOAD_FAST 3 ( r )					    30 46 LOAD_FAST 1 ( n )					  
							      50 BINARY_SUBSCR						    48 LOAD_FAST 0 ( self )					  
							      52 LOAD_FAST 0 ( card )					    50 LOAD_ATTR 4 ( _size )					  
							      54 LOAD_FAST 2 ( i )					    52 COMPARE_OP 0 ( < )					  
							      56 STORE_SUBSCR						    54 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      6 58 LOAD_FAST 4 ( tmp )					    31 56 LOAD_FAST 1 ( n )					  
							      60 LOAD_FAST 0 ( card )					    58 LOAD_FAST 0 ( self )					  
							      62 LOAD_FAST 3 ( r )					    60 LOAD_ATTR 5 ( _size )					  
							      64 STORE_SUBSCR						    62 COMPARE_OP 0 ( < )					  
							      66 JUMP_ABSOLUTE 10					    64 POP_JUMP_IF_FALSE 12					  
							      >> 68 POP_BLOCK						    								  
							      >> 70 LOAD_CONST 0 ( None )				    32 66 LOAD_FAST 1 ( n )					  
							      72 RETURN_VALUE NEW_LINE					    68 LOAD_FAST 0 ( self )					  
							      								    70 LOAD_ATTR 6 ( _size )					  
							      								    72 COMPARE_OP 0 ( < )					  
							      								    74 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    33 76 LOAD_FAST 1 ( n )					  
							      								    78 LOAD_FAST 0 ( self )					  
							      								    80 LOAD_ATTR 7 ( _size )					  
							      								    82 COMPARE_OP 0 ( < )					  
							      								    84 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    34 86 LOAD_FAST 1 ( n )					  
							      								    88 LOAD_FAST 0 ( self )					  
							      								    90 LOAD_ATTR 8 ( _size )					  
							      								    92 COMPARE_OP 0 ( < )					  
							      								    94 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    35 96 LOAD_FAST 1 ( n )					  
							      								    98 LOAD_FAST 0 ( self )					  
							      								    100 LOAD_ATTR 9 ( _size )					  
							      								    102 COMPARE_OP 0 ( < )					  
							      								    104 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    36 106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_FAST 0 ( self )					  
							      								    110 LOAD_ATTR 10 ( _size )					  
							      								    112 COMPARE_OP 0 ( < )					  
							      								    114 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    37 116 LOAD_FAST 1 ( n )					  
							      								    118 LOAD_FAST 0 ( self )					  
							      								    120 LOAD_ATTR 11 ( _size )					  
							      								    122 COMPARE_OP 0 ( < )					  
							      								    124 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    38 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 0 ( self )					  
							      								    130 LOAD_ATTR 12 ( _size )					  
							      								    132 COMPARE_OP 0 ( < )					  
							      								    134 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    40 >> 136 LOAD_FAST 1 ( n )					  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM
--							      --							    --								  --
def findFlips ( str , n ) :				      Disassembly of <code object findFlips at 0x7fbac<<unk>> de40, Disassembly of <code object findFlips at 0x7f816a673a50, file script_not_found : None
    last = ' '						      2 0 LOAD_CONST 1 ( ' ' )					    69 0 LOAD_CONST 1 ( '▁' )					  
    res = 0						      2 STORE_FAST 2 ( last )					    2 STORE_FAST 1 ( n )					  
    for i in range ( n ) :				      								    								  
	if ( last != str [ i ] ) :			      3 4 LOAD_CONST 2 ( 0 )					    70 4 LOAD_FAST 0 ( str )					  
	    res += 1					      6 STORE_FAST 3 ( res )					    6 LOAD_FAST 1 ( n )						  
	last = str [ i ]				      								    8 CALL_FUNCTION 1						  
    return res // 2					      4 8 SETUP_LOOP 44 ( to 54 )				    10 STORE_FAST 2 ( n )					  
							      10 LOAD_GLOBAL 0 ( range )				    								  
							      12 LOAD_FAST 1 ( n )					    71 12 LOAD_FAST 2 ( n )					  
							      14 CALL_FUNCTION 1					    14 LOAD_CONST 2 ( 0 )					  
							      16 GET_ITER						    16 COMPARE_OP 4 ( > )					  
							      >> 18 FOR_ITER 32 ( to 52 )				    18 POP_JUMP_IF_FALSE 32					  
							      20 STORE_FAST 4 ( i )					    								  
							      								    72 20 LOAD_FAST 2 ( n )					  
							      5 22 LOAD_FAST 2 ( last )					    22 LOAD_CONST 3 ( 1 )					  
							      24 LOAD_FAST 0 ( str )					    24 INPLACE_ADD						  
							      26 LOAD_FAST 4 ( i )					    26 STORE_FAST 2 ( n )					  
							      28 BINARY_SUBSCR						    								  
							      30 COMPARE_OP 3 ( != )					    73 >> 28 LOAD_FAST 2 ( n )					  
							      32 POP_JUMP_IF_FALSE 42					    30 LOAD_CONST 4 ( 2 )					  
							      								    32 COMPARE_OP 4 ( > )					  
							      6 34 LOAD_FAST 3 ( res )					    34 POP_JUMP_IF_FALSE 40					  
							      36 LOAD_CONST 3 ( 1 )					    								  
							      38 INPLACE_ADD						    74 36 LOAD_FAST 2 ( n )					  
							      40 STORE_FAST 3 ( res )					    38 LOAD_CONST 5 ( 1 )					  
							      								    40 INPLACE_ADD						  
							      7 >> 42 LOAD_FAST 0 ( str )				    42 STORE_FAST 2 ( n )					  
							      44 LOAD_FAST 4 ( i )					    44 JUMP_FORWARD 2 ( to 40 )					  
							      46 BINARY_SUBSCR						    								  
							      48 STORE_FAST 2 ( last )					    75 >> 46 LOAD_FAST 2 ( n )					  
							      50 JUMP_ABSOLUTE 18					    48 LOAD_CONST 6 ( 2 )					  
							      >> 52 POP_BLOCK						    50 INPLACE_ADD						  
							      								    52 STORE_FAST 2 ( n )					  
							      8 >> 54 LOAD_FAST 3 ( res )				    								  
							      56 LOAD_CONST 4 ( 2 )					    76 54 LOAD_FAST 2 ( n )					  
							      58 BINARY_FLOOR_DIVIDE					    56 LOAD_CONST 7 ( 3 )					  
							      60 RETURN_VALUE NEW_LINE					    58 INPLACE_ADD						  
							      								    60 STORE_FAST 2 ( n )					  
							      								    								  
							      								    77 62 LOAD_FAST 2 ( n )					  
							      								    64 LOAD_CONST 8 ( 4 )					  
							      								    66 INPLACE_ADD						  
							      								    68 STORE_FAST 2 ( n )					  
							      								    								  
							      								    78 >> 70 LOAD_FAST 2 ( n )					  
							      								    72 LOAD_CONST 9 ( 4 )					  
							      								    74 INPLACE_ADD						  
							      								    76 STORE_FAST 2 ( n )					  
							      								    								  
							      								    79 78 LOAD_FAST 2 ( n )					  
							      								    80 LOAD_CONST 10 ( 4 )					  
							      								    82 INPLACE_ADD						  
							      								    84 STORE_FAST 2 ( n )					  
							      								    								  
							      								    80 86 LOAD_FAST 2 ( n )					  
							      								    88 LOAD_CONST 11 ( 4 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 2 ( n )					  
							      								    								  
							      								    81 94 LOAD_FAST 2 ( n )					  
							      								    96 LOAD_CONST 12 ( 2 )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 2 ( n )					  
							      								    								  
							      								    82 102 LOAD_FAST 2 ( n )					  
							      								    104 LOAD_CONST 13 ( 2 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 2 ( n )					  
							      								    								  
							      								    84 110 LOAD_FAST 2 ( n )					  
							      								    112 LOAD_CONST 14 ( 4 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 2 ( n )					  
							      								    								  
							      								    85 118 LOAD_FAST 2 ( n )					  
							      								    120 LOAD_CONST 15 ( 4 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 2 ( n )					  
							      								    								  
							      								    86 126 LOAD_FAST 2 ( n )					  
							      								    128 LOAD_FAST 2 ( n )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 2 ( n )					  
							      								    								  
							      								    87 134 LOAD_FAST 2 ( n )					  
							      								    136 LOAD_FAST 2 ( n )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 2 ( n )					  
							      								    								  
							      								    88 142 LOAD_FAST 2 ( n )					  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			      CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			    CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			  CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT
--							      --							    --								  --
def check_duck ( num ) :				      Disassembly of <code object check_duck at 0x7fbac0e89d20, fil Disassembly of <code object check_duck at 0x7f816a683c00, fil error : Traceback (most recent call last):   File
    l = len ( num )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( l )					  "XLM/dis_script.py", line 60, in <module>	exec
    count_zero = 0					      2 LOAD_FAST 0 ( num )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 36, in <module>	  Fi
    i = 1						      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  le "<dis>", line 2, in check_duck UnboundLocalErro
    while i < l :					      6 STORE_FAST 1 ( l )					    6 LOAD_CONST 2 ( 1 )					  r: local variable 'l' referenced before assignment
	ch = num [ i ]					      								    8 COMPARE_OP 2 ( == )					  
	if ( ch == "0" ) :				      3 8 LOAD_CONST 1 ( 0 )					    10 POP_JUMP_IF_TRUE 16					  
	    count_zero = count_zero + 1			      10 STORE_FAST 2 ( count_zero )				    12 LOAD_GLOBAL 0 ( AssertionError )				  
	i = i + 1					      								    14 RAISE_VARARGS 1						  
    return count_zero					      4 12 LOAD_CONST 2 ( 1 )					    								  
							      14 STORE_FAST 3 ( i )					    27 >> 16 LOAD_FAST 1 ( l )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      5 16 SETUP_LOOP 44 ( to 62 )				    20 BINARY_SUBSCR						  
							      >> 18 LOAD_FAST 3 ( i )					    22 LOAD_CONST 4 ( 2 )					  
							      20 LOAD_FAST 1 ( l )					    24 COMPARE_OP 2 ( == )					  
							      22 COMPARE_OP 0 ( < )					    26 POP_JUMP_IF_TRUE 32					  
							      24 POP_JUMP_IF_FALSE 60					    28 LOAD_GLOBAL 0 ( AssertionError )				  
							      								    30 RAISE_VARARGS 1						  
							      6 26 LOAD_FAST 0 ( num )					    								  
							      28 LOAD_FAST 3 ( i )					    28 >> 32 LOAD_FAST 1 ( l )					  
							      30 BINARY_SUBSCR						    34 LOAD_CONST 5 ( 1 )					  
							      32 STORE_FAST 4 ( ch )					    36 BINARY_SUBSCR						  
							      								    38 LOAD_CONST 6 ( 2 )					  
							      7 34 LOAD_FAST 4 ( ch )					    40 COMPARE_OP 2 ( == )					  
							      36 LOAD_CONST 3 ( '0' )					    42 POP_JUMP_IF_TRUE 48					  
							      38 COMPARE_OP 2 ( == )					    44 LOAD_GLOBAL 0 ( AssertionError )				  
							      40 POP_JUMP_IF_FALSE 50					    46 RAISE_VARARGS 1						  
							      								    								  
							      8 42 LOAD_FAST 2 ( count_zero )				    29 >> 48 LOAD_FAST 1 ( l )					  
							      44 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 7 ( 1 )					  
							      46 BINARY_ADD						    52 BINARY_SUBSCR						  
							      48 STORE_FAST 2 ( count_zero )				    54 LOAD_CONST 8 ( 2 )					  
							      								    56 COMPARE_OP 2 ( == )					  
							      9 >> 50 LOAD_FAST 3 ( i )					    58 POP_JUMP_IF_TRUE 60					  
							      52 LOAD_CONST 2 ( 1 )					    60 LOAD_GLOBAL 0 ( AssertionError )				  
							      54 BINARY_ADD						    62 RAISE_VARARGS 1						  
							      56 STORE_FAST 3 ( i )					    >> 64 LOAD_CONST 0 ( None )					  
							      58 JUMP_ABSOLUTE 18					    66 RETURN_VALUE						  
							      >> 60 POP_BLOCK						    NEW_LINE							  
							      								    								  
							      10 >> 62 LOAD_FAST 2 ( count_zero )			    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
def isInorder ( arr , n ) :				      Disassembly of <code object isInorder at 0x7fbac<<unk>> de40, Disassembly of <code object isInorder at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 1 ( n )					    149 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
	return True					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 1 , n , 1 ) :			      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
	if ( arr [ i - 1 ] > arr [ i ] ) :		      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( 2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	    return False				      8 LOAD_FAST 1 ( n )					    8 COMPARE_OP 2 ( == )					  assembler.py", line 81, in to_co     co_consts.app
    return True						      10 LOAD_CONST 2 ( 1 )					    10 POP_JUMP_IF_FALSE 20					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 COMPARE_OP 2 ( == )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 POP_JUMP_IF_FALSE 20					    150 12 LOAD_CONST 3 ( True )				  co	 self.co_cellvars, ValueError: code: varname
							      								    14 RETURN_VALUE						  s is too small
							      3 >> 16 LOAD_CONST 3 ( True )				    								  
							      18 RETURN_VALUE						    151 >> 16 LOAD_CONST 4 ( True )				  
							      								    18 RETURN_VALUE						  
							      4 >> 20 SETUP_LOOP 44 ( to 66 )				    NEW_LINE							  
							      22 LOAD_GLOBAL 0 ( range )				    								  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 LOAD_FAST 1 ( n )					    								  
							      28 LOAD_CONST 2 ( 1 )					    								  
							      30 CALL_FUNCTION 3					    								  
							      32 GET_ITER						    								  
							      >> 34 FOR_ITER 28 ( to 64 )				    								  
							      36 STORE_FAST 2 ( i )					    								  
							      								    								  
							      5 38 LOAD_FAST 0 ( arr )					    								  
							      40 LOAD_FAST 2 ( i )					    								  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 BINARY_SUBTRACT					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 2 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 COMPARE_OP 4 ( > )					    								  
							      56 POP_JUMP_IF_FALSE 34					    								  
							      								    								  
							      6 58 LOAD_CONST 4 ( False )				    								  
							      60 RETURN_VALUE						    								  
							      62 JUMP_ABSOLUTE 34					    								  
							      >> 64 POP_BLOCK						    								  
							      								    								  
							      7 >> 66 LOAD_CONST 3 ( True )				    								  
							      68 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
def getInvCount ( arr , n ) :				      Disassembly of <code object getInvCount at 0x7fbac0e8bc90, fi Disassembly of <code object getInvCount at 0x7f816a673a50, fi script_not_found : None
    inv_count = 0					      2 0 LOAD_CONST 1 ( 0 )					    17 0 LOAD_FAST 1 ( n )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( inv_count )				    2 LOAD_CONST 1 ( 0 )					  
	for j in range ( i + 1 , n ) :			      								    4 BINARY_SUBSCR						  
	    if ( arr [ i ] > arr [ j ] ) :		      3 4 SETUP_LOOP 64 ( to 70 )				    6 STORE_FAST 2 ( s )					  
		inv_count += 1				      6 LOAD_GLOBAL 0 ( range )					    								  
    return inv_count					      8 LOAD_FAST 1 ( n )					    18 8 LOAD_FAST 0 ( arr )					  
							      10 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( 1 )					  
							      12 GET_ITER						    12 BINARY_SUBSCR						  
							      >> 14 FOR_ITER 52 ( to 68 )				    14 STORE_FAST 3 ( count )					  
							      16 STORE_FAST 3 ( i )					    								  
							      								    19 16 LOAD_FAST 2 ( s )					  
							      4 18 SETUP_LOOP 46 ( to 66 )				    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_GLOBAL 0 ( range )				    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 3 ( i )					    22 STORE_FAST 4 ( count )					  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 BINARY_ADD						    20 24 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 1 ( n )					    26 LOAD_CONST 4 ( 1 )					  
							      30 CALL_FUNCTION 2					    28 BINARY_SUBSCR						  
							      32 GET_ITER						    30 STORE_FAST 5 ( count )					  
							      >> 34 FOR_ITER 28 ( to 64 )				    								  
							      36 STORE_FAST 4 ( j )					    21 32 LOAD_FAST 0 ( arr )					  
							      								    34 LOAD_CONST 5 ( 1 )					  
							      5 38 LOAD_FAST 0 ( arr )					    36 BINARY_SUBSCR						  
							      40 LOAD_FAST 3 ( i )					    38 STORE_FAST 6 ( count )					  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 0 ( arr )					    22 40 LOAD_FAST 0 ( arr )					  
							      46 LOAD_FAST 4 ( j )					    42 LOAD_CONST 6 ( 2 )					  
							      48 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      50 COMPARE_OP 4 ( > )					    46 STORE_FAST 7 ( count )					  
							      52 POP_JUMP_IF_FALSE 34					    								  
							      								    23 48 LOAD_FAST 0 ( arr )					  
							      6 54 LOAD_FAST 2 ( inv_count )				    50 LOAD_CONST 7 ( 1 )					  
							      56 LOAD_CONST 2 ( 1 )					    52 BINARY_SUBSCR						  
							      58 INPLACE_ADD						    54 LOAD_FAST 7 ( count )					  
							      60 STORE_FAST 2 ( inv_count )				    56 LOAD_CONST 8 ( 2 )					  
							      62 JUMP_ABSOLUTE 34					    58 BINARY_SUBSCR						  
							      >> 64 POP_BLOCK						    60 LOAD_FAST 6 ( count )					  
							      >> 66 JUMP_ABSOLUTE 14					    62 LOAD_CONST 9 ( 1 )					  
							      >> 68 POP_BLOCK						    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 7 ( count )					  
							      7 >> 70 LOAD_FAST 2 ( inv_count )				    68 LOAD_CONST 10 ( 2 )					  
							      72 RETURN_VALUE NEW_LINE					    70 BINARY_SUBSCR						  
							      								    72 LOAD_CONST 11 ( 3 )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 7 ( count )					  
							      								    78 LOAD_CONST 12 ( 2 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 7 ( count )					  
							      								    84 LOAD_CONST 13 ( 3 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 7 ( count )					  
							      								    90 LOAD_CONST 14 ( 3 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 15 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 7 ( count )					  
							      								    100 LOAD_CONST 16 ( 2 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 17 ( 3 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 18 ( 2 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 19 ( 3 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_FAST 7 ( count )					  
							      								    118 LOAD_CONST 18 ( 2 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 19 ( 3 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_FAST 7 ( count )					  
							      								    128 LOAD_CONST 20 ( 2 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_FAST 7 ( count )					  
							      								    134 LOAD_CONST 21 ( 3 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 22 ( 2 )					  
							      								    140 STORE_SUBSCR						  
							      								    								  
							      								    23 23 LOAD_FAST 0 ( arr )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION     DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	    DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
def lastPosition ( n , m , k ) :			      Disassembly of <code object lastPosition at 0x7fbac<<unk>> de Disassembly of <code object lastPosition at 0x7f816a601660, f error : Traceback (most recent call last):   File
    if ( m <= n - k + 1 ) :				      2 0 LOAD_FAST 1 ( m )					    204 0 LOAD_FAST 1 ( m )					  "XLM/dis_script.py", line 59, in <module>	for
	return m + k - 1				      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 1 ( - 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    m = m - ( n - k + 1 )				      4 LOAD_FAST 2 ( k )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
    if ( m % n == 0 ) :					      6 BINARY_SUBTRACT						    6 LOAD_CONST 2 ( - 1 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	return n					      8 LOAD_CONST 1 ( 1 )					    8 COMPARE_OP 2 ( == )					  assembler.py", line 81, in to_co     co_consts.app
    else :						      10 BINARY_ADD						    10 POP_JUMP_IF_FALSE 20					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	return m % n					      12 COMPARE_OP 1 ( <= )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 POP_JUMP_IF_FALSE 28					    205 12 LOAD_FAST 0 ( self )					  co	 self.co_cellvars, TypeError: name tuples mu
							      								    14 LOAD_ATTR 0 ( _lastPosition )				  st contain only strings, not 'NoneType'
							      3 16 LOAD_FAST 1 ( m )					    16 LOAD_FAST 1 ( m )					  
							      18 LOAD_FAST 2 ( k )					    18 LOAD_CONST 1 ( - 1 )					  
							      20 BINARY_ADD						    20 BINARY_SUBSCR						  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 3 ( - 1 )					  
							      24 BINARY_SUBTRACT					    24 BINARY_SUBSCR						  
							      26 RETURN_VALUE						    26 LOAD_CONST 4 ( - 1 )					  
							      								    28 BINARY_SUBSCR						  
							      4 >> 28 LOAD_FAST 1 ( m )					    30 LOAD_CONST 5 ( - 1 )					  
							      30 LOAD_FAST 0 ( n )					    32 BINARY_SUBSCR						  
							      32 LOAD_FAST 2 ( k )					    34 LOAD_CONST 6 ( - 1 )					  
							      34 BINARY_SUBTRACT					    36 BINARY_SUBSCR						  
							      36 LOAD_CONST 1 ( 1 )					    38 LOAD_CONST 7 ( - 1 )					  
							      38 BINARY_ADD						    40 BINARY_SUBSCR						  
							      40 BINARY_SUBTRACT					    42 LOAD_CONST 8 ( - 1 )					  
							      42 STORE_FAST 1 ( m )					    44 BINARY_SUBSCR						  
							      								    46 LOAD_CONST 9 ( - 1 )					  
							      5 44 LOAD_FAST 1 ( m )					    48 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( n )					    50 LOAD_CONST 10 ( - 1 )					  
							      48 BINARY_MODULO						    52 BINARY_SUBSCR						  
							      50 LOAD_CONST 2 ( 0 )					    54 LOAD_CONST 11 ( - 1 )					  
							      52 COMPARE_OP 2 ( == )					    56 BINARY_SUBSCR						  
							      54 POP_JUMP_IF_FALSE 60					    58 LOAD_CONST 12 ( - 1 )					  
							      								    60 BINARY_SUBSCR						  
							      6 56 LOAD_FAST 0 ( n )					    62 LOAD_CONST 13 ( - 1 )					  
							      58 RETURN_VALUE						    64 BINARY_SUBSCR						  
							      								    66 LOAD_CONST 14 ( - 1 )					  
							      8 >> 60 LOAD_FAST 1 ( m )					    68 BINARY_SUBSCR						  
							      62 LOAD_FAST 0 ( n )					    70 LOAD_CONST 6 ( - 1 )					  
							      64 BINARY_MODULO						    72 BINARY_SUBSCR						  
							      66 RETURN_VALUE						    74 LOAD_CONST 12 ( - 1 )					  
							      68 LOAD_CONST 0 ( None )					    76 BINARY_SUBSCR						  
							      70 RETURN_VALUE NEW_LINE					    78 LOAD_CONST 13 ( - 1 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 14 ( - 1 )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 15 ( - 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 16 ( - 1 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 17 ( - 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 18 ( - 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 19 ( - 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 20 ( - 1 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 21 ( - 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 22 ( - 1 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 21 ( - 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 22 ( - 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 23 ( - 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 22 ( - 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 22 ( - 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 23 ( - 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 22 ( - 1 )					  
							      								    144 LOAD_CONST 23 ( - 1 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 22 ( - 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 23 ( - 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 24 ( - 1 )					  
							      								    158 LOAD_CONST 23 ( - 1 )					  
							      								    160 BUILD_SLICE 2						  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_CONST 24 ( - 1 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 LOAD_CONST 25 ( - 1 )					  
							      								    170 BUILD_SLICE 2						  
							      								    168 STORE_SUBSCR						  
							      								    								  
							      								    207 207 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_
--							      --							    --								  --
def multiply ( x , y ) :				      Disassembly of <code object multiply at 0x7fbac<<unk>> d540,  Disassembly of <code object multiply at 0x7f816a673a50, file  error : Traceback (most recent call last):   File
    if ( y == 0 ) :					      2 0 LOAD_FAST 1 ( y )					    149 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_ATTR 0 ( x )						  (item)   File "main.py", line 33, in <module>	  Fi
    if ( y > 0 ) :					      4 COMPARE_OP 2 ( == )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in multiply AttributeError: 'i
	return ( x + multiply ( x , y - 1 ) )		      6 POP_JUMP_IF_FALSE 12					    6 COMPARE_OP 2 ( == )					  nt' object has no attribute 'x'
    if ( y < 0 ) :					      								    8 POP_JUMP_IF_FALSE 14					  
	return - multiply ( x , - y )			      3 8 LOAD_CONST 1 ( 0 )					    								  
							      10 RETURN_VALUE						    150 10 LOAD_FAST 0 ( self )					  
							      								    12 LOAD_METHOD 1 ( multiply )				  
							      4 >> 12 LOAD_FAST 1 ( y )					    14 LOAD_FAST 1 ( y )					  
							      14 LOAD_CONST 1 ( 0 )					    16 CALL_METHOD 1						  
							      16 COMPARE_OP 4 ( > )					    18 RETURN_VALUE						  
							      18 POP_JUMP_IF_FALSE 38					    								  
							      								    151 >> 20 LOAD_FAST 0 ( self )				  
							      5 20 LOAD_FAST 0 ( x )					    22 LOAD_METHOD 2 ( multiply )				  
							      22 LOAD_GLOBAL 0 ( multiply )				    24 LOAD_FAST 1 ( y )					  
							      24 LOAD_FAST 0 ( x )					    26 CALL_METHOD 1						  
							      26 LOAD_FAST 1 ( y )					    28 RETURN_VALUE						  
							      28 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 0 ( None )					  
							      30 BINARY_SUBTRACT					    32 RETURN_VALUE						  
							      32 CALL_FUNCTION 2					    NEW_LINE							  
							      34 BINARY_ADD						    								  
							      36 RETURN_VALUE						    								  
							      								    								  
							      6 >> 38 LOAD_FAST 1 ( y )					    								  
							      40 LOAD_CONST 1 ( 0 )					    								  
							      42 COMPARE_OP 0 ( < )					    								  
							      44 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      7 46 LOAD_GLOBAL 0 ( multiply )				    								  
							      48 LOAD_FAST 0 ( x )					    								  
							      50 LOAD_FAST 1 ( y )					    								  
							      52 UNARY_NEGATIVE						    								  
							      54 CALL_FUNCTION 2					    								  
							      56 UNARY_NEGATIVE						    								  
							      58 RETURN_VALUE						    								  
							      >> 60 LOAD_CONST 0 ( None )				    								  
							      62 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
def fib ( n , lookup ) :				      Disassembly of <code object fib at 0x7fbac0e89d20, file "<dis Disassembly of <code object fib at 0x7f816a673a50, file "<dis script_not_found : None
    if n == 0 or n == 1 :				      2 0 LOAD_FAST 0 ( n )					    51 0 LOAD_FAST 0 ( n )					  
	lookup [ n ] = n				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 1 )					  
    if lookup [ n ] is None :				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
	lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , 6 POP_JUMP_IF_TRUE 16					    6 LOAD_FAST 0 ( n )						  
    return lookup [ n ]					      8 LOAD_FAST 0 ( n )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_CONST 2 ( 1 )					    10 BINARY_SUBSCR						  
							      12 COMPARE_OP 2 ( == )					    12 LOAD_CONST 3 ( 2 )					  
							      14 POP_JUMP_IF_FALSE 24					    14 BINARY_SUBSCR						  
							      								    16 LOAD_FAST 0 ( n )					  
							      3 >> 16 LOAD_FAST 0 ( n )					    18 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_FAST 1 ( lookup )					    20 BINARY_SUBSCR						  
							      20 LOAD_FAST 0 ( n )					    22 LOAD_CONST 4 ( 3 )					  
							      22 STORE_SUBSCR						    24 BINARY_SUBSCR						  
							      								    26 LOAD_CONST 5 ( '						  
							      4 >> 24 LOAD_FAST 1 ( lookup )				    								  
							      26 LOAD_FAST 0 ( n )					    								  
							      28 BINARY_SUBSCR						    								  
							      30 LOAD_CONST 0 ( None )					    								  
							      32 COMPARE_OP 8 ( is )					    								  
							      34 POP_JUMP_IF_FALSE 68					    								  
							      								    								  
							      5 36 LOAD_GLOBAL 0 ( fib )				    								  
							      38 LOAD_FAST 0 ( n )					    								  
							      40 LOAD_CONST 2 ( 1 )					    								  
							      42 BINARY_SUBTRACT					    								  
							      44 LOAD_FAST 1 ( lookup )					    								  
							      46 CALL_FUNCTION 2					    								  
							      48 LOAD_GLOBAL 0 ( fib )					    								  
							      50 LOAD_FAST 0 ( n )					    								  
							      52 LOAD_CONST 3 ( 2 )					    								  
							      54 BINARY_SUBTRACT					    								  
							      56 LOAD_FAST 1 ( lookup )					    								  
							      58 CALL_FUNCTION 2					    								  
							      60 BINARY_ADD						    								  
							      62 LOAD_FAST 1 ( lookup )					    								  
							      64 LOAD_FAST 0 ( n )					    								  
							      66 STORE_SUBSCR						    								  
							      								    								  
							      6 >> 68 LOAD_FAST 1 ( lookup )				    								  
							      70 LOAD_FAST 0 ( n )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
def swapDiagonal ( matrix ) :				      Disassembly of <code object swapDiagonal at 0x7fbac<<unk>> d5 Disassembly of <code object swapDiagonal at 0x7f816a673a50, f script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 74 ( to 76 )				    101 0 SETUP_LOOP 22 ( to 24 )				  
	matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \   2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( matrix )					  
	    matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]   4 LOAD_GLOBAL 1 ( N )					    4 GET_ITER							  
							      6 CALL_FUNCTION 1						    >> 6 FOR_ITER 14 ( to 22 )					  
							      8 GET_ITER						    8 STORE_FAST 1 ( i )					  
							      >> 10 FOR_ITER 62 ( to 74 )				    								  
							      12 STORE_FAST 1 ( i )					    102 10 LOAD_FAST 1 ( i )					  
							      								    12 LOAD_CONST 1 ( 1 )					  
							      4 14 LOAD_FAST 0 ( matrix )				    14 BINARY_SUBTRACT						  
							      16 LOAD_FAST 1 ( i )					    16 LOAD_CONST 2 ( 2 )					  
							      18 BINARY_SUBSCR						    18 COMPARE_OP 2 ( == )					  
							      20 LOAD_GLOBAL 1 ( N )					    20 POP_JUMP_IF_FALSE 6					  
							      22 LOAD_FAST 1 ( i )					    								  
							      24 BINARY_SUBTRACT					    103 22 LOAD_FAST 1 ( i )					  
							      26 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 3 ( 1 )					  
							      28 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      30 BINARY_SUBSCR						    28 LOAD_CONST 4 ( 3 )					  
							      32 LOAD_FAST 0 ( matrix )					    30 COMPARE_OP 2 ( == )					  
							      34 LOAD_FAST 1 ( i )					    32 POP_JUMP_IF_FALSE 6					  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 1 ( i )					    104 34 LOAD_FAST 1 ( i )					  
							      40 BINARY_SUBSCR						    36 LOAD_CONST 5 ( 1 )					  
							      42 ROT_TWO						    38 BINARY_SUBTRACT						  
							      44 LOAD_FAST 0 ( matrix )					    40 STORE_FAST 1 ( i )					  
							      46 LOAD_FAST 1 ( i )					    								  
							      48 BINARY_SUBSCR						    105 42 LOAD_FAST 1 ( i )					  
							      50 LOAD_FAST 1 ( i )					    44 LOAD_CONST 6 ( 1 )					  
							      52 STORE_SUBSCR						    46 BINARY_SUBTRACT						  
							      54 LOAD_FAST 0 ( matrix )					    48 LOAD_FAST 1 ( i )					  
							      56 LOAD_FAST 1 ( i )					    50 LOAD_CONST 7 ( 1 )					  
							      58 BINARY_SUBSCR						    52 BINARY_SUBTRACT						  
							      60 LOAD_GLOBAL 1 ( N )					    54 BINARY_SUBTRACT						  
							      62 LOAD_FAST 1 ( i )					    56 LOAD_FAST 1 ( i )					  
							      64 BINARY_SUBTRACT					    58 LOAD_CONST 8 ( 2 )					  
							      66 LOAD_CONST 1 ( 1 )					    60 BINARY_SUBTRACT						  
							      68 BINARY_SUBTRACT					    62 BINARY_MULTIPLY						  
							      70 STORE_SUBSCR						    64 BINARY_ADD						  
							      72 JUMP_ABSOLUTE 10					    66 STORE_FAST 1 ( i )					  
							      >> 74 POP_BLOCK						    								  
							      >> 76 LOAD_CONST 0 ( None )				    106 68 LOAD_FAST 1 ( i )					  
							      78 RETURN_VALUE NEW_LINE					    70 LOAD_CONST 9 ( 2 )					  
							      								    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 1 ( i )					  
							      								    76 LOAD_CONST 10 ( 2 )					  
							      								    78 BINARY_SUBTRACT						  
							      								    80 BINARY_SUBTRACT						  
							      								    82 LOAD_FAST 1 ( i )					  
							      								    84 LOAD_CONST 11 ( 3 )					  
							      								    86 BINARY_SUBTRACT						  
							      								    88 BINARY_SUBTRACT						  
							      								    90 LOAD_FAST 1 ( i )					  
							      								    92 LOAD_CONST 12 ( 3 )					  
							      								    94 BINARY_SUBTRACT						  
							      								    96 BINARY_MULTIPLY						  
							      								    98 BINARY_ADD						  
							      								    100 LOAD_FAST 1 ( i )					  
							      								    102 LOAD_CONST 13 ( 3 )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_FAST 1 ( i )					  
							      								    110 LOAD_CONST 6 ( 1 )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 BINARY_SUBTRACT						  
							      								    116 BINARY_MULTIPLY						  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_FAST 1 ( i )					  
							      								    122 LOAD_CONST 6 ( 1 )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 BINARY_SUBTRACT						  
							      								    128 BINARY_MULTIPLY						  
							      								    130 BINARY_ADD						  
							      								    132 LOAD_FAST 1 ( i )					  
							      								    134 LOAD_CONST 6 ( 1 )					  
							      								    136 BINARY_SUBTRACT						  
							      								    138 BINARY_MULTIPLY						  
							      								    140 BINARY_ADD						  
							      								    142 LOAD_FAST 1 ( i )					  
							      								    144 BINARY_MULTIPLY						  
							      								    146 BINARY_ADD						  
							      								    148 BINARY_ADD						  
							      								    150 LOAD_FAST 1 ( i )					  
							      								    152 LOAD_CONST 12 ( 3 )					  
							      								    154 BINARY_SUBTRACT						  
							      								    156 BINARY_MULTIPLY						  
							      								    158 BINARY_ADD						  
							      								    								  
							      								    109 >> 160 LOAD_FAST 1 ( i )				  
							      								    162 LOAD_CONST 13 ( 3 )					  
							      								    164 BINARY_SUBTRACT						  
							      								    166 BINARY_MULTIPLY						  
							      								    168 BINARY_ADD						  
							      								    170 LOAD_FAST 1 ( i )					  
							      								    172 LOAD_CONST 6 ( 1 )					  
							      								    174 BINARY_SUBTRACT						  
							      								    176 BINARY_MULTIPLY						  
							      								    178 BINARY_ADD						  
							      								    180 BINARY_ADD						  
							      								    182 LOAD_FAST 1 ( i )					  
							      								    184 LOAD_CONST 6 ( 1 )					  
							      								    186 BINARY_ADD						  
							      								    188 BINARY_ADD						  
							      								    								  
							      								    111 190 LOAD_FAST 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		      MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		    MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO			  MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
def moduloMultiplication ( a , b , mod ) :		      Disassembly of <code object moduloMultiplication at 0x7fbac<< Disassembly of <code object moduloMultiplication at 0x7f816a6 error : Traceback (most recent call last):   File
    res = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( '%s; = %s; while %s' )			  "XLM/dis_script.py", line 60, in <module>	exec
    a = a % mod ;					      2 STORE_FAST 3 ( res )					    2 LOAD_FAST 0 ( a )						  (item)   File "main.py", line 35, in <module>	  Fi
    while ( b ) :					      								    4 BINARY_MODULO						  le "<dis>", line 2, in moduloMultiplication Unboun
	if ( b & 1 ) :					      3 4 LOAD_FAST 0 ( a )					    6 STORE_FAST 1 ( a )					  dLocalError: local variable 'b' referenced before
	    res = ( res + a ) % mod ;			      6 LOAD_FAST 2 ( mod )					    								  assignment
	a = ( 2 * a ) % mod ;				      8 BINARY_MODULO						    27 8 LOAD_FAST 1 ( a )					  
	b >>= 1 ;					      10 STORE_FAST 0 ( a )					    10 LOAD_FAST 1 ( a )					  
    return res ;					      								    12 LOAD_FAST 2 ( b )					  
							      4 12 SETUP_LOOP 48 ( to 62 )				    14 LOAD_FAST 3 ( b )					  
							      >> 14 LOAD_FAST 1 ( b )					    16 BUILD_TUPLE 2						  
							      16 POP_JUMP_IF_FALSE 60					    18 BINARY_MODULO						  
							      								    20 STORE_FAST 2 ( b )					  
							      5 18 LOAD_FAST 1 ( b )					    								  
							      20 LOAD_CONST 2 ( 1 )					    28 22 LOAD_FAST 0 ( a )					  
							      22 BINARY_AND						    24 LOAD_FAST 2 ( b )					  
							      24 POP_JUMP_IF_FALSE 38					    26 LOAD_FAST 1 ( a )					  
							      								    28 BUILD_TUPLE 2						  
							      6 26 LOAD_FAST 3 ( res )					    30 BINARY_MODULO						  
							      28 LOAD_FAST 0 ( a )					    32 RETURN_VALUE						  
							      30 BINARY_ADD						    NEW_LINE							  
							      32 LOAD_FAST 2 ( mod )					    								  
							      34 BINARY_MODULO						    								  
							      36 STORE_FAST 3 ( res )					    								  
							      								    								  
							      7 >> 38 LOAD_CONST 3 ( 2 )				    								  
							      40 LOAD_FAST 0 ( a )					    								  
							      42 BINARY_MULTIPLY					    								  
							      44 LOAD_FAST 2 ( mod )					    								  
							      46 BINARY_MODULO						    								  
							      48 STORE_FAST 0 ( a )					    								  
							      								    								  
							      8 50 LOAD_FAST 1 ( b )					    								  
							      52 LOAD_CONST 2 ( 1 )					    								  
							      54 INPLACE_RSHIFT						    								  
							      56 STORE_FAST 1 ( b )					    								  
							      58 JUMP_ABSOLUTE 14					    								  
							      >> 60 POP_BLOCK						    								  
							      								    								  
							      9 >> 62 LOAD_FAST 3 ( res )				    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
def minTime ( arr , n , m ) :				      Disassembly of <code object minTime at 0x7fbac<<unk>> de40, f Disassembly of <code object minTime at 0x7f816a673a50, file " script_not_found : None
    t = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( arr )					  
    while ( 1 ) :					      2 STORE_FAST 3 ( t )					    2 LOAD_METHOD 0 ( append )					  
	items = 0					      								    4 LOAD_FAST 1 ( n )						  
	for i in range ( n ) :				      3 4 SETUP_LOOP 62 ( to 68 )				    6 CALL_METHOD 1						  
	    items += ( t // arr [ i ] )			      								    8 POP_TOP							  
	if ( items >= m ) :				      4 >> 6 LOAD_CONST 1 ( 0 )					    								  
	    return t					      8 STORE_FAST 4 ( items )					    27 10 SETUP_LOOP 22 ( to 28 )				  
	t += 1						      								    12 LOAD_GLOBAL 1 ( range )					  
							      5 10 SETUP_LOOP 32 ( to 44 )				    14 LOAD_CONST 1 ( 0 )					  
							      12 LOAD_GLOBAL 0 ( range )				    16 CALL_FUNCTION 1						  
							      14 LOAD_FAST 1 ( n )					    18 GET_ITER							  
							      16 CALL_FUNCTION 1					    >> 20 FOR_ITER 14 ( to 26 )					  
							      18 GET_ITER						    22 STORE_FAST 2 ( i )					  
							      >> 20 FOR_ITER 20 ( to 42 )				    								  
							      22 STORE_FAST 5 ( i )					    28 24 LOAD_FAST 2 ( i )					  
							      								    26 LOAD_CONST 2 ( 1 )					  
							      6 24 LOAD_FAST 4 ( items )				    28 INPLACE_ADD						  
							      26 LOAD_FAST 3 ( t )					    30 STORE_FAST 2 ( i )					  
							      28 LOAD_FAST 0 ( arr )					    32 JUMP_ABSOLUTE 20						  
							      30 LOAD_FAST 5 ( i )					    >> 34 POP_BLOCK						  
							      32 BINARY_SUBSCR						    								  
							      34 BINARY_FLOOR_DIVIDE					    29 >> 36 LOAD_FAST 2 ( i )					  
							      36 INPLACE_ADD						    38 LOAD_CONST 3 ( 1 )					  
							      38 STORE_FAST 4 ( items )					    40 INPLACE_ADD						  
							      40 JUMP_ABSOLUTE 20					    42 STORE_FAST 2 ( i )					  
							      >> 42 POP_BLOCK						    								  
							      								    30 44 LOAD_FAST 2 ( i )					  
							      7 >> 44 LOAD_FAST 4 ( items )				    46 LOAD_CONST 4 ( 2 )					  
							      46 LOAD_FAST 2 ( m )					    48 INPLACE_ADD						  
							      48 COMPARE_OP 5 ( >= )					    50 STORE_FAST 2 ( i )					  
							      50 POP_JUMP_IF_FALSE 56					    52 JUMP_ABSOLUTE 20						  
							      								    >> 54 POP_BLOCK						  
							      8 52 LOAD_FAST 3 ( t )					    >> 56 LOAD_CONST 0 ( None )					  
							      54 RETURN_VALUE						    58 RETURN_VALUE						  
							      								    NEW_LINE							  
							      9 >> 56 LOAD_FAST 3 ( t )					    								  
							      58 LOAD_CONST 2 ( 1 )					    								  
							      60 INPLACE_ADD						    								  
							      62 STORE_FAST 3 ( t )					    								  
							      64 JUMP_ABSOLUTE 6					    								  
							      66 POP_BLOCK						    								  
							      >> 68 LOAD_CONST 0 ( None )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
def countDer ( n ) :					      Disassembly of <code object countDer at 0x7fbac<<unk>> d540,  Disassembly of <code object countDer at 0x7f816a673a50, file  script_not_found : None
    if ( n == 1 ) : return 0				      2 0 LOAD_FAST 0 ( n )					    154 0 LOAD_FAST 0 ( n )					  
    if ( n == 0 ) : return 1				      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n == 2 ) : return 1				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
    return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 2 )					  
							      8 LOAD_CONST 2 ( 0 )					    8 COMPARE_OP 2 ( == )					  
							      10 RETURN_VALUE						    10 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 >> 12 LOAD_FAST 0 ( n )					    155 12 LOAD_CONST 3 ( '' )					  
							      14 LOAD_CONST 2 ( 0 )					    14 RETURN_VALUE						  
							      16 COMPARE_OP 2 ( == )					    								  
							      18 POP_JUMP_IF_FALSE 24					    156 >> 16 LOAD_CONST 4 ( '' )				  
							      20 LOAD_CONST 1 ( 1 )					    18 RETURN_VALUE						  
							      22 RETURN_VALUE						    20 LOAD_CONST 0 ( None )					  
							      								    22 RETURN_VALUE						  
							      4 >> 24 LOAD_FAST 0 ( n )					    NEW_LINE							  
							      26 LOAD_CONST 3 ( 2 )					    								  
							      28 COMPARE_OP 2 ( == )					    								  
							      30 POP_JUMP_IF_FALSE 36					    								  
							      32 LOAD_CONST 1 ( 1 )					    								  
							      34 RETURN_VALUE						    								  
							      								    								  
							      5 >> 36 LOAD_FAST 0 ( n )					    								  
							      38 LOAD_CONST 1 ( 1 )					    								  
							      40 BINARY_SUBTRACT					    								  
							      42 LOAD_GLOBAL 0 ( countDer )				    								  
							      44 LOAD_FAST 0 ( n )					    								  
							      46 LOAD_CONST 1 ( 1 )					    								  
							      48 BINARY_SUBTRACT					    								  
							      50 CALL_FUNCTION 1					    								  
							      52 LOAD_GLOBAL 0 ( countDer )				    								  
							      54 LOAD_FAST 0 ( n )					    								  
							      56 LOAD_CONST 3 ( 2 )					    								  
							      58 BINARY_SUBTRACT					    								  
							      60 CALL_FUNCTION 1					    								  
							      62 BINARY_ADD						    								  
							      64 BINARY_MULTIPLY					    								  
							      66 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7fbac<<unk>> d540, f Disassembly of <code object findSum at 0x7f816a6e4b70, file " error : Traceback (most recent call last):   File
    multiTerms = n * ( n + 1 ) // 2			      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_GLOBAL 0 ( multiTerms )				  "XLM/dis_script.py", line 59, in <module>	for
    sm = multiTerms					      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 2 , n + 1 ) :			      4 LOAD_CONST 1 ( 1 )					    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
	multiTerms = multiTerms - ( i - 1 )		      6 BINARY_ADD						    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	sm = sm + multiTerms * i			      8 BINARY_MULTIPLY						    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
    return sm						      10 LOAD_CONST 2 ( 2 )					    27 8 LOAD_GLOBAL 1 ( multiTerms )				  pack non-iterable NoneType object
							      12 BINARY_FLOOR_DIVIDE					    10 LOAD_CONST 2 ( - 1 )					  
							      14 STORE_FAST 1 ( multiTerms )				    12 LOAD_CONST 3 ( - 1 )					  
							      								    14 LOAD_CONST 4 ( - 1 )					  
							      3 16 LOAD_FAST 1 ( multiTerms )				    16 LOAD_CONST 5 ( - 1 )					  
							      18 STORE_FAST 2 ( sm )					    18 LOAD_CONST 6 ( - 1 )					  
							      								    20 LOAD_CONST 7 ( - 1 )					  
							      4 20 SETUP_LOOP 46 ( to 68 )				    22 LOAD_CONST 8 ( - 1 )					  
							      22 LOAD_GLOBAL 0 ( range )				    24 LOAD_CONST 9 ( - 1 )					  
							      24 LOAD_CONST 2 ( 2 )					    26 LOAD_CONST 10 ( - 1 )					  
							      26 LOAD_FAST 0 ( n )					    28 LOAD_CONST 10 ( - 1 )					  
							      28 LOAD_CONST 1 ( 1 )					    30 LOAD_CONST 11 ( - 1 )					  
							      30 BINARY_ADD						    32 LOAD_CONST 12 ( - 1 )					  
							      32 CALL_FUNCTION 2					    34 LOAD_CONST 12 ( - 1 )					  
							      34 GET_ITER						    36 LOAD_CONST 12 ( - 1 )					  
							      >> 36 FOR_ITER 28 ( to 66 )				    38 LOAD_CONST 13 ( - 1 )					  
							      38 STORE_FAST 3 ( i )					    40 LOAD_CONST 14 ( - 1 )					  
							      								    42 LOAD_CONST 15 ( - 1 )					  
							      5 40 LOAD_FAST 1 ( multiTerms )				    44 LOAD_CONST 16 ( - 1 )					  
							      42 LOAD_FAST 3 ( i )					    46 LOAD_CONST 17 ( - 1 )					  
							      44 LOAD_CONST 1 ( 1 )					    48 LOAD_CONST 16 ( - 1 )					  
							      46 BINARY_SUBTRACT					    50 LOAD_CONST 17 ( - 1 )					  
							      48 BINARY_SUBTRACT					    52 LOAD_CONST 18 ( - 1 )					  
							      50 STORE_FAST 1 ( multiTerms )				    54 LOAD_CONST 19 ( - 1 )					  
							      								    56 LOAD_CONST 20 ( - 1 )					  
							      6 52 LOAD_FAST 2 ( sm )					    58 LOAD_CONST 22 ( - 1 )					  
							      54 LOAD_FAST 1 ( multiTerms )				    60 LOAD_CONST 19 ( - 1 )					  
							      56 LOAD_FAST 3 ( i )					    62 LOAD_CONST 20 ( - 1 )					  
							      58 BINARY_MULTIPLY					    64 LOAD_CONST 22 ( - 1 )					  
							      60 BINARY_ADD						    66 LOAD_CONST 19 ( - 1 )					  
							      62 STORE_FAST 2 ( sm )					    68 LOAD_CONST 20 ( - 1 )					  
							      64 JUMP_ABSOLUTE 36					    70 LOAD_CONST 22 ( - 1 )					  
							      >> 66 POP_BLOCK						    72 LOAD_CONST 21 ( - 1 )					  
							      								    74 LOAD_CONST 22 ( - 1 )					  
							      7 >> 68 LOAD_FAST 2 ( sm )				    76 LOAD_CONST 23 ( - 1 )					  
							      70 RETURN_VALUE NEW_LINE					    78 LOAD_CONST 22 ( - 1 )					  
							      								    80 LOAD_CONST 23 ( - 1 )					  
							      								    82 LOAD_CONST 22 ( - 1 )					  
							      								    84 LOAD_CONST 23 ( - 1 )					  
							      								    86 LOAD_CONST 22 ( - 1 )					  
							      								    88 LOAD_CONST 23 ( - 1 )					  
							      								    90 LOAD_CONST 22 ( - 1 )					  
							      								    92 LOAD_CONST 23 ( - 1 )					  
							      								    94 LOAD_CONST 22 ( - 1 )					  
							      								    96 LOAD_CONST 23 ( - 1 )					  
							      								    98 LOAD_CONST 23 ( - 1 )					  
							      								    100 LOAD_CONST 22 ( - 1 )					  
							      								    102 LOAD_CONST 23 ( - 1 )					  
							      								    104 LOAD_CONST 22 ( - 1 )					  
							      								    106 LOAD_CONST 23 ( - 1 )					  
							      								    108 LOAD_CONST 24 ( - 1 )					  
							      								    110 LOAD_CONST 23 ( - 1 )					  
							      								    112 LOAD_CONST 24 ( - 1 )					  
							      								    114 LOAD_CONST 25 ( - 1 )					  
							      								    116 LOAD_CONST 26 ( - 1 )					  
							      								    118 LOAD_CONST 25 ( - 1 )					  
							      								    120 LOAD_CONST 26 ( - 1 )					  
							      								    122 LOAD_CONST 25 ( - 1 )					  
							      								    124 LOAD_CONST 26 (						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
def decimalToBinary ( N ) :				      Disassembly of <code object decimalToBinary at 0x7fbac<<unk>> Disassembly of <code object decimalToBinary at 0x7f816a673a50 error : Traceback (most recent call last):   File
    B_Number = 0					      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_GLOBAL 0 ( B_Number )				  "XLM/dis_script.py", line 60, in <module>	exec
    cnt = 0						      2 STORE_FAST 1 ( B_Number )				    2 LOAD_FAST 0 ( N )						  (item)   File "main.py", line 36, in <module>	  Fi
    while ( N != 0 ) :					      								    4 CALL_FUNCTION 1						  le "<dis>", line 2, in decimalToBinary NameError:
	rem = N % 2					      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( cnt )					  name 'B_Number' is not defined
	c = pow ( 10 , cnt )				      6 STORE_FAST 2 ( cnt )					    								  
	B_Number += rem * c				      								    66 8 LOAD_GLOBAL 1 ( np )					  
	N //= 2						      4 8 SETUP_LOOP 58 ( to 68 )				    10 LOAD_METHOD 2 ( pow )					  
	cnt += 1					      >> 10 LOAD_FAST 0 ( N )					    12 LOAD_FAST 1 ( cnt )					  
    return B_Number					      12 LOAD_CONST 1 ( 0 )					    14 LOAD_FAST 1 ( cnt )					  
							      14 COMPARE_OP 3 ( != )					    16 CALL_METHOD 2						  
							      16 POP_JUMP_IF_FALSE 66					    18 RETURN_VALUE						  
							      								    NEW_LINE							  
							      5 18 LOAD_FAST 0 ( N )					    								  
							      20 LOAD_CONST 2 ( 2 )					    								  
							      22 BINARY_MODULO						    								  
							      24 STORE_FAST 3 ( rem )					    								  
							      								    								  
							      6 26 LOAD_GLOBAL 0 ( pow )				    								  
							      28 LOAD_CONST 3 ( 10 )					    								  
							      30 LOAD_FAST 2 ( cnt )					    								  
							      32 CALL_FUNCTION 2					    								  
							      34 STORE_FAST 4 ( c )					    								  
							      								    								  
							      7 36 LOAD_FAST 1 ( B_Number )				    								  
							      38 LOAD_FAST 3 ( rem )					    								  
							      40 LOAD_FAST 4 ( c )					    								  
							      42 BINARY_MULTIPLY					    								  
							      44 INPLACE_ADD						    								  
							      46 STORE_FAST 1 ( B_Number )				    								  
							      								    								  
							      8 48 LOAD_FAST 0 ( N )					    								  
							      50 LOAD_CONST 2 ( 2 )					    								  
							      52 INPLACE_FLOOR_DIVIDE					    								  
							      54 STORE_FAST 0 ( N )					    								  
							      								    								  
							      9 56 LOAD_FAST 2 ( cnt )					    								  
							      58 LOAD_CONST 4 ( 1 )					    								  
							      60 INPLACE_ADD						    								  
							      62 STORE_FAST 2 ( cnt )					    								  
							      64 JUMP_ABSOLUTE 10					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      10 >> 68 LOAD_FAST 1 ( B_Number )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	      SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	    SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	  SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST
--							      --							    --								  --
def printSorted ( arr , start , end ) :			      Disassembly of <code object printSorted at 0x7fbac<<unk>> d54 Disassembly of <code object printSorted at 0x7f816a6e4b70, fi script_not_found : None
    if start > end :					      2 0 LOAD_FAST 1 ( start )					    18 0 LOAD_FAST 0 ( arr )					  
	return						      2 LOAD_FAST 2 ( end )					    2 LOAD_ATTR 0 ( printSorted )				  
    printSorted ( arr , start * 2 + 1 , end )		      4 COMPARE_OP 4 ( > )					    4 LOAD_FAST 1 ( start )					  
    print ( arr [ start ] , end = " " )			      6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 1 ( 1 )					  
    printSorted ( arr , start * 2 + 2 , end )		      								    8 BINARY_SUBTRACT						  
							      3 8 LOAD_CONST 0 ( None )					    10 LOAD_CONST 2 ( 2 )					  
							      10 RETURN_VALUE						    12 BINARY_POWER						  
							      								    14 LOAD_CONST 3 ( 2 )					  
							      4 >> 12 LOAD_GLOBAL 0 ( printSorted )			    16 BINARY_POWER						  
							      14 LOAD_FAST 0 ( arr )					    18 LOAD_CONST 4 ( 3 )					  
							      16 LOAD_FAST 1 ( start )					    20 BINARY_POWER						  
							      18 LOAD_CONST 1 ( 2 )					    22 LOAD_CONST 5 ( 2 )					  
							      20 BINARY_MULTIPLY					    24 BINARY_POWER						  
							      22 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 6 ( 3 )					  
							      24 BINARY_ADD						    28 BINARY_POWER						  
							      26 LOAD_FAST 2 ( end )					    30 LOAD_CONST 7 ( 4 )					  
							      28 CALL_FUNCTION 3					    32 BINARY_POWER						  
							      30 POP_TOP						    34 LOAD_CONST 8 ( 3 )					  
							      								    36 BINARY_POWER						  
							      5 32 LOAD_GLOBAL 1 ( print )				    38 LOAD_CONST 9 ( 2 )					  
							      34 LOAD_FAST 0 ( arr )					    40 BINARY_POWER						  
							      36 LOAD_FAST 1 ( start )					    42 LOAD_CONST 10 ( 3 )					  
							      38 BINARY_SUBSCR						    44 BINARY_POWER						  
							      40 LOAD_CONST 3 ( ' ' )					    46 LOAD_CONST 11 ( 2 )					  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    48 BINARY_POWER						  
							      44 CALL_FUNCTION_KW 2					    50 LOAD_CONST 12 ( 3 )					  
							      46 POP_TOP						    52 BINARY_POWER						  
							      								    54 LOAD_CONST 13 ( 2 )					  
							      6 48 LOAD_GLOBAL 0 ( printSorted )			    56 BINARY_POWER						  
							      50 LOAD_FAST 0 ( arr )					    58 LOAD_CONST 14 ( 3 )					  
							      52 LOAD_FAST 1 ( start )					    60 BINARY_POWER						  
							      54 LOAD_CONST 1 ( 2 )					    62 LOAD_CONST 15 ( 2 )					  
							      56 BINARY_MULTIPLY					    64 BINARY_POWER						  
							      58 LOAD_CONST 1 ( 2 )					    66 LOAD_CONST 16 ( 3 )					  
							      60 BINARY_ADD						    68 BINARY_POWER						  
							      62 LOAD_FAST 2 ( end )					    70 LOAD_CONST 17 ( 2 )					  
							      64 CALL_FUNCTION 3					    72 BINARY_POWER						  
							      66 POP_TOP						    74 BINARY_MULTIPLY						  
							      68 LOAD_CONST 0 ( None )					    76 LOAD_CONST 18 ( 3 )					  
							      70 RETURN_VALUE NEW_LINE					    78 BINARY_POWER						  
							      								    80 LOAD_CONST 16 ( 3 )					  
							      								    82 BINARY_POWER						  
							      								    84 LOAD_CONST 17 ( 2 )					  
							      								    86 BINARY_POWER						  
							      								    88 BINARY_POWER						  
							      								    90 LOAD_CONST 18 ( 3 )					  
							      								    92 BINARY_POWER						  
							      								    94 LOAD_CONST 19 ( 2 )					  
							      								    96 BINARY_POWER						  
							      								    98 LOAD_CONST 20 ( 3 )					  
							      								    100 BINARY_POWER						  
							      								    102 BINARY_POWER						  
							      								    104 LOAD_CONST 21 ( 2 )					  
							      								    106 BINARY_POWER						  
							      								    108 BINARY_POWER						  
							      								    110 LOAD_CONST 22 ( 3 )					  
							      								    112 BINARY_POWER						  
							      								    114 LOAD_CONST 23 ( 2 )					  
							      								    116 BINARY_POWER						  
							      								    118 LOAD_CONST 22 ( 3 )					  
							      								    120 BINARY_POWER						  
							      								    122 LOAD_CONST 24 ( 3 )					  
							      								    124 BINARY_POWER						  
							      								    126 LOAD_CONST 23 ( 2 )					  
							      								    128 BINARY_POWER						  
							      								    130 LOAD_CONST 24 ( 3 )					  
							      								    132 BINARY_POWER						  
							      								    134 LOAD_CONST 25 ( 3 )					  
							      								    136 BINARY_POWER						  
							      								    138 LOAD_CONST 26 ( 3 )					  
							      								    140 BINARY_POWER						  
							      								    142 LOAD_CONST 27 ( 3 )					  
							      								    144 BINARY_POWER						  
							      								    146 LOAD_CONST 28 ( 3 )					  
							      								    148 BINARY_POWER						  
							      								    150 LOAD_CONST 30 ( 3 )					  
							      								    152 BINARY_POWER						  
							      								    154 BINARY_MULTIPLY						  
							      								    156 LOAD_CONST 29 ( 2 )					  
							      								    158 BINARY_POWER						  
							      								    156 LOAD_CONST 30 ( 3 )					  
							      								    158 BINARY_POWER						  
							      								    160 BINARY_POWER						  
							      								    162 LOAD_CONST 30 ( 3 )					  
							      								    164 BINARY_POWER						  
							      								    166 BINARY_POWER						  
							      								    168 LOAD_CONST 30 ( 3 )					  
							      								    170 BINARY_POWER						  
							      								    172 BINARY_POWER						  
							      								    174 LOAD_CONST 29 ( 2 )					  
							      								    176 BINARY_POWER						  
							      								    178 LOAD_CONST 30 ( 3 )					  
							      								    180 BINARY_POWER						  
							      								    								  
							      								    181 182 LOAD_CONST 30 ( 3 )					  
							      								    								  
							      								    182 182 LOAD_CONST 30 ( 3 )					  
							      								    								  
							      								    183 183 LOAD_FAST 0 ( arr )					  
							      								    184 LOAD_CONST 30 ( 3 )					  
							      								    186 BINARY_POWER						  
							      								    188 BINARY_POWER						  
							      								    								  
							      								    184								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
def constructArr ( arr , pair , n ) :			      Disassembly of <code object constructArr at 0x7fbac0e89d20, f Disassembly of <code object constructArr at 0x7f8169feb660, f script_not_found : None
    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] )  2 0 LOAD_FAST 1 ( pair )					    106 0 LOAD_FAST 0 ( arr )					  
    for i in range ( 1 , n ) :				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_FAST 1 ( pair )					  
	arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		      4 BINARY_SUBSCR						    4 LOAD_FAST 2 ( n )						  
							      6 LOAD_FAST 1 ( pair )					    6 LOAD_FAST 3 ( n )						  
							      8 LOAD_CONST 2 ( 1 )					    8 BINARY_MULTIPLY						  
							      10 BINARY_SUBSCR						    10 BINARY_ADD						  
							      12 BINARY_ADD						    12 RETURN_VALUE						  
							      14 LOAD_FAST 1 ( pair )					    NEW_LINE							  
							      16 LOAD_FAST 2 ( n )					    								  
							      18 LOAD_CONST 2 ( 1 )					    								  
							      20 BINARY_SUBTRACT					    								  
							      22 BINARY_SUBSCR						    								  
							      24 BINARY_SUBTRACT					    								  
							      26 LOAD_CONST 3 ( 2 )					    								  
							      28 BINARY_FLOOR_DIVIDE					    								  
							      30 LOAD_FAST 0 ( arr )					    								  
							      32 LOAD_CONST 1 ( 0 )					    								  
							      34 STORE_SUBSCR						    								  
							      								    								  
							      3 36 SETUP_LOOP 42 ( to 80 )				    								  
							      38 LOAD_GLOBAL 0 ( range )				    								  
							      40 LOAD_CONST 2 ( 1 )					    								  
							      42 LOAD_FAST 2 ( n )					    								  
							      44 CALL_FUNCTION 2					    								  
							      46 GET_ITER						    								  
							      >> 48 FOR_ITER 28 ( to 78 )				    								  
							      50 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 52 LOAD_FAST 1 ( pair )					    								  
							      54 LOAD_FAST 3 ( i )					    								  
							      56 LOAD_CONST 2 ( 1 )					    								  
							      58 BINARY_SUBTRACT					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_FAST 0 ( arr )					    								  
							      64 LOAD_CONST 1 ( 0 )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 BINARY_SUBTRACT					    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 3 ( i )					    								  
							      74 STORE_SUBSCR						    								  
							      76 JUMP_ABSOLUTE 48					    								  
							      >> 78 POP_BLOCK						    								  
							      >> 80 LOAD_CONST 0 ( None )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	      MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	    MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS		  MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS
--							      --							    --								  --
def minProduct ( arr , n , k ) :			      Disassembly of <code object minProduct at 0x7fbac<<unk>> d540 Disassembly of <code object minProduct at 0x7f816a6828a0, fil script_not_found : None
    heapq.heapify ( arr )				      2 0 LOAD_GLOBAL 0 ( heapq )				    20 0 LOAD_GLOBAL 0 ( heapq )				  
    count = 0						      2 LOAD_METHOD 1 ( heapify )				    2 LOAD_METHOD 1 ( heapify )					  
    ans = 1						      4 LOAD_FAST 0 ( arr )					    4 LOAD_FAST 0 ( arr )					  
    while ( arr ) and count < k :			      6 CALL_METHOD 1						    6 LOAD_FAST 1 ( n )						  
	x = heapq.heappop ( arr )			      8 POP_TOP							    8 LOAD_FAST 2 ( v )						  
	ans = ans * x					      								    10 CALL_METHOD 2						  
	count = count + 1				      3 10 LOAD_CONST 1 ( 0 )					    12 CALL_FUNCTION 1						  
    return ans ;					      12 STORE_FAST 3 ( count )					    14 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 14 LOAD_CONST 2 ( 1 )					    								  
							      16 STORE_FAST 4 ( ans )					    								  
							      								    								  
							      5 18 SETUP_LOOP 42 ( to 62 )				    								  
							      >> 20 LOAD_FAST 0 ( arr )					    								  
							      22 POP_JUMP_IF_FALSE 60					    								  
							      24 LOAD_FAST 3 ( count )					    								  
							      26 LOAD_FAST 2 ( k )					    								  
							      28 COMPARE_OP 0 ( < )					    								  
							      30 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      6 32 LOAD_GLOBAL 0 ( heapq )				    								  
							      34 LOAD_METHOD 2 ( heappop )				    								  
							      36 LOAD_FAST 0 ( arr )					    								  
							      38 CALL_METHOD 1						    								  
							      40 STORE_FAST 5 ( x )					    								  
							      								    								  
							      7 42 LOAD_FAST 4 ( ans )					    								  
							      44 LOAD_FAST 5 ( x )					    								  
							      46 BINARY_MULTIPLY					    								  
							      48 STORE_FAST 4 ( ans )					    								  
							      								    								  
							      8 50 LOAD_FAST 3 ( count )				    								  
							      52 LOAD_CONST 2 ( 1 )					    								  
							      54 BINARY_ADD						    								  
							      56 STORE_FAST 3 ( count )					    								  
							      58 JUMP_ABSOLUTE 20					    								  
							      >> 60 POP_BLOCK						    								  
							      								    								  
							      9 >> 62 LOAD_FAST 4 ( ans )				    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	      K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	    K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	  K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED
--							      --							    --								  --
def minDiff ( arr , n , k ) :				      Disassembly of <code object minDiff at 0x7fbac<<unk>> de40, f Disassembly of <code object minDiff at 0x7f816a673a50, file " error : Traceback (most recent call last):   File
    result = + 2147483647				      2 0 LOAD_CONST 1 ( 2147483647 )				    22 0 LOAD_CONST 1 ( 0.25 )					  "XLM/dis_script.py", line 60, in <module>	exec
    arr.sort ( )					      2 STORE_FAST 3 ( result )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 32, in <module>	  Fi
    for i in range ( n - k + 1 ) :			      								    								  le "<dis>", line 2, in minDiff ValueError: int() b
	result = int ( min ( result , arr [ i + k - 1 ] - arr 3 4 LOAD_FAST 0 ( arr )					    23 4 LOAD_GLOBAL 0 ( int )					  ase must be >= 2 and <= 36, or 0
    return result					      6 LOAD_METHOD 0 ( sort )					    6 LOAD_FAST 1 ( n )						  
							      8 CALL_METHOD 0						    8 LOAD_CONST 2 ( 1 )					  
							      10 POP_TOP						    10 CALL_FUNCTION 2						  
							      								    12 STORE_FAST 2 ( n )					  
							      4 12 SETUP_LOOP 58 ( to 72 )				    								  
							      14 LOAD_GLOBAL 1 ( range )				    24 14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_METHOD 1 ( append )					  
							      18 LOAD_FAST 2 ( k )					    18 LOAD_FAST 2 ( n )					  
							      20 BINARY_SUBTRACT					    20 LOAD_CONST 3 ( 1 )					  
							      22 LOAD_CONST 2 ( 1 )					    22 BINARY_SUBTRACT						  
							      24 BINARY_ADD						    24 LOAD_FAST 1 ( n )					  
							      26 CALL_FUNCTION 1					    26 LOAD_CONST 4 ( 2 )					  
							      28 GET_ITER						    28 BINARY_MULTIPLY						  
							      >> 30 FOR_ITER 38 ( to 70 )				    30 LOAD_FAST 1 ( n )					  
							      32 STORE_FAST 4 ( i )					    32 BINARY_MULTIPLY						  
							      								    34 CALL_METHOD 1						  
							      5 34 LOAD_GLOBAL 2 ( int )				    36 POP_TOP							  
							      36 LOAD_GLOBAL 3 ( min )					    								  
							      38 LOAD_FAST 3 ( result )					    25 38 LOAD_FAST 0 ( arr )					  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_METHOD 2 ( append )					  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 1 ( n )					  
							      44 LOAD_FAST 2 ( k )					    44 LOAD_CONST 5 ( 1 )					  
							      46 BINARY_ADD						    46 BINARY_SUBTRACT						  
							      48 LOAD_CONST 2 ( 1 )					    48 LOAD_FAST 1 ( n )					  
							      50 BINARY_SUBTRACT					    50 BINARY_MULTIPLY						  
							      52 BINARY_SUBSCR						    52 CALL_METHOD 1						  
							      54 LOAD_FAST 0 ( arr )					    54 POP_TOP							  
							      56 LOAD_FAST 4 ( i )					    								  
							      58 BINARY_SUBSCR						    26 56 LOAD_FAST 0 ( arr )					  
							      60 BINARY_SUBTRACT					    58 LOAD_METHOD 3 ( append )					  
							      62 CALL_FUNCTION 2					    60 LOAD_FAST 1 ( n )					  
							      64 CALL_FUNCTION 1					    62 CALL_METHOD 1						  
							      66 STORE_FAST 3 ( result )				    64 POP_TOP							  
							      68 JUMP_ABSOLUTE 30					    66 LOAD_CONST 0 ( None )					  
							      >> 70 POP_BLOCK						    68 RETURN_VALUE						  
							      								    NEW_LINE							  
							      6 >> 72 LOAD_FAST 3 ( result )				    								  
							      74 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	      DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	    DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	  DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST
--							      --							    --								  --
def dfs ( List , node , arrival ) :			      Disassembly of <code object dfs at 0x7fbac<<unk>> de40, file  Disassembly of <code object dfs at 0x7f816a6e4b70, file "<dis script_not_found : None
    print ( node )					      2 0 LOAD_GLOBAL 0 ( print )				    26 0 LOAD_GLOBAL 0 ( print )				  
    for i in range ( len ( List [ node ] ) ) :		      2 LOAD_FAST 1 ( node )					    2 LOAD_FAST 0 ( node )					  
	if ( List [ node ] [ i ] != arrival ) :		      4 CALL_FUNCTION 1						    4 LOAD_ATTR 1 ( node )					  
	    dfs ( List , List [ node ] [ i ] , node )	      6 POP_TOP							    6 LOAD_ATTR 2 ( label )					  
							      								    8 LOAD_CONST 1 ( 0 )					  
							      3 8 SETUP_LOOP 60 ( to 70 )				    10 BINARY_SUBSCR						  
							      10 LOAD_GLOBAL 1 ( range )				    12 CALL_FUNCTION 1						  
							      12 LOAD_GLOBAL 2 ( len )					    14 POP_TOP							  
							      14 LOAD_FAST 0 ( List )					    								  
							      16 LOAD_FAST 1 ( node )					    27 16 LOAD_GLOBAL 3 ( dfs )					  
							      18 BINARY_SUBSCR						    18 LOAD_FAST 0 ( node )					  
							      20 CALL_FUNCTION 1					    20 LOAD_ATTR 4 ( dfs )					  
							      22 CALL_FUNCTION 1					    22 LOAD_FAST 0 ( node )					  
							      24 GET_ITER						    24 LOAD_ATTR 5 ( arrival )					  
							      >> 26 FOR_ITER 40 ( to 68 )				    26 LOAD_FAST 0 ( node )					  
							      28 STORE_FAST 3 ( i )					    28 LOAD_ATTR 6 ( arrival )					  
							      								    30 LOAD_FAST 0 ( node )					  
							      4 30 LOAD_FAST 0 ( List )					    32 LOAD_ATTR 7 ( arrival )					  
							      32 LOAD_FAST 1 ( node )					    34 LOAD_FAST 0 ( node )					  
							      34 BINARY_SUBSCR						    36 LOAD_ATTR 8 ( arrival )					  
							      36 LOAD_FAST 3 ( i )					    38 LOAD_FAST 0 ( node )					  
							      38 BINARY_SUBSCR						    40 LOAD_ATTR 9 ( arrival )					  
							      40 LOAD_FAST 2 ( arrival )				    42 LOAD_FAST 0 ( node )					  
							      42 COMPARE_OP 3 ( != )					    44 LOAD_ATTR 10 ( arrival )					  
							      44 POP_JUMP_IF_FALSE 26					    46 LOAD_FAST 0 ( node )					  
							      								    48 LOAD_ATTR 11 ( arrival )					  
							      5 46 LOAD_GLOBAL 3 ( dfs )				    50 LOAD_FAST 0 ( node )					  
							      48 LOAD_FAST 0 ( List )					    52 LOAD_ATTR 12 ( arrival )					  
							      50 LOAD_FAST 0 ( List )					    54 LOAD_FAST 0 ( node )					  
							      52 LOAD_FAST 1 ( node )					    56 LOAD_ATTR 13 ( arrival )					  
							      54 BINARY_SUBSCR						    58 LOAD_FAST 0 ( node )					  
							      56 LOAD_FAST 3 ( i )					    60 LOAD_ATTR 14 ( arrival )					  
							      58 BINARY_SUBSCR						    62 LOAD_FAST 0 ( node )					  
							      60 LOAD_FAST 1 ( node )					    64 LOAD_ATTR 15 ( arrival )					  
							      62 CALL_FUNCTION 3					    66 LOAD_FAST 0 ( node )					  
							      64 POP_TOP						    68 LOAD_ATTR 16 ( arrival )					  
							      66 JUMP_ABSOLUTE 26					    70 LOAD_FAST 0 ( node )					  
							      >> 68 POP_BLOCK						    72 LOAD_ATTR 17 ( arrival )					  
							      >> 70 LOAD_CONST 0 ( None )				    74 LOAD_FAST 0 ( node )					  
							      72 RETURN_VALUE NEW_LINE					    76 LOAD_ATTR 16 ( arrival )					  
							      								    78 LOAD_FAST 0 ( node )					  
							      								    80 LOAD_ATTR 17 ( arrival )					  
							      								    82 LOAD_FAST 0 ( node )					  
							      								    84 LOAD_ATTR 18 ( arrival )					  
							      								    86 LOAD_FAST 0 ( node )					  
							      								    88 LOAD_ATTR 19 ( arrival )					  
							      								    90 LOAD_FAST 0 ( node )					  
							      								    92 LOAD_ATTR 20 ( arrival )					  
							      								    94 LOAD_FAST 0 ( node )					  
							      								    96 LOAD_ATTR 19 ( arrival )					  
							      								    98 LOAD_FAST 0 ( node )					  
							      								    100 LOAD_ATTR 20 ( arrival )				  
							      								    102 LOAD_FAST 0 ( node )					  
							      								    104 LOAD_ATTR 20 ( arrival )				  
							      								    106 LOAD_FAST 0 ( node )					  
							      								    108 LOAD_ATTR 21 ( arrival )				  
							      								    110 LOAD_FAST 0 ( node )					  
							      								    112 LOAD_ATTR 20 ( arrival )				  
							      								    114 LOAD_FAST 0 ( node )					  
							      								    116 LOAD_ATTR 22 ( arrival )				  
							      								    118 LOAD_FAST 0 ( node )					  
							      								    120 LOAD_ATTR 20 ( arrival )				  
							      								    122 LOAD_FAST 0 ( node )					  
							      								    124 LOAD_ATTR 21 ( arrival )				  
							      								    126 LOAD_FAST 0 ( node )					  
							      								    128 LOAD_ATTR 22 ( arrival )				  
							      								    130 LOAD_FAST 0 ( node )					  
							      								    132 LOAD_ATTR 24 ( arrival )				  
							      								    134 LOAD_FAST 0 ( node )					  
							      								    136 LOAD_ATTR 26 (						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
def numofsubset ( arr , n ) :				      Disassembly of <code object numofsubset at 0x7fbac<<unk>> de4 Disassembly of <code object numofsubset at 0x7f816a673a50, fi failure : #Results: 0, 10
    x = sorted ( arr )					      2 0 LOAD_GLOBAL 0 ( sorted )				    65 0 LOAD_FAST 0 ( arr )					  
    count = 1						      2 LOAD_FAST 0 ( arr )					    2 LOAD_METHOD 0 ( append )					  
    for i in range ( 0 , n - 1 ) :			      4 CALL_FUNCTION 1						    4 LOAD_FAST 1 ( n )						  
	if ( x [ i ] + 1 != x [ i + 1 ] ) :		      6 STORE_FAST 2 ( x )					    6 CALL_METHOD 1						  
	    count = count + 1				      								    8 POP_TOP							  
    return count					      3 8 LOAD_CONST 1 ( 1 )					    								  
							      10 STORE_FAST 3 ( count )					    66 10 LOAD_FAST 0 ( arr )					  
							      								    12 LOAD_METHOD 1 ( append )					  
							      4 12 SETUP_LOOP 54 ( to 68 )				    14 LOAD_FAST 1 ( n )					  
							      14 LOAD_GLOBAL 1 ( range )				    16 CALL_METHOD 1						  
							      16 LOAD_CONST 2 ( 0 )					    18 POP_TOP							  
							      18 LOAD_FAST 1 ( n )					    								  
							      20 LOAD_CONST 1 ( 1 )					    67 20 LOAD_FAST 0 ( arr )					  
							      22 BINARY_SUBTRACT					    22 LOAD_METHOD 2 ( append )					  
							      24 CALL_FUNCTION 2					    24 LOAD_FAST 1 ( n )					  
							      26 GET_ITER						    26 CALL_METHOD 1						  
							      >> 28 FOR_ITER 36 ( to 66 )				    28 POP_TOP							  
							      30 STORE_FAST 4 ( i )					    30 LOAD_CONST 0 ( None )					  
							      								    32 RETURN_VALUE						  
							      5 32 LOAD_FAST 2 ( x )					    NEW_LINE							  
							      34 LOAD_FAST 4 ( i )					    								  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_CONST 1 ( 1 )					    								  
							      40 BINARY_ADD						    								  
							      42 LOAD_FAST 2 ( x )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 LOAD_CONST 1 ( 1 )					    								  
							      48 BINARY_ADD						    								  
							      50 BINARY_SUBSCR						    								  
							      52 COMPARE_OP 3 ( != )					    								  
							      54 POP_JUMP_IF_FALSE 28					    								  
							      								    								  
							      6 56 LOAD_FAST 3 ( count )				    								  
							      58 LOAD_CONST 1 ( 1 )					    								  
							      60 BINARY_ADD						    								  
							      62 STORE_FAST 3 ( count )					    								  
							      64 JUMP_ABSOLUTE 28					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      7 >> 68 LOAD_FAST 3 ( count )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		      COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		    COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		  COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME
--							      --							    --								  --
def countFibs ( low , high ) :				      Disassembly of <code object countFibs at 0x7fbac0e8bc90, file Disassembly of <code object countFibs at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    f1 , f2 , f3 = 0 , 1 , 1				      2 0 LOAD_CONST 1 ( ( 0 , 1 , 1 ) )			    26 0 LOAD_FAST 0 ( low )					  "XLM/dis_script.py", line 60, in <module>	exec
    result = 0						      2 UNPACK_SEQUENCE 3					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 36, in <module>	  Fi
    while ( f1 <= high ) :				      4 STORE_FAST 2 ( f1 )					    4 COMPARE_OP 5 ( >= )					  le "<dis>", line 2, in countFibs TypeError: '>=' n
	if ( f1 >= low ) :				      6 STORE_FAST 3 ( f2 )					    6 POP_JUMP_IF_FALSE 12					  ot supported between instances of 'int' and 'tuple
	    result += 1					      8 STORE_FAST 4 ( f3 )					    								  '
	f1 = f2						      								    27 8 LOAD_FAST 0 ( low )					  
	f2 = f3						      3 10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
	f3 = f1 + f2					      12 STORE_FAST 5 ( result )				    12 BINARY_SUBSCR						  
    return result					      								    14 STORE_FAST 1 ( high )					  
							      4 14 SETUP_LOOP 44 ( to 60 )				    								  
							      >> 16 LOAD_FAST 2 ( f1 )					    28 16 LOAD_FAST 1 ( high )					  
							      18 LOAD_FAST 1 ( high )					    18 LOAD_CONST 1 ( 0 )					  
							      20 COMPARE_OP 1 ( <= )					    20 COMPARE_OP 4 ( > )					  
							      22 POP_JUMP_IF_FALSE 58					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 LOAD_FAST 2 ( f1 )					    29 24 LOAD_FAST 1 ( high )					  
							      26 LOAD_FAST 0 ( low )					    26 LOAD_CONST 1 ( 0 )					  
							      28 COMPARE_OP 5 ( >= )					    28 COMPARE_OP 4 ( > )					  
							      30 POP_JUMP_IF_FALSE 40					    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      6 32 LOAD_FAST 5 ( result )				    30 32 LOAD_FAST 1 ( high )					  
							      34 LOAD_CONST 3 ( 1 )					    34 LOAD_CONST 1 ( 0 )					  
							      36 INPLACE_ADD						    36 COMPARE_OP 4 ( > )					  
							      38 STORE_FAST 5 ( result )				    38 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 >> 40 LOAD_FAST 3 ( f2 )				    31 40 LOAD_FAST 1 ( high )					  
							      42 STORE_FAST 2 ( f1 )					    42 LOAD_CONST 1 ( 0 )					  
							      								    44 COMPARE_OP 4 ( > )					  
							      8 44 LOAD_FAST 4 ( f3 )					    46 POP_JUMP_IF_FALSE 52					  
							      46 STORE_FAST 3 ( f2 )					    								  
							      								    32 48 LOAD_FAST 1 ( high )					  
							      9 48 LOAD_FAST 2 ( f1 )					    50 LOAD_CONST 1 ( 0 )					  
							      50 LOAD_FAST 3 ( f2 )					    52 COMPARE_OP 4 ( > )					  
							      52 BINARY_ADD						    54 POP_JUMP_IF_FALSE 52					  
							      54 STORE_FAST 4 ( f3 )					    								  
							      56 JUMP_ABSOLUTE 16					    33 56 LOAD_FAST 1 ( high )					  
							      >> 58 POP_BLOCK						    58 LOAD_CONST 1 ( 0 )					  
							      								    60 COMPARE_OP 4 ( > )					  
							      10 >> 60 LOAD_FAST 5 ( result )				    62 POP_JUMP_IF_FALSE 52					  
							      62 RETURN_VALUE NEW_LINE					    								  
							      								    34 64 LOAD_FAST 1 ( high )					  
							      								    66 LOAD_CONST 1 ( 0 )					  
							      								    68 COMPARE_OP 4 ( > )					  
							      								    70 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      								    35 72 LOAD_FAST 1 ( high )					  
							      								    74 LOAD_CONST 1 ( 0 )					  
							      								    76 COMPARE_OP 4 ( > )					  
							      								    78 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    36 80 LOAD_FAST 1 ( high )					  
							      								    82 LOAD_CONST 1 ( 0 )					  
							      								    84 COMPARE_OP 4 ( > )					  
							      								    86 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    37 >> 88 LOAD_FAST 1 ( high )				  
							      								    90 LOAD_CONST 1 ( 0 )					  
							      								    92 COMPARE_OP 4 ( > )					  
							      								    94 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    38 96 LOAD_FAST 1 ( high )					  
							      								    98 LOAD_CONST 1 ( 0 )					  
							      								    100 COMPARE_OP 4 ( > )					  
							      								    102 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    39 104 LOAD_FAST 1 ( high )					  
							      								    106 LOAD_CONST 1 ( 0 )					  
							      								    108 COMPARE_OP 4 ( > )					  
							      								    110 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    40 112 LOAD_FAST 1 ( high )					  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 COMPARE_OP 4 ( > )					  
							      								    118 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    41 120 LOAD_FAST 1 ( high )					  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 COMPARE_OP 4 ( > )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    42 128 LOAD_FAST 1 ( high )					  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 COMPARE_OP 4 ( > )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 136 LOAD_FAST 1 ( high )					  
							      								    138 RETURN_VALUE						  
							      								    >> 140 LOAD_CONST 1 ( 0 )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
def isPossibleTriangle ( arr , N ) :			      Disassembly of <code object isPossibleTriangle at 0x7fbac0e8b Disassembly of <code object isPossibleTriangle at 0x7f816a601 error : Traceback (most recent call last):   File
    if N < 3 :						      2 0 LOAD_FAST 1 ( N )					    69 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
	return False					      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 2 )					  (item)   File "main.py", line 33, in <module>	  Fi
    arr.sort ( )					      4 COMPARE_OP 0 ( < )					    4 BINARY_MULTIPLY						  le "<dis>", line 2, in isPossibleTriangle TypeErro
    for i in range ( N - 2 ) :				      6 POP_JUMP_IF_FALSE 12					    6 LOAD_FAST 1 ( N )						  r: unsupported operand type(s) for +: 'int' and 'l
	if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	      								    8 BINARY_MULTIPLY						  ist'
	    return True					      3 8 LOAD_CONST 2 ( False )				    10 LOAD_FAST 1 ( N )					  
							      10 RETURN_VALUE						    12 BINARY_MULTIPLY						  
							      								    14 LOAD_FAST 1 ( N )					  
							      4 >> 12 LOAD_FAST 0 ( arr )				    16 BINARY_MULTIPLY						  
							      14 LOAD_METHOD 0 ( sort )					    18 BINARY_ADD						  
							      16 CALL_METHOD 0						    20 LOAD_CONST 2 ( 2 )					  
							      18 POP_TOP						    22 BINARY_MULTIPLY						  
							      								    24 BINARY_ADD						  
							      5 20 SETUP_LOOP 56 ( to 78 )				    26 RETURN_VALUE						  
							      22 LOAD_GLOBAL 1 ( range )				    NEW_LINE							  
							      24 LOAD_FAST 1 ( N )					    								  
							      26 LOAD_CONST 3 ( 2 )					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 CALL_FUNCTION 1					    								  
							      32 GET_ITER						    								  
							      >> 34 FOR_ITER 40 ( to 76 )				    								  
							      36 STORE_FAST 2 ( i )					    								  
							      								    								  
							      6 38 LOAD_FAST 0 ( arr )					    								  
							      40 LOAD_FAST 2 ( i )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 0 ( arr )					    								  
							      46 LOAD_FAST 2 ( i )					    								  
							      48 LOAD_CONST 4 ( 1 )					    								  
							      50 BINARY_ADD						    								  
							      52 BINARY_SUBSCR						    								  
							      54 BINARY_ADD						    								  
							      56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 2 ( i )					    								  
							      60 LOAD_CONST 3 ( 2 )					    								  
							      62 BINARY_ADD						    								  
							      64 BINARY_SUBSCR						    								  
							      66 COMPARE_OP 4 ( > )					    								  
							      68 POP_JUMP_IF_FALSE 34					    								  
							      								    								  
							      7 70 LOAD_CONST 5 ( True )				    								  
							      72 RETURN_VALUE						    								  
							      74 JUMP_ABSOLUTE 34					    								  
							      >> 76 POP_BLOCK						    								  
							      >> 78 LOAD_CONST 0 ( None )				    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
def eulerian ( n , m ) :				      Disassembly of <code object eulerian at 0x7fbac<<unk>> d540,  Disassembly of <code object eulerian at 0x7f816a6e4b70, file  script_not_found : None
    if ( m >= n or n == 0 ) :				      2 0 LOAD_FAST 1 ( m )					    20 0 LOAD_FAST 0 ( n )					  
	return 0 ;					      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 1 ( 0 )					  
    if ( m == 0 ) :					      4 COMPARE_OP 5 ( >= )					    4 BINARY_SUBSCR						  
	return 1 ;					      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( 1 )					  
    return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 8 LOAD_FAST 0 ( n )					    8 COMPARE_OP 2 ( == )					  
							      10 LOAD_CONST 1 ( 0 )					    10 POP_JUMP_IF_FALSE 16					  
							      12 COMPARE_OP 2 ( == )					    								  
							      14 POP_JUMP_IF_FALSE 20					    21 12 LOAD_CONST 3 ( 1 )					  
							      								    14 RETURN_VALUE						  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    								  
							      18 RETURN_VALUE						    22 >> 16 LOAD_CONST 4 ( 1 )					  
							      								    18 RETURN_VALUE						  
							      4 >> 20 LOAD_FAST 1 ( m )					    20 LOAD_CONST 0 ( None )					  
							      22 LOAD_CONST 1 ( 0 )					    22 RETURN_VALUE						  
							      24 COMPARE_OP 2 ( == )					    NEW_LINE							  
							      26 POP_JUMP_IF_FALSE 32					    								  
							      								    								  
							      5 28 LOAD_CONST 2 ( 1 )					    								  
							      30 RETURN_VALUE						    								  
							      								    								  
							      6 >> 32 LOAD_FAST 0 ( n )					    								  
							      34 LOAD_FAST 1 ( m )					    								  
							      36 BINARY_SUBTRACT					    								  
							      38 LOAD_GLOBAL 0 ( eulerian )				    								  
							      40 LOAD_FAST 0 ( n )					    								  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 BINARY_SUBTRACT					    								  
							      46 LOAD_FAST 1 ( m )					    								  
							      48 LOAD_CONST 2 ( 1 )					    								  
							      50 BINARY_SUBTRACT					    								  
							      52 CALL_FUNCTION 2					    								  
							      54 BINARY_MULTIPLY					    								  
							      56 LOAD_FAST 1 ( m )					    								  
							      58 LOAD_CONST 2 ( 1 )					    								  
							      60 BINARY_ADD						    								  
							      62 LOAD_GLOBAL 0 ( eulerian )				    								  
							      64 LOAD_FAST 0 ( n )					    								  
							      66 LOAD_CONST 2 ( 1 )					    								  
							      68 BINARY_SUBTRACT					    								  
							      70 LOAD_FAST 1 ( m )					    								  
							      72 CALL_FUNCTION 2					    								  
							      74 BINARY_MULTIPLY					    								  
							      76 BINARY_ADD						    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION			      PROGRAM_BINARY_DECIMAL_CONVERSION				    PROGRAM_BINARY_DECIMAL_CONVERSION				  PROGRAM_BINARY_DECIMAL_CONVERSION
--							      --							    --								  --
def binaryToDecimal ( n ) :				      Disassembly of <code object binaryToDecimal at 0x7fbac0e89d20 Disassembly of <code object binaryToDecimal at 0x7f816a6e4b70 error : Traceback (most recent call last):   File
    num = n ;						      2 0 LOAD_FAST 0 ( n )					    11 0 LOAD_FAST 1 ( num )					  "XLM/dis_script.py", line 60, in <module>	exec
    dec_value = 0 ;					      2 STORE_FAST 1 ( num )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 37, in <module>	  Fi
    base = 1 ;						      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in binaryToDecimal UnboundLoca
    temp = num ;					      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 2 ( num )					  lError: local variable 'num' referenced before ass
    while ( temp ) :					      6 STORE_FAST 2 ( dec_value )				    								  ignment
	last_digit = temp % 10 ;			      								    12 8 LOAD_FAST 2 ( num )					  
	temp = int ( temp / 10 ) ;			      4 8 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 10 )					  
	dec_value += last_digit * base ;		      10 STORE_FAST 3 ( base )					    12 COMPARE_OP 0 ( < )					  
	base = base * 2 ;				      								    14 POP_JUMP_IF_FALSE 20					  
    return dec_value ;					      5 12 LOAD_FAST 1 ( num )					    								  
							      14 STORE_FAST 4 ( temp )					    13 16 LOAD_CONST 3 ( 1 )					  
							      								    18 LOAD_CONST 4 ( 2 )					  
							      6 16 SETUP_LOOP 48 ( to 66 )				    20 COMPARE_OP 0 ( < )					  
							      >> 18 LOAD_FAST 4 ( temp )				    22 POP_JUMP_IF_FALSE 28					  
							      20 POP_JUMP_IF_FALSE 64					    								  
							      								    14 >> 24 LOAD_CONST 5 ( 1 )					  
							      7 22 LOAD_FAST 4 ( temp )					    26 RETURN_VALUE						  
							      24 LOAD_CONST 3 ( 10 )					    								  
							      26 BINARY_MODULO						    15 >> 28 LOAD_CONST 6 ( '%d = %d' )				  
							      28 STORE_FAST 5 ( last_digit )				    30 LOAD_FAST 1 ( num )					  
							      								    32 BINARY_MODULO						  
							      8 30 LOAD_GLOBAL 0 ( int )				    34 RETURN_VALUE						  
							      32 LOAD_FAST 4 ( temp )					    36 LOAD_CONST 7 ( None )					  
							      34 LOAD_CONST 3 ( 10 )					    38 RETURN_VALUE						  
							      36 BINARY_TRUE_DIVIDE					    NEW_LINE							  
							      38 CALL_FUNCTION 1					    								  
							      40 STORE_FAST 4 ( temp )					    								  
							      								    								  
							      9 42 LOAD_FAST 2 ( dec_value )				    								  
							      44 LOAD_FAST 5 ( last_digit )				    								  
							      46 LOAD_FAST 3 ( base )					    								  
							      48 BINARY_MULTIPLY					    								  
							      50 INPLACE_ADD						    								  
							      52 STORE_FAST 2 ( dec_value )				    								  
							      								    								  
							      10 54 LOAD_FAST 3 ( base )				    								  
							      56 LOAD_CONST 4 ( 2 )					    								  
							      58 BINARY_MULTIPLY					    								  
							      60 STORE_FAST 3 ( base )					    								  
							      62 JUMP_ABSOLUTE 18					    								  
							      >> 64 POP_BLOCK						    								  
							      								    								  
							      11 >> 66 LOAD_FAST 2 ( dec_value )			    								  
							      68 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
def findMod ( a , b ) :					      Disassembly of <code object findMod at 0x7fbac<<unk>> de40, f Disassembly of <code object findMod at 0x7f816a677930, file " error : Traceback (most recent call last):   File
    if ( a < 0 ) :					      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
	a = - a						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( b < 0 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 2 ( == )					  y", line 54, in run_dis_script     hyp_co = mco.to
	b = - b						      6 POP_JUMP_IF_FALSE 14					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    mod = a						      								    								  assembler.py", line 81, in to_co     co_consts.app
    while ( mod >= b ) :				      3 8 LOAD_FAST 0 ( a )					    27 8 LOAD_FAST 0 ( a )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	mod = mod - b					      10 UNARY_NEGATIVE						    10 LOAD_CONST 1 ( 0 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    if ( a < 0 ) :					      12 STORE_FAST 0 ( a )					    12 COMPARE_OP 2 ( == )					  co	 self.co_cellvars, ValueError: code: varname
	return - mod					      								    14 POP_JUMP_IF_FALSE 28					  s is too small
    return mod						      4 >> 14 LOAD_FAST 1 ( b )					    								  
							      16 LOAD_CONST 1 ( 0 )					    28 >> 16 LOAD_FAST 0 ( a )					  
							      18 COMPARE_OP 0 ( < )					    18 LOAD_CONST 1 ( 0 )					  
							      20 POP_JUMP_IF_FALSE 28					    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      5 22 LOAD_FAST 1 ( b )					    								  
							      24 UNARY_NEGATIVE						    29 24 LOAD_FAST 0 ( a )					  
							      26 STORE_FAST 1 ( b )					    26 LOAD_CONST 1 ( 0 )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      6 >> 28 LOAD_FAST 0 ( a )					    30 POP_JUMP_IF_FALSE 28					  
							      30 STORE_FAST 2 ( mod )					    								  
							      								    30 32 LOAD_FAST 0 ( a )					  
							      7 32 SETUP_LOOP 20 ( to 54 )				    34 LOAD_CONST 1 ( 0 )					  
							      >> 34 LOAD_FAST 2 ( mod )					    36 COMPARE_OP 2 ( == )					  
							      36 LOAD_FAST 1 ( b )					    38 POP_JUMP_IF_FALSE 44					  
							      38 COMPARE_OP 5 ( >= )					    								  
							      40 POP_JUMP_IF_FALSE 52					    31 40 LOAD_FAST 0 ( a )					  
							      								    42 LOAD_CONST 1 ( 0 )					  
							      8 42 LOAD_FAST 2 ( mod )					    44 COMPARE_OP 2 ( == )					  
							      44 LOAD_FAST 1 ( b )					    46 POP_JUMP_IF_FALSE 44					  
							      46 BINARY_SUBTRACT					    								  
							      48 STORE_FAST 2 ( mod )					    32 48 LOAD_FAST 0 ( a )					  
							      50 JUMP_ABSOLUTE 34					    50 LOAD_CONST 1 ( 0 )					  
							      >> 52 POP_BLOCK						    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      9 >> 54 LOAD_FAST 0 ( a )					    								  
							      56 LOAD_CONST 1 ( 0 )					    33 56 LOAD_FAST 0 ( a )					  
							      58 COMPARE_OP 0 ( < )					    58 LOAD_CONST 1 ( 0 )					  
							      60 POP_JUMP_IF_FALSE 68					    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      10 62 LOAD_FAST 2 ( mod )					    								  
							      64 UNARY_NEGATIVE						    34 64 LOAD_FAST 0 ( a )					  
							      66 RETURN_VALUE						    66 LOAD_CONST 1 ( 0 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      11 >> 68 LOAD_FAST 2 ( mod )				    70 POP_JUMP_IF_FALSE 44					  
							      70 RETURN_VALUE NEW_LINE					    								  
							      								    35 72 LOAD_FAST 0 ( a )					  
							      								    74 LOAD_CONST 1 ( 0 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    36 80 LOAD_FAST 0 ( a )					  
							      								    82 LOAD_CONST 1 ( 0 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    37 >> 88 LOAD_FAST 0 ( a )					  
							      								    90 LOAD_CONST 1 ( 0 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    38 96 LOAD_FAST 0 ( a )					  
							      								    98 LOAD_CONST 1 ( 0 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    39 104 LOAD_FAST 0 ( a )					  
							      								    106 LOAD_CONST 1 ( 0 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    40 112 LOAD_FAST 0 ( a )					  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    41 120 LOAD_FAST 0 ( a )					  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    42 128 LOAD_FAST 0 ( a )					  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 136 LOAD_FAST 0 ( a )					  
							      								    138 LOAD_CONST 1 ( 0 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    44 144 LOAD_FAST 0 ( a )					  
							      								    146 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
def maximizecube ( l , b , h ) :			      Disassembly of <code object maximizecube at 0x7fbac0e89d20, f Disassembly of <code object maximizecube at 0x7f816a6e4b70, f script_not_found : None
    side = gcd ( l , gcd ( b , h ) )			      2 0 LOAD_GLOBAL 0 ( gcd )					    26 0 LOAD_GLOBAL 0 ( gcd )					  
    num = int ( l / side )				      2 LOAD_FAST 0 ( l )					    2 LOAD_FAST 1 ( b )						  
    num = int ( num * b / side )			      4 LOAD_GLOBAL 0 ( gcd )					    4 LOAD_FAST 2 ( b )						  
    num = int ( num * h / side )			      6 LOAD_FAST 1 ( b )					    6 LOAD_FAST 3 ( b )						  
    print ( side , num )				      8 LOAD_FAST 2 ( h )					    8 LOAD_FAST 4 ( b )						  
							      10 CALL_FUNCTION 2					    10 LOAD_FAST 5 ( b )					  
							      12 CALL_FUNCTION 2					    12 LOAD_FAST 6 ( b )					  
							      14 STORE_FAST 3 ( side )					    14 LOAD_FAST 7 ( b )					  
							      								    16 LOAD_FAST 8 ( b )					  
							      3 16 LOAD_GLOBAL 1 ( int )				    18 LOAD_FAST 9 ( b )					  
							      18 LOAD_FAST 0 ( l )					    20 LOAD_FAST 10 ( b )					  
							      20 LOAD_FAST 3 ( side )					    22 LOAD_FAST 11 ( b )					  
							      22 BINARY_TRUE_DIVIDE					    24 LOAD_FAST 12 ( b )					  
							      24 CALL_FUNCTION 1					    26 LOAD_FAST 13 ( b )					  
							      26 STORE_FAST 4 ( num )					    28 LOAD_FAST 14 ( b )					  
							      								    30 LOAD_FAST 15 ( b )					  
							      4 28 LOAD_GLOBAL 1 ( int )				    32 LOAD_FAST 14 ( b )					  
							      30 LOAD_FAST 4 ( num )					    34 LOAD_FAST 15 ( b )					  
							      32 LOAD_FAST 1 ( b )					    36 LOAD_FAST 16 ( b )					  
							      34 BINARY_MULTIPLY					    38 LOAD_FAST 17 ( b )					  
							      36 LOAD_FAST 3 ( side )					    40 LOAD_FAST 18 ( b )					  
							      38 BINARY_TRUE_DIVIDE					    42 LOAD_FAST 19 ( b )					  
							      40 CALL_FUNCTION 1					    44 LOAD_FAST 20 ( b )					  
							      42 STORE_FAST 4 ( num )					    46 LOAD_FAST 21 ( b )					  
							      								    48 LOAD_FAST 22 ( b )					  
							      5 44 LOAD_GLOBAL 1 ( int )				    50 LOAD_FAST 21 ( b )					  
							      46 LOAD_FAST 4 ( num )					    52 LOAD_FAST 22 ( b )					  
							      48 LOAD_FAST 2 ( h )					    54 LOAD_FAST 21 ( b )					  
							      50 BINARY_MULTIPLY					    56 LOAD_FAST 22 ( b )					  
							      52 LOAD_FAST 3 ( side )					    58 LOAD_FAST 21 ( b )					  
							      54 BINARY_TRUE_DIVIDE					    60 LOAD_FAST 22 ( b )					  
							      56 CALL_FUNCTION 1					    62 LOAD_FAST 21 ( b )					  
							      58 STORE_FAST 4 ( num )					    64 LOAD_FAST 22 ( b )					  
							      								    66 LOAD_FAST 21 ( b )					  
							      6 60 LOAD_GLOBAL 2 ( print )				    68 LOAD_FAST 22 ( b )					  
							      62 LOAD_FAST 3 ( side )					    70 LOAD_FAST 21 ( b )					  
							      64 LOAD_FAST 4 ( num )					    72 LOAD_FAST 22 ( b )					  
							      66 CALL_FUNCTION 2					    74 LOAD_FAST 21 ( b )					  
							      68 POP_TOP						    76 LOAD_FAST 22 ( b )					  
							      70 LOAD_CONST 0 ( None )					    78 LOAD_FAST 21 ( b )					  
							      72 RETURN_VALUE NEW_LINE					    80 LOAD_FAST 22 ( b )					  
							      								    82 LOAD_FAST 21 ( b )					  
							      								    84 LOAD_FAST 22 ( b )					  
							      								    86 LOAD_FAST 23 ( b )					  
							      								    88 LOAD_FAST 22 ( b )					  
							      								    90 LOAD_FAST 21 ( b )					  
							      								    92 LOAD_FAST 22 ( b )					  
							      								    94 LOAD_FAST 21 ( b )					  
							      								    96 LOAD_FAST 22 ( b )					  
							      								    98 LOAD_FAST 23 ( b )					  
							      								    100 LOAD_FAST 22 ( b )					  
							      								    102 LOAD_FAST 21 ( b )					  
							      								    104 LOAD_FAST 22 ( b )					  
							      								    106 LOAD_FAST 22 ( b )					  
							      								    108 LOAD_CONST 1 ( ( 'b' , 'b' ) )				  
							      								    110 CALL_FUNCTION_KW 6					  
							      								    112 CALL_FUNCTION 7						  
							      								    114 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_OCTAL_DECIMAL_CONVERSION			      PROGRAM_OCTAL_DECIMAL_CONVERSION				    PROGRAM_OCTAL_DECIMAL_CONVERSION				  PROGRAM_OCTAL_DECIMAL_CONVERSION
--							      --							    --								  --
def octalToDecimal ( n ) :				      Disassembly of <code object octalToDecimal at 0x7fbac<<unk>>  Disassembly of <code object octalToDecimal at 0x7f816a6e4b70, error : Traceback (most recent call last):   File
    num = n ;						      2 0 LOAD_FAST 0 ( n )					    20 0 LOAD_FAST 1 ( num )					  "XLM/dis_script.py", line 60, in <module>	exec
    dec_value = 0 ;					      2 STORE_FAST 1 ( num )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 37, in <module>	  Fi
    base = 1 ;						      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in octalToDecimal UnboundLocal
    temp = num ;					      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 2 ( length )					  Error: local variable 'num' referenced before assi
    while ( temp ) :					      6 STORE_FAST 2 ( dec_value )				    								  gnment
	last_digit = temp % 10 ;			      								    21 8 LOAD_FAST 0 ( n )					  
	temp = int ( temp / 10 ) ;			      4 8 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 2 ( 10 )					  
	dec_value += last_digit * base ;		      10 STORE_FAST 3 ( base )					    12 BINARY_SUBSCR						  
	base = base * 8 ;				      								    14 STORE_FAST 3 ( length )					  
    return dec_value ;					      5 12 LOAD_FAST 1 ( num )					    								  
							      14 STORE_FAST 4 ( temp )					    22 16 LOAD_FAST 2 ( length )				  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      6 16 SETUP_LOOP 48 ( to 66 )				    20 BINARY_SUBSCR						  
							      >> 18 LOAD_FAST 4 ( temp )				    22 STORE_FAST 4 ( length )					  
							      20 POP_JUMP_IF_FALSE 64					    								  
							      								    23 24 LOAD_FAST 0 ( n )					  
							      7 22 LOAD_FAST 4 ( temp )					    26 LOAD_CONST 4 ( 10 )					  
							      24 LOAD_CONST 3 ( 10 )					    28 COMPARE_OP 0 ( < )					  
							      26 BINARY_MODULO						    30 POP_JUMP_IF_FALSE 52					  
							      28 STORE_FAST 5 ( last_digit )				    								  
							      								    24 32 LOAD_FAST 0 ( n )					  
							      8 30 LOAD_GLOBAL 0 ( int )				    34 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_FAST 4 ( temp )					    36 BINARY_SUBSCR						  
							      34 LOAD_CONST 3 ( 10 )					    38 STORE_FAST 5 ( length )					  
							      36 BINARY_TRUE_DIVIDE					    								  
							      38 CALL_FUNCTION 1					    25 40 LOAD_FAST 0 ( n )					  
							      40 STORE_FAST 4 ( temp )					    42 LOAD_CONST 6 ( 2 )					  
							      								    44 BINARY_SUBSCR						  
							      9 42 LOAD_FAST 2 ( dec_value )				    46 STORE_FAST 6 ( length )					  
							      44 LOAD_FAST 5 ( last_digit )				    								  
							      46 LOAD_FAST 3 ( base )					    26 48 LOAD_FAST 0 ( n )					  
							      48 BINARY_MULTIPLY					    50 LOAD_CONST 7 ( 3 )					  
							      50 INPLACE_ADD						    52 BINARY_SUBSCR						  
							      52 STORE_FAST 2 ( dec_value )				    54 STORE_FAST 7 ( length )					  
							      								    								  
							      10 54 LOAD_FAST 3 ( base )				    27 56 LOAD_FAST 0 ( n )					  
							      56 LOAD_CONST 4 ( 8 )					    58 LOAD_CONST 8 ( 10 )					  
							      58 BINARY_MULTIPLY					    60 COMPARE_OP 0 ( < )					  
							      60 STORE_FAST 3 ( base )					    62 POP_JUMP_IF_FALSE 66					  
							      62 JUMP_ABSOLUTE 18					    64 LOAD_FAST 0 ( n )					  
							      >> 64 POP_BLOCK						    66 LOAD_CONST 9 ( 4 )					  
							      								    68 COMPARE_OP 4 ( > )					  
							      11 >> 66 LOAD_FAST 2 ( dec_value )			    70 POP_JUMP_IF_FALSE 66					  
							      68 RETURN_VALUE NEW_LINE					    								  
							      								    28 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 10 ( 4 )					  
							      								    76 COMPARE_OP 4 ( > )					  
							      								    78 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    29 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 11 ( 4 )					  
							      								    84 COMPARE_OP 4 ( > )					  
							      								    86 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    30 88 LOAD_FAST 0 ( n )					  
							      								    90 LOAD_CONST 12 ( 10 )					  
							      								    92 COMPARE_OP 4 ( > )					  
							      								    94 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      								    31 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 12 ( 10 )					  
							      								    100 COMPARE_OP 4 ( > )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 13 ( 4 )					  
							      								    108 COMPARE_OP 4 ( > )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    32 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_CONST 14 ( 10 )					  
							      								    116 COMPARE_OP 4 ( > )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    33 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 15 ( 4 )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 1 ( num )					  
							      								    								  
							      								    34 >> 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 16 ( 10 )					  
							      								    132 COMPARE_OP 4 ( > )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 16 ( 10 )					  
							      								    140 COMPARE_OP 4 ( > )					  
							      								    142 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    35 144 LOAD_FAST 0 ( n )					  
							      								    146 RETURN_VALUE						  
							      								    								  
							      								    36 >> 148 LOAD_FAST 0 ( n )					  
							      								    150 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
def isPalindrome ( string ) :				      Disassembly of <code object isPalindrome at 0x7fbac0e8bc90, f Disassembly of <code object isPalindrome at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    l = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( l )					  "XLM/dis_script.py", line 60, in <module>	exec
    h = len ( string ) - 1				      2 STORE_FAST 1 ( l )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 35, in <module>	  Fi
    while h > l :					      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in isPalindrome UnboundLocalEr
	l += 1						      3 4 LOAD_GLOBAL 0 ( len )					    6 STORE_FAST 2 ( l )					  ror: local variable 'l' referenced before assignme
	h -= 1						      6 LOAD_FAST 0 ( string )					    								  nt
	if string [ l - 1 ] != string [ h + 1 ] :	      8 CALL_FUNCTION 1						    27 8 LOAD_FAST 0 ( string )					  
	    return False				      10 LOAD_CONST 2 ( 1 )					    10 LOAD_CONST 1 ( 0 )					  
    return True						      12 BINARY_SUBTRACT					    12 BINARY_SUBSCR						  
							      14 STORE_FAST 2 ( h )					    14 STORE_FAST 3 ( l )					  
							      								    								  
							      4 16 SETUP_LOOP 56 ( to 74 )				    28 16 LOAD_FAST 2 ( l )					  
							      >> 18 LOAD_FAST 2 ( h )					    18 LOAD_CONST 2 ( 1 )					  
							      20 LOAD_FAST 1 ( l )					    20 BINARY_SUBSCR						  
							      22 COMPARE_OP 4 ( > )					    22 STORE_FAST 4 ( l )					  
							      24 POP_JUMP_IF_FALSE 72					    								  
							      								    29 24 LOAD_FAST 0 ( string )				  
							      5 26 LOAD_FAST 1 ( l )					    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_CONST 2 ( 1 )					    28 BINARY_SUBSCR						  
							      30 INPLACE_ADD						    30 LOAD_CONST 4 ( 2 )					  
							      32 STORE_FAST 1 ( l )					    32 BINARY_SUBSCR						  
							      								    34 STORE_FAST 5 ( l )					  
							      6 34 LOAD_FAST 2 ( h )					    								  
							      36 LOAD_CONST 2 ( 1 )					    30 36 LOAD_FAST 0 ( string )				  
							      38 INPLACE_SUBTRACT					    38 LOAD_CONST 5 ( 1 )					  
							      40 STORE_FAST 2 ( h )					    40 BINARY_SUBSCR						  
							      								    42 STORE_FAST 6 ( l )					  
							      7 42 LOAD_FAST 0 ( string )				    								  
							      44 LOAD_FAST 1 ( l )					    31 44 LOAD_FAST 0 ( string )				  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 6 ( '' )					  
							      48 BINARY_SUBTRACT					    48 COMPARE_OP 2 ( == )					  
							      50 BINARY_SUBSCR						    50 POP_JUMP_IF_FALSE 56					  
							      52 LOAD_FAST 0 ( string )					    								  
							      54 LOAD_FAST 2 ( h )					    32 52 LOAD_FAST 0 ( string )				  
							      56 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 7 ( '' )					  
							      58 BINARY_ADD						    56 COMPARE_OP 2 ( == )					  
							      60 BINARY_SUBSCR						    58 POP_JUMP_IF_FALSE 56					  
							      62 COMPARE_OP 3 ( != )					    								  
							      64 POP_JUMP_IF_FALSE 18					    33 60 LOAD_FAST 0 ( string )				  
							      								    62 LOAD_CONST 8 ( '' )					  
							      8 66 LOAD_CONST 3 ( False )				    64 COMPARE_OP 2 ( == )					  
							      68 RETURN_VALUE						    66 POP_JUMP_IF_FALSE 56					  
							      70 JUMP_ABSOLUTE 18					    								  
							      >> 72 POP_BLOCK						    34 68 LOAD_FAST 0 ( string )				  
							      								    70 LOAD_CONST 9 ( '' )					  
							      9 >> 74 LOAD_CONST 4 ( True )				    72 COMPARE_OP 2 ( == )					  
							      76 RETURN_VALUE NEW_LINE					    74 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      								    35 76 LOAD_FAST 0 ( string )				  
							      								    78 LOAD_CONST 10 ( '' )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      								    36 84 LOAD_FAST 0 ( string )				  
							      								    86 LOAD_CONST 11 ( '' )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    37 92 LOAD_FAST 0 ( string )				  
							      								    94 LOAD_CONST 12 ( '' )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    38 100 LOAD_FAST 0 ( string )				  
							      								    102 LOAD_CONST 13 ( '' )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      								    39 108 LOAD_FAST 0 ( string )				  
							      								    110 LOAD_CONST 14 ( '' )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      								    40 116 LOAD_FAST 0 ( string )				  
							      								    118 LOAD_CONST 15 ( '' )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    41 124 LOAD_FAST 0 ( string )				  
							      								    126 LOAD_CONST 16 ( '' )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    42 132 LOAD_FAST 0 ( string )				  
							      								    134 LOAD_CONST 16 ( '' )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    43 >> 140 LOAD_FAST 0 ( string )				  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PADOVAN_SEQUENCE					      PADOVAN_SEQUENCE						    PADOVAN_SEQUENCE						  PADOVAN_SEQUENCE
--							      --							    --								  --
def pad ( n ) :						      Disassembly of <code object pad at 0x7fbac<<unk>> de40, file  Disassembly of <code object pad at 0x7f816afaa150, file "<dis error : Traceback (most recent call last):   File
    pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	      2 0 LOAD_CONST 1 ( ( 1 , 1 , 1 , 1 ) )			    16 0 LOAD_GLOBAL 0 ( pPrevv )				  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( 3 , n + 1 ) :			      2 UNPACK_SEQUENCE 4					    2 LOAD_FAST 1 ( pCurv )					  item in run_dis_script():   File "XLM/dis_script.p
	pNext = pPrevPrev + pPrev			      4 STORE_FAST 1 ( pPrevPrev )				    4 LOAD_FAST 2 ( size )					  y", line 54, in run_dis_script     hyp_co = mco.to
	pPrevPrev = pPrev				      6 STORE_FAST 2 ( pPrev )					    6 CALL_FUNCTION 1						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	pPrev = pCurr					      8 STORE_FAST 3 ( pCurr )					    8 STORE_FAST 3 ( pCurv )					  assembler.py", line 81, in to_co     co_consts.app
	pCurr = pNext					      10 STORE_FAST 4 ( pNext )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    return pNext ;					      								    17 10 LOAD_GLOBAL 1 ( pPrevv )				  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      3 12 SETUP_LOOP 42 ( to 56 )				    12 LOAD_FAST 3 ( pCurv )					  co	 self.co_cellvars, TypeError: name tuples mu
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_FAST 1 ( pCurv )					  st contain only strings, not 'NoneType'
							      16 LOAD_CONST 2 ( 3 )					    16 CALL_FUNCTION 2						  
							      18 LOAD_FAST 0 ( n )					    18 STORE_FAST 4 ( pCurv )					  
							      20 LOAD_CONST 3 ( 1 )					    								  
							      22 BINARY_ADD						    18 20 LOAD_FAST 4 ( pCurv )					  
							      24 CALL_FUNCTION 2					    22 LOAD_FAST 3 ( pCurv )					  
							      26 GET_ITER						    24 LOAD_FAST 4 ( pCurv )					  
							      >> 28 FOR_ITER 24 ( to 54 )				    26 LOAD_FAST 5 ( pCurv )					  
							      30 STORE_FAST 5 ( i )					    28 LOAD_FAST 6 ( pCurv )					  
							      								    30 LOAD_FAST 7 ( pCurv )					  
							      4 32 LOAD_FAST 1 ( pPrevPrev )				    32 LOAD_FAST 8 ( pCurv )					  
							      34 LOAD_FAST 2 ( pPrev )					    34 LOAD_FAST 9 ( pCurv )					  
							      36 BINARY_ADD						    36 LOAD_FAST 10 ( pCurv )					  
							      38 STORE_FAST 4 ( pNext )					    38 LOAD_FAST 11 ( pCurv )					  
							      								    40 LOAD_FAST 12 ( pCurv )					  
							      5 40 LOAD_FAST 2 ( pPrev )				    42 LOAD_FAST 13 ( pCurv )					  
							      42 STORE_FAST 1 ( pPrevPrev )				    44 LOAD_FAST 14 ( pCurv )					  
							      								    46 LOAD_FAST 15 ( pCurv )					  
							      6 44 LOAD_FAST 3 ( pCurr )				    48 LOAD_FAST 16 ( pCurv )					  
							      46 STORE_FAST 2 ( pPrev )					    50 LOAD_FAST 17 ( pCurv )					  
							      								    52 LOAD_FAST 18 ( pCurv )					  
							      7 48 LOAD_FAST 4 ( pNext )				    54 LOAD_FAST 19 ( pCurv )					  
							      50 STORE_FAST 3 ( pCurr )					    56 LOAD_FAST 20 ( pCurv )					  
							      52 JUMP_ABSOLUTE 28					    58 LOAD_FAST 21 ( pCurv )					  
							      >> 54 POP_BLOCK						    60 LOAD_FAST 20 ( pCurv )					  
							      								    62 LOAD_FAST 21 ( pCurv )					  
							      8 >> 56 LOAD_FAST 4 ( pNext )				    64 LOAD_FAST 20 ( pCurv )					  
							      58 RETURN_VALUE NEW_LINE					    66 LOAD_FAST 21 ( pCurv )					  
							      								    68 LOAD_FAST 22 ( pCurv )					  
							      								    70 LOAD_FAST 21 ( pCurv )					  
							      								    72 LOAD_FAST 22 ( pCurv )					  
							      								    74 LOAD_FAST 21 ( pCurv )					  
							      								    76 LOAD_FAST 22 ( pCurv )					  
							      								    78 LOAD_FAST 21 ( pCurv )					  
							      								    80 LOAD_FAST 22 ( pCurv )					  
							      								    82 LOAD_FAST 21 ( pCurv )					  
							      								    84 LOAD_FAST 22 ( pCurv )					  
							      								    86 LOAD_FAST 21 ( pCurv )					  
							      								    88 LOAD_FAST 22 ( pCurv )					  
							      								    90 LOAD_FAST 23 ( pCurv )					  
							      								    92 LOAD_FAST 22 ( pCurv )					  
							      								    94 LOAD_FAST 21 ( pCurv )					  
							      								    96 LOAD_FAST 22 ( pCurv )					  
							      								    98 LOAD_FAST 23 ( pCurv )					  
							      								    100 LOAD_FAST 22 ( pCurv )					  
							      								    102 LOAD_FAST 23 ( pCurv )					  
							      								    104 LOAD_FAST 22 ( pCurv )					  
							      								    106 LOAD_FAST 24 ( pCurv )					  
							      								    108 LOAD_FAST 23 ( pCurv )					  
							      								    110 LOAD_FAST 22 ( pCurv )					  
							      								    112 LOAD_FAST 24						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
def countNegative ( M , n , m ) :			      Disassembly of <code object countNegative at 0x7fbac0e89d20,  Disassembly of <code object countNegative at 0x7f816a6e4b70,  error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 3 ( count )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 38, in <module>	  Fi
	for j in range ( m ) :				      								    								  le "<dis>", line 2, in countNegative TypeError: 'l
	    if M [ i ] [ j ] < 0 :			      3 4 SETUP_LOOP 62 ( to 68 )				    27 4 SETUP_LOOP 52 ( to 54 )				  ist' object is not a mapping
		count += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    else :					      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
		break					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    return count					      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 50 ( to 66 )				    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 STORE_FAST 4 ( i )					    16 STORE_FAST 2 ( i )					  
							      								    								  
							      4 18 SETUP_LOOP 44 ( to 64 )				    28 18 LOAD_FAST 0 ( M )					  
							      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_METHOD 1 ( append )					  
							      22 LOAD_FAST 2 ( m )					    22 LOAD_FAST 2 ( i )					  
							      24 CALL_FUNCTION 1					    24 CALL_METHOD 1						  
							      26 GET_ITER						    26 POP_TOP							  
							      >> 28 FOR_ITER 32 ( to 62 )				    28 JUMP_ABSOLUTE 14						  
							      30 STORE_FAST 5 ( j )					    >> 30 POP_BLOCK						  
							      								    >> 32 LOAD_CONST 2 ( None )					  
							      5 32 LOAD_FAST 0 ( M )					    34 RETURN_VALUE						  
							      34 LOAD_FAST 4 ( i )					    NEW_LINE							  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 5 ( j )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_CONST 1 ( 0 )					    								  
							      44 COMPARE_OP 0 ( < )					    								  
							      46 POP_JUMP_IF_FALSE 58					    								  
							      								    								  
							      6 48 LOAD_FAST 3 ( count )				    								  
							      50 LOAD_CONST 2 ( 1 )					    								  
							      52 INPLACE_ADD						    								  
							      54 STORE_FAST 3 ( count )					    								  
							      56 JUMP_ABSOLUTE 28					    								  
							      								    								  
							      8 >> 58 BREAK_LOOP					    								  
							      60 JUMP_ABSOLUTE 28					    								  
							      >> 62 POP_BLOCK						    								  
							      >> 64 JUMP_ABSOLUTE 14					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      9 >> 68 LOAD_FAST 3 ( count )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI
--							      --							    --								  --
def isLucky ( n ) :					      Disassembly of <code object isLucky at 0x7fbac<<unk>> d540, f Disassembly of <code object isLucky at 0x7f816a6e4b70, file " error : Traceback (most recent call last):   File
    ar = [ 0 ] * 10					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( ar )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( n > 0 ) :					      2 BUILD_LIST 1						    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 37, in <module>	  Fi
	digit = math.floor ( n % 10 )			      4 LOAD_CONST 2 ( 10 )					    4 CALL_FUNCTION 1						  le "<dis>", line 2, in isLucky NameError: name 'ar
	if ( ar [ digit ] ) :				      6 BINARY_MULTIPLY						    6 STORE_FAST 1 ( ar )					  ' is not defined
	    return 0					      8 STORE_FAST 1 ( ar )					    								  
	ar [ digit ] = 1				      								    27 8 LOAD_FAST 1 ( ar )					  
	n = n / 10					      3 10 SETUP_LOOP 54 ( to 66 )				    10 LOAD_FAST 1 ( ar )					  
    return 1						      >> 12 LOAD_FAST 0 ( n )					    12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_FAST 1 ( ar )					  
							      16 COMPARE_OP 4 ( > )					    16 LOAD_FAST 2 ( n )					  
							      18 POP_JUMP_IF_FALSE 64					    18 LOAD_FAST 3 ( n )					  
							      								    20 LOAD_FAST 4 ( n )					  
							      4 20 LOAD_GLOBAL 0 ( math )				    22 LOAD_FAST 5 ( n )					  
							      22 LOAD_METHOD 1 ( floor )				    24 LOAD_FAST 6 ( n )					  
							      24 LOAD_FAST 0 ( n )					    26 LOAD_FAST 7 ( n )					  
							      26 LOAD_CONST 2 ( 10 )					    28 LOAD_FAST 8 ( n )					  
							      28 BINARY_MODULO						    30 LOAD_FAST 9 ( n )					  
							      30 CALL_METHOD 1						    32 LOAD_FAST 10 ( n )					  
							      32 STORE_FAST 2 ( digit )					    34 LOAD_FAST 11 ( n )					  
							      								    36 LOAD_FAST 12 ( n )					  
							      5 34 LOAD_FAST 1 ( ar )					    38 LOAD_FAST 13 ( n )					  
							      36 LOAD_FAST 2 ( digit )					    40 LOAD_FAST 14 ( n )					  
							      38 BINARY_SUBSCR						    42 LOAD_FAST 15 ( n )					  
							      40 POP_JUMP_IF_FALSE 46					    44 LOAD_FAST 14 ( n )					  
							      								    46 LOAD_FAST 15 ( n )					  
							      6 42 LOAD_CONST 1 ( 0 )					    48 LOAD_FAST 16 ( n )					  
							      44 RETURN_VALUE						    50 LOAD_FAST 17 ( n )					  
							      								    52 LOAD_FAST 18 ( n )					  
							      7 >> 46 LOAD_CONST 3 ( 1 )				    54 LOAD_FAST 19 ( n )					  
							      48 LOAD_FAST 1 ( ar )					    56 LOAD_FAST 20 ( n )					  
							      50 LOAD_FAST 2 ( digit )					    58 LOAD_FAST 21 ( n )					  
							      52 STORE_SUBSCR						    60 LOAD_FAST 22 ( n )					  
							      								    62 LOAD_FAST 21 ( n )					  
							      8 54 LOAD_FAST 0 ( n )					    64 BUILD_TUPLE 15						  
							      56 LOAD_CONST 2 ( 10 )					    66 LOAD_FAST 20 ( n )					  
							      58 BINARY_TRUE_DIVIDE					    68 LOAD_FAST 21 ( n )					  
							      60 STORE_FAST 0 ( n )					    70 BUILD_TUPLE 15						  
							      62 JUMP_ABSOLUTE 12					    72 LOAD_FAST 21 ( n )					  
							      >> 64 POP_BLOCK						    74 LOAD_FAST 22 ( n )					  
							      								    76 LOAD_FAST 21 ( n )					  
							      9 >> 66 LOAD_CONST 3 ( 1 )				    78 BUILD_TUPLE 15						  
							      68 RETURN_VALUE NEW_LINE					    80 LOAD_FAST 22 ( n )					  
							      								    82 LOAD_FAST 21 ( n )					  
							      								    84 BUILD_TUPLE 15						  
							      								    86 LOAD_FAST 22 ( n )					  
							      								    88 LOAD_FAST 21 ( n )					  
							      								    90 LOAD_FAST 22 ( n )					  
							      								    92 BUILD_TUPLE 15						  
							      								    94 LOAD_FAST 22 ( n )					  
							      								    96 LOAD_FAST 21 ( n )					  
							      								    98 BUILD_TUPLE 15						  
							      								    100 LOAD_FAST 22 ( n )					  
							      								    102 LOAD_FAST 21 ( n )					  
							      								    104 BUILD_TUPLE 15						  
							      								    106 LOAD_FAST 22 ( n )					  
							      								    108 LOAD_FAST 21 ( n )					  
							      								    110 BUILD_TUPLE 15						  
							      								    112 LOAD_FAST 22 ( n )					  
							      								    114 LOAD_FAST 21 ( n )					  
							      								    116 BUILD_TUPLE 15						  
							      								    118 LOAD_FAST 22 ( n )					  
							      								    120 BUILD_TUPLE 15						  
							      								    122 LOAD_FAST 22 ( n )					  
							      								    124 BUILD_TUPLE 15						  
							      								    126 LOAD_FAST 22 ( n )					  
							      								    128 LOAD_FAST 21 ( n )					  
							      								    130 BUILD_TUPLE 15						  
							      								    132 STORE_SUBSCR						  
							      								    134 LOAD_CONST 0 ( None )					  
							      								    136 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
def countSeq ( n ) :					      Disassembly of <code object countSeq at 0x7fbac<<unk>> d540,  Disassembly of <code object countSeq at 0x7f816a673a50, file  error : Traceback (most recent call last):   File
    nCr = 1						      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    res = 1						      2 STORE_FAST 1 ( nCr )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    for r in range ( 1 , n + 1 ) :			      								    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
	nCr = ( nCr * ( n + 1 - r ) ) / r ;		      3 4 LOAD_CONST 1 ( 1 )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	res += nCr * nCr ;				      6 STORE_FAST 2 ( res )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
    return res ;					      								    27 8 LOAD_FAST 1 ( n )					  pack non-iterable NoneType object
							      4 8 SETUP_LOOP 54 ( to 64 )				    10 LOAD_CONST 2 ( 0 )					  
							      10 LOAD_GLOBAL 0 ( range )				    12 BINARY_SUBSCR						  
							      12 LOAD_CONST 1 ( 1 )					    14 STORE_FAST 2 ( d )					  
							      14 LOAD_FAST 0 ( n )					    								  
							      16 LOAD_CONST 1 ( 1 )					    28 16 LOAD_FAST 1 ( n )					  
							      18 BINARY_ADD						    18 LOAD_CONST 3 ( 1 )					  
							      20 CALL_FUNCTION 2					    20 BINARY_SUBSCR						  
							      22 GET_ITER						    22 STORE_FAST 3 ( d )					  
							      >> 24 FOR_ITER 36 ( to 62 )				    								  
							      26 STORE_FAST 3 ( r )					    29 24 LOAD_FAST 1 ( n )					  
							      								    26 LOAD_CONST 4 ( 2 )					  
							      5 28 LOAD_FAST 1 ( nCr )					    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 0 ( n )					    30 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_CONST 1 ( 1 )					    32 BINARY_SUBSCR						  
							      34 BINARY_ADD						    34 LOAD_CONST 6 ( 2 )					  
							      36 LOAD_FAST 3 ( r )					    36 BINARY_SUBSCR						  
							      38 BINARY_SUBTRACT					    38 STORE_FAST 4 ( d )					  
							      40 BINARY_MULTIPLY					    								  
							      42 LOAD_FAST 3 ( r )					    30 40 LOAD_FAST 0 ( n )					  
							      44 BINARY_TRUE_DIVIDE					    42 LOAD_CONST 7 ( 3 )					  
							      46 STORE_FAST 1 ( nCr )					    44 BINARY_SUBSCR						  
							      								    46 LOAD_CONST 8 ( 2 )					  
							      6 48 LOAD_FAST 2 ( res )					    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 1 ( nCr )					    50 LOAD_CONST 9 ( 4 )					  
							      52 LOAD_FAST 1 ( nCr )					    52 BINARY_SUBSCR						  
							      54 BINARY_MULTIPLY					    54 LOAD_CONST 10 ( 3 )					  
							      56 INPLACE_ADD						    56 BINARY_SUBSCR						  
							      58 STORE_FAST 2 ( res )					    58 LOAD_CONST 11 ( 1 )					  
							      60 JUMP_ABSOLUTE 24					    60 BINARY_SUBSCR						  
							      >> 62 POP_BLOCK						    62 LOAD_CONST 12 ( 2 )					  
							      								    64 BINARY_SUBSCR						  
							      7 >> 64 LOAD_FAST 2 ( res )				    66 LOAD_CONST 13 ( 1 )					  
							      66 RETURN_VALUE NEW_LINE					    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 14 ( 2 )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_CONST 15 ( 3 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_CONST 16 ( 3 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 17 ( 1 )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 16 ( 3 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 17 ( 1 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 18 ( 2 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 19 ( 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 20 ( 3 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 21 ( 1 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 22 ( 2 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 21 ( 1 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 22 ( 2 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 21 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 22 ( 2 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 23 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 22 ( 2 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 23 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 22 ( 2 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 23 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 24 ( 3 )					  
							      								    152 LOAD_CONST 23 ( 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 24 ( 3 )					  
							      								    158 LOAD_CONST 23 ( 1 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 24 ( 3 )					  
							      								    164 LOAD_CONST 25 ( 2 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 LOAD_CONST 24 ( 3 )					  
							      								    170 BUILD_SLICE 2						  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 24 ( 3 )					  
							      								    176 BUILD_SLICE 2						  
							      								    178 BINARY_SUBSCR						  
							      								    180 LOAD_CONST 24 ( 3 )					  
							      								    								  
							      								    29 176 LOAD_CONST 25 ( 2 )					  
							      								    178								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		      ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		    ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		  ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION
--							      --							    --								  --
def concatenate ( a , b , c , n1 , n2 ) :		      Disassembly of <code object concatenate at 0x7fbac0e89d20, fi Disassembly of <code object concatenate at 0x7f816a6e4b70, fi script_not_found : None
    i = - 1						      2 0 LOAD_CONST 1 ( - 1 )					    26 0 LOAD_CONST 1 ( - 1 )					  
    for i in range ( n1 ) :				      2 STORE_FAST 5 ( i )					    2 STORE_FAST 3 ( c )					  
	c [ i ] = a [ i ]				      								    								  
    for j in range ( n2 ) :				      3 4 SETUP_LOOP 28 ( to 34 )				    27 4 SETUP_LOOP 22 ( to 28 )				  
	c [ i ] = b [ j ]				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_FAST 0 ( a )						  
	i += 1						      8 LOAD_FAST 3 ( n1 )					    8 GET_ITER							  
							      10 CALL_FUNCTION 1					    >> 10 FOR_ITER 14 ( to 26 )					  
							      12 GET_ITER						    12 STORE_FAST 4 ( c )					  
							      >> 14 FOR_ITER 16 ( to 32 )				    								  
							      16 STORE_FAST 5 ( i )					    28 14 LOAD_FAST 3 ( c )					  
							      								    16 LOAD_METHOD 0 ( append )					  
							      4 18 LOAD_FAST 0 ( a )					    18 LOAD_FAST 4 ( c )					  
							      20 LOAD_FAST 5 ( i )					    20 CALL_METHOD 1						  
							      22 BINARY_SUBSCR						    22 POP_TOP							  
							      24 LOAD_FAST 2 ( c )					    24 JUMP_ABSOLUTE 10						  
							      26 LOAD_FAST 5 ( i )					    >> 26 POP_BLOCK						  
							      28 STORE_SUBSCR						    >> 28 LOAD_CONST 2 ( None )					  
							      30 JUMP_ABSOLUTE 14					    30 RETURN_VALUE						  
							      >> 32 POP_BLOCK						    NEW_LINE							  
							      								    								  
							      5 >> 34 SETUP_LOOP 36 ( to 72 )				    								  
							      36 LOAD_GLOBAL 0 ( range )				    								  
							      38 LOAD_FAST 4 ( n2 )					    								  
							      40 CALL_FUNCTION 1					    								  
							      42 GET_ITER						    								  
							      >> 44 FOR_ITER 24 ( to 70 )				    								  
							      46 STORE_FAST 6 ( j )					    								  
							      								    								  
							      6 48 LOAD_FAST 1 ( b )					    								  
							      50 LOAD_FAST 6 ( j )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 2 ( c )					    								  
							      56 LOAD_FAST 5 ( i )					    								  
							      58 STORE_SUBSCR						    								  
							      								    								  
							      7 60 LOAD_FAST 5 ( i )					    								  
							      62 LOAD_CONST 2 ( 1 )					    								  
							      64 INPLACE_ADD						    								  
							      66 STORE_FAST 5 ( i )					    								  
							      68 JUMP_ABSOLUTE 44					    								  
							      >> 70 POP_BLOCK						    								  
							      >> 72 LOAD_CONST 0 ( None )				    								  
							      74 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      Disassembly of <code object binarySearch at 0x7fbac<<unk>> de Disassembly of <code object binarySearch at 0x7f816a673a50, f script_not_found : None
    while l <= r :					      2 0 SETUP_LOOP 74 ( to 76 )				    69 0 LOAD_FAST 1 ( l )					  
	mid = l + ( r - l ) // 2 ;			      >> 2 LOAD_FAST 1 ( l )					    2 LOAD_CONST 1 ( - 1 )					  
	if arr [ mid ] == x :				      4 LOAD_FAST 2 ( r )					    4 COMPARE_OP 2 ( == )					  
	    return mid					      6 COMPARE_OP 1 ( <= )					    6 POP_JUMP_IF_FALSE 16					  
	elif arr [ mid ] < x :				      8 POP_JUMP_IF_FALSE 74					    								  
	    l = mid + 1					      								    70 8 LOAD_FAST 1 ( l )					  
	else :						      3 10 LOAD_FAST 1 ( l )					    10 LOAD_CONST 2 ( - 1 )					  
	    r = mid - 1					      12 LOAD_FAST 2 ( r )					    12 COMPARE_OP 2 ( == )					  
    return - 1						      14 LOAD_FAST 1 ( l )					    14 POP_JUMP_IF_FALSE 20					  
							      16 BINARY_SUBTRACT					    								  
							      18 LOAD_CONST 1 ( 2 )					    71 16 LOAD_FAST 1 ( l )					  
							      20 BINARY_FLOOR_DIVIDE					    18 LOAD_CONST 3 ( - 1 )					  
							      22 BINARY_ADD						    20 COMPARE_OP 2 ( == )					  
							      24 STORE_FAST 4 ( mid )					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      4 26 LOAD_FAST 0 ( arr )					    72 >> 24 LOAD_FAST 1 ( l )					  
							      28 LOAD_FAST 4 ( mid )					    26 LOAD_CONST 4 ( - 1 )					  
							      30 BINARY_SUBSCR						    28 COMPARE_OP 2 ( == )					  
							      32 LOAD_FAST 3 ( x )					    30 POP_JUMP_IF_FALSE 44					  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_FALSE 42					    73 32 LOAD_FAST 1 ( l )					  
							      								    34 LOAD_CONST 5 ( - 1 )					  
							      5 38 LOAD_FAST 4 ( mid )					    36 COMPARE_OP 2 ( == )					  
							      40 RETURN_VALUE						    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 >> 42 LOAD_FAST 0 ( arr )				    74 40 LOAD_FAST 1 ( l )					  
							      44 LOAD_FAST 4 ( mid )					    42 LOAD_CONST 6 ( - 1 )					  
							      46 BINARY_SUBSCR						    44 COMPARE_OP 2 ( == )					  
							      48 LOAD_FAST 3 ( x )					    46 POP_JUMP_IF_FALSE 44					  
							      50 COMPARE_OP 0 ( < )					    								  
							      52 POP_JUMP_IF_FALSE 64					    75 48 LOAD_FAST 1 ( l )					  
							      								    50 LOAD_CONST 7 ( - 1 )					  
							      7 54 LOAD_FAST 4 ( mid )					    52 COMPARE_OP 2 ( == )					  
							      56 LOAD_CONST 2 ( 1 )					    54 POP_JUMP_IF_FALSE 44					  
							      58 BINARY_ADD						    								  
							      60 STORE_FAST 1 ( l )					    76 56 LOAD_FAST 1 ( l )					  
							      62 JUMP_ABSOLUTE 2					    58 LOAD_CONST 8 ( - 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      9 >> 64 LOAD_FAST 4 ( mid )				    62 POP_JUMP_IF_FALSE 44					  
							      66 LOAD_CONST 2 ( 1 )					    								  
							      68 BINARY_SUBTRACT					    77 64 LOAD_FAST 1 ( l )					  
							      70 STORE_FAST 2 ( r )					    66 LOAD_CONST 9 ( - 1 )					  
							      72 JUMP_ABSOLUTE 2					    68 COMPARE_OP 2 ( == )					  
							      >> 74 POP_BLOCK						    70 POP_JUMP_IF_FALSE 78					  
							      								    72 LOAD_FAST 1 ( l )					  
							      10 >> 76 LOAD_CONST 3 ( - 1 )				    74 LOAD_CONST 10 ( - 1 )					  
							      78 RETURN_VALUE NEW_LINE					    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    78 80 LOAD_FAST 1 ( l )					  
							      								    82 LOAD_CONST 10 ( - 1 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    79 88 LOAD_FAST 1 ( l )					  
							      								    90 LOAD_CONST 11 ( - 1 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    80 96 LOAD_FAST 1 ( l )					  
							      								    98 LOAD_CONST 12 ( - 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    81 104 LOAD_FAST 1 ( l )					  
							      								    106 LOAD_CONST 12 ( - 1 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    82 112 LOAD_FAST 1 ( l )					  
							      								    114 LOAD_CONST 12 ( - 1 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    84 120 LOAD_FAST 1 ( l )					  
							      								    122 LOAD_CONST 13 ( - 1 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    85 128 LOAD_FAST 1 ( l )					  
							      								    130 LOAD_CONST 14 ( - 1 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    86 136 LOAD_FAST 1 ( l )					  
							      								    138 LOAD_CONST 15 ( - 1 )					  
							      								    140 COMPARE_OP 2 ( == ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f Disassembly of <code object nextPowerOf2 at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    n -= 1						      2 0 LOAD_FAST 0 ( n )					    20 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    n |= n >> 1						      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    n |= n >> 2						      4 INPLACE_SUBTRACT					    4 INPLACE_ADD						  y", line 47, in run_dis_script     co_code, co_nlo
    n |= n >> 4						      6 STORE_FAST 0 ( n )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
    n |= n >> 8						      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    n |= n >> 16					      3 8 LOAD_FAST 0 ( n )					    21 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
    n += 1						      10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 2 ( 2 )					  n parse     code.append(arg) ValueError: byte must
    return n						      12 LOAD_CONST 1 ( 1 )					    12 BINARY_MULTIPLY						   be in range(0, 256)
							      14 BINARY_RSHIFT						    14 LOAD_FAST 1 ( n )					  
							      16 INPLACE_OR						    16 LOAD_CONST 3 ( 1 )					  
							      18 STORE_FAST 0 ( n )					    18 BINARY_ADD						  
							      								    20 INPLACE_ADD						  
							      4 20 LOAD_FAST 0 ( n )					    22 STORE_FAST 1 ( n )					  
							      22 LOAD_FAST 0 ( n )					    								  
							      24 LOAD_CONST 2 ( 2 )					    22 24 LOAD_FAST 1 ( n )					  
							      26 BINARY_RSHIFT						    26 LOAD_CONST 4 ( 2 )					  
							      28 INPLACE_OR						    28 BINARY_MULTIPLY						  
							      30 STORE_FAST 0 ( n )					    30 INPLACE_ADD						  
							      								    32 STORE_FAST 1 ( n )					  
							      5 32 LOAD_FAST 0 ( n )					    								  
							      34 LOAD_FAST 0 ( n )					    23 34 LOAD_FAST 1 ( n )					  
							      36 LOAD_CONST 3 ( 4 )					    36 LOAD_CONST 5 ( 3 )					  
							      38 BINARY_RSHIFT						    38 BINARY_MULTIPLY						  
							      40 INPLACE_OR						    40 INPLACE_ADD						  
							      42 STORE_FAST 0 ( n )					    42 STORE_FAST 1 ( n )					  
							      								    								  
							      6 44 LOAD_FAST 0 ( n )					    24 44 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 0 ( n )					    46 LOAD_CONST 6 ( 4 )					  
							      48 LOAD_CONST 4 ( 8 )					    48 BINARY_MULTIPLY						  
							      50 BINARY_RSHIFT						    50 INPLACE_ADD						  
							      52 INPLACE_OR						    52 STORE_FAST 1 ( n )					  
							      54 STORE_FAST 0 ( n )					    								  
							      								    25 54 LOAD_FAST 1 ( n )					  
							      7 56 LOAD_FAST 0 ( n )					    56 LOAD_CONST 7 ( 3 )					  
							      58 LOAD_FAST 0 ( n )					    58 BINARY_MULTIPLY						  
							      60 LOAD_CONST 5 ( 16 )					    60 INPLACE_ADD						  
							      62 BINARY_RSHIFT						    62 STORE_FAST 1 ( n )					  
							      64 INPLACE_OR						    								  
							      66 STORE_FAST 0 ( n )					    26 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 8 ( 2 )					  
							      8 68 LOAD_FAST 0 ( n )					    68 BINARY_MULTIPLY						  
							      70 LOAD_CONST 1 ( 1 )					    70 INPLACE_ADD						  
							      72 INPLACE_ADD						    72 STORE_FAST 1 ( n )					  
							      74 STORE_FAST 0 ( n )					    74 JUMP_FORWARD 14 ( to 80 )				  
							      								    								  
							      9 76 LOAD_FAST 0 ( n )					    27 >> 76 LOAD_FAST 1 ( n )					  
							      78 RETURN_VALUE NEW_LINE					    78 LOAD_CONST 9 ( 4 )					  
							      								    80 BINARY_MULTIPLY						  
							      								    82 INPLACE_ADD						  
							      								    84 STORE_FAST 1 ( n )					  
							      								    								  
							      								    28 86 LOAD_FAST 1 ( n )					  
							      								    88 LOAD_CONST 10 ( 4 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 1 ( n )					  
							      								    								  
							      								    29 94 LOAD_FAST 1 ( n )					  
							      								    96 LOAD_CONST 11 ( 2 )					  
							      								    98 BINARY_MULTIPLY						  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 1 ( n )					  
							      								    								  
							      								    30 104 LOAD_FAST 1 ( n )					  
							      								    106 LOAD_CONST 12 ( 2 )					  
							      								    108 BINARY_MULTIPLY						  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( n )					  
							      								    114 JUMP_FORWARD 14 ( to 80 )				  
							      								    								  
							      								    31 >> 116 LOAD_FAST 1 ( n )					  
							      								    118 LOAD_FAST 0 ( n )					  
							      								    120 BINARY_MULTIPLY						  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    								  
							      								    32 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 0 ( n )					  
							      								    130 BINARY_MULTIPLY						  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    								  
							      								    33 >> 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_FAST 0 ( n )					  
							      								    140 BINARY_MULTIPLY						  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    34 >> 146 LOAD_FAST 1 ( n )					  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1
--							      --							    --								  --
def difference ( arr , n ) :				      Disassembly of <code object difference at 0x7fbac<<unk>> d540 Disassembly of <code object difference at 0x7f8169feb660, fil error : Traceback (most recent call last):   File
    d1 = 0						      2 0 LOAD_CONST 1 ( 0 )					    148 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    d2 = 0						      2 STORE_FAST 2 ( d1 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 33, in <module>	  Fi
    for i in range ( 0 , n ) :				      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in difference TypeError: 'int'
	d1 = d1 + arr [ i ] [ i ]			      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_FAST 0 ( self )					   object is not subscriptable
	d2 = d2 + arr [ i ] [ n - i - 1 ]		      6 STORE_FAST 3 ( d2 )					    8 LOAD_ATTR 0 ( difference )				  
    return abs ( d1 - d2 )				      								    10 COMPARE_OP 6 ( in )					  
							      4 8 SETUP_LOOP 58 ( to 68 )				    12 POP_JUMP_IF_FALSE 20					  
							      10 LOAD_GLOBAL 0 ( range )				    								  
							      12 LOAD_CONST 1 ( 0 )					    149 14 LOAD_FAST 0 ( self )					  
							      14 LOAD_FAST 1 ( n )					    16 LOAD_METHOD 1 ( difference )				  
							      16 CALL_FUNCTION 2					    18 LOAD_FAST 1 ( n )					  
							      18 GET_ITER						    20 CALL_METHOD 1						  
							      >> 20 FOR_ITER 44 ( to 66 )				    22 RETURN_VALUE						  
							      22 STORE_FAST 4 ( i )					    								  
							      								    150 >> 24 LOAD_FAST 0 ( self )				  
							      5 24 LOAD_FAST 2 ( d1 )					    26 LOAD_METHOD 2 ( difference )				  
							      26 LOAD_FAST 0 ( arr )					    28 LOAD_FAST 1 ( n )					  
							      28 LOAD_FAST 4 ( i )					    30 CALL_METHOD 1						  
							      30 BINARY_SUBSCR						    32 RETURN_VALUE						  
							      32 LOAD_FAST 4 ( i )					    34 LOAD_CONST 0 ( None )					  
							      34 BINARY_SUBSCR						    36 RETURN_VALUE						  
							      36 BINARY_ADD						    NEW_LINE							  
							      38 STORE_FAST 2 ( d1 )					    								  
							      								    								  
							      6 40 LOAD_FAST 3 ( d2 )					    								  
							      42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 1 ( n )					    								  
							      50 LOAD_FAST 4 ( i )					    								  
							      52 BINARY_SUBTRACT					    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_SUBSCR						    								  
							      60 BINARY_ADD						    								  
							      62 STORE_FAST 3 ( d2 )					    								  
							      64 JUMP_ABSOLUTE 20					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      7 >> 68 LOAD_GLOBAL 1 ( abs )				    								  
							      70 LOAD_FAST 2 ( d1 )					    								  
							      72 LOAD_FAST 3 ( d2 )					    								  
							      74 BINARY_SUBTRACT					    								  
							      76 CALL_FUNCTION 1					    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1
--							      --							    --								  --
def isSubSequence ( str1 , str2 , m , n ) :		      Disassembly of <code object isSubSequence at 0x7fbac0e8bc90,  Disassembly of <code object isSubSequence at 0x7f816a673a50,  script_not_found : None
    j = 0						      2 0 LOAD_CONST 1 ( 0 )					    108 0 LOAD_FAST 0 ( str1 )					  
    i = 0						      2 STORE_FAST 4 ( j )					    2 LOAD_CONST 1 ( 0 )					  
    while j < m and i < n :				      								    4 COMPARE_OP 0 ( < )					  
	if str1 [ j ] == str2 [ i ] :			      3 4 LOAD_CONST 1 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  
	    j = j + 1					      6 STORE_FAST 5 ( i )					    								  
	i = i + 1					      								    109 8 LOAD_FAST 0 ( str1 )					  
    return j == m					      4 8 SETUP_LOOP 52 ( to 62 )				    10 LOAD_CONST 2 ( 1 )					  
							      >> 10 LOAD_FAST 4 ( j )					    12 INPLACE_ADD						  
							      12 LOAD_FAST 2 ( m )					    14 STORE_FAST 1 ( str2 )					  
							      14 COMPARE_OP 0 ( < )					    16 JUMP_FORWARD 14 ( to 28 )				  
							      16 POP_JUMP_IF_FALSE 60					    								  
							      18 LOAD_FAST 5 ( i )					    110 >> 18 LOAD_FAST 0 ( str1 )				  
							      20 LOAD_FAST 3 ( n )					    20 LOAD_CONST 3 ( '\t' )					  
							      22 COMPARE_OP 0 ( < )					    22 INPLACE_ADD						  
							      24 POP_JUMP_IF_FALSE 60					    24 STORE_FAST 1 ( str2 )					  
							      								    								  
							      5 26 LOAD_FAST 0 ( str1 )					    111 26 LOAD_FAST 1 ( str2 )					  
							      28 LOAD_FAST 4 ( j )					    28 LOAD_CONST 4 ( '\t' )					  
							      30 BINARY_SUBSCR						    30 INPLACE_ADD						  
							      32 LOAD_FAST 1 ( str2 )					    32 STORE_FAST 1 ( str2 )					  
							      34 LOAD_FAST 5 ( i )					    34 JUMP_FORWARD 10 ( to 28 )				  
							      36 BINARY_SUBSCR						    								  
							      38 COMPARE_OP 2 ( == )					    112 >> 36 LOAD_FAST 1 ( str2 )				  
							      40 POP_JUMP_IF_FALSE 50					    38 LOAD_CONST 5 ( 1 )					  
							      								    40 INPLACE_ADD						  
							      6 42 LOAD_FAST 4 ( j )					    42 STORE_FAST 1 ( str2 )					  
							      44 LOAD_CONST 2 ( 1 )					    44 JUMP_FORWARD 10 ( to 28 )				  
							      46 BINARY_ADD						    								  
							      48 STORE_FAST 4 ( j )					    113 >> 46 LOAD_FAST 1 ( str2 )				  
							      								    48 LOAD_CONST 6 ( '\t' )					  
							      7 >> 50 LOAD_FAST 5 ( i )					    50 INPLACE_ADD						  
							      52 LOAD_CONST 2 ( 1 )					    52 STORE_FAST 1 ( str2 )					  
							      54 BINARY_ADD						    								  
							      56 STORE_FAST 5 ( i )					    114 54 LOAD_FAST 1 ( str2 )					  
							      58 JUMP_ABSOLUTE 10					    56 LOAD_CONST 7 ( 1 )					  
							      >> 60 POP_BLOCK						    58 INPLACE_ADD						  
							      								    60 STORE_FAST 1 ( str2 )					  
							      8 >> 62 LOAD_FAST 4 ( j )					    								  
							      64 LOAD_FAST 2 ( m )					    115 62 LOAD_FAST 1 ( str2 )					  
							      66 COMPARE_OP 2 ( == )					    64 LOAD_CONST 8 ( 2 )					  
							      68 RETURN_VALUE NEW_LINE					    66 INPLACE_ADD						  
							      								    68 STORE_FAST 1 ( str2 )					  
							      								    70 JUMP_FORWARD 10 ( to 28 )				  
							      								    								  
							      								    116 >> 72 LOAD_FAST 1 ( str2 )				  
							      								    74 LOAD_CONST 9 ( 1 )					  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 1 ( str2 )					  
							      								    80 JUMP_FORWARD 10 ( to 28 )				  
							      								    								  
							      								    117 >> 82 LOAD_FAST 1 ( str2 )				  
							      								    84 LOAD_CONST 10 ( 1 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( str2 )					  
							      								    								  
							      								    118 >> 90 LOAD_FAST 1 ( str2 )				  
							      								    92 LOAD_CONST 11 ( 1 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 1 ( str2 )					  
							      								    98 JUMP_FORWARD 2 ( to 28 )					  
							      								    								  
							      								    120 >> 100 LOAD_FAST 1 ( str2 )				  
							      								    102 LOAD_CONST 12 ( 1 )					  
							      								    104 INPLACE_ADD						  
							      								    106 STORE_FAST 1 ( str2 )					  
							      								    								  
							      								    121 >> 108 LOAD_FAST 1 ( str2 )				  
							      								    110 LOAD_CONST 13 ( 1 )					  
							      								    112 INPLACE_ADD						  
							      								    114 STORE_FAST 1 ( str2 )					  
							      								    								  
							      								    122 >> 116 LOAD_FAST 1 ( str2 )				  
							      								    118 LOAD_CONST 14 ( 1 )					  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 1 ( str2 )					  
							      								    								  
							      								    123 124 LOAD_FAST 1 ( str2 )				  
							      								    126 LOAD_FAST 1 ( str2 )					  
							      								    128 LOAD_FAST 2 ( str2 )					  
							      								    130 BINARY_ADD						  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( str2 )					  
							      								    136 JUMP_FORWARD 10 ( to 28					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM				      COUNT_PAIRS_WITH_GIVEN_SUM				    COUNT_PAIRS_WITH_GIVEN_SUM					  COUNT_PAIRS_WITH_GIVEN_SUM
--							      --							    --								  --
def getPairsCount ( arr , n , sum ) :			      Disassembly of <code object getPairsCount at 0x7fbac<<unk>> d Disassembly of <code object getPairsCount at 0x7f816a673a50,  script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    42 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 3 ( count )					    2 STORE_FAST 1 ( n )					  
	for j in range ( i + 1 , n ) :			      								    								  
	    if arr [ i ] + arr [ j ] == sum :		      3 4 SETUP_LOOP 70 ( to 76 )				    43 4 SETUP_LOOP 52 ( to 54 )				  
		count += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return count					      8 LOAD_CONST 1 ( 0 )					    8 LOAD_FAST 0 ( arr )					  
							      10 LOAD_FAST 1 ( n )					    10 CALL_FUNCTION 1						  
							      12 CALL_FUNCTION 2					    12 GET_ITER							  
							      14 GET_ITER						    >> 14 FOR_ITER 52 ( to 52 )					  
							      >> 16 FOR_ITER 56 ( to 74 )				    16 STORE_FAST 2 ( i )					  
							      18 STORE_FAST 4 ( i )					    								  
							      								    44 18 LOAD_FAST 1 ( n )					  
							      4 20 SETUP_LOOP 50 ( to 72 )				    20 LOAD_METHOD 1 ( append )					  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 4 ( i )					    24 CALL_METHOD 1						  
							      26 LOAD_CONST 2 ( 1 )					    26 POP_TOP							  
							      28 BINARY_ADD						    28 JUMP_ABSOLUTE 14						  
							      30 LOAD_FAST 1 ( n )					    >> 30 POP_BLOCK						  
							      32 CALL_FUNCTION 2					    >> 32 LOAD_CONST 0 ( None )					  
							      34 GET_ITER						    34 RETURN_VALUE						  
							      >> 36 FOR_ITER 32 ( to 70 )				    NEW_LINE							  
							      38 STORE_FAST 5 ( j )					    								  
							      								    								  
							      5 40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 4 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_FAST 5 ( j )					    								  
							      50 BINARY_SUBSCR						    								  
							      52 BINARY_ADD						    								  
							      54 LOAD_FAST 2 ( sum )					    								  
							      56 COMPARE_OP 2 ( == )					    								  
							      58 POP_JUMP_IF_FALSE 36					    								  
							      								    								  
							      6 60 LOAD_FAST 3 ( count )				    								  
							      62 LOAD_CONST 2 ( 1 )					    								  
							      64 INPLACE_ADD						    								  
							      66 STORE_FAST 3 ( count )					    								  
							      68 JUMP_ABSOLUTE 36					    								  
							      >> 70 POP_BLOCK						    								  
							      >> 72 JUMP_ABSOLUTE 16					    								  
							      >> 74 POP_BLOCK						    								  
							      								    								  
							      7 >> 76 LOAD_FAST 3 ( count )				    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OPERATIONS_MAKE_STRINGAB_FREE			      COUNT_OPERATIONS_MAKE_STRINGAB_FREE			    COUNT_OPERATIONS_MAKE_STRINGAB_FREE				  COUNT_OPERATIONS_MAKE_STRINGAB_FREE
--							      --							    --								  --
def abFree ( s ) :					      Disassembly of <code object abFree at 0x7fbac<<unk>> d540, fi Disassembly of <code object abFree at 0x7f816a6e4ae0, file "< error : Traceback (most recent call last):   File
    b_count = 0						      2 0 LOAD_CONST 1 ( 0 )					    31 0 LOAD_FAST 1 ( b_count )				  "XLM/dis_script.py", line 60, in <module>	exec
    res = 0						      2 STORE_FAST 1 ( b_count )				    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 36, in <module>	  Fi
    for i in range ( len ( s ) ) :			      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in abFree UnboundLocalError: l
	if s [ ~ i ] == 'a' :				      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_CONST 2 ( 1 )					  ocal variable 'b_count' referenced before assignme
	    res = ( res + b_count )			      6 STORE_FAST 2 ( res )					    8 BINARY_SUBSCR						  nt
	    b_count = ( b_count * 2 )			      								    10 LOAD_CONST 3 ( 2 )					  
	else :						      4 8 SETUP_LOOP 60 ( to 70 )				    12 BINARY_SUBSCR						  
	    b_count += 1				      10 LOAD_GLOBAL 0 ( range )				    14 LOAD_CONST 4 ( 3 )					  
    return res						      12 LOAD_GLOBAL 1 ( len )					    16 COMPARE_OP 2 ( == )					  
							      14 LOAD_FAST 0 ( s )					    18 POP_JUMP_IF_FALSE 24					  
							      16 CALL_FUNCTION 1					    								  
							      18 CALL_FUNCTION 1					    32 20 LOAD_CONST 5 ( 0 )					  
							      20 GET_ITER						    22 RETURN_VALUE						  
							      >> 22 FOR_ITER 44 ( to 68 )				    								  
							      24 STORE_FAST 3 ( i )					    33 >> 24 LOAD_CONST 6 ( 0 )					  
							      								    26 RETURN_VALUE						  
							      5 26 LOAD_FAST 0 ( s )					    28 LOAD_CONST 0 ( None )					  
							      28 LOAD_FAST 3 ( i )					    30 RETURN_VALUE						  
							      30 UNARY_INVERT						    NEW_LINE							  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_CONST 2 ( 'a' )					    								  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 58					    								  
							      								    								  
							      6 40 LOAD_FAST 2 ( res )					    								  
							      42 LOAD_FAST 1 ( b_count )				    								  
							      44 BINARY_ADD						    								  
							      46 STORE_FAST 2 ( res )					    								  
							      								    								  
							      7 48 LOAD_FAST 1 ( b_count )				    								  
							      50 LOAD_CONST 3 ( 2 )					    								  
							      52 BINARY_MULTIPLY					    								  
							      54 STORE_FAST 1 ( b_count )				    								  
							      56 JUMP_ABSOLUTE 22					    								  
							      								    								  
							      9 >> 58 LOAD_FAST 1 ( b_count )				    								  
							      60 LOAD_CONST 4 ( 1 )					    								  
							      62 INPLACE_ADD						    								  
							      64 STORE_FAST 1 ( b_count )				    								  
							      66 JUMP_ABSOLUTE 22					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      10 >> 70 LOAD_FAST 2 ( res )				    								  
							      72 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUM_CONTIGUOUS_SUBARRAY_2			      LARGEST_SUM_CONTIGUOUS_SUBARRAY_2				    LARGEST_SUM_CONTIGUOUS_SUBARRAY_2				  LARGEST_SUM_CONTIGUOUS_SUBARRAY_2
--							      --							    --								  --
def maxSubArraySum ( a , size ) :			      Disassembly of <code object maxSubArraySum at 0x7fbac0e8bc90, Disassembly of <code object maxSubArraySum at 0x7f816a673a50, error : Traceback (most recent call last):   File
    max_so_far = a [ 0 ]				      2 0 LOAD_FAST 0 ( a )					    20 0 LOAD_FAST 1 ( size )					  "XLM/dis_script.py", line 60, in <module>	exec
    curr_max = a [ 0 ]					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 33, in <module>	  Fi
    for i in range ( 1 , size ) :			      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  le "<dis>", line 2, in maxSubArraySum TypeError: '
	curr_max = max ( a [ i ] , curr_max + a [ i ] )	      6 STORE_FAST 2 ( max_so_far )				    6 STORE_FAST 2 ( a )					  int' object is not subscriptable
	max_so_far = max ( max_so_far , curr_max )	      								    								  
    return max_so_far					      3 8 LOAD_FAST 0 ( a )					    21 8 LOAD_FAST 2 ( a )					  
							      10 LOAD_CONST 1 ( 0 )					    10 LOAD_FAST 0 ( a )					  
							      12 BINARY_SUBSCR						    12 LOAD_CONST 2 ( 1 )					  
							      14 STORE_FAST 3 ( curr_max )				    14 BINARY_SUBSCR						  
							      								    16 LOAD_FAST 2 ( a )					  
							      4 16 SETUP_LOOP 50 ( to 68 )				    18 LOAD_CONST 3 ( 2 )					  
							      18 LOAD_GLOBAL 0 ( range )				    20 BINARY_SUBSCR						  
							      20 LOAD_CONST 2 ( 1 )					    22 LOAD_FAST 1 ( size )					  
							      22 LOAD_FAST 1 ( size )					    24 LOAD_CONST 4 ( 3 )					  
							      24 CALL_FUNCTION 2					    26 BINARY_SUBSCR						  
							      26 GET_ITER						    28 LOAD_CONST 5 ( ( 'size' , ) )				  
							      >> 28 FOR_ITER 36 ( to 66 )				    30 CALL_FUNCTION_KW 2					  
							      30 STORE_FAST 4 ( i )					    32 RETURN_VALUE						  
							      								    NEW_LINE							  
							      5 32 LOAD_GLOBAL 1 ( max )				    								  
							      34 LOAD_FAST 0 ( a )					    								  
							      36 LOAD_FAST 4 ( i )					    								  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 3 ( curr_max )				    								  
							      42 LOAD_FAST 0 ( a )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 BINARY_ADD						    								  
							      50 CALL_FUNCTION 2					    								  
							      52 STORE_FAST 3 ( curr_max )				    								  
							      								    								  
							      6 54 LOAD_GLOBAL 1 ( max )				    								  
							      56 LOAD_FAST 2 ( max_so_far )				    								  
							      58 LOAD_FAST 3 ( curr_max )				    								  
							      60 CALL_FUNCTION 2					    								  
							      62 STORE_FAST 2 ( max_so_far )				    								  
							      64 JUMP_ABSOLUTE 28					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      7 >> 68 LOAD_FAST 2 ( max_so_far )			    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
def maxProduct ( arr , n ) :				      Disassembly of <code object maxProduct at 0x7fbac0e89d20, fil Disassembly of <code object maxProduct at 0x7f816a6828a0, fil error : Traceback (most recent call last):   File
    if n < 3 :						      2 0 LOAD_FAST 1 ( n )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
	return - 1					      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    arr.sort ( )					      4 COMPARE_OP 0 ( < )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
    return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr  6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      								    8 BINARY_SUBSCR						  assembler.py", line 81, in to_co     co_consts.app
							      3 8 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 3 ( 3 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 RETURN_VALUE						    12 COMPARE_OP 2 ( == )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      								    14 POP_JUMP_IF_FALSE 20					  co	 self.co_cellvars, ValueError: code: varname
							      4 >> 12 LOAD_FAST 0 ( arr )				    								  s is too small
							      14 LOAD_METHOD 0 ( sort )					    27 16 LOAD_CONST 4 ( - 1 )					  
							      16 CALL_METHOD 0						    18 RETURN_VALUE						  
							      18 POP_TOP						    								  
							      								    28 >> 20 LOAD_FAST 0 ( arr )				  
							      5 20 LOAD_GLOBAL 1 ( max )				    22 LOAD_CONST 1 ( 1 )					  
							      22 LOAD_FAST 0 ( arr )					    24 BINARY_SUBSCR						  
							      24 LOAD_CONST 3 ( 0 )					    26 LOAD_CONST 5 ( 0 )					  
							      26 BINARY_SUBSCR						    28 COMPARE_OP 2 ( == )					  
							      28 LOAD_FAST 0 ( arr )					    30 POP_JUMP_IF_FALSE 40					  
							      30 LOAD_CONST 4 ( 1 )					    								  
							      32 BINARY_SUBSCR						    29 32 LOAD_CONST 6 ( - 1 )					  
							      34 BINARY_MULTIPLY					    34 RETURN_VALUE						  
							      36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 1 ( n )					    30 >> 36 LOAD_FAST 0 ( arr )				  
							      40 LOAD_CONST 4 ( 1 )					    38 LOAD_CONST 1 ( 1 )					  
							      42 BINARY_SUBTRACT					    40 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    42 LOAD_CONST 7 ( 0 )					  
							      46 BINARY_MULTIPLY					    44 COMPARE_OP 2 ( == )					  
							      48 LOAD_FAST 0 ( arr )					    46 POP_JUMP_IF_FALSE 52					  
							      50 LOAD_FAST 1 ( n )					    								  
							      52 LOAD_CONST 4 ( 1 )					    31 48 LOAD_CONST 8 ( - 1 )					  
							      54 BINARY_SUBTRACT					    50 RETURN_VALUE						  
							      56 BINARY_SUBSCR						    								  
							      58 LOAD_FAST 0 ( arr )					    32 >> 52 LOAD_FAST 0 ( arr )				  
							      60 LOAD_FAST 1 ( n )					    54 LOAD_CONST 1 ( 1 )					  
							      62 LOAD_CONST 5 ( 2 )					    56 BINARY_SUBSCR						  
							      64 BINARY_SUBTRACT					    58 LOAD_CONST 2 ( 2 )					  
							      66 BINARY_SUBSCR						    60 COMPARE_OP 2 ( == )					  
							      68 BINARY_MULTIPLY					    62 POP_JUMP_IF_FALSE 52					  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 1 ( n )					    33 64 LOAD_CONST 9 ( - 1 )					  
							      74 LOAD_CONST 1 ( 3 )					    66 RETURN_VALUE						  
							      76 BINARY_SUBTRACT					    								  
							      78 BINARY_SUBSCR						    34 >> 68 LOAD_CONST 10 ( - 1 )				  
							      80 BINARY_MULTIPLY					    70 RETURN_VALUE						  
							      82 CALL_FUNCTION 2					    72 LOAD_CONST 1 ( 1 )					  
							      84 RETURN_VALUE NEW_LINE					    74 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
def transpose ( A ) :					      Disassembly of <code object transpose at 0x7fbac0e89d20, file Disassembly of <code object transpose at 0x7f816a6e4ae0, file script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 82 ( to 84 )				    16 0 SETUP_LOOP 28 ( to 30 )				  
	for j in range ( i + 1 , N ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A 4 LOAD_GLOBAL 1 ( N )					    4 LOAD_CONST 1 ( 1 )					  
							      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
							      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 70 ( to 82 )				    >> 10 FOR_ITER 14 ( to 28 )					  
							      12 STORE_FAST 1 ( i )					    12 STORE_FAST 1 ( N )					  
							      								    								  
							      3 14 SETUP_LOOP 64 ( to 80 )				    17 14 LOAD_FAST 0 ( A )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_FAST 1 ( N )					  
							      18 LOAD_FAST 1 ( i )					    18 LOAD_FAST 2 ( N )					  
							      20 LOAD_CONST 1 ( 1 )					    20 BINARY_SUBTRACT						  
							      22 BINARY_ADD						    22 LOAD_FAST 3 ( N )					  
							      24 LOAD_GLOBAL 1 ( N )					    24 BINARY_MULTIPLY						  
							      26 CALL_FUNCTION 2					    26 LOAD_FAST 4 ( N )					  
							      28 GET_ITER						    28 BINARY_MULTIPLY						  
							      >> 30 FOR_ITER 46 ( to 78 )				    30 BINARY_ADD						  
							      32 STORE_FAST 2 ( j )					    32 LOAD_FAST 1 ( N )					  
							      								    34 LOAD_FAST 2 ( N )					  
							      4 34 LOAD_FAST 0 ( A )					    36 BINARY_MULTIPLY						  
							      36 LOAD_FAST 2 ( j )					    38 BINARY_ADD						  
							      38 BINARY_SUBSCR						    40 LOAD_FAST 1 ( N )					  
							      40 LOAD_FAST 1 ( i )					    42 LOAD_FAST 3 ( N )					  
							      42 BINARY_SUBSCR						    44 BINARY_MULTIPLY						  
							      44 LOAD_FAST 0 ( A )					    46 BINARY_ADD						  
							      46 LOAD_FAST 1 ( i )					    48 LOAD_FAST 1 ( N )					  
							      48 BINARY_SUBSCR						    50 BINARY_ADD						  
							      50 LOAD_FAST 2 ( j )					    52 LOAD_FAST 2 ( N )					  
							      52 BINARY_SUBSCR						    54 BINARY_ADD						  
							      54 ROT_TWO						    56 LOAD_FAST 3 ( N )					  
							      56 LOAD_FAST 0 ( A )					    58 BINARY_ADD						  
							      58 LOAD_FAST 1 ( i )					    60 BINARY_MULTIPLY						  
							      60 BINARY_SUBSCR						    62 BINARY_ADD						  
							      62 LOAD_FAST 2 ( j )					    64 LOAD_FAST 1 ( N )					  
							      64 STORE_SUBSCR						    66 BINARY_ADD						  
							      66 LOAD_FAST 0 ( A )					    68 LOAD_FAST 2 ( N )					  
							      68 LOAD_FAST 2 ( j )					    70 BINARY_ADD						  
							      70 BINARY_SUBSCR						    72 BINARY_MULTIPLY						  
							      72 LOAD_FAST 1 ( i )					    74 BINARY_ADD						  
							      74 STORE_SUBSCR						    76 LOAD_FAST 1 ( N )					  
							      76 JUMP_ABSOLUTE 30					    78 BINARY_ADD						  
							      >> 78 POP_BLOCK						    80 BINARY_MULTIPLY						  
							      >> 80 JUMP_ABSOLUTE 10					    82 BINARY_ADD						  
							      >> 82 POP_BLOCK						    84 LOAD_FAST 2 ( N )					  
							      >> 84 LOAD_CONST 0 ( None )				    86 BINARY_ADD						  
							      86 RETURN_VALUE NEW_LINE					    88 BINARY_ADD						  
							      								    90 BINARY_ADD						  
							      								    92 LOAD_FAST 1 ( N )					  
							      								    94 BINARY_ADD						  
							      								    96 BINARY_MULTIPLY						  
							      								    98 BINARY_ADD						  
							      								    100 BINARY_ADD						  
							      								    102 LOAD_FAST 1 ( N )					  
							      								    104 BINARY_ADD						  
							      								    106 BINARY_ADD						  
							      								    108 BINARY_MULTIPLY						  
							      								    110 BINARY_ADD						  
							      								    112 LOAD_FAST 1 ( N )					  
							      								    114 BINARY_ADD						  
							      								    116 BINARY_MULTIPLY						  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_FAST 1 ( N )					  
							      								    122 BINARY_ADD						  
							      								    124 BINARY_MULTIPLY						  
							      								    126 BINARY_ADD						  
							      								    128 BINARY_ADD						  
							      								    130 LOAD_FAST 1 ( N )					  
							      								    132 BINARY_ADD						  
							      								    134 BINARY_ADD						  
							      								    136 BINARY_ADD						  
							      								    138 BINARY_ADD						  
							      								    140 BINARY_ADD						  
							      								    142 STORE_FAST 2 ( N )					  
							      								    								  
							      								    17 144 LOAD_FAST 2 ( N )					  
							      								    146 LOAD_FAST 1 ( N )					  
							      								    148 BINARY_ADD						  
							      								    150 BINARY_ADD						  
							      								    152 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
def splitArr ( arr , n , k ) :				      Disassembly of <code object splitArr at 0x7fbac<<unk>> de40,  Disassembly of <code object splitArr at 0x7f816a677930, file  error : Traceback (most recent call last):   File
    for i in range ( 0 , k ) :				      2 0 SETUP_LOOP 78 ( to 80 )				    26 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 59, in <module>	for
	x = arr [ 0 ]					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( arr )					  item in run_dis_script():   File "XLM/dis_script.p
	for j in range ( 0 , n - 1 ) :			      4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  y", line 54, in run_dis_script     hyp_co = mco.to
	    arr [ j ] = arr [ j + 1 ]			      6 LOAD_FAST 2 ( k )					    >> 6 FOR_ITER 14 ( to 22 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	arr [ n - 1 ] = x				      8 CALL_FUNCTION 2						    8 STORE_FAST 1 ( n )					  assembler.py", line 81, in to_co     co_consts.app
							      10 GET_ITER						    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      >> 12 FOR_ITER 64 ( to 78 )				    27 10 LOAD_FAST 1 ( n )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 STORE_FAST 3 ( i )					    12 LOAD_CONST 1 ( 1 )					  co	 self.co_cellvars, ValueError: code: varname
							      								    14 INPLACE_ADD						  s is too small
							      3 16 LOAD_FAST 0 ( arr )					    16 STORE_FAST 1 ( n )					  
							      18 LOAD_CONST 1 ( 0 )					    								  
							      20 BINARY_SUBSCR						    28 18 LOAD_FAST 1 ( n )					  
							      22 STORE_FAST 4 ( x )					    20 LOAD_CONST 2 ( 0 )					  
							      								    22 BINARY_SUBSCR						  
							      4 24 SETUP_LOOP 38 ( to 64 )				    24 LOAD_FAST 1 ( n )					  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_CONST 1 ( 0 )					    28 INPLACE_ADD						  
							      30 LOAD_FAST 1 ( n )					    30 STORE_FAST 1 ( n )					  
							      32 LOAD_CONST 2 ( 1 )					    32 JUMP_ABSOLUTE 6						  
							      34 BINARY_SUBTRACT					    >> 34 POP_BLOCK						  
							      36 CALL_FUNCTION 2					    								  
							      38 GET_ITER						    29 >> 36 LOAD_FAST 1 ( n )					  
							      >> 40 FOR_ITER 20 ( to 62 )				    38 RETURN_VALUE						  
							      42 STORE_FAST 5 ( j )					    NEW_LINE							  
							      								    								  
							      5 44 LOAD_FAST 0 ( arr )					    								  
							      46 LOAD_FAST 5 ( j )					    								  
							      48 LOAD_CONST 2 ( 1 )					    								  
							      50 BINARY_ADD						    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 5 ( j )					    								  
							      58 STORE_SUBSCR						    								  
							      60 JUMP_ABSOLUTE 40					    								  
							      >> 62 POP_BLOCK						    								  
							      								    								  
							      6 >> 64 LOAD_FAST 4 ( x )					    								  
							      66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 1 ( n )					    								  
							      70 LOAD_CONST 2 ( 1 )					    								  
							      72 BINARY_SUBTRACT					    								  
							      74 STORE_SUBSCR						    								  
							      76 JUMP_ABSOLUTE 12					    								  
							      >> 78 POP_BLOCK						    								  
							      >> 80 LOAD_CONST 0 ( None )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SUM_FACTORS_NUMBER				      FIND_MINIMUM_SUM_FACTORS_NUMBER				    FIND_MINIMUM_SUM_FACTORS_NUMBER				  FIND_MINIMUM_SUM_FACTORS_NUMBER
--							      --							    --								  --
def findMinSum ( num ) :				      Disassembly of <code object findMinSum at 0x7fbac<<unk>> d540 Disassembly of <code object findMinSum at 0x7f816a6e4b70, fil error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 2 )					  "XLM/dis_script.py", line 59, in <module>	for
    i = 2						      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( i )					  item in run_dis_script():   File "XLM/dis_script.p
    while ( i * i <= num ) :				      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	while ( num % i == 0 ) :			      3 4 LOAD_CONST 2 ( 2 )					    27 4 LOAD_CONST 2 ( '%i = %i' )				  cals, co_varnames, co_names, co_consts, co_linesta
	    sum += i					      6 STORE_FAST 2 ( i )					    6 LOAD_FAST 1 ( i )						  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    num /= i					      								    8 BINARY_MODULO						  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	i += 1						      4 8 SETUP_LOOP 58 ( to 68 )				    10 STORE_FAST 2 ( i )					  n parse     code.append(arg) ValueError: byte must
    sum += num						      >> 10 LOAD_FAST 2 ( i )					    								   be in range(0, 256)
    return sum						      12 LOAD_FAST 2 ( i )					    28 12 LOAD_FAST 0 ( num )					  
							      14 BINARY_MULTIPLY					    14 LOAD_CONST 3 ( 1 )					  
							      16 LOAD_FAST 0 ( num )					    16 COMPARE_OP 2 ( == )					  
							      18 COMPARE_OP 1 ( <= )					    18 POP_JUMP_IF_FALSE 28					  
							      20 POP_JUMP_IF_FALSE 66					    								  
							      								    29 20 LOAD_FAST 0 ( num )					  
							      5 22 SETUP_LOOP 32 ( to 56 )				    22 LOAD_CONST 4 ( 1 )					  
							      >> 24 LOAD_FAST 0 ( num )					    24 INPLACE_ADD						  
							      26 LOAD_FAST 2 ( i )					    26 STORE_FAST 1 ( i )					  
							      28 BINARY_MODULO						    								  
							      30 LOAD_CONST 1 ( 0 )					    30 >> 28 LOAD_FAST 1 ( i )					  
							      32 COMPARE_OP 2 ( == )					    30 LOAD_CONST 5 ( 1 )					  
							      34 POP_JUMP_IF_FALSE 54					    32 INPLACE_ADD						  
							      								    34 STORE_FAST 1 ( i )					  
							      6 36 LOAD_FAST 1 ( sum )					    								  
							      38 LOAD_FAST 2 ( i )					    31 36 LOAD_FAST 0 ( num )					  
							      40 INPLACE_ADD						    38 LOAD_CONST 6 ( 2 )					  
							      42 STORE_FAST 1 ( sum )					    40 INPLACE_ADD						  
							      								    42 STORE_FAST 1 ( i )					  
							      7 44 LOAD_FAST 0 ( num )					    44 JUMP_FORWARD 10 ( to 52 )				  
							      46 LOAD_FAST 2 ( i )					    								  
							      48 INPLACE_TRUE_DIVIDE					    32 >> 46 LOAD_FAST 1 ( i )					  
							      50 STORE_FAST 0 ( num )					    48 LOAD_CONST 7 ( 3 )					  
							      52 JUMP_ABSOLUTE 24					    50 INPLACE_ADD						  
							      >> 54 POP_BLOCK						    52 STORE_FAST 1 ( i )					  
							      								    								  
							      8 >> 56 LOAD_FAST 2 ( i )					    33 54 LOAD_FAST 1 ( i )					  
							      58 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 8 ( 2 )					  
							      60 INPLACE_ADD						    58 INPLACE_ADD						  
							      62 STORE_FAST 2 ( i )					    60 STORE_FAST 1 ( i )					  
							      64 JUMP_ABSOLUTE 10					    								  
							      >> 66 POP_BLOCK						    34 62 LOAD_FAST 1 ( i )					  
							      								    64 LOAD_CONST 9 ( 4 )					  
							      9 >> 68 LOAD_FAST 1 ( sum )				    66 INPLACE_ADD						  
							      70 LOAD_FAST 0 ( num )					    68 STORE_FAST 1 ( i )					  
							      72 INPLACE_ADD						    								  
							      74 STORE_FAST 1 ( sum )					    35 70 LOAD_FAST 1 ( i )					  
							      								    72 LOAD_CONST 10 ( 2 )					  
							      10 76 LOAD_FAST 1 ( sum )					    74 INPLACE_ADD						  
							      78 RETURN_VALUE NEW_LINE					    76 STORE_FAST 1 ( i )					  
							      								    78 JUMP_FORWARD 10 ( to 52 )				  
							      								    								  
							      								    36 >> 80 LOAD_FAST 1 ( i )					  
							      								    82 LOAD_CONST 10 ( 2 )					  
							      								    84 INPLACE_ADD						  
							      								    86 STORE_FAST 1 ( i )					  
							      								    								  
							      								    37 88 LOAD_FAST 1 ( i )					  
							      								    90 LOAD_CONST 11 ( 3 )					  
							      								    92 INPLACE_ADD						  
							      								    94 STORE_FAST 1 ( i )					  
							      								    								  
							      								    38 >> 96 LOAD_FAST 1 ( i )					  
							      								    98 LOAD_CONST 12 ( 2 )					  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 1 ( i )					  
							      								    104 JUMP_FORWARD 2 ( to 52 )				  
							      								    								  
							      								    39 >> 106 LOAD_FAST 1 ( i )					  
							      								    108 LOAD_CONST 12 ( 2 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( i )					  
							      								    								  
							      								    40 114 LOAD_FAST 1 ( i )					  
							      								    116 LOAD_CONST 12 ( 2 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( i )					  
							      								    122 JUMP_FORWARD 2 ( to 52 )				  
							      								    								  
							      								    41 >> 124 LOAD_FAST 1 ( i )					  
							      								    126 LOAD_CONST 13 ( 3 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( i )					  
							      								    								  
							      								    42 >> 132 LOAD_FAST 1 ( i )					  
							      								    134 LOAD_CONST 14 ( 2 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( i )					  
							      								    								  
							      								    43 140 LOAD_FAST 1 ( i )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
def power ( x , y , p ) :				      Disassembly of <code object power at 0x7fbac<<unk>> de40, fil Disassembly of <code object power at 0x7f816a6e4b70, file "<d error : Traceback (most recent call last):   File
    res = 1						      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_FAST 1 ( x )					  "XLM/dis_script.py", line 59, in <module>	for
    x = x % p						      2 STORE_FAST 3 ( res )					    2 LOAD_FAST 0 ( self )					  item in run_dis_script():   File "XLM/dis_script.p
    while ( y > 0 ) :					      								    4 STORE_ATTR 0 ( x )					  y", line 54, in run_dis_script     hyp_co = mco.to
	if ( ( y & 1 ) == 1 ) :				      3 4 LOAD_FAST 0 ( x )					    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	    res = ( res * x ) % p			      6 LOAD_FAST 2 ( p )					    27 6 LOAD_FAST 1 ( x )					  assembler.py", line 81, in to_co     co_consts.app
	y = y >> 1					      8 BINARY_MODULO						    8 LOAD_FAST 0 ( self )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	x = ( x * x ) % p				      10 STORE_FAST 0 ( x )					    10 STORE_ATTR 1 ( y )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    return res						      								    								  co	 self.co_cellvars, ValueError: code: varname
							      4 12 SETUP_LOOP 56 ( to 70 )				    28 12 LOAD_FAST 1 ( x )					  s is too small
							      >> 14 LOAD_FAST 1 ( y )					    14 LOAD_FAST 0 ( self )					  
							      16 LOAD_CONST 2 ( 0 )					    16 STORE_ATTR 2 ( y )					  
							      18 COMPARE_OP 4 ( > )					    								  
							      20 POP_JUMP_IF_FALSE 68					    29 18 LOAD_FAST 1 ( x )					  
							      								    20 LOAD_FAST 0 ( self )					  
							      5 22 LOAD_FAST 1 ( y )					    22 STORE_ATTR 3 ( y )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 0 ( None )					  
							      26 BINARY_AND						    26 RETURN_VALUE						  
							      28 LOAD_CONST 1 ( 1 )					    NEW_LINE							  
							      30 COMPARE_OP 2 ( == )					    								  
							      32 POP_JUMP_IF_FALSE 46					    								  
							      								    								  
							      6 34 LOAD_FAST 3 ( res )					    								  
							      36 LOAD_FAST 0 ( x )					    								  
							      38 BINARY_MULTIPLY					    								  
							      40 LOAD_FAST 2 ( p )					    								  
							      42 BINARY_MODULO						    								  
							      44 STORE_FAST 3 ( res )					    								  
							      								    								  
							      7 >> 46 LOAD_FAST 1 ( y )					    								  
							      48 LOAD_CONST 1 ( 1 )					    								  
							      50 BINARY_RSHIFT						    								  
							      52 STORE_FAST 1 ( y )					    								  
							      								    								  
							      8 54 LOAD_FAST 0 ( x )					    								  
							      56 LOAD_FAST 0 ( x )					    								  
							      58 BINARY_MULTIPLY					    								  
							      60 LOAD_FAST 2 ( p )					    								  
							      62 BINARY_MODULO						    								  
							      64 STORE_FAST 0 ( x )					    								  
							      66 JUMP_ABSOLUTE 14					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      9 >> 70 LOAD_FAST 3 ( res )				    								  
							      72 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME     MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	    MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	  MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME
--							      --							    --								  --
def maxRemoval ( arr , n ) :				      Disassembly of <code object maxRemoval at 0x7fbac<<unk>> de40 Disassembly of <code object maxRemoval at 0x7f816a5e56f0, fil error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    42 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    cummulative_sum = 0					      2 STORE_FAST 2 ( count )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 35, in <module>	  Fi
    arr.sort ( )					      								    4 CALL_METHOD 0						  le "<dis>", line 2, in maxRemoval NameError: name
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					  'cummulative_sum' is not defined
	if arr [ i ] >= cummulative_sum :		      6 STORE_FAST 3 ( cummulative_sum )			    								  
	    count += 1					      								    43 8 LOAD_FAST 1 ( n )					  
	    cummulative_sum += arr [ i ]		      4 8 LOAD_FAST 0 ( arr )					    10 LOAD_GLOBAL 1 ( cummulative_sum )			  
    return count					      10 LOAD_METHOD 0 ( sort )					    12 LOAD_FAST 0 ( arr )					  
							      12 CALL_METHOD 0						    14 CALL_FUNCTION 1						  
							      14 POP_TOP						    16 BINARY_SUBTRACT						  
							      								    18 STORE_FAST 2 ( a )					  
							      5 16 SETUP_LOOP 48 ( to 66 )				    								  
							      18 LOAD_GLOBAL 1 ( range )				    44 20 LOAD_FAST 2 ( a )					  
							      20 LOAD_FAST 1 ( n )					    22 LOAD_FAST 1 ( n )					  
							      22 CALL_FUNCTION 1					    24 BINARY_MULTIPLY						  
							      24 GET_ITER						    26 STORE_FAST 3 ( b )					  
							      >> 26 FOR_ITER 36 ( to 64 )				    								  
							      28 STORE_FAST 4 ( i )					    45 28 LOAD_FAST 3 ( b )					  
							      								    30 LOAD_FAST 2 ( a )					  
							      6 30 LOAD_FAST 0 ( arr )					    32 BINARY_MULTIPLY						  
							      32 LOAD_FAST 4 ( i )					    34 STORE_FAST 4 ( b )					  
							      34 BINARY_SUBSCR						    								  
							      36 LOAD_FAST 3 ( cummulative_sum )			    46 36 LOAD_FAST 0 ( arr )					  
							      38 COMPARE_OP 5 ( >= )					    38 LOAD_FAST 4 ( b )					  
							      40 POP_JUMP_IF_FALSE 26					    40 BINARY_MULTIPLY						  
							      								    42 LOAD_FAST 2 ( a )					  
							      7 42 LOAD_FAST 2 ( count )				    44 BINARY_MULTIPLY						  
							      44 LOAD_CONST 2 ( 1 )					    46 LOAD_FAST 3 ( b )					  
							      46 INPLACE_ADD						    48 BINARY_MULTIPLY						  
							      48 STORE_FAST 2 ( count )					    50 BINARY_ADD						  
							      								    52 LOAD_FAST 4 ( b )					  
							      8 50 LOAD_FAST 3 ( cummulative_sum )			    54 LOAD_FAST 2 ( a )					  
							      52 LOAD_FAST 0 ( arr )					    56 BINARY_MULTIPLY						  
							      54 LOAD_FAST 4 ( i )					    58 BINARY_ADD						  
							      56 BINARY_SUBSCR						    60 LOAD_FAST 4 ( b )					  
							      58 INPLACE_ADD						    62 BINARY_MULTIPLY						  
							      60 STORE_FAST 3 ( cummulative_sum )			    64 BINARY_ADD						  
							      62 JUMP_ABSOLUTE 26					    66 LOAD_FAST 2 ( a )					  
							      >> 64 POP_BLOCK						    68 BINARY_MULTIPLY						  
							      								    70 BINARY_ADD						  
							      9 >> 66 LOAD_FAST 2 ( count )				    72 LOAD_FAST 3 ( b )					  
							      68 RETURN_VALUE NEW_LINE					    74 BINARY_MULTIPLY						  
							      								    76 BINARY_ADD						  
							      								    78 LOAD_FAST 4 ( b )					  
							      								    80 BINARY_MULTIPLY						  
							      								    82 BINARY_ADD						  
							      								    84 LOAD_FAST 2 ( a )					  
							      								    86 BINARY_MULTIPLY						  
							      								    88 BINARY_ADD						  
							      								    90 LOAD_FAST 4 ( b )					  
							      								    92 BINARY_MULTIPLY						  
							      								    94 BINARY_ADD						  
							      								    96 LOAD_FAST 2 ( a )					  
							      								    98 BINARY_MULTIPLY						  
							      								    100 BINARY_ADD						  
							      								    102 LOAD_FAST 4 ( b )					  
							      								    104 BINARY_ADD						  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_FAST 2 ( a )					  
							      								    110 BINARY_MULTIPLY						  
							      								    112 BINARY_ADD						  
							      								    114 LOAD_FAST 3 ( b )					  
							      								    116 BINARY_ADD						  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_FAST 2 ( a )					  
							      								    122 BINARY_MULTIPLY						  
							      								    124 BINARY_ADD						  
							      								    126 BINARY_ADD						  
							      								    128 LOAD_FAST 3 ( b )					  
							      								    130 BINARY_ADD						  
							      								    132 BINARY_ADD						  
							      								    134 LOAD_FAST 2 ( a )					  
							      								    136 BINARY_ADD						  
							      								    138 BINARY_ADD						  
							      								    140 BINARY_ADD						  
							      								    142 LOAD_FAST 3 ( b )					  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_ADD						  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
def CountPairs ( n ) :					      Disassembly of <code object CountPairs at 0x7fbac0e8bc90, fil Disassembly of <code object CountPairs at 0x7f816a683d20, fil error : Traceback (most recent call last):   File
    k = n						      2 0 LOAD_FAST 0 ( n )					    65 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    imin = 1						      2 STORE_FAST 1 ( k )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    ans = 0						      								    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    while ( imin <= n ) :				      3 4 LOAD_CONST 1 ( 1 )					    6 STORE_FAST 1 ( imx )					  cals, co_varnames, co_names, co_consts, co_linesta
	imax = n / k					      6 STORE_FAST 2 ( imin )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	ans += k * ( imax - imin + 1 )			      								    66 8 LOAD_FAST 1 ( imx )					  pack non-iterable NoneType object
	imin = imax + 1					      4 8 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
	k = n / imin					      10 STORE_FAST 3 ( ans )					    12 BINARY_SUBSCR						  
    return ans						      								    14 STORE_FAST 2 ( imx )					  
							      5 12 SETUP_LOOP 56 ( to 70 )				    								  
							      >> 14 LOAD_FAST 2 ( imin )				    67 16 LOAD_FAST 1 ( imx )					  
							      16 LOAD_FAST 0 ( n )					    18 LOAD_CONST 3 ( 1 )					  
							      18 COMPARE_OP 1 ( <= )					    20 BINARY_SUBSCR						  
							      20 POP_JUMP_IF_FALSE 68					    22 STORE_FAST 3 ( imx )					  
							      								    								  
							      6 22 LOAD_FAST 0 ( n )					    68 24 LOAD_FAST 1 ( imx )					  
							      24 LOAD_FAST 1 ( k )					    26 LOAD_CONST 4 ( 1 )					  
							      26 BINARY_TRUE_DIVIDE					    28 BINARY_SUBSCR						  
							      28 STORE_FAST 4 ( imax )					    30 LOAD_CONST 5 ( '%d-imin-imin-imin-imin-imin-imin-imin-imin 
							      								    								  
							      7 30 LOAD_FAST 3 ( ans )					    								  
							      32 LOAD_FAST 1 ( k )					    								  
							      34 LOAD_FAST 4 ( imax )					    								  
							      36 LOAD_FAST 2 ( imin )					    								  
							      38 BINARY_SUBTRACT					    								  
							      40 LOAD_CONST 1 ( 1 )					    								  
							      42 BINARY_ADD						    								  
							      44 BINARY_MULTIPLY					    								  
							      46 INPLACE_ADD						    								  
							      48 STORE_FAST 3 ( ans )					    								  
							      								    								  
							      8 50 LOAD_FAST 4 ( imax )					    								  
							      52 LOAD_CONST 1 ( 1 )					    								  
							      54 BINARY_ADD						    								  
							      56 STORE_FAST 2 ( imin )					    								  
							      								    								  
							      9 58 LOAD_FAST 0 ( n )					    								  
							      60 LOAD_FAST 2 ( imin )					    								  
							      62 BINARY_TRUE_DIVIDE					    								  
							      64 STORE_FAST 1 ( k )					    								  
							      66 JUMP_ABSOLUTE 14					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      10 >> 70 LOAD_FAST 3 ( ans )				    								  
							      72 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		      FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		    FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		  FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY
--							      --							    --								  --
def maxSubarrayXOR ( arr , n ) :			      Disassembly of <code object maxSubarrayXOR at 0x7fbac<<unk>>  Disassembly of <code object maxSubarrayXOR at 0x7f816a683a50, error : Traceback (most recent call last):   File
    ans = - 2147483648					      2 0 LOAD_CONST 1 ( - 2147483648 )				    90 0 LOAD_CONST 1 ( 2147483648 )				  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 2 ( ans )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 34, in <module>	  Fi
	curr_xor = 0					      								    								  le "<dis>", line 2, in maxSubarrayXOR TypeError: '
	for j in range ( i , n ) :			      3 4 SETUP_LOOP 62 ( to 68 )				    91 4 SETUP_LOOP 22 ( to 28 )				  list' object cannot be interpreted as an integer
	    curr_xor = curr_xor ^ arr [ j ]		      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    ans = max ( ans , curr_xor )		      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 0 ( arr )					  
    return ans						      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 50 ( to 66 )				    >> 14 FOR_ITER 14 ( to 26 )					  
							      16 STORE_FAST 3 ( i )					    16 STORE_FAST 2 ( i )					  
							      								    								  
							      4 18 LOAD_CONST 2 ( 0 )					    92 18 LOAD_FAST 1 ( n )					  
							      20 STORE_FAST 4 ( curr_xor )				    20 LOAD_CONST 2 ( 0 )					  
							      								    22 BINARY_SUBSCR						  
							      5 22 SETUP_LOOP 40 ( to 64 )				    24 LOAD_METHOD 1 ( append )					  
							      24 LOAD_GLOBAL 0 ( range )				    26 LOAD_FAST 2 ( i )					  
							      26 LOAD_FAST 3 ( i )					    28 CALL_METHOD 1						  
							      28 LOAD_FAST 1 ( n )					    30 POP_TOP							  
							      30 CALL_FUNCTION 2					    32 JUMP_ABSOLUTE 14						  
							      32 GET_ITER						    >> 34 POP_BLOCK						  
							      >> 34 FOR_ITER 26 ( to 62 )				    >> 36 LOAD_CONST 3 ( None )					  
							      36 STORE_FAST 5 ( j )					    38 RETURN_VALUE						  
							      								    NEW_LINE							  
							      6 38 LOAD_FAST 4 ( curr_xor )				    								  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 5 ( j )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 BINARY_XOR						    								  
							      48 STORE_FAST 4 ( curr_xor )				    								  
							      								    								  
							      7 50 LOAD_GLOBAL 1 ( max )				    								  
							      52 LOAD_FAST 2 ( ans )					    								  
							      54 LOAD_FAST 4 ( curr_xor )				    								  
							      56 CALL_FUNCTION 2					    								  
							      58 STORE_FAST 2 ( ans )					    								  
							      60 JUMP_ABSOLUTE 34					    								  
							      >> 62 POP_BLOCK						    								  
							      >> 64 JUMP_ABSOLUTE 14					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      8 >> 68 LOAD_FAST 2 ( ans )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1		      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1
--							      --							    --								  --
def gcdExtended ( a , b , x , y ) :			      Disassembly of <code object gcdExtended at 0x7fbac<<unk>> d8a Disassembly of <code object gcdExtended at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    if a == 0 :						      2 0 LOAD_FAST 0 ( a )					    65 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
	x = 0						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	y = 1						      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
	return b					      6 POP_JUMP_IF_FALSE 20					    6 STORE_FAST 1 ( b )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    x1 = 1						      								    								  assembler.py", line 81, in to_co     co_consts.app
    y1 = 1						      3 8 LOAD_CONST 1 ( 0 )					    66 8 LOAD_FAST 1 ( b )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    gcd = gcdExtended ( b % a , a , x1 , y1 )		      10 STORE_FAST 2 ( x )					    10 LOAD_CONST 2 ( 'cdExtended a b = a' )			  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    x = y1 - ( b / a ) * x1				      								    12 LOAD_FAST 1 ( b )					  co	 self.co_cellvars, ValueError: code: varname
    y = x1						      4 12 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 3 ( 1 )					  s is too small
    return gcd						      14 STORE_FAST 3 ( y )					    16 BINARY_SUBSCR						  
							      								    18 LOAD_CONST 4 ( 'b' )					  
							      5 16 LOAD_FAST 1 ( b )					    20 COMPARE_OP 2 ( == )					  
							      18 RETURN_VALUE						    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      6 >> 20 LOAD_CONST 2 ( 1 )				    67 24 LOAD_FAST 1 ( b )					  
							      22 STORE_FAST 4 ( x1 )					    26 LOAD_CONST 5 ( 'b' )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      7 24 LOAD_CONST 2 ( 1 )					    30 POP_JUMP_IF_FALSE 34					  
							      26 STORE_FAST 5 ( y1 )					    								  
							      								    68 32 LOAD_FAST 1 ( b )					  
							      8 28 LOAD_GLOBAL 0 ( gcdExtended )			    34 LOAD_CONST 6 ( 'b' )					  
							      30 LOAD_FAST 1 ( b )					    36 COMPARE_OP 2 ( == )					  
							      32 LOAD_FAST 0 ( a )					    38 POP_JUMP_IF_FALSE 42					  
							      34 BINARY_MODULO						    								  
							      36 LOAD_FAST 0 ( a )					    69 40 LOAD_FAST 1 ( b )					  
							      38 LOAD_FAST 4 ( x1 )					    42 LOAD_CONST 7 ( 'b' )					  
							      40 LOAD_FAST 5 ( y1 )					    44 COMPARE_OP 2 ( == )					  
							      42 CALL_FUNCTION 4					    46 POP_JUMP_IF_FALSE 42					  
							      44 STORE_FAST 6 ( gcd )					    								  
							      								    70 48 LOAD_FAST 1 ( b )					  
							      9 46 LOAD_FAST 5 ( y1 )					    50 LOAD_CONST 8 ( 'b' )					  
							      48 LOAD_FAST 1 ( b )					    52 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 0 ( a )					    54 POP_JUMP_IF_FALSE 42					  
							      52 BINARY_TRUE_DIVIDE					    								  
							      54 LOAD_FAST 4 ( x1 )					    71 56 LOAD_FAST 1 ( b )					  
							      56 BINARY_MULTIPLY					    58 LOAD_CONST 9 ( 'b' )					  
							      58 BINARY_SUBTRACT					    60 COMPARE_OP 2 ( == )					  
							      60 STORE_FAST 2 ( x )					    62 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      10 62 LOAD_FAST 4 ( x1 )					    72 64 LOAD_FAST 1 ( b )					  
							      64 STORE_FAST 3 ( y )					    66 LOAD_CONST 10 ( 'b' )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      11 66 LOAD_FAST 6 ( gcd )					    70 POP_JUMP_IF_FALSE 76					  
							      68 RETURN_VALUE NEW_LINE					    								  
							      								    73 72 LOAD_FAST 1 ( b )					  
							      								    74 LOAD_CONST 11 ( 'b' )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    74 80 LOAD_FAST 1 ( b )					  
							      								    82 LOAD_CONST 12 ( 'b' )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    75 88 LOAD_FAST 1 ( b )					  
							      								    90 LOAD_CONST 12 ( 'b' )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    76 96 LOAD_FAST 1 ( b )					  
							      								    98 LOAD_CONST 13 ( 'b' )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    77 104 LOAD_FAST 1 ( b )					  
							      								    106 LOAD_CONST 6 ( 'b' )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    78 112 LOAD_FAST 1 ( b )					  
							      								    114 LOAD_CONST 6 ( 'b' )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    80 >> 120 LOAD_FAST 1 ( b )					  
							      								    122 LOAD_CONST 6 ( 'b' )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    81 128 LOAD_FAST 1 ( b )					  
							      								    130 LOAD_CONST 6 ( 'b' )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
def countFriendsPairings ( n ) :			      Disassembly of <code object countFriendsPairings at 0x7fbac<< Disassembly of <code object countFriendsPairings at 0x7f816a6 error : Traceback (most recent call last):   File
    a , b , c = 1 , 2 , 0 ;				      2 0 LOAD_CONST 1 ( ( 1 , 2 , 0 ) )			    26 0 LOAD_FAST 1 ( b )					  "XLM/dis_script.py", line 59, in <module>	for
    if ( n <= 2 ) :					      2 UNPACK_SEQUENCE 3					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
	return n ;					      4 STORE_FAST 1 ( a )					    4 BINARY_ADD						  y", line 54, in run_dis_script     hyp_co = mco.to
    for i in range ( 3 , n + 1 ) :			      6 STORE_FAST 2 ( b )					    6 STORE_FAST 2 ( c )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	c = b + ( i - 1 ) * a ;				      8 STORE_FAST 3 ( c )					    								  assembler.py", line 81, in to_co     co_consts.app
	a = b ;						      								    27 8 LOAD_FAST 0 ( n )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	b = c ;						      3 10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 2 ( 2 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    return c ;						      12 LOAD_CONST 2 ( 2 )					    12 BINARY_POWER						  co	 self.co_cellvars, TypeError: name tuples mu
							      14 COMPARE_OP 1 ( <= )					    14 STORE_FAST 3 ( c )					  st contain only strings, not 'NoneType'
							      16 POP_JUMP_IF_FALSE 22					    								  
							      								    28 16 LOAD_FAST 0 ( n )					  
							      4 18 LOAD_FAST 0 ( n )					    18 LOAD_CONST 3 ( 2 )					  
							      20 RETURN_VALUE						    20 BINARY_POWER						  
							      								    22 STORE_FAST 4 ( c )					  
							      5 >> 22 SETUP_LOOP 46 ( to 70 )				    								  
							      24 LOAD_GLOBAL 0 ( range )				    29 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 3 ( 3 )					    26 LOAD_CONST 4 ( 3 )					  
							      28 LOAD_FAST 0 ( n )					    28 BINARY_POWER						  
							      30 LOAD_CONST 4 ( 1 )					    30 STORE_FAST 5 ( c )					  
							      32 BINARY_ADD						    								  
							      34 CALL_FUNCTION 2					    30 32 LOAD_FAST 0 ( n )					  
							      36 GET_ITER						    34 LOAD_CONST 5 ( 1 )					  
							      >> 38 FOR_ITER 28 ( to 68 )				    36 BINARY_POWER						  
							      40 STORE_FAST 4 ( i )					    38 LOAD_FAST 2 ( c )					  
							      								    40 LOAD_CONST 6 ( 2 )					  
							      6 42 LOAD_FAST 2 ( b )					    42 BINARY_POWER						  
							      44 LOAD_FAST 4 ( i )					    44 BINARY_POWER						  
							      46 LOAD_CONST 4 ( 1 )					    46 LOAD_FAST 3 ( c )					  
							      48 BINARY_SUBTRACT					    48 LOAD_CONST 7 ( 2 )					  
							      50 LOAD_FAST 1 ( a )					    50 BINARY_POWER						  
							      52 BINARY_MULTIPLY					    52 BINARY_POWER						  
							      54 BINARY_ADD						    54 LOAD_FAST 4 ( c )					  
							      56 STORE_FAST 3 ( c )					    56 LOAD_CONST 8 ( 2 )					  
							      								    58 BINARY_POWER						  
							      7 58 LOAD_FAST 2 ( b )					    60 BINARY_POWER						  
							      60 STORE_FAST 1 ( a )					    62 BINARY_MULTIPLY						  
							      								    64 LOAD_FAST 5 ( c )					  
							      8 62 LOAD_FAST 3 ( c )					    66 LOAD_CONST 9 ( 2 )					  
							      64 STORE_FAST 2 ( b )					    68 BINARY_POWER						  
							      66 JUMP_ABSOLUTE 38					    70 BINARY_POWER						  
							      >> 68 POP_BLOCK						    72 BINARY_POWER						  
							      								    74 LOAD_FAST 4 ( c )					  
							      9 >> 70 LOAD_FAST 3 ( c )					    76 LOAD_CONST 10 ( 2 )					  
							      72 RETURN_VALUE NEW_LINE					    78 BINARY_POWER						  
							      								    80 BINARY_POWER						  
							      								    82 BINARY_POWER						  
							      								    84 BINARY_POWER						  
							      								    86 LOAD_FAST 5 ( c )					  
							      								    88 LOAD_CONST 11 ( 2 )					  
							      								    90 BINARY_POWER						  
							      								    92 BINARY_POWER						  
							      								    94 BINARY_ADD						  
							      								    96 LOAD_FAST 4 ( c )					  
							      								    98 LOAD_CONST 12 ( 3 )					  
							      								    100 BINARY_POWER						  
							      								    102 BINARY_POWER						  
							      								    104 BINARY_ADD						  
							      								    106 LOAD_CONST 13 ( 2 )					  
							      								    108 BINARY_POWER						  
							      								    110 BINARY_POWER						  
							      								    112 BINARY_ADD						  
							      								    114 LOAD_FAST 5 ( c )					  
							      								    116 LOAD_CONST 12 ( 3 )					  
							      								    118 BINARY_POWER						  
							      								    120 BINARY_POWER						  
							      								    122 BINARY_ADD						  
							      								    124 LOAD_CONST 13 ( 2 )					  
							      								    126 BINARY_POWER						  
							      								    128 BINARY_POWER						  
							      								    130 LOAD_FAST 4 ( c )					  
							      								    132 LOAD_CONST 14 ( 2 )					  
							      								    134 BINARY_POWER						  
							      								    136 BINARY_POWER						  
							      								    138 BINARY_MULTIPLY						  
							      								    140 BINARY_ADD						  
							      								    142 LOAD_FAST 5 ( c )					  
							      								    144 LOAD_CONST 15 ( 2 )					  
							      								    146 BINARY_POWER						  
							      								    148 BINARY_POWER						  
							      								    150 BINARY_ADD						  
							      								    152 LOAD_CONST 16 ( 2 )					  
							      								    154 BINARY_POWER						  
							      								    156 BINARY_ADD						  
							      								    158 LOAD_FAST 5 ( c )					  
							      								    160 BINARY_POWER						  
							      								    162 BINARY_ADD						  
							      								    164 LOAD_CONST 17 ( 2 )					  
							      								    166 BINARY_POWER						  
							      								    168 BINARY_POWER						  
							      								    170 BINARY_ADD						  
							      								    								  
							      								    29 172 LOAD_FAST 5 ( c )					  
							      								    174 LOAD_CONST 16 ( 2 )					  
							      								    176 BINARY_POWER						  
							      								    174 BINARY_ADD						  
							      								    176 LOAD_FAST 5 ( c )					  
							      								    								  
							      								    30 172 LOAD_FAST 3 ( c )					  
							      								    174 LOAD_CONST 17 ( 2 )					  
							      								    176 BINARY_POWER						  
							      								    								  
							      								    31 174 LOAD_FAST 5 ( c )					  
							      								    176 LOAD_CONST 18 ( 2 )					  
							      								    178 BINARY_POWER						  
							      								    								  
							      								    32 32 LOAD_FAST 4						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE_1				      C_PROGRAM_FIND_AREA_TRIANGLE_1				    C_PROGRAM_FIND_AREA_TRIANGLE_1				  C_PROGRAM_FIND_AREA_TRIANGLE_1
--							      --							    --								  --
def polygonArea ( X , Y , n ) :				      Disassembly of <code object polygonArea at 0x7fbac<<unk>> d54 Disassembly of <code object distance_Area at 0x7f816a673a50,  script_not_found : None
    area = 0.0						      2 0 LOAD_CONST 1 ( 0.0 )					    26 0 LOAD_CONST 1 ( 0.0 )					  
    j = n - 1						      2 STORE_FAST 3 ( area )					    2 STORE_FAST 1 ( j )					  
    for i in range ( 0 , n ) :				      								    								  
	area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ 3 4 LOAD_FAST 2 ( n )					    27 4 LOAD_GLOBAL 0 ( area )					  
	j = i						      6 LOAD_CONST 2 ( 1 )					    6 LOAD_FAST 1 ( j )						  
    return abs ( area // 2.0 )				      8 BINARY_SUBTRACT						    8 LOAD_FAST 0 ( X )						  
							      10 STORE_FAST 4 ( j )					    10 LOAD_FAST 1 ( j )					  
							      								    12 LOAD_FAST 2 ( j )					  
							      4 12 SETUP_LOOP 58 ( to 72 )				    14 LOAD_FAST 3 ( j )					  
							      14 LOAD_GLOBAL 0 ( range )				    16 LOAD_FAST 4 ( j )					  
							      16 LOAD_CONST 3 ( 0 )					    18 LOAD_FAST 5 ( j )					  
							      18 LOAD_FAST 2 ( n )					    20 LOAD_FAST 6 ( j )					  
							      20 CALL_FUNCTION 2					    22 LOAD_FAST 7 ( j )					  
							      22 GET_ITER						    24 LOAD_FAST 8 ( j )					  
							      >> 24 FOR_ITER 44 ( to 70 )				    26 LOAD_FAST 9 ( j )					  
							      26 STORE_FAST 5 ( i )					    28 LOAD_FAST 10 ( j )					  
							      								    30 LOAD_FAST 11 ( j )					  
							      5 28 LOAD_FAST 3 ( area )					    32 LOAD_FAST 12 ( j )					  
							      30 LOAD_FAST 0 ( X )					    34 LOAD_FAST 13 ( j )					  
							      32 LOAD_FAST 4 ( j )					    36 LOAD_FAST 14 ( j )					  
							      34 BINARY_SUBSCR						    38 LOAD_FAST 14 ( j )					  
							      36 LOAD_FAST 0 ( X )					    40 LOAD_FAST 15 ( j )					  
							      38 LOAD_FAST 5 ( i )					    42 LOAD_FAST 16 ( j )					  
							      40 BINARY_SUBSCR						    44 LOAD_FAST 17 ( j )					  
							      42 BINARY_ADD						    46 LOAD_FAST 18 ( j )					  
							      44 LOAD_FAST 1 ( Y )					    48 LOAD_FAST 19 ( j )					  
							      46 LOAD_FAST 4 ( j )					    50 LOAD_FAST 20 ( j )					  
							      48 BINARY_SUBSCR						    52 LOAD_FAST 21 ( j )					  
							      50 LOAD_FAST 1 ( Y )					    54 LOAD_FAST 22 ( j )					  
							      52 LOAD_FAST 5 ( i )					    56 LOAD_FAST 21 ( j )					  
							      54 BINARY_SUBSCR						    58 LOAD_FAST 22 ( j )					  
							      56 BINARY_SUBTRACT					    60 LOAD_FAST 21 ( j )					  
							      58 BINARY_MULTIPLY					    62 LOAD_FAST 22 ( j )					  
							      60 BINARY_ADD						    64 LOAD_FAST 21 ( j )					  
							      62 STORE_FAST 3 ( area )					    66 LOAD_FAST 22 ( j )					  
							      								    68 LOAD_FAST 21 ( j )					  
							      6 64 LOAD_FAST 5 ( i )					    70 LOAD_FAST 22 ( j )					  
							      66 STORE_FAST 4 ( j )					    72 LOAD_FAST 21 ( j )					  
							      68 JUMP_ABSOLUTE 24					    74 LOAD_FAST 22 ( j )					  
							      >> 70 POP_BLOCK						    76 LOAD_FAST 21 ( j )					  
							      								    78 LOAD_FAST 22 ( j )					  
							      7 >> 72 LOAD_GLOBAL 1 ( abs )				    80 LOAD_FAST 22 ( j )					  
							      74 LOAD_FAST 3 ( area )					    82 LOAD_FAST 21 ( j )					  
							      76 LOAD_CONST 4 ( 2.0 )					    84 LOAD_FAST 22 ( j )					  
							      78 BINARY_FLOOR_DIVIDE					    86 LOAD_FAST 23 ( j )					  
							      80 CALL_FUNCTION 1					    88 LOAD_FAST 22 ( j )					  
							      82 RETURN_VALUE NEW_LINE					    90 LOAD_FAST 21 ( j )					  
							      								    92 LOAD_FAST 22 ( j )					  
							      								    94 LOAD_FAST 21 ( j )					  
							      								    96 LOAD_FAST 22 ( j )					  
							      								    98 LOAD_FAST 23 ( j )					  
							      								    100 LOAD_FAST 22 ( j )					  
							      								    102 LOAD_FAST 23 ( j )					  
							      								    104 LOAD_FAST 22 ( j )					  
							      								    106 LOAD_FAST 23 ( j )					  
							      								    108 LOAD_CONST 1 ( 0.0 )					  
							      								    110 LOAD_CONST 1 ( 0.0 )					  
							      								    112 LOAD_CONST 1 ( 0.0 )					  
							      								    114 LOAD_CONST 1 ( 0.0 )					  
							      								    116 LOAD_CONST 1 ( 0.0 )					  
							      								    118 LOAD_CONST 1 ( 0.0 )					  
							      								    120 LOAD_CONST 1 ( 0.0 )					  
							      								    122 LOAD_CONST 1 ( 0.0 )					  
							      								    124 LOAD_CONST 1 ( 0.0 )					  
							      								    126 LOAD_CONST 1 ( 0.0 )					  
							      								    128 LOAD_CONST 1 ( 0.0 )					  
							      								    130 LOAD_CONST 1 ( 0.0 )					  
							      								    132 LOAD_CONST 1 ( 0.0 )					  
							      								    134 LOAD_CONST 1 ( 0.0 )					  
							      								    136 LOAD_CONST 1 ( 0.0 )					  
							      								    138 LOAD_CONST 1 ( 0.0 )					  
							      								    140 LOAD_CONST 1 ( 0.0					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
def printFibonacciNumbers ( n ) :			      Disassembly of <code object printFibonacciNumbers at 0x7fbac< Disassembly of <code object printFibonacciacciacciacciacciacc script_not_found : None
    f1 = 0						      2 0 LOAD_CONST 1 ( 0 )					    								  
    f2 = 1						      2 STORE_FAST 1 ( f1 )					    								  
    if ( n < 1 ) :					      								    								  
	return						      3 4 LOAD_CONST 2 ( 1 )					    								  
    for x in range ( 0 , n ) :				      6 STORE_FAST 2 ( f2 )					    								  
	print ( f2 , end = " " )			      								    								  
	next = f1 + f2					      4 8 LOAD_FAST 0 ( n )					    								  
	f1 = f2						      10 LOAD_CONST 2 ( 1 )					    								  
	f2 = next					      12 COMPARE_OP 0 ( < )					    								  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      5 16 LOAD_CONST 0 ( None )				    								  
							      18 RETURN_VALUE						    								  
							      								    								  
							      6 >> 20 SETUP_LOOP 46 ( to 68 )				    								  
							      22 LOAD_GLOBAL 0 ( range )				    								  
							      24 LOAD_CONST 1 ( 0 )					    								  
							      26 LOAD_FAST 0 ( n )					    								  
							      28 CALL_FUNCTION 2					    								  
							      30 GET_ITER						    								  
							      >> 32 FOR_ITER 32 ( to 66 )				    								  
							      34 STORE_FAST 3 ( x )					    								  
							      								    								  
							      7 36 LOAD_GLOBAL 1 ( print )				    								  
							      38 LOAD_FAST 2 ( f2 )					    								  
							      40 LOAD_CONST 3 ( ' ' )					    								  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      44 CALL_FUNCTION_KW 2					    								  
							      46 POP_TOP						    								  
							      								    								  
							      8 48 LOAD_FAST 1 ( f1 )					    								  
							      50 LOAD_FAST 2 ( f2 )					    								  
							      52 BINARY_ADD						    								  
							      54 STORE_FAST 4 ( next )					    								  
							      								    								  
							      9 56 LOAD_FAST 2 ( f2 )					    								  
							      58 STORE_FAST 1 ( f1 )					    								  
							      								    								  
							      10 60 LOAD_FAST 4 ( next )				    								  
							      62 STORE_FAST 2 ( f2 )					    								  
							      64 JUMP_ABSOLUTE 32					    								  
							      >> 66 POP_BLOCK						    								  
							      >> 68 LOAD_CONST 0 ( None )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
def findIndex ( n ) :					      Disassembly of <code object findIndex at 0x7fbac<<unk>> d540, Disassembly of <code object findIndex at 0x7f816a677930, file error : /bin/bash: line 1: 25442 Segmentation faul
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return n					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    a = 0						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    b = 1						      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/FIND_INDEX_GIVE
    c = 1						      								    								  N_FIBONACCI_NUMBER_CONSTANT_TIME.dis
    res = 1						      3 8 LOAD_FAST 0 ( n )					    27 8 LOAD_FAST 0 ( n )					  
    while ( c < n ) :					      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 0 )					  
	c = a + b					      								    12 COMPARE_OP 2 ( == )					  
	res = res + 1					      4 >> 12 LOAD_CONST 2 ( 0 )				    14 POP_JUMP_IF_FALSE 28					  
	a = b						      14 STORE_FAST 1 ( a )					    								  
	b = c						      								    28 >> 16 LOAD_FAST 0 ( n )					  
    return res						      5 16 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 3 ( 1 )					  
							      18 STORE_FAST 2 ( b )					    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      6 20 LOAD_CONST 1 ( 1 )					    								  
							      22 STORE_FAST 3 ( c )					    29 24 LOAD_FAST 0 ( n )					  
							      								    26 LOAD_CONST 4 ( 2 )					  
							      7 24 LOAD_CONST 1 ( 1 )					    28 COMPARE_OP 2 ( == )					  
							      26 STORE_FAST 4 ( res )					    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      8 28 SETUP_LOOP 36 ( to 66 )				    30 32 LOAD_FAST 0 ( n )					  
							      >> 30 LOAD_FAST 3 ( c )					    34 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_FAST 0 ( n )					    36 COMPARE_OP 2 ( == )					  
							      34 COMPARE_OP 0 ( < )					    38 POP_JUMP_IF_FALSE 44					  
							      36 POP_JUMP_IF_FALSE 64					    								  
							      								    31 40 LOAD_FAST 0 ( n )					  
							      9 38 LOAD_FAST 1 ( a )					    42 LOAD_CONST 6 ( 2 )					  
							      40 LOAD_FAST 2 ( b )					    44 COMPARE_OP 2 ( == )					  
							      42 BINARY_ADD						    46 POP_JUMP_IF_FALSE 44					  
							      44 STORE_FAST 3 ( c )					    								  
							      								    32 48 LOAD_FAST 0 ( n )					  
							      10 46 LOAD_FAST 4 ( res )					    50 LOAD_CONST 7 ( 2 )					  
							      48 LOAD_CONST 1 ( 1 )					    52 COMPARE_OP 2 ( == )					  
							      50 BINARY_ADD						    54 POP_JUMP_IF_FALSE 44					  
							      52 STORE_FAST 4 ( res )					    								  
							      								    33 56 LOAD_FAST 0 ( n )					  
							      11 54 LOAD_FAST 2 ( b )					    58 LOAD_CONST 8 ( 2 )					  
							      56 STORE_FAST 1 ( a )					    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      12 58 LOAD_FAST 3 ( c )					    								  
							      60 STORE_FAST 2 ( b )					    34 64 LOAD_FAST 0 ( n )					  
							      62 JUMP_ABSOLUTE 30					    66 LOAD_CONST 9 ( 2 )					  
							      >> 64 POP_BLOCK						    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 44					  
							      13 >> 66 LOAD_FAST 4 ( res )				    								  
							      68 RETURN_VALUE NEW_LINE					    35 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 10 ( 2 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    36 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 11 ( 3 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    37 88 LOAD_FAST 0 ( n )					  
							      								    90 LOAD_CONST 12 ( 2 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    38 >> 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 13 ( 3 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    39 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 14 ( 2 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    40 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_CONST 15 ( 3 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    41 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 16 ( 2 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    42 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 17 ( 3 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 18 ( 2 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    44 144 LOAD_FAST 0 ( n )					  
							      								    146 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
def minLexRotation ( str_ ) :				      Disassembly of <code object minLexRotation at 0x7fbac0e8bc90, Disassembly of <code object minLexRotation at 0x7f816a673a50, error : Traceback (most recent call last):   File
    n = len ( str_ )					      2 0 LOAD_GLOBAL 0 ( len )					    65 0 LOAD_FAST 0 ( str_ )					  "XLM/dis_script.py", line 60, in <module>	exec
    arr = [ 0 ] * n					      2 LOAD_FAST 0 ( str_ )					    2 LOAD_FAST 1 ( str_ )					  (item)   File "main.py", line 34, in <module>	  Fi
    concat = str_ + str_				      4 CALL_FUNCTION 1						    4 BINARY_MULTIPLY						  le "<dis>", line 2, in minLexRotation UnboundLocal
    for i in range ( n ) :				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 2 ( str_ )					  Error: local variable 'str_' referenced before ass
	arr [ i ] = concat [ i : n + i ]		      								    								  ignment
    arr.sort ( )					      3 8 LOAD_CONST 1 ( 0 )					    66 8 LOAD_FAST 2 ( str_ )					  
    return arr [ 0 ]					      10 BUILD_LIST 1						    10 LOAD_FAST 0 ( str_ )					  
							      12 LOAD_FAST 1 ( n )					    12 BINARY_MULTIPLY						  
							      14 BINARY_MULTIPLY					    14 LOAD_FAST 2 ( str_ )					  
							      16 STORE_FAST 2 ( arr )					    16 BINARY_MULTIPLY						  
							      								    18 LOAD_FAST 0 ( str_ )					  
							      4 18 LOAD_FAST 0 ( str_ )					    20 BINARY_MULTIPLY						  
							      20 LOAD_FAST 0 ( str_ )					    22 BINARY_ADD						  
							      22 BINARY_ADD						    24 RETURN_VALUE						  
							      24 STORE_FAST 3 ( concat )				    NEW_LINE							  
							      								    								  
							      5 26 SETUP_LOOP 36 ( to 64 )				    								  
							      28 LOAD_GLOBAL 1 ( range )				    								  
							      30 LOAD_FAST 1 ( n )					    								  
							      32 CALL_FUNCTION 1					    								  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 24 ( to 62 )				    								  
							      38 STORE_FAST 4 ( i )					    								  
							      								    								  
							      6 40 LOAD_FAST 3 ( concat )				    								  
							      42 LOAD_FAST 4 ( i )					    								  
							      44 LOAD_FAST 1 ( n )					    								  
							      46 LOAD_FAST 4 ( i )					    								  
							      48 BINARY_ADD						    								  
							      50 BUILD_SLICE 2						    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 2 ( arr )					    								  
							      56 LOAD_FAST 4 ( i )					    								  
							      58 STORE_SUBSCR						    								  
							      60 JUMP_ABSOLUTE 36					    								  
							      >> 62 POP_BLOCK						    								  
							      								    								  
							      7 >> 64 LOAD_FAST 2 ( arr )				    								  
							      66 LOAD_METHOD 2 ( sort )					    								  
							      68 CALL_METHOD 0						    								  
							      70 POP_TOP						    								  
							      								    								  
							      8 72 LOAD_FAST 2 ( arr )					    								  
							      74 LOAD_CONST 1 ( 0 )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			      NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			    NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			  NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
def findPosition ( k , n ) :				      Disassembly of <code object findPosition at 0x7fbac0e89d20, f Disassembly of <code object findPosition at 0x7f816a601660, f error : Traceback (most recent call last):   File
    f1 = 0						      2 0 LOAD_CONST 1 ( 0 )					    76 0 LOAD_FAST 0 ( k )					  "XLM/dis_script.py", line 59, in <module>	for
    f2 = 1						      2 STORE_FAST 2 ( f1 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    i = 2 ;						      								    4 COMPARE_OP 3 ( != )					  y", line 47, in run_dis_script     co_code, co_nlo
    while i != 0 :					      3 4 LOAD_CONST 2 ( 1 )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	f3 = f1 + f2 ;					      6 STORE_FAST 3 ( f2 )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	f1 = f2 ;					      								    77 8 LOAD_FAST 0 ( k )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	f2 = f3 ;					      4 8 LOAD_CONST 3 ( 2 )					    10 LOAD_CONST 2 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	if f2 % k == 0 :				      10 STORE_FAST 4 ( i )					    12 INPLACE_ADD						   be in range(0, 256)
	    return n * i				      								    14 STORE_FAST 0 ( k )					  
	i += 1						      5 12 SETUP_LOOP 56 ( to 70 )				    16 JUMP_FORWARD 2 ( to 12 )					  
    return						      >> 14 LOAD_FAST 4 ( i )					    >> 18 LOAD_CONST 3 ( 1 )					  
							      16 LOAD_CONST 1 ( 0 )					    >> 20 STORE_FAST 0 ( k )					  
							      18 COMPARE_OP 3 ( != )					    								  
							      20 POP_JUMP_IF_FALSE 68					    78 22 LOAD_FAST 0 ( k )					  
							      								    24 LOAD_CONST 4 ( 2 )					  
							      6 22 LOAD_FAST 2 ( f1 )					    26 COMPARE_OP 3 ( != )					  
							      24 LOAD_FAST 3 ( f2 )					    28 POP_JUMP_IF_FALSE 38					  
							      26 BINARY_ADD						    								  
							      28 STORE_FAST 5 ( f3 )					    79 30 LOAD_FAST 0 ( k )					  
							      								    32 LOAD_CONST 5 ( 3 )					  
							      7 30 LOAD_FAST 3 ( f2 )					    34 COMPARE_OP 3 ( != )					  
							      32 STORE_FAST 2 ( f1 )					    36 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      8 34 LOAD_FAST 5 ( f3 )					    80 38 LOAD_FAST 0 ( k )					  
							      36 STORE_FAST 3 ( f2 )					    40 LOAD_CONST 6 ( 4 )					  
							      								    42 INPLACE_ADD						  
							      9 38 LOAD_FAST 3 ( f2 )					    44 STORE_FAST 0 ( k )					  
							      40 LOAD_FAST 0 ( k )					    46 JUMP_FORWARD 2 ( to 38 )					  
							      42 BINARY_MODULO						    >> 48 LOAD_CONST 7 ( 2 )					  
							      44 LOAD_CONST 1 ( 0 )					    50 STORE_FAST 0 ( k )					  
							      46 COMPARE_OP 2 ( == )					    52 JUMP_FORWARD 2 ( to 38 )					  
							      48 POP_JUMP_IF_FALSE 58					    								  
							      								    82 >> 54 LOAD_FAST 0 ( k )					  
							      10 50 LOAD_FAST 1 ( n )					    56 LOAD_CONST 6 ( 4 )					  
							      52 LOAD_FAST 4 ( i )					    58 INPLACE_ADD						  
							      54 BINARY_MULTIPLY					    60 STORE_FAST 0 ( k )					  
							      56 RETURN_VALUE						    								  
							      								    83 >> 62 LOAD_FAST 0 ( k )					  
							      11 >> 58 LOAD_FAST 4 ( i )				    64 LOAD_CONST 6 ( 4 )					  
							      60 LOAD_CONST 2 ( 1 )					    66 INPLACE_ADD						  
							      62 INPLACE_ADD						    68 STORE_FAST 0 ( k )					  
							      64 STORE_FAST 4 ( i )					    								  
							      66 JUMP_ABSOLUTE 14					    84 70 LOAD_FAST 0 ( k )					  
							      >> 68 POP_BLOCK						    72 LOAD_CONST 6 ( 4 )					  
							      								    74 INPLACE_ADD						  
							      12 >> 70 LOAD_CONST 0 ( None )				    76 STORE_FAST 0 ( k )					  
							      72 RETURN_VALUE NEW_LINE					    78 JUMP_FORWARD 2 ( to 38 )					  
							      								    >> 80 LOAD_CONST 7 ( 2 )					  
							      								    82 STORE_FAST 0 ( k )					  
							      								    								  
							      								    85 >> 84 LOAD_FAST 0 ( k )					  
							      								    86 LOAD_FAST 0 ( k )					  
							      								    88 LOAD_FAST 0 ( k )					  
							      								    90 LOAD_FAST 0 ( k )					  
							      								    92 LOAD_FAST 0 ( k )					  
							      								    94 LOAD_FAST 0 ( k )					  
							      								    96 BUILD_TUPLE 2						  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 0 ( k )					  
							      								    								  
							      								    86 >> 102 LOAD_FAST 0 ( k )					  
							      								    104 LOAD_FAST 0 ( k )					  
							      								    106 LOAD_FAST 0 ( k )					  
							      								    108 LOAD_FAST 0 ( k )					  
							      								    110 LOAD_FAST 0 ( k )					  
							      								    112 LOAD_FAST 0 ( k )					  
							      								    114 BUILD_TUPLE 2						  
							      								    116 LOAD_FAST 0 ( k )					  
							      								    118 LOAD_FAST 0 ( k )					  
							      								    120 LOAD_FAST 0 ( k )					  
							      								    122 BUILD_TUPLE 2						  
							      								    124 STORE_SUBSCR						  
							      								    126 LOAD_CONST 0 ( None )					  
							      								    128 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
def leonardo ( n ) :					      Disassembly of <code object leonardo at 0x7fbac0e8bc90, file  Disassembly of <code object leardo at 0x7f816a673a50, file "< error : /bin/bash: line 1: 25460 Segmentation faul
    dp = [ ] ;						      2 0 BUILD_LIST 0						    20 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    dp.append ( 1 ) ;					      2 STORE_FAST 1 ( dp )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    dp.append ( 1 ) ;					      								    4 INPLACE_ADD						  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    for i in range ( 2 , n + 1 ) :			      3 4 LOAD_FAST 1 ( dp )					    6 STORE_FAST 1 ( i )					  eval_scripts/python_sa-dis_sa.test/LEONARDO_NUMBER
	dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ;	      6 LOAD_METHOD 0 ( append )				    								  _1.dis
    return dp [ n ] ;					      8 LOAD_CONST 1 ( 1 )					    21 8 LOAD_FAST 1 ( i )					  
							      10 CALL_METHOD 1						    10 LOAD_CONST 2 ( 2 )					  
							      12 POP_TOP						    12 BINARY_MULTIPLY						  
							      								    14 INPLACE_ADD						  
							      4 14 LOAD_FAST 1 ( dp )					    16 STORE_FAST 1 ( i )					  
							      16 LOAD_METHOD 0 ( append )				    								  
							      18 LOAD_CONST 1 ( 1 )					    22 18 LOAD_FAST 1 ( i )					  
							      20 CALL_METHOD 1						    20 LOAD_CONST 3 ( 1 )					  
							      22 POP_TOP						    22 INPLACE_ADD						  
							      								    24 STORE_FAST 1 ( i )					  
							      5 24 SETUP_LOOP 56 ( to 82 )				    								  
							      26 LOAD_GLOBAL 1 ( range )				    23 26 LOAD_FAST 1 ( i )					  
							      28 LOAD_CONST 2 ( 2 )					    28 LOAD_CONST 4 ( - 1 )					  
							      30 LOAD_FAST 0 ( n )					    30 INPLACE_ADD						  
							      32 LOAD_CONST 1 ( 1 )					    32 STORE_FAST 1 ( i )					  
							      34 BINARY_ADD						    								  
							      36 CALL_FUNCTION 2					    24 34 LOAD_FAST 1 ( i )					  
							      38 GET_ITER						    36 LOAD_CONST 5 ( - 1 )					  
							      >> 40 FOR_ITER 38 ( to 80 )				    38 INPLACE_ADD						  
							      42 STORE_FAST 2 ( i )					    40 STORE_FAST 1 ( i )					  
							      								    								  
							      6 44 LOAD_FAST 1 ( dp )					    25 42 LOAD_FAST 1 ( i )					  
							      46 LOAD_METHOD 0 ( append )				    44 LOAD_CONST 6 ( - 1 )					  
							      48 LOAD_FAST 1 ( dp )					    46 INPLACE_ADD						  
							      50 LOAD_FAST 2 ( i )					    48 STORE_FAST 1 ( i )					  
							      52 LOAD_CONST 1 ( 1 )					    								  
							      54 BINARY_SUBTRACT					    26 50 LOAD_FAST 1 ( i )					  
							      56 BINARY_SUBSCR						    52 LOAD_CONST 7 ( - 1 )					  
							      58 LOAD_FAST 1 ( dp )					    54 INPLACE_ADD						  
							      60 LOAD_FAST 2 ( i )					    56 STORE_FAST 1 ( i )					  
							      62 LOAD_CONST 2 ( 2 )					    								  
							      64 BINARY_SUBTRACT					    27 58 LOAD_FAST 1 ( i )					  
							      66 BINARY_SUBSCR						    60 LOAD_CONST 8 ( - 1 )					  
							      68 BINARY_ADD						    62 INPLACE_ADD						  
							      70 LOAD_CONST 1 ( 1 )					    64 STORE_FAST 1 ( i )					  
							      72 BINARY_ADD						    								  
							      74 CALL_METHOD 1						    28 66 LOAD_FAST 1 ( i )					  
							      76 POP_TOP						    68 LOAD_CONST 9 ( - 1 )					  
							      78 JUMP_ABSOLUTE 40					    70 INPLACE_ADD						  
							      >> 80 POP_BLOCK						    72 STORE_FAST 1 ( i )					  
							      								    								  
							      7 >> 82 LOAD_FAST 1 ( dp )				    29 74 LOAD_FAST 1 ( i )					  
							      84 LOAD_FAST 0 ( n )					    76 LOAD_CONST 10 ( - 1 )					  
							      86 BINARY_SUBSCR						    78 INPLACE_ADD						  
							      88 RETURN_VALUE NEW_LINE					    80 STORE_FAST 1 ( i )					  
							      								    								  
							      								    30 82 LOAD_FAST 1 ( i )					  
							      								    84 LOAD_CONST 11 ( - 1 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( i )					  
							      								    								  
							      								    31 90 LOAD_FAST 1 ( i )					  
							      								    92 LOAD_CONST 12 ( - 1 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 1 ( i )					  
							      								    								  
							      								    32 98 LOAD_FAST 1 ( i )					  
							      								    100 LOAD_CONST 13 ( - 1 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( i )					  
							      								    								  
							      								    33 106 LOAD_FAST 1 ( i )					  
							      								    108 LOAD_CONST 6 ( - 1 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( i )					  
							      								    								  
							      								    34 114 LOAD_FAST 1 ( i )					  
							      								    116 LOAD_CONST 6 ( - 1 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( i )					  
							      								    								  
							      								    35 122 LOAD_FAST 1 ( i )					  
							      								    124 LOAD_CONST 6 ( - 1 )					  
							      								    126 INPLACE_ADD						  
							      								    128 STORE_FAST 1 ( i )					  
							      								    								  
							      								    36 130 LOAD_FAST 1 ( i )					  
							      								    132 LOAD_CONST 7 ( - 1 )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 1 ( i )					  
							      								    								  
							      								    37 138 LOAD_FAST 1 ( i )					  
							      								    140 LOAD_CONST 6 ( - 1 )					  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( i )					  
							      								    								  
							      								    38 146 LOAD_FAST 1 ( i )					  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
def isPowerOfFour ( n ) :				      Disassembly of <code object isPowerOfFour at 0x7fbac<<unk>> d Disassembly of <code object isPowerOfFour at 0x7f816a673a50,  failure : #Results: 4, 10
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_FAST 0 ( n )					  
    if ( n and ( not ( n & ( n - 1 ) ) ) ) :		      2 STORE_FAST 1 ( count )					    2 LOAD_CONST 1 ( ( 1 , - 1 ) )				  
	while ( n > 1 ) :				      								    4 COMPARE_OP 3 ( != )					  
	    n >>= 1					      3 4 LOAD_FAST 0 ( n )					    6 POP_JUMP_IF_FALSE 12					  
	    count += 1					      6 POP_JUMP_IF_FALSE 70					    								  
	if ( count % 2 == 0 ) :				      8 LOAD_FAST 0 ( n )					    21 8 LOAD_CONST 2 ( 0 )					  
	    return True					      10 LOAD_FAST 0 ( n )					    10 RETURN_VALUE						  
	else :						      12 LOAD_CONST 2 ( 1 )					    								  
	    return False				      14 BINARY_SUBTRACT					    22 >> 12 LOAD_CONST 3 ( False )				  
							      16 BINARY_AND						    14 RETURN_VALUE						  
							      18 POP_JUMP_IF_TRUE 70					    16 LOAD_CONST 0 ( None )					  
							      								    18 RETURN_VALUE						  
							      4 20 SETUP_LOOP 28 ( to 50 )				    NEW_LINE							  
							      >> 22 LOAD_FAST 0 ( n )					    								  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 COMPARE_OP 4 ( > )					    								  
							      28 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      5 30 LOAD_FAST 0 ( n )					    								  
							      32 LOAD_CONST 2 ( 1 )					    								  
							      34 INPLACE_RSHIFT						    								  
							      36 STORE_FAST 0 ( n )					    								  
							      								    								  
							      6 38 LOAD_FAST 1 ( count )				    								  
							      40 LOAD_CONST 2 ( 1 )					    								  
							      42 INPLACE_ADD						    								  
							      44 STORE_FAST 1 ( count )					    								  
							      46 JUMP_ABSOLUTE 22					    								  
							      >> 48 POP_BLOCK						    								  
							      								    								  
							      7 >> 50 LOAD_FAST 1 ( count )				    								  
							      52 LOAD_CONST 3 ( 2 )					    								  
							      54 BINARY_MODULO						    								  
							      56 LOAD_CONST 1 ( 0 )					    								  
							      58 COMPARE_OP 2 ( == )					    								  
							      60 POP_JUMP_IF_FALSE 66					    								  
							      								    								  
							      8 62 LOAD_CONST 4 ( True )				    								  
							      64 RETURN_VALUE						    								  
							      								    								  
							      10 >> 66 LOAD_CONST 5 ( False )				    								  
							      68 RETURN_VALUE						    								  
							      >> 70 LOAD_CONST 0 ( None )				    								  
							      72 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1	      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1
--							      --							    --								  --
def exponentiation ( bas , exp ) :			      Disassembly of <code object exponentiation at 0x7fbac0e8bc90, Disassembly of <code object exponentiation at 0x7f816a673a50, script_not_found : None
    t = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    204 0 LOAD_CONST 1 ( 0 )					  
    while ( exp > 0 ) :					      2 STORE_FAST 2 ( t )					    2 STORE_FAST 1 ( t )					  
	if ( exp % 2 != 0 ) :				      								    								  
	    t = ( t * bas ) % N ;			      3 4 SETUP_LOOP 60 ( to 66 )				    205 4 LOAD_FAST 1 ( t )					  
	bas = ( bas * bas ) % N ;			      >> 6 LOAD_FAST 1 ( exp )					    6 LOAD_CONST 2 ( 1 )					  
	exp = int ( exp / 2 ) ;				      8 LOAD_CONST 2 ( 0 )					    8 COMPARE_OP 2 ( == )					  
    return t % N ;					      10 COMPARE_OP 4 ( > )					    10 POP_JUMP_IF_FALSE 20					  
							      12 POP_JUMP_IF_FALSE 64					    								  
							      								    206 12 LOAD_FAST 1 ( t )					  
							      4 14 LOAD_FAST 1 ( exp )					    14 LOAD_CONST 3 ( 1 )					  
							      16 LOAD_CONST 3 ( 2 )					    16 INPLACE_ADD						  
							      18 BINARY_MODULO						    18 STORE_FAST 1 ( t )					  
							      20 LOAD_CONST 2 ( 0 )					    								  
							      22 COMPARE_OP 3 ( != )					    207 >> 20 LOAD_FAST 1 ( t )					  
							      24 POP_JUMP_IF_FALSE 38					    22 LOAD_CONST 4 ( 2 )					  
							      								    24 INPLACE_ADD						  
							      5 26 LOAD_FAST 2 ( t )					    26 STORE_FAST 1 ( t )					  
							      28 LOAD_FAST 0 ( bas )					    								  
							      30 BINARY_MULTIPLY					    208 28 LOAD_FAST 1 ( t )					  
							      32 LOAD_GLOBAL 0 ( N )					    30 LOAD_CONST 5 ( '%d' )					  
							      34 BINARY_MODULO						    32 LOAD_FAST 1 ( t )					  
							      36 STORE_FAST 2 ( t )					    34 BINARY_MODULO						  
							      								    36 INPLACE_ADD						  
							      6 >> 38 LOAD_FAST 0 ( bas )				    38 STORE_FAST 1 ( t )					  
							      40 LOAD_FAST 0 ( bas )					    								  
							      42 BINARY_MULTIPLY					    209 40 LOAD_FAST 1 ( t )					  
							      44 LOAD_GLOBAL 0 ( N )					    42 LOAD_CONST 6 ( '%d' )					  
							      46 BINARY_MODULO						    44 LOAD_FAST 1 ( t )					  
							      48 STORE_FAST 0 ( bas )					    46 BINARY_MODULO						  
							      								    48 INPLACE_ADD						  
							      7 50 LOAD_GLOBAL 1 ( int )				    50 STORE_FAST 1 ( t )					  
							      52 LOAD_FAST 1 ( exp )					    								  
							      54 LOAD_CONST 3 ( 2 )					    210 52 LOAD_FAST 1 ( t )					  
							      56 BINARY_TRUE_DIVIDE					    54 LOAD_CONST 7 ( '%d' )					  
							      58 CALL_FUNCTION 1					    56 LOAD_FAST 1 ( t )					  
							      60 STORE_FAST 1 ( exp )					    58 BINARY_MODULO						  
							      62 JUMP_ABSOLUTE 6					    60 INPLACE_ADD						  
							      >> 64 POP_BLOCK						    62 STORE_FAST 1 ( t )					  
							      								    								  
							      8 >> 66 LOAD_FAST 2 ( t )					    211 64 LOAD_FAST 1 ( t )					  
							      68 LOAD_GLOBAL 0 ( N )					    66 LOAD_CONST 8 ( '%d' )					  
							      70 BINARY_MODULO						    68 LOAD_FAST 1 ( t )					  
							      72 RETURN_VALUE NEW_LINE					    70 BINARY_MODULO						  
							      								    72 INPLACE_ADD						  
							      								    74 STORE_FAST 1 ( t )					  
							      								    76 JUMP_FORWARD 4 ( to 80 )					  
							      								    								  
							      								    212 >> 78 LOAD_FAST 1 ( t )					  
							      								    80 LOAD_CONST 9 ( '%d' )					  
							      								    82 LOAD_FAST 1 ( t )					  
							      								    84 BINARY_MODULO						  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( t )					  
							      								    								  
							      								    213 >> 90 LOAD_FAST 1 ( t )					  
							      								    92 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
def findHeight ( parent , n ) :				      Disassembly of <code object findHeight at 0x7fbac0e89d20, fil Disassembly of <code object findHeight at 0x7f816a677930, fil script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( parent )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( res )					    2 LOAD_METHOD 0 ( reset )					  
	p = i						      								    4 CALL_METHOD 0						  
	current = 1					      3 4 SETUP_LOOP 68 ( to 74 )				    6 POP_TOP							  
	while ( parent [ p ] != - 1 ) :			      6 LOAD_GLOBAL 0 ( range )					    								  
	    current += 1				      8 LOAD_FAST 1 ( n )					    27 8 LOAD_FAST 0 ( parent )					  
	    p = parent [ p ]				      10 CALL_FUNCTION 1					    10 LOAD_METHOD 1 ( getHeight )				  
	res = max ( res , current )			      12 GET_ITER						    12 CALL_METHOD 0						  
    return res						      >> 14 FOR_ITER 56 ( to 72 )				    14 POP_TOP							  
							      16 STORE_FAST 3 ( i )					    16 LOAD_CONST 0 ( None )					  
							      								    18 RETURN_VALUE						  
							      4 18 LOAD_FAST 3 ( i )					    NEW_LINE							  
							      20 STORE_FAST 4 ( p )					    								  
							      								    								  
							      5 22 LOAD_CONST 2 ( 1 )					    								  
							      24 STORE_FAST 5 ( current )				    								  
							      								    								  
							      6 26 SETUP_LOOP 32 ( to 60 )				    								  
							      >> 28 LOAD_FAST 0 ( parent )				    								  
							      30 LOAD_FAST 4 ( p )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_CONST 3 ( - 1 )					    								  
							      36 COMPARE_OP 3 ( != )					    								  
							      38 POP_JUMP_IF_FALSE 58					    								  
							      								    								  
							      7 40 LOAD_FAST 5 ( current )				    								  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 INPLACE_ADD						    								  
							      46 STORE_FAST 5 ( current )				    								  
							      								    								  
							      8 48 LOAD_FAST 0 ( parent )				    								  
							      50 LOAD_FAST 4 ( p )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 STORE_FAST 4 ( p )					    								  
							      56 JUMP_ABSOLUTE 28					    								  
							      >> 58 POP_BLOCK						    								  
							      								    								  
							      9 >> 60 LOAD_GLOBAL 1 ( max )				    								  
							      62 LOAD_FAST 2 ( res )					    								  
							      64 LOAD_FAST 5 ( current )				    								  
							      66 CALL_FUNCTION 2					    								  
							      68 STORE_FAST 2 ( res )					    								  
							      70 JUMP_ABSOLUTE 14					    								  
							      >> 72 POP_BLOCK						    								  
							      								    								  
							      10 >> 74 LOAD_FAST 2 ( res )				    								  
							      76 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION
--							      --							    --								  --
def pow ( a , b ) :					      Disassembly of <code object pow at 0x7fbac<<unk>> d540, file  Disassembly of <code object pow at 0x7f816a673a50, file "<dis error : Traceback (most recent call last):   File
    if ( b == 0 ) :					      2 0 LOAD_FAST 1 ( b )					    26 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 36, in <module>	  Fi
    answer = a						      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in pow TypeError: 'int' object
    increment = a					      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( b )					   is not subscriptable
    for i in range ( 1 , b ) :				      								    								  
	for j in range ( 1 , a ) :			      3 8 LOAD_CONST 2 ( 1 )					    27 8 LOAD_FAST 1 ( b )					  
	    answer += increment				      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
	increment = answer				      								    12 BINARY_SUBSCR						  
    return answer					      4 >> 12 LOAD_FAST 0 ( a )					    14 LOAD_FAST 1 ( b )					  
							      14 STORE_FAST 2 ( answer )				    16 LOAD_CONST 3 ( 2 )					  
							      								    18 BINARY_SUBSCR						  
							      5 16 LOAD_FAST 0 ( a )					    20 LOAD_FAST 1 ( b )					  
							      18 STORE_FAST 3 ( increment )				    22 LOAD_CONST 4 ( 3 )					  
							      								    24 BINARY_SUBSCR						  
							      6 20 SETUP_LOOP 50 ( to 72 )				    26 LOAD_FAST 1 ( b )					  
							      22 LOAD_GLOBAL 0 ( range )				    28 LOAD_CONST 5 ( '<%s>' )					  
							      24 LOAD_CONST 2 ( 1 )					    30 LOAD_FAST 1 ( b )					  
							      26 LOAD_FAST 1 ( b )					    32 BINARY_MODULO						  
							      28 CALL_FUNCTION 2					    34 BINARY_ADD						  
							      30 GET_ITER						    36 LOAD_FAST 1 ( b )					  
							      >> 32 FOR_ITER 36 ( to 70 )				    38 LOAD_CONST 6 ( '<%s>' )					  
							      34 STORE_FAST 4 ( i )					    40 LOAD_FAST 1 ( b )					  
							      								    42 BINARY_MODULO						  
							      7 36 SETUP_LOOP 26 ( to 64 )				    44 BINARY_ADD						  
							      38 LOAD_GLOBAL 0 ( range )				    46 LOAD_FAST 1 ( b )					  
							      40 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 7 ( '<%s>' )					  
							      42 LOAD_FAST 0 ( a )					    50 LOAD_FAST 1 ( b )					  
							      44 CALL_FUNCTION 2					    52 BINARY_MODULO						  
							      46 GET_ITER						    54 BINARY_ADD						  
							      >> 48 FOR_ITER 12 ( to 62 )				    56 LOAD_FAST 1 ( b )					  
							      50 STORE_FAST 5 ( j )					    58 LOAD_CONST 8 ( '<%s>' )					  
							      								    60 LOAD_FAST 1 ( b )					  
							      8 52 LOAD_FAST 2 ( answer )				    62 BINARY_MODULO						  
							      54 LOAD_FAST 3 ( increment )				    64 BINARY_ADD						  
							      56 INPLACE_ADD						    66 LOAD_FAST 1 ( b )					  
							      58 STORE_FAST 2 ( answer )				    68 LOAD_CONST 9 ( '<%s>' )					  
							      60 JUMP_ABSOLUTE 48					    70 LOAD_FAST 1 ( b )					  
							      >> 62 POP_BLOCK						    72 BINARY_MODULO						  
							      								    74 BINARY_ADD						  
							      9 >> 64 LOAD_FAST 2 ( answer )				    76 LOAD_FAST 1 ( b )					  
							      66 STORE_FAST 3 ( increment )				    78 LOAD_CONST 10 ( '<%s>' )					  
							      68 JUMP_ABSOLUTE 32					    80 LOAD_FAST 1 ( b )					  
							      >> 70 POP_BLOCK						    82 BINARY_MODULO						  
							      								    84 BINARY_ADD						  
							      10 >> 72 LOAD_FAST 2 ( answer )				    86 LOAD_FAST 1 ( b )					  
							      74 RETURN_VALUE NEW_LINE					    88 LOAD_CONST 11 ( '<%s>' )					  
							      								    90 LOAD_FAST 1 ( b )					  
							      								    92 BINARY_MODULO						  
							      								    94 BINARY_ADD						  
							      								    96 LOAD_FAST 1 ( b )					  
							      								    98 LOAD_CONST 12 ( '<%s>' )					  
							      								    100 LOAD_FAST 1 ( b )					  
							      								    102 BINARY_MODULO						  
							      								    104 BINARY_ADD						  
							      								    106 BINARY_ADD						  
							      								    108 LOAD_FAST 1 ( b )					  
							      								    110 LOAD_CONST 13 ( '<%s>' )				  
							      								    112 LOAD_FAST 1 ( b )					  
							      								    114 BUILD_TUPLE 4						  
							      								    116 BINARY_MODULO						  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_FAST 1 ( b )					  
							      								    122 BINARY_ADD						  
							      								    124 LOAD_FAST 1 ( b )					  
							      								    126 BINARY_ADD						  
							      								    128 BINARY_ADD						  
							      								    130 LOAD_FAST 1 ( b )					  
							      								    132 BINARY_ADD						  
							      								    134 BUILD_TUPLE 4						  
							      								    136 BINARY_MODULO						  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
def decToBin ( n ) :					      Disassembly of <code object decToBin at 0x7fbac<<unk>> de40,  Disassembly of <code object decToBin at 0x7f816a673a50, file  error : /bin/bash: line 1: 25489 Segmentation faul
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return "0" ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    bin = "" ;						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    while ( n > 0 ) :					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/DECIMAL_BINARY_
	if ( n & 1 == 0 ) :				      								    								  CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS.dis
	    bin = '0' + bin ;				      3 8 LOAD_CONST 2 ( '0' )					    27 8 LOAD_FAST 0 ( n )					  
	else :						      10 RETURN_VALUE						    10 LOAD_CONST 2 ( '0' )					  
	    bin = '1' + bin ;				      								    12 COMPARE_OP 2 ( == )					  
	n = n >> 1 ;					      4 >> 12 LOAD_CONST 3 ( '' )				    14 POP_JUMP_IF_FALSE 28					  
    return bin ;					      14 STORE_FAST 1 ( bin )					    								  
							      								    28 16 LOAD_CONST 3 ( '0' )					  
							      5 16 SETUP_LOOP 50 ( to 68 )				    18 RETURN_VALUE						  
							      >> 18 LOAD_FAST 0 ( n )					    								  
							      20 LOAD_CONST 1 ( 0 )					    29 >> 20 LOAD_CONST 4 ( '0' )				  
							      22 COMPARE_OP 4 ( > )					    22 RETURN_VALUE						  
							      24 POP_JUMP_IF_FALSE 66					    24 LOAD_CONST 0 ( None )					  
							      								    26 RETURN_VALUE						  
							      6 26 LOAD_FAST 0 ( n )					    NEW_LINE							  
							      28 LOAD_CONST 4 ( 1 )					    								  
							      30 BINARY_AND						    								  
							      32 LOAD_CONST 1 ( 0 )					    								  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      7 38 LOAD_CONST 2 ( '0' )					    								  
							      40 LOAD_FAST 1 ( bin )					    								  
							      42 BINARY_ADD						    								  
							      44 STORE_FAST 1 ( bin )					    								  
							      46 JUMP_FORWARD 8 ( to 56 )				    								  
							      								    								  
							      9 >> 48 LOAD_CONST 5 ( '1' )				    								  
							      50 LOAD_FAST 1 ( bin )					    								  
							      52 BINARY_ADD						    								  
							      54 STORE_FAST 1 ( bin )					    								  
							      								    								  
							      10 >> 56 LOAD_FAST 0 ( n )				    								  
							      58 LOAD_CONST 4 ( 1 )					    								  
							      60 BINARY_RSHIFT						    								  
							      62 STORE_FAST 0 ( n )					    								  
							      64 JUMP_ABSOLUTE 18					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      11 >> 68 LOAD_FAST 1 ( bin )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_ELEMENT_STABLE_SORT				      POSITION_ELEMENT_STABLE_SORT				    POSITION_ELEMENT_STABLE_SORT				  POSITION_ELEMENT_STABLE_SORT
--							      --							    --								  --
def getIndexInSortedArray ( arr , n , idx ) :		      Disassembly of <code object getIndexInSortedArray at 0x7fbac0 Disassembly of <code object getIndexInSortedArray at 0x7f816a error : Traceback (most recent call last):   File
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    31 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 3 ( result )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( arr [ i ] < arr [ idx ] ) :		      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in getIndexInSortedArray TypeE
	    result += 1					      3 4 SETUP_LOOP 72 ( to 78 )				    6 STORE_FAST 2 ( arr )					  rror: 'int' object is not subscriptable
	if ( arr [ i ] == arr [ idx ] and i < idx ) :	      6 LOAD_GLOBAL 0 ( range )					    								  
	    result += 1					      8 LOAD_FAST 1 ( n )					    32 8 LOAD_FAST 0 ( arr )					  
    return result ;					      10 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( 1 )					  
							      12 GET_ITER						    12 BINARY_SUBSCR						  
							      >> 14 FOR_ITER 60 ( to 76 )				    14 STORE_FAST 3 ( arr )					  
							      16 STORE_FAST 4 ( i )					    								  
							      								    33 16 LOAD_FAST 2 ( arr )					  
							      4 18 LOAD_FAST 0 ( arr )					    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_FAST 4 ( i )					    20 BINARY_SUBSCR						  
							      22 BINARY_SUBSCR						    22 STORE_FAST 4 ( arr )					  
							      24 LOAD_FAST 0 ( arr )					    								  
							      26 LOAD_FAST 2 ( idx )					    34 24 LOAD_FAST 3 ( arr )					  
							      28 BINARY_SUBSCR						    26 LOAD_CONST 4 ( 1 )					  
							      30 COMPARE_OP 0 ( < )					    28 BINARY_SUBSCR						  
							      32 POP_JUMP_IF_FALSE 42					    30 LOAD_CONST 5 ( 1 )					  
							      								    32 BINARY_SUBSCR						  
							      5 34 LOAD_FAST 3 ( result )				    34 STORE_FAST 5 ( arr )					  
							      36 LOAD_CONST 2 ( 1 )					    								  
							      38 INPLACE_ADD						    35 36 LOAD_FAST 5 ( arr )					  
							      40 STORE_FAST 3 ( result )				    38 LOAD_CONST 6 ( 2 )					  
							      								    40 BINARY_SUBSCR						  
							      6 >> 42 LOAD_FAST 0 ( arr )				    42 STORE_FAST 6 ( arr )					  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    36 44 LOAD_FAST 4 ( arr )					  
							      48 LOAD_FAST 0 ( arr )					    46 LOAD_CONST 7 ( 1 )					  
							      50 LOAD_FAST 2 ( idx )					    48 BINARY_SUBSCR						  
							      52 BINARY_SUBSCR						    50 STORE_FAST 7 ( arr )					  
							      54 COMPARE_OP 2 ( == )					    								  
							      56 POP_JUMP_IF_FALSE 14					    37 52 LOAD_FAST 5 ( arr )					  
							      58 LOAD_FAST 4 ( i )					    54 LOAD_FAST 6 ( arr )					  
							      60 LOAD_FAST 2 ( idx )					    56 LOAD_CONST 8 ( 2 )					  
							      62 COMPARE_OP 0 ( < )					    58 BINARY_SUBSCR						  
							      64 POP_JUMP_IF_FALSE 14					    60 LOAD_FAST 7 ( arr )					  
							      								    62 LOAD_CONST 9 ( 2 )					  
							      7 66 LOAD_FAST 3 ( result )				    64 BINARY_SUBSCR						  
							      68 LOAD_CONST 2 ( 1 )					    66 LOAD_FAST 6 ( arr )					  
							      70 INPLACE_ADD						    68 LOAD_CONST 10 ( 3 )					  
							      72 STORE_FAST 3 ( result )				    70 BINARY_SUBSCR						  
							      74 JUMP_ABSOLUTE 14					    72 LOAD_CONST 11 ( 1 )					  
							      >> 76 POP_BLOCK						    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 7 ( arr )					  
							      8 >> 78 LOAD_FAST 3 ( result )				    78 LOAD_CONST 12 ( 4 )					  
							      80 RETURN_VALUE NEW_LINE					    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 7 ( arr )					  
							      								    84 LOAD_CONST 13 ( 1 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 7 ( arr )					  
							      								    90 LOAD_CONST 14 ( 2 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 15 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 7 ( arr )					  
							      								    100 LOAD_CONST 16 ( 3 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_FAST 7 ( arr )					  
							      								    106 LOAD_CONST 17 ( 2 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 18 ( 4 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 7 ( arr )					  
							      								    116 LOAD_CONST 19 ( 1 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 20 ( 3 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 BUILD_TUPLE 4						  
							      								    126 LOAD_FAST 7 ( arr )					  
							      								    128 LOAD_CONST 21 ( 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_FAST 7 ( arr )					  
							      								    134 LOAD_CONST 22 ( 2 )					  
							      								    136 STORE_SUBSCR						  
							      								    								  
							      								    37 138 LOAD_FAST 6 ( arr )					  
							      								    140 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		      CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		    CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		  CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD
--							      --							    --								  --
def isPowerOfK ( n , k ) :				      Disassembly of <code object isPowerOfK at 0x7fbac0e8bc90, fil Disassembly of <code object isPowerOfK at 0x7f816a673a50, fil error : Traceback (most recent call last):   File
    oneSeen = False					      2 0 LOAD_CONST 1 ( False )				    20 0 LOAD_GLOBAL 0 ( oneSeen )				  "XLM/dis_script.py", line 60, in <module>	exec
    while ( n > 0 ) :					      2 STORE_FAST 2 ( oneSeen )				    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 38, in <module>	  Fi
	digit = n % k					      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in isPowerOfK NameError: name
	if ( digit > 1 ) :				      3 4 SETUP_LOOP 60 ( to 66 )				    6 STORE_FAST 1 ( k )					  'oneSeen' is not defined
	    return False				      >> 6 LOAD_FAST 0 ( n )					    								  
	if ( digit == 1 ) :				      8 LOAD_CONST 2 ( 0 )					    21 8 LOAD_FAST 1 ( k )					  
	    if ( oneSeen ) :				      10 COMPARE_OP 4 ( > )					    10 LOAD_CONST 2 ( 1 )					  
		return False				      12 POP_JUMP_IF_FALSE 64					    12 BINARY_SUBSCR						  
	    oneSeen = True				      								    14 LOAD_FAST 1 ( k )					  
	n //= k						      4 14 LOAD_FAST 0 ( n )					    16 LOAD_CONST 3 ( 2 )					  
    return True						      16 LOAD_FAST 1 ( k )					    18 BINARY_SUBSCR						  
							      18 BINARY_MODULO						    20 LOAD_CONST 4 ( 3 )					  
							      20 STORE_FAST 3 ( digit )					    22 BINARY_SUBSCR						  
							      								    24 LOAD_CONST 5 ( 1 )					  
							      5 22 LOAD_FAST 3 ( digit )				    26 BINARY_SUBSCR						  
							      24 LOAD_CONST 3 ( 1 )					    28 LOAD_CONST 6 ( 2 )					  
							      26 COMPARE_OP 4 ( > )					    30 BINARY_SUBSCR						  
							      28 POP_JUMP_IF_FALSE 34					    32 LOAD_CONST 7 ( 3 )					  
							      								    34 LOAD_CONST 8 ( 2 )					  
							      6 30 LOAD_CONST 1 ( False )				    36 BINARY_SUBSCR						  
							      32 RETURN_VALUE						    38 LOAD_CONST 9 ( 3 )					  
							      								    40 LOAD_CONST 10 ( 2 )					  
							      7 >> 34 LOAD_FAST 3 ( digit )				    42 BINARY_SUBSCR						  
							      36 LOAD_CONST 3 ( 1 )					    44 LOAD_CONST 11 ( 3 )					  
							      38 COMPARE_OP 2 ( == )					    46 LOAD_CONST 12 ( 4 )					  
							      40 POP_JUMP_IF_FALSE 54					    48 BINARY_SUBSCR						  
							      								    50 LOAD_CONST 5 ( 1 )					  
							      8 42 LOAD_FAST 2 ( oneSeen )				    52 BINARY_SUBSCR						  
							      44 POP_JUMP_IF_FALSE 50					    54 LOAD_CONST 12 ( 4 )					  
							      								    56 LOAD_CONST 13 ( 3 )					  
							      9 46 LOAD_CONST 1 ( False )				    58 LOAD_CONST 14 ( 4 )					  
							      48 RETURN_VALUE						    60 LOAD_CONST 15 ( 3 )					  
							      								    62 LOAD_CONST 16 ( 4 )					  
							      10 >> 50 LOAD_CONST 4 ( True )				    64 LOAD_CONST 17 ( 3 )					  
							      52 STORE_FAST 2 ( oneSeen )				    66 LOAD_CONST 16 ( 4 )					  
							      								    68 LOAD_CONST 17 ( 3 )					  
							      11 >> 54 LOAD_FAST 0 ( n )				    70 LOAD_CONST 18 ( 4 )					  
							      56 LOAD_FAST 1 ( k )					    72 LOAD_CONST 19 ( 4 )					  
							      58 INPLACE_FLOOR_DIVIDE					    74 LOAD_CONST 20 ( 4 )					  
							      60 STORE_FAST 0 ( n )					    76 LOAD_CONST 19 ( 4 )					  
							      62 JUMP_ABSOLUTE 6					    78 LOAD_CONST 20 ( 4 )					  
							      >> 64 POP_BLOCK						    80 LOAD_CONST 21 ( 3 )					  
							      								    82 LOAD_CONST 22 ( 4 )					  
							      12 >> 66 LOAD_CONST 4 ( True )				    84 LOAD_CONST 20 ( 4 )					  
							      68 RETURN_VALUE NEW_LINE					    86 LOAD_CONST 21 ( 3 )					  
							      								    88 LOAD_CONST 22 ( 4 )					  
							      								    90 LOAD_CONST 23 ( 4 )					  
							      								    92 LOAD_CONST 22 ( 4 )					  
							      								    94 LOAD_CONST 23 ( 3 )					  
							      								    96 LOAD_CONST 22 ( 4 )					  
							      								    98 LOAD_CONST 23 ( 4 )					  
							      								    100 LOAD_CONST 23 ( 4 )					  
							      								    102 LOAD_CONST 22 ( 4 )					  
							      								    104 LOAD_CONST 23 ( 4 )					  
							      								    106 LOAD_CONST 24 ( 4 )					  
							      								    108 LOAD_CONST 23 ( 3 )					  
							      								    110 LOAD_CONST 23 ( 4 )					  
							      								    112 LOAD_CONST 24 ( 4 )					  
							      								    114 LOAD_CONST 25 ( 4 )					  
							      								    116 LOAD_CONST 26 ( 4 )					  
							      								    118 LOAD_CONST 25 ( 4 )					  
							      								    120 LOAD_CONST 26 ( 4 )					  
							      								    122 LOAD_CONST 26 ( 4 )					  
							      								    124 LOAD_CONST 27 ( 4 )					  
							      								    126 LOAD_CONST 26 ( 4 )					  
							      								    128 LOAD_CONST 27 ( 4 )					  
							      								    130 LOAD_CONST 28 ( 4 )					  
							      								    132 LOAD_CONST 29 ( 3 )					  
							      								    134 LOAD_CONST 30 ( 4 )					  
							      								    136 LOAD_CONST 28 ( 4 )					  
							      								    138 LOAD_CONST 29 ( 4 )					  
							      								    140 LOAD_CONST 30 ( 4 )					  
							      								    142 LOAD_CONST 30 ( 4 )					  
							      								    144 LOAD_CONST 29 ( 4 )					  
							      								    146 LOAD_CONST 30 ( 4 )					  
							      								    148 LOAD_CONST 29 ( 5 )					  
							      								    150 LOAD_CONST 30 ( 4 )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      Disassembly of <code object middleOfThree at 0x7fbac0e89d20,  Disassembly of <code object middleOfThree at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    if a > b :						      2 0 LOAD_FAST 0 ( a )					    65 0 LOAD_FAST 1 ( b )					  "XLM/dis_script.py", line 59, in <module>	for
	if ( b > c ) :					      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( '' )					  item in run_dis_script():   File "XLM/dis_script.p
	    return b					      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
	elif ( a > c ) :				      6 POP_JUMP_IF_FALSE 38					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	    return c					      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	else :						      3 8 LOAD_FAST 1 ( b )					    66 8 LOAD_FAST 1 ( b )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	    return a					      10 LOAD_FAST 2 ( c )					    10 LOAD_CONST 2 ( '' )					  n parse     code.append(arg) ValueError: byte must
    else :						      12 COMPARE_OP 4 ( > )					    12 COMPARE_OP 2 ( == )					   be in range(0, 256)
	if ( a > c ) :					      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 28					  
	    return a					      								    								  
	elif ( b > c ) :				      4 16 LOAD_FAST 1 ( b )					    67 16 LOAD_FAST 1 ( b )					  
	    return c					      18 RETURN_VALUE						    18 LOAD_CONST 3 ( '' )					  
	else :						      								    20 COMPARE_OP 2 ( == )					  
	    return b					      5 >> 20 LOAD_FAST 0 ( a )					    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_FAST 2 ( c )					    								  
							      24 COMPARE_OP 4 ( > )					    68 >> 24 LOAD_FAST 1 ( b )					  
							      26 POP_JUMP_IF_FALSE 32					    26 LOAD_CONST 4 ( '' )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      6 28 LOAD_FAST 2 ( c )					    30 POP_JUMP_IF_FALSE 28					  
							      30 RETURN_VALUE						    								  
							      								    69 32 LOAD_FAST 1 ( b )					  
							      8 >> 32 LOAD_FAST 0 ( a )					    34 LOAD_CONST 5 ( '' )					  
							      34 RETURN_VALUE						    36 COMPARE_OP 2 ( == )					  
							      36 JUMP_FORWARD 28 ( to 66 )				    38 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      10 >> 38 LOAD_FAST 0 ( a )				    70 40 LOAD_FAST 1 ( b )					  
							      40 LOAD_FAST 2 ( c )					    42 LOAD_CONST 6 ( '' )					  
							      42 COMPARE_OP 4 ( > )					    44 COMPARE_OP 2 ( == )					  
							      44 POP_JUMP_IF_FALSE 50					    46 POP_JUMP_IF_FALSE 50					  
							      								    								  
							      11 46 LOAD_FAST 0 ( a )					    71 48 LOAD_FAST 1 ( b )					  
							      48 RETURN_VALUE						    50 LOAD_CONST 7 ( '' )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      12 >> 50 LOAD_FAST 1 ( b )				    54 POP_JUMP_IF_FALSE 50					  
							      52 LOAD_FAST 2 ( c )					    								  
							      54 COMPARE_OP 4 ( > )					    72 56 LOAD_FAST 1 ( b )					  
							      56 POP_JUMP_IF_FALSE 62					    58 LOAD_CONST 8 ( '' )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      13 58 LOAD_FAST 2 ( c )					    62 POP_JUMP_IF_FALSE 50					  
							      60 RETURN_VALUE						    								  
							      								    73 64 LOAD_FAST 1 ( b )					  
							      15 >> 62 LOAD_FAST 1 ( b )				    66 LOAD_CONST 9 ( '' )					  
							      64 RETURN_VALUE						    68 COMPARE_OP 2 ( == )					  
							      >> 66 LOAD_CONST 0 ( None )				    70 POP_JUMP_IF_FALSE 50					  
							      68 RETURN_VALUE NEW_LINE					    								  
							      								    74 72 LOAD_FAST 1 ( b )					  
							      								    74 LOAD_CONST 10 ( '' )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    75 80 LOAD_FAST 1 ( b )					  
							      								    82 LOAD_CONST 11 ( '' )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    76 88 LOAD_FAST 1 ( b )					  
							      								    90 LOAD_CONST 12 ( '' )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 98					  
							      								    								  
							      								    77 96 LOAD_FAST 1 ( b )					  
							      								    98 LOAD_CONST 13 ( '' )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    78 104 LOAD_FAST 1 ( b )					  
							      								    106 LOAD_CONST 14 ( '' )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    79 112 LOAD_FAST 1 ( b )					  
							      								    114 114 LOAD_CONST 15 ( '' )				  
							      								    116 JUMP_FORWARD 2 ( to 110 )				  
							      								    >> 112 LOAD_CONST 16 ( '' )					  
							      								    >> 114 STORE_FAST 1 ( b )					  
							      								    								  
							      								    80 >> 116 LOAD_FAST 1 ( b )					  
							      								    118 LOAD_CONST 15 ( '' )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    81 124 LOAD_FAST 1 ( b )					  
							      								    126 LOAD_CONST 15 ( '' )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    82 132 LOAD_FAST 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		      FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		    FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		  FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY
--							      --							    --								  --
def findSum ( arr , n ) :				      Disassembly of <code object findSum at 0x7fbac<<unk>> de40, f Disassembly of <code object findSum at 0x7f816a677930, file " error : /bin/bash: line 1: 25527 Segmentation faul
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    26 0 LOAD_GLOBAL 0 ( set )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    sum = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( n ) :				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 1 ( n )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	if arr [ i ] not in s :				      								    								  eval_scripts/python_sa-dis_sa.test/FIND_SUM_NON_RE
	    s.add ( arr [ i ] )				      3 6 LOAD_CONST 1 ( 0 )					    27 6 LOAD_FAST 1 ( n )					  PEATING_DISTINCT_ELEMENTS_ARRAY.dis
    for i in s :					      8 STORE_FAST 3 ( sum )					    8 LOAD_FAST 0 ( arr )					  
	sum = sum + i					      								    10 COMPARE_OP 6 ( in )					  
    return sum						      4 10 SETUP_LOOP 42 ( to 54 )				    12 POP_JUMP_IF_FALSE 20					  
							      12 LOAD_GLOBAL 1 ( range )				    								  
							      14 LOAD_FAST 1 ( n )					    28 14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 1					    16 LOAD_FAST 0 ( arr )					  
							      18 GET_ITER						    18 COMPARE_OP 6 ( in )					  
							      >> 20 FOR_ITER 30 ( to 52 )				    20 POP_JUMP_IF_FALSE 26					  
							      22 STORE_FAST 4 ( i )					    								  
							      								    29 22 LOAD_FAST 1 ( n )					  
							      5 24 LOAD_FAST 0 ( arr )					    24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 4 ( i )					    26 COMPARE_OP 6 ( in )					  
							      28 BINARY_SUBSCR						    28 POP_JUMP_IF_FALSE 28					  
							      30 LOAD_FAST 2 ( s )					    								  
							      32 COMPARE_OP 7 ( not in )				    30 30 LOAD_FAST 1 ( n )					  
							      34 POP_JUMP_IF_FALSE 20					    32 LOAD_FAST 0 ( arr )					  
							      								    34 COMPARE_OP 6 ( in )					  
							      6 36 LOAD_FAST 2 ( s )					    36 POP_JUMP_IF_FALSE 48					  
							      38 LOAD_METHOD 2 ( add )					    								  
							      40 LOAD_FAST 0 ( arr )					    31 38 LOAD_FAST 1 ( n )					  
							      42 LOAD_FAST 4 ( i )					    40 LOAD_FAST 0 ( arr )					  
							      44 BINARY_SUBSCR						    42 COMPARE_OP 6 ( in )					  
							      46 CALL_METHOD 1						    44 POP_JUMP_IF_FALSE 48					  
							      48 POP_TOP						    								  
							      50 JUMP_ABSOLUTE 20					    32 46 LOAD_FAST 1 ( n )					  
							      >> 52 POP_BLOCK						    48 LOAD_FAST 0 ( arr )					  
							      								    50 COMPARE_OP 6 ( in )					  
							      7 >> 54 SETUP_LOOP 20 ( to 76 )				    52 POP_JUMP_IF_FALSE 48					  
							      56 LOAD_FAST 2 ( s )					    								  
							      58 GET_ITER						    33 54 LOAD_FAST 1 ( n )					  
							      >> 60 FOR_ITER 12 ( to 74 )				    56 LOAD_FAST 0 ( arr )					  
							      62 STORE_FAST 4 ( i )					    58 COMPARE_OP 6 ( in )					  
							      								    60 POP_JUMP_IF_FALSE 48					  
							      8 64 LOAD_FAST 3 ( sum )					    								  
							      66 LOAD_FAST 4 ( i )					    34 62 LOAD_FAST 1 ( n )					  
							      68 BINARY_ADD						    64 LOAD_FAST 0 ( arr )					  
							      70 STORE_FAST 3 ( sum )					    66 COMPARE_OP 6 ( in )					  
							      72 JUMP_ABSOLUTE 60					    68 POP_JUMP_IF_FALSE 48					  
							      >> 74 POP_BLOCK						    								  
							      								    35 70 LOAD_FAST 1 ( n )					  
							      9 >> 76 LOAD_FAST 3 ( sum )				    72 LOAD_FAST 0 ( arr )					  
							      78 RETURN_VALUE NEW_LINE					    74 COMPARE_OP 6 ( in )					  
							      								    76 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    36 78 LOAD_FAST 1 ( n )					  
							      								    80 LOAD_FAST 0 ( arr )					  
							      								    82 COMPARE_OP 6 ( in )					  
							      								    84 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    37 86 LOAD_FAST 1 ( n )					  
							      								    88 LOAD_FAST 0 ( arr )					  
							      								    90 LOAD_FAST 0 ( arr )					  
							      								    92 LOAD_FAST 0 ( arr )					  
							      								    94 LOAD_FAST 1 ( n )					  
							      								    96 STORE_SUBSCR						  
							      								    								  
							      								    38 >> 98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_FAST 0 ( arr )					  
							      								    102 LOAD_FAST 0 ( arr )					  
							      								    104 LOAD_FAST 1 ( n )					  
							      								    106 STORE_SUBSCR						  
							      								    								  
							      								    39 >> 108 LOAD_FAST 1 ( n )					  
							      								    110 LOAD_FAST 0 ( arr )					  
							      								    112 LOAD_FAST 1 ( n )					  
							      								    114 STORE_SUBSCR						  
							      								    								  
							      								    40 >> 116 LOAD_FAST 1 ( n )					  
							      								    118 LOAD_FAST 0 ( arr )					  
							      								    120 LOAD_FAST 0 ( arr )					  
							      								    122 STORE_SUBSCR						  
							      								    124 LOAD_CONST 0 ( None )					  
							      								    126 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
def nearestSmallerEqFib ( n ) :				      Disassembly of <code object nearestSmallerEqFib at 0x7fbac<<u Disassembly of <code object nearestSmallEqFib at 0x7f816a6e4b error : Traceback (most recent call last):   File
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
	return n					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    f1 , f2 , f3 = 0 , 1 , 1				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
    while ( f3 <= n ) :					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	f1 = f2 ;					      8 LOAD_FAST 0 ( n )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	f2 = f3 ;					      10 LOAD_CONST 2 ( 1 )					    27 8 LOAD_FAST 0 ( n )					  pack non-iterable NoneType object
	f3 = f1 + f2 ;					      12 COMPARE_OP 2 ( == )					    10 LOAD_CONST 2 ( 2 )					  
    return f2 ;						      14 POP_JUMP_IF_FALSE 20					    12 COMPARE_OP 2 ( == )					  
							      								    14 POP_JUMP_IF_FALSE 28					  
							      3 >> 16 LOAD_FAST 0 ( n )					    								  
							      18 RETURN_VALUE						    28 >> 16 LOAD_CONST 3 ( 0 )					  
							      								    18 STORE_FAST 1 ( n )					  
							      4 >> 20 LOAD_CONST 3 ( ( 0 , 1 , 1 ) )			    								  
							      22 UNPACK_SEQUENCE 3					    29 20 LOAD_FAST 1 ( n )					  
							      24 STORE_FAST 1 ( f1 )					    22 LOAD_CONST 1 ( 1 )					  
							      26 STORE_FAST 2 ( f2 )					    24 COMPARE_OP 2 ( == )					  
							      28 STORE_FAST 3 ( f3 )					    26 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 30 SETUP_LOOP 28 ( to 60 )				    30 28 LOAD_CONST 3 ( 0 )					  
							      >> 32 LOAD_FAST 3 ( f3 )					    30 STORE_FAST 1 ( n )					  
							      34 LOAD_FAST 0 ( n )					    								  
							      36 COMPARE_OP 1 ( <= )					    31 32 LOAD_FAST 1 ( n )					  
							      38 POP_JUMP_IF_FALSE 58					    34 LOAD_CONST 4 ( 2 )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      6 40 LOAD_FAST 2 ( f2 )					    38 POP_JUMP_IF_FALSE 44					  
							      42 STORE_FAST 1 ( f1 )					    								  
							      								    32 40 LOAD_CONST 3 ( 0 )					  
							      7 44 LOAD_FAST 3 ( f3 )					    42 STORE_FAST 1 ( n )					  
							      46 STORE_FAST 2 ( f2 )					    								  
							      								    33 44 LOAD_FAST 1 ( n )					  
							      8 48 LOAD_FAST 1 ( f1 )					    46 LOAD_CONST 5 ( 1 )					  
							      50 LOAD_FAST 2 ( f2 )					    48 COMPARE_OP 2 ( == )					  
							      52 BINARY_ADD						    50 POP_JUMP_IF_FALSE 44					  
							      54 STORE_FAST 3 ( f3 )					    								  
							      56 JUMP_ABSOLUTE 32					    34 52 LOAD_CONST 3 ( 0 )					  
							      >> 58 POP_BLOCK						    54 STORE_FAST 1 ( n )					  
							      								    								  
							      9 >> 60 LOAD_FAST 2 ( f2 )				    35 56 LOAD_FAST 1 ( n )					  
							      62 RETURN_VALUE NEW_LINE					    58 LOAD_CONST 6 ( 2 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    36 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 7 ( 2 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    37 72 LOAD_CONST 3 ( 0 )					  
							      								    74 STORE_FAST 1 ( n )					  
							      								    76 JUMP_FORWARD 2 ( to 80 )					  
							      								    								  
							      								    39 >> 78 LOAD_CONST 3 ( 0 )					  
							      								    80 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 >> 82 LOAD_FAST 1 ( n )					  
							      								    84 LOAD_CONST 8 ( 2 )					  
							      								    86 COMPARE_OP 2 ( == )					  
							      								    88 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    41 90 LOAD_CONST 3 ( 0 )					  
							      								    92 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 >> 94 LOAD_FAST 1 ( n )					  
							      								    96 LOAD_CONST 9 ( 2 )					  
							      								    98 COMPARE_OP 2 ( == )					  
							      								    100 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    43 102 LOAD_CONST 3 ( 0 )					  
							      								    104 STORE_FAST 1 ( n )					  
							      								    								  
							      								    44 106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_CONST 10 ( 2 )					  
							      								    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    45 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 11 ( 1 )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    46 122 LOAD_CONST 3 ( 0 )					  
							      								    124 STORE_FAST 1 ( n )					  
							      								    								  
							      								    47 >> 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_CONST 12 ( 2 )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    48 134 LOAD_FAST 1 ( n )					  
							      								    136 RETURN_VALUE						  
							      								    								  
							      								    50								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_FUNCTIONS					      RECURSIVE_FUNCTIONS					    RECURSIVE_FUNCTIONS						  RECURSIVE_FUNCTIONS
--							      --							    --								  --
def tower ( n , sourcePole , destinationPole , auxiliaryPole  Disassembly of <code object tower at 0x7fbac0e89d20, file "<d Disassembly of <code object tower at 0x7f816a6e4b70, file "<d script_not_found : None
    if ( 0 == n ) :					      2 0 LOAD_CONST 1 ( 0 )					    184 0 LOAD_FAST 1 ( sourcePole )				  
	return						      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 1 ( 0 )					  
    tower ( n - 1 , sourcePole , auxiliaryPole , destinationP 4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
    print ( "Move the disk" , sourcePole , "from" , sourcePol 6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 2 ( n )					  
    tower ( n - 1 , auxiliaryPole , destinationPole , sourceP 								    								  
							      3 8 LOAD_CONST 0 ( None )					    185 8 LOAD_FAST 2 ( n )					  
							      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
							      								    12 BINARY_SUBSCR						  
							      4 >> 12 LOAD_GLOBAL 0 ( tower )				    14 LOAD_CONST 3 ( 'Move the disk of the disk of the disk of t 
							      14 LOAD_FAST 0 ( n )					    10 STORE_FAST 3 ( disk )					  
							      16 LOAD_CONST 2 ( 1 )					    								  
							      18 BINARY_SUBTRACT					    186 12 LOAD_FAST 3 ( disk )					  
							      20 LOAD_FAST 1 ( sourcePole )				    14 LOAD_CONST 4 ( 'disk file to disk file to disk.' )	  
							      22 LOAD_FAST 3 ( auxiliaryPole )				    16 COMPARE_OP 6 ( in )					  
							      24 LOAD_FAST 2 ( destinationPole )			    18 POP_JUMP_IF_FALSE 30					  
							      26 CALL_FUNCTION 4					    								  
							      28 POP_TOP						    187 20 LOAD_FAST 3 ( disk )					  
							      								    22 LOAD_CONST 5 ( 'disk' )					  
							      5 30 LOAD_GLOBAL 1 ( print )				    24 BINARY_SUBSCR						  
							      32 LOAD_CONST 3 ( 'Move the disk' )			    26 STORE_FAST 4 ( disk )					  
							      34 LOAD_FAST 1 ( sourcePole )				    								  
							      36 LOAD_CONST 4 ( 'from' )				    188 >> 28 LOAD_FAST 4 ( disk )				  
							      38 LOAD_FAST 1 ( sourcePole )				    30 LOAD_CONST 6 ( 'disk' )					  
							      40 LOAD_CONST 5 ( 'to' )					    32 BINARY_SUBSCR						  
							      42 LOAD_FAST 2 ( destinationPole )			    34 STORE_FAST 5 ( disk )					  
							      44 CALL_FUNCTION 6					    								  
							      46 POP_TOP						    189 36 LOAD_FAST 5 ( disk )					  
							      								    38 LOAD_CONST 7 ( 'disk' )					  
							      6 48 LOAD_GLOBAL 0 ( tower )				    40 BINARY_SUBSCR						  
							      50 LOAD_FAST 0 ( n )					    42 STORE_FAST 6 ( disk )					  
							      52 LOAD_CONST 2 ( 1 )					    								  
							      54 BINARY_SUBTRACT					    190 44 LOAD_FAST 5 ( disk )					  
							      56 LOAD_FAST 3 ( auxiliaryPole )				    46 LOAD_CONST 8 ( 'disk' )					  
							      58 LOAD_FAST 2 ( destinationPole )			    48 BINARY_SUBSCR						  
							      60 LOAD_FAST 1 ( sourcePole )				    50 STORE_FAST 7 ( disk )					  
							      62 CALL_FUNCTION 4					    								  
							      64 POP_TOP						    191 52 LOAD_FAST 7 ( disk )					  
							      66 LOAD_CONST 0 ( None )					    54 LOAD_CONST 9 ( 'disk' )					  
							      68 RETURN_VALUE NEW_LINE					    56 BINARY_SUBSCR						  
							      								    58 LOAD_FAST 7 ( disk )					  
							      								    60 LOAD_CONST 10 ( 'disk' )					  
							      								    62 BINARY_SUBSCR						  
							      								    64 LOAD_FAST 7 ( disk )					  
							      								    66 LOAD_CONST 11 ( 'disk' )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 7 ( disk )					  
							      								    72 LOAD_CONST 12 ( 'disk' )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 7 ( disk )					  
							      								    78 LOAD_CONST 13 ( 'disk' )					  
							      								    80 STORE_SUBSCR						  
							      								    								  
							      								    192 82 LOAD_FAST 7 ( disk )					  
							      								    84 LOAD_CONST 14 ( 'disk' )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 7 ( disk )					  
							      								    90 LOAD_CONST 15 ( 'disk' )					  
							      								    92 STORE_SUBSCR						  
							      								    94 LOAD_CONST 16 ( None )					  
							      								    96 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION
--							      --							    --								  --
def mulmod ( a , b , mod ) :				      Disassembly of <code object mulmod at 0x7fbac<<unk>> d540, fi Disassembly of <code object mulmod at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    res = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( '%s; = %s; %s; %s' )			  "XLM/dis_script.py", line 60, in <module>	exec
    a = a % mod ;					      2 STORE_FAST 3 ( res )					    2 LOAD_FAST 0 ( a )						  (item)   File "main.py", line 35, in <module>	  Fi
    while ( b > 0 ) :					      								    4 LOAD_FAST 1 ( b )						  le "<dis>", line 2, in mulmod UnboundLocalError: l
	if ( b % 2 == 1 ) :				      3 4 LOAD_FAST 0 ( a )					    6 LOAD_FAST 2 ( a )						  ocal variable 'b' referenced before assignment
	    res = ( res + a ) % mod ;			      6 LOAD_FAST 2 ( mod )					    8 LOAD_FAST 3 ( b )						  
	a = ( a * 2 ) % mod ;				      8 BINARY_MODULO						    10 BUILD_TUPLE 3						  
	b //= 2 ;					      10 STORE_FAST 0 ( a )					    12 BINARY_MODULO						  
    return res % mod ;					      								    14 RETURN_VALUE						  
							      4 12 SETUP_LOOP 56 ( to 70 )				    NEW_LINE							  
							      >> 14 LOAD_FAST 1 ( b )					    								  
							      16 LOAD_CONST 1 ( 0 )					    								  
							      18 COMPARE_OP 4 ( > )					    								  
							      20 POP_JUMP_IF_FALSE 68					    								  
							      								    								  
							      5 22 LOAD_FAST 1 ( b )					    								  
							      24 LOAD_CONST 2 ( 2 )					    								  
							      26 BINARY_MODULO						    								  
							      28 LOAD_CONST 3 ( 1 )					    								  
							      30 COMPARE_OP 2 ( == )					    								  
							      32 POP_JUMP_IF_FALSE 46					    								  
							      								    								  
							      6 34 LOAD_FAST 3 ( res )					    								  
							      36 LOAD_FAST 0 ( a )					    								  
							      38 BINARY_ADD						    								  
							      40 LOAD_FAST 2 ( mod )					    								  
							      42 BINARY_MODULO						    								  
							      44 STORE_FAST 3 ( res )					    								  
							      								    								  
							      7 >> 46 LOAD_FAST 0 ( a )					    								  
							      48 LOAD_CONST 2 ( 2 )					    								  
							      50 BINARY_MULTIPLY					    								  
							      52 LOAD_FAST 2 ( mod )					    								  
							      54 BINARY_MODULO						    								  
							      56 STORE_FAST 0 ( a )					    								  
							      								    								  
							      8 58 LOAD_FAST 1 ( b )					    								  
							      60 LOAD_CONST 2 ( 2 )					    								  
							      62 INPLACE_FLOOR_DIVIDE					    								  
							      64 STORE_FAST 1 ( b )					    								  
							      66 JUMP_ABSOLUTE 14					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      9 >> 70 LOAD_FAST 3 ( res )				    								  
							      72 LOAD_FAST 2 ( mod )					    								  
							      74 BINARY_MODULO						    								  
							      76 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
def isDivisibleBy7 ( num ) :				      Disassembly of <code object isDivisibleBy7 at 0x7fbac<<unk>>  Disassembly of <code object isDivisibleBy7 at 0x7f816a673a50, failure : #Results: 1, 10
    if num < 0 :					      2 0 LOAD_FAST 0 ( num )					    8 0 LOAD_FAST 0 ( num )					  
	return isDivisibleBy7 ( - num )			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( num == 0 or num == 7 ) :			      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 4 ( > )					  
	return True					      6 POP_JUMP_IF_FALSE 18					    6 POP_JUMP_IF_FALSE 12					  
    if ( num < 10 ) :					      								    								  
	return False					      3 8 LOAD_GLOBAL 0 ( isDivisibleBy7 )			    9 8 LOAD_CONST 2 ( True )					  
    return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 10 LOAD_FAST 0 ( num )					    10 RETURN_VALUE						  
							      12 UNARY_NEGATIVE						    								  
							      14 CALL_FUNCTION 1					    10 >> 12 LOAD_CONST 3 ( False )				  
							      16 RETURN_VALUE						    14 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 >> 18 LOAD_FAST 0 ( num )				    								  
							      20 LOAD_CONST 1 ( 0 )					    								  
							      22 COMPARE_OP 2 ( == )					    								  
							      24 POP_JUMP_IF_TRUE 34					    								  
							      26 LOAD_FAST 0 ( num )					    								  
							      28 LOAD_CONST 2 ( 7 )					    								  
							      30 COMPARE_OP 2 ( == )					    								  
							      32 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      5 >> 34 LOAD_CONST 3 ( True )				    								  
							      36 RETURN_VALUE						    								  
							      								    								  
							      6 >> 38 LOAD_FAST 0 ( num )				    								  
							      40 LOAD_CONST 4 ( 10 )					    								  
							      42 COMPARE_OP 0 ( < )					    								  
							      44 POP_JUMP_IF_FALSE 50					    								  
							      								    								  
							      7 46 LOAD_CONST 5 ( False )				    								  
							      48 RETURN_VALUE						    								  
							      								    								  
							      8 >> 50 LOAD_GLOBAL 0 ( isDivisibleBy7 )			    								  
							      52 LOAD_FAST 0 ( num )					    								  
							      54 LOAD_CONST 4 ( 10 )					    								  
							      56 BINARY_TRUE_DIVIDE					    								  
							      58 LOAD_CONST 6 ( 2 )					    								  
							      60 LOAD_FAST 0 ( num )					    								  
							      62 LOAD_FAST 0 ( num )					    								  
							      64 LOAD_CONST 4 ( 10 )					    								  
							      66 BINARY_TRUE_DIVIDE					    								  
							      68 LOAD_CONST 4 ( 10 )					    								  
							      70 BINARY_MULTIPLY					    								  
							      72 BINARY_SUBTRACT					    								  
							      74 BINARY_MULTIPLY					    								  
							      76 BINARY_SUBTRACT					    								  
							      78 CALL_FUNCTION 1					    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	      BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		    BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		  BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS
--							      --							    --								  --
def nextfit ( weight , c ) :				      Disassembly of <code object nextfit at 0x7fbac0e8bc90, file " Disassembly of <code object nextfit at 0x7f816a6e4b70, file " script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( weight )					  
    rem = c						      2 STORE_FAST 2 ( res )					    2 LOAD_CONST 1 ( 0 )					  
    for _ in range ( len ( weight ) ) :			      								    4 BINARY_SUBSCR						  
	if rem >= weight [ _ ] :			      3 4 LOAD_FAST 1 ( c )					    6 LOAD_FAST 0 ( weight )					  
	    rem = rem - weight [ _ ]			      6 STORE_FAST 3 ( rem )					    8 LOAD_CONST 2 ( 1 )					  
	else :						      								    10 BINARY_SUBSCR						  
	    res += 1					      4 8 SETUP_LOOP 66 ( to 76 )				    12 LOAD_CONST 3 ( 2 )					  
	    rem = c - weight [ _ ]			      10 LOAD_GLOBAL 0 ( range )				    14 BINARY_SUBSCR						  
    return res						      12 LOAD_GLOBAL 1 ( len )					    16 LOAD_CONST 4 ( 3 )					  
							      14 LOAD_FAST 0 ( weight )					    18 COMPARE_OP 3 ( != )					  
							      16 CALL_FUNCTION 1					    20 POP_JUMP_IF_FALSE 26					  
							      18 CALL_FUNCTION 1					    								  
							      20 GET_ITER						    27 22 LOAD_FAST 0 ( weight )				  
							      >> 22 FOR_ITER 50 ( to 74 )				    24 LOAD_CONST 5 ( 1 )					  
							      24 STORE_FAST 4 ( _ )					    26 BINARY_SUBSCR						  
							      								    28 LOAD_CONST 6 ( 2 )					  
							      5 26 LOAD_FAST 3 ( rem )					    30 BINARY_SUBSCR						  
							      28 LOAD_FAST 0 ( weight )					    32 LOAD_CONST 7 ( 3 )					  
							      30 LOAD_FAST 4 ( _ )					    34 COMPARE_OP 3 ( != )					  
							      32 BINARY_SUBSCR						    36 POP_JUMP_IF_FALSE 44					  
							      34 COMPARE_OP 5 ( >= )					    								  
							      36 POP_JUMP_IF_FALSE 52					    28 38 LOAD_FAST 0 ( weight )				  
							      								    40 LOAD_CONST 5 ( 1 )					  
							      6 38 LOAD_FAST 3 ( rem )					    42 BINARY_SUBSCR						  
							      40 LOAD_FAST 0 ( weight )					    40 LOAD_CONST 8 ( 2 )					  
							      42 LOAD_FAST 4 ( _ )					    42 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    44 LOAD_CONST 9 ( 3 )					  
							      46 BINARY_SUBTRACT					    46 COMPARE_OP 3 ( != )					  
							      48 STORE_FAST 3 ( rem )					    48 POP_JUMP_IF_FALSE 44					  
							      50 JUMP_ABSOLUTE 22					    								  
							      								    29 50 LOAD_FAST 0 ( weight )				  
							      8 >> 52 LOAD_FAST 2 ( res )				    52 LOAD_CONST 5 ( 1 )					  
							      54 LOAD_CONST 2 ( 1 )					    54 BINARY_SUBSCR						  
							      56 INPLACE_ADD						    56 LOAD_CONST 10 ( 3 )					  
							      58 STORE_FAST 2 ( res )					    58 COMPARE_OP 3 ( != )					  
							      								    60 POP_JUMP_IF_FALSE 44					  
							      9 60 LOAD_FAST 1 ( c )					    								  
							      62 LOAD_FAST 0 ( weight )					    30 62 LOAD_FAST 0 ( weight )				  
							      64 LOAD_FAST 4 ( _ )					    64 LOAD_CONST 5 ( 1 )					  
							      66 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      68 BINARY_SUBTRACT					    68 LOAD_CONST 6 ( 2 )					  
							      70 STORE_FAST 3 ( rem )					    70 COMPARE_OP 3 ( != )					  
							      72 JUMP_ABSOLUTE 22					    72 POP_JUMP_IF_FALSE 44					  
							      >> 74 POP_BLOCK						    								  
							      								    31 74 LOAD_FAST 0 ( weight )				  
							      10 >> 76 LOAD_FAST 2 ( res )				    76 LOAD_CONST 5 ( 1 )					  
							      78 RETURN_VALUE NEW_LINE					    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 7 ( 3 )					  
							      								    82 COMPARE_OP 3 ( != )					  
							      								    84 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    32 86 LOAD_FAST 0 ( weight )				  
							      								    88 LOAD_CONST 5 ( 1 )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 8 ( 2 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 10 ( 3 )					  
							      								    98 COMPARE_OP 3 ( != )					  
							      								    100 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    33 102 LOAD_FAST 0 ( weight )				  
							      								    104 LOAD_CONST 5 ( 1 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 6 ( 2 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 5 ( 1 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 6 ( 2 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 5 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 6 ( 2 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 7 ( 3 )					  
							      								    130 COMPARE_OP 3 ( != )					  
							      								    132 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    34 134 LOAD_FAST 0 ( weight )				  
							      								    136 LOAD_CONST 5 ( 1 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 6 ( 2 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 7 ( 3 )					  
							      								    146 COMPARE_OP 3 ( != )					  
							      								    148 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    35 150 LOAD_FAST 0 ( weight )				  
							      								    152 LOAD_CONST 5 ( 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 8 ( 2 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 7 ( 3 )					  
							      								    158 COMPARE_OP 3 ( != )					  
							      								    160 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    36 162							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_SPARSE_NOT				      CHECK_GIVEN_MATRIX_SPARSE_NOT				    CHECK_GIVEN_MATRIX_SPARSE_NOT				  CHECK_GIVEN_MATRIX_SPARSE_NOT
--							      --							    --								  --
def isSparse ( array , m , n ) :			      Disassembly of <code object isSparse at 0x7fbac0e89d20, file  Disassembly of <code object isSparse at 0x7f816a673a50, file  error : Traceback (most recent call last):   File
    counter = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( array )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , m ) :				      2 STORE_FAST 3 ( counter )				    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 39, in <module>	  Fi
	for j in range ( 0 , n ) :			      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in isSparse TypeError: 'int' o
	    if ( array [ i ] [ j ] == 0 ) :		      3 4 SETUP_LOOP 62 ( to 68 )				    6 STORE_FAST 1 ( m )					  bject is not subscriptable
		counter = counter + 1			      6 LOAD_GLOBAL 0 ( range )					    								  
    return ( counter > ( ( m * n ) // 2 ) )		      8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 1 ( m )					  
							      10 LOAD_FAST 1 ( m )					    10 LOAD_CONST 2 ( 1 )					  
							      12 CALL_FUNCTION 2					    12 BINARY_SUBSCR						  
							      14 GET_ITER						    14 STORE_FAST 2 ( counter )					  
							      >> 16 FOR_ITER 48 ( to 66 )				    								  
							      18 STORE_FAST 4 ( i )					    28 16 LOAD_FAST 2 ( counter )				  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 20 SETUP_LOOP 42 ( to 64 )				    20 BINARY_SUBSCR						  
							      22 LOAD_GLOBAL 0 ( range )				    22 STORE_FAST 3 ( counter )					  
							      24 LOAD_CONST 1 ( 0 )					    								  
							      26 LOAD_FAST 2 ( n )					    29 24 LOAD_FAST 1 ( m )					  
							      28 CALL_FUNCTION 2					    26 LOAD_CONST 4 ( 2 )					  
							      30 GET_ITER						    28 BINARY_SUBSCR						  
							      >> 32 FOR_ITER 28 ( to 62 )				    30 STORE_FAST 4 ( counter )					  
							      34 STORE_FAST 5 ( j )					    								  
							      								    30 32 LOAD_FAST 0 ( array )					  
							      5 36 LOAD_FAST 0 ( array )				    34 LOAD_CONST 5 ( 1 )					  
							      38 LOAD_FAST 4 ( i )					    36 BINARY_SUBSCR						  
							      40 BINARY_SUBSCR						    38 LOAD_CONST 6 ( 2 )					  
							      42 LOAD_FAST 5 ( j )					    40 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    42 STORE_FAST 5 ( counter )					  
							      46 LOAD_CONST 1 ( 0 )					    								  
							      48 COMPARE_OP 2 ( == )					    31 44 LOAD_FAST 0 ( array )					  
							      50 POP_JUMP_IF_FALSE 32					    46 LOAD_CONST 7 ( 3 )					  
							      								    48 BINARY_SUBSCR						  
							      6 52 LOAD_FAST 3 ( counter )				    50 STORE_FAST 6 ( counter )					  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_ADD						    32 52 LOAD_FAST 0 ( array )					  
							      58 STORE_FAST 3 ( counter )				    54 LOAD_CONST 8 ( 1 )					  
							      60 JUMP_ABSOLUTE 32					    56 BINARY_SUBSCR						  
							      >> 62 POP_BLOCK						    58 LOAD_CONST 9 ( 2 )					  
							      >> 64 JUMP_ABSOLUTE 16					    60 BINARY_SUBSCR						  
							      >> 66 POP_BLOCK						    62 STORE_FAST 7 ( counter )					  
							      								    								  
							      7 >> 68 LOAD_FAST 3 ( counter )				    33 64 LOAD_FAST 0 ( array )					  
							      70 LOAD_FAST 1 ( m )					    66 LOAD_CONST 10 ( 1 )					  
							      72 LOAD_FAST 2 ( n )					    68 BINARY_SUBSCR						  
							      74 BINARY_MULTIPLY					    70 LOAD_CONST 11 ( 2 )					  
							      76 LOAD_CONST 3 ( 2 )					    72 BINARY_SUBSCR						  
							      78 BINARY_FLOOR_DIVIDE					    74 LOAD_CONST 12 ( 3 )					  
							      80 COMPARE_OP 4 ( > )					    76 BINARY_SUBSCR						  
							      82 RETURN_VALUE NEW_LINE					    78 LOAD_CONST 13 ( 1 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 14 ( 2 )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 15 ( 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 16 ( 3 )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 17 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 18 ( 2 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 19 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 20 ( 3 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 21 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 22 ( 2 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 21 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 22 ( 2 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 21 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 22 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 22 ( 2 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 23 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 22 ( 2 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 23 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 22 ( 2 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 23 ( 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 24 ( 2 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 23 ( 1 )					  
							      								    164 BINARY_SUBSCR						  
							      								    166 LOAD_CONST 24 ( 2 )					  
							      								    168 STORE_SUBSCR						  
							      								    								  
							      								    29 29 LOAD_FAST 0 ( array )					  
							      								    156 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			      DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			    DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			  DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE
--							      --							    --								  --
def count ( S , m , n ) :				      Disassembly of <code object count at 0x7fbac0e89d20, file "<d Disassembly of <code object count at 0x7f816a673a50, file "<d script_not_found : None
    if ( n == 0 ) :					      2 0 LOAD_FAST 2 ( n )					    26 0 LOAD_FAST 0 ( S )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( n < 0 ) :					      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
	return 0 ;					      6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 1 )					  
    if ( m <= 0 and n >= 1 ) :				      								    8 COMPARE_OP 2 ( == )					  
	return 0					      3 8 LOAD_CONST 2 ( 1 )					    10 POP_JUMP_IF_FALSE 16					  
    return count ( S , m - 1 , n ) + count ( S , m , n - S [  10 RETURN_VALUE						    								  
							      								    27 12 LOAD_FAST 0 ( S )					  
							      4 >> 12 LOAD_FAST 2 ( n )					    14 LOAD_CONST 1 ( 0 )					  
							      14 LOAD_CONST 1 ( 0 )					    16 BINARY_SUBSCR						  
							      16 COMPARE_OP 0 ( < )					    18 LOAD_CONST 3 ( 1 )					  
							      18 POP_JUMP_IF_FALSE 24					    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      5 20 LOAD_CONST 1 ( 0 )					    								  
							      22 RETURN_VALUE						    28 >> 24 LOAD_FAST 0 ( S )					  
							      								    26 LOAD_CONST 1 ( 0 )					  
							      6 >> 24 LOAD_FAST 1 ( m )					    28 BINARY_SUBSCR						  
							      26 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 4 ( 1 )					  
							      28 COMPARE_OP 1 ( <= )					    32 COMPARE_OP 2 ( == )					  
							      30 POP_JUMP_IF_FALSE 44					    34 POP_JUMP_IF_FALSE 44					  
							      32 LOAD_FAST 2 ( n )					    								  
							      34 LOAD_CONST 2 ( 1 )					    29 36 LOAD_FAST 0 ( S )					  
							      36 COMPARE_OP 5 ( >= )					    38 LOAD_CONST 1 ( 0 )					  
							      38 POP_JUMP_IF_FALSE 44					    40 BINARY_SUBSCR						  
							      								    42 LOAD_CONST 5 ( 1 )					  
							      7 40 LOAD_CONST 1 ( 0 )					    44 COMPARE_OP 2 ( == )					  
							      42 RETURN_VALUE						    46 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      8 >> 44 LOAD_GLOBAL 0 ( count )				    30 48 LOAD_FAST 0 ( S )					  
							      46 LOAD_FAST 0 ( S )					    50 LOAD_CONST 1 ( 0 )					  
							      48 LOAD_FAST 1 ( m )					    52 BINARY_SUBSCR						  
							      50 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 6 ( 1 )					  
							      52 BINARY_SUBTRACT					    56 BINARY_SUBSCR						  
							      54 LOAD_FAST 2 ( n )					    58 LOAD_CONST 7 ( 1 )					  
							      56 CALL_FUNCTION 3					    60 COMPARE_OP 2 ( == )					  
							      58 LOAD_GLOBAL 0 ( count )				    62 POP_JUMP_IF_FALSE 52					  
							      60 LOAD_FAST 0 ( S )					    								  
							      62 LOAD_FAST 1 ( m )					    31 64 LOAD_FAST 0 ( S )					  
							      64 LOAD_FAST 2 ( n )					    66 LOAD_CONST 1 ( 0 )					  
							      66 LOAD_FAST 0 ( S )					    68 BINARY_SUBSCR						  
							      68 LOAD_FAST 1 ( m )					    70 LOAD_CONST 8 ( 1 )					  
							      70 LOAD_CONST 2 ( 1 )					    72 COMPARE_OP 2 ( == )					  
							      72 BINARY_SUBTRACT					    74 POP_JUMP_IF_FALSE 80					  
							      74 BINARY_SUBSCR						    								  
							      76 BINARY_SUBTRACT					    32 76 LOAD_FAST 0 ( S )					  
							      78 CALL_FUNCTION 3					    78 LOAD_CONST 1 ( 0 )					  
							      80 BINARY_ADD						    80 BINARY_SUBSCR						  
							      82 RETURN_VALUE NEW_LINE					    82 LOAD_CONST 9 ( 1 )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 10 ( 1 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    33 92 LOAD_FAST 0 ( S )					  
							      								    94 LOAD_CONST 1 ( 0 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 11 ( 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 12 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 13 ( 1 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 14 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 15 ( 1 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 16 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 17 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 18 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 19 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 20 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 21 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 22 ( 1 )					  
							      								    144 COMPARE_OP 2 ( == )					  
							      								    146 POP_JUMP_IF_FALSE 146					  
							      								    148 LOAD_FAST 0 ( S )					  
							      								    150 LOAD_CONST 21 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 22 ( 1 )					  
							      								    156 LOAD_CONST 21 ( 1 )					  
							      								    158 BINARY_SUBSCR						  
							      								    160 LOAD_CONST 22 ( 1 )					  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_CONST 21 ( 1 )					  
							      								    166 COMPARE_OP 2 ( == )					  
							      								    168 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    31 31 LOAD_FAST 0 ( S )					  
							      								    34 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      Disassembly of <code object middleOfThree at 0x7fbac0e89d20,  Disassembly of <code object middleOfThree at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    if ( ( a < b and b < c ) or ( c < b and b < a ) ) :	      2 0 LOAD_FAST 0 ( a )					    65 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
	return b ;					      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( b '<a href="href">' )			  item in run_dis_script():   File "XLM/dis_script.p
    if ( ( b < a and a < c ) or ( c < a and a < b ) ) :	      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
	return a ;					      6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
    else :						      8 LOAD_FAST 1 ( b )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	return c					      10 LOAD_FAST 2 ( c )					    66 8 LOAD_FAST 0 ( a )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 COMPARE_OP 0 ( < )					    10 LOAD_CONST 2 ( 'href' )					  n parse     constants[arg] = ast.literal_eval(argr
							      14 POP_JUMP_IF_TRUE 32					    12 BINARY_SUBSCR						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      >> 16 LOAD_FAST 2 ( c )					    14 STORE_FAST 0 ( a )					  ib/python3.7/ast.py", line 46, in literal_eval
							      18 LOAD_FAST 1 ( b )					    								   node_or_string = parse(node_or_string, mode='eval
							      20 COMPARE_OP 0 ( < )					    67 16 LOAD_FAST 0 ( a )					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      22 POP_JUMP_IF_FALSE 36					    18 LOAD_CONST 3 ( 'href' )					  /python3.7/ast.py", line 35, in parse	    return c
							      24 LOAD_FAST 1 ( b )					    20 BINARY_SUBSCR						  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      26 LOAD_FAST 0 ( a )					    22 STORE_FAST 0 ( a )					  le "<unknown>", line 1     b '<a href="href">'
							      28 COMPARE_OP 0 ( < )					    								  		     ^ SyntaxError: invalid syntax
							      30 POP_JUMP_IF_FALSE 36					    68 24 LOAD_FAST 0 ( a )					  
							      								    26 LOAD_CONST 4 ( 'href="href">' )				  
							      3 >> 32 LOAD_FAST 1 ( b )					    28 COMPARE_OP 2 ( == )					  
							      34 RETURN_VALUE						    30 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      4 >> 36 LOAD_FAST 1 ( b )					    69 32 LOAD_FAST 0 ( a )					  
							      38 LOAD_FAST 0 ( a )					    34 LOAD_CONST 5 ( 'href' )					  
							      40 COMPARE_OP 0 ( < )					    36 BINARY_SUBSCR						  
							      42 POP_JUMP_IF_FALSE 52					    38 STORE_FAST 0 ( a )					  
							      44 LOAD_FAST 0 ( a )					    								  
							      46 LOAD_FAST 2 ( c )					    70 40 LOAD_FAST 0 ( a )					  
							      48 COMPARE_OP 0 ( < )					    42 LOAD_CONST 6 ( 'href' )					  
							      50 POP_JUMP_IF_TRUE 68					    44 BINARY_SUBSCR						  
							      >> 52 LOAD_FAST 2 ( c )					    46 STORE_FAST 0 ( a )					  
							      54 LOAD_FAST 0 ( a )					    								  
							      56 COMPARE_OP 0 ( < )					    71 48 LOAD_FAST 0 ( a )					  
							      58 POP_JUMP_IF_FALSE 72					    50 LOAD_CONST 7 ( 'href' )					  
							      60 LOAD_FAST 0 ( a )					    52 BINARY_SUBSCR						  
							      62 LOAD_FAST 1 ( b )					    54 STORE_FAST 1 ( b )					  
							      64 COMPARE_OP 0 ( < )					    								  
							      66 POP_JUMP_IF_FALSE 72					    72 56 LOAD_FAST 0 ( a )					  
							      								    58 LOAD_CONST 8 ( 'href' )					  
							      5 >> 68 LOAD_FAST 0 ( a )					    60 BINARY_SUBSCR						  
							      70 RETURN_VALUE						    62 STORE_FAST 0 ( a )					  
							      								    								  
							      7 >> 72 LOAD_FAST 2 ( c )					    73 64 LOAD_FAST 0 ( a )					  
							      74 RETURN_VALUE						    66 LOAD_CONST 9 ( 'href' )					  
							      76 LOAD_CONST 0 ( None )					    68 BINARY_SUBSCR						  
							      78 RETURN_VALUE NEW_LINE					    70 STORE_FAST 1 ( b )					  
							      								    								  
							      								    74 72 LOAD_FAST 0 ( a )					  
							      								    74 LOAD_CONST 10 ( 'href' )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 STORE_FAST 0 ( a )					  
							      								    								  
							      								    75 80 LOAD_FAST 0 ( a )					  
							      								    82 LOAD_FAST 1 ( b )					  
							      								    84 LOAD_FAST 0 ( a )					  
							      								    86 LOAD_FAST 0 ( a )					  
							      								    88 LOAD_FAST 1 ( b )					  
							      								    90 LOAD_FAST 2 ( b )					  
							      								    92 LOAD_FAST 1 ( b )					  
							      								    94 LOAD_FAST 2 ( b )					  
							      								    96 BUILD_TUPLE 3						  
							      								    98 STORE_SUBSCR						  
							      								    100 LOAD_CONST 0 ( None )					  
							      								    102 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	      FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	    FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	  FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1
--							      --							    --								  --
def isSubset ( arr1 , arr2 , m , n ) :			      Disassembly of <code object isSubset at 0x7fbac0e89d20, file  Disassembly of <code object isSubset at 0x7f816a677930, file  error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( arr2 )					  "XLM/dis_script.py", line 60, in <module>	exec
    j = 0						      2 STORE_FAST 4 ( i )					    2 LOAD_FAST 0 ( arr1 )					  (item)   File "main.py", line 46, in <module>	  Fi
    for i in range ( n ) :				      								    4 LOAD_FAST 2 ( arr2 )					  le "<dis>", line 2, in isSubset UnboundLocalError:
	for j in range ( m ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_FAST 3 ( arr2 )					   local variable 'arr2' referenced before assignmen
	    if ( arr2 [ i ] == arr1 [ j ] ) :		      6 STORE_FAST 5 ( j )					    8 LOAD_FAST 4 ( arr2 )					  t
		break					      								    10 LOAD_FAST 5 ( arr2 )					  
	if ( j == m ) :					      4 8 SETUP_LOOP 64 ( to 74 )				    12 LOAD_FAST 6 ( arr2 )					  
	    return 0					      10 LOAD_GLOBAL 0 ( range )				    14 LOAD_FAST 7 ( arr2 )					  
    return 1						      12 LOAD_FAST 3 ( n )					    16 LOAD_FAST 8 ( arr2 )					  
							      14 CALL_FUNCTION 1					    18 LOAD_FAST 9 ( arr2 )					  
							      16 GET_ITER						    20 LOAD_FAST 10 ( arr2 )					  
							      >> 18 FOR_ITER 52 ( to 72 )				    22 LOAD_FAST 11 ( arr2 )					  
							      20 STORE_FAST 4 ( i )					    24 LOAD_FAST 12 ( arr2 )					  
							      								    26 LOAD_FAST 13 ( arr2 )					  
							      5 22 SETUP_LOOP 34 ( to 58 )				    28 LOAD_FAST 14 ( arr2 )					  
							      24 LOAD_GLOBAL 0 ( range )				    30 LOAD_FAST 15 ( arr2 )					  
							      26 LOAD_FAST 2 ( m )					    32 LOAD_FAST 14 ( arr2 )					  
							      28 CALL_FUNCTION 1					    34 LOAD_FAST 15 ( arr2 )					  
							      30 GET_ITER						    36 LOAD_FAST 16 ( arr2 )					  
							      >> 32 FOR_ITER 22 ( to 56 )				    38 LOAD_FAST 17 ( arr2 )					  
							      34 STORE_FAST 5 ( j )					    40 LOAD_FAST 18 ( arr2 )					  
							      								    42 LOAD_FAST 17 ( arr2 )					  
							      6 36 LOAD_FAST 1 ( arr2 )					    44 LOAD_FAST 18 ( arr2 )					  
							      38 LOAD_FAST 4 ( i )					    46 LOAD_FAST 19 ( arr2 )					  
							      40 BINARY_SUBSCR						    48 LOAD_FAST 20 ( arr2 )					  
							      42 LOAD_FAST 0 ( arr1 )					    50 LOAD_FAST 21 ( arr2 )					  
							      44 LOAD_FAST 5 ( j )					    52 LOAD_FAST 22 ( arr2 )					  
							      46 BINARY_SUBSCR						    54 LOAD_FAST 21 ( arr2 )					  
							      48 COMPARE_OP 2 ( == )					    56 LOAD_FAST 22 ( arr2 )					  
							      50 POP_JUMP_IF_FALSE 32					    58 LOAD_FAST 21 ( arr2 )					  
							      								    60 LOAD_FAST 22 ( arr2 )					  
							      7 52 BREAK_LOOP						    62 LOAD_FAST 21 ( arr2 )					  
							      54 JUMP_ABSOLUTE 32					    64 LOAD_FAST 22 ( arr2 )					  
							      >> 56 POP_BLOCK						    66 LOAD_FAST 21 ( arr2 )					  
							      								    68 LOAD_FAST 22 ( arr2 )					  
							      8 >> 58 LOAD_FAST 5 ( j )					    70 LOAD_FAST 21 ( arr2 )					  
							      60 LOAD_FAST 2 ( m )					    72 LOAD_FAST 22 ( arr2 )					  
							      62 COMPARE_OP 2 ( == )					    74 LOAD_FAST 22 ( arr2 )					  
							      64 POP_JUMP_IF_FALSE 18					    76 LOAD_FAST 21 ( arr2 )					  
							      								    78 LOAD_FAST 22 ( arr2 )					  
							      9 66 LOAD_CONST 1 ( 0 )					    80 LOAD_FAST 22 ( arr2 )					  
							      68 RETURN_VALUE						    82 LOAD_FAST 21 ( arr2 )					  
							      70 JUMP_ABSOLUTE 18					    84 LOAD_FAST 22 ( arr2 )					  
							      >> 72 POP_BLOCK						    86 LOAD_FAST 22 ( arr2 )					  
							      								    88 LOAD_FAST 23 ( arr2 )					  
							      10 >> 74 LOAD_CONST 2 ( 1 )				    90 LOAD_FAST 22 ( arr2 )					  
							      76 RETURN_VALUE NEW_LINE					    92 LOAD_FAST 21 ( arr2 )					  
							      								    94 LOAD_FAST 22 ( arr2 )					  
							      								    96 LOAD_FAST 22 ( arr2 )					  
							      								    98 LOAD_FAST 23 ( arr2 )					  
							      								    100 LOAD_FAST 22 ( arr2 )					  
							      								    102 LOAD_FAST 23 ( arr2 )					  
							      								    104 LOAD_FAST 22 ( arr2 )					  
							      								    106 LOAD_FAST 24 ( arr2 )					  
							      								    108 LOAD_FAST 23 ( arr2 )					  
							      								    110 LOAD_FAST 24 ( arr2 )					  
							      								    112 LOAD_FAST 23 ( arr2 )					  
							      								    114 LOAD_FAST 24 ( arr2 )					  
							      								    116 LOAD_FAST 23 ( arr2 )					  
							      								    118 LOAD_FAST 24 ( arr2 )					  
							      								    120 LOAD_FAST 23 ( arr2 )					  
							      								    122 LOAD_FAST 24 ( arr2 )					  
							      								    124 LOAD_FAST 25 ( arr2 )					  
							      								    126 LOAD_FAST 24 ( arr2 )					  
							      								    128 LOAD_FAST 23 ( arr2 )					  
							      								    130 LOAD_FAST 24 ( arr2 )					  
							      								    132 LOAD_FAST 26 ( arr2 )					  
							      								    134 LOAD_FAST 5 ( arr2 )					  
							      								    136 LOAD_FAST 6 ( arr2 )					  
							      								    138 LOAD_FAST 24 ( arr2 )					  
							      								    140 LOAD_FAST 5 ( arr2 ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X	      GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X		    GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X		  GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X
--							      --							    --								  --
def findPairs ( arr1 , arr2 , n , m , x ) :		      Disassembly of <code object findPairs at 0x7fbac0e8bc90, file Disassembly of <code object findPairs at 0x7f816a683d20, file script_not_found : None
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 76 ( to 78 )				    50 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( 0 , m ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    if ( arr1 [ i ] + arr2 [ j ] == x ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_FAST 1 ( arr2 )					  
		print ( arr1 [ i ] , arr2 [ j ] )	      6 LOAD_FAST 2 ( n )					    6 CALL_FUNCTION 1						  
							      8 CALL_FUNCTION 2						    8 GET_ITER							  
							      10 GET_ITER						    >> 10 FOR_ITER 14 ( to 22 )					  
							      >> 12 FOR_ITER 62 ( to 76 )				    12 STORE_FAST 2 ( i )					  
							      14 STORE_FAST 5 ( i )					    								  
							      								    51 14 LOAD_GLOBAL 1 ( print )				  
							      3 16 SETUP_LOOP 56 ( to 74 )				    16 LOAD_FAST 2 ( i )					  
							      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_CONST 1 ( '[%d] = %d' )				  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_FAST 1 ( arr2 )					  
							      22 LOAD_FAST 3 ( m )					    22 BINARY_MODULO						  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 POP_TOP							  
							      >> 28 FOR_ITER 42 ( to 72 )				    28 JUMP_ABSOLUTE 10						  
							      30 STORE_FAST 6 ( j )					    >> 30 POP_BLOCK						  
							      								    >> 32 LOAD_CONST 2 ( None )					  
							      4 32 LOAD_FAST 0 ( arr1 )					    34 RETURN_VALUE						  
							      34 LOAD_FAST 5 ( i )					    NEW_LINE							  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 1 ( arr2 )					    								  
							      40 LOAD_FAST 6 ( j )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 BINARY_ADD						    								  
							      46 LOAD_FAST 4 ( x )					    								  
							      48 COMPARE_OP 2 ( == )					    								  
							      50 POP_JUMP_IF_FALSE 28					    								  
							      								    								  
							      5 52 LOAD_GLOBAL 1 ( print )				    								  
							      54 LOAD_FAST 0 ( arr1 )					    								  
							      56 LOAD_FAST 5 ( i )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 LOAD_FAST 1 ( arr2 )					    								  
							      62 LOAD_FAST 6 ( j )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 CALL_FUNCTION 2					    								  
							      68 POP_TOP						    								  
							      70 JUMP_ABSOLUTE 28					    								  
							      >> 72 POP_BLOCK						    								  
							      >> 74 JUMP_ABSOLUTE 12					    								  
							      >> 76 POP_BLOCK						    								  
							      >> 78 LOAD_CONST 0 ( None )				    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
def findCombinations ( string , index , out ) :		      Disassembly of <code object findCombinations at 0x7fbac0e89d2 Disassembly of <code object findCombinations at 0x7f816a6e4b7 script_not_found : None
    if index == len ( string ) :			      2 0 LOAD_FAST 1 ( index )					    26 0 LOAD_FAST 0 ( string )					  
	print ( out )					      2 LOAD_GLOBAL 0 ( len )					    2 LOAD_METHOD 0 ( split )					  
    for i in range ( index , len ( string ) , 1 ) :	      4 LOAD_FAST 0 ( string )					    4 LOAD_CONST 1 ( '\n' )					  
	findCombinations ( string , i + 1 , out + "(" + strin 6 CALL_FUNCTION 1						    6 CALL_METHOD 1						  
							      8 COMPARE_OP 2 ( == )					    8 STORE_FAST 1 ( index )					  
							      10 POP_JUMP_IF_FALSE 20					    								  
							      								    27 10 LOAD_FAST 1 ( index )					  
							      3 12 LOAD_GLOBAL 1 ( print )				    12 LOAD_CONST 2 ( 0 )					  
							      14 LOAD_FAST 2 ( out )					    14 BINARY_SUBSCR						  
							      16 CALL_FUNCTION 1					    16 STORE_FAST 2 ( out )					  
							      18 POP_TOP						    								  
							      								    28 18 LOAD_FAST 2 ( out )					  
							      4 >> 20 SETUP_LOOP 64 ( to 86 )				    20 LOAD_METHOD 1 ( append )					  
							      22 LOAD_GLOBAL 2 ( range )				    22 LOAD_FAST 1 ( index )					  
							      24 LOAD_FAST 1 ( index )					    24 CALL_METHOD 1						  
							      26 LOAD_GLOBAL 0 ( len )					    26 POP_TOP							  
							      28 LOAD_FAST 0 ( string )					    								  
							      30 CALL_FUNCTION 1					    29 28 LOAD_FAST 2 ( out )					  
							      32 LOAD_CONST 1 ( 1 )					    30 LOAD_METHOD 2 ( append )					  
							      34 CALL_FUNCTION 3					    32 LOAD_FAST 1 ( index )					  
							      36 GET_ITER						    34 CALL_METHOD 1						  
							      >> 38 FOR_ITER 44 ( to 84 )				    36 POP_TOP							  
							      40 STORE_FAST 3 ( i )					    38 LOAD_CONST 0 ( None )					  
							      								    40 RETURN_VALUE						  
							      5 42 LOAD_GLOBAL 3 ( findCombinations )			    NEW_LINE							  
							      44 LOAD_FAST 0 ( string )					    								  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 LOAD_CONST 1 ( 1 )					    								  
							      50 BINARY_ADD						    								  
							      52 LOAD_FAST 2 ( out )					    								  
							      54 LOAD_CONST 2 ( '(' )					    								  
							      56 BINARY_ADD						    								  
							      58 LOAD_FAST 0 ( string )					    								  
							      60 LOAD_FAST 1 ( index )					    								  
							      62 LOAD_FAST 3 ( i )					    								  
							      64 LOAD_CONST 1 ( 1 )					    								  
							      66 BINARY_ADD						    								  
							      68 BUILD_SLICE 2						    								  
							      70 BINARY_SUBSCR						    								  
							      72 BINARY_ADD						    								  
							      74 LOAD_CONST 3 ( ')' )					    								  
							      76 BINARY_ADD						    								  
							      78 CALL_FUNCTION 3					    								  
							      80 POP_TOP						    								  
							      82 JUMP_ABSOLUTE 38					    								  
							      >> 84 POP_BLOCK						    								  
							      >> 86 LOAD_CONST 0 ( None )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS	      PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS	    PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS		  PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS
--							      --							    --								  --
def printNumbers ( numbers ) :				      Disassembly of <code object printNumbers at 0x7fbac<<unk>> de Disassembly of <code object printace at 0x7f816a673a50, file  script_not_found : None
    numbers = map ( str , numbers )			      2 0 LOAD_GLOBAL 0 ( map )					    26 0 LOAD_GLOBAL 0 ( map )					  
    result = [ ]					      2 LOAD_GLOBAL 1 ( str )					    2 LOAD_GLOBAL 1 ( str )					  
    for num in numbers :				      4 LOAD_FAST 0 ( numbers )					    4 LOAD_FAST 0 ( numbers )					  
	if ( '1' in num and '2' in num and '3' in num ) :     6 CALL_FUNCTION 2						    6 CALL_FUNCTION 1						  
	    result.append ( num )			      8 STORE_FAST 0 ( numbers )				    8 CALL_FUNCTION 1						  
    if not result :					      								    10 RETURN_VALUE						  
	result = [ '-1' ]				      3 10 BUILD_LIST 0						    NEW_LINE							  
    return sorted ( result ) ;				      12 STORE_FAST 1 ( result )				    								  
							      								    								  
							      4 14 SETUP_LOOP 46 ( to 62 )				    								  
							      16 LOAD_FAST 0 ( numbers )				    								  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 38 ( to 60 )				    								  
							      22 STORE_FAST 2 ( num )					    								  
							      								    								  
							      5 24 LOAD_CONST 1 ( '1' )					    								  
							      26 LOAD_FAST 2 ( num )					    								  
							      28 COMPARE_OP 6 ( in )					    								  
							      30 POP_JUMP_IF_FALSE 20					    								  
							      32 LOAD_CONST 2 ( '2' )					    								  
							      34 LOAD_FAST 2 ( num )					    								  
							      36 COMPARE_OP 6 ( in )					    								  
							      38 POP_JUMP_IF_FALSE 20					    								  
							      40 LOAD_CONST 3 ( '3' )					    								  
							      42 LOAD_FAST 2 ( num )					    								  
							      44 COMPARE_OP 6 ( in )					    								  
							      46 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      6 48 LOAD_FAST 1 ( result )				    								  
							      50 LOAD_METHOD 2 ( append )				    								  
							      52 LOAD_FAST 2 ( num )					    								  
							      54 CALL_METHOD 1						    								  
							      56 POP_TOP						    								  
							      58 JUMP_ABSOLUTE 20					    								  
							      >> 60 POP_BLOCK						    								  
							      								    								  
							      7 >> 62 LOAD_FAST 1 ( result )				    								  
							      64 POP_JUMP_IF_TRUE 72					    								  
							      								    								  
							      8 66 LOAD_CONST 4 ( '-1' )				    								  
							      68 BUILD_LIST 1						    								  
							      70 STORE_FAST 1 ( result )				    								  
							      								    								  
							      9 >> 72 LOAD_GLOBAL 3 ( sorted )				    								  
							      74 LOAD_FAST 1 ( result )					    								  
							      76 CALL_FUNCTION 1					    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		      COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		    COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS			  COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS
--							      --							    --								  --
def findCount ( str ) :					      Disassembly of <code object findCount at 0x7fbac<<unk>> de40, Disassembly of <code object findCount at 0x7f816a673a50, file error : /bin/bash: line 1: 25590 Segmentation faul
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 BUILD_LIST 0						  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( len ( str ) ) :			      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  ataset/bin/python XLM/dis_script.py --script_path
	if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i  								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	    result += 1					      3 4 SETUP_LOOP 76 ( to 82 )				    27 4 SETUP_LOOP 52 ( to 54 )				  eval_scripts/python_sa-dis_sa.test/COUNT_CHARACTER
    return result					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  S_POSITION_ENGLISH_ALPHABETS.dis
							      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_FAST 0 ( str )					    10 CALL_FUNCTION 1						  
							      12 CALL_FUNCTION 1					    12 GET_ITER							  
							      14 CALL_FUNCTION 1					    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 GET_ITER						    16 STORE_FAST 2 ( i )					  
							      >> 18 FOR_ITER 60 ( to 80 )				    								  
							      20 STORE_FAST 2 ( i )					    28 18 LOAD_FAST 0 ( str )					  
							      								    20 LOAD_GLOBAL 1 ( int )					  
							      4 22 LOAD_FAST 2 ( i )					    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_GLOBAL 2 ( ord )					    24 CALL_FUNCTION 1						  
							      26 LOAD_FAST 0 ( str )					    26 LOAD_CONST 2 ( 1 )					  
							      28 LOAD_FAST 2 ( i )					    28 BINARY_SUBTRACT						  
							      30 BINARY_SUBSCR						    30 LOAD_CONST 3 ( 2 )					  
							      32 CALL_FUNCTION 1					    32 BINARY_MULTIPLY						  
							      34 LOAD_GLOBAL 2 ( ord )					    34 CALL_FUNCTION 1						  
							      36 LOAD_CONST 2 ( 'a' )					    36 LOAD_CONST 4 ( 3 )					  
							      38 CALL_FUNCTION 1					    38 BINARY_MULTIPLY						  
							      40 BINARY_SUBTRACT					    40 BINARY_ADD						  
							      42 COMPARE_OP 2 ( == )					    42 STORE_FAST 3 ( i )					  
							      44 POP_JUMP_IF_TRUE 70					    								  
							      46 LOAD_FAST 2 ( i )					    29 44 LOAD_FAST 0 ( str )					  
							      48 LOAD_GLOBAL 2 ( ord )					    46 LOAD_GLOBAL 2 ( int )					  
							      50 LOAD_FAST 0 ( str )					    48 LOAD_FAST 3 ( i )					  
							      52 LOAD_FAST 2 ( i )					    50 CALL_FUNCTION 1						  
							      54 BINARY_SUBSCR						    52 LOAD_CONST 5 ( 1 )					  
							      56 CALL_FUNCTION 1					    54 BINARY_SUBTRACT						  
							      58 LOAD_GLOBAL 2 ( ord )					    56 BINARY_MULTIPLY						  
							      60 LOAD_CONST 3 ( 'A' )					    58 STORE_FAST 4 ( i )					  
							      62 CALL_FUNCTION 1					    								  
							      64 BINARY_SUBTRACT					    30 60 LOAD_FAST 0 ( str )					  
							      66 COMPARE_OP 2 ( == )					    62 LOAD_GLOBAL 3 ( int )					  
							      68 POP_JUMP_IF_FALSE 18					    64 LOAD_FAST 4 ( i )					  
							      								    66 CALL_FUNCTION 1						  
							      5 >> 70 LOAD_FAST 1 ( result )				    68 LOAD_CONST 6 ( 2 )					  
							      72 LOAD_CONST 4 ( 1 )					    70 BINARY_MULTIPLY						  
							      74 INPLACE_ADD						    72 BINARY_MULTIPLY						  
							      76 STORE_FAST 1 ( result )				    74 BINARY_ADD						  
							      78 JUMP_ABSOLUTE 18					    76 STORE_FAST 5 ( i )					  
							      >> 80 POP_BLOCK						    								  
							      								    31 78 LOAD_FAST 0 ( str )					  
							      6 >> 82 LOAD_FAST 1 ( result )				    80 LOAD_GLOBAL 4 ( str )					  
							      84 RETURN_VALUE NEW_LINE					    82 LOAD_FAST 5 ( i )					  
							      								    84 CALL_FUNCTION 1						  
							      								    86 BINARY_ADD						  
							      								    88 STORE_FAST 6 ( i )					  
							      								    								  
							      								    32 90 LOAD_FAST 0 ( str )					  
							      								    92 LOAD_GLOBAL 5 ( str )					  
							      								    94 LOAD_FAST 6 ( i )					  
							      								    96 CALL_FUNCTION 1						  
							      								    98 BINARY_ADD						  
							      								    100 CALL_FUNCTION 1						  
							      								    102 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
def minPerimeter ( n ) :				      Disassembly of <code object minPerimeter at 0x7fbac<<unk>> de Disassembly of <code object minPerimeter at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    l = math.sqrt ( n )					      2 0 LOAD_GLOBAL 0 ( math )				    26 0 LOAD_FAST 1 ( l )					  "XLM/dis_script.py", line 60, in <module>	exec
    sq = l * l						      2 LOAD_METHOD 1 ( sqrt )					    2 LOAD_GLOBAL 0 ( math )					  (item)   File "main.py", line 39, in <module>	  Fi
    if ( sq == n ) :					      4 LOAD_FAST 0 ( n )					    4 LOAD_METHOD 1 ( sqrt )					  le "<dis>", line 2, in minPerimeter UnboundLocalEr
	return l * 4					      6 CALL_METHOD 1						    6 LOAD_FAST 0 ( n )						  ror: local variable 'l' referenced before assignme
    else :						      8 STORE_FAST 1 ( l )					    8 LOAD_FAST 1 ( l )						  nt
	row = n / l					      								    10 BINARY_MULTIPLY						  
	perimeter = 2 * ( l + row )			      3 10 LOAD_FAST 1 ( l )					    12 CALL_METHOD 1						  
	if ( n % l != 0 ) :				      12 LOAD_FAST 1 ( l )					    14 BINARY_MULTIPLY						  
	    perimeter += 2				      14 BINARY_MULTIPLY					    16 BINARY_ADD						  
	return perimeter				      16 STORE_FAST 2 ( sq )					    18 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 18 LOAD_FAST 2 ( sq )					    								  
							      20 LOAD_FAST 0 ( n )					    								  
							      22 COMPARE_OP 2 ( == )					    								  
							      24 POP_JUMP_IF_FALSE 34					    								  
							      								    								  
							      5 26 LOAD_FAST 1 ( l )					    								  
							      28 LOAD_CONST 1 ( 4 )					    								  
							      30 BINARY_MULTIPLY					    								  
							      32 RETURN_VALUE						    								  
							      								    								  
							      7 >> 34 LOAD_FAST 0 ( n )					    								  
							      36 LOAD_FAST 1 ( l )					    								  
							      38 BINARY_TRUE_DIVIDE					    								  
							      40 STORE_FAST 3 ( row )					    								  
							      								    								  
							      8 42 LOAD_CONST 2 ( 2 )					    								  
							      44 LOAD_FAST 1 ( l )					    								  
							      46 LOAD_FAST 3 ( row )					    								  
							      48 BINARY_ADD						    								  
							      50 BINARY_MULTIPLY					    								  
							      52 STORE_FAST 4 ( perimeter )				    								  
							      								    								  
							      9 54 LOAD_FAST 0 ( n )					    								  
							      56 LOAD_FAST 1 ( l )					    								  
							      58 BINARY_MODULO						    								  
							      60 LOAD_CONST 3 ( 0 )					    								  
							      62 COMPARE_OP 3 ( != )					    								  
							      64 POP_JUMP_IF_FALSE 74					    								  
							      								    								  
							      10 66 LOAD_FAST 4 ( perimeter )				    								  
							      68 LOAD_CONST 2 ( 2 )					    								  
							      70 INPLACE_ADD						    								  
							      72 STORE_FAST 4 ( perimeter )				    								  
							      								    								  
							      11 >> 74 LOAD_FAST 4 ( perimeter )			    								  
							      76 RETURN_VALUE						    								  
							      78 LOAD_CONST 0 ( None )					    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
def minXOR ( arr , n ) :				      Disassembly of <code object minXOR at 0x7fbac<<unk>> d540, fi Disassembly of <code object minXOR at 0x7f816a6e4b70, file "< error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    minXor = int ( sys.float_info.max )			      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    val = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( 0 , n - 1 ) :			      6 POP_TOP							    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	val = arr [ i ] ^ arr [ i + 1 ] ;		      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	minXor = min ( minXor , val ) ;			      3 8 LOAD_GLOBAL 1 ( int )					    27 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
    return minXor					      10 LOAD_GLOBAL 2 ( sys )					    10 LOAD_CONST 1 ( 1 )					  n parse     code.append(arg) ValueError: byte must
							      12 LOAD_ATTR 3 ( float_info )				    12 INPLACE_ADD						   be in range(0, 256)
							      14 LOAD_ATTR 4 ( max )					    14 STORE_FAST 1 ( n )					  
							      16 CALL_FUNCTION 1					    								  
							      18 STORE_FAST 2 ( minXor )				    28 16 LOAD_FAST 1 ( n )					  
							      								    18 LOAD_CONST 2 ( 0 )					  
							      4 20 LOAD_CONST 1 ( 0 )					    20 COMPARE_OP 4 ( > )					  
							      22 STORE_FAST 3 ( val )					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 SETUP_LOOP 52 ( to 78 )				    29 24 LOAD_FAST 1 ( n )					  
							      26 LOAD_GLOBAL 5 ( range )				    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_CONST 1 ( 0 )					    28 INPLACE_ADD						  
							      30 LOAD_FAST 1 ( n )					    30 STORE_FAST 1 ( n )					  
							      32 LOAD_CONST 2 ( 1 )					    								  
							      34 BINARY_SUBTRACT					    30 >> 32 LOAD_FAST 1 ( n )					  
							      36 CALL_FUNCTION 2					    34 LOAD_CONST 4 ( - 1 )					  
							      38 GET_ITER						    36 INPLACE_ADD						  
							      >> 40 FOR_ITER 34 ( to 76 )				    38 STORE_FAST 1 ( n )					  
							      42 STORE_FAST 4 ( i )					    40 JUMP_FORWARD 4 ( to 34 )					  
							      								    								  
							      6 44 LOAD_FAST 0 ( arr )					    31 >> 42 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 4 ( i )					    44 LOAD_CONST 5 ( 1 )					  
							      48 BINARY_SUBSCR						    46 INPLACE_ADD						  
							      50 LOAD_FAST 0 ( arr )					    48 STORE_FAST 1 ( n )					  
							      52 LOAD_FAST 4 ( i )					    								  
							      54 LOAD_CONST 2 ( 1 )					    32 50 LOAD_FAST 1 ( n )					  
							      56 BINARY_ADD						    52 LOAD_CONST 6 ( 2 )					  
							      58 BINARY_SUBSCR						    54 INPLACE_ADD						  
							      60 BINARY_XOR						    56 STORE_FAST 1 ( n )					  
							      62 STORE_FAST 3 ( val )					    								  
							      								    33 58 LOAD_FAST 1 ( n )					  
							      7 64 LOAD_GLOBAL 6 ( min )				    60 LOAD_CONST 7 ( 2 )					  
							      66 LOAD_FAST 2 ( minXor )					    62 INPLACE_ADD						  
							      68 LOAD_FAST 3 ( val )					    64 STORE_FAST 1 ( n )					  
							      70 CALL_FUNCTION 2					    								  
							      72 STORE_FAST 2 ( minXor )				    34 >> 66 LOAD_FAST 1 ( n )					  
							      74 JUMP_ABSOLUTE 40					    68 LOAD_CONST 8 ( - 2 )					  
							      >> 76 POP_BLOCK						    70 INPLACE_ADD						  
							      								    72 STORE_FAST 1 ( n )					  
							      8 >> 78 LOAD_FAST 2 ( minXor )				    74 JUMP_FORWARD 4 ( to 76 )					  
							      80 RETURN_VALUE NEW_LINE					    								  
							      								    35 >> 76 LOAD_FAST 1 ( n )					  
							      								    78 LOAD_CONST 9 ( 2 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( n )					  
							      								    								  
							      								    36 84 LOAD_FAST 1 ( n )					  
							      								    86 LOAD_CONST 10 ( 2 )					  
							      								    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( n )					  
							      								    								  
							      								    37 >> 92 LOAD_FAST 1 ( n )					  
							      								    94 LOAD_CONST 11 ( - 2 )					  
							      								    96 INPLACE_ADD						  
							      								    98 STORE_FAST 1 ( n )					  
							      								    100 STORE_FAST 1 ( n )					  
							      								    								  
							      								    38 102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_FAST 1 ( n )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( n )					  
							      								    								  
							      								    39 110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_FAST 0 ( arr )					  
							      								    114 LOAD_FAST 1 ( n )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_FAST 1 ( n )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 1 ( n )					  
							      								    128 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_FAST 1 ( n )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 138 LOAD_FAST 1 ( n )					  
							      								    140 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW      DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW	    DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW	  DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW
--							      --							    --								  --
def find_difference ( arr , n , m ) :			      Disassembly of <code object find_difference at 0x7fbac0e8bc90 Disassembly of <code object find_difference at 0x7f8169febf60 error : Traceback (most recent call last):   File
    max = 0 ; min = 0					      2 0 LOAD_CONST 1 ( 0 )					    108 0 LOAD_GLOBAL 0 ( max )					  "XLM/dis_script.py", line 59, in <module>	for
    arr.sort ( ) ;					      2 STORE_FAST 3 ( max )					    2 LOAD_FAST 0 ( arr )					  item in run_dis_script():   File "XLM/dis_script.p
    j = n - 1						      4 LOAD_CONST 1 ( 0 )					    4 CALL_FUNCTION 1						  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( m ) :				      6 STORE_FAST 4 ( min )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	min += arr [ i ]				      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	max += arr [ j ]				      3 8 LOAD_FAST 0 ( arr )					    109 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	j = j - 1					      10 LOAD_METHOD 0 ( sort )					    10 LOAD_CONST 1 ( 1 )					  n parse     code.append(arg) ValueError: byte must
    return ( max - min )				      12 CALL_METHOD 0						    12 COMPARE_OP 4 ( > )					   be in range(0, 256)
							      14 POP_TOP						    14 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      4 16 LOAD_FAST 1 ( n )					    110 16 LOAD_FAST 1 ( n )					  
							      18 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 2 ( 0 )					  
							      20 BINARY_SUBTRACT					    20 COMPARE_OP 4 ( > )					  
							      22 STORE_FAST 5 ( j )					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 SETUP_LOOP 48 ( to 74 )				    111 24 LOAD_FAST 1 ( n )					  
							      26 LOAD_GLOBAL 1 ( range )				    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_FAST 2 ( m )					    28 INPLACE_ADD						  
							      30 CALL_FUNCTION 1					    30 STORE_FAST 1 ( n )					  
							      32 GET_ITER						    								  
							      >> 34 FOR_ITER 36 ( to 72 )				    112 >> 32 LOAD_FAST 1 ( n )					  
							      36 STORE_FAST 6 ( i )					    34 LOAD_CONST 4 ( 0 )					  
							      								    36 COMPARE_OP 4 ( > )					  
							      6 38 LOAD_FAST 4 ( min )					    38 POP_JUMP_IF_FALSE 48					  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 6 ( i )					    113 40 LOAD_FAST 1 ( n )					  
							      44 BINARY_SUBSCR						    42 LOAD_CONST 5 ( 1 )					  
							      46 INPLACE_ADD						    44 INPLACE_ADD						  
							      48 STORE_FAST 4 ( min )					    46 STORE_FAST 1 ( n )					  
							      								    								  
							      7 50 LOAD_FAST 3 ( max )					    114 48 LOAD_FAST 1 ( n )					  
							      52 LOAD_FAST 0 ( arr )					    50 LOAD_CONST 6 ( 2 )					  
							      54 LOAD_FAST 5 ( j )					    52 INPLACE_ADD						  
							      56 BINARY_SUBSCR						    54 STORE_FAST 1 ( n )					  
							      58 INPLACE_ADD						    								  
							      60 STORE_FAST 3 ( max )					    115 56 LOAD_FAST 1 ( n )					  
							      								    58 LOAD_CONST 7 ( 2 )					  
							      8 62 LOAD_FAST 5 ( j )					    60 INPLACE_ADD						  
							      64 LOAD_CONST 2 ( 1 )					    62 STORE_FAST 1 ( n )					  
							      66 BINARY_SUBTRACT					    								  
							      68 STORE_FAST 5 ( j )					    116 64 LOAD_FAST 1 ( n )					  
							      70 JUMP_ABSOLUTE 34					    66 LOAD_CONST 8 ( 2 )					  
							      >> 72 POP_BLOCK						    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( n )					  
							      9 >> 74 LOAD_FAST 3 ( max )				    								  
							      76 LOAD_FAST 4 ( min )					    117 72 LOAD_FAST 1 ( n )					  
							      78 BINARY_SUBTRACT					    74 LOAD_CONST 9 ( 2 )					  
							      80 RETURN_VALUE NEW_LINE					    76 INPLACE_ADD						  
							      								    78 STORE_FAST 1 ( n )					  
							      								    80 JUMP_FORWARD 4 ( to 80 )					  
							      								    								  
							      								    119 >> 82 LOAD_FAST 1 ( n )					  
							      								    84 LOAD_CONST 10 ( 2 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( n )					  
							      								    								  
							      								    120 >> 90 LOAD_FAST 1 ( n )					  
							      								    92 LOAD_CONST 11 ( 2 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 1 ( n )					  
							      								    								  
							      								    121 98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_CONST 12 ( 2 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( n )					  
							      								    								  
							      								    122 106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_CONST 13 ( 2 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( n )					  
							      								    								  
							      								    123 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 14 ( 2 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( n )					  
							      								    122 JUMP_FORWARD 4 ( to 80 )				  
							      								    								  
							      								    124 >> 124 LOAD_FAST 1 ( n )				  
							      								    126 LOAD_CONST 15 ( 2 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    								  
							      								    125 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_CONST 15 ( 2 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    126 >> 140 LOAD_FAST 1 ( n )				  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX				      PROGRAM_PRINT_IDENTITY_MATRIX				    PROGRAM_PRINT_IDENTITY_MATRIX				  PROGRAM_PRINT_IDENTITY_MATRIX
--							      --							    --								  --
def Identity ( size ) :					      Disassembly of <code object Identity at 0x7fbac0e89d20, file  Disassembly of <code object Identity at 0x7f816a6e4b70, file  script_not_found : None
    for row in range ( 0 , size ) :			      2 0 SETUP_LOOP 78 ( to 80 )				    16 0 SETUP_LOOP 28 ( to 30 )				  
	for col in range ( 0 , size ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( size )					  
	    if ( row == col ) :				      4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  
		print ( "1 " , end = " " )		      6 LOAD_FAST 0 ( size )					    >> 6 FOR_ITER 14 ( to 28 )					  
	    else :					      8 CALL_FUNCTION 2						    8 STORE_FAST 1 ( size )					  
		print ( "0 " , end = " " )		      10 GET_ITER						    								  
	print ( )					      >> 12 FOR_ITER 64 ( to 78 )				    17 10 LOAD_GLOBAL 0 ( print )				  
							      14 STORE_FAST 1 ( row )					    12 LOAD_CONST 1 ( "▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁						  
							      								    								  
							      3 16 SETUP_LOOP 52 ( to 70 )				    								  
							      18 LOAD_GLOBAL 0 ( range )				    								  
							      20 LOAD_CONST 1 ( 0 )					    								  
							      22 LOAD_FAST 0 ( size )					    								  
							      24 CALL_FUNCTION 2					    								  
							      26 GET_ITER						    								  
							      >> 28 FOR_ITER 38 ( to 68 )				    								  
							      30 STORE_FAST 2 ( col )					    								  
							      								    								  
							      4 32 LOAD_FAST 1 ( row )					    								  
							      34 LOAD_FAST 2 ( col )					    								  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 54					    								  
							      								    								  
							      5 40 LOAD_GLOBAL 1 ( print )				    								  
							      42 LOAD_CONST 2 ( '1 ' )					    								  
							      44 LOAD_CONST 3 ( ' ' )					    								  
							      46 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      48 CALL_FUNCTION_KW 2					    								  
							      50 POP_TOP						    								  
							      52 JUMP_ABSOLUTE 28					    								  
							      								    								  
							      7 >> 54 LOAD_GLOBAL 1 ( print )				    								  
							      56 LOAD_CONST 5 ( '0 ' )					    								  
							      58 LOAD_CONST 3 ( ' ' )					    								  
							      60 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      62 CALL_FUNCTION_KW 2					    								  
							      64 POP_TOP						    								  
							      66 JUMP_ABSOLUTE 28					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      8 >> 70 LOAD_GLOBAL 1 ( print )				    								  
							      72 CALL_FUNCTION 0					    								  
							      74 POP_TOP						    								  
							      76 JUMP_ABSOLUTE 12					    								  
							      >> 78 POP_BLOCK						    								  
							      >> 80 LOAD_CONST 0 ( None )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_ZEROES_END_ARRAY					      MOVE_ZEROES_END_ARRAY					    MOVE_ZEROES_END_ARRAY					  MOVE_ZEROES_END_ARRAY
--							      --							    --								  --
def pushZerosToEnd ( arr , n ) :			      Disassembly of <code object pushZerosToEnd at 0x7fbac0e89d20, Disassembly of <code object pushZerosToEnd at 0x7f816a673a50, error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 STORE_FAST 2 ( count )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	if arr [ i ] != 0 :				      								    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
	    arr [ count ] = arr [ i ]			      3 4 SETUP_LOOP 48 ( to 54 )				    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	    count += 1					      6 LOAD_GLOBAL 0 ( range )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    while count < n :					      8 LOAD_FAST 1 ( n )					    27 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	arr [ count ] = 0				      10 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	count += 1					      12 GET_ITER						    12 INPLACE_ADD						   be in range(0, 256)
							      >> 14 FOR_ITER 36 ( to 52 )				    14 STORE_FAST 1 ( n )					  
							      16 STORE_FAST 3 ( i )					    16 JUMP_FORWARD 30 ( to 46 )				  
							      								    								  
							      4 18 LOAD_FAST 0 ( arr )					    28 >> 18 LOAD_FAST 1 ( n )					  
							      20 LOAD_FAST 3 ( i )					    20 LOAD_CONST 3 ( 1 )					  
							      22 BINARY_SUBSCR						    22 INPLACE_ADD						  
							      24 LOAD_CONST 1 ( 0 )					    24 STORE_FAST 1 ( n )					  
							      26 COMPARE_OP 3 ( != )					    								  
							      28 POP_JUMP_IF_FALSE 14					    29 26 LOAD_FAST 1 ( n )					  
							      								    28 LOAD_CONST 4 ( 2 )					  
							      5 30 LOAD_FAST 0 ( arr )					    30 INPLACE_ADD						  
							      32 LOAD_FAST 3 ( i )					    32 STORE_FAST 1 ( n )					  
							      34 BINARY_SUBSCR						    34 JUMP_FORWARD 30 ( to 46 )				  
							      36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 2 ( count )					    30 >> 36 LOAD_FAST 1 ( n )					  
							      40 STORE_SUBSCR						    38 LOAD_CONST 5 ( 1 )					  
							      								    40 INPLACE_ADD						  
							      6 42 LOAD_FAST 2 ( count )				    42 STORE_FAST 1 ( n )					  
							      44 LOAD_CONST 2 ( 1 )					    44 JUMP_FORWARD 30 ( to 46 )				  
							      46 INPLACE_ADD						    								  
							      48 STORE_FAST 2 ( count )					    31 >> 46 LOAD_FAST 1 ( n )					  
							      50 JUMP_ABSOLUTE 14					    48 LOAD_CONST 6 ( 2 )					  
							      >> 52 POP_BLOCK						    50 INPLACE_ADD						  
							      								    52 STORE_FAST 1 ( n )					  
							      7 >> 54 SETUP_LOOP 28 ( to 84 )				    								  
							      >> 56 LOAD_FAST 2 ( count )				    32 54 LOAD_FAST 1 ( n )					  
							      58 LOAD_FAST 1 ( n )					    56 LOAD_CONST 7 ( 2 )					  
							      60 COMPARE_OP 0 ( < )					    58 INPLACE_ADD						  
							      62 POP_JUMP_IF_FALSE 82					    60 STORE_FAST 1 ( n )					  
							      								    								  
							      8 64 LOAD_CONST 1 ( 0 )					    33 >> 62 LOAD_FAST 1 ( n )					  
							      66 LOAD_FAST 0 ( arr )					    64 LOAD_CONST 8 ( 3 )					  
							      68 LOAD_FAST 2 ( count )					    66 INPLACE_ADD						  
							      70 STORE_SUBSCR						    68 STORE_FAST 1 ( n )					  
							      								    								  
							      9 72 LOAD_FAST 2 ( count )				    34 70 LOAD_FAST 1 ( n )					  
							      74 LOAD_CONST 2 ( 1 )					    72 LOAD_CONST 9 ( 4 )					  
							      76 INPLACE_ADD						    74 INPLACE_ADD						  
							      78 STORE_FAST 2 ( count )					    76 STORE_FAST 1 ( n )					  
							      80 JUMP_ABSOLUTE 56					    78 JUMP_FORWARD 4 ( to 46 )					  
							      >> 82 POP_BLOCK						    								  
							      >> 84 LOAD_CONST 0 ( None )				    35 >> 80 LOAD_FAST 1 ( n )					  
							      86 RETURN_VALUE NEW_LINE					    82 LOAD_CONST 10 ( 2 )					  
							      								    84 INPLACE_ADD						  
							      								    86 STORE_FAST 1 ( n )					  
							      								    								  
							      								    36 >> 88 LOAD_FAST 1 ( n )					  
							      								    90 LOAD_CONST 11 ( 4 )					  
							      								    92 INPLACE_ADD						  
							      								    94 STORE_FAST 1 ( n )					  
							      								    								  
							      								    37 >> 96 LOAD_FAST 1 ( n )					  
							      								    98 LOAD_FAST 0 ( arr )					  
							      								    100 LOAD_CONST 12 ( 2 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( n )					  
							      								    								  
							      								    38 106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_CONST 13 ( 1 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( n )					  
							      								    								  
							      								    39 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 14 ( 2 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 122 LOAD_FAST 1 ( n )					  
							      								    124 LOAD_FAST 0 ( arr )					  
							      								    126 LOAD_CONST 15 ( 2 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_CONST 16 ( 2 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 140 LOAD_FAST 1 ( n )					  
							      								    142 LOAD_FAST 1 ( n )					  
							      								    144 INPLACE_ADD						  
							      								    146 STORE_FAST 1 ( n )					  
							      								    148								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_MAJORITY_ELEMENT				      CHECK_ARRAY_MAJORITY_ELEMENT				    CHECK_ARRAY_MAJORITY_ELEMENT				  CHECK_ARRAY_MAJORITY_ELEMENT
--							      --							    --								  --
def isMajority ( a ) :					      Disassembly of <code object isMajority at 0x7fbac<<unk>> de40 Disassembly of <code object isMajority at 0x7f816a673a50, fil script_not_found : None
    mp = { }						      2 0 BUILD_MAP 0						    26 0 LOAD_CONST 1 ( '{}' )					  
    for i in a :					      2 STORE_FAST 1 ( mp )					    2 LOAD_METHOD 0 ( format )					  
	if i in mp : mp [ i ] += 1			      								    4 LOAD_FAST 0 ( a )						  
	else : mp [ i ] = 1				      3 4 SETUP_LOOP 46 ( to 52 )				    6 CALL_METHOD 1						  
    for x in mp :					      6 LOAD_FAST 0 ( a )					    8 STORE_FAST 1 ( mp )					  
	if mp [ x ] >= len ( a ) // 2 :			      8 GET_ITER						    								  
	    return True					      >> 10 FOR_ITER 38 ( to 50 )				    27 10 LOAD_FAST 1 ( mp )					  
    return False					      12 STORE_FAST 2 ( i )					    12 LOAD_METHOD 1 ( keys )					  
							      								    14 CALL_METHOD 0						  
							      4 14 LOAD_FAST 2 ( i )					    16 STORE_FAST 2 ( keys )					  
							      16 LOAD_FAST 1 ( mp )					    								  
							      18 COMPARE_OP 6 ( in )					    28 18 LOAD_FAST 2 ( keys )					  
							      20 POP_JUMP_IF_FALSE 40					    20 POP_JUMP_IF_FALSE 26					  
							      22 LOAD_FAST 1 ( mp )					    22 LOAD_FAST 2 ( keys )					  
							      24 LOAD_FAST 2 ( i )					    24 LOAD_CONST 2 ( 'keys' )					  
							      26 DUP_TOP_TWO						    26 BINARY_SUBSCR						  
							      28 BINARY_SUBSCR						    28 LOAD_FAST 1 ( mp )					  
							      30 LOAD_CONST 1 ( 1 )					    30 LOAD_METHOD 2 ( keys )					  
							      32 INPLACE_ADD						    32 CALL_METHOD 0						  
							      34 ROT_THREE						    34 COMPARE_OP 6 ( in )					  
							      36 STORE_SUBSCR						    36 POP_JUMP_IF_FALSE 44					  
							      38 JUMP_ABSOLUTE 10					    								  
							      								    29 38 LOAD_FAST 2 ( keys )					  
							      5 >> 40 LOAD_CONST 1 ( 1 )				    40 LOAD_METHOD 3 ( keys )					  
							      42 LOAD_FAST 1 ( mp )					    42 CALL_METHOD 0						  
							      44 LOAD_FAST 2 ( i )					    44 COMPARE_OP 6 ( in )					  
							      46 STORE_SUBSCR						    46 POP_JUMP_IF_FALSE 44					  
							      48 JUMP_ABSOLUTE 10					    								  
							      >> 50 POP_BLOCK						    30 48 LOAD_FAST 2 ( keys )					  
							      								    50 LOAD_METHOD 4 ( keys )					  
							      6 >> 52 SETUP_LOOP 36 ( to 90 )				    52 CALL_METHOD 0						  
							      54 LOAD_FAST 1 ( mp )					    54 LOAD_METHOD 5 ( keys )					  
							      56 GET_ITER						    56 CALL_METHOD 0						  
							      >> 58 FOR_ITER 28 ( to 88 )				    58 COMPARE_OP 6 ( in )					  
							      60 STORE_FAST 3 ( x )					    60 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 62 LOAD_FAST 1 ( mp )					    31 62 LOAD_FAST 2 ( keys )					  
							      64 LOAD_FAST 3 ( x )					    64 LOAD_METHOD 6 ( keys )					  
							      66 BINARY_SUBSCR						    66 CALL_METHOD 0						  
							      68 LOAD_GLOBAL 0 ( len )					    68 LOAD_METHOD 7 ( keys )					  
							      70 LOAD_FAST 0 ( a )					    70 CALL_METHOD 0						  
							      72 CALL_FUNCTION 1					    72 LOAD_METHOD 8 ( keys )					  
							      74 LOAD_CONST 2 ( 2 )					    74 CALL_METHOD 0						  
							      76 BINARY_FLOOR_DIVIDE					    76 LOAD_METHOD 9 ( keys )					  
							      78 COMPARE_OP 5 ( >= )					    78 CALL_METHOD 0						  
							      80 POP_JUMP_IF_FALSE 58					    80 LOAD_METHOD 10 ( keys )					  
							      								    82 CALL_METHOD 0						  
							      8 82 LOAD_CONST 3 ( True )				    84 LOAD_METHOD 11 ( keys )					  
							      84 RETURN_VALUE						    86 CALL_METHOD 0						  
							      86 JUMP_ABSOLUTE 58					    88 LOAD_METHOD 12 ( keys )					  
							      >> 88 POP_BLOCK						    90 CALL_METHOD 0						  
							      								    92 LOAD_METHOD 13 ( keys )					  
							      9 >> 90 LOAD_CONST 4 ( False )				    94 CALL_METHOD 0						  
							      92 RETURN_VALUE NEW_LINE					    96 LOAD_METHOD 14 ( keys )					  
							      								    98 CALL_METHOD 0						  
							      								    100 LOAD_METHOD 15 ( keys )					  
							      								    102 CALL_METHOD 0						  
							      								    104 CALL_METHOD 1						  
							      								    106 LOAD_METHOD 16 ( keys )					  
							      								    108 CALL_METHOD 0						  
							      								    110 CALL_METHOD 1						  
							      								    112 LOAD_METHOD 17 ( keys )					  
							      								    114 CALL_METHOD 0						  
							      								    116 LOAD_METHOD 18 ( keys )					  
							      								    118 CALL_METHOD 0						  
							      								    120 LOAD_METHOD 19 ( keys )					  
							      								    122 CALL_METHOD 0						  
							      								    124 LOAD_METHOD 20 ( keys )					  
							      								    126 CALL_METHOD 0						  
							      								    128 CALL_METHOD 1						  
							      								    130 LOAD_METHOD 22 ( keys )					  
							      								    132 CALL_METHOD 0						  
							      								    134 LOAD_METHOD 21 ( keys )					  
							      								    136 CALL_METHOD 0						  
							      								    138 CALL_METHOD 1						  
							      								    140 LOAD_METHOD 22 ( keys )					  
							      								    142 CALL_METHOD 0						  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND
--							      --							    --								  --
def findMissing ( a , b , n , m ) :			      Disassembly of <code object findMissing at 0x7fbac0e8bc90, fi Disassembly of <code object findMissing at 0x7f816a683c00, fi script_not_found : None
    for i in range ( n ) :				      2 0 SETUP_LOOP 80 ( to 82 )				    108 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( m ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    if ( a [ i ] == b [ j ] ) :			      4 LOAD_FAST 2 ( n )					    4 LOAD_FAST 1 ( b )						  
		break					      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
	if ( j == m - 1 ) :				      8 GET_ITER						    8 GET_ITER							  
	    print ( a [ i ] , end = " " )		      >> 10 FOR_ITER 68 ( to 80 )				    >> 10 FOR_ITER 14 ( to 22 )					  
							      12 STORE_FAST 4 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 SETUP_LOOP 34 ( to 50 )				    109 14 LOAD_FAST 0 ( a )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 3 ( m )					    18 COMPARE_OP 4 ( > )					  
							      20 CALL_FUNCTION 1					    20 POP_JUMP_IF_FALSE 10					  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 22 ( to 48 )				    110 22 LOAD_FAST 0 ( a )					  
							      26 STORE_FAST 5 ( j )					    24 LOAD_CONST 2 ( 1 )					  
							      								    26 COMPARE_OP 4 ( > )					  
							      4 28 LOAD_FAST 0 ( a )					    28 POP_JUMP_IF_FALSE 10					  
							      30 LOAD_FAST 4 ( i )					    								  
							      32 BINARY_SUBSCR						    111 30 LOAD_FAST 0 ( a )					  
							      34 LOAD_FAST 1 ( b )					    32 LOAD_CONST 3 ( 1 )					  
							      36 LOAD_FAST 5 ( j )					    34 COMPARE_OP 4 ( > )					  
							      38 BINARY_SUBSCR						    36 POP_JUMP_IF_FALSE 10					  
							      40 COMPARE_OP 2 ( == )					    								  
							      42 POP_JUMP_IF_FALSE 24					    112 38 LOAD_FAST 0 ( a )					  
							      								    40 LOAD_CONST 4 ( > )					  
							      5 44 BREAK_LOOP						    42 COMPARE_OP 4 ( > )					  
							      46 JUMP_ABSOLUTE 24					    44 POP_JUMP_IF_FALSE 10					  
							      >> 48 POP_BLOCK						    								  
							      								    113 46 LOAD_FAST 0 ( a )					  
							      6 >> 50 LOAD_FAST 5 ( j )					    48 LOAD_CONST 5 ( 1 )					  
							      52 LOAD_FAST 3 ( m )					    50 INPLACE_ADD						  
							      54 LOAD_CONST 1 ( 1 )					    52 STORE_FAST 0 ( a )					  
							      56 BINARY_SUBTRACT					    54 JUMP_ABSOLUTE 10						  
							      58 COMPARE_OP 2 ( == )					    >> 56 POP_BLOCK						  
							      60 POP_JUMP_IF_FALSE 10					    								  
							      								    114 >> 58 LOAD_FAST 0 ( a )					  
							      7 62 LOAD_GLOBAL 1 ( print )				    60 RETURN_VALUE						  
							      64 LOAD_FAST 0 ( a )					    NEW_LINE							  
							      66 LOAD_FAST 4 ( i )					    								  
							      68 BINARY_SUBSCR						    								  
							      70 LOAD_CONST 2 ( ' ' )					    								  
							      72 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      74 CALL_FUNCTION_KW 2					    								  
							      76 POP_TOP						    								  
							      78 JUMP_ABSOLUTE 10					    								  
							      >> 80 POP_BLOCK						    								  
							      >> 82 LOAD_CONST 0 ( None )				    								  
							      84 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
def nonFibonacci ( n ) :				      Disassembly of <code object nonFibonacci at 0x7fbac<<unk>> de Disassembly of <code object nonFibonacci at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    prevPrev = 1					      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_GLOBAL 0 ( prevPrev )				  "XLM/dis_script.py", line 59, in <module>	for
    prev = 2						      2 STORE_FAST 1 ( prevPrev )				    2 LOAD_FAST 0 ( n )						  item in run_dis_script():   File "XLM/dis_script.p
    curr = 3						      								    4 CALL_FUNCTION 1						  y", line 47, in run_dis_script     co_code, co_nlo
    while n > 0 :					      3 4 LOAD_CONST 2 ( 2 )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	prevPrev = prev					      6 STORE_FAST 2 ( prev )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	prev = curr					      								    27 8 LOAD_FAST 1 ( n )					  pack non-iterable NoneType object
	curr = prevPrev + prev				      4 8 LOAD_CONST 3 ( 3 )					    10 LOAD_CONST 1 ( - 1 )					  
	n = n - ( curr - prev - 1 )			      10 STORE_FAST 3 ( curr )					    12 BINARY_SUBSCR						  
    n = n + ( curr - prev - 1 )				      								    14 STORE_FAST 2 ( n )					  
    return prev + n					      5 12 SETUP_LOOP 44 ( to 58 )				    								  
							      >> 14 LOAD_FAST 0 ( n )					    28 16 LOAD_FAST 2 ( n )					  
							      16 LOAD_CONST 4 ( 0 )					    18 LOAD_CONST 2 ( - 1 )					  
							      18 COMPARE_OP 4 ( > )					    20 BINARY_SUBSCR						  
							      20 POP_JUMP_IF_FALSE 56					    22 STORE_FAST 3 ( n )					  
							      								    								  
							      6 22 LOAD_FAST 2 ( prev )					    29 24 LOAD_FAST 3 ( n )					  
							      24 STORE_FAST 1 ( prevPrev )				    26 LOAD_CONST 3 ( '%d' )					  
							      								    28 LOAD_FAST 1 ( n )					  
							      7 26 LOAD_FAST 3 ( curr )					    30 BINARY_MODULO						  
							      28 STORE_FAST 2 ( prev )					    32 STORE_FAST 4 ( n )					  
							      								    								  
							      8 30 LOAD_FAST 1 ( prevPrev )				    30 34 LOAD_FAST 4 ( n )					  
							      32 LOAD_FAST 2 ( prev )					    36 LOAD_CONST 4 ( - 1 )					  
							      34 BINARY_ADD						    38 BINARY_SUBSCR						  
							      36 STORE_FAST 3 ( curr )					    40 LOAD_FAST 1 ( n )					  
							      								    42 LOAD_CONST 5 ( - 1 )					  
							      9 38 LOAD_FAST 0 ( n )					    44 BINARY_SUBSCR						  
							      40 LOAD_FAST 3 ( curr )					    46 LOAD_FAST 1 ( n )					  
							      42 LOAD_FAST 2 ( prev )					    48 LOAD_CONST 6 ( - 1 )					  
							      44 BINARY_SUBTRACT					    50 BINARY_SUBSCR						  
							      46 LOAD_CONST 1 ( 1 )					    52 LOAD_FAST 1 ( n )					  
							      48 BINARY_SUBTRACT					    54 LOAD_CONST 7 ( - 1 )					  
							      50 BINARY_SUBTRACT					    56 BINARY_SUBSCR						  
							      52 STORE_FAST 0 ( n )					    58 LOAD_FAST 1 ( n )					  
							      54 JUMP_ABSOLUTE 14					    60 LOAD_CONST 8 ( - 1 )					  
							      >> 56 POP_BLOCK						    62 BINARY_SUBSCR						  
							      								    64 BINARY_ADD						  
							      10 >> 58 LOAD_FAST 0 ( n )				    66 LOAD_FAST 1 ( n )					  
							      60 LOAD_FAST 3 ( curr )					    68 LOAD_CONST 9 ( - 1 )					  
							      62 LOAD_FAST 2 ( prev )					    70 BINARY_SUBSCR						  
							      64 BINARY_SUBTRACT					    72 BINARY_ADD						  
							      66 LOAD_CONST 1 ( 1 )					    74 LOAD_FAST 1 ( n )					  
							      68 BINARY_SUBTRACT					    76 LOAD_CONST 10 ( - 1 )					  
							      70 BINARY_ADD						    78 BINARY_SUBSCR						  
							      72 STORE_FAST 0 ( n )					    80 BINARY_ADD						  
							      								    82 LOAD_FAST 1 ( n )					  
							      11 74 LOAD_FAST 2 ( prev )				    84 LOAD_CONST 11 ( - 1 )					  
							      76 LOAD_FAST 0 ( n )					    86 BINARY_SUBSCR						  
							      78 BINARY_ADD						    88 BINARY_ADD						  
							      80 RETURN_VALUE NEW_LINE					    90 LOAD_FAST 1 ( n )					  
							      								    92 LOAD_CONST 12 ( - 1 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 BINARY_ADD						  
							      								    98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_CONST 13 ( - 1 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 BINARY_ADD						  
							      								    106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_CONST 14 ( - 1 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 BINARY_ADD						  
							      								    114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 15 ( - 1 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 BINARY_ADD						  
							      								    122 LOAD_FAST 1 ( n )					  
							      								    124 LOAD_CONST 16 ( - 1 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 BINARY_ADD						  
							      								    130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_CONST 17 ( - 1 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 BINARY_ADD						  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 LOAD_CONST 16 ( - 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_FAST 1 ( n )					  
							      								    150 LOAD_CONST 3 ( - 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 BINARY_ADD						  
							      								    156 LOAD_FAST 1 ( n )					  
							      								    158 LOAD_CONST 17 ( - 1 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 BINARY_ADD						  
							      								    164 LOAD_FAST 1 ( n )					  
							      								    166 LOAD_CONST 18 ( - 1 )					  
							      								    168 STORE_SUBSCR						  
							      								    								  
							      								    29 29 29 LOAD_FAST 1 ( n )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		      MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		    MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		  MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY
--							      --							    --								  --
def maxDistance ( arr , n ) :				      Disassembly of <code object maxDistance at 0x7fbac<<unk>> de4 Disassembly of <code object maxDistance at 0x7f816a677930, fi error : Traceback (most recent call last):   File
    mp = { }						      2 0 BUILD_MAP 0						    26 0 LOAD_CONST 1 ( '{} = {}' )				  "XLM/dis_script.py", line 60, in <module>	exec
    maxDict = 0						      2 STORE_FAST 2 ( mp )					    2 LOAD_METHOD 0 ( format )					  (item)   File "main.py", line 35, in <module>	  Fi
    for i in range ( n ) :				      								    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in maxDistance AttributeError:
	if arr [ i ] not in mp.keys ( ) :		      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_FAST 2 ( n )						   'int' object has no attribute 'format'
	    mp [ arr [ i ] ] = i			      6 STORE_FAST 3 ( maxDict )				    8 CALL_METHOD 2						  
	else :						      								    10 RETURN_VALUE						  
	    maxDict = max ( maxDict , i - mp [ arr [ i ] ] )  4 8 SETUP_LOOP 68 ( to 78 )				    NEW_LINE							  
    return maxDict					      10 LOAD_GLOBAL 0 ( range )				    								  
							      12 LOAD_FAST 1 ( n )					    								  
							      14 CALL_FUNCTION 1					    								  
							      16 GET_ITER						    								  
							      >> 18 FOR_ITER 56 ( to 76 )				    								  
							      20 STORE_FAST 4 ( i )					    								  
							      								    								  
							      5 22 LOAD_FAST 0 ( arr )					    								  
							      24 LOAD_FAST 4 ( i )					    								  
							      26 BINARY_SUBSCR						    								  
							      28 LOAD_FAST 2 ( mp )					    								  
							      30 LOAD_METHOD 1 ( keys )					    								  
							      32 CALL_METHOD 0						    								  
							      34 COMPARE_OP 7 ( not in )				    								  
							      36 POP_JUMP_IF_FALSE 52					    								  
							      								    								  
							      6 38 LOAD_FAST 4 ( i )					    								  
							      40 LOAD_FAST 2 ( mp )					    								  
							      42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 STORE_SUBSCR						    								  
							      50 JUMP_ABSOLUTE 18					    								  
							      								    								  
							      8 >> 52 LOAD_GLOBAL 2 ( max )				    								  
							      54 LOAD_FAST 3 ( maxDict )				    								  
							      56 LOAD_FAST 4 ( i )					    								  
							      58 LOAD_FAST 2 ( mp )					    								  
							      60 LOAD_FAST 0 ( arr )					    								  
							      62 LOAD_FAST 4 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 BINARY_SUBSCR						    								  
							      68 BINARY_SUBTRACT					    								  
							      70 CALL_FUNCTION 2					    								  
							      72 STORE_FAST 3 ( maxDict )				    								  
							      74 JUMP_ABSOLUTE 18					    								  
							      >> 76 POP_BLOCK						    								  
							      								    								  
							      9 >> 78 LOAD_FAST 3 ( maxDict )				    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN
--							      --							    --								  --
def minJumps ( a , b , d ) :				      Disassembly of <code object minJumps at 0x7fbac<<unk>> de40,  Disassembly of <code object minJumps at 0x7f816a6e4b70, file  error : Traceback (most recent call last):   File
    temp = a						      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 1 ( b )					  "XLM/dis_script.py", line 59, in <module>	for
    a = min ( a , b )					      2 STORE_FAST 3 ( temp )					    2 LOAD_FAST 0 ( a )						  item in run_dis_script():   File "XLM/dis_script.p
    b = max ( temp , b )				      								    4 BINARY_MULTIPLY						  y", line 54, in run_dis_script     hyp_co = mco.to
    if ( d >= b ) :					      3 4 LOAD_GLOBAL 0 ( min )					    6 LOAD_FAST 0 ( a )						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	return ( d + b - 1 ) / b			      6 LOAD_FAST 0 ( a )					    8 BINARY_MULTIPLY						  assembler.py", line 81, in to_co     co_consts.app
    if ( d == 0 ) :					      8 LOAD_FAST 1 ( b )					    10 LOAD_FAST 0 ( a )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	return 0					      10 CALL_FUNCTION 2					    12 BINARY_MULTIPLY						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    if ( d == a ) :					      12 STORE_FAST 0 ( a )					    14 LOAD_FAST 0 ( a )					  co	 self.co_cellvars, ValueError: code: varname
	return 1					      								    16 BINARY_MULTIPLY						  s is too small
    return 2						      4 14 LOAD_GLOBAL 1 ( max )				    18 LOAD_FAST 0 ( a )					  
							      16 LOAD_FAST 3 ( temp )					    20 BINARY_MULTIPLY						  
							      18 LOAD_FAST 1 ( b )					    22 BINARY_ADD						  
							      20 CALL_FUNCTION 2					    24 RETURN_VALUE						  
							      22 STORE_FAST 1 ( b )					    NEW_LINE							  
							      								    								  
							      5 24 LOAD_FAST 2 ( d )					    								  
							      26 LOAD_FAST 1 ( b )					    								  
							      28 COMPARE_OP 5 ( >= )					    								  
							      30 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      6 32 LOAD_FAST 2 ( d )					    								  
							      34 LOAD_FAST 1 ( b )					    								  
							      36 BINARY_ADD						    								  
							      38 LOAD_CONST 1 ( 1 )					    								  
							      40 BINARY_SUBTRACT					    								  
							      42 LOAD_FAST 1 ( b )					    								  
							      44 BINARY_TRUE_DIVIDE					    								  
							      46 RETURN_VALUE						    								  
							      								    								  
							      7 >> 48 LOAD_FAST 2 ( d )					    								  
							      50 LOAD_CONST 2 ( 0 )					    								  
							      52 COMPARE_OP 2 ( == )					    								  
							      54 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      8 56 LOAD_CONST 2 ( 0 )					    								  
							      58 RETURN_VALUE						    								  
							      								    								  
							      9 >> 60 LOAD_FAST 2 ( d )					    								  
							      62 LOAD_FAST 0 ( a )					    								  
							      64 COMPARE_OP 2 ( == )					    								  
							      66 POP_JUMP_IF_FALSE 72					    								  
							      								    								  
							      10 68 LOAD_CONST 1 ( 1 )					    								  
							      70 RETURN_VALUE						    								  
							      								    								  
							      11 >> 72 LOAD_CONST 3 ( 2 )				    								  
							      74 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE
--							      --							    --								  --
def checkCount ( arr , n , k ) :			      Disassembly of <code object checkCount at 0x7fbac<<unk>> de40 Disassembly of <code object checkCount at 0x7f816a673a50, fil error : /bin/bash: line 1: 25672 Segmentation faul
    for i in range ( n ) :				      2 0 SETUP_LOOP 78 ( to 80 )				    26 0 SETUP_LOOP 22 ( to 24 )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	count = 0					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( n ) :				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	    if arr [ j ] == arr [ i ] :			      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  eval_scripts/python_sa-dis_sa.test/DISTRIBUTING_IT
		count += 1				      8 GET_ITER						    8 GET_ITER							  EMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE.dis
	    if count > 2 * k :				      >> 10 FOR_ITER 66 ( to 78 )				    >> 10 FOR_ITER 14 ( to 22 )					  
		return False				      12 STORE_FAST 3 ( i )					    12 STORE_FAST 2 ( i )					  
    return True						      								    								  
							      3 14 LOAD_CONST 1 ( 0 )					    27 14 LOAD_FAST 0 ( arr )					  
							      16 STORE_FAST 4 ( count )					    16 LOAD_METHOD 1 ( append )					  
							      								    18 LOAD_FAST 2 ( i )					  
							      4 18 SETUP_LOOP 56 ( to 76 )				    20 CALL_METHOD 1						  
							      20 LOAD_GLOBAL 0 ( range )				    22 POP_TOP							  
							      22 LOAD_FAST 1 ( n )					    24 JUMP_ABSOLUTE 10						  
							      24 CALL_FUNCTION 1					    >> 26 POP_BLOCK						  
							      26 GET_ITER						    >> 28 LOAD_CONST 0 ( None )					  
							      >> 28 FOR_ITER 44 ( to 74 )				    30 RETURN_VALUE						  
							      30 STORE_FAST 5 ( j )					    NEW_LINE							  
							      								    								  
							      5 32 LOAD_FAST 0 ( arr )					    								  
							      34 LOAD_FAST 5 ( j )					    								  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 0 ( arr )					    								  
							      40 LOAD_FAST 3 ( i )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 COMPARE_OP 2 ( == )					    								  
							      46 POP_JUMP_IF_FALSE 56					    								  
							      								    								  
							      6 48 LOAD_FAST 4 ( count )				    								  
							      50 LOAD_CONST 2 ( 1 )					    								  
							      52 INPLACE_ADD						    								  
							      54 STORE_FAST 4 ( count )					    								  
							      								    								  
							      7 >> 56 LOAD_FAST 4 ( count )				    								  
							      58 LOAD_CONST 3 ( 2 )					    								  
							      60 LOAD_FAST 2 ( k )					    								  
							      62 BINARY_MULTIPLY					    								  
							      64 COMPARE_OP 4 ( > )					    								  
							      66 POP_JUMP_IF_FALSE 28					    								  
							      								    								  
							      8 68 LOAD_CONST 4 ( False )				    								  
							      70 RETURN_VALUE						    								  
							      72 JUMP_ABSOLUTE 28					    								  
							      >> 74 POP_BLOCK						    								  
							      >> 76 JUMP_ABSOLUTE 10					    								  
							      >> 78 POP_BLOCK						    								  
							      								    								  
							      9 >> 80 LOAD_CONST 5 ( True )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
def rotateMatrix ( mat ) :				      Disassembly of <code object rotateMatrix at 0x7fbac<<unk>> d5 Disassembly of <code object rotateMatrix at 0x7f816a673a50, f script_not_found : None
    i = N - 1 ;						      2 0 LOAD_GLOBAL 0 ( N )					    106 0 LOAD_CONST 1 ( - 1 )					  
    while ( i >= 0 ) :					      2 LOAD_CONST 1 ( 1 )					    2 STORE_FAST 3 ( i )					  
	j = N - 1 ;					      4 BINARY_SUBTRACT						    								  
	while ( j >= 0 ) :				      6 STORE_FAST 1 ( i )					    107 4 LOAD_GLOBAL 0 ( print )				  
	    print ( mat [ i ] [ j ] , end = " " ) ;	      								    6 LOAD_CONST 2 ( '[%i] = %i]' )				  
	    j = j - 1 ;					      3 8 SETUP_LOOP 76 ( to 86 )				    8 LOAD_FAST 3 ( i )						  
	print ( ) ;					      >> 10 LOAD_FAST 1 ( i )					    10 BINARY_MODULO						  
	i = i - 1 ;					      12 LOAD_CONST 2 ( 0 )					    12 CALL_FUNCTION 1						  
							      14 COMPARE_OP 5 ( >= )					    14 POP_TOP							  
							      16 POP_JUMP_IF_FALSE 84					    								  
							      								    108 16 LOAD_GLOBAL 1 ( print )				  
							      4 18 LOAD_GLOBAL 0 ( N )					    18 LOAD_CONST 3 ( '%s = %s' )				  
							      20 LOAD_CONST 1 ( 1 )					    20 LOAD_FAST 3 ( i )					  
							      22 BINARY_SUBTRACT					    22 BINARY_MODULO						  
							      24 STORE_FAST 2 ( j )					    24 CALL_FUNCTION 1						  
							      								    26 POP_TOP							  
							      5 26 SETUP_LOOP 40 ( to 68 )				    28 LOAD_CONST 0 ( None )					  
							      >> 28 LOAD_FAST 2 ( j )					    30 RETURN_VALUE						  
							      30 LOAD_CONST 2 ( 0 )					    NEW_LINE							  
							      32 COMPARE_OP 5 ( >= )					    								  
							      34 POP_JUMP_IF_FALSE 66					    								  
							      								    								  
							      6 36 LOAD_GLOBAL 1 ( print )				    								  
							      38 LOAD_FAST 0 ( mat )					    								  
							      40 LOAD_FAST 1 ( i )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 2 ( j )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_CONST 3 ( ' ' )					    								  
							      50 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      52 CALL_FUNCTION_KW 2					    								  
							      54 POP_TOP						    								  
							      								    								  
							      7 56 LOAD_FAST 2 ( j )					    								  
							      58 LOAD_CONST 1 ( 1 )					    								  
							      60 BINARY_SUBTRACT					    								  
							      62 STORE_FAST 2 ( j )					    								  
							      64 JUMP_ABSOLUTE 28					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      8 >> 68 LOAD_GLOBAL 1 ( print )				    								  
							      70 CALL_FUNCTION 0					    								  
							      72 POP_TOP						    								  
							      								    								  
							      9 74 LOAD_FAST 1 ( i )					    								  
							      76 LOAD_CONST 1 ( 1 )					    								  
							      78 BINARY_SUBTRACT					    								  
							      80 STORE_FAST 1 ( i )					    								  
							      82 JUMP_ABSOLUTE 10					    								  
							      >> 84 POP_BLOCK						    								  
							      >> 86 LOAD_CONST 0 ( None )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES			  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES
--							      --							    --								  --
def reorder ( arr , index , n ) :			      Disassembly of <code object reorder at 0x7fbac<<unk>> de40, f Disassembly of <code object reorder at 0x7f816a683d20, file " script_not_found : None
    temp = [ 0 ] * n ;					      2 0 LOAD_CONST 1 ( 0 )					    56 0 LOAD_FAST 1 ( index )					  
    for i in range ( 0 , n ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 0 )					  
	temp [ index [ i ] ] = arr [ i ]		      4 LOAD_FAST 2 ( n )					    4 BINARY_SUBSCR						  
    for i in range ( 0 , n ) :				      6 BINARY_MULTIPLY						    6 LOAD_FAST 0 ( self )					  
	arr [ i ] = temp [ i ]				      8 STORE_FAST 3 ( temp )					    8 LOAD_ATTR 0 ( _proxied )					  
	index [ i ] = i					      								    10 COMPARE_OP 6 ( in )					  
							      3 10 SETUP_LOOP 34 ( to 46 )				    12 POP_JUMP_IF_FALSE 20					  
							      12 LOAD_GLOBAL 0 ( range )				    								  
							      14 LOAD_CONST 1 ( 0 )					    57 14 LOAD_FAST 0 ( self )					  
							      16 LOAD_FAST 2 ( n )					    16 LOAD_ATTR 1 ( _proxied )					  
							      18 CALL_FUNCTION 2					    18 LOAD_FAST 0 ( self )					  
							      20 GET_ITER						    20 LOAD_ATTR 2 ( _proxied )					  
							      >> 22 FOR_ITER 20 ( to 44 )				    22 COMPARE_OP 6 ( in )					  
							      24 STORE_FAST 4 ( i )					    24 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      4 26 LOAD_FAST 0 ( arr )					    58 26 LOAD_FAST 0 ( self )					  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_ATTR 3 ( _proxied )					  
							      30 BINARY_SUBSCR						    30 LOAD_FAST 0 ( self )					  
							      32 LOAD_FAST 3 ( temp )					    32 LOAD_ATTR 4 ( _proxied )					  
							      34 LOAD_FAST 1 ( index )					    34 COMPARE_OP 6 ( in )					  
							      36 LOAD_FAST 4 ( i )					    36 POP_JUMP_IF_FALSE 44					  
							      38 BINARY_SUBSCR						    								  
							      40 STORE_SUBSCR						    59 38 LOAD_FAST 0 ( self )					  
							      42 JUMP_ABSOLUTE 22					    40 LOAD_ATTR 5 ( _proxied )					  
							      >> 44 POP_BLOCK						    42 LOAD_FAST 0 ( self )					  
							      								    44 LOAD_ATTR 6 ( _proxied )					  
							      5 >> 46 SETUP_LOOP 38 ( to 86 )				    46 COMPARE_OP 6 ( in )					  
							      48 LOAD_GLOBAL 0 ( range )				    48 POP_JUMP_IF_FALSE 56					  
							      50 LOAD_CONST 1 ( 0 )					    								  
							      52 LOAD_FAST 2 ( n )					    60 50 LOAD_FAST 0 ( self )					  
							      54 CALL_FUNCTION 2					    52 LOAD_ATTR 7 ( _proxied )					  
							      56 GET_ITER						    54 LOAD_FAST 0 ( self )					  
							      >> 58 FOR_ITER 24 ( to 84 )				    56 LOAD_ATTR 8 ( _proxied )					  
							      60 STORE_FAST 4 ( i )					    58 COMPARE_OP 6 ( in )					  
							      								    60 POP_JUMP_IF_FALSE 56					  
							      6 62 LOAD_FAST 3 ( temp )					    								  
							      64 LOAD_FAST 4 ( i )					    61 62 LOAD_FAST 0 ( self )					  
							      66 BINARY_SUBSCR						    64 LOAD_ATTR 9 ( _proxied )					  
							      68 LOAD_FAST 0 ( arr )					    66 LOAD_FAST 0 ( self )					  
							      70 LOAD_FAST 4 ( i )					    68 LOAD_ATTR 10 ( _proxied )				  
							      72 STORE_SUBSCR						    70 COMPARE_OP 6 ( in )					  
							      								    72 POP_JUMP_IF_FALSE 56					  
							      7 74 LOAD_FAST 4 ( i )					    								  
							      76 LOAD_FAST 1 ( index )					    62 74 LOAD_FAST 0 ( self )					  
							      78 LOAD_FAST 4 ( i )					    76 LOAD_ATTR 11 ( _proxied )				  
							      80 STORE_SUBSCR						    78 LOAD_FAST 0 ( self )					  
							      82 JUMP_ABSOLUTE 58					    80 LOAD_ATTR 12 ( _proxied )				  
							      >> 84 POP_BLOCK						    82 LOAD_FAST 0 ( self )					  
							      >> 86 LOAD_CONST 0 ( None )				    84 LOAD_ATTR 13 ( _proxied )				  
							      88 RETURN_VALUE NEW_LINE					    86 STORE_SUBSCR						  
							      								    								  
							      								    63 >> 88 LOAD_FAST 0 ( self )				  
							      								    90 LOAD_ATTR 14 ( _proxied )				  
							      								    92 LOAD_FAST 0 ( self )					  
							      								    94 LOAD_ATTR 15 ( _proxied )				  
							      								    96 STORE_SUBSCR						  
							      								    98 JUMP_FORWARD 10 ( to 102 )				  
							      								    								  
							      								    64 >> 100 LOAD_FAST 0 ( self )				  
							      								    102 LOAD_ATTR 16 ( _proxied )				  
							      								    104 LOAD_FAST 0 ( self )					  
							      								    106 LOAD_ATTR 17 ( _proxied )				  
							      								    108 STORE_SUBSCR						  
							      								    								  
							      								    65 >> 110 LOAD_FAST 0 ( self )				  
							      								    112 LOAD_ATTR 18 ( _proxied )				  
							      								    114 LOAD_FAST 0 ( self )					  
							      								    116 LOAD_ATTR 19 ( _proxied )				  
							      								    118 STORE_SUBSCR						  
							      								    								  
							      								    66 120 LOAD_FAST 0 ( self )					  
							      								    122 LOAD_ATTR 20 ( _proxied )				  
							      								    124 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			      SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			    SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			  SUM_MANHATTAN_DISTANCES_PAIRS_POINTS
--							      --							    --								  --
def distancesum ( x , y , n ) :				      Disassembly of <code object distancesum at 0x7fbac<<unk>> d54 Disassembly of <code object distancesum at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( sum )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 STORE_FAST 3 ( sum )					    2 LOAD_FAST 0 ( x )						  item in run_dis_script():   File "XLM/dis_script.p
	for j in range ( i + 1 , n ) :			      								    4 CALL_FUNCTION 1						  y", line 54, in run_dis_script     hyp_co = mco.to
	    sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i  3 4 SETUP_LOOP 84 ( to 90 )				    6 LOAD_GLOBAL 1 ( sum )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    return sum						      6 LOAD_GLOBAL 0 ( range )					    8 LOAD_FAST 1 ( y )						  assembler.py", line 81, in to_co     co_consts.app
							      8 LOAD_FAST 2 ( n )					    10 CALL_FUNCTION 1						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 CALL_FUNCTION 1					    12 BINARY_MULTIPLY						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 GET_ITER						    14 LOAD_GLOBAL 2 ( sum )					  co	 self.co_cellvars, ValueError: code: varname
							      >> 14 FOR_ITER 72 ( to 88 )				    16 LOAD_FAST 0 ( x )					  s is too small
							      16 STORE_FAST 4 ( i )					    18 CALL_FUNCTION 1						  
							      								    20 BINARY_MULTIPLY						  
							      4 18 SETUP_LOOP 66 ( to 86 )				    22 BINARY_TRUE_DIVIDE					  
							      20 LOAD_GLOBAL 0 ( range )				    24 CALL_FUNCTION 1						  
							      22 LOAD_FAST 4 ( i )					    26 RETURN_VALUE						  
							      24 LOAD_CONST 2 ( 1 )					    NEW_LINE							  
							      26 BINARY_ADD						    								  
							      28 LOAD_FAST 2 ( n )					    								  
							      30 CALL_FUNCTION 2					    								  
							      32 GET_ITER						    								  
							      >> 34 FOR_ITER 48 ( to 84 )				    								  
							      36 STORE_FAST 5 ( j )					    								  
							      								    								  
							      5 38 LOAD_FAST 3 ( sum )					    								  
							      40 LOAD_GLOBAL 1 ( abs )					    								  
							      42 LOAD_FAST 0 ( x )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 0 ( x )					    								  
							      50 LOAD_FAST 5 ( j )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 BINARY_SUBTRACT					    								  
							      56 CALL_FUNCTION 1					    								  
							      58 LOAD_GLOBAL 1 ( abs )					    								  
							      60 LOAD_FAST 1 ( y )					    								  
							      62 LOAD_FAST 4 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 1 ( y )					    								  
							      68 LOAD_FAST 5 ( j )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 BINARY_SUBTRACT					    								  
							      74 CALL_FUNCTION 1					    								  
							      76 BINARY_ADD						    								  
							      78 INPLACE_ADD						    								  
							      80 STORE_FAST 3 ( sum )					    								  
							      82 JUMP_ABSOLUTE 34					    								  
							      >> 84 POP_BLOCK						    								  
							      >> 86 JUMP_ABSOLUTE 14					    								  
							      >> 88 POP_BLOCK						    								  
							      								    								  
							      6 >> 90 LOAD_FAST 3 ( sum )				    								  
							      92 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES
--							      --							    --								  --
def countSol ( coeff , start , end , rhs ) :		      Disassembly of <code object countSol at 0x7fbac<<unk>> d540,  Disassembly of <code object countSol at 0x7f816a673a50, file  script_not_found : None
    if ( rhs == 0 ) :					      2 0 LOAD_FAST 3 ( rhs )					    204 0 LOAD_FAST 1 ( start )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    result = 0						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    for i in range ( start , end + 1 ) :		      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	if ( coeff [ i ] <= rhs ) :			      								    								  
	    result += countSol ( coeff , i , end , rhs - coef 3 8 LOAD_CONST 2 ( 1 )					    205 8 LOAD_FAST 1 ( start )					  
    return result					      10 RETURN_VALUE						    10 LOAD_CONST 1 ( 0 )					  
							      								    12 COMPARE_OP 2 ( == )					  
							      4 >> 12 LOAD_CONST 1 ( 0 )				    14 POP_JUMP_IF_FALSE 28					  
							      14 STORE_FAST 4 ( result )				    								  
							      								    207 16 LOAD_FAST 1 ( start )				  
							      5 16 SETUP_LOOP 60 ( to 78 )				    18 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_GLOBAL 0 ( range )				    20 COMPARE_OP 2 ( == )					  
							      20 LOAD_FAST 1 ( start )					    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_FAST 2 ( end )					    								  
							      24 LOAD_CONST 2 ( 1 )					    208 24 LOAD_FAST 1 ( start )				  
							      26 BINARY_ADD						    26 LOAD_CONST 1 ( 0 )					  
							      28 CALL_FUNCTION 2					    28 COMPARE_OP 2 ( == )					  
							      30 GET_ITER						    30 POP_JUMP_IF_FALSE 44					  
							      >> 32 FOR_ITER 42 ( to 76 )				    								  
							      34 STORE_FAST 5 ( i )					    209 32 LOAD_FAST 1 ( start )				  
							      								    34 LOAD_CONST 1 ( 0 )					  
							      6 36 LOAD_FAST 0 ( coeff )				    36 COMPARE_OP 2 ( == )					  
							      38 LOAD_FAST 5 ( i )					    38 POP_JUMP_IF_FALSE 44					  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 3 ( rhs )					    210 40 LOAD_FAST 1 ( start )				  
							      44 COMPARE_OP 1 ( <= )					    42 LOAD_CONST 1 ( 0 )					  
							      46 POP_JUMP_IF_FALSE 32					    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      7 48 LOAD_FAST 4 ( result )				    								  
							      50 LOAD_GLOBAL 1 ( countSol )				    211 48 LOAD_FAST 1 ( start )				  
							      52 LOAD_FAST 0 ( coeff )					    50 LOAD_CONST 1 ( 0 )					  
							      54 LOAD_FAST 5 ( i )					    52 COMPARE_OP 2 ( == )					  
							      56 LOAD_FAST 2 ( end )					    54 POP_JUMP_IF_FALSE 44					  
							      58 LOAD_FAST 3 ( rhs )					    								  
							      60 LOAD_FAST 0 ( coeff )					    212 56 LOAD_FAST 1 ( start )				  
							      62 LOAD_FAST 5 ( i )					    58 LOAD_CONST 1 ( 0 )					  
							      64 BINARY_SUBSCR						    60 COMPARE_OP 2 ( == )					  
							      66 BINARY_SUBTRACT					    62 POP_JUMP_IF_FALSE 44					  
							      68 CALL_FUNCTION 4					    								  
							      70 INPLACE_ADD						    213 64 LOAD_FAST 1 ( start )				  
							      72 STORE_FAST 4 ( result )				    66 LOAD_CONST 1 ( 0 )					  
							      74 JUMP_ABSOLUTE 32					    68 COMPARE_OP 2 ( == )					  
							      >> 76 POP_BLOCK						    70 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      8 >> 78 LOAD_FAST 4 ( result )				    214 72 LOAD_FAST 1 ( start )				  
							      80 RETURN_VALUE NEW_LINE					    74 LOAD_CONST 1 ( 0 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    215 80 LOAD_FAST 1 ( start )				  
							      								    82 LOAD_CONST 1 ( 0 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    216 88 LOAD_FAST 1 ( start )				  
							      								    90 LOAD_CONST 1 ( 0 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    217 96 LOAD_FAST 1 ( start )				  
							      								    98 LOAD_CONST 1 ( 0 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    218 104 LOAD_FAST 1 ( start )				  
							      								    106 LOAD_CONST 1 ( 0 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    219 112 LOAD_FAST 1 ( start )				  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    220 120 LOAD_FAST 1 ( start )				  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    221 128 LOAD_FAST 1 ( start )				  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    222 136 LOAD_FAST 1 ( start )				  
							      								    138 LOAD_CONST 1 ( 0 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    223 144 LOAD_FAST 1 ( start )				  
							      								    146 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
def solve ( arr , n ) :					      Disassembly of <code object solve at 0x7fbac0e89d20, file "<d Disassembly of <code object solve at 0x7f8169feb660, file "<d error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    534 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    a = 0 ; b = 0					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 35, in <module>	  Fi
    for i in range ( n ) :				      4 CALL_METHOD 0						    4 BINARY_SUBSCR						  le "<dis>", line 2, in solve TypeError: 'int' obje
	if ( i % 2 != 0 ) :				      6 POP_TOP							    6 STORE_FAST 1 ( n )					  ct is not subscriptable
	    a = a * 10 + arr [ i ]			      								    								  
	else :						      3 8 LOAD_CONST 1 ( 0 )					    535 8 LOAD_FAST 1 ( n )					  
	    b = b * 10 + arr [ i ]			      10 STORE_FAST 2 ( a )					    10 LOAD_CONST 2 ( 1 )					  
    return a + b					      12 LOAD_CONST 1 ( 0 )					    12 BINARY_SUBSCR						  
							      14 STORE_FAST 3 ( b )					    14 LOAD_FAST 1 ( n )					  
							      								    16 LOAD_CONST 3 ( 2 )					  
							      4 16 SETUP_LOOP 62 ( to 80 )				    18 BINARY_SUBSCR						  
							      18 LOAD_GLOBAL 1 ( range )				    20 LOAD_FAST 1 ( n )					  
							      20 LOAD_FAST 1 ( n )					    22 LOAD_CONST 4 ( 3 )					  
							      22 CALL_FUNCTION 1					    24 BINARY_SUBSCR						  
							      24 GET_ITER						    26 LOAD_FAST 1 ( n )					  
							      >> 26 FOR_ITER 50 ( to 78 )				    28 LOAD_CONST 5 ( 1 )					  
							      28 STORE_FAST 4 ( i )					    30 BINARY_SUBSCR						  
							      								    32 BINARY_SUBTRACT						  
							      5 30 LOAD_FAST 4 ( i )					    34 LOAD_FAST 1 ( n )					  
							      32 LOAD_CONST 2 ( 2 )					    36 LOAD_CONST 6 ( 2 )					  
							      34 BINARY_MODULO						    38 BINARY_SUBSCR						  
							      36 LOAD_CONST 1 ( 0 )					    40 BINARY_SUBTRACT						  
							      38 COMPARE_OP 3 ( != )					    42 LOAD_FAST 1 ( n )					  
							      40 POP_JUMP_IF_FALSE 60					    44 LOAD_CONST 7 ( 2 )					  
							      								    46 BINARY_SUBSCR						  
							      6 42 LOAD_FAST 2 ( a )					    48 BINARY_SUBTRACT						  
							      44 LOAD_CONST 3 ( 10 )					    50 BINARY_SUBTRACT						  
							      46 BINARY_MULTIPLY					    52 LOAD_FAST 1 ( n )					  
							      48 LOAD_FAST 0 ( arr )					    54 LOAD_CONST 8 ( 2 )					  
							      50 LOAD_FAST 4 ( i )					    56 BINARY_SUBSCR						  
							      52 BINARY_SUBSCR						    58 BINARY_SUBTRACT						  
							      54 BINARY_ADD						    60 BINARY_SUBTRACT						  
							      56 STORE_FAST 2 ( a )					    62 LOAD_FAST 1 ( n )					  
							      58 JUMP_ABSOLUTE 26					    64 LOAD_CONST 9 ( 2 )					  
							      								    66 BINARY_SUBSCR						  
							      8 >> 60 LOAD_FAST 3 ( b )					    68 BINARY_SUBTRACT						  
							      62 LOAD_CONST 3 ( 10 )					    70 BINARY_SUBTRACT						  
							      64 BINARY_MULTIPLY					    72 BINARY_SUBTRACT						  
							      66 LOAD_FAST 0 ( arr )					    74 LOAD_FAST 1 ( n )					  
							      68 LOAD_FAST 4 ( i )					    76 LOAD_CONST 10 ( 2 )					  
							      70 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      72 BINARY_ADD						    80 BINARY_SUBTRACT						  
							      74 STORE_FAST 3 ( b )					    82 BINARY_SUBTRACT						  
							      76 JUMP_ABSOLUTE 26					    84 LOAD_FAST 1 ( n )					  
							      >> 78 POP_BLOCK						    86 LOAD_CONST 11 ( 3 )					  
							      								    88 BINARY_SUBSCR						  
							      9 >> 80 LOAD_FAST 2 ( a )					    90 BINARY_SUBTRACT						  
							      82 LOAD_FAST 3 ( b )					    92 BINARY_SUBTRACT						  
							      84 BINARY_ADD						    94 BINARY_SUBTRACT						  
							      86 RETURN_VALUE NEW_LINE					    96 BINARY_SUBTRACT						  
							      								    98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_CONST 12 ( 2 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 BINARY_SUBTRACT						  
							      								    106 BINARY_SUBTRACT						  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_FAST 1 ( n )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 BINARY_SUBTRACT						  
							      								    116 BINARY_SUBTRACT						  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_FAST 1 ( n )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 BINARY_SUBTRACT						  
							      								    126 BINARY_SUBTRACT						  
							      								    128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_CONST 12 ( 2 )					  
							      								    132 BINARY_SUBTRACT						  
							      								    134 BINARY_SUBTRACT						  
							      								    136 BINARY_SUBTRACT						  
							      								    138 BINARY_SUBTRACT						  
							      								    140 BINARY_SUBTRACT						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 BINARY_SUBTRACT						  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 1 ( n )					  
							      								    150 BINARY_SUBTRACT						  
							      								    152 BINARY_SUBTRACT						  
							      								    154 BINARY_SUBTRACT						  
							      								    156 BINARY_SUBTRACT						  
							      								    158 BINARY_SUBTRACT						  
							      								    160 LOAD_FAST 1 ( n )					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 BINARY_SUBTRACT						  
							      								    166 BINARY_SUBTRACT						  
							      								    168 BINARY_SUBTRACT						  
							      								    164 LOAD_FAST 1 ( n )					  
							      								    166 BINARY_SUBTRACT						  
							      								    168 BINARY_SUBTRACT						  
							      								    170 BINARY_SUBTRACT						  
							      								    172 BINARY_SUBTRACT						  
							      								    								  
							      								    535 174 LOAD_FAST 1 ( n )					  
							      								    176 LOAD_CONST 13 ( 1 )					  
							      								    								  
							      								    536 178 LOAD_FAST 1 ( n )					  
							      								    								  
							      								    537 180 LOAD_FAST 1 ( n )					  
							      								    182 LOAD_CONST 14 ( 2 )					  
							      								    184 BINARY_SUBTRACT						  
							      								    								  
							      								    538 186 LOAD_FAST 1 ( n )					  
							      								    								  
							      								    539 188 LOAD_FAST 1 ( n )					  
							      								    								  
							      								    540 190 LOAD_FAST 1 ( n )					  
							      								    								  
							      								    539 192 LOAD_FAST 1 ( n )					  
							      								    								  
							      								    542 194 LOAD_FAST 1 ( n )					  
							      								    								  
							      								    543 196 LOAD_CONST 15 ( 2 ) NEW_LINE			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUM_CONTIGUOUS_SUBARRAY				      LARGEST_SUM_CONTIGUOUS_SUBARRAY				    LARGEST_SUM_CONTIGUOUS_SUBARRAY				  LARGEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
def maxSubArraySum ( a , size ) :			      Disassembly of <code object maxSubArraySum at 0x7fbac<<unk>>  Disassembly of <code object maxSubArraySum at 0x7f816a673a50, script_not_found : None
    max_so_far = - maxint - 1				      2 0 LOAD_GLOBAL 0 ( maxint )				    20 0 LOAD_FAST 1 ( size )					  
    max_ending_here = 0					      2 UNARY_NEGATIVE						    2 LOAD_CONST 1 ( - 1 )					  
    for i in range ( 0 , size ) :			      4 LOAD_CONST 1 ( 1 )					    4 COMPARE_OP 2 ( == )					  
	max_ending_here = max_ending_here + a [ i ]	      6 BINARY_SUBTRACT						    6 POP_JUMP_IF_FALSE 12					  
	if ( max_so_far < max_ending_here ) :		      8 STORE_FAST 2 ( max_so_far )				    								  
	    max_so_far = max_ending_here		      								    21 8 LOAD_CONST 2 ( - 1 )					  
	if max_ending_here < 0 :			      3 10 LOAD_CONST 2 ( 0 )					    10 RETURN_VALUE						  
	    max_ending_here = 0				      12 STORE_FAST 3 ( max_ending_here )			    								  
    return max_so_far					      								    22 >> 12 LOAD_CONST 3 ( - - 1 )				  
							      4 14 SETUP_LOOP 54 ( to 70 )				    14 RETURN_VALUE						  
							      16 LOAD_GLOBAL 1 ( range )				    NEW_LINE							  
							      18 LOAD_CONST 2 ( 0 )					    								  
							      20 LOAD_FAST 1 ( size )					    								  
							      22 CALL_FUNCTION 2					    								  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 40 ( to 68 )				    								  
							      28 STORE_FAST 4 ( i )					    								  
							      								    								  
							      5 30 LOAD_FAST 3 ( max_ending_here )			    								  
							      32 LOAD_FAST 0 ( a )					    								  
							      34 LOAD_FAST 4 ( i )					    								  
							      36 BINARY_SUBSCR						    								  
							      38 BINARY_ADD						    								  
							      40 STORE_FAST 3 ( max_ending_here )			    								  
							      								    								  
							      6 42 LOAD_FAST 2 ( max_so_far )				    								  
							      44 LOAD_FAST 3 ( max_ending_here )			    								  
							      46 COMPARE_OP 0 ( < )					    								  
							      48 POP_JUMP_IF_FALSE 54					    								  
							      								    								  
							      7 50 LOAD_FAST 3 ( max_ending_here )			    								  
							      52 STORE_FAST 2 ( max_so_far )				    								  
							      								    								  
							      8 >> 54 LOAD_FAST 3 ( max_ending_here )			    								  
							      56 LOAD_CONST 2 ( 0 )					    								  
							      58 COMPARE_OP 0 ( < )					    								  
							      60 POP_JUMP_IF_FALSE 26					    								  
							      								    								  
							      9 62 LOAD_CONST 2 ( 0 )					    								  
							      64 STORE_FAST 3 ( max_ending_here )			    								  
							      66 JUMP_ABSOLUTE 26					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      10 >> 70 LOAD_FAST 2 ( max_so_far )			    								  
							      72 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN
--							      --							    --								  --
def checkDuplicatesWithinK ( arr , n , k ) :		      Disassembly of <code object checkDuplicatesWithinK at 0x7fbac Disassembly of <code object checkDuplicatesWithinK at 0x7f816 script_not_found : None
    myset = [ ]						      2 0 BUILD_LIST 0						    31 0 LOAD_FAST 1 ( n )					  
    for i in range ( n ) :				      2 STORE_FAST 3 ( myset )					    2 LOAD_CONST 1 ( 0 )					  
	if arr [ i ] in myset :				      								    4 BINARY_SUBSCR						  
	    return True					      3 4 SETUP_LOOP 72 ( to 78 )				    6 STORE_FAST 2 ( i )					  
	myset.append ( arr [ i ] )			      6 LOAD_GLOBAL 0 ( range )					    								  
	if ( i >= k ) :					      8 LOAD_FAST 1 ( n )					    32 8 LOAD_FAST 0 ( arr )					  
	    myset.remove ( arr [ i - k ] )		      10 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( 1 )					  
    return False					      12 GET_ITER						    12 BINARY_SUBSCR						  
							      >> 14 FOR_ITER 60 ( to 76 )				    14 STORE_FAST 3 ( i )					  
							      16 STORE_FAST 4 ( i )					    								  
							      								    33 16 LOAD_FAST 2 ( i )					  
							      4 18 LOAD_FAST 0 ( arr )					    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_FAST 4 ( i )					    20 BINARY_SUBSCR						  
							      22 BINARY_SUBSCR						    22 STORE_FAST 4 ( i )					  
							      24 LOAD_FAST 3 ( myset )					    								  
							      26 COMPARE_OP 6 ( in )					    34 24 LOAD_FAST 3 ( i )					  
							      28 POP_JUMP_IF_FALSE 34					    26 LOAD_CONST 4 ( 2 )					  
							      								    28 BINARY_SUBSCR						  
							      5 30 LOAD_CONST 1 ( True )				    30 LOAD_CONST 5 ( 1 )					  
							      32 RETURN_VALUE						    32 BINARY_SUBSCR						  
							      								    34 LOAD_CONST 6 ( 2 )					  
							      6 >> 34 LOAD_FAST 3 ( myset )				    36 BINARY_SUBSCR						  
							      36 LOAD_METHOD 1 ( append )				    38 STORE_FAST 5 ( i )					  
							      38 LOAD_FAST 0 ( arr )					    								  
							      40 LOAD_FAST 4 ( i )					    35 40 LOAD_FAST 4 ( i )					  
							      42 BINARY_SUBSCR						    42 LOAD_CONST 7 ( 3 )					  
							      44 CALL_METHOD 1						    44 BINARY_SUBSCR						  
							      46 POP_TOP						    46 STORE_FAST 6 ( i )					  
							      								    								  
							      7 48 LOAD_FAST 4 ( i )					    36 48 LOAD_FAST 4 ( i )					  
							      50 LOAD_FAST 2 ( k )					    50 LOAD_CONST 8 ( 3 )					  
							      52 COMPARE_OP 5 ( >= )					    52 BINARY_SUBSCR						  
							      54 POP_JUMP_IF_FALSE 14					    54 STORE_FAST 7 ( i )					  
							      								    								  
							      8 56 LOAD_FAST 3 ( myset )				    37 56 LOAD_FAST 5 ( i )					  
							      58 LOAD_METHOD 2 ( remove )				    58 LOAD_CONST 9 ( 4 )					  
							      60 LOAD_FAST 0 ( arr )					    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 4 ( i )					    62 STORE_FAST 8 ( i )					  
							      64 LOAD_FAST 2 ( k )					    								  
							      66 BINARY_SUBTRACT					    38 64 LOAD_FAST 6 ( i )					  
							      68 BINARY_SUBSCR						    66 LOAD_CONST 10 ( 4 )					  
							      70 CALL_METHOD 1						    68 BINARY_SUBSCR						  
							      72 POP_TOP						    70 STORE_FAST 9 ( i )					  
							      74 JUMP_ABSOLUTE 14					    								  
							      >> 76 POP_BLOCK						    39 72 LOAD_FAST 7 ( i )					  
							      								    74 LOAD_CONST 11 ( 4 )					  
							      9 >> 78 LOAD_CONST 2 ( False )				    76 BINARY_SUBSCR						  
							      80 RETURN_VALUE NEW_LINE					    78 LOAD_CONST 12 ( 3 )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 88					  
							      								    								  
							      								    40 84 LOAD_FAST 7 ( i )					  
							      								    86 LOAD_CONST 12 ( 4 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 STORE_FAST 10 ( i )					  
							      								    								  
							      								    41 92 LOAD_FAST 8 ( i )					  
							      								    94 LOAD_CONST 13 ( 2 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 STORE_FAST 10 ( i )					  
							      								    								  
							      								    42 100 LOAD_FAST 9 ( i )					  
							      								    102 LOAD_CONST 6 ( 2 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 STORE_FAST 11 ( i )					  
							      								    								  
							      								    43 108 LOAD_FAST 10 ( i )					  
							      								    110 LOAD_CONST 12 ( 4 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 STORE_FAST 10 ( i )					  
							      								    								  
							      								    44 116 LOAD_FAST 10 ( i )					  
							      								    118 LOAD_CONST 6 ( 2 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_FAST 10 ( i )					  
							      								    124 LOAD_CONST 6 ( 2 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 7 ( 3 )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    45 134 LOAD_FAST 10 ( i )					  
							      								    136 LOAD_CONST 6 ( 2 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_FAST 10 ( i )					  
							      								    142 LOAD_CONST 6 ( 2 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 COMPARE_OP 2 ( == )					  
							      								    148 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    46 150 LOAD_FAST 0 ( arr )					  
							      								    152 RETURN_VALUE						  
							      								    								  
							      								    48 >> 154 LOAD_FAST 0 ( arr )				  
							      								    156 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES
--							      --							    --								  --
def maxvolume ( s ) :					      Disassembly of <code object maxvolume at 0x7fbac<<unk>> d540, Disassembly of <code object maxvolume at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    maxvalue = 0					      2 0 LOAD_CONST 1 ( 0 )					    101 0 LOAD_FAST 1 ( maxvalue )				  "XLM/dis_script.py", line 59, in <module>	for
    i = 1						      2 STORE_FAST 1 ( maxvalue )				    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( s - 1 ) :				      								    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
	j = 1						      3 4 LOAD_CONST 2 ( 1 )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	for j in range ( s ) :				      6 STORE_FAST 2 ( i )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    k = s - i - j				      								    102 8 LOAD_FAST 1 ( maxvalue )				  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	    maxvalue = max ( maxvalue , i * j * k )	      4 8 SETUP_LOOP 72 ( to 82 )				    10 LOAD_CONST 2 ( 0 )					  n parse     code.append(arg) ValueError: byte must
    return maxvalue					      10 LOAD_GLOBAL 0 ( range )				    12 COMPARE_OP 2 ( == )					   be in range(0, 256)
							      12 LOAD_FAST 0 ( s )					    14 POP_JUMP_IF_FALSE 28					  
							      14 LOAD_CONST 2 ( 1 )					    								  
							      16 BINARY_SUBTRACT					    103 16 LOAD_FAST 1 ( maxvalue )				  
							      18 CALL_FUNCTION 1					    18 LOAD_CONST 3 ( 1 )					  
							      20 GET_ITER						    20 COMPARE_OP 2 ( == )					  
							      >> 22 FOR_ITER 56 ( to 80 )				    22 POP_JUMP_IF_FALSE 28					  
							      24 STORE_FAST 2 ( i )					    								  
							      								    104 >> 24 LOAD_FAST 1 ( maxvalue )				  
							      5 26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 4 ( - 1 )					  
							      28 STORE_FAST 3 ( j )					    28 COMPARE_OP 2 ( == )					  
							      								    30 POP_JUMP_IF_FALSE 44					  
							      6 30 SETUP_LOOP 46 ( to 78 )				    								  
							      32 LOAD_GLOBAL 0 ( range )				    105 32 LOAD_FAST 1 ( maxvalue )				  
							      34 LOAD_FAST 0 ( s )					    34 LOAD_CONST 5 ( - 1 )					  
							      36 CALL_FUNCTION 1					    36 COMPARE_OP 2 ( == )					  
							      38 GET_ITER						    38 POP_JUMP_IF_FALSE 44					  
							      >> 40 FOR_ITER 34 ( to 76 )				    								  
							      42 STORE_FAST 3 ( j )					    106 40 LOAD_FAST 1 ( maxvalue )				  
							      								    42 LOAD_CONST 6 ( - 1 )					  
							      7 44 LOAD_FAST 0 ( s )					    44 COMPARE_OP 2 ( == )					  
							      46 LOAD_FAST 2 ( i )					    46 POP_JUMP_IF_FALSE 44					  
							      48 BINARY_SUBTRACT					    								  
							      50 LOAD_FAST 3 ( j )					    107 48 LOAD_FAST 1 ( maxvalue )				  
							      52 BINARY_SUBTRACT					    50 LOAD_CONST 7 ( - 1 )					  
							      54 STORE_FAST 4 ( k )					    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      8 56 LOAD_GLOBAL 1 ( max )				    								  
							      58 LOAD_FAST 1 ( maxvalue )				    108 56 LOAD_FAST 1 ( maxvalue )				  
							      60 LOAD_FAST 2 ( i )					    58 LOAD_CONST 8 ( - 1 )					  
							      62 LOAD_FAST 3 ( j )					    60 COMPARE_OP 2 ( == )					  
							      64 BINARY_MULTIPLY					    62 POP_JUMP_IF_FALSE 44					  
							      66 LOAD_FAST 4 ( k )					    								  
							      68 BINARY_MULTIPLY					    109 64 LOAD_FAST 1 ( maxvalue )				  
							      70 CALL_FUNCTION 2					    66 LOAD_CONST 9 ( - 1 )					  
							      72 STORE_FAST 1 ( maxvalue )				    68 COMPARE_OP 2 ( == )					  
							      74 JUMP_ABSOLUTE 40					    70 POP_JUMP_IF_FALSE 44					  
							      >> 76 POP_BLOCK						    								  
							      >> 78 JUMP_ABSOLUTE 22					    110 72 LOAD_FAST 1 ( maxvalue )				  
							      >> 80 POP_BLOCK						    74 LOAD_CONST 10 ( - 1 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      9 >> 82 LOAD_FAST 1 ( maxvalue )				    78 POP_JUMP_IF_FALSE 44					  
							      84 RETURN_VALUE NEW_LINE					    								  
							      								    111 80 LOAD_FAST 1 ( maxvalue )				  
							      								    82 LOAD_CONST 11 ( - 1 )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      								    112 88 LOAD_FAST 1 ( maxvalue )				  
							      								    90 LOAD_CONST 6 ( - 1 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    113 96 LOAD_FAST 1 ( maxvalue )				  
							      								    98 LOAD_CONST 12 ( - 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    114 104 LOAD_FAST 1 ( maxvalue )				  
							      								    106 LOAD_CONST 13 ( - 1 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    115 112 LOAD_FAST 1 ( maxvalue )				  
							      								    114 LOAD_CONST 6 ( - 1 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    116 120 LOAD_FAST 1 ( maxvalue )				  
							      								    122 JUMP_FORWARD 2 ( to 106 )				  
							      								    >> 124 LOAD_CONST 6 ( - 1 )					  
							      								    126 RETURN_VALUE						  
							      								    								  
							      								    117 >> 128 LOAD_FAST 1 ( maxvalue )				  
							      								    130 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
def firstNonRepeating ( arr , n ) :			      Disassembly of <code object firstNonRepeating at 0x7fbac<<unk Disassembly of <code object firstNonRepeating at 0x7f816a673a error : Traceback (most recent call last):   File
    for i in range ( n ) :				      2 0 SETUP_LOOP 84 ( to 86 )				    20 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 60, in <module>	exec
	j = 0						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 36, in <module>	  Fi
	while ( j < n ) :				      4 LOAD_FAST 1 ( n )					    4 GET_ITER							  le "<dis>", line 2, in firstNonRepeating TypeError
	    if ( i != j and arr [ i ] == arr [ j ] ) :	      6 CALL_FUNCTION 1						    >> 6 FOR_ITER 14 ( to 22 )					  : 'int' object is not iterable
		break					      8 GET_ITER						    8 STORE_FAST 2 ( i )					  
	    j += 1					      >> 10 FOR_ITER 72 ( to 84 )				    								  
	if ( j == n ) :					      12 STORE_FAST 2 ( i )					    21 10 LOAD_FAST 0 ( arr )					  
	    return arr [ i ]				      								    12 LOAD_METHOD 0 ( append )					  
    return - 1						      3 14 LOAD_CONST 1 ( 0 )					    14 LOAD_FAST 2 ( i )					  
							      16 STORE_FAST 3 ( j )					    16 CALL_METHOD 1						  
							      								    18 POP_TOP							  
							      4 18 SETUP_LOOP 46 ( to 66 )				    20 JUMP_ABSOLUTE 6						  
							      >> 20 LOAD_FAST 3 ( j )					    >> 22 POP_BLOCK						  
							      22 LOAD_FAST 1 ( n )					    >> 24 LOAD_CONST 0 ( None )					  
							      24 COMPARE_OP 0 ( < )					    26 RETURN_VALUE						  
							      26 POP_JUMP_IF_FALSE 64					    NEW_LINE							  
							      								    								  
							      5 28 LOAD_FAST 2 ( i )					    								  
							      30 LOAD_FAST 3 ( j )					    								  
							      32 COMPARE_OP 3 ( != )					    								  
							      34 POP_JUMP_IF_FALSE 54					    								  
							      36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 2 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 3 ( j )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 COMPARE_OP 2 ( == )					    								  
							      50 POP_JUMP_IF_FALSE 54					    								  
							      								    								  
							      6 52 BREAK_LOOP						    								  
							      								    								  
							      7 >> 54 LOAD_FAST 3 ( j )					    								  
							      56 LOAD_CONST 2 ( 1 )					    								  
							      58 INPLACE_ADD						    								  
							      60 STORE_FAST 3 ( j )					    								  
							      62 JUMP_ABSOLUTE 20					    								  
							      >> 64 POP_BLOCK						    								  
							      								    								  
							      8 >> 66 LOAD_FAST 3 ( j )					    								  
							      68 LOAD_FAST 1 ( n )					    								  
							      70 COMPARE_OP 2 ( == )					    								  
							      72 POP_JUMP_IF_FALSE 10					    								  
							      								    								  
							      9 74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_FAST 2 ( i )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 RETURN_VALUE						    								  
							      82 JUMP_ABSOLUTE 10					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 LOAD_CONST 3 ( - 1 )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
def checkIsAP ( arr , n ) :				      Disassembly of <code object checkIsAP at 0x7fbac0e89d20, file Disassembly of <code object checkIsAP at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    if ( n == 1 ) : return True				      2 0 LOAD_FAST 1 ( n )					    108 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    arr.sort ( )					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    d = arr [ 1 ] - arr [ 0 ]				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
    for i in range ( 2 , n ) :				      6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	if ( arr [ i ] - arr [ i - 1 ] != d ) :		      8 LOAD_CONST 2 ( True )					    8 COMPARE_OP 2 ( == )					  assembler.py", line 81, in to_co     co_consts.app
	    return False				      10 RETURN_VALUE						    10 POP_JUMP_IF_FALSE 16					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    return True						      								    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      3 >> 12 LOAD_FAST 0 ( arr )				    109 12 LOAD_FAST 0 ( arr )					  co	 self.co_cellvars, ValueError: code: varname
							      14 LOAD_METHOD 0 ( sort )					    14 LOAD_CONST 3 ( 1 )					  s is too small
							      16 CALL_METHOD 0						    16 BINARY_SUBSCR						  
							      18 POP_TOP						    18 LOAD_CONST 4 ( 2 )					  
							      								    20 COMPARE_OP 2 ( == )					  
							      4 20 LOAD_FAST 0 ( arr )					    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_CONST 1 ( 1 )					    								  
							      24 BINARY_SUBSCR						    110 24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 0 ( arr )					    26 LOAD_CONST 5 ( 1 )					  
							      28 LOAD_CONST 3 ( 0 )					    28 BINARY_SUBSCR						  
							      30 BINARY_SUBSCR						    30 LOAD_CONST 6 ( 2 )					  
							      32 BINARY_SUBTRACT					    32 COMPARE_OP 2 ( == )					  
							      34 STORE_FAST 2 ( d )					    34 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      5 36 SETUP_LOOP 46 ( to 84 )				    111 36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_GLOBAL 1 ( range )				    38 LOAD_CONST 7 ( 2 )					  
							      40 LOAD_CONST 4 ( 2 )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 1 ( n )					    42 LOAD_CONST 8 ( 3 )					  
							      44 CALL_FUNCTION 2					    44 COMPARE_OP 2 ( == )					  
							      46 GET_ITER						    46 POP_JUMP_IF_FALSE 52					  
							      >> 48 FOR_ITER 32 ( to 82 )				    								  
							      50 STORE_FAST 3 ( i )					    112 48 LOAD_FAST 0 ( arr )					  
							      								    50 LOAD_CONST 9 ( 2 )					  
							      6 52 LOAD_FAST 0 ( arr )					    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_CONST 10 ( 2 )					  
							      56 BINARY_SUBSCR						    56 COMPARE_OP 2 ( == )					  
							      58 LOAD_FAST 0 ( arr )					    58 POP_JUMP_IF_FALSE 52					  
							      60 LOAD_FAST 3 ( i )					    								  
							      62 LOAD_CONST 1 ( 1 )					    113 60 LOAD_FAST 0 ( arr )					  
							      64 BINARY_SUBTRACT					    62 LOAD_CONST 11 ( 3 )					  
							      66 BINARY_SUBSCR						    64 COMPARE_OP 2 ( == )					  
							      68 BINARY_SUBTRACT					    66 POP_JUMP_IF_FALSE 68					  
							      70 LOAD_FAST 2 ( d )					    								  
							      72 COMPARE_OP 3 ( != )					    114 68 LOAD_FAST 0 ( arr )					  
							      74 POP_JUMP_IF_FALSE 48					    70 LOAD_CONST 12 ( 2 )					  
							      								    72 BINARY_SUBSCR						  
							      7 76 LOAD_CONST 5 ( False )				    74 LOAD_CONST 13 ( 3 )					  
							      78 RETURN_VALUE						    76 COMPARE_OP 2 ( == )					  
							      80 JUMP_ABSOLUTE 48					    78 POP_JUMP_IF_FALSE 80					  
							      >> 82 POP_BLOCK						    								  
							      								    115 80 LOAD_FAST 0 ( arr )					  
							      8 >> 84 LOAD_CONST 2 ( True )				    82 LOAD_CONST 14 ( 3 )					  
							      86 RETURN_VALUE NEW_LINE					    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 15 ( 3 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    116 92 LOAD_FAST 0 ( arr )					  
							      								    94 LOAD_CONST 16 ( 2 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 17 ( 3 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    117 104 LOAD_FAST 0 ( arr )					  
							      								    106 LOAD_CONST 16 ( 2 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 17 ( 3 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    118 116 LOAD_FAST 0 ( arr )					  
							      								    118 LOAD_CONST 18 ( 2 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 19 ( 3 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    119 128 LOAD_FAST 0 ( arr )					  
							      								    130 LOAD_CONST 18 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 19 ( 3 )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    120 140 LOAD_FAST 0 ( arr )					  
							      								    142 LOAD_CONST 20 ( 2 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 21 ( 3 )					  
							      								    148 COMPARE_OP 2 ( == )					  
							      								    150 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    121 152 LOAD_FAST 0 ( arr )					  
							      								    154 LOAD_CONST 21 ( 3 )					  
							      								    156 COMPARE_OP 2 ( == )					  
							      								    158 POP_JUMP_IF_FALSE 130 NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
def insertSorted ( arr , n , key , capacity ) :		      Disassembly of <code object insertSorted at 0x7fbac0e89d20, f Disassembly of <code object insertSorted at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    if ( n >= capacity ) :				      2 0 LOAD_FAST 1 ( n )					    33 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
	return n					      2 LOAD_FAST 3 ( capacity )				    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    i = n - 1						      4 COMPARE_OP 5 ( >= )					    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    while i >= 0 and arr [ i ] > key :			      6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
	arr [ i + 1 ] = arr [ i ]			      								    8 COMPARE_OP 4 ( > )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
	i -= 1						      3 8 LOAD_FAST 1 ( n )					    10 POP_JUMP_IF_FALSE 20					  pack non-iterable NoneType object
    arr [ i + 1 ] = key					      10 RETURN_VALUE						    								  
    return ( n + 1 )					      								    34 12 LOAD_FAST 1 ( n )					  
							      4 >> 12 LOAD_FAST 1 ( n )					    14 LOAD_CONST 3 ( 1 )					  
							      14 LOAD_CONST 1 ( 1 )					    16 BINARY_SUBSCR						  
							      16 BINARY_SUBTRACT					    18 STORE_FAST 1 ( n )					  
							      18 STORE_FAST 4 ( i )					    								  
							      								    35 20 LOAD_FAST 1 ( n )					  
							      5 20 SETUP_LOOP 48 ( to 70 )				    22 LOAD_CONST 4 ( 1 )					  
							      >> 22 LOAD_FAST 4 ( i )					    24 BINARY_SUBSCR						  
							      24 LOAD_CONST 2 ( 0 )					    26 LOAD_CONST 5 ( 1 )					  
							      26 COMPARE_OP 5 ( >= )					    28 BINARY_SUBSCR						  
							      28 POP_JUMP_IF_FALSE 68					    30 LOAD_CONST 6 ( 1 )					  
							      30 LOAD_FAST 0 ( arr )					    32 BINARY_SUBSCR						  
							      32 LOAD_FAST 4 ( i )					    34 LOAD_CONST 7 ( 1 )					  
							      34 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      36 LOAD_FAST 2 ( key )					    38 LOAD_CONST 8 ( 1 )					  
							      38 COMPARE_OP 4 ( > )					    40 BINARY_SUBSCR						  
							      40 POP_JUMP_IF_FALSE 68					    42 LOAD_CONST 9 ( 1 )					  
							      								    44 BINARY_SUBSCR						  
							      6 42 LOAD_FAST 0 ( arr )					    46 LOAD_CONST 10 ( 1 )					  
							      44 LOAD_FAST 4 ( i )					    48 BINARY_SUBSCR						  
							      46 BINARY_SUBSCR						    50 LOAD_CONST 11 ( 2 )					  
							      48 LOAD_FAST 0 ( arr )					    52 BINARY_SUBSCR						  
							      50 LOAD_FAST 4 ( i )					    54 LOAD_CONST 12 ( 1 )					  
							      52 LOAD_CONST 1 ( 1 )					    56 BINARY_SUBSCR						  
							      54 BINARY_ADD						    58 LOAD_CONST 13 ( 1 )					  
							      56 STORE_SUBSCR						    60 BINARY_SUBSCR						  
							      								    62 LOAD_CONST 14 ( 1 )					  
							      7 58 LOAD_FAST 4 ( i )					    64 BINARY_SUBSCR						  
							      60 LOAD_CONST 1 ( 1 )					    66 LOAD_CONST 15 ( 1 )					  
							      62 INPLACE_SUBTRACT					    68 BINARY_SUBSCR						  
							      64 STORE_FAST 4 ( i )					    70 LOAD_CONST 16 ( 1 )					  
							      66 JUMP_ABSOLUTE 22					    72 BINARY_SUBSCR						  
							      >> 68 POP_BLOCK						    74 LOAD_CONST 17 ( 1 )					  
							      								    76 BINARY_SUBSCR						  
							      8 >> 70 LOAD_FAST 2 ( key )				    78 LOAD_CONST 16 ( 1 )					  
							      72 LOAD_FAST 0 ( arr )					    80 BINARY_SUBSCR						  
							      74 LOAD_FAST 4 ( i )					    82 LOAD_CONST 17 ( 1 )					  
							      76 LOAD_CONST 1 ( 1 )					    84 BINARY_SUBSCR						  
							      78 BINARY_ADD						    86 LOAD_CONST 16 ( 1 )					  
							      80 STORE_SUBSCR						    88 BINARY_SUBSCR						  
							      								    90 LOAD_CONST 17 ( 1 )					  
							      9 82 LOAD_FAST 1 ( n )					    92 BINARY_SUBSCR						  
							      84 LOAD_CONST 1 ( 1 )					    94 LOAD_CONST 18 ( 1 )					  
							      86 BINARY_ADD						    96 BINARY_SUBSCR						  
							      88 RETURN_VALUE NEW_LINE					    98 LOAD_CONST 19 ( 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 18 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 19 ( 1 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 20 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 21 ( 1 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 22 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 21 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 22 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 21 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 22 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 23 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 22 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 23 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 22 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 23 ( 1 )					  
							      								    156 LOAD_CONST 23 ( 1 )					  
							      								    158 BINARY_SUBSCR						  
							      								    160 LOAD_CONST 22 ( 1 )					  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_CONST 23 ( 1 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 LOAD_CONST 24 ( 1 )					  
							      								    170 BINARY_SUBSCR						  
							      								    								  
							      								    35 172 LOAD_CONST 23 ( 1 )					  
							      								    174 LOAD_CONST 23 ( 1 )					  
							      								    176 BINARY_SUBSCR						  
							      								    178 LOAD_CONST 24 ( 1 )					  
							      								    180 BINARY_SUBSCR						  
							      								    182 LOAD_CONST 25 ( 1 )					  
							      								    180 BINARY_SUBSCR						  
							      								    182 LOAD_CONST 24 ( 1 )					  
							      								    184 BINARY_SUBSCR						  
							      								    								  
							      								    36								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_FIRST_MISSING_NUMBER				      FIND_THE_FIRST_MISSING_NUMBER				    FIND_THE_FIRST_MISSING_NUMBER				  FIND_THE_FIRST_MISSING_NUMBER
--							      --							    --								  --
def findFirstMissing ( array , start , end ) :		      Disassembly of <code object findFirstMissing at 0x7fbac<<unk> Disassembly of <code object findFirstMissing at 0x7f816a68178 error : Traceback (most recent call last):   File
    if ( start > end ) :				      2 0 LOAD_FAST 1 ( start )					    108 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 59, in <module>	for
	return end + 1					      2 LOAD_FAST 2 ( end )					    2 LOAD_ATTR 0 ( start )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( start != array [ start ] ) :			      4 COMPARE_OP 4 ( > )					    4 LOAD_CONST 1 ( 1 )					  y", line 47, in run_dis_script     co_code, co_nlo
	return start ;					      6 POP_JUMP_IF_FALSE 16					    6 COMPARE_OP 2 ( == )					  cals, co_varnames, co_names, co_consts, co_linesta
    mid = int ( ( start + end ) / 2 )			      								    8 POP_JUMP_IF_FALSE 14					  rts = dis_asm.parse(bytecode) TypeError: cannot un
    if ( array [ mid ] == mid ) :			      3 8 LOAD_FAST 2 ( end )					    								  pack non-iterable NoneType object
	return findFirstMissing ( array , mid + 1 , end )     10 LOAD_CONST 1 ( 1 )					    109 10 LOAD_FAST 0 ( self )					  
    return findFirstMissing ( array , start , mid )	      12 BINARY_ADD						    12 LOAD_ATTR 1 ( start )					  
							      14 RETURN_VALUE						    14 LOAD_CONST 2 ( - 1 )					  
							      								    16 COMPARE_OP 2 ( == )					  
							      4 >> 16 LOAD_FAST 1 ( start )				    18 POP_JUMP_IF_FALSE 28					  
							      18 LOAD_FAST 0 ( array )					    								  
							      20 LOAD_FAST 1 ( start )					    110 20 LOAD_GLOBAL 2 ( findFirstMissing )			  
							      22 BINARY_SUBSCR						    22 LOAD_FAST 0 ( self )					  
							      24 COMPARE_OP 3 ( != )					    24 LOAD_ATTR 3 ( findFirstMissing )				  
							      26 POP_JUMP_IF_FALSE 32					    26 CALL_FUNCTION 1						  
							      								    28 POP_JUMP_IF_FALSE 28					  
							      5 28 LOAD_FAST 1 ( start )				    								  
							      30 RETURN_VALUE						    111 30 LOAD_FAST 0 ( self )					  
							      								    32 LOAD_METHOD 4 ( findFirstMissing )			  
							      6 >> 32 LOAD_GLOBAL 0 ( int )				    34 LOAD_FAST 0 ( self )					  
							      34 LOAD_FAST 1 ( start )					    36 LOAD_ATTR 5 ( findFirstMissing )				  
							      36 LOAD_FAST 2 ( end )					    38 LOAD_FAST 0 ( self )					  
							      38 BINARY_ADD						    40 LOAD_ATTR 6 ( findFirstMissing )				  
							      40 LOAD_CONST 2 ( 2 )					    42 LOAD_FAST 0 ( self )					  
							      42 BINARY_TRUE_DIVIDE					    44 LOAD_ATTR 7 ( findFirstMissing )				  
							      44 CALL_FUNCTION 1					    46 LOAD_FAST 0 ( self )					  
							      46 STORE_FAST 3 ( mid )					    48 LOAD_ATTR 8 ( findFirstMissing )				  
							      								    50 LOAD_FAST 0 ( self )					  
							      7 48 LOAD_FAST 0 ( array )				    52 LOAD_ATTR 9 ( findFirstMissing )				  
							      50 LOAD_FAST 3 ( mid )					    54 LOAD_FAST 0 ( self )					  
							      52 BINARY_SUBSCR						    56 LOAD_ATTR 10 ( findFirstMissing )			  
							      54 LOAD_FAST 3 ( mid )					    58 LOAD_FAST 0 ( self )					  
							      56 COMPARE_OP 2 ( == )					    60 LOAD_ATTR 11 ( findFirstMissing )			  
							      58 POP_JUMP_IF_FALSE 76					    62 LOAD_FAST 0 ( self )					  
							      								    64 LOAD_ATTR 12 ( findFirstMissing )			  
							      8 60 LOAD_GLOBAL 1 ( findFirstMissing )			    66 LOAD_FAST 0 ( self )					  
							      62 LOAD_FAST 0 ( array )					    68 LOAD_ATTR 13 ( findFirstMissing )			  
							      64 LOAD_FAST 3 ( mid )					    70 LOAD_FAST 0 ( self )					  
							      66 LOAD_CONST 1 ( 1 )					    72 LOAD_ATTR 14 ( findFirstMissing )			  
							      68 BINARY_ADD						    74 LOAD_FAST 0 ( self )					  
							      70 LOAD_FAST 2 ( end )					    76 LOAD_ATTR 15 ( findFirstMissing )			  
							      72 CALL_FUNCTION 3					    78 LOAD_FAST 0 ( self )					  
							      74 RETURN_VALUE						    80 LOAD_ATTR 16 ( findFirstMissing )			  
							      								    82 LOAD_FAST 0 ( self )					  
							      9 >> 76 LOAD_GLOBAL 1 ( findFirstMissing )		    84 LOAD_ATTR 17 ( findFirstMissing )			  
							      78 LOAD_FAST 0 ( array )					    86 LOAD_FAST 0 ( self )					  
							      80 LOAD_FAST 1 ( start )					    88 LOAD_ATTR 18 ( findFirstMissing )			  
							      82 LOAD_FAST 3 ( mid )					    90 LOAD_FAST 0 ( self )					  
							      84 CALL_FUNCTION 3					    92 LOAD_ATTR 20 ( findFirstMissing )			  
							      86 RETURN_VALUE NEW_LINE					    94 LOAD_FAST 0 ( self )					  
							      								    96 LOAD_ATTR 19 ( findFirstMissing )			  
							      								    98 LOAD_FAST 0 ( self )					  
							      								    100 LOAD_ATTR 20 ( findFirstMissing )			  
							      								    102 LOAD_FAST 0 ( self )					  
							      								    104 LOAD_ATTR 21 ( findFirstMissing )			  
							      								    106 LOAD_FAST 0 ( self )					  
							      								    108 LOAD_ATTR 20 ( findFirstMissing )			  
							      								    110 LOAD_FAST 0 ( self )					  
							      								    112 LOAD_ATTR 21 ( findFirstMissing )			  
							      								    114 LOAD_FAST 0 ( self )					  
							      								    116 LOAD_ATTR 22 ( findFirstMissing )			  
							      								    118 LOAD_FAST 0 ( self )					  
							      								    120 LOAD_ATTR 22 ( findFirstMissing )			  
							      								    122 LOAD_FAST 0 ( self )					  
							      								    124 LOAD_ATTR 23 ( findFirstMissing )			  
							      								    126 LOAD_FAST 0 ( self )					  
							      								    128								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE				  FIND_THE_ELEMENT_THAT_APPEARS_ONCE
--							      --							    --								  --
def getSingle ( arr , n ) :				      Disassembly of <code object getSingle at 0x7fbac0e8bc90, file Disassembly of <code object getSingle at 0x7f816a6e4b70, file error : Traceback (most recent call last):   File
    ones = 0						      2 0 LOAD_CONST 1 ( 0 )					    31 0 LOAD_GLOBAL 0 ( ones )					  "XLM/dis_script.py", line 59, in <module>	for
    twos = 0						      2 STORE_FAST 2 ( ones )					    2 LOAD_FAST 0 ( arr )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( n ) :				      								    4 CALL_FUNCTION 1						  y", line 47, in run_dis_script     co_code, co_nlo
	twos = twos | ( ones & arr [ i ] )		      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	ones = ones ^ arr [ i ]				      6 STORE_FAST 3 ( twos )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	common_bit_mask = ~ ( ones & twos )		      								    32 8 LOAD_GLOBAL 1 ( twos )					  pack non-iterable NoneType object
	ones &= common_bit_mask				      4 8 SETUP_LOOP 70 ( to 80 )				    10 LOAD_METHOD 2 ( ones )					  
	twos &= common_bit_mask				      10 LOAD_GLOBAL 0 ( range )				    12 LOAD_FAST 1 ( n )					  
    return ones						      12 LOAD_FAST 1 ( n )					    14 CALL_METHOD 1						  
							      14 CALL_FUNCTION 1					    16 STORE_FAST 2 ( twos )					  
							      16 GET_ITER						    								  
							      >> 18 FOR_ITER 58 ( to 78 )				    33 18 LOAD_FAST 2 ( twos )					  
							      20 STORE_FAST 4 ( i )					    20 LOAD_METHOD 3 ( endswith )				  
							      								    22 LOAD_CONST 1 ( '////////////////////////////////////////// 
							      5 22 LOAD_FAST 3 ( twos )					    								  
							      24 LOAD_FAST 2 ( ones )					    								  
							      26 LOAD_FAST 0 ( arr )					    								  
							      28 LOAD_FAST 4 ( i )					    								  
							      30 BINARY_SUBSCR						    								  
							      32 BINARY_AND						    								  
							      34 BINARY_OR						    								  
							      36 STORE_FAST 3 ( twos )					    								  
							      								    								  
							      6 38 LOAD_FAST 2 ( ones )					    								  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 4 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 BINARY_XOR						    								  
							      48 STORE_FAST 2 ( ones )					    								  
							      								    								  
							      7 50 LOAD_FAST 2 ( ones )					    								  
							      52 LOAD_FAST 3 ( twos )					    								  
							      54 BINARY_AND						    								  
							      56 UNARY_INVERT						    								  
							      58 STORE_FAST 5 ( common_bit_mask )			    								  
							      								    								  
							      8 60 LOAD_FAST 2 ( ones )					    								  
							      62 LOAD_FAST 5 ( common_bit_mask )			    								  
							      64 INPLACE_AND						    								  
							      66 STORE_FAST 2 ( ones )					    								  
							      								    								  
							      9 68 LOAD_FAST 3 ( twos )					    								  
							      70 LOAD_FAST 5 ( common_bit_mask )			    								  
							      72 INPLACE_AND						    								  
							      74 STORE_FAST 3 ( twos )					    								  
							      76 JUMP_ABSOLUTE 18					    								  
							      >> 78 POP_BLOCK						    								  
							      								    								  
							      10 >> 80 LOAD_FAST 2 ( ones )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			      CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			    CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			  CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT
--							      --							    --								  --
def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :		      Disassembly of <code object circle at 0x7fbac0e89d20, file "< Disassembly of <code object circle at 0x7f8169feb9c0, file "< error : Traceback (most recent call last):   File
    distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - 2 0 LOAD_FAST 0 ( x1 )					    r2 0 LOAD_GLOBAL 0 ( distSq )				  "XLM/dis_script.py", line 59, in <module>	for
    radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		      2 LOAD_FAST 2 ( x2 )					    2 LOAD_FAST 0 ( x1 )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( distSq == radSumSq ) :				      4 BINARY_SUBTRACT						    4 LOAD_FAST 1 ( y1 )					  y", line 47, in run_dis_script     co_code, co_nlo
	return 1					      6 LOAD_FAST 0 ( x1 )					    6 LOAD_FAST 2 ( x2 )					  cals, co_varnames, co_names, co_consts, co_linesta
    elif ( distSq > radSumSq ) :			      8 LOAD_FAST 2 ( x2 )					    8 LOAD_FAST 3 ( x2 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
	return - 1					      10 BINARY_SUBTRACT					    10 LOAD_FAST 4 ( x2 )					  pack non-iterable NoneType object
    else :						      12 BINARY_MULTIPLY					    12 LOAD_FAST 5 ( x2 )					  
	return 0					      14 LOAD_FAST 1 ( y1 )					    14 LOAD_FAST 6 ( x2 )					  
							      16 LOAD_FAST 3 ( y2 )					    16 LOAD_FAST 7 ( x1 )					  
							      18 BINARY_SUBTRACT					    18 LOAD_FAST 8 ( dist_b_b_bq )				  
							      20 LOAD_FAST 1 ( y1 )					    20 LOAD_FAST 9 ( x1 )					  
							      22 LOAD_FAST 3 ( y2 )					    22 LOAD_FAST 10 ( x2 )					  
							      24 BINARY_SUBTRACT					    24 LOAD_FAST 11 ( x1 )					  
							      26 BINARY_MULTIPLY					    26 LOAD_FAST 12 ( x2 )					  
							      28 BINARY_ADD						    28 LOAD_FAST 13 ( x1 )					  
							      30 STORE_FAST 6 ( distSq )				    30 LOAD_FAST 14 ( x2 )					  
							      								    32 LOAD_FAST 15 ( x2 )					  
							      3 32 LOAD_FAST 4 ( r1 )					    34 LOAD_FAST 16 ( x2 )					  
							      34 LOAD_FAST 5 ( r2 )					    36 LOAD_FAST 17 ( x1 )					  
							      36 BINARY_ADD						    38 LOAD_FAST 18 ( x2 )					  
							      38 LOAD_FAST 4 ( r1 )					    40 LOAD_FAST 19 ( x1 )					  
							      40 LOAD_FAST 5 ( r2 )					    42 LOAD_FAST 20 ( x2 )					  
							      42 BINARY_ADD						    44 LOAD_FAST 21 ( x1 )					  
							      44 BINARY_MULTIPLY					    46 LOAD_FAST 22 ( x2 )					  
							      46 STORE_FAST 7 ( radSumSq )				    48 LOAD_FAST 21 ( x1 )					  
							      								    50 LOAD_FAST 22 ( x2 )					  
							      4 48 LOAD_FAST 6 ( distSq )				    52 LOAD_FAST 21 ( x1 )					  
							      50 LOAD_FAST 7 ( radSumSq )				    54 LOAD_FAST 22 ( x2 )					  
							      52 COMPARE_OP 2 ( == )					    56 LOAD_FAST 21 ( x1 )					  
							      54 POP_JUMP_IF_FALSE 60					    58 LOAD_FAST 22 ( x2 )					  
							      								    60 LOAD_FAST 21 ( x1 )					  
							      5 56 LOAD_CONST 1 ( 1 )					    62 LOAD_FAST 22 ( x2 )					  
							      58 RETURN_VALUE						    64 LOAD_FAST 21 ( x1 )					  
							      								    66 LOAD_FAST 22 ( x2 )					  
							      6 >> 60 LOAD_FAST 6 ( distSq )				    68 LOAD_FAST 21 ( x1 )					  
							      62 LOAD_FAST 7 ( radSumSq )				    70 LOAD_FAST 22 ( x2 )					  
							      64 COMPARE_OP 4 ( > )					    72 LOAD_FAST 21 ( x1 )					  
							      66 POP_JUMP_IF_FALSE 72					    74 LOAD_FAST 22 ( x2 )					  
							      								    76 LOAD_FAST 22 ( x2 )					  
							      7 68 LOAD_CONST 2 ( - 1 )					    78 LOAD_FAST 23 ( x1 )					  
							      70 RETURN_VALUE						    80 LOAD_FAST 22 ( x2 )					  
							      								    82 LOAD_FAST 21 ( x1 )					  
							      9 >> 72 LOAD_CONST 3 ( 0 )				    84 LOAD_FAST 22 ( x2 )					  
							      74 RETURN_VALUE						    86 LOAD_FAST 23 ( x1 )					  
							      76 LOAD_CONST 0 ( None )					    88 LOAD_FAST 22 ( x2 )					  
							      78 RETURN_VALUE NEW_LINE					    90 LOAD_FAST 23 ( x1 )					  
							      								    92 LOAD_FAST 22 ( x2 )					  
							      								    94 LOAD_FAST 23 ( x1 )					  
							      								    96 LOAD_FAST 22 ( x2 )					  
							      								    98 LOAD_FAST 23 ( x1 )					  
							      								    100 LOAD_FAST 24 ( x2 )					  
							      								    102 LOAD_FAST 23 ( x1 )					  
							      								    104 LOAD_FAST 22 ( x2 )					  
							      								    106 LOAD_FAST 24 ( x2 )					  
							      								    108 LOAD_FAST 23 ( x1 )					  
							      								    110 LOAD_FAST 24 ( x2 )					  
							      								    112 LOAD_FAST 23 ( x1 )					  
							      								    114 LOAD_FAST 24 ( x2 )					  
							      								    116 LOAD_FAST 23 ( x1 )					  
							      								    118 LOAD_FAST 24 ( x2 )					  
							      								    120 LOAD_FAST 23 ( x1 )					  
							      								    122 LOAD_FAST 24 ( x2 )					  
							      								    124 LOAD_FAST 25 ( x2 )					  
							      								    126 LOAD_FAST 26 ( x2 )					  
							      								    128 LOAD_FAST 24 ( x2 )					  
							      								    130 LOAD_FAST 25 ( x1 )					  
							      								    132 LOAD_FAST 26 ( x2 )					  
							      								    134 LOAD_FAST 25 ( x1 )					  
							      								    136 LOAD_FAST 26 ( x2 )					  
							      								    138 LOAD_FAST 25 ( x1 )					  
							      								    140 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1
--							      --							    --								  --
def findMissing ( a , b , n , m ) :			      Disassembly of <code object findMissing at 0x7fbac<<unk>> d54 Disassembly of <code object findMissing at 0x7f816a683d20, fi script_not_found : None
    s = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    108 0 LOAD_GLOBAL 0 ( dict )				  
    for i in range ( m ) :				      2 CALL_FUNCTION 0						    2 LOAD_FAST 1 ( b )						  
	s [ b [ i ] ] = 1				      4 STORE_FAST 4 ( s )					    4 CALL_FUNCTION 1						  
    for i in range ( n ) :				      								    6 STORE_FAST 2 ( a )					  
	if a [ i ] not in s.keys ( ) :			      3 6 SETUP_LOOP 28 ( to 36 )				    								  
	    print ( a [ i ] , end = " " )		      8 LOAD_GLOBAL 1 ( range )					    109 8 LOAD_FAST 0 ( a )					  
							      10 LOAD_FAST 3 ( m )					    10 LOAD_FAST 2 ( a )					  
							      12 CALL_FUNCTION 1					    12 LOAD_FAST 1 ( b )					  
							      14 GET_ITER						    14 LOAD_FAST 2 ( a )					  
							      >> 16 FOR_ITER 16 ( to 34 )				    16 LOAD_FAST 3 ( b )					  
							      18 STORE_FAST 5 ( i )					    18 LOAD_FAST 4 ( b )					  
							      								    20 LOAD_FAST 5 ( b )					  
							      4 20 LOAD_CONST 1 ( 1 )					    22 LOAD_FAST 6 ( b )					  
							      22 LOAD_FAST 4 ( s )					    24 LOAD_FAST 7 ( b )					  
							      24 LOAD_FAST 1 ( b )					    26 LOAD_FAST 8 ( b )					  
							      26 LOAD_FAST 5 ( i )					    28 LOAD_FAST 9 ( b )					  
							      28 BINARY_SUBSCR						    30 LOAD_FAST 10 ( b )					  
							      30 STORE_SUBSCR						    32 LOAD_FAST 11 ( b )					  
							      32 JUMP_ABSOLUTE 16					    34 LOAD_FAST 12 ( b )					  
							      >> 34 POP_BLOCK						    36 LOAD_FAST 13 ( b )					  
							      								    38 LOAD_FAST 14 ( b )					  
							      5 >> 36 SETUP_LOOP 48 ( to 86 )				    40 LOAD_FAST 15 ( b )					  
							      38 LOAD_GLOBAL 1 ( range )				    42 LOAD_FAST 16 ( b )					  
							      40 LOAD_FAST 2 ( n )					    44 LOAD_FAST 17 ( b )					  
							      42 CALL_FUNCTION 1					    46 LOAD_FAST 18 ( b )					  
							      44 GET_ITER						    48 LOAD_FAST 19 ( b )					  
							      >> 46 FOR_ITER 36 ( to 84 )				    50 LOAD_FAST 18 ( b )					  
							      48 STORE_FAST 5 ( i )					    52 LOAD_FAST 19 ( b )					  
							      								    54 LOAD_FAST 20 ( b )					  
							      6 50 LOAD_FAST 0 ( a )					    56 LOAD_FAST 21 ( b )					  
							      52 LOAD_FAST 5 ( i )					    58 LOAD_FAST 20 ( b )					  
							      54 BINARY_SUBSCR						    60 LOAD_FAST 21 ( b )					  
							      56 LOAD_FAST 4 ( s )					    62 LOAD_FAST 22 ( b )					  
							      58 LOAD_METHOD 2 ( keys )					    64 LOAD_FAST 21 ( b )					  
							      60 CALL_METHOD 0						    66 LOAD_FAST 22 ( b )					  
							      62 COMPARE_OP 7 ( not in )				    68 LOAD_FAST 21 ( b )					  
							      64 POP_JUMP_IF_FALSE 46					    70 LOAD_FAST 22 ( b )					  
							      								    72 LOAD_FAST 21 ( b )					  
							      7 66 LOAD_GLOBAL 3 ( print )				    74 LOAD_FAST 22 ( b )					  
							      68 LOAD_FAST 0 ( a )					    76 LOAD_FAST 21 ( b )					  
							      70 LOAD_FAST 5 ( i )					    78 LOAD_FAST 22 ( b )					  
							      72 BINARY_SUBSCR						    80 LOAD_FAST 23 ( b )					  
							      74 LOAD_CONST 2 ( ' ' )					    82 LOAD_FAST 22 ( b )					  
							      76 LOAD_CONST 3 ( ( 'end' , ) )				    84 LOAD_FAST 21 ( b )					  
							      78 CALL_FUNCTION_KW 2					    86 LOAD_FAST 22 ( b )					  
							      80 POP_TOP						    88 LOAD_FAST 23 ( b )					  
							      82 JUMP_ABSOLUTE 46					    90 LOAD_FAST 22 ( b )					  
							      >> 84 POP_BLOCK						    92 LOAD_FAST 21 ( b )					  
							      >> 86 LOAD_CONST 0 ( None )				    94 LOAD_FAST 22 ( b )					  
							      88 RETURN_VALUE NEW_LINE					    96 LOAD_FAST 23 ( b )					  
							      								    98 LOAD_FAST 22 ( b )					  
							      								    100 LOAD_FAST 23 ( b )					  
							      								    102 LOAD_FAST 22 ( b )					  
							      								    104 LOAD_FAST 23 ( b )					  
							      								    106 LOAD_FAST 23 ( b )					  
							      								    108 LOAD_FAST 22 ( b )					  
							      								    110 LOAD_FAST 23 ( b )					  
							      								    112 LOAD_FAST 22 ( b )					  
							      								    114 BUILD_TUPLE 21						  
							      								    116 CALL_FUNCTION 22					  
							      								    118 STORE_FAST 2 ( a )					  
							      								    								  
							      								    118 120 LOAD_FAST 2 ( a )					  
							      								    122 LOAD_FAST 23 ( b )					  
							      								    124 LOAD_FAST 22 ( b )					  
							      								    126 LOAD_FAST 23 ( b )					  
							      								    128 LOAD_FAST 23 ( b )					  
							      								    130 LOAD_FAST 22 ( b )					  
							      								    132 LOAD_FAST 23 ( b )					  
							      								    134 LOAD_FAST 23 ( b )					  
							      								    136 BUILD_TUPLE 21						  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1
--							      --							    --								  --
def findInteger ( arr , n ) :				      Disassembly of <code object findInteger at 0x7fbac0e8bc90, fi Disassembly of <code object findInteger at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    neg = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    pos = 0						      2 STORE_FAST 2 ( neg )					    2 LOAD_METHOD 0 ( sum )					  (item)   File "main.py", line 37, in <module>	  Fi
    sum = 0						      								    4 CALL_METHOD 0						  le "<dis>", line 2, in findInteger AttributeError:
    for i in range ( 0 , n ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					   'list' object has no attribute 'sum'
	sum += arr [ i ]				      6 STORE_FAST 3 ( pos )					    								  
	if ( arr [ i ] < 0 ) :				      								    27 8 LOAD_FAST 1 ( n )					  
	    neg += 1					      4 8 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
	else :						      10 STORE_FAST 4 ( sum )					    12 BINARY_SUBSCR						  
	    pos += 1					      								    14 STORE_FAST 2 ( a )					  
    return ( sum / abs ( neg - pos ) )			      5 12 SETUP_LOOP 60 ( to 74 )				    								  
							      14 LOAD_GLOBAL 0 ( range )				    28 16 LOAD_FAST 2 ( a )					  
							      16 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_FAST 1 ( n )					    20 COMPARE_OP 2 ( == )					  
							      20 CALL_FUNCTION 2					    22 POP_JUMP_IF_FALSE 28					  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 46 ( to 72 )				    29 24 LOAD_FAST 1 ( n )					  
							      26 STORE_FAST 5 ( i )					    26 LOAD_CONST 3 ( 1 )					  
							      								    28 INPLACE_ADD						  
							      6 28 LOAD_FAST 4 ( sum )					    30 STORE_FAST 1 ( n )					  
							      30 LOAD_FAST 0 ( arr )					    								  
							      32 LOAD_FAST 5 ( i )					    30 >> 32 LOAD_FAST 1 ( n )					  
							      34 BINARY_SUBSCR						    34 LOAD_CONST 4 ( - 1 )					  
							      36 INPLACE_ADD						    36 COMPARE_OP 2 ( == )					  
							      38 STORE_FAST 4 ( sum )					    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 40 LOAD_FAST 0 ( arr )					    31 40 LOAD_FAST 1 ( n )					  
							      42 LOAD_FAST 5 ( i )					    42 LOAD_CONST 5 ( - 1 )					  
							      44 BINARY_SUBSCR						    44 INPLACE_ADD						  
							      46 LOAD_CONST 1 ( 0 )					    46 STORE_FAST 1 ( n )					  
							      48 COMPARE_OP 0 ( < )					    								  
							      50 POP_JUMP_IF_FALSE 62					    32 >> 48 LOAD_FAST 1 ( n )					  
							      								    50 LOAD_CONST 6 ( - 1 )					  
							      8 52 LOAD_FAST 2 ( neg )					    52 INPLACE_ADD						  
							      54 LOAD_CONST 2 ( 1 )					    54 STORE_FAST 1 ( n )					  
							      56 INPLACE_ADD						    								  
							      58 STORE_FAST 2 ( neg )					    33 56 LOAD_FAST 1 ( n )					  
							      60 JUMP_ABSOLUTE 24					    58 LOAD_CONST 7 ( - 1 )					  
							      								    60 INPLACE_ADD						  
							      10 >> 62 LOAD_FAST 3 ( pos )				    62 STORE_FAST 1 ( n )					  
							      64 LOAD_CONST 2 ( 1 )					    								  
							      66 INPLACE_ADD						    34 64 LOAD_FAST 1 ( n )					  
							      68 STORE_FAST 3 ( pos )					    66 LOAD_CONST 8 ( - 1 )					  
							      70 JUMP_ABSOLUTE 24					    68 INPLACE_ADD						  
							      >> 72 POP_BLOCK						    70 STORE_FAST 1 ( n )					  
							      								    								  
							      11 >> 74 LOAD_FAST 4 ( sum )				    35 72 LOAD_FAST 1 ( n )					  
							      76 LOAD_GLOBAL 1 ( abs )					    74 LOAD_CONST 9 ( 1 )					  
							      78 LOAD_FAST 2 ( neg )					    76 INPLACE_ADD						  
							      80 LOAD_FAST 3 ( pos )					    78 STORE_FAST 1 ( n )					  
							      82 BINARY_SUBTRACT					    80 JUMP_FORWARD 14 ( to 106 )				  
							      84 CALL_FUNCTION 1					    								  
							      86 BINARY_TRUE_DIVIDE					    36 >> 82 LOAD_FAST 1 ( n )					  
							      88 RETURN_VALUE NEW_LINE					    84 LOAD_CONST 10 ( - 1 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( n )					  
							      								    								  
							      								    37 >> 90 LOAD_FAST 1 ( n )					  
							      								    92 LOAD_CONST 11 ( - 1 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 1 ( n )					  
							      								    								  
							      								    38 98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_CONST 12 ( - 1 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( n )					  
							      								    								  
							      								    39 106 LOAD_FAST 1 ( n )					  
							      								    108 LOAD_FAST 0 ( arr )					  
							      								    110 LOAD_CONST 12 ( - 1 )					  
							      								    112 INPLACE_ADD						  
							      								    114 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 >> 116 LOAD_FAST 1 ( n )					  
							      								    118 LOAD_CONST 13 ( - 1 )					  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 124 LOAD_FAST 1 ( n )					  
							      								    126 LOAD_FAST 0 ( arr )					  
							      								    128 LOAD_CONST 14 ( - 1 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_CONST 15 ( - 1 )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( n )					  
							      								    								  
							      								    43 142 LOAD_FAST 1 ( n )					  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
def isIdentity ( mat , N ) :				      Disassembly of <code object isIdentity at 0x7fbac<<unk>> de40 Disassembly of <code object isIdentity at 0x7f816a677930, fil error : Traceback (most recent call last):   File
    for row in range ( N ) :				      2 0 SETUP_LOOP 90 ( to 92 )				    65 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 59, in <module>	for
	for col in range ( N ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  item in run_dis_script():   File "XLM/dis_script.p
	    if ( row == col and mat [ row ] [ col ] != 1 ) :  4 LOAD_FAST 1 ( N )					    4 LOAD_FAST 0 ( mat )					  y", line 47, in run_dis_script     co_code, co_nlo
		return False ;				      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  cals, co_varnames, co_names, co_consts, co_linesta
	    elif ( row != col and mat [ row ] [ col ] != 0 )  8 GET_ITER						    8 GET_ITER							  rts = dis_asm.parse(bytecode) TypeError: cannot un
		return False ;				      >> 10 FOR_ITER 78 ( to 90 )				    >> 10 FOR_ITER 22 ( to 22 )					  pack non-iterable NoneType object
    return True ;					      12 STORE_FAST 2 ( row )					    12 STORE_FAST 1 ( N )					  
							      								    								  
							      3 14 SETUP_LOOP 72 ( to 88 )				    66 14 LOAD_FAST 1 ( N )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_FAST 1 ( N )					    18 COMPARE_OP 4 ( > )					  
							      20 CALL_FUNCTION 1					    20 POP_JUMP_IF_FALSE 10					  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 60 ( to 86 )				    67 22 LOAD_FAST 1 ( N )					  
							      26 STORE_FAST 3 ( col )					    24 LOAD_CONST 2 ( 1 )					  
							      								    26 COMPARE_OP 4 ( > )					  
							      4 28 LOAD_FAST 2 ( row )					    28 POP_JUMP_IF_FALSE 10					  
							      30 LOAD_FAST 3 ( col )					    								  
							      32 COMPARE_OP 2 ( == )					    68 30 LOAD_FAST 1 ( N )					  
							      34 POP_JUMP_IF_FALSE 56					    32 LOAD_CONST 3 ( 1 )					  
							      36 LOAD_FAST 0 ( mat )					    34 COMPARE_OP 4 ( > )					  
							      38 LOAD_FAST 2 ( row )					    36 POP_JUMP_IF_FALSE 10					  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 3 ( col )					    69 38 LOAD_FAST 1 ( N )					  
							      44 BINARY_SUBSCR						    40 LOAD_CONST 4 ( 0 )					  
							      46 LOAD_CONST 1 ( 1 )					    42 COMPARE_OP 4 ( > )					  
							      48 COMPARE_OP 3 ( != )					    44 POP_JUMP_IF_FALSE 10					  
							      50 POP_JUMP_IF_FALSE 56					    								  
							      								    70 46 LOAD_FAST 1 ( N )					  
							      5 52 LOAD_CONST 2 ( False )				    48 LOAD_CONST 5 ( 1 )					  
							      54 RETURN_VALUE						    50 COMPARE_OP 4 ( > )					  
							      								    52 POP_JUMP_IF_FALSE 10					  
							      6 >> 56 LOAD_FAST 2 ( row )				    								  
							      58 LOAD_FAST 3 ( col )					    71 54 LOAD_FAST 1 ( N )					  
							      60 COMPARE_OP 3 ( != )					    56 LOAD_CONST 6 ( 1 )					  
							      62 POP_JUMP_IF_FALSE 24					    58 COMPARE_OP 4 ( > )					  
							      64 LOAD_FAST 0 ( mat )					    60 POP_JUMP_IF_FALSE 10					  
							      66 LOAD_FAST 2 ( row )					    								  
							      68 BINARY_SUBSCR						    72 62 LOAD_FAST 1 ( N )					  
							      70 LOAD_FAST 3 ( col )					    64 LOAD_CONST 7 ( 1 )					  
							      72 BINARY_SUBSCR						    66 COMPARE_OP 4 ( > )					  
							      74 LOAD_CONST 3 ( 0 )					    68 POP_JUMP_IF_FALSE 10					  
							      76 COMPARE_OP 3 ( != )					    								  
							      78 POP_JUMP_IF_FALSE 24					    73 70 LOAD_FAST 1 ( N )					  
							      								    72 LOAD_CONST 8 ( 1 )					  
							      7 80 LOAD_CONST 2 ( False )				    74 COMPARE_OP 4 ( > )					  
							      82 RETURN_VALUE						    76 POP_JUMP_IF_FALSE 10					  
							      84 JUMP_ABSOLUTE 24					    								  
							      >> 86 POP_BLOCK						    74 78 LOAD_FAST 1 ( N )					  
							      >> 88 JUMP_ABSOLUTE 10					    80 LOAD_CONST 9 ( 1 )					  
							      >> 90 POP_BLOCK						    82 COMPARE_OP 4 ( > )					  
							      								    84 POP_JUMP_IF_FALSE 10					  
							      8 >> 92 LOAD_CONST 4 ( True )				    								  
							      94 RETURN_VALUE NEW_LINE					    75 86 LOAD_FAST 1 ( N )					  
							      								    88 LOAD_CONST 10 ( 1 )					  
							      								    90 COMPARE_OP 4 ( > )					  
							      								    92 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    76 94 LOAD_FAST 1 ( N )					  
							      								    96 LOAD_CONST 11 ( 1 )					  
							      								    98 COMPARE_OP 4 ( > )					  
							      								    100 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    77 102 LOAD_FAST 1 ( N )					  
							      								    104 LOAD_CONST 12 ( 1 )					  
							      								    106 COMPARE_OP 4 ( > )					  
							      								    108 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    78 110 LOAD_FAST 1 ( N )					  
							      								    112 LOAD_CONST 13 ( 1 )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      								    116 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    79 118 LOAD_FAST 1 ( N )					  
							      								    120 LOAD_CONST 12 ( 1 )					  
							      								    122 COMPARE_OP 4 ( > )					  
							      								    124 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    80 126 LOAD_FAST 1 ( N )					  
							      								    128 LOAD_CONST 13 ( 1 )					  
							      								    130 COMPARE_OP 4 ( > )					  
							      								    132 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    81 134 LOAD_FAST 1 ( N )					  
							      								    136 LOAD_CONST 14 ( 1 )					  
							      								    138 COMPARE_OP 4 ( > )					  
							      								    140 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    82 142 LOAD_FAST 1 ( N )					  
							      								    144 RETURN_VALUE						  
							      								    								  
							      								    84 >> 146 LOAD_FAST 1 ( N					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SINK_NODES_GRAPH					      NUMBER_SINK_NODES_GRAPH					    NUMBER_SINK_NODES_GRAPH					  NUMBER_SINK_NODES_GRAPH
--							      --							    --								  --
def countSink ( n , m , edgeFrom , edgeTo ) :		      Disassembly of <code object countSink at 0x7fbac0e89d20, file Disassembly of <code object countSink at 0x7f816a6e4b70, file script_not_found : None
    mark = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    28 0 LOAD_FAST 1 ( m )					  
    for i in range ( m ) :				      2 BUILD_LIST 1						    2 LOAD_METHOD 0 ( mark )					  
	mark [ edgeFrom [ i ] ] = 1			      4 LOAD_FAST 0 ( n )					    4 CALL_METHOD 0						  
    count = 0						      6 LOAD_CONST 2 ( 1 )					    6 STORE_FAST 2 ( count )					  
    for i in range ( 1 , n + 1 ) :			      8 BINARY_ADD						    								  
	if ( not mark [ i ] ) :				      10 BINARY_MULTIPLY					    29 8 LOAD_FAST 0 ( n )					  
	    count += 1					      12 STORE_FAST 4 ( mark )					    10 LOAD_METHOD 1 ( edgeFrom )				  
    return count					      								    12 CALL_METHOD 0						  
							      3 14 SETUP_LOOP 28 ( to 44 )				    14 STORE_FAST 3 ( count )					  
							      16 LOAD_GLOBAL 0 ( range )				    								  
							      18 LOAD_FAST 1 ( m )					    30 16 LOAD_FAST 2 ( count )					  
							      20 CALL_FUNCTION 1					    18 LOAD_CONST 1 ( 1 )					  
							      22 GET_ITER						    20 COMPARE_OP 2 ( == )					  
							      >> 24 FOR_ITER 16 ( to 42 )				    22 POP_JUMP_IF_FALSE 28					  
							      26 STORE_FAST 5 ( i )					    								  
							      								    31 24 LOAD_FAST 0 ( n )					  
							      4 28 LOAD_CONST 2 ( 1 )					    26 LOAD_METHOD 2 ( append )					  
							      30 LOAD_FAST 4 ( mark )					    28 LOAD_FAST 3 ( count )					  
							      32 LOAD_FAST 2 ( edgeFrom )				    30 CALL_METHOD 1						  
							      34 LOAD_FAST 5 ( i )					    32 POP_TOP							  
							      36 BINARY_SUBSCR						    								  
							      38 STORE_SUBSCR						    32 34 LOAD_FAST 0 ( n )					  
							      40 JUMP_ABSOLUTE 24					    36 LOAD_METHOD 3 ( append )					  
							      >> 42 POP_BLOCK						    38 LOAD_FAST 1 ( m )					  
							      								    40 CALL_METHOD 1						  
							      5 >> 44 LOAD_CONST 1 ( 0 )				    42 POP_TOP							  
							      46 STORE_FAST 6 ( count )					    								  
							      								    33 44 LOAD_FAST 0 ( n )					  
							      6 48 SETUP_LOOP 38 ( to 88 )				    46 LOAD_METHOD 4 ( append )					  
							      50 LOAD_GLOBAL 0 ( range )				    48 LOAD_FAST 1 ( m )					  
							      52 LOAD_CONST 2 ( 1 )					    50 LOAD_METHOD 5 ( count )					  
							      54 LOAD_FAST 0 ( n )					    52 CALL_METHOD 0						  
							      56 LOAD_CONST 2 ( 1 )					    54 CALL_METHOD 1						  
							      58 BINARY_ADD						    56 POP_TOP							  
							      60 CALL_FUNCTION 2					    58 JUMP_FORWARD 22 ( to 78 )				  
							      62 GET_ITER						    								  
							      >> 64 FOR_ITER 20 ( to 86 )				    34 >> 60 LOAD_FAST 0 ( n )					  
							      66 STORE_FAST 5 ( i )					    62 LOAD_METHOD 6 ( append )					  
							      								    64 LOAD_FAST 1 ( m )					  
							      7 68 LOAD_FAST 4 ( mark )					    66 CALL_METHOD 1						  
							      70 LOAD_FAST 5 ( i )					    68 POP_TOP							  
							      72 BINARY_SUBSCR						    >> 70 LOAD_CONST 2 ( None )					  
							      74 POP_JUMP_IF_TRUE 64					    72 RETURN_VALUE						  
							      								    NEW_LINE							  
							      8 76 LOAD_FAST 6 ( count )				    								  
							      78 LOAD_CONST 2 ( 1 )					    								  
							      80 INPLACE_ADD						    								  
							      82 STORE_FAST 6 ( count )					    								  
							      84 JUMP_ABSOLUTE 64					    								  
							      >> 86 POP_BLOCK						    								  
							      								    								  
							      9 >> 88 LOAD_FAST 6 ( count )				    								  
							      90 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS	  GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS
--							      --							    --								  --
def generate ( ones , zeroes , str , len1 ) :		      Disassembly of <code object generate at 0x7fbac<<unk>> de40,  Disassembly of <code object generate at 0x7f816a6e4b70, file  script_not_found : None
    if ( len1 == len ( str ) ) :			      2 0 LOAD_FAST 3 ( len1 )					    56 0 LOAD_FAST 0 ( self )					  
	print ( str , end = " " )			      2 LOAD_GLOBAL 0 ( len )					    2 LOAD_ATTR 0 ( len1 )					  
	return						      4 LOAD_FAST 2 ( str )					    4 LOAD_CONST 1 ( 1 )					  
    generate ( ones + 1 , zeroes , str + "1" , len1 )	      6 CALL_FUNCTION 1						    6 COMPARE_OP 2 ( == )					  
    if ( ones > zeroes ) :				      8 COMPARE_OP 2 ( == )					    8 POP_JUMP_IF_FALSE 14					  
	generate ( ones , zeroes + 1 , str + "0" , len1 )     10 POP_JUMP_IF_FALSE 28					    								  
							      								    57 10 LOAD_GLOBAL 1 ( print )				  
							      3 12 LOAD_GLOBAL 1 ( print )				    12 LOAD_CONST 2 ( '%s = %s' )				  
							      14 LOAD_FAST 2 ( str )					    14 LOAD_FAST 0 ( self )					  
							      16 LOAD_CONST 1 ( ' ' )					    16 LOAD_ATTR 0 ( len1 )					  
							      18 LOAD_CONST 2 ( ( 'end' , ) )				    18 BINARY_MODULO						  
							      20 CALL_FUNCTION_KW 2					    20 CALL_FUNCTION 1						  
							      22 POP_TOP						    22 POP_TOP							  
							      								    								  
							      4 24 LOAD_CONST 0 ( None )				    58 24 LOAD_GLOBAL 1 ( print )				  
							      26 RETURN_VALUE						    26 LOAD_CONST 3 ( '%s = %s' )				  
							      								    28 LOAD_FAST 0 ( self )					  
							      5 >> 28 LOAD_GLOBAL 2 ( generate )			    30 LOAD_ATTR 0 ( len1 )					  
							      30 LOAD_FAST 0 ( ones )					    32 BINARY_MODULO						  
							      32 LOAD_CONST 3 ( 1 )					    34 CALL_FUNCTION 1						  
							      34 BINARY_ADD						    36 POP_TOP							  
							      36 LOAD_FAST 1 ( zeroes )					    								  
							      38 LOAD_FAST 2 ( str )					    59 38 LOAD_GLOBAL 1 ( print )				  
							      40 LOAD_CONST 4 ( '1' )					    40 LOAD_CONST 4 ( '%s = %s' )				  
							      42 BINARY_ADD						    42 LOAD_FAST 0 ( self )					  
							      44 LOAD_FAST 3 ( len1 )					    44 LOAD_ATTR 0 ( len1 )					  
							      46 CALL_FUNCTION 4					    46 BINARY_MODULO						  
							      48 POP_TOP						    48 CALL_FUNCTION 1						  
							      								    50 POP_TOP							  
							      6 50 LOAD_FAST 0 ( ones )					    52 LOAD_CONST 0 ( None )					  
							      52 LOAD_FAST 1 ( zeroes )					    54 RETURN_VALUE						  
							      54 COMPARE_OP 4 ( > )					    NEW_LINE							  
							      56 POP_JUMP_IF_FALSE 80					    								  
							      								    								  
							      7 58 LOAD_GLOBAL 2 ( generate )				    								  
							      60 LOAD_FAST 0 ( ones )					    								  
							      62 LOAD_FAST 1 ( zeroes )					    								  
							      64 LOAD_CONST 3 ( 1 )					    								  
							      66 BINARY_ADD						    								  
							      68 LOAD_FAST 2 ( str )					    								  
							      70 LOAD_CONST 5 ( '0' )					    								  
							      72 BINARY_ADD						    								  
							      74 LOAD_FAST 3 ( len1 )					    								  
							      76 CALL_FUNCTION 4					    								  
							      78 POP_TOP						    								  
							      >> 80 LOAD_CONST 0 ( None )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		      FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		    FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		  FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING
--							      --							    --								  --
def findRepeatFirstN2 ( s ) :				      Disassembly of <code object findRepeatFirstN2 at 0x7fbac<<unk Disassembly of <code object findRepeatFirstN2 at 0x7f816a673a error : Traceback (most recent call last):   File
    p = - 1						      2 0 LOAD_CONST 1 ( - 1 )					    31 0 LOAD_CONST 1 ( - 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( len ( s ) ) :			      2 STORE_FAST 1 ( p )					    2 STORE_FAST 1 ( s )					  (item)   File "main.py", line 36, in <module>	  Fi
	for j in range ( i + 1 , len ( s ) ) :		      								    								  le "<dis>", line 2, in findRepeatFirstN2 Attribute
	    if ( s [ i ] == s [ j ] ) :			      3 4 SETUP_LOOP 80 ( to 86 )				    32 4 SETUP_LOOP 76 ( to 78 )				  Error: 'str' object has no attribute 'append'
		p = i					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
		break					      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_CONST 2 ( 10 )					  
	if ( p != - 1 ) :				      10 LOAD_FAST 0 ( s )					    10 CALL_FUNCTION 1						  
	    break					      12 CALL_FUNCTION 1					    12 GET_ITER							  
    return p						      14 CALL_FUNCTION 1					    >> 14 FOR_ITER 76 ( to 76 )					  
							      16 GET_ITER						    16 STORE_FAST 2 ( i )					  
							      >> 18 FOR_ITER 64 ( to 84 )				    								  
							      20 STORE_FAST 2 ( i )					    33 18 LOAD_FAST 0 ( s )					  
							      								    20 LOAD_METHOD 1 ( append )					  
							      4 22 SETUP_LOOP 48 ( to 72 )				    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_GLOBAL 0 ( range )				    24 CALL_METHOD 1						  
							      26 LOAD_FAST 2 ( i )					    26 POP_TOP							  
							      28 LOAD_CONST 2 ( 1 )					    28 JUMP_ABSOLUTE 14						  
							      30 BINARY_ADD						    >> 30 POP_BLOCK						  
							      32 LOAD_GLOBAL 1 ( len )					    >> 32 LOAD_CONST 3 ( None )					  
							      34 LOAD_FAST 0 ( s )					    34 RETURN_VALUE						  
							      36 CALL_FUNCTION 1					    NEW_LINE							  
							      38 CALL_FUNCTION 2					    								  
							      40 GET_ITER						    								  
							      >> 42 FOR_ITER 26 ( to 70 )				    								  
							      44 STORE_FAST 3 ( j )					    								  
							      								    								  
							      5 46 LOAD_FAST 0 ( s )					    								  
							      48 LOAD_FAST 2 ( i )					    								  
							      50 BINARY_SUBSCR						    								  
							      52 LOAD_FAST 0 ( s )					    								  
							      54 LOAD_FAST 3 ( j )					    								  
							      56 BINARY_SUBSCR						    								  
							      58 COMPARE_OP 2 ( == )					    								  
							      60 POP_JUMP_IF_FALSE 42					    								  
							      								    								  
							      6 62 LOAD_FAST 2 ( i )					    								  
							      64 STORE_FAST 1 ( p )					    								  
							      								    								  
							      7 66 BREAK_LOOP						    								  
							      68 JUMP_ABSOLUTE 42					    								  
							      >> 70 POP_BLOCK						    								  
							      								    								  
							      8 >> 72 LOAD_FAST 1 ( p )					    								  
							      74 LOAD_CONST 1 ( - 1 )					    								  
							      76 COMPARE_OP 3 ( != )					    								  
							      78 POP_JUMP_IF_FALSE 18					    								  
							      								    								  
							      9 80 BREAK_LOOP						    								  
							      82 JUMP_ABSOLUTE 18					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 LOAD_FAST 1 ( p )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			      COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			    COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			  COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N
--							      --							    --								  --
def countOfBinaryNumberLessThanN ( N ) :		      Disassembly of <code object countOfBinaryNumberLessThanN at 0 Disassembly of <code object countOfBinaryNumberNumberNumberNu script_not_found : None
    q = deque ( )					      2 0 LOAD_GLOBAL 0 ( deque )				    69 0 LOAD_GLOBAL 0 ( deque )				  
    q.append ( 1 )					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    cnt = 0						      4 STORE_FAST 1 ( q )					    4 STORE_FAST 1 ( cnt )					  
    while ( q ) :					      								    								  
	t = q.popleft ( )				      3 6 LOAD_FAST 1 ( q )					    70 6 SETUP_LOOP 22 ( to 28 )				  
	if ( t <= N ) :					      8 LOAD_METHOD 1 ( append )				    8 LOAD_GLOBAL 1 ( range )					  
	    cnt = cnt + 1				      10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( 1 )					  
	    q.append ( t * 10 )				      12 CALL_METHOD 1						    12 CALL_FUNCTION 1						  
	    q.append ( t * 10 + 1 )			      14 POP_TOP						    14 GET_ITER							  
    return cnt						      								    >> 16 FOR_ITER 14 ( to 26 )					  
							      4 16 LOAD_CONST 2 ( 0 )					    18 STORE_FAST 2 ( i )					  
							      18 STORE_FAST 2 ( cnt )					    								  
							      								    71 20 LOAD_FAST 1 ( cnt )					  
							      5 20 SETUP_LOOP 64 ( to 86 )				    22 LOAD_METHOD 2 ( popleft )				  
							      >> 22 LOAD_FAST 1 ( q )					    24 CALL_METHOD 0						  
							      24 POP_JUMP_IF_FALSE 84					    26 GET_ITER							  
							      								    >> 28 FOR_ITER 14 ( to 26 )					  
							      6 26 LOAD_FAST 1 ( q )					    30 STORE_FAST 3 ( i )					  
							      28 LOAD_METHOD 2 ( popleft )				    								  
							      30 CALL_METHOD 0						    72 32 LOAD_FAST 3 ( i )					  
							      32 STORE_FAST 3 ( t )					    34 LOAD_CONST 2 ( 1 )					  
							      								    36 BINARY_SUBTRACT						  
							      7 34 LOAD_FAST 3 ( t )					    38 STORE_FAST 4 ( i )					  
							      36 LOAD_FAST 0 ( N )					    								  
							      38 COMPARE_OP 1 ( <= )					    73 40 LOAD_FAST 4 ( i )					  
							      40 POP_JUMP_IF_FALSE 22					    42 LOAD_CONST 3 ( 1 )					  
							      								    44 INPLACE_ADD						  
							      8 42 LOAD_FAST 2 ( cnt )					    46 STORE_FAST 4 ( i )					  
							      44 LOAD_CONST 1 ( 1 )					    48 JUMP_ABSOLUTE 16						  
							      46 BINARY_ADD						    >> 50 POP_BLOCK						  
							      48 STORE_FAST 2 ( cnt )					    								  
							      								    74 >> 52 LOAD_FAST 1 ( cnt )				  
							      9 50 LOAD_FAST 1 ( q )					    54 RETURN_VALUE						  
							      52 LOAD_METHOD 1 ( append )				    NEW_LINE							  
							      54 LOAD_FAST 3 ( t )					    								  
							      56 LOAD_CONST 3 ( 10 )					    								  
							      58 BINARY_MULTIPLY					    								  
							      60 CALL_METHOD 1						    								  
							      62 POP_TOP						    								  
							      								    								  
							      10 64 LOAD_FAST 1 ( q )					    								  
							      66 LOAD_METHOD 1 ( append )				    								  
							      68 LOAD_FAST 3 ( t )					    								  
							      70 LOAD_CONST 3 ( 10 )					    								  
							      72 BINARY_MULTIPLY					    								  
							      74 LOAD_CONST 1 ( 1 )					    								  
							      76 BINARY_ADD						    								  
							      78 CALL_METHOD 1						    								  
							      80 POP_TOP						    								  
							      82 JUMP_ABSOLUTE 22					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      11 >> 86 LOAD_FAST 2 ( cnt )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
def countSolutions ( n ) :				      Disassembly of <code object countSolutions at 0x7fbac0e8bc90, Disassembly of <code object countSolutions at 0x7f816a673a50, error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    x = 0						      2 STORE_FAST 1 ( res )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    while ( x * x < n ) :				      								    4 COMPARE_OP 4 ( > )					  y", line 47, in run_dis_script     co_code, co_nlo
	y = 0						      3 4 LOAD_CONST 1 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	while ( x * x + y * y < n ) :			      6 STORE_FAST 2 ( x )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    res = res + 1				      								    27 8 LOAD_FAST 0 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	    y = y + 1					      4 8 SETUP_LOOP 70 ( to 80 )				    10 LOAD_CONST 2 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	x = x + 1					      >> 10 LOAD_FAST 2 ( x )					    12 INPLACE_ADD						   be in range(0, 256)
    return res						      12 LOAD_FAST 2 ( x )					    14 STORE_FAST 0 ( n )					  
							      14 BINARY_MULTIPLY					    16 JUMP_FORWARD 10 ( to 28 )				  
							      16 LOAD_FAST 0 ( n )					    								  
							      18 COMPARE_OP 0 ( < )					    28 >> 18 LOAD_FAST 0 ( n )					  
							      20 POP_JUMP_IF_FALSE 78					    20 LOAD_CONST 3 ( 1 )					  
							      								    22 INPLACE_ADD						  
							      5 22 LOAD_CONST 1 ( 0 )					    24 STORE_FAST 0 ( n )					  
							      24 STORE_FAST 3 ( y )					    								  
							      								    29 26 LOAD_FAST 0 ( n )					  
							      6 26 SETUP_LOOP 40 ( to 68 )				    28 LOAD_CONST 4 ( 2 )					  
							      >> 28 LOAD_FAST 2 ( x )					    30 INPLACE_ADD						  
							      30 LOAD_FAST 2 ( x )					    32 STORE_FAST 0 ( n )					  
							      32 BINARY_MULTIPLY					    								  
							      34 LOAD_FAST 3 ( y )					    30 34 LOAD_FAST 0 ( n )					  
							      36 LOAD_FAST 3 ( y )					    36 LOAD_CONST 5 ( 1 )					  
							      38 BINARY_MULTIPLY					    38 INPLACE_ADD						  
							      40 BINARY_ADD						    40 STORE_FAST 0 ( n )					  
							      42 LOAD_FAST 0 ( n )					    								  
							      44 COMPARE_OP 0 ( < )					    31 42 LOAD_FAST 0 ( n )					  
							      46 POP_JUMP_IF_FALSE 66					    44 LOAD_CONST 6 ( 2 )					  
							      								    46 INPLACE_ADD						  
							      7 48 LOAD_FAST 1 ( res )					    48 STORE_FAST 0 ( n )					  
							      50 LOAD_CONST 2 ( 1 )					    								  
							      52 BINARY_ADD						    32 50 LOAD_FAST 0 ( n )					  
							      54 STORE_FAST 1 ( res )					    52 LOAD_CONST 7 ( 3 )					  
							      								    54 INPLACE_ADD						  
							      8 56 LOAD_FAST 3 ( y )					    56 STORE_FAST 0 ( n )					  
							      58 LOAD_CONST 2 ( 1 )					    								  
							      60 BINARY_ADD						    33 58 LOAD_FAST 0 ( n )					  
							      62 STORE_FAST 3 ( y )					    60 LOAD_CONST 8 ( 2 )					  
							      64 JUMP_ABSOLUTE 28					    62 INPLACE_ADD						  
							      >> 66 POP_BLOCK						    64 STORE_FAST 0 ( n )					  
							      								    								  
							      9 >> 68 LOAD_FAST 2 ( x )					    34 66 LOAD_FAST 0 ( n )					  
							      70 LOAD_CONST 2 ( 1 )					    68 LOAD_CONST 9 ( 1 )					  
							      72 BINARY_ADD						    70 INPLACE_ADD						  
							      74 STORE_FAST 2 ( x )					    72 STORE_FAST 0 ( n )					  
							      76 JUMP_ABSOLUTE 10					    74 JUMP_FORWARD 10 ( to 80 )				  
							      >> 78 POP_BLOCK						    								  
							      								    35 >> 76 LOAD_FAST 0 ( n )					  
							      10 >> 80 LOAD_FAST 1 ( res )				    78 LOAD_CONST 10 ( 2 )					  
							      82 RETURN_VALUE NEW_LINE					    80 INPLACE_ADD						  
							      								    82 STORE_FAST 0 ( n )					  
							      								    84 JUMP_FORWARD 10 ( to 80 )				  
							      								    								  
							      								    36 >> 86 LOAD_FAST 0 ( n )					  
							      								    88 LOAD_CONST 11 ( 2 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 0 ( n )					  
							      								    								  
							      								    37 94 LOAD_FAST 0 ( n )					  
							      								    96 LOAD_CONST 12 ( 2 )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 0 ( n )					  
							      								    102 STORE_FAST 0 ( n )					  
							      								    								  
							      								    38 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 13 ( 2 )					  
							      								    108 INPLACE_ADD						  
							      								    110 STORE_FAST 0 ( n )					  
							      								    112 JUMP_FORWARD 2 ( to 80 )				  
							      								    								  
							      								    39 >> 114 LOAD_FAST 0 ( n )					  
							      								    116 LOAD_CONST 14 ( 2 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 0 ( n )					  
							      								    122 JUMP_FORWARD 10 ( to 80 )				  
							      								    								  
							      								    40 >> 124 LOAD_FAST 0 ( n )					  
							      								    126 LOAD_CONST 15 ( 3 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 0 ( n )					  
							      								    								  
							      								    41 >> 132 LOAD_FAST 0 ( n )					  
							      								    134 LOAD_CONST 15 ( 3 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 0 ( n )					  
							      								    								  
							      								    42 >> 140 LOAD_FAST 0 ( n )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
def printDistinct ( arr , n ) :				      Disassembly of <code object printDistinct at 0x7fbac0e8bc90,  Disassembly of <code object printDistinct at 0x7f816a673a50,  script_not_found : None
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 84 ( to 86 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	d = 0						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( arr )					  
	for j in range ( 0 , i ) :			      4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  
	    if ( arr [ i ] == arr [ j ] ) :		      6 LOAD_FAST 1 ( n )					    >> 6 FOR_ITER 14 ( to 22 )					  
		d = 1					      8 CALL_FUNCTION 2						    8 STORE_FAST 1 ( n )					  
		break					      10 GET_ITER						    								  
	if ( d == 0 ) :					      >> 12 FOR_ITER 70 ( to 84 )				    27 10 LOAD_FAST 1 ( n )					  
	    print ( arr [ i ] )				      14 STORE_FAST 2 ( i )					    12 LOAD_CONST 1 ( 0 )					  
							      								    14 BINARY_SUBSCR						  
							      3 16 LOAD_CONST 1 ( 0 )					    16 STORE_FAST 2 ( i )					  
							      18 STORE_FAST 3 ( d )					    								  
							      								    28 18 LOAD_FAST 2 ( i )					  
							      4 20 SETUP_LOOP 40 ( to 62 )				    20 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_GLOBAL 0 ( range )				    22 INPLACE_ADD						  
							      24 LOAD_CONST 1 ( 0 )					    24 STORE_FAST 2 ( i )					  
							      26 LOAD_FAST 2 ( i )					    26 JUMP_ABSOLUTE 6						  
							      28 CALL_FUNCTION 2					    >> 28 POP_BLOCK						  
							      30 GET_ITER						    >> 30 LOAD_CONST 3 ( None )					  
							      >> 32 FOR_ITER 26 ( to 60 )				    32 RETURN_VALUE						  
							      34 STORE_FAST 4 ( j )					    NEW_LINE							  
							      								    								  
							      5 36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 2 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 4 ( j )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 COMPARE_OP 2 ( == )					    								  
							      50 POP_JUMP_IF_FALSE 32					    								  
							      								    								  
							      6 52 LOAD_CONST 2 ( 1 )					    								  
							      54 STORE_FAST 3 ( d )					    								  
							      								    								  
							      7 56 BREAK_LOOP						    								  
							      58 JUMP_ABSOLUTE 32					    								  
							      >> 60 POP_BLOCK						    								  
							      								    								  
							      8 >> 62 LOAD_FAST 3 ( d )					    								  
							      64 LOAD_CONST 1 ( 0 )					    								  
							      66 COMPARE_OP 2 ( == )					    								  
							      68 POP_JUMP_IF_FALSE 12					    								  
							      								    								  
							      9 70 LOAD_GLOBAL 1 ( print )				    								  
							      72 LOAD_FAST 0 ( arr )					    								  
							      74 LOAD_FAST 2 ( i )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 CALL_FUNCTION 1					    								  
							      80 POP_TOP						    								  
							      82 JUMP_ABSOLUTE 12					    								  
							      >> 84 POP_BLOCK						    								  
							      >> 86 LOAD_CONST 0 ( None )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR				      FIND_MINIMUM_DIFFERENCE_PAIR				    FIND_MINIMUM_DIFFERENCE_PAIR				  FIND_MINIMUM_DIFFERENCE_PAIR
--							      --							    --								  --
def findMinDiff ( arr , n ) :				      Disassembly of <code object findMinDiff at 0x7fbac<<unk>> de4 Disassembly of <code object findMinDiff at 0x7f816a6e4b70, fi error : /bin/bash: line 1: 25784 Segmentation faul
    diff = 10 ** 20					      2 0 LOAD_CONST 1 ( 100000000000000000000 )		    11 0 LOAD_FAST 1 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( n - 1 ) :				      2 STORE_FAST 2 ( diff )					    2 LOAD_CONST 1 ( 10 )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( i + 1 , n ) :			      								    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	    if abs ( arr [ i ] - arr [ j ] ) < diff :	      3 4 SETUP_LOOP 88 ( to 94 )				    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/FIND_MINIMUM_DI
		diff = abs ( arr [ i ] - arr [ j ] )	      6 LOAD_GLOBAL 0 ( range )					    								  FFERENCE_PAIR.dis
    return diff						      8 LOAD_FAST 1 ( n )					    12 8 LOAD_GLOBAL 0 ( abs )					  
							      10 LOAD_CONST 2 ( 1 )					    10 LOAD_FAST 1 ( n )					  
							      12 BINARY_SUBTRACT					    12 LOAD_CONST 2 ( 10 )					  
							      14 CALL_FUNCTION 1					    14 COMPARE_OP 2 ( == )					  
							      16 GET_ITER						    16 POP_JUMP_IF_FALSE 28					  
							      >> 18 FOR_ITER 72 ( to 92 )				    								  
							      20 STORE_FAST 3 ( i )					    13 18 LOAD_GLOBAL 1 ( abs )					  
							      								    20 LOAD_FAST 1 ( n )					  
							      4 22 SETUP_LOOP 66 ( to 90 )				    22 LOAD_CONST 3 ( 1 )					  
							      24 LOAD_GLOBAL 0 ( range )				    24 BINARY_SUBTRACT						  
							      26 LOAD_FAST 3 ( i )					    26 CALL_FUNCTION 1						  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 4 ( 2 )					  
							      30 BINARY_ADD						    30 COMPARE_OP 2 ( == )					  
							      32 LOAD_FAST 1 ( n )					    32 POP_JUMP_IF_FALSE 38					  
							      34 CALL_FUNCTION 2					    								  
							      36 GET_ITER						    14 34 LOAD_GLOBAL 1 ( abs )					  
							      >> 38 FOR_ITER 48 ( to 88 )				    36 LOAD_FAST 1 ( n )					  
							      40 STORE_FAST 4 ( j )					    38 LOAD_CONST 2 ( 10 )					  
							      								    40 BINARY_SUBTRACT						  
							      5 42 LOAD_GLOBAL 1 ( abs )				    42 CALL_FUNCTION 1						  
							      44 LOAD_FAST 0 ( arr )					    44 LOAD_CONST 4 ( 2 )					  
							      46 LOAD_FAST 3 ( i )					    46 BINARY_SUBTRACT						  
							      48 BINARY_SUBSCR						    48 CALL_FUNCTION 1						  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_CONST 4 ( 2 )					  
							      52 LOAD_FAST 4 ( j )					    52 COMPARE_OP 2 ( == )					  
							      54 BINARY_SUBSCR						    54 POP_JUMP_IF_FALSE 58					  
							      56 BINARY_SUBTRACT					    								  
							      58 CALL_FUNCTION 1					    15 56 LOAD_GLOBAL 1 ( abs )					  
							      60 LOAD_FAST 2 ( diff )					    58 LOAD_FAST 1 ( n )					  
							      62 COMPARE_OP 0 ( < )					    60 LOAD_CONST 5 ( 2 )					  
							      64 POP_JUMP_IF_FALSE 38					    62 BINARY_SUBTRACT						  
							      								    64 CALL_FUNCTION 1						  
							      6 66 LOAD_GLOBAL 1 ( abs )				    66 LOAD_CONST 4 ( 2 )					  
							      68 LOAD_FAST 0 ( arr )					    68 COMPARE_OP 2 ( == )					  
							      70 LOAD_FAST 3 ( i )					    70 POP_JUMP_IF_FALSE 58					  
							      72 BINARY_SUBSCR						    								  
							      74 LOAD_FAST 0 ( arr )					    16 72 LOAD_GLOBAL 1 ( abs )					  
							      76 LOAD_FAST 4 ( j )					    74 LOAD_FAST 1 ( n )					  
							      78 BINARY_SUBSCR						    76 LOAD_CONST 6 ( 10 )					  
							      80 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      82 CALL_FUNCTION 1					    80 CALL_FUNCTION 1						  
							      84 STORE_FAST 2 ( diff )					    82 LOAD_CONST 4 ( 2 )					  
							      86 JUMP_ABSOLUTE 38					    84 COMPARE_OP 2 ( == )					  
							      >> 88 POP_BLOCK						    86 POP_JUMP_IF_FALSE 90					  
							      >> 90 JUMP_ABSOLUTE 18					    								  
							      >> 92 POP_BLOCK						    17 88 LOAD_GLOBAL 1 ( abs )					  
							      								    90 LOAD_FAST 1 ( n )					  
							      7 >> 94 LOAD_FAST 2 ( diff )				    92 LOAD_CONST 7 ( 3 )					  
							      96 RETURN_VALUE NEW_LINE					    94 BINARY_SUBTRACT						  
							      								    96 CALL_FUNCTION 1						  
							      								    98 LOAD_CONST 4 ( 2 )					  
							      								    100 BINARY_SUBTRACT						  
							      								    102 CALL_FUNCTION 1						  
							      								    104 LOAD_CONST 4 ( 2 )					  
							      								    106 BINARY_SUBTRACT						  
							      								    108 CALL_FUNCTION 1						  
							      								    110 LOAD_CONST 4 ( 2 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    18 116 LOAD_GLOBAL 1 ( abs )				  
							      								    118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_CONST 8 ( 10 )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 CALL_FUNCTION 1						  
							      								    126 LOAD_CONST 4 ( 2 )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 CALL_FUNCTION 1						  
							      								    132 LOAD_CONST 4 ( 2 )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    19 138 LOAD_GLOBAL 1 ( abs )				  
							      								    140 LOAD_FAST 1 ( n )					  
							      								    142 LOAD_CONST 9 ( 1 )					  
							      								    144 BINARY_SUBTRACT						  
							      								    146 CALL_FUNCTION 1						  
							      								    148 LOAD_CONST 4 ( 2 )					  
							      								    150 BINARY_SUBTRACT						  
							      								    152 CALL_FUNCTION 1						  
							      								    154 RETURN_VALUE						  
							      								    								  
							      								    20 >> 156 LOAD_GLOBAL 1 ( abs )				  
							      								    158 LOAD_FAST 1 ( n )					  
							      								    160 CALL_FUNCTION 1						  
							      								    162 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C
--							      --							    --								  --
def fitOrNotFit ( R , r , x , y , rad ) :		      Disassembly of <code object fitOrNotFit at 0x7fbac<<unk>> de4 Disassembly of <code object fitOrNotFit at 0x7f816a683d20, fi script_not_found : None
    val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) 2 0 LOAD_GLOBAL 0 ( math )				    74 0 LOAD_FAST 1 ( r )					  
    if ( val + rad <= R and val - rad >= R - r ) :	      2 LOAD_METHOD 1 ( sqrt )					    2 LOAD_GLOBAL 0 ( math )					  
	print ( "Fits\n" )				      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_METHOD 1 ( pow )					  
    else :						      6 LOAD_METHOD 2 ( pow )					    6 LOAD_FAST 0 ( R )						  
	print ( "Doesn't Fit" )				      8 LOAD_FAST 2 ( x )					    8 LOAD_FAST 1 ( r )						  
							      10 LOAD_CONST 1 ( 2 )					    10 LOAD_FAST 2 ( rad )					  
							      12 CALL_METHOD 2						    12 LOAD_FAST 3 ( rad )					  
							      14 LOAD_GLOBAL 0 ( math )					    14 LOAD_FAST 4 ( rad )					  
							      16 LOAD_METHOD 2 ( pow )					    16 CALL_METHOD 5						  
							      18 LOAD_FAST 3 ( y )					    18 BINARY_MULTIPLY						  
							      20 LOAD_CONST 1 ( 2 )					    20 BINARY_ADD						  
							      22 CALL_METHOD 2						    22 STORE_FAST 5 ( math )					  
							      24 BINARY_ADD						    								  
							      26 CALL_METHOD 1						    75 24 LOAD_FAST 5 ( math )					  
							      28 STORE_FAST 5 ( val )					    26 LOAD_METHOD 2 ( pow )					  
							      								    28 LOAD_FAST 5 ( math )					  
							      3 30 LOAD_FAST 5 ( val )					    30 LOAD_FAST 1 ( r )					  
							      32 LOAD_FAST 4 ( rad )					    32 LOAD_FAST 2 ( rad )					  
							      34 BINARY_ADD						    34 LOAD_FAST 5 ( math )					  
							      36 LOAD_FAST 0 ( R )					    36 CALL_METHOD 5						  
							      38 COMPARE_OP 1 ( <= )					    38 BINARY_MULTIPLY						  
							      40 POP_JUMP_IF_FALSE 68					    40 BINARY_ADD						  
							      42 LOAD_FAST 5 ( val )					    42 RETURN_VALUE						  
							      44 LOAD_FAST 4 ( rad )					    NEW_LINE							  
							      46 BINARY_SUBTRACT					    								  
							      48 LOAD_FAST 0 ( R )					    								  
							      50 LOAD_FAST 1 ( r )					    								  
							      52 BINARY_SUBTRACT					    								  
							      54 COMPARE_OP 5 ( >= )					    								  
							      56 POP_JUMP_IF_FALSE 68					    								  
							      								    								  
							      4 58 LOAD_GLOBAL 3 ( print )				    								  
							      60 LOAD_CONST 2 ( 'Fits\n' )				    								  
							      62 CALL_FUNCTION 1					    								  
							      64 POP_TOP						    								  
							      66 JUMP_FORWARD 8 ( to 76 )				    								  
							      								    								  
							      6 >> 68 LOAD_GLOBAL 3 ( print )				    								  
							      70 LOAD_CONST 3 ( "Doesn't Fit" )				    								  
							      72 CALL_FUNCTION 1					    								  
							      74 POP_TOP						    								  
							      >> 76 LOAD_CONST 0 ( None )				    								  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS			      COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS			    COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS				  COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS
--							      --							    --								  --
def countSubSets ( arr , n ) :				      Disassembly of <code object countSubSets at 0x7fbac<<unk>> dd Disassembly of <code object countSubSets at 0x7f816a681780, f script_not_found : None
    us = set ( )					      2 0 LOAD_GLOBAL 0 ( set )					    56 0 LOAD_GLOBAL 0 ( us )					  
    even_count = 0					      2 CALL_FUNCTION 0						    2 LOAD_METHOD 1 ( set )					  
    for i in range ( n ) :				      4 STORE_FAST 2 ( us )					    4 LOAD_FAST 1 ( n )						  
	if arr [ i ] % 2 == 0 :				      								    6 CALL_METHOD 1						  
	    us.add ( arr [ i ] )			      3 6 LOAD_CONST 1 ( 0 )					    8 STORE_FAST 2 ( rv )					  
    for i in us :					      8 STORE_FAST 3 ( even_count )				    								  
	even_count += 1					      								    57 10 LOAD_FAST 0 ( arr )					  
    return pow ( 2 , even_count ) - 1			      4 10 SETUP_LOOP 46 ( to 58 )				    12 LOAD_METHOD 2 ( append )					  
							      12 LOAD_GLOBAL 1 ( range )				    14 LOAD_FAST 2 ( rv )					  
							      14 LOAD_FAST 1 ( n )					    16 CALL_METHOD 1						  
							      16 CALL_FUNCTION 1					    18 POP_TOP							  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 34 ( to 56 )				    58 20 LOAD_GLOBAL 3 ( pow )					  
							      22 STORE_FAST 4 ( i )					    22 LOAD_FAST 2 ( rv )					  
							      								    24 CALL_FUNCTION 1						  
							      5 24 LOAD_FAST 0 ( arr )					    26 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 4 ( i )					    28 LOAD_METHOD 4 ( upper )					  
							      28 BINARY_SUBSCR						    30 CALL_METHOD 0						  
							      30 LOAD_CONST 2 ( 2 )					    32 CALL_FUNCTION 1						  
							      32 BINARY_MODULO						    34 LOAD_FAST 0 ( arr )					  
							      34 LOAD_CONST 1 ( 0 )					    36 LOAD_METHOD 5 ( upper )					  
							      36 COMPARE_OP 2 ( == )					    38 CALL_METHOD 0						  
							      38 POP_JUMP_IF_FALSE 20					    40 CALL_FUNCTION 1						  
							      								    42 LOAD_FAST 0 ( arr )					  
							      6 40 LOAD_FAST 2 ( us )					    44 LOAD_METHOD 6 ( upper )					  
							      42 LOAD_METHOD 2 ( add )					    46 CALL_METHOD 0						  
							      44 LOAD_FAST 0 ( arr )					    48 CALL_FUNCTION 1						  
							      46 LOAD_FAST 4 ( i )					    50 LOAD_FAST 0 ( arr )					  
							      48 BINARY_SUBSCR						    52 LOAD_METHOD 7 ( upper )					  
							      50 CALL_METHOD 1						    54 CALL_METHOD 0						  
							      52 POP_TOP						    56 CALL_METHOD 1						  
							      54 JUMP_ABSOLUTE 20					    58 CALL_FUNCTION 1						  
							      >> 56 POP_BLOCK						    60 LOAD_FAST 0 ( arr )					  
							      								    62 LOAD_METHOD 8 ( upper )					  
							      7 >> 58 SETUP_LOOP 20 ( to 80 )				    64 CALL_METHOD 0						  
							      60 LOAD_FAST 2 ( us )					    66 CALL_METHOD 1						  
							      62 GET_ITER						    68 LOAD_FAST 0 ( arr )					  
							      >> 64 FOR_ITER 12 ( to 78 )				    70 LOAD_METHOD 9 ( upper )					  
							      66 STORE_FAST 4 ( i )					    72 CALL_METHOD 0						  
							      								    74 CALL_METHOD 1						  
							      8 68 LOAD_FAST 3 ( even_count )				    76 LOAD_FAST 0 ( arr )					  
							      70 LOAD_CONST 3 ( 1 )					    78 LOAD_METHOD 10 ( upper )					  
							      72 INPLACE_ADD						    80 CALL_METHOD 0						  
							      74 STORE_FAST 3 ( even_count )				    82 CALL_METHOD 1						  
							      76 JUMP_ABSOLUTE 64					    84 CALL_METHOD 1						  
							      >> 78 POP_BLOCK						    86 LOAD_FAST 0 ( arr )					  
							      								    88 LOAD_METHOD 11 ( upper )					  
							      9 >> 80 LOAD_GLOBAL 3 ( pow )				    90 CALL_METHOD 0						  
							      82 LOAD_CONST 2 ( 2 )					    92 CALL_METHOD 1						  
							      84 LOAD_FAST 3 ( even_count )				    94 LOAD_FAST 0 ( arr )					  
							      86 CALL_FUNCTION 2					    96 LOAD_METHOD 12 ( upper )					  
							      88 LOAD_CONST 3 ( 1 )					    98 CALL_METHOD 0						  
							      90 BINARY_SUBTRACT					    100 CALL_METHOD 2						  
							      92 RETURN_VALUE NEW_LINE					    102 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
def countNegative ( M , n , m ) :			      Disassembly of <code object countNegative at 0x7fbac<<unk>> d Disassembly of <code object countNegative at 0x7f816a6e4b70,  error : /bin/bash: line 1: 25799 Segmentation faul
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    i = 0						      2 STORE_FAST 3 ( count )					    2 STORE_FAST 1 ( n )					  ataset/bin/python XLM/dis_script.py --script_path
    j = m - 1						      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    while j >= 0 and i < n :				      3 4 LOAD_CONST 1 ( 0 )					    27 4 SETUP_LOOP 52 ( to 54 )				  eval_scripts/python_sa-dis_sa.test/COUNT_NEGATIVE_
	if M [ i ] [ j ] < 0 :				      6 STORE_FAST 4 ( i )					    6 LOAD_FAST 0 ( M )						  NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1.
	    count += ( j + 1 )				      								    8 GET_ITER							  dis
	    i += 1					      4 8 LOAD_FAST 2 ( m )					    >> 10 FOR_ITER 52 ( to 52 )					  
	else :						      10 LOAD_CONST 2 ( 1 )					    12 STORE_FAST 2 ( i )					  
	    j -= 1					      12 BINARY_SUBTRACT					    								  
    return count					      14 STORE_FAST 5 ( j )					    28 14 LOAD_FAST 1 ( n )					  
							      								    16 LOAD_CONST 2 ( 1 )					  
							      5 16 SETUP_LOOP 66 ( to 84 )				    18 INPLACE_ADD						  
							      >> 18 LOAD_FAST 5 ( j )					    20 STORE_FAST 1 ( n )					  
							      20 LOAD_CONST 1 ( 0 )					    								  
							      22 COMPARE_OP 5 ( >= )					    29 22 LOAD_FAST 1 ( n )					  
							      24 POP_JUMP_IF_FALSE 82					    24 LOAD_CONST 3 ( 1 )					  
							      26 LOAD_FAST 4 ( i )					    26 INPLACE_ADD						  
							      28 LOAD_FAST 1 ( n )					    28 STORE_FAST 1 ( n )					  
							      30 COMPARE_OP 0 ( < )					    30 JUMP_ABSOLUTE 10						  
							      32 POP_JUMP_IF_FALSE 82					    >> 32 POP_BLOCK						  
							      								    								  
							      6 34 LOAD_FAST 0 ( M )					    30 >> 34 LOAD_FAST 1 ( n )					  
							      36 LOAD_FAST 4 ( i )					    36 RETURN_VALUE						  
							      38 BINARY_SUBSCR						    NEW_LINE							  
							      40 LOAD_FAST 5 ( j )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_CONST 1 ( 0 )					    								  
							      46 COMPARE_OP 0 ( < )					    								  
							      48 POP_JUMP_IF_FALSE 72					    								  
							      								    								  
							      7 50 LOAD_FAST 3 ( count )				    								  
							      52 LOAD_FAST 5 ( j )					    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_ADD						    								  
							      58 INPLACE_ADD						    								  
							      60 STORE_FAST 3 ( count )					    								  
							      								    								  
							      8 62 LOAD_FAST 4 ( i )					    								  
							      64 LOAD_CONST 2 ( 1 )					    								  
							      66 INPLACE_ADD						    								  
							      68 STORE_FAST 4 ( i )					    								  
							      70 JUMP_ABSOLUTE 18					    								  
							      								    								  
							      10 >> 72 LOAD_FAST 5 ( j )				    								  
							      74 LOAD_CONST 2 ( 1 )					    								  
							      76 INPLACE_SUBTRACT					    								  
							      78 STORE_FAST 5 ( j )					    								  
							      80 JUMP_ABSOLUTE 18					    								  
							      >> 82 POP_BLOCK						    								  
							      								    								  
							      11 >> 84 LOAD_FAST 3 ( count )				    								  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION     MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	    MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	  MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION
--							      --							    --								  --
def maxSubArraySumRepeated ( a , n , k ) :		      Disassembly of <code object maxSubArraySumRepeated at 0x7fbac Disassembly of <code object maxSubArraySumSumated at 0x7f816a error : Traceback (most recent call last):   File
    max_so_far = - 2147483648				      2 0 LOAD_CONST 1 ( - 2147483648 )				    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    max_ending_here = 0					      2 STORE_FAST 3 ( max_so_far )				    2 LOAD_CONST 1 ( 2147483648 )				  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( n * k ) :				      								    4 COMPARE_OP 0 ( < )					  y", line 54, in run_dis_script     hyp_co = mco.to
	max_ending_here = max_ending_here + a [ i % n ]	      3 4 LOAD_CONST 2 ( 0 )					    6 POP_JUMP_IF_FALSE 16					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	if ( max_so_far < max_ending_here ) :		      6 STORE_FAST 4 ( max_ending_here )			    								  assembler.py", line 81, in to_co     co_consts.app
	    max_so_far = max_ending_here		      								    27 8 LOAD_CONST 2 ( 0.0 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	if ( max_ending_here < 0 ) :			      4 8 SETUP_LOOP 60 ( to 70 )				    10 RETURN_VALUE						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    max_ending_here = 0				      10 LOAD_GLOBAL 0 ( range )				    								  co	 self.co_cellvars, ValueError: code: varname
    return max_so_far					      12 LOAD_FAST 1 ( n )					    28 >> 12 LOAD_FAST 1 ( n )					  s is too small
							      14 LOAD_FAST 2 ( k )					    14 LOAD_CONST 3 ( - 2147483648 )				  
							      16 BINARY_MULTIPLY					    16 COMPARE_OP 4 ( > )					  
							      18 CALL_FUNCTION 1					    18 POP_JUMP_IF_FALSE 30					  
							      20 GET_ITER						    								  
							      >> 22 FOR_ITER 44 ( to 68 )				    29 20 LOAD_CONST 4 ( 0.0 )					  
							      24 STORE_FAST 5 ( i )					    22 RETURN_VALUE						  
							      								    								  
							      5 26 LOAD_FAST 4 ( max_ending_here )			    30 >> 24 LOAD_FAST 1 ( n )					  
							      28 LOAD_FAST 0 ( a )					    26 LOAD_CONST 5 ( - 1 )					  
							      30 LOAD_FAST 5 ( i )					    28 COMPARE_OP 4 ( > )					  
							      32 LOAD_FAST 1 ( n )					    30 POP_JUMP_IF_FALSE 30					  
							      34 BINARY_MODULO						    								  
							      36 BINARY_SUBSCR						    31 32 LOAD_CONST 6 ( 0.0 )					  
							      38 BINARY_ADD						    34 RETURN_VALUE						  
							      40 STORE_FAST 4 ( max_ending_here )			    								  
							      								    32 >> 36 LOAD_FAST 1 ( n )					  
							      6 42 LOAD_FAST 3 ( max_so_far )				    38 LOAD_CONST 7 ( 1 )					  
							      44 LOAD_FAST 4 ( max_ending_here )			    40 COMPARE_OP 4 ( > )					  
							      46 COMPARE_OP 0 ( < )					    42 POP_JUMP_IF_FALSE 46					  
							      48 POP_JUMP_IF_FALSE 54					    								  
							      								    33 44 LOAD_CONST 8 ( 0.0 )					  
							      7 50 LOAD_FAST 4 ( max_ending_here )			    46 RETURN_VALUE						  
							      52 STORE_FAST 3 ( max_so_far )				    48 JUMP_FORWARD 2 ( to 50 )					  
							      								    >> 50 LOAD_CONST 9 ( 0.0 )					  
							      8 >> 54 LOAD_FAST 4 ( max_ending_here )			    >> 52 RETURN_VALUE						  
							      56 LOAD_CONST 2 ( 0 )					    NEW_LINE							  
							      58 COMPARE_OP 0 ( < )					    								  
							      60 POP_JUMP_IF_FALSE 22					    								  
							      								    								  
							      9 62 LOAD_CONST 2 ( 0 )					    								  
							      64 STORE_FAST 4 ( max_ending_here )			    								  
							      66 JUMP_ABSOLUTE 22					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      10 >> 70 LOAD_FAST 3 ( max_so_far )			    								  
							      72 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
def CountSquares ( a , b ) :				      Disassembly of <code object CountSquares at 0x7fbac0e8bc90, f Disassembly of <code object CountSquares at 0x7f816a6e4b70, f script_not_found : None
    cnt = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( b )					  
    for i in range ( a , b + 1 ) :			      2 STORE_FAST 2 ( cnt )					    2 LOAD_CONST 1 ( 1 )					  
	j = 1 ;						      								    4 COMPARE_OP 2 ( == )					  
	while j * j <= i :				      3 4 SETUP_LOOP 80 ( to 86 )				    6 POP_JUMP_IF_FALSE 12					  
	    if j * j == i :				      6 LOAD_GLOBAL 0 ( range )					    								  
		cnt = cnt + 1				      8 LOAD_FAST 0 ( a )					    27 8 LOAD_FAST 1 ( b )					  
	    j = j + 1					      10 LOAD_FAST 1 ( b )					    10 LOAD_CONST 1 ( 1 )					  
	i = i + 1					      12 LOAD_CONST 2 ( 1 )					    12 COMPARE_OP 2 ( == )					  
    return cnt						      14 BINARY_ADD						    14 POP_JUMP_IF_FALSE 28					  
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    28 >> 16 LOAD_FAST 1 ( b )					  
							      >> 20 FOR_ITER 62 ( to 84 )				    18 LOAD_CONST 1 ( 1 )					  
							      22 STORE_FAST 3 ( i )					    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      4 24 LOAD_CONST 2 ( 1 )					    								  
							      26 STORE_FAST 4 ( j )					    29 24 LOAD_FAST 1 ( b )					  
							      								    26 LOAD_CONST 1 ( 1 )					  
							      5 28 SETUP_LOOP 44 ( to 74 )				    28 INPLACE_ADD						  
							      >> 30 LOAD_FAST 4 ( j )					    30 STORE_FAST 1 ( b )					  
							      32 LOAD_FAST 4 ( j )					    								  
							      34 BINARY_MULTIPLY					    30 >> 32 LOAD_FAST 1 ( b )					  
							      36 LOAD_FAST 3 ( i )					    34 LOAD_CONST 1 ( 1 )					  
							      38 COMPARE_OP 1 ( <= )					    36 COMPARE_OP 2 ( == )					  
							      40 POP_JUMP_IF_FALSE 72					    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 42 LOAD_FAST 4 ( j )					    31 40 LOAD_FAST 1 ( b )					  
							      44 LOAD_FAST 4 ( j )					    42 LOAD_CONST 1 ( 1 )					  
							      46 BINARY_MULTIPLY					    44 INPLACE_ADD						  
							      48 LOAD_FAST 3 ( i )					    46 STORE_FAST 1 ( b )					  
							      50 COMPARE_OP 2 ( == )					    48 JUMP_FORWARD 4 ( to 44 )					  
							      52 POP_JUMP_IF_FALSE 62					    								  
							      								    32 >> 50 LOAD_FAST 1 ( b )					  
							      7 54 LOAD_FAST 2 ( cnt )					    52 LOAD_CONST 1 ( 1 )					  
							      56 LOAD_CONST 2 ( 1 )					    54 INPLACE_ADD						  
							      58 BINARY_ADD						    56 STORE_FAST 1 ( b )					  
							      60 STORE_FAST 2 ( cnt )					    								  
							      								    33 58 LOAD_FAST 1 ( b )					  
							      8 >> 62 LOAD_FAST 4 ( j )					    60 LOAD_CONST 1 ( 1 )					  
							      64 LOAD_CONST 2 ( 1 )					    62 INPLACE_ADD						  
							      66 BINARY_ADD						    64 STORE_FAST 1 ( b )					  
							      68 STORE_FAST 4 ( j )					    								  
							      70 JUMP_ABSOLUTE 30					    34 >> 66 LOAD_FAST 1 ( b )					  
							      >> 72 POP_BLOCK						    68 LOAD_CONST 1 ( 1 )					  
							      								    70 INPLACE_ADD						  
							      9 >> 74 LOAD_FAST 3 ( i )					    72 STORE_FAST 1 ( b )					  
							      76 LOAD_CONST 2 ( 1 )					    74 JUMP_FORWARD 4 ( to 44 )					  
							      78 BINARY_ADD						    								  
							      80 STORE_FAST 3 ( i )					    35 >> 76 LOAD_FAST 1 ( b )					  
							      82 JUMP_ABSOLUTE 20					    78 LOAD_CONST 1 ( 1 )					  
							      >> 84 POP_BLOCK						    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( b )					  
							      10 >> 86 LOAD_FAST 2 ( cnt )				    84 JUMP_FORWARD 4 ( to 44 )					  
							      88 RETURN_VALUE NEW_LINE					    								  
							      								    36 >> 86 LOAD_FAST 1 ( b )					  
							      								    88 LOAD_CONST 1 ( 1 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 1 ( b )					  
							      								    								  
							      								    37 >> 94 LOAD_FAST 1 ( b )					  
							      								    96 LOAD_CONST 1 ( 1 )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 1 ( b )					  
							      								    								  
							      								    38 102 LOAD_FAST 1 ( b )					  
							      								    104 LOAD_CONST 1 ( 1 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( b )					  
							      								    								  
							      								    39 110 LOAD_FAST 1 ( b )					  
							      								    112 LOAD_CONST 1 ( 1 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( b )					  
							      								    								  
							      								    40 118 LOAD_FAST 1 ( b )					  
							      								    120 LOAD_CONST 1 ( 1 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( b )					  
							      								    								  
							      								    41 126 LOAD_FAST 1 ( b )					  
							      								    128 LOAD_CONST 1 ( 1 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( b )					  
							      								    								  
							      								    42 134 LOAD_FAST 1 ( b )					  
							      								    136 LOAD_CONST 1 ( 1 )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( b )					  
							      								    								  
							      								    43 142 LOAD_FAST 1 ( b )					  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT     DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	    DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT
--							      --							    --								  --
def maxProd ( n ) :					      Disassembly of <code object maxProd at 0x7fbac0e8bc90, file " Disassembly of <code object maxProd at 0x7f816a673a50, file " script_not_found : None
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 1 )					  
    max_val = 0						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    for i in range ( 1 , n - 1 ) :			      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
	max_val = max ( max_val , max ( i * ( n - i ) , maxPr 8 LOAD_FAST 0 ( n )					    								  
    return max_val ;					      10 LOAD_CONST 2 ( 1 )					    27 8 LOAD_GLOBAL 0 ( max )					  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_FAST 0 ( n )					  
							      14 POP_JUMP_IF_FALSE 20					    12 LOAD_CONST 2 ( 1 )					  
							      								    14 BINARY_SUBTRACT						  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    16 CALL_FUNCTION 1						  
							      18 RETURN_VALUE						    18 LOAD_FAST 0 ( n )					  
							      								    20 LOAD_CONST 3 ( 2 )					  
							      4 >> 20 LOAD_CONST 1 ( 0 )				    22 BINARY_POWER						  
							      22 STORE_FAST 1 ( max_val )				    24 CALL_FUNCTION 1						  
							      								    26 LOAD_FAST 0 ( n )					  
							      5 24 SETUP_LOOP 58 ( to 84 )				    28 BINARY_MULTIPLY						  
							      26 LOAD_GLOBAL 0 ( range )				    30 CALL_FUNCTION 1						  
							      28 LOAD_CONST 2 ( 1 )					    32 RETURN_VALUE						  
							      30 LOAD_FAST 0 ( n )					    								  
							      32 LOAD_CONST 2 ( 1 )					    28 >> 34 LOAD_GLOBAL 1 ( max )				  
							      34 BINARY_SUBTRACT					    36 LOAD_FAST 0 ( n )					  
							      36 CALL_FUNCTION 2					    38 LOAD_CONST 4 ( - 1 )					  
							      38 GET_ITER						    40 BINARY_SUBTRACT						  
							      >> 40 FOR_ITER 40 ( to 82 )				    42 LOAD_FAST 0 ( n )					  
							      42 STORE_FAST 2 ( i )					    44 LOAD_CONST 5 ( 2 )					  
							      								    46 BINARY_POWER						  
							      6 44 LOAD_GLOBAL 1 ( max )				    48 BINARY_MULTIPLY						  
							      46 LOAD_FAST 1 ( max_val )				    50 CALL_FUNCTION 1						  
							      48 LOAD_GLOBAL 1 ( max )					    52 RETURN_VALUE						  
							      50 LOAD_FAST 2 ( i )					    NEW_LINE							  
							      52 LOAD_FAST 0 ( n )					    								  
							      54 LOAD_FAST 2 ( i )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_MULTIPLY					    								  
							      60 LOAD_GLOBAL 2 ( maxProd )				    								  
							      62 LOAD_FAST 0 ( n )					    								  
							      64 LOAD_FAST 2 ( i )					    								  
							      66 BINARY_SUBTRACT					    								  
							      68 CALL_FUNCTION 1					    								  
							      70 LOAD_FAST 2 ( i )					    								  
							      72 BINARY_MULTIPLY					    								  
							      74 CALL_FUNCTION 2					    								  
							      76 CALL_FUNCTION 2					    								  
							      78 STORE_FAST 1 ( max_val )				    								  
							      80 JUMP_ABSOLUTE 40					    								  
							      >> 82 POP_BLOCK						    								  
							      								    								  
							      7 >> 84 LOAD_FAST 1 ( max_val )				    								  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1
--							      --							    --								  --
def countPairs ( arr1 , arr2 , m , n , x ) :		      Disassembly of <code object countPairs at 0x7fbac<<unk>> d540 Disassembly of <code object countPairs at 0x7f816a683c00, fil error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    50 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    us = set ( )					      2 STORE_FAST 5 ( count )					    2 STORE_FAST 1 ( arr2 )					  (item)   File "main.py", line 35, in <module>	  Fi
    for i in range ( m ) :				      								    								  le "<dis>", line 2, in countPairs NameError: name
	us.add ( arr1 [ i ] )				      3 4 LOAD_GLOBAL 0 ( set )					    51 4 LOAD_GLOBAL 0 ( us )					  'us' is not defined
    for j in range ( n ) :				      6 CALL_FUNCTION 0						    6 LOAD_METHOD 1 ( add )					  
	if x - arr2 [ j ] in us :			      8 STORE_FAST 6 ( us )					    8 LOAD_FAST 0 ( arr1 )					  
	    count += 1					      								    10 LOAD_FAST 1 ( arr2 )					  
    return count					      4 10 SETUP_LOOP 30 ( to 42 )				    12 LOAD_FAST 2 ( arr2 )					  
							      12 LOAD_GLOBAL 1 ( range )				    14 LOAD_FAST 3 ( arr2 )					  
							      14 LOAD_FAST 2 ( m )					    16 LOAD_FAST 4 ( arr2 )					  
							      16 CALL_FUNCTION 1					    18 LOAD_FAST 5 ( arr2 )					  
							      18 GET_ITER						    20 LOAD_FAST 6 ( arr2 )					  
							      >> 20 FOR_ITER 18 ( to 40 )				    22 LOAD_FAST 7 ( arr2 )					  
							      22 STORE_FAST 7 ( i )					    24 LOAD_FAST 8 ( arr2 )					  
							      								    26 LOAD_FAST 9 ( arr2 )					  
							      5 24 LOAD_FAST 6 ( us )					    28 LOAD_FAST 10 ( arr2 )					  
							      26 LOAD_METHOD 2 ( add )					    30 LOAD_FAST 11 ( arr2 )					  
							      28 LOAD_FAST 0 ( arr1 )					    32 LOAD_FAST 12 ( arr2 )					  
							      30 LOAD_FAST 7 ( i )					    34 LOAD_FAST 13 ( arr2 )					  
							      32 BINARY_SUBSCR						    36 LOAD_FAST 14 ( arr2 )					  
							      34 CALL_METHOD 1						    38 LOAD_FAST 15 ( arr2 )					  
							      36 POP_TOP						    40 LOAD_FAST 16 ( arr2 )					  
							      38 JUMP_ABSOLUTE 20					    42 LOAD_FAST 17 ( arr2 )					  
							      >> 40 POP_BLOCK						    44 LOAD_FAST 18 ( arr2 )					  
							      								    46 LOAD_FAST 13 ( arr2 )					  
							      6 >> 42 SETUP_LOOP 40 ( to 84 )				    48 LOAD_FAST 14 ( arr2 )					  
							      44 LOAD_GLOBAL 1 ( range )				    50 LOAD_FAST 15 ( arr2 )					  
							      46 LOAD_FAST 3 ( n )					    52 LOAD_FAST 16 ( arr2 )					  
							      48 CALL_FUNCTION 1					    54 LOAD_FAST 17 ( arr2 )					  
							      50 GET_ITER						    56 LOAD_FAST 18 ( arr2 )					  
							      >> 52 FOR_ITER 28 ( to 82 )				    58 LOAD_FAST 17 ( arr2 )					  
							      54 STORE_FAST 8 ( j )					    60 LOAD_FAST 18 ( arr2 )					  
							      								    62 LOAD_FAST 19 ( arr2 )					  
							      7 56 LOAD_FAST 4 ( x )					    64 LOAD_FAST 20 ( arr2 )					  
							      58 LOAD_FAST 1 ( arr2 )					    66 LOAD_FAST 21 ( arr2 )					  
							      60 LOAD_FAST 8 ( j )					    68 LOAD_FAST 22 ( arr2 )					  
							      62 BINARY_SUBSCR						    70 LOAD_FAST 21 ( arr2 )					  
							      64 BINARY_SUBTRACT					    72 LOAD_FAST 22 ( arr2 )					  
							      66 LOAD_FAST 6 ( us )					    74 LOAD_FAST 22 ( arr2 )					  
							      68 COMPARE_OP 6 ( in )					    76 LOAD_FAST 21 ( arr2 )					  
							      70 POP_JUMP_IF_FALSE 52					    78 LOAD_FAST 22 ( arr2 )					  
							      								    80 LOAD_FAST 22 ( arr2 )					  
							      8 72 LOAD_FAST 5 ( count )				    82 LOAD_FAST 21 ( arr2 )					  
							      74 LOAD_CONST 2 ( 1 )					    84 LOAD_FAST 22 ( arr2 )					  
							      76 INPLACE_ADD						    86 LOAD_FAST 22 ( arr2 )					  
							      78 STORE_FAST 5 ( count )					    88 LOAD_FAST 21 ( arr2 )					  
							      80 JUMP_ABSOLUTE 52					    90 LOAD_FAST 22 ( arr2 )					  
							      >> 82 POP_BLOCK						    92 LOAD_FAST 21 ( arr2 )					  
							      								    94 LOAD_FAST 22 ( arr2 )					  
							      9 >> 84 LOAD_FAST 5 ( count )				    96 LOAD_FAST 22 ( arr2 )					  
							      86 RETURN_VALUE NEW_LINE					    98 LOAD_FAST 23 ( arr2 )					  
							      								    100 LOAD_FAST 22 ( arr2 )					  
							      								    102 LOAD_FAST 23 ( arr2 )					  
							      								    104 LOAD_FAST 22 ( arr2 )					  
							      								    106 LOAD_FAST 23 ( arr2 )					  
							      								    108 LOAD_FAST 22 ( arr2 )					  
							      								    110 LOAD_FAST 23 ( arr2 )					  
							      								    112 LOAD_FAST 24 ( arr2 )					  
							      								    114 LOAD_FAST 23 ( arr2 )					  
							      								    116 LOAD_FAST 22 ( arr2 )					  
							      								    118 LOAD_FAST 24 ( arr2 )					  
							      								    120 LOAD_FAST 23 ( arr2 )					  
							      								    122 LOAD_FAST 22 ( arr2 )					  
							      								    124 LOAD_FAST 24 ( arr2 )					  
							      								    126 LOAD_FAST 23 ( arr2 )					  
							      								    128 LOAD_FAST 24 ( arr2 )					  
							      								    130 LOAD_FAST 23 ( arr2 )					  
							      								    132 LOAD_FAST 24 ( arr2 )					  
							      								    134 LOAD_FAST 23 ( arr2 )					  
							      								    136 BUILD_TUPLE 5						  
							      								    138 CALL_FUNCTION 5						  
							      								    140 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE	  CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE
--							      --							    --								  --
def printSequence ( arr , input ) :			      Disassembly of <code object printSequence at 0x7fbac<<unk>> d Disassembly of <code object printSequence at 0x7f816a6e4b70,  script_not_found : None
    n = len ( input )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( input )					  
    output = ""						      2 LOAD_FAST 1 ( input )					    2 LOAD_CONST 1 ( 'A' )					  
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
	if ( input [ i ] == ' ' ) :			      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( output )					  
	    output = output + "0"			      								    								  
	else :						      3 8 LOAD_CONST 1 ( '' )					    27 8 LOAD_FAST 0 ( arr )					  
	    position = ord ( input [ i ] ) - ord ( 'A' )      10 STORE_FAST 3 ( output )				    10 LOAD_METHOD 0 ( append )					  
	    output = output + arr [ position ]		      								    12 LOAD_FAST 2 ( output )					  
    return output					      4 12 SETUP_LOOP 70 ( to 84 )				    14 CALL_METHOD 1						  
							      14 LOAD_GLOBAL 1 ( range )				    16 POP_TOP							  
							      16 LOAD_FAST 2 ( n )					    								  
							      18 CALL_FUNCTION 1					    28 18 LOAD_FAST 0 ( arr )					  
							      20 GET_ITER						    20 LOAD_METHOD 0 ( append )					  
							      >> 22 FOR_ITER 58 ( to 82 )				    22 LOAD_FAST 2 ( output )					  
							      24 STORE_FAST 4 ( i )					    24 CALL_METHOD 1						  
							      								    26 POP_TOP							  
							      5 26 LOAD_FAST 1 ( input )				    								  
							      28 LOAD_FAST 4 ( i )					    29 28 LOAD_FAST 0 ( arr )					  
							      30 BINARY_SUBSCR						    30 LOAD_METHOD 0 ( append )					  
							      32 LOAD_CONST 2 ( ' ' )					    32 LOAD_FAST 1 ( input )					  
							      34 COMPARE_OP 2 ( == )					    34 CALL_METHOD 1						  
							      36 POP_JUMP_IF_FALSE 48					    36 POP_TOP							  
							      								    38 LOAD_CONST 0 ( None )					  
							      6 38 LOAD_FAST 3 ( output )				    40 RETURN_VALUE						  
							      40 LOAD_CONST 3 ( '0' )					    NEW_LINE							  
							      42 BINARY_ADD						    								  
							      44 STORE_FAST 3 ( output )				    								  
							      46 JUMP_ABSOLUTE 22					    								  
							      								    								  
							      8 >> 48 LOAD_GLOBAL 2 ( ord )				    								  
							      50 LOAD_FAST 1 ( input )					    								  
							      52 LOAD_FAST 4 ( i )					    								  
							      54 BINARY_SUBSCR						    								  
							      56 CALL_FUNCTION 1					    								  
							      58 LOAD_GLOBAL 2 ( ord )					    								  
							      60 LOAD_CONST 4 ( 'A' )					    								  
							      62 CALL_FUNCTION 1					    								  
							      64 BINARY_SUBTRACT					    								  
							      66 STORE_FAST 5 ( position )				    								  
							      								    								  
							      9 68 LOAD_FAST 3 ( output )				    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 5 ( position )				    								  
							      74 BINARY_SUBSCR						    								  
							      76 BINARY_ADD						    								  
							      78 STORE_FAST 3 ( output )				    								  
							      80 JUMP_ABSOLUTE 22					    								  
							      >> 82 POP_BLOCK						    								  
							      								    								  
							      10 >> 84 LOAD_FAST 3 ( output )				    								  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1   REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1   REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1	  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1
--							      --							    --								  --
def rearrange ( arr , n ) :				      Disassembly of <code object rearrange at 0x7fbac<<unk>> d540, Disassembly of <code object rearrange at 0x7f816afaa150, file error : Traceback (most recent call last):   File
    max_ele = arr [ n - 1 ]				      2 0 LOAD_FAST 0 ( arr )					    16 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    min_ele = arr [ 0 ]					      2 LOAD_FAST 1 ( n )					    2 LOAD_CONST 1 ( - 1 )					  (item)   File "main.py", line 48, in <module>	  Fi
    for i in range ( n ) :				      4 LOAD_CONST 1 ( 1 )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in rearrange TypeError: 'int'
	if i % 2 == 0 :					      6 BINARY_SUBTRACT						    6 STORE_FAST 2 ( n )					  object is not subscriptable
	    arr [ i ] = max_ele				      8 BINARY_SUBSCR						    								  
	    max_ele -= 1				      10 STORE_FAST 2 ( max_ele )				    17 8 LOAD_FAST 0 ( arr )					  
	else :						      								    10 LOAD_CONST 2 ( 0 )					  
	    arr [ i ] = min_ele				      3 12 LOAD_FAST 0 ( arr )					    12 BINARY_SUBSCR						  
	    min_ele += 1				      14 LOAD_CONST 2 ( 0 )					    14 STORE_FAST 3 ( n )					  
							      16 BINARY_SUBSCR						    								  
							      18 STORE_FAST 3 ( min_ele )				    18 16 LOAD_FAST 2 ( n )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 20 SETUP_LOOP 62 ( to 84 )				    20 BINARY_SUBSCR						  
							      22 LOAD_GLOBAL 0 ( range )				    22 STORE_FAST 4 ( n )					  
							      24 LOAD_FAST 1 ( n )					    								  
							      26 CALL_FUNCTION 1					    19 24 LOAD_FAST 3 ( n )					  
							      28 GET_ITER						    26 LOAD_CONST 4 ( 2 )					  
							      >> 30 FOR_ITER 50 ( to 82 )				    28 BINARY_SUBSCR						  
							      32 STORE_FAST 4 ( i )					    30 STORE_FAST 5 ( n )					  
							      								    								  
							      5 34 LOAD_FAST 4 ( i )					    20 32 LOAD_FAST 0 ( arr )					  
							      36 LOAD_CONST 3 ( 2 )					    34 LOAD_FAST 1 ( n )					  
							      38 BINARY_MODULO						    36 LOAD_CONST 5 ( 1 )					  
							      40 LOAD_CONST 2 ( 0 )					    38 BINARY_SUBSCR						  
							      42 COMPARE_OP 2 ( == )					    40 LOAD_FAST 2 ( n )					  
							      44 POP_JUMP_IF_FALSE 64					    42 LOAD_CONST 6 ( 2 )					  
							      								    44 BINARY_SUBSCR						  
							      6 46 LOAD_FAST 2 ( max_ele )				    46 LOAD_FAST 1 ( n )					  
							      48 LOAD_FAST 0 ( arr )					    48 LOAD_CONST 7 ( 3 )					  
							      50 LOAD_FAST 4 ( i )					    50 BINARY_SUBSCR						  
							      52 STORE_SUBSCR						    52 LOAD_FAST 1 ( n )					  
							      								    54 LOAD_CONST 8 ( 2 )					  
							      7 54 LOAD_FAST 2 ( max_ele )				    56 BINARY_SUBSCR						  
							      56 LOAD_CONST 1 ( 1 )					    58 LOAD_FAST 1 ( n )					  
							      58 INPLACE_SUBTRACT					    60 LOAD_CONST 9 ( 2 )					  
							      60 STORE_FAST 2 ( max_ele )				    62 BINARY_SUBSCR						  
							      62 JUMP_ABSOLUTE 30					    64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 10 ( 2 )					  
							      9 >> 64 LOAD_FAST 3 ( min_ele )				    68 BINARY_SUBSCR						  
							      66 LOAD_FAST 0 ( arr )					    70 LOAD_FAST 1 ( n )					  
							      68 LOAD_FAST 4 ( i )					    72 LOAD_CONST 11 ( 2 )					  
							      70 STORE_SUBSCR						    74 BINARY_SUBSCR						  
							      								    76 LOAD_CONST 12 ( 3 )					  
							      10 72 LOAD_FAST 3 ( min_ele )				    78 BINARY_SUBSCR						  
							      74 LOAD_CONST 1 ( 1 )					    80 LOAD_FAST 1 ( n )					  
							      76 INPLACE_ADD						    82 LOAD_CONST 13 ( 2 )					  
							      78 STORE_FAST 3 ( min_ele )				    84 BINARY_SUBSCR						  
							      80 JUMP_ABSOLUTE 30					    86 LOAD_CONST 14 ( 2 )					  
							      >> 82 POP_BLOCK						    88 BINARY_SUBSCR						  
							      >> 84 LOAD_CONST 0 ( None )				    90 LOAD_FAST 1 ( n )					  
							      86 RETURN_VALUE NEW_LINE					    92 LOAD_CONST 6 ( 2 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 15 ( 3 )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 1 ( n )					  
							      								    102 LOAD_CONST 6 ( 2 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 8 ( 2 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 6 ( 2 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 8 ( 2 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 6 ( 2 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 6 ( 2 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 7 ( 3 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_CONST 6 ( 2 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 8 ( 2 )					  
							      								    138 STORE_SUBSCR						  
							      								    140 LOAD_CONST 9 ( 2 )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
def countIntegralSolutions ( n ) :			      Disassembly of <code object countIntegralSolutions at 0x7fbac Disassembly of <code object countIntegralSolSolSolSolSolSolSo error : Traceback (most recent call last):   File
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    								  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n + 1 ) :				      2 STORE_FAST 1 ( result )					    								  item in run_dis_script():   File "XLM/dis_script.p
	for j in range ( n + 1 ) :			      								    								  y", line 54, in run_dis_script     hyp_co = mco.to
	    for k in range ( n + 1 ) :			      3 4 SETUP_LOOP 88 ( to 94 )				    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
		if i + j + k == n :			      6 LOAD_GLOBAL 0 ( range )					    								  assembler.py", line 81, in to_co     co_consts.app
		    result += 1				      8 LOAD_FAST 0 ( n )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    return result					      10 LOAD_CONST 2 ( 1 )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 BINARY_ADD						    								  co	 self.co_cellvars, ValueError: code: varname
							      14 CALL_FUNCTION 1					    								  s is too small
							      16 GET_ITER						    								  
							      >> 18 FOR_ITER 72 ( to 92 )				    								  
							      20 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 22 SETUP_LOOP 66 ( to 90 )				    								  
							      24 LOAD_GLOBAL 0 ( range )				    								  
							      26 LOAD_FAST 0 ( n )					    								  
							      28 LOAD_CONST 2 ( 1 )					    								  
							      30 BINARY_ADD						    								  
							      32 CALL_FUNCTION 1					    								  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 50 ( to 88 )				    								  
							      38 STORE_FAST 3 ( j )					    								  
							      								    								  
							      5 40 SETUP_LOOP 44 ( to 86 )				    								  
							      42 LOAD_GLOBAL 0 ( range )				    								  
							      44 LOAD_FAST 0 ( n )					    								  
							      46 LOAD_CONST 2 ( 1 )					    								  
							      48 BINARY_ADD						    								  
							      50 CALL_FUNCTION 1					    								  
							      52 GET_ITER						    								  
							      >> 54 FOR_ITER 28 ( to 84 )				    								  
							      56 STORE_FAST 4 ( k )					    								  
							      								    								  
							      6 58 LOAD_FAST 2 ( i )					    								  
							      60 LOAD_FAST 3 ( j )					    								  
							      62 BINARY_ADD						    								  
							      64 LOAD_FAST 4 ( k )					    								  
							      66 BINARY_ADD						    								  
							      68 LOAD_FAST 0 ( n )					    								  
							      70 COMPARE_OP 2 ( == )					    								  
							      72 POP_JUMP_IF_FALSE 54					    								  
							      								    								  
							      7 74 LOAD_FAST 1 ( result )				    								  
							      76 LOAD_CONST 2 ( 1 )					    								  
							      78 INPLACE_ADD						    								  
							      80 STORE_FAST 1 ( result )				    								  
							      82 JUMP_ABSOLUTE 54					    								  
							      >> 84 POP_BLOCK						    								  
							      >> 86 JUMP_ABSOLUTE 36					    								  
							      >> 88 POP_BLOCK						    								  
							      >> 90 JUMP_ABSOLUTE 18					    								  
							      >> 92 POP_BLOCK						    								  
							      								    								  
							      8 >> 94 LOAD_FAST 1 ( result )				    								  
							      96 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN
--							      --							    --								  --
def FirstRepeated ( string ) :				      Disassembly of <code object FirstRepeated at 0x7fbac0e89d20,  Disassembly of <code object FirstRepeated at 0x7f816a6e4b70,  script_not_found : None
    checker = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( checker )				  
    pos = 0						      2 STORE_FAST 1 ( checker )				    2 LOAD_FAST 0 ( string )					  
    for i in string :					      								    4 LOAD_CONST 1 ( 'a' )					  
	val = ord ( i ) - ord ( 'a' ) ;			      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_CONST 2 ( 'a' )					  
	if ( ( checker & ( 1 << val ) ) > 0 ) :		      6 STORE_FAST 2 ( pos )					    8 LOAD_CONST 3 ( ( '&' , '&' ) )				  
	    return pos					      								    10 CALL_FUNCTION 3						  
	checker |= ( 1 << val )				      4 8 SETUP_LOOP 68 ( to 78 )				    12 STORE_FAST 1 ( val )					  
	pos += 1					      10 LOAD_FAST 0 ( string )					    								  
    return - 1						      12 GET_ITER						    27 14 LOAD_FAST 1 ( val )					  
							      >> 14 FOR_ITER 60 ( to 76 )				    16 LOAD_CONST 4 ( '&' )					  
							      16 STORE_FAST 3 ( i )					    18 COMPARE_OP 2 ( == )					  
							      								    20 POP_JUMP_IF_FALSE 30					  
							      5 18 LOAD_GLOBAL 0 ( ord )				    								  
							      20 LOAD_FAST 3 ( i )					    28 22 LOAD_FAST 1 ( val )					  
							      22 CALL_FUNCTION 1					    24 LOAD_CONST 5 ( '&' )					  
							      24 LOAD_GLOBAL 0 ( ord )					    26 COMPARE_OP 2 ( == )					  
							      26 LOAD_CONST 2 ( 'a' )					    28 POP_JUMP_IF_FALSE 30					  
							      28 CALL_FUNCTION 1					    								  
							      30 BINARY_SUBTRACT					    29 30 LOAD_FAST 1 ( val )					  
							      32 STORE_FAST 4 ( val )					    32 LOAD_CONST 6 ( '&' )					  
							      								    34 COMPARE_OP 2 ( == )					  
							      6 34 LOAD_FAST 1 ( checker )				    36 POP_JUMP_IF_FALSE 38					  
							      36 LOAD_CONST 3 ( 1 )					    								  
							      38 LOAD_FAST 4 ( val )					    30 >> 38 LOAD_FAST 1 ( val )				  
							      40 BINARY_LSHIFT						    40 LOAD_CONST 7 ( '&' )					  
							      42 BINARY_AND						    42 COMPARE_OP 2 ( == )					  
							      44 LOAD_CONST 1 ( 0 )					    44 POP_JUMP_IF_FALSE 44					  
							      46 COMPARE_OP 4 ( > )					    								  
							      48 POP_JUMP_IF_FALSE 54					    31 46 LOAD_FAST 1 ( val )					  
							      								    48 LOAD_CONST 8 ( '&' )					  
							      7 50 LOAD_FAST 2 ( pos )					    50 COMPARE_OP 2 ( == )					  
							      52 RETURN_VALUE						    52 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      8 >> 54 LOAD_FAST 1 ( checker )				    32 54 LOAD_FAST 1 ( val )					  
							      56 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 9 ( '&' )					  
							      58 LOAD_FAST 4 ( val )					    58 COMPARE_OP 2 ( == )					  
							      60 BINARY_LSHIFT						    60 POP_JUMP_IF_FALSE 60					  
							      62 INPLACE_OR						    								  
							      64 STORE_FAST 1 ( checker )				    33 62 LOAD_FAST 1 ( val )					  
							      								    64 LOAD_CONST 10 ( '&' )					  
							      9 66 LOAD_FAST 2 ( pos )					    66 COMPARE_OP 2 ( == )					  
							      68 LOAD_CONST 3 ( 1 )					    68 POP_JUMP_IF_FALSE 60					  
							      70 INPLACE_ADD						    								  
							      72 STORE_FAST 2 ( pos )					    34 70 LOAD_FAST 1 ( val )					  
							      74 JUMP_ABSOLUTE 14					    72 LOAD_CONST 11 ( '&' )					  
							      >> 76 POP_BLOCK						    74 COMPARE_OP 2 ( == )					  
							      								    76 POP_JUMP_IF_FALSE 60					  
							      10 >> 78 LOAD_CONST 4 ( - 1 )				    								  
							      80 RETURN_VALUE NEW_LINE					    35 78 LOAD_FAST 1 ( val )					  
							      								    80 LOAD_CONST 12 ( '&' )					  
							      								    82 COMPARE_OP 2 ( == )					  
							      								    84 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    36 86 LOAD_FAST 1 ( val )					  
							      								    88 LOAD_CONST 13 ( '&' )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      								    92 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    37 94 LOAD_FAST 1 ( val )					  
							      								    96 LOAD_CONST 6 ( '&' )					  
							      								    98 COMPARE_OP 2 ( == )					  
							      								    100 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    38 102 LOAD_FAST 1 ( val )					  
							      								    104 LOAD_CONST 6 ( '&' )					  
							      								    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    39 110 LOAD_FAST 1 ( val )					  
							      								    112 LOAD_CONST 6 ( '&' )					  
							      								    114 COMPARE_OP 2 ( == )					  
							      								    116 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    40 118 LOAD_FAST 1 ( val )					  
							      								    120 LOAD_CONST 7 ( '&' )					  
							      								    122 COMPARE_OP 2 ( == )					  
							      								    124 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    42 126 LOAD_FAST 1 ( val )					  
							      								    128 LOAD_CONST 7 ( '&' )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    43 >>							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION		      DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			    DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			  DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION
--							      --							    --								  --
def distributingBalls ( k , n , string ) :		      Disassembly of <code object distributingBalls at 0x7fbac0e8bc Disassembly of <code object distributingBalls at 0x7f816a6016 script_not_found : None
    a = [ 0 ] * MAX_CHAR				      2 0 LOAD_CONST 1 ( 0 )					    69 0 LOAD_FAST 0 ( k )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 0 )					  
	a [ ord ( string [ i ] ) - ord ( 'a' ) ] += 1	      4 LOAD_GLOBAL 0 ( MAX_CHAR )				    4 BINARY_SUBSCR						  
    for i in range ( MAX_CHAR ) :			      6 BINARY_MULTIPLY						    6 STORE_FAST 1 ( n )					  
	if ( a [ i ] > k ) :				      8 STORE_FAST 3 ( a )					    								  
	    return False				      								    70 8 LOAD_FAST 1 ( n )					  
    return True						      3 10 SETUP_LOOP 48 ( to 60 )				    10 LOAD_CONST 2 ( 1 )					  
							      12 LOAD_GLOBAL 1 ( range )				    12 BINARY_SUBSCR						  
							      14 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( n )					  
							      16 CALL_FUNCTION 1					    								  
							      18 GET_ITER						    71 16 LOAD_FAST 2 ( n )					  
							      >> 20 FOR_ITER 36 ( to 58 )				    18 LOAD_CONST 3 ( 1 )					  
							      22 STORE_FAST 4 ( i )					    20 BINARY_SUBSCR						  
							      								    22 STORE_FAST 3 ( n )					  
							      4 24 LOAD_FAST 3 ( a )					    								  
							      26 LOAD_GLOBAL 2 ( ord )					    72 24 LOAD_FAST 3 ( n )					  
							      28 LOAD_FAST 2 ( string )					    26 LOAD_CONST 4 ( 1 )					  
							      30 LOAD_FAST 4 ( i )					    28 BINARY_SUBSCR						  
							      32 BINARY_SUBSCR						    30 LOAD_CONST 5 ( 1 )					  
							      34 CALL_FUNCTION 1					    32 BINARY_SUBSCR						  
							      36 LOAD_GLOBAL 2 ( ord )					    34 LOAD_CONST 6 ( 2 )					  
							      38 LOAD_CONST 2 ( 'a' )					    36 BINARY_SUBSCR						  
							      40 CALL_FUNCTION 1					    38 STORE_FAST 4 ( n )					  
							      42 BINARY_SUBTRACT					    								  
							      44 DUP_TOP_TWO						    73 40 LOAD_FAST 0 ( k )					  
							      46 BINARY_SUBSCR						    42 LOAD_CONST 7 ( 1 )					  
							      48 LOAD_CONST 3 ( 1 )					    44 BINARY_SUBSCR						  
							      50 INPLACE_ADD						    46 LOAD_CONST 8 ( 2 )					  
							      52 ROT_THREE						    48 BINARY_SUBSCR						  
							      54 STORE_SUBSCR						    50 LOAD_CONST 9 ( 1 )					  
							      56 JUMP_ABSOLUTE 20					    52 BINARY_SUBSCR						  
							      >> 58 POP_BLOCK						    54 LOAD_CONST 10 ( 2 )					  
							      								    56 BINARY_SUBSCR						  
							      5 >> 60 SETUP_LOOP 32 ( to 94 )				    58 LOAD_CONST 11 ( 1 )					  
							      62 LOAD_GLOBAL 1 ( range )				    60 BINARY_SUBSCR						  
							      64 LOAD_GLOBAL 0 ( MAX_CHAR )				    62 LOAD_CONST 12 ( 2 )					  
							      66 CALL_FUNCTION 1					    64 BINARY_SUBSCR						  
							      68 GET_ITER						    66 LOAD_CONST 13 ( 1 )					  
							      >> 70 FOR_ITER 20 ( to 92 )				    68 BINARY_SUBSCR						  
							      72 STORE_FAST 4 ( i )					    70 LOAD_CONST 14 ( 2 )					  
							      								    72 BINARY_SUBSCR						  
							      6 74 LOAD_FAST 3 ( a )					    74 LOAD_CONST 6 ( 2 )					  
							      76 LOAD_FAST 4 ( i )					    76 BINARY_SUBSCR						  
							      78 BINARY_SUBSCR						    78 LOAD_CONST 6 ( 2 )					  
							      80 LOAD_FAST 0 ( k )					    80 BINARY_SUBSCR						  
							      82 COMPARE_OP 4 ( > )					    82 LOAD_CONST 6 ( 2 )					  
							      84 POP_JUMP_IF_FALSE 70					    84 BINARY_SUBSCR						  
							      								    86 LOAD_CONST 7 ( 1 )					  
							      7 86 LOAD_CONST 4 ( False )				    88 BINARY_SUBSCR						  
							      88 RETURN_VALUE						    90 LOAD_CONST 12 ( 2 )					  
							      90 JUMP_ABSOLUTE 70					    92 BINARY_SUBSCR						  
							      >> 92 POP_BLOCK						    94 LOAD_CONST 13 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      8 >> 94 LOAD_CONST 5 ( True )				    98 LOAD_CONST 14 ( 2 )					  
							      96 RETURN_VALUE NEW_LINE					    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 15 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 16 ( 2 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 17 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 18 ( 2 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 19 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 20 ( 2 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 21 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 22 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 21 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 22 ( 2 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 21 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 22 ( 2 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 21 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 22 ( 2 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 23 ( 1 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 22 ( 2 )					  
							      								    164 BINARY_SUBSCR						  
							      								    166 LOAD_CONST 23 ( 1 )					  
							      								    168 BINARY_SUBSCR						  
							      								    170 LOAD_CONST 22 ( 2 )					  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 24 ( 2 )					  
							      								    176 BINARY_SUBSCR						  
							      								    178 LOAD_CONST 23 ( 1 )					  
							      								    180 BINARY_SUBSCR						  
							      								    182 LOAD_CONST 22 ( 2 )					  
							      								    184 BINARY_SUBSCR						  
							      								    								  
							      								    71 186							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	      MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	    MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	  MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME
--							      --							    --								  --
def findLength ( string , n ) :				      Disassembly of <code object findLength at 0x7fbac<<unk>> de40 Disassembly of <code object findLength at 0x7f816a6e4b70, fil script_not_found : None
    current_sum = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( string )					  
    max_sum = 0						      2 STORE_FAST 2 ( current_sum )				    2 LOAD_CONST 1 ( '0' )					  
    for i in range ( n ) :				      								    4 COMPARE_OP 2 ( == )					  
	current_sum += ( 1 if string [ i ] == '0' else - 1 )  3 4 LOAD_CONST 1 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  
	if current_sum < 0 :				      6 STORE_FAST 3 ( max_sum )				    								  
	    current_sum = 0				      								    27 8 LOAD_FAST 0 ( string )					  
	max_sum = max ( current_sum , max_sum )		      4 8 SETUP_LOOP 62 ( to 72 )				    10 LOAD_CONST 2 ( '0' )					  
    return max_sum if max_sum else 0			      10 LOAD_GLOBAL 0 ( range )				    12 COMPARE_OP 2 ( == )					  
							      12 LOAD_FAST 1 ( n )					    14 POP_JUMP_IF_FALSE 28					  
							      14 CALL_FUNCTION 1					    								  
							      16 GET_ITER						    28 16 LOAD_CONST 3 ( '0' )					  
							      >> 18 FOR_ITER 50 ( to 70 )				    18 RETURN_VALUE						  
							      20 STORE_FAST 4 ( i )					    								  
							      								    29 >> 20 LOAD_FAST 0 ( string )				  
							      5 22 LOAD_FAST 2 ( current_sum )				    22 LOAD_CONST 4 ( '0' )					  
							      24 LOAD_FAST 0 ( string )					    24 COMPARE_OP 2 ( == )					  
							      26 LOAD_FAST 4 ( i )					    26 POP_JUMP_IF_FALSE 28					  
							      28 BINARY_SUBSCR						    								  
							      30 LOAD_CONST 2 ( '0' )					    30 28 LOAD_CONST 5 ( '0' )					  
							      32 COMPARE_OP 2 ( == )					    30 RETURN_VALUE						  
							      34 POP_JUMP_IF_FALSE 40					    								  
							      36 LOAD_CONST 3 ( 1 )					    31 >> 32 LOAD_FAST 0 ( string )				  
							      38 JUMP_FORWARD 2 ( to 42 )				    34 LOAD_CONST 6 ( '0' )					  
							      >> 40 LOAD_CONST 4 ( - 1 )				    36 COMPARE_OP 2 ( == )					  
							      >> 42 INPLACE_ADD						    38 POP_JUMP_IF_FALSE 42					  
							      44 STORE_FAST 2 ( current_sum )				    40 LOAD_FAST 0 ( string )					  
							      								    42 LOAD_CONST 7 ( '0' )					  
							      6 46 LOAD_FAST 2 ( current_sum )				    44 COMPARE_OP 2 ( == )					  
							      48 LOAD_CONST 1 ( 0 )					    46 POP_JUMP_IF_FALSE 42					  
							      50 COMPARE_OP 0 ( < )					    								  
							      52 POP_JUMP_IF_FALSE 58					    32 48 LOAD_CONST 8 ( '0' )					  
							      								    50 RETURN_VALUE						  
							      7 54 LOAD_CONST 1 ( 0 )					    								  
							      56 STORE_FAST 2 ( current_sum )				    33 >> 52 LOAD_FAST 0 ( string )				  
							      								    54 LOAD_CONST 9 ( '0' )					  
							      8 >> 58 LOAD_GLOBAL 1 ( max )				    56 COMPARE_OP 2 ( == )					  
							      60 LOAD_FAST 2 ( current_sum )				    58 POP_JUMP_IF_FALSE 62					  
							      62 LOAD_FAST 3 ( max_sum )				    								  
							      64 CALL_FUNCTION 2					    34 60 LOAD_CONST 10 ( '0' )					  
							      66 STORE_FAST 3 ( max_sum )				    62 RETURN_VALUE						  
							      68 JUMP_ABSOLUTE 18					    								  
							      >> 70 POP_BLOCK						    35 >> 64 LOAD_CONST 11 ( '0' )				  
							      								    66 RETURN_VALUE						  
							      9 >> 72 LOAD_FAST 3 ( max_sum )				    NEW_LINE							  
							      74 POP_JUMP_IF_FALSE 80					    								  
							      76 LOAD_FAST 3 ( max_sum )				    								  
							      78 RETURN_VALUE						    								  
							      >> 80 LOAD_CONST 1 ( 0 )					    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_3				      FIND_REPETITIVE_ELEMENT_1_N_1_3				    FIND_REPETITIVE_ELEMENT_1_N_1_3				  FIND_REPETITIVE_ELEMENT_1_N_1_3
--							      --							    --								  --
def findRepeating ( arr , n ) :				      Disassembly of <code object findRepeating at 0x7fbac<<unk>> d Disassembly of <code object findRepeating at 0x7f816a673a50,  script_not_found : None
    missingElement = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( n )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( missingElement )				    2 LOAD_CONST 1 ( 0 )					  
	element = arr [ abs ( arr [ i ] ) ]		      								    4 BINARY_SUBSCR						  
	if ( element < 0 ) :				      3 4 SETUP_LOOP 82 ( to 88 )				    6 STORE_FAST 2 ( numnumnumnumnumnumnumnumnumnumnumnumnumnumnu 
	    missingElement = arr [ i ]			      6 LOAD_GLOBAL 0 ( range )					    								  
	    break					      8 LOAD_CONST 1 ( 0 )					    								  
	arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) 10 LOAD_FAST 1 ( n )					    								  
    return abs ( missingElement )			      12 CALL_FUNCTION 2					    								  
							      14 GET_ITER						    								  
							      >> 16 FOR_ITER 68 ( to 86 )				    								  
							      18 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 20 LOAD_FAST 0 ( arr )					    								  
							      22 LOAD_GLOBAL 1 ( abs )					    								  
							      24 LOAD_FAST 0 ( arr )					    								  
							      26 LOAD_FAST 3 ( i )					    								  
							      28 BINARY_SUBSCR						    								  
							      30 CALL_FUNCTION 1					    								  
							      32 BINARY_SUBSCR						    								  
							      34 STORE_FAST 4 ( element )				    								  
							      								    								  
							      5 36 LOAD_FAST 4 ( element )				    								  
							      38 LOAD_CONST 1 ( 0 )					    								  
							      40 COMPARE_OP 0 ( < )					    								  
							      42 POP_JUMP_IF_FALSE 54					    								  
							      								    								  
							      6 44 LOAD_FAST 0 ( arr )					    								  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 STORE_FAST 2 ( missingElement )			    								  
							      								    								  
							      7 52 BREAK_LOOP						    								  
							      								    								  
							      8 >> 54 LOAD_FAST 0 ( arr )				    								  
							      56 LOAD_GLOBAL 1 ( abs )					    								  
							      58 LOAD_FAST 0 ( arr )					    								  
							      60 LOAD_FAST 3 ( i )					    								  
							      62 BINARY_SUBSCR						    								  
							      64 CALL_FUNCTION 1					    								  
							      66 BINARY_SUBSCR						    								  
							      68 UNARY_NEGATIVE						    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_GLOBAL 1 ( abs )					    								  
							      74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_FAST 3 ( i )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 CALL_FUNCTION 1					    								  
							      82 STORE_SUBSCR						    								  
							      84 JUMP_ABSOLUTE 16					    								  
							      >> 86 POP_BLOCK						    								  
							      								    								  
							      9 >> 88 LOAD_GLOBAL 1 ( abs )				    								  
							      90 LOAD_FAST 2 ( missingElement )				    								  
							      92 CALL_FUNCTION 1					    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS		      COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS		    COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS			  COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS
--							      --							    --								  --
def countWays ( N ) :					      Disassembly of <code object countWays at 0x7fbac0e89d20, file Disassembly of <code object countWays at 0x7f816a673a50, file error : /bin/bash: line 1: 25846 Segmentation faul
    if ( N == 1 ) :					      2 0 LOAD_FAST 0 ( N )					    20 0 LOAD_FAST 0 ( N )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return 4					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    countB = 1						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    countS = 1						      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/COUNT_POSSIBLE_
    for i in range ( 2 , N + 1 ) :			      								    								  WAYS_TO_CONSTRUCT_BUILDINGS.dis
	prev_countB = countB				      3 8 LOAD_CONST 2 ( 4 )					    21 8 LOAD_CONST 2 ( '%s' )					  
	prev_countS = countS				      10 RETURN_VALUE						    10 LOAD_FAST 0 ( N )					  
	countS = prev_countB + prev_countS		      								    12 BINARY_MODULO						  
	countB = prev_countS				      4 >> 12 LOAD_CONST 1 ( 1 )				    14 STORE_FAST 1 ( s )					  
    result = countS + countB				      14 STORE_FAST 1 ( countB )				    								  
    return ( result * result )				      								    22 >> 16 LOAD_FAST 1 ( s )					  
							      5 16 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 3 ( '%s' )					  
							      18 STORE_FAST 2 ( countS )				    20 LOAD_FAST 0 ( N )					  
							      								    22 BINARY_MODULO						  
							      6 20 SETUP_LOOP 42 ( to 64 )				    24 STORE_FAST 1 ( s )					  
							      22 LOAD_GLOBAL 0 ( range )				    								  
							      24 LOAD_CONST 3 ( 2 )					    23 26 LOAD_FAST 1 ( s )					  
							      26 LOAD_FAST 0 ( N )					    28 LOAD_CONST 3 ( '%s' )					  
							      28 LOAD_CONST 1 ( 1 )					    30 LOAD_FAST 0 ( N )					  
							      30 BINARY_ADD						    32 BINARY_MODULO						  
							      32 CALL_FUNCTION 2					    34 STORE_FAST 1 ( s )					  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 24 ( to 62 )				    24 36 LOAD_FAST 1 ( s )					  
							      38 STORE_FAST 3 ( i )					    38 LOAD_CONST 4 ( '%s' )					  
							      								    40 LOAD_FAST 0 ( N )					  
							      7 40 LOAD_FAST 1 ( countB )				    42 BINARY_MODULO						  
							      42 STORE_FAST 4 ( prev_countB )				    44 STORE_FAST 1 ( s )					  
							      								    								  
							      8 44 LOAD_FAST 2 ( countS )				    25 46 LOAD_FAST 1 ( s )					  
							      46 STORE_FAST 5 ( prev_countS )				    48 LOAD_CONST 5 ( '%s' )					  
							      								    50 LOAD_FAST 0 ( N )					  
							      9 48 LOAD_FAST 4 ( prev_countB )				    52 BINARY_MODULO						  
							      50 LOAD_FAST 5 ( prev_countS )				    54 STORE_FAST 1 ( s )					  
							      52 BINARY_ADD						    								  
							      54 STORE_FAST 2 ( countS )				    26 56 LOAD_FAST 1 ( s )					  
							      								    58 LOAD_CONST 6 ( '%s' )					  
							      10 56 LOAD_FAST 5 ( prev_countS )				    60 LOAD_FAST 0 ( N )					  
							      58 STORE_FAST 1 ( countB )				    62 BINARY_MODULO						  
							      60 JUMP_ABSOLUTE 36					    64 STORE_FAST 1 ( s )					  
							      >> 62 POP_BLOCK						    								  
							      								    27 66 LOAD_FAST 1 ( s )					  
							      11 >> 64 LOAD_FAST 2 ( countS )				    68 LOAD_CONST 7 ( '%s' )					  
							      66 LOAD_FAST 1 ( countB )					    70 LOAD_FAST 0 ( N )					  
							      68 BINARY_ADD						    72 BINARY_MODULO						  
							      70 STORE_FAST 6 ( result )				    74 LOAD_FAST 1 ( s )					  
							      								    76 BINARY_MODULO						  
							      12 72 LOAD_FAST 6 ( result )				    78 STORE_FAST 1 ( s )					  
							      74 LOAD_FAST 6 ( result )					    								  
							      76 BINARY_MULTIPLY					    28 80 LOAD_FAST 1 ( s )					  
							      78 RETURN_VALUE NEW_LINE					    82 LOAD_FAST 0 ( N )					  
							      								    84 BINARY_MODULO						  
							      								    86 STORE_FAST 1 ( s )					  
							      								    								  
							      								    29 88 LOAD_FAST 1 ( s )					  
							      								    90 LOAD_FAST 0 ( N )					  
							      								    92 BINARY_MODULO						  
							      								    94 STORE_FAST 1 ( s )					  
							      								    								  
							      								    30 96 LOAD_FAST 1 ( s )					  
							      								    98 LOAD_FAST 0 ( N )					  
							      								    100 BINARY_MODULO						  
							      								    102 STORE_FAST 1 ( s )					  
							      								    								  
							      								    31 104 LOAD_FAST 1 ( s )					  
							      								    106 LOAD_FAST 0 ( N )					  
							      								    108 LOAD_FAST 1 ( s )					  
							      								    110 BUILD_TUPLE 2						  
							      								    112 BINARY_MODULO						  
							      								    114 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
def countDivisibles ( arr , n ) :			      Disassembly of <code object countDivisibles at 0x7fbac0e8bc90 Disassembly of <code object countDivisibles at 0x7f816a673a50 script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    165 0 LOAD_FAST 1 ( n )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( res )					    2 LOAD_CONST 1 ( 0 )					  
	for j in range ( i + 1 , n ) :			      								    4 BINARY_SUBSCR						  
	    if ( arr [ i ] % arr [ j ] == 0 or arr [ j ] % ar 3 4 SETUP_LOOP 90 ( to 96 )				    6 STORE_FAST 2 ( a )					  
		res += 1				      6 LOAD_GLOBAL 0 ( range )					    								  
    return res						      8 LOAD_CONST 1 ( 0 )					    166 8 LOAD_FAST 0 ( arr )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_CONST 2 ( 1 )					  
							      12 CALL_FUNCTION 2					    12 BINARY_SUBSCR						  
							      14 GET_ITER						    14 STORE_FAST 3 ( a )					  
							      >> 16 FOR_ITER 76 ( to 94 )				    								  
							      18 STORE_FAST 3 ( i )					    167 16 LOAD_FAST 2 ( a )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 20 SETUP_LOOP 70 ( to 92 )				    20 BINARY_SUBSCR						  
							      22 LOAD_GLOBAL 0 ( range )				    22 STORE_FAST 4 ( a )					  
							      24 LOAD_FAST 3 ( i )					    								  
							      26 LOAD_CONST 2 ( 1 )					    168 24 LOAD_FAST 0 ( arr )					  
							      28 BINARY_ADD						    26 LOAD_CONST 4 ( '\n					  
							      30 LOAD_FAST 1 ( n )					    								  
							      32 CALL_FUNCTION 2					    								  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 52 ( to 90 )				    								  
							      38 STORE_FAST 4 ( j )					    								  
							      								    								  
							      5 40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_FAST 4 ( j )					    								  
							      50 BINARY_SUBSCR						    								  
							      52 BINARY_MODULO						    								  
							      54 LOAD_CONST 1 ( 0 )					    								  
							      56 COMPARE_OP 2 ( == )					    								  
							      58 POP_JUMP_IF_TRUE 80					    								  
							      60 LOAD_FAST 0 ( arr )					    								  
							      62 LOAD_FAST 4 ( j )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 3 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 BINARY_MODULO						    								  
							      74 LOAD_CONST 1 ( 0 )					    								  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 36					    								  
							      								    								  
							      6 >> 80 LOAD_FAST 2 ( res )				    								  
							      82 LOAD_CONST 2 ( 1 )					    								  
							      84 INPLACE_ADD						    								  
							      86 STORE_FAST 2 ( res )					    								  
							      88 JUMP_ABSOLUTE 36					    								  
							      >> 90 POP_BLOCK						    								  
							      >> 92 JUMP_ABSOLUTE 16					    								  
							      >> 94 POP_BLOCK						    								  
							      								    								  
							      7 >> 96 LOAD_FAST 2 ( res )				    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			      FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			    FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			  FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE
--							      --							    --								  --
def dayofweek ( d , m , y ) :				      Disassembly of <code object dayofweek at 0x7fbac<<unk>> d540, Disassembly of <code object dayofweek at 0x7f816a6e4b70, file script_not_found : None
    t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]     2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( d )					  
    y -= m < 3						      2 LOAD_CONST 2 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  
    return ( ( y + int ( y / 4 ) - int ( y / 100 ) + int ( y  4 LOAD_CONST 3 ( 2 )					    4 COMPARE_OP 2 ( == )					  
							      6 LOAD_CONST 4 ( 5 )					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_CONST 1 ( 0 )					    								  
							      10 LOAD_CONST 2 ( 3 )					    27 8 LOAD_FAST 0 ( d )					  
							      12 LOAD_CONST 4 ( 5 )					    10 LOAD_CONST 2 ( 4 )					  
							      14 LOAD_CONST 5 ( 1 )					    12 COMPARE_OP 2 ( == )					  
							      16 LOAD_CONST 6 ( 4 )					    14 POP_JUMP_IF_FALSE 28					  
							      18 LOAD_CONST 7 ( 6 )					    								  
							      20 LOAD_CONST 3 ( 2 )					    28 >> 16 LOAD_FAST 0 ( d )					  
							      22 LOAD_CONST 6 ( 4 )					    18 LOAD_CONST 3 ( 1 )					  
							      24 BUILD_LIST 12						    20 COMPARE_OP 2 ( == )					  
							      26 STORE_FAST 3 ( t )					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      3 28 LOAD_FAST 2 ( y )					    29 24 LOAD_FAST 0 ( d )					  
							      30 LOAD_FAST 1 ( m )					    26 LOAD_CONST 4 ( 2 )					  
							      32 LOAD_CONST 2 ( 3 )					    28 COMPARE_OP 2 ( == )					  
							      34 COMPARE_OP 0 ( < )					    30 POP_JUMP_IF_FALSE 28					  
							      36 INPLACE_SUBTRACT					    								  
							      38 STORE_FAST 2 ( y )					    30 32 LOAD_FAST 0 ( d )					  
							      								    34 LOAD_CONST 5 ( '%d = %d' )				  
							      4 40 LOAD_FAST 2 ( y )					    36 LOAD_FAST 0 ( d )					  
							      42 LOAD_GLOBAL 0 ( int )					    38 BINARY_MODULO						  
							      44 LOAD_FAST 2 ( y )					    40 LOAD_CONST 6 ( '%d = %d' )				  
							      46 LOAD_CONST 6 ( 4 )					    42 LOAD_FAST 0 ( d )					  
							      48 BINARY_TRUE_DIVIDE					    44 BINARY_MODULO						  
							      50 CALL_FUNCTION 1					    46 LOAD_CONST 7 ( '%d = %d' )				  
							      52 BINARY_ADD						    48 LOAD_FAST 0 ( d )					  
							      54 LOAD_GLOBAL 0 ( int )					    50 BINARY_MODULO						  
							      56 LOAD_FAST 2 ( y )					    52 LOAD_CONST 8 ( '%d = %d' )				  
							      58 LOAD_CONST 8 ( 100 )					    54 LOAD_FAST 0 ( d )					  
							      60 BINARY_TRUE_DIVIDE					    56 BINARY_MODULO						  
							      62 CALL_FUNCTION 1					    58 BINARY_MODULO						  
							      64 BINARY_SUBTRACT					    60 BINARY_MODULO						  
							      66 LOAD_GLOBAL 0 ( int )					    62 RETURN_VALUE						  
							      68 LOAD_FAST 2 ( y )					    								  
							      70 LOAD_CONST 9 ( 400 )					    31 >> 64 LOAD_FAST 0 ( d )					  
							      72 BINARY_TRUE_DIVIDE					    66 LOAD_CONST 9 ( '%d = %d' )				  
							      74 CALL_FUNCTION 1					    68 LOAD_FAST 0 ( d )					  
							      76 BINARY_ADD						    70 BINARY_MODULO						  
							      78 LOAD_FAST 3 ( t )					    72 BINARY_MODULO						  
							      80 LOAD_FAST 1 ( m )					    74 RETURN_VALUE						  
							      82 LOAD_CONST 5 ( 1 )					    76 LOAD_CONST 0 ( None )					  
							      84 BINARY_SUBTRACT					    78 RETURN_VALUE						  
							      86 BINARY_SUBSCR						    NEW_LINE							  
							      88 BINARY_ADD						    								  
							      90 LOAD_FAST 0 ( d )					    								  
							      92 BINARY_ADD						    								  
							      94 LOAD_CONST 10 ( 7 )					    								  
							      96 BINARY_MODULO						    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			      CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			    CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			  CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE
--							      --							    --								  --
def checkCollision ( a , b , c , x , y , radius ) :	      Disassembly of <code object checkCollision at 0x7fbac<<unk>>  Disassembly of <code object checkCollision at 0x7f816a6e4b70, script_not_found : None
    dist = ( ( abs ( a * x + b * y + c ) ) / math.sqrt ( a *  2 0 LOAD_GLOBAL 0 ( abs )					    26 0 LOAD_GLOBAL 0 ( dist )					  
    if ( radius == dist ) :				      2 LOAD_FAST 0 ( a )					    2 LOAD_METHOD 1 ( abs )					  
	print ( "Touch" )				      4 LOAD_FAST 3 ( x )					    4 LOAD_FAST 0 ( a )						  
    elif ( radius > dist ) :				      6 BINARY_MULTIPLY						    6 LOAD_FAST 1 ( b )						  
	print ( "Intersect" )				      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 2 ( dist )					  
    else :						      10 LOAD_FAST 4 ( y )					    10 CALL_METHOD 2						  
	print ( "Outside" )				      12 BINARY_MULTIPLY					    12 CALL_FUNCTION 1						  
							      14 BINARY_ADD						    14 POP_TOP							  
							      16 LOAD_FAST 2 ( c )					    								  
							      18 BINARY_ADD						    27 16 LOAD_GLOBAL 2 ( print )				  
							      20 CALL_FUNCTION 1					    18 LOAD_CONST 1 ( 'Layout' )				  
							      22 LOAD_GLOBAL 1 ( math )					    20 CALL_FUNCTION 1						  
							      24 LOAD_METHOD 2 ( sqrt )					    22 POP_TOP							  
							      26 LOAD_FAST 0 ( a )					    24 LOAD_CONST 0 ( None )					  
							      28 LOAD_FAST 0 ( a )					    26 RETURN_VALUE						  
							      30 BINARY_MULTIPLY					    NEW_LINE							  
							      32 LOAD_FAST 1 ( b )					    								  
							      34 LOAD_FAST 1 ( b )					    								  
							      36 BINARY_MULTIPLY					    								  
							      38 BINARY_ADD						    								  
							      40 CALL_METHOD 1						    								  
							      42 BINARY_TRUE_DIVIDE					    								  
							      44 STORE_FAST 6 ( dist )					    								  
							      								    								  
							      3 46 LOAD_FAST 5 ( radius )				    								  
							      48 LOAD_FAST 6 ( dist )					    								  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 POP_JUMP_IF_FALSE 64					    								  
							      								    								  
							      4 54 LOAD_GLOBAL 3 ( print )				    								  
							      56 LOAD_CONST 1 ( 'Touch' )				    								  
							      58 CALL_FUNCTION 1					    								  
							      60 POP_TOP						    								  
							      62 JUMP_FORWARD 26 ( to 90 )				    								  
							      								    								  
							      5 >> 64 LOAD_FAST 5 ( radius )				    								  
							      66 LOAD_FAST 6 ( dist )					    								  
							      68 COMPARE_OP 4 ( > )					    								  
							      70 POP_JUMP_IF_FALSE 82					    								  
							      								    								  
							      6 72 LOAD_GLOBAL 3 ( print )				    								  
							      74 LOAD_CONST 2 ( 'Intersect' )				    								  
							      76 CALL_FUNCTION 1					    								  
							      78 POP_TOP						    								  
							      80 JUMP_FORWARD 8 ( to 90 )				    								  
							      								    								  
							      8 >> 82 LOAD_GLOBAL 3 ( print )				    								  
							      84 LOAD_CONST 3 ( 'Outside' )				    								  
							      86 CALL_FUNCTION 1					    								  
							      88 POP_TOP						    								  
							      >> 90 LOAD_CONST 0 ( None )				    								  
							      92 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI
--							      --							    --								  --
def canRepresentBST ( pre ) :				      Disassembly of <code object canRepresentBST at 0x7fbac0e8bc90 Disassembly of <code object canCommittBST at 0x7f816a601660,  script_not_found : None
    s = [ ]						      2 0 BUILD_LIST 0						    69 0 LOAD_FAST 0 ( pre )					  
    root = INT_MIN					      2 STORE_FAST 1 ( s )					    2 LOAD_ATTR 0 ( root )					  
    for value in pre :					      								    4 STORE_FAST 1 ( root )					  
	if value < root :				      3 4 LOAD_GLOBAL 0 ( INT_MIN )				    								  
	    return False				      6 STORE_FAST 2 ( root )					    70 6 LOAD_CONST 1 ( False )					  
	while ( len ( s ) > 0 and s [ - 1 ] < value ) :	      								    8 LOAD_FAST 1 ( root )					  
	    root = s.pop ( )				      4 8 SETUP_LOOP 72 ( to 82 )				    10 COMPARE_OP 6 ( in )					  
	s.append ( value )				      10 LOAD_FAST 0 ( pre )					    12 POP_JUMP_IF_FALSE 24					  
    return True						      12 GET_ITER						    								  
							      >> 14 FOR_ITER 64 ( to 80 )				    71 14 LOAD_FAST 1 ( root )					  
							      16 STORE_FAST 3 ( value )					    16 LOAD_METHOD 1 ( pop )					  
							      								    18 CALL_METHOD 0						  
							      5 18 LOAD_FAST 3 ( value )				    20 POP_TOP							  
							      20 LOAD_FAST 2 ( root )					    								  
							      22 COMPARE_OP 0 ( < )					    72 >> 22 LOAD_FAST 1 ( root )				  
							      24 POP_JUMP_IF_FALSE 30					    24 LOAD_METHOD 2 ( pop )					  
							      								    26 LOAD_CONST 2 ( 'root' )					  
							      6 26 LOAD_CONST 1 ( False )				    28 CALL_METHOD 1						  
							      28 RETURN_VALUE						    30 POP_TOP							  
							      								    								  
							      7 >> 30 SETUP_LOOP 36 ( to 68 )				    73 32 LOAD_FAST 1 ( root )					  
							      >> 32 LOAD_GLOBAL 1 ( len )				    34 LOAD_METHOD 3 ( pop )					  
							      34 LOAD_FAST 1 ( s )					    36 LOAD_CONST 3 ( 'root' )					  
							      36 CALL_FUNCTION 1					    38 CALL_METHOD 1						  
							      38 LOAD_CONST 2 ( 0 )					    40 POP_TOP							  
							      40 COMPARE_OP 4 ( > )					    								  
							      42 POP_JUMP_IF_FALSE 66					    74 42 LOAD_FAST 1 ( root )					  
							      44 LOAD_FAST 1 ( s )					    44 LOAD_METHOD 4 ( pop )					  
							      46 LOAD_CONST 3 ( - 1 )					    46 LOAD_CONST 4 ( 'root' )					  
							      48 BINARY_SUBSCR						    48 CALL_METHOD 1						  
							      50 LOAD_FAST 3 ( value )					    50 POP_TOP							  
							      52 COMPARE_OP 0 ( < )					    52 JUMP_FORWARD 22 ( to 78 )				  
							      54 POP_JUMP_IF_FALSE 66					    								  
							      								    75 >> 54 LOAD_FAST 1 ( root )				  
							      8 56 LOAD_FAST 1 ( s )					    56 LOAD_METHOD 5 ( pop )					  
							      58 LOAD_METHOD 2 ( pop )					    58 LOAD_CONST 5 ( 'root' )					  
							      60 CALL_METHOD 0						    60 CALL_METHOD 1						  
							      62 STORE_FAST 2 ( root )					    62 POP_TOP							  
							      64 JUMP_ABSOLUTE 32					    								  
							      >> 66 POP_BLOCK						    76 64 LOAD_FAST 1 ( root )					  
							      								    66 LOAD_METHOD 6 ( pop )					  
							      9 >> 68 LOAD_FAST 1 ( s )					    68 LOAD_CONST 6 ( 'root' )					  
							      70 LOAD_METHOD 3 ( append )				    70 CALL_METHOD 1						  
							      72 LOAD_FAST 3 ( value )					    72 POP_TOP							  
							      74 CALL_METHOD 1						    74 JUMP_FORWARD 22 ( to 78 )				  
							      76 POP_TOP						    								  
							      78 JUMP_ABSOLUTE 14					    77 >> 76 LOAD_FAST 1 ( root )				  
							      >> 80 POP_BLOCK						    78 LOAD_METHOD 7 ( pop )					  
							      								    80 CALL_METHOD 0						  
							      10 >> 82 LOAD_CONST 4 ( True )				    82 POP_TOP							  
							      84 RETURN_VALUE NEW_LINE					    								  
							      								    78 84 LOAD_FAST 1 ( root )					  
							      								    86 LOAD_METHOD 8 ( pop )					  
							      								    88 LOAD_CONST 7 ( 'root' )					  
							      								    90 CALL_METHOD 1						  
							      								    92 POP_TOP							  
							      								    								  
							      								    80 94 LOAD_FAST 1 ( root )					  
							      								    96 LOAD_METHOD 9 ( pop )					  
							      								    98 LOAD_CONST 8 ( 'root' )					  
							      								    100 CALL_METHOD 1						  
							      								    102 POP_TOP							  
							      								    								  
							      								    81 104 LOAD_FAST 1 ( root )					  
							      								    106 LOAD_METHOD 10 ( pop )					  
							      								    108 LOAD_CONST 9 ( 'root' )					  
							      								    110 CALL_METHOD 1						  
							      								    112 POP_TOP							  
							      								    114 LOAD_CONST 0 ( None )					  
							      								    116 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES
--							      --							    --								  --
def firstLetterWord ( str ) :				      Disassembly of <code object firstLetterWord at 0x7fbac0e89d20 Disassembly of <code object firstLetterWord at 0x7f816a673a50 error : Traceback (most recent call last):   File
    result = ""						      2 0 LOAD_CONST 1 ( '' )					    20 0 LOAD_CONST 1 ( "'" )					  "XLM/dis_script.py", line 59, in <module>	for
    v = True						      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( i )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( len ( str ) ) :			      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	if ( str [ i ] == ' ' ) :			      3 4 LOAD_CONST 2 ( True )					    21 4 LOAD_CONST 2 ( "'" )					  cals, co_varnames, co_names, co_consts, co_linesta
	    v = True					      6 STORE_FAST 2 ( v )					    6 STORE_FAST 2 ( i )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
	elif ( str [ i ] != ' ' and v == True ) :	      								    								  pack non-iterable NoneType object
	    result += ( str [ i ] )			      4 8 SETUP_LOOP 74 ( to 84 )				    22 8 LOAD_FAST 0 ( str )					  
	    v = False					      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_CONST 3 ( "'" )					  
    return result					      12 LOAD_GLOBAL 1 ( len )					    12 COMPARE_OP 2 ( == )					  
							      14 LOAD_FAST 0 ( str )					    14 POP_JUMP_IF_FALSE 28					  
							      16 CALL_FUNCTION 1					    								  
							      18 CALL_FUNCTION 1					    23 16 LOAD_CONST 4 ( "'" )					  
							      20 GET_ITER						    18 STORE_FAST 1 ( i )					  
							      >> 22 FOR_ITER 58 ( to 82 )				    								  
							      24 STORE_FAST 3 ( i )					    24 >> 20 LOAD_FAST 0 ( str )				  
							      								    22 LOAD_CONST 5 ( "'" )					  
							      5 26 LOAD_FAST 0 ( str )					    24 COMPARE_OP 2 ( == )					  
							      28 LOAD_FAST 3 ( i )					    26 POP_JUMP_IF_FALSE 28					  
							      30 BINARY_SUBSCR						    								  
							      32 LOAD_CONST 3 ( ' ' )					    25 28 LOAD_CONST 6 ( "'" )					  
							      34 COMPARE_OP 2 ( == )					    30 STORE_FAST 1 ( i )					  
							      36 POP_JUMP_IF_FALSE 44					    								  
							      								    26 32 LOAD_FAST 0 ( str )					  
							      6 38 LOAD_CONST 2 ( True )				    34 LOAD_CONST 7 ( "'" )					  
							      40 STORE_FAST 2 ( v )					    36 COMPARE_OP 2 ( == )					  
							      42 JUMP_ABSOLUTE 22					    38 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 >> 44 LOAD_FAST 0 ( str )				    27 40 LOAD_CONST 8 ( "'" )					  
							      46 LOAD_FAST 3 ( i )					    42 STORE_FAST 1 ( i )					  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_CONST 3 ( ' ' )					    28 >> 44 LOAD_FAST 0 ( str )				  
							      52 COMPARE_OP 3 ( != )					    46 LOAD_CONST 9 ( "'" )					  
							      54 POP_JUMP_IF_FALSE 22					    48 COMPARE_OP 2 ( == )					  
							      56 LOAD_FAST 2 ( v )					    50 POP_JUMP_IF_FALSE 44					  
							      58 LOAD_CONST 2 ( True )					    								  
							      60 COMPARE_OP 2 ( == )					    29 52 LOAD_CONST 10 ( "'					  
							      62 POP_JUMP_IF_FALSE 22					    								  
							      								    								  
							      8 64 LOAD_FAST 1 ( result )				    								  
							      66 LOAD_FAST 0 ( str )					    								  
							      68 LOAD_FAST 3 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 INPLACE_ADD						    								  
							      74 STORE_FAST 1 ( result )				    								  
							      								    								  
							      9 76 LOAD_CONST 4 ( False )				    								  
							      78 STORE_FAST 2 ( v )					    								  
							      80 JUMP_ABSOLUTE 22					    								  
							      >> 82 POP_BLOCK						    								  
							      								    								  
							      10 >> 84 LOAD_FAST 1 ( result )				    								  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
def maxLen ( arr ) :					      Disassembly of <code object maxLen at 0x7fbac<<unk>> de40, fi Disassembly of <code object maxLen at 0x7f816a673a50, file "< script_not_found : None
    max_len = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( arr )					  
    for i in range ( len ( arr ) ) :			      2 STORE_FAST 1 ( max_len )				    2 LOAD_METHOD 0 ( append )					  
	curr_sum = 0					      								    4 LOAD_GLOBAL 1 ( len )					  
	for j in range ( i , len ( arr ) ) :		      3 4 SETUP_LOOP 86 ( to 92 )				    6 LOAD_FAST 0 ( arr )					  
	    curr_sum += arr [ j ]			      6 LOAD_GLOBAL 0 ( range )					    8 CALL_FUNCTION 1						  
	    if curr_sum == 0 :				      8 LOAD_GLOBAL 1 ( len )					    10 CALL_FUNCTION 1						  
		max_len = max ( max_len , j - i + 1 )	      10 LOAD_FAST 0 ( arr )					    12 CALL_METHOD 1						  
    return max_len					      12 CALL_FUNCTION 1					    14 POP_TOP							  
							      14 CALL_FUNCTION 1					    16 LOAD_CONST 0 ( None )					  
							      16 GET_ITER						    18 RETURN_VALUE						  
							      >> 18 FOR_ITER 70 ( to 90 )				    NEW_LINE							  
							      20 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 22 LOAD_CONST 1 ( 0 )					    								  
							      24 STORE_FAST 3 ( curr_sum )				    								  
							      								    								  
							      5 26 SETUP_LOOP 60 ( to 88 )				    								  
							      28 LOAD_GLOBAL 0 ( range )				    								  
							      30 LOAD_FAST 2 ( i )					    								  
							      32 LOAD_GLOBAL 1 ( len )					    								  
							      34 LOAD_FAST 0 ( arr )					    								  
							      36 CALL_FUNCTION 1					    								  
							      38 CALL_FUNCTION 2					    								  
							      40 GET_ITER						    								  
							      >> 42 FOR_ITER 42 ( to 86 )				    								  
							      44 STORE_FAST 4 ( j )					    								  
							      								    								  
							      6 46 LOAD_FAST 3 ( curr_sum )				    								  
							      48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 4 ( j )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 INPLACE_ADD						    								  
							      56 STORE_FAST 3 ( curr_sum )				    								  
							      								    								  
							      7 58 LOAD_FAST 3 ( curr_sum )				    								  
							      60 LOAD_CONST 1 ( 0 )					    								  
							      62 COMPARE_OP 2 ( == )					    								  
							      64 POP_JUMP_IF_FALSE 42					    								  
							      								    								  
							      8 66 LOAD_GLOBAL 2 ( max )				    								  
							      68 LOAD_FAST 1 ( max_len )				    								  
							      70 LOAD_FAST 4 ( j )					    								  
							      72 LOAD_FAST 2 ( i )					    								  
							      74 BINARY_SUBTRACT					    								  
							      76 LOAD_CONST 2 ( 1 )					    								  
							      78 BINARY_ADD						    								  
							      80 CALL_FUNCTION 2					    								  
							      82 STORE_FAST 1 ( max_len )				    								  
							      84 JUMP_ABSOLUTE 42					    								  
							      >> 86 POP_BLOCK						    								  
							      >> 88 JUMP_ABSOLUTE 18					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      9 >> 92 LOAD_FAST 1 ( max_len )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			      PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			    PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			  PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE
--							      --							    --								  --
def censor ( text , word ) :				      Disassembly of <code object censor at 0x7fbac0e89d20, file "< Disassembly of <code object censor at 0x7f816a677930, file "< error : Traceback (most recent call last):   File
    word_list = text.split ( )				      2 0 LOAD_FAST 0 ( text )					    65 0 LOAD_FAST 0 ( text )					  "XLM/dis_script.py", line 60, in <module>	exec
    result = ''						      2 LOAD_METHOD 0 ( split )					    2 LOAD_CONST 1 ( 'stars' )					  (item)   File "main.py", line 38, in <module>	  Fi
    stars = '*' * len ( word )				      4 CALL_METHOD 0						    4 BINARY_SUBSCR						  le "<dis>", line 2, in censor TypeError: string in
    count = 0						      6 STORE_FAST 2 ( word_list )				    6 STORE_FAST 1 ( word )					  dices must be integers
    index = 0 ;						      								    								  
    for i in word_list :				      3 8 LOAD_CONST 1 ( '' )					    66 8 LOAD_FAST 1 ( word )					  
	if i == word :					      10 STORE_FAST 3 ( result )				    10 LOAD_CONST 2 ( '' )					  
	    word_list [ index ] = stars			      								    12 BINARY_SUBSCR						  
	index += 1					      4 12 LOAD_CONST 2 ( '*' )					    14 STORE_FAST 2 ( word )					  
    result = ' '.join ( word_list )			      14 LOAD_GLOBAL 1 ( len )					    								  
    return result					      16 LOAD_FAST 1 ( word )					    67 16 LOAD_FAST 2 ( word )					  
							      18 CALL_FUNCTION 1					    18 LOAD_CONST 3 ( 'stars' )					  
							      20 BINARY_MULTIPLY					    20 BINARY_SUBSCR						  
							      22 STORE_FAST 4 ( stars )					    22 STORE_FAST 3 ( word )					  
							      								    								  
							      5 24 LOAD_CONST 3 ( 0 )					    68 24 LOAD_FAST 3 ( word )					  
							      26 STORE_FAST 5 ( count )					    26 LOAD_CONST 4 ( '' )					  
							      								    28 BINARY_SUBSCR						  
							      6 28 LOAD_CONST 3 ( 0 )					    30 LOAD_CONST 5 ( '' )					  
							      30 STORE_FAST 6 ( index )					    32 BINARY_SUBSCR						  
							      								    34 LOAD_CONST 6 ( '' )					  
							      7 32 SETUP_LOOP 36 ( to 70 )				    36 BINARY_SUBSCR						  
							      34 LOAD_FAST 2 ( word_list )				    38 LOAD_CONST 7 ( '' )					  
							      36 GET_ITER						    40 BINARY_SUBSCR						  
							      >> 38 FOR_ITER 28 ( to 68 )				    42 LOAD_CONST 8 ( '' )					  
							      40 STORE_FAST 7 ( i )					    44 BINARY_SUBSCR						  
							      								    46 LOAD_CONST 9 ( '' )					  
							      8 42 LOAD_FAST 7 ( i )					    48 BINARY_SUBSCR						  
							      44 LOAD_FAST 1 ( word )					    50 LOAD_CONST 10 ( '' )					  
							      46 COMPARE_OP 2 ( == )					    52 BINARY_SUBSCR						  
							      48 POP_JUMP_IF_FALSE 58					    54 LOAD_CONST 11 ( '' )					  
							      								    56 BINARY_SUBSCR						  
							      9 50 LOAD_FAST 4 ( stars )				    58 LOAD_CONST 12 ( '' )					  
							      52 LOAD_FAST 2 ( word_list )				    60 BINARY_SUBSCR						  
							      54 LOAD_FAST 6 ( index )					    62 LOAD_CONST 13 ( '' )					  
							      56 STORE_SUBSCR						    64 BINARY_SUBSCR						  
							      								    66 LOAD_CONST 14 ( '' )					  
							      10 >> 58 LOAD_FAST 6 ( index )				    68 BINARY_SUBSCR						  
							      60 LOAD_CONST 4 ( 1 )					    70 LOAD_CONST 15 ( '' )					  
							      62 INPLACE_ADD						    72 BINARY_SUBSCR						  
							      64 STORE_FAST 6 ( index )					    74 LOAD_CONST 16 ( '' )					  
							      66 JUMP_ABSOLUTE 38					    76 BINARY_SUBSCR						  
							      >> 68 POP_BLOCK						    78 LOAD_CONST 17 ( 'stars' )				  
							      								    80 BINARY_SUBSCR						  
							      11 >> 70 LOAD_CONST 5 ( ' ' )				    82 LOAD_CONST 18 ( 'stars' )				  
							      72 LOAD_METHOD 2 ( join )					    84 BINARY_SUBSCR						  
							      74 LOAD_FAST 2 ( word_list )				    86 LOAD_CONST 19 ( 'stars' )				  
							      76 CALL_METHOD 1						    88 BINARY_SUBSCR						  
							      78 STORE_FAST 3 ( result )				    90 LOAD_CONST 20 ( 'stars' )				  
							      								    92 BINARY_SUBSCR						  
							      12 80 LOAD_FAST 3 ( result )				    94 LOAD_CONST 21 ( 'stars' )				  
							      82 RETURN_VALUE NEW_LINE					    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 22 ( 'stars' )				  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_CONST 21 ( 'stars' )				  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 22 ( 'stars' )				  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 21 ( 'stars' )				  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 22 ( 'stars' )				  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 23 ( 'stars' )				  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 22 ( 'stars' )				  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 23 ( 'stars' )				  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 22 ( 'stars' )				  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 23 ( 'stars' )				  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 22 ( 'stars' )				  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 23 ( 'stars' )				  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 24 ( 'stars' )				  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 25 ( 'stars' )				  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 26 ( 'stars' )				  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 24 ( 'stars' )				  
							      								    160 STORE_SUBSCR						  
							      								    								  
							      								    67 162 LOAD_FAST 1 ( word )					  
							      								    164 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
def minXOR ( arr , n ) :				      Disassembly of <code object minXOR at 0x7fbac<<unk>> de40, fi Disassembly of <code object minXOR at 0x7f816a6e4b70, file "< error : Traceback (most recent call last):   File
    arr.sort ( ) ;					      2 0 LOAD_FAST 0 ( arr )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    min_xor = 999999					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    val = 0						      4 CALL_METHOD 0						    4 LOAD_CONST 1 ( 999999 )					  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( 0 , n - 1 ) :			      6 POP_TOP							    6 LOAD_CONST 2 ( 999999 )					  cals, co_varnames, co_names, co_consts, co_linesta
	for j in range ( i + 1 , n - 1 ) :		      								    8 LOAD_CONST 3 ( 999999 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
	    val = arr [ i ] ^ arr [ j ]			      3 8 LOAD_CONST 1 ( 999999 )				    10 LOAD_CONST 4 ( 999999 )					  pack non-iterable NoneType object
	    min_xor = min ( min_xor , val )		      10 STORE_FAST 2 ( min_xor )				    12 LOAD_CONST 5 ( 999999 )					  
    return min_xor					      								    14 LOAD_CONST 6 ( 999999 )					  
							      4 12 LOAD_CONST 2 ( 0 )					    16 LOAD_CONST 7 ( 999999 )					  
							      14 STORE_FAST 3 ( val )					    18 LOAD_CONST 8 ( 999999 )					  
							      								    20 LOAD_CONST 9 ( 999999 )					  
							      5 16 SETUP_LOOP 76 ( to 94 )				    22 LOAD_CONST 10 ( 999999 )					  
							      18 LOAD_GLOBAL 1 ( range )				    24 LOAD_CONST 11 ( 999999 )					  
							      20 LOAD_CONST 2 ( 0 )					    26 LOAD_CONST 12 ( 999999 )					  
							      22 LOAD_FAST 1 ( n )					    28 LOAD_CONST 13 ( 999999 )					  
							      24 LOAD_CONST 3 ( 1 )					    30 LOAD_CONST 14 ( 999999 )					  
							      26 BINARY_SUBTRACT					    32 LOAD_CONST 15 ( 999999 )					  
							      28 CALL_FUNCTION 2					    34 LOAD_CONST 16 ( 999999 )					  
							      30 GET_ITER						    36 LOAD_CONST 17 ( 999999 )					  
							      >> 32 FOR_ITER 58 ( to 92 )				    38 LOAD_CONST 18 ( 999999 )					  
							      34 STORE_FAST 4 ( i )					    40 LOAD_CONST 19 ( 999999 )					  
							      								    42 LOAD_CONST 20 ( 999999 )					  
							      6 36 SETUP_LOOP 52 ( to 90 )				    44 LOAD_CONST 21 ( 999999 )					  
							      38 LOAD_GLOBAL 1 ( range )				    46 LOAD_CONST 22 ( 999999 )					  
							      40 LOAD_FAST 4 ( i )					    48 LOAD_CONST 23 ( 999999 )					  
							      42 LOAD_CONST 3 ( 1 )					    50 LOAD_CONST 22 ( 999999 )					  
							      44 BINARY_ADD						    52 LOAD_CONST 24 ( 999999 )					  
							      46 LOAD_FAST 1 ( n )					    54 LOAD_CONST 23 ( 999999 )					  
							      48 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 23 ( 999999 )					  
							      50 BINARY_SUBTRACT					    58 LOAD_CONST 24 ( 999999 )					  
							      52 CALL_FUNCTION 2					    60 LOAD_CONST 25 ( 999999 )					  
							      54 GET_ITER						    62 LOAD_CONST 26 ( 999999 )					  
							      >> 56 FOR_ITER 30 ( to 88 )				    64 LOAD_CONST 25 ( 999999 )					  
							      58 STORE_FAST 5 ( j )					    66 LOAD_CONST 26 ( 999999 )					  
							      								    68 LOAD_CONST 27 ( 999999 )					  
							      7 60 LOAD_FAST 0 ( arr )					    70 LOAD_CONST 28 ( 999999 )					  
							      62 LOAD_FAST 4 ( i )					    72 LOAD_CONST 29 ( 999999 )					  
							      64 BINARY_SUBSCR						    74 LOAD_CONST 30 ( 999999 )					  
							      66 LOAD_FAST 0 ( arr )					    76 LOAD_CONST 29 ( 999999 )					  
							      68 LOAD_FAST 5 ( j )					    78 LOAD_CONST 30 ( 999999 )					  
							      70 BINARY_SUBSCR						    80 LOAD_CONST 28 ( 999999 )					  
							      72 BINARY_XOR						    82 LOAD_CONST 29 ( 999999 )					  
							      74 STORE_FAST 3 ( val )					    84 LOAD_CONST 30 ( 999999 )					  
							      								    86 LOAD_CONST 31 ( 999999 )					  
							      8 76 LOAD_GLOBAL 2 ( min )				    88 LOAD_CONST 30 ( 999999 )					  
							      78 LOAD_FAST 2 ( min_xor )				    90 LOAD_CONST 31 ( 999999 )					  
							      80 LOAD_FAST 3 ( val )					    92 LOAD_CONST 32 ( 999999 )					  
							      82 CALL_FUNCTION 2					    94 LOAD_CONST 34 ( 999999 )					  
							      84 STORE_FAST 2 ( min_xor )				    96 LOAD_CONST 33 ( 999999 )					  
							      86 JUMP_ABSOLUTE 56					    98 LOAD_CONST 34 ( 999999 )					  
							      >> 88 POP_BLOCK						    100 LOAD_CONST 35 ( 999999 )				  
							      >> 90 JUMP_ABSOLUTE 32					    102 LOAD_CONST 34 ( 999999 )				  
							      >> 92 POP_BLOCK						    104 LOAD_CONST 35 ( 999999 )				  
							      								    106 LOAD_CONST 34 ( 999999 )				  
							      9 >> 94 LOAD_FAST 2 ( min_xor )				    108 LOAD_CONST 35 ( 999999 )				  
							      96 RETURN_VALUE NEW_LINE					    110 LOAD_CONST 36 ( 999999 )				  
							      								    112 LOAD_CONST 37 ( 999999 )				  
							      								    114 LOAD_CONST 36 ( 999999 )				  
							      								    116 LOAD_CONST 37 ( 999999 )				  
							      								    118 LOAD_CONST 38 ( 999999 )				  
							      								    120 LOAD_CONST 40 ( 999999 )				  
							      								    122 LOAD_CONST 41 ( 999999 )				  
							      								    124 LOAD_CONST 40 (						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SURVIVAL						      SURVIVAL							    SURVIVAL							  SURVIVAL
--							      --							    --								  --
def survival ( S , N , M ) :				      Disassembly of <code object survival at 0x7fbac<<unk>> d540,  Disassembly of <code object survival at 0x7f816a6e4b70, file  script_not_found : None
    if ( ( ( N * 6 ) < ( M * 7 ) and S > 6 ) or M > N ) :     2 0 LOAD_FAST 1 ( N )					    26 0 LOAD_FAST 0 ( S )					  
	print ( "No" )					      2 LOAD_CONST 1 ( 6 )					    2 LOAD_CONST 1 ( 6 )					  
    else :						      4 BINARY_MULTIPLY						    4 COMPARE_OP 4 ( > )					  
	days = ( M * S ) / N				      6 LOAD_FAST 2 ( M )					    6 POP_JUMP_IF_FALSE 12					  
	if ( ( ( M * S ) % N ) != 0 ) :			      8 LOAD_CONST 2 ( 7 )					    								  
	    days += 1					      10 BINARY_MULTIPLY					    27 8 LOAD_GLOBAL 0 ( print )				  
	print ( "Yes " ) ,				      12 COMPARE_OP 0 ( < )					    10 LOAD_CONST 2 ( 'No such as %s' )				  
	print ( days )					      14 POP_JUMP_IF_FALSE 24					    12 LOAD_FAST 0 ( S )					  
							      16 LOAD_FAST 0 ( S )					    14 BINARY_MODULO						  
							      18 LOAD_CONST 1 ( 6 )					    16 CALL_FUNCTION 1						  
							      20 COMPARE_OP 4 ( > )					    18 POP_TOP							  
							      22 POP_JUMP_IF_TRUE 32					    								  
							      >> 24 LOAD_FAST 2 ( M )					    28 >> 20 LOAD_GLOBAL 1 ( print )				  
							      26 LOAD_FAST 1 ( N )					    22 LOAD_CONST 3 ( 'No such as %s' )				  
							      28 COMPARE_OP 4 ( > )					    24 LOAD_FAST 0 ( S )					  
							      30 POP_JUMP_IF_FALSE 42					    26 BINARY_MODULO						  
							      								    28 CALL_FUNCTION 1						  
							      3 >> 32 LOAD_GLOBAL 0 ( print )				    30 POP_TOP							  
							      34 LOAD_CONST 3 ( 'No' )					    32 LOAD_CONST 0 ( None )					  
							      36 CALL_FUNCTION 1					    34 RETURN_VALUE						  
							      38 POP_TOP						    NEW_LINE							  
							      40 JUMP_FORWARD 54 ( to 96 )				    								  
							      								    								  
							      5 >> 42 LOAD_FAST 2 ( M )					    								  
							      44 LOAD_FAST 0 ( S )					    								  
							      46 BINARY_MULTIPLY					    								  
							      48 LOAD_FAST 1 ( N )					    								  
							      50 BINARY_TRUE_DIVIDE					    								  
							      52 STORE_FAST 3 ( days )					    								  
							      								    								  
							      6 54 LOAD_FAST 2 ( M )					    								  
							      56 LOAD_FAST 0 ( S )					    								  
							      58 BINARY_MULTIPLY					    								  
							      60 LOAD_FAST 1 ( N )					    								  
							      62 BINARY_MODULO						    								  
							      64 LOAD_CONST 4 ( 0 )					    								  
							      66 COMPARE_OP 3 ( != )					    								  
							      68 POP_JUMP_IF_FALSE 78					    								  
							      								    								  
							      7 70 LOAD_FAST 3 ( days )					    								  
							      72 LOAD_CONST 5 ( 1 )					    								  
							      74 INPLACE_ADD						    								  
							      76 STORE_FAST 3 ( days )					    								  
							      								    								  
							      8 >> 78 LOAD_GLOBAL 0 ( print )				    								  
							      80 LOAD_CONST 6 ( 'Yes ' )				    								  
							      82 CALL_FUNCTION 1					    								  
							      84 BUILD_TUPLE 1						    								  
							      86 POP_TOP						    								  
							      								    								  
							      9 88 LOAD_GLOBAL 0 ( print )				    								  
							      90 LOAD_FAST 3 ( days )					    								  
							      92 CALL_FUNCTION 1					    								  
							      94 POP_TOP						    								  
							      >> 96 LOAD_CONST 0 ( None )				    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7	      FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		    FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		  FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7
--							      --							    --								  --
def findpos ( n ) :					      Disassembly of <code object findpos at 0x7fbac0e89d20, file " Disassembly of <code object findpos at 0x7f816a681780, file " error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    j = len ( n )					      2 STORE_FAST 1 ( i )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    pos = 0						      								    4 COMPARE_OP 4 ( > )					  y", line 47, in run_dis_script     co_code, co_nlo
    while ( i < j ) :					      3 4 LOAD_GLOBAL 0 ( len )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	if ( n [ i ] == '4' ) :				      6 LOAD_FAST 0 ( n )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    pos = pos * 2 + 1				      8 CALL_FUNCTION 1						    27 8 LOAD_FAST 0 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	if ( n [ i ] == '7' ) :				      10 STORE_FAST 2 ( j )					    10 LOAD_CONST 2 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	    pos = pos * 2 + 2				      								    12 INPLACE_ADD						   be in range(0, 256)
	i = i + 1					      4 12 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 0 ( n )					  
    return pos						      14 STORE_FAST 3 ( pos )					    16 JUMP_FORWARD 4 ( to 28 )					  
							      								    								  
							      5 16 SETUP_LOOP 68 ( to 86 )				    28 >> 18 LOAD_FAST 0 ( n )					  
							      >> 18 LOAD_FAST 1 ( i )					    20 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_FAST 2 ( j )					    22 INPLACE_ADD						  
							      22 COMPARE_OP 0 ( < )					    24 STORE_FAST 0 ( n )					  
							      24 POP_JUMP_IF_FALSE 84					    								  
							      								    29 26 LOAD_FAST 0 ( n )					  
							      6 26 LOAD_FAST 0 ( n )					    28 LOAD_CONST 4 ( - 1 )					  
							      28 LOAD_FAST 1 ( i )					    30 INPLACE_ADD						  
							      30 BINARY_SUBSCR						    32 STORE_FAST 0 ( n )					  
							      32 LOAD_CONST 2 ( '4' )					    								  
							      34 COMPARE_OP 2 ( == )					    30 34 LOAD_FAST 0 ( n )					  
							      36 POP_JUMP_IF_FALSE 50					    36 LOAD_CONST 5 ( - 1 )					  
							      								    38 INPLACE_ADD						  
							      7 38 LOAD_FAST 3 ( pos )					    40 STORE_FAST 0 ( n )					  
							      40 LOAD_CONST 3 ( 2 )					    								  
							      42 BINARY_MULTIPLY					    31 42 LOAD_FAST 0 ( n )					  
							      44 LOAD_CONST 4 ( 1 )					    44 LOAD_CONST 6 ( - 1 )					  
							      46 BINARY_ADD						    46 INPLACE_ADD						  
							      48 STORE_FAST 3 ( pos )					    48 STORE_FAST 0 ( n )					  
							      								    								  
							      8 >> 50 LOAD_FAST 0 ( n )					    32 50 LOAD_FAST 0 ( n )					  
							      52 LOAD_FAST 1 ( i )					    52 LOAD_CONST 7 ( - 1 )					  
							      54 BINARY_SUBSCR						    54 INPLACE_ADD						  
							      56 LOAD_CONST 5 ( '7' )					    56 STORE_FAST 0 ( n )					  
							      58 COMPARE_OP 2 ( == )					    58 JUMP_FORWARD 4 ( to 58 )					  
							      60 POP_JUMP_IF_FALSE 74					    								  
							      								    33 >> 60 LOAD_FAST 0 ( n )					  
							      9 62 LOAD_FAST 3 ( pos )					    62 LOAD_CONST 8 ( - 1 )					  
							      64 LOAD_CONST 3 ( 2 )					    64 INPLACE_ADD						  
							      66 BINARY_MULTIPLY					    66 STORE_FAST 0 ( n )					  
							      68 LOAD_CONST 3 ( 2 )					    								  
							      70 BINARY_ADD						    34 >> 68 LOAD_FAST 0 ( n )					  
							      72 STORE_FAST 3 ( pos )					    70 LOAD_CONST 9 ( - 1 )					  
							      								    72 INPLACE_ADD						  
							      10 >> 74 LOAD_FAST 1 ( i )				    74 STORE_FAST 0 ( n )					  
							      76 LOAD_CONST 4 ( 1 )					    								  
							      78 BINARY_ADD						    35 76 LOAD_FAST 0 ( n )					  
							      80 STORE_FAST 1 ( i )					    78 LOAD_CONST 10 ( - 1 )					  
							      82 JUMP_ABSOLUTE 18					    80 INPLACE_ADD						  
							      >> 84 POP_BLOCK						    82 STORE_FAST 0 ( n )					  
							      								    84 JUMP_FORWARD 4 ( to 58 )					  
							      11 >> 86 LOAD_FAST 3 ( pos )				    								  
							      88 RETURN_VALUE NEW_LINE					    36 >> 86 LOAD_FAST 0 ( n )					  
							      								    88 LOAD_CONST 11 ( - 1 )					  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 0 ( n )					  
							      								    								  
							      								    37 94 LOAD_FAST 0 ( n )					  
							      								    96 LOAD_CONST 12 ( - 1 )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 0 ( n )					  
							      								    								  
							      								    38 102 LOAD_FAST 0 ( n )					  
							      								    104 LOAD_CONST 13 ( - 1 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 0 ( n )					  
							      								    								  
							      								    39 110 LOAD_FAST 0 ( n )					  
							      								    112 LOAD_CONST 6 ( - 1 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 0 ( n )					  
							      								    								  
							      								    40 118 LOAD_FAST 0 ( n )					  
							      								    120 LOAD_CONST 6 ( - 1 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 0 ( n )					  
							      								    								  
							      								    41 126 LOAD_FAST 0 ( n )					  
							      								    128 LOAD_CONST 6 ( - 1 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 0 ( n )					  
							      								    								  
							      								    42 134 LOAD_FAST 0 ( n )					  
							      								    136 LOAD_FAST 0 ( n )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 0 ( n )					  
							      								    								  
							      								    43 142 LOAD_FAST 0 ( n )					  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	      WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	    WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	  WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO
--							      --							    --								  --
def xorZero ( str ) :					      Disassembly of <code object xorZero at 0x7fbac<<unk>> de40, f Disassembly of <code object xorZero at 0x7f816a673a50, file " error : Traceback (most recent call last):   File
    one_count = 0					      2 0 LOAD_CONST 1 ( 0 )					    17 0 LOAD_FAST 1 ( one_count )				  "XLM/dis_script.py", line 59, in <module>	for
    zero_count = 0					      2 STORE_FAST 1 ( one_count )				    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    n = len ( str )					      								    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( 0 , n , 1 ) :			      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 2 ( new_count )				  cals, co_varnames, co_names, co_consts, co_linesta
	if ( str [ i ] == '1' ) :			      6 STORE_FAST 2 ( zero_count )				    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    one_count += 1				      								    18 8 LOAD_FAST 2 ( new_count )				  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	else :						      4 8 LOAD_GLOBAL 0 ( len )					    10 LOAD_CONST 2 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	    zero_count += 1				      10 LOAD_FAST 0 ( str )					    12 BINARY_SUBSCR						   be in range(0, 256)
    if ( one_count % 2 == 0 ) :				      12 CALL_FUNCTION 1					    14 STORE_FAST 3 ( new_count )				  
	return zero_count				      14 STORE_FAST 3 ( n )					    								  
    return one_count					      								    19 16 LOAD_FAST 2 ( new_count )				  
							      5 16 SETUP_LOOP 50 ( to 68 )				    18 LOAD_CONST 3 ( 1 )					  
							      18 LOAD_GLOBAL 1 ( range )				    20 COMPARE_OP 2 ( == )					  
							      20 LOAD_CONST 1 ( 0 )					    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_FAST 3 ( n )					    								  
							      24 LOAD_CONST 2 ( 1 )					    20 24 LOAD_FAST 2 ( new_count )				  
							      26 CALL_FUNCTION 3					    26 LOAD_CONST 4 ( 1 )					  
							      28 GET_ITER						    28 COMPARE_OP 2 ( == )					  
							      >> 30 FOR_ITER 34 ( to 66 )				    30 POP_JUMP_IF_FALSE 44					  
							      32 STORE_FAST 4 ( i )					    								  
							      								    21 32 LOAD_FAST 2 ( new_count )				  
							      6 34 LOAD_FAST 0 ( str )					    34 LOAD_CONST 5 ( 1 )					  
							      36 LOAD_FAST 4 ( i )					    36 COMPARE_OP 2 ( == )					  
							      38 BINARY_SUBSCR						    38 POP_JUMP_IF_FALSE 44					  
							      40 LOAD_CONST 3 ( '1' )					    40 LOAD_FAST 2 ( new_count )				  
							      42 COMPARE_OP 2 ( == )					    42 LOAD_CONST 6 ( 2 )					  
							      44 POP_JUMP_IF_FALSE 56					    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 44					  
							      7 46 LOAD_FAST 1 ( one_count )				    								  
							      48 LOAD_CONST 2 ( 1 )					    22 48 LOAD_FAST 2 ( new_count )				  
							      50 INPLACE_ADD						    50 LOAD_CONST 7 ( 1 )					  
							      52 STORE_FAST 1 ( one_count )				    52 COMPARE_OP 2 ( == )					  
							      54 JUMP_ABSOLUTE 30					    54 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      9 >> 56 LOAD_FAST 2 ( zero_count )			    23 56 LOAD_FAST 2 ( new_count )				  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 8 ( 2 )					  
							      60 INPLACE_ADD						    60 COMPARE_OP 2 ( == )					  
							      62 STORE_FAST 2 ( zero_count )				    62 POP_JUMP_IF_FALSE 44					  
							      64 JUMP_ABSOLUTE 30					    								  
							      >> 66 POP_BLOCK						    24 64 LOAD_FAST 2 ( new_count )				  
							      								    66 LOAD_CONST 9 ( 1 )					  
							      10 >> 68 LOAD_FAST 1 ( one_count )			    68 COMPARE_OP 2 ( == )					  
							      70 LOAD_CONST 4 ( 2 )					    70 POP_JUMP_IF_FALSE 80					  
							      72 BINARY_MODULO						    72 LOAD_FAST 2 ( new_count )				  
							      74 LOAD_CONST 1 ( 0 )					    74 LOAD_CONST 10 ( 2 )					  
							      76 COMPARE_OP 2 ( == )					    76 COMPARE_OP 2 ( == )					  
							      78 POP_JUMP_IF_FALSE 84					    78 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      11 80 LOAD_FAST 2 ( zero_count )				    25 80 LOAD_FAST 2 ( new_count )				  
							      82 RETURN_VALUE						    82 LOAD_CONST 11 ( 1 )					  
							      								    84 INPLACE_ADD						  
							      12 >> 84 LOAD_FAST 1 ( one_count )			    86 STORE_FAST 2 ( new_count )				  
							      86 RETURN_VALUE NEW_LINE					    								  
							      								    26 >> 88 LOAD_FAST 2 ( new_count )				  
							      								    90 LOAD_CONST 12 ( 2 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 102					  
							      								    								  
							      								    27 96 LOAD_FAST 2 ( new_count )				  
							      								    98 LOAD_CONST 13 ( 1 )					  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 2 ( new_count )				  
							      								    								  
							      								    28 104 LOAD_FAST 2 ( new_count )				  
							      								    106 LOAD_CONST 14 ( 2 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    29 112 LOAD_FAST 2 ( new_count )				  
							      								    114 LOAD_CONST 15 ( 1 )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 2 ( new_count )				  
							      								    								  
							      								    30 >> 120 LOAD_FAST 2 ( new_count )				  
							      								    122 LOAD_CONST 16 ( 2 )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 2 ( new_count )				  
							      								    128 JUMP_FORWARD 2 ( to 108 )				  
							      								    								  
							      								    31 >> 130 LOAD_FAST 2 ( new_count )				  
							      								    132 LOAD_CONST 17 ( 1 )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 2 2 ( new_count )				  
							      								    								  
							      								    32 >> 138 LOAD_FAST 2 ( new_count )				  
							      								    140 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS				      BREAK_NUMBER_THREE_PARTS					    BREAK_NUMBER_THREE_PARTS					  BREAK_NUMBER_THREE_PARTS
--							      --							    --								  --
def count_of_ways ( n ) :				      Disassembly of <code object count_of_ways at 0x7fbac<<unk>> d Disassembly of <code object count_of_ways at 0x7f816a6e4b70,  error : /bin/bash: line 1: 25898 Segmentation faul
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n + 1 ) :			      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( 0 , n + 1 ) :			      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	    for k in range ( 0 , n + 1 ) :		      3 4 SETUP_LOOP 94 ( to 100 )				    27 4 SETUP_LOOP 52 ( to 54 )				  eval_scripts/python_sa-dis_sa.test/BREAK_NUMBER_TH
		if ( i + j + k == n ) :			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  REE_PARTS.dis
		    count = count + 1			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 1 )					  
    return count					      10 LOAD_FAST 0 ( n )					    10 CALL_FUNCTION 1						  
							      12 LOAD_CONST 2 ( 1 )					    12 GET_ITER							  
							      14 BINARY_ADD						    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 CALL_FUNCTION 2					    16 STORE_FAST 2 ( i )					  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 76 ( to 98 )				    28 18 LOAD_FAST 0 ( n )					  
							      22 STORE_FAST 2 ( i )					    20 LOAD_CONST 3 ( 1 )					  
							      								    22 COMPARE_OP 0 ( < )					  
							      4 24 SETUP_LOOP 70 ( to 96 )				    24 POP_JUMP_IF_FALSE 34					  
							      26 LOAD_GLOBAL 0 ( range )				    								  
							      28 LOAD_CONST 1 ( 0 )					    29 26 LOAD_FAST 0 ( n )					  
							      30 LOAD_FAST 0 ( n )					    28 LOAD_CONST 4 ( 1 )					  
							      32 LOAD_CONST 2 ( 1 )					    30 INPLACE_ADD						  
							      34 BINARY_ADD						    32 STORE_FAST 1 ( count )					  
							      36 CALL_FUNCTION 2					    34 JUMP_ABSOLUTE 14						  
							      38 GET_ITER						    >> 36 POP_BLOCK						  
							      >> 40 FOR_ITER 52 ( to 94 )				    								  
							      42 STORE_FAST 3 ( j )					    30 >> 38 LOAD_FAST 1 ( count )				  
							      								    40 RETURN_VALUE NEW_LINE					  
							      5 44 SETUP_LOOP 46 ( to 92 )				    								  
							      46 LOAD_GLOBAL 0 ( range )				    								  
							      48 LOAD_CONST 1 ( 0 )					    								  
							      50 LOAD_FAST 0 ( n )					    								  
							      52 LOAD_CONST 2 ( 1 )					    								  
							      54 BINARY_ADD						    								  
							      56 CALL_FUNCTION 2					    								  
							      58 GET_ITER						    								  
							      >> 60 FOR_ITER 28 ( to 90 )				    								  
							      62 STORE_FAST 4 ( k )					    								  
							      								    								  
							      6 64 LOAD_FAST 2 ( i )					    								  
							      66 LOAD_FAST 3 ( j )					    								  
							      68 BINARY_ADD						    								  
							      70 LOAD_FAST 4 ( k )					    								  
							      72 BINARY_ADD						    								  
							      74 LOAD_FAST 0 ( n )					    								  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      7 80 LOAD_FAST 1 ( count )				    								  
							      82 LOAD_CONST 2 ( 1 )					    								  
							      84 BINARY_ADD						    								  
							      86 STORE_FAST 1 ( count )					    								  
							      88 JUMP_ABSOLUTE 60					    								  
							      >> 90 POP_BLOCK						    								  
							      >> 92 JUMP_ABSOLUTE 40					    								  
							      >> 94 POP_BLOCK						    								  
							      >> 96 JUMP_ABSOLUTE 20					    								  
							      >> 98 POP_BLOCK						    								  
							      								    								  
							      8 >> 100 LOAD_FAST 1 ( count )				    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K		      MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K		    MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K		  MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K
--							      --							    --								  --
def MinOperation ( a , n , k ) :			      Disassembly of <code object MinOperation at 0x7fbac<<unk>> de Disassembly of <code object MinOperation at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 3 ( result )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( a [ i ] != 1 and a [ i ] > k ) :		      								    								  le "<dis>", line 2, in MinOperation TypeError: 'li
	    result = ( result + min ( a [ i ] % k , k - a [ i 3 4 SETUP_LOOP 92 ( to 98 )				    27 4 SETUP_LOOP 52 ( to 54 )				  st' object cannot be interpreted as an integer
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    result = result + k - a [ i ]		      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 0 ( a )						  
    return result					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 80 ( to 96 )				    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 STORE_FAST 4 ( i )					    16 STORE_FAST 2 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 0 ( a )					    28 18 LOAD_FAST 1 ( n )					  
							      20 LOAD_FAST 4 ( i )					    20 LOAD_CONST 2 ( 1 )					  
							      22 BINARY_SUBSCR						    22 COMPARE_OP 4 ( > )					  
							      24 LOAD_CONST 2 ( 1 )					    24 POP_JUMP_IF_FALSE 34					  
							      26 COMPARE_OP 3 ( != )					    								  
							      28 POP_JUMP_IF_FALSE 78					    29 26 LOAD_FAST 1 ( n )					  
							      30 LOAD_FAST 0 ( a )					    28 LOAD_CONST 3 ( 1 )					  
							      32 LOAD_FAST 4 ( i )					    30 INPLACE_ADD						  
							      34 BINARY_SUBSCR						    32 STORE_FAST 1 ( n )					  
							      36 LOAD_FAST 2 ( k )					    34 JUMP_ABSOLUTE 14						  
							      38 COMPARE_OP 4 ( > )					    >> 36 POP_BLOCK						  
							      40 POP_JUMP_IF_FALSE 78					    								  
							      								    30 >> 38 LOAD_FAST 1 ( n )					  
							      5 42 LOAD_FAST 3 ( result )				    40 RETURN_VALUE						  
							      44 LOAD_GLOBAL 1 ( min )					    NEW_LINE							  
							      46 LOAD_FAST 0 ( a )					    								  
							      48 LOAD_FAST 4 ( i )					    								  
							      50 BINARY_SUBSCR						    								  
							      52 LOAD_FAST 2 ( k )					    								  
							      54 BINARY_MODULO						    								  
							      56 LOAD_FAST 2 ( k )					    								  
							      58 LOAD_FAST 0 ( a )					    								  
							      60 LOAD_FAST 4 ( i )					    								  
							      62 BINARY_SUBSCR						    								  
							      64 LOAD_FAST 2 ( k )					    								  
							      66 BINARY_MODULO						    								  
							      68 BINARY_SUBTRACT					    								  
							      70 CALL_FUNCTION 2					    								  
							      72 BINARY_ADD						    								  
							      74 STORE_FAST 3 ( result )				    								  
							      76 JUMP_ABSOLUTE 14					    								  
							      								    								  
							      7 >> 78 LOAD_FAST 3 ( result )				    								  
							      80 LOAD_FAST 2 ( k )					    								  
							      82 BINARY_ADD						    								  
							      84 LOAD_FAST 0 ( a )					    								  
							      86 LOAD_FAST 4 ( i )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 BINARY_SUBTRACT					    								  
							      92 STORE_FAST 3 ( result )				    								  
							      94 JUMP_ABSOLUTE 14					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      8 >> 98 LOAD_FAST 3 ( result )				    								  
							      100 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
def nobleInteger ( arr , size ) :			      Disassembly of <code object nobleInteger at 0x7fbac0e8bc90, f Disassembly of <code object nobleInteger at 0x7f816a673a50, f script_not_found : None
    for i in range ( 0 , size ) :			      2 0 SETUP_LOOP 86 ( to 88 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	count = 0					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for j in range ( 0 , size ) :			      4 LOAD_CONST 1 ( 0 )					    4 LOAD_FAST 0 ( arr )					  
	    if ( arr [ i ] < arr [ j ] ) :		      6 LOAD_FAST 1 ( size )					    6 CALL_FUNCTION 1						  
		count += 1				      8 CALL_FUNCTION 2						    8 GET_ITER							  
	if ( count == arr [ i ] ) :			      10 GET_ITER						    >> 10 FOR_ITER 14 ( to 22 )					  
	    return arr [ i ]				      >> 12 FOR_ITER 72 ( to 86 )				    12 STORE_FAST 1 ( size )					  
    return - 1						      14 STORE_FAST 2 ( i )					    								  
							      								    27 14 LOAD_FAST 1 ( size )					  
							      3 16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 1 ( 0 )					  
							      18 STORE_FAST 3 ( count )					    18 COMPARE_OP 4 ( > )					  
							      								    20 POP_JUMP_IF_FALSE 10					  
							      4 20 SETUP_LOOP 42 ( to 64 )				    								  
							      22 LOAD_GLOBAL 0 ( range )				    28 22 LOAD_FAST 1 ( size )					  
							      24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 LOAD_FAST 1 ( size )					    26 INPLACE_ADD						  
							      28 CALL_FUNCTION 2					    28 STORE_FAST 1 ( size )					  
							      30 GET_ITER						    30 JUMP_ABSOLUTE 10						  
							      >> 32 FOR_ITER 28 ( to 62 )				    >> 32 POP_BLOCK						  
							      34 STORE_FAST 4 ( j )					    >> 34 LOAD_CONST 3 ( None )					  
							      								    36 RETURN_VALUE						  
							      5 36 LOAD_FAST 0 ( arr )					    NEW_LINE							  
							      38 LOAD_FAST 2 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 4 ( j )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 COMPARE_OP 0 ( < )					    								  
							      50 POP_JUMP_IF_FALSE 32					    								  
							      								    								  
							      6 52 LOAD_FAST 3 ( count )				    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 INPLACE_ADD						    								  
							      58 STORE_FAST 3 ( count )					    								  
							      60 JUMP_ABSOLUTE 32					    								  
							      >> 62 POP_BLOCK						    								  
							      								    								  
							      7 >> 64 LOAD_FAST 3 ( count )				    								  
							      66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 2 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 COMPARE_OP 2 ( == )					    								  
							      74 POP_JUMP_IF_FALSE 12					    								  
							      								    								  
							      8 76 LOAD_FAST 0 ( arr )					    								  
							      78 LOAD_FAST 2 ( i )					    								  
							      80 BINARY_SUBSCR						    								  
							      82 RETURN_VALUE						    								  
							      84 JUMP_ABSOLUTE 12					    								  
							      >> 86 POP_BLOCK						    								  
							      								    								  
							      9 >> 88 LOAD_CONST 3 ( - 1 )				    								  
							      90 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
def subArray ( arr , n ) :				      Disassembly of <code object subArray at 0x7fbac<<unk>> d540,  Disassembly of <code object subArray at 0x7f816a677930, file  script_not_found : None
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 90 ( to 92 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( i , n ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    for k in range ( i , j + 1 ) :		      4 LOAD_CONST 1 ( 0 )					    4 LOAD_FAST 0 ( arr )					  
		print ( arr [ k ] , end = "" )		      6 LOAD_FAST 1 ( n )					    6 CALL_FUNCTION 1						  
	    print ( "\n" , end = "" )			      8 CALL_FUNCTION 2						    8 GET_ITER							  
							      10 GET_ITER						    >> 10 FOR_ITER 14 ( to 22 )					  
							      >> 12 FOR_ITER 76 ( to 90 )				    12 STORE_FAST 1 ( n )					  
							      14 STORE_FAST 2 ( i )					    								  
							      								    27 14 LOAD_FAST 1 ( n )					  
							      3 16 SETUP_LOOP 70 ( to 88 )				    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_GLOBAL 0 ( range )				    18 COMPARE_OP 4 ( > )					  
							      20 LOAD_FAST 2 ( i )					    20 POP_JUMP_IF_FALSE 10					  
							      22 LOAD_FAST 1 ( n )					    								  
							      24 CALL_FUNCTION 2					    28 22 LOAD_FAST 1 ( n )					  
							      26 GET_ITER						    24 LOAD_CONST 2 ( 1 )					  
							      >> 28 FOR_ITER 56 ( to 86 )				    26 COMPARE_OP 4 ( > )					  
							      30 STORE_FAST 3 ( j )					    28 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      4 32 SETUP_LOOP 38 ( to 72 )				    29 30 LOAD_FAST 1 ( n )					  
							      34 LOAD_GLOBAL 0 ( range )				    32 LOAD_CONST 3 ( 1 )					  
							      36 LOAD_FAST 2 ( i )					    34 COMPARE_OP 4 ( > )					  
							      38 LOAD_FAST 3 ( j )					    36 POP_JUMP_IF_FALSE 10					  
							      40 LOAD_CONST 2 ( 1 )					    								  
							      42 BINARY_ADD						    30 >> 38 LOAD_FAST 1 ( n )					  
							      44 CALL_FUNCTION 2					    40 LOAD_CONST 4 ( 0 )					  
							      46 GET_ITER						    42 COMPARE_OP 4 ( > )					  
							      >> 48 FOR_ITER 20 ( to 70 )				    44 POP_JUMP_IF_FALSE 10					  
							      50 STORE_FAST 4 ( k )					    								  
							      								    31 46 LOAD_FAST 1 ( n )					  
							      5 52 LOAD_GLOBAL 1 ( print )				    48 LOAD_CONST 5 ( 1 )					  
							      54 LOAD_FAST 0 ( arr )					    50 INPLACE_ADD						  
							      56 LOAD_FAST 4 ( k )					    52 STORE_FAST 1 ( n )					  
							      58 BINARY_SUBSCR						    54 JUMP_ABSOLUTE 10						  
							      60 LOAD_CONST 3 ( '' )					    >> 56 POP_BLOCK						  
							      62 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      64 CALL_FUNCTION_KW 2					    32 >> 58 LOAD_FAST 1 ( n )					  
							      66 POP_TOP						    60 RETURN_VALUE						  
							      68 JUMP_ABSOLUTE 48					    NEW_LINE							  
							      >> 70 POP_BLOCK						    								  
							      								    								  
							      6 >> 72 LOAD_GLOBAL 1 ( print )				    								  
							      74 LOAD_CONST 5 ( '\n' )					    								  
							      76 LOAD_CONST 3 ( '' )					    								  
							      78 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      80 CALL_FUNCTION_KW 2					    								  
							      82 POP_TOP						    								  
							      84 JUMP_ABSOLUTE 28					    								  
							      >> 86 POP_BLOCK						    								  
							      >> 88 JUMP_ABSOLUTE 12					    								  
							      >> 90 POP_BLOCK						    								  
							      >> 92 LOAD_CONST 0 ( None )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_IN_A_GIVEN_STRING				      COUNT_WORDS_IN_A_GIVEN_STRING				    COUNT_WORDS_IN_A_GIVEN_STRING				  COUNT_WORDS_IN_A_GIVEN_STRING
--							      --							    --								  --
def countWords ( string ) :				      Disassembly of <code object countWords at 0x7fbac0e8bc90, fil Disassembly of <code object countWords at 0x7f816a6e4b70, fil script_not_found : None
    state = OUT						      2 0 LOAD_GLOBAL 0 ( OUT )					    26 0 LOAD_FAST 1 ( state )					  
    wc = 0						      2 STORE_FAST 1 ( state )					    2 LOAD_METHOD 0 ( append )					  
    for i in range ( len ( string ) ) :			      								    4 LOAD_CONST 1 ( '\n' )					  
	if ( string [ i ] == ' ' or string [ i ] == '\n' or s 3 4 LOAD_CONST 1 ( 0 )					    6 CALL_METHOD 1						  
	    state = OUT					      6 STORE_FAST 2 ( wc )					    8 POP_TOP							  
	elif state == OUT :				      								    								  
	    state = IN					      4 8 SETUP_LOOP 82 ( to 92 )				    27 10 LOAD_FAST 0 ( string )				  
	    wc += 1					      10 LOAD_GLOBAL 1 ( range )				    12 LOAD_METHOD 0 ( append )					  
    return wc						      12 LOAD_GLOBAL 2 ( len )					    14 LOAD_CONST 2 ( '\t' )					  
							      14 LOAD_FAST 0 ( string )					    16 CALL_METHOD 1						  
							      16 CALL_FUNCTION 1					    18 POP_TOP							  
							      18 CALL_FUNCTION 1					    								  
							      20 GET_ITER						    28 20 LOAD_FAST 0 ( string )				  
							      >> 22 FOR_ITER 66 ( to 90 )				    22 LOAD_METHOD 0 ( append )					  
							      24 STORE_FAST 3 ( i )					    24 LOAD_CONST 3 ( '\t' )					  
							      								    26 CALL_METHOD 1						  
							      5 26 LOAD_FAST 0 ( string )				    28 POP_TOP							  
							      28 LOAD_FAST 3 ( i )					    30 LOAD_CONST 0 ( None )					  
							      30 BINARY_SUBSCR						    32 RETURN_VALUE						  
							      32 LOAD_CONST 2 ( ' ' )					    NEW_LINE							  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_TRUE 62					    								  
							      38 LOAD_FAST 0 ( string )					    								  
							      40 LOAD_FAST 3 ( i )					    								  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_CONST 3 ( '\n' )					    								  
							      46 COMPARE_OP 2 ( == )					    								  
							      48 POP_JUMP_IF_TRUE 62					    								  
							      50 LOAD_FAST 0 ( string )					    								  
							      52 LOAD_FAST 3 ( i )					    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_CONST 4 ( '\t' )					    								  
							      58 COMPARE_OP 2 ( == )					    								  
							      60 POP_JUMP_IF_FALSE 68					    								  
							      								    								  
							      6 >> 62 LOAD_GLOBAL 0 ( OUT )				    								  
							      64 STORE_FAST 1 ( state )					    								  
							      66 JUMP_ABSOLUTE 22					    								  
							      								    								  
							      7 >> 68 LOAD_FAST 1 ( state )				    								  
							      70 LOAD_GLOBAL 0 ( OUT )					    								  
							      72 COMPARE_OP 2 ( == )					    								  
							      74 POP_JUMP_IF_FALSE 22					    								  
							      								    								  
							      8 76 LOAD_GLOBAL 3 ( IN )					    								  
							      78 STORE_FAST 1 ( state )					    								  
							      								    								  
							      9 80 LOAD_FAST 2 ( wc )					    								  
							      82 LOAD_CONST 5 ( 1 )					    								  
							      84 INPLACE_ADD						    								  
							      86 STORE_FAST 2 ( wc )					    								  
							      88 JUMP_ABSOLUTE 22					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      10 >> 92 LOAD_FAST 2 ( wc )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT
--							      --							    --								  --
def check ( st ) :					      Disassembly of <code object check at 0x7fbac0e89d20, file "<d Disassembly of <code object check at 0x7f816a6e4b70, file "<d script_not_found : None
    n = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( n )					  
    if ( n == 0 ) :					      2 LOAD_FAST 0 ( st )					    2 LOAD_CONST 1 ( 0 )					  
	return False					      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    if ( n == 1 ) :					      6 STORE_FAST 1 ( n )					    6 LOAD_CONST 2 ( 1 )					  
	return ( ( st [ 0 ] - '0' ) % 4 == 0 )		      								    8 COMPARE_OP 2 ( == )					  
    last = ( int ) ( st [ n - 1 ] )			      3 8 LOAD_FAST 1 ( n )					    10 POP_JUMP_IF_FALSE 20					  
    second_last = ( int ) ( st [ n - 2 ] )		      10 LOAD_CONST 1 ( 0 )					    								  
    return ( ( second_last * 10 + last ) % 4 == 0 )	      12 COMPARE_OP 2 ( == )					    27 12 LOAD_CONST 3 ( ( '-'0'))				  
							      14 POP_JUMP_IF_FALSE 20					    14RETURN_VALUE						  
							      								    								  
							      4 16 LOAD_CONST 2 ( False )				    28>>16LOAD_CONST4( ( '-'0'))				  
							      18 RETURN_VALUE						    18RETURN_VALUE						  
							      								    20LOAD_CONST0( None )					  
							      5 >> 20 LOAD_FAST 1 ( n )					    22 RETURN_VALUE						  
							      22 LOAD_CONST 3 ( 1 )					    NEW_LINE							  
							      24 COMPARE_OP 2 ( == )					    								  
							      26 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      6 28 LOAD_FAST 0 ( st )					    								  
							      30 LOAD_CONST 1 ( 0 )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_CONST 4 ( '0' )					    								  
							      36 BINARY_SUBTRACT					    								  
							      38 LOAD_CONST 5 ( 4 )					    								  
							      40 BINARY_MODULO						    								  
							      42 LOAD_CONST 1 ( 0 )					    								  
							      44 COMPARE_OP 2 ( == )					    								  
							      46 RETURN_VALUE						    								  
							      								    								  
							      7 >> 48 LOAD_GLOBAL 1 ( int )				    								  
							      50 LOAD_FAST 0 ( st )					    								  
							      52 LOAD_FAST 1 ( n )					    								  
							      54 LOAD_CONST 3 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_SUBSCR						    								  
							      60 CALL_FUNCTION 1					    								  
							      62 STORE_FAST 2 ( last )					    								  
							      								    								  
							      8 64 LOAD_GLOBAL 1 ( int )				    								  
							      66 LOAD_FAST 0 ( st )					    								  
							      68 LOAD_FAST 1 ( n )					    								  
							      70 LOAD_CONST 6 ( 2 )					    								  
							      72 BINARY_SUBTRACT					    								  
							      74 BINARY_SUBSCR						    								  
							      76 CALL_FUNCTION 1					    								  
							      78 STORE_FAST 3 ( second_last )				    								  
							      								    								  
							      9 80 LOAD_FAST 3 ( second_last )				    								  
							      82 LOAD_CONST 7 ( 10 )					    								  
							      84 BINARY_MULTIPLY					    								  
							      86 LOAD_FAST 2 ( last )					    								  
							      88 BINARY_ADD						    								  
							      90 LOAD_CONST 5 ( 4 )					    								  
							      92 BINARY_MODULO						    								  
							      94 LOAD_CONST 1 ( 0 )					    								  
							      96 COMPARE_OP 2 ( == )					    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1	      EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1	    EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1		  EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1
--							      --							    --								  --
def printDiagonalSums ( mat , n ) :			      Disassembly of <code object printDiagonalSums at 0x7fbac0e8bc Disassembly of <code object printDiagonalSums at 0x7f816b663a error : Traceback (most recent call last):   File
    principal = 0					      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_FAST 0 ( mat )					  "XLM/dis_script.py", line 59, in <module>	for
    secondary = 0					      2 STORE_FAST 2 ( principal )				    2 LOAD_METHOD 0 ( secondary )				  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 0 , n ) :				      								    4 CALL_METHOD 0						  y", line 47, in run_dis_script     co_code, co_nlo
	principal += mat [ i ] [ i ]			      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	secondary += mat [ i ] [ n - i - 1 ]		      6 STORE_FAST 3 ( secondary )				    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
    print ( "Principal Diagonal:" , principal )		      								    21 8 LOAD_FAST 1 ( n )					  pack non-iterable NoneType object
    print ( "Secondary Diagonal:" , secondary )		      4 8 SETUP_LOOP 58 ( to 68 )				    10 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_GLOBAL 0 ( range )				    12 BINARY_SUBSCR						  
							      12 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 2 ( 'Principal Diagonal Diagonal onal onal onal 
							      14 LOAD_FAST 1 ( n )					    								  
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 44 ( to 66 )				    								  
							      22 STORE_FAST 4 ( i )					    								  
							      								    								  
							      5 24 LOAD_FAST 2 ( principal )				    								  
							      26 LOAD_FAST 0 ( mat )					    								  
							      28 LOAD_FAST 4 ( i )					    								  
							      30 BINARY_SUBSCR						    								  
							      32 LOAD_FAST 4 ( i )					    								  
							      34 BINARY_SUBSCR						    								  
							      36 INPLACE_ADD						    								  
							      38 STORE_FAST 2 ( principal )				    								  
							      								    								  
							      6 40 LOAD_FAST 3 ( secondary )				    								  
							      42 LOAD_FAST 0 ( mat )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 1 ( n )					    								  
							      50 LOAD_FAST 4 ( i )					    								  
							      52 BINARY_SUBTRACT					    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_SUBSCR						    								  
							      60 INPLACE_ADD						    								  
							      62 STORE_FAST 3 ( secondary )				    								  
							      64 JUMP_ABSOLUTE 20					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      7 >> 68 LOAD_GLOBAL 1 ( print )				    								  
							      70 LOAD_CONST 3 ( 'Principal Diagonal:' )			    								  
							      72 LOAD_FAST 2 ( principal )				    								  
							      74 CALL_FUNCTION 2					    								  
							      76 POP_TOP						    								  
							      								    								  
							      8 78 LOAD_GLOBAL 1 ( print )				    								  
							      80 LOAD_CONST 4 ( 'Secondary Diagonal:' )			    								  
							      82 LOAD_FAST 3 ( secondary )				    								  
							      84 CALL_FUNCTION 2					    								  
							      86 POP_TOP						    								  
							      88 LOAD_CONST 0 ( None )					    								  
							      90 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			      CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			    CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			  CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT
--							      --							    --								  --
def isAnBn ( str ) :					      Disassembly of <code object isAnBn at 0x7fbac0e89d20, file "< Disassembly of <code object isAnBn at 0x7f816a6e4b70, file "< failure : #Results: 0, 10
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( n )					  
    for i in range ( n ) :				      2 LOAD_FAST 0 ( str )					    2 LOAD_CONST 1 ( 0 )					  
	if ( str [ i ] != 'a' ) :			      4 CALL_FUNCTION 1						    4 COMPARE_OP 4 ( > )					  
	    break					      6 STORE_FAST 1 ( n )					    6 POP_JUMP_IF_FALSE 12					  
    if ( i * 2 != n ) :					      								    								  
	return False					      3 8 SETUP_LOOP 30 ( to 40 )				    27 8 LOAD_CONST 2 ( 1 )					  
    for j in range ( i , n ) :				      10 LOAD_GLOBAL 1 ( range )				    10 RETURN_VALUE						  
	if ( str [ j ] != 'b' ) :			      12 LOAD_FAST 1 ( n )					    								  
	    return False				      14 CALL_FUNCTION 1					    28 >> 12 LOAD_FAST 0 ( n )					  
    return True						      16 GET_ITER						    14 LOAD_CONST 1 ( 0 )					  
							      >> 18 FOR_ITER 18 ( to 38 )				    16 COMPARE_OP 4 ( > )					  
							      20 STORE_FAST 2 ( i )					    18 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      4 22 LOAD_FAST 0 ( str )					    29 20 LOAD_CONST 3 ( 1 )					  
							      24 LOAD_FAST 2 ( i )					    22 RETURN_VALUE						  
							      26 BINARY_SUBSCR						    								  
							      28 LOAD_CONST 1 ( 'a' )					    30 >> 24 LOAD_CONST 4 ( 1 )					  
							      30 COMPARE_OP 3 ( != )					    26 RETURN_VALUE						  
							      32 POP_JUMP_IF_FALSE 18					    28 LOAD_CONST 0 ( None )					  
							      								    30 RETURN_VALUE						  
							      5 34 BREAK_LOOP						    NEW_LINE							  
							      36 JUMP_ABSOLUTE 18					    								  
							      >> 38 POP_BLOCK						    								  
							      								    								  
							      6 >> 40 LOAD_FAST 2 ( i )					    								  
							      42 LOAD_CONST 2 ( 2 )					    								  
							      44 BINARY_MULTIPLY					    								  
							      46 LOAD_FAST 1 ( n )					    								  
							      48 COMPARE_OP 3 ( != )					    								  
							      50 POP_JUMP_IF_FALSE 56					    								  
							      								    								  
							      7 52 LOAD_CONST 3 ( False )				    								  
							      54 RETURN_VALUE						    								  
							      								    								  
							      8 >> 56 SETUP_LOOP 34 ( to 92 )				    								  
							      58 LOAD_GLOBAL 1 ( range )				    								  
							      60 LOAD_FAST 2 ( i )					    								  
							      62 LOAD_FAST 1 ( n )					    								  
							      64 CALL_FUNCTION 2					    								  
							      66 GET_ITER						    								  
							      >> 68 FOR_ITER 20 ( to 90 )				    								  
							      70 STORE_FAST 3 ( j )					    								  
							      								    								  
							      9 72 LOAD_FAST 0 ( str )					    								  
							      74 LOAD_FAST 3 ( j )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 LOAD_CONST 4 ( 'b' )					    								  
							      80 COMPARE_OP 3 ( != )					    								  
							      82 POP_JUMP_IF_FALSE 68					    								  
							      								    								  
							      10 84 LOAD_CONST 3 ( False )				    								  
							      86 RETURN_VALUE						    								  
							      88 JUMP_ABSOLUTE 68					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      11 >> 92 LOAD_CONST 5 ( True )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN
--							      --							    --								  --
def findNth ( n ) :					      Disassembly of <code object findNth at 0x7fbac<<unk>> d540, f Disassembly of <code object findNth at 0x7f816a673a50, file " error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    56 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    for curr in itertools.count ( ) :			      2 STORE_FAST 1 ( count )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 41, in <module>	  Fi
	sum = 0						      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in findNth TypeError: 'int' ob
	x = curr					      3 4 SETUP_LOOP 82 ( to 88 )				    6 STORE_FAST 1 ( count )					  ject is not subscriptable
	while ( x ) :					      6 LOAD_GLOBAL 0 ( itertools )				    								  
	    sum = sum + x % 10				      8 LOAD_METHOD 1 ( count )					    57 8 SETUP_LOOP 22 ( to 28 )				  
	    x = x // 10					      10 CALL_METHOD 0						    10 LOAD_GLOBAL 0 ( range )					  
	if ( sum == 10 ) :				      12 GET_ITER						    12 LOAD_CONST 2 ( 10 )					  
	    count = count + 1				      >> 14 FOR_ITER 70 ( to 86 )				    14 CALL_FUNCTION 1						  
	if ( count == n ) :				      16 STORE_FAST 2 ( curr )					    16 GET_ITER							  
	    return curr					      								    >> 18 FOR_ITER 16 ( to 26 )					  
    return - 1						      4 18 LOAD_CONST 1 ( 0 )					    20 STORE_FAST 2 ( i )					  
							      20 STORE_FAST 3 ( sum )					    								  
							      								    58 22 LOAD_FAST 1 ( count )					  
							      5 22 LOAD_FAST 2 ( curr )					    24 LOAD_CONST 3 ( 1 )					  
							      24 STORE_FAST 4 ( x )					    26 COMPARE_OP 2 ( == )					  
							      								    28 POP_JUMP_IF_FALSE 18					  
							      6 26 SETUP_LOOP 28 ( to 56 )				    								  
							      >> 28 LOAD_FAST 4 ( x )					    59 30 LOAD_FAST 1 ( count )					  
							      30 POP_JUMP_IF_FALSE 54					    32 LOAD_CONST 4 ( 1 )					  
							      								    34 COMPARE_OP 2 ( == )					  
							      7 32 LOAD_FAST 3 ( sum )					    36 POP_JUMP_IF_FALSE 18					  
							      34 LOAD_FAST 4 ( x )					    								  
							      36 LOAD_CONST 2 ( 10 )					    60 38 LOAD_FAST 1 ( count )					  
							      38 BINARY_MODULO						    40 LOAD_CONST 5 ( 1 )					  
							      40 BINARY_ADD						    42 COMPARE_OP 2 ( == )					  
							      42 STORE_FAST 3 ( sum )					    44 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      8 44 LOAD_FAST 4 ( x )					    61 46 LOAD_FAST 1 ( count )					  
							      46 LOAD_CONST 2 ( 10 )					    48 LOAD_CONST 6 ( 2 )					  
							      48 BINARY_FLOOR_DIVIDE					    50 COMPARE_OP 2 ( == )					  
							      50 STORE_FAST 4 ( x )					    52 POP_JUMP_IF_FALSE 18					  
							      52 JUMP_ABSOLUTE 28					    								  
							      >> 54 POP_BLOCK						    62 54 LOAD_FAST 1 ( count )					  
							      								    56 LOAD_CONST 7 ( 1 )					  
							      9 >> 56 LOAD_FAST 3 ( sum )				    58 COMPARE_OP 2 ( == )					  
							      58 LOAD_CONST 2 ( 10 )					    60 POP_JUMP_IF_FALSE 18					  
							      60 COMPARE_OP 2 ( == )					    								  
							      62 POP_JUMP_IF_FALSE 72					    63 62 LOAD_FAST 1 ( count )					  
							      								    64 LOAD_CONST 8 ( 2 )					  
							      10 64 LOAD_FAST 1 ( count )				    66 COMPARE_OP 2 ( == )					  
							      66 LOAD_CONST 3 ( 1 )					    68 POP_JUMP_IF_FALSE 18					  
							      68 BINARY_ADD						    								  
							      70 STORE_FAST 1 ( count )					    64 70 LOAD_FAST 1 ( count )					  
							      								    72 LOAD_CONST 9 ( 1 )					  
							      11 >> 72 LOAD_FAST 1 ( count )				    74 COMPARE_OP 2 ( == )					  
							      74 LOAD_FAST 0 ( n )					    76 POP_JUMP_IF_FALSE 18					  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 14					    65 78 LOAD_FAST 1 ( count )					  
							      								    80 LOAD_CONST 10 ( 2 )					  
							      12 80 LOAD_FAST 2 ( curr )				    82 COMPARE_OP 2 ( == )					  
							      82 RETURN_VALUE						    84 POP_JUMP_IF_FALSE 18					  
							      84 JUMP_ABSOLUTE 14					    								  
							      >> 86 POP_BLOCK						    66 86 LOAD_FAST 1 ( count )					  
							      								    88 LOAD_CONST 11 ( 1 )					  
							      13 >> 88 LOAD_CONST 4 ( - 1 )				    90 INPLACE_ADD						  
							      90 RETURN_VALUE NEW_LINE					    92 STORE_FAST 1 ( count )					  
							      								    								  
							      								    67 >> 94 LOAD_FAST 1 ( count )				  
							      								    96 LOAD_CONST 12 ( 2 )					  
							      								    98 COMPARE_OP 2 ( == )					  
							      								    100 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    68 102 LOAD_FAST 1 ( count )				  
							      								    104 LOAD_CONST 13 ( 1 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( count )					  
							      								    110 JUMP_ABSOLUTE 18					  
							      								    >> 112 POP_BLOCK						  
							      								    								  
							      								    69 >> 114 LOAD_FAST 1 ( count )				  
							      								    116 LOAD_CONST 12 ( 2 )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    70 122 LOAD_FAST 1 ( count )				  
							      								    124 LOAD_CONST 12 ( 2 )					  
							      								    126 COMPARE_OP 2 ( == )					  
							      								    128 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    71 130 LOAD_FAST 1 ( count )				  
							      								    132 LOAD_CONST 13 ( 1 )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 1 ( count )					  
							      								    								  
							      								    72 >> 138 LOAD_FAST 1 ( count )				  
							      								    140 LOAD_CONST 14 ( 2 )					  
							      								    142 COMPARE_OP 2 ( == )					  
							      								    144 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    73 146 LOAD_FAST 1 ( count )				  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LAST_NON_ZERO_DIGIT_FACTORIAL				      LAST_NON_ZERO_DIGIT_FACTORIAL				    LAST_NON_ZERO_DIGIT_FACTORIAL				  LAST_NON_ZERO_DIGIT_FACTORIAL
--							      --							    --								  --
def lastNon0Digit ( n ) :				      Disassembly of <code object lastNon0Digit at 0x7fbac<<unk>> d Disassembly of <code object lastNon0Digit at 0x7f816a673a50,  script_not_found : None
    if ( n < 10 ) :					      2 0 LOAD_FAST 0 ( n )					    20 0 LOAD_FAST 0 ( n )					  
	return dig [ n ]				      2 LOAD_CONST 1 ( 10 )					    2 LOAD_CONST 1 ( 10 )					  
    if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :		      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
	return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10  6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 12					  
    else :						      								    								  
	return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10  3 8 LOAD_GLOBAL 0 ( dig )					    21 8 LOAD_CONST 2 ( 4 )					  
    return 0						      10 LOAD_FAST 0 ( n )					    10 STORE_FAST 1 ( lastNon0Digit )				  
							      12 BINARY_SUBSCR						    								  
							      14 RETURN_VALUE						    22 >> 12 LOAD_CONST 3 ( 4 )					  
							      								    14 STORE_FAST 2 ( lastNon0Digit )				  
							      4 >> 16 LOAD_FAST 0 ( n )					    								  
							      18 LOAD_CONST 1 ( 10 )					    23 16 LOAD_CONST 4 ( 4 )					  
							      20 BINARY_FLOOR_DIVIDE					    18 STORE_FAST 3 ( lastNon0Digit )				  
							      22 LOAD_CONST 1 ( 10 )					    								  
							      24 BINARY_MODULO						    24 20 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 2 ( 2 )					    22 LOAD_CONST 5 ( 10 )					  
							      28 BINARY_MODULO						    24 COMPARE_OP 0 ( < )					  
							      30 LOAD_CONST 3 ( 0 )					    26 POP_JUMP_IF_FALSE 32					  
							      32 COMPARE_OP 2 ( == )					    								  
							      34 POP_JUMP_IF_FALSE 68					    25 28 LOAD_CONST 6 ( 4 )					  
							      								    30 STORE_FAST 2 ( lastNon0Digit )				  
							      5 36 LOAD_CONST 4 ( 6 )					    32 JUMP_FORWARD 2 ( to 32 )					  
							      38 LOAD_GLOBAL 1 ( lastNon0Digit )			    >> 34 LOAD_CONST 7 ( 10 )					  
							      40 LOAD_FAST 0 ( n )					    >> 36 STORE_FAST 2 ( lastNon0Digit )			  
							      42 LOAD_CONST 5 ( 5 )					    								  
							      44 BINARY_FLOOR_DIVIDE					    26 >> 38 LOAD_FAST 0 ( n )					  
							      46 CALL_FUNCTION 1					    40 LOAD_CONST 5 ( 10 )					  
							      48 BINARY_MULTIPLY					    42 COMPARE_OP 0 ( < )					  
							      50 LOAD_GLOBAL 0 ( dig )					    44 POP_JUMP_IF_FALSE 52					  
							      52 LOAD_FAST 0 ( n )					    								  
							      54 LOAD_CONST 1 ( 10 )					    27 46 LOAD_CONST 6 ( 4 )					  
							      56 BINARY_MODULO						    48 STORE_FAST 2 ( lastNon0Digit )				  
							      58 BINARY_SUBSCR						    50 JUMP_FORWARD 2 ( to 52 )					  
							      60 BINARY_MULTIPLY					    >> 52 LOAD_CONST 8 ( 10 )					  
							      62 LOAD_CONST 1 ( 10 )					    54 STORE_FAST 2 ( lastNon0Digit )				  
							      64 BINARY_MODULO						    56 JUMP_FORWARD 2 ( to 52 )					  
							      66 RETURN_VALUE						    								  
							      								    27 >> 58 LOAD_FAST 0 ( n )					  
							      7 >> 68 LOAD_CONST 6 ( 4 )				    60 LOAD_CONST 5 ( 10 )					  
							      70 LOAD_GLOBAL 1 ( lastNon0Digit )			    62 COMPARE_OP 0 ( < )					  
							      72 LOAD_FAST 0 ( n )					    64 POP_JUMP_IF_FALSE 84					  
							      74 LOAD_CONST 5 ( 5 )					    								  
							      76 BINARY_FLOOR_DIVIDE					    28 66 LOAD_CONST 9 ( 4 )					  
							      78 CALL_FUNCTION 1					    68 STORE_FAST 2 ( lastNon0Digit )				  
							      80 BINARY_MULTIPLY					    								  
							      82 LOAD_GLOBAL 0 ( dig )					    29 70 LOAD_FAST 0 ( n )					  
							      84 LOAD_FAST 0 ( n )					    72 LOAD_CONST 5 ( 10 )					  
							      86 LOAD_CONST 1 ( 10 )					    74 COMPARE_OP 0 ( < )					  
							      88 BINARY_MODULO						    76 POP_JUMP_IF_FALSE 84					  
							      90 BINARY_SUBSCR						    								  
							      92 BINARY_MULTIPLY					    30 78 LOAD_CONST 10 ( 4 )					  
							      94 LOAD_CONST 1 ( 10 )					    80 STORE_FAST 2 ( lastNon0Digit )				  
							      96 BINARY_MODULO						    82 JUMP_FORWARD 2 ( to 88 )					  
							      98 RETURN_VALUE						    >> 84 LOAD_CONST 11 ( 4 )					  
							      								    86 STORE_FAST 2 ( lastNon0Digit )				  
							      8 100 LOAD_CONST 3 ( 0 )					    								  
							      102 RETURN_VALUE NEW_LINE					    31 88 LOAD_FAST 2 ( lastNon0Digit )				  
							      								    90 LOAD_FAST 2 ( lastNon0Digit )				  
							      								    92 COMPARE_OP 0 ( < )					  
							      								    94 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      								    32 96 LOAD_FAST 2 ( lastNon0Digit )				  
							      								    98 LOAD_FAST 2 ( lastNon0Digit )				  
							      								    100 COMPARE_OP 0 ( < )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    104 LOAD_FAST 2 ( lastNon0Digit )				  
							      								    106 LOAD_FAST 2 ( lastNon0Digit )				  
							      								    108 COMPARE_OP 0 ( < )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    33 112 LOAD_FAST 2 ( lastNon0Digit )			  
							      								    114 RETURN_VALUE						  
							      								    >> 116 LOAD_CONST 12 ( None )				  
							      								    118								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		      NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		    NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		  NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS
--							      --							    --								  --
def snoob ( x ) :					      Disassembly of <code object snoob at 0x7fbac<<unk>> de40, fil Disassembly of <code object snoob at 0x7f816a6e4b70, file "<d error : Traceback (most recent call last):   File
    next = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( x )					  "XLM/dis_script.py", line 59, in <module>	for
    if ( x ) :						      2 STORE_FAST 1 ( next )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	rightOne = x & - ( x )				      								    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
	nextHigherOneBit = x + int ( rightOne )		      3 4 LOAD_FAST 0 ( x )					    6 STORE_FAST 1 ( rightTree )				  cals, co_varnames, co_names, co_consts, co_linesta
	rightOnesPattern = x ^ int ( nextHigherOneBit )	      6 POP_JUMP_IF_FALSE 78					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	rightOnesPattern = ( int ( rightOnesPattern ) / int ( 								    27 8 LOAD_FAST 1 ( rightTree )				  pack non-iterable NoneType object
	rightOnesPattern = int ( rightOnesPattern ) >> 2      4 8 LOAD_FAST 0 ( x )					    10 LOAD_CONST 2 ( 1 )					  
	next = nextHigherOneBit | rightOnesPattern	      10 LOAD_FAST 0 ( x )					    12 BINARY_SUBSCR						  
    return next						      12 UNARY_NEGATIVE						    14 STORE_FAST 2 ( rightTree )				  
							      14 BINARY_AND						    								  
							      16 STORE_FAST 2 ( rightOne )				    28 16 LOAD_FAST 2 ( rightTree )				  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      5 18 LOAD_FAST 0 ( x )					    20 BINARY_SUBSCR						  
							      20 LOAD_GLOBAL 0 ( int )					    22 STORE_FAST 3 ( rightrightrightrightrightrightrightrightrig 
							      22 LOAD_FAST 2 ( rightOne )				    								  
							      24 CALL_FUNCTION 1					    								  
							      26 BINARY_ADD						    								  
							      28 STORE_FAST 3 ( nextHigherOneBit )			    								  
							      								    								  
							      6 30 LOAD_FAST 0 ( x )					    								  
							      32 LOAD_GLOBAL 0 ( int )					    								  
							      34 LOAD_FAST 3 ( nextHigherOneBit )			    								  
							      36 CALL_FUNCTION 1					    								  
							      38 BINARY_XOR						    								  
							      40 STORE_FAST 4 ( rightOnesPattern )			    								  
							      								    								  
							      7 42 LOAD_GLOBAL 0 ( int )				    								  
							      44 LOAD_FAST 4 ( rightOnesPattern )			    								  
							      46 CALL_FUNCTION 1					    								  
							      48 LOAD_GLOBAL 0 ( int )					    								  
							      50 LOAD_FAST 2 ( rightOne )				    								  
							      52 CALL_FUNCTION 1					    								  
							      54 BINARY_TRUE_DIVIDE					    								  
							      56 STORE_FAST 4 ( rightOnesPattern )			    								  
							      								    								  
							      8 58 LOAD_GLOBAL 0 ( int )				    								  
							      60 LOAD_FAST 4 ( rightOnesPattern )			    								  
							      62 CALL_FUNCTION 1					    								  
							      64 LOAD_CONST 2 ( 2 )					    								  
							      66 BINARY_RSHIFT						    								  
							      68 STORE_FAST 4 ( rightOnesPattern )			    								  
							      								    								  
							      9 70 LOAD_FAST 3 ( nextHigherOneBit )			    								  
							      72 LOAD_FAST 4 ( rightOnesPattern )			    								  
							      74 BINARY_OR						    								  
							      76 STORE_FAST 1 ( next )					    								  
							      								    								  
							      10 >> 78 LOAD_FAST 1 ( next )				    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_X_Y_SATISFYING_AX_N				      FIND_X_Y_SATISFYING_AX_N					    FIND_X_Y_SATISFYING_AX_N					  FIND_X_Y_SATISFYING_AX_N
--							      --							    --								  --
def solution ( a , b , n ) :				      Disassembly of <code object solution at 0x7fbac0e8bc90, file  Disassembly of <code object solution at 0x7f816a6e4b70, file  script_not_found : None
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  
    while i * a <= n :					      2 STORE_FAST 3 ( i )					    2 STORE_FAST 1 ( b )					  
	if ( n - ( i * a ) ) % b == 0 :			      								    								  
	    print ( "x = " , i , ", y = " , int ( ( n - ( i * 3 4 SETUP_LOOP 78 ( to 84 )				    27 4 LOAD_FAST 0 ( a )					  
	    return 0					      >> 6 LOAD_FAST 3 ( i )					    6 LOAD_CONST 2 ( 1 )					  
	i = i + 1					      8 LOAD_FAST 0 ( a )					    8 COMPARE_OP 2 ( == )					  
    print ( "No solution" )				      10 BINARY_MULTIPLY					    10 POP_JUMP_IF_FALSE 20					  
							      12 LOAD_FAST 2 ( n )					    								  
							      14 COMPARE_OP 1 ( <= )					    28 12 LOAD_CONST 3 ( 'x = ' )				  
							      16 POP_JUMP_IF_FALSE 82					    14 STORE_FAST 1 ( b )					  
							      								    								  
							      4 18 LOAD_FAST 2 ( n )					    29 >> 16 LOAD_FAST 1 ( b )					  
							      20 LOAD_FAST 3 ( i )					    18 LOAD_FAST 0 ( a )					  
							      22 LOAD_FAST 0 ( a )					    20 BINARY_MULTIPLY						  
							      24 BINARY_MULTIPLY					    22 STORE_FAST 1 ( b )					  
							      26 BINARY_SUBTRACT					    								  
							      28 LOAD_FAST 1 ( b )					    30 24 LOAD_FAST 1 ( b )					  
							      30 BINARY_MODULO						    26 LOAD_FAST 0 ( a )					  
							      32 LOAD_CONST 1 ( 0 )					    28 BINARY_MULTIPLY						  
							      34 COMPARE_OP 2 ( == )					    30 STORE_FAST 1 ( b )					  
							      36 POP_JUMP_IF_FALSE 72					    								  
							      								    31 32 LOAD_FAST 1 ( b )					  
							      5 38 LOAD_GLOBAL 0 ( print )				    34 LOAD_FAST 0 ( a )					  
							      40 LOAD_CONST 2 ( 'x = ' )				    36 BINARY_MULTIPLY						  
							      42 LOAD_FAST 3 ( i )					    38 STORE_FAST 1 ( b )					  
							      44 LOAD_CONST 3 ( ', y = ' )				    								  
							      46 LOAD_GLOBAL 1 ( int )					    32 40 LOAD_FAST 1 ( b )					  
							      48 LOAD_FAST 2 ( n )					    42 LOAD_FAST 0 ( a )					  
							      50 LOAD_FAST 3 ( i )					    44 BINARY_MULTIPLY						  
							      52 LOAD_FAST 0 ( a )					    46 STORE_FAST 1 ( b )					  
							      54 BINARY_MULTIPLY					    								  
							      56 BINARY_SUBTRACT					    33 48 LOAD_FAST 1 ( b )					  
							      58 LOAD_FAST 1 ( b )					    50 LOAD_FAST 0 ( a )					  
							      60 BINARY_TRUE_DIVIDE					    52 BINARY_MULTIPLY						  
							      62 CALL_FUNCTION 1					    54 STORE_FAST 1 ( b )					  
							      64 CALL_FUNCTION 4					    								  
							      66 POP_TOP						    34 56 LOAD_FAST 1 ( b )					  
							      								    58 LOAD_FAST 0 ( a )					  
							      6 68 LOAD_CONST 1 ( 0 )					    60 BINARY_MULTIPLY						  
							      70 RETURN_VALUE						    62 STORE_FAST 2 ( b )					  
							      								    								  
							      7 >> 72 LOAD_FAST 3 ( i )					    35 64 LOAD_FAST 1 ( b )					  
							      74 LOAD_CONST 4 ( 1 )					    66 LOAD_FAST 2 ( b )					  
							      76 BINARY_ADD						    68 BINARY_MULTIPLY						  
							      78 STORE_FAST 3 ( i )					    70 LOAD_FAST 0 ( a )					  
							      80 JUMP_ABSOLUTE 6					    72 BINARY_MULTIPLY						  
							      >> 82 POP_BLOCK						    74 LOAD_FAST 0 ( a )					  
							      								    76 BINARY_MULTIPLY						  
							      8 >> 84 LOAD_GLOBAL 0 ( print )				    78 BINARY_ADD						  
							      86 LOAD_CONST 5 ( 'No solution' )				    80 STORE_FAST 1 ( b )					  
							      88 CALL_FUNCTION 1					    								  
							      90 POP_TOP						    36 82 LOAD_FAST 1 ( b )					  
							      92 LOAD_CONST 0 ( None )					    84 LOAD_FAST 2 ( b )					  
							      94 RETURN_VALUE NEW_LINE					    86 BINARY_MULTIPLY						  
							      								    88 LOAD_FAST 0 ( a )					  
							      								    90 BINARY_MULTIPLY						  
							      								    92 LOAD_FAST 0 ( a )					  
							      								    94 BINARY_MULTIPLY						  
							      								    96 BINARY_ADD						  
							      								    98 STORE_FAST 1 ( b )					  
							      								    								  
							      								    37 100 LOAD_FAST 1 ( b )					  
							      								    102 LOAD_FAST 2 ( b )					  
							      								    104 BINARY_MULTIPLY						  
							      								    106 LOAD_FAST 0 ( a )					  
							      								    108 BINARY_MULTIPLY						  
							      								    110 BINARY_ADD						  
							      								    112 LOAD_FAST 0 ( a )					  
							      								    114 BINARY_MULTIPLY						  
							      								    116 BINARY_ADD						  
							      								    118 LOAD_FAST 1 ( b )					  
							      								    120 BINARY_MULTIPLY						  
							      								    122 BINARY_ADD						  
							      								    124 LOAD_FAST 0 ( a )					  
							      								    126 BINARY_MULTIPLY						  
							      								    128 BINARY_ADD						  
							      								    130 LOAD_FAST 0 ( a )					  
							      								    132 BINARY_MULTIPLY						  
							      								    134 BINARY_ADD						  
							      								    136 BINARY_ADD						  
							      								    138 LOAD_FAST 0 ( a )					  
							      								    140 BINARY_MULTIPLY						  
							      								    142 BINARY_ADD						  
							      								    144 LOAD_FAST 0 ( a )					  
							      								    146 BINARY_MULTIPLY						  
							      								    148 BINARY_ADD						  
							      								    150 LOAD_FAST 0 ( a )					  
							      								    152 BINARY_MULTIPLY						  
							      								    154 BINARY_ADD						  
							      								    156 BINARY_ADD						  
							      								    158 LOAD_FAST 0 ( a )					  
							      								    160 BINARY_MULTIPLY						  
							      								    162 BINARY_ADD						  
							      								    164 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY
--							      --							    --								  --
def printRepeating ( arr , size ) :			      Disassembly of <code object printRepeating at 0x7fbac0e8bc90, Disassembly of <code object printRepeating at 0x7f816a6e4b70, script_not_found : None
    print ( "Repeating elements are " , end = '' )	      2 0 LOAD_GLOBAL 0 ( print )				    26 0 LOAD_GLOBAL 0 ( print )				  
    for i in range ( 0 , size ) :			      2 LOAD_CONST 1 ( 'Repeating elements are ' )		    2 LOAD_CONST 1 ( 'Repeating elements are ""' )		  
	for j in range ( i + 1 , size ) :		      4 LOAD_CONST 2 ( '' )					    4 CALL_FUNCTION 1						  
	    if arr [ i ] == arr [ j ] :			      6 LOAD_CONST 3 ( ( 'end' , ) )				    6 POP_TOP							  
		print ( arr [ i ] , end = ' ' )		      8 CALL_FUNCTION_KW 2					    								  
							      10 POP_TOP						    27 8 LOAD_GLOBAL 1 ( print )				  
							      								    10 LOAD_CONST 2 ( 'Repeating elements are "' )		  
							      3 12 SETUP_LOOP 74 ( to 88 )				    12 CALL_FUNCTION 1						  
							      14 LOAD_GLOBAL 1 ( range )				    14 POP_TOP							  
							      16 LOAD_CONST 4 ( 0 )					    								  
							      18 LOAD_FAST 1 ( size )					    28 16 LOAD_GLOBAL 2 ( print )				  
							      20 CALL_FUNCTION 2					    18 LOAD_CONST 3 ( '						  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 60 ( to 86 )				    								  
							      26 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 28 SETUP_LOOP 54 ( to 84 )				    								  
							      30 LOAD_GLOBAL 1 ( range )				    								  
							      32 LOAD_FAST 2 ( i )					    								  
							      34 LOAD_CONST 5 ( 1 )					    								  
							      36 BINARY_ADD						    								  
							      38 LOAD_FAST 1 ( size )					    								  
							      40 CALL_FUNCTION 2					    								  
							      42 GET_ITER						    								  
							      >> 44 FOR_ITER 36 ( to 82 )				    								  
							      46 STORE_FAST 3 ( j )					    								  
							      								    								  
							      5 48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 2 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 3 ( j )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 COMPARE_OP 2 ( == )					    								  
							      62 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      6 64 LOAD_GLOBAL 0 ( print )				    								  
							      66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 2 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_CONST 6 ( ' ' )					    								  
							      74 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      76 CALL_FUNCTION_KW 2					    								  
							      78 POP_TOP						    								  
							      80 JUMP_ABSOLUTE 44					    								  
							      >> 82 POP_BLOCK						    								  
							      >> 84 JUMP_ABSOLUTE 24					    								  
							      >> 86 POP_BLOCK						    								  
							      >> 88 LOAD_CONST 0 ( None )				    								  
							      90 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1
--							      --							    --								  --
def getSingle ( arr , n ) :				      Disassembly of <code object getSingle at 0x7fbac<<unk>> ddb0, Disassembly of <code object getSingle at 0x7f816a6e4b70, file script_not_found : None
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( n )					  
    for i in range ( 0 , INT_SIZE ) :			      2 STORE_FAST 2 ( result )					    2 LOAD_CONST 1 ( 0 )					  
	sm = 0						      								    4 BINARY_SUBSCR						  
	x = ( 1 << i )					      3 4 SETUP_LOOP 86 ( to 92 )				    6 STORE_FAST 2 ( sm )					  
	for j in range ( 0 , n ) :			      6 LOAD_GLOBAL 0 ( range )					    								  
	    if ( arr [ j ] & x ) :			      8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 0 ( arr )					  
		sm = sm + 1				      10 LOAD_GLOBAL 1 ( INT_SIZE )				    10 LOAD_CONST 1 ( 0 )					  
	if ( sm % 3 ) :					      12 CALL_FUNCTION 2					    12 BINARY_SUBSCR						  
	    result = result | x				      14 GET_ITER						    14 LOAD_FAST 2 ( sm )					  
    return result					      >> 16 FOR_ITER 72 ( to 90 )				    16 LOAD_CONST 1 ( 0 )					  
							      18 STORE_FAST 3 ( i )					    18 BINARY_SUBSCR						  
							      								    20 LOAD_FAST 1 ( n )					  
							      4 20 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 2 ( 1 )					  
							      22 STORE_FAST 4 ( sm )					    24 BINARY_SUBSCR						  
							      								    26 LOAD_CONST 3 ( 1 )					  
							      5 24 LOAD_CONST 2 ( 1 )					    28 BINARY_SUBSCR						  
							      26 LOAD_FAST 3 ( i )					    30 LOAD_CONST 4 ( 2 )					  
							      28 BINARY_LSHIFT						    32 BINARY_SUBSCR						  
							      30 STORE_FAST 5 ( x )					    34 LOAD_CONST 5 ( 3 )					  
							      								    36 BINARY_SUBSCR						  
							      6 32 SETUP_LOOP 38 ( to 72 )				    38 LOAD_CONST 6 ( 4 )					  
							      34 LOAD_GLOBAL 0 ( range )				    40 BINARY_SUBSCR						  
							      36 LOAD_CONST 1 ( 0 )					    42 LOAD_CONST 7 ( 3 )					  
							      38 LOAD_FAST 1 ( n )					    44 BINARY_SUBSCR						  
							      40 CALL_FUNCTION 2					    46 LOAD_CONST 8 ( 3 )					  
							      42 GET_ITER						    48 BINARY_SUBSCR						  
							      >> 44 FOR_ITER 24 ( to 70 )				    50 LOAD_CONST 9 ( 4 )					  
							      46 STORE_FAST 6 ( j )					    52 BINARY_SUBSCR						  
							      								    54 LOAD_CONST 10 ( 3 )					  
							      7 48 LOAD_FAST 0 ( arr )					    56 BINARY_SUBSCR						  
							      50 LOAD_FAST 6 ( j )					    58 LOAD_CONST 11 ( 4 )					  
							      52 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      54 LOAD_FAST 5 ( x )					    62 LOAD_CONST 12 ( ( '' , '))				  
							      56 BINARY_AND						    64BUILD_CONST_KEY_MAP2					  
							      58 POP_JUMP_IF_FALSE 44					    66LOAD_CONST13( ( '' , '))					  
							      								    68BUILD_CONST_KEY_MAP2					  
							      8 60 LOAD_FAST 4 ( sm )					    70RETURN_VALUE						  
							      62 LOAD_CONST 2 ( 1 )					    NEW_LINE							  
							      64 BINARY_ADD						    								  
							      66 STORE_FAST 4 ( sm )					    								  
							      68 JUMP_ABSOLUTE 44					    								  
							      >> 70 POP_BLOCK						    								  
							      								    								  
							      9 >> 72 LOAD_FAST 4 ( sm )				    								  
							      74 LOAD_CONST 3 ( 3 )					    								  
							      76 BINARY_MODULO						    								  
							      78 POP_JUMP_IF_FALSE 16					    								  
							      								    								  
							      10 80 LOAD_FAST 2 ( result )				    								  
							      82 LOAD_FAST 5 ( x )					    								  
							      84 BINARY_OR						    								  
							      86 STORE_FAST 2 ( result )				    								  
							      88 JUMP_ABSOLUTE 16					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      11 >> 92 LOAD_FAST 2 ( result )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		      MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		    MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		  MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING
--							      --							    --								  --
def maximumChars ( str ) :				      Disassembly of <code object maximumChars at 0x7fbac<<unk>> de Disassembly of <code object maximumChars at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    res = - 1						      2 LOAD_FAST 0 ( str )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 34, in <module>	  Fi
    for i in range ( 0 , n - 1 ) :			      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  le "<dis>", line 2, in maximumChars UnboundLocalEr
	for j in range ( i + 1 , n ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 2 ( n )					  ror: local variable 'n' referenced before assignme
	    if ( str [ i ] == str [ j ] ) :		      								    								  nt
		res = max ( res , abs ( j - i - 1 ) )	      3 8 LOAD_CONST 1 ( - 1 )					    27 8 SETUP_LOOP 44 ( to 54 )				  
    return res						      10 STORE_FAST 2 ( res )					    >> 10 LOAD_FAST 2 ( n )					  
							      								    12 LOAD_CONST 2 ( 0 )					  
							      4 12 SETUP_LOOP 84 ( to 98 )				    14 BINARY_SUBSCR						  
							      14 LOAD_GLOBAL 1 ( range )				    16 GET_ITER							  
							      16 LOAD_CONST 2 ( 0 )					    >> 18 FOR_ITER 22 ( to 52 )					  
							      18 LOAD_FAST 1 ( n )					    20 STORE_FAST 3 ( i )					  
							      20 LOAD_CONST 3 ( 1 )					    								  
							      22 BINARY_SUBTRACT					    28 22 LOAD_FAST 3 ( i )					  
							      24 CALL_FUNCTION 2					    24 LOAD_CONST 3 ( 1 )					  
							      26 GET_ITER						    26 BINARY_SUBSCR						  
							      >> 28 FOR_ITER 66 ( to 96 )				    28 STORE_FAST 4 ( i )					  
							      30 STORE_FAST 3 ( i )					    								  
							      								    29 30 LOAD_FAST 4 ( i )					  
							      5 32 SETUP_LOOP 60 ( to 94 )				    32 LOAD_CONST 4 ( 2 )					  
							      34 LOAD_GLOBAL 1 ( range )				    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 3 ( i )					    36 STORE_FAST 5 ( i )					  
							      38 LOAD_CONST 3 ( 1 )					    								  
							      40 BINARY_ADD						    30 38 LOAD_FAST 3 ( i )					  
							      42 LOAD_FAST 1 ( n )					    40 LOAD_CONST 5 ( 1 )					  
							      44 CALL_FUNCTION 2					    42 BINARY_SUBSCR						  
							      46 GET_ITER						    44 LOAD_FAST 4 ( i )					  
							      >> 48 FOR_ITER 42 ( to 92 )				    46 LOAD_CONST 6 ( 2 )					  
							      50 STORE_FAST 4 ( j )					    48 BINARY_SUBSCR						  
							      								    50 LOAD_CONST 7 ( 3 )					  
							      6 52 LOAD_FAST 0 ( str )					    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 3 ( i )					    54 LOAD_FAST 4 ( i )					  
							      56 BINARY_SUBSCR						    56 LOAD_CONST 8 ( 3 )					  
							      58 LOAD_FAST 0 ( str )					    58 BINARY_SUBSCR						  
							      60 LOAD_FAST 4 ( j )					    60 LOAD_CONST 9 ( 4 )					  
							      62 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      64 COMPARE_OP 2 ( == )					    64 LOAD_FAST 5 ( i )					  
							      66 POP_JUMP_IF_FALSE 48					    66 LOAD_CONST 10 ( 4 )					  
							      								    68 BINARY_SUBSCR						  
							      7 68 LOAD_GLOBAL 2 ( max )				    70 BINARY_SUBTRACT						  
							      70 LOAD_FAST 2 ( res )					    72 LOAD_CONST 11 ( 3 )					  
							      72 LOAD_GLOBAL 3 ( abs )					    74 BINARY_SUBSCR						  
							      74 LOAD_FAST 4 ( j )					    76 LOAD_CONST 12 ( ( 'size' , 'num' , 'num' ) )		  
							      76 LOAD_FAST 3 ( i )					    78 BUILD_CONST_KEY_MAP 3					  
							      78 BINARY_SUBTRACT					    80 STORE_SUBSCR						  
							      80 LOAD_CONST 3 ( 1 )					    82 JUMP_ABSOLUTE 18						  
							      82 BINARY_SUBTRACT					    >> 84 POP_BLOCK						  
							      84 CALL_FUNCTION 1					    >> 86 JUMP_ABSOLUTE 18					  
							      86 CALL_FUNCTION 2					    >> 88 POP_BLOCK						  
							      88 STORE_FAST 2 ( res )					    >> 90 LOAD_CONST 0 ( None )					  
							      90 JUMP_ABSOLUTE 48					    92 RETURN_VALUE						  
							      >> 92 POP_BLOCK						    NEW_LINE							  
							      >> 94 JUMP_ABSOLUTE 28					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      8 >> 98 LOAD_FAST 2 ( res )				    								  
							      100 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT
--							      --							    --								  --
def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :	      Disassembly of <code object findTriplet at 0x7fbac0e89d20, fi Disassembly of <code object findTriplet at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    for i in range ( 0 , n1 ) :				      2 0 SETUP_LOOP 90 ( to 92 )				    68 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 59, in <module>	for
	for j in range ( 0 , n2 ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 1 ( n1 )					  item in run_dis_script():   File "XLM/dis_script.p
	    for k in range ( 0 , n3 ) :			      4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  y", line 54, in run_dis_script     hyp_co = mco.to
		if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum )  6 LOAD_FAST 3 ( n1 )					    >> 6 FOR_ITER 14 ( to 22 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
		    return True				      8 CALL_FUNCTION 2						    8 STORE_FAST 2 ( c )					  assembler.py", line 81, in to_co     co_consts.app
    return False					      10 GET_ITER						    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      >> 12 FOR_ITER 76 ( to 90 )				    69 10 LOAD_FAST 0 ( a1 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 STORE_FAST 7 ( i )					    12 LOAD_FAST 2 ( c )					  co	 self.co_cellvars, TypeError: name tuples mu
							      								    14 LOAD_FAST 1 ( n1 )					  st contain only strings, not 'NoneType'
							      3 16 SETUP_LOOP 70 ( to 88 )				    16 LOAD_FAST 3 ( n2 )					  
							      18 LOAD_GLOBAL 0 ( range )				    18 BINARY_SUBTRACT						  
							      20 LOAD_CONST 1 ( 0 )					    20 BINARY_MULTIPLY						  
							      22 LOAD_FAST 4 ( n2 )					    22 LOAD_FAST 2 ( c )					  
							      24 CALL_FUNCTION 2					    24 LOAD_FAST 1 ( n1 )					  
							      26 GET_ITER						    26 BINARY_SUBTRACT						  
							      >> 28 FOR_ITER 56 ( to 86 )				    28 BINARY_MULTIPLY						  
							      30 STORE_FAST 8 ( j )					    30 BINARY_ADD						  
							      								    32 STORE_FAST 4 ( n2 )					  
							      4 32 SETUP_LOOP 50 ( to 84 )				    								  
							      34 LOAD_GLOBAL 0 ( range )				    70 34 LOAD_FAST 0 ( a1 )					  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_FAST 4 ( n2 )					  
							      38 LOAD_FAST 5 ( n3 )					    38 LOAD_FAST 2 ( c )					  
							      40 CALL_FUNCTION 2					    40 LOAD_FAST 3 ( n2 )					  
							      42 GET_ITER						    42 BINARY_MULTIPLY						  
							      >> 44 FOR_ITER 36 ( to 82 )				    44 BINARY_ADD						  
							      46 STORE_FAST 9 ( k )					    46 LOAD_FAST 4 ( n2 )					  
							      								    48 BINARY_MULTIPLY						  
							      5 48 LOAD_FAST 0 ( a1 )					    50 BINARY_ADD						  
							      50 LOAD_FAST 7 ( i )					    52 LOAD_FAST 4 ( n2 )					  
							      52 BINARY_SUBSCR						    54 BINARY_MULTIPLY						  
							      54 LOAD_FAST 1 ( a2 )					    56 BINARY_ADD						  
							      56 LOAD_FAST 8 ( j )					    58 BINARY_ADD						  
							      58 BINARY_SUBSCR						    60 STORE_FAST 5 ( n2 )					  
							      60 BINARY_ADD						    								  
							      62 LOAD_FAST 2 ( a3 )					    71 62 LOAD_FAST 0 ( a1 )					  
							      64 LOAD_FAST 9 ( k )					    64 LOAD_FAST 5 ( n2 )					  
							      66 BINARY_SUBSCR						    66 LOAD_FAST 2 ( c )					  
							      68 BINARY_ADD						    68 LOAD_FAST 3 ( n2 )					  
							      70 LOAD_FAST 6 ( sum )					    70 BINARY_MULTIPLY						  
							      72 COMPARE_OP 2 ( == )					    72 BINARY_ADD						  
							      74 POP_JUMP_IF_FALSE 44					    74 LOAD_FAST 4 ( n2 )					  
							      								    76 BINARY_MULTIPLY						  
							      6 76 LOAD_CONST 2 ( True )				    78 BINARY_ADD						  
							      78 RETURN_VALUE						    80 LOAD_FAST 5 ( n2 )					  
							      80 JUMP_ABSOLUTE 44					    82 BINARY_MULTIPLY						  
							      >> 82 POP_BLOCK						    84 BINARY_ADD						  
							      >> 84 JUMP_ABSOLUTE 28					    86 LOAD_FAST 4 ( n2 )					  
							      >> 86 POP_BLOCK						    88 BINARY_MULTIPLY						  
							      >> 88 JUMP_ABSOLUTE 12					    90 BINARY_ADD						  
							      >> 90 POP_BLOCK						    92 LOAD_FAST 5 ( n2 )					  
							      								    94 BINARY_ADD						  
							      7 >> 92 LOAD_CONST 3 ( False )				    96 BINARY_MULTIPLY						  
							      94 RETURN_VALUE NEW_LINE					    98 BINARY_ADD						  
							      								    100 STORE_FAST 6 ( n2 )					  
							      								    								  
							      								    72 102 LOAD_FAST 0 ( a1 )					  
							      								    104 LOAD_FAST 6 ( n2 )					  
							      								    106 BINARY_MULTIPLY						  
							      								    108 BINARY_ADD						  
							      								    110 LOAD_FAST 6 ( n2 )					  
							      								    112 BINARY_MULTIPLY						  
							      								    114 BINARY_ADD						  
							      								    116 LOAD_FAST 6 ( n2 )					  
							      								    118 BINARY_MULTIPLY						  
							      								    120 BINARY_ADD						  
							      								    122 LOAD_FAST 6 ( n2 )					  
							      								    124 BINARY_MULTIPLY						  
							      								    126 BINARY_ADD						  
							      								    128 LOAD_FAST 6 ( n2 )					  
							      								    130 BINARY_MULTIPLY						  
							      								    132 BINARY_ADD						  
							      								    134 LOAD_FAST 5 ( n2 )					  
							      								    136 BINARY_ADD						  
							      								    138 BINARY_MULTIPLY						  
							      								    140 BINARY_ADD						  
							      								    142 LOAD_FAST 6 ( n2 )					  
							      								    144 BINARY_MULTIPLY						  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_FAST 6 ( n2 )					  
							      								    150 BINARY_ADD						  
							      								    152 BINARY_ADD						  
							      								    154 BINARY_MULTIPLY						  
							      								    156 BINARY_ADD						  
							      								    158 LOAD_FAST 6 ( n2 )					  
							      								    160 BINARY_ADD						  
							      								    162 BINARY_ADD						  
							      								    164 LOAD_FAST 6 ( n2 )					  
							      								    166 BINARY_ADD						  
							      								    164 BINARY_ADD						  
							      								    								  
							      								    73 168 LOAD_FAST 6 ( n2 )					  
							      								    170 BINARY_ADD						  
							      								    172 BINARY_MULTIPLY						  
							      								    174 BINARY_ADD						  
							      								    								  
							      								    74 172 LOAD_FAST 6 ( n2 )					  
							      								    174 BINARY_ADD						  
							      								    176 BINARY_ADD						  
							      								    178 LOAD_FAST 6 ( n2 )					  
							      								    180 BINARY_ADD						  
							      								    182 BINARY_ADD						  
							      								    								  
							      								    75 180 LOAD_FAST 6 ( n2 )					  
							      								    182 LOAD_FAST 6 ( n2 )					  
							      								    184 BINARY_ADD						  
							      								    								  
							      								    76 186 LOAD_FAST 5 ( n2 )					  
							      								    188 LOAD_FAST 6						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	      K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	    K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	  K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS
--							      --							    --								  --
def ksmallest ( arr , n , k ) :				      Disassembly of <code object ksmallest at 0x7fbac<<unk>> d540, Disassembly of <code object ksmallest at 0x7f816a6e4b70, file script_not_found : None
    b = [ 0 ] * MAX ;					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( arr )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 0 )					  
	b [ arr [ i ] ] = 1 ;				      4 LOAD_GLOBAL 0 ( MAX )					    4 BINARY_SUBSCR						  
    for j in range ( 1 , MAX ) :			      6 BINARY_MULTIPLY						    6 LOAD_FAST 1 ( n )						  
	if ( b [ j ] != 1 ) :				      8 STORE_FAST 3 ( b )					    8 LOAD_CONST 2 ( 1 )					  
	    k -= 1 ;					      								    10 BINARY_SUBSCR						  
	if ( k is not 1 ) :				      3 10 SETUP_LOOP 28 ( to 40 )				    12 LOAD_CONST 3 ( 1 )					  
	    return j ;					      12 LOAD_GLOBAL 1 ( range )				    14 BINARY_SUBSCR						  
							      14 LOAD_FAST 1 ( n )					    16 LOAD_CONST 4 ( 2 )					  
							      16 CALL_FUNCTION 1					    18 BINARY_SUBSCR						  
							      18 GET_ITER						    20 LOAD_CONST 5 ( 1 )					  
							      >> 20 FOR_ITER 16 ( to 38 )				    22 BINARY_SUBSCR						  
							      22 STORE_FAST 4 ( i )					    24 LOAD_CONST 6 ( '						  
							      								    								  
							      4 24 LOAD_CONST 2 ( 1 )					    								  
							      26 LOAD_FAST 3 ( b )					    								  
							      28 LOAD_FAST 0 ( arr )					    								  
							      30 LOAD_FAST 4 ( i )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 STORE_SUBSCR						    								  
							      36 JUMP_ABSOLUTE 20					    								  
							      >> 38 POP_BLOCK						    								  
							      								    								  
							      5 >> 40 SETUP_LOOP 50 ( to 92 )				    								  
							      42 LOAD_GLOBAL 1 ( range )				    								  
							      44 LOAD_CONST 2 ( 1 )					    								  
							      46 LOAD_GLOBAL 0 ( MAX )					    								  
							      48 CALL_FUNCTION 2					    								  
							      50 GET_ITER						    								  
							      >> 52 FOR_ITER 36 ( to 90 )				    								  
							      54 STORE_FAST 5 ( j )					    								  
							      								    								  
							      6 56 LOAD_FAST 3 ( b )					    								  
							      58 LOAD_FAST 5 ( j )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_CONST 2 ( 1 )					    								  
							      64 COMPARE_OP 3 ( != )					    								  
							      66 POP_JUMP_IF_FALSE 76					    								  
							      								    								  
							      7 68 LOAD_FAST 2 ( k )					    								  
							      70 LOAD_CONST 2 ( 1 )					    								  
							      72 INPLACE_SUBTRACT					    								  
							      74 STORE_FAST 2 ( k )					    								  
							      								    								  
							      8 >> 76 LOAD_FAST 2 ( k )					    								  
							      78 LOAD_CONST 2 ( 1 )					    								  
							      80 COMPARE_OP 9 ( is not )				    								  
							      82 POP_JUMP_IF_FALSE 52					    								  
							      								    								  
							      9 84 LOAD_FAST 5 ( j )					    								  
							      86 RETURN_VALUE						    								  
							      88 JUMP_ABSOLUTE 52					    								  
							      >> 90 POP_BLOCK						    								  
							      >> 92 LOAD_CONST 0 ( None )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSEQUENCE_GCD_GREATER_1			      LARGEST_SUBSEQUENCE_GCD_GREATER_1				    LARGEST_SUBSEQUENCE_GCD_GREATER_1				  LARGEST_SUBSEQUENCE_GCD_GREATER_1
--							      --							    --								  --
def largestGCDSubsequence ( arr , n ) :			      Disassembly of <code object largestGCDSubsequence at 0x7fbac0 Disassembly of <code object largestGCDSubsequence at 0x7f816a error : Traceback (most recent call last):   File
    ans = 0						      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    maxele = max ( arr )				      2 STORE_FAST 2 ( ans )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 36, in <module>	  Fi
    for i in range ( 2 , maxele + 1 ) :			      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in largestGCDSubsequence TypeE
	count = 0					      3 4 LOAD_GLOBAL 0 ( max )					    6 STORE_FAST 2 ( n )					  rror: 'int' object is not subscriptable
	for j in range ( n ) :				      6 LOAD_FAST 0 ( arr )					    								  
	    if ( arr [ j ] % i == 0 ) :			      8 CALL_FUNCTION 1						    66 8 LOAD_FAST 0 ( arr )					  
		count += 1				      10 STORE_FAST 3 ( maxele )				    10 LOAD_METHOD 0 ( append )					  
	ans = max ( ans , count )			      								    12 LOAD_FAST 2 ( n )					  
    return ans						      4 12 SETUP_LOOP 78 ( to 92 )				    14 CALL_METHOD 1						  
							      14 LOAD_GLOBAL 1 ( range )				    16 POP_TOP							  
							      16 LOAD_CONST 2 ( 2 )					    								  
							      18 LOAD_FAST 3 ( maxele )					    67 18 LOAD_FAST 0 ( arr )					  
							      20 LOAD_CONST 3 ( 1 )					    20 LOAD_METHOD 1 ( append )					  
							      22 BINARY_ADD						    22 LOAD_FAST 2 ( n )					  
							      24 CALL_FUNCTION 2					    24 CALL_METHOD 1						  
							      26 GET_ITER						    26 POP_TOP							  
							      >> 28 FOR_ITER 60 ( to 90 )				    28 LOAD_CONST 0 ( None )					  
							      30 STORE_FAST 4 ( i )					    30 RETURN_VALUE						  
							      								    NEW_LINE							  
							      5 32 LOAD_CONST 1 ( 0 )					    								  
							      34 STORE_FAST 5 ( count )					    								  
							      								    								  
							      6 36 SETUP_LOOP 40 ( to 78 )				    								  
							      38 LOAD_GLOBAL 1 ( range )				    								  
							      40 LOAD_FAST 1 ( n )					    								  
							      42 CALL_FUNCTION 1					    								  
							      44 GET_ITER						    								  
							      >> 46 FOR_ITER 28 ( to 76 )				    								  
							      48 STORE_FAST 6 ( j )					    								  
							      								    								  
							      7 50 LOAD_FAST 0 ( arr )					    								  
							      52 LOAD_FAST 6 ( j )					    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_FAST 4 ( i )					    								  
							      58 BINARY_MODULO						    								  
							      60 LOAD_CONST 1 ( 0 )					    								  
							      62 COMPARE_OP 2 ( == )					    								  
							      64 POP_JUMP_IF_FALSE 46					    								  
							      								    								  
							      8 66 LOAD_FAST 5 ( count )				    								  
							      68 LOAD_CONST 3 ( 1 )					    								  
							      70 INPLACE_ADD						    								  
							      72 STORE_FAST 5 ( count )					    								  
							      74 JUMP_ABSOLUTE 46					    								  
							      >> 76 POP_BLOCK						    								  
							      								    								  
							      9 >> 78 LOAD_GLOBAL 0 ( max )				    								  
							      80 LOAD_FAST 2 ( ans )					    								  
							      82 LOAD_FAST 5 ( count )					    								  
							      84 CALL_FUNCTION 2					    								  
							      86 STORE_FAST 2 ( ans )					    								  
							      88 JUMP_ABSOLUTE 28					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      10 >> 92 LOAD_FAST 2 ( ans )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	      PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	    PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	  PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER
--							      --							    --								  --
def printStringAlternate ( string ) :			      Disassembly of <code object printStringAlternate at 0x7fbac<< Disassembly of <code object printStringAlternate at 0x7f816a6 script_not_found : None
    occ = { }						      2 0 BUILD_MAP 0						    28 0 LOAD_CONST 1 ( '{}' )					  
    for i in range ( 0 , len ( string ) ) :		      2 STORE_FAST 1 ( occ )					    2 LOAD_METHOD 0 ( format )					  
	temp = string [ i ].lower ( )			      								    4 LOAD_FAST 0 ( string )					  
	occ [ temp ] = occ.get ( temp , 0 ) + 1		      3 4 SETUP_LOOP 82 ( to 88 )				    6 CALL_METHOD 1						  
	if occ [ temp ] & 1 :				      6 LOAD_GLOBAL 0 ( range )					    8 STORE_FAST 1 ( occ )					  
	    print ( string [ i ] , end = "" )		      8 LOAD_CONST 1 ( 0 )					    								  
    print ( )						      10 LOAD_GLOBAL 1 ( len )					    29 10 LOAD_FAST 1 ( occ )					  
							      12 LOAD_FAST 0 ( string )					    12 LOAD_CONST 2 ( 0 )					  
							      14 CALL_FUNCTION 1					    14 COMPARE_OP 4 ( > )					  
							      16 CALL_FUNCTION 2					    16 POP_JUMP_IF_FALSE 26					  
							      18 GET_ITER						    18 LOAD_FAST 1 ( occ )					  
							      >> 20 FOR_ITER 64 ( to 86 )				    20 LOAD_CONST 3 ( 1 )					  
							      22 STORE_FAST 2 ( i )					    22 COMPARE_OP 4 ( > )					  
							      								    24 POP_JUMP_IF_FALSE 26					  
							      4 24 LOAD_FAST 0 ( string )				    								  
							      26 LOAD_FAST 2 ( i )					    30 26 LOAD_FAST 1 ( occ )					  
							      28 BINARY_SUBSCR						    28 LOAD_METHOD 0 ( format )					  
							      30 LOAD_METHOD 2 ( lower )				    30 LOAD_FAST 0 ( string )					  
							      32 CALL_METHOD 0						    32 CALL_METHOD 1						  
							      34 STORE_FAST 3 ( temp )					    34 STORE_FAST 1 ( occ )					  
							      								    								  
							      5 36 LOAD_FAST 1 ( occ )					    31 >> 36 LOAD_FAST 1 ( occ )				  
							      38 LOAD_METHOD 3 ( get )					    38 LOAD_METHOD 0 ( format )					  
							      40 LOAD_FAST 3 ( temp )					    40 LOAD_FAST 0 ( string )					  
							      42 LOAD_CONST 1 ( 0 )					    42 CALL_METHOD 1						  
							      44 CALL_METHOD 2						    44 STORE_FAST 1 ( occ )					  
							      46 LOAD_CONST 2 ( 1 )					    								  
							      48 BINARY_ADD						    32 46 LOAD_FAST 1 ( occ )					  
							      50 LOAD_FAST 1 ( occ )					    48 LOAD_METHOD 0 ( format )					  
							      52 LOAD_FAST 3 ( temp )					    50 LOAD_FAST 0 ( string )					  
							      54 STORE_SUBSCR						    52 CALL_METHOD 1						  
							      								    54 STORE_FAST 2 ( occ )					  
							      6 56 LOAD_FAST 1 ( occ )					    								  
							      58 LOAD_FAST 3 ( temp )					    33 56 LOAD_FAST 1 ( occ )					  
							      60 BINARY_SUBSCR						    58 LOAD_METHOD 0 ( format )					  
							      62 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 0 ( string )					  
							      64 BINARY_AND						    62 CALL_METHOD 1						  
							      66 POP_JUMP_IF_FALSE 20					    64 STORE_FAST 1 ( occ )					  
							      								    								  
							      7 68 LOAD_GLOBAL 4 ( print )				    34 66 LOAD_FAST 1 ( occ )					  
							      70 LOAD_FAST 0 ( string )					    68 LOAD_METHOD 0 ( format )					  
							      72 LOAD_FAST 2 ( i )					    70 LOAD_FAST 0 ( string )					  
							      74 BINARY_SUBSCR						    72 CALL_METHOD 1						  
							      76 LOAD_CONST 3 ( '' )					    74 STORE_FAST 1 ( occ )					  
							      78 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      80 CALL_FUNCTION_KW 2					    35 76 LOAD_FAST 1 ( occ )					  
							      82 POP_TOP						    78 LOAD_METHOD 0 ( format )					  
							      84 JUMP_ABSOLUTE 20					    80 LOAD_FAST 0 ( string )					  
							      >> 86 POP_BLOCK						    82 CALL_METHOD 1						  
							      								    84 STORE_FAST 2 ( occ )					  
							      8 >> 88 LOAD_GLOBAL 4 ( print )				    								  
							      90 CALL_FUNCTION 0					    36 86 LOAD_FAST 1 ( occ )					  
							      92 POP_TOP						    88 LOAD_METHOD 0 ( format )					  
							      94 LOAD_CONST 0 ( None )					    90 LOAD_FAST 2 ( occ )					  
							      96 RETURN_VALUE NEW_LINE					    92 CALL_METHOD 1						  
							      								    94 STORE_FAST 3 ( occ )					  
							      								    								  
							      								    37 96 LOAD_FAST 3 ( occ )					  
							      								    98 LOAD_METHOD 0 ( format )					  
							      								    100 LOAD_FAST 0 ( string )					  
							      								    102 CALL_METHOD 1						  
							      								    104 STORE_FAST 4 ( occ )					  
							      								    								  
							      								    38 106 LOAD_FAST 3 ( occ )					  
							      								    108 LOAD_METHOD 0 ( format )				  
							      								    110 LOAD_FAST 0 ( string )					  
							      								    112 CALL_METHOD 1						  
							      								    114 STORE_FAST 5 ( occ )					  
							      								    								  
							      								    39 116 LOAD_FAST 5 ( occ )					  
							      								    118 LOAD_FAST 2 ( occ )					  
							      								    120 LOAD_FAST 3 ( occ )					  
							      								    122 LOAD_FAST 4 ( occ )					  
							      								    124 LOAD_FAST 5 ( occ )					  
							      								    126 LOAD_FAST 3 ( occ )					  
							      								    128 LOAD_FAST 5 ( occ )					  
							      								    130 LOAD_FAST 4 ( occ )					  
							      								    132 LOAD_FAST 5 ( occ )					  
							      								    134 LOAD_FAST 6 ( oc					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY			  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY
--							      --							    --								  --
def binarySearch ( arr , low , high , key ) :		      Disassembly of <code object binarySearch at 0x7fbac<<unk>> de Disassembly of <code object binarySearch at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    if ( high < low ) :					      2 0 LOAD_FAST 2 ( high )					    155 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
	return - 1					      2 LOAD_FAST 1 ( low )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    mid = ( low + high ) / 2				      4 COMPARE_OP 0 ( < )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
    if ( key == arr [ int ( mid ) ] ) :			      6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 1 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	return mid					      								    8 COMPARE_OP 2 ( == )					  assembler.py", line 81, in to_co     co_consts.app
    if ( key > arr [ int ( mid ) ] ) :			      3 8 LOAD_CONST 1 ( - 1 )					    10 POP_JUMP_IF_FALSE 16					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	return binarySearch ( arr , ( mid + 1 ) , high , key  10 RETURN_VALUE						    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    return ( binarySearch ( arr , low , ( mid - 1 ) , key ) ) 								    156 12 LOAD_FAST 0 ( arr )					  co	 self.co_cellvars, ValueError: code: varname
							      4 >> 12 LOAD_FAST 1 ( low )				    14 LOAD_CONST 3 ( 1 )					  s is too small
							      14 LOAD_FAST 2 ( high )					    16 BINARY_SUBSCR						  
							      16 BINARY_ADD						    18 LOAD_CONST 4 ( 2 )					  
							      18 LOAD_CONST 2 ( 2 )					    20 COMPARE_OP 2 ( == )					  
							      20 BINARY_TRUE_DIVIDE					    22 POP_JUMP_IF_FALSE 28					  
							      22 STORE_FAST 4 ( mid )					    								  
							      								    157 24 LOAD_GLOBAL 0 ( binarySearch )			  
							      5 24 LOAD_FAST 3 ( key )					    26 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 0 ( arr )					    28 LOAD_CONST 5 ( 1 )					  
							      28 LOAD_GLOBAL 0 ( int )					    30 BINARY_SUBSCR						  
							      30 LOAD_FAST 4 ( mid )					    32 LOAD_CONST 6 ( 2 )					  
							      32 CALL_FUNCTION 1					    34 COMPARE_OP 2 ( == )					  
							      34 BINARY_SUBSCR						    36 POP_JUMP_IF_FALSE 48					  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 44					    158 38 LOAD_FAST 0 ( arr )					  
							      								    40 LOAD_CONST 7 ( 2 )					  
							      6 40 LOAD_FAST 4 ( mid )					    42 BINARY_SUBSCR						  
							      42 RETURN_VALUE						    44 LOAD_CONST 8 ( 3 )					  
							      								    46 COMPARE_OP 2 ( == )					  
							      7 >> 44 LOAD_FAST 3 ( key )				    48 POP_JUMP_IF_FALSE 48					  
							      46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_GLOBAL 0 ( int )					    159 50 LOAD_FAST 0 ( arr )					  
							      50 LOAD_FAST 4 ( mid )					    52 LOAD_CONST 9 ( 1 )					  
							      52 CALL_FUNCTION 1					    54 BINARY_SUBSCR						  
							      54 BINARY_SUBSCR						    56 LOAD_CONST 10 ( 2 )					  
							      56 COMPARE_OP 4 ( > )					    58 COMPARE_OP 2 ( == )					  
							      58 POP_JUMP_IF_FALSE 78					    60 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      8 60 LOAD_GLOBAL 1 ( binarySearch )			    160 62 LOAD_FAST 0 ( arr )					  
							      62 LOAD_FAST 0 ( arr )					    64 LOAD_CONST 10 ( 2 )					  
							      64 LOAD_FAST 4 ( mid )					    66 BINARY_SUBSCR						  
							      66 LOAD_CONST 3 ( 1 )					    68 LOAD_CONST 11 ( 4 )					  
							      68 BINARY_ADD						    70 COMPARE_OP 2 ( == )					  
							      70 LOAD_FAST 2 ( high )					    72 POP_JUMP_IF_FALSE 76					  
							      72 LOAD_FAST 3 ( key )					    								  
							      74 CALL_FUNCTION 4					    161 74 LOAD_FAST 0 ( arr )					  
							      76 RETURN_VALUE						    76 LOAD_CONST 12 ( 2 )					  
							      								    78 BINARY_SUBSCR						  
							      9 >> 78 LOAD_GLOBAL 1 ( binarySearch )			    80 LOAD_CONST 13 ( 4 )					  
							      80 LOAD_FAST 0 ( arr )					    82 COMPARE_OP 2 ( == )					  
							      82 LOAD_FAST 1 ( low )					    84 POP_JUMP_IF_FALSE 90					  
							      84 LOAD_FAST 4 ( mid )					    								  
							      86 LOAD_CONST 3 ( 1 )					    162 86 LOAD_FAST 0 ( arr )					  
							      88 BINARY_SUBTRACT					    88 LOAD_CONST 6 ( 2 )					  
							      90 LOAD_FAST 3 ( key )					    90 BINARY_SUBSCR						  
							      92 CALL_FUNCTION 4					    92 LOAD_CONST 12 ( 2 )					  
							      94 RETURN_VALUE NEW_LINE					    94 COMPARE_OP 2 ( == )					  
							      								    96 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    163 98 LOAD_FAST 0 ( arr )					  
							      								    100 LOAD_CONST 6 ( 2 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 12 ( 2 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 13 ( 4 )					  
							      								    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    164 114 LOAD_FAST 0 ( arr )					  
							      								    116 LOAD_CONST 6 ( 2 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 14 ( 2 )					  
							      								    122 COMPARE_OP 2 ( == )					  
							      								    124 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    165 126 LOAD_FAST 0 ( arr )					  
							      								    128 LOAD_CONST 15 ( 2 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 16 ( 2 )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    166 138 LOAD_FAST 0 ( arr )					  
							      								    140 LOAD_CONST 17 ( 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 18 ( 2 )					  
							      								    146 COMPARE_OP 2 ( == )					  
							      								    148 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    167 150 LOAD_FAST 0 ( arr )					  
							      								    152 LOAD_CONST 18 ( 2 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 19 ( 2 )					  
							      								    158 COMPARE_OP 2 ( == )					  
							      								    >> 160 RETURN_VALUE NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		      SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		    SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		  SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER
--							      --							    --								  --
def divSum ( num ) :					      Disassembly of <code object divSum at 0x7fbac0e89d20, file "< Disassembly of <code object divSum at 0x7f816a6e4b70, file "< error : /bin/bash: line 1: 25995 Segmentation faul
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    i = 2						      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( i )					  ataset/bin/python XLM/dis_script.py --script_path
    while i <= ( math.sqrt ( num ) ) :			      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	if ( num % i == 0 ) :				      3 4 LOAD_CONST 2 ( 2 )					    27 4 LOAD_FAST 1 ( i )					  eval_scripts/python_sa-dis_sa.test/SUM_OF_ALL_PROP
	    if ( i == ( num / i ) ) :			      6 STORE_FAST 2 ( i )					    6 LOAD_CONST 2 ( 1 )					  ER_DIVISORS_OF_A_NATURAL_NUMBER.dis
		result = result + i ;			      								    8 COMPARE_OP 2 ( == )					  
	    else :					      4 8 SETUP_LOOP 76 ( to 86 )				    10 POP_JUMP_IF_FALSE 20					  
		result = result + ( i + num / i ) ;	      >> 10 LOAD_FAST 2 ( i )					    								  
	i = i + 1					      12 LOAD_GLOBAL 0 ( math )					    28 12 LOAD_CONST 1 ( 0 )					  
    return ( result + 1 ) ;				      14 LOAD_METHOD 1 ( sqrt )					    14 STORE_FAST 1 ( i )					  
							      16 LOAD_FAST 0 ( num )					    								  
							      18 CALL_METHOD 1						    29 >> 16 LOAD_FAST 1 ( i )					  
							      20 COMPARE_OP 1 ( <= )					    18 LOAD_CONST 3 ( 1 )					  
							      22 POP_JUMP_IF_FALSE 84					    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      5 24 LOAD_FAST 0 ( num )					    								  
							      26 LOAD_FAST 2 ( i )					    30 24 LOAD_CONST 1 ( 0 )					  
							      28 BINARY_MODULO						    26 STORE_FAST 1 ( i )					  
							      30 LOAD_CONST 1 ( 0 )					    								  
							      32 COMPARE_OP 2 ( == )					    31 28 LOAD_FAST 1 ( i )					  
							      34 POP_JUMP_IF_FALSE 74					    30 LOAD_CONST 4 ( - 1 )					  
							      								    32 COMPARE_OP 2 ( == )					  
							      6 36 LOAD_FAST 2 ( i )					    34 POP_JUMP_IF_FALSE 44					  
							      38 LOAD_FAST 0 ( num )					    								  
							      40 LOAD_FAST 2 ( i )					    32 36 LOAD_CONST 1 ( 0 )					  
							      42 BINARY_TRUE_DIVIDE					    38 STORE_FAST 1 ( i )					  
							      44 COMPARE_OP 2 ( == )					    								  
							      46 POP_JUMP_IF_FALSE 58					    33 >> 40 LOAD_FAST 1 ( i )					  
							      								    42 LOAD_CONST 5 ( - 1 )					  
							      7 48 LOAD_FAST 1 ( result )				    44 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 2 ( i )					    46 POP_JUMP_IF_FALSE 52					  
							      52 BINARY_ADD						    								  
							      54 STORE_FAST 1 ( result )				    34 48 LOAD_CONST 1 ( 0 )					  
							      56 JUMP_FORWARD 16 ( to 74 )				    50 STORE_FAST 1 ( i )					  
							      								    								  
							      9 >> 58 LOAD_FAST 1 ( result )				    35 52 LOAD_FAST 1 ( i )					  
							      60 LOAD_FAST 2 ( i )					    54 LOAD_CONST 6 ( - 1 )					  
							      62 LOAD_FAST 0 ( num )					    56 COMPARE_OP 2 ( == )					  
							      64 LOAD_FAST 2 ( i )					    58 POP_JUMP_IF_FALSE 60					  
							      66 BINARY_TRUE_DIVIDE					    								  
							      68 BINARY_ADD						    36 60 LOAD_CONST 1 ( 0 )					  
							      70 BINARY_ADD						    62 STORE_FAST 1 ( i )					  
							      72 STORE_FAST 1 ( result )				    								  
							      								    37 64 LOAD_FAST 1 ( i )					  
							      10 >> 74 LOAD_FAST 2 ( i )				    66 LOAD_CONST 7 ( - 1 )					  
							      76 LOAD_CONST 3 ( 1 )					    68 COMPARE_OP 2 ( == )					  
							      78 BINARY_ADD						    70 POP_JUMP_IF_FALSE 76					  
							      80 STORE_FAST 2 ( i )					    72 LOAD_CONST 1 ( 0 )					  
							      82 JUMP_ABSOLUTE 10					    74 STORE_FAST 1 ( i )					  
							      >> 84 POP_BLOCK						    								  
							      								    38 >> 76 LOAD_FAST 1 ( i )					  
							      11 >> 86 LOAD_FAST 1 ( result )				    78 LOAD_CONST 8 ( - 1 )					  
							      88 LOAD_CONST 3 ( 1 )					    80 COMPARE_OP 2 ( == )					  
							      90 BINARY_ADD						    82 POP_JUMP_IF_FALSE 78					  
							      92 RETURN_VALUE NEW_LINE					    84 LOAD_FAST 1 ( i )					  
							      								    86 LOAD_CONST 9 ( - 1 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      								    39 92 LOAD_FAST 1 ( i )					  
							      								    94 LOAD_CONST 10 ( - 1 )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      								    40 100 LOAD_FAST 1 ( i )					  
							      								    102 LOAD_CONST 11 ( - 1 )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      								    41 108 LOAD_FAST 1 ( i )					  
							      								    110 LOAD_CONST 12 ( - 1 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    42 116 LOAD_FAST 1 ( i )					  
							      								    118 LOAD_CONST 12 ( - 1 )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 124 LOAD_FAST 1 ( i )					  
							      								    126 LOAD_CONST 13 ( - 1 )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    44 132 LOAD_FAST 1 ( i )					  
							      								    134 LOAD_CONST 6 ( - 1 )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 130					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_COMMON_SUPERSEQUENCE				      SHORTEST_COMMON_SUPERSEQUENCE				    SHORTEST_COMMON_SUPERSEQUENCE				  SHORTEST_COMMON_SUPERSEQUENCE
--							      --							    --								  --
def superSeq ( X , Y , m , n ) :			      Disassembly of <code object superSeq at 0x7fbac<<unk>> ddb0,  Disassembly of <code object superSeq at 0x7f816a673a50, file  script_not_found : None
    if ( not m ) : return n				      2 0 LOAD_FAST 2 ( m )					    26 0 LOAD_FAST 0 ( X )					  
    if ( not n ) : return m				      2 POP_JUMP_IF_TRUE 8					    2 LOAD_CONST 1 ( 0 )					  
    if ( X [ m - 1 ] == Y [ n - 1 ] ) :			      4 LOAD_FAST 3 ( n )					    4 BINARY_SUBSCR						  
	return 1 + superSeq ( X , Y , m - 1 , n - 1 )	      6 RETURN_VALUE						    6 LOAD_CONST 2 ( 1 )					  
    return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSe 								    8 BINARY_SUBSCR						  
							      3 >> 8 LOAD_FAST 3 ( n )					    10 LOAD_CONST 3 ( 2 )					  
							      10 POP_JUMP_IF_TRUE 16					    12 BINARY_SUBSCR						  
							      12 LOAD_FAST 2 ( m )					    14 LOAD_CONST 4 ( 1 )					  
							      14 RETURN_VALUE						    16 BINARY_SUBSCR						  
							      								    18 LOAD_CONST 5 ( 1 )					  
							      4 >> 16 LOAD_FAST 0 ( X )					    20 BINARY_SUBSCR						  
							      18 LOAD_FAST 2 ( m )					    22 LOAD_CONST 6 ( '						  
							      20 LOAD_CONST 1 ( 1 )					    								  
							      22 BINARY_SUBTRACT					    								  
							      24 BINARY_SUBSCR						    								  
							      26 LOAD_FAST 1 ( Y )					    								  
							      28 LOAD_FAST 3 ( n )					    								  
							      30 LOAD_CONST 1 ( 1 )					    								  
							      32 BINARY_SUBTRACT					    								  
							      34 BINARY_SUBSCR						    								  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 66					    								  
							      								    								  
							      5 40 LOAD_CONST 1 ( 1 )					    								  
							      42 LOAD_GLOBAL 0 ( superSeq )				    								  
							      44 LOAD_FAST 0 ( X )					    								  
							      46 LOAD_FAST 1 ( Y )					    								  
							      48 LOAD_FAST 2 ( m )					    								  
							      50 LOAD_CONST 1 ( 1 )					    								  
							      52 BINARY_SUBTRACT					    								  
							      54 LOAD_FAST 3 ( n )					    								  
							      56 LOAD_CONST 1 ( 1 )					    								  
							      58 BINARY_SUBTRACT					    								  
							      60 CALL_FUNCTION 4					    								  
							      62 BINARY_ADD						    								  
							      64 RETURN_VALUE						    								  
							      								    								  
							      6 >> 66 LOAD_CONST 1 ( 1 )				    								  
							      68 LOAD_GLOBAL 1 ( min )					    								  
							      70 LOAD_GLOBAL 0 ( superSeq )				    								  
							      72 LOAD_FAST 0 ( X )					    								  
							      74 LOAD_FAST 1 ( Y )					    								  
							      76 LOAD_FAST 2 ( m )					    								  
							      78 LOAD_CONST 1 ( 1 )					    								  
							      80 BINARY_SUBTRACT					    								  
							      82 LOAD_FAST 3 ( n )					    								  
							      84 CALL_FUNCTION 4					    								  
							      86 LOAD_GLOBAL 0 ( superSeq )				    								  
							      88 LOAD_FAST 0 ( X )					    								  
							      90 LOAD_FAST 1 ( Y )					    								  
							      92 LOAD_FAST 2 ( m )					    								  
							      94 LOAD_FAST 3 ( n )					    								  
							      96 LOAD_CONST 1 ( 1 )					    								  
							      98 BINARY_SUBTRACT					    								  
							      100 CALL_FUNCTION 4					    								  
							      102 CALL_FUNCTION 2					    								  
							      104 BINARY_ADD						    								  
							      106 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS
--							      --							    --								  --
def subset ( ar , n ) :					      Disassembly of <code object subset at 0x7fbac<<unk>> de40, fi Disassembly of <code object subset at 0x7f816a673a50, file "< error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    101 0 LOAD_FAST 0 ( ar )					  "XLM/dis_script.py", line 60, in <module>	exec
    ar.sort ( )						      2 STORE_FAST 2 ( res )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 38, in <module>	  Fi
    for i in range ( 0 , n ) :				      								    4 CALL_METHOD 0						  le "<dis>", line 2, in subset TypeError: 'NoneType
	count = 1					      3 4 LOAD_FAST 0 ( ar )					    6 STORE_FAST 1 ( n )					  ' object is not subscriptable
	for i in range ( n - 1 ) :			      6 LOAD_METHOD 0 ( sort )					    								  
	    if ar [ i ] == ar [ i + 1 ] :		      8 CALL_METHOD 0						    102 8 LOAD_FAST 1 ( n )					  
		count += 1				      10 POP_TOP						    10 LOAD_CONST 1 ( 0 )					  
	    else :					      								    12 BINARY_SUBSCR						  
		break					      4 12 SETUP_LOOP 86 ( to 100 )				    14 STORE_FAST 2 ( a )					  
	res = max ( res , count )			      14 LOAD_GLOBAL 1 ( range )				    								  
    return res						      16 LOAD_CONST 1 ( 0 )					    103 16 LOAD_FAST 2 ( a )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 CALL_FUNCTION 2					    20 LOAD_CONST 2 ( 1 )					  
							      22 GET_ITER						    22 BINARY_SUBSCR						  
							      >> 24 FOR_ITER 72 ( to 98 )				    24 LOAD_FAST 1 ( n )					  
							      26 STORE_FAST 3 ( i )					    26 LOAD_CONST 3 ( 2 )					  
							      								    28 BINARY_SUBSCR						  
							      5 28 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 4 ( 3 )					  
							      30 STORE_FAST 4 ( count )					    32 BINARY_SUBSCR						  
							      								    34 LOAD_FAST 1 ( n )					  
							      6 32 SETUP_LOOP 52 ( to 86 )				    36 LOAD_CONST 5 ( 1 )					  
							      34 LOAD_GLOBAL 1 ( range )				    38 BINARY_SUBSCR						  
							      36 LOAD_FAST 1 ( n )					    40 BINARY_SUBTRACT						  
							      38 LOAD_CONST 2 ( 1 )					    42 LOAD_FAST 1 ( n )					  
							      40 BINARY_SUBTRACT					    44 LOAD_CONST 6 ( 2 )					  
							      42 CALL_FUNCTION 1					    46 BINARY_SUBSCR						  
							      44 GET_ITER						    48 BINARY_ADD						  
							      >> 46 FOR_ITER 36 ( to 84 )				    50 LOAD_FAST 1 ( n )					  
							      48 STORE_FAST 3 ( i )					    52 LOAD_CONST 7 ( 3 )					  
							      								    54 BINARY_SUBSCR						  
							      7 50 LOAD_FAST 0 ( ar )					    56 LOAD_FAST 1 ( n )					  
							      52 LOAD_FAST 3 ( i )					    58 LOAD_CONST 8 ( 2 )					  
							      54 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( ar )					    62 BINARY_ADD						  
							      58 LOAD_FAST 3 ( i )					    64 LOAD_FAST 1 ( n )					  
							      60 LOAD_CONST 2 ( 1 )					    66 LOAD_CONST 9 ( 2 )					  
							      62 BINARY_ADD						    68 BINARY_SUBSCR						  
							      64 BINARY_SUBSCR						    70 BINARY_ADD						  
							      66 COMPARE_OP 2 ( == )					    72 LOAD_FAST 1 ( n )					  
							      68 POP_JUMP_IF_FALSE 80					    74 LOAD_CONST 10 ( 3 )					  
							      								    76 BINARY_SUBSCR						  
							      8 70 LOAD_FAST 4 ( count )				    78 BINARY_ADD						  
							      72 LOAD_CONST 2 ( 1 )					    80 LOAD_FAST 1 ( n )					  
							      74 INPLACE_ADD						    82 LOAD_CONST 11 ( 2 )					  
							      76 STORE_FAST 4 ( count )					    84 BINARY_SUBSCR						  
							      78 JUMP_ABSOLUTE 46					    86 BINARY_ADD						  
							      								    88 LOAD_FAST 1 ( n )					  
							      10 >> 80 BREAK_LOOP					    90 LOAD_CONST 12 ( 3 )					  
							      82 JUMP_ABSOLUTE 46					    92 STORE_SUBSCR						  
							      >> 84 POP_BLOCK						    94 LOAD_CONST 0 ( None )					  
							      								    96 RETURN_VALUE						  
							      11 >> 86 LOAD_GLOBAL 2 ( max )				    NEW_LINE							  
							      88 LOAD_FAST 2 ( res )					    								  
							      90 LOAD_FAST 4 ( count )					    								  
							      92 CALL_FUNCTION 2					    								  
							      94 STORE_FAST 2 ( res )					    								  
							      96 JUMP_ABSOLUTE 24					    								  
							      >> 98 POP_BLOCK						    								  
							      								    								  
							      12 >> 100 LOAD_FAST 2 ( res )				    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_1				      FRIENDS_PAIRING_PROBLEM_1					    FRIENDS_PAIRING_PROBLEM_1					  FRIENDS_PAIRING_PROBLEM_1
--							      --							    --								  --
def countFriendsPairings ( n ) :			      Disassembly of <code object countFriendsPairings at 0x7fbac<< Disassembly of <code object countFriendsPairings at 0x7f816a6 script_not_found : None
    dp = [ - 1 ] * 100					      2 0 LOAD_CONST 1 ( - 1 )					    20 0 LOAD_FAST 0 ( n )					  
    if ( dp [ n ] != - 1 ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 100 )					  
	return dp [ n ]					      4 LOAD_CONST 2 ( 100 )					    4 COMPARE_OP 2 ( == )					  
    if ( n > 2 ) :					      6 BINARY_MULTIPLY						    6 POP_JUMP_IF_FALSE 12					  
	dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 8 STORE_FAST 1 ( dp )					    								  
	return dp [ n ]					      								    21 8 LOAD_FAST 0 ( n )					  
    else :						      3 10 LOAD_FAST 1 ( dp )					    10 LOAD_CONST 2 ( countGreater sPairings )			  
	dp [ n ] = n					      12 LOAD_FAST 0 ( n )					    12 COMPARE_OP 2 ( == )					  
	return dp [ n ]					      14 BINARY_SUBSCR						    14 POP_JUMP_IF_FALSE 28					  
							      16 LOAD_CONST 1 ( - 1 )					    								  
							      18 COMPARE_OP 3 ( != )					    22 >> 16 LOAD_FAST 0 ( n )					  
							      20 POP_JUMP_IF_FALSE 30					    18 LOAD_CONST 3 ( 1 )					  
							      								    20 COMPARE_OP 2 ( == )					  
							      4 22 LOAD_FAST 1 ( dp )					    22 POP_JUMP_IF_FALSE 28					  
							      24 LOAD_FAST 0 ( n )					    								  
							      26 BINARY_SUBSCR						    23 24 LOAD_FAST 0 ( n )					  
							      28 RETURN_VALUE						    26 LOAD_CONST 4 ( 2 )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      5 >> 30 LOAD_FAST 0 ( n )					    30 POP_JUMP_IF_FALSE 34					  
							      32 LOAD_CONST 3 ( 2 )					    								  
							      34 COMPARE_OP 4 ( > )					    24 32 LOAD_FAST 0 ( n )					  
							      36 POP_JUMP_IF_FALSE 82					    34 LOAD_CONST 5 ( 1 )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      6 38 LOAD_GLOBAL 0 ( countFriendsPairings )		    38 POP_JUMP_IF_FALSE 42					  
							      40 LOAD_FAST 0 ( n )					    								  
							      42 LOAD_CONST 4 ( 1 )					    25 40 LOAD_FAST 0 ( n )					  
							      44 BINARY_SUBTRACT					    42 LOAD_CONST 6 ( 2 )					  
							      46 CALL_FUNCTION 1					    44 COMPARE_OP 2 ( == )					  
							      48 LOAD_FAST 0 ( n )					    46 POP_JUMP_IF_FALSE 48					  
							      50 LOAD_CONST 4 ( 1 )					    								  
							      52 BINARY_SUBTRACT					    26 48 LOAD_FAST 0 ( n )					  
							      54 LOAD_GLOBAL 0 ( countFriendsPairings )			    50 LOAD_CONST 7 ( 2 )					  
							      56 LOAD_FAST 0 ( n )					    52 COMPARE_OP 2 ( == )					  
							      58 LOAD_CONST 3 ( 2 )					    54 POP_JUMP_IF_FALSE 48					  
							      60 BINARY_SUBTRACT					    								  
							      62 CALL_FUNCTION 1					    27 56 LOAD_FAST 0 ( n )					  
							      64 BINARY_MULTIPLY					    58 LOAD_CONST 8 ( 2 )					  
							      66 BINARY_ADD						    60 COMPARE_OP 2 ( == )					  
							      68 LOAD_FAST 1 ( dp )					    62 POP_JUMP_IF_FALSE 48					  
							      70 LOAD_FAST 0 ( n )					    								  
							      72 STORE_SUBSCR						    28 64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 9 ( 1 )					  
							      7 74 LOAD_FAST 1 ( dp )					    68 COMPARE_OP 2 ( == )					  
							      76 LOAD_FAST 0 ( n )					    70 POP_JUMP_IF_FALSE 48					  
							      78 BINARY_SUBSCR						    								  
							      80 RETURN_VALUE						    29 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 10 ( 2 )					  
							      9 >> 82 LOAD_FAST 0 ( n )					    76 COMPARE_OP 2 ( == )					  
							      84 LOAD_FAST 1 ( dp )					    78 POP_JUMP_IF_FALSE 48					  
							      86 LOAD_FAST 0 ( n )					    								  
							      88 STORE_SUBSCR						    30 80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 11 ( 1 )					  
							      10 90 LOAD_FAST 1 ( dp )					    84 INPLACE_ADD						  
							      92 LOAD_FAST 0 ( n )					    86 STORE_FAST 0 ( n )					  
							      94 BINARY_SUBSCR						    								  
							      96 RETURN_VALUE						    31 >> 88 LOAD_FAST 0 ( n )					  
							      98 LOAD_CONST 0 ( None )					    90 LOAD_CONST 12 ( 2 )					  
							      100 RETURN_VALUE NEW_LINE					    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    32 96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 12 ( 2 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    33 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 13 ( 1 )					  
							      								    108 INPLACE_ADD						  
							      								    110 STORE_FAST 0 ( n )					  
							      								    								  
							      								    34 >> 112 LOAD_FAST 0 ( n )					  
							      								    114 LOAD_CONST 14 ( 2 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    35 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 15 ( 2 )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 0 ( n )					  
							      								    128 JUMP_FORWARD 2 ( to 108 )				  
							      								    								  
							      								    36 >> 130 LOAD_FAST 0 ( n )					  
							      								    132 LOAD_CONST 15 ( 2 )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    37 138 LOAD_FAST 0 ( n )					  
							      								    140 LOAD_CONST 16 ( 2 )					  
							      								    142 COMPARE_OP 2 ( == )					  
							      								    144								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1
--							      --							    --								  --
def getRemainder ( num , divisor ) :			      Disassembly of <code object getRemainder at 0x7fbac0e8bc90, f Disassembly of <code object getRemainder at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    if ( divisor == 0 ) :				      2 0 LOAD_FAST 1 ( divisor )				    20 0 LOAD_FAST 0 ( num )					  "XLM/dis_script.py", line 59, in <module>	for
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( divisor < 0 ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  y", line 54, in run_dis_script     hyp_co = mco.to
	divisor = - divisor				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    if ( num < 0 ) :					      								    								  assembler.py", line 81, in to_co     co_consts.app
	num = - num					      3 8 LOAD_CONST 2 ( False )				    21 8 LOAD_CONST 2 ( - 1 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    i = 1						      10 RETURN_VALUE						    10 RETURN_VALUE						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    product = 0						      								    								  co	 self.co_cellvars, ValueError: code: varname
    while ( product <= num ) :				      4 >> 12 LOAD_FAST 1 ( divisor )				    22 >> 12 LOAD_FAST 0 ( num )				  s is too small
	product = divisor * i				      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
	i += 1						      16 COMPARE_OP 0 ( < )					    16 COMPARE_OP 4 ( > )					  
    return num - ( product - divisor )			      18 POP_JUMP_IF_FALSE 26					    18 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 20 LOAD_FAST 1 ( divisor )				    23 20 LOAD_CONST 3 ( 1 )					  
							      22 UNARY_NEGATIVE						    22 RETURN_VALUE						  
							      24 STORE_FAST 1 ( divisor )				    								  
							      								    24 >> 24 LOAD_CONST 4 ( - 1 )				  
							      6 >> 26 LOAD_FAST 0 ( num )				    26 RETURN_VALUE						  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_CONST 0 ( None )					  
							      30 COMPARE_OP 0 ( < )					    30 RETURN_VALUE						  
							      32 POP_JUMP_IF_FALSE 40					    NEW_LINE							  
							      								    								  
							      7 34 LOAD_FAST 0 ( num )					    								  
							      36 UNARY_NEGATIVE						    								  
							      38 STORE_FAST 0 ( num )					    								  
							      								    								  
							      8 >> 40 LOAD_CONST 3 ( 1 )				    								  
							      42 STORE_FAST 2 ( i )					    								  
							      								    								  
							      9 44 LOAD_CONST 1 ( 0 )					    								  
							      46 STORE_FAST 3 ( product )				    								  
							      								    								  
							      10 48 SETUP_LOOP 28 ( to 78 )				    								  
							      >> 50 LOAD_FAST 3 ( product )				    								  
							      52 LOAD_FAST 0 ( num )					    								  
							      54 COMPARE_OP 1 ( <= )					    								  
							      56 POP_JUMP_IF_FALSE 76					    								  
							      								    								  
							      11 58 LOAD_FAST 1 ( divisor )				    								  
							      60 LOAD_FAST 2 ( i )					    								  
							      62 BINARY_MULTIPLY					    								  
							      64 STORE_FAST 3 ( product )				    								  
							      								    								  
							      12 66 LOAD_FAST 2 ( i )					    								  
							      68 LOAD_CONST 3 ( 1 )					    								  
							      70 INPLACE_ADD						    								  
							      72 STORE_FAST 2 ( i )					    								  
							      74 JUMP_ABSOLUTE 50					    								  
							      >> 76 POP_BLOCK						    								  
							      								    								  
							      13 >> 78 LOAD_FAST 0 ( num )				    								  
							      80 LOAD_FAST 3 ( product )				    								  
							      82 LOAD_FAST 1 ( divisor )				    								  
							      84 BINARY_SUBTRACT					    								  
							      86 BINARY_SUBTRACT					    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS
--							      --							    --								  --
def countGroups ( position , previous_sum , length , num ) :  Disassembly of <code object countGroups at 0x7fbac<<unk>> d54 Disassembly of <code object countGroups at 0x7f816a673a50, fi script_not_found : None
    if ( position == length ) :				      2 0 LOAD_FAST 0 ( position )				    101 0 LOAD_FAST 0 ( self )					  
	return 1					      2 LOAD_FAST 2 ( length )					    2 LOAD_ATTR 0 ( res )					  
    res = 0						      4 COMPARE_OP 2 ( == )					    4 LOAD_METHOD 1 ( sum )					  
    sum = 0						      6 POP_JUMP_IF_FALSE 12					    6 LOAD_FAST 1 ( previous_sum )				  
    for i in range ( position , length ) :		      								    8 CALL_METHOD 1						  
	sum = sum + int ( num [ i ] )			      3 8 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( 1 )					  
	if ( sum >= previous_sum ) :			      10 RETURN_VALUE						    12 COMPARE_OP 2 ( == )					  
	    res = res + countGroups ( i + 1 , sum , length ,  								    14 POP_JUMP_IF_FALSE 20					  
    return res						      4 >> 12 LOAD_CONST 2 ( 0 )				    								  
							      14 STORE_FAST 4 ( res )					    102 16 LOAD_FAST 0 ( self )					  
							      								    18 LOAD_METHOD 2 ( countGroups )				  
							      5 16 LOAD_CONST 2 ( 0 )					    20 LOAD_FAST 1 ( previous_sum )				  
							      18 STORE_FAST 5 ( sum )					    22 CALL_METHOD 1						  
							      								    24 POP_TOP							  
							      6 20 SETUP_LOOP 64 ( to 86 )				    								  
							      22 LOAD_GLOBAL 0 ( range )				    103 26 LOAD_FAST 0 ( self )					  
							      24 LOAD_FAST 0 ( position )				    28 LOAD_METHOD 3 ( countGroups )				  
							      26 LOAD_FAST 2 ( length )					    30 LOAD_FAST 1 ( previous_sum )				  
							      28 CALL_FUNCTION 2					    32 CALL_METHOD 1						  
							      30 GET_ITER						    34 POP_TOP							  
							      >> 32 FOR_ITER 50 ( to 84 )				    								  
							      34 STORE_FAST 6 ( i )					    104 36 LOAD_FAST 0 ( self )					  
							      								    38 LOAD_METHOD 4 ( countGroups )				  
							      7 36 LOAD_FAST 5 ( sum )					    40 LOAD_FAST 1 ( previous_sum )				  
							      38 LOAD_GLOBAL 1 ( int )					    42 CALL_METHOD 1						  
							      40 LOAD_FAST 3 ( num )					    44 POP_TOP							  
							      42 LOAD_FAST 6 ( i )					    								  
							      44 BINARY_SUBSCR						    105 46 LOAD_FAST 0 ( self )					  
							      46 CALL_FUNCTION 1					    48 LOAD_METHOD 5 ( countGroups )				  
							      48 BINARY_ADD						    50 LOAD_FAST 1 ( previous_sum )				  
							      50 STORE_FAST 5 ( sum )					    52 CALL_METHOD 1						  
							      								    54 POP_TOP							  
							      8 52 LOAD_FAST 5 ( sum )					    56 JUMP_FORWARD 22 ( to 60 )				  
							      54 LOAD_FAST 1 ( previous_sum )				    								  
							      56 COMPARE_OP 5 ( >= )					    106 >> 58 LOAD_FAST 0 ( self )				  
							      58 POP_JUMP_IF_FALSE 32					    60 LOAD_METHOD 6 ( countGroups )				  
							      								    62 LOAD_FAST 1 ( previous_sum )				  
							      9 60 LOAD_FAST 4 ( res )					    64 CALL_METHOD 1						  
							      62 LOAD_GLOBAL 2 ( countGroups )				    66 POP_TOP							  
							      64 LOAD_FAST 6 ( i )					    68 LOAD_CONST 0 ( None )					  
							      66 LOAD_CONST 1 ( 1 )					    70 RETURN_VALUE						  
							      68 BINARY_ADD						    NEW_LINE							  
							      70 LOAD_FAST 5 ( sum )					    								  
							      72 LOAD_FAST 2 ( length )					    								  
							      74 LOAD_FAST 3 ( num )					    								  
							      76 CALL_FUNCTION 4					    								  
							      78 BINARY_ADD						    								  
							      80 STORE_FAST 4 ( res )					    								  
							      82 JUMP_ABSOLUTE 32					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 LOAD_FAST 4 ( res )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	      NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	    NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	  NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT
--							      --							    --								  --
def sumEqualProduct ( a , n ) :				      Disassembly of <code object sumEqualProduct at 0x7fbac<<unk>> Disassembly of <code object sumEqualProduct at 0x7f816a673a50 error : Traceback (most recent call last):   File
    zero = 0						      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    two = 0						      2 STORE_FAST 2 ( zero )					    2 LOAD_CONST 2 ( ( 'n' , ) )				  (item)   File "main.py", line 37, in <module>	  Fi
    for i in range ( n ) :				      								    4 IMPORT_NAME 0 ( tf )					  le "<dis>", line 2, in sumEqualProduct ModuleNotFo
	if a [ i ] == 0 :				      3 4 LOAD_CONST 1 ( 0 )					    6 IMPORT_FROM 1 ( n )					  undError: No module named 'tf'
	    zero += 1					      6 STORE_FAST 3 ( two )					    8 STORE_FAST 1 ( n )					  
	if a [ i ] == 2 :				      								    10 POP_TOP							  
	    two += 1					      4 8 SETUP_LOOP 56 ( to 66 )				    								  
    cnt = ( zero * ( zero - 1 ) ) // 2 + \		      10 LOAD_GLOBAL 0 ( range )				    66 12 LOAD_FAST 1 ( n )					  
	( two * ( two - 1 ) ) // 2			      12 LOAD_FAST 1 ( n )					    14 LOAD_CONST 3 ( 1 )					  
    return cnt						      14 CALL_FUNCTION 1					    16 LOAD_CONST 2 ( ( 'n' , ) )				  
							      16 GET_ITER						    18 IMPORT_NAME 2 ( tf )					  
							      >> 18 FOR_ITER 44 ( to 64 )				    20 IMPORT_FROM 3 ( tf )					  
							      20 STORE_FAST 4 ( i )					    22 STORE_FAST 2 ( tf )					  
							      								    24 POP_TOP							  
							      5 22 LOAD_FAST 0 ( a )					    								  
							      24 LOAD_FAST 4 ( i )					    67 26 LOAD_FAST 1 ( n )					  
							      26 BINARY_SUBSCR						    28 LOAD_FAST 2 ( tf )					  
							      28 LOAD_CONST 1 ( 0 )					    30 LOAD_ATTR 4 ( shape )					  
							      30 COMPARE_OP 2 ( == )					    32 LOAD_CONST 4 ( ( 'n' , ) )				  
							      32 POP_JUMP_IF_FALSE 42					    34 CALL_FUNCTION_KW 1					  
							      								    36 STORE_FAST 3 ( tf )					  
							      6 34 LOAD_FAST 2 ( zero )					    								  
							      36 LOAD_CONST 2 ( 1 )					    68 38 LOAD_FAST 3 ( tf )					  
							      38 INPLACE_ADD						    40 LOAD_METHOD 5 ( reshape )				  
							      40 STORE_FAST 2 ( zero )					    42 LOAD_FAST 1 ( n )					  
							      								    44 LOAD_FAST 2 ( tf )					  
							      7 >> 42 LOAD_FAST 0 ( a )					    46 LOAD_ATTR 6 ( shape )					  
							      44 LOAD_FAST 4 ( i )					    48 LOAD_CONST 5 ( ( 'n' , ) )				  
							      46 BINARY_SUBSCR						    50 CALL_FUNCTION_KW 1					  
							      48 LOAD_CONST 3 ( 2 )					    52 CALL_METHOD 1						  
							      50 COMPARE_OP 2 ( == )					    54 STORE_FAST 4 ( shape )					  
							      52 POP_JUMP_IF_FALSE 18					    								  
							      								    69 56 LOAD_FAST 4 ( shape )					  
							      8 54 LOAD_FAST 3 ( two )					    58 LOAD_FAST 3 ( tf )					  
							      56 LOAD_CONST 2 ( 1 )					    60 LOAD_ATTR 7 ( shape )					  
							      58 INPLACE_ADD						    62 LOAD_CONST 6 ( ( 'n' , ) )				  
							      60 STORE_FAST 3 ( two )					    64 CALL_FUNCTION_KW 1					  
							      62 JUMP_ABSOLUTE 18					    66 STORE_FAST 5 ( shape )					  
							      >> 64 POP_BLOCK						    								  
							      								    70 68 LOAD_FAST 5 ( shape )					  
							      9 >> 66 LOAD_FAST 2 ( zero )				    70 LOAD_FAST 4 ( shape )					  
							      68 LOAD_FAST 2 ( zero )					    72 LOAD_CONST 7 ( 1 )					  
							      70 LOAD_CONST 2 ( 1 )					    74 BINARY_SUBSCR						  
							      72 BINARY_SUBTRACT					    76 LOAD_FAST 5 ( shape )					  
							      74 BINARY_MULTIPLY					    78 LOAD_CONST 8 ( ( 'n' , ) )				  
							      76 LOAD_CONST 3 ( 2 )					    80 CALL_FUNCTION_KW 1					  
							      78 BINARY_FLOOR_DIVIDE					    82 STORE_FAST 6 ( shape )					  
							      								    								  
							      10 80 LOAD_FAST 3 ( two )					    71 84 LOAD_FAST 6 ( shape )					  
							      82 LOAD_FAST 3 ( two )					    86 LOAD_FAST 5 ( shape )					  
							      84 LOAD_CONST 2 ( 1 )					    88 LOAD_CONST 9 ( ( 'shape' , ) )				  
							      86 BINARY_SUBTRACT					    90 CALL_FUNCTION_KW 1					  
							      88 BINARY_MULTIPLY					    92 STORE_FAST 7 ( shape )					  
							      90 LOAD_CONST 3 ( 2 )					    								  
							      92 BINARY_FLOOR_DIVIDE					    72 94 LOAD_FAST 7 ( shape )					  
							      94 BINARY_ADD						    96 LOAD_FAST 6 ( shape )					  
							      96 STORE_FAST 5 ( cnt )					    98 LOAD_CONST 10 ( ( 'n' , ) )				  
							      								    100 CALL_FUNCTION_KW 1					  
							      11 98 LOAD_FAST 5 ( cnt )					    102 STORE_FAST 8 ( shape )					  
							      100 RETURN_VALUE NEW_LINE					    								  
							      								    73 104 LOAD_FAST 7 ( shape )				  
							      								    106 LOAD_FAST 8 ( shape )					  
							      								    108 LOAD_CONST 11 ( ( 'n' , ) )				  
							      								    110 CALL_FUNCTION_KW 1					  
							      								    112 STORE_FAST 9 ( shape )					  
							      								    								  
							      								    74 114 LOAD_FAST 8 ( shape )				  
							      								    116 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	      RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	    RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	  RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING
--							      --							    --								  --
def getMaxOccuringChar ( str ) :			      Disassembly of <code object getMaxOccuringChar at 0x7fbac<<un Disassembly of <code object getMaxOccuringChar at 0x7f816a673 script_not_found : None
    count = [ 0 ] * ASCII_SIZE				      2 0 LOAD_CONST 1 ( 0 )					    18 0 LOAD_FAST 0 ( self )					  
    max = - 1						      2 BUILD_LIST 1						    2 LOAD_ATTR 0 ( char )					  
    c = ''						      4 LOAD_GLOBAL 0 ( ASCII_SIZE )				    4 LOAD_CONST 1 ( '' )					  
    for i in str :					      6 BINARY_MULTIPLY						    6 COMPARE_OP 2 ( == )					  
	count [ ord ( i ) ] += 1 ;			      8 STORE_FAST 1 ( count )					    8 POP_JUMP_IF_FALSE 20					  
    for i in str :					      								    								  
	if max < count [ ord ( i ) ] :			      3 10 LOAD_CONST 2 ( - 1 )					    19 10 LOAD_FAST 0 ( self )					  
	    max = count [ ord ( i ) ]			      12 STORE_FAST 2 ( max )					    12 LOAD_ATTR 0 ( char )					  
	    c = i					      								    14 LOAD_CONST 2 ( '' )					  
    return c						      4 14 LOAD_CONST 3 ( '' )					    16 COMPARE_OP 2 ( == )					  
							      16 STORE_FAST 3 ( c )					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 18 SETUP_LOOP 32 ( to 52 )				    20 20 LOAD_FAST 0 ( self )					  
							      20 LOAD_FAST 0 ( str )					    22 LOAD_ATTR 1 ( char )					  
							      22 GET_ITER						    24 LOAD_CONST 3 ( '' )					  
							      >> 24 FOR_ITER 24 ( to 50 )				    26 COMPARE_OP 2 ( == )					  
							      26 STORE_FAST 4 ( i )					    28 POP_JUMP_IF_FALSE 34					  
							      								    								  
							      6 28 LOAD_FAST 1 ( count )				    21 30 LOAD_FAST 0 ( self )					  
							      30 LOAD_GLOBAL 1 ( ord )					    32 LOAD_ATTR 2 ( char )					  
							      32 LOAD_FAST 4 ( i )					    34 LOAD_CONST 4 ( '' )					  
							      34 CALL_FUNCTION 1					    36 COMPARE_OP 2 ( == )					  
							      36 DUP_TOP_TWO						    38 POP_JUMP_IF_FALSE 44					  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_CONST 4 ( 1 )					    22 40 LOAD_FAST 0 ( self )					  
							      42 INPLACE_ADD						    42 LOAD_ATTR 3 ( char )					  
							      44 ROT_THREE						    44 LOAD_CONST 5 ( '' )					  
							      46 STORE_SUBSCR						    46 COMPARE_OP 2 ( == )					  
							      48 JUMP_ABSOLUTE 24					    48 POP_JUMP_IF_FALSE 44					  
							      >> 50 POP_BLOCK						    								  
							      								    23 50 LOAD_FAST 0 ( self )					  
							      7 >> 52 SETUP_LOOP 44 ( to 98 )				    52 LOAD_ATTR 4 ( char )					  
							      54 LOAD_FAST 0 ( str )					    54 LOAD_CONST 6 ( '' )					  
							      56 GET_ITER						    56 COMPARE_OP 2 ( == )					  
							      >> 58 FOR_ITER 36 ( to 96 )				    58 POP_JUMP_IF_FALSE 44					  
							      60 STORE_FAST 4 ( i )					    								  
							      								    24 60 LOAD_FAST 0 ( self )					  
							      8 62 LOAD_FAST 2 ( max )					    62 LOAD_ATTR 5 ( char )					  
							      64 LOAD_FAST 1 ( count )					    64 LOAD_CONST 7 ( '' )					  
							      66 LOAD_GLOBAL 1 ( ord )					    66 COMPARE_OP 2 ( == )					  
							      68 LOAD_FAST 4 ( i )					    68 POP_JUMP_IF_FALSE 44					  
							      70 CALL_FUNCTION 1					    								  
							      72 BINARY_SUBSCR						    25 70 LOAD_FAST 0 ( self )					  
							      74 COMPARE_OP 0 ( < )					    72 LOAD_ATTR 6 ( char )					  
							      76 POP_JUMP_IF_FALSE 58					    74 LOAD_CONST 8 ( '' )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      9 78 LOAD_FAST 1 ( count )				    78 POP_JUMP_IF_FALSE 92					  
							      80 LOAD_GLOBAL 1 ( ord )					    								  
							      82 LOAD_FAST 4 ( i )					    26 80 LOAD_FAST 0 ( self )					  
							      84 CALL_FUNCTION 1					    82 LOAD_ATTR 7 ( char )					  
							      86 BINARY_SUBSCR						    84 LOAD_CONST 9 ( '' )					  
							      88 STORE_FAST 2 ( max )					    86 COMPARE_OP 2 ( == )					  
							      								    88 POP_JUMP_IF_FALSE 94					  
							      10 90 LOAD_FAST 4 ( i )					    								  
							      92 STORE_FAST 3 ( c )					    27 >> 90 LOAD_FAST 0 ( self )				  
							      94 JUMP_ABSOLUTE 58					    92 LOAD_ATTR 8 ( char )					  
							      >> 96 POP_BLOCK						    94 LOAD_CONST 10 ( '' )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      11 >> 98 LOAD_FAST 3 ( c )				    98 POP_JUMP_IF_FALSE 106					  
							      100 RETURN_VALUE NEW_LINE					    								  
							      								    28 100 LOAD_FAST 0 ( self )					  
							      								    102 LOAD_ATTR 9 ( char )					  
							      								    104 LOAD_CONST 11 ( '' )					  
							      								    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      								    29 110 LOAD_FAST 0 ( self )					  
							      								    112 LOAD_ATTR 10 ( char )					  
							      								    114 LOAD_CONST 12 ( '' )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 122					  
							      								    								  
							      								    30 120 LOAD_FAST 0 ( self )					  
							      								    122 LOAD_ATTR 11 ( char )					  
							      								    124 LOAD_CONST 13 ( '' )					  
							      								    126 COMPARE_OP 2 ( == )					  
							      								    128 POP_JUMP_IF_FALSE 126					  
							      								    130 LOAD_FAST 0 ( self )					  
							      								    132 LOAD_ATTR 12 ( char )					  
							      								    134 LOAD_CONST 14 ( '' )					  
							      								    136 COMPARE_OP 2 ( == )					  
							      								    138 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    31 140 LOAD_FAST 0 (					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		      NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		    NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		  NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER
--							      --							    --								  --
def minimumBox ( arr , n ) :				      Disassembly of <code object minimumBox at 0x7fbac<<unk>> d540 Disassembly of <code object minimumBox at 0x7f816a673a50, fil error : Traceback (most recent call last):   File
    q = collections.deque ( [ ] )			      2 0 LOAD_GLOBAL 0 ( collections )				    65 0 LOAD_GLOBAL 0 ( collections )				  "XLM/dis_script.py", line 60, in <module>	exec
    arr.sort ( )					      2 LOAD_METHOD 1 ( deque )					    2 LOAD_METHOD 1 ( deque )					  (item)   File "main.py", line 38, in <module>	  Fi
    q.append ( arr [ 0 ] )				      4 BUILD_LIST 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in minimumBox IndexError: dequ
    for i in range ( 1 , n ) :				      6 CALL_METHOD 1						    6 STORE_FAST 1 ( n )					  e index out of range
	now = q [ 0 ]					      8 STORE_FAST 2 ( q )					    								  
	if ( arr [ i ] >= 2 * now ) :			      								    66 8 LOAD_FAST 1 ( n )					  
	    q.popleft ( )				      3 10 LOAD_FAST 0 ( arr )					    10 LOAD_CONST 1 ( 0 )					  
	q.append ( arr [ i ] )				      12 LOAD_METHOD 2 ( sort )					    12 BINARY_SUBSCR						  
    return len ( q )					      14 CALL_METHOD 0						    14 STORE_FAST 2 ( a )					  
							      16 POP_TOP						    								  
							      								    67 16 LOAD_FAST 2 ( a )					  
							      4 18 LOAD_FAST 2 ( q )					    18 LOAD_METHOD 2 ( popleft )				  
							      20 LOAD_METHOD 3 ( append )				    20 CALL_METHOD 0						  
							      22 LOAD_FAST 0 ( arr )					    22 STORE_FAST 3 ( i )					  
							      24 LOAD_CONST 1 ( 0 )					    								  
							      26 BINARY_SUBSCR						    68 24 LOAD_FAST 3 ( i )					  
							      28 CALL_METHOD 1						    26 LOAD_CONST 2 ( 1 )					  
							      30 POP_TOP						    28 BINARY_SUBTRACT						  
							      								    30 LOAD_CONST 3 ( 2 )					  
							      5 32 SETUP_LOOP 64 ( to 98 )				    32 BINARY_SUBTRACT						  
							      34 LOAD_GLOBAL 4 ( range )				    34 STORE_FAST 4 ( a )					  
							      36 LOAD_CONST 2 ( 1 )					    								  
							      38 LOAD_FAST 1 ( n )					    69 36 LOAD_FAST 0 ( self )					  
							      40 CALL_FUNCTION 2					    38 LOAD_METHOD 3 ( append )					  
							      42 GET_ITER						    40 LOAD_FAST 4 ( a )					  
							      >> 44 FOR_ITER 50 ( to 96 )				    42 LOAD_FAST 1 ( n )					  
							      46 STORE_FAST 3 ( i )					    44 CALL_METHOD 2						  
							      								    46 POP_TOP							  
							      6 48 LOAD_FAST 2 ( q )					    48 LOAD_CONST 0 ( None )					  
							      50 LOAD_CONST 1 ( 0 )					    50 RETURN_VALUE						  
							      52 BINARY_SUBSCR						    NEW_LINE							  
							      54 STORE_FAST 4 ( now )					    								  
							      								    								  
							      7 56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 3 ( i )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_CONST 3 ( 2 )					    								  
							      64 LOAD_FAST 4 ( now )					    								  
							      66 BINARY_MULTIPLY					    								  
							      68 COMPARE_OP 5 ( >= )					    								  
							      70 POP_JUMP_IF_FALSE 80					    								  
							      								    								  
							      8 72 LOAD_FAST 2 ( q )					    								  
							      74 LOAD_METHOD 5 ( popleft )				    								  
							      76 CALL_METHOD 0						    								  
							      78 POP_TOP						    								  
							      								    								  
							      9 >> 80 LOAD_FAST 2 ( q )					    								  
							      82 LOAD_METHOD 3 ( append )				    								  
							      84 LOAD_FAST 0 ( arr )					    								  
							      86 LOAD_FAST 3 ( i )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 CALL_METHOD 1						    								  
							      92 POP_TOP						    								  
							      94 JUMP_ABSOLUTE 44					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      10 >> 98 LOAD_GLOBAL 6 ( len )				    								  
							      100 LOAD_FAST 2 ( q )					    								  
							      102 CALL_FUNCTION 1					    								  
							      104 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	      FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	    FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	  FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE
--							      --							    --								  --
def printDuplicates ( arr ) :				      Disassembly of <code object printDuplicates at 0x7fbac<<unk>> Disassembly of <code object printDuplicates at 0x7f816a6e4b70 script_not_found : None
    dict = { }						      2 0 BUILD_MAP 0						    26 0 LOAD_GLOBAL 0 ( dict )					  
    for ele in arr :					      2 STORE_FAST 1 ( dict )					    2 CALL_FUNCTION 0						  
	try :						      								    4 STORE_FAST 1 ( ele )					  
	    dict [ ele ] += 1				      3 4 SETUP_LOOP 54 ( to 60 )				    								  
	except :					      6 LOAD_FAST 0 ( arr )					    27 6 LOAD_FAST 1 ( ele )					  
	    dict [ ele ] = 1				      8 GET_ITER						    8 LOAD_METHOD 1 ( append )					  
    for item in dict :					      >> 10 FOR_ITER 46 ( to 58 )				    10 LOAD_FAST 0 ( arr )					  
	if ( dict [ item ] > 1 ) :			      12 STORE_FAST 2 ( ele )					    12 CALL_METHOD 1						  
	    print ( item , end = " " )			      								    14 POP_TOP							  
    print ( "\n" )					      4 14 SETUP_EXCEPT 20 ( to 36 )				    								  
							      								    28 16 LOAD_FAST 1 ( ele )					  
							      5 16 LOAD_FAST 1 ( dict )					    18 LOAD_METHOD 2 ( append )					  
							      18 LOAD_FAST 2 ( ele )					    20 LOAD_FAST 0 ( arr )					  
							      20 DUP_TOP_TWO						    22 CALL_METHOD 1						  
							      22 BINARY_SUBSCR						    24 POP_TOP							  
							      24 LOAD_CONST 1 ( 1 )					    								  
							      26 INPLACE_ADD						    29 26 LOAD_FAST 1 ( ele )					  
							      28 ROT_THREE						    28 LOAD_METHOD 3 ( append )					  
							      30 STORE_SUBSCR						    30 LOAD_FAST 0 ( arr )					  
							      32 POP_BLOCK						    32 CALL_METHOD 1						  
							      34 JUMP_ABSOLUTE 10					    34 POP_TOP							  
							      								    								  
							      6 >> 36 POP_TOP						    30 36 LOAD_FAST 1 ( ele )					  
							      38 POP_TOP						    38 LOAD_METHOD 4 ( append )					  
							      40 POP_TOP						    40 LOAD_FAST 0 ( arr )					  
							      								    42 LOAD_METHOD 5 ( append )					  
							      7 42 LOAD_CONST 1 ( 1 )					    44 LOAD_FAST 0 ( arr )					  
							      44 LOAD_FAST 1 ( dict )					    46 CALL_METHOD 1						  
							      46 LOAD_FAST 2 ( ele )					    48 POP_TOP							  
							      48 STORE_SUBSCR						    50 LOAD_CONST 0 ( None )					  
							      50 POP_EXCEPT						    52 RETURN_VALUE						  
							      52 JUMP_ABSOLUTE 10					    NEW_LINE							  
							      54 END_FINALLY						    								  
							      56 JUMP_ABSOLUTE 10					    								  
							      >> 58 POP_BLOCK						    								  
							      								    								  
							      8 >> 60 SETUP_LOOP 36 ( to 98 )				    								  
							      62 LOAD_FAST 1 ( dict )					    								  
							      64 GET_ITER						    								  
							      >> 66 FOR_ITER 28 ( to 96 )				    								  
							      68 STORE_FAST 3 ( item )					    								  
							      								    								  
							      9 70 LOAD_FAST 1 ( dict )					    								  
							      72 LOAD_FAST 3 ( item )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 LOAD_CONST 1 ( 1 )					    								  
							      78 COMPARE_OP 4 ( > )					    								  
							      80 POP_JUMP_IF_FALSE 66					    								  
							      								    								  
							      10 82 LOAD_GLOBAL 0 ( print )				    								  
							      84 LOAD_FAST 3 ( item )					    								  
							      86 LOAD_CONST 2 ( ' ' )					    								  
							      88 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      90 CALL_FUNCTION_KW 2					    								  
							      92 POP_TOP						    								  
							      94 JUMP_ABSOLUTE 66					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      11 >> 98 LOAD_GLOBAL 0 ( print )				    								  
							      100 LOAD_CONST 4 ( '\n' )					    								  
							      102 CALL_FUNCTION 1					    								  
							      104 POP_TOP						    								  
							      106 LOAD_CONST 0 ( None )					    								  
							      108 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		      MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		    MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		  MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX
--							      --							    --								  --
def maxDecimalValue ( mat , i , j , p ) :		      Disassembly of <code object maxDecimalValue at 0x7fbac<<unk>> Disassembly of <code object maxDecimalValue at 0x7f816a673a50 script_not_found : None
    if i >= N or j >= N :				      2 0 LOAD_FAST 1 ( i )					    26 0 LOAD_FAST 0 ( mat )					  
	return 0					      2 LOAD_GLOBAL 0 ( N )					    2 LOAD_CONST 1 ( 0 )					  
    result = max ( maxDecimalValue ( mat , i , j + 1 , p + 1  4 COMPARE_OP 5 ( >= )					    4 BINARY_SUBSCR						  
    if mat [ i ] [ j ] == 1 :				      6 POP_JUMP_IF_TRUE 16					    6 STORE_FAST 1 ( i )					  
	return pow ( 2 , p ) + result			      8 LOAD_FAST 2 ( j )					    								  
    else :						      10 LOAD_GLOBAL 0 ( N )					    27 8 LOAD_FAST 1 ( i )					  
	return result					      12 COMPARE_OP 5 ( >= )					    10 LOAD_CONST 2 ( 1 )					  
							      14 POP_JUMP_IF_FALSE 20					    12 BINARY_SUBSCR						  
							      								    14 STORE_FAST 2 ( i )					  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    								  
							      18 RETURN_VALUE						    28 16 LOAD_FAST 2 ( i )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 >> 20 LOAD_GLOBAL 1 ( max )				    20 BINARY_SUBSCR						  
							      22 LOAD_GLOBAL 2 ( maxDecimalValue )			    22 STORE_FAST 3 ( i )					  
							      24 LOAD_FAST 0 ( mat )					    								  
							      26 LOAD_FAST 1 ( i )					    29 24 LOAD_FAST 1 ( i )					  
							      28 LOAD_FAST 2 ( j )					    26 LOAD_CONST 4 ( 2 )					  
							      30 LOAD_CONST 2 ( 1 )					    28 BINARY_SUBSCR						  
							      32 BINARY_ADD						    30 STORE_FAST 4 ( i )					  
							      34 LOAD_FAST 3 ( p )					    								  
							      36 LOAD_CONST 2 ( 1 )					    30 32 LOAD_FAST 0 ( mat )					  
							      38 BINARY_ADD						    34 LOAD_FAST 4 ( i )					  
							      40 CALL_FUNCTION 4					    36 BINARY_SUBSCR						  
							      42 LOAD_GLOBAL 2 ( maxDecimalValue )			    38 LOAD_CONST 5 ( 1 )					  
							      44 LOAD_FAST 0 ( mat )					    40 BINARY_SUBSCR						  
							      46 LOAD_FAST 1 ( i )					    42 LOAD_FAST 4 ( i )					  
							      48 LOAD_CONST 2 ( 1 )					    44 BINARY_SUBSCR						  
							      50 BINARY_ADD						    46 LOAD_CONST 6 ( 2 )					  
							      52 LOAD_FAST 2 ( j )					    48 BINARY_SUBSCR						  
							      54 LOAD_FAST 3 ( p )					    50 LOAD_CONST 7 ( 3 )					  
							      56 LOAD_CONST 2 ( 1 )					    52 BINARY_SUBSCR						  
							      58 BINARY_ADD						    54 LOAD_CONST 8 ( 2 )					  
							      60 CALL_FUNCTION 4					    56 BINARY_SUBSCR						  
							      62 CALL_FUNCTION 2					    58 LOAD_CONST 9 ( 1 )					  
							      64 STORE_FAST 4 ( result )				    60 BINARY_SUBSCR						  
							      								    62 LOAD_FAST 4 ( i )					  
							      5 66 LOAD_FAST 0 ( mat )					    64 BINARY_SUBSCR						  
							      68 LOAD_FAST 1 ( i )					    66 LOAD_CONST 10 ( 2 )					  
							      70 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      72 LOAD_FAST 2 ( j )					    70 LOAD_CONST 11 ( 3 )					  
							      74 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      76 LOAD_CONST 2 ( 1 )					    74 LOAD_CONST 12 ( ( 'num' , ) )				  
							      78 COMPARE_OP 2 ( == )					    76 CALL_FUNCTION_KW 2					  
							      80 POP_JUMP_IF_FALSE 96					    78 STORE_FAST 5 ( num )					  
							      								    								  
							      6 82 LOAD_GLOBAL 3 ( pow )				    31 80 LOAD_FAST 0 ( mat )					  
							      84 LOAD_CONST 3 ( 2 )					    82 LOAD_FAST 5 ( num )					  
							      86 LOAD_FAST 3 ( p )					    84 BINARY_SUBSCR						  
							      88 CALL_FUNCTION 2					    86 LOAD_CONST 12 ( ( 'num' , ) )				  
							      90 LOAD_FAST 4 ( result )					    88 CALL_FUNCTION_KW 1					  
							      92 BINARY_ADD						    90 STORE_FAST 6 ( num )					  
							      94 RETURN_VALUE						    								  
							      								    32 92 LOAD_FAST 0 ( mat )					  
							      8 >> 96 LOAD_FAST 4 ( result )				    94 LOAD_FAST 6 ( num )					  
							      98 RETURN_VALUE						    96 BINARY_SUBSCR						  
							      100 LOAD_CONST 0 ( None )					    98 LOAD_CONST 13 ( 1 )					  
							      102 RETURN_VALUE NEW_LINE					    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 6 ( num )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_CONST 14 ( ( 'num' , ) )				  
							      								    108 CALL_FUNCTION_KW 1					  
							      								    110 STORE_FAST 7 ( num )					  
							      								    								  
							      								    33 112 LOAD_FAST 7 ( num )					  
							      								    114 LOAD_FAST 6 ( num )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 15 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_FAST 7 ( num )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_FAST 6 ( num )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_FAST 7 ( num )					  
							      								    132 LOAD_FAST 8 ( num )					  
							      								    134 LOAD_CONST 16 ( 2 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 7 ( num )					  
							      								    140 LOAD_CONST 17 ( 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_FAST 7 ( num )					  
							      								    146 LOAD_CONST 18 ( 2 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_FAST 7 ( num )					  
							      								    152 LOAD_CONST 19 ( 2 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 BINARY_ADD						  
							      								    158 LOAD_FAST 7 ( num )					  
							      								    160 LOAD_CONST 20 ( 2 )					  
							      								    162 STORE_SUBSCR						  
							      								    								  
							      								    35 >> 164 LOAD_FAST 0 ( mat )				  
							      								    166 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_PLUS_PERFECT_NUMBER			      PROGRAM_CHECK_PLUS_PERFECT_NUMBER				    PROGRAM_CHECK_PLUS_PERFECT_NUMBER				  PROGRAM_CHECK_PLUS_PERFECT_NUMBER
--							      --							    --								  --
def checkplusperfect ( x ) :				      Disassembly of <code object checkplusperfect at 0x7fbac<<unk> Disassembly of <code object checkplusperfect at 0x7f816a673a5 error : /bin/bash: line 1: 26041 Segmentation faul
    temp = x						      2 0 LOAD_FAST 0 ( x )					    17 0 LOAD_FAST 0 ( x )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    n = 0						      2 STORE_FAST 1 ( temp )					    2 LOAD_CONST 1 ( 10 )					  ataset/bin/python XLM/dis_script.py --script_path
    while ( x != 0 ) :					      								    4 COMPARE_OP 0 ( < )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	x = x // 10					      3 4 LOAD_CONST 1 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/PROGRAM_CHECK_P
	n = n + 1					      6 STORE_FAST 2 ( n )					    								  LUS_PERFECT_NUMBER.dis
    x = temp						      								    18 8 LOAD_FAST 0 ( x )					  
    sm = 0						      4 8 SETUP_LOOP 28 ( to 38 )				    10 LOAD_CONST 2 ( 0 )					  
    while ( x != 0 ) :					      >> 10 LOAD_FAST 0 ( x )					    12 COMPARE_OP 4 ( > )					  
	sm = sm + ( int ) ( math.pow ( x % 10 , n ) )	      12 LOAD_CONST 1 ( 0 )					    14 POP_JUMP_IF_FALSE 28					  
	x = x // 10					      14 COMPARE_OP 3 ( != )					    								  
    return ( sm == temp )				      16 POP_JUMP_IF_FALSE 36					    19 16 LOAD_FAST 0 ( x )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      5 18 LOAD_FAST 0 ( x )					    20 COMPARE_OP 4 ( > )					  
							      20 LOAD_CONST 2 ( 10 )					    22 POP_JUMP_IF_FALSE 28					  
							      22 BINARY_FLOOR_DIVIDE					    								  
							      24 STORE_FAST 0 ( x )					    20 >> 24 LOAD_FAST 0 ( x )					  
							      								    26 LOAD_CONST 4 ( 0 )					  
							      6 26 LOAD_FAST 2 ( n )					    28 COMPARE_OP 4 ( > )					  
							      28 LOAD_CONST 3 ( 1 )					    30 POP_JUMP_IF_FALSE 44					  
							      30 BINARY_ADD						    								  
							      32 STORE_FAST 2 ( n )					    21 32 LOAD_FAST 0 ( x )					  
							      34 JUMP_ABSOLUTE 10					    34 LOAD_CONST 5 ( 1 )					  
							      >> 36 POP_BLOCK						    36 COMPARE_OP 4 ( > )					  
							      								    38 POP_JUMP_IF_FALSE 44					  
							      7 >> 38 LOAD_FAST 1 ( temp )				    								  
							      40 STORE_FAST 0 ( x )					    22 40 LOAD_FAST 0 ( x )					  
							      								    42 LOAD_CONST 6 ( 0 )					  
							      8 42 LOAD_CONST 1 ( 0 )					    44 COMPARE_OP 4 ( > )					  
							      44 STORE_FAST 3 ( sm )					    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      9 46 SETUP_LOOP 44 ( to 92 )				    23 48 LOAD_FAST 0 ( x )					  
							      >> 48 LOAD_FAST 0 ( x )					    50 LOAD_CONST 7 ( 0 )					  
							      50 LOAD_CONST 1 ( 0 )					    52 COMPARE_OP 4 ( > )					  
							      52 COMPARE_OP 3 ( != )					    54 POP_JUMP_IF_FALSE 44					  
							      54 POP_JUMP_IF_FALSE 90					    								  
							      								    24 56 LOAD_FAST 0 ( x )					  
							      10 56 LOAD_FAST 3 ( sm )					    58 LOAD_CONST 8 ( 0 )					  
							      58 LOAD_GLOBAL 0 ( int )					    60 COMPARE_OP 4 ( > )					  
							      60 LOAD_GLOBAL 1 ( math )					    62 POP_JUMP_IF_FALSE 44					  
							      62 LOAD_METHOD 2 ( pow )					    								  
							      64 LOAD_FAST 0 ( x )					    25 64 LOAD_FAST 0 ( x )					  
							      66 LOAD_CONST 2 ( 10 )					    66 LOAD_CONST 9 ( 1 )					  
							      68 BINARY_MODULO						    68 COMPARE_OP 4 ( > )					  
							      70 LOAD_FAST 2 ( n )					    70 POP_JUMP_IF_FALSE 44					  
							      72 CALL_METHOD 2						    								  
							      74 CALL_FUNCTION 1					    26 >> 72 LOAD_FAST 0 ( x )					  
							      76 BINARY_ADD						    74 LOAD_CONST 10 ( 0 )					  
							      78 STORE_FAST 3 ( sm )					    76 COMPARE_OP 4 ( > )					  
							      								    78 POP_JUMP_IF_FALSE 90					  
							      11 80 LOAD_FAST 0 ( x )					    								  
							      82 LOAD_CONST 2 ( 10 )					    27 80 LOAD_FAST 0 ( x )					  
							      84 BINARY_FLOOR_DIVIDE					    82 LOAD_CONST 11 ( 1 )					  
							      86 STORE_FAST 0 ( x )					    84 INPLACE_ADD						  
							      88 JUMP_ABSOLUTE 48					    86 STORE_FAST 0 ( x )					  
							      >> 90 POP_BLOCK						    								  
							      								    28 >> 88 LOAD_FAST 0 ( x )					  
							      12 >> 92 LOAD_FAST 3 ( sm )				    90 LOAD_CONST 12 ( 0 )					  
							      94 LOAD_FAST 1 ( temp )					    92 COMPARE_OP 4 ( > )					  
							      96 COMPARE_OP 2 ( == )					    94 POP_JUMP_IF_FALSE 92					  
							      98 RETURN_VALUE NEW_LINE					    								  
							      								    29 96 LOAD_FAST 0 ( x )					  
							      								    98 LOAD_CONST 12 ( 0 )					  
							      								    100 COMPARE_OP 4 ( > )					  
							      								    102 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    30 104 LOAD_FAST 0 ( x )					  
							      								    106 LOAD_CONST 13 ( 1 )					  
							      								    108 INPLACE_ADD						  
							      								    110 STORE_FAST 0 ( x )					  
							      								    								  
							      								    31 >> 112 LOAD_FAST 0 ( x )					  
							      								    114 LOAD_CONST 6 ( 0 )					  
							      								    116 COMPARE_OP 4 ( > )					  
							      								    118 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    32 120 LOAD_FAST 0 ( x )					  
							      								    122 LOAD_CONST 6 ( 0 )					  
							      								    124 COMPARE_OP 4 ( > )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    33 128 LOAD_FAST 0 ( x )					  
							      								    130 LOAD_CONST 6 ( 0 )					  
							      								    132 COMPARE_OP 4 ( > )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    34 136 LOAD_FAST 0 ( x )					  
							      								    138 LOAD_CONST 6 ( 0 )					  
							      								    140 COMPARE_OP 4 ( > )					  
							      								    142 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    35 144 LOAD_FAST 0 ( x )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			      DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			    DELETE_CONSECUTIVE_WORDS_SEQUENCE_1				  DELETE_CONSECUTIVE_WORDS_SEQUENCE_1
--							      --							    --								  --
def removeConsecutiveSame ( v ) :			      Disassembly of <code object removeConsecutiveSame at 0x7fbac< Disassembly of <code object removeConConSame at 0x7f816a6e4b7 script_not_found : None
    st = [ ]						      2 0 BUILD_LIST 0						    31 0 LOAD_FAST 1 ( st )					  
    for i in range ( len ( v ) ) :			      2 STORE_FAST 1 ( st )					    2 LOAD_CONST 1 ( 0 )					  
	if ( len ( st ) == 0 ) :			      								    4 BINARY_SUBSCR						  
	    st.append ( v [ i ] )			      3 4 SETUP_LOOP 92 ( to 98 )				    6 STORE_FAST 2 ( v )					  
	else :						      6 LOAD_GLOBAL 0 ( range )					    								  
	    Str = st [ - 1 ]				      8 LOAD_GLOBAL 1 ( len )					    32 8 LOAD_FAST 0 ( v )					  
	    if ( Str == v [ i ] ) :			      10 LOAD_FAST 0 ( v )					    10 LOAD_CONST 2 ( 1 )					  
		st.pop ( )				      12 CALL_FUNCTION 1					    12 BINARY_SUBSCR						  
	    else :					      14 CALL_FUNCTION 1					    14 STORE_FAST 3 ( v )					  
		st.append ( v [ i ] )			      16 GET_ITER						    								  
    return len ( st )					      >> 18 FOR_ITER 76 ( to 96 )				    33 16 LOAD_FAST 2 ( v )					  
							      20 STORE_FAST 2 ( i )					    18 LOAD_CONST 3 ( '%s %s %s' )				  
							      								    20 LOAD_FAST 1 ( st )					  
							      4 22 LOAD_GLOBAL 1 ( len )				    22 BINARY_MODULO						  
							      24 LOAD_FAST 1 ( st )					    24 LOAD_CONST 4 ( '%s %s %s' )				  
							      26 CALL_FUNCTION 1					    26 LOAD_FAST 1 ( st )					  
							      28 LOAD_CONST 1 ( 0 )					    28 BINARY_MODULO						  
							      30 COMPARE_OP 2 ( == )					    30 LOAD_CONST 5 ( '%s %s' )					  
							      32 POP_JUMP_IF_FALSE 50					    32 LOAD_FAST 1 ( st )					  
							      								    34 BINARY_MODULO						  
							      5 34 LOAD_FAST 1 ( st )					    36 BINARY_MODULO						  
							      36 LOAD_METHOD 2 ( append )				    38 STORE_FAST 2 ( v )					  
							      38 LOAD_FAST 0 ( v )					    								  
							      40 LOAD_FAST 2 ( i )					    34 40 LOAD_FAST 0 ( v )					  
							      42 BINARY_SUBSCR						    42 LOAD_CONST 6 ( '%s %s' )					  
							      44 CALL_METHOD 1						    44 LOAD_FAST 1 ( st )					  
							      46 POP_TOP						    46 BINARY_MODULO						  
							      48 JUMP_ABSOLUTE 18					    48 LOAD_FAST 2 ( v )					  
							      								    50 LOAD_CONST 7 ( '%s %s' )					  
							      7 >> 50 LOAD_FAST 1 ( st )				    52 LOAD_FAST 1 ( st )					  
							      52 LOAD_CONST 2 ( - 1 )					    54 BINARY_MODULO						  
							      54 BINARY_SUBSCR						    56 BUILD_TUPLE 2						  
							      56 STORE_FAST 3 ( Str )					    58 BINARY_MODULO						  
							      								    60 BINARY_MODULO						  
							      8 58 LOAD_FAST 3 ( Str )					    62 RETURN_VALUE						  
							      60 LOAD_FAST 0 ( v )					    NEW_LINE							  
							      62 LOAD_FAST 2 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 COMPARE_OP 2 ( == )					    								  
							      68 POP_JUMP_IF_FALSE 80					    								  
							      								    								  
							      9 70 LOAD_FAST 1 ( st )					    								  
							      72 LOAD_METHOD 3 ( pop )					    								  
							      74 CALL_METHOD 0						    								  
							      76 POP_TOP						    								  
							      78 JUMP_ABSOLUTE 18					    								  
							      								    								  
							      11 >> 80 LOAD_FAST 1 ( st )				    								  
							      82 LOAD_METHOD 2 ( append )				    								  
							      84 LOAD_FAST 0 ( v )					    								  
							      86 LOAD_FAST 2 ( i )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 CALL_METHOD 1						    								  
							      92 POP_TOP						    								  
							      94 JUMP_ABSOLUTE 18					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      12 >> 98 LOAD_GLOBAL 1 ( len )				    								  
							      100 LOAD_FAST 1 ( st )					    								  
							      102 CALL_FUNCTION 1					    								  
							      104 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS		  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS
--							      --							    --								  --
def countPairs ( str1 ) :				      Disassembly of <code object countPairs at 0x7fbac<<unk>> de40 Disassembly of <code object countPairs at 0x7f816a683c00, fil error : /bin/bash: line 1: 26045 Segmentation faul
    result = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    101 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    n = len ( str1 )					      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( i )					  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( 0 , n ) :				      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	for j in range ( i + 1 , n ) :			      3 4 LOAD_GLOBAL 0 ( len )					    102 4 SETUP_LOOP 52 ( to 54 )				  eval_scripts/python_sa-dis_sa.test/COUNT_CHARACTER
	    if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ]  6 LOAD_FAST 0 ( str1 )					    6 LOAD_GLOBAL 0 ( range )					  S_STRING_DISTANCE_ENGLISH_ALPHABETS.dis
		result += 1 ;				      8 CALL_FUNCTION 1						    8 LOAD_CONST 2 ( 1 )					  
    return result ;					      10 STORE_FAST 2 ( n )					    10 CALL_FUNCTION 1						  
							      								    12 GET_ITER							  
							      4 12 SETUP_LOOP 90 ( to 104 )				    >> 14 FOR_ITER 52 ( to 52 )					  
							      14 LOAD_GLOBAL 1 ( range )				    16 STORE_FAST 2 ( i )					  
							      16 LOAD_CONST 1 ( 0 )					    								  
							      18 LOAD_FAST 2 ( n )					    103 18 LOAD_FAST 0 ( str1 )					  
							      20 CALL_FUNCTION 2					    20 LOAD_METHOD 1 ( split )					  
							      22 GET_ITER						    22 LOAD_CONST 3 ( '=' )					  
							      >> 24 FOR_ITER 76 ( to 102 )				    24 CALL_METHOD 1						  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 SETUP_LOOP 70 ( to 100 )				    104 28 LOAD_FAST 0 ( str1 )					  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_METHOD 2 ( split )					  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_CONST 4 ( '=' )					  
							      34 LOAD_CONST 2 ( 1 )					    34 CALL_METHOD 1						  
							      36 BINARY_ADD						    36 STORE_FAST 4 ( match )					  
							      38 LOAD_FAST 2 ( n )					    								  
							      40 CALL_FUNCTION 2					    105 38 LOAD_FAST 0 ( str1 )					  
							      42 GET_ITER						    40 LOAD_METHOD 3 ( split )					  
							      >> 44 FOR_ITER 52 ( to 98 )				    42 LOAD_CONST 5 ( '=' )					  
							      46 STORE_FAST 4 ( j )					    44 CALL_METHOD 1						  
							      								    46 STORE_FAST 5 ( i )					  
							      6 48 LOAD_GLOBAL 2 ( abs )				    								  
							      50 LOAD_GLOBAL 3 ( ord )					    106 48 LOAD_FAST 0 ( str1 )					  
							      52 LOAD_FAST 0 ( str1 )					    50 LOAD_METHOD 4 ( append )					  
							      54 LOAD_FAST 3 ( i )					    52 LOAD_FAST 5 ( i )					  
							      56 BINARY_SUBSCR						    54 CALL_METHOD 1						  
							      58 CALL_FUNCTION 1					    56 POP_TOP							  
							      60 LOAD_GLOBAL 3 ( ord )					    58 JUMP_ABSOLUTE 14						  
							      62 LOAD_FAST 0 ( str1 )					    >> 60 POP_BLOCK						  
							      64 LOAD_FAST 4 ( j )					    >> 62 LOAD_CONST 0 ( None )					  
							      66 BINARY_SUBSCR						    64 RETURN_VALUE						  
							      68 CALL_FUNCTION 1					    NEW_LINE							  
							      70 BINARY_SUBTRACT					    								  
							      72 CALL_FUNCTION 1					    								  
							      74 LOAD_GLOBAL 2 ( abs )					    								  
							      76 LOAD_FAST 3 ( i )					    								  
							      78 LOAD_FAST 4 ( j )					    								  
							      80 BINARY_SUBTRACT					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 COMPARE_OP 2 ( == )					    								  
							      86 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      7 88 LOAD_FAST 1 ( result )				    								  
							      90 LOAD_CONST 2 ( 1 )					    								  
							      92 INPLACE_ADD						    								  
							      94 STORE_FAST 1 ( result )				    								  
							      96 JUMP_ABSOLUTE 44					    								  
							      >> 98 POP_BLOCK						    								  
							      >> 100 JUMP_ABSOLUTE 24					    								  
							      >> 102 POP_BLOCK						    								  
							      								    								  
							      8 >> 104 LOAD_FAST 1 ( result )				    								  
							      106 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	      SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	    SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1		  SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1
--							      --							    --								  --
def KnapSack ( val , wt , n , W ) :			      Disassembly of <code object KnapSack at 0x7fbac<<unk>> de40,  Disassembly of <code object Knapack at 0x7f816a673a50, file " script_not_found : None
    dp = [ 0 ] * ( W + 1 ) ;				      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( self )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 LOAD_METHOD 0 ( dp )					  
	for j in range ( W , wt [ i ] , - 1 ) :		      4 LOAD_FAST 3 ( W )					    4 LOAD_FAST 1 ( wt )					  
	    dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j -  6 LOAD_CONST 2 ( 1 )					    6 LOAD_FAST 2 ( wt )					  
    return dp [ W ] ;					      8 BINARY_ADD						    8 LOAD_FAST 3 ( wt )					  
							      10 BINARY_MULTIPLY					    10 LOAD_FAST 4 ( wt )					  
							      12 STORE_FAST 4 ( dp )					    12 LOAD_FAST 5 ( wt )					  
							      								    14 LOAD_FAST 6 ( wt )					  
							      3 14 SETUP_LOOP 80 ( to 96 )				    16 LOAD_FAST 7 ( wt )					  
							      16 LOAD_GLOBAL 0 ( range )				    18 LOAD_FAST 8 ( wt )					  
							      18 LOAD_FAST 2 ( n )					    20 LOAD_FAST 9 ( wt )					  
							      20 CALL_FUNCTION 1					    22 LOAD_FAST 10 ( wt )					  
							      22 GET_ITER						    24 LOAD_FAST 11 ( wt )					  
							      >> 24 FOR_ITER 68 ( to 94 )				    26 LOAD_FAST 12 ( wt )					  
							      26 STORE_FAST 5 ( i )					    28 LOAD_FAST 13 ( wt )					  
							      								    30 LOAD_FAST 14 ( wt )					  
							      4 28 SETUP_LOOP 62 ( to 92 )				    32 LOAD_FAST 15 ( wt )					  
							      30 LOAD_GLOBAL 0 ( range )				    34 LOAD_FAST 16 ( wt )					  
							      32 LOAD_FAST 3 ( W )					    36 LOAD_FAST 17 ( wt )					  
							      34 LOAD_FAST 1 ( wt )					    38 LOAD_FAST 18 ( wt )					  
							      36 LOAD_FAST 5 ( i )					    40 LOAD_FAST 19 ( wt )					  
							      38 BINARY_SUBSCR						    42 LOAD_FAST 20 ( wt )					  
							      40 LOAD_CONST 3 ( - 1 )					    44 LOAD_FAST 21 ( wt )					  
							      42 CALL_FUNCTION 3					    46 LOAD_FAST 22 ( wt )					  
							      44 GET_ITER						    48 LOAD_FAST 21 ( wt )					  
							      >> 46 FOR_ITER 42 ( to 90 )				    50 LOAD_FAST 22 ( wt )					  
							      48 STORE_FAST 6 ( j )					    52 LOAD_FAST 21 ( wt )					  
							      								    54 LOAD_FAST 22 ( wt )					  
							      5 50 LOAD_GLOBAL 1 ( max )				    56 LOAD_FAST 21 ( wt )					  
							      52 LOAD_FAST 4 ( dp )					    58 LOAD_FAST 22 ( wt )					  
							      54 LOAD_FAST 6 ( j )					    60 LOAD_FAST 21 ( wt )					  
							      56 BINARY_SUBSCR						    62 LOAD_FAST 22 ( wt )					  
							      58 LOAD_FAST 0 ( val )					    64 LOAD_FAST 21 ( wt )					  
							      60 LOAD_FAST 5 ( i )					    66 LOAD_FAST 22 ( wt )					  
							      62 BINARY_SUBSCR						    68 LOAD_FAST 21 ( wt )					  
							      64 LOAD_FAST 4 ( dp )					    70 LOAD_FAST 22 ( wt )					  
							      66 LOAD_FAST 6 ( j )					    72 LOAD_FAST 23 ( wt )					  
							      68 LOAD_FAST 1 ( wt )					    74 LOAD_FAST 22 ( wt )					  
							      70 LOAD_FAST 5 ( i )					    76 LOAD_FAST 23 ( wt )					  
							      72 BINARY_SUBSCR						    78 LOAD_FAST 22 ( wt )					  
							      74 BINARY_SUBTRACT					    80 LOAD_FAST 23 ( wt )					  
							      76 BINARY_SUBSCR						    82 LOAD_FAST 22 ( wt )					  
							      78 BINARY_ADD						    84 LOAD_FAST 23 ( wt )					  
							      80 CALL_FUNCTION 2					    86 LOAD_FAST 24 ( wt )					  
							      82 LOAD_FAST 4 ( dp )					    88 LOAD_FAST 23 ( wt )					  
							      84 LOAD_FAST 6 ( j )					    90 LOAD_FAST 22 ( wt )					  
							      86 STORE_SUBSCR						    92 LOAD_FAST 24 ( wt )					  
							      88 JUMP_ABSOLUTE 46					    94 LOAD_FAST 23 ( wt )					  
							      >> 90 POP_BLOCK						    96 LOAD_FAST 22 ( wt )					  
							      >> 92 JUMP_ABSOLUTE 24					    98 LOAD_FAST 23 ( wt )					  
							      >> 94 POP_BLOCK						    100 LOAD_FAST 24 ( wt )					  
							      								    102 LOAD_FAST 23 ( wt )					  
							      6 >> 96 LOAD_FAST 4 ( dp )				    104 LOAD_FAST 22 ( wt )					  
							      98 LOAD_FAST 3 ( W )					    106 LOAD_FAST 24 ( wt )					  
							      100 BINARY_SUBSCR						    108 LOAD_FAST 23 ( wt )					  
							      102 RETURN_VALUE NEW_LINE					    110 LOAD_FAST 24 ( wt )					  
							      								    112 LOAD_FAST 23 ( wt )					  
							      								    114 LOAD_FAST 24 ( wt )					  
							      								    116 LOAD_FAST 26 ( wt )					  
							      								    118 LOAD_FAST 25 ( wt )					  
							      								    120 LOAD_FAST 22 ( wt )					  
							      								    122 LOAD_FAST 24 ( wt )					  
							      								    124 LOAD_FAST 23 ( wt )					  
							      								    126 LOAD_FAST 24 ( wt )					  
							      								    128 LOAD_FAST 23 ( wt )					  
							      								    130 LOAD_FAST 24 ( wt )					  
							      								    132 LOAD_FAST 26 ( wt )					  
							      								    134 LOAD_FAST 25 ( wt )					  
							      								    136 LOAD_FAST 26 ( wt )					  
							      								    138 LOAD_FAST 30 ( wt )					  
							      								    140 LOAD_FAST 29 ( wt					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES		      ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			    ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			  ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES
--							      --							    --								  --
def winner ( a , n , k ) :				      Disassembly of <code object winner at 0x7fbac<<unk>> d540, fi Disassembly of <code object winner at 0x7f816a6e4b70, file "< error : Traceback (most recent call last):   File
    if k >= n - 1 :					      2 0 LOAD_FAST 2 ( k )					    20 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 60, in <module>	exec
	return n					      2 LOAD_FAST 1 ( n )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 41, in <module>	  Fi
    best = 0						      4 LOAD_CONST 1 ( 1 )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in winner TypeError: 'int' obj
    times = 0						      6 BINARY_SUBTRACT						    6 STORE_FAST 1 ( n )					  ect is not subscriptable
    for i in range ( n ) :				      8 COMPARE_OP 5 ( >= )					    								  
	if a [ i ] > best :				      10 POP_JUMP_IF_FALSE 16					    21 8 LOAD_FAST 1 ( n )					  
	    best = a [ i ]				      								    10 LOAD_CONST 2 ( 0 )					  
	    if i == True :				      3 12 LOAD_FAST 1 ( n )					    12 BINARY_SUBSCR						  
		times = 1				      14 RETURN_VALUE						    14 STORE_FAST 2 ( n )					  
	else :						      								    								  
	    times += 1					      4 >> 16 LOAD_CONST 2 ( 0 )				    22 16 LOAD_FAST 2 ( n )					  
	if times >= k :					      18 STORE_FAST 3 ( best )					    18 LOAD_CONST 3 ( 1 )					  
	    return best					      								    20 BINARY_SUBSCR						  
    return best						      5 20 LOAD_CONST 2 ( 0 )					    22 STORE_FAST 3 ( n )					  
							      22 STORE_FAST 4 ( times )					    								  
							      								    23 24 LOAD_FAST 1 ( n )					  
							      6 24 SETUP_LOOP 70 ( to 96 )				    26 LOAD_CONST 4 ( 2 )					  
							      26 LOAD_GLOBAL 0 ( range )				    28 BINARY_SUBSCR						  
							      28 LOAD_FAST 1 ( n )					    30 STORE_FAST 4 ( n )					  
							      30 CALL_FUNCTION 1					    								  
							      32 GET_ITER						    24 32 LOAD_FAST 0 ( a )					  
							      >> 34 FOR_ITER 58 ( to 94 )				    34 LOAD_FAST 4 ( n )					  
							      36 STORE_FAST 5 ( i )					    36 LOAD_CONST 5 ( 1 )					  
							      								    38 BINARY_SUBSCR						  
							      7 38 LOAD_FAST 0 ( a )					    40 LOAD_FAST 2 ( n )					  
							      40 LOAD_FAST 5 ( i )					    42 LOAD_CONST 6 ( 2 )					  
							      42 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      44 LOAD_FAST 3 ( best )					    46 LOAD_FAST 3 ( n )					  
							      46 COMPARE_OP 4 ( > )					    48 LOAD_CONST 7 ( 3 )					  
							      48 POP_JUMP_IF_FALSE 72					    50 BINARY_SUBSCR						  
							      								    52 LOAD_FAST 4 ( n )					  
							      8 50 LOAD_FAST 0 ( a )					    54 LOAD_CONST 8 ( 2 )					  
							      52 LOAD_FAST 5 ( i )					    56 BINARY_SUBSCR						  
							      54 BINARY_SUBSCR						    58 LOAD_CONST 9 ( 3 )					  
							      56 STORE_FAST 3 ( best )					    60 BINARY_SUBSCR						  
							      								    62 LOAD_FAST 4 ( n )					  
							      9 58 LOAD_FAST 5 ( i )					    64 LOAD_CONST 10 ( 2 )					  
							      60 LOAD_CONST 3 ( True )					    66 BINARY_SUBSCR						  
							      62 COMPARE_OP 2 ( == )					    68 LOAD_FAST 4 ( n )					  
							      64 POP_JUMP_IF_FALSE 80					    70 LOAD_CONST 11 ( 3 )					  
							      								    72 BINARY_SUBSCR						  
							      10 66 LOAD_CONST 1 ( 1 )					    74 LOAD_CONST 12 ( ( 'n' , 'n' , 'n' , 'n' , 'n' , 'n' , 'n'  
							      68 STORE_FAST 4 ( times )					    10 BUILD_CONST_KEY_MAP 5					  
							      70 JUMP_FORWARD 8 ( to 80 )				    12 RETURN_VALUE						  
							      								    NEW_LINE							  
							      12 >> 72 LOAD_FAST 4 ( times )				    								  
							      74 LOAD_CONST 1 ( 1 )					    								  
							      76 INPLACE_ADD						    								  
							      78 STORE_FAST 4 ( times )					    								  
							      								    								  
							      13 >> 80 LOAD_FAST 4 ( times )				    								  
							      82 LOAD_FAST 2 ( k )					    								  
							      84 COMPARE_OP 5 ( >= )					    								  
							      86 POP_JUMP_IF_FALSE 34					    								  
							      								    								  
							      14 88 LOAD_FAST 3 ( best )				    								  
							      90 RETURN_VALUE						    								  
							      92 JUMP_ABSOLUTE 34					    								  
							      >> 94 POP_BLOCK						    								  
							      								    								  
							      15 >> 96 LOAD_FAST 3 ( best )				    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY
--							      --							    --								  --
def findGreatest ( arr , n ) :				      Disassembly of <code object findGreatest at 0x7fbac<<unk>> de Disassembly of <code object findGreatest at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    result = - 1					      2 0 LOAD_CONST 1 ( - 1 )					    65 0 LOAD_CONST 1 ( - 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 2 ( result )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 34, in <module>	  Fi
	for j in range ( n - 1 ) :			      								    								  le "<dis>", line 2, in findGreatest TypeError: 'No
	    for k in range ( j + 1 , n ) :		      3 4 SETUP_LOOP 100 ( to 106 )				    66 4 SETUP_LOOP 28 ( to 34 )				  neType' object is not iterable
		if ( arr [ j ] * arr [ k ] == arr [ i ] ) :   6 LOAD_GLOBAL 0 ( range )					    6 LOAD_FAST 0 ( arr )					  
		    result = max ( result , arr [ i ] )	      8 LOAD_FAST 1 ( n )					    8 LOAD_METHOD 0 ( append )					  
    return result					      10 CALL_FUNCTION 1					    10 LOAD_FAST 1 ( n )					  
							      12 GET_ITER						    12 CALL_METHOD 1						  
							      >> 14 FOR_ITER 88 ( to 104 )				    14 GET_ITER							  
							      16 STORE_FAST 3 ( i )					    >> 16 FOR_ITER 14 ( to 32 )					  
							      								    18 STORE_FAST 2 ( i )					  
							      4 18 SETUP_LOOP 82 ( to 102 )				    								  
							      20 LOAD_GLOBAL 0 ( range )				    67 20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_FAST 1 ( n )					    22 LOAD_METHOD 1 ( append )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_FAST 2 ( i )					  
							      26 BINARY_SUBTRACT					    26 CALL_METHOD 1						  
							      28 CALL_FUNCTION 1					    28 POP_TOP							  
							      30 GET_ITER						    30 JUMP_ABSOLUTE 16						  
							      >> 32 FOR_ITER 66 ( to 100 )				    >> 32 POP_BLOCK						  
							      34 STORE_FAST 4 ( j )					    >> 34 LOAD_CONST 0 ( None )					  
							      								    36 RETURN_VALUE						  
							      5 36 SETUP_LOOP 60 ( to 98 )				    NEW_LINE							  
							      38 LOAD_GLOBAL 0 ( range )				    								  
							      40 LOAD_FAST 4 ( j )					    								  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 BINARY_ADD						    								  
							      46 LOAD_FAST 1 ( n )					    								  
							      48 CALL_FUNCTION 2					    								  
							      50 GET_ITER						    								  
							      >> 52 FOR_ITER 42 ( to 96 )				    								  
							      54 STORE_FAST 5 ( k )					    								  
							      								    								  
							      6 56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 4 ( j )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_FAST 0 ( arr )					    								  
							      64 LOAD_FAST 5 ( k )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 BINARY_MULTIPLY					    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 3 ( i )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 52					    								  
							      								    								  
							      7 80 LOAD_GLOBAL 1 ( max )				    								  
							      82 LOAD_FAST 2 ( result )					    								  
							      84 LOAD_FAST 0 ( arr )					    								  
							      86 LOAD_FAST 3 ( i )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 CALL_FUNCTION 2					    								  
							      92 STORE_FAST 2 ( result )				    								  
							      94 JUMP_ABSOLUTE 52					    								  
							      >> 96 POP_BLOCK						    								  
							      >> 98 JUMP_ABSOLUTE 32					    								  
							      >> 100 POP_BLOCK						    								  
							      >> 102 JUMP_ABSOLUTE 14					    								  
							      >> 104 POP_BLOCK						    								  
							      								    								  
							      8 >> 106 LOAD_FAST 2 ( result )				    								  
							      108 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH     NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH	    NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH	  NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH
--							      --							    --								  --
def countTrees ( n ) :					      Disassembly of <code object countTrees at 0x7fbac<<unk>> d540 Disassembly of <code object countTrees at 0x7f816a673a50, fil error : Traceback (most recent call last):   File
    BT = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_GLOBAL 0 ( BT )					  "XLM/dis_script.py", line 59, in <module>	for
    BT [ 0 ] = BT [ 1 ] = 1				      2 BUILD_LIST 1						    2 LOAD_FAST 0 ( n )						  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 2 , n + 1 ) :			      4 LOAD_FAST 0 ( n )					    4 CALL_FUNCTION 1						  y", line 47, in run_dis_script     co_code, co_nlo
	for j in range ( i ) :				      6 LOAD_CONST 2 ( 1 )					    6 STORE_FAST 1 ( s )					  cals, co_varnames, co_names, co_consts, co_linesta
	    BT [ i ] += BT [ j ] * BT [ i - j - 1 ]	      8 BINARY_ADD						    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    return BT [ n ]					      10 BINARY_MULTIPLY					    66 8 LOAD_FAST 1 ( s )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 STORE_FAST 1 ( BT )					    10 LOAD_CONST 1 ( 0 )					  n parse     constants[arg] = ast.literal_eval(argr
							      								    12 BINARY_SUBSCR						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      3 14 LOAD_CONST 2 ( 1 )					    14 STORE_FAST 2 ( s )					  ib/python3.7/ast.py", line 91, in literal_eval
							      16 DUP_TOP						    								   return _convert(node_or_string)   File "/home/ubu
							      18 LOAD_FAST 1 ( BT )					    67 16 LOAD_FAST 2 ( s )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      20 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  line 90, in _convert	   return _convert_signed_nu
							      22 STORE_SUBSCR						    20 BINARY_SUBSCR						  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      24 LOAD_FAST 1 ( BT )					    22 STORE_FAST 3 ( s )					  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      26 LOAD_CONST 2 ( 1 )					    								  ed_num     return _convert_num(node)	 File "/home
							      28 STORE_SUBSCR						    68 24 LOAD_FAST 3 ( s )					  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      								    26 LOAD_CONST 1 ( 0 )					  y", line 55, in _convert_num	   raise ValueError(
							      4 30 SETUP_LOOP 76 ( to 108 )				    28 BINARY_SUBSCR						  'malformed node or string: ' + repr(node)) ValueEr
							      32 LOAD_GLOBAL 0 ( range )				    30 STORE_FAST 4 ( s )					  ror: malformed node or string: None
							      34 LOAD_CONST 3 ( 2 )					    								  
							      36 LOAD_FAST 0 ( n )					    69 32 LOAD_FAST 2 ( s )					  
							      38 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 1 ( 0 )					  
							      40 BINARY_ADD						    36 BINARY_SUBSCR						  
							      42 CALL_FUNCTION 2					    38 STORE_FAST 5 ( s )					  
							      44 GET_ITER						    								  
							      >> 46 FOR_ITER 58 ( to 106 )				    70 40 LOAD_FAST 0 ( n )					  
							      48 STORE_FAST 2 ( i )					    42 LOAD_CONST 1 ( 0 )					  
							      								    44 BINARY_SUBSCR						  
							      5 50 SETUP_LOOP 52 ( to 104 )				    46 STORE_FAST 6 ( s )					  
							      52 LOAD_GLOBAL 0 ( range )				    								  
							      54 LOAD_FAST 2 ( i )					    71 48 LOAD_FAST 6 ( s )					  
							      56 CALL_FUNCTION 1					    50 LOAD_CONST 1 ( 0 )					  
							      58 GET_ITER						    52 BINARY_SUBSCR						  
							      >> 60 FOR_ITER 40 ( to 102 )				    54 STORE_FAST 7 ( s )					  
							      62 STORE_FAST 3 ( j )					    								  
							      								    72 56 LOAD_FAST 0 ( n )					  
							      6 64 LOAD_FAST 1 ( BT )					    58 LOAD_CONST 1 ( 0 )					  
							      66 LOAD_FAST 2 ( i )					    60 BINARY_SUBSCR						  
							      68 DUP_TOP_TWO						    62 STORE_FAST 8 ( s )					  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_FAST 1 ( BT )					    73 64 LOAD_FAST 0 ( n )					  
							      74 LOAD_FAST 3 ( j )					    66 LOAD_CONST 1 ( 0 )					  
							      76 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      78 LOAD_FAST 1 ( BT )					    70 STORE_FAST 9 ( s )					  
							      80 LOAD_FAST 2 ( i )					    								  
							      82 LOAD_FAST 3 ( j )					    74 72 LOAD_FAST 0 ( n )					  
							      84 BINARY_SUBTRACT					    74 LOAD_CONST 1 ( 0 )					  
							      86 LOAD_CONST 2 ( 1 )					    76 BINARY_SUBSCR						  
							      88 BINARY_SUBTRACT					    78 STORE_FAST 10 ( s )					  
							      90 BINARY_SUBSCR						    								  
							      92 BINARY_MULTIPLY					    75 80 LOAD_FAST 0 ( n )					  
							      94 INPLACE_ADD						    82 LOAD_CONST 1 ( 0 )					  
							      96 ROT_THREE						    84 BINARY_SUBSCR						  
							      98 STORE_SUBSCR						    86 STORE_FAST 11 ( s )					  
							      100 JUMP_ABSOLUTE 60					    								  
							      >> 102 POP_BLOCK						    76 88 LOAD_FAST 0 ( n )					  
							      >> 104 JUMP_ABSOLUTE 46					    90 LOAD_CONST 1 ( 0 )					  
							      >> 106 POP_BLOCK						    92 BINARY_SUBSCR						  
							      								    94 STORE_FAST 10 ( s )					  
							      7 >> 108 LOAD_FAST 1 ( BT )				    								  
							      110 LOAD_FAST 0 ( n )					    77 96 LOAD_FAST 0 ( n )					  
							      112 BINARY_SUBSCR						    98 LOAD_CONST 1 ( 0 )					  
							      114 RETURN_VALUE NEW_LINE					    100 BINARY_SUBSCR						  
							      								    102 STORE_FAST 10 ( s )					  
							      								    								  
							      								    78 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 1 ( 0 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 1 ( 0 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 1 ( 0 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 STORE_FAST 10 ( s )					  
							      								    								  
							      								    79 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 1 ( 0 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 10 ( s )					  
							      								    140 LOAD_CONST 1 ( 0 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 1 ( 0 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_FAST 10 ( s )					  
							      								    150 LOAD_CONST 1 ( 0 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 1 ( 0 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_FAST 10 ( s )					  
							      								    160 LOAD_CONST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GNOME_SORT_A_STUPID_ONE					      GNOME_SORT_A_STUPID_ONE					    GNOME_SORT_A_STUPID_ONE					  GNOME_SORT_A_STUPID_ONE
--							      --							    --								  --
def gnomeSort ( arr , n ) :				      Disassembly of <code object gnomeSort at 0x7fbac<<unk>> de40, Disassembly of <code object gnomeSort at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    index = 0						      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    while index < n :					      2 STORE_FAST 2 ( index )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	if index == 0 :					      								    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
	    index = index + 1				      3 4 SETUP_LOOP 100 ( to 106 )				    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	if arr [ index ] >= arr [ index - 1 ] :		      >> 6 LOAD_FAST 2 ( index )				    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	    index = index + 1				      8 LOAD_FAST 1 ( n )					    66 8 LOAD_FAST 1 ( n )					  pack non-iterable NoneType object
	else :						      10 COMPARE_OP 0 ( < )					    10 LOAD_CONST 2 ( 1 )					  
	    arr [ index ] , arr [ index - 1 ] = arr [ index - 12 POP_JUMP_IF_FALSE 104					    12 BINARY_SUBSCR						  
	    index = index - 1				      								    14 STORE_FAST 2 ( n )					  
    return arr						      4 14 LOAD_FAST 2 ( index )				    								  
							      16 LOAD_CONST 1 ( 0 )					    67 16 LOAD_FAST 1 ( n )					  
							      18 COMPARE_OP 2 ( == )					    18 LOAD_CONST 3 ( 1 )					  
							      20 POP_JUMP_IF_FALSE 30					    20 BINARY_SUBSCR						  
							      								    22 STORE_FAST 3 ( n )					  
							      5 22 LOAD_FAST 2 ( index )				    								  
							      24 LOAD_CONST 2 ( 1 )					    68 24 LOAD_FAST 1 ( n )					  
							      26 BINARY_ADD						    26 LOAD_CONST 4 ( 1 )					  
							      28 STORE_FAST 2 ( index )					    28 BINARY_SUBSCR						  
							      								    30 LOAD_CONST 5 ( 1 )					  
							      6 >> 30 LOAD_FAST 0 ( arr )				    32 BINARY_SUBSCR						  
							      32 LOAD_FAST 2 ( index )					    34 LOAD_CONST 6 ( 2 )					  
							      34 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      36 LOAD_FAST 0 ( arr )					    38 STORE_FAST 4 ( n )					  
							      38 LOAD_FAST 2 ( index )					    								  
							      40 LOAD_CONST 2 ( 1 )					    69 40 LOAD_FAST 1 ( n )					  
							      42 BINARY_SUBTRACT					    42 LOAD_CONST 7 ( 1 )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 COMPARE_OP 5 ( >= )					    46 LOAD_CONST 8 ( 2 )					  
							      48 POP_JUMP_IF_FALSE 60					    48 BINARY_SUBSCR						  
							      								    50 LOAD_CONST 9 ( 1 )					  
							      7 50 LOAD_FAST 2 ( index )				    52 BINARY_SUBSCR						  
							      52 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 10 ( 2 )					  
							      54 BINARY_ADD						    56 BINARY_SUBSCR						  
							      56 STORE_FAST 2 ( index )					    58 LOAD_CONST 11 ( 1 )					  
							      58 JUMP_ABSOLUTE 6					    60 BINARY_SUBSCR						  
							      								    62 LOAD_CONST 12 ( 2 )					  
							      9 >> 60 LOAD_FAST 0 ( arr )				    64 BINARY_SUBSCR						  
							      62 LOAD_FAST 2 ( index )					    66 STORE_FAST 5 ( n )					  
							      64 LOAD_CONST 2 ( 1 )					    								  
							      66 BINARY_SUBTRACT					    70 68 LOAD_FAST 1 ( n )					  
							      68 BINARY_SUBSCR						    70 LOAD_CONST 4 ( 1 )					  
							      70 LOAD_FAST 0 ( arr )					    72 BINARY_SUBSCR						  
							      72 LOAD_FAST 2 ( index )					    74 LOAD_CONST 12 ( 2 )					  
							      74 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      76 ROT_TWO						    78 LOAD_CONST 13 ( 1 )					  
							      78 LOAD_FAST 0 ( arr )					    80 BINARY_SUBSCR						  
							      80 LOAD_FAST 2 ( index )					    82 LOAD_CONST 14 ( 2 )					  
							      82 STORE_SUBSCR						    84 BINARY_SUBSCR						  
							      84 LOAD_FAST 0 ( arr )					    86 LOAD_CONST 15 ( 1 )					  
							      86 LOAD_FAST 2 ( index )					    88 BINARY_SUBSCR						  
							      88 LOAD_CONST 2 ( 1 )					    90 LOAD_CONST 16 ( 2 )					  
							      90 BINARY_SUBTRACT					    92 BINARY_SUBSCR						  
							      92 STORE_SUBSCR						    94 LOAD_CONST 17 ( 1 )					  
							      								    96 BINARY_SUBSCR						  
							      10 94 LOAD_FAST 2 ( index )				    98 LOAD_CONST 18 ( 2 )					  
							      96 LOAD_CONST 2 ( 1 )					    100 BINARY_SUBSCR						  
							      98 BINARY_SUBTRACT					    102 LOAD_CONST 19 ( 1 )					  
							      100 STORE_FAST 2 ( index )				    104 BINARY_SUBSCR						  
							      102 JUMP_ABSOLUTE 6					    106 LOAD_CONST 20 ( 2 )					  
							      >> 104 POP_BLOCK						    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 21 ( 1 )					  
							      11 >> 106 LOAD_FAST 0 ( arr )				    112 BINARY_SUBSCR						  
							      108 RETURN_VALUE NEW_LINE					    114 LOAD_CONST 22 ( 2 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 21 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 22 ( 2 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 23 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 22 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 23 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 22 ( 2 )					  
							      								    140 LOAD_CONST 23 ( 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 22 ( 2 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 23 ( 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 22 ( 2 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 24 ( 2 )					  
							      								    158 BINARY_SUBSCR						  
							      								    160 LOAD_CONST 23 ( 1 )					  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_CONST 24 ( 2 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 LOAD_CONST 23 ( 1 )					  
							      								    170 BINARY_SUBSCR						  
							      								    								  
							      								    67 172 LOAD_CONST 24 ( 2 )					  
							      								    174 LOAD_CONST 25 ( 2 )					  
							      								    176 BUILD_SLICE 2						  
							      								    178 BINARY_SUBSCR						  
							      								    180 LOAD_CONST 24 ( 2 )					  
							      								    182								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
def countNum ( arr , n ) :				      Disassembly of <code object countNum at 0x7fbac<<unk>> de40,  Disassembly of <code object countNum at 0x7f816a673a50, file  error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    17 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    arr.sort ( )					      2 STORE_FAST 2 ( count )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 0 , n - 1 ) :			      								    4 CALL_METHOD 0						  y", line 47, in run_dis_script     co_code, co_nlo
	if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr  3 4 LOAD_FAST 0 ( arr )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	    count += arr [ i + 1 ] - arr [ i ] - 1 ;	      6 LOAD_METHOD 0 ( sort )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    return count					      8 CALL_METHOD 0						    18 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      10 POP_TOP						    10 LOAD_CONST 1 ( 1 )					  n parse     constants[arg] = ast.literal_eval(argr
							      								    12 COMPARE_OP 4 ( > )					  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      4 12 SETUP_LOOP 94 ( to 108 )				    14 POP_JUMP_IF_FALSE 28					  ib/python3.7/ast.py", line 46, in literal_eval
							      14 LOAD_GLOBAL 1 ( range )				    								   node_or_string = parse(node_or_string, mode='eval
							      16 LOAD_CONST 1 ( 0 )					    19 16 LOAD_FAST 1 ( n )					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      18 LOAD_FAST 1 ( n )					    18 LOAD_CONST 2 ( 0 )					  /python3.7/ast.py", line 35, in parse	    return c
							      20 LOAD_CONST 2 ( 1 )					    20 COMPARE_OP 4 ( > )					  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      22 BINARY_SUBTRACT					    22 POP_JUMP_IF_FALSE 28					  le "<unknown>", line 1     >	   ^ SyntaxError: un
							      24 CALL_FUNCTION 2					    								  expected EOF while parsing
							      26 GET_ITER						    20 24 LOAD_FAST 1 ( n )					  
							      >> 28 FOR_ITER 76 ( to 106 )				    26 LOAD_CONST 3 ( 1 )					  
							      30 STORE_FAST 3 ( i )					    28 INPLACE_ADD						  
							      								    30 STORE_FAST 1 ( n )					  
							      5 32 LOAD_FAST 0 ( arr )					    								  
							      34 LOAD_FAST 3 ( i )					    21 >> 32 LOAD_FAST 1 ( n )					  
							      36 BINARY_SUBSCR						    34 LOAD_CONST 4 ( > )					  
							      38 LOAD_FAST 0 ( arr )					    36 COMPARE_OP 4 ( > )					  
							      40 LOAD_FAST 3 ( i )					    38 POP_JUMP_IF_FALSE 44					  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 BINARY_ADD						    22 40 LOAD_FAST 1 ( n )					  
							      46 BINARY_SUBSCR						    42 LOAD_CONST 5 ( 1 )					  
							      48 COMPARE_OP 3 ( != )					    44 INPLACE_ADD						  
							      50 POP_JUMP_IF_FALSE 28					    46 STORE_FAST 1 ( n )					  
							      52 LOAD_FAST 0 ( arr )					    48 JUMP_FORWARD 4 ( to 44 )					  
							      54 LOAD_FAST 3 ( i )					    								  
							      56 BINARY_SUBSCR						    23 >> 50 LOAD_FAST 1 ( n )					  
							      58 LOAD_FAST 0 ( arr )					    52 LOAD_CONST 6 ( - 1 )					  
							      60 LOAD_FAST 3 ( i )					    54 INPLACE_ADD						  
							      62 LOAD_CONST 2 ( 1 )					    56 STORE_FAST 1 ( n )					  
							      64 BINARY_ADD						    								  
							      66 BINARY_SUBSCR						    24 58 LOAD_FAST 1 ( n )					  
							      68 LOAD_CONST 2 ( 1 )					    60 LOAD_CONST 7 ( - 1 )					  
							      70 BINARY_SUBTRACT					    62 INPLACE_ADD						  
							      72 COMPARE_OP 3 ( != )					    64 STORE_FAST 1 ( n )					  
							      74 POP_JUMP_IF_FALSE 28					    								  
							      								    25 66 LOAD_FAST 1 ( n )					  
							      6 76 LOAD_FAST 2 ( count )				    68 LOAD_CONST 8 ( - 1 )					  
							      78 LOAD_FAST 0 ( arr )					    70 INPLACE_ADD						  
							      80 LOAD_FAST 3 ( i )					    72 STORE_FAST 1 ( n )					  
							      82 LOAD_CONST 2 ( 1 )					    74 JUMP_FORWARD 4 ( to 44 )					  
							      84 BINARY_ADD						    								  
							      86 BINARY_SUBSCR						    26 >> 76 LOAD_FAST 1 ( n )					  
							      88 LOAD_FAST 0 ( arr )					    78 LOAD_CONST 9 ( - 1 )					  
							      90 LOAD_FAST 3 ( i )					    80 INPLACE_ADD						  
							      92 BINARY_SUBSCR						    82 STORE_FAST 1 ( n )					  
							      94 BINARY_SUBTRACT					    								  
							      96 LOAD_CONST 2 ( 1 )					    27 >> 84 LOAD_FAST 1 ( n )					  
							      98 BINARY_SUBTRACT					    86 LOAD_CONST 10 ( - 1 )					  
							      100 INPLACE_ADD						    88 INPLACE_ADD						  
							      102 STORE_FAST 2 ( count )				    90 STORE_FAST 1 ( n )					  
							      104 JUMP_ABSOLUTE 28					    								  
							      >> 106 POP_BLOCK						    28 92 LOAD_FAST 1 ( n )					  
							      								    94 LOAD_CONST 11 ( - 1 )					  
							      7 >> 108 LOAD_FAST 2 ( count )				    96 INPLACE_ADD						  
							      110 RETURN_VALUE NEW_LINE					    98 STORE_FAST 1 ( n )					  
							      								    								  
							      								    29 100 LOAD_FAST 1 ( n )					  
							      								    102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_CONST 12 ( - 1 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( n )					  
							      								    								  
							      								    30 110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_FAST 0 ( arr )					  
							      								    114 LOAD_CONST 13 ( - 1 )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 1 ( n )					  
							      								    								  
							      								    31 >> 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_CONST 14 ( - 1 )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 1 ( n )					  
							      								    128 LOAD_CONST 15 ( - 1 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( n )					  
							      								    								  
							      								    32 134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_CONST 15 ( - 1 )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( n )					  
							      								    								  
							      								    33 142 LOAD_FAST 1 ( n )					  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_OCTAL_CONVERSION			      PROGRAM_DECIMAL_OCTAL_CONVERSION				    PROGRAM_DECIMAL_OCTAL_CONVERSION				  PROGRAM_DECIMAL_OCTAL_CONVERSION
--							      --							    --								  --
def decToOctal ( n ) :					      Disassembly of <code object decToOctal at 0x7fbac0e8bc90, fil Disassembly of <code object decToOctal at 0x7f816a6e4b70, fil script_not_found : None
    octalNum = [ 0 ] * 100 ;				      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_GLOBAL 0 ( octalNum )				  
    i = 0 ;						      2 BUILD_LIST 1						    2 LOAD_FAST 0 ( n )						  
    while ( n != 0 ) :					      4 LOAD_CONST 2 ( 100 )					    4 LOAD_FAST 1 ( n )						  
	octalNum [ i ] = n % 8 ;			      6 BINARY_MULTIPLY						    6 LOAD_FAST 2 ( n )						  
	n = int ( n / 8 ) ;				      8 STORE_FAST 1 ( octalNum )				    8 LOAD_FAST 3 ( n )						  
	i += 1 ;					      								    10 LOAD_FAST 4 ( n )					  
    for j in range ( i - 1 , - 1 , - 1 ) :		      3 10 LOAD_CONST 1 ( 0 )					    12 CALL_FUNCTION 4						  
	print ( octalNum [ j ] , end = "" ) ;		      12 STORE_FAST 2 ( i )					    14 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 14 SETUP_LOOP 44 ( to 60 )				    								  
							      >> 16 LOAD_FAST 0 ( n )					    								  
							      18 LOAD_CONST 1 ( 0 )					    								  
							      20 COMPARE_OP 3 ( != )					    								  
							      22 POP_JUMP_IF_FALSE 58					    								  
							      								    								  
							      5 24 LOAD_FAST 0 ( n )					    								  
							      26 LOAD_CONST 3 ( 8 )					    								  
							      28 BINARY_MODULO						    								  
							      30 LOAD_FAST 1 ( octalNum )				    								  
							      32 LOAD_FAST 2 ( i )					    								  
							      34 STORE_SUBSCR						    								  
							      								    								  
							      6 36 LOAD_GLOBAL 0 ( int )				    								  
							      38 LOAD_FAST 0 ( n )					    								  
							      40 LOAD_CONST 3 ( 8 )					    								  
							      42 BINARY_TRUE_DIVIDE					    								  
							      44 CALL_FUNCTION 1					    								  
							      46 STORE_FAST 0 ( n )					    								  
							      								    								  
							      7 48 LOAD_FAST 2 ( i )					    								  
							      50 LOAD_CONST 4 ( 1 )					    								  
							      52 INPLACE_ADD						    								  
							      54 STORE_FAST 2 ( i )					    								  
							      56 JUMP_ABSOLUTE 16					    								  
							      >> 58 POP_BLOCK						    								  
							      								    								  
							      8 >> 60 SETUP_LOOP 40 ( to 102 )				    								  
							      62 LOAD_GLOBAL 1 ( range )				    								  
							      64 LOAD_FAST 2 ( i )					    								  
							      66 LOAD_CONST 4 ( 1 )					    								  
							      68 BINARY_SUBTRACT					    								  
							      70 LOAD_CONST 5 ( - 1 )					    								  
							      72 LOAD_CONST 5 ( - 1 )					    								  
							      74 CALL_FUNCTION 3					    								  
							      76 GET_ITER						    								  
							      >> 78 FOR_ITER 20 ( to 100 )				    								  
							      80 STORE_FAST 3 ( j )					    								  
							      								    								  
							      9 82 LOAD_GLOBAL 2 ( print )				    								  
							      84 LOAD_FAST 1 ( octalNum )				    								  
							      86 LOAD_FAST 3 ( j )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 LOAD_CONST 6 ( '' )					    								  
							      92 LOAD_CONST 7 ( ( 'end' , ) )				    								  
							      94 CALL_FUNCTION_KW 2					    								  
							      96 POP_TOP						    								  
							      98 JUMP_ABSOLUTE 78					    								  
							      >> 100 POP_BLOCK						    								  
							      >> 102 LOAD_CONST 0 ( None )				    								  
							      104 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		      FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		    FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		  FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S
--							      --							    --								  --
def findMax ( arr ) :					      Disassembly of <code object findMax at 0x7fbac0e8bc90, file " Disassembly of <code object findMax at 0x7f816a6e4b70, file " script_not_found : None
    row = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( arr )					  
    j = N - 1						      2 STORE_FAST 1 ( row )					    2 LOAD_CONST 1 ( - 1 )					  
    for i in range ( 0 , N ) :				      								    4 BINARY_SUBSCR						  
	while ( arr [ i ] [ j ] == 1 and j >= 0 ) :	      3 4 LOAD_GLOBAL 0 ( N )					    6 STORE_FAST 1 ( N )					  
	    row = i					      6 LOAD_CONST 2 ( 1 )					    								  
	    j -= 1					      8 BINARY_SUBTRACT						    27 8 LOAD_FAST 1 ( N )					  
    print ( "Row number = " , row + 1 , ", MaxCount = " , N - 10 STORE_FAST 2 ( j )					    10 LOAD_CONST 2 ( 0 )					  
							      								    12 BINARY_SUBSCR						  
							      4 12 SETUP_LOOP 60 ( to 74 )				    14 STORE_FAST 2 ( a )					  
							      14 LOAD_GLOBAL 1 ( range )				    								  
							      16 LOAD_CONST 1 ( 0 )					    28 16 LOAD_FAST 1 ( N )					  
							      18 LOAD_GLOBAL 0 ( N )					    18 LOAD_CONST 3 ( 1 )					  
							      20 CALL_FUNCTION 2					    20 COMPARE_OP 4 ( > )					  
							      22 GET_ITER						    22 POP_JUMP_IF_FALSE 28					  
							      >> 24 FOR_ITER 46 ( to 72 )				    								  
							      26 STORE_FAST 3 ( i )					    29 24 LOAD_FAST 1 ( N )					  
							      								    26 LOAD_CONST 4 ( 0 )					  
							      5 28 SETUP_LOOP 40 ( to 70 )				    28 COMPARE_OP 4 ( > )					  
							      >> 30 LOAD_FAST 0 ( arr )					    30 POP_JUMP_IF_FALSE 38					  
							      32 LOAD_FAST 3 ( i )					    								  
							      34 BINARY_SUBSCR						    30 32 LOAD_FAST 1 ( N )					  
							      36 LOAD_FAST 2 ( j )					    34 LOAD_CONST 5 ( 1 )					  
							      38 BINARY_SUBSCR						    36 COMPARE_OP 4 ( > )					  
							      40 LOAD_CONST 2 ( 1 )					    38 POP_JUMP_IF_FALSE 44					  
							      42 COMPARE_OP 2 ( == )					    								  
							      44 POP_JUMP_IF_FALSE 68					    31 40 LOAD_FAST 1 ( N )					  
							      46 LOAD_FAST 2 ( j )					    42 LOAD_CONST 6 ( 2 )					  
							      48 LOAD_CONST 1 ( 0 )					    44 COMPARE_OP 4 ( > )					  
							      50 COMPARE_OP 5 ( >= )					    46 POP_JUMP_IF_FALSE 44					  
							      52 POP_JUMP_IF_FALSE 68					    								  
							      								    32 48 LOAD_FAST 1 ( N )					  
							      6 54 LOAD_FAST 3 ( i )					    50 LOAD_CONST 7 ( 2 )					  
							      56 STORE_FAST 1 ( row )					    52 COMPARE_OP 4 ( > )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      7 58 LOAD_FAST 2 ( j )					    								  
							      60 LOAD_CONST 2 ( 1 )					    33 56 LOAD_FAST 1 ( N )					  
							      62 INPLACE_SUBTRACT					    58 LOAD_CONST 8 ( 2 )					  
							      64 STORE_FAST 2 ( j )					    60 COMPARE_OP 4 ( > )					  
							      66 JUMP_ABSOLUTE 30					    62 POP_JUMP_IF_FALSE 44					  
							      >> 68 POP_BLOCK						    								  
							      >> 70 JUMP_ABSOLUTE 24					    34 64 LOAD_FAST 1 ( N )					  
							      >> 72 POP_BLOCK						    66 LOAD_CONST 9 ( 2 )					  
							      								    68 COMPARE_OP 4 ( > )					  
							      8 >> 74 LOAD_GLOBAL 2 ( print )				    70 POP_JUMP_IF_FALSE 44					  
							      76 LOAD_CONST 3 ( 'Row number = ' )			    								  
							      78 LOAD_FAST 1 ( row )					    35 72 LOAD_FAST 1 ( N )					  
							      80 LOAD_CONST 2 ( 1 )					    74 LOAD_CONST 10 ( 2 )					  
							      82 BINARY_ADD						    76 COMPARE_OP 4 ( > )					  
							      84 LOAD_CONST 4 ( ', MaxCount = ' )			    78 POP_JUMP_IF_FALSE 90					  
							      86 LOAD_GLOBAL 0 ( N )					    								  
							      88 LOAD_CONST 2 ( 1 )					    36 80 LOAD_FAST 1 ( N )					  
							      90 BINARY_SUBTRACT					    82 LOAD_CONST 11 ( 1 )					  
							      92 LOAD_FAST 2 ( j )					    84 INPLACE_ADD						  
							      94 BINARY_SUBTRACT					    86 STORE_FAST 1 ( N )					  
							      96 CALL_FUNCTION 4					    								  
							      98 POP_TOP						    37 >> 88 LOAD_FAST 1 ( N )					  
							      100 LOAD_CONST 0 ( None )					    90 LOAD_CONST 12 ( 0 )					  
							      102 RETURN_VALUE NEW_LINE					    92 COMPARE_OP 4 ( > )					  
							      								    94 POP_JUMP_IF_FALSE 94					  
							      								    								  
							      								    38 96 LOAD_FAST 1 ( N )					  
							      								    98 LOAD_CONST 12 ( 0 )					  
							      								    100 COMPARE_OP 4 ( > )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    39 104 LOAD_FAST 1 ( N )					  
							      								    106 LOAD_CONST 13 ( 1 )					  
							      								    108 INPLACE_ADD						  
							      								    110 STORE_FAST 1 ( N )					  
							      								    								  
							      								    40 >> 112 LOAD_FAST 1 ( N )					  
							      								    114 LOAD_CONST 14 ( 2 )					  
							      								    116 COMPARE_OP 4 ( > )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    41 120 LOAD_FAST 1 ( N )					  
							      								    122 LOAD_CONST 15 ( 2 )					  
							      								    124 COMPARE_OP 4 ( > )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    42 128 LOAD_FAST 1 ( N )					  
							      								    130 LOAD_CONST 15 ( 2 )					  
							      								    132 COMPARE_OP 4 ( > )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    44 136 LOAD_FAST 1 ( N )					  
							      								    138 RETURN_VALUE						  
							      								    								  
							      								    43 >> 140 LOAD_FAST 1 ( N )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP	  GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP
--							      --							    --								  --
def isMinHeap ( level , n ) :				      Disassembly of <code object isMinHeap at 0x7fbac<<unk>> de40, Disassembly of <code object isMinHeap at 0x7f816a673a50, file script_not_found : None
    for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :	      2 0 SETUP_LOOP 104 ( to 106 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	if level [ i ] > level [ 2 * i + 1 ] :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    return False				      4 LOAD_GLOBAL 1 ( int )					    4 LOAD_CONST 1 ( 2 )					  
	if 2 * i + 2 < n :				      6 LOAD_FAST 1 ( n )					    6 CALL_FUNCTION 1						  
	    if level [ i ] > level [ 2 * i + 2 ] :	      8 LOAD_CONST 1 ( 2 )					    8 GET_ITER							  
		return False				      10 BINARY_TRUE_DIVIDE					    >> 10 FOR_ITER 22 ( to 24 )					  
    return True						      12 CALL_FUNCTION 1					    12 STORE_FAST 1 ( n )					  
							      14 LOAD_CONST 2 ( 1 )					    								  
							      16 BINARY_SUBTRACT					    27 14 LOAD_FAST 0 ( level )					  
							      18 LOAD_CONST 3 ( - 1 )					    16 LOAD_CONST 2 ( 1 )					  
							      20 LOAD_CONST 3 ( - 1 )					    18 COMPARE_OP 2 ( == )					  
							      22 CALL_FUNCTION 3					    20 POP_JUMP_IF_FALSE 10					  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 76 ( to 104 )				    28 22 LOAD_FAST 0 ( level )					  
							      28 STORE_FAST 2 ( i )					    24 LOAD_CONST 3 ( 1 )					  
							      								    26 COMPARE_OP 2 ( == )					  
							      3 30 LOAD_FAST 0 ( level )				    28 POP_JUMP_IF_FALSE 10					  
							      32 LOAD_FAST 2 ( i )					    								  
							      34 BINARY_SUBSCR						    29 30 LOAD_FAST 0 ( level )					  
							      36 LOAD_FAST 0 ( level )					    32 LOAD_CONST 4 ( 2 )					  
							      38 LOAD_CONST 1 ( 2 )					    34 COMPARE_OP 2 ( == )					  
							      40 LOAD_FAST 2 ( i )					    36 POP_JUMP_IF_FALSE 10					  
							      42 BINARY_MULTIPLY					    								  
							      44 LOAD_CONST 2 ( 1 )					    30 >> 38 LOAD_FAST 0 ( level )				  
							      46 BINARY_ADD						    40 LOAD_CONST 5 ( 1 )					  
							      48 BINARY_SUBSCR						    42 COMPARE_OP 2 ( == )					  
							      50 COMPARE_OP 4 ( > )					    44 POP_JUMP_IF_FALSE 10					  
							      52 POP_JUMP_IF_FALSE 58					    								  
							      								    31 46 LOAD_FAST 0 ( level )					  
							      4 54 LOAD_CONST 4 ( False )				    48 LOAD_CONST 6 ( 2 )					  
							      56 RETURN_VALUE						    50 COMPARE_OP 2 ( == )					  
							      								    52 POP_JUMP_IF_FALSE 10					  
							      5 >> 58 LOAD_CONST 1 ( 2 )				    								  
							      60 LOAD_FAST 2 ( i )					    32 54 LOAD_FAST 0 ( level )					  
							      62 BINARY_MULTIPLY					    56 LOAD_CONST 7 ( 2 )					  
							      64 LOAD_CONST 1 ( 2 )					    58 COMPARE_OP 2 ( == )					  
							      66 BINARY_ADD						    60 POP_JUMP_IF_FALSE 10					  
							      68 LOAD_FAST 1 ( n )					    								  
							      70 COMPARE_OP 0 ( < )					    33 62 LOAD_FAST 0 ( level )					  
							      72 POP_JUMP_IF_FALSE 26					    64 LOAD_CONST 8 ( 3 )					  
							      								    66 COMPARE_OP 2 ( == )					  
							      6 74 LOAD_FAST 0 ( level )				    68 POP_JUMP_IF_FALSE 10					  
							      76 LOAD_FAST 2 ( i )					    								  
							      78 BINARY_SUBSCR						    34 70 LOAD_FAST 0 ( level )					  
							      80 LOAD_FAST 0 ( level )					    72 LOAD_CONST 9 ( 1 )					  
							      82 LOAD_CONST 1 ( 2 )					    74 INPLACE_ADD						  
							      84 LOAD_FAST 2 ( i )					    76 STORE_FAST 0 ( level )					  
							      86 BINARY_MULTIPLY					    78 JUMP_ABSOLUTE 10						  
							      88 LOAD_CONST 1 ( 2 )					    >> 80 POP_BLOCK						  
							      90 BINARY_ADD						    								  
							      92 BINARY_SUBSCR						    35 >> 82 LOAD_FAST 0 ( level )				  
							      94 COMPARE_OP 4 ( > )					    84 RETURN_VALUE						  
							      96 POP_JUMP_IF_FALSE 26					    NEW_LINE							  
							      								    								  
							      7 98 LOAD_CONST 4 ( False )				    								  
							      100 RETURN_VALUE						    								  
							      102 JUMP_ABSOLUTE 26					    								  
							      >> 104 POP_BLOCK						    								  
							      								    								  
							      8 >> 106 LOAD_CONST 5 ( True )				    								  
							      108 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE				      LONGEST_COMMON_SUBSEQUENCE				    LONGEST_COMMON_SUBSEQUENCE					  LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
def lcs ( X , Y , m , n ) :				      Disassembly of <code object lcs at 0x7fbac<<unk>> d540, file  Disassembly of <code object lcs at 0x7f816a673a50, file "<dis script_not_found : None
    if m == 0 or n == 0 :				      2 0 LOAD_FAST 2 ( m )					    26 0 LOAD_FAST 0 ( X )					  
	return 0 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    elif X [ m - 1 ] == Y [ n - 1 ] :			      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
	return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( 1 )					  
    else :						      8 LOAD_FAST 3 ( n )					    8 COMPARE_OP 2 ( == )					  
	return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  10 LOAD_CONST 1 ( 0 )					    10 POP_JUMP_IF_FALSE 16					  
							      12 COMPARE_OP 2 ( == )					    								  
							      14 POP_JUMP_IF_FALSE 20					    27 12 LOAD_FAST 0 ( X )					  
							      								    14 LOAD_CONST 1 ( 0 )					  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    16 BINARY_SUBSCR						  
							      18 RETURN_VALUE						    18 LOAD_CONST 3 ( 1 )					  
							      								    20 COMPARE_OP 2 ( == )					  
							      4 >> 20 LOAD_FAST 0 ( X )					    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_FAST 2 ( m )					    								  
							      24 LOAD_CONST 2 ( 1 )					    28 >> 24 LOAD_FAST 0 ( X )					  
							      26 BINARY_SUBTRACT					    26 LOAD_CONST 1 ( 0 )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 1 ( Y )					    30 LOAD_CONST 4 ( 1 )					  
							      32 LOAD_FAST 3 ( n )					    32 COMPARE_OP 2 ( == )					  
							      34 LOAD_CONST 2 ( 1 )					    34 POP_JUMP_IF_FALSE 44					  
							      36 BINARY_SUBTRACT					    								  
							      38 BINARY_SUBSCR						    29 36 LOAD_FAST 0 ( X )					  
							      40 COMPARE_OP 2 ( == )					    38 LOAD_CONST 1 ( 0 )					  
							      42 POP_JUMP_IF_FALSE 70					    40 BINARY_SUBSCR						  
							      								    42 LOAD_CONST 5 ( 1 )					  
							      5 44 LOAD_CONST 2 ( 1 )					    44 BINARY_SUBSCR						  
							      46 LOAD_GLOBAL 0 ( lcs )					    46 LOAD_CONST 6 ( 2 )					  
							      48 LOAD_FAST 0 ( X )					    48 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 1 ( Y )					    50 POP_JUMP_IF_FALSE 52					  
							      52 LOAD_FAST 2 ( m )					    								  
							      54 LOAD_CONST 2 ( 1 )					    30 52 LOAD_FAST 0 ( X )					  
							      56 BINARY_SUBTRACT					    54 LOAD_CONST 1 ( 0 )					  
							      58 LOAD_FAST 3 ( n )					    56 BINARY_SUBSCR						  
							      60 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 7 ( 1 )					  
							      62 BINARY_SUBTRACT					    60 BINARY_SUBSCR						  
							      64 CALL_FUNCTION 4					    62 LOAD_CONST 8 ( 2 )					  
							      66 BINARY_ADD						    64 COMPARE_OP 2 ( == )					  
							      68 RETURN_VALUE						    66 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 >> 70 LOAD_GLOBAL 1 ( max )				    31 68 LOAD_FAST 0 ( X )					  
							      72 LOAD_GLOBAL 0 ( lcs )					    70 LOAD_CONST 1 ( 0 )					  
							      74 LOAD_FAST 0 ( X )					    72 BINARY_SUBSCR						  
							      76 LOAD_FAST 1 ( Y )					    74 LOAD_CONST 9 ( 1 )					  
							      78 LOAD_FAST 2 ( m )					    76 BINARY_SUBSCR						  
							      80 LOAD_FAST 3 ( n )					    78 LOAD_CONST 10 ( 2 )					  
							      82 LOAD_CONST 2 ( 1 )					    80 COMPARE_OP 2 ( == )					  
							      84 BINARY_SUBTRACT					    82 POP_JUMP_IF_FALSE 88					  
							      86 CALL_FUNCTION 4					    								  
							      88 LOAD_GLOBAL 0 ( lcs )					    32 84 LOAD_FAST 0 ( X )					  
							      90 LOAD_FAST 0 ( X )					    86 LOAD_CONST 1 ( 0 )					  
							      92 LOAD_FAST 1 ( Y )					    88 BINARY_SUBSCR						  
							      94 LOAD_FAST 2 ( m )					    90 LOAD_CONST 1 ( 0 )					  
							      96 LOAD_CONST 2 ( 1 )					    92 BINARY_SUBSCR						  
							      98 BINARY_SUBTRACT					    94 LOAD_CONST 1 ( 0 )					  
							      100 LOAD_FAST 3 ( n )					    96 BINARY_SUBSCR						  
							      102 CALL_FUNCTION 4					    98 LOAD_CONST 1 ( 0 )					  
							      104 CALL_FUNCTION 2					    100 BINARY_SUBSCR						  
							      106 RETURN_VALUE						    102 LOAD_CONST 1 ( 0 )					  
							      108 LOAD_CONST 0 ( None )					    104 BINARY_SUBSCR						  
							      110 RETURN_VALUE NEW_LINE					    106 LOAD_CONST 1 ( 0 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 1 ( 0 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 1 ( 0 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 11 ( ( 'X' , 'X' , 'X' , 'X' , 'X' , 'X' , 'X' 
							      								    20 BUILD_CONST_KEY_MAP 7					  
							      								    22 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT
--							      --							    --								  --
def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :	      Disassembly of <code object findTriplet at 0x7fbac<<unk>> de4 Disassembly of <code object findTriplet at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    68 0 LOAD_GLOBAL 0 ( set )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n1 ) :				      2 CALL_FUNCTION 0						    2 LOAD_FAST 1 ( a2 )					  item in run_dis_script():   File "XLM/dis_script.p
	s.add ( a1 [ i ] )				      4 STORE_FAST 7 ( s )					    4 CALL_FUNCTION 1						  y", line 54, in run_dis_script     hyp_co = mco.to
    for i in range ( n2 ) :				      								    6 STORE_FAST 2 ( a2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	for j in range ( n3 ) :				      3 6 SETUP_LOOP 30 ( to 38 )				    								  assembler.py", line 81, in to_co     co_consts.app
	    if sum - a2 [ i ] - a3 [ j ] in s :		      8 LOAD_GLOBAL 1 ( range )					    69 8 LOAD_FAST 0 ( a1 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
		return True				      10 LOAD_FAST 3 ( n1 )					    10 LOAD_FAST 2 ( a2 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    return False					      12 CALL_FUNCTION 1					    12 COMPARE_OP 2 ( == )					  co	 self.co_cellvars, ValueError: code: varname
							      14 GET_ITER						    14 POP_JUMP_IF_FALSE 28					  s is too small
							      >> 16 FOR_ITER 18 ( to 36 )				    								  
							      18 STORE_FAST 8 ( i )					    70 16 LOAD_FAST 0 ( a1 )					  
							      								    18 LOAD_FAST 2 ( a2 )					  
							      4 20 LOAD_FAST 7 ( s )					    20 COMPARE_OP 2 ( == )					  
							      22 LOAD_METHOD 2 ( add )					    22 POP_JUMP_IF_FALSE 28					  
							      24 LOAD_FAST 0 ( a1 )					    								  
							      26 LOAD_FAST 8 ( i )					    71 24 LOAD_FAST 0 ( a1 )					  
							      28 BINARY_SUBSCR						    26 LOAD_FAST 2 ( a2 )					  
							      30 CALL_METHOD 1						    28 COMPARE_OP 2 ( == )					  
							      32 POP_TOP						    30 POP_JUMP_IF_FALSE 28					  
							      34 JUMP_ABSOLUTE 16					    								  
							      >> 36 POP_BLOCK						    72 32 LOAD_FAST 0 ( a1 )					  
							      								    34 LOAD_FAST 2 ( a2 )					  
							      5 >> 38 SETUP_LOOP 62 ( to 102 )				    36 COMPARE_OP 2 ( == )					  
							      40 LOAD_GLOBAL 1 ( range )				    38 POP_JUMP_IF_FALSE 42					  
							      42 LOAD_FAST 4 ( n2 )					    								  
							      44 CALL_FUNCTION 1					    73 40 LOAD_FAST 0 ( a1 )					  
							      46 GET_ITER						    42 LOAD_FAST 2 ( a2 )					  
							      >> 48 FOR_ITER 50 ( to 100 )				    44 COMPARE_OP 2 ( == )					  
							      50 STORE_FAST 8 ( i )					    46 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      6 52 SETUP_LOOP 44 ( to 98 )				    74 48 LOAD_FAST 0 ( a1 )					  
							      54 LOAD_GLOBAL 1 ( range )				    50 LOAD_FAST 2 ( a2 )					  
							      56 LOAD_FAST 5 ( n3 )					    52 COMPARE_OP 2 ( == )					  
							      58 CALL_FUNCTION 1					    54 POP_JUMP_IF_FALSE 48					  
							      60 GET_ITER						    								  
							      >> 62 FOR_ITER 32 ( to 96 )				    75 56 LOAD_FAST 0 ( a1 )					  
							      64 STORE_FAST 9 ( j )					    58 LOAD_FAST 2 ( a2 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      7 66 LOAD_FAST 6 ( sum )					    62 POP_JUMP_IF_FALSE 48					  
							      68 LOAD_FAST 1 ( a2 )					    								  
							      70 LOAD_FAST 8 ( i )					    76 64 LOAD_FAST 0 ( a1 )					  
							      72 BINARY_SUBSCR						    66 LOAD_FAST 2 ( a2 )					  
							      74 BINARY_SUBTRACT					    68 COMPARE_OP 2 ( == )					  
							      76 LOAD_FAST 2 ( a3 )					    70 POP_JUMP_IF_FALSE 48					  
							      78 LOAD_FAST 9 ( j )					    								  
							      80 BINARY_SUBSCR						    77 72 LOAD_FAST 0 ( a1 )					  
							      82 BINARY_SUBTRACT					    74 LOAD_FAST 2 ( a2 )					  
							      84 LOAD_FAST 7 ( s )					    76 COMPARE_OP 2 ( == )					  
							      86 COMPARE_OP 6 ( in )					    78 POP_JUMP_IF_FALSE 48					  
							      88 POP_JUMP_IF_FALSE 62					    								  
							      								    78 80 LOAD_FAST 0 ( a1 )					  
							      8 90 LOAD_CONST 1 ( True )				    82 LOAD_FAST 2 ( a2 )					  
							      92 RETURN_VALUE						    84 COMPARE_OP 2 ( == )					  
							      94 JUMP_ABSOLUTE 62					    86 POP_JUMP_IF_FALSE 48					  
							      >> 96 POP_BLOCK						    								  
							      >> 98 JUMP_ABSOLUTE 48					    79 88 LOAD_FAST 0 ( a1 )					  
							      >> 100 POP_BLOCK						    90 LOAD_FAST 2 ( a2 )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      9 >> 102 LOAD_CONST 2 ( False )				    94 POP_JUMP_IF_FALSE 48					  
							      104 RETURN_VALUE NEW_LINE					    								  
							      								    80 96 LOAD_FAST 0 ( a1 )					  
							      								    98 LOAD_FAST 2 ( a2 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    81 104 LOAD_FAST 0 ( a1 )					  
							      								    106 LOAD_FAST 2 ( a2 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    82 112 LOAD_FAST 0 ( a1 )					  
							      								    114 LOAD_FAST 2 ( a2 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    83 120 LOAD_FAST 0 ( a1 )					  
							      								    122 LOAD_FAST 2 ( a2 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 132					  
							      								    								  
							      								    84 128 LOAD_FAST 0 ( a1 )					  
							      								    130 LOAD_FAST 2 ( a2 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 132					  
							      								    136 LOAD_FAST 0 ( a1 )					  
							      								    138 RETURN_VALUE						  
							      								    >> 140 LOAD_CONST 1 ( None )				  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ALTERNATIVE_SORTING					      ALTERNATIVE_SORTING					    ALTERNATIVE_SORTING						  ALTERNATIVE_SORTING
--							      --							    --								  --
def alternateSort ( arr , n ) :				      Disassembly of <code object alternateSort at 0x7fbac<<unk>> d Disassembly of <code object alternateSort at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    i = 0						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 49, in <module>	  Fi
    j = n - 1						      4 CALL_METHOD 0						    4 INPLACE_ADD						  le "<dis>", line 2, in alternateSort TypeError: 'i
    while ( i < j ) :					      6 POP_TOP							    6 STORE_FAST 1 ( n )					  nt' object is not iterable
	print ( arr [ j ] , end = " " )			      								    								  
	j -= 1						      3 8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 1 ( n )					  
	print ( arr [ i ] , end = " " )			      10 STORE_FAST 2 ( i )					    10 LOAD_CONST 2 ( 2 )					  
	i += 1						      								    12 BINARY_MULTIPLY						  
    if ( n % 2 != 0 ) :					      4 12 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( n )					  
	print ( arr [ i ] )				      14 LOAD_CONST 2 ( 1 )					    								  
							      16 BINARY_SUBTRACT					    28 16 LOAD_FAST 0 ( arr )					  
							      18 STORE_FAST 3 ( j )					    18 LOAD_METHOD 0 ( sort )					  
							      								    20 CALL_METHOD 0						  
							      5 20 SETUP_LOOP 60 ( to 82 )				    22 STORE_FAST 3 ( arr )					  
							      >> 22 LOAD_FAST 2 ( i )					    								  
							      24 LOAD_FAST 3 ( j )					    29 24 LOAD_FAST 3 ( arr )					  
							      26 COMPARE_OP 0 ( < )					    26 LOAD_METHOD 0 ( sort )					  
							      28 POP_JUMP_IF_FALSE 80					    28 CALL_METHOD 0						  
							      								    30 STORE_FAST 4 ( res )					  
							      6 30 LOAD_GLOBAL 1 ( print )				    								  
							      32 LOAD_FAST 0 ( arr )					    30 32 LOAD_FAST 0 ( arr )					  
							      34 LOAD_FAST 3 ( j )					    34 LOAD_METHOD 0 ( sort )					  
							      36 BINARY_SUBSCR						    36 CALL_METHOD 0						  
							      38 LOAD_CONST 3 ( ' ' )					    38 STORE_FAST 5 ( res )					  
							      40 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      42 CALL_FUNCTION_KW 2					    31 40 LOAD_FAST 5 ( res )					  
							      44 POP_TOP						    42 LOAD_METHOD 0 ( sort )					  
							      								    44 CALL_METHOD 0						  
							      7 46 LOAD_FAST 3 ( j )					    46 STORE_FAST 6 ( res )					  
							      48 LOAD_CONST 2 ( 1 )					    								  
							      50 INPLACE_SUBTRACT					    32 48 LOAD_FAST 6 ( res )					  
							      52 STORE_FAST 3 ( j )					    50 LOAD_METHOD 0 ( sort )					  
							      								    52 CALL_METHOD 0						  
							      8 54 LOAD_GLOBAL 1 ( print )				    54 STORE_FAST 7 ( res )					  
							      56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 2 ( i )					    33 56 LOAD_FAST 7 ( res )					  
							      60 BINARY_SUBSCR						    58 LOAD_METHOD 0 ( sort )					  
							      62 LOAD_CONST 3 ( ' ' )					    60 CALL_METHOD 0						  
							      64 LOAD_CONST 4 ( ( 'end' , ) )				    62 STORE_FAST 8 ( res )					  
							      66 CALL_FUNCTION_KW 2					    								  
							      68 POP_TOP						    34 64 LOAD_FAST 0 ( arr )					  
							      								    66 LOAD_METHOD 0 ( sort )					  
							      9 70 LOAD_FAST 2 ( i )					    68 CALL_METHOD 0						  
							      72 LOAD_CONST 2 ( 1 )					    70 LOAD_METHOD 0 ( sort )					  
							      74 INPLACE_ADD						    72 CALL_METHOD 0						  
							      76 STORE_FAST 2 ( i )					    74 STORE_FAST 9 ( res )					  
							      78 JUMP_ABSOLUTE 22					    								  
							      >> 80 POP_BLOCK						    35 76 LOAD_FAST 0 ( arr )					  
							      								    78 LOAD_METHOD 0 ( sort )					  
							      10 >> 82 LOAD_FAST 1 ( n )				    80 CALL_METHOD 0						  
							      84 LOAD_CONST 5 ( 2 )					    82 POP_TOP							  
							      86 BINARY_MODULO						    								  
							      88 LOAD_CONST 1 ( 0 )					    36 84 LOAD_FAST 0 ( arr )					  
							      90 COMPARE_OP 3 ( != )					    86 LOAD_METHOD 0 ( sort )					  
							      92 POP_JUMP_IF_FALSE 106					    88 CALL_METHOD 0						  
							      								    90 POP_TOP							  
							      11 94 LOAD_GLOBAL 1 ( print )				    92 LOAD_CONST 3 ( None )					  
							      96 LOAD_FAST 0 ( arr )					    94 RETURN_VALUE						  
							      98 LOAD_FAST 2 ( i )					    NEW_LINE							  
							      100 BINARY_SUBSCR						    								  
							      102 CALL_FUNCTION 1					    								  
							      104 POP_TOP						    								  
							      >> 106 LOAD_CONST 0 ( None )				    								  
							      108 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT
--							      --							    --								  --
def check ( st ) :					      Disassembly of <code object check at 0x7fbac<<unk>> de40, fil Disassembly of <code object check at 0x7f816afaa150, file "<d script_not_found : None
    n = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    16 0 LOAD_GLOBAL 0 ( n )					  
    oddDigSum = 0					      2 LOAD_FAST 0 ( st )					    2 LOAD_GLOBAL 1 ( ddddSum )					  
    evenDigSum = 0					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 0 , n ) :				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	if ( i % 2 == 0 ) :				      								    								  
	    oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )  3 8 LOAD_CONST 1 ( 0 )					    17 8 LOAD_FAST 1 ( n )					  
	else :						      10 STORE_FAST 2 ( oddDigSum )				    10 LOAD_CONST 1 ( 0 )					  
	    evenDigSum = evenDigSum + ( ( int ) ( st [ i ] )  								    12 BINARY_SUBSCR						  
    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )	      4 12 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 2 ( n )					  
							      14 STORE_FAST 3 ( evenDigSum )				    								  
							      								    18 16 LOAD_FAST 0 ( st )					  
							      5 16 SETUP_LOOP 64 ( to 82 )				    18 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_GLOBAL 1 ( range )				    20 BINARY_SUBSCR						  
							      20 LOAD_CONST 1 ( 0 )					    22 STORE_FAST 3 ( n )					  
							      22 LOAD_FAST 1 ( n )					    								  
							      24 CALL_FUNCTION 2					    19 24 LOAD_FAST 1 ( n )					  
							      26 GET_ITER						    26 LOAD_CONST 3 ( 1 )					  
							      >> 28 FOR_ITER 50 ( to 80 )				    28 BINARY_SUBSCR						  
							      30 STORE_FAST 4 ( i )					    30 LOAD_CONST 4 ( 2 )					  
							      								    32 COMPARE_OP 2 ( == )					  
							      6 32 LOAD_FAST 4 ( i )					    34 POP_JUMP_IF_FALSE 44					  
							      34 LOAD_CONST 2 ( 2 )					    								  
							      36 BINARY_MODULO						    20 36 LOAD_FAST 1 ( n )					  
							      38 LOAD_CONST 1 ( 0 )					    38 LOAD_CONST 5 ( 1 )					  
							      40 COMPARE_OP 2 ( == )					    40 BINARY_SUBSCR						  
							      42 POP_JUMP_IF_FALSE 62					    42 STORE_FAST 1 ( n )					  
							      								    								  
							      7 44 LOAD_FAST 2 ( oddDigSum )				    21 >> 44 LOAD_GLOBAL 2 ( print )				  
							      46 LOAD_GLOBAL 2 ( int )					    46 LOAD_FAST 1 ( n )					  
							      48 LOAD_FAST 0 ( st )					    48 LOAD_CONST 6 ( '%d %d %d %d %d %d %d %d %d %d %d %d %d %d  
							      50 LOAD_FAST 4 ( i )					    50 LOAD_FAST 1 ( n )					  
							      52 BINARY_SUBSCR						    52 BINARY_MODULO						  
							      54 CALL_FUNCTION 1					    54 CALL_FUNCTION 1						  
							      56 BINARY_ADD						    56 POP_TOP							  
							      58 STORE_FAST 2 ( oddDigSum )				    58 LOAD_CONST 0 ( None )					  
							      60 JUMP_ABSOLUTE 28					    60 RETURN_VALUE						  
							      								    NEW_LINE							  
							      9 >> 62 LOAD_FAST 3 ( evenDigSum )			    								  
							      64 LOAD_GLOBAL 2 ( int )					    								  
							      66 LOAD_FAST 0 ( st )					    								  
							      68 LOAD_FAST 4 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 CALL_FUNCTION 1					    								  
							      74 BINARY_ADD						    								  
							      76 STORE_FAST 3 ( evenDigSum )				    								  
							      78 JUMP_ABSOLUTE 28					    								  
							      >> 80 POP_BLOCK						    								  
							      								    								  
							      10 >> 82 LOAD_FAST 2 ( oddDigSum )			    								  
							      84 LOAD_FAST 3 ( evenDigSum )				    								  
							      86 BINARY_SUBTRACT					    								  
							      88 LOAD_CONST 3 ( 11 )					    								  
							      90 BINARY_MODULO						    								  
							      92 LOAD_CONST 1 ( 0 )					    								  
							      94 COMPARE_OP 2 ( == )					    								  
							      96 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		      COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		    COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		  COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION
--							      --							    --								  --
def countPair ( a , b ) :				      Disassembly of <code object countPair at 0x7fbac<<unk>> de40, Disassembly of <code object countPair at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    s = str ( b )					      2 0 LOAD_GLOBAL 0 ( str )					    20 0 LOAD_FAST 1 ( b )					  "XLM/dis_script.py", line 59, in <module>	for
    i = 0						      2 LOAD_FAST 1 ( b )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    while i < ( len ( s ) ) :				      4 CALL_FUNCTION 1						    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
	if ( s [ i ] != '9' ) :				      6 STORE_FAST 2 ( s )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	    break					      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	i += 1						      3 8 LOAD_CONST 1 ( 0 )					    21 8 LOAD_CONST 2 ( 1 )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
    result = 0						      10 STORE_FAST 3 ( i )					    10 RETURN_VALUE						  n parse     code.append(arg) ValueError: byte must
    if ( i == len ( s ) ) :				      								    								   be in range(0, 256)
	result = a * len ( s )				      4 12 SETUP_LOOP 38 ( to 52 )				    22 >> 12 LOAD_FAST 1 ( b )					  
    else :						      >> 14 LOAD_FAST 3 ( i )					    14 LOAD_CONST 1 ( 0 )					  
	result = a * ( len ( s ) - 1 )			      16 LOAD_GLOBAL 1 ( len )					    16 COMPARE_OP 2 ( == )					  
    return result					      18 LOAD_FAST 2 ( s )					    18 POP_JUMP_IF_FALSE 28					  
							      20 CALL_FUNCTION 1					    								  
							      22 COMPARE_OP 0 ( < )					    23 20 LOAD_CONST 3 ( 1 )					  
							      24 POP_JUMP_IF_FALSE 50					    22 RETURN_VALUE						  
							      								    								  
							      5 26 LOAD_FAST 2 ( s )					    24 >> 24 LOAD_FAST 1 ( b )					  
							      28 LOAD_FAST 3 ( i )					    26 LOAD_CONST 1 ( 0 )					  
							      30 BINARY_SUBSCR						    28 COMPARE_OP 2 ( == )					  
							      32 LOAD_CONST 2 ( '9' )					    30 POP_JUMP_IF_FALSE 38					  
							      34 COMPARE_OP 3 ( != )					    								  
							      36 POP_JUMP_IF_FALSE 40					    25 32 LOAD_CONST 4 ( 1 )					  
							      								    34 RETURN_VALUE						  
							      6 38 BREAK_LOOP						    								  
							      								    26 >> 36 LOAD_FAST 1 ( b )					  
							      7 >> 40 LOAD_FAST 3 ( i )					    38 LOAD_CONST 1 ( 0 )					  
							      42 LOAD_CONST 3 ( 1 )					    40 COMPARE_OP 2 ( == )					  
							      44 INPLACE_ADD						    42 POP_JUMP_IF_FALSE 48					  
							      46 STORE_FAST 3 ( i )					    								  
							      48 JUMP_ABSOLUTE 14					    27 44 LOAD_CONST 5 ( 1 )					  
							      >> 50 POP_BLOCK						    46 RETURN_VALUE						  
							      								    48 JUMP_FORWARD 2 ( to 48 )					  
							      8 >> 52 LOAD_CONST 1 ( 0 )				    >> 50 LOAD_CONST 6 ( 1 )					  
							      54 STORE_FAST 4 ( result )				    >> 52 STORE_FAST 1 ( b )					  
							      								    								  
							      9 56 LOAD_FAST 3 ( i )					    28 54 LOAD_FAST 1 ( b )					  
							      58 LOAD_GLOBAL 1 ( len )					    56 LOAD_CONST 1 ( 0 )					  
							      60 LOAD_FAST 2 ( s )					    58 COMPARE_OP 2 ( == )					  
							      62 CALL_FUNCTION 1					    60 POP_JUMP_IF_FALSE 66					  
							      64 COMPARE_OP 2 ( == )					    								  
							      66 POP_JUMP_IF_FALSE 82					    29 62 LOAD_CONST 7 ( 1 )					  
							      								    64 RETURN_VALUE						  
							      10 68 LOAD_FAST 0 ( a )					    								  
							      70 LOAD_GLOBAL 1 ( len )					    30 >> 66 LOAD_FAST 1 ( b )					  
							      72 LOAD_FAST 2 ( s )					    68 LOAD_CONST 1 ( 0 )					  
							      74 CALL_FUNCTION 1					    70 COMPARE_OP 2 ( == )					  
							      76 BINARY_MULTIPLY					    72 POP_JUMP_IF_FALSE 80					  
							      78 STORE_FAST 4 ( result )				    								  
							      80 JUMP_FORWARD 16 ( to 98 )				    31 74 LOAD_CONST 8 ( 1 )					  
							      								    76 RETURN_VALUE						  
							      12 >> 82 LOAD_FAST 0 ( a )				    								  
							      84 LOAD_GLOBAL 1 ( len )					    32 >> 78 LOAD_FAST 1 ( b )					  
							      86 LOAD_FAST 2 ( s )					    80 LOAD_CONST 1 ( 0 )					  
							      88 CALL_FUNCTION 1					    82 COMPARE_OP 2 ( == )					  
							      90 LOAD_CONST 3 ( 1 )					    84 POP_JUMP_IF_FALSE 84					  
							      92 BINARY_SUBTRACT					    								  
							      94 BINARY_MULTIPLY					    33 86 LOAD_CONST 9 ( 1 )					  
							      96 STORE_FAST 4 ( result )				    88 RETURN_VALUE						  
							      								    								  
							      13 >> 98 LOAD_FAST 4 ( result )				    34 >> 90 LOAD_FAST 1 ( b )					  
							      100 RETURN_VALUE NEW_LINE					    92 LOAD_CONST 1 ( 0 )					  
							      								    94 COMPARE_OP 2 ( == )					  
							      								    96 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      								    35 98 LOAD_CONST 10 ( 1 )					  
							      								    100 RETURN_VALUE						  
							      								    								  
							      								    36 >> 102 LOAD_CONST 11 ( 1 )				  
							      								    104 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIRROR_CHARACTERS_STRING				      MIRROR_CHARACTERS_STRING					    MIRROR_CHARACTERS_STRING					  MIRROR_CHARACTERS_STRING
--							      --							    --								  --
def compute ( st , n ) :				      Disassembly of <code object compute at 0x7fbac<<unk>> d540, f Disassembly of <code object compute at 0x7f816a6e4b70, file " script_not_found : None
    reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba"	      2 0 LOAD_CONST 1 ( 'zyxwvutsrqponmlkjihgfedcba' )		    40 0 LOAD_FAST 1 ( n )					  
    l = len ( st )					      2 STORE_FAST 2 ( reverseAlphabet )			    2 LOAD_FAST 0 ( st )					  
    answer = ""						      								    4 STORE_ATTR 0 ( reversereverseababababababababababababababab 
    for i in range ( 0 , n ) :				      3 4 LOAD_GLOBAL 0 ( len )					    								  
	answer = answer + st [ i ] ;			      6 LOAD_FAST 0 ( st )					    								  
    for i in range ( n , l ) :				      8 CALL_FUNCTION 1						    								  
	answer = ( answer + reverseAlphabet [ ord ( st [ i ]  10 STORE_FAST 3 ( l )					    								  
    return answer ;					      								    								  
							      4 12 LOAD_CONST 2 ( '' )					    								  
							      14 STORE_FAST 4 ( answer )				    								  
							      								    								  
							      5 16 SETUP_LOOP 30 ( to 48 )				    								  
							      18 LOAD_GLOBAL 1 ( range )				    								  
							      20 LOAD_CONST 3 ( 0 )					    								  
							      22 LOAD_FAST 1 ( n )					    								  
							      24 CALL_FUNCTION 2					    								  
							      26 GET_ITER						    								  
							      >> 28 FOR_ITER 16 ( to 46 )				    								  
							      30 STORE_FAST 5 ( i )					    								  
							      								    								  
							      6 32 LOAD_FAST 4 ( answer )				    								  
							      34 LOAD_FAST 0 ( st )					    								  
							      36 LOAD_FAST 5 ( i )					    								  
							      38 BINARY_SUBSCR						    								  
							      40 BINARY_ADD						    								  
							      42 STORE_FAST 4 ( answer )				    								  
							      44 JUMP_ABSOLUTE 28					    								  
							      >> 46 POP_BLOCK						    								  
							      								    								  
							      7 >> 48 SETUP_LOOP 46 ( to 96 )				    								  
							      50 LOAD_GLOBAL 1 ( range )				    								  
							      52 LOAD_FAST 1 ( n )					    								  
							      54 LOAD_FAST 3 ( l )					    								  
							      56 CALL_FUNCTION 2					    								  
							      58 GET_ITER						    								  
							      >> 60 FOR_ITER 32 ( to 94 )				    								  
							      62 STORE_FAST 5 ( i )					    								  
							      								    								  
							      8 64 LOAD_FAST 4 ( answer )				    								  
							      66 LOAD_FAST 2 ( reverseAlphabet )			    								  
							      68 LOAD_GLOBAL 2 ( ord )					    								  
							      70 LOAD_FAST 0 ( st )					    								  
							      72 LOAD_FAST 5 ( i )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 CALL_FUNCTION 1					    								  
							      78 LOAD_GLOBAL 2 ( ord )					    								  
							      80 LOAD_CONST 4 ( 'a' )					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 BINARY_SUBTRACT					    								  
							      86 BINARY_SUBSCR						    								  
							      88 BINARY_ADD						    								  
							      90 STORE_FAST 4 ( answer )				    								  
							      92 JUMP_ABSOLUTE 60					    								  
							      >> 94 POP_BLOCK						    								  
							      								    								  
							      9 >> 96 LOAD_FAST 4 ( answer )				    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY
--							      --							    --								  --
def countPairs ( arr , n ) :				      Disassembly of <code object countPairs at 0x7fbac<<unk>> de40 Disassembly of <code object countPairs at 0x7f816a683c00, fil error : Traceback (most recent call last):   File
    result = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( result )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 36, in <module>	  Fi
	for j in range ( i + 1 , n ) :			      								    								  le "<dis>", line 2, in countPairs AttributeError:
	    product = arr [ i ] * arr [ j ] ;		      3 4 SETUP_LOOP 100 ( to 106 )				    66 4 SETUP_LOOP 44 ( to 46 )				  'list' object has no attribute 'shape'
	    for k in range ( 0 , n ) :			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_FAST 0 ( arr )					  
		if ( arr [ k ] == product ) :		      8 LOAD_CONST 1 ( 0 )					    8 LOAD_ATTR 0 ( shape )					  
		    result = result + 1 ;		      10 LOAD_FAST 1 ( n )					    10 GET_ITER							  
		    break ;				      12 CALL_FUNCTION 2					    >> 12 FOR_ITER 44 ( to 46 )					  
    return result ;					      14 GET_ITER						    14 STORE_FAST 2 ( i )					  
							      >> 16 FOR_ITER 86 ( to 104 )				    								  
							      18 STORE_FAST 3 ( i )					    67 16 LOAD_FAST 1 ( n )					  
							      								    18 LOAD_CONST 2 ( 1 )					  
							      4 20 SETUP_LOOP 80 ( to 102 )				    20 INPLACE_ADD						  
							      22 LOAD_GLOBAL 0 ( range )				    22 STORE_FAST 1 ( n )					  
							      24 LOAD_FAST 3 ( i )					    								  
							      26 LOAD_CONST 2 ( 1 )					    68 24 LOAD_FAST 1 ( n )					  
							      28 BINARY_ADD						    26 LOAD_CONST 3 ( 1 )					  
							      30 LOAD_FAST 1 ( n )					    28 INPLACE_ADD						  
							      32 CALL_FUNCTION 2					    30 STORE_FAST 1 ( n )					  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 62 ( to 100 )				    69 32 LOAD_FAST 1 ( n )					  
							      38 STORE_FAST 4 ( j )					    34 LOAD_CONST 4 ( 2 )					  
							      								    36 INPLACE_ADD						  
							      5 40 LOAD_FAST 0 ( arr )					    38 STORE_FAST 1 ( n )					  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 BINARY_SUBSCR						    70 40 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 0 ( arr )					    42 LOAD_CONST 5 ( 1 )					  
							      48 LOAD_FAST 4 ( j )					    44 INPLACE_ADD						  
							      50 BINARY_SUBSCR						    46 STORE_FAST 1 ( n )					  
							      52 BINARY_MULTIPLY					    								  
							      54 STORE_FAST 5 ( product )				    71 48 LOAD_FAST 1 ( n )					  
							      								    50 LOAD_CONST 6 ( 2 )					  
							      6 56 SETUP_LOOP 40 ( to 98 )				    52 INPLACE_ADD						  
							      58 LOAD_GLOBAL 0 ( range )				    54 STORE_FAST 1 ( n )					  
							      60 LOAD_CONST 1 ( 0 )					    								  
							      62 LOAD_FAST 1 ( n )					    72 56 LOAD_FAST 1 ( n )					  
							      64 CALL_FUNCTION 2					    58 LOAD_CONST 7 ( 2 )					  
							      66 GET_ITER						    60 INPLACE_ADD						  
							      >> 68 FOR_ITER 26 ( to 96 )				    62 STORE_FAST 1 ( n )					  
							      70 STORE_FAST 6 ( k )					    								  
							      								    73 64 LOAD_FAST 1 ( n )					  
							      7 72 LOAD_FAST 0 ( arr )					    66 LOAD_CONST 8 ( 3 )					  
							      74 LOAD_FAST 6 ( k )					    68 INPLACE_ADD						  
							      76 BINARY_SUBSCR						    70 STORE_FAST 1 ( n )					  
							      78 LOAD_FAST 5 ( product )				    								  
							      80 COMPARE_OP 2 ( == )					    74 72 LOAD_FAST 1 ( n )					  
							      82 POP_JUMP_IF_FALSE 68					    74 LOAD_CONST 9 ( 4 )					  
							      								    76 INPLACE_ADD						  
							      8 84 LOAD_FAST 2 ( result )				    78 STORE_FAST 1 ( n )					  
							      86 LOAD_CONST 2 ( 1 )					    80 JUMP_ABSOLUTE 12						  
							      88 BINARY_ADD						    >> 82 POP_BLOCK						  
							      90 STORE_FAST 2 ( result )				    >> 84 JUMP_ABSOLUTE 12					  
							      								    >> 86 POP_BLOCK						  
							      9 92 BREAK_LOOP						    >> 88 JUMP_ABSOLUTE 12					  
							      94 JUMP_ABSOLUTE 68					    >> 90 POP_BLOCK						  
							      >> 96 POP_BLOCK						    >> 92 LOAD_CONST 0 ( None )					  
							      >> 98 JUMP_ABSOLUTE 36					    94 RETURN_VALUE						  
							      >> 100 POP_BLOCK						    NEW_LINE							  
							      >> 102 JUMP_ABSOLUTE 16					    								  
							      >> 104 POP_BLOCK						    								  
							      								    								  
							      10 >> 106 LOAD_FAST 2 ( result )				    								  
							      108 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT_1				      CHECK_TWO_GIVEN_SETS_DISJOINT_1				    CHECK_TWO_GIVEN_SETS_DISJOINT_1				  CHECK_TWO_GIVEN_SETS_DISJOINT_1
--							      --							    --								  --
def areDisjoint ( set1 , set2 , m , n ) :		      Disassembly of <code object areDisjoint at 0x7fbac<<unk>> de4 Disassembly of <code object arearejoint at 0x7f816a673a50, fi script_not_found : None
    set1.sort ( )					      2 0 LOAD_FAST 0 ( set1 )					    22 0 LOAD_FAST 1 ( set2 )					  
    set2.sort ( )					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    i = 0 ; j = 0					      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
    while ( i < m and j < n ) :				      6 POP_TOP							    6 STORE_FAST 2 ( i )					  
	if ( set1 [ i ] < set2 [ j ] ) :		      								    								  
	    i += 1					      3 8 LOAD_FAST 1 ( set2 )					    23 8 LOAD_FAST 0 ( self )					  
	elif ( set2 [ j ] < set1 [ i ] ) :		      10 LOAD_METHOD 0 ( sort )					    10 LOAD_METHOD 1 ( set2 )					  
	    j += 1					      12 CALL_METHOD 0						    12 LOAD_FAST 1 ( set2 )					  
	else :						      14 POP_TOP						    14 CALL_METHOD 1						  
	    return False				      								    16 POP_TOP							  
    return True						      4 16 LOAD_CONST 1 ( 0 )					    								  
							      18 STORE_FAST 4 ( i )					    24 18 LOAD_FAST 0 ( self )					  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_METHOD 2 ( set2 )					  
							      22 STORE_FAST 5 ( j )					    22 LOAD_FAST 1 ( set2 )					  
							      								    24 CALL_METHOD 1						  
							      5 24 SETUP_LOOP 76 ( to 102 )				    26 POP_TOP							  
							      >> 26 LOAD_FAST 4 ( i )					    								  
							      28 LOAD_FAST 2 ( m )					    25 28 LOAD_FAST 0 ( self )					  
							      30 COMPARE_OP 0 ( < )					    30 LOAD_METHOD 3 ( set2 )					  
							      32 POP_JUMP_IF_FALSE 100					    32 LOAD_FAST 1 ( set2 )					  
							      34 LOAD_FAST 5 ( j )					    34 CALL_METHOD 1						  
							      36 LOAD_FAST 3 ( n )					    36 POP_TOP							  
							      38 COMPARE_OP 0 ( < )					    38 LOAD_CONST 0 ( None )					  
							      40 POP_JUMP_IF_FALSE 100					    40 RETURN_VALUE						  
							      								    NEW_LINE							  
							      6 42 LOAD_FAST 0 ( set1 )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 1 ( set2 )					    								  
							      50 LOAD_FAST 5 ( j )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 COMPARE_OP 0 ( < )					    								  
							      56 POP_JUMP_IF_FALSE 68					    								  
							      								    								  
							      7 58 LOAD_FAST 4 ( i )					    								  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 INPLACE_ADD						    								  
							      64 STORE_FAST 4 ( i )					    								  
							      66 JUMP_ABSOLUTE 26					    								  
							      								    								  
							      8 >> 68 LOAD_FAST 1 ( set2 )				    								  
							      70 LOAD_FAST 5 ( j )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 LOAD_FAST 0 ( set1 )					    								  
							      76 LOAD_FAST 4 ( i )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 COMPARE_OP 0 ( < )					    								  
							      82 POP_JUMP_IF_FALSE 94					    								  
							      								    								  
							      9 84 LOAD_FAST 5 ( j )					    								  
							      86 LOAD_CONST 2 ( 1 )					    								  
							      88 INPLACE_ADD						    								  
							      90 STORE_FAST 5 ( j )					    								  
							      92 JUMP_ABSOLUTE 26					    								  
							      								    								  
							      11 >> 94 LOAD_CONST 3 ( False )				    								  
							      96 RETURN_VALUE						    								  
							      98 JUMP_ABSOLUTE 26					    								  
							      >> 100 POP_BLOCK						    								  
							      								    								  
							      12 >> 102 LOAD_CONST 4 ( True )				    								  
							      104 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_ELEMENT					      NEXT_GREATER_ELEMENT					    NEXT_GREATER_ELEMENT					  NEXT_GREATER_ELEMENT
--							      --							    --								  --
def printNGE ( arr ) :					      Disassembly of <code object printNGE at 0x7fbac0e89d20, file  Disassembly of <code object printNGE at 0x7f816a673a50, file  script_not_found : None
    for i in range ( 0 , len ( arr ) , 1 ) :		      2 0 SETUP_LOOP 112 ( to 114 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	next = - 1					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for j in range ( i + 1 , len ( arr ) , 1 ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 1 )					  
	    if arr [ i ] < arr [ j ] :			      6 LOAD_GLOBAL 1 ( len )					    6 CALL_FUNCTION 1						  
		next = arr [ j ]			      8 LOAD_FAST 0 ( arr )					    8 GET_ITER							  
		break					      10 CALL_FUNCTION 1					    >> 10 FOR_ITER 14 ( to 22 )					  
	print ( str ( arr [ i ] ) + " -- " + str ( next ) )   12 LOAD_CONST 2 ( 1 )					    12 STORE_FAST 1 ( i )					  
							      14 CALL_FUNCTION 3					    								  
							      16 GET_ITER						    27 14 LOAD_FAST 0 ( arr )					  
							      >> 18 FOR_ITER 92 ( to 112 )				    16 LOAD_METHOD 1 ( append )					  
							      20 STORE_FAST 1 ( i )					    18 LOAD_FAST 1 ( i )					  
							      								    20 CALL_METHOD 1						  
							      3 22 LOAD_CONST 3 ( - 1 )					    22 POP_TOP							  
							      24 STORE_FAST 2 ( next )					    24 JUMP_ABSOLUTE 10						  
							      								    >> 26 POP_BLOCK						  
							      4 26 SETUP_LOOP 54 ( to 82 )				    >> 28 LOAD_CONST 0 ( None )					  
							      28 LOAD_GLOBAL 0 ( range )				    30 RETURN_VALUE						  
							      30 LOAD_FAST 1 ( i )					    NEW_LINE							  
							      32 LOAD_CONST 2 ( 1 )					    								  
							      34 BINARY_ADD						    								  
							      36 LOAD_GLOBAL 1 ( len )					    								  
							      38 LOAD_FAST 0 ( arr )					    								  
							      40 CALL_FUNCTION 1					    								  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 CALL_FUNCTION 3					    								  
							      46 GET_ITER						    								  
							      >> 48 FOR_ITER 30 ( to 80 )				    								  
							      50 STORE_FAST 3 ( j )					    								  
							      								    								  
							      5 52 LOAD_FAST 0 ( arr )					    								  
							      54 LOAD_FAST 1 ( i )					    								  
							      56 BINARY_SUBSCR						    								  
							      58 LOAD_FAST 0 ( arr )					    								  
							      60 LOAD_FAST 3 ( j )					    								  
							      62 BINARY_SUBSCR						    								  
							      64 COMPARE_OP 0 ( < )					    								  
							      66 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      6 68 LOAD_FAST 0 ( arr )					    								  
							      70 LOAD_FAST 3 ( j )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 STORE_FAST 2 ( next )					    								  
							      								    								  
							      7 76 BREAK_LOOP						    								  
							      78 JUMP_ABSOLUTE 48					    								  
							      >> 80 POP_BLOCK						    								  
							      								    								  
							      8 >> 82 LOAD_GLOBAL 2 ( print )				    								  
							      84 LOAD_GLOBAL 3 ( str )					    								  
							      86 LOAD_FAST 0 ( arr )					    								  
							      88 LOAD_FAST 1 ( i )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 CALL_FUNCTION 1					    								  
							      94 LOAD_CONST 4 ( ' -- ' )				    								  
							      96 BINARY_ADD						    								  
							      98 LOAD_GLOBAL 3 ( str )					    								  
							      100 LOAD_FAST 2 ( next )					    								  
							      102 CALL_FUNCTION 1					    								  
							      104 BINARY_ADD						    								  
							      106 CALL_FUNCTION 1					    								  
							      108 POP_TOP						    								  
							      110 JUMP_ABSOLUTE 18					    								  
							      >> 112 POP_BLOCK						    								  
							      >> 114 LOAD_CONST 0 ( None )				    								  
							      116 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			      MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			    MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			  MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1
--							      --							    --								  --
def calculateEnergy ( mat , n ) :			      Disassembly of <code object calculateEnergy at 0x7fbac0e89d20 Disassembly of <code object calculateEnergy at 0x7f816a6e4b70 error : Traceback (most recent call last):   File
    tot_energy = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( tot_energy )				  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 2 ( tot_energy )				    2 LOAD_FAST 0 ( mat )					  (item)   File "main.py", line 35, in <module>	  Fi
	for j in range ( n ) :				      								    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in calculateEnergy NameError:
	    q = mat [ i ] [ j ] // n			      3 4 SETUP_LOOP 102 ( to 108 )				    6 BINARY_MULTIPLY						  name 'tot_energy' is not defined
	    i_des = q					      6 LOAD_GLOBAL 0 ( range )					    8 LOAD_FAST 2 ( alpha )					  
	    j_des = mat [ i ] [ j ] - ( n * q )		      8 LOAD_FAST 1 ( n )					    10 BINARY_MULTIPLY						  
	    tot_energy += ( abs ( i_des - i ) + abs ( j_des - 10 CALL_FUNCTION 1					    12 LOAD_FAST 3 ( alpha )					  
    return tot_energy					      12 GET_ITER						    14 BINARY_MULTIPLY						  
							      >> 14 FOR_ITER 90 ( to 106 )				    16 LOAD_FAST 4 ( alpha )					  
							      16 STORE_FAST 3 ( i )					    18 BINARY_MULTIPLY						  
							      								    20 LOAD_FAST 5 ( alpha )					  
							      4 18 SETUP_LOOP 84 ( to 104 )				    22 BINARY_MULTIPLY						  
							      20 LOAD_GLOBAL 0 ( range )				    24 LOAD_FAST 6 ( alpha )					  
							      22 LOAD_FAST 1 ( n )					    26 BINARY_MULTIPLY						  
							      24 CALL_FUNCTION 1					    28 LOAD_FAST 7 ( total_des )				  
							      26 GET_ITER						    30 BINARY_MULTIPLY						  
							      >> 28 FOR_ITER 72 ( to 102 )				    32 BINARY_ADD						  
							      30 STORE_FAST 4 ( j )					    34 LOAD_FAST 6 ( alpha )					  
							      								    36 BINARY_MULTIPLY						  
							      5 32 LOAD_FAST 0 ( mat )					    38 BINARY_ADD						  
							      34 LOAD_FAST 3 ( i )					    40 LOAD_FAST 6 ( alpha )					  
							      36 BINARY_SUBSCR						    42 BINARY_MULTIPLY						  
							      38 LOAD_FAST 4 ( j )					    44 BINARY_ADD						  
							      40 BINARY_SUBSCR						    46 LOAD_FAST 7 ( total_des )				  
							      42 LOAD_FAST 1 ( n )					    48 BINARY_MULTIPLY						  
							      44 BINARY_FLOOR_DIVIDE					    50 BINARY_ADD						  
							      46 STORE_FAST 5 ( q )					    52 LOAD_FAST 6 ( alpha )					  
							      								    54 BINARY_MULTIPLY						  
							      6 48 LOAD_FAST 5 ( q )					    56 BINARY_ADD						  
							      50 STORE_FAST 6 ( i_des )					    58 BINARY_MULTIPLY						  
							      								    60 RETURN_VALUE						  
							      7 52 LOAD_FAST 0 ( mat )					    NEW_LINE							  
							      54 LOAD_FAST 3 ( i )					    								  
							      56 BINARY_SUBSCR						    								  
							      58 LOAD_FAST 4 ( j )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_FAST 1 ( n )					    								  
							      64 LOAD_FAST 5 ( q )					    								  
							      66 BINARY_MULTIPLY					    								  
							      68 BINARY_SUBTRACT					    								  
							      70 STORE_FAST 7 ( j_des )					    								  
							      								    								  
							      8 72 LOAD_FAST 2 ( tot_energy )				    								  
							      74 LOAD_GLOBAL 1 ( abs )					    								  
							      76 LOAD_FAST 6 ( i_des )					    								  
							      78 LOAD_FAST 3 ( i )					    								  
							      80 BINARY_SUBTRACT					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 LOAD_GLOBAL 1 ( abs )					    								  
							      86 LOAD_FAST 7 ( j_des )					    								  
							      88 LOAD_FAST 4 ( j )					    								  
							      90 BINARY_SUBTRACT					    								  
							      92 CALL_FUNCTION 1					    								  
							      94 BINARY_ADD						    								  
							      96 INPLACE_ADD						    								  
							      98 STORE_FAST 2 ( tot_energy )				    								  
							      100 JUMP_ABSOLUTE 28					    								  
							      >> 102 POP_BLOCK						    								  
							      >> 104 JUMP_ABSOLUTE 14					    								  
							      >> 106 POP_BLOCK						    								  
							      								    								  
							      9 >> 108 LOAD_FAST 2 ( tot_energy )			    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POWER_SET						      POWER_SET							    POWER_SET							  POWER_SET
--							      --							    --								  --
def printPowerSet ( set , set_size ) :			      Disassembly of <code object printPowerSet at 0x7fbac<<unk>> d Disassembly of <code object printPowerSet at 0x7f816a673a50,  script_not_found : None
    pow_set_size = ( int ) ( math.pow ( 2 , set_size ) ) ;    2 0 LOAD_GLOBAL 0 ( int )					    28 0 LOAD_FAST 1 ( set_size )				  
    counter = 0 ;					      2 LOAD_GLOBAL 1 ( math )					    2 LOAD_GLOBAL 0 ( math )					  
    j = 0 ;						      4 LOAD_METHOD 2 ( pow )					    4 LOAD_METHOD 1 ( pow )					  
    for counter in range ( 0 , pow_set_size ) :		      6 LOAD_CONST 1 ( 2 )					    6 LOAD_FAST 0 ( set )					  
	for j in range ( 0 , set_size ) :		      8 LOAD_FAST 1 ( set_size )				    8 LOAD_FAST 1 ( set_size )					  
	    if ( ( counter & ( 1 << j ) ) > 0 ) :	      10 CALL_METHOD 2						    10 LOAD_FAST 2 ( pow_set_size )				  
		print ( set [ j ] , end = "" ) ;	      12 CALL_FUNCTION 1					    12 LOAD_FAST 3 ( pow_set_size )				  
	print ( "" ) ;					      14 STORE_FAST 2 ( pow_set_size )				    14 CALL_METHOD 4						  
							      								    16 CALL_FUNCTION 1						  
							      3 16 LOAD_CONST 2 ( 0 )					    18 RETURN_VALUE						  
							      18 STORE_FAST 3 ( counter )				    NEW_LINE							  
							      								    								  
							      4 20 LOAD_CONST 2 ( 0 )					    								  
							      22 STORE_FAST 4 ( j )					    								  
							      								    								  
							      5 24 SETUP_LOOP 78 ( to 104 )				    								  
							      26 LOAD_GLOBAL 3 ( range )				    								  
							      28 LOAD_CONST 2 ( 0 )					    								  
							      30 LOAD_FAST 2 ( pow_set_size )				    								  
							      32 CALL_FUNCTION 2					    								  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 64 ( to 102 )				    								  
							      38 STORE_FAST 3 ( counter )				    								  
							      								    								  
							      6 40 SETUP_LOOP 50 ( to 92 )				    								  
							      42 LOAD_GLOBAL 3 ( range )				    								  
							      44 LOAD_CONST 2 ( 0 )					    								  
							      46 LOAD_FAST 1 ( set_size )				    								  
							      48 CALL_FUNCTION 2					    								  
							      50 GET_ITER						    								  
							      >> 52 FOR_ITER 36 ( to 90 )				    								  
							      54 STORE_FAST 4 ( j )					    								  
							      								    								  
							      7 56 LOAD_FAST 3 ( counter )				    								  
							      58 LOAD_CONST 3 ( 1 )					    								  
							      60 LOAD_FAST 4 ( j )					    								  
							      62 BINARY_LSHIFT						    								  
							      64 BINARY_AND						    								  
							      66 LOAD_CONST 2 ( 0 )					    								  
							      68 COMPARE_OP 4 ( > )					    								  
							      70 POP_JUMP_IF_FALSE 52					    								  
							      								    								  
							      8 72 LOAD_GLOBAL 4 ( print )				    								  
							      74 LOAD_FAST 0 ( set )					    								  
							      76 LOAD_FAST 4 ( j )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 LOAD_CONST 4 ( '' )					    								  
							      82 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      84 CALL_FUNCTION_KW 2					    								  
							      86 POP_TOP						    								  
							      88 JUMP_ABSOLUTE 52					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      9 >> 92 LOAD_GLOBAL 4 ( print )				    								  
							      94 LOAD_CONST 4 ( '' )					    								  
							      96 CALL_FUNCTION 1					    								  
							      98 POP_TOP						    								  
							      100 JUMP_ABSOLUTE 36					    								  
							      >> 102 POP_BLOCK						    								  
							      >> 104 LOAD_CONST 0 ( None )				    								  
							      106 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STERN_BROCOT_SEQUENCE					      STERN_BROCOT_SEQUENCE					    STERN_BROCOT_SEQUENCE					  STERN_BROCOT_SEQUENCE
--							      --							    --								  --
def SternSequenceFunc ( BrocotSequence , n ) :		      Disassembly of <code object SternSequenceFunc at 0x7fbac<<unk Disassembly of <code object SternSequenceFunc at 0x7f816a673a script_not_found : None
    for i in range ( 1 , n ) :				      2 0 SETUP_LOOP 62 ( to 64 )				    51 0 SETUP_LOOP 22 ( to 24 )				  
	considered_element = BrocotSequence [ i ]	      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( _gta_native )				  
	precedent = BrocotSequence [ i - 1 ]		      4 LOAD_CONST 1 ( 1 )					    4 LOAD_METHOD 1 ( SternSequenceFunc )			  
	BrocotSequence.append ( considered_element + preceden 6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 0 ( BrocotSequence )				  
	BrocotSequence.append ( considered_element )	      8 CALL_FUNCTION 2						    8 CALL_METHOD 1						  
    for i in range ( 0 , 15 ) :				      10 GET_ITER						    10 GET_ITER							  
	print ( BrocotSequence [ i ] , end = " " )	      >> 12 FOR_ITER 48 ( to 62 )				    >> 12 FOR_ITER 14 ( to 22 )					  
							      14 STORE_FAST 2 ( i )					    14 UNPACK_SEQUENCE 2					  
							      								    16 STORE_FAST 1 ( n )					  
							      3 16 LOAD_FAST 0 ( BrocotSequence )			    18 STORE_FAST 2 ( c )					  
							      18 LOAD_FAST 2 ( i )					    20 STORE_FAST 3 ( c )					  
							      20 BINARY_SUBSCR						    22 JUMP_ABSOLUTE 12						  
							      22 STORE_FAST 3 ( considered_element )			    >> 24 POP_BLOCK						  
							      								    								  
							      4 24 LOAD_FAST 0 ( BrocotSequence )			    52 >> 26 LOAD_GLOBAL 2 ( _gta_native )			  
							      26 LOAD_FAST 2 ( i )					    28 LOAD_METHOD 3 ( SternSequenceFunc )			  
							      28 LOAD_CONST 1 ( 1 )					    30 LOAD_FAST 1 ( n )					  
							      30 BINARY_SUBTRACT					    32 LOAD_FAST 2 ( c )					  
							      32 BINARY_SUBSCR						    34 CALL_METHOD 2						  
							      34 STORE_FAST 4 ( precedent )				    36 RETURN_VALUE						  
							      								    NEW_LINE							  
							      5 36 LOAD_FAST 0 ( BrocotSequence )			    								  
							      38 LOAD_METHOD 1 ( append )				    								  
							      40 LOAD_FAST 3 ( considered_element )			    								  
							      42 LOAD_FAST 4 ( precedent )				    								  
							      44 BINARY_ADD						    								  
							      46 CALL_METHOD 1						    								  
							      48 POP_TOP						    								  
							      								    								  
							      6 50 LOAD_FAST 0 ( BrocotSequence )			    								  
							      52 LOAD_METHOD 1 ( append )				    								  
							      54 LOAD_FAST 3 ( considered_element )			    								  
							      56 CALL_METHOD 1						    								  
							      58 POP_TOP						    								  
							      60 JUMP_ABSOLUTE 12					    								  
							      >> 62 POP_BLOCK						    								  
							      								    								  
							      7 >> 64 SETUP_LOOP 34 ( to 100 )				    								  
							      66 LOAD_GLOBAL 0 ( range )				    								  
							      68 LOAD_CONST 2 ( 0 )					    								  
							      70 LOAD_CONST 3 ( 15 )					    								  
							      72 CALL_FUNCTION 2					    								  
							      74 GET_ITER						    								  
							      >> 76 FOR_ITER 20 ( to 98 )				    								  
							      78 STORE_FAST 2 ( i )					    								  
							      								    								  
							      8 80 LOAD_GLOBAL 2 ( print )				    								  
							      82 LOAD_FAST 0 ( BrocotSequence )				    								  
							      84 LOAD_FAST 2 ( i )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_CONST 4 ( ' ' )					    								  
							      90 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      92 CALL_FUNCTION_KW 2					    								  
							      94 POP_TOP						    								  
							      96 JUMP_ABSOLUTE 76					    								  
							      >> 98 POP_BLOCK						    								  
							      >> 100 LOAD_CONST 0 ( None )				    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	      DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
def lcs ( X , Y , m , n ) :				      Disassembly of <code object lcs at 0x7fbac<<unk>> d540, file  Disassembly of <code object lcs at 0x7f816a673a50, file "<dis script_not_found : None
    if m == 0 or n == 0 :				      2 0 LOAD_FAST 2 ( m )					    26 0 LOAD_FAST 0 ( X )					  
	return 0 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    elif X [ m - 1 ] == Y [ n - 1 ] :			      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
	return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	      6 POP_JUMP_IF_TRUE 16					    6 LOAD_CONST 2 ( 1 )					  
    else :						      8 LOAD_FAST 3 ( n )					    8 COMPARE_OP 2 ( == )					  
	return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  10 LOAD_CONST 1 ( 0 )					    10 POP_JUMP_IF_FALSE 16					  
							      12 COMPARE_OP 2 ( == )					    								  
							      14 POP_JUMP_IF_FALSE 20					    27 12 LOAD_FAST 0 ( X )					  
							      								    14 LOAD_CONST 1 ( 0 )					  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    16 BINARY_SUBSCR						  
							      18 RETURN_VALUE						    18 LOAD_CONST 3 ( 1 )					  
							      								    20 COMPARE_OP 2 ( == )					  
							      4 >> 20 LOAD_FAST 0 ( X )					    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_FAST 2 ( m )					    								  
							      24 LOAD_CONST 2 ( 1 )					    28 >> 24 LOAD_FAST 0 ( X )					  
							      26 BINARY_SUBTRACT					    26 LOAD_CONST 1 ( 0 )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 1 ( Y )					    30 LOAD_CONST 4 ( 1 )					  
							      32 LOAD_FAST 3 ( n )					    32 COMPARE_OP 2 ( == )					  
							      34 LOAD_CONST 2 ( 1 )					    34 POP_JUMP_IF_FALSE 44					  
							      36 BINARY_SUBTRACT					    								  
							      38 BINARY_SUBSCR						    29 36 LOAD_FAST 0 ( X )					  
							      40 COMPARE_OP 2 ( == )					    38 LOAD_CONST 1 ( 0 )					  
							      42 POP_JUMP_IF_FALSE 70					    40 BINARY_SUBSCR						  
							      								    42 LOAD_CONST 5 ( 1 )					  
							      5 44 LOAD_CONST 2 ( 1 )					    44 BINARY_SUBSCR						  
							      46 LOAD_GLOBAL 0 ( lcs )					    46 LOAD_CONST 6 ( 2 )					  
							      48 LOAD_FAST 0 ( X )					    48 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 1 ( Y )					    50 POP_JUMP_IF_FALSE 52					  
							      52 LOAD_FAST 2 ( m )					    								  
							      54 LOAD_CONST 2 ( 1 )					    30 52 LOAD_FAST 0 ( X )					  
							      56 BINARY_SUBTRACT					    54 LOAD_CONST 1 ( 0 )					  
							      58 LOAD_FAST 3 ( n )					    56 BINARY_SUBSCR						  
							      60 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 7 ( 1 )					  
							      62 BINARY_SUBTRACT					    60 BINARY_SUBSCR						  
							      64 CALL_FUNCTION 4					    62 LOAD_CONST 8 ( 2 )					  
							      66 BINARY_ADD						    64 COMPARE_OP 2 ( == )					  
							      68 RETURN_VALUE						    66 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 >> 70 LOAD_GLOBAL 1 ( max )				    31 68 LOAD_FAST 0 ( X )					  
							      72 LOAD_GLOBAL 0 ( lcs )					    70 LOAD_CONST 1 ( 0 )					  
							      74 LOAD_FAST 0 ( X )					    72 BINARY_SUBSCR						  
							      76 LOAD_FAST 1 ( Y )					    74 LOAD_CONST 9 ( 1 )					  
							      78 LOAD_FAST 2 ( m )					    76 BINARY_SUBSCR						  
							      80 LOAD_FAST 3 ( n )					    78 LOAD_CONST 10 ( 2 )					  
							      82 LOAD_CONST 2 ( 1 )					    80 COMPARE_OP 2 ( == )					  
							      84 BINARY_SUBTRACT					    82 POP_JUMP_IF_FALSE 88					  
							      86 CALL_FUNCTION 4					    								  
							      88 LOAD_GLOBAL 0 ( lcs )					    32 84 LOAD_FAST 0 ( X )					  
							      90 LOAD_FAST 0 ( X )					    86 LOAD_CONST 1 ( 0 )					  
							      92 LOAD_FAST 1 ( Y )					    88 BINARY_SUBSCR						  
							      94 LOAD_FAST 2 ( m )					    90 LOAD_CONST 1 ( 0 )					  
							      96 LOAD_CONST 2 ( 1 )					    92 BINARY_SUBSCR						  
							      98 BINARY_SUBTRACT					    94 LOAD_CONST 1 ( 0 )					  
							      100 LOAD_FAST 3 ( n )					    96 BINARY_SUBSCR						  
							      102 CALL_FUNCTION 4					    98 LOAD_CONST 1 ( 0 )					  
							      104 CALL_FUNCTION 2					    100 BINARY_SUBSCR						  
							      106 RETURN_VALUE						    102 LOAD_CONST 1 ( 0 )					  
							      108 LOAD_CONST 0 ( None )					    104 BINARY_SUBSCR						  
							      110 RETURN_VALUE NEW_LINE					    106 LOAD_CONST 1 ( 0 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 1 ( 0 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 1 ( 0 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 11 ( ( 'X' , 'X' , 'X' , 'X' , 'X' , 'X' , 'X' 
							      								    20 BUILD_CONST_KEY_MAP 7					  
							      								    22 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
def printRepeating ( arr , size ) :			      Disassembly of <code object printRepeating at 0x7fbac<<unk>>  Disassembly of <code object printRepeating at 0x7f816a6e4b70, script_not_found : None
    count = [ 0 ] * size				      2 0 LOAD_CONST 1 ( 0 )					    26 0 BUILD_LIST 0						  
    print ( " Repeating elements are " , end = "" )	      2 BUILD_LIST 1						    2 STORE_FAST 1 ( size )					  
    for i in range ( 0 , size ) :			      4 LOAD_FAST 1 ( size )					    								  
	if ( count [ arr [ i ] ] == 1 ) :		      6 BINARY_MULTIPLY						    27 4 SETUP_LOOP 52 ( to 54 )				  
	    print ( arr [ i ] , end = " " )		      8 STORE_FAST 2 ( count )					    6 LOAD_GLOBAL 0 ( range )					  
	else :						      								    8 LOAD_FAST 1 ( size )					  
	    count [ arr [ i ] ] = count [ arr [ i ] ] + 1     3 10 LOAD_GLOBAL 0 ( print )				    10 CALL_FUNCTION 1						  
							      12 LOAD_CONST 2 ( ' Repeating elements are ' )		    12 GET_ITER							  
							      14 LOAD_CONST 3 ( '' )					    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 LOAD_CONST 4 ( ( 'end' , ) )				    16 STORE_FAST 2 ( i )					  
							      18 CALL_FUNCTION_KW 2					    								  
							      20 POP_TOP						    28 18 LOAD_FAST 0 ( arr )					  
							      								    20 LOAD_METHOD 1 ( append )					  
							      4 22 SETUP_LOOP 76 ( to 100 )				    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_CONST 1 ( 1 )					  
							      26 LOAD_CONST 1 ( 0 )					    26 BINARY_ADD						  
							      28 LOAD_FAST 1 ( size )					    28 CALL_METHOD 1						  
							      30 CALL_FUNCTION 2					    30 POP_TOP							  
							      32 GET_ITER						    32 JUMP_ABSOLUTE 14						  
							      >> 34 FOR_ITER 62 ( to 98 )				    >> 34 POP_BLOCK						  
							      36 STORE_FAST 3 ( i )					    >> 36 LOAD_CONST 2 ( None )					  
							      								    38 RETURN_VALUE						  
							      5 38 LOAD_FAST 2 ( count )				    NEW_LINE							  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_CONST 5 ( 1 )					    								  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 POP_JUMP_IF_FALSE 72					    								  
							      								    								  
							      6 54 LOAD_GLOBAL 0 ( print )				    								  
							      56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 3 ( i )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_CONST 6 ( ' ' )					    								  
							      64 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      66 CALL_FUNCTION_KW 2					    								  
							      68 POP_TOP						    								  
							      70 JUMP_ABSOLUTE 34					    								  
							      								    								  
							      8 >> 72 LOAD_FAST 2 ( count )				    								  
							      74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_FAST 3 ( i )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 BINARY_SUBSCR						    								  
							      82 LOAD_CONST 5 ( 1 )					    								  
							      84 BINARY_ADD						    								  
							      86 LOAD_FAST 2 ( count )					    								  
							      88 LOAD_FAST 0 ( arr )					    								  
							      90 LOAD_FAST 3 ( i )					    								  
							      92 BINARY_SUBSCR						    								  
							      94 STORE_SUBSCR						    								  
							      96 JUMP_ABSOLUTE 34					    								  
							      >> 98 POP_BLOCK						    								  
							      >> 100 LOAD_CONST 0 ( None )				    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1
--							      --							    --								  --
def findNth ( n ) :					      Disassembly of <code object findNth at 0x7fbac0e89d20, file " Disassembly of <code object findNth at 0x7f816a673a50, file " failure : #Results: 0, 10
    count = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_CONST 1 ( 0 )					  
    curr = 19 ;						      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  
    while ( True ) :					      								    								  
	sum = 0 ;					      3 4 LOAD_CONST 2 ( 19 )					    21 4 LOAD_CONST 2 ( 1 )					  
	x = curr ;					      6 STORE_FAST 2 ( curr )					    6 STORE_FAST 2 ( count )					  
	while ( x > 0 ) :				      								    								  
	    sum = sum + x % 10 ;			      4 8 SETUP_LOOP 86 ( to 96 )				    22 8 SETUP_LOOP 22 ( to 34 )				  
	    x = int ( x / 10 ) ;			      								    10 LOAD_GLOBAL 0 ( range )					  
	if ( sum == 10 ) :				      5 >> 10 LOAD_CONST 1 ( 0 )				    12 LOAD_CONST 3 ( 10 )					  
	    count += 1 ;				      12 STORE_FAST 3 ( sum )					    14 CALL_FUNCTION 1						  
	if ( count == n ) :				      								    16 GET_ITER							  
	    return curr ;				      6 14 LOAD_FAST 2 ( curr )					    >> 18 FOR_ITER 16 ( to 32 )					  
	curr += 9 ;					      16 STORE_FAST 4 ( x )					    20 STORE_FAST 3 ( i )					  
    return - 1 ;					      								    								  
							      7 18 SETUP_LOOP 36 ( to 56 )				    23 22 LOAD_FAST 1 ( count )					  
							      >> 20 LOAD_FAST 4 ( x )					    24 LOAD_CONST 4 ( 1 )					  
							      22 LOAD_CONST 1 ( 0 )					    26 INPLACE_ADD						  
							      24 COMPARE_OP 4 ( > )					    28 STORE_FAST 1 ( count )					  
							      26 POP_JUMP_IF_FALSE 54					    30 JUMP_ABSOLUTE 18						  
							      								    >> 32 POP_BLOCK						  
							      8 28 LOAD_FAST 3 ( sum )					    								  
							      30 LOAD_FAST 4 ( x )					    24 >> 34 LOAD_FAST 1 ( count )				  
							      32 LOAD_CONST 3 ( 10 )					    36 RETURN_VALUE						  
							      34 BINARY_MODULO						    NEW_LINE							  
							      36 BINARY_ADD						    								  
							      38 STORE_FAST 3 ( sum )					    								  
							      								    								  
							      9 40 LOAD_GLOBAL 0 ( int )				    								  
							      42 LOAD_FAST 4 ( x )					    								  
							      44 LOAD_CONST 3 ( 10 )					    								  
							      46 BINARY_TRUE_DIVIDE					    								  
							      48 CALL_FUNCTION 1					    								  
							      50 STORE_FAST 4 ( x )					    								  
							      52 JUMP_ABSOLUTE 20					    								  
							      >> 54 POP_BLOCK						    								  
							      								    								  
							      10 >> 56 LOAD_FAST 3 ( sum )				    								  
							      58 LOAD_CONST 3 ( 10 )					    								  
							      60 COMPARE_OP 2 ( == )					    								  
							      62 POP_JUMP_IF_FALSE 72					    								  
							      								    								  
							      11 64 LOAD_FAST 1 ( count )				    								  
							      66 LOAD_CONST 4 ( 1 )					    								  
							      68 INPLACE_ADD						    								  
							      70 STORE_FAST 1 ( count )					    								  
							      								    								  
							      12 >> 72 LOAD_FAST 1 ( count )				    								  
							      74 LOAD_FAST 0 ( n )					    								  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 84					    								  
							      								    								  
							      13 80 LOAD_FAST 2 ( curr )				    								  
							      82 RETURN_VALUE						    								  
							      								    								  
							      14 >> 84 LOAD_FAST 2 ( curr )				    								  
							      86 LOAD_CONST 5 ( 9 )					    								  
							      88 INPLACE_ADD						    								  
							      90 STORE_FAST 2 ( curr )					    								  
							      92 JUMP_ABSOLUTE 10					    								  
							      94 POP_BLOCK						    								  
							      								    								  
							      15 >> 96 LOAD_CONST 6 ( - 1 )				    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		      MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		    MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		  MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT
--							      --							    --								  --
def maxSum ( grid , n ) :				      Disassembly of <code object maxSum at 0x7fbac<<unk>> d540, fi Disassembly of <code object maxSum at 0x7f816a6e4b70, file "< error : Traceback (most recent call last):   File
    incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )	      2 0 LOAD_GLOBAL 0 ( max )					    26 0 LOAD_GLOBAL 0 ( incl )					  "XLM/dis_script.py", line 60, in <module>	exec
    excl = 0						      2 LOAD_FAST 0 ( grid )					    2 LOAD_FAST 0 ( grid )					  (item)   File "main.py", line 34, in <module>	  Fi
    for i in range ( 1 , n ) :				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in maxSum NameError: name 'inc
	excl_new = max ( excl , incl )			      6 BINARY_SUBSCR						    6 LOAD_FAST 2 ( n )						  l' is not defined
	incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i 8 LOAD_CONST 1 ( 0 )					    8 LOAD_FAST 3 ( n )						  
	excl = excl_new					      10 BINARY_SUBSCR						    10 CALL_FUNCTION 4						  
    return max ( excl , incl )				      12 LOAD_FAST 0 ( grid )					    12 RETURN_VALUE						  
							      14 LOAD_CONST 2 ( 1 )					    NEW_LINE							  
							      16 BINARY_SUBSCR						    								  
							      18 LOAD_CONST 1 ( 0 )					    								  
							      20 BINARY_SUBSCR						    								  
							      22 CALL_FUNCTION 2					    								  
							      24 STORE_FAST 2 ( incl )					    								  
							      								    								  
							      3 26 LOAD_CONST 1 ( 0 )					    								  
							      28 STORE_FAST 3 ( excl )					    								  
							      								    								  
							      4 30 SETUP_LOOP 62 ( to 94 )				    								  
							      32 LOAD_GLOBAL 1 ( range )				    								  
							      34 LOAD_CONST 2 ( 1 )					    								  
							      36 LOAD_FAST 1 ( n )					    								  
							      38 CALL_FUNCTION 2					    								  
							      40 GET_ITER						    								  
							      >> 42 FOR_ITER 48 ( to 92 )				    								  
							      44 STORE_FAST 4 ( i )					    								  
							      								    								  
							      5 46 LOAD_GLOBAL 0 ( max )				    								  
							      48 LOAD_FAST 3 ( excl )					    								  
							      50 LOAD_FAST 2 ( incl )					    								  
							      52 CALL_FUNCTION 2					    								  
							      54 STORE_FAST 5 ( excl_new )				    								  
							      								    								  
							      6 56 LOAD_FAST 3 ( excl )					    								  
							      58 LOAD_GLOBAL 0 ( max )					    								  
							      60 LOAD_FAST 0 ( grid )					    								  
							      62 LOAD_CONST 1 ( 0 )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 4 ( i )					    								  
							      68 BINARY_SUBSCR						    								  
							      70 LOAD_FAST 0 ( grid )					    								  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 LOAD_FAST 4 ( i )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 CALL_FUNCTION 2					    								  
							      82 BINARY_ADD						    								  
							      84 STORE_FAST 2 ( incl )					    								  
							      								    								  
							      7 86 LOAD_FAST 5 ( excl_new )				    								  
							      88 STORE_FAST 3 ( excl )					    								  
							      90 JUMP_ABSOLUTE 42					    								  
							      >> 92 POP_BLOCK						    								  
							      								    								  
							      8 >> 94 LOAD_GLOBAL 0 ( max )				    								  
							      96 LOAD_FAST 3 ( excl )					    								  
							      98 LOAD_FAST 2 ( incl )					    								  
							      100 CALL_FUNCTION 2					    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MIDDLE_ROW_COLUMN_MATRIX				      SUM_MIDDLE_ROW_COLUMN_MATRIX				    SUM_MIDDLE_ROW_COLUMN_MATRIX				  SUM_MIDDLE_ROW_COLUMN_MATRIX
--							      --							    --								  --
def middlesum ( mat , n ) :				      Disassembly of <code object middlesum at 0x7fbac<<unk>> de40, Disassembly of <code object middlesum at 0x7f816a6e4b70, file error : Traceback (most recent call last):   File
    row_sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( mat )					  "XLM/dis_script.py", line 59, in <module>	for
    col_sum = 0						      2 STORE_FAST 2 ( row_sum )				    2 LOAD_METHOD 0 ( col_sum )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( n ) :				      								    4 CALL_METHOD 0						  y", line 47, in run_dis_script     co_code, co_nlo
	row_sum += mat [ n // 2 ] [ i ]			      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
    print ( "Sum of middle row = " , row_sum )		      6 STORE_FAST 3 ( col_sum )				    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    for i in range ( n ) :				      								    27 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
	col_sum += mat [ i ] [ n // 2 ]			      4 8 SETUP_LOOP 36 ( to 46 )				    10 LOAD_CONST 1 ( 0 )					  n parse     constants[arg] = ast.literal_eval(argr
    print ( "Sum of middle column = " , col_sum )	      10 LOAD_GLOBAL 0 ( range )				    12 BINARY_SUBSCR						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      12 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( a )					  ib/python3.7/ast.py", line 46, in literal_eval
							      14 CALL_FUNCTION 1					    								   node_or_string = parse(node_or_string, mode='eval
							      16 GET_ITER						    28 16 LOAD_FAST 2 ( a )					  ')   File "/home/ubuntu/anaconda3/envs/dataset/lib
							      >> 18 FOR_ITER 24 ( to 44 )				    18 LOAD_CONST 2 ( 1 )					  /python3.7/ast.py", line 35, in parse	    return c
							      20 STORE_FAST 4 ( i )					    20 BINARY_SUBSCR						  ompile(source, filename, mode, PyCF_ONLY_AST)	  Fi
							      								    22 STORE_FAST 3 ( a )					  le "<unknown>", line 1     b ''	 ^ SyntaxErr
							      5 22 LOAD_FAST 2 ( row_sum )				    								  or: unexpected EOF while parsing
							      24 LOAD_FAST 0 ( mat )					    29 24 LOAD_FAST 3 ( a )					  
							      26 LOAD_FAST 1 ( n )					    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_CONST 2 ( 2 )					    28 BINARY_SUBSCR						  
							      30 BINARY_FLOOR_DIVIDE					    30 STORE_FAST 4 ( b )					  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_FAST 4 ( i )					    30 32 LOAD_FAST 0 ( mat )					  
							      36 BINARY_SUBSCR						    34 LOAD_METHOD 1 ( append )					  
							      38 INPLACE_ADD						    36 LOAD_FAST 4 ( b )					  
							      40 STORE_FAST 2 ( row_sum )				    38 LOAD_CONST 4 ( b '' )					  
							      42 JUMP_ABSOLUTE 18					    40 CALL_METHOD 2						  
							      >> 44 POP_BLOCK						    42 POP_TOP							  
							      								    								  
							      6 >> 46 LOAD_GLOBAL 1 ( print )				    31 44 LOAD_FAST 0 ( mat )					  
							      48 LOAD_CONST 3 ( 'Sum of middle row = ' )		    46 LOAD_METHOD 2 ( sum )					  
							      50 LOAD_FAST 2 ( row_sum )				    48 LOAD_FAST 4 ( b )					  
							      52 CALL_FUNCTION 2					    50 LOAD_CONST 5 ( '' )					  
							      54 POP_TOP						    52 CALL_METHOD 2						  
							      								    54 POP_TOP							  
							      7 56 SETUP_LOOP 36 ( to 94 )				    56 LOAD_CONST 0 ( None )					  
							      58 LOAD_GLOBAL 0 ( range )				    58 RETURN_VALUE						  
							      60 LOAD_FAST 1 ( n )					    NEW_LINE							  
							      62 CALL_FUNCTION 1					    								  
							      64 GET_ITER						    								  
							      >> 66 FOR_ITER 24 ( to 92 )				    								  
							      68 STORE_FAST 4 ( i )					    								  
							      								    								  
							      8 70 LOAD_FAST 3 ( col_sum )				    								  
							      72 LOAD_FAST 0 ( mat )					    								  
							      74 LOAD_FAST 4 ( i )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 LOAD_FAST 1 ( n )					    								  
							      80 LOAD_CONST 2 ( 2 )					    								  
							      82 BINARY_FLOOR_DIVIDE					    								  
							      84 BINARY_SUBSCR						    								  
							      86 INPLACE_ADD						    								  
							      88 STORE_FAST 3 ( col_sum )				    								  
							      90 JUMP_ABSOLUTE 66					    								  
							      >> 92 POP_BLOCK						    								  
							      								    								  
							      9 >> 94 LOAD_GLOBAL 1 ( print )				    								  
							      96 LOAD_CONST 4 ( 'Sum of middle column = ' )		    								  
							      98 LOAD_FAST 3 ( col_sum )				    								  
							      100 CALL_FUNCTION 2					    								  
							      102 POP_TOP						    								  
							      104 LOAD_CONST 0 ( None )					    								  
							      106 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG
--							      --							    --								  --
def generate ( st , s ) :				      Disassembly of <code object generate at 0x7fbac0e8bc90, file  Disassembly of <code object generate at 0x7f816a6e4b70, file  script_not_found : None
    if len ( s ) == 0 :					      2 0 LOAD_GLOBAL 0 ( len )					    56 0 LOAD_FAST 0 ( st )					  
	return						      2 LOAD_FAST 1 ( s )					    2 LOAD_CONST 1 ( 0 )					  
    if s not in st :					      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
	st.add ( s )					      6 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( s )					  
	for i in range ( len ( s ) ) :			      8 COMPARE_OP 2 ( == )					    								  
	    t = list ( s ).copy ( )			      10 POP_JUMP_IF_FALSE 16					    57 8 LOAD_FAST 1 ( s )					  
	    t.remove ( s [ i ] )			      								    10 LOAD_CONST 2 ( 1 )					  
	    t = ''.join ( t )				      3 12 LOAD_CONST 0 ( None )				    12 BINARY_SUBSCR						  
	    generate ( st , t )				      14 RETURN_VALUE						    14 STORE_FAST 2 ( s )					  
    return						      								    								  
							      4 >> 16 LOAD_FAST 1 ( s )					    58 16 LOAD_FAST 1 ( s )					  
							      18 LOAD_FAST 0 ( st )					    18 LOAD_CONST 3 ( '%s = %s' )				  
							      20 COMPARE_OP 7 ( not in )				    20 LOAD_FAST 1 ( s )					  
							      22 POP_JUMP_IF_FALSE 102					    22 BINARY_MODULO						  
							      								    24 STORE_FAST 3 ( s )					  
							      5 24 LOAD_FAST 0 ( st )					    								  
							      26 LOAD_METHOD 1 ( add )					    59 26 LOAD_FAST 1 ( s )					  
							      28 LOAD_FAST 1 ( s )					    28 LOAD_CONST 4 ( '%s = %s' )				  
							      30 CALL_METHOD 1						    30 LOAD_FAST 3 ( s )					  
							      32 POP_TOP						    32 BINARY_MODULO						  
							      								    34 STORE_FAST 4 ( s )					  
							      6 34 SETUP_LOOP 66 ( to 102 )				    								  
							      36 LOAD_GLOBAL 2 ( range )				    60 36 LOAD_FAST 1 ( s )					  
							      38 LOAD_GLOBAL 0 ( len )					    38 LOAD_CONST 5 ( '%s = %s' )				  
							      40 LOAD_FAST 1 ( s )					    40 LOAD_FAST 4 ( s )					  
							      42 CALL_FUNCTION 1					    42 BINARY_MODULO						  
							      44 CALL_FUNCTION 1					    44 LOAD_FAST 4 ( s )					  
							      46 GET_ITER						    46 BINARY_MODULO						  
							      >> 48 FOR_ITER 50 ( to 100 )				    48 LOAD_FAST 4 ( s )					  
							      50 STORE_FAST 2 ( i )					    50 BINARY_MODULO						  
							      								    52 LOAD_FAST 1 ( s )					  
							      7 52 LOAD_GLOBAL 3 ( list )				    54 BINARY_MODULO						  
							      54 LOAD_FAST 1 ( s )					    56 BUILD_TUPLE 2						  
							      56 CALL_FUNCTION 1					    58 BINARY_MODULO						  
							      58 LOAD_METHOD 4 ( copy )					    60 RETURN_VALUE						  
							      60 CALL_METHOD 0						    NEW_LINE							  
							      62 STORE_FAST 3 ( t )					    								  
							      								    								  
							      8 64 LOAD_FAST 3 ( t )					    								  
							      66 LOAD_METHOD 5 ( remove )				    								  
							      68 LOAD_FAST 1 ( s )					    								  
							      70 LOAD_FAST 2 ( i )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 CALL_METHOD 1						    								  
							      76 POP_TOP						    								  
							      								    								  
							      9 78 LOAD_CONST 2 ( '' )					    								  
							      80 LOAD_METHOD 6 ( join )					    								  
							      82 LOAD_FAST 3 ( t )					    								  
							      84 CALL_METHOD 1						    								  
							      86 STORE_FAST 3 ( t )					    								  
							      								    								  
							      10 88 LOAD_GLOBAL 7 ( generate )				    								  
							      90 LOAD_FAST 0 ( st )					    								  
							      92 LOAD_FAST 3 ( t )					    								  
							      94 CALL_FUNCTION 2					    								  
							      96 POP_TOP						    								  
							      98 JUMP_ABSOLUTE 48					    								  
							      >> 100 POP_BLOCK						    								  
							      								    								  
							      11 >> 102 LOAD_CONST 0 ( None )				    								  
							      104 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS
--							      --							    --								  --
def difference ( arr , n ) :				      Disassembly of <code object difference at 0x7fbac0e8bc90, fil Disassembly of <code object difference at 0x7f8169feb660, fil error : Traceback (most recent call last):   File
    d1 = 0						      2 0 LOAD_CONST 1 ( 0 )					    148 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    d2 = 0						      2 STORE_FAST 2 ( d1 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 0 , n ) :				      								    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
	for j in range ( 0 , n ) :			      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_FAST 0 ( self )					  cals, co_varnames, co_names, co_consts, co_linesta
	    if ( i == j ) :				      6 STORE_FAST 3 ( d2 )					    8 LOAD_ATTR 0 ( col )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
		d1 += arr [ i ] [ j ]			      								    10 COMPARE_OP 2 ( == )					  pack non-iterable NoneType object
	    if ( i == n - j - 1 ) :			      4 8 SETUP_LOOP 94 ( to 104 )				    12 POP_JUMP_IF_FALSE 22					  
		d2 += arr [ i ] [ j ]			      10 LOAD_GLOBAL 0 ( range )				    								  
    return abs ( d1 - d2 ) ;				      12 LOAD_CONST 1 ( 0 )					    149 14 LOAD_FAST 0 ( self )					  
							      14 LOAD_FAST 1 ( n )					    16 LOAD_ATTR 1 ( col )					  
							      16 CALL_FUNCTION 2					    18 LOAD_FAST 0 ( self )					  
							      18 GET_ITER						    20 LOAD_ATTR 0 ( col )					  
							      >> 20 FOR_ITER 80 ( to 102 )				    22 COMPARE_OP 2 ( == )					  
							      22 STORE_FAST 4 ( i )					    24 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 SETUP_LOOP 74 ( to 100 )				    150 26 LOAD_FAST 0 ( self )					  
							      26 LOAD_GLOBAL 0 ( range )				    28 LOAD_ATTR 2 ( col )					  
							      28 LOAD_CONST 1 ( 0 )					    30 LOAD_FAST 0 ( self )					  
							      30 LOAD_FAST 1 ( n )					    32 LOAD_ATTR 3 ( col )					  
							      32 CALL_FUNCTION 2					    34 COMPARE_OP 2 ( == )					  
							      34 GET_ITER						    36 POP_JUMP_IF_FALSE 42					  
							      >> 36 FOR_ITER 60 ( to 98 )				    								  
							      38 STORE_FAST 5 ( j )					    151 38 LOAD_FAST 0 ( self )					  
							      								    40 LOAD_ATTR 4 ( col )					  
							      6 40 LOAD_FAST 4 ( i )					    42 LOAD_FAST 0 ( self )					  
							      42 LOAD_FAST 5 ( j )					    44 LOAD_ATTR 5 ( col )					  
							      44 COMPARE_OP 2 ( == )					    46 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 64					    48 POP_JUMP_IF_FALSE 50					  
							      								    								  
							      7 48 LOAD_FAST 2 ( d1 )					    152 50 LOAD_FAST 0 ( self )					  
							      50 LOAD_FAST 0 ( arr )					    52 LOAD_ATTR 6 ( col )					  
							      52 LOAD_FAST 4 ( i )					    54 LOAD_FAST 0 ( self )					  
							      54 BINARY_SUBSCR						    56 LOAD_ATTR 7 ( col )					  
							      56 LOAD_FAST 5 ( j )					    58 COMPARE_OP 2 ( == )					  
							      58 BINARY_SUBSCR						    60 POP_JUMP_IF_FALSE 66					  
							      60 INPLACE_ADD						    								  
							      62 STORE_FAST 2 ( d1 )					    153 62 LOAD_FAST 0 ( self )					  
							      								    64 LOAD_ATTR 8 ( col )					  
							      8 >> 64 LOAD_FAST 4 ( i )					    66 LOAD_FAST 0 ( self )					  
							      66 LOAD_FAST 1 ( n )					    68 LOAD_ATTR 0 ( col )					  
							      68 LOAD_FAST 5 ( j )					    70 COMPARE_OP 2 ( == )					  
							      70 BINARY_SUBTRACT					    72 POP_JUMP_IF_FALSE 76					  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 BINARY_SUBTRACT					    154 74 LOAD_FAST 0 ( self )					  
							      76 COMPARE_OP 2 ( == )					    76 LOAD_ATTR 9 ( col )					  
							      78 POP_JUMP_IF_FALSE 36					    78 LOAD_FAST 0 ( self )					  
							      								    80 LOAD_ATTR 10 ( col )					  
							      9 80 LOAD_FAST 3 ( d2 )					    82 COMPARE_OP 2 ( == )					  
							      82 LOAD_FAST 0 ( arr )					    84 POP_JUMP_IF_FALSE 90					  
							      84 LOAD_FAST 4 ( i )					    								  
							      86 BINARY_SUBSCR						    155 86 LOAD_FAST 0 ( self )					  
							      88 LOAD_FAST 5 ( j )					    88 LOAD_ATTR 11 ( col )					  
							      90 BINARY_SUBSCR						    90 LOAD_FAST 0 ( self )					  
							      92 INPLACE_ADD						    92 LOAD_ATTR 12 ( col )					  
							      94 STORE_FAST 3 ( d2 )					    94 LOAD_FAST 0 ( self )					  
							      96 JUMP_ABSOLUTE 36					    96 LOAD_ATTR 0 ( col )					  
							      >> 98 POP_BLOCK						    98 LOAD_FAST 0 ( self )					  
							      >> 100 JUMP_ABSOLUTE 20					    100 LOAD_ATTR 0 ( col )					  
							      >> 102 POP_BLOCK						    102 LOAD_FAST 0 ( self )					  
							      								    104 LOAD_ATTR 0 ( col )					  
							      10 >> 104 LOAD_GLOBAL 1 ( abs )				    106 LOAD_FAST 0 ( self )					  
							      106 LOAD_FAST 2 ( d1 )					    108 LOAD_ATTR 0 ( col )					  
							      108 LOAD_FAST 3 ( d2 )					    110 LOAD_FAST 0 ( self )					  
							      110 BINARY_SUBTRACT					    112 LOAD_ATTR 0 ( col )					  
							      112 CALL_FUNCTION 1					    114 LOAD_FAST 0 ( self )					  
							      114 RETURN_VALUE NEW_LINE					    116 LOAD_ATTR 0 ( col )					  
							      								    118 LOAD_FAST 0 ( self )					  
							      								    120 LOAD_ATTR 5 ( col )					  
							      								    122 LOAD_FAST 0 ( self )					  
							      								    124 LOAD_ATTR 0 ( col )					  
							      								    126 LOAD_FAST 0 ( self )					  
							      								    128 LOAD_ATTR 5 ( col )					  
							      								    130 LOAD_FAST 0 ( self )					  
							      								    132 LOAD_ATTR 0 ( col )					  
							      								    134 LOAD_FAST 0 ( self )					  
							      								    136 LOAD_ATTR 0 ( col )					  
							      								    138 LOAD_FAST 0 ( self )					  
							      								    140 LOAD_ATTR 5 ( col )					  
							      								    142 LOAD_FAST 0 ( self )					  
							      								    144 LOAD_ATTR 0 ( col					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_XOR_VALUE_MATRIX				      MAXIMUM_XOR_VALUE_MATRIX					    MAXIMUM_XOR_VALUE_MATRIX					  MAXIMUM_XOR_VALUE_MATRIX
--							      --							    --								  --
def maxXOR ( mat , N ) :				      Disassembly of <code object maxXOR at 0x7fbac<<unk>> d540, fi Disassembly of <code object maxXOR at 0x7f816a682390, file "< error : Traceback (most recent call last):   File
    max_xor = 0						      2 0 LOAD_CONST 1 ( 0 )					    90 0 LOAD_FAST 1 ( N )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( N ) :				      2 STORE_FAST 2 ( max_xor )				    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	r_xor = 0					      								    4 COMPARE_OP 4 ( > )					  y", line 47, in run_dis_script     co_code, co_nlo
	c_xor = 0					      3 4 SETUP_LOOP 98 ( to 104 )				    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	for j in range ( N ) :				      6 LOAD_GLOBAL 0 ( range )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	    r_xor = r_xor ^ mat [ i ] [ j ]		      8 LOAD_FAST 1 ( N )					    91 8 LOAD_GLOBAL 0 ( np )					  pack non-iterable NoneType object
	    c_xor = c_xor ^ mat [ j ] [ i ]		      10 CALL_FUNCTION 1					    10 LOAD_METHOD 1 ( sqrt )					  
	if ( max_xor < max ( r_xor , c_xor ) ) :	      12 GET_ITER						    12 LOAD_FAST 0 ( mat )					  
	    max_xor = max ( r_xor , c_xor )		      >> 14 FOR_ITER 86 ( to 102 )				    14 LOAD_FAST 1 ( N )					  
    return max_xor					      16 STORE_FAST 3 ( i )					    16 LOAD_FAST 2 ( alpha )					  
							      								    18 LOAD_FAST 3 ( alpha )					  
							      4 18 LOAD_CONST 1 ( 0 )					    20 LOAD_FAST 4 ( alpha )					  
							      20 STORE_FAST 4 ( r_xor )					    22 LOAD_FAST 5 ( alpha )					  
							      								    24 LOAD_FAST 6 ( alpha )					  
							      5 22 LOAD_CONST 1 ( 0 )					    26 LOAD_FAST 7 ( alpha )					  
							      24 STORE_FAST 5 ( c_xor )					    28 LOAD_FAST 8 ( alpha )					  
							      								    30 LOAD_FAST 9 ( alpha )					  
							      6 26 SETUP_LOOP 48 ( to 76 )				    32 LOAD_FAST 10 ( alpha )					  
							      28 LOAD_GLOBAL 0 ( range )				    34 LOAD_FAST 11 ( alpha )					  
							      30 LOAD_FAST 1 ( N )					    36 LOAD_FAST 12 ( alpha )					  
							      32 CALL_FUNCTION 1					    38 LOAD_FAST 13 ( alpha )					  
							      34 GET_ITER						    40 LOAD_FAST 14 ( alpha )					  
							      >> 36 FOR_ITER 36 ( to 74 )				    42 LOAD_FAST 15 ( alpha )					  
							      38 STORE_FAST 6 ( j )					    44 LOAD_FAST 14 ( alpha )					  
							      								    46 LOAD_FAST 15 ( alpha )					  
							      7 40 LOAD_FAST 4 ( r_xor )				    48 LOAD_FAST 14 ( alpha )					  
							      42 LOAD_FAST 0 ( mat )					    50 LOAD_FAST 15 ( alpha )					  
							      44 LOAD_FAST 3 ( i )					    52 LOAD_FAST 14 ( alpha )					  
							      46 BINARY_SUBSCR						    54 LOAD_FAST 15 ( alpha )					  
							      48 LOAD_FAST 6 ( j )					    56 LOAD_FAST 16 ( alpha )					  
							      50 BINARY_SUBSCR						    58 LOAD_FAST 17 ( alpha )					  
							      52 BINARY_XOR						    60 LOAD_FAST 18 ( alpha )					  
							      54 STORE_FAST 4 ( r_xor )					    62 LOAD_FAST 17 ( alpha )					  
							      								    64 LOAD_FAST 18 ( alpha )					  
							      8 56 LOAD_FAST 5 ( c_xor )				    66 LOAD_FAST 19 ( alpha )					  
							      58 LOAD_FAST 0 ( mat )					    68 LOAD_FAST 20 ( alpha )					  
							      60 LOAD_FAST 6 ( j )					    70 LOAD_FAST 21 ( alpha )					  
							      62 BINARY_SUBSCR						    72 LOAD_FAST 22 ( alpha )					  
							      64 LOAD_FAST 3 ( i )					    74 LOAD_FAST 21 ( alpha )					  
							      66 BINARY_SUBSCR						    76 LOAD_FAST 22 ( alpha )					  
							      68 BINARY_XOR						    78 LOAD_FAST 22 ( alpha )					  
							      70 STORE_FAST 5 ( c_xor )					    80 LOAD_FAST 21 ( alpha )					  
							      72 JUMP_ABSOLUTE 36					    82 LOAD_FAST 22 ( alpha )					  
							      >> 74 POP_BLOCK						    84 LOAD_FAST 22 ( alpha )					  
							      								    86 LOAD_FAST 23 ( alpha )					  
							      9 >> 76 LOAD_FAST 2 ( max_xor )				    88 LOAD_FAST 22 ( alpha )					  
							      78 LOAD_GLOBAL 1 ( max )					    90 LOAD_FAST 23 ( alpha )					  
							      80 LOAD_FAST 4 ( r_xor )					    92 LOAD_FAST 22 ( alpha )					  
							      82 LOAD_FAST 5 ( c_xor )					    94 LOAD_FAST 24 ( alpha )					  
							      84 CALL_FUNCTION 2					    96 LOAD_FAST 23 ( alpha )					  
							      86 COMPARE_OP 0 ( < )					    98 LOAD_FAST 22 ( alpha )					  
							      88 POP_JUMP_IF_FALSE 14					    100 LOAD_FAST 23 ( alpha )					  
							      								    102 LOAD_FAST 22 ( alpha )					  
							      10 90 LOAD_GLOBAL 1 ( max )				    104 LOAD_FAST 24 ( alpha )					  
							      92 LOAD_FAST 4 ( r_xor )					    106 LOAD_FAST 23 ( alpha )					  
							      94 LOAD_FAST 5 ( c_xor )					    108 LOAD_FAST 22 ( alpha )					  
							      96 CALL_FUNCTION 2					    110 LOAD_FAST 24 ( alpha )					  
							      98 STORE_FAST 2 ( max_xor )				    112 LOAD_FAST 23 ( alpha )					  
							      100 JUMP_ABSOLUTE 14					    114 LOAD_FAST 24 ( alpha )					  
							      >> 102 POP_BLOCK						    116 LOAD_FAST 26 ( alpha )					  
							      								    118 LOAD_FAST 28 ( alpha )					  
							      11 >> 104 LOAD_FAST 2 ( max_xor )				    120 LOAD_FAST 30 ( alpha )					  
							      106 RETURN_VALUE NEW_LINE					    122 LOAD_FAST 29 ( alpha )					  
							      								    124 LOAD_FAST 30 ( alpha )					  
							      								    126 LOAD_FAST 30 ( alpha )					  
							      								    128 LOAD_FAST 30 ( alpha )					  
							      								    130 LOAD_FAST 30 ( alpha )					  
							      								    132 LOAD_FAST 30 ( alpha )					  
							      								    134 LOAD_FAST 30 ( alpha )					  
							      								    136 LOAD_FAST 30 ( alpha )					  
							      								    138 LOAD_FAST 30 ( alpha )					  
							      								    140 LOAD_FAST 31 ( alpha )					  
							      								    142								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_1S_SORTED_BINARY_ARRAY				      COUNT_1S_SORTED_BINARY_ARRAY				    COUNT_1S_SORTED_BINARY_ARRAY				  COUNT_1S_SORTED_BINARY_ARRAY
--							      --							    --								  --
def countOnes ( arr , low , high ) :			      Disassembly of <code object countOnes at 0x7fbac<<unk>> de40, Disassembly of <code object countOnes at 0x7f816a673a50, file script_not_found : None
    if high >= low :					      2 0 LOAD_FAST 2 ( high )					    154 0 LOAD_FAST 1 ( low )					  
	mid = low + ( high - low ) / 2			      2 LOAD_FAST 1 ( low )					    2 LOAD_CONST 1 ( - 1 )					  
	if ( ( mid == high or arr [ mid + 1 ] == 0 ) and ( ar 4 COMPARE_OP 5 ( >= )					    4 COMPARE_OP 2 ( == )					  
	    return mid + 1				      6 POP_JUMP_IF_FALSE 112					    6 POP_JUMP_IF_FALSE 12					  
	if arr [ mid ] == 1 :				      								    								  
	    return countOnes ( arr , ( mid + 1 ) , high )     3 8 LOAD_FAST 1 ( low )					    155 8 LOAD_FAST 1 ( low )					  
	return countOnes ( arr , low , mid - 1 )	      10 LOAD_FAST 2 ( high )					    10 LOAD_CONST 1 ( - 1 )					  
    return 0						      12 LOAD_FAST 1 ( low )					    12 COMPARE_OP 2 ( == )					  
							      14 BINARY_SUBTRACT					    14 POP_JUMP_IF_FALSE 28					  
							      16 LOAD_CONST 1 ( 2 )					    								  
							      18 BINARY_TRUE_DIVIDE					    156 >> 16 LOAD_FAST 1 ( low )				  
							      20 BINARY_ADD						    18 LOAD_CONST 1 ( - 1 )					  
							      22 STORE_FAST 3 ( mid )					    20 COMPARE_OP 2 ( == )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      4 24 LOAD_FAST 3 ( mid )					    								  
							      26 LOAD_FAST 2 ( high )					    157 24 LOAD_FAST 1 ( low )					  
							      28 COMPARE_OP 2 ( == )					    26 LOAD_CONST 1 ( - 1 )					  
							      30 POP_JUMP_IF_TRUE 48					    28 COMPARE_OP 2 ( == )					  
							      32 LOAD_FAST 0 ( arr )					    30 POP_JUMP_IF_FALSE 28					  
							      34 LOAD_FAST 3 ( mid )					    								  
							      36 LOAD_CONST 2 ( 1 )					    158 32 LOAD_FAST 1 ( low )					  
							      38 BINARY_ADD						    34 LOAD_CONST 1 ( - 1 )					  
							      40 BINARY_SUBSCR						    36 COMPARE_OP 2 ( == )					  
							      42 LOAD_CONST 3 ( 0 )					    38 POP_JUMP_IF_FALSE 42					  
							      44 COMPARE_OP 2 ( == )					    								  
							      46 POP_JUMP_IF_FALSE 68					    159 40 LOAD_FAST 1 ( low )					  
							      >> 48 LOAD_FAST 0 ( arr )					    42 LOAD_CONST 1 ( - 1 )					  
							      50 LOAD_FAST 3 ( mid )					    44 COMPARE_OP 2 ( == )					  
							      52 BINARY_SUBSCR						    46 POP_JUMP_IF_FALSE 50					  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 COMPARE_OP 2 ( == )					    160 48 LOAD_FAST 1 ( low )					  
							      58 POP_JUMP_IF_FALSE 68					    50 LOAD_CONST 1 ( - 1 )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      5 60 LOAD_FAST 3 ( mid )					    54 POP_JUMP_IF_FALSE 50					  
							      62 LOAD_CONST 2 ( 1 )					    								  
							      64 BINARY_ADD						    161 56 LOAD_FAST 1 ( low )					  
							      66 RETURN_VALUE						    58 LOAD_CONST 1 ( - 1 )					  
							      								    60 COMPARE_OP 2 ( == )					  
							      6 >> 68 LOAD_FAST 0 ( arr )				    62 POP_JUMP_IF_FALSE 50					  
							      70 LOAD_FAST 3 ( mid )					    								  
							      72 BINARY_SUBSCR						    162 64 LOAD_FAST 1 ( low )					  
							      74 LOAD_CONST 2 ( 1 )					    66 LOAD_CONST 1 ( - 1 )					  
							      76 COMPARE_OP 2 ( == )					    68 COMPARE_OP 2 ( == )					  
							      78 POP_JUMP_IF_FALSE 96					    70 POP_JUMP_IF_FALSE 50					  
							      								    								  
							      7 80 LOAD_GLOBAL 0 ( countOnes )				    163 72 LOAD_FAST 1 ( low )					  
							      82 LOAD_FAST 0 ( arr )					    74 LOAD_CONST 1 ( - 1 )					  
							      84 LOAD_FAST 3 ( mid )					    76 COMPARE_OP 2 ( == )					  
							      86 LOAD_CONST 2 ( 1 )					    78 POP_JUMP_IF_FALSE 94					  
							      88 BINARY_ADD						    								  
							      90 LOAD_FAST 2 ( high )					    164 80 LOAD_FAST 1 ( low )					  
							      92 CALL_FUNCTION 3					    82 LOAD_CONST 1 ( - 1 )					  
							      94 RETURN_VALUE						    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 94					  
							      8 >> 96 LOAD_GLOBAL 0 ( countOnes )			    								  
							      98 LOAD_FAST 0 ( arr )					    165 88 LOAD_FAST 1 ( low )					  
							      100 LOAD_FAST 1 ( low )					    90 LOAD_CONST 1 ( - 1 )					  
							      102 LOAD_FAST 3 ( mid )					    92 COMPARE_OP 2 ( == )					  
							      104 LOAD_CONST 2 ( 1 )					    94 POP_JUMP_IF_FALSE 94					  
							      106 BINARY_SUBTRACT					    								  
							      108 CALL_FUNCTION 3					    166 96 LOAD_FAST 1 ( low )					  
							      110 RETURN_VALUE						    98 LOAD_CONST 1 ( - 1 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      9 >> 112 LOAD_CONST 3 ( 0 )				    102 POP_JUMP_IF_FALSE 106					  
							      114 RETURN_VALUE NEW_LINE					    								  
							      								    167 104 LOAD_FAST 1 ( low )					  
							      								    106 LOAD_CONST 1 ( - 1 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    168 112 LOAD_FAST 1 ( low )					  
							      								    114 LOAD_CONST 1 ( - 1 )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    169 120 LOAD_FAST 1 ( low )					  
							      								    122 LOAD_CONST 1 ( - 1 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    170 128 LOAD_FAST 1 ( low )					  
							      								    130 LOAD_CONST 1 ( - 1 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    171 >> 136 LOAD_FAST 1 ( low )				  
							      								    138 LOAD_CONST 1 ( - 1 )					  
							      								    140 COMPARE_OP 2						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FIBONACCI_NUMBERS					      SUM_FIBONACCI_NUMBERS					    SUM_FIBONACCI_NUMBERS					  SUM_FIBONACCI_NUMBERS
--							      --							    --								  --
def calculateSum ( n ) :				      Disassembly of <code object calculateSum at 0x7fbac<<unk>> d5 Disassembly of <code object calculateSum at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    if ( n <= 0 ) :					      2 0 LOAD_FAST 0 ( n )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    fibo = [ 0 ] * ( n + 1 )				      4 COMPARE_OP 1 ( <= )					    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    fibo [ 1 ] = 1					      6 POP_JUMP_IF_FALSE 12					    6 LOAD_CONST 2 ( 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
    sm = fibo [ 0 ] + fibo [ 1 ]			      								    8 BINARY_SUBSCR						  rts = dis_asm.parse(bytecode) TypeError: cannot un
    for i in range ( 2 , n + 1 ) :			      3 8 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 3 ( 0 )					  pack non-iterable NoneType object
	fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]	      10 RETURN_VALUE						    12 BINARY_SUBSCR						  
	sm = sm + fibo [ i ]				      								    14 STORE_FAST 1 ( fibo )					  
    return sm						      4 >> 12 LOAD_CONST 1 ( 0 )				    								  
							      14 BUILD_LIST 1						    27 16 LOAD_FAST 1 ( fibo )					  
							      16 LOAD_FAST 0 ( n )					    18 LOAD_CONST 4 ( 1 )					  
							      18 LOAD_CONST 2 ( 1 )					    20 BINARY_SUBSCR						  
							      20 BINARY_ADD						    22 LOAD_FAST 1 ( fibo )					  
							      22 BINARY_MULTIPLY					    24 LOAD_CONST 5 ( 1 )					  
							      24 STORE_FAST 1 ( fibo )					    26 BINARY_SUBSCR						  
							      								    28 LOAD_CONST 6 ( 2 )					  
							      5 26 LOAD_CONST 2 ( 1 )					    30 BINARY_SUBSCR						  
							      28 LOAD_FAST 1 ( fibo )					    32 LOAD_CONST 7 ( 3 )					  
							      30 LOAD_CONST 2 ( 1 )					    34 BINARY_SUBSCR						  
							      32 STORE_SUBSCR						    36 LOAD_CONST 8 ( 2 )					  
							      								    38 BINARY_SUBSCR						  
							      6 34 LOAD_FAST 1 ( fibo )					    40 LOAD_CONST 9 ( 3 )					  
							      36 LOAD_CONST 1 ( 0 )					    42 BINARY_SUBSCR						  
							      38 BINARY_SUBSCR						    44 LOAD_CONST 10 ( 2 )					  
							      40 LOAD_FAST 1 ( fibo )					    46 BINARY_SUBSCR						  
							      42 LOAD_CONST 2 ( 1 )					    48 LOAD_CONST 11 ( 3 )					  
							      44 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      46 BINARY_ADD						    52 LOAD_CONST 12 ( 1 )					  
							      48 STORE_FAST 2 ( sm )					    54 BINARY_SUBSCR						  
							      								    56 LOAD_CONST 13 ( 1 )					  
							      7 50 SETUP_LOOP 62 ( to 114 )				    58 BINARY_SUBSCR						  
							      52 LOAD_GLOBAL 0 ( range )				    60 LOAD_CONST 14 ( 2 )					  
							      54 LOAD_CONST 3 ( 2 )					    62 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( n )					    64 LOAD_CONST 6 ( 2 )					  
							      58 LOAD_CONST 2 ( 1 )					    66 BINARY_SUBSCR						  
							      60 BINARY_ADD						    68 LOAD_CONST 7 ( 3 )					  
							      62 CALL_FUNCTION 2					    70 BINARY_SUBSCR						  
							      64 GET_ITER						    72 LOAD_CONST 6 ( 2 )					  
							      >> 66 FOR_ITER 44 ( to 112 )				    74 BINARY_SUBSCR						  
							      68 STORE_FAST 3 ( i )					    76 LOAD_CONST 8 ( 2 )					  
							      								    78 BINARY_SUBSCR						  
							      8 70 LOAD_FAST 1 ( fibo )					    80 LOAD_CONST 6 ( 2 )					  
							      72 LOAD_FAST 3 ( i )					    82 BINARY_SUBSCR						  
							      74 LOAD_CONST 2 ( 1 )					    84 LOAD_CONST 6 ( 2 )					  
							      76 BINARY_SUBTRACT					    86 BINARY_SUBSCR						  
							      78 BINARY_SUBSCR						    88 LOAD_CONST 7 ( 3 )					  
							      80 LOAD_FAST 1 ( fibo )					    90 BINARY_SUBSCR						  
							      82 LOAD_FAST 3 ( i )					    92 LOAD_CONST 6 ( 2 )					  
							      84 LOAD_CONST 3 ( 2 )					    94 BINARY_SUBSCR						  
							      86 BINARY_SUBTRACT					    96 LOAD_CONST 8 ( 2 )					  
							      88 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      90 BINARY_ADD						    100 LOAD_CONST 7 ( 3 )					  
							      92 LOAD_FAST 1 ( fibo )					    102 BINARY_SUBSCR						  
							      94 LOAD_FAST 3 ( i )					    104 LOAD_CONST 6 ( 2 )					  
							      96 STORE_SUBSCR						    106 BINARY_SUBSCR						  
							      								    108 LOAD_CONST 7 ( 3 )					  
							      9 98 LOAD_FAST 2 ( sm )					    110 BINARY_SUBSCR						  
							      100 LOAD_FAST 1 ( fibo )					    112 LOAD_CONST 8 ( 2 )					  
							      102 LOAD_FAST 3 ( i )					    114 BINARY_SUBSCR						  
							      104 BINARY_SUBSCR						    116 LOAD_CONST 9 ( 3 )					  
							      106 BINARY_ADD						    118 BINARY_SUBSCR						  
							      108 STORE_FAST 2 ( sm )					    120 LOAD_CONST 10 ( 2 )					  
							      110 JUMP_ABSOLUTE 66					    122 BINARY_SUBSCR						  
							      >> 112 POP_BLOCK						    124 LOAD_CONST 11 ( 3 )					  
							      								    126 BINARY_SUBSCR						  
							      10 >> 114 LOAD_FAST 2 ( sm )				    128 LOAD_CONST 12 ( 1 )					  
							      116 RETURN_VALUE NEW_LINE					    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 13 ( 1 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 14 ( 2 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 15 ( 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 16 ( 2 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 17 ( 0 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 18 ( 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 19 ( 2 )					  
							      								    158 BINARY_SUBSCR						  
							      								    								  
							      								    31 31 LOAD_FAST 1 ( fibo )					  
							      								    160 LOAD_CONST 6 ( 2 )					  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_CONST 19 ( 1 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 LOAD_CONST 20 ( 2 )					  
							      								    170 BINARY_SUBSCR						  
							      								    172 LOAD_CONST 21 ( 1 )					  
							      								    174 BINARY_SUBSCR						  
							      								    176 LOAD_CONST 20 ( 2 )					  
							      								    178 BINARY_SUBSCR						  
							      								    180 LOAD_CONST 21 ( 1 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_CONST 21 ( 1 )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_CONST 21 ( 1					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS	  REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS
--							      --							    --								  --
def psuedoBinary ( n ) :				      Disassembly of <code object psuedoBinary at 0x7fbac<<unk>> d5 Disassembly of <code object psuedoBinary at 0x7f816a673a50, f script_not_found : None
    while ( n > 0 ) :					      2 0 SETUP_LOOP 98 ( to 100 )				    26 0 LOAD_CONST 1 ( 0 )					  
	temp = n ;					      >> 2 LOAD_FAST 0 ( n )					    2 STORE_FAST 1 ( n )					  
	m = 0 ;						      4 LOAD_CONST 1 ( 0 )					    								  
	p = 1 ;						      6 COMPARE_OP 4 ( > )					    27 4 LOAD_CONST 2 ( '%d%d' )				  
	while ( temp ) :				      8 POP_JUMP_IF_FALSE 98					    6 LOAD_FAST 1 ( n )						  
	    rem = temp % 10 ;				      								    8 BINARY_MODULO						  
	    temp = int ( temp / 10 ) ;			      3 10 LOAD_FAST 0 ( n )					    10 STORE_FAST 2 ( d )					  
	    if ( rem != 0 ) :				      12 STORE_FAST 1 ( temp )					    								  
		m += p ;				      								    28 12 LOAD_FAST 2 ( d )					  
	    p *= 10 ;					      4 14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 3 ( '%d%d' )					  
	print ( m , end = " " ) ;			      16 STORE_FAST 2 ( m )					    16 LOAD_FAST 1 ( n )					  
	n = n - m ;					      								    18 BINARY_MODULO						  
							      5 18 LOAD_CONST 2 ( 1 )					    20 STORE_FAST 3 ( d )					  
							      20 STORE_FAST 3 ( p )					    								  
							      								    29 22 LOAD_FAST 3 ( d )					  
							      6 22 SETUP_LOOP 52 ( to 76 )				    24 LOAD_CONST 4 ( '%d%d' )					  
							      >> 24 LOAD_FAST 1 ( temp )				    26 LOAD_FAST 1 ( n )					  
							      26 POP_JUMP_IF_FALSE 74					    28 BINARY_MODULO						  
							      								    30 LOAD_CONST 5 ( '%d%d' )					  
							      7 28 LOAD_FAST 1 ( temp )					    32 LOAD_FAST 1 ( n )					  
							      30 LOAD_CONST 3 ( 10 )					    34 BINARY_MODULO						  
							      32 BINARY_MODULO						    36 LOAD_CONST 6 ( '%d%d' )					  
							      34 STORE_FAST 4 ( rem )					    38 LOAD_FAST 1 ( n )					  
							      								    40 BINARY_MODULO						  
							      8 36 LOAD_GLOBAL 0 ( int )				    42 LOAD_CONST 7 ( '%d' )					  
							      38 LOAD_FAST 1 ( temp )					    44 LOAD_FAST 1 ( n )					  
							      40 LOAD_CONST 3 ( 10 )					    46 BINARY_MODULO						  
							      42 BINARY_TRUE_DIVIDE					    48 BINARY_MODULO						  
							      44 CALL_FUNCTION 1					    50 STORE_FAST 4 ( d )					  
							      46 STORE_FAST 1 ( temp )					    								  
							      								    30 52 LOAD_FAST 0 ( self )					  
							      9 48 LOAD_FAST 4 ( rem )					    54 LOAD_METHOD 0 ( psuedoBinary )				  
							      50 LOAD_CONST 1 ( 0 )					    56 LOAD_FAST 2 ( d )					  
							      52 COMPARE_OP 3 ( != )					    58 LOAD_FAST 4 ( d )					  
							      54 POP_JUMP_IF_FALSE 64					    60 LOAD_FAST 1 ( n )					  
							      								    62 CALL_METHOD 2						  
							      10 56 LOAD_FAST 2 ( m )					    64 RETURN_VALUE NEW_LINE					  
							      58 LOAD_FAST 3 ( p )					    								  
							      60 INPLACE_ADD						    								  
							      62 STORE_FAST 2 ( m )					    								  
							      								    								  
							      11 >> 64 LOAD_FAST 3 ( p )				    								  
							      66 LOAD_CONST 3 ( 10 )					    								  
							      68 INPLACE_MULTIPLY					    								  
							      70 STORE_FAST 3 ( p )					    								  
							      72 JUMP_ABSOLUTE 24					    								  
							      >> 74 POP_BLOCK						    								  
							      								    								  
							      12 >> 76 LOAD_GLOBAL 1 ( print )				    								  
							      78 LOAD_FAST 2 ( m )					    								  
							      80 LOAD_CONST 4 ( ' ' )					    								  
							      82 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      84 CALL_FUNCTION_KW 2					    								  
							      86 POP_TOP						    								  
							      								    								  
							      13 88 LOAD_FAST 0 ( n )					    								  
							      90 LOAD_FAST 2 ( m )					    								  
							      92 BINARY_SUBTRACT					    								  
							      94 STORE_FAST 0 ( n )					    								  
							      96 JUMP_ABSOLUTE 2					    								  
							      >> 98 POP_BLOCK						    								  
							      >> 100 LOAD_CONST 0 ( None )				    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_REACHING_POINT_2_3_STEPS_TIME		      PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			    PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			  PROBABILITY_REACHING_POINT_2_3_STEPS_TIME
--							      --							    --								  --
def find_prob ( N , P ) :				      Disassembly of <code object find_prob at 0x7fbac<<unk>> d540, Disassembly of <code object find_prob at 0x7f816a6e4b70, file script_not_found : None
    dp = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( N )					  
    dp [ 0 ] = 1					      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 1 )					  
    dp [ 1 ] = 0					      4 LOAD_GLOBAL 0 ( n )					    4 BINARY_SUBSCR						  
    dp [ 2 ] = P					      6 LOAD_CONST 2 ( 1 )					    6 LOAD_FAST 0 ( N )						  
    dp [ 3 ] = 1 - P					      8 BINARY_ADD						    8 LOAD_CONST 2 ( 1 )					  
    for i in range ( 4 , N + 1 ) :			      10 BINARY_MULTIPLY					    10 BINARY_SUBSCR						  
	dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i  12 STORE_FAST 2 ( dp )					    12 LOAD_CONST 3 ( - 1 )					  
    return dp [ N ]					      								    14 BINARY_SUBSCR						  
							      3 14 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 4 ( - 1 )					  
							      16 LOAD_FAST 2 ( dp )					    18 BINARY_SUBSCR						  
							      18 LOAD_CONST 1 ( 0 )					    20 LOAD_FAST 0 ( N )					  
							      20 STORE_SUBSCR						    22 LOAD_CONST 5 ( - 1 )					  
							      								    24 BINARY_SUBSCR						  
							      4 22 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 6 ( - 1 )					  
							      24 LOAD_FAST 2 ( dp )					    28 BINARY_SUBSCR						  
							      26 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 7 ( - 1 )					  
							      28 STORE_SUBSCR						    32 BINARY_SUBSCR						  
							      								    34 LOAD_CONST 8 ( - 1 )					  
							      5 30 LOAD_FAST 1 ( P )					    36 BINARY_SUBSCR						  
							      32 LOAD_FAST 2 ( dp )					    38 LOAD_CONST 9 ( - 1 )					  
							      34 LOAD_CONST 3 ( 2 )					    40 BINARY_SUBSCR						  
							      36 STORE_SUBSCR						    42 LOAD_CONST 10 ( - 1 )					  
							      								    44 BINARY_SUBSCR						  
							      6 38 LOAD_CONST 2 ( 1 )					    46 LOAD_CONST 11 ( - 1 )					  
							      40 LOAD_FAST 1 ( P )					    48 BINARY_SUBSCR						  
							      42 BINARY_SUBTRACT					    50 LOAD_CONST 12 ( - 1 )					  
							      44 LOAD_FAST 2 ( dp )					    52 BINARY_SUBSCR						  
							      46 LOAD_CONST 4 ( 3 )					    54 LOAD_CONST 13 ( - 1 )					  
							      48 STORE_SUBSCR						    56 BINARY_SUBSCR						  
							      								    58 LOAD_CONST 14 ( - 1 )					  
							      7 50 SETUP_LOOP 62 ( to 114 )				    60 BINARY_SUBSCR						  
							      52 LOAD_GLOBAL 1 ( range )				    62 LOAD_CONST 15 ( - 1 )					  
							      54 LOAD_CONST 5 ( 4 )					    64 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( N )					    66 LOAD_CONST 16 ( - 1 )					  
							      58 LOAD_CONST 2 ( 1 )					    68 BINARY_SUBSCR						  
							      60 BINARY_ADD						    70 LOAD_CONST 17 ( - 1 )					  
							      62 CALL_FUNCTION 2					    72 BINARY_SUBSCR						  
							      64 GET_ITER						    74 LOAD_CONST 16 ( - 1 )					  
							      >> 66 FOR_ITER 44 ( to 112 )				    76 BINARY_SUBSCR						  
							      68 STORE_FAST 3 ( i )					    78 LOAD_CONST 17 ( - 1 )					  
							      								    80 BINARY_SUBSCR						  
							      8 70 LOAD_FAST 1 ( P )					    82 LOAD_CONST 18 ( - 1 )					  
							      72 LOAD_FAST 2 ( dp )					    84 BINARY_SUBSCR						  
							      74 LOAD_FAST 3 ( i )					    86 LOAD_CONST 19 ( - 1 )					  
							      76 LOAD_CONST 3 ( 2 )					    88 BINARY_SUBSCR						  
							      78 BINARY_SUBTRACT					    90 LOAD_CONST 20 ( - 1 )					  
							      80 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      82 BINARY_MULTIPLY					    94 LOAD_CONST 21 ( - 1 )					  
							      84 LOAD_CONST 2 ( 1 )					    96 BINARY_SUBSCR						  
							      86 LOAD_FAST 1 ( P )					    98 LOAD_CONST 22 ( - 1 )					  
							      88 BINARY_SUBTRACT					    100 BINARY_SUBSCR						  
							      90 LOAD_FAST 2 ( dp )					    102 LOAD_CONST 22 ( - 1 )					  
							      92 LOAD_FAST 3 ( i )					    104 BINARY_SUBSCR						  
							      94 LOAD_CONST 4 ( 3 )					    106 LOAD_CONST 21 ( - 1 )					  
							      96 BINARY_SUBTRACT					    108 BINARY_SUBSCR						  
							      98 BINARY_SUBSCR						    110 LOAD_CONST 22 ( - 1 )					  
							      100 BINARY_MULTIPLY					    112 BINARY_SUBSCR						  
							      102 BINARY_ADD						    114 LOAD_CONST 21 ( - 1 )					  
							      104 LOAD_FAST 2 ( dp )					    116 BINARY_SUBSCR						  
							      106 LOAD_FAST 3 ( i )					    118 LOAD_CONST 22 ( - 1 )					  
							      108 STORE_SUBSCR						    120 BINARY_SUBSCR						  
							      110 JUMP_ABSOLUTE 66					    122 LOAD_CONST 22 ( - 1 )					  
							      >> 112 POP_BLOCK						    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 23 ( - 1 )					  
							      9 >> 114 LOAD_FAST 2 ( dp )				    128 BINARY_SUBSCR						  
							      116 LOAD_FAST 0 ( N )					    130 LOAD_CONST 22 ( - 1 )					  
							      118 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      120 RETURN_VALUE NEW_LINE					    134 LOAD_CONST 23 ( - 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 24 ( - 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 25 ( - 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 26 ( - 1 )					  
							      								    148 LOAD_CONST 25 ( - 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 26 ( - 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_CONST 28 ( - 1 )					  
							      								    158 LOAD_CONST 30 ( - 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 30 ( - 1 )					  
							      								    160 BUILD_SLICE 2						  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_CONST 25 ( - 1 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 LOAD_CONST 26 ( - 1 )					  
							      								    170 BUILD_SLICE 2						  
							      								    168 STORE_SUBSCR						  
							      								    								  
							      								    27 27 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	      SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	    SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	  SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING
--							      --							    --								  --
def search ( pat , txt ) :				      Disassembly of <code object search at 0x7fbac<<unk>> d540, fi Disassembly of <code object search at 0x7f816a673a50, file "< script_not_found : None
    M = len ( pat )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_GLOBAL 0 ( M )					  
    N = len ( txt )					      2 LOAD_FAST 0 ( pat )					    2 LOAD_METHOD 1 ( sum )					  
    for i in range ( N - M + 1 ) :			      4 CALL_FUNCTION 1						    4 LOAD_FAST 0 ( pat )					  
	j = 0						      6 STORE_FAST 2 ( M )					    6 CALL_METHOD 1						  
	while ( j < M ) :				      								    8 STORE_FAST 1 ( txt )					  
	    if ( txt [ i + j ] != pat [ j ] ) :		      3 8 LOAD_GLOBAL 0 ( len )					    								  
		break					      10 LOAD_FAST 1 ( txt )					    27 10 LOAD_FAST 1 ( txt )					  
	    j += 1					      12 CALL_FUNCTION 1					    12 LOAD_METHOD 2 ( append )					  
	if ( j == M ) :					      14 STORE_FAST 3 ( N )					    14 LOAD_FAST 1 ( txt )					  
	    print ( "Pattern found at index " , i )	      								    16 CALL_METHOD 1						  
							      4 16 SETUP_LOOP 90 ( to 108 )				    18 POP_TOP							  
							      18 LOAD_GLOBAL 1 ( range )				    								  
							      20 LOAD_FAST 3 ( N )					    28 20 LOAD_FAST 1 ( txt )					  
							      22 LOAD_FAST 2 ( M )					    22 LOAD_METHOD 3 ( write )					  
							      24 BINARY_SUBTRACT					    24 LOAD_FAST 0 ( pat )					  
							      26 LOAD_CONST 1 ( 1 )					    26 CALL_METHOD 1						  
							      28 BINARY_ADD						    28 POP_TOP							  
							      30 CALL_FUNCTION 1					    30 LOAD_CONST 0 ( None )					  
							      32 GET_ITER						    32 RETURN_VALUE						  
							      >> 34 FOR_ITER 70 ( to 106 )				    NEW_LINE							  
							      36 STORE_FAST 4 ( i )					    								  
							      								    								  
							      5 38 LOAD_CONST 2 ( 0 )					    								  
							      40 STORE_FAST 5 ( j )					    								  
							      								    								  
							      6 42 SETUP_LOOP 42 ( to 86 )				    								  
							      >> 44 LOAD_FAST 5 ( j )					    								  
							      46 LOAD_FAST 2 ( M )					    								  
							      48 COMPARE_OP 0 ( < )					    								  
							      50 POP_JUMP_IF_FALSE 84					    								  
							      								    								  
							      7 52 LOAD_FAST 1 ( txt )					    								  
							      54 LOAD_FAST 4 ( i )					    								  
							      56 LOAD_FAST 5 ( j )					    								  
							      58 BINARY_ADD						    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_FAST 0 ( pat )					    								  
							      64 LOAD_FAST 5 ( j )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 COMPARE_OP 3 ( != )					    								  
							      70 POP_JUMP_IF_FALSE 74					    								  
							      								    								  
							      8 72 BREAK_LOOP						    								  
							      								    								  
							      9 >> 74 LOAD_FAST 5 ( j )					    								  
							      76 LOAD_CONST 1 ( 1 )					    								  
							      78 INPLACE_ADD						    								  
							      80 STORE_FAST 5 ( j )					    								  
							      82 JUMP_ABSOLUTE 44					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 LOAD_FAST 5 ( j )				    								  
							      88 LOAD_FAST 2 ( M )					    								  
							      90 COMPARE_OP 2 ( == )					    								  
							      92 POP_JUMP_IF_FALSE 34					    								  
							      								    								  
							      11 94 LOAD_GLOBAL 2 ( print )				    								  
							      96 LOAD_CONST 3 ( 'Pattern found at index ' )		    								  
							      98 LOAD_FAST 4 ( i )					    								  
							      100 CALL_FUNCTION 2					    								  
							      102 POP_TOP						    								  
							      104 JUMP_ABSOLUTE 34					    								  
							      >> 106 POP_BLOCK						    								  
							      >> 108 LOAD_CONST 0 ( None )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT	      STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT	    STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT		  STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT
--							      --							    --								  --
def findString ( n , k ) :				      Disassembly of <code object findString at 0x7fbac0e8bc90, fil Disassembly of <code object findString at 0x7f816a677930, fil error : Traceback (most recent call last):   File
    res = ""						      2 0 LOAD_CONST 1 ( '' )					    26 0 LOAD_CONST 1 ( "" )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( k ) :				      2 STORE_FAST 2 ( res )					    2 STORE_FAST 1 ( k )					  (item)   File "main.py", line 37, in <module>	  Fi
	res = res + chr ( ord ( 'a' ) + i )		      								    								  le "<dis>", line 2, in findString TypeError: can o
    count = 0						      3 4 SETUP_LOOP 36 ( to 42 )				    27 4 LOAD_FAST 1 ( k )					  nly concatenate str (not "int") to str
    for i in range ( n - k ) :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_CONST 2 ( 0 )					  
	res = res + chr ( ord ( 'a' ) + count )		      8 LOAD_FAST 1 ( k )					    8 COMPARE_OP 4 ( > )					  
	count += 1					      10 CALL_FUNCTION 1					    10 POP_JUMP_IF_FALSE 20					  
	if ( count == k ) :				      12 GET_ITER						    								  
	    count = 0 ;					      >> 14 FOR_ITER 24 ( to 40 )				    28 12 LOAD_FAST 1 ( k )					  
    return res						      16 STORE_FAST 3 ( i )					    14 LOAD_CONST 3 ( 1 )					  
							      								    16 INPLACE_ADD						  
							      4 18 LOAD_FAST 2 ( res )					    18 STORE_FAST 1 ( k )					  
							      20 LOAD_GLOBAL 1 ( chr )					    								  
							      22 LOAD_GLOBAL 2 ( ord )					    29 >> 20 LOAD_FAST 1 ( k )					  
							      24 LOAD_CONST 2 ( 'a' )					    22 LOAD_CONST 4 ( 2 )					  
							      26 CALL_FUNCTION 1					    24 INPLACE_ADD						  
							      28 LOAD_FAST 3 ( i )					    26 STORE_FAST 1 ( k )					  
							      30 BINARY_ADD						    								  
							      32 CALL_FUNCTION 1					    30 28 LOAD_FAST 1 ( k )					  
							      34 BINARY_ADD						    30 LOAD_CONST 5 ( 3 )					  
							      36 STORE_FAST 2 ( res )					    32 INPLACE_ADD						  
							      38 JUMP_ABSOLUTE 14					    34 STORE_FAST 1 ( k )					  
							      >> 40 POP_BLOCK						    								  
							      								    31 36 LOAD_FAST 1 ( k )					  
							      5 >> 42 LOAD_CONST 3 ( 0 )				    38 LOAD_CONST 6 ( 4 )					  
							      44 STORE_FAST 4 ( count )					    40 INPLACE_ADD						  
							      								    42 STORE_FAST 1 ( k )					  
							      6 46 SETUP_LOOP 60 ( to 108 )				    								  
							      48 LOAD_GLOBAL 0 ( range )				    32 44 LOAD_FAST 1 ( k )					  
							      50 LOAD_FAST 0 ( n )					    46 LOAD_CONST 7 ( 3 )					  
							      52 LOAD_FAST 1 ( k )					    48 INPLACE_ADD						  
							      54 BINARY_SUBTRACT					    50 STORE_FAST 1 ( k )					  
							      56 CALL_FUNCTION 1					    								  
							      58 GET_ITER						    33 52 LOAD_FAST 1 ( k )					  
							      >> 60 FOR_ITER 44 ( to 106 )				    54 LOAD_FAST 1 ( k )					  
							      62 STORE_FAST 3 ( i )					    56 LOAD_FAST 0 ( n )					  
							      								    58 LOAD_FAST 0 ( n )					  
							      7 64 LOAD_FAST 2 ( res )					    60 LOAD_FAST 0 ( n )					  
							      66 LOAD_GLOBAL 1 ( chr )					    62 LOAD_FAST 0 ( n )					  
							      68 LOAD_GLOBAL 2 ( ord )					    64 BINARY_ADD						  
							      70 LOAD_CONST 2 ( 'a' )					    66 BUILD_SLICE 2						  
							      72 CALL_FUNCTION 1					    68 BINARY_SUBSCR						  
							      74 LOAD_FAST 4 ( count )					    70 LOAD_CONST 8 ( 2 )					  
							      76 BINARY_ADD						    72 INPLACE_ADD						  
							      78 CALL_FUNCTION 1					    74 STORE_FAST 1 ( k )					  
							      80 BINARY_ADD						    								  
							      82 STORE_FAST 2 ( res )					    34 76 LOAD_FAST 1 ( k )					  
							      								    78 LOAD_FAST 0 ( n )					  
							      8 84 LOAD_FAST 4 ( count )				    80 LOAD_FAST 0 ( n )					  
							      86 LOAD_CONST 4 ( 1 )					    82 LOAD_FAST 0 ( n )					  
							      88 INPLACE_ADD						    84 LOAD_FAST 0 ( n )					  
							      90 STORE_FAST 4 ( count )					    86 LOAD_FAST 0 ( n )					  
							      								    88 LOAD_FAST 0 ( n )					  
							      9 92 LOAD_FAST 4 ( count )				    90 LOAD_FAST 0 ( n )					  
							      94 LOAD_FAST 1 ( k )					    92 LOAD_FAST 0 ( n )					  
							      96 COMPARE_OP 2 ( == )					    94 LOAD_FAST 0 ( n )					  
							      98 POP_JUMP_IF_FALSE 60					    96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_FAST 0 ( n )					  
							      10 100 LOAD_CONST 3 ( 0 )					    100 LOAD_FAST 0 ( n )					  
							      102 STORE_FAST 4 ( count )				    102 LOAD_FAST 0 ( n )					  
							      104 JUMP_ABSOLUTE 60					    104 LOAD_FAST 0 ( n )					  
							      >> 106 POP_BLOCK						    106 LOAD_FAST 0 ( n )					  
							      								    108 LOAD_FAST 0 ( n )					  
							      11 >> 108 LOAD_FAST 2 ( res )				    110 LOAD_FAST 0 ( n )					  
							      110 RETURN_VALUE NEW_LINE					    112 BUILD_TUPLE 3						  
							      								    114 STORE_SUBSCR						  
							      								    								  
							      								    35 116 LOAD_FAST 1 ( k )					  
							      								    118 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1
--							      --							    --								  --
def countPairs ( str1 ) :				      Disassembly of <code object countPairs at 0x7fbac0e8bc90, fil Disassembly of <code object countPairs at 0x7f816a683d20, fil script_not_found : None
    result = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_CONST 1 ( 0 )					  
    n = len ( str1 )					      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( i )					  
    for i in range ( 0 , n ) :				      								    								  
	for j in range ( 1 , MAX_CHAR + 1 ) :		      3 4 LOAD_GLOBAL 0 ( len )					    21 4 SETUP_LOOP 44 ( to 46 )				  
	    if ( ( i + j ) < n ) :			      6 LOAD_FAST 0 ( str1 )					    6 LOAD_GLOBAL 0 ( range )					  
		if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( s 8 CALL_FUNCTION 1						    8 LOAD_CONST 2 ( 1 )					  
		    result += 1 ;			      10 STORE_FAST 2 ( n )					    10 CALL_FUNCTION 1						  
    return result					      								    12 GET_ITER							  
							      4 12 SETUP_LOOP 98 ( to 112 )				    >> 14 FOR_ITER 44 ( to 46 )					  
							      14 LOAD_GLOBAL 1 ( range )				    16 STORE_FAST 2 ( i )					  
							      16 LOAD_CONST 1 ( 0 )					    								  
							      18 LOAD_FAST 2 ( n )					    22 18 LOAD_FAST 0 ( str1 )					  
							      20 CALL_FUNCTION 2					    20 LOAD_METHOD 1 ( append )					  
							      22 GET_ITER						    22 LOAD_FAST 1 ( i )					  
							      >> 24 FOR_ITER 84 ( to 110 )				    24 CALL_METHOD 1						  
							      26 STORE_FAST 3 ( i )					    26 POP_TOP							  
							      								    28 JUMP_ABSOLUTE 14						  
							      5 28 SETUP_LOOP 78 ( to 108 )				    >> 30 POP_BLOCK						  
							      30 LOAD_GLOBAL 1 ( range )				    >> 32 LOAD_CONST 0 ( None )					  
							      32 LOAD_CONST 2 ( 1 )					    34 RETURN_VALUE						  
							      34 LOAD_GLOBAL 2 ( MAX_CHAR )				    NEW_LINE							  
							      36 LOAD_CONST 2 ( 1 )					    								  
							      38 BINARY_ADD						    								  
							      40 CALL_FUNCTION 2					    								  
							      42 GET_ITER						    								  
							      >> 44 FOR_ITER 60 ( to 106 )				    								  
							      46 STORE_FAST 4 ( j )					    								  
							      								    								  
							      6 48 LOAD_FAST 3 ( i )					    								  
							      50 LOAD_FAST 4 ( j )					    								  
							      52 BINARY_ADD						    								  
							      54 LOAD_FAST 2 ( n )					    								  
							      56 COMPARE_OP 0 ( < )					    								  
							      58 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      7 60 LOAD_GLOBAL 3 ( abs )				    								  
							      62 LOAD_GLOBAL 4 ( ord )					    								  
							      64 LOAD_FAST 0 ( str1 )					    								  
							      66 LOAD_FAST 3 ( i )					    								  
							      68 LOAD_FAST 4 ( j )					    								  
							      70 BINARY_ADD						    								  
							      72 BINARY_SUBSCR						    								  
							      74 CALL_FUNCTION 1					    								  
							      76 LOAD_GLOBAL 4 ( ord )					    								  
							      78 LOAD_FAST 0 ( str1 )					    								  
							      80 LOAD_FAST 3 ( i )					    								  
							      82 BINARY_SUBSCR						    								  
							      84 CALL_FUNCTION 1					    								  
							      86 BINARY_SUBTRACT					    								  
							      88 CALL_FUNCTION 1					    								  
							      90 LOAD_FAST 4 ( j )					    								  
							      92 COMPARE_OP 2 ( == )					    								  
							      94 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      8 96 LOAD_FAST 1 ( result )				    								  
							      98 LOAD_CONST 2 ( 1 )					    								  
							      100 INPLACE_ADD						    								  
							      102 STORE_FAST 1 ( result )				    								  
							      104 JUMP_ABSOLUTE 44					    								  
							      >> 106 POP_BLOCK						    								  
							      >> 108 JUMP_ABSOLUTE 24					    								  
							      >> 110 POP_BLOCK						    								  
							      								    								  
							      9 >> 112 LOAD_FAST 1 ( result )				    								  
							      114 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1
--							      --							    --								  --
def reorder ( arr , index , n ) :			      Disassembly of <code object reorder at 0x7fbac0e8bc90, file " Disassembly of <code object reorder at 0x7f816a683d20, file " script_not_found : None
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 108 ( to 110 )				    56 0 SETUP_LOOP 22 ( to 24 )				  
	while ( index [ i ] != i ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 1 ( index )					  
	    oldTargetI = index [ index [ i ] ]		      4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  
	    oldTargetE = arr [ index [ i ] ]		      6 LOAD_FAST 2 ( n )					    >> 6 FOR_ITER 14 ( to 22 )					  
	    arr [ index [ i ] ] = arr [ i ]		      8 CALL_FUNCTION 2						    8 STORE_FAST 2 ( key )					  
	    index [ index [ i ] ] = index [ i ]		      10 GET_ITER						    								  
	    index [ i ] = oldTargetI			      >> 12 FOR_ITER 94 ( to 108 )				    57 10 LOAD_FAST 0 ( self )					  
	    arr [ i ] = oldTargetE			      14 STORE_FAST 3 ( i )					    12 LOAD_ATTR 0 ( __class__ )				  
							      								    14 LOAD_ATTR 1 ( __name__ )					  
							      3 16 SETUP_LOOP 88 ( to 106 )				    16 LOAD_FAST 2 ( key )					  
							      >> 18 LOAD_FAST 1 ( index )				    18 BINARY_SUBSCR						  
							      20 LOAD_FAST 3 ( i )					    20 LOAD_FAST 1 ( index )					  
							      22 BINARY_SUBSCR						    22 COMPARE_OP 2 ( == )					  
							      24 LOAD_FAST 3 ( i )					    24 POP_JUMP_IF_FALSE 6					  
							      26 COMPARE_OP 3 ( != )					    								  
							      28 POP_JUMP_IF_FALSE 104					    58 26 LOAD_FAST 0 ( self )					  
							      								    28 LOAD_ATTR 2 ( __class__ )				  
							      4 30 LOAD_FAST 1 ( index )				    30 LOAD_ATTR 3 ( __name__ )					  
							      32 LOAD_FAST 1 ( index )					    32 LOAD_FAST 2 ( key )					  
							      34 LOAD_FAST 3 ( i )					    34 STORE_SUBSCR						  
							      36 BINARY_SUBSCR						    36 JUMP_ABSOLUTE 6						  
							      38 BINARY_SUBSCR						    >> 38 POP_BLOCK						  
							      40 STORE_FAST 4 ( oldTargetI )				    >> 40 LOAD_CONST 1 ( None )					  
							      								    42 RETURN_VALUE						  
							      5 42 LOAD_FAST 0 ( arr )					    NEW_LINE							  
							      44 LOAD_FAST 1 ( index )					    								  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 BINARY_SUBSCR						    								  
							      52 STORE_FAST 5 ( oldTargetE )				    								  
							      								    								  
							      6 54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 3 ( i )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 LOAD_FAST 0 ( arr )					    								  
							      62 LOAD_FAST 1 ( index )					    								  
							      64 LOAD_FAST 3 ( i )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 STORE_SUBSCR						    								  
							      								    								  
							      7 70 LOAD_FAST 1 ( index )				    								  
							      72 LOAD_FAST 3 ( i )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 LOAD_FAST 1 ( index )					    								  
							      78 LOAD_FAST 1 ( index )					    								  
							      80 LOAD_FAST 3 ( i )					    								  
							      82 BINARY_SUBSCR						    								  
							      84 STORE_SUBSCR						    								  
							      								    								  
							      8 86 LOAD_FAST 4 ( oldTargetI )				    								  
							      88 LOAD_FAST 1 ( index )					    								  
							      90 LOAD_FAST 3 ( i )					    								  
							      92 STORE_SUBSCR						    								  
							      								    								  
							      9 94 LOAD_FAST 5 ( oldTargetE )				    								  
							      96 LOAD_FAST 0 ( arr )					    								  
							      98 LOAD_FAST 3 ( i )					    								  
							      100 STORE_SUBSCR						    								  
							      102 JUMP_ABSOLUTE 18					    								  
							      >> 104 POP_BLOCK						    								  
							      >> 106 JUMP_ABSOLUTE 12					    								  
							      >> 108 POP_BLOCK						    								  
							      >> 110 LOAD_CONST 0 ( None )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_23_45_67_89_UPTO_N_TERMS			      SUM_SERIES_23_45_67_89_UPTO_N_TERMS			    SUM_SERIES_23_45_67_89_UPTO_N_TERMS				  SUM_SERIES_23_45_67_89_UPTO_N_TERMS
--							      --							    --								  --
def seriesSum ( n ) :					      Disassembly of <code object seriesSum at 0x7fbac<<unk>> d540, Disassembly of <code object seriesSum at 0x7f816a6e4b70, file error : /bin/bash: line 1: 26205 Segmentation faul
    i = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_CONST 1 ( 0.0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    res = 0.0 ;						      2 STORE_FAST 1 ( i )					    2 STORE_FAST 1 ( res )					  ataset/bin/python XLM/dis_script.py --script_path
    sign = True ;					      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    while ( n > 0 ) :					      3 4 LOAD_CONST 2 ( 0.0 )					    27 4 LOAD_CONST 2 ( 0.0 )					  eval_scripts/python_sa-dis_sa.test/SUM_SERIES_23_4
	n = n - 1 ;					      6 STORE_FAST 2 ( res )					    6 STORE_FAST 2 ( sign )					  5_67_89_UPTO_N_TERMS.dis
	if ( sign ) :					      								    								  
	    sign = False ;				      4 8 LOAD_CONST 3 ( True )					    28 8 LOAD_FAST 0 ( n )					  
	    res = res + ( i + 1 ) / ( i + 2 ) ;		      10 STORE_FAST 3 ( sign )					    10 LOAD_CONST 3 ( 1 )					  
	    i = i + 2 ;					      								    12 COMPARE_OP 4 ( > )					  
	else :						      5 12 SETUP_LOOP 90 ( to 104 )				    14 POP_JUMP_IF_FALSE 26					  
	    sign = True ;				      >> 14 LOAD_FAST 0 ( n )					    								  
	    res = res - ( i + 1 ) / ( i + 2 ) ;		      16 LOAD_CONST 4 ( 0 )					    29 16 LOAD_CONST 4 ( 0.0 )					  
	    i = i + 2 ;					      18 COMPARE_OP 4 ( > )					    18 STORE_FAST 2 ( sign )					  
    return res ;					      20 POP_JUMP_IF_FALSE 102					    								  
							      								    30 20 LOAD_FAST 1 ( res )					  
							      6 22 LOAD_FAST 0 ( n )					    22 LOAD_CONST 5 ( '--' )					  
							      24 LOAD_CONST 1 ( 1 )					    24 COMPARE_OP 2 ( == )					  
							      26 BINARY_SUBTRACT					    26 POP_JUMP_IF_FALSE 32					  
							      28 STORE_FAST 0 ( n )					    								  
							      								    31 28 LOAD_CONST 6 ( 0.0 )					  
							      7 30 LOAD_FAST 3 ( sign )					    30 STORE_FAST 2 ( sign )					  
							      32 POP_JUMP_IF_FALSE 68					    								  
							      								    32 32 LOAD_FAST 0 ( n )					  
							      8 34 LOAD_CONST 5 ( False )				    34 LOAD_CONST 7 ( 2 )					  
							      36 STORE_FAST 3 ( sign )					    36 COMPARE_OP 4 ( > )					  
							      								    38 POP_JUMP_IF_FALSE 40					  
							      9 38 LOAD_FAST 2 ( res )					    								  
							      40 LOAD_FAST 1 ( i )					    33 40 LOAD_CONST 8 ( 0.0 )					  
							      42 LOAD_CONST 1 ( 1 )					    42 STORE_FAST 2 ( sign )					  
							      44 BINARY_ADD						    								  
							      46 LOAD_FAST 1 ( i )					    34 44 LOAD_FAST 0 ( n )					  
							      48 LOAD_CONST 6 ( 2 )					    46 LOAD_CONST 9 ( 2 )					  
							      50 BINARY_ADD						    48 COMPARE_OP 4 ( > )					  
							      52 BINARY_TRUE_DIVIDE					    50 POP_JUMP_IF_FALSE 40					  
							      54 BINARY_ADD						    								  
							      56 STORE_FAST 2 ( res )					    35 52 LOAD_CONST 10 ( 0.0 )					  
							      								    54 STORE_FAST 2 ( sign )					  
							      10 58 LOAD_FAST 1 ( i )					    								  
							      60 LOAD_CONST 6 ( 2 )					    36 56 LOAD_FAST 0 ( n )					  
							      62 BINARY_ADD						    58 LOAD_CONST 11 ( 2 )					  
							      64 STORE_FAST 1 ( i )					    60 COMPARE_OP 4 ( > )					  
							      66 JUMP_ABSOLUTE 14					    62 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      12 >> 68 LOAD_CONST 3 ( True )				    37 64 LOAD_FAST 0 ( n )					  
							      70 STORE_FAST 3 ( sign )					    66 LOAD_CONST 12 ( 0.0 )					  
							      								    68 COMPARE_OP 4 ( > )					  
							      13 72 LOAD_FAST 2 ( res )					    70 POP_JUMP_IF_FALSE 40					  
							      74 LOAD_FAST 1 ( i )					    								  
							      76 LOAD_CONST 1 ( 1 )					    38 72 LOAD_CONST 13 ( 0.0 )					  
							      78 BINARY_ADD						    74 STORE_FAST 2 ( sign )					  
							      80 LOAD_FAST 1 ( i )					    								  
							      82 LOAD_CONST 6 ( 2 )					    39 >> 76 LOAD_FAST 0 ( n )					  
							      84 BINARY_ADD						    78 LOAD_CONST 12 ( 0.0 )					  
							      86 BINARY_TRUE_DIVIDE					    80 COMPARE_OP 4 ( > )					  
							      88 BINARY_SUBTRACT					    82 POP_JUMP_IF_FALSE 90					  
							      90 STORE_FAST 2 ( res )					    								  
							      								    40 84 LOAD_CONST 13 ( 0.0 )					  
							      14 92 LOAD_FAST 1 ( i )					    86 STORE_FAST 2 ( sign )					  
							      94 LOAD_CONST 6 ( 2 )					    								  
							      96 BINARY_ADD						    41 >> 88 LOAD_FAST 0 ( n )					  
							      98 STORE_FAST 1 ( i )					    90 LOAD_CONST 12 ( 0.0 )					  
							      100 JUMP_ABSOLUTE 14					    92 COMPARE_OP 4 ( > )					  
							      >> 102 POP_BLOCK						    94 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      15 >> 104 LOAD_FAST 2 ( res )				    42 96 LOAD_FAST 0 ( n )					  
							      106 RETURN_VALUE NEW_LINE					    98 LOAD_CONST 13 ( 0.0 )					  
							      								    100 COMPARE_OP 4 ( > )					  
							      								    102 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    43 104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 14 ( 0.0 )					  
							      								    108 COMPARE_OP 4 ( > )					  
							      								    110 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    44 112 LOAD_CONST 15 ( 0.0 )				  
							      								    114 STORE_FAST 2 ( sign )					  
							      								    								  
							      								    45 >> 116 LOAD_FAST 0 ( n )					  
							      								    118 LOAD_CONST 15 ( 2 )					  
							      								    120 COMPARE_OP 4 ( > )					  
							      								    122 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    46 124 LOAD_FAST 2 ( sign )					  
							      								    126 LOAD_FAST 2 ( sign )					  
							      								    128 LOAD_CONST 16 ( 0.0 )					  
							      								    130 COMPARE_OP 4 ( > )					  
							      								    132 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      								    47 134 LOAD_CONST 18 ( 0.0 )				  
							      								    136 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_WITH_CONSECUTIVE_1S			      COUNT_STRINGS_WITH_CONSECUTIVE_1S				    COUNT_STRINGS_WITH_CONSECUTIVE_1S				  COUNT_STRINGS_WITH_CONSECUTIVE_1S
--							      --							    --								  --
def countStrings ( n ) :				      Disassembly of <code object countStrings at 0x7fbac<<unk>> de Disassembly of <code object countStrings at 0x7f816a677930, f error : Traceback (most recent call last):   File
    a = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    b = [ 0 ] * n					      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    a [ 0 ] = b [ 0 ] = 1				      4 LOAD_FAST 0 ( n )					    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( 1 , n ) :				      6 BINARY_MULTIPLY						    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	a [ i ] = a [ i - 1 ] + b [ i - 1 ]		      8 STORE_FAST 1 ( a )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	b [ i ] = a [ i - 1 ]				      								    27 8 LOAD_FAST 1 ( n )					  pack non-iterable NoneType object
    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]	      3 10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
							      12 BUILD_LIST 1						    12 BINARY_SUBSCR						  
							      14 LOAD_FAST 0 ( n )					    14 STORE_FAST 2 ( n )					  
							      16 BINARY_MULTIPLY					    								  
							      18 STORE_FAST 2 ( b )					    28 16 LOAD_FAST 1 ( n )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 20 LOAD_CONST 2 ( 1 )					    20 BINARY_SUBSCR						  
							      22 DUP_TOP						    22 STORE_FAST 3 ( count )					  
							      24 LOAD_FAST 1 ( a )					    								  
							      26 LOAD_CONST 1 ( 0 )					    29 24 LOAD_FAST 1 ( n )					  
							      28 STORE_SUBSCR						    26 LOAD_CONST 4 ( 1 )					  
							      30 LOAD_FAST 2 ( b )					    28 BINARY_SUBSCR						  
							      32 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 5 ( 1 )					  
							      34 STORE_SUBSCR						    32 BINARY_SUBSCR						  
							      								    34 STORE_FAST 4 ( count )					  
							      5 36 SETUP_LOOP 62 ( to 100 )				    								  
							      38 LOAD_GLOBAL 0 ( range )				    30 36 LOAD_FAST 1 ( n )					  
							      40 LOAD_CONST 2 ( 1 )					    38 LOAD_CONST 6 ( 2 )					  
							      42 LOAD_FAST 0 ( n )					    40 BINARY_SUBSCR						  
							      44 CALL_FUNCTION 2					    42 STORE_FAST 5 ( count )					  
							      46 GET_ITER						    								  
							      >> 48 FOR_ITER 48 ( to 98 )				    31 44 LOAD_FAST 1 ( n )					  
							      50 STORE_FAST 3 ( i )					    46 LOAD_CONST 7 ( 1 )					  
							      								    48 BINARY_SUBSCR						  
							      6 52 LOAD_FAST 1 ( a )					    50 STORE_FAST 6 ( count )					  
							      54 LOAD_FAST 3 ( i )					    								  
							      56 LOAD_CONST 2 ( 1 )					    32 52 LOAD_FAST 1 ( n )					  
							      58 BINARY_SUBTRACT					    54 LOAD_CONST 8 ( 2 )					  
							      60 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      62 LOAD_FAST 2 ( b )					    58 STORE_FAST 7 ( count )					  
							      64 LOAD_FAST 3 ( i )					    								  
							      66 LOAD_CONST 2 ( 1 )					    33 60 LOAD_FAST 1 ( n )					  
							      68 BINARY_SUBTRACT					    62 LOAD_CONST 9 ( 1 )					  
							      70 BINARY_SUBSCR						    64 BINARY_SUBSCR						  
							      72 BINARY_ADD						    66 LOAD_CONST 10 ( 2 )					  
							      74 LOAD_FAST 1 ( a )					    68 BINARY_SUBSCR						  
							      76 LOAD_FAST 3 ( i )					    70 STORE_FAST 8 ( count )					  
							      78 STORE_SUBSCR						    								  
							      								    34 72 LOAD_FAST 1 ( n )					  
							      7 80 LOAD_FAST 1 ( a )					    74 LOAD_CONST 11 ( 1 )					  
							      82 LOAD_FAST 3 ( i )					    76 BINARY_SUBSCR						  
							      84 LOAD_CONST 2 ( 1 )					    78 STORE_FAST 9 ( count )					  
							      86 BINARY_SUBTRACT					    								  
							      88 BINARY_SUBSCR						    35 80 LOAD_FAST 1 ( n )					  
							      90 LOAD_FAST 2 ( b )					    82 LOAD_CONST 12 ( 2 )					  
							      92 LOAD_FAST 3 ( i )					    84 BINARY_SUBSCR						  
							      94 STORE_SUBSCR						    86 STORE_FAST 10 ( count )					  
							      96 JUMP_ABSOLUTE 48					    								  
							      >> 98 POP_BLOCK						    36 88 LOAD_FAST 1 ( n )					  
							      								    90 LOAD_CONST 13 ( 1 )					  
							      8 >> 100 LOAD_CONST 2 ( 1 )				    92 BINARY_SUBSCR						  
							      102 LOAD_FAST 0 ( n )					    94 LOAD_CONST 14 ( 2 )					  
							      104 BINARY_LSHIFT						    96 BINARY_SUBSCR						  
							      106 LOAD_FAST 1 ( a )					    98 STORE_FAST 11 ( count )					  
							      108 LOAD_FAST 0 ( n )					    								  
							      110 LOAD_CONST 2 ( 1 )					    37 100 LOAD_FAST 1 ( n )					  
							      112 BINARY_SUBTRACT					    102 LOAD_CONST 12 ( 2 )					  
							      114 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      116 BINARY_SUBTRACT					    106 STORE_FAST 10 ( count )					  
							      118 LOAD_FAST 2 ( b )					    								  
							      120 LOAD_FAST 0 ( n )					    38 108 LOAD_FAST 1 ( n )					  
							      122 LOAD_CONST 2 ( 1 )					    110 LOAD_FAST 10 ( count )					  
							      124 BINARY_SUBTRACT					    112 LOAD_CONST 15 ( 1 )					  
							      126 BINARY_SUBSCR						    114 BINARY_SUBSCR						  
							      128 BINARY_SUBTRACT					    116 LOAD_CONST 16 ( 2 )					  
							      130 RETURN_VALUE NEW_LINE					    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 17 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 18 ( 2 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 STORE_FAST 10 ( count )					  
							      								    								  
							      								    39 130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_FAST 10 ( count )					  
							      								    134 LOAD_CONST 18 ( 2 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 10 ( count )					  
							      								    140 LOAD_CONST 19 ( 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 20 ( 2 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 21 ( 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 10 ( count )					  
							      								    156 LOAD_CONST 21 ( 1 )					  
							      								    158 BINARY_SUBSCR						  
							      								    160 LOAD_CONST 21 ( 1 )					  
							      								    162 COMPARE_OP 4 (						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7fbac<<unk>> d540, file  Disassembly of <code object fib at 0x7f816a673a50, file "<dis script_not_found : None
    a = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( n )					  
    b = 1						      2 STORE_FAST 1 ( a )					    2 LOAD_CONST 1 ( 0 )					  
    if ( n >= 0 ) :					      								    4 BINARY_SUBSCR						  
	print ( a , end = ' ' )				      3 4 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 1 )					  
    if ( n >= 1 ) :					      6 STORE_FAST 2 ( b )					    8 COMPARE_OP 4 ( > )					  
	print ( b , end = ' ' )				      								    10 POP_JUMP_IF_FALSE 20					  
    for i in range ( 2 , n + 1 ) :			      4 8 LOAD_FAST 0 ( n )					    								  
	print ( a + b , end = ' ' )			      10 LOAD_CONST 1 ( 0 )					    27 12 LOAD_FAST 0 ( n )					  
	b = a + b					      12 COMPARE_OP 5 ( >= )					    14 LOAD_CONST 3 ( 1 )					  
	a = b - a					      14 POP_JUMP_IF_FALSE 28					    16 BINARY_SUBSCR						  
							      								    18 STORE_FAST 1 ( end )					  
							      5 16 LOAD_GLOBAL 0 ( print )				    								  
							      18 LOAD_FAST 1 ( a )					    28 >> 20 LOAD_FAST 1 ( end )				  
							      20 LOAD_CONST 3 ( ' ' )					    22 LOAD_CONST 4 ( 0 )					  
							      22 LOAD_CONST 4 ( ( 'end' , ) )				    24 BINARY_SUBSCR						  
							      24 CALL_FUNCTION_KW 2					    26 STORE_FAST 1 ( end )					  
							      26 POP_TOP						    								  
							      								    29 28 LOAD_FAST 1 ( end )					  
							      6 >> 28 LOAD_FAST 0 ( n )					    30 LOAD_CONST 5 ( 1 )					  
							      30 LOAD_CONST 2 ( 1 )					    32 BINARY_SUBSCR						  
							      32 COMPARE_OP 5 ( >= )					    34 LOAD_CONST 6 ( 2 )					  
							      34 POP_JUMP_IF_FALSE 48					    36 BINARY_SUBSCR						  
							      								    38 STORE_FAST 1 ( end )					  
							      7 36 LOAD_GLOBAL 0 ( print )				    								  
							      38 LOAD_FAST 2 ( b )					    30 40 LOAD_FAST 1 ( end )					  
							      40 LOAD_CONST 3 ( ' ' )					    42 LOAD_CONST 7 ( 1 )					  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    44 BINARY_SUBSCR						  
							      44 CALL_FUNCTION_KW 2					    46 STORE_FAST 1 ( end )					  
							      46 POP_TOP						    								  
							      								    31 48 LOAD_FAST 1 ( end )					  
							      8 >> 48 SETUP_LOOP 54 ( to 104 )				    50 LOAD_CONST 8 ( 2 )					  
							      50 LOAD_GLOBAL 1 ( range )				    52 BINARY_SUBSCR						  
							      52 LOAD_CONST 5 ( 2 )					    54 STORE_FAST 1 ( end )					  
							      54 LOAD_FAST 0 ( n )					    								  
							      56 LOAD_CONST 2 ( 1 )					    32 56 LOAD_FAST 1 ( end )					  
							      58 BINARY_ADD						    58 LOAD_CONST 9 ( 2 )					  
							      60 CALL_FUNCTION 2					    60 BINARY_SUBSCR						  
							      62 GET_ITER						    62 STORE_FAST 2 ( end )					  
							      >> 64 FOR_ITER 36 ( to 102 )				    								  
							      66 STORE_FAST 3 ( i )					    33 64 LOAD_FAST 1 ( end )					  
							      								    66 LOAD_CONST 10 ( 2 )					  
							      9 68 LOAD_GLOBAL 0 ( print )				    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 1 ( a )					    70 STORE_FAST 1 ( end )					  
							      72 LOAD_FAST 2 ( b )					    								  
							      74 BINARY_ADD						    34 72 LOAD_FAST 1 ( end )					  
							      76 LOAD_CONST 3 ( ' ' )					    74 LOAD_FAST 2 ( end )					  
							      78 LOAD_CONST 4 ( ( 'end' , ) )				    76 LOAD_CONST 11 ( 2 )					  
							      80 CALL_FUNCTION_KW 2					    78 BINARY_SUBSCR						  
							      82 POP_TOP						    80 LOAD_FAST 1 ( end )					  
							      								    82 LOAD_CONST 12 ( 3 )					  
							      10 84 LOAD_FAST 1 ( a )					    84 BINARY_SUBSCR						  
							      86 LOAD_FAST 2 ( b )					    86 LOAD_FAST 1 ( end )					  
							      88 BINARY_ADD						    88 LOAD_CONST 13 ( 2 )					  
							      90 STORE_FAST 2 ( b )					    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 14 ( 3 )					  
							      11 92 LOAD_FAST 2 ( b )					    94 BINARY_SUBSCR						  
							      94 LOAD_FAST 1 ( a )					    96 LOAD_FAST 1 ( end )					  
							      96 BINARY_SUBTRACT					    98 LOAD_CONST 15 ( 2 )					  
							      98 STORE_FAST 1 ( a )					    100 BINARY_SUBSCR						  
							      100 JUMP_ABSOLUTE 64					    102 LOAD_CONST 16 ( 3 )					  
							      >> 102 POP_BLOCK						    104 BINARY_SUBSCR						  
							      >> 104 LOAD_CONST 0 ( None )				    106 LOAD_FAST 1 ( end )					  
							      106 RETURN_VALUE NEW_LINE					    108 LOAD_CONST 17 ( 2 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 18 ( 3 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 19 ( 2 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 20 ( 3 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 21 ( 2 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 22 ( 3 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_FAST 1 ( end )					  
							      								    134 LOAD_CONST 19 ( 2 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 20 ( 3 )					  
							      								    140 STORE_SUBSCR						  
							      								    								  
							      								    35 142 LOAD_FAST 1 ( end )					  
							      								    144 LOAD_FAST 2 ( end )					  
							      								    146 LOAD_CONST 21 ( 2 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 22 ( 3 )					  
							      								    152 STORE_SUBSCR						  
							      								    								  
							      								    36 >> 154 LOAD_FAST 1 ( end )				  
							      								    156 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			      COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			    COUNT_GFG_SUBSEQUENCES_GIVEN_STRING				  COUNT_GFG_SUBSEQUENCES_GIVEN_STRING
--							      --							    --								  --
def countSubsequence ( s , n ) :			      Disassembly of <code object countSubsequence at 0x7fbac<<unk> Disassembly of <code object countSubsequence at 0x7f816a673a5 script_not_found : None
    cntG = 0						      2 0 LOAD_CONST 1 ( 0 )					    148 0 LOAD_FAST 1 ( n )					  
    cntF = 0						      2 STORE_FAST 2 ( cntG )					    2 LOAD_CONST 1 ( 0 )					  
    result = 0						      								    4 COMPARE_OP 2 ( == )					  
    C = 0						      3 4 LOAD_CONST 1 ( 0 )					    6 POP_JUMP_IF_FALSE 16					  
    for i in range ( n ) :				      6 STORE_FAST 3 ( cntF )					    								  
	if ( s [ i ] == 'G' ) :				      								    149 8 LOAD_FAST 1 ( n )					  
	    cntG += 1					      4 8 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
	    result += C					      10 STORE_FAST 4 ( result )				    12 COMPARE_OP 2 ( == )					  
	    continue					      								    14 POP_JUMP_IF_FALSE 20					  
	if ( s [ i ] == 'F' ) :				      5 12 LOAD_CONST 1 ( 0 )					    								  
	    cntF += 1					      14 STORE_FAST 5 ( C )					    150 16 LOAD_FAST 1 ( n )					  
	    C += cntG					      								    18 LOAD_CONST 3 ( 1 )					  
	    continue					      6 16 SETUP_LOOP 80 ( to 98 )				    20 COMPARE_OP 2 ( == )					  
	else :						      18 LOAD_GLOBAL 0 ( range )				    22 POP_JUMP_IF_FALSE 28					  
	    continue					      20 LOAD_FAST 1 ( n )					    								  
    print ( result )					      22 CALL_FUNCTION 1					    151 24 LOAD_FAST 1 ( n )					  
							      24 GET_ITER						    26 LOAD_CONST 4 ( 1 )					  
							      >> 26 FOR_ITER 68 ( to 96 )				    28 INPLACE_ADD						  
							      28 STORE_FAST 6 ( i )					    30 STORE_FAST 1 ( n )					  
							      								    								  
							      7 30 LOAD_FAST 0 ( s )					    152 >> 32 LOAD_FAST 1 ( n )					  
							      32 LOAD_FAST 6 ( i )					    34 LOAD_CONST 5 ( 1 )					  
							      34 BINARY_SUBSCR						    36 COMPARE_OP 2 ( == )					  
							      36 LOAD_CONST 2 ( 'G' )					    38 POP_JUMP_IF_FALSE 44					  
							      38 COMPARE_OP 2 ( == )					    								  
							      40 POP_JUMP_IF_FALSE 60					    153 40 LOAD_FAST 1 ( n )					  
							      								    42 LOAD_CONST 6 ( 1 )					  
							      8 42 LOAD_FAST 2 ( cntG )					    44 INPLACE_ADD						  
							      44 LOAD_CONST 3 ( 1 )					    46 STORE_FAST 1 ( n )					  
							      46 INPLACE_ADD						    48 JUMP_FORWARD 8 ( to 44 )					  
							      48 STORE_FAST 2 ( cntG )					    								  
							      								    153 >> 50 LOAD_FAST 1 ( n )					  
							      9 50 LOAD_FAST 4 ( result )				    52 LOAD_CONST 7 ( 1 )					  
							      52 LOAD_FAST 5 ( C )					    54 INPLACE_ADD						  
							      54 INPLACE_ADD						    56 STORE_FAST 1 ( n )					  
							      56 STORE_FAST 4 ( result )				    								  
							      								    154 58 LOAD_FAST 1 ( n )					  
							      10 58 JUMP_ABSOLUTE 26					    60 LOAD_CONST 8 ( 2 )					  
							      								    62 INPLACE_ADD						  
							      11 >> 60 LOAD_FAST 0 ( s )				    64 STORE_FAST 1 ( n )					  
							      62 LOAD_FAST 6 ( i )					    								  
							      64 BINARY_SUBSCR						    155 66 LOAD_FAST 1 ( n )					  
							      66 LOAD_CONST 4 ( 'F' )					    68 LOAD_CONST 9 ( 1 )					  
							      68 COMPARE_OP 2 ( == )					    70 INPLACE_ADD						  
							      70 POP_JUMP_IF_FALSE 26					    72 STORE_FAST 1 ( n )					  
							      								    								  
							      12 72 LOAD_FAST 3 ( cntF )				    156 74 LOAD_FAST 1 ( n )					  
							      74 LOAD_CONST 3 ( 1 )					    76 LOAD_CONST 10 ( 2 )					  
							      76 INPLACE_ADD						    78 INPLACE_ADD						  
							      78 STORE_FAST 3 ( cntF )					    80 STORE_FAST 1 ( n )					  
							      								    82 JUMP_FORWARD 8 ( to 44 )					  
							      13 80 LOAD_FAST 5 ( C )					    								  
							      82 LOAD_FAST 2 ( cntG )					    157 >> 84 LOAD_FAST 1 ( n )					  
							      84 INPLACE_ADD						    86 LOAD_CONST 10 ( 2 )					  
							      86 STORE_FAST 5 ( C )					    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( n )					  
							      14 88 JUMP_ABSOLUTE 26					    								  
							      90 JUMP_ABSOLUTE 26					    158 >> 92 LOAD_FAST 1 ( n )					  
							      								    94 LOAD_CONST 11 ( 2 )					  
							      16 92 JUMP_ABSOLUTE 26					    96 INPLACE_ADD						  
							      94 JUMP_ABSOLUTE 26					    98 STORE_FAST 1 ( n )					  
							      >> 96 POP_BLOCK						    								  
							      								    159 100 LOAD_FAST 1 ( n )					  
							      17 >> 98 LOAD_GLOBAL 1 ( print )				    102 LOAD_CONST 12 ( 2 )					  
							      100 LOAD_FAST 4 ( result )				    104 INPLACE_ADD						  
							      102 CALL_FUNCTION 1					    106 STORE_FAST 1 ( n )					  
							      104 POP_TOP						    								  
							      106 LOAD_CONST 0 ( None )					    160 108 LOAD_FAST 1 ( n )					  
							      108 RETURN_VALUE NEW_LINE					    110 LOAD_CONST 13 ( 2 )					  
							      								    112 INPLACE_ADD						  
							      								    114 STORE_FAST 1 ( n )					  
							      								    								  
							      								    161 >> 116 LOAD_FAST 1 ( n )				  
							      								    118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_CONST 12 ( 2 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    126 JUMP_FORWARD 8 ( to 44 )				  
							      								    								  
							      								    162 >> 128 LOAD_FAST 1 ( n )				  
							      								    130 LOAD_CONST 13 ( 2 )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    								  
							      								    163 >> 136 LOAD_FAST 1 ( n )				  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1		      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1
--							      --							    --								  --
def countPairs ( arr , n ) :				      Disassembly of <code object countPairs at 0x7fbac<<unk>> d540 Disassembly of <code object countPairs at 0x7f816a683c00, fil error : Traceback (most recent call last):   File
    mp = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    65 0 LOAD_GLOBAL 0 ( mp )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 LOAD_METHOD 1 ( dict )					  item in run_dis_script():   File "XLM/dis_script.p
	if arr [ i ] in mp.keys ( ) :			      4 STORE_FAST 2 ( mp )					    4 LOAD_FAST 0 ( arr )					  y", line 47, in run_dis_script     co_code, co_nlo
	    mp [ arr [ i ] ] += 1			      								    6 CALL_METHOD 1						  cals, co_varnames, co_names, co_consts, co_linesta
	else :						      3 6 SETUP_LOOP 66 ( to 74 )				    8 STORE_FAST 1 ( n )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    mp [ arr [ i ] ] = 1			      8 LOAD_GLOBAL 1 ( range )					    								  /TransCoder/XLM/src/dis_assembler.py", line 233, i
    ans = 0						      10 LOAD_FAST 1 ( n )					    66 10 LOAD_FAST 1 ( n )					  n parse     code.append(arg) ValueError: byte must
    for it in mp :					      12 CALL_FUNCTION 1					    12 LOAD_CONST 1 ( 0 )					   be in range(0, 256)
	count = mp [ it ]				      14 GET_ITER						    14 COMPARE_OP 4 ( > )					  
	ans += ( count * ( count - 1 ) ) // 2		      >> 16 FOR_ITER 54 ( to 72 )				    16 POP_JUMP_IF_FALSE 26					  
    return ans						      18 STORE_FAST 3 ( i )					    								  
							      								    67 18 LOAD_FAST 1 ( n )					  
							      4 20 LOAD_FAST 0 ( arr )					    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_FAST 3 ( i )					    22 COMPARE_OP 4 ( > )					  
							      24 BINARY_SUBSCR						    24 POP_JUMP_IF_FALSE 26					  
							      26 LOAD_FAST 2 ( mp )					    								  
							      28 LOAD_METHOD 2 ( keys )					    68 26 LOAD_FAST 1 ( n )					  
							      30 CALL_METHOD 0						    28 LOAD_CONST 2 ( 1 )					  
							      32 COMPARE_OP 6 ( in )					    30 INPLACE_ADD						  
							      34 POP_JUMP_IF_FALSE 58					    32 STORE_FAST 1 ( n )					  
							      								    								  
							      5 36 LOAD_FAST 2 ( mp )					    70 >> 34 LOAD_FAST 1 ( n )					  
							      38 LOAD_FAST 0 ( arr )					    36 LOAD_CONST 3 ( 1 )					  
							      40 LOAD_FAST 3 ( i )					    38 INPLACE_ADD						  
							      42 BINARY_SUBSCR						    40 STORE_FAST 1 ( n )					  
							      44 DUP_TOP_TWO						    								  
							      46 BINARY_SUBSCR						    71 42 LOAD_FAST 1 ( n )					  
							      48 LOAD_CONST 1 ( 1 )					    44 LOAD_CONST 4 ( 1 )					  
							      50 INPLACE_ADD						    46 INPLACE_ADD						  
							      52 ROT_THREE						    48 STORE_FAST 1 ( n )					  
							      54 STORE_SUBSCR						    								  
							      56 JUMP_ABSOLUTE 16					    72 50 LOAD_FAST 1 ( n )					  
							      								    52 LOAD_CONST 5 ( 1 )					  
							      7 >> 58 LOAD_CONST 1 ( 1 )				    54 INPLACE_ADD						  
							      60 LOAD_FAST 2 ( mp )					    56 STORE_FAST 1 ( n )					  
							      62 LOAD_FAST 0 ( arr )					    								  
							      64 LOAD_FAST 3 ( i )					    73 58 LOAD_FAST 1 ( n )					  
							      66 BINARY_SUBSCR						    60 LOAD_CONST 6 ( 2 )					  
							      68 STORE_SUBSCR						    62 INPLACE_ADD						  
							      70 JUMP_ABSOLUTE 16					    64 STORE_FAST 1 ( n )					  
							      >> 72 POP_BLOCK						    								  
							      								    74 66 LOAD_FAST 1 ( n )					  
							      8 >> 74 LOAD_CONST 2 ( 0 )				    68 LOAD_CONST 7 ( 1 )					  
							      76 STORE_FAST 4 ( ans )					    70 INPLACE_ADD						  
							      								    72 STORE_FAST 1 ( n )					  
							      9 78 SETUP_LOOP 40 ( to 120 )				    74 JUMP_FORWARD 4 ( to 80 )					  
							      80 LOAD_FAST 2 ( mp )					    								  
							      82 GET_ITER						    75 >> 76 LOAD_FAST 1 ( n )					  
							      >> 84 FOR_ITER 32 ( to 118 )				    78 LOAD_CONST 8 ( 2 )					  
							      86 STORE_FAST 5 ( it )					    80 INPLACE_ADD						  
							      								    82 STORE_FAST 1 ( n )					  
							      10 88 LOAD_FAST 2 ( mp )					    								  
							      90 LOAD_FAST 5 ( it )					    76 84 LOAD_FAST 1 ( n )					  
							      92 BINARY_SUBSCR						    86 LOAD_CONST 9 ( 1 )					  
							      94 STORE_FAST 6 ( count )					    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( n )					  
							      11 96 LOAD_FAST 4 ( ans )					    								  
							      98 LOAD_FAST 6 ( count )					    77 >> 92 LOAD_FAST 1 ( n )					  
							      100 LOAD_FAST 6 ( count )					    94 LOAD_CONST 10 ( 2 )					  
							      102 LOAD_CONST 1 ( 1 )					    96 INPLACE_ADD						  
							      104 BINARY_SUBTRACT					    98 STORE_FAST 1 ( n )					  
							      106 BINARY_MULTIPLY					    								  
							      108 LOAD_CONST 3 ( 2 )					    78 100 LOAD_FAST 1 ( n )					  
							      110 BINARY_FLOOR_DIVIDE					    102 LOAD_CONST 11 ( 3 )					  
							      112 INPLACE_ADD						    104 INPLACE_ADD						  
							      114 STORE_FAST 4 ( ans )					    106 STORE_FAST 1 ( n )					  
							      116 JUMP_ABSOLUTE 84					    108 JUMP_FORWARD 4 ( to 80 )				  
							      >> 118 POP_BLOCK						    								  
							      								    80 >> 110 LOAD_FAST 1 ( n )					  
							      12 >> 120 LOAD_FAST 4 ( ans )				    112 LOAD_CONST 12 ( 2 )					  
							      122 RETURN_VALUE NEW_LINE					    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( n )					  
							      								    								  
							      								    81 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_CONST 13 ( 1 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    								  
							      								    82 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 1 ( n )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( n )					  
							      								    								  
							      								    83 134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_CONST 14 ( 2 )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( n )					  
							      								    								  
							      								    84 142 LOAD_FAST 1 ( n )					  
							      								    144 LOAD_CONST 15 ( 1 )					  
							      								    146 INPLACE_ADD						  
							      								    148 STORE_FAST 1 ( n )					  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY	      K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY	    K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY		  K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY
--							      --							    --								  --
def printKDistinct ( arr , n , k ) :			      Disassembly of <code object printKDistinct at 0x7fbac<<unk>>  Disassembly of <code object printKDistinct at 0x7f816a673a50, error : Traceback (most recent call last):   File
    dist_count = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 STORE_FAST 3 ( dist_count )				    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	j = 0						      								    4 COMPARE_OP 4 ( > )					  y", line 54, in run_dis_script     hyp_co = mco.to
	while j < n :					      3 4 SETUP_LOOP 100 ( to 106 )				    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	    if ( i != j and arr [ j ] == arr [ i ] ) :	      6 LOAD_GLOBAL 0 ( range )					    								  assembler.py", line 81, in to_co     co_consts.app
		break					      8 LOAD_FAST 1 ( n )					    27 8 LOAD_FAST 1 ( n )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	    j += 1					      10 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( 1 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	if ( j == n ) :					      12 GET_ITER						    12 INPLACE_ADD						  co	 self.co_cellvars, ValueError: code: varname
	    dist_count += 1				      >> 14 FOR_ITER 88 ( to 104 )				    14 STORE_FAST 1 ( n )					  s is too small
	if ( dist_count == k ) :			      16 STORE_FAST 4 ( i )					    16 JUMP_FORWARD 4 ( to 28 )					  
	    return arr [ i ]				      								    								  
    return - 1						      4 18 LOAD_CONST 1 ( 0 )					    28 >> 18 LOAD_FAST 1 ( n )					  
							      20 STORE_FAST 5 ( j )					    20 LOAD_CONST 3 ( 1 )					  
							      								    22 INPLACE_ADD						  
							      5 22 SETUP_LOOP 46 ( to 70 )				    24 STORE_FAST 1 ( n )					  
							      >> 24 LOAD_FAST 5 ( j )					    								  
							      26 LOAD_FAST 1 ( n )					    29 26 LOAD_FAST 1 ( n )					  
							      28 COMPARE_OP 0 ( < )					    28 LOAD_CONST 4 ( 2 )					  
							      30 POP_JUMP_IF_FALSE 68					    30 INPLACE_ADD						  
							      								    32 STORE_FAST 1 ( n )					  
							      6 32 LOAD_FAST 4 ( i )					    								  
							      34 LOAD_FAST 5 ( j )					    30 34 LOAD_FAST 1 ( n )					  
							      36 COMPARE_OP 3 ( != )					    36 LOAD_CONST 5 ( 1 )					  
							      38 POP_JUMP_IF_FALSE 58					    38 INPLACE_ADD						  
							      40 LOAD_FAST 0 ( arr )					    40 STORE_FAST 1 ( n )					  
							      42 LOAD_FAST 5 ( j )					    								  
							      44 BINARY_SUBSCR						    31 42 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 0 ( arr )					    44 LOAD_CONST 6 ( 2 )					  
							      48 LOAD_FAST 4 ( i )					    46 INPLACE_ADD						  
							      50 BINARY_SUBSCR						    48 STORE_FAST 1 ( n )					  
							      52 COMPARE_OP 2 ( == )					    								  
							      54 POP_JUMP_IF_FALSE 58					    32 50 LOAD_FAST 1 ( n )					  
							      								    52 LOAD_CONST 7 ( 2 )					  
							      7 56 BREAK_LOOP						    54 INPLACE_ADD						  
							      								    56 STORE_FAST 1 ( n )					  
							      8 >> 58 LOAD_FAST 5 ( j )					    								  
							      60 LOAD_CONST 2 ( 1 )					    33 58 LOAD_FAST 1 ( n )					  
							      62 INPLACE_ADD						    60 LOAD_CONST 8 ( 2 )					  
							      64 STORE_FAST 5 ( j )					    62 INPLACE_ADD						  
							      66 JUMP_ABSOLUTE 24					    64 STORE_FAST 1 ( n )					  
							      >> 68 POP_BLOCK						    								  
							      								    34 66 LOAD_FAST 1 ( n )					  
							      9 >> 70 LOAD_FAST 5 ( j )					    68 LOAD_CONST 9 ( 3 )					  
							      72 LOAD_FAST 1 ( n )					    70 INPLACE_ADD						  
							      74 COMPARE_OP 2 ( == )					    72 STORE_FAST 1 ( n )					  
							      76 POP_JUMP_IF_FALSE 86					    74 JUMP_FORWARD 4 ( to 80 )					  
							      								    								  
							      10 78 LOAD_FAST 3 ( dist_count )				    35 >> 76 LOAD_FAST 1 ( n )					  
							      80 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 10 ( 3 )					  
							      82 INPLACE_ADD						    80 INPLACE_ADD						  
							      84 STORE_FAST 3 ( dist_count )				    82 STORE_FAST 1 ( n )					  
							      								    								  
							      11 >> 86 LOAD_FAST 3 ( dist_count )			    36 84 LOAD_FAST 1 ( n )					  
							      88 LOAD_FAST 2 ( k )					    86 LOAD_CONST 11 ( 2 )					  
							      90 COMPARE_OP 2 ( == )					    88 INPLACE_ADD						  
							      92 POP_JUMP_IF_FALSE 14					    90 STORE_FAST 1 ( n )					  
							      								    								  
							      12 94 LOAD_FAST 0 ( arr )					    37 92 LOAD_FAST 1 ( n )					  
							      96 LOAD_FAST 4 ( i )					    94 LOAD_FAST 0 ( arr )					  
							      98 BINARY_SUBSCR						    96 LOAD_CONST 12 ( 4 )					  
							      100 RETURN_VALUE						    98 INPLACE_ADD						  
							      102 JUMP_ABSOLUTE 14					    100 STORE_FAST 1 ( n )					  
							      >> 104 POP_BLOCK						    								  
							      								    38 102 LOAD_FAST 1 ( n )					  
							      13 >> 106 LOAD_CONST 3 ( - 1 )				    104 LOAD_FAST 0 ( arr )					  
							      108 RETURN_VALUE NEW_LINE					    106 LOAD_CONST 13 ( 3 )					  
							      								    108 INPLACE_ADD						  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( n )					  
							      								    								  
							      								    39 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 14 ( 2 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 122 LOAD_FAST 1 ( n )					  
							      								    124 LOAD_FAST 0 ( arr )					  
							      								    126 LOAD_CONST 15 ( 2 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_CONST 16 ( 3 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 140 LOAD_FAST 1 ( n )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGOREAN_TRIPLETS				      GENERATE_PYTHAGOREAN_TRIPLETS				    GENERATE_PYTHAGOREAN_TRIPLETS				  GENERATE_PYTHAGOREAN_TRIPLETS
--							      --							    --								  --
def pythagoreanTriplets ( limits ) :			      Disassembly of <code object pythagoreanTriplets at 0x7fbac<<u Disassembly of <code object pythagoreanTriTrits at 0x7f816a67 script_not_found : None
    c , m = 0 , 2					      2 0 LOAD_CONST 1 ( ( 0 , 2 ) )				    68 0 LOAD_FAST 0 ( self )					  
    while c < limits :					      2 UNPACK_SEQUENCE 2					    2 LOAD_ATTR 0 ( _limits )					  
	for n in range ( 1 , m ) :			      4 STORE_FAST 1 ( c )					    4 STORE_FAST 1 ( m )					  
	    a = m * m - n * n				      6 STORE_FAST 2 ( m )					    								  
	    b = 2 * m * n				      								    69 6 LOAD_FAST 1 ( m )					  
	    c = m * m + n * n				      3 8 SETUP_LOOP 106 ( to 116 )				    8 LOAD_FAST 0 ( self )					  
	    if c > limits :				      >> 10 LOAD_FAST 1 ( c )					    10 LOAD_ATTR 1 ( _limits )					  
		break					      12 LOAD_FAST 0 ( limits )					    12 COMPARE_OP 2 ( == )					  
	    print ( a , b , c )				      14 COMPARE_OP 0 ( < )					    14 POP_JUMP_IF_FALSE 28					  
	m = m + 1					      16 POP_JUMP_IF_FALSE 114					    								  
							      								    70 16 LOAD_CONST 1 ( 1 )					  
							      4 18 SETUP_LOOP 84 ( to 104 )				    18 STORE_FAST 1 ( m )					  
							      20 LOAD_GLOBAL 0 ( range )				    								  
							      22 LOAD_CONST 2 ( 1 )					    71 20 LOAD_FAST 1 ( m )					  
							      24 LOAD_FAST 2 ( m )					    22 LOAD_FAST 0 ( self )					  
							      26 CALL_FUNCTION 2					    24 LOAD_ATTR 2 ( _limits )					  
							      28 GET_ITER						    26 COMPARE_OP 2 ( == )					  
							      >> 30 FOR_ITER 70 ( to 102 )				    28 POP_JUMP_IF_FALSE 28					  
							      32 STORE_FAST 3 ( n )					    								  
							      								    72 30 LOAD_CONST 1 ( 1 )					  
							      5 34 LOAD_FAST 2 ( m )					    32 RETURN_VALUE						  
							      36 LOAD_FAST 2 ( m )					    								  
							      38 BINARY_MULTIPLY					    73 >> 34 LOAD_CONST 2 ( False )				  
							      40 LOAD_FAST 3 ( n )					    36 RETURN_VALUE						  
							      42 LOAD_FAST 3 ( n )					    38 LOAD_CONST 1 ( 1 )					  
							      44 BINARY_MULTIPLY					    40 RETURN_VALUE						  
							      46 BINARY_SUBTRACT					    NEW_LINE							  
							      48 STORE_FAST 4 ( a )					    								  
							      								    								  
							      6 50 LOAD_CONST 3 ( 2 )					    								  
							      52 LOAD_FAST 2 ( m )					    								  
							      54 BINARY_MULTIPLY					    								  
							      56 LOAD_FAST 3 ( n )					    								  
							      58 BINARY_MULTIPLY					    								  
							      60 STORE_FAST 5 ( b )					    								  
							      								    								  
							      7 62 LOAD_FAST 2 ( m )					    								  
							      64 LOAD_FAST 2 ( m )					    								  
							      66 BINARY_MULTIPLY					    								  
							      68 LOAD_FAST 3 ( n )					    								  
							      70 LOAD_FAST 3 ( n )					    								  
							      72 BINARY_MULTIPLY					    								  
							      74 BINARY_ADD						    								  
							      76 STORE_FAST 1 ( c )					    								  
							      								    								  
							      8 78 LOAD_FAST 1 ( c )					    								  
							      80 LOAD_FAST 0 ( limits )					    								  
							      82 COMPARE_OP 4 ( > )					    								  
							      84 POP_JUMP_IF_FALSE 88					    								  
							      								    								  
							      9 86 BREAK_LOOP						    								  
							      								    								  
							      10 >> 88 LOAD_GLOBAL 1 ( print )				    								  
							      90 LOAD_FAST 4 ( a )					    								  
							      92 LOAD_FAST 5 ( b )					    								  
							      94 LOAD_FAST 1 ( c )					    								  
							      96 CALL_FUNCTION 3					    								  
							      98 POP_TOP						    								  
							      100 JUMP_ABSOLUTE 30					    								  
							      >> 102 POP_BLOCK						    								  
							      								    								  
							      11 >> 104 LOAD_FAST 2 ( m )				    								  
							      106 LOAD_CONST 2 ( 1 )					    								  
							      108 BINARY_ADD						    								  
							      110 STORE_FAST 2 ( m )					    								  
							      112 JUMP_ABSOLUTE 10					    								  
							      >> 114 POP_BLOCK						    								  
							      >> 116 LOAD_CONST 0 ( None )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		      COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		    COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		  COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N
--							      --							    --								  --
def countSetBits ( n ) :				      Disassembly of <code object countSetBits at 0x7fbac0e89d20, f Disassembly of <code object countSetBits at 0x7f816a6e4b70, f failure : #Results: 0, 10
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    18 0 LOAD_FAST 0 ( n )					  
    ans = 0						      2 STORE_FAST 1 ( i )					    2 LOAD_CONST 1 ( 0 )					  
    while ( ( 1 << i ) <= n ) :				      								    4 COMPARE_OP 2 ( == )					  
	k = 0						      3 4 LOAD_CONST 1 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  
	change = 1 << i					      6 STORE_FAST 2 ( ans )					    								  
	for j in range ( 0 , n + 1 ) :			      								    19 8 LOAD_CONST 2 ( 1 )					  
	    ans += k					      4 8 SETUP_LOOP 100 ( to 110 )				    10 RETURN_VALUE						  
	    if change == 1 :				      >> 10 LOAD_CONST 2 ( 1 )					    								  
		k = not k				      12 LOAD_FAST 1 ( i )					    20 >> 12 LOAD_FAST 0 ( n )					  
		change = 1 << i				      14 BINARY_LSHIFT						    14 LOAD_CONST 1 ( 0 )					  
	    else :					      16 LOAD_FAST 0 ( n )					    16 COMPARE_OP 2 ( == )					  
		change -= 1				      18 COMPARE_OP 1 ( <= )					    18 POP_JUMP_IF_FALSE 28					  
	i += 1						      20 POP_JUMP_IF_FALSE 108					    								  
    return ans						      								    21 20 LOAD_CONST 3 ( 1 )					  
							      5 22 LOAD_CONST 1 ( 0 )					    22 RETURN_VALUE						  
							      24 STORE_FAST 3 ( k )					    								  
							      								    22 >> 24 LOAD_CONST 4 ( 1 )					  
							      6 26 LOAD_CONST 2 ( 1 )					    26 RETURN_VALUE						  
							      28 LOAD_FAST 1 ( i )					    28 LOAD_CONST 0 ( None )					  
							      30 BINARY_LSHIFT						    30 RETURN_VALUE						  
							      32 STORE_FAST 4 ( change )				    NEW_LINE							  
							      								    								  
							      7 34 SETUP_LOOP 62 ( to 98 )				    								  
							      36 LOAD_GLOBAL 0 ( range )				    								  
							      38 LOAD_CONST 1 ( 0 )					    								  
							      40 LOAD_FAST 0 ( n )					    								  
							      42 LOAD_CONST 2 ( 1 )					    								  
							      44 BINARY_ADD						    								  
							      46 CALL_FUNCTION 2					    								  
							      48 GET_ITER						    								  
							      >> 50 FOR_ITER 44 ( to 96 )				    								  
							      52 STORE_FAST 5 ( j )					    								  
							      								    								  
							      8 54 LOAD_FAST 2 ( ans )					    								  
							      56 LOAD_FAST 3 ( k )					    								  
							      58 INPLACE_ADD						    								  
							      60 STORE_FAST 2 ( ans )					    								  
							      								    								  
							      9 62 LOAD_FAST 4 ( change )				    								  
							      64 LOAD_CONST 2 ( 1 )					    								  
							      66 COMPARE_OP 2 ( == )					    								  
							      68 POP_JUMP_IF_FALSE 86					    								  
							      								    								  
							      10 70 LOAD_FAST 3 ( k )					    								  
							      72 UNARY_NOT						    								  
							      74 STORE_FAST 3 ( k )					    								  
							      								    								  
							      11 76 LOAD_CONST 2 ( 1 )					    								  
							      78 LOAD_FAST 1 ( i )					    								  
							      80 BINARY_LSHIFT						    								  
							      82 STORE_FAST 4 ( change )				    								  
							      84 JUMP_ABSOLUTE 50					    								  
							      								    								  
							      13 >> 86 LOAD_FAST 4 ( change )				    								  
							      88 LOAD_CONST 2 ( 1 )					    								  
							      90 INPLACE_SUBTRACT					    								  
							      92 STORE_FAST 4 ( change )				    								  
							      94 JUMP_ABSOLUTE 50					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      14 >> 98 LOAD_FAST 1 ( i )				    								  
							      100 LOAD_CONST 2 ( 1 )					    								  
							      102 INPLACE_ADD						    								  
							      104 STORE_FAST 1 ( i )					    								  
							      106 JUMP_ABSOLUTE 10					    								  
							      >> 108 POP_BLOCK						    								  
							      								    								  
							      15 >> 110 LOAD_FAST 2 ( ans )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K		      FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K		    FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K			  FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K
--							      --							    --								  --
def printFirstNegativeInteger ( arr , n , k ) :		      Disassembly of <code object printFirstNegativeInteger at 0x7f Disassembly of <code object printFirstNegativeInteger at 0x7f script_not_found : None
    for i in range ( 0 , ( n - k + 1 ) ) :		      2 0 SETUP_LOOP 108 ( to 110 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	flag = False					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for j in range ( 0 , k ) :			      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 1 )					  
	    if ( arr [ i + j ] < 0 ) :			      6 LOAD_FAST 1 ( n )					    6 CALL_FUNCTION 1						  
		print ( arr [ i + j ] , end = " " )	      8 LOAD_FAST 2 ( k )					    8 GET_ITER							  
		flag = True				      10 BINARY_SUBTRACT					    >> 10 FOR_ITER 22 ( to 24 )					  
		break					      12 LOAD_CONST 2 ( 1 )					    12 STORE_FAST 1 ( n )					  
	if ( not ( flag ) ) :				      14 BINARY_ADD						    								  
	    print ( "0" , end = " " )			      16 CALL_FUNCTION 2					    27 14 LOAD_GLOBAL 1 ( print )				  
							      18 GET_ITER						    16 LOAD_FAST 1 ( n )					  
							      >> 20 FOR_ITER 86 ( to 108 )				    18 LOAD_CONST 2 ( '						  
							      22 STORE_FAST 3 ( i )					    								  
							      								    								  
							      3 24 LOAD_CONST 3 ( False )				    								  
							      26 STORE_FAST 4 ( flag )					    								  
							      								    								  
							      4 28 SETUP_LOOP 60 ( to 90 )				    								  
							      30 LOAD_GLOBAL 0 ( range )				    								  
							      32 LOAD_CONST 1 ( 0 )					    								  
							      34 LOAD_FAST 2 ( k )					    								  
							      36 CALL_FUNCTION 2					    								  
							      38 GET_ITER						    								  
							      >> 40 FOR_ITER 46 ( to 88 )				    								  
							      42 STORE_FAST 5 ( j )					    								  
							      								    								  
							      5 44 LOAD_FAST 0 ( arr )					    								  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 LOAD_FAST 5 ( j )					    								  
							      50 BINARY_ADD						    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_CONST 1 ( 0 )					    								  
							      56 COMPARE_OP 0 ( < )					    								  
							      58 POP_JUMP_IF_FALSE 40					    								  
							      								    								  
							      6 60 LOAD_GLOBAL 1 ( print )				    								  
							      62 LOAD_FAST 0 ( arr )					    								  
							      64 LOAD_FAST 3 ( i )					    								  
							      66 LOAD_FAST 5 ( j )					    								  
							      68 BINARY_ADD						    								  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_CONST 4 ( ' ' )					    								  
							      74 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      76 CALL_FUNCTION_KW 2					    								  
							      78 POP_TOP						    								  
							      								    								  
							      7 80 LOAD_CONST 6 ( True )				    								  
							      82 STORE_FAST 4 ( flag )					    								  
							      								    								  
							      8 84 BREAK_LOOP						    								  
							      86 JUMP_ABSOLUTE 40					    								  
							      >> 88 POP_BLOCK						    								  
							      								    								  
							      9 >> 90 LOAD_FAST 4 ( flag )				    								  
							      92 POP_JUMP_IF_TRUE 20					    								  
							      								    								  
							      10 94 LOAD_GLOBAL 1 ( print )				    								  
							      96 LOAD_CONST 7 ( '0' )					    								  
							      98 LOAD_CONST 4 ( ' ' )					    								  
							      100 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      102 CALL_FUNCTION_KW 2					    								  
							      104 POP_TOP						    								  
							      106 JUMP_ABSOLUTE 20					    								  
							      >> 108 POP_BLOCK						    								  
							      >> 110 LOAD_CONST 0 ( None )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3
--							      --							    --								  --
def printRepeating ( arr , size ) :			      Disassembly of <code object printRepeating at 0x7fbac<<unk>>  Disassembly of <code object printRepeating at 0x7f816a6e4b70, script_not_found : None
    print ( " The repeating elements are" , end = " " )	      2 0 LOAD_GLOBAL 0 ( print )				    26 0 LOAD_GLOBAL 0 ( print )				  
    for i in range ( 0 , size ) :			      2 LOAD_CONST 1 ( ' The repeating elements are' )		    2 LOAD_CONST 1 ( 'The repeating elements are ""' )		  
	if ( arr [ abs ( arr [ i ] ) ] > 0 ) :		      4 LOAD_CONST 2 ( ' ' )					    4 CALL_FUNCTION 1						  
	    arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( 6 LOAD_CONST 3 ( ( 'end' , ) )				    6 POP_TOP							  
	else :						      8 CALL_FUNCTION_KW 2					    								  
	    print ( abs ( arr [ i ] ) , end = " " )	      10 POP_TOP						    27 8 LOAD_GLOBAL 1 ( print )				  
							      								    10 LOAD_CONST 2 ( 'The repeating elements are "' )		  
							      3 12 SETUP_LOOP 92 ( to 106 )				    12 CALL_FUNCTION 1						  
							      14 LOAD_GLOBAL 1 ( range )				    14 POP_TOP							  
							      16 LOAD_CONST 4 ( 0 )					    16 LOAD_CONST 0 ( None )					  
							      18 LOAD_FAST 1 ( size )					    18 RETURN_VALUE						  
							      20 CALL_FUNCTION 2					    NEW_LINE							  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 78 ( to 104 )				    								  
							      26 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 28 LOAD_FAST 0 ( arr )					    								  
							      30 LOAD_GLOBAL 2 ( abs )					    								  
							      32 LOAD_FAST 0 ( arr )					    								  
							      34 LOAD_FAST 2 ( i )					    								  
							      36 BINARY_SUBSCR						    								  
							      38 CALL_FUNCTION 1					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_CONST 4 ( 0 )					    								  
							      44 COMPARE_OP 4 ( > )					    								  
							      46 POP_JUMP_IF_FALSE 82					    								  
							      								    								  
							      5 48 LOAD_CONST 5 ( - 1 )					    								  
							      50 LOAD_FAST 0 ( arr )					    								  
							      52 LOAD_GLOBAL 2 ( abs )					    								  
							      54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 2 ( i )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 CALL_FUNCTION 1					    								  
							      62 BINARY_SUBSCR						    								  
							      64 BINARY_MULTIPLY					    								  
							      66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_GLOBAL 2 ( abs )					    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 2 ( i )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 CALL_FUNCTION 1					    								  
							      78 STORE_SUBSCR						    								  
							      80 JUMP_ABSOLUTE 24					    								  
							      								    								  
							      7 >> 82 LOAD_GLOBAL 0 ( print )				    								  
							      84 LOAD_GLOBAL 2 ( abs )					    								  
							      86 LOAD_FAST 0 ( arr )					    								  
							      88 LOAD_FAST 2 ( i )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 CALL_FUNCTION 1					    								  
							      94 LOAD_CONST 2 ( ' ' )					    								  
							      96 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      98 CALL_FUNCTION_KW 2					    								  
							      100 POP_TOP						    								  
							      102 JUMP_ABSOLUTE 24					    								  
							      >> 104 POP_BLOCK						    								  
							      >> 106 LOAD_CONST 0 ( None )				    								  
							      108 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER		      CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER		    CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER			  CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER
--							      --							    --								  --
def checkIfAllTogether ( s , c ) :			      Disassembly of <code object checkIfAllTogether at 0x7fbac0e8b Disassembly of <code object checkIfAllgether at 0x7f816a6e4b7 error : Traceback (most recent call last):   File
    oneSeen = False					      2 0 LOAD_CONST 1 ( False )				    26 0 LOAD_GLOBAL 0 ( oneSeen )				  "XLM/dis_script.py", line 59, in <module>	for
    i = 0						      2 STORE_FAST 2 ( oneSeen )				    2 LOAD_CONST 1 ( False )					  item in run_dis_script():   File "XLM/dis_script.p
    n = len ( s )					      								    4 COMPARE_OP 8 ( is )					  y", line 54, in run_dis_script     hyp_co = mco.to
    while ( i < n ) :					      3 4 LOAD_CONST 2 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	if ( s [ i ] == c ) :				      6 STORE_FAST 3 ( i )					    								  assembler.py", line 81, in to_co     co_consts.app
	    if ( oneSeen == True ) :			      								    27 8 LOAD_FAST 0 ( s )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
		return False				      4 8 LOAD_GLOBAL 0 ( len )					    10 LOAD_CONST 2 ( True )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    while ( i < n and s [ i ] == c ) :		      10 LOAD_FAST 0 ( s )					    12 COMPARE_OP 8 ( is )					  co	 self.co_cellvars, ValueError: code: varname
		i = i + 1				      12 CALL_FUNCTION 1					    14 POP_JUMP_IF_FALSE 28					  s is too small
	    oneSeen = True				      14 STORE_FAST 4 ( n )					    								  
	else :						      								    28 16 LOAD_CONST 3 ( False )				  
	    i = i + 1					      5 16 SETUP_LOOP 84 ( to 102 )				    18 RETURN_VALUE						  
    return True						      >> 18 LOAD_FAST 3 ( i )					    								  
							      20 LOAD_FAST 4 ( n )					    29 >> 20 LOAD_CONST 4 ( False )				  
							      22 COMPARE_OP 0 ( < )					    22 RETURN_VALUE						  
							      24 POP_JUMP_IF_FALSE 100					    24 LOAD_CONST 0 ( None )					  
							      								    26 RETURN_VALUE						  
							      6 26 LOAD_FAST 0 ( s )					    NEW_LINE							  
							      28 LOAD_FAST 3 ( i )					    								  
							      30 BINARY_SUBSCR						    								  
							      32 LOAD_FAST 1 ( c )					    								  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_FALSE 90					    								  
							      								    								  
							      7 38 LOAD_FAST 2 ( oneSeen )				    								  
							      40 LOAD_CONST 3 ( True )					    								  
							      42 COMPARE_OP 2 ( == )					    								  
							      44 POP_JUMP_IF_FALSE 50					    								  
							      								    								  
							      8 46 LOAD_CONST 1 ( False )				    								  
							      48 RETURN_VALUE						    								  
							      								    								  
							      9 >> 50 SETUP_LOOP 32 ( to 84 )				    								  
							      >> 52 LOAD_FAST 3 ( i )					    								  
							      54 LOAD_FAST 4 ( n )					    								  
							      56 COMPARE_OP 0 ( < )					    								  
							      58 POP_JUMP_IF_FALSE 82					    								  
							      60 LOAD_FAST 0 ( s )					    								  
							      62 LOAD_FAST 3 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 1 ( c )					    								  
							      68 COMPARE_OP 2 ( == )					    								  
							      70 POP_JUMP_IF_FALSE 82					    								  
							      								    								  
							      10 72 LOAD_FAST 3 ( i )					    								  
							      74 LOAD_CONST 4 ( 1 )					    								  
							      76 BINARY_ADD						    								  
							      78 STORE_FAST 3 ( i )					    								  
							      80 JUMP_ABSOLUTE 52					    								  
							      >> 82 POP_BLOCK						    								  
							      								    								  
							      11 >> 84 LOAD_CONST 3 ( True )				    								  
							      86 STORE_FAST 2 ( oneSeen )				    								  
							      88 JUMP_ABSOLUTE 18					    								  
							      								    								  
							      13 >> 90 LOAD_FAST 3 ( i )				    								  
							      92 LOAD_CONST 4 ( 1 )					    								  
							      94 BINARY_ADD						    								  
							      96 STORE_FAST 3 ( i )					    								  
							      98 JUMP_ABSOLUTE 18					    								  
							      >> 100 POP_BLOCK						    								  
							      								    								  
							      14 >> 102 LOAD_CONST 3 ( True )				    								  
							      104 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_NEXT_STRING				      LEXICOGRAPHICALLY_NEXT_STRING				    LEXICOGRAPHICALLY_NEXT_STRING				  LEXICOGRAPHICALLY_NEXT_STRING
--							      --							    --								  --
def nextWord ( s ) :					      Disassembly of <code object nextWord at 0x7fbac<<unk>> d540,  Disassembly of <code object nextWord at 0x7f816a673a50, file  error : /bin/bash: line 1: 26269 Segmentation faul
    if ( s == " " ) :					      2 0 LOAD_FAST 0 ( s )					    20 0 LOAD_FAST 0 ( s )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return "a"					      2 LOAD_CONST 1 ( ' ' )					    2 LOAD_CONST 1 ( 'a' )					  ataset/bin/python XLM/dis_script.py --script_path
    i = len ( s ) - 1					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    while ( s [ i ] == 'z' and i >= 0 ) :		      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  eval_scripts/python_sa-dis_sa.test/LEXICOGRAPHICAL
	i -= 1						      								    								  LY_NEXT_STRING.dis
    if ( i == - 1 ) :					      3 8 LOAD_CONST 2 ( 'a' )					    21 8 LOAD_FAST 0 ( s )					  
	s = s + 'a'					      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 'z' )					  
    else :						      								    12 COMPARE_OP 2 ( == )					  
	s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) 4 >> 12 LOAD_GLOBAL 0 ( len )				    14 POP_JUMP_IF_FALSE 28					  
    return s						      14 LOAD_FAST 0 ( s )					    								  
							      16 CALL_FUNCTION 1					    22 >> 16 LOAD_CONST 3 ( 'a' )				  
							      18 LOAD_CONST 3 ( 1 )					    18 RETURN_VALUE						  
							      20 BINARY_SUBTRACT					    								  
							      22 STORE_FAST 1 ( i )					    24 >> 20 LOAD_FAST 0 ( s )					  
							      								    22 LOAD_CONST 4 ( 'z' )					  
							      5 24 SETUP_LOOP 32 ( to 58 )				    24 COMPARE_OP 2 ( == )					  
							      >> 26 LOAD_FAST 0 ( s )					    26 POP_JUMP_IF_FALSE 28					  
							      28 LOAD_FAST 1 ( i )					    								  
							      30 BINARY_SUBSCR						    25 28 LOAD_CONST 5 ( 'z' )					  
							      32 LOAD_CONST 4 ( 'z' )					    30 RETURN_VALUE						  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_FALSE 56					    26 >> 32 LOAD_FAST 0 ( s )					  
							      38 LOAD_FAST 1 ( i )					    34 LOAD_CONST 6 ( 'z' )					  
							      40 LOAD_CONST 5 ( 0 )					    36 COMPARE_OP 2 ( == )					  
							      42 COMPARE_OP 5 ( >= )					    38 POP_JUMP_IF_FALSE 44					  
							      44 POP_JUMP_IF_FALSE 56					    40 LOAD_FAST 0 ( s )					  
							      								    42 LOAD_CONST 7 ( 'z' )					  
							      6 46 LOAD_FAST 1 ( i )					    44 COMPARE_OP 2 ( == )					  
							      48 LOAD_CONST 3 ( 1 )					    46 POP_JUMP_IF_FALSE 44					  
							      50 INPLACE_SUBTRACT					    								  
							      52 STORE_FAST 1 ( i )					    27 48 LOAD_CONST 8 ( 'z' )					  
							      54 JUMP_ABSOLUTE 26					    50 RETURN_VALUE						  
							      >> 56 POP_BLOCK						    								  
							      								    28 >> 52 LOAD_FAST 0 ( s )					  
							      7 >> 58 LOAD_FAST 1 ( i )					    54 LOAD_CONST 9 ( 'z' )					  
							      60 LOAD_CONST 6 ( - 1 )					    56 COMPARE_OP 2 ( == )					  
							      62 COMPARE_OP 2 ( == )					    58 POP_JUMP_IF_FALSE 60					  
							      64 POP_JUMP_IF_FALSE 76					    								  
							      								    29 60 LOAD_CONST 10 ( 'z' )					  
							      8 66 LOAD_FAST 0 ( s )					    62 RETURN_VALUE						  
							      68 LOAD_CONST 2 ( 'a' )					    								  
							      70 BINARY_ADD						    30 >> 64 LOAD_FAST 0 ( s )					  
							      72 STORE_FAST 0 ( s )					    66 LOAD_CONST 11 ( 'z' )					  
							      74 JUMP_FORWARD 34 ( to 110 )				    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 76					  
							      10 >> 76 LOAD_FAST 0 ( s )				    72 LOAD_FAST 0 ( s )					  
							      78 LOAD_METHOD 1 ( replace )				    74 LOAD_CONST 12 ( 'z' )					  
							      80 LOAD_FAST 0 ( s )					    76 COMPARE_OP 2 ( == )					  
							      82 LOAD_FAST 1 ( i )					    78 POP_JUMP_IF_FALSE 76					  
							      84 BINARY_SUBSCR						    								  
							      86 LOAD_GLOBAL 2 ( chr )					    31 80 LOAD_CONST 13 ( 'z' )					  
							      88 LOAD_GLOBAL 3 ( ord )					    82 RETURN_VALUE						  
							      90 LOAD_FAST 0 ( s )					    >> 84 LOAD_CONST 0 ( None )					  
							      92 LOAD_FAST 1 ( i )					    86 RETURN_VALUE						  
							      94 BINARY_SUBSCR						    NEW_LINE							  
							      96 CALL_FUNCTION 1					    								  
							      98 LOAD_CONST 3 ( 1 )					    								  
							      100 BINARY_ADD						    								  
							      102 CALL_FUNCTION 1					    								  
							      104 LOAD_CONST 3 ( 1 )					    								  
							      106 CALL_METHOD 3						    								  
							      108 STORE_FAST 0 ( s )					    								  
							      								    								  
							      11 >> 110 LOAD_FAST 0 ( s )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		      SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		    SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM			  SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM
--							      --							    --								  --
def computeLPSArray ( pat , M , lps ) :			      Disassembly of <code object computeLPSArray at 0x7fbac<<unk>> Disassembly of <code object computeLPSArray at 0x7f816a673a50 script_not_found : None
    len = 0						      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_FAST 0 ( pat )					  
    lps [ 0 ]						      2 STORE_FAST 3 ( len )					    2 LOAD_FAST 1 ( M )						  
    i = 1						      								    4 BINARY_SUBSCR						  
    while i < M :					      3 4 LOAD_FAST 2 ( lps )					    6 STORE_FAST 2 ( pat )					  
	if pat [ i ] == pat [ len ] :			      6 LOAD_CONST 1 ( 0 )					    								  
	    len += 1					      8 BINARY_SUBSCR						    66 8 LOAD_FAST 2 ( pat )					  
	    lps [ i ] = len				      10 POP_TOP						    10 LOAD_CONST 1 ( 0 )					  
	    i += 1					      								    12 BINARY_SUBSCR						  
	else :						      4 12 LOAD_CONST 2 ( 1 )					    14 STORE_FAST 3 ( pat )					  
	    if len != 0 :				      14 STORE_FAST 4 ( i )					    								  
		len = lps [ len - 1 ]			      								    67 16 LOAD_FAST 3 ( pat )					  
	    else :					      5 16 SETUP_LOOP 92 ( to 110 )				    18 LOAD_FAST 2 ( pat )					  
		lps [ i ] = 0				      >> 18 LOAD_FAST 4 ( i )					    20 COMPARE_OP 6 ( in )					  
		i += 1					      20 LOAD_FAST 1 ( M )					    22 POP_JUMP_IF_FALSE 44					  
							      22 COMPARE_OP 0 ( < )					    								  
							      24 POP_JUMP_IF_FALSE 108					    68 24 LOAD_FAST 3 ( pat )					  
							      								    26 LOAD_FAST 1 ( M )					  
							      6 26 LOAD_FAST 0 ( pat )					    28 BINARY_SUBSCR						  
							      28 LOAD_FAST 4 ( i )					    30 STORE_FAST 4 ( pat )					  
							      30 BINARY_SUBSCR						    								  
							      32 LOAD_FAST 0 ( pat )					    69 32 LOAD_FAST 4 ( pat )					  
							      34 LOAD_FAST 3 ( len )					    34 LOAD_FAST 2 ( pat )					  
							      36 BINARY_SUBSCR						    36 COMPARE_OP 6 ( in )					  
							      38 COMPARE_OP 2 ( == )					    38 POP_JUMP_IF_FALSE 44					  
							      40 POP_JUMP_IF_FALSE 68					    								  
							      								    70 40 LOAD_FAST 3 ( pat )					  
							      7 42 LOAD_FAST 3 ( len )					    42 LOAD_FAST 4 ( pat )					  
							      44 LOAD_CONST 2 ( 1 )					    44 COMPARE_OP 6 ( in )					  
							      46 INPLACE_ADD						    46 POP_JUMP_IF_FALSE 44					  
							      48 STORE_FAST 3 ( len )					    								  
							      								    71 48 LOAD_FAST 3 ( pat )					  
							      8 50 LOAD_FAST 3 ( len )					    50 LOAD_FAST 4 ( pat )					  
							      52 LOAD_FAST 2 ( lps )					    52 COMPARE_OP 6 ( in )					  
							      54 LOAD_FAST 4 ( i )					    54 POP_JUMP_IF_FALSE 44					  
							      56 STORE_SUBSCR						    								  
							      								    72 56 LOAD_FAST 3 ( pat )					  
							      9 58 LOAD_FAST 4 ( i )					    58 LOAD_FAST 4 ( pat )					  
							      60 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 1 ( M )					  
							      62 INPLACE_ADD						    62 BINARY_SUBSCR						  
							      64 STORE_FAST 4 ( i )					    64 LOAD_FAST 4 ( pat )					  
							      66 JUMP_ABSOLUTE 18					    66 COMPARE_OP 6 ( in )					  
							      								    68 POP_JUMP_IF_FALSE 74					  
							      11 >> 68 LOAD_FAST 3 ( len )				    								  
							      70 LOAD_CONST 1 ( 0 )					    73 70 LOAD_FAST 3 ( pat )					  
							      72 COMPARE_OP 3 ( != )					    72 LOAD_FAST 4 ( pat )					  
							      74 POP_JUMP_IF_FALSE 90					    74 LOAD_FAST 1 ( M )					  
							      								    76 BINARY_SUBSCR						  
							      12 76 LOAD_FAST 2 ( lps )					    78 LOAD_FAST 4 ( pat )					  
							      78 LOAD_FAST 3 ( len )					    80 BUILD_TUPLE 2						  
							      80 LOAD_CONST 2 ( 1 )					    82 BINARY_MODULO						  
							      82 BINARY_SUBTRACT					    84 STORE_FAST 5 ( pat )					  
							      84 BINARY_SUBSCR						    								  
							      86 STORE_FAST 3 ( len )					    74 >> 86 LOAD_FAST 5 ( pat )				  
							      88 JUMP_ABSOLUTE 18					    88 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      14 >> 90 LOAD_CONST 1 ( 0 )				    75 90 LOAD_FAST 0 ( pat )					  
							      92 LOAD_FAST 2 ( lps )					    92 LOAD_FAST 1 ( M )					  
							      94 LOAD_FAST 4 ( i )					    94 LOAD_FAST 2 ( pat )					  
							      96 STORE_SUBSCR						    96 BUILD_TUPLE 2						  
							      								    98 RETURN_VALUE						  
							      15 98 LOAD_FAST 4 ( i )					    >> 100 LOAD_CONST 1 ( 0 )					  
							      100 LOAD_CONST 2 ( 1 )					    102 RETURN_VALUE						  
							      102 INPLACE_ADD						    NEW_LINE							  
							      104 STORE_FAST 4 ( i )					    								  
							      106 JUMP_ABSOLUTE 18					    								  
							      >> 108 POP_BLOCK						    								  
							      >> 110 LOAD_CONST 0 ( None )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_B_ARRAY_B_K					      FIND_PAIRS_B_ARRAY_B_K					    FIND_PAIRS_B_ARRAY_B_K					  FIND_PAIRS_B_ARRAY_B_K
--							      --							    --								  --
def printPairs ( arr , n , k ) :			      Disassembly of <code object printPairs at 0x7fbac<<unk>> de40 Disassembly of <code object printPairs at 0x7f816a68ad20, fil script_not_found : None
    isPairFound = True					      2 0 LOAD_CONST 1 ( True )					    28 0 LOAD_GLOBAL 0 ( isPairFound )				  
    for i in range ( 0 , n ) :				      2 STORE_FAST 3 ( isPairFound )				    2 LOAD_CONST 1 ( True )					  
	for j in range ( 0 , n ) :			      								    4 LOAD_CONST 2 ( ( 'n' , ) )				  
	    if ( i != j and arr [ i ] % arr [ j ] == k ) :    3 4 SETUP_LOOP 100 ( to 106 )				    6 CALL_FUNCTION_KW 1					  
		print ( "(" , arr [ i ] , ", " , arr [ j ] ,  6 LOAD_GLOBAL 0 ( range )					    8 STORE_FAST 1 ( n )					  
		isPairFound = True			      8 LOAD_CONST 2 ( 0 )					    								  
    return isPairFound					      10 LOAD_FAST 1 ( n )					    29 10 LOAD_FAST 1 ( n )					  
							      12 CALL_FUNCTION 2					    12 LOAD_CONST 3 ( 0 )					  
							      14 GET_ITER						    14 COMPARE_OP 4 ( > )					  
							      >> 16 FOR_ITER 86 ( to 104 )				    16 POP_JUMP_IF_FALSE 28					  
							      18 STORE_FAST 4 ( i )					    								  
							      								    30 18 LOAD_FAST 1 ( n )					  
							      4 20 SETUP_LOOP 80 ( to 102 )				    20 LOAD_CONST 4 ( 0 )					  
							      22 LOAD_GLOBAL 0 ( range )				    22 COMPARE_OP 4 ( > )					  
							      24 LOAD_CONST 2 ( 0 )					    24 POP_JUMP_IF_FALSE 28					  
							      26 LOAD_FAST 1 ( n )					    								  
							      28 CALL_FUNCTION 2					    31 26 LOAD_FAST 1 ( n )					  
							      30 GET_ITER						    28 LOAD_CONST 5 ( 0 )					  
							      >> 32 FOR_ITER 66 ( to 100 )				    30 COMPARE_OP 4 ( > )					  
							      34 STORE_FAST 5 ( j )					    32 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      5 36 LOAD_FAST 4 ( i )					    32 34 LOAD_FAST 1 ( n )					  
							      38 LOAD_FAST 5 ( j )					    36 LOAD_CONST 6 ( 1 )					  
							      40 COMPARE_OP 3 ( != )					    38 COMPARE_OP 4 ( > )					  
							      42 POP_JUMP_IF_FALSE 32					    40 POP_JUMP_IF_FALSE 44					  
							      44 LOAD_FAST 0 ( arr )					    								  
							      46 LOAD_FAST 4 ( i )					    33 42 LOAD_FAST 1 ( n )					  
							      48 BINARY_SUBSCR						    44 LOAD_CONST 7 ( 0 )					  
							      50 LOAD_FAST 0 ( arr )					    46 COMPARE_OP 4 ( > )					  
							      52 LOAD_FAST 5 ( j )					    48 POP_JUMP_IF_FALSE 44					  
							      54 BINARY_SUBSCR						    								  
							      56 BINARY_MODULO						    34 50 LOAD_FAST 1 ( n )					  
							      58 LOAD_FAST 2 ( k )					    52 LOAD_CONST 8 ( 1 )					  
							      60 COMPARE_OP 2 ( == )					    54 INPLACE_ADD						  
							      62 POP_JUMP_IF_FALSE 32					    56 STORE_FAST 1 ( n )					  
							      								    								  
							      6 64 LOAD_GLOBAL 1 ( print )				    35 >> 58 LOAD_FAST 1 ( n )					  
							      66 LOAD_CONST 3 ( '(' )					    60 LOAD_CONST 9 ( 1 )					  
							      68 LOAD_FAST 0 ( arr )					    62 INPLACE_ADD						  
							      70 LOAD_FAST 4 ( i )					    64 STORE_FAST 1 ( n )					  
							      72 BINARY_SUBSCR						    								  
							      74 LOAD_CONST 4 ( ', ' )					    36 66 LOAD_FAST 1 ( n )					  
							      76 LOAD_FAST 0 ( arr )					    68 LOAD_CONST 10 ( 1 )					  
							      78 LOAD_FAST 5 ( j )					    70 INPLACE_ADD						  
							      80 BINARY_SUBSCR						    72 STORE_FAST 1 ( n )					  
							      82 LOAD_CONST 5 ( ')' )					    74 JUMP_FORWARD 4 ( to 78 )					  
							      84 LOAD_CONST 6 ( '' )					    								  
							      86 LOAD_CONST 7 ( ' ' )					    37 >> 76 LOAD_FAST 1 ( n )					  
							      88 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			    78 LOAD_CONST 11 ( 1 )					  
							      90 CALL_FUNCTION_KW 7					    80 INPLACE_ADD						  
							      92 POP_TOP						    82 STORE_FAST 1 ( n )					  
							      								    84 JUMP_FORWARD 4 ( to 78 )					  
							      7 94 LOAD_CONST 1 ( True )				    								  
							      96 STORE_FAST 3 ( isPairFound )				    39 >> 86 LOAD_FAST 1 ( n )					  
							      98 JUMP_ABSOLUTE 32					    88 LOAD_CONST 12 ( 1 )					  
							      >> 100 POP_BLOCK						    90 INPLACE_ADD						  
							      >> 102 JUMP_ABSOLUTE 16					    92 STORE_FAST 1 ( n )					  
							      >> 104 POP_BLOCK						    								  
							      								    40 94 LOAD_FAST 1 ( n )					  
							      8 >> 106 LOAD_FAST 3 ( isPairFound )			    96 LOAD_CONST 13 ( 1 )					  
							      108 RETURN_VALUE NEW_LINE					    98 INPLACE_ADD						  
							      								    100 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_CONST 14 ( 1 )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_CONST 15 ( 1 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( n )					  
							      								    								  
							      								    43 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_CONST 16 ( 1 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    126 STORE_FAST 1 ( n )					  
							      								    								  
							      								    44 128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_CONST 17 ( 1 )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    								  
							      								    46 >> 136 LOAD_FAST 1 ( n )					  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1
--							      --							    --								  --
def countPairs ( arr , n ) :				      Disassembly of <code object countPairs at 0x7fbac0e8bc90, fil Disassembly of <code object countPairs at 0x7f816a683c00, fil error : Traceback (most recent call last):   File
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_GLOBAL 0 ( Hash )					  "XLM/dis_script.py", line 60, in <module>	exec
    Hash = set ( )					      2 STORE_FAST 2 ( result )					    2 CALL_FUNCTION 0						  (item)   File "main.py", line 37, in <module>	  Fi
    for i in range ( n ) :				      								    4 STORE_FAST 1 ( n )					  le "<dis>", line 2, in countPairs NameError: name
	Hash.add ( arr [ i ] )				      3 4 LOAD_GLOBAL 0 ( set )					    								  'Hash' is not defined
    for i in range ( n ) :				      6 CALL_FUNCTION 0						    66 6 LOAD_FAST 1 ( n )					  
	for j in range ( i + 1 , n ) :			      8 STORE_FAST 3 ( Hash )					    8 LOAD_CONST 1 ( 0 )					  
	    product = arr [ i ] * arr [ j ]		      								    10 BINARY_SUBSCR						  
	    if product in ( Hash ) :			      4 10 SETUP_LOOP 30 ( to 42 )				    12 STORE_FAST 2 ( count )					  
		result += 1				      12 LOAD_GLOBAL 1 ( range )				    								  
    return result					      14 LOAD_FAST 1 ( n )					    67 14 SETUP_LOOP 44 ( to 54 )				  
							      16 CALL_FUNCTION 1					    16 LOAD_GLOBAL 1 ( range )					  
							      18 GET_ITER						    18 LOAD_FAST 0 ( arr )					  
							      >> 20 FOR_ITER 18 ( to 40 )				    20 CALL_FUNCTION 1						  
							      22 STORE_FAST 4 ( i )					    22 GET_ITER							  
							      								    >> 24 FOR_ITER 34 ( to 52 )					  
							      5 24 LOAD_FAST 3 ( Hash )					    26 STORE_FAST 3 ( i )					  
							      26 LOAD_METHOD 2 ( add )					    								  
							      28 LOAD_FAST 0 ( arr )					    68 28 LOAD_FAST 2 ( count )					  
							      30 LOAD_FAST 4 ( i )					    30 LOAD_CONST 2 ( 1 )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBTRACT						  
							      34 CALL_METHOD 1						    34 LOAD_FAST 1 ( n )					  
							      36 POP_TOP						    36 LOAD_CONST 3 ( 2 )					  
							      38 JUMP_ABSOLUTE 20					    38 BINARY_POWER						  
							      >> 40 POP_BLOCK						    40 BINARY_SUBTRACT						  
							      								    42 LOAD_FAST 1 ( n )					  
							      6 >> 42 SETUP_LOOP 72 ( to 116 )				    44 LOAD_CONST 4 ( 2 )					  
							      44 LOAD_GLOBAL 1 ( range )				    46 BINARY_POWER						  
							      46 LOAD_FAST 1 ( n )					    48 BINARY_MULTIPLY						  
							      48 CALL_FUNCTION 1					    50 LOAD_FAST 1 ( n )					  
							      50 GET_ITER						    52 LOAD_CONST 5 ( 3 )					  
							      >> 52 FOR_ITER 60 ( to 114 )				    54 BINARY_POWER						  
							      54 STORE_FAST 4 ( i )					    56 BINARY_MULTIPLY						  
							      								    58 BINARY_ADD						  
							      7 56 SETUP_LOOP 54 ( to 112 )				    60 LOAD_FAST 1 ( n )					  
							      58 LOAD_GLOBAL 1 ( range )				    62 LOAD_CONST 6 ( 2 )					  
							      60 LOAD_FAST 4 ( i )					    64 BINARY_POWER						  
							      62 LOAD_CONST 2 ( 1 )					    66 BINARY_MULTIPLY						  
							      64 BINARY_ADD						    68 BINARY_ADD						  
							      66 LOAD_FAST 1 ( n )					    70 STORE_FAST 4 ( i )					  
							      68 CALL_FUNCTION 2					    								  
							      70 GET_ITER						    69 72 LOAD_FAST 2 ( count )					  
							      >> 72 FOR_ITER 36 ( to 110 )				    74 LOAD_CONST 7 ( 1 )					  
							      74 STORE_FAST 5 ( j )					    76 BINARY_SUBTRACT						  
							      								    78 LOAD_FAST 1 ( n )					  
							      8 76 LOAD_FAST 0 ( arr )					    80 LOAD_CONST 8 ( 2 )					  
							      78 LOAD_FAST 4 ( i )					    82 BINARY_POWER						  
							      80 BINARY_SUBSCR						    84 BINARY_MULTIPLY						  
							      82 LOAD_FAST 0 ( arr )					    86 BINARY_ADD						  
							      84 LOAD_FAST 5 ( j )					    88 LOAD_FAST 1 ( n )					  
							      86 BINARY_SUBSCR						    90 LOAD_CONST 9 ( 2 )					  
							      88 BINARY_MULTIPLY					    92 BINARY_POWER						  
							      90 STORE_FAST 6 ( product )				    94 BINARY_MULTIPLY						  
							      								    96 BINARY_ADD						  
							      9 92 LOAD_FAST 6 ( product )				    98 LOAD_FAST 1 ( n )					  
							      94 LOAD_FAST 3 ( Hash )					    100 LOAD_CONST 10 ( 2 )					  
							      96 COMPARE_OP 6 ( in )					    102 BINARY_POWER						  
							      98 POP_JUMP_IF_FALSE 72					    104 BINARY_MULTIPLY						  
							      								    106 BINARY_ADD						  
							      10 100 LOAD_FAST 2 ( result )				    108 LOAD_FAST 1 ( n )					  
							      102 LOAD_CONST 2 ( 1 )					    110 LOAD_CONST 11 ( 2 )					  
							      104 INPLACE_ADD						    112 BINARY_POWER						  
							      106 STORE_FAST 2 ( result )				    114 BINARY_ADD						  
							      108 JUMP_ABSOLUTE 72					    116 LOAD_FAST 1 ( n )					  
							      >> 110 POP_BLOCK						    118 LOAD_CONST 12 ( 2 )					  
							      >> 112 JUMP_ABSOLUTE 52					    120 BINARY_POWER						  
							      >> 114 POP_BLOCK						    122 BINARY_ADD						  
							      								    124 LOAD_FAST 1 ( n )					  
							      11 >> 116 LOAD_FAST 2 ( result )				    126 LOAD_CONST 13 ( 2 )					  
							      118 RETURN_VALUE NEW_LINE					    128 BINARY_POWER						  
							      								    130 BINARY_MULTIPLY						  
							      								    132 BINARY_ADD						  
							      								    134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_CONST 14 ( 2 )					  
							      								    138 BINARY_POWER						  
							      								    140 BINARY_MULTIPLY						  
							      								    142 BINARY_ADD						  
							      								    144 BINARY_ADD						  
							      								    146 LOAD_FAST 1 ( n )					  
							      								    148 LOAD_CONST 15 ( 2 )					  
							      								    150 BINARY_POWER						  
							      								    152 BINARY_MULTIPLY						  
							      								    154 BINARY_ADD						  
							      								    156 LOAD_FAST 1 ( n )					  
							      								    158 LOAD_CONST 16 ( 2 )					  
							      								    160 BINARY_POWER						  
							      								    162 BINARY_ADD						  
							      								    164 LOAD_FAST 1 ( n )					  
							      								    166 BINARY_MULTIPLY						  
							      								    168 BINARY_ADD						  
							      								    170 LOAD_FAST 1 ( n )					  
							      								    172 BINARY_MULTIPLY						  
							      								    174 BINARY_ADD						  
							      								    176 BINARY_ADD						  
							      								    178 CALL_FUNCTION 1						  
							      								    180 POP_TOP							  
							      								    								  
							      								    67 >> 94 LOAD_FAST 1 ( n )					  
							      								    96 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_NEXT_NUMBER			      BINARY_REPRESENTATION_OF_NEXT_NUMBER			    BINARY_REPRESENTATION_OF_NEXT_NUMBER			  BINARY_REPRESENTATION_OF_NEXT_NUMBER
--							      --							    --								  --
def nextGreater ( num1 ) :				      Disassembly of <code object nextGreater at 0x7fbac0e8bc90, fi Disassembly of <code object nextGreater at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    l = len ( num1 ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( num1 )					  "XLM/dis_script.py", line 59, in <module>	for
    num = list ( num1 ) ;				      2 LOAD_FAST 0 ( num1 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    i = l - 1 ;						      4 CALL_FUNCTION 1						    4 COMPARE_OP 4 ( > )					  y", line 47, in run_dis_script     co_code, co_nlo
    while ( i >= 0 ) :					      6 STORE_FAST 1 ( l )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	if ( num [ i ] == '0' ) :			      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    num [ i ] = '1' ;				      3 8 LOAD_GLOBAL 1 ( list )				    27 8 LOAD_FAST 0 ( num1 )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	    break ;					      10 LOAD_FAST 0 ( num1 )					    10 LOAD_CONST 1 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	else :						      12 CALL_FUNCTION 1					    12 COMPARE_OP 4 ( > )					   be in range(0, 256)
	    num [ i ] = '0' ;				      14 STORE_FAST 2 ( num )					    14 POP_JUMP_IF_FALSE 28					  
	i -= 1 ;					      								    								  
    num1 = ''.join ( num ) ;				      4 16 LOAD_FAST 1 ( l )					    28 16 LOAD_FAST 0 ( num1 )					  
    if ( i < 0 ) :					      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
	num1 = '1' + num1 ;				      20 BINARY_SUBTRACT					    20 COMPARE_OP 4 ( > )					  
    return num1 ;					      22 STORE_FAST 3 ( i )					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 SETUP_LOOP 52 ( to 78 )				    29 >> 24 LOAD_FAST 0 ( num1 )				  
							      >> 26 LOAD_FAST 3 ( i )					    26 LOAD_CONST 1 ( 1 )					  
							      28 LOAD_CONST 2 ( 0 )					    28 COMPARE_OP 4 ( > )					  
							      30 COMPARE_OP 5 ( >= )					    30 POP_JUMP_IF_FALSE 44					  
							      32 POP_JUMP_IF_FALSE 76					    								  
							      								    30 32 LOAD_FAST 0 ( num1 )					  
							      6 34 LOAD_FAST 2 ( num )					    34 LOAD_CONST 1 ( 1 )					  
							      36 LOAD_FAST 3 ( i )					    36 COMPARE_OP 4 ( > )					  
							      38 BINARY_SUBSCR						    38 POP_JUMP_IF_FALSE 44					  
							      40 LOAD_CONST 3 ( '0' )					    								  
							      42 COMPARE_OP 2 ( == )					    31 40 LOAD_FAST 0 ( num1 )					  
							      44 POP_JUMP_IF_FALSE 58					    42 LOAD_CONST 1 ( 1 )					  
							      								    44 COMPARE_OP 4 ( > )					  
							      7 46 LOAD_CONST 4 ( '1' )					    46 POP_JUMP_IF_FALSE 44					  
							      48 LOAD_FAST 2 ( num )					    								  
							      50 LOAD_FAST 3 ( i )					    32 48 LOAD_FAST 0 ( num1 )					  
							      52 STORE_SUBSCR						    50 LOAD_CONST 1 ( 1 )					  
							      								    52 INPLACE_ADD						  
							      8 54 BREAK_LOOP						    54 STORE_FAST 1 ( num1 )					  
							      56 JUMP_FORWARD 8 ( to 66 )				    								  
							      								    33 >> 56 LOAD_FAST 0 ( num1 )				  
							      10 >> 58 LOAD_CONST 3 ( '0' )				    58 LOAD_CONST 1 ( 1 )					  
							      60 LOAD_FAST 2 ( num )					    60 COMPARE_OP 4 ( > )					  
							      62 LOAD_FAST 3 ( i )					    62 POP_JUMP_IF_FALSE 80					  
							      64 STORE_SUBSCR						    								  
							      								    34 64 LOAD_FAST 0 ( num1 )					  
							      11 >> 66 LOAD_FAST 3 ( i )				    66 LOAD_CONST 1 ( 1 )					  
							      68 LOAD_CONST 1 ( 1 )					    68 COMPARE_OP 4 ( > )					  
							      70 INPLACE_SUBTRACT					    70 POP_JUMP_IF_FALSE 80					  
							      72 STORE_FAST 3 ( i )					    								  
							      74 JUMP_ABSOLUTE 26					    35 72 LOAD_FAST 0 ( num1 )					  
							      >> 76 POP_BLOCK						    74 LOAD_CONST 1 ( 1 )					  
							      								    76 INPLACE_ADD						  
							      12 >> 78 LOAD_CONST 5 ( '' )				    78 STORE_FAST 1 ( num1 )					  
							      80 LOAD_METHOD 2 ( join )					    80 JUMP_FORWARD 4 ( to 82 )					  
							      82 LOAD_FAST 2 ( num )					    								  
							      84 CALL_METHOD 1						    36 >> 82 LOAD_FAST 0 ( num1 )				  
							      86 STORE_FAST 0 ( num1 )					    84 LOAD_CONST 1 ( 1 )					  
							      								    86 INPLACE_ADD						  
							      13 88 LOAD_FAST 3 ( i )					    88 STORE_FAST 1 ( num1 )					  
							      90 LOAD_CONST 2 ( 0 )					    90 JUMP_FORWARD 4 ( to 82 )					  
							      92 COMPARE_OP 0 ( < )					    								  
							      94 POP_JUMP_IF_FALSE 104					    37 >> 92 LOAD_FAST 0 ( num1 )				  
							      								    94 LOAD_CONST 1 ( 1 )					  
							      14 96 LOAD_CONST 4 ( '1' )				    96 INPLACE_ADD						  
							      98 LOAD_FAST 0 ( num1 )					    98 STORE_FAST 1 ( num1 )					  
							      100 BINARY_ADD						    								  
							      102 STORE_FAST 0 ( num1 )					    38 >> 100 LOAD_FAST 0 ( num1 )				  
							      								    102 LOAD_CONST 1 ( 1 )					  
							      15 >> 104 LOAD_FAST 0 ( num1 )				    104 INPLACE_ADD						  
							      106 RETURN_VALUE NEW_LINE					    106 STORE_FAST 1 ( num1 )					  
							      								    108 JUMP_FORWARD 4 ( to 82 )				  
							      								    								  
							      								    39 >> 110 LOAD_FAST 1 ( num1 )				  
							      								    112 LOAD_CONST 1 ( 1 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( num1 )					  
							      								    								  
							      								    40 >> 118 LOAD_FAST 1 ( num1 )				  
							      								    120 LOAD_CONST 1 ( 1 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( num1 )					  
							      								    								  
							      								    41 126 LOAD_FAST 1 ( num1 )					  
							      								    128 LOAD_CONST 1 ( 1 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( num1 )					  
							      								    134 JUMP_FORWARD 4 ( to 82 )				  
							      								    								  
							      								    42 >> 136 LOAD_FAST 1 ( num1 )				  
							      								    138 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1
--							      --							    --								  --
def sortedAfterSwap ( A , B , n ) :			      Disassembly of <code object sortedAfterSwap at 0x7fbac0e8bc90 Disassembly of <code object hashDrift Swap ( A , B , n , n )  script_not_found : None
    for i in range ( 0 , n - 1 ) :			      2 0 SETUP_LOOP 80 ( to 82 )				    INDENT for i in range ( n ) :				  
	if B [ i ] :					      2 LOAD_GLOBAL 0 ( range )					    INDENT if n [ i ] == n [ i ] :				  
	    if A [ i ] != i + 1 :			      4 LOAD_CONST 1 ( 0 )					    INDENT return n [ i ]					  
		A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ] 6 LOAD_FAST 2 ( n )					    DEDENT DEDENT DEDENT					  
    for i in range ( n ) :				      8 LOAD_CONST 2 ( 1 )					    								  
	if A [ i ] != i + 1 :				      10 BINARY_SUBTRACT					    								  
	    return False				      12 CALL_FUNCTION 2					    								  
    return True						      14 GET_ITER						    								  
							      >> 16 FOR_ITER 62 ( to 80 )				    								  
							      18 STORE_FAST 3 ( i )					    								  
							      								    								  
							      3 20 LOAD_FAST 1 ( B )					    								  
							      22 LOAD_FAST 3 ( i )					    								  
							      24 BINARY_SUBSCR						    								  
							      26 POP_JUMP_IF_FALSE 16					    								  
							      								    								  
							      4 28 LOAD_FAST 0 ( A )					    								  
							      30 LOAD_FAST 3 ( i )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_FAST 3 ( i )					    								  
							      36 LOAD_CONST 2 ( 1 )					    								  
							      38 BINARY_ADD						    								  
							      40 COMPARE_OP 3 ( != )					    								  
							      42 POP_JUMP_IF_FALSE 16					    								  
							      								    								  
							      5 44 LOAD_FAST 0 ( A )					    								  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 LOAD_CONST 2 ( 1 )					    								  
							      50 BINARY_ADD						    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 0 ( A )					    								  
							      56 LOAD_FAST 3 ( i )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 ROT_TWO						    								  
							      62 LOAD_FAST 0 ( A )					    								  
							      64 LOAD_FAST 3 ( i )					    								  
							      66 STORE_SUBSCR						    								  
							      68 LOAD_FAST 0 ( A )					    								  
							      70 LOAD_FAST 3 ( i )					    								  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 BINARY_ADD						    								  
							      76 STORE_SUBSCR						    								  
							      78 JUMP_ABSOLUTE 16					    								  
							      >> 80 POP_BLOCK						    								  
							      								    								  
							      6 >> 82 SETUP_LOOP 36 ( to 120 )				    								  
							      84 LOAD_GLOBAL 0 ( range )				    								  
							      86 LOAD_FAST 2 ( n )					    								  
							      88 CALL_FUNCTION 1					    								  
							      90 GET_ITER						    								  
							      >> 92 FOR_ITER 24 ( to 118 )				    								  
							      94 STORE_FAST 3 ( i )					    								  
							      								    								  
							      7 96 LOAD_FAST 0 ( A )					    								  
							      98 LOAD_FAST 3 ( i )					    								  
							      100 BINARY_SUBSCR						    								  
							      102 LOAD_FAST 3 ( i )					    								  
							      104 LOAD_CONST 2 ( 1 )					    								  
							      106 BINARY_ADD						    								  
							      108 COMPARE_OP 3 ( != )					    								  
							      110 POP_JUMP_IF_FALSE 92					    								  
							      								    								  
							      8 112 LOAD_CONST 3 ( False )				    								  
							      114 RETURN_VALUE						    								  
							      116 JUMP_ABSOLUTE 92					    								  
							      >> 118 POP_BLOCK						    								  
							      								    								  
							      9 >> 120 LOAD_CONST 4 ( True )				    								  
							      122 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		      NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		    NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		  NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES
--							      --							    --								  --
def countOccurrences ( s , K ) :			      Disassembly of <code object countOccurrences at 0x7fbac0e8bc9 Disassembly of <code object countOccurrences at 0x7f816a683a5 error : Traceback (most recent call last):   File
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    117 0 LOAD_FAST 1 ( K )					  "XLM/dis_script.py", line 60, in <module>	exec
    c1 = 0						      2 LOAD_FAST 0 ( s )					    2 LOAD_METHOD 0 ( count )					  (item)   File "main.py", line 38, in <module>	  Fi
    c2 = 0						      4 CALL_FUNCTION 1						    4 CALL_METHOD 0						  le "<dis>", line 2, in countOccurrences AttributeE
    C = 0						      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( s )					  rror: 'int' object has no attribute 'count'
    for i in range ( n ) :				      								    								  
	if s [ i ] == 'a' :				      3 8 LOAD_CONST 1 ( 0 )					    118 8 LOAD_FAST 0 ( s )					  
	    c1 += 1					      10 STORE_FAST 3 ( c1 )					    10 LOAD_METHOD 1 ( count )					  
	if s [ i ] == 'b' :				      								    12 CALL_METHOD 0						  
	    c2 += 1					      4 12 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 3 ( count )					  
	    C += c1					      14 STORE_FAST 4 ( c2 )					    								  
    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2	      								    119 16 LOAD_FAST 2 ( s )					  
							      5 16 LOAD_CONST 1 ( 0 )					    18 LOAD_METHOD 2 ( count )					  
							      18 STORE_FAST 5 ( C )					    20 CALL_METHOD 0						  
							      								    22 STORE_FAST 4 ( count )					  
							      6 20 SETUP_LOOP 64 ( to 86 )				    								  
							      22 LOAD_GLOBAL 1 ( range )				    120 24 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 2 ( n )					    26 LOAD_METHOD 3 ( count )					  
							      26 CALL_FUNCTION 1					    28 CALL_METHOD 0						  
							      28 GET_ITER						    30 LOAD_CONST 1 ( 1 )					  
							      >> 30 FOR_ITER 52 ( to 84 )				    32 BINARY_SUBTRACT						  
							      32 STORE_FAST 6 ( i )					    34 STORE_FAST 5 ( count )					  
							      								    								  
							      7 34 LOAD_FAST 0 ( s )					    121 36 LOAD_FAST 0 ( s )					  
							      36 LOAD_FAST 6 ( i )					    38 LOAD_METHOD 4 ( count )					  
							      38 BINARY_SUBSCR						    40 CALL_METHOD 0						  
							      40 LOAD_CONST 2 ( 'a' )					    42 STORE_FAST 6 ( count )					  
							      42 COMPARE_OP 2 ( == )					    								  
							      44 POP_JUMP_IF_FALSE 54					    122 44 LOAD_FAST 0 ( s )					  
							      								    46 LOAD_METHOD 5 ( count )					  
							      8 46 LOAD_FAST 3 ( c1 )					    48 CALL_METHOD 0						  
							      48 LOAD_CONST 3 ( 1 )					    50 STORE_FAST 7 ( count )					  
							      50 INPLACE_ADD						    								  
							      52 STORE_FAST 3 ( c1 )					    123 52 LOAD_FAST 0 ( s )					  
							      								    54 LOAD_METHOD 6 ( count )					  
							      9 >> 54 LOAD_FAST 0 ( s )					    56 CALL_METHOD 0						  
							      56 LOAD_FAST 6 ( i )					    58 STORE_FAST 8 ( count )					  
							      58 BINARY_SUBSCR						    								  
							      60 LOAD_CONST 4 ( 'b' )					    124 60 LOAD_FAST 4 ( count )				  
							      62 COMPARE_OP 2 ( == )					    62 LOAD_CONST 2 ( 0 )					  
							      64 POP_JUMP_IF_FALSE 30					    64 BINARY_SUBSCR						  
							      								    66 LOAD_METHOD 7 ( count )					  
							      10 66 LOAD_FAST 4 ( c2 )					    68 CALL_METHOD 0						  
							      68 LOAD_CONST 3 ( 1 )					    70 LOAD_CONST 3 ( 1 )					  
							      70 INPLACE_ADD						    72 COMPARE_OP 2 ( == )					  
							      72 STORE_FAST 4 ( c2 )					    74 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      11 74 LOAD_FAST 5 ( C )					    125 76 LOAD_FAST 0 ( s )					  
							      76 LOAD_FAST 3 ( c1 )					    78 LOAD_METHOD 8 ( count )					  
							      78 INPLACE_ADD						    80 CALL_METHOD 0						  
							      80 STORE_FAST 5 ( C )					    82 LOAD_CONST 4 ( 1 )					  
							      82 JUMP_ABSOLUTE 30					    84 COMPARE_OP 2 ( == )					  
							      >> 84 POP_BLOCK						    86 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      12 >> 86 LOAD_FAST 5 ( C )				    126 88 LOAD_FAST 0 ( s )					  
							      88 LOAD_FAST 1 ( K )					    90 LOAD_METHOD 9 ( count )					  
							      90 BINARY_MULTIPLY					    92 CALL_METHOD 0						  
							      92 LOAD_FAST 1 ( K )					    94 LOAD_CONST 5 ( 1 )					  
							      94 LOAD_FAST 1 ( K )					    96 COMPARE_OP 2 ( == )					  
							      96 LOAD_CONST 3 ( 1 )					    98 POP_JUMP_IF_FALSE 80					  
							      98 BINARY_SUBTRACT					    								  
							      100 BINARY_MULTIPLY					    127 100 LOAD_FAST 0 ( s )					  
							      102 LOAD_CONST 5 ( 2 )					    102 LOAD_METHOD 10 ( count )				  
							      104 BINARY_TRUE_DIVIDE					    104 CALL_METHOD 0						  
							      106 LOAD_FAST 3 ( c1 )					    106 LOAD_CONST 6 ( 1 )					  
							      108 BINARY_MULTIPLY					    108 INPLACE_ADD						  
							      110 LOAD_FAST 4 ( c2 )					    110 STORE_FAST 7 ( count )					  
							      112 BINARY_MULTIPLY					    								  
							      114 BINARY_ADD						    128 112 LOAD_FAST 0 ( s )					  
							      116 RETURN_VALUE NEW_LINE					    114 LOAD_METHOD 11 ( count )				  
							      								    116 CALL_METHOD 0						  
							      								    118 LOAD_CONST 7 ( 1 )					  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 8 ( count )					  
							      								    								  
							      								    129 124 LOAD_FAST 0 ( s )					  
							      								    126 LOAD_METHOD 12 ( count )				  
							      								    128 CALL_METHOD 0						  
							      								    130 STORE_FAST 9 ( count )					  
							      								    								  
							      								    130 132 LOAD_FAST 9 ( count )				  
							      								    134 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE		      FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE			    FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE			  FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE
--							      --							    --								  --
def binarySearch ( arr , left , right ) :		      Disassembly of <code object binarySearch at 0x7fbac<<unk>> de Disassembly of <code object binarySearch at 0x7f816a673a50, f script_not_found : None
    if ( left <= right ) :				      2 0 LOAD_FAST 1 ( left )					    113 0 LOAD_FAST 0 ( arr )					  
	mid = ( left + right ) // 2 ;			      2 LOAD_FAST 2 ( right )					    2 LOAD_CONST 1 ( None )					  
	if ( arr [ mid - 1 ] < arr [ mid ] and arr [ mid ] >  4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 9 ( is not )					  
	    return mid ;				      6 POP_JUMP_IF_FALSE 116					    6 POP_JUMP_IF_FALSE 12					  
	if ( arr [ mid ] < arr [ mid + 1 ] ) :		      								    								  
	    return binarySearch ( arr , mid + 1 , right ) ;   3 8 LOAD_FAST 1 ( left )					    114 8 LOAD_GLOBAL 0 ( binarySearch )			  
	else :						      10 LOAD_FAST 2 ( right )					    10 LOAD_FAST 0 ( arr )					  
	    return binarySearch ( arr , left , mid - 1 ) ;    12 BINARY_ADD						    12 LOAD_CONST 2 ( 1 )					  
    return - 1 ;					      14 LOAD_CONST 1 ( 2 )					    14 BINARY_SUBSCR						  
							      16 BINARY_FLOOR_DIVIDE					    16 CALL_FUNCTION 1						  
							      18 STORE_FAST 3 ( mid )					    18 RETURN_VALUE						  
							      								    								  
							      4 20 LOAD_FAST 0 ( arr )					    116 >> 20 LOAD_FAST 0 ( arr )				  
							      22 LOAD_FAST 3 ( mid )					    22 LOAD_CONST 3 ( 1 )					  
							      24 LOAD_CONST 2 ( 1 )					    24 BINARY_SUBSCR						  
							      26 BINARY_SUBTRACT					    26 LOAD_GLOBAL 1 ( binarySearch )				  
							      28 BINARY_SUBSCR						    28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 0 ( arr )					    30 LOAD_CONST 4 ( 2 )					  
							      32 LOAD_FAST 3 ( mid )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 CALL_FUNCTION 1						  
							      36 COMPARE_OP 0 ( < )					    36 LOAD_CONST 5 ( ( 'title' , 'title' ) )			  
							      38 POP_JUMP_IF_FALSE 64					    38 CALL_FUNCTION_KW 3					  
							      40 LOAD_FAST 0 ( arr )					    40 RETURN_VALUE						  
							      42 LOAD_FAST 3 ( mid )					    42 LOAD_CONST 0 ( None )					  
							      44 BINARY_SUBSCR						    44 RETURN_VALUE						  
							      46 LOAD_FAST 0 ( arr )					    NEW_LINE							  
							      48 LOAD_FAST 3 ( mid )					    								  
							      50 LOAD_CONST 2 ( 1 )					    								  
							      52 BINARY_ADD						    								  
							      54 BINARY_SUBSCR						    								  
							      56 COMPARE_OP 4 ( > )					    								  
							      58 POP_JUMP_IF_FALSE 64					    								  
							      								    								  
							      5 60 LOAD_FAST 3 ( mid )					    								  
							      62 RETURN_VALUE						    								  
							      								    								  
							      6 >> 64 LOAD_FAST 0 ( arr )				    								  
							      66 LOAD_FAST 3 ( mid )					    								  
							      68 BINARY_SUBSCR						    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 3 ( mid )					    								  
							      74 LOAD_CONST 2 ( 1 )					    								  
							      76 BINARY_ADD						    								  
							      78 BINARY_SUBSCR						    								  
							      80 COMPARE_OP 0 ( < )					    								  
							      82 POP_JUMP_IF_FALSE 100					    								  
							      								    								  
							      7 84 LOAD_GLOBAL 0 ( binarySearch )			    								  
							      86 LOAD_FAST 0 ( arr )					    								  
							      88 LOAD_FAST 3 ( mid )					    								  
							      90 LOAD_CONST 2 ( 1 )					    								  
							      92 BINARY_ADD						    								  
							      94 LOAD_FAST 2 ( right )					    								  
							      96 CALL_FUNCTION 3					    								  
							      98 RETURN_VALUE						    								  
							      								    								  
							      9 >> 100 LOAD_GLOBAL 0 ( binarySearch )			    								  
							      102 LOAD_FAST 0 ( arr )					    								  
							      104 LOAD_FAST 1 ( left )					    								  
							      106 LOAD_FAST 3 ( mid )					    								  
							      108 LOAD_CONST 2 ( 1 )					    								  
							      110 BINARY_SUBTRACT					    								  
							      112 CALL_FUNCTION 3					    								  
							      114 RETURN_VALUE						    								  
							      								    								  
							      10 >> 116 LOAD_CONST 3 ( - 1 )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
def countSeq ( n , diff ) :				      Disassembly of <code object countSeq at 0x7fbac0e8bc90, file  Disassembly of <code object countSeq at 0x7f816a673a50, file  script_not_found : None
    if ( abs ( diff ) > n ) :				      2 0 LOAD_GLOBAL 0 ( abs )					    26 0 LOAD_FAST 0 ( n )					  
	return 0					      2 LOAD_FAST 1 ( diff )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n == 1 and diff == 0 ) :			      4 CALL_FUNCTION 1						    4 COMPARE_OP 2 ( == )					  
	return 2					      6 LOAD_FAST 0 ( n )					    6 POP_JUMP_IF_FALSE 12					  
    if ( n == 1 and abs ( diff ) == 1 ) :		      8 COMPARE_OP 4 ( > )					    								  
	return 1					      10 POP_JUMP_IF_FALSE 16					    27 8 LOAD_FAST 0 ( n )					  
    res = ( countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n  								    10 LOAD_CONST 2 ( 0 )					  
    return res						      3 12 LOAD_CONST 1 ( 0 )					    12 COMPARE_OP 2 ( == )					  
							      14 RETURN_VALUE						    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      4 >> 16 LOAD_FAST 0 ( n )					    28 >> 16 LOAD_CONST 3 ( 1 )					  
							      18 LOAD_CONST 2 ( 1 )					    18 STORE_FAST 1 ( diff )					  
							      20 COMPARE_OP 2 ( == )					    								  
							      22 POP_JUMP_IF_FALSE 36					    29 20 LOAD_FAST 0 ( n )					  
							      24 LOAD_FAST 1 ( diff )					    22 LOAD_CONST 4 ( - 1 )					  
							      26 LOAD_CONST 1 ( 0 )					    24 COMPARE_OP 2 ( == )					  
							      28 COMPARE_OP 2 ( == )					    26 POP_JUMP_IF_FALSE 28					  
							      30 POP_JUMP_IF_FALSE 36					    								  
							      								    30 28 LOAD_CONST 3 ( 1 )					  
							      5 32 LOAD_CONST 3 ( 2 )					    30 STORE_FAST 1 ( diff )					  
							      34 RETURN_VALUE						    								  
							      								    31 32 LOAD_FAST 0 ( n )					  
							      6 >> 36 LOAD_FAST 0 ( n )					    34 LOAD_CONST 5 ( - 1 )					  
							      38 LOAD_CONST 2 ( 1 )					    36 COMPARE_OP 2 ( == )					  
							      40 COMPARE_OP 2 ( == )					    38 POP_JUMP_IF_FALSE 42					  
							      42 POP_JUMP_IF_FALSE 60					    								  
							      44 LOAD_GLOBAL 0 ( abs )					    32 40 LOAD_CONST 3 ( 1 )					  
							      46 LOAD_FAST 1 ( diff )					    42 STORE_FAST 1 ( diff )					  
							      48 CALL_FUNCTION 1					    								  
							      50 LOAD_CONST 2 ( 1 )					    33 44 LOAD_FAST 0 ( n )					  
							      52 COMPARE_OP 2 ( == )					    46 LOAD_CONST 6 ( - 1 )					  
							      54 POP_JUMP_IF_FALSE 60					    48 COMPARE_OP 2 ( == )					  
							      								    50 POP_JUMP_IF_FALSE 52					  
							      7 56 LOAD_CONST 2 ( 1 )					    								  
							      58 RETURN_VALUE						    34 52 LOAD_CONST 3 ( 1 )					  
							      								    54 STORE_FAST 1 ( diff )					  
							      8 >> 60 LOAD_GLOBAL 1 ( countSeq )			    								  
							      62 LOAD_FAST 0 ( n )					    35 56 LOAD_FAST 0 ( n )					  
							      64 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 7 ( - 1 )					  
							      66 BINARY_SUBTRACT					    60 COMPARE_OP 2 ( == )					  
							      68 LOAD_FAST 1 ( diff )					    62 POP_JUMP_IF_FALSE 52					  
							      70 LOAD_CONST 2 ( 1 )					    								  
							      72 BINARY_ADD						    36 64 LOAD_CONST 3 ( 1 )					  
							      74 CALL_FUNCTION 2					    66 STORE_FAST 1 ( diff )					  
							      76 LOAD_CONST 3 ( 2 )					    								  
							      78 LOAD_GLOBAL 1 ( countSeq )				    37 >> 68 LOAD_FAST 0 ( n )					  
							      80 LOAD_FAST 0 ( n )					    70 LOAD_CONST 8 ( - 1 )					  
							      82 LOAD_CONST 2 ( 1 )					    72 COMPARE_OP 2 ( == )					  
							      84 BINARY_SUBTRACT					    74 POP_JUMP_IF_FALSE 80					  
							      86 LOAD_FAST 1 ( diff )					    								  
							      88 CALL_FUNCTION 2					    38 76 LOAD_CONST 3 ( 1 )					  
							      90 BINARY_MULTIPLY					    78 STORE_FAST 1 ( diff )					  
							      92 BINARY_ADD						    								  
							      94 LOAD_GLOBAL 1 ( countSeq )				    39 80 LOAD_FAST 0 ( n )					  
							      96 LOAD_FAST 0 ( n )					    82 LOAD_CONST 9 ( - 1 )					  
							      98 LOAD_CONST 2 ( 1 )					    84 COMPARE_OP 2 ( == )					  
							      100 BINARY_SUBTRACT					    86 POP_JUMP_IF_FALSE 80					  
							      102 LOAD_FAST 1 ( diff )					    								  
							      104 LOAD_CONST 2 ( 1 )					    40 88 LOAD_CONST 3 ( 1 )					  
							      106 BINARY_SUBTRACT					    90 STORE_FAST 1 ( diff )					  
							      108 CALL_FUNCTION 2					    								  
							      110 BINARY_ADD						    41 >> 92 LOAD_FAST 0 ( n )					  
							      112 STORE_FAST 2 ( res )					    94 LOAD_CONST 10 ( - 1 )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      9 114 LOAD_FAST 2 ( res )					    98 POP_JUMP_IF_FALSE 80					  
							      116 RETURN_VALUE NEW_LINE					    								  
							      								    42 100 LOAD_FAST 0 ( n )					  
							      								    102 LOAD_CONST 11 ( - 1 )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    43 108 LOAD_FAST 0 ( n )					  
							      								    110 LOAD_CONST 12 ( - 1 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    44 116 LOAD_FAST 0 ( n )					  
							      								    118 LOAD_CONST 13 ( - 1 )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    45 124 LOAD_FAST 0 ( n )					  
							      								    126 LOAD_CONST 6 ( - 1 )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    46 132 LOAD_FAST 0 ( n )					  
							      								    134 LOAD_CONST 6 ( - 1 )					  
							      								    136 COMPARE_OP 2 ( ==					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K_1			      COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				    COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				  COUNT_PAIRS_DIFFERENCE_EQUAL_K_1
--							      --							    --								  --
def countPairsWithDiffK ( arr , n , k ) :		      Disassembly of <code object countPairsWithDiffK at 0x7fbac0e8 Disassembly of <code object countPairsWithDiffK at 0x7f816a67 error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    164 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    arr.sort ( )					      2 STORE_FAST 3 ( count )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 41, in <module>	  Fi
    l = 0						      								    4 CALL_METHOD 0						  le "<dis>", line 2, in countPairsWithDiffK TypeErr
    r = 0						      3 4 LOAD_FAST 0 ( arr )					    6 STORE_FAST 1 ( n )					  or: 'NoneType' object is not subscriptable
    while r < n :					      6 LOAD_METHOD 0 ( sort )					    								  
	if arr [ r ] - arr [ l ] == k :			      8 CALL_METHOD 0						    165 8 LOAD_FAST 1 ( n )					  
	    count += 1					      10 POP_TOP						    10 LOAD_CONST 1 ( 0 )					  
	    l += 1					      								    12 BINARY_SUBSCR						  
	    r += 1					      4 12 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 2 ( n )					  
	elif arr [ r ] - arr [ l ] > k :		      14 STORE_FAST 4 ( l )					    								  
	    l += 1					      								    166 16 LOAD_FAST 2 ( n )					  
	else :						      5 16 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 1 ( 0 )					  
	    r += 1					      18 STORE_FAST 5 ( r )					    20 BINARY_SUBSCR						  
    return count					      								    22 STORE_FAST 3 ( n )					  
							      6 20 SETUP_LOOP 96 ( to 118 )				    								  
							      >> 22 LOAD_FAST 5 ( r )					    167 24 LOAD_FAST 3 ( n )					  
							      24 LOAD_FAST 1 ( n )					    26 LOAD_CONST 2 ( 1 )					  
							      26 COMPARE_OP 0 ( < )					    28 BINARY_SUBSCR						  
							      28 POP_JUMP_IF_FALSE 116					    30 LOAD_CONST 3 ( 1 )					  
							      								    32 BINARY_SUBSCR						  
							      7 30 LOAD_FAST 0 ( arr )					    34 STORE_FAST 4 ( n )					  
							      32 LOAD_FAST 5 ( r )					    								  
							      34 BINARY_SUBSCR						    168 36 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 0 ( arr )					    38 LOAD_CONST 4 ( 1 )					  
							      38 LOAD_FAST 4 ( l )					    40 BINARY_SUBSCR						  
							      40 BINARY_SUBSCR						    42 STORE_FAST 5 ( n )					  
							      42 BINARY_SUBTRACT					    								  
							      44 LOAD_FAST 2 ( k )					    169 44 LOAD_FAST 5 ( n )					  
							      46 COMPARE_OP 2 ( == )					    46 LOAD_CONST 2 ( 1 )					  
							      48 POP_JUMP_IF_FALSE 76					    48 BINARY_SUBSCR						  
							      								    50 LOAD_CONST 5 ( 1 )					  
							      8 50 LOAD_FAST 3 ( count )				    52 BINARY_SUBSCR						  
							      52 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 6 ( 2 )					  
							      54 INPLACE_ADD						    56 BINARY_SUBSCR						  
							      56 STORE_FAST 3 ( count )					    58 LOAD_CONST 7 ( 3 )					  
							      								    60 COMPARE_OP 4 ( > )					  
							      9 58 LOAD_FAST 4 ( l )					    62 POP_JUMP_IF_FALSE 66					  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 INPLACE_ADD						    170 64 LOAD_FAST 5 ( n )					  
							      64 STORE_FAST 4 ( l )					    66 LOAD_CONST 2 ( 1 )					  
							      								    68 BINARY_SUBSCR						  
							      10 66 LOAD_FAST 5 ( r )					    70 LOAD_CONST 8 ( 2 )					  
							      68 LOAD_CONST 2 ( 1 )					    72 COMPARE_OP 4 ( > )					  
							      70 INPLACE_ADD						    74 POP_JUMP_IF_FALSE 80					  
							      72 STORE_FAST 5 ( r )					    								  
							      74 JUMP_ABSOLUTE 22					    171 76 LOAD_FAST 5 ( n )					  
							      								    78 LOAD_CONST 9 ( 1 )					  
							      11 >> 76 LOAD_FAST 0 ( arr )				    80 BINARY_SUBSCR						  
							      78 LOAD_FAST 5 ( r )					    82 LOAD_CONST 10 ( 2 )					  
							      80 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      82 LOAD_FAST 0 ( arr )					    86 STORE_FAST 6 ( n )					  
							      84 LOAD_FAST 4 ( l )					    								  
							      86 BINARY_SUBSCR						    172 >> 88 LOAD_FAST 5 ( n )					  
							      88 BINARY_SUBTRACT					    90 LOAD_CONST 2 ( 1 )					  
							      90 LOAD_FAST 2 ( k )					    92 BINARY_SUBSCR						  
							      92 COMPARE_OP 4 ( > )					    94 LOAD_CONST 11 ( 2 )					  
							      94 POP_JUMP_IF_FALSE 106					    96 BINARY_SUBSCR						  
							      								    98 STORE_FAST 7 ( n )					  
							      12 96 LOAD_FAST 4 ( l )					    								  
							      98 LOAD_CONST 2 ( 1 )					    173 100 LOAD_FAST 7 ( n )					  
							      100 INPLACE_ADD						    102 LOAD_CONST 2 ( 1 )					  
							      102 STORE_FAST 4 ( l )					    104 BINARY_SUBSCR						  
							      104 JUMP_ABSOLUTE 22					    106 STORE_FAST 8 ( n )					  
							      								    								  
							      14 >> 106 LOAD_FAST 5 ( r )				    174 108 LOAD_FAST 0 ( arr )					  
							      108 LOAD_CONST 2 ( 1 )					    110 LOAD_CONST 2 ( 1 )					  
							      110 INPLACE_ADD						    112 BINARY_SUBSCR						  
							      112 STORE_FAST 5 ( r )					    114 STORE_FAST 9 ( n )					  
							      114 JUMP_ABSOLUTE 22					    								  
							      >> 116 POP_BLOCK						    175 116 LOAD_FAST 0 ( arr )					  
							      								    118 LOAD_CONST 2 ( 1 )					  
							      15 >> 118 LOAD_FAST 3 ( count )				    120 BINARY_SUBSCR						  
							      120 RETURN_VALUE NEW_LINE					    122 LOAD_CONST 3 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 STORE_FAST 10 ( n )					  
							      								    								  
							      								    176 128 LOAD_FAST 0 ( arr )					  
							      								    130 LOAD_CONST 2 ( 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_FAST 8 ( n )					  
							      								    136 LOAD_CONST 2 ( 1 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_FAST 9 ( n )					  
							      								    142 LOAD_CONST 3 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_FAST 10 ( n )					  
							      								    148 LOAD_CONST 2 ( 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_FAST 10 ( n )					  
							      								    154 LOAD_CONST 3 ( 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_FAST 10 ( n )					  
							      								    160 LOAD_CONST 2 ( 1 )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEGREGATE_EVEN_ODD_NUMBERS_SET_3			      SEGREGATE_EVEN_ODD_NUMBERS_SET_3				    SEGREGATE_EVEN_ODD_NUMBERS_SET_3				  SEGREGATE_EVEN_ODD_NUMBERS_SET_3
--							      --							    --								  --
def arrayEvenAndOdd ( arr , n ) :			      Disassembly of <code object arrayEvenAndOdd at 0x7fbac0e8bc90 Disassembly of <code object arrayEvenAndOdd at 0x7f816a673a50 error : Traceback (most recent call last):   File
    i = - 1						      2 0 LOAD_CONST 1 ( - 1 )					    17 0 LOAD_CONST 1 ( - 1 )					  "XLM/dis_script.py", line 59, in <module>	for
    j = 0						      2 STORE_FAST 2 ( i )					    2 STORE_FAST 1 ( n )					  item in run_dis_script():   File "XLM/dis_script.p
    while ( j != n ) :					      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	if ( arr [ j ] % 2 == 0 ) :			      3 4 LOAD_CONST 2 ( 0 )					    18 4 LOAD_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	    i = i + 1					      6 STORE_FAST 3 ( j )					    6 LOAD_CONST 2 ( 0 )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]     								    8 COMPARE_OP 4 ( > )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	j = j + 1					      4 8 SETUP_LOOP 70 ( to 80 )				    10 POP_JUMP_IF_FALSE 32					  n parse     code.append(arg) ValueError: byte must
    for i in arr :					      >> 10 LOAD_FAST 3 ( j )					    								   be in range(0, 256)
	print ( str ( i ) + " " , end = '' )		      12 LOAD_FAST 1 ( n )					    19 12 LOAD_FAST 1 ( n )					  
							      14 COMPARE_OP 3 ( != )					    14 LOAD_CONST 3 ( 1 )					  
							      16 POP_JUMP_IF_FALSE 78					    16 INPLACE_ADD						  
							      								    18 STORE_FAST 1 ( n )					  
							      5 18 LOAD_FAST 0 ( arr )					    								  
							      20 LOAD_FAST 3 ( j )					    20 20 LOAD_FAST 1 ( n )					  
							      22 BINARY_SUBSCR						    22 LOAD_CONST 4 ( 2 )					  
							      24 LOAD_CONST 3 ( 2 )					    24 INPLACE_ADD						  
							      26 BINARY_MODULO						    26 STORE_FAST 1 ( n )					  
							      28 LOAD_CONST 2 ( 0 )					    								  
							      30 COMPARE_OP 2 ( == )					    21 >> 28 LOAD_FAST 1 ( n )					  
							      32 POP_JUMP_IF_FALSE 68					    30 LOAD_CONST 5 ( 1 )					  
							      								    32 INPLACE_ADD						  
							      6 34 LOAD_FAST 2 ( i )					    34 STORE_FAST 1 ( n )					  
							      36 LOAD_CONST 4 ( 1 )					    36 JUMP_FORWARD 2 ( to 38 )					  
							      38 BINARY_ADD						    								  
							      40 STORE_FAST 2 ( i )					    22 >> 38 LOAD_FAST 1 ( n )					  
							      								    40 LOAD_CONST 6 ( 2 )					  
							      7 42 LOAD_FAST 0 ( arr )					    42 INPLACE_ADD						  
							      44 LOAD_FAST 3 ( j )					    44 STORE_FAST 1 ( n )					  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 0 ( arr )					    23 46 LOAD_FAST 1 ( n )					  
							      50 LOAD_FAST 2 ( i )					    48 LOAD_CONST 7 ( 3 )					  
							      52 BINARY_SUBSCR						    50 INPLACE_ADD						  
							      54 ROT_TWO						    52 STORE_FAST 1 ( n )					  
							      56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 2 ( i )					    24 54 LOAD_FAST 1 ( n )					  
							      60 STORE_SUBSCR						    56 LOAD_CONST 8 ( 2 )					  
							      62 LOAD_FAST 0 ( arr )					    58 INPLACE_ADD						  
							      64 LOAD_FAST 3 ( j )					    60 STORE_FAST 1 ( n )					  
							      66 STORE_SUBSCR						    								  
							      								    25 62 LOAD_FAST 1 ( n )					  
							      8 >> 68 LOAD_FAST 3 ( j )					    64 LOAD_CONST 9 ( 2 )					  
							      70 LOAD_CONST 4 ( 1 )					    66 INPLACE_ADD						  
							      72 BINARY_ADD						    68 STORE_FAST 1 ( n )					  
							      74 STORE_FAST 3 ( j )					    								  
							      76 JUMP_ABSOLUTE 10					    26 70 LOAD_FAST 1 ( n )					  
							      >> 78 POP_BLOCK						    72 LOAD_CONST 10 ( 3 )					  
							      								    74 INPLACE_ADD						  
							      9 >> 80 SETUP_LOOP 32 ( to 114 )				    76 STORE_FAST 1 ( n )					  
							      82 LOAD_FAST 0 ( arr )					    78 JUMP_FORWARD 2 ( to 38 )					  
							      84 GET_ITER						    								  
							      >> 86 FOR_ITER 24 ( to 112 )				    27 >> 80 LOAD_FAST 1 ( n )					  
							      88 STORE_FAST 2 ( i )					    82 LOAD_CONST 10 ( 3 )					  
							      								    84 INPLACE_ADD						  
							      10 90 LOAD_GLOBAL 0 ( print )				    86 STORE_FAST 1 ( n )					  
							      92 LOAD_GLOBAL 1 ( str )					    								  
							      94 LOAD_FAST 2 ( i )					    28 88 LOAD_FAST 1 ( n )					  
							      96 CALL_FUNCTION 1					    90 LOAD_CONST 11 ( 2 )					  
							      98 LOAD_CONST 5 ( ' ' )					    92 INPLACE_ADD						  
							      100 BINARY_ADD						    94 STORE_FAST 1 ( n )					  
							      102 LOAD_CONST 6 ( '' )					    								  
							      104 LOAD_CONST 7 ( ( 'end' , ) )				    29 >> 96 LOAD_FAST 1 ( n )					  
							      106 CALL_FUNCTION_KW 2					    98 LOAD_FAST 0 ( arr )					  
							      108 POP_TOP						    100 LOAD_FAST 0 ( arr )					  
							      110 JUMP_ABSOLUTE 86					    102 LOAD_FAST 0 ( arr )					  
							      >> 112 POP_BLOCK						    104 LOAD_FAST 0 ( arr )					  
							      >> 114 LOAD_CONST 0 ( None )				    106 LOAD_FAST 0 ( arr )					  
							      116 RETURN_VALUE NEW_LINE					    108 LOAD_FAST 0 ( arr )					  
							      								    110 LOAD_FAST 0 ( arr )					  
							      								    112 LOAD_FAST 0 ( arr )					  
							      								    114 LOAD_FAST 0 ( arr )					  
							      								    116 LOAD_FAST 0 ( arr )					  
							      								    118 LOAD_FAST 0 ( arr )					  
							      								    120 LOAD_FAST 0 ( arr )					  
							      								    122 LOAD_FAST 0 ( arr )					  
							      								    124 LOAD_FAST 0 ( arr )					  
							      								    126 LOAD_FAST 0 ( arr )					  
							      								    128 LOAD_FAST 1 ( n )					  
							      								    130 STORE_SUBSCR						  
							      								    132 LOAD_CONST 0 ( None )					  
							      								    134 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_UNIQUE_ROWS					      PRINT_UNIQUE_ROWS						    PRINT_UNIQUE_ROWS						  PRINT_UNIQUE_ROWS
--							      --							    --								  --
def printArray ( matrix ) :				      Disassembly of <code object printArray at 0x7fbac0e89d20, fil Disassembly of <code object printArray at 0x7f816a6e4ae0, fil script_not_found : None
    rowCount = len ( matrix )				      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( rowCount )				  
    if rowCount == 0 :					      2 LOAD_FAST 0 ( matrix )					    2 LOAD_CONST 1 ( 0 )					  
	return						      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    columnCount = len ( matrix [ 0 ] )			      6 STORE_FAST 1 ( rowCount )				    6 LOAD_CONST 2 ( 0 )					  
    if columnCount == 0 :				      								    8 BINARY_SUBSCR						  
	return						      3 8 LOAD_FAST 1 ( rowCount )				    10 LOAD_CONST 3 ( '▁' )					  
    row_output_format = " ".join ( [ "%s" ] * columnCount )   10 LOAD_CONST 1 ( 0 )					    12 LOAD_METHOD 0 ( join )					  
    printed = { }					      12 COMPARE_OP 2 ( == )					    14 LOAD_FAST 1 ( rowCount )					  
    for row in matrix :					      14 POP_JUMP_IF_FALSE 20					    16 CALL_METHOD 1						  
	routput = row_output_format % tuple ( row )	      								    18 LOAD_CONST 4 ( '' )					  
	if routput not in printed :			      4 16 LOAD_CONST 0 ( None )				    20 COMPARE_OP 2 ( == )					  
	    printed [ routput ] = True			      18 RETURN_VALUE						    22 POP_JUMP_IF_FALSE 28					  
	    print ( routput )				      								    								  
							      5 >> 20 LOAD_GLOBAL 0 ( len )				    27 24 LOAD_FAST 1 ( rowCount )				  
							      22 LOAD_FAST 0 ( matrix )					    26 LOAD_CONST 5 ( '▁' )					  
							      24 LOAD_CONST 1 ( 0 )					    28 COMPARE_OP 2 ( == )					  
							      26 BINARY_SUBSCR						    30 POP_JUMP_IF_FALSE 28					  
							      28 CALL_FUNCTION 1					    								  
							      30 STORE_FAST 2 ( columnCount )				    28 32 LOAD_FAST 1 ( rowCount )				  
							      								    34 LOAD_CONST 6 ( '▁' )					  
							      6 32 LOAD_FAST 2 ( columnCount )				    36 COMPARE_OP 2 ( == )					  
							      34 LOAD_CONST 1 ( 0 )					    38 POP_JUMP_IF_FALSE 42					  
							      36 COMPARE_OP 2 ( == )					    40 LOAD_FAST 1 ( rowCount )					  
							      38 POP_JUMP_IF_FALSE 44					    42 LOAD_CONST 7 ( '▁' )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      7 40 LOAD_CONST 0 ( None )				    46 POP_JUMP_IF_FALSE 48					  
							      42 RETURN_VALUE						    								  
							      								    29 48 LOAD_FAST 1 ( rowCount )				  
							      8 >> 44 LOAD_CONST 2 ( ' ' )				    50 LOAD_CONST 8 ( '▁' )					  
							      46 LOAD_METHOD 1 ( join )					    52 COMPARE_OP 2 ( == )					  
							      48 LOAD_CONST 3 ( '%s' )					    54 POP_JUMP_IF_FALSE 48					  
							      50 BUILD_LIST 1						    								  
							      52 LOAD_FAST 2 ( columnCount )				    30 56 LOAD_FAST 1 ( rowCount )				  
							      54 BINARY_MULTIPLY					    58 LOAD_CONST 9 ( '▁' )					  
							      56 CALL_METHOD 1						    60 LOAD_METHOD 0 ( join )					  
							      58 STORE_FAST 3 ( row_output_format )			    62 LOAD_FAST 1 ( rowCount )					  
							      								    64 LOAD_CONST 10 ( '▁' )					  
							      9 60 BUILD_MAP 0						    66 CALL_METHOD 2						  
							      62 STORE_FAST 4 ( printed )				    68 LOAD_METHOD 0 ( join )					  
							      								    70 LOAD_FAST 1 ( rowCount )					  
							      10 64 SETUP_LOOP 48 ( to 114 )				    72 LOAD_CONST 11 ( '▁' )					  
							      66 LOAD_FAST 0 ( matrix )					    74 CALL_METHOD 2						  
							      68 GET_ITER						    76 LOAD_METHOD 0 ( join )					  
							      >> 70 FOR_ITER 40 ( to 112 )				    78 LOAD_FAST 1 ( rowCount )					  
							      72 STORE_FAST 5 ( row )					    80 LOAD_CONST 12 ( '▁' )					  
							      								    82 BINARY_ADD						  
							      11 74 LOAD_FAST 3 ( row_output_format )			    84 CALL_METHOD 1						  
							      76 LOAD_GLOBAL 2 ( tuple )				    86 LOAD_CONST 13 ( '▁' )					  
							      78 LOAD_FAST 5 ( row )					    88 COMPARE_OP 2 ( == )					  
							      80 CALL_FUNCTION 1					    90 POP_JUMP_IF_FALSE 92					  
							      82 BINARY_MODULO						    								  
							      84 STORE_FAST 6 ( routput )				    31 92 LOAD_FAST 1 ( rowCount )				  
							      								    94 LOAD_CONST 12 ( '▁' )					  
							      12 86 LOAD_FAST 6 ( routput )				    96 LOAD_METHOD 0 ( join )					  
							      88 LOAD_FAST 4 ( printed )				    98 LOAD_FAST 1 ( rowCount )					  
							      90 COMPARE_OP 7 ( not in )				    100 LOAD_CONST 12 ( '▁' )					  
							      92 POP_JUMP_IF_FALSE 70					    102 CALL_METHOD 2						  
							      								    104 LOAD_METHOD 0 ( join )					  
							      13 94 LOAD_CONST 4 ( True )				    106 LOAD_FAST 1 ( rowCount )				  
							      96 LOAD_FAST 4 ( printed )				    108 LOAD_CONST 13 ( '▁' )					  
							      98 LOAD_FAST 6 ( routput )				    110 CALL_METHOD 2						  
							      100 STORE_SUBSCR						    112 CALL_METHOD 1						  
							      								    114 RETURN_VALUE						  
							      14 102 LOAD_GLOBAL 3 ( print )				    								  
							      104 LOAD_FAST 6 ( routput )				    32 >> 116 LOAD_FAST 1 ( rowCount )				  
							      106 CALL_FUNCTION 1					    118 LOAD_CONST 14 ( '▁' )					  
							      108 POP_TOP						    120 LOAD_METHOD 0 ( join )					  
							      110 JUMP_ABSOLUTE 70					    122 LOAD_FAST 1 ( rowCount )				  
							      >> 112 POP_BLOCK						    124 LOAD_CONST 15 ( '' )					  
							      >> 114 LOAD_CONST 0 ( None )				    126 CALL_METHOD 2						  
							      116 RETURN_VALUE NEW_LINE					    128 CALL_METHOD 1						  
							      								    130 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
0_1_KNAPSACK_PROBLEM_DP_10				      0_1_KNAPSACK_PROBLEM_DP_10				    0_1_KNAPSACK_PROBLEM_DP_10					  0_1_KNAPSACK_PROBLEM_DP_10
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      Disassembly of <code object knapSack at 0x7fbac<<unk>> d540,  Disassembly of <code object knapSack at 0x7f816a673a50, file  script_not_found : None
    if n == 0 or W == 0 :				      2 0 LOAD_FAST 3 ( n )					    26 0 LOAD_FAST 0 ( W )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( wt [ n - 1 ] > W ) :				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
	return knapSack ( W , wt , val , n - 1 )	      6 POP_JUMP_IF_TRUE 16					    6 STORE_FAST 1 ( wt )					  
    else :						      8 LOAD_FAST 0 ( W )					    								  
	return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  10 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 1 ( wt )					  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_METHOD 0 ( append )					  
							      14 POP_JUMP_IF_FALSE 20					    12 LOAD_FAST 1 ( wt )					  
							      								    14 LOAD_METHOD 1 ( ravel )					  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    16 CALL_METHOD 0						  
							      18 RETURN_VALUE						    18 CALL_METHOD 1						  
							      								    20 POP_TOP							  
							      4 >> 20 LOAD_FAST 1 ( wt )				    								  
							      22 LOAD_FAST 3 ( n )					    28 22 LOAD_FAST 1 ( wt )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_METHOD 0 ( append )					  
							      26 BINARY_SUBTRACT					    26 LOAD_FAST 1 ( wt )					  
							      28 BINARY_SUBSCR						    28 LOAD_METHOD 2 ( ravel )					  
							      30 LOAD_FAST 0 ( W )					    30 CALL_METHOD 0						  
							      32 COMPARE_OP 4 ( > )					    32 CALL_METHOD 1						  
							      34 POP_JUMP_IF_FALSE 54					    34 POP_TOP							  
							      								    								  
							      5 36 LOAD_GLOBAL 0 ( knapSack )				    29 36 LOAD_FAST 1 ( wt )					  
							      38 LOAD_FAST 0 ( W )					    38 LOAD_METHOD 0 ( append )					  
							      40 LOAD_FAST 1 ( wt )					    40 LOAD_FAST 1 ( wt )					  
							      42 LOAD_FAST 2 ( val )					    42 LOAD_METHOD 3 ( ravel )					  
							      44 LOAD_FAST 3 ( n )					    44 CALL_METHOD 0						  
							      46 LOAD_CONST 2 ( 1 )					    46 CALL_METHOD 1						  
							      48 BINARY_SUBTRACT					    48 POP_TOP							  
							      50 CALL_FUNCTION 4					    50 LOAD_CONST 0 ( None )					  
							      52 RETURN_VALUE						    52 RETURN_VALUE						  
							      								    NEW_LINE							  
							      7 >> 54 LOAD_GLOBAL 1 ( max )				    								  
							      56 LOAD_FAST 2 ( val )					    								  
							      58 LOAD_FAST 3 ( n )					    								  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 BINARY_SUBTRACT					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_GLOBAL 0 ( knapSack )				    								  
							      68 LOAD_FAST 0 ( W )					    								  
							      70 LOAD_FAST 1 ( wt )					    								  
							      72 LOAD_FAST 3 ( n )					    								  
							      74 LOAD_CONST 2 ( 1 )					    								  
							      76 BINARY_SUBTRACT					    								  
							      78 BINARY_SUBSCR						    								  
							      80 BINARY_SUBTRACT					    								  
							      82 LOAD_FAST 1 ( wt )					    								  
							      84 LOAD_FAST 2 ( val )					    								  
							      86 LOAD_FAST 3 ( n )					    								  
							      88 LOAD_CONST 2 ( 1 )					    								  
							      90 BINARY_SUBTRACT					    								  
							      92 CALL_FUNCTION 4					    								  
							      94 BINARY_ADD						    								  
							      96 LOAD_GLOBAL 0 ( knapSack )				    								  
							      98 LOAD_FAST 0 ( W )					    								  
							      100 LOAD_FAST 1 ( wt )					    								  
							      102 LOAD_FAST 2 ( val )					    								  
							      104 LOAD_FAST 3 ( n )					    								  
							      106 LOAD_CONST 2 ( 1 )					    								  
							      108 BINARY_SUBTRACT					    								  
							      110 CALL_FUNCTION 4					    								  
							      112 CALL_FUNCTION 2					    								  
							      114 RETURN_VALUE						    								  
							      116 LOAD_CONST 0 ( None )					    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING
--							      --							    --								  --
def maxRepeating ( str ) :				      Disassembly of <code object maxRepeating at 0x7fbac0e8bc90, f Disassembly of <code object maxRepeating at 0x7f816a6e4b70, f error : Traceback (most recent call last):   File
    l = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( l )					  "XLM/dis_script.py", line 60, in <module>	exec
    count = 0						      2 LOAD_FAST 0 ( str )					    2 LOAD_METHOD 0 ( split )					  (item)   File "main.py", line 40, in <module>	  Fi
    res = str [ 0 ]					      4 CALL_FUNCTION 1						    4 LOAD_CONST 1 ( '\n' )					  le "<dis>", line 2, in maxRepeating UnboundLocalEr
    for i in range ( l ) :				      6 STORE_FAST 1 ( l )					    6 CALL_METHOD 1						  ror: local variable 'l' referenced before assignme
	cur_count = 1					      								    8 STORE_FAST 2 ( l )					  nt
	for j in range ( i + 1 , l ) :			      3 8 LOAD_CONST 1 ( 0 )					    								  
	    if ( str [ i ] != str [ j ] ) :		      10 STORE_FAST 2 ( count )					    27 10 LOAD_FAST 2 ( l )					  
		break					      								    12 LOAD_METHOD 1 ( split )					  
	    cur_count += 1				      4 12 LOAD_FAST 0 ( str )					    14 LOAD_CONST 2 ( '\n' )					  
	if cur_count > count :				      14 LOAD_CONST 1 ( 0 )					    16 CALL_METHOD 1						  
	    count = cur_count				      16 BINARY_SUBSCR						    18 STORE_FAST 3 ( l )					  
	    res = str [ i ]				      18 STORE_FAST 3 ( res )					    								  
    return res						      								    28 20 LOAD_FAST 3 ( l )					  
							      5 20 SETUP_LOOP 90 ( to 112 )				    22 LOAD_METHOD 2 ( split )					  
							      22 LOAD_GLOBAL 1 ( range )				    24 LOAD_CONST 3 ( '\n' )					  
							      24 LOAD_FAST 1 ( l )					    26 CALL_METHOD 1						  
							      26 CALL_FUNCTION 1					    28 STORE_FAST 4 ( l )					  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 78 ( to 110 )				    29 30 LOAD_FAST 4 ( l )					  
							      32 STORE_FAST 4 ( i )					    32 LOAD_METHOD 3 ( split )					  
							      								    34 LOAD_CONST 4 ( '\n' )					  
							      6 34 LOAD_CONST 2 ( 1 )					    36 CALL_METHOD 1						  
							      36 STORE_FAST 5 ( cur_count )				    38 STORE_FAST 5 ( l )					  
							      								    								  
							      7 38 SETUP_LOOP 48 ( to 88 )				    30 40 LOAD_FAST 5 ( l )					  
							      40 LOAD_GLOBAL 1 ( range )				    42 LOAD_METHOD 4 ( append )					  
							      42 LOAD_FAST 4 ( i )					    44 LOAD_FAST 4 ( l )					  
							      44 LOAD_CONST 2 ( 1 )					    46 LOAD_METHOD 5 ( split )					  
							      46 BINARY_ADD						    48 LOAD_CONST 5 ( '\n' )					  
							      48 LOAD_FAST 1 ( l )					    50 CALL_METHOD 1						  
							      50 CALL_FUNCTION 2					    52 CALL_METHOD 1						  
							      52 GET_ITER						    54 POP_TOP							  
							      >> 54 FOR_ITER 30 ( to 86 )				    								  
							      56 STORE_FAST 6 ( j )					    31 56 LOAD_FAST 5 ( l )					  
							      								    58 LOAD_METHOD 6 ( split )					  
							      8 58 LOAD_FAST 0 ( str )					    60 LOAD_CONST 6 ( '\n' )					  
							      60 LOAD_FAST 4 ( i )					    62 CALL_METHOD 1						  
							      62 BINARY_SUBSCR						    64 LOAD_CONST 7 ( 1 )					  
							      64 LOAD_FAST 0 ( str )					    66 BINARY_ADD						  
							      66 LOAD_FAST 6 ( j )					    68 LOAD_CONST 8 ( '\n' )					  
							      68 BINARY_SUBSCR						    70 CALL_METHOD 2						  
							      70 COMPARE_OP 3 ( != )					    72 POP_TOP							  
							      72 POP_JUMP_IF_FALSE 76					    74 LOAD_CONST 9 ( None )					  
							      								    76 RETURN_VALUE						  
							      9 74 BREAK_LOOP						    NEW_LINE							  
							      								    								  
							      10 >> 76 LOAD_FAST 5 ( cur_count )			    								  
							      78 LOAD_CONST 2 ( 1 )					    								  
							      80 INPLACE_ADD						    								  
							      82 STORE_FAST 5 ( cur_count )				    								  
							      84 JUMP_ABSOLUTE 54					    								  
							      >> 86 POP_BLOCK						    								  
							      								    								  
							      11 >> 88 LOAD_FAST 5 ( cur_count )			    								  
							      90 LOAD_FAST 2 ( count )					    								  
							      92 COMPARE_OP 4 ( > )					    								  
							      94 POP_JUMP_IF_FALSE 30					    								  
							      								    								  
							      12 96 LOAD_FAST 5 ( cur_count )				    								  
							      98 STORE_FAST 2 ( count )					    								  
							      								    								  
							      13 100 LOAD_FAST 0 ( str )				    								  
							      102 LOAD_FAST 4 ( i )					    								  
							      104 BINARY_SUBSCR						    								  
							      106 STORE_FAST 3 ( res )					    								  
							      108 JUMP_ABSOLUTE 30					    								  
							      >> 110 POP_BLOCK						    								  
							      								    								  
							      14 >> 112 LOAD_FAST 3 ( res )				    								  
							      114 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		      EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		    EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		  EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND
--							      --							    --								  --
def calculateSum ( arr , n ) :				      Disassembly of <code object calculateSum at 0x7fbac<<unk>> de Disassembly of <code object calculateSum at 0x7f816a6e4b70, f script_not_found : None
    if ( n == 0 ) :					      2 0 LOAD_FAST 1 ( n )					    26 0 LOAD_FAST 1 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    s = arr [ 0 ]					      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
    value = int ( s )					      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 2 ( a )					  
    sum = value						      								    								  
    for i in range ( 2 , n , 2 ) :			      3 8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 0 ( arr )					  
	s = arr [ i ]					      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
	value = int ( s )				      								    12 BINARY_SUBSCR						  
	operation = arr [ i - 1 ] [ 0 ]			      4 >> 12 LOAD_FAST 0 ( arr )				    14 STORE_FAST 3 ( a )					  
	if ( operation == '+' ) :			      14 LOAD_CONST 1 ( 0 )					    								  
	    sum += value				      16 BINARY_SUBSCR						    28 16 LOAD_FAST 2 ( a )					  
	else :						      18 STORE_FAST 2 ( s )					    18 LOAD_CONST 3 ( 1 )					  
	    sum -= value				      								    20 BINARY_SUBSCR						  
    return sum						      5 20 LOAD_GLOBAL 0 ( int )				    22 STORE_FAST 4 ( b )					  
							      22 LOAD_FAST 2 ( s )					    								  
							      24 CALL_FUNCTION 1					    29 24 LOAD_FAST 0 ( arr )					  
							      26 STORE_FAST 3 ( value )					    26 LOAD_CONST 4 ( 1 )					  
							      								    28 BINARY_SUBSCR						  
							      6 28 LOAD_FAST 3 ( value )				    30 LOAD_CONST 5 ( '<%s>' )					  
							      30 STORE_FAST 4 ( sum )					    32 LOAD_FAST 4 ( b )					  
							      								    34 BINARY_MODULO						  
							      7 32 SETUP_LOOP 78 ( to 112 )				    36 BINARY_ADD						  
							      34 LOAD_GLOBAL 1 ( range )				    38 STORE_FAST 5 ( b )					  
							      36 LOAD_CONST 2 ( 2 )					    								  
							      38 LOAD_FAST 1 ( n )					    30 40 LOAD_FAST 0 ( arr )					  
							      40 LOAD_CONST 2 ( 2 )					    42 LOAD_CONST 6 ( '<%s>' )					  
							      42 CALL_FUNCTION 3					    44 LOAD_FAST 4 ( b )					  
							      44 GET_ITER						    46 BINARY_MODULO						  
							      >> 46 FOR_ITER 62 ( to 110 )				    48 LOAD_FAST 5 ( b )					  
							      48 STORE_FAST 5 ( i )					    50 BINARY_MODULO						  
							      								    52 LOAD_FAST 5 ( b )					  
							      8 50 LOAD_FAST 0 ( arr )					    54 BINARY_MODULO						  
							      52 LOAD_FAST 5 ( i )					    56 BUILD_TUPLE 2						  
							      54 BINARY_SUBSCR						    58 BINARY_MODULO						  
							      56 STORE_FAST 2 ( s )					    60 RETURN_VALUE						  
							      								    NEW_LINE							  
							      9 58 LOAD_GLOBAL 0 ( int )				    								  
							      60 LOAD_FAST 2 ( s )					    								  
							      62 CALL_FUNCTION 1					    								  
							      64 STORE_FAST 3 ( value )					    								  
							      								    								  
							      10 66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 5 ( i )					    								  
							      70 LOAD_CONST 3 ( 1 )					    								  
							      72 BINARY_SUBTRACT					    								  
							      74 BINARY_SUBSCR						    								  
							      76 LOAD_CONST 1 ( 0 )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 STORE_FAST 6 ( operation )				    								  
							      								    								  
							      11 82 LOAD_FAST 6 ( operation )				    								  
							      84 LOAD_CONST 4 ( '+' )					    								  
							      86 COMPARE_OP 2 ( == )					    								  
							      88 POP_JUMP_IF_FALSE 100					    								  
							      								    								  
							      12 90 LOAD_FAST 4 ( sum )					    								  
							      92 LOAD_FAST 3 ( value )					    								  
							      94 INPLACE_ADD						    								  
							      96 STORE_FAST 4 ( sum )					    								  
							      98 JUMP_ABSOLUTE 46					    								  
							      								    								  
							      14 >> 100 LOAD_FAST 4 ( sum )				    								  
							      102 LOAD_FAST 3 ( value )					    								  
							      104 INPLACE_SUBTRACT					    								  
							      106 STORE_FAST 4 ( sum )					    								  
							      108 JUMP_ABSOLUTE 46					    								  
							      >> 110 POP_BLOCK						    								  
							      								    								  
							      15 >> 112 LOAD_FAST 4 ( sum )				    								  
							      114 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY				      MAXIMUM_TRIPLET_SUM_ARRAY					    MAXIMUM_TRIPLET_SUM_ARRAY					  MAXIMUM_TRIPLET_SUM_ARRAY
--							      --							    --								  --
def maxTripletSum ( arr , n ) :				      Disassembly of <code object maxTripletSum at 0x7fbac0e8bc90,  Disassembly of <code object maxTripletSum at 0x7f816a673a50,  failure : #Results: 0, 10
    sm = - 1000000					      2 0 LOAD_CONST 1 ( - 1000000 )				    26 0 LOAD_CONST 1 ( 1000000 )				  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( sm )					    2 STORE_FAST 1 ( n )					  
	for j in range ( i + 1 , n ) :			      								    								  
	    for k in range ( j + 1 , n ) :		      3 4 SETUP_LOOP 118 ( to 124 )				    27 4 SETUP_LOOP 30 ( to 34 )				  
		if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] 6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
		    sm = arr [ i ] + arr [ j ] + arr [ k ]    8 LOAD_CONST 2 ( 0 )					    8 LOAD_FAST 1 ( n )						  
    return sm						      10 LOAD_FAST 1 ( n )					    10 CALL_FUNCTION 1						  
							      12 CALL_FUNCTION 2					    12 GET_ITER							  
							      14 GET_ITER						    >> 14 FOR_ITER 14 ( to 32 )					  
							      >> 16 FOR_ITER 104 ( to 122 )				    16 STORE_FAST 2 ( i )					  
							      18 STORE_FAST 3 ( i )					    								  
							      								    28 18 LOAD_FAST 0 ( arr )					  
							      4 20 SETUP_LOOP 98 ( to 120 )				    20 LOAD_METHOD 1 ( append )					  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 3 ( i )					    24 CALL_METHOD 1						  
							      26 LOAD_CONST 3 ( 1 )					    26 POP_TOP							  
							      28 BINARY_ADD						    28 JUMP_ABSOLUTE 14						  
							      30 LOAD_FAST 1 ( n )					    >> 30 POP_BLOCK						  
							      32 CALL_FUNCTION 2					    >> 32 LOAD_CONST 2 ( None )					  
							      34 GET_ITER						    34 RETURN_VALUE						  
							      >> 36 FOR_ITER 80 ( to 118 )				    NEW_LINE							  
							      38 STORE_FAST 4 ( j )					    								  
							      								    								  
							      5 40 SETUP_LOOP 74 ( to 116 )				    								  
							      42 LOAD_GLOBAL 0 ( range )				    								  
							      44 LOAD_FAST 4 ( j )					    								  
							      46 LOAD_CONST 3 ( 1 )					    								  
							      48 BINARY_ADD						    								  
							      50 LOAD_FAST 1 ( n )					    								  
							      52 CALL_FUNCTION 2					    								  
							      54 GET_ITER						    								  
							      >> 56 FOR_ITER 56 ( to 114 )				    								  
							      58 STORE_FAST 5 ( k )					    								  
							      								    								  
							      6 60 LOAD_FAST 2 ( sm )					    								  
							      62 LOAD_FAST 0 ( arr )					    								  
							      64 LOAD_FAST 3 ( i )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 LOAD_FAST 0 ( arr )					    								  
							      70 LOAD_FAST 4 ( j )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 BINARY_ADD						    								  
							      76 LOAD_FAST 0 ( arr )					    								  
							      78 LOAD_FAST 5 ( k )					    								  
							      80 BINARY_SUBSCR						    								  
							      82 BINARY_ADD						    								  
							      84 COMPARE_OP 0 ( < )					    								  
							      86 POP_JUMP_IF_FALSE 56					    								  
							      								    								  
							      7 88 LOAD_FAST 0 ( arr )					    								  
							      90 LOAD_FAST 3 ( i )					    								  
							      92 BINARY_SUBSCR						    								  
							      94 LOAD_FAST 0 ( arr )					    								  
							      96 LOAD_FAST 4 ( j )					    								  
							      98 BINARY_SUBSCR						    								  
							      100 BINARY_ADD						    								  
							      102 LOAD_FAST 0 ( arr )					    								  
							      104 LOAD_FAST 5 ( k )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 BINARY_ADD						    								  
							      110 STORE_FAST 2 ( sm )					    								  
							      112 JUMP_ABSOLUTE 56					    								  
							      >> 114 POP_BLOCK						    								  
							      >> 116 JUMP_ABSOLUTE 36					    								  
							      >> 118 POP_BLOCK						    								  
							      >> 120 JUMP_ABSOLUTE 16					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      8 >> 124 LOAD_FAST 2 ( sm )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
def sumAtKthLevel ( tree , k ) :			      Disassembly of <code object sumAtKthLevel at 0x7fbac0e89d20,  Disassembly of <code object sumAtKthLevel at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    level = - 1						      2 0 LOAD_CONST 1 ( - 1 )					    26 0 LOAD_CONST 1 ( - 1 )					  "XLM/dis_script.py", line 59, in <module>	for
    sum = 0						      2 STORE_FAST 2 ( level )					    2 STORE_FAST 1 ( k )					  item in run_dis_script():   File "XLM/dis_script.p
    n = len ( tree )					      								    								  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( n ) :				      3 4 LOAD_CONST 2 ( 0 )					    27 4 SETUP_LOOP 76 ( to 78 )				  cals, co_varnames, co_names, co_consts, co_linesta
	if ( tree [ i ] == '(' ) :			      6 STORE_FAST 3 ( sum )					    6 LOAD_GLOBAL 0 ( enumerate )				  rts = dis_asm.parse(bytecode) TypeError: cannot un
	    level += 1					      								    8 LOAD_FAST 1 ( k )						  pack non-iterable NoneType object
	elif ( tree [ i ] == ')' ) :			      4 8 LOAD_GLOBAL 0 ( len )					    10 CALL_FUNCTION 1						  
	    level -= 1					      10 LOAD_FAST 0 ( tree )					    12 GET_ITER							  
	else :						      12 CALL_FUNCTION 1					    >> 14 FOR_ITER 76 ( to 76 )					  
	    if ( level == k ) :				      14 STORE_FAST 4 ( n )					    16 STORE_FAST 2 ( i )					  
		sum += ( ord ( tree [ i ] ) - ord ( '0' ) )   								    								  
    return sum						      5 16 SETUP_LOOP 92 ( to 110 )				    28 18 LOAD_FAST 2 ( i )					  
							      18 LOAD_GLOBAL 1 ( range )				    20 LOAD_CONST 2 ( 0 )					  
							      20 LOAD_FAST 4 ( n )					    22 BINARY_SUBSCR						  
							      22 CALL_FUNCTION 1					    24 LOAD_FAST 1 ( k )					  
							      24 GET_ITER						    26 LOAD_CONST 3 ( 1 )					  
							      >> 26 FOR_ITER 80 ( to 108 )				    28 BINARY_SUBSCR						  
							      28 STORE_FAST 5 ( i )					    30 LOAD_CONST 4 ( - 1 )					  
							      								    32 BINARY_SUBSCR						  
							      6 30 LOAD_FAST 0 ( tree )					    34 LOAD_CONST 5 ( '' )					  
							      32 LOAD_FAST 5 ( i )					    36 COMPARE_OP 2 ( == )					  
							      34 BINARY_SUBSCR						    38 POP_JUMP_IF_FALSE 14					  
							      36 LOAD_CONST 3 ( '(' )					    								  
							      38 COMPARE_OP 2 ( == )					    29 40 LOAD_FAST 2 ( i )					  
							      40 POP_JUMP_IF_FALSE 52					    42 LOAD_CONST 2 ( 0 )					  
							      								    44 BINARY_SUBSCR						  
							      7 42 LOAD_FAST 2 ( level )				    46 LOAD_CONST 4 ( - 1 )					  
							      44 LOAD_CONST 4 ( 1 )					    48 BINARY_SUBSCR						  
							      46 INPLACE_ADD						    50 LOAD_CONST 6 ( '' )					  
							      48 STORE_FAST 2 ( level )					    52 COMPARE_OP 2 ( == )					  
							      50 JUMP_ABSOLUTE 26					    54 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      8 >> 52 LOAD_FAST 0 ( tree )				    30 56 LOAD_FAST 2 ( i )					  
							      54 LOAD_FAST 5 ( i )					    58 LOAD_CONST 2 ( 0 )					  
							      56 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      58 LOAD_CONST 5 ( ')' )					    62 LOAD_CONST 4 ( - 1 )					  
							      60 COMPARE_OP 2 ( == )					    64 BINARY_SUBSCR						  
							      62 POP_JUMP_IF_FALSE 74					    66 LOAD_CONST 4 ( - 1 )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      9 64 LOAD_FAST 2 ( level )				    70 POP_JUMP_IF_FALSE 14					  
							      66 LOAD_CONST 4 ( 1 )					    								  
							      68 INPLACE_SUBTRACT					    31 72 LOAD_FAST 2 ( i )					  
							      70 STORE_FAST 2 ( level )					    74 LOAD_CONST 2 ( 0 )					  
							      72 JUMP_ABSOLUTE 26					    76 BINARY_SUBSCR						  
							      								    78 LOAD_CONST 4 ( - 1 )					  
							      11 >> 74 LOAD_FAST 2 ( level )				    80 BINARY_SUBSCR						  
							      76 LOAD_FAST 1 ( k )					    82 COMPARE_OP 2 ( == )					  
							      78 COMPARE_OP 2 ( == )					    84 POP_JUMP_IF_FALSE 14					  
							      80 POP_JUMP_IF_FALSE 26					    								  
							      								    32 86 LOAD_FAST 2 ( i )					  
							      12 82 LOAD_FAST 3 ( sum )					    88 LOAD_CONST 2 ( 0 )					  
							      84 LOAD_GLOBAL 2 ( ord )					    90 BINARY_SUBSCR						  
							      86 LOAD_FAST 0 ( tree )					    92 LOAD_CONST 4 ( - 1 )					  
							      88 LOAD_FAST 5 ( i )					    94 BINARY_SUBSCR						  
							      90 BINARY_SUBSCR						    96 LOAD_CONST 5 ( '' )					  
							      92 CALL_FUNCTION 1					    98 COMPARE_OP 2 ( == )					  
							      94 LOAD_GLOBAL 2 ( ord )					    100 POP_JUMP_IF_FALSE 14					  
							      96 LOAD_CONST 6 ( '0' )					    								  
							      98 CALL_FUNCTION 1					    33 102 LOAD_FAST 2 ( i )					  
							      100 BINARY_SUBTRACT					    104 LOAD_CONST 2 ( 0 )					  
							      102 INPLACE_ADD						    106 BINARY_SUBSCR						  
							      104 STORE_FAST 3 ( sum )					    108 LOAD_CONST 4 ( - 1 )					  
							      106 JUMP_ABSOLUTE 26					    110 BINARY_SUBSCR						  
							      >> 108 POP_BLOCK						    112 LOAD_CONST 4 ( - 1 )					  
							      								    114 BINARY_SUBSCR						  
							      13 >> 110 LOAD_FAST 3 ( sum )				    116 LOAD_CONST 4 ( - 1 )					  
							      112 RETURN_VALUE NEW_LINE					    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 4 ( - 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 4 ( - 1 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 4 ( - 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 4 ( - 1 )					  
							      								    134 BUILD_SLICE 2						  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 4 ( - 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 4 ( - 1 )					  
							      								    144 COMPARE_OP 2 ( == )					  
							      								    146 POP_JUMP_IF_FALSE 148					  
							      								    148 LOAD_FAST 2 ( i )					  
							      								    150 LOAD_CONST 2 ( 0 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 4 ( - 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 4 ( - 1 )					  
							      								    160 BUILD_SLICE 2						  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_CONST 4 ( -					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1
--							      --							    --								  --
def maxDiff ( arr , n ) :				      Disassembly of <code object maxDiff at 0x7fbac0e89d20, file " Disassembly of <code object maxDiff at 0x7f816a673a50, file " script_not_found : None
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    65 0 LOAD_FAST 0 ( arr )					  
    arr.sort ( )					      2 STORE_FAST 2 ( result )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( n - 1 ) :				      								    4 CALL_METHOD 0						  
	if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :   3 4 LOAD_FAST 0 ( arr )					    6 STORE_FAST 1 ( n )					  
	    result += abs ( arr [ i ] )			      6 LOAD_METHOD 0 ( sort )					    								  
	else :						      8 CALL_METHOD 0						    66 8 LOAD_FAST 1 ( n )					  
	    pass					      10 POP_TOP						    10 LOAD_CONST 1 ( 0 )					  
    if ( arr [ n - 2 ] != arr [ n - 1 ] ) :		      								    12 BINARY_SUBSCR						  
	result += abs ( arr [ n - 1 ] )			      4 12 SETUP_LOOP 66 ( to 80 )				    14 STORE_FAST 2 ( maxDiff )					  
    return result					      14 LOAD_GLOBAL 1 ( range )				    								  
							      16 LOAD_FAST 1 ( n )					    67 16 LOAD_FAST 1 ( n )					  
							      18 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 2 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 COMPARE_OP 4 ( > )					  
							      22 CALL_FUNCTION 1					    22 POP_JUMP_IF_FALSE 32					  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 50 ( to 78 )				    68 24 LOAD_FAST 1 ( n )					  
							      28 STORE_FAST 3 ( i )					    26 LOAD_CONST 3 ( 1 )					  
							      								    28 INPLACE_ADD						  
							      5 30 LOAD_GLOBAL 2 ( abs )				    30 STORE_FAST 1 ( n )					  
							      32 LOAD_FAST 0 ( arr )					    								  
							      34 LOAD_FAST 3 ( i )					    69 32 LOAD_FAST 1 ( n )					  
							      36 BINARY_SUBSCR						    34 LOAD_CONST 4 ( > )					  
							      38 CALL_FUNCTION 1					    36 COMPARE_OP 4 ( > )					  
							      40 LOAD_GLOBAL 2 ( abs )					    38 POP_JUMP_IF_FALSE 44					  
							      42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 3 ( i )					    70 40 LOAD_FAST 1 ( n )					  
							      46 LOAD_CONST 2 ( 1 )					    42 LOAD_CONST 5 ( 1 )					  
							      48 BINARY_ADD						    44 INPLACE_ADD						  
							      50 BINARY_SUBSCR						    46 STORE_FAST 1 ( n )					  
							      52 CALL_FUNCTION 1					    								  
							      54 COMPARE_OP 3 ( != )					    71 >> 48 LOAD_FAST 1 ( n )					  
							      56 POP_JUMP_IF_FALSE 26					    50 LOAD_CONST 6 ( '%d' )					  
							      								    52 LOAD_FAST 1 ( n )					  
							      6 58 LOAD_FAST 2 ( result )				    54 BINARY_MODULO						  
							      60 LOAD_GLOBAL 2 ( abs )					    56 INPLACE_ADD						  
							      62 LOAD_FAST 0 ( arr )					    58 STORE_FAST 1 ( n )					  
							      64 LOAD_FAST 3 ( i )					    								  
							      66 BINARY_SUBSCR						    72 60 LOAD_FAST 1 ( n )					  
							      68 CALL_FUNCTION 1					    62 LOAD_CONST 7 ( 1 )					  
							      70 INPLACE_ADD						    64 INPLACE_ADD						  
							      72 STORE_FAST 2 ( result )				    66 STORE_FAST 1 ( n )					  
							      74 JUMP_ABSOLUTE 26					    								  
							      								    73 68 LOAD_FAST 1 ( n )					  
							      8 76 JUMP_ABSOLUTE 26					    70 LOAD_CONST 8 ( 2 )					  
							      >> 78 POP_BLOCK						    72 INPLACE_ADD						  
							      								    74 STORE_FAST 1 ( n )					  
							      9 >> 80 LOAD_FAST 0 ( arr )				    								  
							      82 LOAD_FAST 1 ( n )					    74 76 LOAD_FAST 1 ( n )					  
							      84 LOAD_CONST 3 ( 2 )					    78 LOAD_CONST 9 ( 1 )					  
							      86 BINARY_SUBTRACT					    80 INPLACE_ADD						  
							      88 BINARY_SUBSCR						    82 STORE_FAST 1 ( n )					  
							      90 LOAD_FAST 0 ( arr )					    								  
							      92 LOAD_FAST 1 ( n )					    75 84 LOAD_FAST 1 ( n )					  
							      94 LOAD_CONST 2 ( 1 )					    86 LOAD_CONST 10 ( 1 )					  
							      96 BINARY_SUBTRACT					    88 INPLACE_ADD						  
							      98 BINARY_SUBSCR						    90 STORE_FAST 1 ( n )					  
							      100 COMPARE_OP 3 ( != )					    								  
							      102 POP_JUMP_IF_FALSE 124					    76 92 LOAD_FAST 1 ( n )					  
							      								    94 LOAD_CONST 11 ( 2 )					  
							      10 104 LOAD_FAST 2 ( result )				    96 INPLACE_ADD						  
							      106 LOAD_GLOBAL 2 ( abs )					    98 STORE_FAST 1 ( n )					  
							      108 LOAD_FAST 0 ( arr )					    								  
							      110 LOAD_FAST 1 ( n )					    77 100 LOAD_FAST 1 ( n )					  
							      112 LOAD_CONST 2 ( 1 )					    102 LOAD_FAST 1 ( n )					  
							      114 BINARY_SUBTRACT					    104 LOAD_CONST 12 ( 2 )					  
							      116 BINARY_SUBSCR						    106 INPLACE_ADD						  
							      118 CALL_FUNCTION 1					    108 STORE_FAST 1 ( n )					  
							      120 INPLACE_ADD						    								  
							      122 STORE_FAST 2 ( result )				    78 110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_FAST 1 ( n )					  
							      11 >> 124 LOAD_FAST 2 ( result )				    114 LOAD_CONST 12 ( 2 )					  
							      126 RETURN_VALUE NEW_LINE					    116 INPLACE_ADD						  
							      								    118 STORE_FAST 1 ( n )					  
							      								    								  
							      								    79 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_FAST 1 ( n )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 1 ( n )					  
							      								    								  
							      								    80 128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_FAST 1 ( n )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    								  
							      								    82 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 INPLACE_ADD						  
							      								    142 STORE_FAST 1 ( n )					  
							      								    								  
							      								    81 144 LOAD_FAST 1 ( n )					  
							      								    146 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT_1						      BUBBLE_SORT_1						    BUBBLE_SORT_1						  BUBBLE_SORT_1
--							      --							    --								  --
def bubbleSort ( arr ) :				      Disassembly of <code object bubbleSort at 0x7fbac<<unk>> d540 Disassembly of <code object bubbleSort at 0x7f816a6e4b70, fil script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    31 0 LOAD_FAST 0 ( arr )					  
    for i in range ( n ) :				      2 LOAD_FAST 0 ( arr )					    2 LOAD_METHOD 0 ( append )					  
	swapped = False					      4 CALL_FUNCTION 1						    4 LOAD_CONST 1 ( '' )					  
	for j in range ( 0 , n - i - 1 ) :		      6 STORE_FAST 1 ( n )					    6 CALL_METHOD 1						  
	    if arr [ j ] > arr [ j + 1 ] :		      								    8 POP_TOP							  
		arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 3 8 SETUP_LOOP 116 ( to 126 )				    								  
		swapped = True				      10 LOAD_GLOBAL 1 ( range )				    32 10 LOAD_FAST 0 ( arr )					  
	if swapped == False :				      12 LOAD_FAST 1 ( n )					    12 LOAD_METHOD 1 ( append )					  
	    break					      14 CALL_FUNCTION 1					    14 LOAD_CONST 2 ( '[%s] %s %s' )				  
							      16 GET_ITER						    16 LOAD_FAST 1 ( n )					  
							      >> 18 FOR_ITER 104 ( to 124 )				    18 BINARY_MODULO						  
							      20 STORE_FAST 2 ( i )					    20 CALL_METHOD 1						  
							      								    22 POP_TOP							  
							      4 22 LOAD_CONST 1 ( False )				    								  
							      24 STORE_FAST 3 ( swapped )				    33 24 LOAD_FAST 0 ( arr )					  
							      								    26 LOAD_METHOD 2 ( append )					  
							      5 26 SETUP_LOOP 84 ( to 112 )				    28 LOAD_CONST 3 ( '[%s] %s' )				  
							      28 LOAD_GLOBAL 1 ( range )				    30 LOAD_FAST 1 ( n )					  
							      30 LOAD_CONST 2 ( 0 )					    32 BINARY_MODULO						  
							      32 LOAD_FAST 1 ( n )					    34 CALL_METHOD 1						  
							      34 LOAD_FAST 2 ( i )					    36 POP_TOP							  
							      36 BINARY_SUBTRACT					    38 LOAD_CONST 0 ( None )					  
							      38 LOAD_CONST 3 ( 1 )					    40 RETURN_VALUE						  
							      40 BINARY_SUBTRACT					    NEW_LINE							  
							      42 CALL_FUNCTION 2					    								  
							      44 GET_ITER						    								  
							      >> 46 FOR_ITER 62 ( to 110 )				    								  
							      48 STORE_FAST 4 ( j )					    								  
							      								    								  
							      6 50 LOAD_FAST 0 ( arr )					    								  
							      52 LOAD_FAST 4 ( j )					    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 4 ( j )					    								  
							      60 LOAD_CONST 3 ( 1 )					    								  
							      62 BINARY_ADD						    								  
							      64 BINARY_SUBSCR						    								  
							      66 COMPARE_OP 4 ( > )					    								  
							      68 POP_JUMP_IF_FALSE 46					    								  
							      								    								  
							      7 70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 4 ( j )					    								  
							      74 LOAD_CONST 3 ( 1 )					    								  
							      76 BINARY_ADD						    								  
							      78 BINARY_SUBSCR						    								  
							      80 LOAD_FAST 0 ( arr )					    								  
							      82 LOAD_FAST 4 ( j )					    								  
							      84 BINARY_SUBSCR						    								  
							      86 ROT_TWO						    								  
							      88 LOAD_FAST 0 ( arr )					    								  
							      90 LOAD_FAST 4 ( j )					    								  
							      92 STORE_SUBSCR						    								  
							      94 LOAD_FAST 0 ( arr )					    								  
							      96 LOAD_FAST 4 ( j )					    								  
							      98 LOAD_CONST 3 ( 1 )					    								  
							      100 BINARY_ADD						    								  
							      102 STORE_SUBSCR						    								  
							      								    								  
							      8 104 LOAD_CONST 4 ( True )				    								  
							      106 STORE_FAST 3 ( swapped )				    								  
							      108 JUMP_ABSOLUTE 46					    								  
							      >> 110 POP_BLOCK						    								  
							      								    								  
							      9 >> 112 LOAD_FAST 3 ( swapped )				    								  
							      114 LOAD_CONST 1 ( False )				    								  
							      116 COMPARE_OP 2 ( == )					    								  
							      118 POP_JUMP_IF_FALSE 18					    								  
							      								    								  
							      10 120 BREAK_LOOP						    								  
							      122 JUMP_ABSOLUTE 18					    								  
							      >> 124 POP_BLOCK						    								  
							      >> 126 LOAD_CONST 0 ( None )				    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			      LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			    LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS				  LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS
--							      --							    --								  --
def longestCommonSum ( arr1 , arr2 , n ) :		      Disassembly of <code object longestCommonSum at 0x7fbac0e89d2 Disassembly of <code object longestCommonSum at 0x7f816a673a5 script_not_found : None
    maxLen = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( arr2 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 3 ( maxLen )					    2 LOAD_FAST 0 ( arr1 )					  
	sum1 = 0					      								    4 LOAD_FAST 2 ( arr2 )					  
	sum2 = 0					      3 4 SETUP_LOOP 102 ( to 108 )				    6 LOAD_FAST 3 ( arr2 )					  
	for j in range ( i , n ) :			      6 LOAD_GLOBAL 0 ( range )					    8 LOAD_FAST 4 ( arr2 )					  
	    sum1 += arr1 [ j ]				      8 LOAD_CONST 1 ( 0 )					    10 LOAD_FAST 5 ( arr2 )					  
	    sum2 += arr2 [ j ]				      10 LOAD_FAST 2 ( n )					    12 LOAD_FAST 6 ( arr2 )					  
	    if ( sum1 == sum2 ) :			      12 CALL_FUNCTION 2					    14 LOAD_FAST 7 ( arr2 )					  
		len = j - i + 1				      14 GET_ITER						    16 LOAD_FAST 8 ( arr2 )					  
		if ( len > maxLen ) :			      >> 16 FOR_ITER 88 ( to 106 )				    18 LOAD_FAST 9 ( arr2 )					  
		    maxLen = len			      18 STORE_FAST 4 ( i )					    20 LOAD_FAST 10 ( arr2 )					  
    return maxLen					      								    22 LOAD_FAST 11 ( arr2 )					  
							      4 20 LOAD_CONST 1 ( 0 )					    24 LOAD_FAST 12 ( arr2 )					  
							      22 STORE_FAST 5 ( sum1 )					    26 LOAD_FAST 13 ( arr2 )					  
							      								    28 LOAD_FAST 14 ( arr2 )					  
							      5 24 LOAD_CONST 1 ( 0 )					    30 LOAD_FAST 15 ( arr2 )					  
							      26 STORE_FAST 6 ( sum2 )					    32 LOAD_FAST 14 ( arr2 )					  
							      								    34 LOAD_FAST 15 ( arr2 )					  
							      6 28 SETUP_LOOP 74 ( to 104 )				    36 LOAD_FAST 16 ( arr2 )					  
							      30 LOAD_GLOBAL 0 ( range )				    38 LOAD_FAST 15 ( arr2 )					  
							      32 LOAD_FAST 4 ( i )					    40 LOAD_FAST 16 ( arr2 )					  
							      34 LOAD_FAST 2 ( n )					    42 LOAD_FAST 17 ( arr2 )					  
							      36 CALL_FUNCTION 2					    44 LOAD_FAST 18 ( arr2 )					  
							      38 GET_ITER						    46 LOAD_FAST 17 ( arr2 )					  
							      >> 40 FOR_ITER 60 ( to 102 )				    48 LOAD_FAST 18 ( arr2 )					  
							      42 STORE_FAST 7 ( j )					    50 LOAD_FAST 19 ( arr2 )					  
							      								    52 LOAD_FAST 20 ( arr2 )					  
							      7 44 LOAD_FAST 5 ( sum1 )					    54 LOAD_FAST 21 ( arr2 )					  
							      46 LOAD_FAST 0 ( arr1 )					    56 LOAD_FAST 22 ( arr2 )					  
							      48 LOAD_FAST 7 ( j )					    58 LOAD_FAST 21 ( arr2 )					  
							      50 BINARY_SUBSCR						    60 LOAD_FAST 22 ( arr2 )					  
							      52 INPLACE_ADD						    62 LOAD_FAST 21 ( arr2 )					  
							      54 STORE_FAST 5 ( sum1 )					    64 LOAD_FAST 22 ( arr2 )					  
							      								    66 LOAD_FAST 21 ( arr2 )					  
							      8 56 LOAD_FAST 6 ( sum2 )					    68 LOAD_FAST 22 ( arr2 )					  
							      58 LOAD_FAST 1 ( arr2 )					    70 LOAD_FAST 21 ( arr2 )					  
							      60 LOAD_FAST 7 ( j )					    72 LOAD_FAST 22 ( arr2 )					  
							      62 BINARY_SUBSCR						    74 LOAD_FAST 22 ( arr2 )					  
							      64 INPLACE_ADD						    76 LOAD_FAST 21 ( arr2 )					  
							      66 STORE_FAST 6 ( sum2 )					    78 LOAD_FAST 22 ( arr2 )					  
							      								    80 LOAD_FAST 22 ( arr2 )					  
							      9 68 LOAD_FAST 5 ( sum1 )					    82 LOAD_FAST 21 ( arr2 )					  
							      70 LOAD_FAST 6 ( sum2 )					    84 LOAD_FAST 22 ( arr2 )					  
							      72 COMPARE_OP 2 ( == )					    86 LOAD_FAST 22 ( arr2 )					  
							      74 POP_JUMP_IF_FALSE 40					    88 LOAD_FAST 21 ( arr2 )					  
							      								    90 LOAD_FAST 22 ( arr2 )					  
							      10 76 LOAD_FAST 7 ( j )					    92 LOAD_FAST 21 ( arr2 )					  
							      78 LOAD_FAST 4 ( i )					    94 LOAD_FAST 22 ( arr2 )					  
							      80 BINARY_SUBTRACT					    96 LOAD_FAST 22 ( arr2 )					  
							      82 LOAD_CONST 2 ( 1 )					    98 LOAD_FAST 23 ( arr2 )					  
							      84 BINARY_ADD						    100 LOAD_FAST 22 ( arr2 )					  
							      86 STORE_FAST 8 ( len )					    102 LOAD_FAST 23 ( arr2 )					  
							      								    104 LOAD_FAST 22 ( arr2 )					  
							      11 88 LOAD_FAST 8 ( len )					    106 LOAD_FAST 23 ( arr2 )					  
							      90 LOAD_FAST 3 ( maxLen )					    108 LOAD_FAST 22 ( arr2 )					  
							      92 COMPARE_OP 4 ( > )					    110 LOAD_FAST 24 ( arr2 )					  
							      94 POP_JUMP_IF_FALSE 40					    112 LOAD_FAST 23 ( arr2 )					  
							      								    114 LOAD_FAST 22 ( arr2 )					  
							      12 96 LOAD_FAST 8 ( len )					    116 LOAD_FAST 24 ( arr2 )					  
							      98 STORE_FAST 3 ( maxLen )				    118 LOAD_FAST 23 ( arr2 )					  
							      100 JUMP_ABSOLUTE 40					    120 LOAD_FAST 22 ( arr2 )					  
							      >> 102 POP_BLOCK						    122 LOAD_FAST 24 ( arr2 )					  
							      >> 104 JUMP_ABSOLUTE 16					    124 LOAD_FAST 23 ( arr2 )					  
							      >> 106 POP_BLOCK						    126 LOAD_FAST 22 ( arr2 )					  
							      								    128 LOAD_FAST 24 ( arr2 )					  
							      13 >> 108 LOAD_FAST 3 ( maxLen )				    130 LOAD_FAST 23 ( arr2 )					  
							      110 RETURN_VALUE NEW_LINE					    132 LOAD_FAST 24 ( arr2 )					  
							      								    134 LOAD_FAST 23 ( arr2 )					  
							      								    136 BUILD_TUPLE 5						  
							      								    138 LOAD_FAST 24 ( arr2 )					  
							      								    140 LOAD_FAST 25 ( arr2 )					  
							      								    142								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	      POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	    POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	  POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS
--							      --							    --								  --
def isPresent ( s , q ) :				      Disassembly of <code object isPresent at 0x7fbac0e8bc90, file Disassembly of <code object isPresent at 0x7f816a601660, file script_not_found : None
    freq = [ 0 ] * MAX_CHAR				      2 0 LOAD_CONST 1 ( 0 )					    149 0 LOAD_FAST 0 ( s )					  
    for i in range ( 0 , len ( s ) ) :			      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( MAX_CHAR )					  
	freq [ ord ( s [ i ] ) ] += 1			      4 LOAD_GLOBAL 0 ( MAX_CHAR )				    4 COMPARE_OP 2 ( == )					  
    for i in range ( 0 , len ( q ) ) :			      6 BINARY_MULTIPLY						    6 POP_JUMP_IF_FALSE 12					  
	freq [ ord ( q [ i ] ) ] -= 1			      8 STORE_FAST 2 ( freq )					    								  
	if ( freq [ ord ( q [ i ] ) ] < 0 ) :		      								    150 8 LOAD_FAST 0 ( s )					  
	    return False				      3 10 SETUP_LOOP 46 ( to 58 )				    10 LOAD_CONST 2 ( 0 )					  
    return True						      12 LOAD_GLOBAL 1 ( range )				    12 BINARY_SUBSCR						  
							      14 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 0 ( s )					  
							      16 LOAD_GLOBAL 2 ( len )					    								  
							      18 LOAD_FAST 0 ( s )					    151 16 LOAD_FAST 0 ( s )					  
							      20 CALL_FUNCTION 1					    18 LOAD_CONST 3 ( 1 )					  
							      22 CALL_FUNCTION 2					    20 COMPARE_OP 2 ( == )					  
							      24 GET_ITER						    22 POP_JUMP_IF_FALSE 28					  
							      >> 26 FOR_ITER 28 ( to 56 )				    								  
							      28 STORE_FAST 3 ( i )					    152 24 LOAD_FAST 0 ( s )					  
							      								    26 LOAD_CONST 4 ( 1 )					  
							      4 30 LOAD_FAST 2 ( freq )					    28 INPLACE_ADD						  
							      32 LOAD_GLOBAL 3 ( ord )					    30 STORE_FAST 0 ( s )					  
							      34 LOAD_FAST 0 ( s )					    								  
							      36 LOAD_FAST 3 ( i )					    153 >> 32 LOAD_FAST 0 ( s )					  
							      38 BINARY_SUBSCR						    34 LOAD_CONST 5 ( 1 )					  
							      40 CALL_FUNCTION 1					    36 INPLACE_ADD						  
							      42 DUP_TOP_TWO						    38 STORE_FAST 0 ( s )					  
							      44 BINARY_SUBSCR						    40 JUMP_FORWARD 14 ( to 78 )				  
							      46 LOAD_CONST 2 ( 1 )					    								  
							      48 INPLACE_ADD						    154 >> 42 LOAD_FAST 0 ( s )					  
							      50 ROT_THREE						    44 LOAD_CONST 6 ( 2 )					  
							      52 STORE_SUBSCR						    46 INPLACE_ADD						  
							      54 JUMP_ABSOLUTE 26					    48 STORE_FAST 0 ( s )					  
							      >> 56 POP_BLOCK						    								  
							      								    155 >> 50 LOAD_FAST 0 ( s )					  
							      5 >> 58 SETUP_LOOP 70 ( to 130 )				    52 LOAD_CONST 7 ( 3 )					  
							      60 LOAD_GLOBAL 1 ( range )				    54 COMPARE_OP 2 ( == )					  
							      62 LOAD_CONST 1 ( 0 )					    56 POP_JUMP_IF_FALSE 78					  
							      64 LOAD_GLOBAL 2 ( len )					    								  
							      66 LOAD_FAST 1 ( q )					    156 58 LOAD_FAST 0 ( s )					  
							      68 CALL_FUNCTION 1					    60 LOAD_CONST 8 ( 2 )					  
							      70 CALL_FUNCTION 2					    62 INPLACE_ADD						  
							      72 GET_ITER						    64 STORE_FAST 0 ( s )					  
							      >> 74 FOR_ITER 52 ( to 128 )				    								  
							      76 STORE_FAST 3 ( i )					    157 >> 66 LOAD_FAST 0 ( s )					  
							      								    68 LOAD_CONST 9 ( 4 )					  
							      6 78 LOAD_FAST 2 ( freq )					    70 INPLACE_ADD						  
							      80 LOAD_GLOBAL 3 ( ord )					    72 STORE_FAST 0 ( s )					  
							      82 LOAD_FAST 1 ( q )					    74 JUMP_FORWARD 14 ( to 78 )				  
							      84 LOAD_FAST 3 ( i )					    								  
							      86 BINARY_SUBSCR						    158 >> 76 LOAD_FAST 0 ( s )					  
							      88 CALL_FUNCTION 1					    78 LOAD_CONST 10 ( 4 )					  
							      90 DUP_TOP_TWO						    80 INPLACE_ADD						  
							      92 BINARY_SUBSCR						    82 STORE_FAST 0 ( s )					  
							      94 LOAD_CONST 2 ( 1 )					    								  
							      96 INPLACE_SUBTRACT					    159 84 LOAD_FAST 0 ( s )					  
							      98 ROT_THREE						    86 LOAD_CONST 11 ( 4 )					  
							      100 STORE_SUBSCR						    88 INPLACE_ADD						  
							      								    90 STORE_FAST 0 ( s )					  
							      7 102 LOAD_FAST 2 ( freq )				    								  
							      104 LOAD_GLOBAL 3 ( ord )					    160 >> 92 LOAD_FAST 0 ( s )					  
							      106 LOAD_FAST 1 ( q )					    94 LOAD_CONST 12 ( 4 )					  
							      108 LOAD_FAST 3 ( i )					    96 INPLACE_ADD						  
							      110 BINARY_SUBSCR						    98 STORE_FAST 0 ( s )					  
							      112 CALL_FUNCTION 1					    								  
							      114 BINARY_SUBSCR						    161 100 LOAD_FAST 0 ( s )					  
							      116 LOAD_CONST 1 ( 0 )					    102 LOAD_CONST 13 ( 1 )					  
							      118 COMPARE_OP 0 ( < )					    104 INPLACE_ADD						  
							      120 POP_JUMP_IF_FALSE 74					    106 STORE_FAST 0 ( s )					  
							      								    								  
							      8 122 LOAD_CONST 3 ( False )				    162 108 LOAD_FAST 0 ( s )					  
							      124 RETURN_VALUE						    110 LOAD_CONST 14 ( 2 )					  
							      126 JUMP_ABSOLUTE 74					    112 INPLACE_ADD						  
							      >> 128 POP_BLOCK						    114 STORE_FAST 0 ( s )					  
							      								    								  
							      9 >> 130 LOAD_CONST 4 ( True )				    163 >> 116 LOAD_FAST 0 ( s )				  
							      132 RETURN_VALUE NEW_LINE					    118 LOAD_CONST 15 ( 2 )					  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 0 ( s )					  
							      								    124 JUMP_FORWARD 14 ( to 78 )				  
							      								    								  
							      								    164 >> 126 LOAD_FAST 0 ( s )				  
							      								    128 LOAD_CONST 16 ( 4 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 0 ( s )					  
							      								    								  
							      								    165 >> 134 LOAD_FAST 0 ( s )				  
							      								    136 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		      DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		    DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		  DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      Disassembly of <code object knapSack at 0x7fbac<<unk>> de40,  Disassembly of <code object knapSack at 0x7f816a673a50, file  script_not_found : None
    if n == 0 or W == 0 :				      2 0 LOAD_FAST 3 ( n )					    26 0 LOAD_FAST 0 ( W )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( wt [ n - 1 ] > W ) :				      4 COMPARE_OP 2 ( == )					    4 BINARY_SUBSCR						  
	return knapSack ( W , wt , val , n - 1 )	      6 POP_JUMP_IF_TRUE 16					    6 STORE_FAST 1 ( wt )					  
    else :						      8 LOAD_FAST 0 ( W )					    								  
	return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  10 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 1 ( wt )					  
							      12 COMPARE_OP 2 ( == )					    10 LOAD_METHOD 0 ( append )					  
							      14 POP_JUMP_IF_FALSE 20					    12 LOAD_FAST 1 ( wt )					  
							      								    14 LOAD_METHOD 1 ( ravel )					  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    16 CALL_METHOD 0						  
							      18 RETURN_VALUE						    18 CALL_METHOD 1						  
							      								    20 POP_TOP							  
							      4 >> 20 LOAD_FAST 1 ( wt )				    								  
							      22 LOAD_FAST 3 ( n )					    28 22 LOAD_FAST 1 ( wt )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_METHOD 0 ( append )					  
							      26 BINARY_SUBTRACT					    26 LOAD_FAST 1 ( wt )					  
							      28 BINARY_SUBSCR						    28 LOAD_METHOD 2 ( ravel )					  
							      30 LOAD_FAST 0 ( W )					    30 CALL_METHOD 0						  
							      32 COMPARE_OP 4 ( > )					    32 CALL_METHOD 1						  
							      34 POP_JUMP_IF_FALSE 54					    34 POP_TOP							  
							      								    								  
							      5 36 LOAD_GLOBAL 0 ( knapSack )				    29 36 LOAD_FAST 1 ( wt )					  
							      38 LOAD_FAST 0 ( W )					    38 LOAD_METHOD 0 ( append )					  
							      40 LOAD_FAST 1 ( wt )					    40 LOAD_FAST 1 ( wt )					  
							      42 LOAD_FAST 2 ( val )					    42 LOAD_METHOD 3 ( ravel )					  
							      44 LOAD_FAST 3 ( n )					    44 CALL_METHOD 0						  
							      46 LOAD_CONST 2 ( 1 )					    46 CALL_METHOD 1						  
							      48 BINARY_SUBTRACT					    48 POP_TOP							  
							      50 CALL_FUNCTION 4					    50 LOAD_CONST 0 ( None )					  
							      52 RETURN_VALUE						    52 RETURN_VALUE						  
							      								    NEW_LINE							  
							      7 >> 54 LOAD_GLOBAL 1 ( max )				    								  
							      56 LOAD_FAST 2 ( val )					    								  
							      58 LOAD_FAST 3 ( n )					    								  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 BINARY_SUBTRACT					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_GLOBAL 0 ( knapSack )				    								  
							      68 LOAD_FAST 0 ( W )					    								  
							      70 LOAD_FAST 1 ( wt )					    								  
							      72 LOAD_FAST 3 ( n )					    								  
							      74 LOAD_CONST 2 ( 1 )					    								  
							      76 BINARY_SUBTRACT					    								  
							      78 BINARY_SUBSCR						    								  
							      80 BINARY_SUBTRACT					    								  
							      82 LOAD_FAST 1 ( wt )					    								  
							      84 LOAD_FAST 2 ( val )					    								  
							      86 LOAD_FAST 3 ( n )					    								  
							      88 LOAD_CONST 2 ( 1 )					    								  
							      90 BINARY_SUBTRACT					    								  
							      92 CALL_FUNCTION 4					    								  
							      94 BINARY_ADD						    								  
							      96 LOAD_GLOBAL 0 ( knapSack )				    								  
							      98 LOAD_FAST 0 ( W )					    								  
							      100 LOAD_FAST 1 ( wt )					    								  
							      102 LOAD_FAST 2 ( val )					    								  
							      104 LOAD_FAST 3 ( n )					    								  
							      106 LOAD_CONST 2 ( 1 )					    								  
							      108 BINARY_SUBTRACT					    								  
							      110 CALL_FUNCTION 4					    								  
							      112 CALL_FUNCTION 2					    								  
							      114 RETURN_VALUE						    								  
							      116 LOAD_CONST 0 ( None )					    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2	      PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		    PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		  PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2
--							      --							    --								  --
def printSubsequences ( str ) :				      Disassembly of <code object printSubsequences at 0x7fbac0e8bc Disassembly of <code object printSubsequences at 0x7f816a673a script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( n )					  
    opsize = int ( pow ( 2 , n - 1 ) )			      2 LOAD_FAST 0 ( str )					    2 LOAD_CONST 1 ( 1 )					  
    for counter in range ( opsize ) :			      4 CALL_FUNCTION 1						    4 COMPARE_OP 4 ( > )					  
	for j in range ( n ) :				      6 STORE_FAST 1 ( n )					    6 POP_JUMP_IF_FALSE 12					  
	    print ( str [ j ] , end = "" )		      								    								  
	    if ( counter & ( 1 << j ) ) :		      3 8 LOAD_GLOBAL 1 ( int )					    27 8 LOAD_GLOBAL 0 ( print )				  
		print ( "" , end = "" )			      10 LOAD_GLOBAL 2 ( pow )					    10 LOAD_CONST 2 ( '\n					  
	print ( "\n" , end = "" )			      12 LOAD_CONST 1 ( 2 )					    								  
							      14 LOAD_FAST 1 ( n )					    								  
							      16 LOAD_CONST 2 ( 1 )					    								  
							      18 BINARY_SUBTRACT					    								  
							      20 CALL_FUNCTION 2					    								  
							      22 CALL_FUNCTION 1					    								  
							      24 STORE_FAST 2 ( opsize )				    								  
							      								    								  
							      4 26 SETUP_LOOP 86 ( to 114 )				    								  
							      28 LOAD_GLOBAL 3 ( range )				    								  
							      30 LOAD_FAST 2 ( opsize )					    								  
							      32 CALL_FUNCTION 1					    								  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 74 ( to 112 )				    								  
							      38 STORE_FAST 3 ( counter )				    								  
							      								    								  
							      5 40 SETUP_LOOP 56 ( to 98 )				    								  
							      42 LOAD_GLOBAL 3 ( range )				    								  
							      44 LOAD_FAST 1 ( n )					    								  
							      46 CALL_FUNCTION 1					    								  
							      48 GET_ITER						    								  
							      >> 50 FOR_ITER 44 ( to 96 )				    								  
							      52 STORE_FAST 4 ( j )					    								  
							      								    								  
							      6 54 LOAD_GLOBAL 4 ( print )				    								  
							      56 LOAD_FAST 0 ( str )					    								  
							      58 LOAD_FAST 4 ( j )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_CONST 3 ( '' )					    								  
							      64 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      66 CALL_FUNCTION_KW 2					    								  
							      68 POP_TOP						    								  
							      								    								  
							      7 70 LOAD_FAST 3 ( counter )				    								  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 LOAD_FAST 4 ( j )					    								  
							      76 BINARY_LSHIFT						    								  
							      78 BINARY_AND						    								  
							      80 POP_JUMP_IF_FALSE 50					    								  
							      								    								  
							      8 82 LOAD_GLOBAL 4 ( print )				    								  
							      84 LOAD_CONST 3 ( '' )					    								  
							      86 LOAD_CONST 3 ( '' )					    								  
							      88 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      90 CALL_FUNCTION_KW 2					    								  
							      92 POP_TOP						    								  
							      94 JUMP_ABSOLUTE 50					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      9 >> 98 LOAD_GLOBAL 4 ( print )				    								  
							      100 LOAD_CONST 5 ( '\n' )					    								  
							      102 LOAD_CONST 3 ( '' )					    								  
							      104 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      106 CALL_FUNCTION_KW 2					    								  
							      108 POP_TOP						    								  
							      110 JUMP_ABSOLUTE 36					    								  
							      >> 112 POP_BLOCK						    								  
							      >> 114 LOAD_CONST 0 ( None )				    								  
							      116 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY_1				      FREQUENT_ELEMENT_ARRAY_1					    FREQUENT_ELEMENT_ARRAY_1					  FREQUENT_ELEMENT_ARRAY_1
--							      --							    --								  --
def mostFrequent ( arr , n ) :				      Disassembly of <code object mostFrequent at 0x7fbac0e89d20, f Disassembly of <code object mostFrequent at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    Hash = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    90 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 LOAD_FAST 0 ( arr )					  (item)   File "main.py", line 40, in <module>	  Fi
	if arr [ i ] in Hash.keys ( ) :			      4 STORE_FAST 2 ( Hash )					    4 CALL_FUNCTION 1						  le "<dis>", line 2, in mostFrequent TypeError: can
	    Hash [ arr [ i ] ] += 1			      								    6 STORE_FAST 1 ( n )					  not convert dictionary update sequence element #0
	else :						      3 6 SETUP_LOOP 66 ( to 74 )				    								  to a sequence
	    Hash [ arr [ i ] ] = 1			      8 LOAD_GLOBAL 1 ( range )					    91 8 LOAD_FAST 1 ( n )					  
    max_count = 0					      10 LOAD_FAST 1 ( n )					    10 LOAD_CONST 1 ( 1 )					  
    res = - 1						      12 CALL_FUNCTION 1					    12 COMPARE_OP 4 ( > )					  
    for i in Hash :					      14 GET_ITER						    14 POP_JUMP_IF_FALSE 30					  
	if ( max_count < Hash [ i ] ) :			      >> 16 FOR_ITER 54 ( to 72 )				    								  
	    res = i					      18 STORE_FAST 3 ( i )					    92 16 LOAD_FAST 1 ( n )					  
	    max_count = Hash [ i ]			      								    18 LOAD_CONST 2 ( 0 )					  
    return res						      4 20 LOAD_FAST 0 ( arr )					    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 3 ( i )					    22 STORE_FAST 1 ( n )					  
							      24 BINARY_SUBSCR						    								  
							      26 LOAD_FAST 2 ( Hash )					    93 24 LOAD_FAST 1 ( n )					  
							      28 LOAD_METHOD 2 ( keys )					    26 LOAD_CONST 3 ( 1 )					  
							      30 CALL_METHOD 0						    28 INPLACE_ADD						  
							      32 COMPARE_OP 6 ( in )					    30 STORE_FAST 1 ( n )					  
							      34 POP_JUMP_IF_FALSE 58					    								  
							      								    94 32 LOAD_FAST 1 ( n )					  
							      5 36 LOAD_FAST 2 ( Hash )					    34 LOAD_CONST 4 ( 2 )					  
							      38 LOAD_FAST 0 ( arr )					    36 INPLACE_ADD						  
							      40 LOAD_FAST 3 ( i )					    38 STORE_FAST 1 ( n )					  
							      42 BINARY_SUBSCR						    								  
							      44 DUP_TOP_TWO						    95 40 LOAD_FAST 1 ( n )					  
							      46 BINARY_SUBSCR						    42 LOAD_CONST 5 ( 1 )					  
							      48 LOAD_CONST 1 ( 1 )					    44 INPLACE_ADD						  
							      50 INPLACE_ADD						    46 STORE_FAST 1 ( n )					  
							      52 ROT_THREE						    								  
							      54 STORE_SUBSCR						    96 48 LOAD_FAST 1 ( n )					  
							      56 JUMP_ABSOLUTE 16					    50 LOAD_CONST 6 ( 2 )					  
							      								    52 INPLACE_ADD						  
							      7 >> 58 LOAD_CONST 1 ( 1 )				    54 STORE_FAST 1 ( n )					  
							      60 LOAD_FAST 2 ( Hash )					    								  
							      62 LOAD_FAST 0 ( arr )					    97 56 LOAD_FAST 1 ( n )					  
							      64 LOAD_FAST 3 ( i )					    58 LOAD_CONST 7 ( 2 )					  
							      66 BINARY_SUBSCR						    60 INPLACE_ADD						  
							      68 STORE_SUBSCR						    62 STORE_FAST 1 ( n )					  
							      70 JUMP_ABSOLUTE 16					    								  
							      >> 72 POP_BLOCK						    98 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 8 ( 3 )					  
							      8 >> 74 LOAD_CONST 2 ( 0 )				    68 INPLACE_ADD						  
							      76 STORE_FAST 4 ( max_count )				    70 STORE_FAST 1 ( n )					  
							      								    								  
							      9 78 LOAD_CONST 3 ( - 1 )					    99 72 LOAD_FAST 1 ( n )					  
							      80 STORE_FAST 5 ( res )					    74 LOAD_CONST 9 ( 2 )					  
							      								    76 INPLACE_ADD						  
							      10 82 SETUP_LOOP 36 ( to 120 )				    78 STORE_FAST 1 ( n )					  
							      84 LOAD_FAST 2 ( Hash )					    80 JUMP_FORWARD 10 ( to 106 )				  
							      86 GET_ITER						    								  
							      >> 88 FOR_ITER 28 ( to 118 )				    100 >> 82 LOAD_FAST 1 ( n )					  
							      90 STORE_FAST 3 ( i )					    84 LOAD_CONST 10 ( 2 )					  
							      								    86 INPLACE_ADD						  
							      11 92 LOAD_FAST 4 ( max_count )				    88 STORE_FAST 1 ( n )					  
							      94 LOAD_FAST 2 ( Hash )					    								  
							      96 LOAD_FAST 3 ( i )					    101 >> 90 LOAD_FAST 1 ( n )					  
							      98 BINARY_SUBSCR						    92 RETURN_VALUE						  
							      100 COMPARE_OP 0 ( < )					    NEW_LINE							  
							      102 POP_JUMP_IF_FALSE 88					    								  
							      								    								  
							      12 104 LOAD_FAST 3 ( i )					    								  
							      106 STORE_FAST 5 ( res )					    								  
							      								    								  
							      13 108 LOAD_FAST 2 ( Hash )				    								  
							      110 LOAD_FAST 3 ( i )					    								  
							      112 BINARY_SUBSCR						    								  
							      114 STORE_FAST 4 ( max_count )				    								  
							      116 JUMP_ABSOLUTE 88					    								  
							      >> 118 POP_BLOCK						    								  
							      								    								  
							      14 >> 120 LOAD_FAST 5 ( res )				    								  
							      122 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		      FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		    FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS			  FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS
--							      --							    --								  --
def printFirstRepeating ( arr , n ) :			      Disassembly of <code object printFirstRepeating at 0x7fbac<<u Disassembly of <code object printFirstRepeating at 0x7f816a6e script_not_found : None
    Min = - 1						      2 0 LOAD_CONST 1 ( - 1 )					    23 0 LOAD_CONST 1 ( - 1 )					  
    myset = dict ( )					      2 STORE_FAST 2 ( Min )					    2 STORE_FAST 1 ( n )					  
    for i in range ( n - 1 , - 1 , - 1 ) :		      								    								  
	if arr [ i ] in myset.keys ( ) :		      3 4 LOAD_GLOBAL 0 ( dict )				    24 4 SETUP_LOOP 52 ( to 54 )				  
	    Min = i					      6 CALL_FUNCTION 0						    6 LOAD_GLOBAL 0 ( range )					  
	else :						      8 STORE_FAST 3 ( myset )					    8 LOAD_FAST 0 ( arr )					  
	    myset [ arr [ i ] ] = 1			      								    10 CALL_FUNCTION 1						  
    if ( Min != - 1 ) :					      4 10 SETUP_LOOP 58 ( to 70 )				    12 GET_ITER							  
	print ( "The first repeating element is" , arr [ Min  12 LOAD_GLOBAL 1 ( range )				    >> 14 FOR_ITER 52 ( to 52 )					  
    else :						      14 LOAD_FAST 1 ( n )					    16 STORE_FAST 2 ( i )					  
	print ( "There are no repeating elements" )	      16 LOAD_CONST 2 ( 1 )					    								  
							      18 BINARY_SUBTRACT					    25 18 LOAD_FAST 1 ( n )					  
							      20 LOAD_CONST 1 ( - 1 )					    20 LOAD_METHOD 1 ( append )					  
							      22 LOAD_CONST 1 ( - 1 )					    22 LOAD_FAST 2 ( i )					  
							      24 CALL_FUNCTION 3					    24 CALL_METHOD 1						  
							      26 GET_ITER						    26 POP_TOP							  
							      >> 28 FOR_ITER 38 ( to 68 )				    28 JUMP_ABSOLUTE 14						  
							      30 STORE_FAST 4 ( i )					    >> 30 POP_BLOCK						  
							      								    >> 32 LOAD_CONST 0 ( None )					  
							      5 32 LOAD_FAST 0 ( arr )					    34 RETURN_VALUE						  
							      34 LOAD_FAST 4 ( i )					    NEW_LINE							  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 3 ( myset )					    								  
							      40 LOAD_METHOD 2 ( keys )					    								  
							      42 CALL_METHOD 0						    								  
							      44 COMPARE_OP 6 ( in )					    								  
							      46 POP_JUMP_IF_FALSE 54					    								  
							      								    								  
							      6 48 LOAD_FAST 4 ( i )					    								  
							      50 STORE_FAST 2 ( Min )					    								  
							      52 JUMP_ABSOLUTE 28					    								  
							      								    								  
							      8 >> 54 LOAD_CONST 2 ( 1 )				    								  
							      56 LOAD_FAST 3 ( myset )					    								  
							      58 LOAD_FAST 0 ( arr )					    								  
							      60 LOAD_FAST 4 ( i )					    								  
							      62 BINARY_SUBSCR						    								  
							      64 STORE_SUBSCR						    								  
							      66 JUMP_ABSOLUTE 28					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      9 >> 70 LOAD_FAST 2 ( Min )				    								  
							      72 LOAD_CONST 1 ( - 1 )					    								  
							      74 COMPARE_OP 3 ( != )					    								  
							      76 POP_JUMP_IF_FALSE 94					    								  
							      								    								  
							      10 78 LOAD_GLOBAL 3 ( print )				    								  
							      80 LOAD_CONST 3 ( 'The first repeating element is' )	    								  
							      82 LOAD_FAST 0 ( arr )					    								  
							      84 LOAD_FAST 2 ( Min )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 CALL_FUNCTION 2					    								  
							      90 POP_TOP						    								  
							      92 JUMP_FORWARD 8 ( to 102 )				    								  
							      								    								  
							      12 >> 94 LOAD_GLOBAL 3 ( print )				    								  
							      96 LOAD_CONST 4 ( 'There are no repeating elements' )	    								  
							      98 CALL_FUNCTION 1					    								  
							      100 POP_TOP						    								  
							      >> 102 LOAD_CONST 0 ( None )				    								  
							      104 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1
--							      --							    --								  --
def isProduct ( arr , n , x ) :				      Disassembly of <code object isProduct at 0x7fbac<<unk>> de40, Disassembly of <code object isProduct at 0x7f816a6828a0, file error : Traceback (most recent call last):   File
    if n < 2 :						      2 0 LOAD_FAST 1 ( n )					    100 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
	return False					      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 41, in <module>	  Fi
    s = set ( )						      4 COMPARE_OP 0 ( < )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in isProduct TypeError: 'int'
    for i in range ( 0 , n ) :				      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( n )					  object is not subscriptable
	if arr [ i ] == 0 :				      								    								  
	    if x == 0 :					      3 8 LOAD_CONST 2 ( False )				    101 8 LOAD_FAST 1 ( n )					  
		return True				      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
	    else :					      								    12 BINARY_SUBSCR						  
		continue				      4 >> 12 LOAD_GLOBAL 0 ( set )				    14 STORE_FAST 2 ( n )					  
	if x % arr [ i ] == 0 :				      14 CALL_FUNCTION 0					    								  
	    if x // arr [ i ] in s :			      16 STORE_FAST 3 ( s )					    102 16 LOAD_FAST 1 ( n )					  
		return True				      								    18 LOAD_CONST 3 ( 1 )					  
	    s.add ( arr [ i ] )				      5 18 SETUP_LOOP 94 ( to 114 )				    20 BINARY_SUBSCR						  
    return False					      20 LOAD_GLOBAL 1 ( range )				    22 STORE_FAST 3 ( n )					  
							      22 LOAD_CONST 3 ( 0 )					    								  
							      24 LOAD_FAST 1 ( n )					    103 24 LOAD_FAST 1 ( n )					  
							      26 CALL_FUNCTION 2					    26 LOAD_CONST 4 ( 1 )					  
							      28 GET_ITER						    28 BINARY_SUBSCR						  
							      >> 30 FOR_ITER 80 ( to 112 )				    30 LOAD_CONST 5 ( 1 )					  
							      32 STORE_FAST 4 ( i )					    32 BINARY_SUBSCR						  
							      								    34 LOAD_CONST 6 ( 2 )					  
							      6 34 LOAD_FAST 0 ( arr )					    36 BINARY_SUBSCR						  
							      36 LOAD_FAST 4 ( i )					    38 STORE_FAST 4 ( n )					  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_CONST 3 ( 0 )					    104 40 LOAD_FAST 1 ( n )					  
							      42 COMPARE_OP 2 ( == )					    42 LOAD_CONST 7 ( 1 )					  
							      44 POP_JUMP_IF_FALSE 60					    44 BINARY_SUBSCR						  
							      								    46 LOAD_CONST 8 ( 2 )					  
							      7 46 LOAD_FAST 2 ( x )					    48 BINARY_SUBSCR						  
							      48 LOAD_CONST 3 ( 0 )					    50 STORE_FAST 5 ( n )					  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 POP_JUMP_IF_FALSE 30					    105 52 LOAD_FAST 1 ( n )					  
							      								    54 LOAD_CONST 9 ( 1 )					  
							      8 54 LOAD_CONST 4 ( True )				    56 BINARY_SUBSCR						  
							      56 RETURN_VALUE						    58 LOAD_CONST 10 ( 2 )					  
							      								    60 BINARY_SUBSCR						  
							      10 58 JUMP_ABSOLUTE 30					    62 STORE_FAST 6 ( n )					  
							      								    								  
							      11 >> 60 LOAD_FAST 2 ( x )				    106 64 LOAD_FAST 1 ( n )					  
							      62 LOAD_FAST 0 ( arr )					    66 LOAD_CONST 10 ( 2 )					  
							      64 LOAD_FAST 4 ( i )					    68 BINARY_SUBSCR						  
							      66 BINARY_SUBSCR						    70 LOAD_CONST 11 ( 1 )					  
							      68 BINARY_MODULO						    72 BINARY_SUBSCR						  
							      70 LOAD_CONST 3 ( 0 )					    74 LOAD_CONST 12 ( 2 )					  
							      72 COMPARE_OP 2 ( == )					    76 BINARY_SUBSCR						  
							      74 POP_JUMP_IF_FALSE 30					    78 LOAD_CONST 13 ( 1 )					  
							      								    80 BINARY_SUBSCR						  
							      12 76 LOAD_FAST 2 ( x )					    82 LOAD_CONST 14 ( 2 )					  
							      78 LOAD_FAST 0 ( arr )					    84 BINARY_SUBSCR						  
							      80 LOAD_FAST 4 ( i )					    86 LOAD_CONST 15 ( 1 )					  
							      82 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      84 BINARY_FLOOR_DIVIDE					    90 LOAD_CONST 16 ( 2 )					  
							      86 LOAD_FAST 3 ( s )					    92 BINARY_SUBSCR						  
							      88 COMPARE_OP 6 ( in )					    94 LOAD_CONST 17 ( 1 )					  
							      90 POP_JUMP_IF_FALSE 96					    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 18 ( 2 )					  
							      13 92 LOAD_CONST 4 ( True )				    100 BINARY_SUBSCR						  
							      94 RETURN_VALUE						    102 LOAD_CONST 19 ( 1 )					  
							      								    104 BINARY_SUBSCR						  
							      14 >> 96 LOAD_FAST 3 ( s )				    106 LOAD_CONST 20 ( 2 )					  
							      98 LOAD_METHOD 2 ( add )					    108 BINARY_SUBSCR						  
							      100 LOAD_FAST 0 ( arr )					    110 LOAD_CONST 21 ( 1 )					  
							      102 LOAD_FAST 4 ( i )					    112 BINARY_SUBSCR						  
							      104 BINARY_SUBSCR						    114 LOAD_CONST 22 ( 2 )					  
							      106 CALL_METHOD 1						    116 BINARY_SUBSCR						  
							      108 POP_TOP						    118 LOAD_CONST 21 ( 1 )					  
							      110 JUMP_ABSOLUTE 30					    120 BINARY_SUBSCR						  
							      >> 112 POP_BLOCK						    122 LOAD_CONST 22 ( 2 )					  
							      								    124 BINARY_SUBSCR						  
							      15 >> 114 LOAD_CONST 2 ( False )				    126 LOAD_CONST 23 ( 1 )					  
							      116 RETURN_VALUE NEW_LINE					    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 22 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 23 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 22 ( 2 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 23 ( 1 )					  
							      								    144 BINARY_SUBSCR						  
							      								    146 LOAD_CONST 22 ( 2 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_CONST 23 ( 1 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 22 ( 2 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_CONST 23 ( 1 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 24 ( 2 )					  
							      								    164 BINARY_SUBSCR						  
							      								    166 LOAD_CONST 23 ( 1 )					  
							      								    168 BINARY_SUBSCR						  
							      								    170 LOAD_CONST 24 ( 2 )					  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 25 ( 2 )					  
							      								    176 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 24 ( 2 )					  
							      								    176 COMPARE_OP 2 ( == ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIZE_SUBARRAY_MAXIMUM_SUM				      SIZE_SUBARRAY_MAXIMUM_SUM					    SIZE_SUBARRAY_MAXIMUM_SUM					  SIZE_SUBARRAY_MAXIMUM_SUM
--							      --							    --								  --
def maxSubArraySum ( a , size ) :			      Disassembly of <code object maxSubArraySum at 0x7fbac<<unk>>  Disassembly of <code object maxSubArraySum at 0x7f816a673a50, script_not_found : None
    max_so_far = - maxsize - 1				      2 0 LOAD_GLOBAL 0 ( maxsize )				    20 0 LOAD_FAST 1 ( size )					  
    max_ending_here = 0					      2 UNARY_NEGATIVE						    2 LOAD_CONST 1 ( - 1 )					  
    start = 0						      4 LOAD_CONST 1 ( 1 )					    4 COMPARE_OP 2 ( == )					  
    end = 0						      6 BINARY_SUBTRACT						    6 POP_JUMP_IF_FALSE 12					  
    s = 0						      8 STORE_FAST 2 ( max_so_far )				    								  
    for i in range ( 0 , size ) :			      								    21 8 LOAD_CONST 2 ( - 1 )					  
	max_ending_here += a [ i ]			      3 10 LOAD_CONST 2 ( 0 )					    10 RETURN_VALUE						  
	if max_so_far < max_ending_here :		      12 STORE_FAST 3 ( max_ending_here )			    								  
	    max_so_far = max_ending_here		      								    22 >> 12 LOAD_FAST 1 ( size )				  
	    start = s					      4 14 LOAD_CONST 2 ( 0 )					    14 LOAD_CONST 3 ( - - 1 )					  
	    end = i					      16 STORE_FAST 4 ( start )					    16 COMPARE_OP 2 ( == )					  
	if max_ending_here < 0 :			      								    18 POP_JUMP_IF_FALSE 28					  
	    max_ending_here = 0				      5 18 LOAD_CONST 2 ( 0 )					    								  
	    s = i + 1					      20 STORE_FAST 5 ( end )					    23 20 LOAD_CONST 4 ( - 1 )					  
    return ( end - start + 1 )				      								    22 RETURN_VALUE						  
							      6 22 LOAD_CONST 2 ( 0 )					    								  
							      24 STORE_FAST 6 ( s )					    24 >> 24 LOAD_CONST 5 ( - 1 )				  
							      								    26 RETURN_VALUE						  
							      7 26 SETUP_LOOP 70 ( to 98 )				    28 LOAD_CONST 6 ( None )					  
							      28 LOAD_GLOBAL 1 ( range )				    30 RETURN_VALUE						  
							      30 LOAD_CONST 2 ( 0 )					    NEW_LINE							  
							      32 LOAD_FAST 1 ( size )					    								  
							      34 CALL_FUNCTION 2					    								  
							      36 GET_ITER						    								  
							      >> 38 FOR_ITER 56 ( to 96 )				    								  
							      40 STORE_FAST 7 ( i )					    								  
							      								    								  
							      8 42 LOAD_FAST 3 ( max_ending_here )			    								  
							      44 LOAD_FAST 0 ( a )					    								  
							      46 LOAD_FAST 7 ( i )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 INPLACE_ADD						    								  
							      52 STORE_FAST 3 ( max_ending_here )			    								  
							      								    								  
							      9 54 LOAD_FAST 2 ( max_so_far )				    								  
							      56 LOAD_FAST 3 ( max_ending_here )			    								  
							      58 COMPARE_OP 0 ( < )					    								  
							      60 POP_JUMP_IF_FALSE 74					    								  
							      								    								  
							      10 62 LOAD_FAST 3 ( max_ending_here )			    								  
							      64 STORE_FAST 2 ( max_so_far )				    								  
							      								    								  
							      11 66 LOAD_FAST 6 ( s )					    								  
							      68 STORE_FAST 4 ( start )					    								  
							      								    								  
							      12 70 LOAD_FAST 7 ( i )					    								  
							      72 STORE_FAST 5 ( end )					    								  
							      								    								  
							      13 >> 74 LOAD_FAST 3 ( max_ending_here )			    								  
							      76 LOAD_CONST 2 ( 0 )					    								  
							      78 COMPARE_OP 0 ( < )					    								  
							      80 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      14 82 LOAD_CONST 2 ( 0 )					    								  
							      84 STORE_FAST 3 ( max_ending_here )			    								  
							      								    								  
							      15 86 LOAD_FAST 7 ( i )					    								  
							      88 LOAD_CONST 1 ( 1 )					    								  
							      90 BINARY_ADD						    								  
							      92 STORE_FAST 6 ( s )					    								  
							      94 JUMP_ABSOLUTE 38					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      16 >> 98 LOAD_FAST 5 ( end )				    								  
							      100 LOAD_FAST 4 ( start )					    								  
							      102 BINARY_SUBTRACT					    								  
							      104 LOAD_CONST 1 ( 1 )					    								  
							      106 BINARY_ADD						    								  
							      108 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			      K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			    K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			  K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS
--							      --							    --								  --
def KMaxCombinations ( A , B , N , K ) :		      Disassembly of <code object KMaxCombinations at 0x7fbac<<unk> Disassembly of <code object KMaxCombinations at 0x7f816a6e4b7 script_not_found : None
    pq = PriorityQueue ( )				      2 0 LOAD_GLOBAL 0 ( PriorityQueue )			    26 0 LOAD_GLOBAL 0 ( pq )					  
    for i in range ( 0 , N ) :				      2 CALL_FUNCTION 0						    2 LOAD_ATTR 1 ( PriorityQueue )				  
	for j in range ( 0 , N ) :			      4 STORE_FAST 4 ( pq )					    4 LOAD_FAST 0 ( A )						  
	    a = A [ i ] + B [ j ]			      								    6 LOAD_FAST 1 ( B )						  
	    pq.put ( ( - a , a ) )			      3 6 SETUP_LOOP 70 ( to 78 )				    8 LOAD_FAST 2 ( n )						  
    count = 0						      8 LOAD_GLOBAL 1 ( range )					    10 LOAD_FAST 3 ( n )					  
    while ( count < K ) :				      10 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( ( 'n' , 'n' ) )				  
	print ( pq.get ( ) [ 1 ] )			      12 LOAD_FAST 2 ( N )					    14 CALL_FUNCTION_KW 3					  
	count = count + 1				      14 CALL_FUNCTION 2					    16 STORE_FAST 4 ( pq )					  
							      16 GET_ITER						    								  
							      >> 18 FOR_ITER 56 ( to 76 )				    27 18 LOAD_FAST 4 ( pq )					  
							      20 STORE_FAST 5 ( i )					    20 LOAD_CONST 2 ( 0 )					  
							      								    22 BINARY_SUBSCR						  
							      4 22 SETUP_LOOP 50 ( to 74 )				    24 STORE_FAST 5 ( pq )					  
							      24 LOAD_GLOBAL 1 ( range )				    								  
							      26 LOAD_CONST 1 ( 0 )					    28 26 LOAD_FAST 5 ( pq )					  
							      28 LOAD_FAST 2 ( N )					    28 LOAD_CONST 3 ( 1 )					  
							      30 CALL_FUNCTION 2					    30 BINARY_SUBSCR						  
							      32 GET_ITER						    32 STORE_FAST 6 ( pq )					  
							      >> 34 FOR_ITER 36 ( to 72 )				    								  
							      36 STORE_FAST 6 ( j )					    29 34 LOAD_FAST 6 ( pq )					  
							      								    36 LOAD_FAST 5 ( pq )					  
							      5 38 LOAD_FAST 0 ( A )					    38 LOAD_CONST 4 ( 1 )					  
							      40 LOAD_FAST 5 ( i )					    40 BINARY_SUBSCR						  
							      42 BINARY_SUBSCR						    42 LOAD_FAST 6 ( pq )					  
							      44 LOAD_FAST 1 ( B )					    44 LOAD_CONST 5 ( 1 )					  
							      46 LOAD_FAST 6 ( j )					    46 BINARY_SUBSCR						  
							      48 BINARY_SUBSCR						    48 LOAD_FAST 6 ( pq )					  
							      50 BINARY_ADD						    50 LOAD_CONST 6 ( 1 )					  
							      52 STORE_FAST 7 ( a )					    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 5 ( pq )					  
							      6 54 LOAD_FAST 4 ( pq )					    56 LOAD_CONST 7 ( 1 )					  
							      56 LOAD_METHOD 2 ( put )					    58 BINARY_SUBSCR						  
							      58 LOAD_FAST 7 ( a )					    60 BINARY_SUBSCR						  
							      60 UNARY_NEGATIVE						    62 LOAD_FAST 6 ( pq )					  
							      62 LOAD_FAST 7 ( a )					    64 LOAD_CONST 8 ( 1 )					  
							      64 BUILD_TUPLE 2						    66 BINARY_SUBSCR						  
							      66 CALL_METHOD 1						    68 BINARY_SUBSCR						  
							      68 POP_TOP						    70 LOAD_FAST 5 ( pq )					  
							      70 JUMP_ABSOLUTE 34					    72 LOAD_CONST 9 ( 1 )					  
							      >> 72 POP_BLOCK						    74 BINARY_SUBSCR						  
							      >> 74 JUMP_ABSOLUTE 18					    76 LOAD_FAST 6 ( pq )					  
							      >> 76 POP_BLOCK						    78 LOAD_CONST 10 ( 1 )					  
							      								    80 BINARY_SUBSCR						  
							      7 >> 78 LOAD_CONST 1 ( 0 )				    82 LOAD_FAST 5 ( pq )					  
							      80 STORE_FAST 8 ( count )					    84 LOAD_CONST 11 ( 1 )					  
							      								    86 BINARY_SUBSCR						  
							      8 82 SETUP_LOOP 36 ( to 120 )				    88 LOAD_FAST 6 ( pq )					  
							      >> 84 LOAD_FAST 8 ( count )				    90 LOAD_CONST 12 ( 1 )					  
							      86 LOAD_FAST 3 ( K )					    92 BINARY_SUBSCR						  
							      88 COMPARE_OP 0 ( < )					    94 BINARY_SUBTRACT						  
							      90 POP_JUMP_IF_FALSE 118					    96 LOAD_FAST 6 ( pq )					  
							      								    98 LOAD_CONST 13 ( 1 )					  
							      9 92 LOAD_GLOBAL 3 ( print )				    100 BINARY_SUBSCR						  
							      94 LOAD_FAST 4 ( pq )					    102 LOAD_CONST 14 ( 1 )					  
							      96 LOAD_METHOD 4 ( get )					    104 BINARY_SUBSCR						  
							      98 CALL_METHOD 0						    106 LOAD_CONST 15 ( 1 )					  
							      100 LOAD_CONST 2 ( 1 )					    108 BINARY_SUBSCR						  
							      102 BINARY_SUBSCR						    110 BINARY_SUBTRACT						  
							      104 CALL_FUNCTION 1					    112 LOAD_FAST 6 ( pq )					  
							      106 POP_TOP						    114 LOAD_CONST 16 ( 1 )					  
							      								    116 BINARY_SUBSCR						  
							      10 108 LOAD_FAST 8 ( count )				    118 BINARY_SUBTRACT						  
							      110 LOAD_CONST 2 ( 1 )					    120 LOAD_FAST 6 ( pq )					  
							      112 BINARY_ADD						    122 LOAD_CONST 17 ( 1 )					  
							      114 STORE_FAST 8 ( count )				    124 BINARY_SUBSCR						  
							      116 JUMP_ABSOLUTE 84					    126 BINARY_SUBTRACT						  
							      >> 118 POP_BLOCK						    128 LOAD_FAST 6 ( pq )					  
							      >> 120 LOAD_CONST 0 ( None )				    130 LOAD_CONST 18 ( 1 )					  
							      122 RETURN_VALUE NEW_LINE					    132 BINARY_SUBSCR						  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 6 ( pq )					  
							      								    138 LOAD_CONST 19 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 6 ( pq )					  
							      								    146 LOAD_CONST 20 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 6 ( pq )					  
							      								    154 LOAD_CONST 21 ( 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 BINARY_SUBTRACT						  
							      								    160 BINARY_SUBTRACT						  
							      								    162 LOAD_FAST 6 ( pq )					  
							      								    164 LOAD_CONST 21 ( 1 )					  
							      								    162								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING	      PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
def productAtKthLevel ( tree , k ) :			      Disassembly of <code object productAtKthLevel at 0x7fbac0e8bc Disassembly of <code object productAtKthLevel at 0x7f816a673a error : Traceback (most recent call last):   File
    level = - 1						      2 0 LOAD_CONST 1 ( - 1 )					    26 0 LOAD_FAST 1 ( k )					  "XLM/dis_script.py", line 60, in <module>	exec
    product = 1						      2 STORE_FAST 2 ( level )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 39, in <module>	  Fi
    n = len ( tree )					      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in productAtKthLevel TypeError
    for i in range ( 0 , n ) :				      3 4 LOAD_CONST 2 ( 1 )					    6 STORE_FAST 2 ( new_nodes )				  : 'int' object is not subscriptable
	if ( tree [ i ] == '(' ) :			      6 STORE_FAST 3 ( product )				    								  
	    level += 1					      								    27 8 LOAD_FAST 2 ( new_nodes )				  
	elif ( tree [ i ] == ')' ) :			      4 8 LOAD_GLOBAL 0 ( len )					    10 LOAD_CONST 2 ( 0 )					  
	    level -= 1					      10 LOAD_FAST 0 ( tree )					    12 BINARY_SUBSCR						  
	else :						      12 CALL_FUNCTION 1					    14 STORE_FAST 3 ( new_nodes )				  
	    if ( level == k ) :				      14 STORE_FAST 4 ( n )					    								  
		product *= ( int ( tree [ i ] ) - int ( '0' ) 								    28 16 LOAD_FAST 3 ( new_nodes )				  
    return product					      5 16 SETUP_LOOP 94 ( to 112 )				    18 LOAD_CONST 3 ( 2 )					  
							      18 LOAD_GLOBAL 1 ( range )				    20 BINARY_SUBSCR						  
							      20 LOAD_CONST 3 ( 0 )					    22 STORE_FAST 4 ( new_nodes )				  
							      22 LOAD_FAST 4 ( n )					    								  
							      24 CALL_FUNCTION 2					    29 24 LOAD_FAST 0 ( tree )					  
							      26 GET_ITER						    26 LOAD_CONST 4 ( '' )					  
							      >> 28 FOR_ITER 80 ( to 110 )				    28 COMPARE_OP 2 ( == )					  
							      30 STORE_FAST 5 ( i )					    30 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 32 LOAD_FAST 0 ( tree )					    30 32 LOAD_FAST 0 ( tree )					  
							      34 LOAD_FAST 5 ( i )					    34 LOAD_CONST 5 ( '' )					  
							      36 BINARY_SUBSCR						    36 COMPARE_OP 2 ( == )					  
							      38 LOAD_CONST 4 ( '(' )					    38 POP_JUMP_IF_FALSE 44					  
							      40 COMPARE_OP 2 ( == )					    								  
							      42 POP_JUMP_IF_FALSE 54					    31 40 LOAD_FAST 0 ( tree )					  
							      								    42 LOAD_CONST 6 ( '' )					  
							      7 44 LOAD_FAST 2 ( level )				    44 COMPARE_OP 2 ( == )					  
							      46 LOAD_CONST 2 ( 1 )					    46 POP_JUMP_IF_FALSE 44					  
							      48 INPLACE_ADD						    								  
							      50 STORE_FAST 2 ( level )					    32 48 LOAD_FAST 0 ( tree )					  
							      52 JUMP_ABSOLUTE 28					    50 LOAD_CONST 7 ( '' )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      8 >> 54 LOAD_FAST 0 ( tree )				    54 POP_JUMP_IF_FALSE 44					  
							      56 LOAD_FAST 5 ( i )					    								  
							      58 BINARY_SUBSCR						    33 56 LOAD_FAST 0 ( tree )					  
							      60 LOAD_CONST 5 ( ')' )					    58 LOAD_CONST 8 ( '' )					  
							      62 COMPARE_OP 2 ( == )					    60 COMPARE_OP 2 ( == )					  
							      64 POP_JUMP_IF_FALSE 76					    62 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      9 66 LOAD_FAST 2 ( level )				    34 64 LOAD_FAST 0 ( tree )					  
							      68 LOAD_CONST 2 ( 1 )					    66 LOAD_CONST 9 ( '' )					  
							      70 INPLACE_SUBTRACT					    68 COMPARE_OP 2 ( == )					  
							      72 STORE_FAST 2 ( level )					    70 POP_JUMP_IF_FALSE 44					  
							      74 JUMP_ABSOLUTE 28					    								  
							      								    35 72 LOAD_FAST 0 ( tree )					  
							      11 >> 76 LOAD_FAST 2 ( level )				    74 LOAD_METHOD 10 ( append )				  
							      78 LOAD_FAST 1 ( k )					    76 LOAD_FAST 3 ( new_nodes )				  
							      80 COMPARE_OP 2 ( == )					    78 CALL_METHOD 1						  
							      82 POP_JUMP_IF_FALSE 28					    80 POP_TOP							  
							      								    								  
							      12 84 LOAD_FAST 3 ( product )				    36 >> 82 LOAD_FAST 0 ( tree )				  
							      86 LOAD_GLOBAL 2 ( int )					    84 LOAD_METHOD 11 ( append )				  
							      88 LOAD_FAST 0 ( tree )					    86 LOAD_FAST 3 ( new_nodes )				  
							      90 LOAD_FAST 5 ( i )					    88 CALL_METHOD 1						  
							      92 BINARY_SUBSCR						    90 POP_TOP							  
							      94 CALL_FUNCTION 1					    								  
							      96 LOAD_GLOBAL 2 ( int )					    37 >> 92 LOAD_FAST 0 ( tree )				  
							      98 LOAD_CONST 6 ( '0' )					    94 RETURN_VALUE						  
							      100 CALL_FUNCTION 1					    NEW_LINE							  
							      102 BINARY_SUBTRACT					    								  
							      104 INPLACE_MULTIPLY					    								  
							      106 STORE_FAST 3 ( product )				    								  
							      108 JUMP_ABSOLUTE 28					    								  
							      >> 110 POP_BLOCK						    								  
							      								    								  
							      13 >> 112 LOAD_FAST 3 ( product )				    								  
							      114 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER_1					      SUM_FACTORS_NUMBER_1					    SUM_FACTORS_NUMBER_1					  SUM_FACTORS_NUMBER_1
--							      --							    --								  --
def sumofFactors ( n ) :				      Disassembly of <code object sumofFactors at 0x7fbac0e89d20, f Disassembly of <code object sumofFactors at 0x7f816a673a50, f script_not_found : None
    res = 1						      2 0 LOAD_CONST 1 ( 1 )					    26 0 LOAD_CONST 1 ( 1 )					  
    for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :	      2 STORE_FAST 1 ( res )					    2 STORE_FAST 1 ( res )					  
	curr_sum = 1					      								    								  
	curr_term = 1					      3 4 SETUP_LOOP 90 ( to 96 )				    27 4 LOAD_FAST 1 ( res )					  
	while n % i == 0 :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_METHOD 0 ( append )					  
	    n = n / i ;					      8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 1 )					  
	    curr_term = curr_term * i ;			      10 LOAD_GLOBAL 1 ( int )					    10 CALL_METHOD 1						  
	    curr_sum += curr_term ;			      12 LOAD_GLOBAL 2 ( m )					    12 POP_TOP							  
	res = res * curr_sum				      14 LOAD_METHOD 3 ( sqrt )					    14 LOAD_CONST 0 ( None )					  
    if n > 2 :						      16 LOAD_FAST 0 ( n )					    16 RETURN_VALUE						  
	res = res * ( 1 + n )				      18 CALL_METHOD 1						    NEW_LINE							  
    return res ;					      20 LOAD_CONST 1 ( 1 )					    								  
							      22 BINARY_ADD						    								  
							      24 CALL_FUNCTION 1					    								  
							      26 CALL_FUNCTION 2					    								  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 62 ( to 94 )				    								  
							      32 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 34 LOAD_CONST 1 ( 1 )					    								  
							      36 STORE_FAST 3 ( curr_sum )				    								  
							      								    								  
							      5 38 LOAD_CONST 1 ( 1 )					    								  
							      40 STORE_FAST 4 ( curr_term )				    								  
							      								    								  
							      6 42 SETUP_LOOP 40 ( to 84 )				    								  
							      >> 44 LOAD_FAST 0 ( n )					    								  
							      46 LOAD_FAST 2 ( i )					    								  
							      48 BINARY_MODULO						    								  
							      50 LOAD_CONST 3 ( 0 )					    								  
							      52 COMPARE_OP 2 ( == )					    								  
							      54 POP_JUMP_IF_FALSE 82					    								  
							      								    								  
							      7 56 LOAD_FAST 0 ( n )					    								  
							      58 LOAD_FAST 2 ( i )					    								  
							      60 BINARY_TRUE_DIVIDE					    								  
							      62 STORE_FAST 0 ( n )					    								  
							      								    								  
							      8 64 LOAD_FAST 4 ( curr_term )				    								  
							      66 LOAD_FAST 2 ( i )					    								  
							      68 BINARY_MULTIPLY					    								  
							      70 STORE_FAST 4 ( curr_term )				    								  
							      								    								  
							      9 72 LOAD_FAST 3 ( curr_sum )				    								  
							      74 LOAD_FAST 4 ( curr_term )				    								  
							      76 INPLACE_ADD						    								  
							      78 STORE_FAST 3 ( curr_sum )				    								  
							      80 JUMP_ABSOLUTE 44					    								  
							      >> 82 POP_BLOCK						    								  
							      								    								  
							      10 >> 84 LOAD_FAST 1 ( res )				    								  
							      86 LOAD_FAST 3 ( curr_sum )				    								  
							      88 BINARY_MULTIPLY					    								  
							      90 STORE_FAST 1 ( res )					    								  
							      92 JUMP_ABSOLUTE 30					    								  
							      >> 94 POP_BLOCK						    								  
							      								    								  
							      11 >> 96 LOAD_FAST 0 ( n )				    								  
							      98 LOAD_CONST 2 ( 2 )					    								  
							      100 COMPARE_OP 4 ( > )					    								  
							      102 POP_JUMP_IF_FALSE 116					    								  
							      								    								  
							      12 104 LOAD_FAST 1 ( res )				    								  
							      106 LOAD_CONST 1 ( 1 )					    								  
							      108 LOAD_FAST 0 ( n )					    								  
							      110 BINARY_ADD						    								  
							      112 BINARY_MULTIPLY					    								  
							      114 STORE_FAST 1 ( res )					    								  
							      								    								  
							      13 >> 116 LOAD_FAST 1 ( res )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK			      NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK				    NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK				  NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK
--							      --							    --								  --
def countSubsequences ( s ) :				      Disassembly of <code object countSubsequences at 0x7fbac0e8bc Disassembly of <code object countSubsequences at 0x7f816a673a error : Traceback (most recent call last):   File
    aCount = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( cCount )					  "XLM/dis_script.py", line 60, in <module>	exec
    bCount = 0						      2 STORE_FAST 1 ( aCount )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 38, in <module>	  Fi
    cCount = 0						      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in countSubsequences UnboundLo
    for i in range ( len ( s ) ) :			      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 2 ( s )					  calError: local variable 'cCount' referenced befor
	if ( s [ i ] == 'a' ) :				      6 STORE_FAST 2 ( bCount )					    								  e assignment
	    aCount = ( 1 + 2 * aCount )			      								    27 8 LOAD_FAST 0 ( s )					  
	elif ( s [ i ] == 'b' ) :			      4 8 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
	    bCount = ( aCount + 2 * bCount )		      10 STORE_FAST 3 ( cCount )				    12 BINARY_SUBSCR						  
	elif ( s [ i ] == 'c' ) :			      								    14 STORE_FAST 3 ( s )					  
	    cCount = ( bCount + 2 * cCount )		      5 12 SETUP_LOOP 96 ( to 110 )				    								  
    return cCount					      14 LOAD_GLOBAL 0 ( range )				    28 16 LOAD_FAST 0 ( s )					  
							      16 LOAD_GLOBAL 1 ( len )					    18 LOAD_CONST 3 ( 1 )					  
							      18 LOAD_FAST 0 ( s )					    20 BINARY_SUBSCR						  
							      20 CALL_FUNCTION 1					    22 STORE_FAST 4 ( s )					  
							      22 CALL_FUNCTION 1					    								  
							      24 GET_ITER						    29 24 LOAD_FAST 0 ( s )					  
							      >> 26 FOR_ITER 80 ( to 108 )				    26 LOAD_CONST 4 ( '' )					  
							      28 STORE_FAST 4 ( i )					    28 COMPARE_OP 2 ( == )					  
							      								    30 POP_JUMP_IF_FALSE 44					  
							      6 30 LOAD_FAST 0 ( s )					    								  
							      32 LOAD_FAST 4 ( i )					    30 32 LOAD_FAST 0 ( s )					  
							      34 BINARY_SUBSCR						    34 LOAD_CONST 5 ( 1 )					  
							      36 LOAD_CONST 2 ( 'a' )					    36 BINARY_SUBSCR						  
							      38 COMPARE_OP 2 ( == )					    38 STORE_FAST 5 ( s )					  
							      40 POP_JUMP_IF_FALSE 56					    								  
							      								    31 40 LOAD_FAST 0 ( s )					  
							      7 42 LOAD_CONST 3 ( 1 )					    42 LOAD_CONST 6 ( '' )					  
							      44 LOAD_CONST 4 ( 2 )					    44 COMPARE_OP 2 ( == )					  
							      46 LOAD_FAST 1 ( aCount )					    46 POP_JUMP_IF_FALSE 44					  
							      48 BINARY_MULTIPLY					    								  
							      50 BINARY_ADD						    32 48 LOAD_FAST 0 ( s )					  
							      52 STORE_FAST 1 ( aCount )				    50 LOAD_CONST 7 ( '' )					  
							      54 JUMP_ABSOLUTE 26					    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      8 >> 56 LOAD_FAST 0 ( s )					    								  
							      58 LOAD_FAST 4 ( i )					    33 56 LOAD_FAST 0 ( s )					  
							      60 BINARY_SUBSCR						    58 LOAD_CONST 8 ( '' )					  
							      62 LOAD_CONST 5 ( 'b' )					    60 COMPARE_OP 2 ( == )					  
							      64 COMPARE_OP 2 ( == )					    62 POP_JUMP_IF_FALSE 44					  
							      66 POP_JUMP_IF_FALSE 82					    								  
							      								    34 64 LOAD_FAST 0 ( s )					  
							      9 68 LOAD_FAST 1 ( aCount )				    66 LOAD_CONST 9 ( '' )					  
							      70 LOAD_CONST 4 ( 2 )					    68 COMPARE_OP 2 ( == )					  
							      72 LOAD_FAST 2 ( bCount )					    70 POP_JUMP_IF_FALSE 80					  
							      74 BINARY_MULTIPLY					    								  
							      76 BINARY_ADD						    35 72 LOAD_FAST 0 ( s )					  
							      78 STORE_FAST 2 ( bCount )				    74 LOAD_CONST 10 ( '' )					  
							      80 JUMP_ABSOLUTE 26					    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 80					  
							      10 >> 82 LOAD_FAST 0 ( s )				    								  
							      84 LOAD_FAST 4 ( i )					    36 80 LOAD_FAST 0 ( s )					  
							      86 BINARY_SUBSCR						    82 LOAD_CONST 11 ( '' )					  
							      88 LOAD_CONST 6 ( 'c' )					    84 COMPARE_OP 2 ( == )					  
							      90 COMPARE_OP 2 ( == )					    86 POP_JUMP_IF_FALSE 80					  
							      92 POP_JUMP_IF_FALSE 26					    								  
							      								    37 88 LOAD_FAST 0 ( s )					  
							      11 94 LOAD_FAST 2 ( bCount )				    90 LOAD_CONST 12 ( '' )					  
							      96 LOAD_CONST 4 ( 2 )					    92 COMPARE_OP 2 ( == )					  
							      98 LOAD_FAST 3 ( cCount )					    94 POP_JUMP_IF_FALSE 80					  
							      100 BINARY_MULTIPLY					    								  
							      102 BINARY_ADD						    38 >> 96 LOAD_FAST 0 ( s )					  
							      104 STORE_FAST 3 ( cCount )				    98 LOAD_CONST 13 ( '' )					  
							      106 JUMP_ABSOLUTE 26					    100 COMPARE_OP 2 ( == )					  
							      >> 108 POP_BLOCK						    102 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      12 >> 110 LOAD_FAST 3 ( cCount )				    39 104 LOAD_FAST 0 ( s )					  
							      112 RETURN_VALUE NEW_LINE					    106 LOAD_CONST 14 ( '' )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    40 112 LOAD_FAST 0 ( s )					  
							      								    114 LOAD_CONST 15 ( '' )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      								    								  
							      								    41 120 LOAD_FAST 0 ( s )					  
							      								    122 LOAD_CONST 16 ( '' )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    42 128 LOAD_FAST 0 ( s )					  
							      								    130 LOAD_CONST 17 ( 1 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 >> 136 LOAD_FAST 0 ( s )					  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING
--							      --							    --								  --
def shuffleArray ( a , n ) :				      Disassembly of <code object shuffleArray at 0x7fbac0e89d20, f Disassembly of <code object shuffleArray at 0x7f816a6e4b70, f script_not_found : None
    i , q , k = 0 , 1 , n				      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( n )					  
    while ( i < n ) :					      2 LOAD_CONST 2 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
	j = k						      4 LOAD_FAST 1 ( n )					    4 INPLACE_ADD						  
	while ( j > i + q ) :				      6 ROT_THREE						    6 STORE_FAST 1 ( n )					  
	    a [ j - 1 ] , a [ j ] = a [ j ] , a [ j - 1 ]     8 ROT_TWO							    								  
	    j -= 1					      10 STORE_FAST 2 ( i )					    27 8 LOAD_FAST 1 ( n )					  
	i += 1						      12 STORE_FAST 3 ( q )					    10 LOAD_CONST 2 ( 1 )					  
	k += 1						      14 STORE_FAST 4 ( k )					    12 INPLACE_ADD						  
	q += 1						      								    14 STORE_FAST 1 ( n )					  
							      3 16 SETUP_LOOP 100 ( to 118 )				    								  
							      >> 18 LOAD_FAST 2 ( i )					    28 16 LOAD_FAST 1 ( n )					  
							      20 LOAD_FAST 1 ( n )					    18 LOAD_CONST 3 ( 1 )					  
							      22 COMPARE_OP 0 ( < )					    20 INPLACE_ADD						  
							      24 POP_JUMP_IF_FALSE 116					    22 STORE_FAST 1 ( n )					  
							      								    								  
							      4 26 LOAD_FAST 4 ( k )					    29 24 LOAD_FAST 1 ( n )					  
							      28 STORE_FAST 5 ( j )					    26 LOAD_CONST 4 ( 2 )					  
							      								    28 INPLACE_ADD						  
							      5 30 SETUP_LOOP 58 ( to 90 )				    30 STORE_FAST 1 ( n )					  
							      >> 32 LOAD_FAST 5 ( j )					    								  
							      34 LOAD_FAST 2 ( i )					    30 32 LOAD_FAST 1 ( n )					  
							      36 LOAD_FAST 3 ( q )					    34 LOAD_CONST 5 ( 1 )					  
							      38 BINARY_ADD						    36 INPLACE_ADD						  
							      40 COMPARE_OP 4 ( > )					    38 STORE_FAST 1 ( n )					  
							      42 POP_JUMP_IF_FALSE 88					    								  
							      								    31 40 LOAD_FAST 1 ( n )					  
							      6 44 LOAD_FAST 0 ( a )					    42 LOAD_CONST 6 ( 2 )					  
							      46 LOAD_FAST 5 ( j )					    44 INPLACE_ADD						  
							      48 BINARY_SUBSCR						    46 STORE_FAST 1 ( n )					  
							      50 LOAD_FAST 0 ( a )					    								  
							      52 LOAD_FAST 5 ( j )					    32 48 LOAD_FAST 1 ( n )					  
							      54 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 7 ( 3 )					  
							      56 BINARY_SUBTRACT					    52 INPLACE_ADD						  
							      58 BINARY_SUBSCR						    54 STORE_FAST 1 ( n )					  
							      60 ROT_TWO						    								  
							      62 LOAD_FAST 0 ( a )					    33 56 LOAD_FAST 1 ( n )					  
							      64 LOAD_FAST 5 ( j )					    58 LOAD_CONST 8 ( 2 )					  
							      66 LOAD_CONST 2 ( 1 )					    60 INPLACE_ADD						  
							      68 BINARY_SUBTRACT					    62 STORE_FAST 1 ( n )					  
							      70 STORE_SUBSCR						    								  
							      72 LOAD_FAST 0 ( a )					    34 64 LOAD_FAST 1 ( n )					  
							      74 LOAD_FAST 5 ( j )					    66 LOAD_CONST 9 ( 2 )					  
							      76 STORE_SUBSCR						    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( n )					  
							      7 78 LOAD_FAST 5 ( j )					    								  
							      80 LOAD_CONST 2 ( 1 )					    35 72 LOAD_FAST 1 ( n )					  
							      82 INPLACE_SUBTRACT					    74 LOAD_CONST 10 ( 2 )					  
							      84 STORE_FAST 5 ( j )					    76 INPLACE_ADD						  
							      86 JUMP_ABSOLUTE 32					    78 STORE_FAST 1 ( n )					  
							      >> 88 POP_BLOCK						    								  
							      								    36 80 LOAD_FAST 1 ( n )					  
							      8 >> 90 LOAD_FAST 2 ( i )					    82 LOAD_CONST 11 ( 3 )					  
							      92 LOAD_CONST 2 ( 1 )					    84 INPLACE_ADD						  
							      94 INPLACE_ADD						    86 STORE_FAST 1 ( n )					  
							      96 STORE_FAST 2 ( i )					    								  
							      								    37 88 LOAD_FAST 1 ( n )					  
							      9 98 LOAD_FAST 4 ( k )					    90 LOAD_CONST 12 ( 2 )					  
							      100 LOAD_CONST 2 ( 1 )					    92 INPLACE_ADD						  
							      102 INPLACE_ADD						    94 STORE_FAST 1 ( n )					  
							      104 STORE_FAST 4 ( k )					    								  
							      								    38 96 LOAD_FAST 1 ( n )					  
							      10 106 LOAD_FAST 3 ( q )					    98 LOAD_FAST 1 ( n )					  
							      108 LOAD_CONST 2 ( 1 )					    100 INPLACE_ADD						  
							      110 INPLACE_ADD						    102 STORE_FAST 1 ( n )					  
							      112 STORE_FAST 3 ( q )					    104 INPLACE_ADD						  
							      114 JUMP_ABSOLUTE 18					    106 STORE_FAST 1 ( n )					  
							      >> 116 POP_BLOCK						    								  
							      >> 118 LOAD_CONST 0 ( None )				    39 108 LOAD_FAST 1 ( n )					  
							      120 RETURN_VALUE NEW_LINE					    110 LOAD_FAST 1 ( n )					  
							      								    112 INPLACE_ADD						  
							      								    114 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 116 LOAD_FAST 1 ( n )					  
							      								    118 LOAD_FAST 0 ( a )					  
							      								    120 INPLACE_ADD						  
							      								    122 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 124 LOAD_FAST 1 ( n )					  
							      								    126 LOAD_FAST 1 ( n )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_FAST 1 ( n )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    43 140 LOAD_FAST 1 ( n )					  
							      								    142 LOAD_FAST 1 ( n )					  
							      								    144 INPLACE_ADD						  
							      								    146 STORE_FAST 1 ( n )					  
							      								    148 LOAD_CONST 13 ( 1 )					  
							      								    150 INPLACE_ADD						  
							      								    152 STORE_FAST 1 ( n )					  
							      								    								  
							      								    44 154 LOAD_FAST 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		      FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		    FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		  FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING
--							      --							    --								  --
def count ( a , b , m , n ) :				      Disassembly of <code object count at 0x7fbac0e89d20, file "<d Disassembly of <code object count at 0x7f816a673a50, file "<d script_not_found : None
    if ( ( m == 0 and n == 0 ) or n == 0 ) :		      2 0 LOAD_FAST 2 ( m )					    26 0 LOAD_FAST 0 ( a )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( m == 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 0					      6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 12					  
    if ( a [ m - 1 ] == b [ n - 1 ] ) :			      8 LOAD_FAST 3 ( n )					    								  
	return ( count ( a , b , m - 1 , n - 1 ) + count ( a  10 LOAD_CONST 1 ( 0 )					    27 8 LOAD_CONST 2 ( 1 )					  
    else :						      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
	return count ( a , b , m - 1 , n )		      14 POP_JUMP_IF_TRUE 24					    								  
							      >> 16 LOAD_FAST 3 ( n )					    28 >> 12 LOAD_FAST 0 ( a )					  
							      18 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      20 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      22 POP_JUMP_IF_FALSE 28					    18 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      3 >> 24 LOAD_CONST 2 ( 1 )				    29 20 LOAD_CONST 3 ( 1 )					  
							      26 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      4 >> 28 LOAD_FAST 2 ( m )					    30 >> 24 LOAD_CONST 4 ( 1 )					  
							      30 LOAD_CONST 1 ( 0 )					    26 RETURN_VALUE						  
							      32 COMPARE_OP 2 ( == )					    28 LOAD_CONST 0 ( None )					  
							      34 POP_JUMP_IF_FALSE 40					    30 RETURN_VALUE						  
							      								    NEW_LINE							  
							      5 36 LOAD_CONST 1 ( 0 )					    								  
							      38 RETURN_VALUE						    								  
							      								    								  
							      6 >> 40 LOAD_FAST 0 ( a )					    								  
							      42 LOAD_FAST 2 ( m )					    								  
							      44 LOAD_CONST 2 ( 1 )					    								  
							      46 BINARY_SUBTRACT					    								  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_FAST 1 ( b )					    								  
							      52 LOAD_FAST 3 ( n )					    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_SUBSCR						    								  
							      60 COMPARE_OP 2 ( == )					    								  
							      62 POP_JUMP_IF_FALSE 104					    								  
							      								    								  
							      7 64 LOAD_GLOBAL 0 ( count )				    								  
							      66 LOAD_FAST 0 ( a )					    								  
							      68 LOAD_FAST 1 ( b )					    								  
							      70 LOAD_FAST 2 ( m )					    								  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 BINARY_SUBTRACT					    								  
							      76 LOAD_FAST 3 ( n )					    								  
							      78 LOAD_CONST 2 ( 1 )					    								  
							      80 BINARY_SUBTRACT					    								  
							      82 CALL_FUNCTION 4					    								  
							      84 LOAD_GLOBAL 0 ( count )				    								  
							      86 LOAD_FAST 0 ( a )					    								  
							      88 LOAD_FAST 1 ( b )					    								  
							      90 LOAD_FAST 2 ( m )					    								  
							      92 LOAD_CONST 2 ( 1 )					    								  
							      94 BINARY_SUBTRACT					    								  
							      96 LOAD_FAST 3 ( n )					    								  
							      98 CALL_FUNCTION 4					    								  
							      100 BINARY_ADD						    								  
							      102 RETURN_VALUE						    								  
							      								    								  
							      9 >> 104 LOAD_GLOBAL 0 ( count )				    								  
							      106 LOAD_FAST 0 ( a )					    								  
							      108 LOAD_FAST 1 ( b )					    								  
							      110 LOAD_FAST 2 ( m )					    								  
							      112 LOAD_CONST 2 ( 1 )					    								  
							      114 BINARY_SUBTRACT					    								  
							      116 LOAD_FAST 3 ( n )					    								  
							      118 CALL_FUNCTION 4					    								  
							      120 RETURN_VALUE						    								  
							      122 LOAD_CONST 0 ( None )					    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY		      COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY		    COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY		  COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY
--							      --							    --								  --
def getInvCount ( arr ) :				      Disassembly of <code object getInvCount at 0x7fbac0e89d20, fi Disassembly of <code object getInvCount at 0x7f816a673a50, fi script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( arr )					  
    invcount = 0					      2 LOAD_FAST 0 ( arr )					    2 LOAD_METHOD 0 ( invcount )				  
    for i in range ( 0 , n - 1 ) :			      4 CALL_FUNCTION 1						    4 CALL_METHOD 0						  
	for j in range ( i + 1 , n ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    if arr [ i ] > arr [ j ] :			      								    								  
		for k in range ( j + 1 , n ) :		      3 8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 1 ( n )					  
		    if arr [ j ] > arr [ k ] :		      10 STORE_FAST 2 ( invcount )				    10 LOAD_CONST 1 ( 1 )					  
			invcount += 1			      								    12 INPLACE_ADD						  
    return invcount					      4 12 SETUP_LOOP 110 ( to 124 )				    14 STORE_FAST 1 ( n )					  
							      14 LOAD_GLOBAL 1 ( range )				    								  
							      16 LOAD_CONST 1 ( 0 )					    28 16 LOAD_FAST 1 ( n )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_CONST 2 ( 0 )					  
							      20 LOAD_CONST 2 ( 1 )					    20 COMPARE_OP 4 ( > )					  
							      22 BINARY_SUBTRACT					    22 POP_JUMP_IF_FALSE 32					  
							      24 CALL_FUNCTION 2					    								  
							      26 GET_ITER						    29 24 LOAD_FAST 1 ( n )					  
							      >> 28 FOR_ITER 92 ( to 122 )				    26 LOAD_CONST 3 ( 1 )					  
							      30 STORE_FAST 3 ( i )					    28 INPLACE_ADD						  
							      								    30 STORE_FAST 1 ( n )					  
							      5 32 SETUP_LOOP 86 ( to 120 )				    								  
							      34 LOAD_GLOBAL 1 ( range )				    30 >> 32 LOAD_FAST 1 ( n )					  
							      36 LOAD_FAST 3 ( i )					    34 LOAD_CONST 4 ( - 1 )					  
							      38 LOAD_CONST 2 ( 1 )					    36 INPLACE_ADD						  
							      40 BINARY_ADD						    38 STORE_FAST 1 ( n )					  
							      42 LOAD_FAST 1 ( n )					    40 JUMP_FORWARD 10 ( to 34 )				  
							      44 CALL_FUNCTION 2					    								  
							      46 GET_ITER						    31 >> 42 LOAD_FAST 1 ( n )					  
							      >> 48 FOR_ITER 68 ( to 118 )				    44 LOAD_CONST 5 ( 1 )					  
							      50 STORE_FAST 4 ( j )					    46 INPLACE_ADD						  
							      								    48 STORE_FAST 1 ( n )					  
							      6 52 LOAD_FAST 0 ( arr )					    								  
							      54 LOAD_FAST 3 ( i )					    32 >> 50 LOAD_FAST 1 ( n )					  
							      56 BINARY_SUBSCR						    52 LOAD_CONST 6 ( 2 )					  
							      58 LOAD_FAST 0 ( arr )					    54 INPLACE_ADD						  
							      60 LOAD_FAST 4 ( j )					    56 STORE_FAST 1 ( n )					  
							      62 BINARY_SUBSCR						    								  
							      64 COMPARE_OP 4 ( > )					    33 58 LOAD_FAST 1 ( n )					  
							      66 POP_JUMP_IF_FALSE 48					    60 LOAD_CONST 7 ( 1 )					  
							      								    62 INPLACE_ADD						  
							      7 68 SETUP_LOOP 46 ( to 116 )				    64 STORE_FAST 1 ( n )					  
							      70 LOAD_GLOBAL 1 ( range )				    								  
							      72 LOAD_FAST 4 ( j )					    34 66 LOAD_FAST 1 ( n )					  
							      74 LOAD_CONST 2 ( 1 )					    68 LOAD_CONST 8 ( 2 )					  
							      76 BINARY_ADD						    70 INPLACE_ADD						  
							      78 LOAD_FAST 1 ( n )					    72 STORE_FAST 1 ( n )					  
							      80 CALL_FUNCTION 2					    74 JUMP_FORWARD 10 ( to 80 )				  
							      82 GET_ITER						    								  
							      >> 84 FOR_ITER 28 ( to 114 )				    35 >> 76 LOAD_FAST 1 ( n )					  
							      86 STORE_FAST 5 ( k )					    78 LOAD_CONST 9 ( 2 )					  
							      								    80 INPLACE_ADD						  
							      8 88 LOAD_FAST 0 ( arr )					    82 STORE_FAST 1 ( n )					  
							      90 LOAD_FAST 4 ( j )					    84 JUMP_FORWARD 10 ( to 80 )				  
							      92 BINARY_SUBSCR						    								  
							      94 LOAD_FAST 0 ( arr )					    36 >> 86 LOAD_FAST 1 ( n )					  
							      96 LOAD_FAST 5 ( k )					    88 LOAD_CONST 10 ( 2 )					  
							      98 BINARY_SUBSCR						    90 INPLACE_ADD						  
							      100 COMPARE_OP 4 ( > )					    92 STORE_FAST 1 ( n )					  
							      102 POP_JUMP_IF_FALSE 84					    								  
							      								    37 94 LOAD_FAST 1 ( n )					  
							      9 104 LOAD_FAST 2 ( invcount )				    96 LOAD_CONST 11 ( 2 )					  
							      106 LOAD_CONST 2 ( 1 )					    98 INPLACE_ADD						  
							      108 INPLACE_ADD						    100 STORE_FAST 1 ( n )					  
							      110 STORE_FAST 2 ( invcount )				    								  
							      112 JUMP_ABSOLUTE 84					    38 >> 102 LOAD_FAST 1 ( n )					  
							      >> 114 POP_BLOCK						    104 LOAD_FAST 1 ( n )					  
							      >> 116 JUMP_ABSOLUTE 48					    106 INPLACE_ADD						  
							      >> 118 POP_BLOCK						    108 STORE_FAST 1 ( n )					  
							      >> 120 JUMP_ABSOLUTE 28					    110 JUMP_FORWARD 2 ( to 80 )				  
							      >> 122 POP_BLOCK						    								  
							      								    39 >> 112 LOAD_FAST 1 ( n )					  
							      10 >> 124 LOAD_FAST 2 ( invcount )			    114 LOAD_FAST 1 ( n )					  
							      126 RETURN_VALUE NEW_LINE					    116 INPLACE_ADD						  
							      								    118 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_FAST 1 ( n )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 1 ( n )					  
							      								    128 JUMP_FORWARD 2 ( to 80 )				  
							      								    								  
							      								    41 >> 130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_FAST 1 ( n )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 >> 138 LOAD_FAST 1 ( n )					  
							      								    140 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	      SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	    SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	  SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER
--							      --							    --								  --
def sumOfSubstrings ( num ) :				      Disassembly of <code object sumOfSubstrings at 0x7fbac0e89d20 Disassembly of <code object sumOfSubstrings at 0x7f816a673a50 script_not_found : None
    n = len ( num )					      2 0 LOAD_GLOBAL 0 ( len )					    16 0 LOAD_FAST 0 ( num )					  
    sumofdigit = [ ]					      2 LOAD_FAST 0 ( num )					    2 LOAD_CONST 1 ( 0 )					  
    sumofdigit.append ( int ( num [ 0 ] ) )		      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    res = sumofdigit [ 0 ]				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( num )					  
    for i in range ( 1 , n ) :				      								    								  
	numi = int ( num [ i ] )			      3 8 BUILD_LIST 0						    17 8 LOAD_FAST 1 ( num )					  
	sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigi 10 STORE_FAST 2 ( sumofdigit )				    10 LOAD_CONST 2 ( 1 )					  
	res += sumofdigit [ i ]				      								    12 BINARY_SUBSCR						  
    return res						      4 12 LOAD_FAST 2 ( sumofdigit )				    14 STORE_FAST 2 ( num )					  
							      14 LOAD_METHOD 1 ( append )				    								  
							      16 LOAD_GLOBAL 2 ( int )					    18 16 LOAD_FAST 1 ( num )					  
							      18 LOAD_FAST 0 ( num )					    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_CONST 1 ( 0 )					    20 BINARY_SUBSCR						  
							      22 BINARY_SUBSCR						    22 STORE_FAST 3 ( num )					  
							      24 CALL_FUNCTION 1					    								  
							      26 CALL_METHOD 1						    19 24 LOAD_FAST 1 ( num )					  
							      28 POP_TOP						    26 LOAD_CONST 4 ( 2 )					  
							      								    28 BINARY_SUBSCR						  
							      5 30 LOAD_FAST 2 ( sumofdigit )				    30 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_CONST 1 ( 0 )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 STORE_FAST 4 ( num )					  
							      36 STORE_FAST 3 ( res )					    								  
							      								    20 36 LOAD_FAST 1 ( num )					  
							      6 38 SETUP_LOOP 76 ( to 116 )				    38 LOAD_CONST 6 ( 2 )					  
							      40 LOAD_GLOBAL 3 ( range )				    40 BINARY_SUBSCR						  
							      42 LOAD_CONST 2 ( 1 )					    42 STORE_FAST 5 ( num )					  
							      44 LOAD_FAST 1 ( n )					    								  
							      46 CALL_FUNCTION 2					    21 44 LOAD_FAST 1 ( num )					  
							      48 GET_ITER						    46 LOAD_CONST 7 ( 3 )					  
							      >> 50 FOR_ITER 62 ( to 114 )				    48 BINARY_SUBSCR						  
							      52 STORE_FAST 4 ( i )					    50 STORE_FAST 6 ( num )					  
							      								    								  
							      7 54 LOAD_GLOBAL 2 ( int )				    22 52 LOAD_FAST 1 ( num )					  
							      56 LOAD_FAST 0 ( num )					    54 LOAD_CONST 8 ( 2 )					  
							      58 LOAD_FAST 4 ( i )					    56 BINARY_SUBSCR						  
							      60 BINARY_SUBSCR						    58 STORE_FAST 7 ( num )					  
							      62 CALL_FUNCTION 1					    								  
							      64 STORE_FAST 5 ( numi )					    23 60 LOAD_FAST 2 ( num )					  
							      								    62 LOAD_CONST 9 ( 4 )					  
							      8 66 LOAD_FAST 2 ( sumofdigit )				    64 BINARY_SUBSCR						  
							      68 LOAD_METHOD 1 ( append )				    66 STORE_FAST 8 ( num )					  
							      70 LOAD_FAST 4 ( i )					    								  
							      72 LOAD_CONST 2 ( 1 )					    24 68 LOAD_FAST 1 ( num )					  
							      74 BINARY_ADD						    70 LOAD_CONST 10 ( 4 )					  
							      76 LOAD_FAST 5 ( numi )					    72 BINARY_SUBSCR						  
							      78 BINARY_MULTIPLY					    74 STORE_FAST 9 ( num )					  
							      80 LOAD_CONST 3 ( 10 )					    								  
							      82 LOAD_FAST 2 ( sumofdigit )				    25 76 LOAD_FAST 1 ( num )					  
							      84 LOAD_FAST 4 ( i )					    78 LOAD_CONST 11 ( 3 )					  
							      86 LOAD_CONST 2 ( 1 )					    80 BINARY_SUBSCR						  
							      88 BINARY_SUBTRACT					    82 STORE_FAST 10 ( num )					  
							      90 BINARY_SUBSCR						    								  
							      92 BINARY_MULTIPLY					    26 84 LOAD_FAST 1 ( num )					  
							      94 BINARY_ADD						    86 LOAD_FAST 7 ( num )					  
							      96 CALL_METHOD 1						    88 LOAD_CONST 12 ( 4 )					  
							      98 POP_TOP						    90 BINARY_SUBSCR						  
							      								    92 STORE_FAST 11 ( num )					  
							      9 100 LOAD_FAST 3 ( res )					    								  
							      102 LOAD_FAST 2 ( sumofdigit )				    27 94 LOAD_FAST 8 ( num )					  
							      104 LOAD_FAST 4 ( i )					    96 LOAD_CONST 13 ( 2 )					  
							      106 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      108 INPLACE_ADD						    100 STORE_FAST 10 ( num )					  
							      110 STORE_FAST 3 ( res )					    								  
							      112 JUMP_ABSOLUTE 50					    28 102 LOAD_FAST 1 ( num )					  
							      >> 114 POP_BLOCK						    104 LOAD_FAST 10 ( num )					  
							      								    106 LOAD_CONST 12 ( 4 )					  
							      10 >> 116 LOAD_FAST 3 ( res )				    108 BINARY_SUBSCR						  
							      118 RETURN_VALUE NEW_LINE					    110 STORE_FAST 11 ( num )					  
							      								    								  
							      								    29 112 LOAD_FAST 1 ( num )					  
							      								    114 LOAD_CONST 13 ( 2 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_FAST 10 ( num )					  
							      								    120 LOAD_CONST 14 ( 3 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_FAST 10 ( num )					  
							      								    126 LOAD_CONST 15 ( 4 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_FAST 10 ( num )					  
							      								    132 LOAD_CONST 16 ( 4 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_FAST 10 ( num )					  
							      								    138 LOAD_CONST 17 ( 3 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_FAST 10 ( num )					  
							      								    144 LOAD_CONST 18 ( 4 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 BINARY_ADD						  
							      								    150 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T
--							      --							    --								  --
def maxDifference ( arr , N , k ) :			      Disassembly of <code object maxDifference at 0x7fbac<<unk>> d Disassembly of <code object maxDifference at 0x7f816a6828a0,  script_not_found : None
    S = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( S )					  
    S1 = 0						      2 STORE_FAST 3 ( S )					    2 LOAD_METHOD 1 ( max_difference )				  
    max_difference = 0					      								    4 LOAD_FAST 0 ( arr )					  
    for i in range ( N ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_FAST 1 ( N )						  
	S += arr [ i ]					      6 STORE_FAST 4 ( S1 )					    8 LOAD_FAST 2 ( N )						  
    arr.sort ( reverse = True )				      								    10 LOAD_FAST 3 ( axis )					  
    M = max ( k , N - k )				      4 8 LOAD_CONST 1 ( 0 )					    12 LOAD_FAST 4 ( axis )					  
    for i in range ( M ) :				      10 STORE_FAST 5 ( max_difference )			    14 CALL_METHOD 4						  
	S1 += arr [ i ]					      								    16 RETURN_VALUE						  
    max_difference = S1 - ( S - S1 )			      5 12 SETUP_LOOP 28 ( to 42 )				    NEW_LINE							  
    return max_difference				      14 LOAD_GLOBAL 0 ( range )				    								  
							      16 LOAD_FAST 1 ( N )					    								  
							      18 CALL_FUNCTION 1					    								  
							      20 GET_ITER						    								  
							      >> 22 FOR_ITER 16 ( to 40 )				    								  
							      24 STORE_FAST 6 ( i )					    								  
							      								    								  
							      6 26 LOAD_FAST 3 ( S )					    								  
							      28 LOAD_FAST 0 ( arr )					    								  
							      30 LOAD_FAST 6 ( i )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 INPLACE_ADD						    								  
							      36 STORE_FAST 3 ( S )					    								  
							      38 JUMP_ABSOLUTE 22					    								  
							      >> 40 POP_BLOCK						    								  
							      								    								  
							      7 >> 42 LOAD_FAST 0 ( arr )				    								  
							      44 LOAD_ATTR 1 ( sort )					    								  
							      46 LOAD_CONST 2 ( True )					    								  
							      48 LOAD_CONST 3 ( ( 'reverse' , ) )			    								  
							      50 CALL_FUNCTION_KW 1					    								  
							      52 POP_TOP						    								  
							      								    								  
							      8 54 LOAD_GLOBAL 2 ( max )				    								  
							      56 LOAD_FAST 2 ( k )					    								  
							      58 LOAD_FAST 1 ( N )					    								  
							      60 LOAD_FAST 2 ( k )					    								  
							      62 BINARY_SUBTRACT					    								  
							      64 CALL_FUNCTION 2					    								  
							      66 STORE_FAST 7 ( M )					    								  
							      								    								  
							      9 68 SETUP_LOOP 28 ( to 98 )				    								  
							      70 LOAD_GLOBAL 0 ( range )				    								  
							      72 LOAD_FAST 7 ( M )					    								  
							      74 CALL_FUNCTION 1					    								  
							      76 GET_ITER						    								  
							      >> 78 FOR_ITER 16 ( to 96 )				    								  
							      80 STORE_FAST 6 ( i )					    								  
							      								    								  
							      10 82 LOAD_FAST 4 ( S1 )					    								  
							      84 LOAD_FAST 0 ( arr )					    								  
							      86 LOAD_FAST 6 ( i )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 INPLACE_ADD						    								  
							      92 STORE_FAST 4 ( S1 )					    								  
							      94 JUMP_ABSOLUTE 78					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      11 >> 98 LOAD_FAST 4 ( S1 )				    								  
							      100 LOAD_FAST 3 ( S )					    								  
							      102 LOAD_FAST 4 ( S1 )					    								  
							      104 BINARY_SUBTRACT					    								  
							      106 BINARY_SUBTRACT					    								  
							      108 STORE_FAST 5 ( max_difference )			    								  
							      								    								  
							      12 110 LOAD_FAST 5 ( max_difference )			    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		      FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		    FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		  FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS
--							      --							    --								  --
def minDist ( arr , n , x , y ) :			      Disassembly of <code object minDist at 0x7fbac0e89d20, file " Disassembly of <code object minDist at 0x7f816a673a50, file " error : Traceback (most recent call last):   File
    min_dist = 99999999					      2 0 LOAD_CONST 1 ( 99999999 )				    101 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 STORE_FAST 4 ( min_dist )				    2 LOAD_CONST 1 ( 99999999 )					  item in run_dis_script():   File "XLM/dis_script.p
	for j in range ( i + 1 , n ) :			      								    4 COMPARE_OP 2 ( == )					  y", line 54, in run_dis_script     hyp_co = mco.to
	    if ( x == arr [ i ] and y == arr [ j ] or y == ar 3 4 SETUP_LOOP 118 ( to 124 )				    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
		min_dist = abs ( i - j )		      6 LOAD_GLOBAL 0 ( range )					    								  assembler.py", line 81, in to_co     co_consts.app
	return min_dist					      8 LOAD_FAST 1 ( n )					    102 8 LOAD_FAST 1 ( n )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 CALL_FUNCTION 1					    10 LOAD_CONST 2 ( 0 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 GET_ITER						    12 BINARY_SUBSCR						  co	 self.co_cellvars, ValueError: code: varname
							      14 FOR_ITER 106 ( to 122 )				    14 STORE_FAST 1 ( n )					  s is too small
							      16 STORE_FAST 5 ( i )					    								  
							      								    103 16 LOAD_FAST 1 ( n )					  
							      4 18 SETUP_LOOP 98 ( to 118 )				    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_GLOBAL 0 ( range )				    20 COMPARE_OP 2 ( == )					  
							      22 LOAD_FAST 5 ( i )					    22 POP_JUMP_IF_FALSE 28					  
							      24 LOAD_CONST 2 ( 1 )					    								  
							      26 BINARY_ADD						    104 24 LOAD_FAST 1 ( n )					  
							      28 LOAD_FAST 1 ( n )					    26 LOAD_CONST 4 ( - 1 )					  
							      30 CALL_FUNCTION 2					    28 COMPARE_OP 2 ( == )					  
							      32 GET_ITER						    30 POP_JUMP_IF_FALSE 44					  
							      >> 34 FOR_ITER 80 ( to 116 )				    								  
							      36 STORE_FAST 6 ( j )					    105 32 LOAD_FAST 1 ( n )					  
							      								    34 LOAD_CONST 5 ( - 1 )					  
							      5 38 LOAD_FAST 2 ( x )					    36 COMPARE_OP 2 ( == )					  
							      40 LOAD_FAST 0 ( arr )					    38 POP_JUMP_IF_FALSE 44					  
							      42 LOAD_FAST 5 ( i )					    								  
							      44 BINARY_SUBSCR						    106 40 LOAD_FAST 1 ( n )					  
							      46 COMPARE_OP 2 ( == )					    42 LOAD_CONST 6 ( - 1 )					  
							      48 POP_JUMP_IF_FALSE 62					    44 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 3 ( y )					    46 POP_JUMP_IF_FALSE 44					  
							      52 LOAD_FAST 0 ( arr )					    								  
							      54 LOAD_FAST 6 ( j )					    107 48 LOAD_FAST 1 ( n )					  
							      56 BINARY_SUBSCR						    50 LOAD_CONST 7 ( - 1 )					  
							      58 COMPARE_OP 2 ( == )					    52 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_TRUE 86					    54 POP_JUMP_IF_FALSE 44					  
							      >> 62 LOAD_FAST 3 ( y )					    								  
							      64 LOAD_FAST 0 ( arr )					    108 56 LOAD_FAST 1 ( n )					  
							      66 LOAD_FAST 5 ( i )					    58 LOAD_CONST 8 ( - 1 )					  
							      68 BINARY_SUBSCR						    60 COMPARE_OP 2 ( == )					  
							      70 COMPARE_OP 2 ( == )					    62 POP_JUMP_IF_FALSE 44					  
							      72 POP_JUMP_IF_FALSE 34					    								  
							      74 LOAD_FAST 2 ( x )					    109 64 LOAD_FAST 1 ( n )					  
							      76 LOAD_FAST 0 ( arr )					    66 LOAD_CONST 9 ( - 1 )					  
							      78 LOAD_FAST 6 ( j )					    68 COMPARE_OP 2 ( == )					  
							      80 BINARY_SUBSCR						    70 POP_JUMP_IF_FALSE 44					  
							      82 COMPARE_OP 2 ( == )					    								  
							      84 POP_JUMP_IF_FALSE 34					    110 72 LOAD_FAST 1 ( n )					  
							      >> 86 LOAD_FAST 4 ( min_dist )				    74 LOAD_CONST 10 ( - 1 )					  
							      88 LOAD_GLOBAL 1 ( abs )					    76 COMPARE_OP 2 ( == )					  
							      90 LOAD_FAST 5 ( i )					    78 POP_JUMP_IF_FALSE 80					  
							      92 LOAD_FAST 6 ( j )					    								  
							      94 BINARY_SUBTRACT					    111 80 LOAD_FAST 1 ( n )					  
							      96 CALL_FUNCTION 1					    82 LOAD_CONST 11 ( - 1 )					  
							      98 COMPARE_OP 4 ( > )					    84 INPLACE_ADD						  
							      100 POP_JUMP_IF_FALSE 34					    86 STORE_FAST 1 ( n )					  
							      								    								  
							      6 102 LOAD_GLOBAL 1 ( abs )				    112 >> 88 LOAD_FAST 1 ( n )					  
							      104 LOAD_FAST 5 ( i )					    90 LOAD_CONST 12 ( - 1 )					  
							      106 LOAD_FAST 6 ( j )					    92 INPLACE_ADD						  
							      108 BINARY_SUBTRACT					    94 STORE_FAST 1 ( n )					  
							      110 CALL_FUNCTION 1					    								  
							      112 STORE_FAST 4 ( min_dist )				    113 >> 96 LOAD_FAST 1 ( n )					  
							      114 JUMP_ABSOLUTE 34					    98 LOAD_CONST 13 ( - 1 )					  
							      >> 116 POP_BLOCK						    100 INPLACE_ADD						  
							      								    102 STORE_FAST 1 ( n )					  
							      7 >> 118 LOAD_FAST 4 ( min_dist )				    								  
							      120 RETURN_VALUE						    114 104 LOAD_FAST 1 ( n )					  
							      >> 122 POP_BLOCK						    106 LOAD_CONST 14 ( - 1 )					  
							      >> 124 LOAD_CONST 0 ( None )				    108 INPLACE_ADD						  
							      126 RETURN_VALUE NEW_LINE					    110 STORE_FAST 1 ( n )					  
							      								    112 JUMP_FORWARD 10 ( to 124 )				  
							      								    								  
							      								    115 >> 114 LOAD_FAST 1 ( n )				  
							      								    116 LOAD_CONST 15 ( - 1 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( n )					  
							      								    								  
							      								    116 122 LOAD_FAST 1 ( n )					  
							      								    124 LOAD_CONST 15 ( - 1 )					  
							      								    126 INPLACE_ADD						  
							      								    128 STORE_FAST 1 ( n )					  
							      								    								  
							      								    117 130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_CONST 16 ( - 1 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    118 140 LOAD_FAST 1 ( n )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI
--							      --							    --								  --
def maxOnesIndex ( arr , n ) :				      Disassembly of <code object maxOnesIndex at 0x7fbac<<unk>> de Disassembly of <code object maxOnesIndex at 0x7f816a673a50, f error : /bin/bash: line 1: 26388 Segmentation faul
    max_count = 0					      2 0 LOAD_CONST 1 ( 0 )					    101 0 LOAD_FAST 1 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    max_index = 0					      2 STORE_FAST 2 ( max_count )				    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    prev_zero = - 1					      								    4 INPLACE_ADD						  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
    prev_prev_zero = - 1				      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					  eval_scripts/python_sa-dis_sa.test/FIND_INDEX_0_RE
    for curr in range ( n ) :				      6 STORE_FAST 3 ( max_index )				    								  PLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BINARY
	if ( arr [ curr ] == 0 ) :			      								    102 8 LOAD_FAST 0 ( arr )					  _ARRAY.dis
	    if ( curr - prev_prev_zero > max_count ) :	      4 8 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 2 ( 0 )					  
		max_count = curr - prev_prev_zero	      10 STORE_FAST 4 ( prev_zero )				    12 BINARY_SUBSCR						  
		max_index = prev_zero			      								    14 STORE_FAST 2 ( curr )					  
	    prev_prev_zero = prev_zero			      5 12 LOAD_CONST 2 ( - 1 )					    								  
	    prev_zero = curr				      14 STORE_FAST 5 ( prev_prev_zero )			    103 16 LOAD_FAST 2 ( curr )					  
    if ( n - prev_prev_zero > max_count ) :		      								    18 LOAD_CONST 3 ( 1 )					  
	max_index = prev_zero				      6 16 SETUP_LOOP 60 ( to 78 )				    20 INPLACE_ADD						  
    return max_index					      18 LOAD_GLOBAL 0 ( range )				    22 STORE_FAST 1 ( n )					  
							      20 LOAD_FAST 1 ( n )					    								  
							      22 CALL_FUNCTION 1					    104 24 LOAD_FAST 2 ( curr )					  
							      24 GET_ITER						    26 LOAD_CONST 4 ( 2 )					  
							      >> 26 FOR_ITER 48 ( to 76 )				    28 INPLACE_ADD						  
							      28 STORE_FAST 6 ( curr )					    30 STORE_FAST 1 ( n )					  
							      								    								  
							      7 30 LOAD_FAST 0 ( arr )					    105 32 LOAD_FAST 1 ( n )					  
							      32 LOAD_FAST 6 ( curr )					    34 LOAD_CONST 5 ( 1 )					  
							      34 BINARY_SUBSCR						    36 INPLACE_ADD						  
							      36 LOAD_CONST 1 ( 0 )					    38 STORE_FAST 1 ( n )					  
							      38 COMPARE_OP 2 ( == )					    								  
							      40 POP_JUMP_IF_FALSE 26					    106 40 LOAD_FAST 1 ( n )					  
							      								    42 LOAD_CONST 6 ( 2 )					  
							      8 42 LOAD_FAST 6 ( curr )					    44 INPLACE_ADD						  
							      44 LOAD_FAST 5 ( prev_prev_zero )				    46 STORE_FAST 1 ( n )					  
							      46 BINARY_SUBTRACT					    								  
							      48 LOAD_FAST 2 ( max_count )				    107 48 LOAD_FAST 1 ( n )					  
							      50 COMPARE_OP 4 ( > )					    50 LOAD_CONST 7 ( 3 )					  
							      52 POP_JUMP_IF_FALSE 66					    52 INPLACE_ADD						  
							      								    54 STORE_FAST 1 ( n )					  
							      9 54 LOAD_FAST 6 ( curr )					    								  
							      56 LOAD_FAST 5 ( prev_prev_zero )				    108 56 LOAD_FAST 1 ( n )					  
							      58 BINARY_SUBTRACT					    58 LOAD_CONST 8 ( 2 )					  
							      60 STORE_FAST 2 ( max_count )				    60 INPLACE_ADD						  
							      								    62 STORE_FAST 1 ( n )					  
							      10 62 LOAD_FAST 4 ( prev_zero )				    								  
							      64 STORE_FAST 3 ( max_index )				    109 64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_CONST 9 ( 4 )					  
							      11 >> 66 LOAD_FAST 4 ( prev_zero )			    68 INPLACE_ADD						  
							      68 STORE_FAST 5 ( prev_prev_zero )			    70 STORE_FAST 1 ( n )					  
							      								    								  
							      12 70 LOAD_FAST 6 ( curr )				    110 72 LOAD_FAST 1 ( n )					  
							      72 STORE_FAST 4 ( prev_zero )				    74 LOAD_CONST 10 ( 4 )					  
							      74 JUMP_ABSOLUTE 26					    76 INPLACE_ADD						  
							      >> 76 POP_BLOCK						    78 STORE_FAST 1 ( n )					  
							      								    80 LOAD_CONST 11 ( 2 )					  
							      13 >> 78 LOAD_FAST 1 ( n )				    82 INPLACE_ADD						  
							      80 LOAD_FAST 5 ( prev_prev_zero )				    84 STORE_FAST 1 ( n )					  
							      82 BINARY_SUBTRACT					    								  
							      84 LOAD_FAST 2 ( max_count )				    111 86 LOAD_FAST 1 ( n )					  
							      86 COMPARE_OP 4 ( > )					    88 LOAD_CONST 12 ( 2 )					  
							      88 POP_JUMP_IF_FALSE 94					    90 INPLACE_ADD						  
							      								    92 STORE_FAST 1 ( n )					  
							      14 90 LOAD_FAST 4 ( prev_zero )				    								  
							      92 STORE_FAST 3 ( max_index )				    112 94 LOAD_FAST 1 ( n )					  
							      								    96 LOAD_CONST 13 ( 2 )					  
							      15 >> 94 LOAD_FAST 3 ( max_index )			    98 INPLACE_ADD						  
							      96 RETURN_VALUE NEW_LINE					    100 STORE_FAST 1 ( n )					  
							      								    								  
							      								    113 102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_FAST 0 ( arr )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( n )					  
							      								    110 STORE_FAST 2 ( curr )					  
							      								    								  
							      								    114 112 LOAD_FAST 1 ( n )					  
							      								    114 LOAD_FAST 2 ( curr )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 1 ( n )					  
							      								    								  
							      								    115 120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_FAST 2 ( curr )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 1 ( n )					  
							      								    								  
							      								    116 128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_FAST 2 ( curr )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    136 STORE_FAST 2 ( curr )					  
							      								    								  
							      								    117 138 LOAD_FAST 1 ( n )					  
							      								    140 LOAD_CONST 6 ( 2 )					  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    118 146 LOAD_FAST 2 ( curr )				  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_INSERTION_POINT					      LOWER_INSERTION_POINT					    LOWER_INSERTION_POINT					  LOWER_INSERTION_POINT
--							      --							    --								  --
def LowerInsertionPoint ( arr , n , X ) :		      Disassembly of <code object LowerInsertionPoint at 0x7fbac<<u Disassembly of <code object LowerInsertionPoint at 0x7f816a67 error : Traceback (most recent call last):   File
    if ( X < arr [ 0 ] ) :				      2 0 LOAD_FAST 2 ( X )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0 ;					      2 LOAD_FAST 0 ( arr )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 39, in <module>	  Fi
    elif ( X > arr [ n - 1 ] ) :			      4 LOAD_CONST 1 ( 0 )					    4 BINARY_SUBSCR						  le "<dis>", line 2, in LowerInsertionPoint TypeErr
	return n					      6 BINARY_SUBSCR						    6 STORE_FAST 2 ( y )					  or: 'int' object is not subscriptable
    lowerPnt = 0					      8 COMPARE_OP 0 ( < )					    								  
    i = 1						      10 POP_JUMP_IF_FALSE 16					    27 8 LOAD_FAST 0 ( arr )					  
    while ( i < n and arr [ i ] < X ) :			      								    10 LOAD_CONST 2 ( 1 )					  
	lowerPnt = i					      3 12 LOAD_CONST 1 ( 0 )					    12 BINARY_SUBSCR						  
	i = i * 2					      14 RETURN_VALUE						    14 STORE_FAST 3 ( y )					  
    while ( lowerPnt < n and arr [ lowerPnt ] < X ) :	      								    								  
	lowerPnt += 1					      4 >> 16 LOAD_FAST 2 ( X )					    28 16 LOAD_FAST 2 ( y )					  
    return lowerPnt					      18 LOAD_FAST 0 ( arr )					    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_FAST 1 ( n )					    20 BINARY_SUBSCR						  
							      22 LOAD_CONST 2 ( 1 )					    22 STORE_FAST 4 ( y )					  
							      24 BINARY_SUBTRACT					    								  
							      26 BINARY_SUBSCR						    29 24 LOAD_FAST 3 ( y )					  
							      28 COMPARE_OP 4 ( > )					    26 LOAD_CONST 4 ( 2 )					  
							      30 POP_JUMP_IF_FALSE 36					    28 BINARY_SUBSCR						  
							      								    30 STORE_FAST 5 ( y )					  
							      5 32 LOAD_FAST 1 ( n )					    								  
							      34 RETURN_VALUE						    30 32 LOAD_FAST 4 ( y )					  
							      								    34 LOAD_FAST 5 ( y )					  
							      6 >> 36 LOAD_CONST 1 ( 0 )				    36 LOAD_CONST 5 ( 1 )					  
							      38 STORE_FAST 3 ( lowerPnt )				    38 BINARY_SUBSCR						  
							      								    40 LOAD_FAST 2 ( y )					  
							      7 40 LOAD_CONST 2 ( 1 )					    42 LOAD_CONST 6 ( 2 )					  
							      42 STORE_FAST 4 ( i )					    44 BINARY_SUBSCR						  
							      								    46 LOAD_FAST 3 ( y )					  
							      8 44 SETUP_LOOP 36 ( to 82 )				    48 LOAD_CONST 7 ( 3 )					  
							      >> 46 LOAD_FAST 4 ( i )					    50 BINARY_SUBSCR						  
							      48 LOAD_FAST 1 ( n )					    52 LOAD_FAST 4 ( y )					  
							      50 COMPARE_OP 0 ( < )					    54 LOAD_CONST 8 ( 2 )					  
							      52 POP_JUMP_IF_FALSE 80					    56 BINARY_SUBSCR						  
							      54 LOAD_FAST 0 ( arr )					    58 LOAD_CONST 9 ( 3 )					  
							      56 LOAD_FAST 4 ( i )					    60 BINARY_SUBSCR						  
							      58 BINARY_SUBSCR						    62 LOAD_FAST 5 ( y )					  
							      60 LOAD_FAST 2 ( X )					    64 LOAD_CONST 10 ( 2 )					  
							      62 COMPARE_OP 0 ( < )					    66 BINARY_SUBSCR						  
							      64 POP_JUMP_IF_FALSE 80					    68 LOAD_FAST 4 ( y )					  
							      								    70 LOAD_CONST 11 ( 3 )					  
							      9 66 LOAD_FAST 4 ( i )					    72 BINARY_SUBSCR						  
							      68 STORE_FAST 3 ( lowerPnt )				    74 LOAD_CONST 12 ( 2 )					  
							      								    76 BINARY_SUBSCR						  
							      10 70 LOAD_FAST 4 ( i )					    78 LOAD_FAST 5 ( y )					  
							      72 LOAD_CONST 3 ( 2 )					    80 LOAD_CONST 13 ( 3 )					  
							      74 BINARY_MULTIPLY					    82 BINARY_SUBSCR						  
							      76 STORE_FAST 4 ( i )					    84 LOAD_FAST 4 ( y )					  
							      78 JUMP_ABSOLUTE 46					    86 LOAD_CONST 12 ( 2 )					  
							      >> 80 POP_BLOCK						    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 5 ( y )					  
							      11 >> 82 SETUP_LOOP 32 ( to 116 )				    92 LOAD_CONST 6 ( 2 )					  
							      >> 84 LOAD_FAST 3 ( lowerPnt )				    94 BINARY_SUBSCR						  
							      86 LOAD_FAST 1 ( n )					    96 LOAD_CONST 12 ( 2 )					  
							      88 COMPARE_OP 0 ( < )					    98 BINARY_SUBSCR						  
							      90 POP_JUMP_IF_FALSE 114					    100 LOAD_FAST 5 ( y )					  
							      92 LOAD_FAST 0 ( arr )					    102 LOAD_CONST 13 ( 3 )					  
							      94 LOAD_FAST 3 ( lowerPnt )				    104 BINARY_SUBSCR						  
							      96 BINARY_SUBSCR						    106 LOAD_CONST 14 ( 2 )					  
							      98 LOAD_FAST 2 ( X )					    108 BINARY_SUBSCR						  
							      100 COMPARE_OP 0 ( < )					    110 LOAD_CONST 15 ( 3 )					  
							      102 POP_JUMP_IF_FALSE 114					    112 BINARY_SUBSCR						  
							      								    114 LOAD_CONST 16 ( 2 )					  
							      12 104 LOAD_FAST 3 ( lowerPnt )				    116 BINARY_SUBSCR						  
							      106 LOAD_CONST 2 ( 1 )					    118 LOAD_FAST 5 ( y )					  
							      108 INPLACE_ADD						    120 LOAD_CONST 6 ( 2 )					  
							      110 STORE_FAST 3 ( lowerPnt )				    122 BINARY_SUBSCR						  
							      112 JUMP_ABSOLUTE 84					    124 LOAD_CONST 16 ( 2 )					  
							      >> 114 POP_BLOCK						    126 STORE_SUBSCR						  
							      								    								  
							      13 >> 116 LOAD_FAST 3 ( lowerPnt )			    30 128 LOAD_FAST 0 ( arr )					  
							      118 RETURN_VALUE NEW_LINE					    130 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES	  CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES
--							      --							    --								  --
def isRotated ( str1 , str2 ) :				      Disassembly of <code object isRotated at 0x7fbac0e89d20, file Disassembly of <code object isRotated at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    if ( len ( str1 ) != len ( str2 ) ) :		      2 0 LOAD_GLOBAL 0 ( len )					    65 0 LOAD_FAST 0 ( str1 )					  "XLM/dis_script.py", line 59, in <module>	for
	return False					      2 LOAD_FAST 0 ( str1 )					    2 LOAD_CONST 1 ( 2 )					  item in run_dis_script():   File "XLM/dis_script.p
    clock_rot = ""					      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    anticlock_rot = ""					      6 LOAD_GLOBAL 0 ( len )					    6 LOAD_CONST 2 ( ' anticticrot="' )				  cals, co_varnames, co_names, co_consts, co_linesta
    l = len ( str2 )					      8 LOAD_FAST 1 ( str2 )					    8 COMPARE_OP 2 ( == )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
    anticlock_rot = ( anticlock_rot + str2 [ l - 2 : ] + str2 10 CALL_FUNCTION 1					    10 POP_JUMP_IF_FALSE 16					  pack non-iterable NoneType object
    clock_rot = clock_rot + str2 [ 2 : ] + str2 [ 0 : 2 ]     12 COMPARE_OP 3 ( != )					    								  
    return ( str1 == clock_rot or str1 == anticlock_rot )     14 POP_JUMP_IF_FALSE 20					    66 12 LOAD_GLOBAL 0 ( np )					  
							      								    14 LOAD_METHOD 1 ( anticlock_rot = 0 )			  
							      3 16 LOAD_CONST 1 ( False )				    16 LOAD_CONST 3 ( 1 )					  
							      18 RETURN_VALUE						    18 LOAD_CONST 4 ( 2 )					  
							      								    20 BINARY_SUBSCR						  
							      4 >> 20 LOAD_CONST 2 ( '' )				    22 LOAD_CONST 5 ( 3 )					  
							      22 STORE_FAST 2 ( clock_rot )				    24 CALL_METHOD 2						  
							      								    26 STORE_FAST 1 ( strstrstrstrstrstrstrstrstrstrstrstrstrstrs 
							      5 24 LOAD_CONST 2 ( '' )					    								  
							      26 STORE_FAST 3 ( anticlock_rot )				    								  
							      								    								  
							      6 28 LOAD_GLOBAL 0 ( len )				    								  
							      30 LOAD_FAST 1 ( str2 )					    								  
							      32 CALL_FUNCTION 1					    								  
							      34 STORE_FAST 4 ( l )					    								  
							      								    								  
							      7 36 LOAD_FAST 3 ( anticlock_rot )			    								  
							      38 LOAD_FAST 1 ( str2 )					    								  
							      40 LOAD_FAST 4 ( l )					    								  
							      42 LOAD_CONST 3 ( 2 )					    								  
							      44 BINARY_SUBTRACT					    								  
							      46 LOAD_CONST 0 ( None )					    								  
							      48 BUILD_SLICE 2						    								  
							      50 BINARY_SUBSCR						    								  
							      52 BINARY_ADD						    								  
							      54 LOAD_FAST 1 ( str2 )					    								  
							      56 LOAD_CONST 4 ( 0 )					    								  
							      58 LOAD_FAST 4 ( l )					    								  
							      60 LOAD_CONST 3 ( 2 )					    								  
							      62 BINARY_SUBTRACT					    								  
							      64 BUILD_SLICE 2						    								  
							      66 BINARY_SUBSCR						    								  
							      68 BINARY_ADD						    								  
							      70 STORE_FAST 3 ( anticlock_rot )				    								  
							      								    								  
							      8 72 LOAD_FAST 2 ( clock_rot )				    								  
							      74 LOAD_FAST 1 ( str2 )					    								  
							      76 LOAD_CONST 3 ( 2 )					    								  
							      78 LOAD_CONST 0 ( None )					    								  
							      80 BUILD_SLICE 2						    								  
							      82 BINARY_SUBSCR						    								  
							      84 BINARY_ADD						    								  
							      86 LOAD_FAST 1 ( str2 )					    								  
							      88 LOAD_CONST 4 ( 0 )					    								  
							      90 LOAD_CONST 3 ( 2 )					    								  
							      92 BUILD_SLICE 2						    								  
							      94 BINARY_SUBSCR						    								  
							      96 BINARY_ADD						    								  
							      98 STORE_FAST 2 ( clock_rot )				    								  
							      								    								  
							      9 100 LOAD_FAST 0 ( str1 )				    								  
							      102 LOAD_FAST 2 ( clock_rot )				    								  
							      104 COMPARE_OP 2 ( == )					    								  
							      106 JUMP_IF_TRUE_OR_POP 114				    								  
							      108 LOAD_FAST 0 ( str1 )					    								  
							      110 LOAD_FAST 3 ( anticlock_rot )				    								  
							      112 COMPARE_OP 2 ( == )					    								  
							      >> 114 RETURN_VALUE NEW_LINE				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SORT_STRING_DESCENDING_ORDER			      PROGRAM_SORT_STRING_DESCENDING_ORDER			    PROGRAM_SORT_STRING_DESCENDING_ORDER			  PROGRAM_SORT_STRING_DESCENDING_ORDER
--							      --							    --								  --
def sortString ( str ) :				      Disassembly of <code object sortString at 0x7fbac0e8bc90, fil Disassembly of <code object sortString at 0x7f816a601660, fil script_not_found : None
    charCount = [ 0 ] * MAX_CHAR ;			      2 0 LOAD_CONST 1 ( 0 )					    102 0 LOAD_FAST 0 ( self )					  
    for i in range ( len ( str ) ) :			      2 BUILD_LIST 1						    2 LOAD_ATTR 0 ( charCount )					  
	charCount [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1 ;  4 LOAD_GLOBAL 0 ( MAX_CHAR )				    4 LOAD_METHOD 1 ( append )					  
    for i in range ( MAX_CHAR - 1 , - 1 , - 1 ) :	      6 BINARY_MULTIPLY						    6 LOAD_FAST 1 ( i )						  
	for j in range ( charCount [ i ] ) :		      8 STORE_FAST 1 ( charCount )				    8 LOAD_CONST 1 ( 0 )					  
	    print ( chr ( 97 + i ) , end = "" ) ;	      								    10 BINARY_SUBSCR						  
							      3 10 SETUP_LOOP 52 ( to 64 )				    12 CALL_METHOD 1						  
							      12 LOAD_GLOBAL 1 ( range )				    14 POP_TOP							  
							      14 LOAD_GLOBAL 2 ( len )					    								  
							      16 LOAD_FAST 0 ( str )					    103 16 SETUP_LOOP 52 ( to 60 )				  
							      18 CALL_FUNCTION 1					    18 LOAD_GLOBAL 2 ( range )					  
							      20 CALL_FUNCTION 1					    20 LOAD_CONST 2 ( 1 )					  
							      22 GET_ITER						    22 LOAD_CONST 3 ( 2 )					  
							      >> 24 FOR_ITER 36 ( to 62 )				    24 CALL_FUNCTION 2						  
							      26 STORE_FAST 2 ( i )					    26 GET_ITER							  
							      								    >> 28 FOR_ITER 34 ( to 58 )					  
							      4 28 LOAD_FAST 1 ( charCount )				    30 UNPACK_SEQUENCE 2					  
							      30 LOAD_GLOBAL 3 ( ord )					    32 STORE_FAST 2 ( i )					  
							      32 LOAD_FAST 0 ( str )					    34 STORE_FAST 3 ( i )					  
							      34 LOAD_FAST 2 ( i )					    								  
							      36 BINARY_SUBSCR						    104 36 LOAD_FAST 3 ( i )					  
							      38 CALL_FUNCTION 1					    38 LOAD_CONST 4 ( - 1 )					  
							      40 LOAD_GLOBAL 3 ( ord )					    40 BINARY_SUBSCR						  
							      42 LOAD_CONST 2 ( 'a' )					    42 STORE_FAST 4 ( i )					  
							      44 CALL_FUNCTION 1					    								  
							      46 BINARY_SUBTRACT					    105 44 LOAD_FAST 4 ( i )					  
							      48 DUP_TOP_TWO						    46 LOAD_CONST 4 ( - 1 )					  
							      50 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      52 LOAD_CONST 3 ( 1 )					    50 STORE_FAST 5 ( i )					  
							      54 INPLACE_ADD						    								  
							      56 ROT_THREE						    106 52 LOAD_FAST 5 ( i )					  
							      58 STORE_SUBSCR						    54 LOAD_CONST 4 ( - 1 )					  
							      60 JUMP_ABSOLUTE 24					    56 BINARY_SUBSCR						  
							      >> 62 POP_BLOCK						    58 LOAD_CONST 5 ( - 1 )					  
							      								    60 BINARY_SUBSCR						  
							      5 >> 64 SETUP_LOOP 66 ( to 132 )				    62 LOAD_CONST 6 ( - 1 )					  
							      66 LOAD_GLOBAL 1 ( range )				    64 BINARY_SUBSCR						  
							      68 LOAD_GLOBAL 0 ( MAX_CHAR )				    66 LOAD_CONST 7 ( - 1 )					  
							      70 LOAD_CONST 3 ( 1 )					    68 BINARY_SUBSCR						  
							      72 BINARY_SUBTRACT					    70 COMPARE_OP 2 ( == )					  
							      74 LOAD_CONST 4 ( - 1 )					    72 POP_JUMP_IF_FALSE 28					  
							      76 LOAD_CONST 4 ( - 1 )					    								  
							      78 CALL_FUNCTION 3					    107 74 LOAD_FAST 5 ( i )					  
							      80 GET_ITER						    76 LOAD_CONST 4 ( - 1 )					  
							      >> 82 FOR_ITER 46 ( to 130 )				    78 BINARY_SUBSCR						  
							      84 STORE_FAST 2 ( i )					    80 STORE_FAST 5 ( i )					  
							      								    								  
							      6 86 SETUP_LOOP 40 ( to 128 )				    108 82 LOAD_FAST 5 ( i )					  
							      88 LOAD_GLOBAL 1 ( range )				    84 LOAD_CONST 4 ( - 1 )					  
							      90 LOAD_FAST 1 ( charCount )				    86 BINARY_SUBSCR						  
							      92 LOAD_FAST 2 ( i )					    88 LOAD_CONST 5 ( - 1 )					  
							      94 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      96 CALL_FUNCTION 1					    92 STORE_FAST 6 ( i )					  
							      98 GET_ITER						    								  
							      >> 100 FOR_ITER 24 ( to 126 )				    109 94 LOAD_FAST 5 ( i )					  
							      102 STORE_FAST 3 ( j )					    96 LOAD_CONST 4 ( - 1 )					  
							      								    98 BINARY_SUBSCR						  
							      7 104 LOAD_GLOBAL 4 ( print )				    100 LOAD_FAST 5 ( i )					  
							      106 LOAD_GLOBAL 5 ( chr )					    102 LOAD_CONST 4 ( - 1 )					  
							      108 LOAD_CONST 5 ( 97 )					    104 BINARY_SUBSCR						  
							      110 LOAD_FAST 2 ( i )					    106 BINARY_SUBSCR						  
							      112 BINARY_ADD						    108 LOAD_CONST 5 ( - 1 )					  
							      114 CALL_FUNCTION 1					    110 BINARY_SUBSCR						  
							      116 LOAD_CONST 6 ( '' )					    112 LOAD_CONST 4 ( - 1 )					  
							      118 LOAD_CONST 7 ( ( 'end' , ) )				    114 BINARY_SUBSCR						  
							      120 CALL_FUNCTION_KW 2					    116 LOAD_FAST 5 ( i )					  
							      122 POP_TOP						    118 LOAD_CONST 4 ( - 1 )					  
							      124 JUMP_ABSOLUTE 100					    120 BINARY_SUBSCR						  
							      >> 126 POP_BLOCK						    122 COMPARE_OP 2 ( == )					  
							      >> 128 JUMP_ABSOLUTE 82					    124 POP_JUMP_IF_FALSE 126					  
							      >> 130 POP_BLOCK						    								  
							      >> 132 LOAD_CONST 0 ( None )				    110 126 LOAD_FAST 5 ( i )					  
							      134 RETURN_VALUE NEW_LINE					    128 LOAD_CONST 4 ( - 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 5 ( - 1 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 6 ( - 1 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 7 ( - 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 8 ( - 1 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_CONST 9 ( - 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 10 ( - 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_FAST 5 ( i )					  
							      								    158 LOAD_CONST 4 ( - 1 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_FAST 5 ( i ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF
--							      --							    --								  --
def isMultipleOf3 ( n ) :				      Disassembly of <code object isMultipleOf3 at 0x7fbac0e8bc90,  Disassembly of <code object isMultipleOf3 at 0x7f816a6e4b70,  error : Traceback (most recent call last):   File
    odd_count = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( odd_count )				  "XLM/dis_script.py", line 59, in <module>	for
    even_count = 0					      2 STORE_FAST 1 ( odd_count )				    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( n < 0 ) :					      								    4 COMPARE_OP 4 ( > )					  y", line 47, in run_dis_script     co_code, co_nlo
	n = - n						      3 4 LOAD_CONST 1 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
    if ( n == 0 ) :					      6 STORE_FAST 2 ( even_count )				    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	return 1					      								    27 8 LOAD_FAST 1 ( odd_count )				  /TransCoder/XLM/src/dis_assembler.py", line 233, i
    if ( n == 1 ) :					      4 8 LOAD_FAST 0 ( n )					    10 LOAD_CONST 1 ( 0 )					  n parse     code.append(arg) ValueError: byte must
	return 0					      10 LOAD_CONST 1 ( 0 )					    12 BINARY_SUBSCR						   be in range(0, 256)
    while ( n ) :					      12 COMPARE_OP 0 ( < )					    14 STORE_FAST 1 ( odd_count )				  
	if ( n & 1 ) :					      14 POP_JUMP_IF_FALSE 22					    								  
	    odd_count += 1				      								    28 >> 16 LOAD_FAST 1 ( odd_count )				  
	if ( n & 2 ) :					      5 16 LOAD_FAST 0 ( n )					    18 LOAD_CONST 2 ( 1 )					  
	    even_count += 1				      18 UNARY_NEGATIVE						    20 COMPARE_OP 4 ( > )					  
	n = n >> 2					      20 STORE_FAST 0 ( n )					    22 POP_JUMP_IF_FALSE 28					  
    return isMultipleOf3 ( abs ( odd_count - even_count ) )   								    								  
							      6 >> 22 LOAD_FAST 0 ( n )					    29 24 LOAD_FAST 1 ( odd_count )				  
							      24 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 3 ( 1 )					  
							      26 COMPARE_OP 2 ( == )					    28 INPLACE_ADD						  
							      28 POP_JUMP_IF_FALSE 34					    30 STORE_FAST 1 ( odd_count )				  
							      								    								  
							      7 30 LOAD_CONST 2 ( 1 )					    30 >> 32 LOAD_FAST 1 ( odd_count )				  
							      32 RETURN_VALUE						    34 LOAD_CONST 4 ( 1 )					  
							      								    36 INPLACE_ADD						  
							      8 >> 34 LOAD_FAST 0 ( n )					    38 STORE_FAST 1 ( odd_count )				  
							      36 LOAD_CONST 2 ( 1 )					    								  
							      38 COMPARE_OP 2 ( == )					    31 40 LOAD_FAST 1 ( odd_count )				  
							      40 POP_JUMP_IF_FALSE 46					    42 LOAD_CONST 5 ( 1 )					  
							      								    44 INPLACE_ADD						  
							      9 42 LOAD_CONST 1 ( 0 )					    46 STORE_FAST 1 ( odd_count )				  
							      44 RETURN_VALUE						    								  
							      								    32 48 LOAD_FAST 1 ( odd_count )				  
							      10 >> 46 SETUP_LOOP 48 ( to 96 )				    50 LOAD_CONST 6 ( 2 )					  
							      >> 48 LOAD_FAST 0 ( n )					    52 INPLACE_ADD						  
							      50 POP_JUMP_IF_FALSE 94					    54 STORE_FAST 1 ( odd_count )				  
							      								    								  
							      11 52 LOAD_FAST 0 ( n )					    33 56 LOAD_FAST 1 ( odd_count )				  
							      54 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 7 ( 1 )					  
							      56 BINARY_AND						    60 INPLACE_ADD						  
							      58 POP_JUMP_IF_FALSE 68					    62 STORE_FAST 1 ( odd_count )				  
							      								    								  
							      12 60 LOAD_FAST 1 ( odd_count )				    34 64 LOAD_FAST 1 ( odd_count )				  
							      62 LOAD_CONST 2 ( 1 )					    66 LOAD_CONST 8 ( 2 )					  
							      64 INPLACE_ADD						    68 INPLACE_ADD						  
							      66 STORE_FAST 1 ( odd_count )				    70 STORE_FAST 1 ( odd_count )				  
							      								    								  
							      13 >> 68 LOAD_FAST 0 ( n )				    35 72 LOAD_FAST 1 ( odd_count )				  
							      70 LOAD_CONST 3 ( 2 )					    74 LOAD_CONST 9 ( 2 )					  
							      72 BINARY_AND						    76 INPLACE_ADD						  
							      74 POP_JUMP_IF_FALSE 84					    78 STORE_FAST 1 ( odd_count )				  
							      								    80 JUMP_FORWARD 4 ( to 80 )					  
							      14 76 LOAD_FAST 2 ( even_count )				    								  
							      78 LOAD_CONST 2 ( 1 )					    36 >> 82 LOAD_FAST 1 ( odd_count )				  
							      80 INPLACE_ADD						    84 LOAD_CONST 10 ( 2 )					  
							      82 STORE_FAST 2 ( even_count )				    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( odd_count )				  
							      15 >> 84 LOAD_FAST 0 ( n )				    								  
							      86 LOAD_CONST 3 ( 2 )					    37 >> 90 LOAD_FAST 1 ( odd_count )				  
							      88 BINARY_RSHIFT						    92 LOAD_CONST 11 ( 2 )					  
							      90 STORE_FAST 0 ( n )					    94 INPLACE_ADD						  
							      92 JUMP_ABSOLUTE 48					    96 STORE_FAST 1 ( odd_count )				  
							      >> 94 POP_BLOCK						    								  
							      								    38 98 LOAD_FAST 1 ( odd_count )				  
							      16 >> 96 LOAD_GLOBAL 0 ( isMultipleOf3 )			    100 LOAD_CONST 12 ( 2 )					  
							      98 LOAD_GLOBAL 1 ( abs )					    102 INPLACE_ADD						  
							      100 LOAD_FAST 1 ( odd_count )				    104 STORE_FAST 1 ( odd_count )				  
							      102 LOAD_FAST 2 ( even_count )				    								  
							      104 BINARY_SUBTRACT					    39 106 LOAD_FAST 1 ( odd_count )				  
							      106 CALL_FUNCTION 1					    108 LOAD_CONST 13 ( 2 )					  
							      108 CALL_FUNCTION 1					    110 INPLACE_ADD						  
							      110 RETURN_VALUE NEW_LINE					    112 STORE_FAST 1 ( odd_count )				  
							      								    								  
							      								    40 114 LOAD_FAST 1 ( odd_count )				  
							      								    116 LOAD_CONST 14 ( 2 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( odd_count )				  
							      								    								  
							      								    41 122 LOAD_FAST 1 ( odd_count )				  
							      								    124 LOAD_FAST 1 ( odd_count )				  
							      								    126 LOAD_FAST 1 ( odd_count )				  
							      								    128 LOAD_FAST 1 ( odd_count )				  
							      								    130 LOAD_FAST 1 ( odd_count )				  
							      								    132 LOAD_CONST 15 ( 2 )					  
							      								    134 STORE_SUBSCR						  
							      								    136 LOAD_CONST 0 ( None )					  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY
--							      --							    --								  --
def findArea ( arr , n ) :				      Disassembly of <code object findArea at 0x7fbac<<unk>> de40,  Disassembly of <code object findArea at 0x7f816a677930, file  error : Traceback (most recent call last):   File
    arr.sort ( reverse = True )				      2 0 LOAD_FAST 0 ( arr )					    26 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    dimension = [ 0 , 0 ]				      2 LOAD_ATTR 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    i = 0						      4 LOAD_CONST 1 ( True )					    4 CALL_METHOD 0						  y", line 47, in run_dis_script     co_code, co_nlo
    j = 0						      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
    while ( i < n - 1 and j < 2 ) :			      8 CALL_FUNCTION_KW 1					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	if ( arr [ i ] == arr [ i + 1 ] ) :		      10 POP_TOP						    27 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	    dimension [ j ] = arr [ i ]			      								    10 LOAD_CONST 1 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	    j += 1					      3 12 LOAD_CONST 3 ( 0 )					    12 COMPARE_OP 4 ( > )					   be in range(0, 256)
	    i += 1					      14 LOAD_CONST 3 ( 0 )					    14 POP_JUMP_IF_FALSE 28					  
	i += 1						      16 BUILD_LIST 2						    								  
    return ( dimension [ 0 ] * dimension [ 1 ] )	      18 STORE_FAST 2 ( dimension )				    28 16 LOAD_FAST 1 ( n )					  
							      								    18 LOAD_CONST 2 ( 0 )					  
							      4 20 LOAD_CONST 3 ( 0 )					    20 COMPARE_OP 4 ( > )					  
							      22 STORE_FAST 3 ( i )					    22 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      5 24 LOAD_CONST 3 ( 0 )					    29 24 LOAD_FAST 1 ( n )					  
							      26 STORE_FAST 4 ( j )					    26 LOAD_CONST 3 ( 1 )					  
							      								    28 INPLACE_ADD						  
							      6 28 SETUP_LOOP 80 ( to 110 )				    30 STORE_FAST 1 ( n )					  
							      >> 30 LOAD_FAST 3 ( i )					    								  
							      32 LOAD_FAST 1 ( n )					    30 >> 32 LOAD_FAST 1 ( n )					  
							      34 LOAD_CONST 4 ( 1 )					    34 LOAD_CONST 4 ( 0 )					  
							      36 BINARY_SUBTRACT					    36 COMPARE_OP 4 ( > )					  
							      38 COMPARE_OP 0 ( < )					    38 POP_JUMP_IF_FALSE 48					  
							      40 POP_JUMP_IF_FALSE 108					    								  
							      42 LOAD_FAST 4 ( j )					    31 40 LOAD_FAST 1 ( n )					  
							      44 LOAD_CONST 5 ( 2 )					    42 LOAD_CONST 5 ( 1 )					  
							      46 COMPARE_OP 0 ( < )					    44 INPLACE_ADD						  
							      48 POP_JUMP_IF_FALSE 108					    46 STORE_FAST 1 ( n )					  
							      								    								  
							      7 50 LOAD_FAST 0 ( arr )					    32 >> 48 LOAD_FAST 1 ( n )					  
							      52 LOAD_FAST 3 ( i )					    50 LOAD_CONST 6 ( 2 )					  
							      54 BINARY_SUBSCR						    52 INPLACE_ADD						  
							      56 LOAD_FAST 0 ( arr )					    54 STORE_FAST 1 ( n )					  
							      58 LOAD_FAST 3 ( i )					    								  
							      60 LOAD_CONST 4 ( 1 )					    33 56 LOAD_FAST 1 ( n )					  
							      62 BINARY_ADD						    58 LOAD_CONST 7 ( 2 )					  
							      64 BINARY_SUBSCR						    60 INPLACE_ADD						  
							      66 COMPARE_OP 2 ( == )					    62 STORE_FAST 1 ( n )					  
							      68 POP_JUMP_IF_FALSE 98					    								  
							      								    34 64 LOAD_FAST 1 ( n )					  
							      8 70 LOAD_FAST 0 ( arr )					    66 LOAD_CONST 8 ( 2 )					  
							      72 LOAD_FAST 3 ( i )					    68 INPLACE_ADD						  
							      74 BINARY_SUBSCR						    70 STORE_FAST 1 ( n )					  
							      76 LOAD_FAST 2 ( dimension )				    								  
							      78 LOAD_FAST 4 ( j )					    35 72 LOAD_FAST 1 ( n )					  
							      80 STORE_SUBSCR						    74 LOAD_CONST 9 ( 2 )					  
							      								    76 INPLACE_ADD						  
							      9 82 LOAD_FAST 4 ( j )					    78 STORE_FAST 1 ( n )					  
							      84 LOAD_CONST 4 ( 1 )					    80 JUMP_FORWARD 4 ( to 80 )					  
							      86 INPLACE_ADD						    								  
							      88 STORE_FAST 4 ( j )					    36 >> 82 LOAD_FAST 1 ( n )					  
							      								    84 LOAD_CONST 10 ( 2 )					  
							      10 90 LOAD_FAST 3 ( i )					    86 INPLACE_ADD						  
							      92 LOAD_CONST 4 ( 1 )					    88 STORE_FAST 1 ( n )					  
							      94 INPLACE_ADD						    								  
							      96 STORE_FAST 3 ( i )					    37 >> 90 LOAD_FAST 1 ( n )					  
							      								    92 LOAD_FAST 0 ( arr )					  
							      11 >> 98 LOAD_FAST 3 ( i )				    94 LOAD_CONST 11 ( 1 )					  
							      100 LOAD_CONST 4 ( 1 )					    96 INPLACE_ADD						  
							      102 INPLACE_ADD						    98 STORE_FAST 1 ( n )					  
							      104 STORE_FAST 3 ( i )					    								  
							      106 JUMP_ABSOLUTE 30					    38 >> 100 LOAD_FAST 1 ( n )					  
							      >> 108 POP_BLOCK						    102 LOAD_FAST 0 ( arr )					  
							      								    104 LOAD_CONST 12 ( '%s %s %s' )				  
							      12 >> 110 LOAD_FAST 2 ( dimension )			    106 LOAD_FAST 1 ( n )					  
							      112 LOAD_CONST 3 ( 0 )					    108 LOAD_FAST 0 ( arr )					  
							      114 BINARY_SUBSCR						    110 BUILD_TUPLE 3						  
							      116 LOAD_FAST 2 ( dimension )				    112 BINARY_MODULO						  
							      118 LOAD_CONST 4 ( 1 )					    114 INPLACE_ADD						  
							      120 BINARY_SUBSCR						    116 STORE_FAST 1 ( n )					  
							      122 BINARY_MULTIPLY					    								  
							      124 RETURN_VALUE NEW_LINE					    39 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_FAST 0 ( arr )					  
							      								    122 LOAD_FAST 0 ( arr )					  
							      								    124 BUILD_TUPLE 3						  
							      								    126 BINARY_MODULO						  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    								  
							      								    40 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_CONST 12 ( 2 )					  
							      								    136 INPLACE_ADD						  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 142 LOAD_FAST 1 ( n )					  
							      								    144 LOAD_CONST 13 ( 1 )					  
							      								    146 INPLACE_ADD						  
							      								    148 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 >> 150 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			      FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			    FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE				  FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE
--							      --							    --								  --
def Dragon_Curve_Sequence ( n ) :			      Disassembly of <code object Dragon_Curve_Sequence at 0x7fbac< Disassembly of <code object Dragon_Curve_Sequence at 0x7f816a script_not_found : None
    s = "1"						      2 0 LOAD_CONST 1 ( '1' )					    109 0 LOAD_FAST 1 ( n )					  
    for i in range ( 2 , n + 1 ) :			      2 STORE_FAST 1 ( s )					    2 LOAD_CONST 1 ( 1 )					  
	temp = "1"					      								    4 BINARY_ADD						  
	prev = '1'					      3 4 SETUP_LOOP 110 ( to 116 )				    6 STORE_FAST 2 ( n )					  
	zero = '0'					      6 LOAD_GLOBAL 0 ( range )					    								  
	one = '1'					      8 LOAD_CONST 2 ( 2 )					    110 8 LOAD_FAST 0 ( n )					  
	for j in range ( len ( s ) ) :			      10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 2 ( '1' )					  
	    temp += s [ j ]				      12 LOAD_CONST 3 ( 1 )					    12 COMPARE_OP 2 ( == )					  
	    if ( prev == '0' ) :			      14 BINARY_ADD						    14 POP_JUMP_IF_FALSE 20					  
		temp += one				      16 CALL_FUNCTION 2					    								  
		prev = one				      18 GET_ITER						    111 16 LOAD_FAST 0 ( n )					  
	    else :					      >> 20 FOR_ITER 92 ( to 114 )				    18 LOAD_CONST 3 ( '0' )					  
		temp += zero				      22 STORE_FAST 2 ( i )					    20 COMPARE_OP 2 ( == )					  
		prev = zero				      								    22 POP_JUMP_IF_FALSE 28					  
	s = temp					      4 24 LOAD_CONST 1 ( '1' )					    								  
    return s						      26 STORE_FAST 3 ( temp )					    112 24 LOAD_FAST 0 ( n )					  
							      								    26 LOAD_CONST 4 ( '0' )					  
							      5 28 LOAD_CONST 1 ( '1' )					    28 COMPARE_OP 2 ( == )					  
							      30 STORE_FAST 4 ( prev )					    30 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      6 32 LOAD_CONST 4 ( '0' )					    113 32 LOAD_FAST 0 ( n )					  
							      34 STORE_FAST 5 ( zero )					    34 LOAD_CONST 5 ( '0' )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      7 36 LOAD_CONST 1 ( '1' )					    38 POP_JUMP_IF_FALSE 42					  
							      38 STORE_FAST 6 ( one )					    								  
							      								    114 40 LOAD_FAST 0 ( n )					  
							      8 40 SETUP_LOOP 66 ( to 108 )				    42 LOAD_CONST 6 ( '0' )					  
							      42 LOAD_GLOBAL 0 ( range )				    44 COMPARE_OP 2 ( == )					  
							      44 LOAD_GLOBAL 1 ( len )					    46 POP_JUMP_IF_FALSE 48					  
							      46 LOAD_FAST 1 ( s )					    								  
							      48 CALL_FUNCTION 1					    115 48 LOAD_FAST 0 ( n )					  
							      50 CALL_FUNCTION 1					    50 LOAD_CONST 7 ( '0' )					  
							      52 GET_ITER						    52 COMPARE_OP 2 ( == )					  
							      >> 54 FOR_ITER 50 ( to 106 )				    54 POP_JUMP_IF_FALSE 48					  
							      56 STORE_FAST 7 ( j )					    								  
							      								    116 56 LOAD_FAST 0 ( n )					  
							      9 58 LOAD_FAST 3 ( temp )					    58 LOAD_CONST 8 ( '0' )					  
							      60 LOAD_FAST 1 ( s )					    60 COMPARE_OP 2 ( == )					  
							      62 LOAD_FAST 7 ( j )					    62 POP_JUMP_IF_FALSE 48					  
							      64 BINARY_SUBSCR						    								  
							      66 INPLACE_ADD						    117 64 LOAD_FAST 0 ( n )					  
							      68 STORE_FAST 3 ( temp )					    66 LOAD_CONST 9 ( '0' )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      10 70 LOAD_FAST 4 ( prev )				    70 POP_JUMP_IF_FALSE 48					  
							      72 LOAD_CONST 4 ( '0' )					    								  
							      74 COMPARE_OP 2 ( == )					    118 72 LOAD_FAST 0 ( n )					  
							      76 POP_JUMP_IF_FALSE 92					    74 LOAD_CONST 10 ( '0' )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      11 78 LOAD_FAST 3 ( temp )				    78 POP_JUMP_IF_FALSE 92					  
							      80 LOAD_FAST 6 ( one )					    								  
							      82 INPLACE_ADD						    119 80 LOAD_FAST 0 ( n )					  
							      84 STORE_FAST 3 ( temp )					    82 LOAD_CONST 11 ( '0' )					  
							      								    84 LOAD_CONST 12 ( '0' )					  
							      12 86 LOAD_FAST 6 ( one )					    86 LOAD_CONST 13 ( '0' )					  
							      88 STORE_FAST 4 ( prev )					    88 LOAD_CONST 14 ( '0' )					  
							      90 JUMP_ABSOLUTE 54					    90 LOAD_CONST 15 ( '0' )					  
							      								    92 LOAD_CONST 16 ( '0' )					  
							      14 >> 92 LOAD_FAST 3 ( temp )				    94 LOAD_CONST 17 ( '0' )					  
							      94 LOAD_FAST 5 ( zero )					    96 LOAD_CONST 18 ( '0' )					  
							      96 INPLACE_ADD						    98 LOAD_CONST 19 ( '0' )					  
							      98 STORE_FAST 3 ( temp )					    100 LOAD_CONST 20 ( '0' )					  
							      								    102 LOAD_CONST 19 ( '0' )					  
							      15 100 LOAD_FAST 5 ( zero )				    104 LOAD_CONST 20 ( '0' )					  
							      102 STORE_FAST 4 ( prev )					    106 LOAD_CONST 21 ( '0' )					  
							      104 JUMP_ABSOLUTE 54					    108 LOAD_CONST 22 ( '0' )					  
							      >> 106 POP_BLOCK						    110 LOAD_CONST 23 ( '0' )					  
							      								    112 LOAD_CONST 22 ( '0' )					  
							      16 >> 108 LOAD_FAST 3 ( temp )				    114 LOAD_CONST 23 ( '0' )					  
							      110 STORE_FAST 1 ( s )					    116 LOAD_CONST 22 ( '0' )					  
							      112 JUMP_ABSOLUTE 20					    118 LOAD_CONST 23 ( '0' )					  
							      >> 114 POP_BLOCK						    120 LOAD_CONST 23 ( '0' )					  
							      								    122 LOAD_CONST 22 ( '0' )					  
							      17 >> 116 LOAD_FAST 1 ( s )				    124 LOAD_CONST 23 ( '0' )					  
							      118 RETURN_VALUE NEW_LINE					    126 LOAD_CONST 23 ( '0' )					  
							      								    128 LOAD_CONST 23 ( '0' )					  
							      								    130 LOAD_CONST 23 ( '0' )					  
							      								    132 LOAD_CONST 23 ( '0' )					  
							      								    134 LOAD_CONST 23 ( '0' )					  
							      								    136 LOAD_CONST 23 ( '0' )					  
							      								    138 LOAD_CONST 23 ( '0' )					  
							      								    140 LOAD_CONST 23 ( '0' )					  
							      								    142 LOAD_CONST 23 ( '0' )					  
							      								    144								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DISTANCE_TWO_POINTS_EARTH			      PROGRAM_DISTANCE_TWO_POINTS_EARTH				    PROGRAM_DISTANCE_TWO_POINTS_EARTH				  PROGRAM_DISTANCE_TWO_POINTS_EARTH
--							      --							    --								  --
def distance ( lat1 , lat2 , lon1 , lon2 ) :		      Disassembly of <code object distance at 0x7fbac<<unk>> de40,  Disassembly of <code object distance at 0x7f816a6e4ae0, file  script_not_found : None
    lon1 = radians ( lon1 )				      2 0 LOAD_GLOBAL 0 ( radians )				    2 0 LOAD_GLOBAL 0 ( lon1 )					  
    lon2 = radians ( lon2 )				      2 LOAD_FAST 2 ( lon1 )					    2 LOAD_METHOD 1 ( radians )					  
    lat1 = radians ( lat1 )				      4 CALL_FUNCTION 1						    4 LOAD_FAST 1 ( lat2 )					  
    lat2 = radians ( lat2 )				      6 STORE_FAST 2 ( lon1 )					    6 CALL_METHOD 1						  
    dlon = lon2 - lon1					      								    8 STORE_FAST 1 ( lat2 )					  
    dlat = lat2 - lat1					      3 8 LOAD_GLOBAL 0 ( radians )				    								  
    a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * 10 LOAD_FAST 3 ( lon2 )					    3 10 LOAD_GLOBAL 2 ( radians )				  
    c = 2 * asin ( sqrt ( a ) )				      12 CALL_FUNCTION 1					    12 LOAD_FAST 1 ( lat2 )					  
    r = 6371						      14 STORE_FAST 3 ( lon2 )					    14 LOAD_FAST 1 ( lat2 )					  
    return ( c * r )					      								    16 CALL_FUNCTION 2						  
							      4 16 LOAD_GLOBAL 0 ( radians )				    18 STORE_FAST 2 ( alpha )					  
							      18 LOAD_FAST 0 ( lat1 )					    								  
							      20 CALL_FUNCTION 1					    4 20 LOAD_GLOBAL 3 ( radians )				  
							      22 STORE_FAST 0 ( lat1 )					    22 LOAD_FAST 2 ( alpha )					  
							      								    24 LOAD_FAST 1 ( lat2 )					  
							      5 24 LOAD_GLOBAL 0 ( radians )				    26 LOAD_FAST 2 ( alpha )					  
							      26 LOAD_FAST 1 ( lat2 )					    28 LOAD_FAST 3 ( alpha )					  
							      28 CALL_FUNCTION 1					    30 LOAD_FAST 4 ( alpha )					  
							      30 STORE_FAST 1 ( lat2 )					    32 LOAD_FAST 5 ( alpha )					  
							      								    34 LOAD_FAST 6 ( alpha )					  
							      6 32 LOAD_FAST 3 ( lon2 )					    36 LOAD_FAST 7 ( alpha )					  
							      34 LOAD_FAST 2 ( lon1 )					    38 LOAD_FAST 8 ( alpha )					  
							      36 BINARY_SUBTRACT					    40 LOAD_FAST 9 ( alpha )					  
							      38 STORE_FAST 4 ( dlon )					    42 LOAD_FAST 10 ( alpha )					  
							      								    44 LOAD_FAST 11 ( alpha )					  
							      7 40 LOAD_FAST 1 ( lat2 )					    46 LOAD_FAST 12 ( alpha )					  
							      42 LOAD_FAST 0 ( lat1 )					    48 LOAD_FAST 13 ( alpha )					  
							      44 BINARY_SUBTRACT					    50 LOAD_FAST 14 ( alpha )					  
							      46 STORE_FAST 5 ( dlat )					    52 LOAD_FAST 15 ( alpha )					  
							      								    54 LOAD_FAST 14 ( alpha )					  
							      8 48 LOAD_GLOBAL 1 ( sin )				    56 LOAD_FAST 15 ( alpha )					  
							      50 LOAD_FAST 5 ( dlat )					    58 LOAD_FAST 16 ( alpha )					  
							      52 LOAD_CONST 1 ( 2 )					    60 LOAD_FAST 17 ( alpha )					  
							      54 BINARY_TRUE_DIVIDE					    62 LOAD_FAST 18 ( alpha )					  
							      56 CALL_FUNCTION 1					    64 LOAD_FAST 19 ( alpha )					  
							      58 LOAD_CONST 1 ( 2 )					    66 LOAD_FAST 20 ( alpha )					  
							      60 BINARY_POWER						    68 LOAD_FAST 21 ( alpha )					  
							      62 LOAD_GLOBAL 2 ( cos )					    70 LOAD_FAST 22 ( alpha )					  
							      64 LOAD_FAST 0 ( lat1 )					    72 LOAD_FAST 21 ( alpha )					  
							      66 CALL_FUNCTION 1					    74 LOAD_FAST 22 ( alpha )					  
							      68 LOAD_GLOBAL 2 ( cos )					    76 LOAD_FAST 20 ( alpha )					  
							      70 LOAD_FAST 1 ( lat2 )					    78 LOAD_FAST 22 ( alpha )					  
							      72 CALL_FUNCTION 1					    80 LOAD_FAST 21 ( alpha )					  
							      74 BINARY_MULTIPLY					    82 LOAD_FAST 22 ( alpha )					  
							      76 LOAD_GLOBAL 1 ( sin )					    84 LOAD_FAST 22 ( alpha )					  
							      78 LOAD_FAST 4 ( dlon )					    86 LOAD_FAST 23 ( alpha )					  
							      80 LOAD_CONST 1 ( 2 )					    88 LOAD_FAST 22 ( alpha )					  
							      82 BINARY_TRUE_DIVIDE					    90 LOAD_FAST 23 ( alpha )					  
							      84 CALL_FUNCTION 1					    92 LOAD_FAST 22 ( alpha )					  
							      86 LOAD_CONST 1 ( 2 )					    94 LOAD_FAST 23 ( alpha )					  
							      88 BINARY_POWER						    96 LOAD_FAST 22 ( alpha )					  
							      90 BINARY_MULTIPLY					    98 LOAD_FAST 23 ( alpha )					  
							      92 BINARY_ADD						    100 LOAD_FAST 24 ( alpha )					  
							      94 STORE_FAST 6 ( a )					    102 LOAD_FAST 26 ( alpha )					  
							      								    104 LOAD_FAST 28 ( alpha )					  
							      9 96 LOAD_CONST 1 ( 2 )					    106 LOAD_FAST 30 ( alpha )					  
							      98 LOAD_GLOBAL 3 ( asin )					    108 LOAD_FAST 5 ( alpha )					  
							      100 LOAD_GLOBAL 4 ( sqrt )				    110 LOAD_FAST 6 ( alpha )					  
							      102 LOAD_FAST 6 ( a )					    112 LOAD_FAST 7 ( alpha )					  
							      104 CALL_FUNCTION 1					    114 LOAD_FAST 8 ( alpha )					  
							      106 CALL_FUNCTION 1					    116 LOAD_FAST 7 ( alpha )					  
							      108 BINARY_MULTIPLY					    118 LOAD_FAST 8 ( alpha )					  
							      110 STORE_FAST 7 ( c )					    120 LOAD_FAST 9 ( alpha )					  
							      								    122 LOAD_FAST 10 ( alpha )					  
							      10 112 LOAD_CONST 2 ( 6371 )				    124 LOAD_FAST 11 ( alpha )					  
							      114 STORE_FAST 8 ( r )					    126 LOAD_FAST 12 ( alpha )					  
							      								    128 LOAD_FAST 13 ( alpha )					  
							      11 116 LOAD_FAST 7 ( c )					    130 LOAD_FAST 14 ( alpha )					  
							      118 LOAD_FAST 8 ( r )					    132 LOAD_FAST 15 ( alpha )					  
							      120 BINARY_MULTIPLY					    134 LOAD_FAST 14 ( alpha )					  
							      122 RETURN_VALUE NEW_LINE					    136 LOAD_FAST 15 ( alpha )					  
							      								    138 LOAD_FAST 16 ( alpha )					  
							      								    140 LOAD_FAST 17 ( alpha )					  
							      								    142 LOAD_FAST 18						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7fbac<<unk>> d8a0, f Disassembly of <code object findSum at 0x7f816a6e4b70, file " error : /bin/bash: line 1: 26441 Segmentation faul
    ans = 0 ; temp = 0 ;				      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( ans )					    2 STORE_FAST 1 ( n )					  ataset/bin/python XLM/dis_script.py --script_path
	if temp < n :					      4 LOAD_CONST 1 ( 0 )					    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	    temp = i - 1				      6 STORE_FAST 2 ( temp )					    27 4 LOAD_FAST 1 ( n )					  eval_scripts/python_sa-dis_sa.test/SUM_MATRIX_ELEM
	    num = 1					      								    6 LOAD_CONST 2 ( 1 )					  ENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1.dis
	    while temp < n :				      3 8 SETUP_LOOP 114 ( to 124 )				    8 INPLACE_ADD						  
		if temp + i <= n :			      10 LOAD_GLOBAL 0 ( range )				    10 STORE_FAST 1 ( n )					  
		    ans += i * num			      12 LOAD_CONST 2 ( 1 )					    								  
		else :					      14 LOAD_FAST 0 ( n )					    28 12 LOAD_FAST 1 ( n )					  
		    ans += ( n - temp ) * num		      16 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 3 ( 1 )					  
		temp += i				      18 BINARY_ADD						    16 INPLACE_ADD						  
		num += 1				      20 CALL_FUNCTION 2					    18 STORE_FAST 1 ( n )					  
    return ans						      22 GET_ITER						    								  
							      >> 24 FOR_ITER 96 ( to 122 )				    29 20 LOAD_FAST 1 ( n )					  
							      26 STORE_FAST 3 ( i )					    22 LOAD_CONST 4 ( - 1 )					  
							      								    24 INPLACE_ADD						  
							      4 28 LOAD_FAST 2 ( temp )					    26 STORE_FAST 1 ( n )					  
							      30 LOAD_FAST 0 ( n )					    								  
							      32 COMPARE_OP 0 ( < )					    30 28 LOAD_FAST 1 ( n )					  
							      34 POP_JUMP_IF_FALSE 24					    30 LOAD_CONST 5 ( - 1 )					  
							      								    32 INPLACE_ADD						  
							      5 36 LOAD_FAST 3 ( i )					    34 STORE_FAST 1 ( n )					  
							      38 LOAD_CONST 2 ( 1 )					    								  
							      40 BINARY_SUBTRACT					    31 36 LOAD_FAST 1 ( n )					  
							      42 STORE_FAST 2 ( temp )					    38 LOAD_CONST 6 ( - 1 )					  
							      								    40 INPLACE_ADD						  
							      6 44 LOAD_CONST 2 ( 1 )					    42 STORE_FAST 1 ( n )					  
							      46 STORE_FAST 4 ( num )					    								  
							      								    32 44 LOAD_FAST 1 ( n )					  
							      7 48 SETUP_LOOP 70 ( to 120 )				    46 LOAD_CONST 7 ( 1 )					  
							      >> 50 LOAD_FAST 2 ( temp )				    48 INPLACE_ADD						  
							      52 LOAD_FAST 0 ( n )					    50 STORE_FAST 1 ( n )					  
							      54 COMPARE_OP 0 ( < )					    								  
							      56 POP_JUMP_IF_FALSE 118					    33 52 LOAD_FAST 1 ( n )					  
							      								    54 LOAD_CONST 8 ( - 1 )					  
							      8 58 LOAD_FAST 2 ( temp )					    56 INPLACE_ADD						  
							      60 LOAD_FAST 3 ( i )					    58 STORE_FAST 1 ( n )					  
							      62 BINARY_ADD						    								  
							      64 LOAD_FAST 0 ( n )					    34 60 LOAD_FAST 1 ( n )					  
							      66 COMPARE_OP 1 ( <= )					    62 LOAD_CONST 9 ( 1 )					  
							      68 POP_JUMP_IF_FALSE 84					    64 INPLACE_ADD						  
							      								    66 STORE_FAST 1 ( n )					  
							      9 70 LOAD_FAST 1 ( ans )					    								  
							      72 LOAD_FAST 3 ( i )					    35 68 LOAD_FAST 1 ( n )					  
							      74 LOAD_FAST 4 ( num )					    70 LOAD_CONST 10 ( - 1 )					  
							      76 BINARY_MULTIPLY					    72 INPLACE_ADD						  
							      78 INPLACE_ADD						    74 STORE_FAST 1 ( n )					  
							      80 STORE_FAST 1 ( ans )					    								  
							      82 JUMP_FORWARD 16 ( to 100 )				    36 76 LOAD_FAST 1 ( n )					  
							      								    78 LOAD_CONST 11 ( 1 )					  
							      11 >> 84 LOAD_FAST 1 ( ans )				    80 INPLACE_ADD						  
							      86 LOAD_FAST 0 ( n )					    82 STORE_FAST 1 ( n )					  
							      88 LOAD_FAST 2 ( temp )					    								  
							      90 BINARY_SUBTRACT					    37 84 LOAD_FAST 1 ( n )					  
							      92 LOAD_FAST 4 ( num )					    86 LOAD_CONST 12 ( - 1 )					  
							      94 BINARY_MULTIPLY					    88 INPLACE_ADD						  
							      96 INPLACE_ADD						    90 STORE_FAST 1 ( n )					  
							      98 STORE_FAST 1 ( ans )					    								  
							      								    38 92 LOAD_FAST 1 ( n )					  
							      12 >> 100 LOAD_FAST 2 ( temp )				    94 LOAD_FAST 0 ( n )					  
							      102 LOAD_FAST 3 ( i )					    96 INPLACE_ADD						  
							      104 INPLACE_ADD						    98 STORE_FAST 1 ( n )					  
							      106 STORE_FAST 2 ( temp )					    								  
							      								    39 100 LOAD_FAST 1 ( n )					  
							      13 108 LOAD_FAST 4 ( num )				    102 LOAD_FAST 0 ( n )					  
							      110 LOAD_CONST 2 ( 1 )					    104 INPLACE_ADD						  
							      112 INPLACE_ADD						    106 STORE_FAST 1 ( n )					  
							      114 STORE_FAST 4 ( num )					    108 LOAD_CONST 13 ( 1 )					  
							      116 JUMP_ABSOLUTE 50					    110 INPLACE_ADD						  
							      >> 118 POP_BLOCK						    112 STORE_FAST 1 ( n )					  
							      >> 120 JUMP_ABSOLUTE 24					    								  
							      >> 122 POP_BLOCK						    40 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_FAST 0 ( n )					  
							      14 >> 124 LOAD_FAST 1 ( ans )				    118 INPLACE_ADD						  
							      126 RETURN_VALUE NEW_LINE					    120 STORE_FAST 1 ( n )					  
							      								    								  
							      								    41 122 LOAD_FAST 1 ( n )					  
							      								    124 LOAD_FAST 0 ( n )					  
							      								    126 INPLACE_ADD						  
							      								    128 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_FAST 0 ( n )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 1 ( n )					  
							      								    								  
							      								    43 138 LOAD_FAST 1 ( n )					  
							      								    140 LOAD_FAST 0 ( n )					  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    44 146 LOAD_FAST 1 ( n )					  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTISTAGE_GRAPH_SHORTEST_PATH				      MULTISTAGE_GRAPH_SHORTEST_PATH				    MULTISTAGE_GRAPH_SHORTEST_PATH				  MULTISTAGE_GRAPH_SHORTEST_PATH
--							      --							    --								  --
def shortestDist ( graph ) :				      Disassembly of <code object shortestDist at 0x7fbac0e8bc90, f Disassembly of <code object shortestDist at 0x7f816a673a50, f script_not_found : None
    global INF						      3 0 LOAD_CONST 1 ( 0 )					    90 0 LOAD_FAST 0 ( graph )					  
    dist = [ 0 ] * N					      2 BUILD_LIST 1						    2 LOAD_ATTR 0 ( N )						  
    dist [ N - 1 ] = 0					      4 LOAD_GLOBAL 0 ( N )					    4 LOAD_CONST 1 ( 1 )					  
    for i in range ( N - 2 , - 1 , - 1 ) :		      6 BINARY_MULTIPLY						    6 LOAD_CONST 2 ( 2 )					  
	dist [ i ] = INF				      8 STORE_FAST 1 ( dist )					    8 LOAD_CONST 3 ( 3 )					  
	for j in range ( N ) :				      								    10 LOAD_CONST 4 ( 4 )					  
	    if graph [ i ] [ j ] == INF :		      4 10 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 5 ( 6 )					  
		continue				      12 LOAD_FAST 1 ( dist )					    14 LOAD_CONST 6 ( 7 )					  
	    dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] 14 LOAD_GLOBAL 0 ( N )					    16 LOAD_CONST 7 ( 8 )					  
    return dist [ 0 ]					      16 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 8 ( 10 )					  
							      18 BINARY_SUBTRACT					    20 LOAD_CONST 9 ( 12 )					  
							      20 STORE_SUBSCR						    22 LOAD_CONST 10 ( 3 )					  
							      								    24 LOAD_CONST 11 ( ( 'dtype' , 'dtype' ) )			  
							      5 22 SETUP_LOOP 102 ( to 126 )				    26 CALL_FUNCTION_KW 5					  
							      24 LOAD_GLOBAL 1 ( range )				    28 STORE_FAST 1 ( G )					  
							      26 LOAD_GLOBAL 0 ( N )					    								  
							      28 LOAD_CONST 3 ( 2 )					    92 30 LOAD_FAST 1 ( G )					  
							      30 BINARY_SUBTRACT					    32 LOAD_METHOD 1 ( add )					  
							      32 LOAD_CONST 4 ( - 1 )					    34 LOAD_FAST 0 ( graph )					  
							      34 LOAD_CONST 4 ( - 1 )					    36 LOAD_ATTR 2 ( shape )					  
							      36 CALL_FUNCTION 3					    38 LOAD_CONST 12 ( ( 'dtype' , 'dtype' ) )			  
							      38 GET_ITER						    40 CALL_FUNCTION_KW 2					  
							      >> 40 FOR_ITER 82 ( to 124 )				    42 POP_TOP							  
							      42 STORE_FAST 2 ( i )					    								  
							      								    93 44 LOAD_FAST 1 ( G )					  
							      6 44 LOAD_GLOBAL 2 ( INF )				    46 LOAD_METHOD 1 ( add )					  
							      46 LOAD_FAST 1 ( dist )					    48 LOAD_FAST 0 ( graph )					  
							      48 LOAD_FAST 2 ( i )					    50 LOAD_ATTR 2 ( shape )					  
							      50 STORE_SUBSCR						    52 LOAD_CONST 12 ( ( 'dtype' , 'dtype' ) )			  
							      								    54 CALL_FUNCTION_KW 2					  
							      7 52 SETUP_LOOP 68 ( to 122 )				    56 POP_TOP							  
							      54 LOAD_GLOBAL 1 ( range )				    58 LOAD_CONST 0 ( None )					  
							      56 LOAD_GLOBAL 0 ( N )					    60 RETURN_VALUE NEW_LINE					  
							      58 CALL_FUNCTION 1					    								  
							      60 GET_ITER						    								  
							      >> 62 FOR_ITER 56 ( to 120 )				    								  
							      64 STORE_FAST 3 ( j )					    								  
							      								    								  
							      8 66 LOAD_FAST 0 ( graph )				    								  
							      68 LOAD_FAST 2 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_FAST 3 ( j )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 LOAD_GLOBAL 2 ( INF )					    								  
							      78 COMPARE_OP 2 ( == )					    								  
							      80 POP_JUMP_IF_FALSE 84					    								  
							      								    								  
							      9 82 JUMP_ABSOLUTE 62					    								  
							      								    								  
							      10 >> 84 LOAD_GLOBAL 3 ( min )				    								  
							      86 LOAD_FAST 1 ( dist )					    								  
							      88 LOAD_FAST 2 ( i )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 LOAD_FAST 0 ( graph )					    								  
							      94 LOAD_FAST 2 ( i )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 LOAD_FAST 3 ( j )					    								  
							      100 BINARY_SUBSCR						    								  
							      102 LOAD_FAST 1 ( dist )					    								  
							      104 LOAD_FAST 3 ( j )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 BINARY_ADD						    								  
							      110 CALL_FUNCTION 2					    								  
							      112 LOAD_FAST 1 ( dist )					    								  
							      114 LOAD_FAST 2 ( i )					    								  
							      116 STORE_SUBSCR						    								  
							      118 JUMP_ABSOLUTE 62					    								  
							      >> 120 POP_BLOCK						    								  
							      >> 122 JUMP_ABSOLUTE 40					    								  
							      >> 124 POP_BLOCK						    								  
							      								    								  
							      11 >> 126 LOAD_FAST 1 ( dist )				    								  
							      128 LOAD_CONST 1 ( 0 )					    								  
							      130 BINARY_SUBSCR						    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL
--							      --							    --								  --
def findMinimumAngle ( arr , n ) :			      Disassembly of <code object findMinimumAngle at 0x7fbac0e89d2 Disassembly of <code object findDumpAngle at 0x7f816a681780,  error : Traceback (most recent call last):   File
    l = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    _sum = 0						      2 STORE_FAST 2 ( l )					    2 LOAD_FAST 0 ( arr )					  (item)   File "main.py", line 38, in <module>	  Fi
    ans = 360						      								    4 BINARY_MULTIPLY						  le "<dis>", line 2, in findMinimumAngle TypeError:
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 2 ( a )					   can't multiply sequence by non-int of type 'list'
	_sum += arr [ i ]				      6 STORE_FAST 3 ( _sum )					    								  
	while _sum >= 180 :				      								    27 8 LOAD_FAST 2 ( a )					  
	    ans = min ( ans , 2 * abs ( 180 - _sum ) )	      4 8 LOAD_CONST 2 ( 360 )					    10 LOAD_FAST 0 ( arr )					  
	    _sum -= arr [ l ]				      10 STORE_FAST 4 ( ans )					    12 BINARY_MULTIPLY						  
	    l += 1					      								    14 STORE_FAST 3 ( b )					  
	ans = min ( ans , 2 * abs ( 180 - _sum ) )	      5 12 SETUP_LOOP 106 ( to 120 )				    								  
    return ans						      14 LOAD_GLOBAL 0 ( range )				    28 16 LOAD_FAST 2 ( a )					  
							      16 LOAD_FAST 1 ( n )					    18 LOAD_FAST 0 ( arr )					  
							      18 CALL_FUNCTION 1					    20 BINARY_MULTIPLY						  
							      20 GET_ITER						    22 LOAD_FAST 3 ( b )					  
							      >> 22 FOR_ITER 94 ( to 118 )				    24 BINARY_MULTIPLY						  
							      24 STORE_FAST 5 ( i )					    26 LOAD_FAST 0 ( arr )					  
							      								    28 BINARY_MULTIPLY						  
							      6 26 LOAD_FAST 3 ( _sum )					    30 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 0 ( arr )					    32 BINARY_MULTIPLY						  
							      30 LOAD_FAST 5 ( i )					    34 BINARY_ADD						  
							      32 BINARY_SUBSCR						    36 LOAD_FAST 0 ( arr )					  
							      34 INPLACE_ADD						    38 BINARY_MULTIPLY						  
							      36 STORE_FAST 3 ( _sum )					    40 BINARY_ADD						  
							      								    42 LOAD_FAST 0 ( arr )					  
							      7 38 SETUP_LOOP 54 ( to 94 )				    44 BINARY_MULTIPLY						  
							      >> 40 LOAD_FAST 3 ( _sum )				    46 BINARY_ADD						  
							      42 LOAD_CONST 3 ( 180 )					    48 LOAD_FAST 2 ( a )					  
							      44 COMPARE_OP 5 ( >= )					    50 BINARY_MULTIPLY						  
							      46 POP_JUMP_IF_FALSE 92					    52 BINARY_ADD						  
							      								    54 LOAD_FAST 0 ( arr )					  
							      8 48 LOAD_GLOBAL 1 ( min )				    56 BINARY_MULTIPLY						  
							      50 LOAD_FAST 4 ( ans )					    58 BINARY_ADD						  
							      52 LOAD_CONST 4 ( 2 )					    60 BINARY_MULTIPLY						  
							      54 LOAD_GLOBAL 2 ( abs )					    62 BINARY_ADD						  
							      56 LOAD_CONST 3 ( 180 )					    64 RETURN_VALUE						  
							      58 LOAD_FAST 3 ( _sum )					    NEW_LINE							  
							      60 BINARY_SUBTRACT					    								  
							      62 CALL_FUNCTION 1					    								  
							      64 BINARY_MULTIPLY					    								  
							      66 CALL_FUNCTION 2					    								  
							      68 STORE_FAST 4 ( ans )					    								  
							      								    								  
							      9 70 LOAD_FAST 3 ( _sum )					    								  
							      72 LOAD_FAST 0 ( arr )					    								  
							      74 LOAD_FAST 2 ( l )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 INPLACE_SUBTRACT					    								  
							      80 STORE_FAST 3 ( _sum )					    								  
							      								    								  
							      10 82 LOAD_FAST 2 ( l )					    								  
							      84 LOAD_CONST 5 ( 1 )					    								  
							      86 INPLACE_ADD						    								  
							      88 STORE_FAST 2 ( l )					    								  
							      90 JUMP_ABSOLUTE 40					    								  
							      >> 92 POP_BLOCK						    								  
							      								    								  
							      11 >> 94 LOAD_GLOBAL 1 ( min )				    								  
							      96 LOAD_FAST 4 ( ans )					    								  
							      98 LOAD_CONST 4 ( 2 )					    								  
							      100 LOAD_GLOBAL 2 ( abs )					    								  
							      102 LOAD_CONST 3 ( 180 )					    								  
							      104 LOAD_FAST 3 ( _sum )					    								  
							      106 BINARY_SUBTRACT					    								  
							      108 CALL_FUNCTION 1					    								  
							      110 BINARY_MULTIPLY					    								  
							      112 CALL_FUNCTION 2					    								  
							      114 STORE_FAST 4 ( ans )					    								  
							      116 JUMP_ABSOLUTE 22					    								  
							      >> 118 POP_BLOCK						    								  
							      								    								  
							      12 >> 120 LOAD_FAST 4 ( ans )				    								  
							      122 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING	      MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		    MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		  MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING
--							      --							    --								  --
def maxDP ( n ) :					      Disassembly of <code object maxDP at 0x7fbac<<unk>> de40, fil Disassembly of <code object maxDP at 0x7f816a673a50, file "<d error : Traceback (most recent call last):   File
    res = list ( )					      2 0 LOAD_GLOBAL 0 ( list )				    26 0 LOAD_GLOBAL 0 ( list )					  "XLM/dis_script.py", line 60, in <module>	exec
    res.append ( 0 )					      2 CALL_FUNCTION 0						    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 35, in <module>	  Fi
    res.append ( 1 )					      4 STORE_FAST 1 ( res )					    4 CALL_FUNCTION 1						  le "<dis>", line 2, in maxDP TypeError: 'int' obje
    i = 2						      								    6 LOAD_CONST 1 ( 1 )					  ct is not iterable
    while i < n + 1 :					      3 6 LOAD_FAST 1 ( res )					    8 COMPARE_OP 4 ( > )					  
	res.append ( max ( i , ( res [ int ( i / 2 ) ] + res  8 LOAD_METHOD 1 ( append )				    10 POP_JUMP_IF_FALSE 20					  
	i = i + 1					      10 LOAD_CONST 1 ( 0 )					    								  
    return res [ n ]					      12 CALL_METHOD 1						    27 12 LOAD_FAST 0 ( n )					  
							      14 POP_TOP						    14 LOAD_CONST 2 ( 2 )					  
							      								    16 BINARY_POWER						  
							      4 16 LOAD_FAST 1 ( res )					    18 STORE_FAST 0 ( n )					  
							      18 LOAD_METHOD 1 ( append )				    								  
							      20 LOAD_CONST 2 ( 1 )					    28 20 LOAD_FAST 0 ( n )					  
							      22 CALL_METHOD 1						    22 LOAD_CONST 3 ( 1 )					  
							      24 POP_TOP						    24 INPLACE_ADD						  
							      								    26 STORE_FAST 0 ( n )					  
							      5 26 LOAD_CONST 3 ( 2 )					    								  
							      28 STORE_FAST 2 ( i )					    29 28 LOAD_FAST 0 ( n )					  
							      								    30 LOAD_CONST 4 ( 2 )					  
							      6 30 SETUP_LOOP 100 ( to 132 )				    32 BINARY_POWER						  
							      >> 32 LOAD_FAST 2 ( i )					    34 STORE_FAST 1 ( n )					  
							      34 LOAD_FAST 0 ( n )					    								  
							      36 LOAD_CONST 2 ( 1 )					    30 36 LOAD_FAST 0 ( n )					  
							      38 BINARY_ADD						    38 LOAD_CONST 5 ( 1 )					  
							      40 COMPARE_OP 0 ( < )					    40 INPLACE_ADD						  
							      42 POP_JUMP_IF_FALSE 130					    42 STORE_FAST 0 ( n )					  
							      								    								  
							      7 44 LOAD_FAST 1 ( res )					    31 44 LOAD_FAST 0 ( n )					  
							      46 LOAD_METHOD 1 ( append )				    46 LOAD_CONST 6 ( 2 )					  
							      48 LOAD_GLOBAL 2 ( max )					    48 BINARY_POWER						  
							      50 LOAD_FAST 2 ( i )					    50 STORE_FAST 1 ( n )					  
							      52 LOAD_FAST 1 ( res )					    								  
							      54 LOAD_GLOBAL 3 ( int )					    32 52 LOAD_FAST 0 ( n )					  
							      56 LOAD_FAST 2 ( i )					    54 LOAD_CONST 7 ( 3 )					  
							      58 LOAD_CONST 3 ( 2 )					    56 BINARY_POWER						  
							      60 BINARY_TRUE_DIVIDE					    58 LOAD_FAST 1 ( n )					  
							      62 CALL_FUNCTION 1					    60 LOAD_CONST 8 ( 2 )					  
							      64 BINARY_SUBSCR						    62 BINARY_POWER						  
							      66 LOAD_FAST 1 ( res )					    64 BINARY_MULTIPLY						  
							      68 LOAD_GLOBAL 3 ( int )					    66 LOAD_FAST 1 ( n )					  
							      70 LOAD_FAST 2 ( i )					    68 LOAD_CONST 9 ( 2 )					  
							      72 LOAD_CONST 4 ( 3 )					    70 BINARY_POWER						  
							      74 BINARY_TRUE_DIVIDE					    72 BINARY_POWER						  
							      76 CALL_FUNCTION 1					    74 LOAD_FAST 1 ( n )					  
							      78 BINARY_SUBSCR						    76 LOAD_CONST 10 ( 2 )					  
							      80 BINARY_ADD						    78 BINARY_POWER						  
							      82 LOAD_FAST 1 ( res )					    80 BINARY_MULTIPLY						  
							      84 LOAD_GLOBAL 3 ( int )					    82 LOAD_FAST 1 ( n )					  
							      86 LOAD_FAST 2 ( i )					    84 LOAD_CONST 11 ( 3 )					  
							      88 LOAD_CONST 5 ( 4 )					    86 BINARY_POWER						  
							      90 BINARY_TRUE_DIVIDE					    88 BINARY_MULTIPLY						  
							      92 CALL_FUNCTION 1					    90 BINARY_ADD						  
							      94 BINARY_SUBSCR						    92 LOAD_FAST 1 ( n )					  
							      96 BINARY_ADD						    94 LOAD_CONST 12 ( 2 )					  
							      98 LOAD_FAST 1 ( res )					    96 BINARY_POWER						  
							      100 LOAD_GLOBAL 3 ( int )					    98 BINARY_MULTIPLY						  
							      102 LOAD_FAST 2 ( i )					    100 BINARY_ADD						  
							      104 LOAD_CONST 6 ( 5 )					    102 LOAD_FAST 1 ( n )					  
							      106 BINARY_TRUE_DIVIDE					    104 LOAD_CONST 13 ( 3 )					  
							      108 CALL_FUNCTION 1					    106 BINARY_POWER						  
							      110 BINARY_SUBSCR						    108 BINARY_MULTIPLY						  
							      112 BINARY_ADD						    110 BINARY_ADD						  
							      114 CALL_FUNCTION 2					    112 LOAD_FAST 1 ( n )					  
							      116 CALL_METHOD 1						    114 LOAD_CONST 12 ( 2 )					  
							      118 POP_TOP						    116 BINARY_POWER						  
							      								    118 BINARY_MULTIPLY						  
							      8 120 LOAD_FAST 2 ( i )					    120 BINARY_ADD						  
							      122 LOAD_CONST 2 ( 1 )					    122 LOAD_FAST 1 ( n )					  
							      124 BINARY_ADD						    124 LOAD_CONST 13 ( 3 )					  
							      126 STORE_FAST 2 ( i )					    126 BINARY_POWER						  
							      128 JUMP_ABSOLUTE 32					    128 BINARY_MULTIPLY						  
							      >> 130 POP_BLOCK						    130 BINARY_ADD						  
							      								    132 LOAD_FAST 1 ( n )					  
							      9 >> 132 LOAD_FAST 1 ( res )				    134 LOAD_CONST 14 ( 2 )					  
							      134 LOAD_FAST 0 ( n )					    136 BINARY_POWER						  
							      136 BINARY_SUBSCR						    138 BINARY_MULTIPLY						  
							      138 RETURN_VALUE NEW_LINE					    140 BINARY_ADD						  
							      								    142 LOAD_FAST 1 ( n )					  
							      								    144 BINARY_MULTIPLY						  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_FAST 1 ( n )					  
							      								    150 LOAD_CONST 15 ( 3 )					  
							      								    152 BINARY_POWER						  
							      								    154 BINARY_MULTIPLY						  
							      								    156 BINARY_ADD						  
							      								    158 LOAD_FAST 1 ( n )					  
							      								    160 BINARY_MULTIPLY						  
							      								    162 BINARY_ADD						  
							      								    164 LOAD_FAST 1 ( n )					  
							      								    166 BINARY_MULTIPLY						  
							      								    168 BINARY_ADD						  
							      								    170 LOAD_FAST 1 ( n )					  
							      								    172 BINARY_ADD						  
							      								    174 BINARY_ADD						  
							      								    176 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	      COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	    COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	  COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES
--							      --							    --								  --
def countwalks ( graph , u , v , k ) :			      Disassembly of <code object countwalks at 0x7fbac0e8bc90, fil Disassembly of <code object countwalks at 0x7f816a6e4b70, fil script_not_found : None
    if ( k == 0 and u == v ) :				      2 0 LOAD_FAST 3 ( k )					    26 0 LOAD_FAST 1 ( u )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( k == 1 and graph [ u ] [ v ] ) :		      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 1					      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 12					  
    if ( k <= 0 ) :					      8 LOAD_FAST 1 ( u )					    								  
	return 0					      10 LOAD_FAST 2 ( v )					    27 8 LOAD_FAST 1 ( u )					  
    count = 0						      12 COMPARE_OP 2 ( == )					    10 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , V ) :				      14 POP_JUMP_IF_FALSE 20					    12 BINARY_SUBSCR						  
	if ( graph [ u ] [ i ] == 1 ) :			      								    14 LOAD_CONST 2 ( 1 )					  
	    count += countwalks ( graph , i , v , k - 1 )     3 16 LOAD_CONST 2 ( 1 )					    16 COMPARE_OP 2 ( == )					  
    return count					      18 RETURN_VALUE						    18 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      4 >> 20 LOAD_FAST 3 ( k )					    28 20 LOAD_FAST 1 ( u )					  
							      22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 COMPARE_OP 2 ( == )					    24 BINARY_SUBSCR						  
							      26 POP_JUMP_IF_FALSE 44					    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_FAST 0 ( graph )					    28 COMPARE_OP 2 ( == )					  
							      30 LOAD_FAST 1 ( u )					    30 POP_JUMP_IF_FALSE 28					  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_FAST 2 ( v )					    29 32 LOAD_FAST 1 ( u )					  
							      36 BINARY_SUBSCR						    34 LOAD_CONST 1 ( 0 )					  
							      38 POP_JUMP_IF_FALSE 44					    36 BINARY_SUBSCR						  
							      								    38 LOAD_CONST 4 ( 1 )					  
							      5 40 LOAD_CONST 2 ( 1 )					    40 COMPARE_OP 2 ( == )					  
							      42 RETURN_VALUE						    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      6 >> 44 LOAD_FAST 3 ( k )					    30 44 LOAD_FAST 1 ( u )					  
							      46 LOAD_CONST 1 ( 0 )					    46 LOAD_CONST 1 ( 0 )					  
							      48 COMPARE_OP 1 ( <= )					    48 BINARY_SUBSCR						  
							      50 POP_JUMP_IF_FALSE 56					    50 LOAD_CONST 5 ( 1 )					  
							      								    52 BINARY_SUBSCR						  
							      7 52 LOAD_CONST 1 ( 0 )					    54 LOAD_CONST 6 ( 2 )					  
							      54 RETURN_VALUE						    56 COMPARE_OP 2 ( == )					  
							      								    58 POP_JUMP_IF_FALSE 48					  
							      8 >> 56 LOAD_CONST 1 ( 0 )				    								  
							      58 STORE_FAST 4 ( count )					    31 60 LOAD_FAST 1 ( u )					  
							      								    62 LOAD_CONST 1 ( 0 )					  
							      9 60 SETUP_LOOP 56 ( to 118 )				    64 BINARY_SUBSCR						  
							      62 LOAD_GLOBAL 0 ( range )				    66 LOAD_CONST 7 ( 1 )					  
							      64 LOAD_CONST 1 ( 0 )					    68 BINARY_SUBSCR						  
							      66 LOAD_GLOBAL 1 ( V )					    70 LOAD_CONST 8 ( 2 )					  
							      68 CALL_FUNCTION 2					    72 COMPARE_OP 2 ( == )					  
							      70 GET_ITER						    74 POP_JUMP_IF_FALSE 80					  
							      >> 72 FOR_ITER 42 ( to 116 )				    								  
							      74 STORE_FAST 5 ( i )					    32 76 LOAD_FAST 1 ( u )					  
							      								    78 LOAD_CONST 1 ( 0 )					  
							      10 76 LOAD_FAST 0 ( graph )				    80 BINARY_SUBSCR						  
							      78 LOAD_FAST 1 ( u )					    82 LOAD_CONST 9 ( 1 )					  
							      80 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      82 LOAD_FAST 5 ( i )					    86 LOAD_CONST 10 ( 2 )					  
							      84 BINARY_SUBSCR						    88 COMPARE_OP 2 ( == )					  
							      86 LOAD_CONST 2 ( 1 )					    90 POP_JUMP_IF_FALSE 80					  
							      88 COMPARE_OP 2 ( == )					    								  
							      90 POP_JUMP_IF_FALSE 72					    33 92 LOAD_FAST 1 ( u )					  
							      								    94 LOAD_CONST 1 ( 0 )					  
							      11 92 LOAD_FAST 4 ( count )				    96 BINARY_SUBSCR						  
							      94 LOAD_GLOBAL 2 ( countwalks )				    98 LOAD_CONST 10 ( 2 )					  
							      96 LOAD_FAST 0 ( graph )					    100 COMPARE_OP 2 ( == )					  
							      98 LOAD_FAST 5 ( i )					    102 POP_JUMP_IF_FALSE 80					  
							      100 LOAD_FAST 2 ( v )					    								  
							      102 LOAD_FAST 3 ( k )					    34 104 LOAD_FAST 1 ( u )					  
							      104 LOAD_CONST 2 ( 1 )					    106 LOAD_CONST 1 ( 0 )					  
							      106 BINARY_SUBTRACT					    108 BINARY_SUBSCR						  
							      108 CALL_FUNCTION 4					    110 LOAD_CONST 11 ( 1 )					  
							      110 INPLACE_ADD						    112 BINARY_SUBSCR						  
							      112 STORE_FAST 4 ( count )				    114 LOAD_CONST 12 ( 2 )					  
							      114 JUMP_ABSOLUTE 72					    116 BINARY_SUBSCR						  
							      >> 116 POP_BLOCK						    118 LOAD_CONST 13 ( 1 )					  
							      								    120 BINARY_SUBSCR						  
							      12 >> 118 LOAD_FAST 4 ( count )				    122 LOAD_CONST 14 ( 2 )					  
							      120 RETURN_VALUE NEW_LINE					    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 15 ( 1 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 16 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 17 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 16 ( 2 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    35 144 LOAD_FAST 1 ( u )					  
							      								    146 LOAD_CONST 16 ( 2 )					  
							      								    148 LOAD_CONST 17 ( 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 18 ( 2 )					  
							      								    154 COMPARE_OP 2 ( == )					  
							      								    156 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    36 >> 158 LOAD_FAST 1 ( u )					  
							      								    160 LOAD_CONST 18 ( 2 )					  
							      								    162 COMPARE_OP 2 ( == )					  
							      								    164 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    37 >> 162							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS
--							      --							    --								  --
def countStr ( n , bCount , cCount ) :			      Disassembly of <code object countStr at 0x7fbac<<unk>> de40,  Disassembly of <code object countStr at 0x7f816a673a50, file  script_not_found : None
    if ( bCount < 0 or cCount < 0 ) :			      2 0 LOAD_FAST 1 ( bCount )				    113 0 LOAD_FAST 0 ( self )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_METHOD 0 ( countStr )				  
    if ( n == 0 ) :					      4 COMPARE_OP 0 ( < )					    4 CALL_METHOD 0						  
	return 1					      6 POP_JUMP_IF_TRUE 16					    6 STORE_FAST 1 ( bCount )					  
    if ( bCount == 0 and cCount == 0 ) :		      8 LOAD_FAST 2 ( cCount )					    								  
	return 1					      10 LOAD_CONST 1 ( 0 )					    114 8 LOAD_FAST 1 ( bCount )				  
    res = countStr ( n - 1 , bCount , cCount )		      12 COMPARE_OP 0 ( < )					    10 LOAD_METHOD 1 ( countStr )				  
    res += countStr ( n - 1 , bCount - 1 , cCount )	      14 POP_JUMP_IF_FALSE 20					    12 CALL_METHOD 0						  
    res += countStr ( n - 1 , bCount , cCount - 1 )	      								    14 STORE_FAST 2 ( bCount )					  
    return res						      3 >> 16 LOAD_CONST 1 ( 0 )				    								  
							      18 RETURN_VALUE						    115 16 LOAD_FAST 0 ( self )					  
							      								    18 LOAD_METHOD 2 ( countStr )				  
							      4 >> 20 LOAD_FAST 0 ( n )					    20 LOAD_FAST 1 ( bCount )					  
							      22 LOAD_CONST 1 ( 0 )					    22 CALL_METHOD 1						  
							      24 COMPARE_OP 2 ( == )					    24 POP_TOP							  
							      26 POP_JUMP_IF_FALSE 32					    								  
							      								    116 26 LOAD_FAST 0 ( self )					  
							      5 28 LOAD_CONST 2 ( 1 )					    28 LOAD_METHOD 3 ( countStr )				  
							      30 RETURN_VALUE						    30 LOAD_FAST 1 ( bCount )					  
							      								    32 CALL_METHOD 1						  
							      6 >> 32 LOAD_FAST 1 ( bCount )				    34 POP_TOP							  
							      34 LOAD_CONST 1 ( 0 )					    								  
							      36 COMPARE_OP 2 ( == )					    117 36 LOAD_FAST 0 ( self )					  
							      38 POP_JUMP_IF_FALSE 52					    38 LOAD_METHOD 4 ( countStr )				  
							      40 LOAD_FAST 2 ( cCount )					    40 LOAD_FAST 1 ( bCount )					  
							      42 LOAD_CONST 1 ( 0 )					    42 CALL_METHOD 1						  
							      44 COMPARE_OP 2 ( == )					    44 POP_TOP							  
							      46 POP_JUMP_IF_FALSE 52					    46 LOAD_CONST 1 ( None )					  
							      								    48 RETURN_VALUE						  
							      7 48 LOAD_CONST 2 ( 1 )					    NEW_LINE							  
							      50 RETURN_VALUE						    								  
							      								    								  
							      8 >> 52 LOAD_GLOBAL 0 ( countStr )			    								  
							      54 LOAD_FAST 0 ( n )					    								  
							      56 LOAD_CONST 2 ( 1 )					    								  
							      58 BINARY_SUBTRACT					    								  
							      60 LOAD_FAST 1 ( bCount )					    								  
							      62 LOAD_FAST 2 ( cCount )					    								  
							      64 CALL_FUNCTION 3					    								  
							      66 STORE_FAST 3 ( res )					    								  
							      								    								  
							      9 68 LOAD_FAST 3 ( res )					    								  
							      70 LOAD_GLOBAL 0 ( countStr )				    								  
							      72 LOAD_FAST 0 ( n )					    								  
							      74 LOAD_CONST 2 ( 1 )					    								  
							      76 BINARY_SUBTRACT					    								  
							      78 LOAD_FAST 1 ( bCount )					    								  
							      80 LOAD_CONST 2 ( 1 )					    								  
							      82 BINARY_SUBTRACT					    								  
							      84 LOAD_FAST 2 ( cCount )					    								  
							      86 CALL_FUNCTION 3					    								  
							      88 INPLACE_ADD						    								  
							      90 STORE_FAST 3 ( res )					    								  
							      								    								  
							      10 92 LOAD_FAST 3 ( res )					    								  
							      94 LOAD_GLOBAL 0 ( countStr )				    								  
							      96 LOAD_FAST 0 ( n )					    								  
							      98 LOAD_CONST 2 ( 1 )					    								  
							      100 BINARY_SUBTRACT					    								  
							      102 LOAD_FAST 1 ( bCount )				    								  
							      104 LOAD_FAST 2 ( cCount )				    								  
							      106 LOAD_CONST 2 ( 1 )					    								  
							      108 BINARY_SUBTRACT					    								  
							      110 CALL_FUNCTION 3					    								  
							      112 INPLACE_ADD						    								  
							      114 STORE_FAST 3 ( res )					    								  
							      								    								  
							      11 116 LOAD_FAST 3 ( res )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE	      COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		    COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		  COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE
--							      --							    --								  --
def countIslands ( mat ) :				      Disassembly of <code object countIslands at 0x7fbac<<unk>> de Disassembly of <code object countIsIsIsIsIsIsIsIsIsIsIsIsIsIs script_not_found : None
    count = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    								  
    for i in range ( 0 , M ) :				      2 STORE_FAST 1 ( count )					    								  
	for j in range ( 0 , N ) :			      								    								  
	    if ( mat [ i ] [ j ] == 'X' ) :		      3 4 SETUP_LOOP 118 ( to 124 )				    								  
		if ( ( i == 0 or mat [ i - 1 ] [ j ] == 'O' ) 6 LOAD_GLOBAL 0 ( range )					    								  
		    count = count + 1			      8 LOAD_CONST 1 ( 0 )					    								  
    return count					      10 LOAD_GLOBAL 1 ( M )					    								  
							      12 CALL_FUNCTION 2					    								  
							      14 GET_ITER						    								  
							      >> 16 FOR_ITER 104 ( to 122 )				    								  
							      18 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 20 SETUP_LOOP 98 ( to 120 )				    								  
							      22 LOAD_GLOBAL 0 ( range )				    								  
							      24 LOAD_CONST 1 ( 0 )					    								  
							      26 LOAD_GLOBAL 2 ( N )					    								  
							      28 CALL_FUNCTION 2					    								  
							      30 GET_ITER						    								  
							      >> 32 FOR_ITER 84 ( to 118 )				    								  
							      34 STORE_FAST 3 ( j )					    								  
							      								    								  
							      5 36 LOAD_FAST 0 ( mat )					    								  
							      38 LOAD_FAST 2 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 3 ( j )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_CONST 2 ( 'X' )					    								  
							      48 COMPARE_OP 2 ( == )					    								  
							      50 POP_JUMP_IF_FALSE 32					    								  
							      								    								  
							      6 52 LOAD_FAST 2 ( i )					    								  
							      54 LOAD_CONST 1 ( 0 )					    								  
							      56 COMPARE_OP 2 ( == )					    								  
							      58 POP_JUMP_IF_TRUE 80					    								  
							      60 LOAD_FAST 0 ( mat )					    								  
							      62 LOAD_FAST 2 ( i )					    								  
							      64 LOAD_CONST 3 ( 1 )					    								  
							      66 BINARY_SUBTRACT					    								  
							      68 BINARY_SUBSCR						    								  
							      70 LOAD_FAST 3 ( j )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 LOAD_CONST 4 ( 'O' )					    								  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 32					    								  
							      >> 80 LOAD_FAST 3 ( j )					    								  
							      82 LOAD_CONST 1 ( 0 )					    								  
							      84 COMPARE_OP 2 ( == )					    								  
							      86 POP_JUMP_IF_TRUE 108					    								  
							      88 LOAD_FAST 0 ( mat )					    								  
							      90 LOAD_FAST 2 ( i )					    								  
							      92 BINARY_SUBSCR						    								  
							      94 LOAD_FAST 3 ( j )					    								  
							      96 LOAD_CONST 3 ( 1 )					    								  
							      98 BINARY_SUBTRACT					    								  
							      100 BINARY_SUBSCR						    								  
							      102 LOAD_CONST 4 ( 'O' )					    								  
							      104 COMPARE_OP 2 ( == )					    								  
							      106 POP_JUMP_IF_FALSE 32					    								  
							      								    								  
							      7 >> 108 LOAD_FAST 1 ( count )				    								  
							      110 LOAD_CONST 3 ( 1 )					    								  
							      112 BINARY_ADD						    								  
							      114 STORE_FAST 1 ( count )				    								  
							      116 JUMP_ABSOLUTE 32					    								  
							      >> 118 POP_BLOCK						    								  
							      >> 120 JUMP_ABSOLUTE 16					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      8 >> 124 LOAD_FAST 1 ( count )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	      COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	    COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	  COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R
--							      --							    --								  --
def answerQuery ( a , n , l , r ) :			      Disassembly of <code object answerQuery at 0x7fbac0e8bc90, fi Disassembly of <code object answerQuery at 0x7f816a683c00, fi script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    149 0 LOAD_CONST 1 ( 0 )					  
    l = l - 1						      2 STORE_FAST 4 ( count )					    2 STORE_FAST 1 ( n )					  
    for i in range ( l , r , 1 ) :			      								    								  
	element = a [ i ]				      3 4 LOAD_FAST 2 ( l )					    150 4 SETUP_LOOP 52 ( to 54 )				  
	divisors = 0					      6 LOAD_CONST 2 ( 1 )					    6 LOAD_FAST 0 ( a )						  
	for j in range ( l , r , 1 ) :			      8 BINARY_SUBTRACT						    8 GET_ITER							  
	    if ( a [ j ] % a [ i ] == 0 ) :		      10 STORE_FAST 2 ( l )					    >> 10 FOR_ITER 52 ( to 52 )					  
		divisors += 1				      								    12 STORE_FAST 2 ( j )					  
	    else :					      4 12 SETUP_LOOP 106 ( to 120 )				    								  
		break					      14 LOAD_GLOBAL 0 ( range )				    151 14 LOAD_FAST 1 ( n )					  
	if ( divisors == ( r - l ) ) :			      16 LOAD_FAST 2 ( l )					    16 LOAD_FAST 2 ( j )					  
	    count += 1					      18 LOAD_FAST 3 ( r )					    18 COMPARE_OP 2 ( == )					  
    return count					      20 LOAD_CONST 2 ( 1 )					    20 POP_JUMP_IF_FALSE 10					  
							      22 CALL_FUNCTION 3					    								  
							      24 GET_ITER						    152 22 LOAD_FAST 1 ( n )					  
							      >> 26 FOR_ITER 90 ( to 118 )				    24 LOAD_FAST 2 ( j )					  
							      28 STORE_FAST 5 ( i )					    26 COMPARE_OP 2 ( == )					  
							      								    28 POP_JUMP_IF_FALSE 10					  
							      5 30 LOAD_FAST 0 ( a )					    								  
							      32 LOAD_FAST 5 ( i )					    153 30 LOAD_FAST 1 ( n )					  
							      34 BINARY_SUBSCR						    32 LOAD_FAST 2 ( j )					  
							      36 STORE_FAST 6 ( element )				    34 COMPARE_OP 2 ( == )					  
							      								    36 POP_JUMP_IF_FALSE 10					  
							      6 38 LOAD_CONST 1 ( 0 )					    								  
							      40 STORE_FAST 7 ( divisors )				    154 38 LOAD_FAST 1 ( n )					  
							      								    40 LOAD_FAST 2 ( j )					  
							      7 42 SETUP_LOOP 52 ( to 96 )				    42 COMPARE_OP 2 ( == )					  
							      44 LOAD_GLOBAL 0 ( range )				    44 POP_JUMP_IF_FALSE 10					  
							      46 LOAD_FAST 2 ( l )					    								  
							      48 LOAD_FAST 3 ( r )					    155 46 LOAD_FAST 1 ( n )					  
							      50 LOAD_CONST 2 ( 1 )					    48 LOAD_FAST 2 ( j )					  
							      52 CALL_FUNCTION 3					    50 COMPARE_OP 2 ( == )					  
							      54 GET_ITER						    52 POP_JUMP_IF_FALSE 10					  
							      >> 56 FOR_ITER 36 ( to 94 )				    								  
							      58 STORE_FAST 8 ( j )					    156 54 LOAD_FAST 1 ( n )					  
							      								    56 LOAD_FAST 2 ( j )					  
							      8 60 LOAD_FAST 0 ( a )					    58 COMPARE_OP 2 ( == )					  
							      62 LOAD_FAST 8 ( j )					    60 POP_JUMP_IF_FALSE 10					  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 0 ( a )					    157 62 LOAD_FAST 1 ( n )					  
							      68 LOAD_FAST 5 ( i )					    64 LOAD_FAST 2 ( j )					  
							      70 BINARY_SUBSCR						    66 COMPARE_OP 2 ( == )					  
							      72 BINARY_MODULO						    68 POP_JUMP_IF_FALSE 10					  
							      74 LOAD_CONST 1 ( 0 )					    								  
							      76 COMPARE_OP 2 ( == )					    158 70 LOAD_FAST 1 ( n )					  
							      78 POP_JUMP_IF_FALSE 90					    72 LOAD_FAST 2 ( j )					  
							      								    74 COMPARE_OP 2 ( == )					  
							      9 80 LOAD_FAST 7 ( divisors )				    76 POP_JUMP_IF_FALSE 10					  
							      82 LOAD_CONST 2 ( 1 )					    								  
							      84 INPLACE_ADD						    159 78 LOAD_FAST 1 ( n )					  
							      86 STORE_FAST 7 ( divisors )				    80 LOAD_FAST 2 ( j )					  
							      88 JUMP_ABSOLUTE 56					    82 COMPARE_OP 2 ( == )					  
							      								    84 POP_JUMP_IF_FALSE 10					  
							      11 >> 90 BREAK_LOOP					    								  
							      92 JUMP_ABSOLUTE 56					    160 86 LOAD_FAST 1 ( n )					  
							      >> 94 POP_BLOCK						    88 LOAD_FAST 2 ( j )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      12 >> 96 LOAD_FAST 7 ( divisors )				    92 POP_JUMP_IF_FALSE 10					  
							      98 LOAD_FAST 3 ( r )					    								  
							      100 LOAD_FAST 2 ( l )					    161 94 LOAD_FAST 1 ( n )					  
							      102 BINARY_SUBTRACT					    96 LOAD_FAST 2 ( j )					  
							      104 COMPARE_OP 2 ( == )					    98 LOAD_FAST 2 ( j )					  
							      106 POP_JUMP_IF_FALSE 26					    100 BINARY_SUBTRACT						  
							      								    102 COMPARE_OP 2 ( == )					  
							      13 108 LOAD_FAST 4 ( count )				    104 POP_JUMP_IF_FALSE 10					  
							      110 LOAD_CONST 2 ( 1 )					    								  
							      112 INPLACE_ADD						    162 106 LOAD_FAST 1 ( n )					  
							      114 STORE_FAST 4 ( count )				    108 LOAD_FAST 2 ( j )					  
							      116 JUMP_ABSOLUTE 26					    110 LOAD_FAST 2 ( j )					  
							      >> 118 POP_BLOCK						    112 BINARY_SUBTRACT						  
							      								    114 COMPARE_OP 2 ( == )					  
							      14 >> 120 LOAD_FAST 4 ( count )				    116 POP_JUMP_IF_FALSE 10					  
							      122 RETURN_VALUE NEW_LINE					    								  
							      								    163 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_FAST 2 ( j )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 LOAD_FAST 2 ( j )					  
							      								    126 BINARY_SUBTRACT						  
							      								    128 BINARY_MULTIPLY						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    132 JUMP_ABSOLUTE 10					  
							      								    >> 134 POP_BLOCK						  
							      								    >> 136 JUMP_ABSOLUTE 10					  
							      								    >> 138 POP_BLOCK						  
							      								    								  
							      								    164 >> 140 LOAD_FAST 1 ( n )				  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME
--							      --							    --								  --
def canFormPalindrome ( st ) :				      Disassembly of <code object canFormPalindrome at 0x7fbac<<unk Disassembly of <code object canFormPalindrome at 0x7f816a6e4b script_not_found : None
    count = [ 0 ] * ( NO_OF_CHARS )			      2 0 LOAD_CONST 1 ( 0 )					    31 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , len ( st ) ) :			      2 BUILD_LIST 1						    2 STORE_FAST 1 ( count )					  
	count [ ord ( st [ i ] ) ] = count [ ord ( st [ i ] ) 4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				    								  
    odd = 0						      6 BINARY_MULTIPLY						    32 4 SETUP_LOOP 52 ( to 54 )				  
    for i in range ( 0 , NO_OF_CHARS ) :		      8 STORE_FAST 1 ( count )					    6 LOAD_GLOBAL 0 ( range )					  
	if ( count [ i ] & 1 ) :			      								    8 LOAD_FAST 0 ( st )					  
	    odd = odd + 1				      3 10 SETUP_LOOP 54 ( to 66 )				    10 CALL_FUNCTION 1						  
	if ( odd > 1 ) :				      12 LOAD_GLOBAL 1 ( range )				    12 GET_ITER							  
	    return False				      14 LOAD_CONST 1 ( 0 )					    >> 14 FOR_ITER 52 ( to 52 )					  
    return True						      16 LOAD_GLOBAL 2 ( len )					    16 STORE_FAST 2 ( i )					  
							      18 LOAD_FAST 0 ( st )					    								  
							      20 CALL_FUNCTION 1					    33 18 LOAD_FAST 1 ( count )					  
							      22 CALL_FUNCTION 2					    20 LOAD_CONST 2 ( 1 )					  
							      24 GET_ITER						    22 INPLACE_ADD						  
							      >> 26 FOR_ITER 36 ( to 64 )				    24 STORE_FAST 1 ( count )					  
							      28 STORE_FAST 2 ( i )					    								  
							      								    34 26 LOAD_FAST 1 ( count )					  
							      4 30 LOAD_FAST 1 ( count )				    28 LOAD_CONST 3 ( 1 )					  
							      32 LOAD_GLOBAL 3 ( ord )					    30 INPLACE_ADD						  
							      34 LOAD_FAST 0 ( st )					    32 STORE_FAST 1 ( count )					  
							      36 LOAD_FAST 2 ( i )					    34 JUMP_ABSOLUTE 14						  
							      38 BINARY_SUBSCR						    >> 36 POP_BLOCK						  
							      40 CALL_FUNCTION 1					    								  
							      42 BINARY_SUBSCR						    35 >> 38 LOAD_FAST 1 ( count )				  
							      44 LOAD_CONST 2 ( 1 )					    40 RETURN_VALUE NEW_LINE					  
							      46 BINARY_ADD						    								  
							      48 LOAD_FAST 1 ( count )					    								  
							      50 LOAD_GLOBAL 3 ( ord )					    								  
							      52 LOAD_FAST 0 ( st )					    								  
							      54 LOAD_FAST 2 ( i )					    								  
							      56 BINARY_SUBSCR						    								  
							      58 CALL_FUNCTION 1					    								  
							      60 STORE_SUBSCR						    								  
							      62 JUMP_ABSOLUTE 26					    								  
							      >> 64 POP_BLOCK						    								  
							      								    								  
							      5 >> 66 LOAD_CONST 1 ( 0 )				    								  
							      68 STORE_FAST 3 ( odd )					    								  
							      								    								  
							      6 70 SETUP_LOOP 50 ( to 122 )				    								  
							      72 LOAD_GLOBAL 1 ( range )				    								  
							      74 LOAD_CONST 1 ( 0 )					    								  
							      76 LOAD_GLOBAL 0 ( NO_OF_CHARS )				    								  
							      78 CALL_FUNCTION 2					    								  
							      80 GET_ITER						    								  
							      >> 82 FOR_ITER 36 ( to 120 )				    								  
							      84 STORE_FAST 2 ( i )					    								  
							      								    								  
							      7 86 LOAD_FAST 1 ( count )				    								  
							      88 LOAD_FAST 2 ( i )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 LOAD_CONST 2 ( 1 )					    								  
							      94 BINARY_AND						    								  
							      96 POP_JUMP_IF_FALSE 106					    								  
							      								    								  
							      8 98 LOAD_FAST 3 ( odd )					    								  
							      100 LOAD_CONST 2 ( 1 )					    								  
							      102 BINARY_ADD						    								  
							      104 STORE_FAST 3 ( odd )					    								  
							      								    								  
							      9 >> 106 LOAD_FAST 3 ( odd )				    								  
							      108 LOAD_CONST 2 ( 1 )					    								  
							      110 COMPARE_OP 4 ( > )					    								  
							      112 POP_JUMP_IF_FALSE 82					    								  
							      								    								  
							      10 114 LOAD_CONST 3 ( False )				    								  
							      116 RETURN_VALUE						    								  
							      118 JUMP_ABSOLUTE 82					    								  
							      >> 120 POP_BLOCK						    								  
							      								    								  
							      11 >> 122 LOAD_CONST 4 ( True )				    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY		      MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			    MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			  MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY
--							      --							    --								  --
def findLongestConseqSubseq ( arr , n ) :		      Disassembly of <code object findLongestConseqSubseq at 0x7fba Disassembly of <code object findLongestConSubseq at 0x7f816a6 error : Traceback (most recent call last):   File
    S = set ( ) ;					      2 0 LOAD_GLOBAL 0 ( set )					    65 0 LOAD_GLOBAL 0 ( set )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  item in run_dis_script():   File "XLM/dis_script.p
	S.add ( arr [ i ] ) ;				      4 STORE_FAST 2 ( S )					    4 LOAD_METHOD 1 ( add )					  y", line 54, in run_dis_script     hyp_co = mco.to
    ans = 0 ;						      								    6 LOAD_FAST 0 ( arr )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    for i in range ( n ) :				      3 6 SETUP_LOOP 30 ( to 38 )				    8 CALL_METHOD 1						  assembler.py", line 81, in to_co     co_consts.app
	if S.__contains__ ( arr [ i ] ) :		      8 LOAD_GLOBAL 1 ( range )					    10 POP_TOP							  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	    j = arr [ i ] ;				      10 LOAD_FAST 1 ( n )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    while ( S.__contains__ ( j ) ) :		      12 CALL_FUNCTION 1					    66 12 LOAD_FAST 0 ( arr )					  co	 self.co_cellvars, ValueError: code: varname
		j += 1 ;				      14 GET_ITER						    14 LOAD_METHOD 2 ( __contains__ )				  s is too small
	    ans = max ( ans , j - arr [ i ] ) ;		      >> 16 FOR_ITER 18 ( to 36 )				    16 CALL_METHOD 0						  
    return ans ;					      18 STORE_FAST 3 ( i )					    18 RETURN_VALUE						  
							      								    NEW_LINE							  
							      4 20 LOAD_FAST 2 ( S )					    								  
							      22 LOAD_METHOD 2 ( add )					    								  
							      24 LOAD_FAST 0 ( arr )					    								  
							      26 LOAD_FAST 3 ( i )					    								  
							      28 BINARY_SUBSCR						    								  
							      30 CALL_METHOD 1						    								  
							      32 POP_TOP						    								  
							      34 JUMP_ABSOLUTE 16					    								  
							      >> 36 POP_BLOCK						    								  
							      								    								  
							      5 >> 38 LOAD_CONST 1 ( 0 )				    								  
							      40 STORE_FAST 4 ( ans )					    								  
							      								    								  
							      6 42 SETUP_LOOP 80 ( to 124 )				    								  
							      44 LOAD_GLOBAL 1 ( range )				    								  
							      46 LOAD_FAST 1 ( n )					    								  
							      48 CALL_FUNCTION 1					    								  
							      50 GET_ITER						    								  
							      >> 52 FOR_ITER 68 ( to 122 )				    								  
							      54 STORE_FAST 3 ( i )					    								  
							      								    								  
							      7 56 LOAD_FAST 2 ( S )					    								  
							      58 LOAD_METHOD 3 ( __contains__ )				    								  
							      60 LOAD_FAST 0 ( arr )					    								  
							      62 LOAD_FAST 3 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 CALL_METHOD 1						    								  
							      68 POP_JUMP_IF_FALSE 52					    								  
							      								    								  
							      8 70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 3 ( i )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 STORE_FAST 5 ( j )					    								  
							      								    								  
							      9 78 SETUP_LOOP 22 ( to 102 )				    								  
							      >> 80 LOAD_FAST 2 ( S )					    								  
							      82 LOAD_METHOD 3 ( __contains__ )				    								  
							      84 LOAD_FAST 5 ( j )					    								  
							      86 CALL_METHOD 1						    								  
							      88 POP_JUMP_IF_FALSE 100					    								  
							      								    								  
							      10 90 LOAD_FAST 5 ( j )					    								  
							      92 LOAD_CONST 2 ( 1 )					    								  
							      94 INPLACE_ADD						    								  
							      96 STORE_FAST 5 ( j )					    								  
							      98 JUMP_ABSOLUTE 80					    								  
							      >> 100 POP_BLOCK						    								  
							      								    								  
							      11 >> 102 LOAD_GLOBAL 4 ( max )				    								  
							      104 LOAD_FAST 4 ( ans )					    								  
							      106 LOAD_FAST 5 ( j )					    								  
							      108 LOAD_FAST 0 ( arr )					    								  
							      110 LOAD_FAST 3 ( i )					    								  
							      112 BINARY_SUBSCR						    								  
							      114 BINARY_SUBTRACT					    								  
							      116 CALL_FUNCTION 2					    								  
							      118 STORE_FAST 4 ( ans )					    								  
							      120 JUMP_ABSOLUTE 52					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      12 >> 124 LOAD_FAST 4 ( ans )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_REVERSE_STRING_REMOVING_VOWELS			      PRINT_REVERSE_STRING_REMOVING_VOWELS			    PRINT_REVERSE_STRING_REMOVING_VOWELS			  PRINT_REVERSE_STRING_REMOVING_VOWELS
--							      --							    --								  --
def replaceOriginal ( s , n ) :				      Disassembly of <code object replaceOriginal at 0x7fbac0e8bc90 Disassembly of <code object replaceOriginal at 0x7f816a6e4b70 script_not_found : None
    r = [ ' ' ] * n					      2 0 LOAD_CONST 1 ( ' ' )					    26 0 LOAD_CONST 1 ( '\n					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    								  
	r [ i ] = s [ n - 1 - i ]			      4 LOAD_FAST 1 ( n )					    								  
	if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] != 6 BINARY_MULTIPLY						    								  
	    print ( r [ i ] , end = "" )		      8 STORE_FAST 2 ( r )					    								  
    print ( )						      								    								  
							      3 10 SETUP_LOOP 112 ( to 124 )				    								  
							      12 LOAD_GLOBAL 0 ( range )				    								  
							      14 LOAD_FAST 1 ( n )					    								  
							      16 CALL_FUNCTION 1					    								  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 100 ( to 122 )				    								  
							      22 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 24 LOAD_FAST 0 ( s )					    								  
							      26 LOAD_FAST 1 ( n )					    								  
							      28 LOAD_CONST 2 ( 1 )					    								  
							      30 BINARY_SUBTRACT					    								  
							      32 LOAD_FAST 3 ( i )					    								  
							      34 BINARY_SUBTRACT					    								  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 2 ( r )					    								  
							      40 LOAD_FAST 3 ( i )					    								  
							      42 STORE_SUBSCR						    								  
							      								    								  
							      5 44 LOAD_FAST 0 ( s )					    								  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_CONST 3 ( 'a' )					    								  
							      52 COMPARE_OP 3 ( != )					    								  
							      54 POP_JUMP_IF_FALSE 20					    								  
							      56 LOAD_FAST 0 ( s )					    								  
							      58 LOAD_FAST 3 ( i )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_CONST 4 ( 'e' )					    								  
							      64 COMPARE_OP 3 ( != )					    								  
							      66 POP_JUMP_IF_FALSE 20					    								  
							      68 LOAD_FAST 0 ( s )					    								  
							      70 LOAD_FAST 3 ( i )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 LOAD_CONST 5 ( 'i' )					    								  
							      76 COMPARE_OP 3 ( != )					    								  
							      78 POP_JUMP_IF_FALSE 20					    								  
							      80 LOAD_FAST 0 ( s )					    								  
							      82 LOAD_FAST 3 ( i )					    								  
							      84 BINARY_SUBSCR						    								  
							      86 LOAD_CONST 6 ( 'o' )					    								  
							      88 COMPARE_OP 3 ( != )					    								  
							      90 POP_JUMP_IF_FALSE 20					    								  
							      92 LOAD_FAST 0 ( s )					    								  
							      94 LOAD_FAST 3 ( i )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 LOAD_CONST 7 ( 'u' )					    								  
							      100 COMPARE_OP 3 ( != )					    								  
							      102 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      6 104 LOAD_GLOBAL 1 ( print )				    								  
							      106 LOAD_FAST 2 ( r )					    								  
							      108 LOAD_FAST 3 ( i )					    								  
							      110 BINARY_SUBSCR						    								  
							      112 LOAD_CONST 8 ( '' )					    								  
							      114 LOAD_CONST 9 ( ( 'end' , ) )				    								  
							      116 CALL_FUNCTION_KW 2					    								  
							      118 POP_TOP						    								  
							      120 JUMP_ABSOLUTE 20					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      7 >> 124 LOAD_GLOBAL 1 ( print )				    								  
							      126 CALL_FUNCTION 0					    								  
							      128 POP_TOP						    								  
							      130 LOAD_CONST 0 ( None )					    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROOTS_OF_UNITY						      ROOTS_OF_UNITY						    ROOTS_OF_UNITY						  ROOTS_OF_UNITY
--							      --							    --								  --
def printRoots ( n ) :					      Disassembly of <code object printRoots at 0x7fbac<<unk>> de40 Disassembly of <code object printpolyts at 0x7f816a673a50, fi script_not_found : None
    theta = math.pi * 2 / n				      2 0 LOAD_GLOBAL 0 ( math )				    26 0 LOAD_GLOBAL 0 ( theta )				  
    for k in range ( 0 , n ) :				      2 LOAD_ATTR 1 ( pi )					    2 LOAD_METHOD 1 ( pi )					  
	real = math.cos ( k * theta )			      4 LOAD_CONST 1 ( 2 )					    4 LOAD_CONST 1 ( 2 )					  
	img = math.sin ( k * theta )			      6 BINARY_MULTIPLY						    6 CALL_METHOD 1						  
	print ( real , end = " " )			      8 LOAD_FAST 0 ( n )					    8 STORE_FAST 1 ( theta )					  
	if ( img >= 0 ) :				      10 BINARY_TRUE_DIVIDE					    								  
	    print ( " + i " , end = " " )		      12 STORE_FAST 1 ( theta )					    27 10 LOAD_GLOBAL 0 ( theta )				  
	else :						      								    12 LOAD_METHOD 2 ( cos )					  
	    print ( " - i " , end = " " )		      3 14 SETUP_LOOP 104 ( to 120 )				    14 LOAD_FAST 1 ( theta )					  
	print ( abs ( img ) )				      16 LOAD_GLOBAL 2 ( range )				    16 CALL_METHOD 1						  
							      18 LOAD_CONST 2 ( 0 )					    18 STORE_FAST 2 ( theta )					  
							      20 LOAD_FAST 0 ( n )					    								  
							      22 CALL_FUNCTION 2					    28 20 LOAD_GLOBAL 3 ( print )				  
							      24 GET_ITER						    22 LOAD_CONST 2 ( '-i -i %d %d %d %d %d %d' )		  
							      >> 26 FOR_ITER 90 ( to 118 )				    24 LOAD_FAST 1 ( theta )					  
							      28 STORE_FAST 2 ( k )					    26 BINARY_MODULO						  
							      								    28 CALL_FUNCTION 1						  
							      4 30 LOAD_GLOBAL 0 ( math )				    30 POP_TOP							  
							      32 LOAD_METHOD 3 ( cos )					    								  
							      34 LOAD_FAST 2 ( k )					    29 32 LOAD_GLOBAL 4 ( print )				  
							      36 LOAD_FAST 1 ( theta )					    34 LOAD_CONST 3 ( '-i %d %d %d %d' )			  
							      38 BINARY_MULTIPLY					    36 LOAD_FAST 1 ( theta )					  
							      40 CALL_METHOD 1						    38 BINARY_MODULO						  
							      42 STORE_FAST 3 ( real )					    40 CALL_FUNCTION 1						  
							      								    42 POP_TOP							  
							      5 44 LOAD_GLOBAL 0 ( math )				    44 LOAD_CONST 0 ( None )					  
							      46 LOAD_METHOD 4 ( sin )					    46 RETURN_VALUE						  
							      48 LOAD_FAST 2 ( k )					    NEW_LINE							  
							      50 LOAD_FAST 1 ( theta )					    								  
							      52 BINARY_MULTIPLY					    								  
							      54 CALL_METHOD 1						    								  
							      56 STORE_FAST 4 ( img )					    								  
							      								    								  
							      6 58 LOAD_GLOBAL 5 ( print )				    								  
							      60 LOAD_FAST 3 ( real )					    								  
							      62 LOAD_CONST 3 ( ' ' )					    								  
							      64 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      66 CALL_FUNCTION_KW 2					    								  
							      68 POP_TOP						    								  
							      								    								  
							      7 70 LOAD_FAST 4 ( img )					    								  
							      72 LOAD_CONST 2 ( 0 )					    								  
							      74 COMPARE_OP 5 ( >= )					    								  
							      76 POP_JUMP_IF_FALSE 92					    								  
							      								    								  
							      8 78 LOAD_GLOBAL 5 ( print )				    								  
							      80 LOAD_CONST 5 ( ' + i ' )				    								  
							      82 LOAD_CONST 3 ( ' ' )					    								  
							      84 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      86 CALL_FUNCTION_KW 2					    								  
							      88 POP_TOP						    								  
							      90 JUMP_FORWARD 12 ( to 104 )				    								  
							      								    								  
							      10 >> 92 LOAD_GLOBAL 5 ( print )				    								  
							      94 LOAD_CONST 6 ( ' - i ' )				    								  
							      96 LOAD_CONST 3 ( ' ' )					    								  
							      98 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      100 CALL_FUNCTION_KW 2					    								  
							      102 POP_TOP						    								  
							      								    								  
							      11 >> 104 LOAD_GLOBAL 5 ( print )				    								  
							      106 LOAD_GLOBAL 6 ( abs )					    								  
							      108 LOAD_FAST 4 ( img )					    								  
							      110 CALL_FUNCTION 1					    								  
							      112 CALL_FUNCTION 1					    								  
							      114 POP_TOP						    								  
							      116 JUMP_ABSOLUTE 26					    								  
							      >> 118 POP_BLOCK						    								  
							      >> 120 LOAD_CONST 0 ( None )				    								  
							      122 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT	      FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT		    FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT		  FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT
--							      --							    --								  --
def countCurrency ( amount ) :				      Disassembly of <code object countCurrency at 0x7fbac<<unk>> d Disassembly of <code object countCurrency at 0x7f816a6e4b70,  script_not_found : None
    notes = [ 2000 , 500 , 200 , 100 , 50 , 20 , 10 , 5 , 1 ] 2 0 LOAD_CONST 1 ( 2000 )					    11 0 LOAD_FAST 0 ( amount )					  
    noteCounter = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]	      2 LOAD_CONST 2 ( 500 )					    2 LOAD_CONST 1 ( 200 )					  
    print ( "Currency Count -> " )			      4 LOAD_CONST 3 ( 200 )					    4 COMPARE_OP 2 ( == )					  
    for i , j in zip ( notes , noteCounter ) :		      6 LOAD_CONST 4 ( 100 )					    6 POP_JUMP_IF_FALSE 12					  
	if amount >= i :				      8 LOAD_CONST 5 ( 50 )					    								  
	    j = amount // i				      10 LOAD_CONST 6 ( 20 )					    12 8 LOAD_CONST 2 ( 'TEST Count --▁' )			  
	    amount = amount - j * i			      12 LOAD_CONST 7 ( 10 )					    10 STORE_FAST 1 ( noteCounter )				  
	    print ( i , " : " , j )			      14 LOAD_CONST 8 ( 5 )					    								  
							      16 LOAD_CONST 9 ( 1 )					    13 12 LOAD_FAST 1 ( noteCounter )				  
							      18 BUILD_LIST 9						    14 LOAD_CONST 3 ( 0 )					  
							      20 STORE_FAST 1 ( notes )					    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 28					  
							      3 22 LOAD_CONST 10 ( 0 )					    								  
							      24 LOAD_CONST 10 ( 0 )					    14 20 LOAD_CONST 4 ( 'TEST Count --▁' )			  
							      26 LOAD_CONST 10 ( 0 )					    22 STORE_FAST 1 ( noteCounter )				  
							      28 LOAD_CONST 10 ( 0 )					    								  
							      30 LOAD_CONST 10 ( 0 )					    15 >> 24 LOAD_FAST 1 ( noteCounter )			  
							      32 LOAD_CONST 10 ( 0 )					    26 LOAD_METHOD 0 ( append )					  
							      34 LOAD_CONST 10 ( 0 )					    28 LOAD_FAST 0 ( amount )					  
							      36 LOAD_CONST 10 ( 0 )					    30 CALL_METHOD 1						  
							      38 LOAD_CONST 10 ( 0 )					    32 POP_TOP							  
							      40 BUILD_LIST 9						    34 JUMP_FORWARD 10 ( to 52 )				  
							      42 STORE_FAST 2 ( noteCounter )				    								  
							      								    16 >> 36 LOAD_FAST 1 ( noteCounter )			  
							      4 44 LOAD_GLOBAL 0 ( print )				    38 LOAD_METHOD 0 ( append )					  
							      46 LOAD_CONST 11 ( 'Currency Count -> ' )			    40 LOAD_FAST 0 ( amount )					  
							      48 CALL_FUNCTION 1					    42 CALL_METHOD 1						  
							      50 POP_TOP						    44 POP_TOP							  
							      								    								  
							      5 52 SETUP_LOOP 62 ( to 116 )				    17 46 LOAD_FAST 1 ( noteCounter )				  
							      54 LOAD_GLOBAL 1 ( zip )					    48 LOAD_METHOD 0 ( append )					  
							      56 LOAD_FAST 1 ( notes )					    50 LOAD_FAST 0 ( amount )					  
							      58 LOAD_FAST 2 ( noteCounter )				    52 CALL_METHOD 1						  
							      60 CALL_FUNCTION 2					    54 POP_TOP							  
							      62 GET_ITER						    56 LOAD_CONST 0 ( None )					  
							      >> 64 FOR_ITER 48 ( to 114 )				    58 RETURN_VALUE						  
							      66 UNPACK_SEQUENCE 2					    NEW_LINE							  
							      68 STORE_FAST 3 ( i )					    								  
							      70 STORE_FAST 4 ( j )					    								  
							      								    								  
							      6 72 LOAD_FAST 0 ( amount )				    								  
							      74 LOAD_FAST 3 ( i )					    								  
							      76 COMPARE_OP 5 ( >= )					    								  
							      78 POP_JUMP_IF_FALSE 64					    								  
							      								    								  
							      7 80 LOAD_FAST 0 ( amount )				    								  
							      82 LOAD_FAST 3 ( i )					    								  
							      84 BINARY_FLOOR_DIVIDE					    								  
							      86 STORE_FAST 4 ( j )					    								  
							      								    								  
							      8 88 LOAD_FAST 0 ( amount )				    								  
							      90 LOAD_FAST 4 ( j )					    								  
							      92 LOAD_FAST 3 ( i )					    								  
							      94 BINARY_MULTIPLY					    								  
							      96 BINARY_SUBTRACT					    								  
							      98 STORE_FAST 0 ( amount )				    								  
							      								    								  
							      9 100 LOAD_GLOBAL 0 ( print )				    								  
							      102 LOAD_FAST 3 ( i )					    								  
							      104 LOAD_CONST 12 ( ' : ' )				    								  
							      106 LOAD_FAST 4 ( j )					    								  
							      108 CALL_FUNCTION 3					    								  
							      110 POP_TOP						    								  
							      112 JUMP_ABSOLUTE 64					    								  
							      >> 114 POP_BLOCK						    								  
							      >> 116 LOAD_CONST 0 ( None )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU
--							      --							    --								  --
def returnMaxSum ( A , B , n ) :			      Disassembly of <code object returnMaxSum at 0x7fbac<<unk>> de Disassembly of <code object returnMaxSum at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    mp = set ( )					      2 0 LOAD_GLOBAL 0 ( set )					    26 0 LOAD_GLOBAL 0 ( mp )					  "XLM/dis_script.py", line 60, in <module>	exec
    result = 0						      2 CALL_FUNCTION 0						    2 LOAD_METHOD 1 ( set )					  (item)   File "main.py", line 39, in <module>	  Fi
    curr_sum = curr_begin = 0				      4 STORE_FAST 3 ( mp )					    4 CALL_METHOD 0						  le "<dis>", line 2, in returnMaxSum NameError: nam
    for i in range ( 0 , n ) :				      								    6 STORE_FAST 1 ( B )					  e 'mp' is not defined
	while A [ i ] in mp :				      3 6 LOAD_CONST 1 ( 0 )					    								  
	    mp.remove ( A [ curr_begin ] )		      8 STORE_FAST 4 ( result )					    27 8 LOAD_FAST 1 ( B )					  
	    curr_sum -= B [ curr_begin ]		      								    10 LOAD_FAST 0 ( A )					  
	    curr_begin += 1				      4 10 LOAD_CONST 1 ( 0 )					    12 LOAD_FAST 1 ( B )					  
	mp.add ( A [ i ] )				      12 DUP_TOP						    14 LOAD_FAST 2 ( l )					  
	curr_sum += B [ i ]				      14 STORE_FAST 5 ( curr_sum )				    16 BUILD_TUPLE 2						  
	result = max ( result , curr_sum )		      16 STORE_FAST 6 ( curr_begin )				    18 LOAD_FAST 3 ( kwargs )					  
    return result					      								    20 CALL_FUNCTION_EX 1					  
							      5 18 SETUP_LOOP 106 ( to 126 )				    22 RETURN_VALUE						  
							      20 LOAD_GLOBAL 1 ( range )				    NEW_LINE							  
							      22 LOAD_CONST 1 ( 0 )					    								  
							      24 LOAD_FAST 2 ( n )					    								  
							      26 CALL_FUNCTION 2					    								  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 92 ( to 124 )				    								  
							      32 STORE_FAST 7 ( i )					    								  
							      								    								  
							      6 34 SETUP_LOOP 50 ( to 86 )				    								  
							      >> 36 LOAD_FAST 0 ( A )					    								  
							      38 LOAD_FAST 7 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 3 ( mp )					    								  
							      44 COMPARE_OP 6 ( in )					    								  
							      46 POP_JUMP_IF_FALSE 84					    								  
							      								    								  
							      7 48 LOAD_FAST 3 ( mp )					    								  
							      50 LOAD_METHOD 2 ( remove )				    								  
							      52 LOAD_FAST 0 ( A )					    								  
							      54 LOAD_FAST 6 ( curr_begin )				    								  
							      56 BINARY_SUBSCR						    								  
							      58 CALL_METHOD 1						    								  
							      60 POP_TOP						    								  
							      								    								  
							      8 62 LOAD_FAST 5 ( curr_sum )				    								  
							      64 LOAD_FAST 1 ( B )					    								  
							      66 LOAD_FAST 6 ( curr_begin )				    								  
							      68 BINARY_SUBSCR						    								  
							      70 INPLACE_SUBTRACT					    								  
							      72 STORE_FAST 5 ( curr_sum )				    								  
							      								    								  
							      9 74 LOAD_FAST 6 ( curr_begin )				    								  
							      76 LOAD_CONST 2 ( 1 )					    								  
							      78 INPLACE_ADD						    								  
							      80 STORE_FAST 6 ( curr_begin )				    								  
							      82 JUMP_ABSOLUTE 36					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 LOAD_FAST 3 ( mp )				    								  
							      88 LOAD_METHOD 3 ( add )					    								  
							      90 LOAD_FAST 0 ( A )					    								  
							      92 LOAD_FAST 7 ( i )					    								  
							      94 BINARY_SUBSCR						    								  
							      96 CALL_METHOD 1						    								  
							      98 POP_TOP						    								  
							      								    								  
							      11 100 LOAD_FAST 5 ( curr_sum )				    								  
							      102 LOAD_FAST 1 ( B )					    								  
							      104 LOAD_FAST 7 ( i )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 INPLACE_ADD						    								  
							      110 STORE_FAST 5 ( curr_sum )				    								  
							      								    								  
							      12 112 LOAD_GLOBAL 4 ( max )				    								  
							      114 LOAD_FAST 4 ( result )				    								  
							      116 LOAD_FAST 5 ( curr_sum )				    								  
							      118 CALL_FUNCTION 2					    								  
							      120 STORE_FAST 4 ( result )				    								  
							      122 JUMP_ABSOLUTE 30					    								  
							      >> 124 POP_BLOCK						    								  
							      								    								  
							      13 >> 126 LOAD_FAST 4 ( result )				    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2
--							      --							    --								  --
def countPairs ( arr1 , arr2 , m , n , x ) :		      Disassembly of <code object countPairs at 0x7fbac<<unk>> d540 Disassembly of <code object countPairs at 0x7f816a683c00, fil error : Traceback (most recent call last):   File
    count , l , r = 0 , 0 , n - 1			      2 0 LOAD_CONST 1 ( 0 )					    50 0 LOAD_FAST 1 ( arr2 )					  "XLM/dis_script.py", line 59, in <module>	for
    while ( l < m and r >= 0 ) :			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_FAST 0 ( arr1 )					  item in run_dis_script():   File "XLM/dis_script.p
	if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) :	      4 LOAD_FAST 3 ( n )					    4 LOAD_FAST 2 ( arr2 )					  y", line 54, in run_dis_script     hyp_co = mco.to
	    l += 1					      6 LOAD_CONST 2 ( 1 )					    6 LOAD_FAST 3 ( arr2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	    r -= 1					      8 BINARY_SUBTRACT						    8 LOAD_FAST 4 ( arr2 )					  assembler.py", line 81, in to_co     co_consts.app
	    count += 1					      10 ROT_THREE						    10 LOAD_FAST 5 ( arr2 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	elif ( ( arr1 [ l ] + arr2 [ r ] ) < x ) :	      12 ROT_TWO						    12 LOAD_FAST 6 ( arr2 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    l += 1					      14 STORE_FAST 5 ( count )					    14 LOAD_FAST 7 ( arr2 )					  co	 self.co_cellvars, TypeError: name tuples mu
	else :						      16 STORE_FAST 6 ( l )					    16 LOAD_FAST 8 ( arr2 )					  st contain only strings, not 'NoneType'
	    r -= 1					      18 STORE_FAST 7 ( r )					    18 LOAD_FAST 9 ( arr2 )					  
    return count					      								    20 LOAD_FAST 10 ( arr2 )					  
							      3 20 SETUP_LOOP 104 ( to 126 )				    22 LOAD_FAST 11 ( arr2 )					  
							      >> 22 LOAD_FAST 6 ( l )					    24 LOAD_FAST 12 ( arr2 )					  
							      24 LOAD_FAST 2 ( m )					    26 LOAD_FAST 13 ( arr2 )					  
							      26 COMPARE_OP 0 ( < )					    28 LOAD_FAST 14 ( arr2 )					  
							      28 POP_JUMP_IF_FALSE 124					    30 LOAD_FAST 15 ( arr2 )					  
							      30 LOAD_FAST 7 ( r )					    32 LOAD_FAST 14 ( arr2 )					  
							      32 LOAD_CONST 1 ( 0 )					    34 LOAD_FAST 15 ( arr2 )					  
							      34 COMPARE_OP 5 ( >= )					    36 LOAD_FAST 16 ( arr2 )					  
							      36 POP_JUMP_IF_FALSE 124					    38 LOAD_FAST 17 ( arr2 )					  
							      								    40 LOAD_FAST 18 ( arr2 )					  
							      4 38 LOAD_FAST 0 ( arr1 )					    42 LOAD_FAST 17 ( arr2 )					  
							      40 LOAD_FAST 6 ( l )					    44 LOAD_FAST 18 ( arr2 )					  
							      42 BINARY_SUBSCR						    46 LOAD_FAST 19 ( arr2 )					  
							      44 LOAD_FAST 1 ( arr2 )					    48 LOAD_FAST 20 ( arr2 )					  
							      46 LOAD_FAST 7 ( r )					    50 LOAD_FAST 21 ( arr2 )					  
							      48 BINARY_SUBSCR						    52 LOAD_FAST 22 ( arr2 )					  
							      50 BINARY_ADD						    54 LOAD_FAST 21 ( arr2 )					  
							      52 LOAD_FAST 4 ( x )					    56 LOAD_FAST 22 ( arr2 )					  
							      54 COMPARE_OP 2 ( == )					    58 LOAD_FAST 21 ( arr2 )					  
							      56 POP_JUMP_IF_FALSE 84					    60 LOAD_FAST 22 ( arr2 )					  
							      								    62 LOAD_FAST 21 ( arr2 )					  
							      5 58 LOAD_FAST 6 ( l )					    64 LOAD_FAST 22 ( arr2 )					  
							      60 LOAD_CONST 2 ( 1 )					    66 LOAD_FAST 21 ( arr2 )					  
							      62 INPLACE_ADD						    68 LOAD_FAST 22 ( arr2 )					  
							      64 STORE_FAST 6 ( l )					    70 LOAD_FAST 21 ( arr2 )					  
							      								    72 LOAD_FAST 22 ( arr2 )					  
							      6 66 LOAD_FAST 7 ( r )					    74 LOAD_FAST 22 ( arr2 )					  
							      68 LOAD_CONST 2 ( 1 )					    76 LOAD_FAST 21 ( arr2 )					  
							      70 INPLACE_SUBTRACT					    78 LOAD_FAST 22 ( arr2 )					  
							      72 STORE_FAST 7 ( r )					    80 LOAD_FAST 23 ( arr2 )					  
							      								    82 LOAD_FAST 22 ( arr2 )					  
							      7 74 LOAD_FAST 5 ( count )				    84 LOAD_FAST 21 ( arr2 )					  
							      76 LOAD_CONST 2 ( 1 )					    86 LOAD_FAST 22 ( arr2 )					  
							      78 INPLACE_ADD						    88 LOAD_FAST 22 ( arr2 )					  
							      80 STORE_FAST 5 ( count )					    90 LOAD_FAST 23 ( arr2 )					  
							      82 JUMP_ABSOLUTE 22					    92 LOAD_FAST 22 ( arr2 )					  
							      								    94 LOAD_FAST 23 ( arr2 )					  
							      8 >> 84 LOAD_FAST 0 ( arr1 )				    96 LOAD_FAST 22 ( arr2 )					  
							      86 LOAD_FAST 6 ( l )					    98 LOAD_FAST 23 ( arr2 )					  
							      88 BINARY_SUBSCR						    100 LOAD_FAST 22 ( arr2 )					  
							      90 LOAD_FAST 1 ( arr2 )					    102 LOAD_FAST 24 ( arr2 )					  
							      92 LOAD_FAST 7 ( r )					    104 LOAD_FAST 23 ( arr2 )					  
							      94 BINARY_SUBSCR						    106 LOAD_FAST 22 ( arr2 )					  
							      96 BINARY_ADD						    108 LOAD_FAST 24 ( arr2 )					  
							      98 LOAD_FAST 4 ( x )					    110 LOAD_FAST 23 ( arr2 )					  
							      100 COMPARE_OP 0 ( < )					    112 LOAD_FAST 24 ( arr2 )					  
							      102 POP_JUMP_IF_FALSE 114					    114 LOAD_FAST 26 ( arr2 )					  
							      								    116 LOAD_FAST 25 ( arr2 )					  
							      9 104 LOAD_FAST 6 ( l )					    118 LOAD_FAST 24 ( arr2 )					  
							      106 LOAD_CONST 2 ( 1 )					    120 LOAD_FAST 26 ( arr2 )					  
							      108 INPLACE_ADD						    122 LOAD_FAST 28 ( arr2 )					  
							      110 STORE_FAST 6 ( l )					    124 LOAD_FAST 30 ( arr2 )					  
							      112 JUMP_ABSOLUTE 22					    126 LOAD_FAST 30 ( arr2 )					  
							      								    128 LOAD_FAST 5 ( arr2 )					  
							      11 >> 114 LOAD_FAST 7 ( r )				    130 LOAD_FAST 6 ( arr2 )					  
							      116 LOAD_CONST 2 ( 1 )					    132 LOAD_FAST 7 ( arr2 )					  
							      118 INPLACE_SUBTRACT					    134 LOAD_FAST 8 ( arr2 )					  
							      120 STORE_FAST 7 ( r )					    136 LOAD_FAST 7 ( arr2 )					  
							      122 JUMP_ABSOLUTE 22					    138 LOAD_FAST 8 ( arr2 )					  
							      >> 124 POP_BLOCK						    140 BUILD_TUPLE 7						  
							      								    142 LOAD_FAST 8						  
							      12 >> 126 LOAD_FAST 5 ( count )				    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_
--							      --							    --								  --
def longestSubseqWithK ( str , k ) :			      Disassembly of <code object longestSubseqWithK at 0x7fbac<<un Disassembly of <code object longestSubseqWithK at 0x7f816a6e4 script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    31 0 LOAD_FAST 1 ( k )					  
    freq = [ 0 ] * MAX_CHARS				      2 LOAD_FAST 0 ( str )					    2 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
	freq [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( v )					  
    for i in range ( n ) :				      								    								  
	if ( freq [ ord ( str [ i ] ) - ord ( 'a' ) ] >= k )  3 8 LOAD_CONST 1 ( 0 )					    32 8 LOAD_FAST 0 ( self )					  
	    print ( str [ i ] , end = "" )		      10 BUILD_LIST 1						    10 LOAD_METHOD 0 ( append )					  
							      12 LOAD_GLOBAL 1 ( MAX_CHARS )				    12 LOAD_FAST 2 ( v )					  
							      14 BINARY_MULTIPLY					    14 LOAD_CONST 2 ( 1 )					  
							      16 STORE_FAST 3 ( freq )					    16 BINARY_SUBSCR						  
							      								    18 CALL_METHOD 1						  
							      4 18 SETUP_LOOP 48 ( to 68 )				    20 POP_TOP							  
							      20 LOAD_GLOBAL 2 ( range )				    								  
							      22 LOAD_FAST 2 ( n )					    33 22 LOAD_FAST 0 ( self )					  
							      24 CALL_FUNCTION 1					    24 LOAD_METHOD 1 ( append )					  
							      26 GET_ITER						    26 LOAD_FAST 2 ( v )					  
							      >> 28 FOR_ITER 36 ( to 66 )				    28 CALL_METHOD 1						  
							      30 STORE_FAST 4 ( i )					    30 POP_TOP							  
							      								    32 LOAD_CONST 0 ( None )					  
							      5 32 LOAD_FAST 3 ( freq )					    34 RETURN_VALUE						  
							      34 LOAD_GLOBAL 3 ( ord )					    NEW_LINE							  
							      36 LOAD_FAST 0 ( str )					    								  
							      38 LOAD_FAST 4 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 CALL_FUNCTION 1					    								  
							      44 LOAD_GLOBAL 3 ( ord )					    								  
							      46 LOAD_CONST 2 ( 'a' )					    								  
							      48 CALL_FUNCTION 1					    								  
							      50 BINARY_SUBTRACT					    								  
							      52 DUP_TOP_TWO						    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_CONST 3 ( 1 )					    								  
							      58 INPLACE_ADD						    								  
							      60 ROT_THREE						    								  
							      62 STORE_SUBSCR						    								  
							      64 JUMP_ABSOLUTE 28					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      6 >> 68 SETUP_LOOP 60 ( to 130 )				    								  
							      70 LOAD_GLOBAL 2 ( range )				    								  
							      72 LOAD_FAST 2 ( n )					    								  
							      74 CALL_FUNCTION 1					    								  
							      76 GET_ITER						    								  
							      >> 78 FOR_ITER 48 ( to 128 )				    								  
							      80 STORE_FAST 4 ( i )					    								  
							      								    								  
							      7 82 LOAD_FAST 3 ( freq )					    								  
							      84 LOAD_GLOBAL 3 ( ord )					    								  
							      86 LOAD_FAST 0 ( str )					    								  
							      88 LOAD_FAST 4 ( i )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 CALL_FUNCTION 1					    								  
							      94 LOAD_GLOBAL 3 ( ord )					    								  
							      96 LOAD_CONST 2 ( 'a' )					    								  
							      98 CALL_FUNCTION 1					    								  
							      100 BINARY_SUBTRACT					    								  
							      102 BINARY_SUBSCR						    								  
							      104 LOAD_FAST 1 ( k )					    								  
							      106 COMPARE_OP 5 ( >= )					    								  
							      108 POP_JUMP_IF_FALSE 78					    								  
							      								    								  
							      8 110 LOAD_GLOBAL 4 ( print )				    								  
							      112 LOAD_FAST 0 ( str )					    								  
							      114 LOAD_FAST 4 ( i )					    								  
							      116 BINARY_SUBSCR						    								  
							      118 LOAD_CONST 4 ( '' )					    								  
							      120 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      122 CALL_FUNCTION_KW 2					    								  
							      124 POP_TOP						    								  
							      126 JUMP_ABSOLUTE 78					    								  
							      >> 128 POP_BLOCK						    								  
							      >> 130 LOAD_CONST 0 ( None )				    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBERS_THAT_DONT_CONTAIN_3			      COUNT_NUMBERS_THAT_DONT_CONTAIN_3				    COUNT_NUMBERS_THAT_DONT_CONTAIN_3				  COUNT_NUMBERS_THAT_DONT_CONTAIN_3
--							      --							    --								  --
def count ( n ) :					      Disassembly of <code object count at 0x7fbac0e89d20, file "<d Disassembly of <code object count at 0x7f816a6e4b70, file "<d error : Traceback (most recent call last):   File
    if n < 3 :						      2 0 LOAD_FAST 0 ( n )					    22 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
	return n					      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  item in run_dis_script():   File "XLM/dis_script.p
    elif n >= 3 and n < 10 :				      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  y", line 47, in run_dis_script     co_code, co_nlo
	return n - 1					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
    po = 1						      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    while n / po > 9 :					      3 8 LOAD_FAST 0 ( n )					    23 8 LOAD_CONST 2 ( 1 )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	po = po * 10					      10 RETURN_VALUE						    10 STORE_FAST 1 ( count )					  n parse     code.append(arg) ValueError: byte must
    msd = n / po					      								    								   be in range(0, 256)
    if msd != 3 :					      4 >> 12 LOAD_FAST 0 ( n )					    24 >> 12 LOAD_FAST 1 ( count )				  
	return count ( msd ) * count ( po - 1 ) + count ( msd 14 LOAD_CONST 1 ( 3 )					    14 LOAD_CONST 1 ( 3 )					  
    else :						      16 COMPARE_OP 5 ( >= )					    16 COMPARE_OP 0 ( < )					  
	return count ( msd * po - 1 )			      18 POP_JUMP_IF_FALSE 36					    18 POP_JUMP_IF_FALSE 28					  
							      20 LOAD_FAST 0 ( n )					    								  
							      22 LOAD_CONST 2 ( 10 )					    25 20 LOAD_CONST 3 ( 1 )					  
							      24 COMPARE_OP 0 ( < )					    22 STORE_FAST 1 ( count )					  
							      26 POP_JUMP_IF_FALSE 36					    24 JUMP_FORWARD 4 ( to 28 )					  
							      								    								  
							      5 28 LOAD_FAST 0 ( n )					    26 >> 26 LOAD_FAST 1 ( count )				  
							      30 LOAD_CONST 3 ( 1 )					    28 LOAD_CONST 1 ( 3 )					  
							      32 BINARY_SUBTRACT					    30 COMPARE_OP 0 ( < )					  
							      34 RETURN_VALUE						    32 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      6 >> 36 LOAD_CONST 3 ( 1 )				    27 34 LOAD_CONST 4 ( 1 )					  
							      38 STORE_FAST 1 ( po )					    36 STORE_FAST 1 ( count )					  
							      								    								  
							      7 40 SETUP_LOOP 24 ( to 66 )				    28 >> 38 LOAD_FAST 1 ( count )				  
							      >> 42 LOAD_FAST 0 ( n )					    40 LOAD_CONST 1 ( 3 )					  
							      44 LOAD_FAST 1 ( po )					    42 COMPARE_OP 0 ( < )					  
							      46 BINARY_TRUE_DIVIDE					    44 POP_JUMP_IF_FALSE 50					  
							      48 LOAD_CONST 4 ( 9 )					    								  
							      50 COMPARE_OP 4 ( > )					    29 46 LOAD_CONST 5 ( 1 )					  
							      52 POP_JUMP_IF_FALSE 64					    48 STORE_FAST 1 ( count )					  
							      								    50 JUMP_FORWARD 4 ( to 52 )					  
							      8 54 LOAD_FAST 1 ( po )					    								  
							      56 LOAD_CONST 2 ( 10 )					    30 >> 52 LOAD_FAST 1 ( count )				  
							      58 BINARY_MULTIPLY					    54 LOAD_CONST 1 ( 3 )					  
							      60 STORE_FAST 1 ( po )					    56 COMPARE_OP 0 ( < )					  
							      62 JUMP_ABSOLUTE 42					    58 POP_JUMP_IF_FALSE 60					  
							      >> 64 POP_BLOCK						    								  
							      								    31 60 LOAD_CONST 6 ( 1 )					  
							      9 >> 66 LOAD_FAST 0 ( n )					    62 STORE_FAST 1 ( count )					  
							      68 LOAD_FAST 1 ( po )					    								  
							      70 BINARY_TRUE_DIVIDE					    32 >> 64 LOAD_FAST 1 ( count )				  
							      72 STORE_FAST 2 ( msd )					    66 LOAD_CONST 1 ( 3 )					  
							      								    68 COMPARE_OP 0 ( < )					  
							      10 74 LOAD_FAST 2 ( msd )					    70 POP_JUMP_IF_FALSE 60					  
							      76 LOAD_CONST 1 ( 3 )					    								  
							      78 COMPARE_OP 3 ( != )					    33 72 LOAD_CONST 7 ( 1 )					  
							      80 POP_JUMP_IF_FALSE 122					    74 STORE_FAST 1 ( count )					  
							      								    								  
							      11 82 LOAD_GLOBAL 0 ( count )				    34 >> 76 LOAD_FAST 1 ( count )				  
							      84 LOAD_FAST 2 ( msd )					    78 LOAD_CONST 1 ( 3 )					  
							      86 CALL_FUNCTION 1					    80 COMPARE_OP 0 ( < )					  
							      88 LOAD_GLOBAL 0 ( count )				    82 POP_JUMP_IF_FALSE 90					  
							      90 LOAD_FAST 1 ( po )					    								  
							      92 LOAD_CONST 3 ( 1 )					    35 84 LOAD_CONST 8 ( 1 )					  
							      94 BINARY_SUBTRACT					    86 STORE_FAST 1 ( count )					  
							      96 CALL_FUNCTION 1					    								  
							      98 BINARY_MULTIPLY					    36 >> 88 LOAD_FAST 1 ( count )				  
							      100 LOAD_GLOBAL 0 ( count )				    90 LOAD_CONST 1 ( 3 )					  
							      102 LOAD_FAST 2 ( msd )					    92 COMPARE_OP 0 ( < )					  
							      104 CALL_FUNCTION 1					    94 POP_JUMP_IF_FALSE 106					  
							      106 BINARY_ADD						    								  
							      108 LOAD_GLOBAL 0 ( count )				    37 96 LOAD_FAST 1 ( count )					  
							      110 LOAD_FAST 0 ( n )					    98 LOAD_CONST 9 ( 1 )					  
							      112 LOAD_FAST 1 ( po )					    100 INPLACE_ADD						  
							      114 BINARY_MODULO						    102 STORE_FAST 1 ( count )					  
							      116 CALL_FUNCTION 1					    								  
							      118 BINARY_ADD						    38 >> 104 LOAD_FAST 1 ( count )				  
							      120 RETURN_VALUE						    106 LOAD_CONST 10 ( 1 )					  
							      								    108 INPLACE_ADD						  
							      13 >> 122 LOAD_GLOBAL 0 ( count )				    110 STORE_FAST 1 ( count )					  
							      124 LOAD_FAST 2 ( msd )					    112 JUMP_FORWARD 4 ( to 108 )				  
							      126 LOAD_FAST 1 ( po )					    								  
							      128 BINARY_MULTIPLY					    39 >> 114 LOAD_FAST 1 ( count )				  
							      130 LOAD_CONST 3 ( 1 )					    116 LOAD_CONST 10 ( 1 )					  
							      132 BINARY_SUBTRACT					    118 INPLACE_ADD						  
							      134 CALL_FUNCTION 1					    120 STORE_FAST 1 ( count )					  
							      136 RETURN_VALUE						    								  
							      138 LOAD_CONST 0 ( None )					    40 >> 122 LOAD_FAST 1 ( count )				  
							      140 RETURN_VALUE NEW_LINE					    124 LOAD_CONST 11 ( 1 )					  
							      								    126 INPLACE_ADD						  
							      								    128 STORE_FAST 1 ( count )					  
							      								    								  
							      								    42 >> 130 LOAD_FAST 1 ( count )				  
							      								    132 LOAD_FAST 1 ( count )					  
							      								    134 LOAD_CONST 1 ( 3 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( count )					  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			      MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			    MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			  MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM
--							      --							    --								  --
def maximumSumSubarray ( arr , n ) :			      Disassembly of <code object maximumSumSubarray at 0x7fbac0e89 Disassembly of <code object maximumSumSubarray at 0x7f816a673 error : Traceback (most recent call last):   File
    min_prefix_sum = 0					      2 0 LOAD_CONST 1 ( 0 )					    17 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    res = - math.inf					      2 STORE_FAST 2 ( min_prefix_sum )				    2 LOAD_CONST 1 ( math )					  item in run_dis_script():   File "XLM/dis_script.p
    prefix_sum = [ ]					      								    4 BINARY_MULTIPLY						  y", line 47, in run_dis_script     co_code, co_nlo
    prefix_sum.append ( arr [ 0 ] )			      3 4 LOAD_GLOBAL 0 ( math )				    6 STORE_FAST 2 ( x )					  cals, co_varnames, co_names, co_consts, co_linesta
    for i in range ( 1 , n ) :				      6 LOAD_ATTR 1 ( inf )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ]  8 UNARY_NEGATIVE						    18 8 LOAD_FAST 0 ( arr )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
    for i in range ( n ) :				      10 STORE_FAST 3 ( res )					    10 LOAD_CONST 2 ( 1 )					  n parse     constants[arg] = ast.literal_eval(argr
	res = max ( res , prefix_sum [ i ] - min_prefix_sum ) 								    12 BINARY_SUBSCR						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
	min_prefix_sum = min ( min_prefix_sum , prefix_sum [  4 12 BUILD_LIST 0						    14 STORE_FAST 3 ( y )					  ib/python3.7/ast.py", line 91, in literal_eval
    return res						      14 STORE_FAST 4 ( prefix_sum )				    								   return _convert(node_or_string)   File "/home/ubu
							      								    19 16 LOAD_FAST 2 ( x )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      5 16 LOAD_FAST 4 ( prefix_sum )				    18 LOAD_CONST 3 ( 1 )					  line 90, in _convert	   return _convert_signed_nu
							      18 LOAD_METHOD 2 ( append )				    20 BINARY_SUBSCR						  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      20 LOAD_FAST 0 ( arr )					    22 LOAD_FAST 3 ( y )					  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      22 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 4 ( 2 )					  ed_num     return _convert_num(node)	 File "/home
							      24 BINARY_SUBSCR						    26 BINARY_SUBSCR						  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      26 CALL_METHOD 1						    28 LOAD_FAST 3 ( y )					  y", line 55, in _convert_num	   raise ValueError(
							      28 POP_TOP						    30 LOAD_CONST 5 ( 3 )					  'malformed node or string: ' + repr(node)) ValueEr
							      								    32 BINARY_SUBSCR						  ror: malformed node or string: <_ast.Name object a
							      6 30 SETUP_LOOP 44 ( to 76 )				    34 LOAD_FAST 3 ( y )					  t 0x7ff83f019250>
							      32 LOAD_GLOBAL 3 ( range )				    36 LOAD_CONST 6 ( ( 'x' , 'y' ) )				  
							      34 LOAD_CONST 2 ( 1 )					    38 BUILD_CONST_KEY_MAP 3					  
							      36 LOAD_FAST 1 ( n )					    40 BINARY_SUBSCR						  
							      38 CALL_FUNCTION 2					    42 LOAD_FAST 3 ( y )					  
							      40 GET_ITER						    44 LOAD_CONST 7 ( 3 )					  
							      >> 42 FOR_ITER 30 ( to 74 )				    46 BINARY_SUBSCR						  
							      44 STORE_FAST 5 ( i )					    48 LOAD_FAST 3 ( y )					  
							      								    50 LOAD_CONST 8 ( ( 'x' , 'y' ) )				  
							      7 46 LOAD_FAST 4 ( prefix_sum )				    52 BUILD_CONST_KEY_MAP 3					  
							      48 LOAD_METHOD 2 ( append )				    54 BINARY_SUBSCR						  
							      50 LOAD_FAST 4 ( prefix_sum )				    56 LOAD_CONST 9 ( 1 )					  
							      52 LOAD_FAST 5 ( i )					    58 BINARY_SUBSCR						  
							      54 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 3 ( y )					  
							      56 BINARY_SUBTRACT					    62 LOAD_CONST 10 ( ( 'x' , 'y' ) )				  
							      58 BINARY_SUBSCR						    64 BUILD_CONST_KEY_MAP 3					  
							      60 LOAD_FAST 0 ( arr )					    66 BINARY_SUBSCR						  
							      62 LOAD_FAST 5 ( i )					    68 LOAD_CONST 11 ( ( 'x' , 'y' ) )				  
							      64 BINARY_SUBSCR						    70 BUILD_CONST_KEY_MAP 2					  
							      66 BINARY_ADD						    72 BINARY_SUBSCR						  
							      68 CALL_METHOD 1						    74 LOAD_CONST 12 ( ( 'x' , 'y' ) )				  
							      70 POP_TOP						    76 BUILD_CONST_KEY_MAP 2					  
							      72 JUMP_ABSOLUTE 42					    78 BINARY_SUBSCR						  
							      >> 74 POP_BLOCK						    80 RETURN_VALUE						  
							      								    NEW_LINE							  
							      8 >> 76 SETUP_LOOP 48 ( to 126 )				    								  
							      78 LOAD_GLOBAL 3 ( range )				    								  
							      80 LOAD_FAST 1 ( n )					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 GET_ITER						    								  
							      >> 86 FOR_ITER 36 ( to 124 )				    								  
							      88 STORE_FAST 5 ( i )					    								  
							      								    								  
							      9 90 LOAD_GLOBAL 4 ( max )				    								  
							      92 LOAD_FAST 3 ( res )					    								  
							      94 LOAD_FAST 4 ( prefix_sum )				    								  
							      96 LOAD_FAST 5 ( i )					    								  
							      98 BINARY_SUBSCR						    								  
							      100 LOAD_FAST 2 ( min_prefix_sum )			    								  
							      102 BINARY_SUBTRACT					    								  
							      104 CALL_FUNCTION 2					    								  
							      106 STORE_FAST 3 ( res )					    								  
							      								    								  
							      10 108 LOAD_GLOBAL 5 ( min )				    								  
							      110 LOAD_FAST 2 ( min_prefix_sum )			    								  
							      112 LOAD_FAST 4 ( prefix_sum )				    								  
							      114 LOAD_FAST 5 ( i )					    								  
							      116 BINARY_SUBSCR						    								  
							      118 CALL_FUNCTION 2					    								  
							      120 STORE_FAST 2 ( min_prefix_sum )			    								  
							      122 JUMP_ABSOLUTE 86					    								  
							      >> 124 POP_BLOCK						    								  
							      								    								  
							      11 >> 126 LOAD_FAST 3 ( res )				    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
def countSolutions ( n ) :				      Disassembly of <code object countSolutions at 0x7fbac<<unk>>  Disassembly of <code object countSolutions at 0x7f816a673a50, error : Traceback (most recent call last):   File
    x = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 60, in <module>	exec
    res = 0						      2 STORE_FAST 1 ( x )					    2 LOAD_ATTR 0 ( yCount )					  (item)   File "main.py", line 38, in <module>	  Fi
    yCount = 0						      								    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in countSolutions AttributeErr
    while ( yCount * yCount < n ) :			      3 4 LOAD_CONST 1 ( 0 )					    6 COMPARE_OP 2 ( == )					  or: 'int' object has no attribute 'yCount'
	yCount = yCount + 1				      6 STORE_FAST 2 ( res )					    8 POP_JUMP_IF_FALSE 14					  
    while ( yCount != 0 ) :				      								    								  
	res = res + yCount				      4 8 LOAD_CONST 1 ( 0 )					    27 10 LOAD_FAST 0 ( self )					  
	x = x + 1					      10 STORE_FAST 3 ( yCount )				    12 LOAD_METHOD 1 ( assertEqual )				  
	while ( yCount != 0 and ( x * x + ( yCount - 1 ) * (  								    14 LOAD_FAST 0 ( self )					  
	    yCount = yCount - 1				      5 12 SETUP_LOOP 24 ( to 38 )				    16 LOAD_ATTR 0 ( yCount )					  
    return res						      >> 14 LOAD_FAST 3 ( yCount )				    18 LOAD_CONST 1 ( 1 )					  
							      16 LOAD_FAST 3 ( yCount )					    20 COMPARE_OP 2 ( == )					  
							      18 BINARY_MULTIPLY					    22 CALL_METHOD 1						  
							      20 LOAD_FAST 0 ( n )					    24 POP_TOP							  
							      22 COMPARE_OP 0 ( < )					    								  
							      24 POP_JUMP_IF_FALSE 36					    28 26 LOAD_FAST 0 ( self )					  
							      								    28 LOAD_METHOD 1 ( assertEqual )				  
							      6 26 LOAD_FAST 3 ( yCount )				    30 LOAD_FAST 0 ( self )					  
							      28 LOAD_CONST 2 ( 1 )					    32 LOAD_ATTR 0 ( yCount )					  
							      30 BINARY_ADD						    34 LOAD_CONST 1 ( 1 )					  
							      32 STORE_FAST 3 ( yCount )				    36 COMPARE_OP 2 ( == )					  
							      34 JUMP_ABSOLUTE 14					    38 CALL_METHOD 1						  
							      >> 36 POP_BLOCK						    40 POP_TOP							  
							      								    42 LOAD_CONST 0 ( None )					  
							      7 >> 38 SETUP_LOOP 78 ( to 118 )				    44 RETURN_VALUE						  
							      >> 40 LOAD_FAST 3 ( yCount )				    NEW_LINE							  
							      42 LOAD_CONST 1 ( 0 )					    								  
							      44 COMPARE_OP 3 ( != )					    								  
							      46 POP_JUMP_IF_FALSE 116					    								  
							      								    								  
							      8 48 LOAD_FAST 2 ( res )					    								  
							      50 LOAD_FAST 3 ( yCount )					    								  
							      52 BINARY_ADD						    								  
							      54 STORE_FAST 2 ( res )					    								  
							      								    								  
							      9 56 LOAD_FAST 1 ( x )					    								  
							      58 LOAD_CONST 2 ( 1 )					    								  
							      60 BINARY_ADD						    								  
							      62 STORE_FAST 1 ( x )					    								  
							      								    								  
							      10 64 SETUP_LOOP 48 ( to 114 )				    								  
							      >> 66 LOAD_FAST 3 ( yCount )				    								  
							      68 LOAD_CONST 1 ( 0 )					    								  
							      70 COMPARE_OP 3 ( != )					    								  
							      72 POP_JUMP_IF_FALSE 112					    								  
							      74 LOAD_FAST 1 ( x )					    								  
							      76 LOAD_FAST 1 ( x )					    								  
							      78 BINARY_MULTIPLY					    								  
							      80 LOAD_FAST 3 ( yCount )					    								  
							      82 LOAD_CONST 2 ( 1 )					    								  
							      84 BINARY_SUBTRACT					    								  
							      86 LOAD_FAST 3 ( yCount )					    								  
							      88 LOAD_CONST 2 ( 1 )					    								  
							      90 BINARY_SUBTRACT					    								  
							      92 BINARY_MULTIPLY					    								  
							      94 BINARY_ADD						    								  
							      96 LOAD_FAST 0 ( n )					    								  
							      98 COMPARE_OP 5 ( >= )					    								  
							      100 POP_JUMP_IF_FALSE 112					    								  
							      								    								  
							      11 102 LOAD_FAST 3 ( yCount )				    								  
							      104 LOAD_CONST 2 ( 1 )					    								  
							      106 BINARY_SUBTRACT					    								  
							      108 STORE_FAST 3 ( yCount )				    								  
							      110 JUMP_ABSOLUTE 66					    								  
							      >> 112 POP_BLOCK						    								  
							      >> 114 JUMP_ABSOLUTE 40					    								  
							      >> 116 POP_BLOCK						    								  
							      								    								  
							      12 >> 118 LOAD_FAST 2 ( res )				    								  
							      120 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE				      C_PROGRAM_FIND_AREA_TRIANGLE				    C_PROGRAM_FIND_AREA_TRIANGLE				  C_PROGRAM_FIND_AREA_TRIANGLE
--							      --							    --								  --
def findArea ( a , b , c ) :				      Disassembly of <code object findArea at 0x7fbac0e89d20, file  Disassembly of <code object findArea at 0x7f816a677930, file  script_not_found : None
    if ( a < 0 or b < 0 or c < 0 or ( a + b <= c ) or ( a + c 2 0 LOAD_FAST 0 ( a )					    68 0 LOAD_FAST 0 ( a )					  
	print ( 'Not a valid trianglen' )		      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
	return						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    s = ( a + b + c ) / 2				      6 POP_JUMP_IF_TRUE 60					    6 POP_JUMP_IF_FALSE 12					  
    area = ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ** 0.5   8 LOAD_FAST 1 ( b )					    								  
    print ( 'Area of a traingle is %f' % area )		      10 LOAD_CONST 1 ( 0 )					    69 8 LOAD_GLOBAL 0 ( print )				  
							      12 COMPARE_OP 0 ( < )					    10 LOAD_CONST 2 ( 'Not a valid trianglen' )			  
							      14 POP_JUMP_IF_TRUE 60					    12 CALL_FUNCTION 1						  
							      16 LOAD_FAST 2 ( c )					    14 POP_TOP							  
							      18 LOAD_CONST 1 ( 0 )					    								  
							      20 COMPARE_OP 0 ( < )					    70 >> 16 LOAD_GLOBAL 1 ( print )				  
							      22 POP_JUMP_IF_TRUE 60					    18 LOAD_CONST 3 ( 'Not a valid trianglen' )			  
							      24 LOAD_FAST 0 ( a )					    20 CALL_FUNCTION 1						  
							      26 LOAD_FAST 1 ( b )					    22 POP_TOP							  
							      28 BINARY_ADD						    								  
							      30 LOAD_FAST 2 ( c )					    71 24 LOAD_GLOBAL 2 ( print )				  
							      32 COMPARE_OP 1 ( <= )					    26 LOAD_CONST 4 ( 'Area of traingle is a traingle is a traing 
							      34 POP_JUMP_IF_TRUE 60					    28 CALL_FUNCTION 1						  
							      36 LOAD_FAST 0 ( a )					    30 POP_TOP							  
							      38 LOAD_FAST 2 ( c )					    32 LOAD_CONST 0 ( None )					  
							      40 BINARY_ADD						    34 RETURN_VALUE						  
							      42 LOAD_FAST 1 ( b )					    NEW_LINE							  
							      44 COMPARE_OP 1 ( <= )					    								  
							      46 POP_JUMP_IF_TRUE 60					    								  
							      48 LOAD_FAST 1 ( b )					    								  
							      50 LOAD_FAST 2 ( c )					    								  
							      52 BINARY_ADD						    								  
							      54 LOAD_FAST 0 ( a )					    								  
							      56 COMPARE_OP 1 ( <= )					    								  
							      58 POP_JUMP_IF_FALSE 72					    								  
							      								    								  
							      3 >> 60 LOAD_GLOBAL 0 ( print )				    								  
							      62 LOAD_CONST 2 ( 'Not a valid trianglen' )		    								  
							      64 CALL_FUNCTION 1					    								  
							      66 POP_TOP						    								  
							      								    								  
							      4 68 LOAD_CONST 0 ( None )				    								  
							      70 RETURN_VALUE						    								  
							      								    								  
							      5 >> 72 LOAD_FAST 0 ( a )					    								  
							      74 LOAD_FAST 1 ( b )					    								  
							      76 BINARY_ADD						    								  
							      78 LOAD_FAST 2 ( c )					    								  
							      80 BINARY_ADD						    								  
							      82 LOAD_CONST 3 ( 2 )					    								  
							      84 BINARY_TRUE_DIVIDE					    								  
							      86 STORE_FAST 3 ( s )					    								  
							      								    								  
							      6 88 LOAD_FAST 3 ( s )					    								  
							      90 LOAD_FAST 3 ( s )					    								  
							      92 LOAD_FAST 0 ( a )					    								  
							      94 BINARY_SUBTRACT					    								  
							      96 BINARY_MULTIPLY					    								  
							      98 LOAD_FAST 3 ( s )					    								  
							      100 LOAD_FAST 1 ( b )					    								  
							      102 BINARY_SUBTRACT					    								  
							      104 BINARY_MULTIPLY					    								  
							      106 LOAD_FAST 3 ( s )					    								  
							      108 LOAD_FAST 2 ( c )					    								  
							      110 BINARY_SUBTRACT					    								  
							      112 BINARY_MULTIPLY					    								  
							      114 LOAD_CONST 4 ( 0.5 )					    								  
							      116 BINARY_POWER						    								  
							      118 STORE_FAST 4 ( area )					    								  
							      								    								  
							      7 120 LOAD_GLOBAL 0 ( print )				    								  
							      122 LOAD_CONST 5 ( 'Area of a traingle is %f' )		    								  
							      124 LOAD_FAST 4 ( area )					    								  
							      126 BINARY_MODULO						    								  
							      128 CALL_FUNCTION 1					    								  
							      130 POP_TOP						    								  
							      132 LOAD_CONST 0 ( None )					    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1
--							      --							    --								  --
def minheapify ( a , index ) :				      Disassembly of <code object minheapify at 0x7fbac<<unk>> d540 Disassembly of <code object minheapify at 0x7f816a6e4b70, fil script_not_found : None
    small = index					      2 0 LOAD_FAST 1 ( index )					    26 0 LOAD_FAST 1 ( index )					  
    l = 2 * index + 1					      2 STORE_FAST 2 ( small )					    2 LOAD_CONST 1 ( 2 )					  
    r = 2 * index + 2					      								    4 BINARY_MULTIPLY						  
    if ( l < n and a [ l ] < a [ small ] ) :		      3 4 LOAD_CONST 1 ( 2 )					    6 STORE_FAST 2 ( l )					  
	small = l					      6 LOAD_FAST 1 ( index )					    								  
    if ( r < n and a [ r ] < a [ small ] ) :		      8 BINARY_MULTIPLY						    27 8 LOAD_FAST 0 ( a )					  
	small = r					      10 LOAD_CONST 2 ( 1 )					    10 LOAD_FAST 2 ( l )					  
    if ( small != index ) :				      12 BINARY_ADD						    12 BINARY_MULTIPLY						  
	( a [ small ] , a [ index ] ) = ( a [ index ] , a [ s 14 STORE_FAST 3 ( l )					    14 STORE_FAST 3 ( l )					  
	minheapify ( a , small )			      								    								  
							      4 16 LOAD_CONST 1 ( 2 )					    28 16 LOAD_FAST 0 ( a )					  
							      18 LOAD_FAST 1 ( index )					    18 LOAD_FAST 3 ( l )					  
							      20 BINARY_MULTIPLY					    20 BINARY_MULTIPLY						  
							      22 LOAD_CONST 1 ( 2 )					    22 STORE_FAST 4 ( b )					  
							      24 BINARY_ADD						    								  
							      26 STORE_FAST 4 ( r )					    29 24 LOAD_FAST 0 ( a )					  
							      								    26 LOAD_FAST 4 ( b )					  
							      5 28 LOAD_FAST 3 ( l )					    28 BINARY_MULTIPLY						  
							      30 LOAD_GLOBAL 0 ( n )					    30 LOAD_FAST 2 ( l )					  
							      32 COMPARE_OP 0 ( < )					    32 BINARY_MULTIPLY						  
							      34 POP_JUMP_IF_FALSE 56					    34 LOAD_FAST 3 ( l )					  
							      36 LOAD_FAST 0 ( a )					    36 BINARY_MULTIPLY						  
							      38 LOAD_FAST 3 ( l )					    38 BINARY_ADD						  
							      40 BINARY_SUBSCR						    40 LOAD_FAST 4 ( b )					  
							      42 LOAD_FAST 0 ( a )					    42 BINARY_MULTIPLY						  
							      44 LOAD_FAST 2 ( small )					    44 BINARY_ADD						  
							      46 BINARY_SUBSCR						    46 LOAD_FAST 4 ( b )					  
							      48 COMPARE_OP 0 ( < )					    48 BINARY_MULTIPLY						  
							      50 POP_JUMP_IF_FALSE 56					    50 BINARY_ADD						  
							      								    52 LOAD_FAST 2 ( l )					  
							      6 52 LOAD_FAST 3 ( l )					    54 BINARY_MULTIPLY						  
							      54 STORE_FAST 2 ( small )					    56 BINARY_ADD						  
							      								    58 STORE_FAST 5 ( l )					  
							      7 >> 56 LOAD_FAST 4 ( r )					    								  
							      58 LOAD_GLOBAL 0 ( n )					    30 60 LOAD_FAST 0 ( a )					  
							      60 COMPARE_OP 0 ( < )					    62 LOAD_FAST 5 ( l )					  
							      62 POP_JUMP_IF_FALSE 84					    64 BINARY_MULTIPLY						  
							      64 LOAD_FAST 0 ( a )					    66 BINARY_ADD						  
							      66 LOAD_FAST 4 ( r )					    68 STORE_FAST 6 ( l )					  
							      68 BINARY_SUBSCR						    								  
							      70 LOAD_FAST 0 ( a )					    31 70 LOAD_FAST 0 ( a )					  
							      72 LOAD_FAST 2 ( small )					    72 LOAD_FAST 6 ( l )					  
							      74 BINARY_SUBSCR						    74 BINARY_MULTIPLY						  
							      76 COMPARE_OP 0 ( < )					    76 BINARY_ADD						  
							      78 POP_JUMP_IF_FALSE 84					    78 STORE_FAST 7 ( l )					  
							      								    								  
							      8 80 LOAD_FAST 4 ( r )					    32 80 LOAD_FAST 0 ( a )					  
							      82 STORE_FAST 2 ( small )					    82 LOAD_FAST 7 ( l )					  
							      								    84 BINARY_MULTIPLY						  
							      9 >> 84 LOAD_FAST 2 ( small )				    86 BINARY_ADD						  
							      86 LOAD_FAST 1 ( index )					    88 LOAD_FAST 2 ( l )					  
							      88 COMPARE_OP 3 ( != )					    90 BINARY_MULTIPLY						  
							      90 POP_JUMP_IF_FALSE 128					    92 BINARY_ADD						  
							      								    94 LOAD_FAST 5 ( l )					  
							      10 92 LOAD_FAST 0 ( a )					    96 BINARY_MULTIPLY						  
							      94 LOAD_FAST 1 ( index )					    98 BINARY_ADD						  
							      96 BINARY_SUBSCR						    100 LOAD_FAST 4 ( b )					  
							      98 LOAD_FAST 0 ( a )					    102 BINARY_MULTIPLY						  
							      100 LOAD_FAST 2 ( small )					    104 BINARY_ADD						  
							      102 BINARY_SUBSCR						    106 LOAD_FAST 2 ( l )					  
							      104 ROT_TWO						    108 BINARY_MULTIPLY						  
							      106 LOAD_FAST 0 ( a )					    110 BINARY_ADD						  
							      108 LOAD_FAST 2 ( small )					    112 LOAD_FAST 3 ( l )					  
							      110 STORE_SUBSCR						    114 BINARY_ADD						  
							      112 LOAD_FAST 0 ( a )					    116 BINARY_MULTIPLY						  
							      114 LOAD_FAST 1 ( index )					    118 BINARY_ADD						  
							      116 STORE_SUBSCR						    120 LOAD_FAST 2 ( l )					  
							      								    122 BINARY_ADD						  
							      11 118 LOAD_GLOBAL 1 ( minheapify )			    124 LOAD_FAST 3 ( l )					  
							      120 LOAD_FAST 0 ( a )					    126 BINARY_MULTIPLY						  
							      122 LOAD_FAST 2 ( small )					    128 BINARY_ADD						  
							      124 CALL_FUNCTION 2					    130 BINARY_ADD						  
							      126 POP_TOP						    132 LOAD_FAST 4 ( b )					  
							      >> 128 LOAD_CONST 0 ( None )				    134 BINARY_MULTIPLY						  
							      130 RETURN_VALUE NEW_LINE					    136 BINARY_ADD						  
							      								    138 BINARY_ADD						  
							      								    140 LOAD_FAST 5 ( l )					  
							      								    142 BINARY_ADD						  
							      								    144 BINARY_ADD						  
							      								    146 BINARY_ADD						  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			      FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			    FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			  FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY
--							      --							    --								  --
def firstElement ( arr , n , k ) :			      Disassembly of <code object firstElement at 0x7fbac<<unk>> de Disassembly of <code object firstElement at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    count_map = { } ;					      2 0 BUILD_MAP 0						    20 0 LOAD_CONST 1 ( ';;' )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n ) :				      2 STORE_FAST 3 ( count_map )				    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 39, in <module>	  Fi
	if ( arr [ i ] in count_map.keys ( ) ) :	      								    								  le "<dis>", line 2, in firstElement TypeError: can
	    count_map [ arr [ i ] ] += 1		      3 4 SETUP_LOOP 76 ( to 82 )				    21 4 LOAD_FAST 0 ( arr )					   only concatenate list (not "int") to list
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_FAST 1 ( n )						  
	    count_map [ arr [ i ] ] = 1			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_FAST 2 ( n )						  
	i += 1						      10 LOAD_FAST 1 ( n )					    10 BINARY_ADD						  
    for i in range ( 0 , n ) :				      12 CALL_FUNCTION 2					    12 LOAD_CONST 2 ( '' )					  
	if ( count_map [ arr [ i ] ] == k ) :		      14 GET_ITER						    14 BINARY_ADD						  
	    return arr [ i ]				      >> 16 FOR_ITER 62 ( to 80 )				    16 STORE_FAST 1 ( n )					  
	i += 1						      18 STORE_FAST 4 ( i )					    								  
    return - 1						      								    22 18 LOAD_FAST 0 ( arr )					  
							      4 20 LOAD_FAST 0 ( arr )					    20 LOAD_FAST 1 ( n )					  
							      22 LOAD_FAST 4 ( i )					    22 LOAD_FAST 2 ( n )					  
							      24 BINARY_SUBSCR						    24 BINARY_MULTIPLY						  
							      26 LOAD_FAST 3 ( count_map )				    26 BINARY_ADD						  
							      28 LOAD_METHOD 1 ( keys )					    28 STORE_FAST 1 ( n )					  
							      30 CALL_METHOD 0						    								  
							      32 COMPARE_OP 6 ( in )					    23 30 LOAD_FAST 0 ( arr )					  
							      34 POP_JUMP_IF_FALSE 58					    32 LOAD_FAST 1 ( n )					  
							      								    34 LOAD_FAST 2 ( n )					  
							      5 36 LOAD_FAST 3 ( count_map )				    36 BINARY_MULTIPLY						  
							      38 LOAD_FAST 0 ( arr )					    38 BINARY_ADD						  
							      40 LOAD_FAST 4 ( i )					    40 STORE_FAST 1 ( n )					  
							      42 BINARY_SUBSCR						    								  
							      44 DUP_TOP_TWO						    24 42 LOAD_FAST 0 ( arr )					  
							      46 BINARY_SUBSCR						    44 LOAD_FAST 1 ( n )					  
							      48 LOAD_CONST 2 ( 1 )					    46 BINARY_MULTIPLY						  
							      50 INPLACE_ADD						    48 BINARY_ADD						  
							      52 ROT_THREE						    50 STORE_FAST 1 ( n )					  
							      54 STORE_SUBSCR						    								  
							      56 JUMP_FORWARD 12 ( to 70 )				    25 52 LOAD_FAST 0 ( arr )					  
							      								    54 LOAD_FAST 1 ( n )					  
							      7 >> 58 LOAD_CONST 2 ( 1 )				    56 BINARY_MULTIPLY						  
							      60 LOAD_FAST 3 ( count_map )				    58 BINARY_ADD						  
							      62 LOAD_FAST 0 ( arr )					    60 STORE_FAST 1 ( n )					  
							      64 LOAD_FAST 4 ( i )					    								  
							      66 BINARY_SUBSCR						    26 62 LOAD_FAST 0 ( arr )					  
							      68 STORE_SUBSCR						    64 LOAD_FAST 1 ( n )					  
							      								    66 BINARY_MULTIPLY						  
							      8 >> 70 LOAD_FAST 4 ( i )					    68 INPLACE_ADD						  
							      72 LOAD_CONST 2 ( 1 )					    70 STORE_FAST 1 ( n )					  
							      74 INPLACE_ADD						    								  
							      76 STORE_FAST 4 ( i )					    27 72 LOAD_FAST 0 ( arr )					  
							      78 JUMP_ABSOLUTE 16					    74 LOAD_FAST 1 ( n )					  
							      >> 80 POP_BLOCK						    76 LOAD_FAST 2 ( n )					  
							      								    78 BINARY_MULTIPLY						  
							      9 >> 82 SETUP_LOOP 50 ( to 134 )				    80 INPLACE_ADD						  
							      84 LOAD_GLOBAL 0 ( range )				    82 STORE_FAST 1 ( n )					  
							      86 LOAD_CONST 1 ( 0 )					    								  
							      88 LOAD_FAST 1 ( n )					    28 84 LOAD_FAST 0 ( arr )					  
							      90 CALL_FUNCTION 2					    86 LOAD_FAST 1 ( n )					  
							      92 GET_ITER						    88 BINARY_MULTIPLY						  
							      >> 94 FOR_ITER 36 ( to 132 )				    90 INPLACE_ADD						  
							      96 STORE_FAST 4 ( i )					    92 STORE_FAST 1 ( n )					  
							      								    								  
							      10 98 LOAD_FAST 3 ( count_map )				    29 94 LOAD_FAST 0 ( arr )					  
							      100 LOAD_FAST 0 ( arr )					    96 LOAD_FAST 1 ( n )					  
							      102 LOAD_FAST 4 ( i )					    98 LOAD_FAST 2 ( n )					  
							      104 BINARY_SUBSCR						    100 BINARY_MULTIPLY						  
							      106 BINARY_SUBSCR						    102 INPLACE_ADD						  
							      108 LOAD_FAST 2 ( k )					    104 STORE_FAST 1 ( n )					  
							      110 COMPARE_OP 2 ( == )					    								  
							      112 POP_JUMP_IF_FALSE 122					    30 106 LOAD_FAST 0 ( arr )					  
							      								    108 LOAD_FAST 1 ( n )					  
							      11 114 LOAD_FAST 0 ( arr )				    110 BINARY_MULTIPLY						  
							      116 LOAD_FAST 4 ( i )					    112 INPLACE_ADD						  
							      118 BINARY_SUBSCR						    114 STORE_FAST 1 ( n )					  
							      120 RETURN_VALUE						    								  
							      								    31 116 LOAD_FAST 0 ( arr )					  
							      12 >> 122 LOAD_FAST 4 ( i )				    118 LOAD_FAST 1 ( n )					  
							      124 LOAD_CONST 2 ( 1 )					    120 BINARY_MULTIPLY						  
							      126 INPLACE_ADD						    122 INPLACE_ADD						  
							      128 STORE_FAST 4 ( i )					    124 STORE_FAST 1 ( n )					  
							      130 JUMP_ABSOLUTE 94					    								  
							      >> 132 POP_BLOCK						    32 126 LOAD_FAST 0 ( arr )					  
							      								    128 LOAD_FAST 1 ( n )					  
							      13 >> 134 LOAD_CONST 3 ( - 1 )				    130 BINARY_MULTIPLY						  
							      136 RETURN_VALUE NEW_LINE					    132 INPLACE_ADD						  
							      								    134 STORE_FAST 1 ( n )					  
							      								    								  
							      								    33 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 BINARY_MULTIPLY						  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    34 146 LOAD_FAST 1 ( n )					  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS   FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS   FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS	  FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS
--							      --							    --								  --
def maxLevel ( boxes , n ) :				      Disassembly of <code object maxLevel at 0x7fbac<<unk>> de40,  Disassembly of <code object maxLevel at 0x7f816a673a50, file  error : Traceback (most recent call last):   File
    boxes.sort ( )					      2 0 LOAD_FAST 0 ( boxes )					    101 0 LOAD_FAST 0 ( boxes )					  "XLM/dis_script.py", line 59, in <module>	for
    ans = 1						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    prev_width = boxes [ 0 ]				      4 CALL_METHOD 0						    4 CALL_METHOD 0						  y", line 47, in run_dis_script     co_code, co_nlo
    prev_count = 1					      6 POP_TOP							    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
    curr_count = 0					      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    curr_width = 0					      3 8 LOAD_CONST 1 ( 1 )					    102 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
    for i in range ( 1 , n ) :				      10 STORE_FAST 2 ( ans )					    10 LOAD_CONST 1 ( 1 )					  n parse     code.append(arg) ValueError: byte must
	curr_width += boxes [ i ]			      								    12 INPLACE_ADD						   be in range(0, 256)
	curr_count += 1					      4 12 LOAD_FAST 0 ( boxes )				    14 STORE_FAST 1 ( n )					  
	if ( curr_width > prev_width and curr_count > prev_co 14 LOAD_CONST 2 ( 0 )					    								  
	    prev_width = curr_width			      16 BINARY_SUBSCR						    103 16 LOAD_FAST 1 ( n )					  
	    prev_count = curr_count			      18 STORE_FAST 3 ( prev_width )				    18 LOAD_CONST 2 ( 0 )					  
	    curr_count = 0				      								    20 COMPARE_OP 4 ( > )					  
	    curr_width = 0				      5 20 LOAD_CONST 1 ( 1 )					    22 POP_JUMP_IF_FALSE 28					  
	    ans += 1					      22 STORE_FAST 4 ( prev_count )				    								  
    return ans						      								    104 24 LOAD_FAST 1 ( n )					  
							      6 24 LOAD_CONST 2 ( 0 )					    26 LOAD_CONST 3 ( 0 )					  
							      26 STORE_FAST 5 ( curr_count )				    28 BINARY_SUBSCR						  
							      								    30 STORE_FAST 1 ( n )					  
							      7 28 LOAD_CONST 2 ( 0 )					    								  
							      30 STORE_FAST 6 ( curr_width )				    105 32 LOAD_FAST 1 ( n )					  
							      								    34 LOAD_CONST 4 ( 0 )					  
							      8 32 SETUP_LOOP 78 ( to 112 )				    36 COMPARE_OP 4 ( > )					  
							      34 LOAD_GLOBAL 1 ( range )				    38 POP_JUMP_IF_FALSE 44					  
							      36 LOAD_CONST 1 ( 1 )					    40 LOAD_FAST 1 ( n )					  
							      38 LOAD_FAST 1 ( n )					    42 LOAD_CONST 5 ( 1 )					  
							      40 CALL_FUNCTION 2					    44 INPLACE_ADD						  
							      42 GET_ITER						    46 STORE_FAST 1 ( n )					  
							      >> 44 FOR_ITER 64 ( to 110 )				    48 JUMP_FORWARD 4 ( to 44 )					  
							      46 STORE_FAST 7 ( i )					    								  
							      								    106 >> 50 LOAD_FAST 1 ( n )					  
							      9 48 LOAD_FAST 6 ( curr_width )				    52 LOAD_CONST 6 ( 2 )					  
							      50 LOAD_FAST 0 ( boxes )					    54 INPLACE_ADD						  
							      52 LOAD_FAST 7 ( i )					    56 STORE_FAST 1 ( n )					  
							      54 BINARY_SUBSCR						    								  
							      56 INPLACE_ADD						    107 58 LOAD_FAST 1 ( n )					  
							      58 STORE_FAST 6 ( curr_width )				    60 LOAD_CONST 7 ( 2 )					  
							      								    62 INPLACE_ADD						  
							      10 60 LOAD_FAST 5 ( curr_count )				    64 STORE_FAST 1 ( n )					  
							      62 LOAD_CONST 1 ( 1 )					    								  
							      64 INPLACE_ADD						    108 >> 66 LOAD_FAST 1 ( n )					  
							      66 STORE_FAST 5 ( curr_count )				    68 LOAD_CONST 8 ( 2 )					  
							      								    70 INPLACE_ADD						  
							      11 68 LOAD_FAST 6 ( curr_width )				    72 STORE_FAST 1 ( n )					  
							      70 LOAD_FAST 3 ( prev_width )				    74 JUMP_FORWARD 4 ( to 44 )					  
							      72 COMPARE_OP 4 ( > )					    								  
							      74 POP_JUMP_IF_FALSE 44					    109 >> 76 LOAD_FAST 1 ( n )					  
							      76 LOAD_FAST 5 ( curr_count )				    78 LOAD_CONST 9 ( 2 )					  
							      78 LOAD_FAST 4 ( prev_count )				    80 INPLACE_ADD						  
							      80 COMPARE_OP 4 ( > )					    82 STORE_FAST 1 ( n )					  
							      82 POP_JUMP_IF_FALSE 44					    								  
							      								    110 >> 84 LOAD_FAST 1 ( n )					  
							      12 84 LOAD_FAST 6 ( curr_width )				    86 LOAD_CONST 10 ( 2 )					  
							      86 STORE_FAST 3 ( prev_width )				    88 INPLACE_ADD						  
							      								    90 STORE_FAST 1 ( n )					  
							      13 88 LOAD_FAST 5 ( curr_count )				    								  
							      90 STORE_FAST 4 ( prev_count )				    111 92 LOAD_FAST 1 ( n )					  
							      								    94 LOAD_CONST 11 ( 2 )					  
							      14 92 LOAD_CONST 2 ( 0 )					    96 INPLACE_ADD						  
							      94 STORE_FAST 5 ( curr_count )				    98 STORE_FAST 1 ( n )					  
							      								    								  
							      15 96 LOAD_CONST 2 ( 0 )					    112 100 LOAD_FAST 1 ( n )					  
							      98 STORE_FAST 6 ( curr_width )				    102 LOAD_CONST 12 ( 0 )					  
							      								    104 INPLACE_ADD						  
							      16 100 LOAD_FAST 2 ( ans )				    106 STORE_FAST 1 ( n )					  
							      102 LOAD_CONST 1 ( 1 )					    108 JUMP_FORWARD 4 ( to 44 )				  
							      104 INPLACE_ADD						    								  
							      106 STORE_FAST 2 ( ans )					    113 >> 110 LOAD_FAST 1 ( n )				  
							      108 JUMP_ABSOLUTE 44					    112 LOAD_FAST 0 ( boxes )					  
							      >> 110 POP_BLOCK						    114 LOAD_CONST 12 ( 0 )					  
							      								    116 BINARY_SUBSCR						  
							      17 >> 112 LOAD_FAST 2 ( ans )				    118 LOAD_FAST 1 ( n )					  
							      114 RETURN_VALUE NEW_LINE					    120 LOAD_CONST 13 ( 1 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    								  
							      								    114 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_CONST 14 ( 2 )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( n )					  
							      								    								  
							      								    115 134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_CONST 15 ( 2 )					  
							      								    140 STORE_SUBSCR						  
							      								    142 LOAD_CONST 16 ( None )					  
							      								    144 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM_1				      COUNT_PAIRS_WITH_GIVEN_SUM_1				    COUNT_PAIRS_WITH_GIVEN_SUM_1				  COUNT_PAIRS_WITH_GIVEN_SUM_1
--							      --							    --								  --
def getPairsCount ( arr , n , sum ) :			      Disassembly of <code object getPairsCount at 0x7fbac<<unk>> d Disassembly of <code object getPairsCount at 0x7f816a673a50,  script_not_found : None
    m = [ 0 ] * 1000					      2 0 LOAD_CONST 1 ( 0 )					    90 0 LOAD_FAST 0 ( arr )					  
    for i in range ( 0 , n ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 1000 )					  
	m [ arr [ i ] ]					      4 LOAD_CONST 2 ( 1000 )					    4 BINARY_MULTIPLY						  
	m [ arr [ i ] ] += 1				      6 BINARY_MULTIPLY						    6 STORE_FAST 1 ( n )					  
    twice_count = 0					      8 STORE_FAST 3 ( m )					    								  
    for i in range ( 0 , n ) :				      								    91 8 LOAD_FAST 1 ( n )					  
	twice_count += m [ sum - arr [ i ] ]		      3 10 SETUP_LOOP 50 ( to 62 )				    10 LOAD_CONST 2 ( 0 )					  
	if ( sum - arr [ i ] == arr [ i ] ) :		      12 LOAD_GLOBAL 0 ( range )				    12 BINARY_SUBSCR						  
	    twice_count -= 1				      14 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 2 ( n )					  
    return int ( twice_count / 2 )			      16 LOAD_FAST 1 ( n )					    								  
							      18 CALL_FUNCTION 2					    92 16 LOAD_FAST 1 ( n )					  
							      20 GET_ITER						    18 LOAD_CONST 3 ( 1 )					  
							      >> 22 FOR_ITER 36 ( to 60 )				    20 BINARY_SUBSCR						  
							      24 STORE_FAST 4 ( i )					    22 STORE_FAST 3 ( n )					  
							      								    								  
							      4 26 LOAD_FAST 3 ( m )					    93 24 LOAD_FAST 1 ( n )					  
							      28 LOAD_FAST 0 ( arr )					    26 LOAD_CONST 4 ( 2 )					  
							      30 LOAD_FAST 4 ( i )					    28 BINARY_SUBSCR						  
							      32 BINARY_SUBSCR						    30 LOAD_CONST 5 ( 1 )					  
							      34 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      36 POP_TOP						    34 STORE_FAST 4 ( n )					  
							      								    								  
							      5 38 LOAD_FAST 3 ( m )					    94 36 LOAD_FAST 0 ( arr )					  
							      40 LOAD_FAST 0 ( arr )					    38 LOAD_CONST 6 ( 2 )					  
							      42 LOAD_FAST 4 ( i )					    40 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    42 STORE_FAST 5 ( n )					  
							      46 DUP_TOP_TWO						    								  
							      48 BINARY_SUBSCR						    95 44 LOAD_FAST 0 ( arr )					  
							      50 LOAD_CONST 3 ( 1 )					    46 LOAD_CONST 7 ( 3 )					  
							      52 INPLACE_ADD						    48 BINARY_SUBSCR						  
							      54 ROT_THREE						    50 STORE_FAST 6 ( n )					  
							      56 STORE_SUBSCR						    								  
							      58 JUMP_ABSOLUTE 22					    96 52 LOAD_FAST 0 ( arr )					  
							      >> 60 POP_BLOCK						    54 LOAD_CONST 8 ( 2 )					  
							      								    56 BINARY_SUBSCR						  
							      6 >> 62 LOAD_CONST 1 ( 0 )				    58 STORE_FAST 7 ( n )					  
							      64 STORE_FAST 5 ( twice_count )				    								  
							      								    97 60 LOAD_FAST 0 ( arr )					  
							      7 66 SETUP_LOOP 66 ( to 134 )				    62 LOAD_CONST 9 ( 4 )					  
							      68 LOAD_GLOBAL 0 ( range )				    64 BINARY_SUBSCR						  
							      70 LOAD_CONST 1 ( 0 )					    66 STORE_FAST 8 ( arr )					  
							      72 LOAD_FAST 1 ( n )					    								  
							      74 CALL_FUNCTION 2					    98 68 LOAD_FAST 0 ( arr )					  
							      76 GET_ITER						    70 LOAD_CONST 10 ( 1 )					  
							      >> 78 FOR_ITER 52 ( to 132 )				    72 BINARY_SUBSCR						  
							      80 STORE_FAST 4 ( i )					    74 LOAD_CONST 11 ( 2 )					  
							      								    76 BINARY_SUBSCR						  
							      8 82 LOAD_FAST 5 ( twice_count )				    78 LOAD_FAST 7 ( n )					  
							      84 LOAD_FAST 3 ( m )					    80 LOAD_CONST 12 ( 3 )					  
							      86 LOAD_FAST 2 ( sum )					    82 BINARY_SUBSCR						  
							      88 LOAD_FAST 0 ( arr )					    84 LOAD_CONST 13 ( 1 )					  
							      90 LOAD_FAST 4 ( i )					    86 BINARY_SUBSCR						  
							      92 BINARY_SUBSCR						    88 LOAD_FAST 8 ( arr )					  
							      94 BINARY_SUBTRACT					    90 LOAD_CONST 14 ( 2 )					  
							      96 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      98 INPLACE_ADD						    94 LOAD_CONST 15 ( 1 )					  
							      100 STORE_FAST 5 ( twice_count )				    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 8 ( arr )					  
							      9 102 LOAD_FAST 2 ( sum )					    100 LOAD_CONST 16 ( 3 )					  
							      104 LOAD_FAST 0 ( arr )					    102 BINARY_SUBSCR						  
							      106 LOAD_FAST 4 ( i )					    104 BINARY_ADD						  
							      108 BINARY_SUBSCR						    106 LOAD_FAST 7 ( n )					  
							      110 BINARY_SUBTRACT					    108 LOAD_CONST 16 ( 3 )					  
							      112 LOAD_FAST 0 ( arr )					    110 BINARY_SUBSCR						  
							      114 LOAD_FAST 4 ( i )					    112 LOAD_FAST 8 ( arr )					  
							      116 BINARY_SUBSCR						    114 LOAD_CONST 17 ( 4 )					  
							      118 COMPARE_OP 2 ( == )					    116 BINARY_SUBSCR						  
							      120 POP_JUMP_IF_FALSE 78					    118 LOAD_FAST 6 ( n )					  
							      								    120 LOAD_CONST 18 ( 3 )					  
							      10 122 LOAD_FAST 5 ( twice_count )			    122 BINARY_SUBSCR						  
							      124 LOAD_CONST 3 ( 1 )					    124 BUILD_TUPLE 3						  
							      126 INPLACE_SUBTRACT					    126 BINARY_SUBSCR						  
							      128 STORE_FAST 5 ( twice_count )				    128 LOAD_FAST 7 ( n )					  
							      130 JUMP_ABSOLUTE 78					    130 LOAD_CONST 18 ( 3 )					  
							      >> 132 POP_BLOCK						    132 STORE_SUBSCR						  
							      								    134 LOAD_CONST 19 ( 1 )					  
							      11 >> 134 LOAD_GLOBAL 1 ( int )				    136 RETURN_VALUE						  
							      136 LOAD_FAST 5 ( twice_count )				    NEW_LINE							  
							      138 LOAD_CONST 4 ( 2 )					    								  
							      140 BINARY_TRUE_DIVIDE					    								  
							      142 CALL_FUNCTION 1					    								  
							      144 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS
--							      --							    --								  --
def rearrange ( a , size ) :				      Disassembly of <code object rearrange at 0x7fbac0e89d20, file Disassembly of <code object rearrange at 0x7f816a6e4b70, file error : Traceback (most recent call last):   File
    positive = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    negative = 1					      2 STORE_FAST 2 ( positive )				    2 STORE_FAST 1 ( size )					  (item)   File "main.py", line 52, in <module>	  Fi
    while ( True ) :					      								    								  le "<dis>", line 2, in rearrange TypeError: '>' no
	while ( positive < size and a [ positive ] >= 0 ) :   3 4 LOAD_CONST 2 ( 1 )					    27 4 LOAD_CONST 1 ( 0 )					  t supported between instances of 'list' and 'int'
	    positive = positive + 2			      6 STORE_FAST 3 ( negative )				    6 STORE_FAST 2 ( a )					  
	while ( negative < size and a [ negative ] <= 0 ) :   								    								  
	    negative = negative + 2			      4 8 SETUP_LOOP 120 ( to 130 )				    28 8 SETUP_LOOP 30 ( to 40 )				  
	if ( positive < size and negative < size ) :	      								    10 LOAD_FAST 0 ( a )					  
	    temp = a [ positive ]			      5 >> 10 SETUP_LOOP 32 ( to 44 )				    12 LOAD_CONST 2 ( 1 )					  
	    a [ positive ] = a [ negative ]		      >> 12 LOAD_FAST 2 ( positive )				    14 COMPARE_OP 4 ( > )					  
	    a [ negative ] = temp			      14 LOAD_FAST 1 ( size )					    16 POP_JUMP_IF_FALSE 38					  
	else :						      16 COMPARE_OP 0 ( < )					    								  
	    break					      18 POP_JUMP_IF_FALSE 42					    29 18 LOAD_FAST 1 ( size )					  
							      20 LOAD_FAST 0 ( a )					    20 LOAD_FAST 2 ( a )					  
							      22 LOAD_FAST 2 ( positive )				    22 LOAD_CONST 3 ( 2 )					  
							      24 BINARY_SUBSCR						    24 BINARY_MULTIPLY						  
							      26 LOAD_CONST 1 ( 0 )					    26 STORE_FAST 1 ( size )					  
							      28 COMPARE_OP 5 ( >= )					    								  
							      30 POP_JUMP_IF_FALSE 42					    30 28 LOAD_FAST 1 ( size )					  
							      								    30 LOAD_CONST 4 ( - 1 )					  
							      6 32 LOAD_FAST 2 ( positive )				    32 COMPARE_OP 4 ( > )					  
							      34 LOAD_CONST 3 ( 2 )					    34 POP_JUMP_IF_FALSE 38					  
							      36 BINARY_ADD						    								  
							      38 STORE_FAST 2 ( positive )				    31 36 LOAD_FAST 1 ( size )					  
							      40 JUMP_ABSOLUTE 12					    38 LOAD_FAST 2 ( a )					  
							      >> 42 POP_BLOCK						    40 LOAD_CONST 5 ( - 1 )					  
							      								    42 BINARY_MULTIPLY						  
							      7 >> 44 SETUP_LOOP 32 ( to 78 )				    44 LOAD_FAST 2 ( a )					  
							      >> 46 LOAD_FAST 3 ( negative )				    46 LOAD_FAST 1 ( size )					  
							      48 LOAD_FAST 1 ( size )					    48 LOAD_CONST 6 ( - 1 )					  
							      50 COMPARE_OP 0 ( < )					    50 BINARY_MULTIPLY						  
							      52 POP_JUMP_IF_FALSE 76					    52 BINARY_ADD						  
							      54 LOAD_FAST 0 ( a )					    54 LOAD_FAST 2 ( a )					  
							      56 LOAD_FAST 3 ( negative )				    56 LOAD_CONST 7 ( - 1 )					  
							      58 BINARY_SUBSCR						    58 BINARY_MULTIPLY						  
							      60 LOAD_CONST 1 ( 0 )					    60 BINARY_ADD						  
							      62 COMPARE_OP 1 ( <= )					    62 LOAD_FAST 2 ( a )					  
							      64 POP_JUMP_IF_FALSE 76					    64 LOAD_FAST 1 ( size )					  
							      								    66 BINARY_ADD						  
							      8 66 LOAD_FAST 3 ( negative )				    68 LOAD_CONST 8 ( - 1 )					  
							      68 LOAD_CONST 3 ( 2 )					    70 BINARY_ADD						  
							      70 BINARY_ADD						    72 BINARY_ADD						  
							      72 STORE_FAST 3 ( negative )				    74 LOAD_FAST 2 ( a )					  
							      74 JUMP_ABSOLUTE 46					    76 LOAD_CONST 9 ( - 1 )					  
							      >> 76 POP_BLOCK						    78 BINARY_ADD						  
							      								    80 BINARY_ADD						  
							      9 >> 78 LOAD_FAST 2 ( positive )				    82 LOAD_FAST 2 ( a )					  
							      80 LOAD_FAST 1 ( size )					    84 LOAD_CONST 10 ( - 1 )					  
							      82 COMPARE_OP 0 ( < )					    86 BINARY_ADD						  
							      84 POP_JUMP_IF_FALSE 124					    88 BINARY_ADD						  
							      86 LOAD_FAST 3 ( negative )				    90 LOAD_FAST 2 ( a )					  
							      88 LOAD_FAST 1 ( size )					    92 BINARY_ADD						  
							      90 COMPARE_OP 0 ( < )					    94 LOAD_CONST 11 ( - 1 )					  
							      92 POP_JUMP_IF_FALSE 124					    96 BINARY_ADD						  
							      								    98 BINARY_ADD						  
							      10 94 LOAD_FAST 0 ( a )					    100 LOAD_FAST 2 ( a )					  
							      96 LOAD_FAST 2 ( positive )				    102 LOAD_CONST 12 ( - 1 )					  
							      98 BINARY_SUBSCR						    104 BINARY_ADD						  
							      100 STORE_FAST 4 ( temp )					    106 BINARY_ADD						  
							      								    108 LOAD_FAST 2 ( a )					  
							      11 102 LOAD_FAST 0 ( a )					    110 LOAD_CONST 13 ( - 1 )					  
							      104 LOAD_FAST 3 ( negative )				    112 BINARY_ADD						  
							      106 BINARY_SUBSCR						    114 BINARY_ADD						  
							      108 LOAD_FAST 0 ( a )					    116 BUILD_SLICE 2						  
							      110 LOAD_FAST 2 ( positive )				    118 BINARY_SUBSCR						  
							      112 STORE_SUBSCR						    120 BINARY_ADD						  
							      								    122 LOAD_FAST 2 ( a )					  
							      12 114 LOAD_FAST 4 ( temp )				    124 LOAD_CONST 14 ( - 1 )					  
							      116 LOAD_FAST 0 ( a )					    126 BINARY_ADD						  
							      118 LOAD_FAST 3 ( negative )				    128 BINARY_ADD						  
							      120 STORE_SUBSCR						    130 LOAD_FAST 2 ( a )					  
							      122 JUMP_ABSOLUTE 10					    132 BINARY_ADD						  
							      								    134 LOAD_FAST 2 ( a )					  
							      14 >> 124 BREAK_LOOP					    136 BINARY_ADD						  
							      126 JUMP_ABSOLUTE 10					    138 BINARY_ADD						  
							      128 POP_BLOCK						    140 BINARY_ADD						  
							      >> 130 LOAD_CONST 0 ( None )				    142 LOAD_FAST 2 ( a )					  
							      132 RETURN_VALUE NEW_LINE					    144 BINARY_ADD						  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_CONST 8 ( - 1 )					  
							      								    150 BINARY_ADD						  
							      								    152 BINARY_ADD						  
							      								    154 BINARY_ADD						  
							      								    156 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR
--							      --							    --								  --
def alternateSubarray ( arr , n ) :			      Disassembly of <code object alternateSubarray at 0x7fbac0e89d Disassembly of <code object alternateSubarray at 0x7f816a683a script_not_found : None
    count = 1						      2 0 LOAD_CONST 1 ( 1 )					    69 0 LOAD_FAST 1 ( n )					  
    prev = arr [ 0 ]					      2 STORE_FAST 2 ( count )					    2 LOAD_CONST 1 ( 1 )					  
    for i in range ( 1 , n ) :				      								    4 INPLACE_ADD						  
	if ( ( arr [ i ] ^ prev ) == 0 ) :		      3 4 LOAD_FAST 0 ( arr )					    6 STORE_FAST 1 ( n )					  
	    while ( count ) :				      6 LOAD_CONST 2 ( 0 )					    								  
		print ( count , end = " " )		      8 BINARY_SUBSCR						    70 8 LOAD_FAST 0 ( arr )					  
		count -= 1				      10 STORE_FAST 3 ( prev )					    10 LOAD_CONST 2 ( 0 )					  
	count += 1					      								    12 BINARY_SUBSCR						  
	prev = arr [ i ]				      4 12 SETUP_LOOP 80 ( to 94 )				    14 STORE_FAST 2 ( count )					  
    while ( count ) :					      14 LOAD_GLOBAL 0 ( range )				    								  
	print ( count , end = " " )			      16 LOAD_CONST 1 ( 1 )					    71 16 LOAD_FAST 2 ( count )					  
	count -= 1					      18 LOAD_FAST 1 ( n )					    18 LOAD_CONST 3 ( 1 )					  
							      20 CALL_FUNCTION 2					    20 INPLACE_ADD						  
							      22 GET_ITER						    22 STORE_FAST 1 ( n )					  
							      >> 24 FOR_ITER 66 ( to 92 )				    								  
							      26 STORE_FAST 4 ( i )					    72 24 LOAD_FAST 2 ( count )					  
							      								    26 LOAD_CONST 4 ( 2 )					  
							      5 28 LOAD_FAST 0 ( arr )					    28 INPLACE_ADD						  
							      30 LOAD_FAST 4 ( i )					    30 STORE_FAST 1 ( n )					  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_FAST 3 ( prev )					    73 32 LOAD_FAST 2 ( count )					  
							      36 BINARY_XOR						    34 LOAD_CONST 5 ( 1 )					  
							      38 LOAD_CONST 2 ( 0 )					    36 INPLACE_ADD						  
							      40 COMPARE_OP 2 ( == )					    38 STORE_FAST 1 ( n )					  
							      42 POP_JUMP_IF_FALSE 74					    								  
							      								    74 40 LOAD_FAST 2 ( count )					  
							      6 44 SETUP_LOOP 28 ( to 74 )				    42 LOAD_CONST 6 ( 2 )					  
							      >> 46 LOAD_FAST 2 ( count )				    44 INPLACE_ADD						  
							      48 POP_JUMP_IF_FALSE 72					    46 STORE_FAST 1 ( n )					  
							      								    								  
							      7 50 LOAD_GLOBAL 1 ( print )				    75 48 LOAD_FAST 1 ( n )					  
							      52 LOAD_FAST 2 ( count )					    50 LOAD_CONST 7 ( 3 )					  
							      54 LOAD_CONST 3 ( ' ' )					    52 INPLACE_ADD						  
							      56 LOAD_CONST 4 ( ( 'end' , ) )				    54 STORE_FAST 1 ( n )					  
							      58 CALL_FUNCTION_KW 2					    								  
							      60 POP_TOP						    76 56 LOAD_FAST 1 ( n )					  
							      								    58 LOAD_CONST 8 ( 2 )					  
							      8 62 LOAD_FAST 2 ( count )				    60 INPLACE_ADD						  
							      64 LOAD_CONST 1 ( 1 )					    62 STORE_FAST 1 ( n )					  
							      66 INPLACE_SUBTRACT					    								  
							      68 STORE_FAST 2 ( count )					    77 64 LOAD_FAST 1 ( n )					  
							      70 JUMP_ABSOLUTE 46					    66 LOAD_CONST 9 ( 4 )					  
							      >> 72 POP_BLOCK						    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( n )					  
							      9 >> 74 LOAD_FAST 2 ( count )				    								  
							      76 LOAD_CONST 1 ( 1 )					    78 72 LOAD_FAST 1 ( n )					  
							      78 INPLACE_ADD						    74 LOAD_CONST 10 ( 4 )					  
							      80 STORE_FAST 2 ( count )					    76 INPLACE_ADD						  
							      								    78 STORE_FAST 1 ( n )					  
							      10 82 LOAD_FAST 0 ( arr )					    80 LOAD_CONST 11 ( 2 )					  
							      84 LOAD_FAST 4 ( i )					    82 INPLACE_ADD						  
							      86 BINARY_SUBSCR						    84 STORE_FAST 1 ( n )					  
							      88 STORE_FAST 3 ( prev )					    								  
							      90 JUMP_ABSOLUTE 24					    79 86 LOAD_FAST 1 ( n )					  
							      >> 92 POP_BLOCK						    88 LOAD_CONST 12 ( 2 )					  
							      								    90 INPLACE_ADD						  
							      11 >> 94 SETUP_LOOP 28 ( to 124 )				    92 STORE_FAST 1 ( n )					  
							      >> 96 LOAD_FAST 2 ( count )				    								  
							      98 POP_JUMP_IF_FALSE 122					    80 94 LOAD_FAST 1 ( n )					  
							      								    96 LOAD_CONST 13 ( 2 )					  
							      12 100 LOAD_GLOBAL 1 ( print )				    98 INPLACE_ADD						  
							      102 LOAD_FAST 2 ( count )					    100 STORE_FAST 1 ( n )					  
							      104 LOAD_CONST 3 ( ' ' )					    								  
							      106 LOAD_CONST 4 ( ( 'end' , ) )				    81 102 LOAD_FAST 1 ( n )					  
							      108 CALL_FUNCTION_KW 2					    104 LOAD_CONST 14 ( 2 )					  
							      110 POP_TOP						    106 INPLACE_ADD						  
							      								    108 STORE_FAST 1 ( n )					  
							      13 112 LOAD_FAST 2 ( count )				    								  
							      114 LOAD_CONST 1 ( 1 )					    82 110 LOAD_FAST 1 ( n )					  
							      116 INPLACE_SUBTRACT					    112 LOAD_CONST 15 ( 3 )					  
							      118 STORE_FAST 2 ( count )				    114 INPLACE_ADD						  
							      120 JUMP_ABSOLUTE 96					    116 STORE_FAST 1 ( n )					  
							      >> 122 POP_BLOCK						    								  
							      >> 124 LOAD_CONST 0 ( None )				    83 118 LOAD_FAST 1 ( n )					  
							      126 RETURN_VALUE NEW_LINE					    120 LOAD_CONST 16 ( 2 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 1 ( n )					  
							      								    								  
							      								    84 126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 1 ( n )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 1 ( n )					  
							      								    								  
							      								    85 134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_FAST 1 ( n )					  
							      								    138 INPLACE_ADD						  
							      								    140 STORE_FAST 1 ( n )					  
							      								    								  
							      								    86 142 LOAD_FAST 1 ( n )					  
							      								    144 LOAD_FAST 1 ( n )					  
							      								    146 INPLACE_ADD						  
							      								    148 STORE_FAST 1 ( n )					  
							      								    								  
							      								    87 150 LOAD_FAST 1 ( n )					  
							      								    152 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI
--							      --							    --								  --
def printMinIndexChar ( Str , patt ) :			      Disassembly of <code object printMinIndexChar at 0x7fbac0e8bc Disassembly of <code object printMinIndexChar at 0x7f816a6e4b script_not_found : None
    minIndex = 10 ** 9					      2 0 LOAD_CONST 1 ( 1000000000 )				    18 0 LOAD_FAST 1 ( patt )					  
    m = len ( Str )					      2 STORE_FAST 2 ( minIndex )				    2 LOAD_CONST 1 ( 10 )					  
    n = len ( patt )					      								    4 COMPARE_OP 2 ( == )					  
    for i in range ( n ) :				      3 4 LOAD_GLOBAL 0 ( len )					    6 POP_JUMP_IF_FALSE 12					  
	for j in range ( m ) :				      6 LOAD_FAST 0 ( Str )					    								  
	    if ( patt [ i ] == Str [ j ] and j < minIndex ) : 8 CALL_FUNCTION 1						    19 8 LOAD_GLOBAL 0 ( print )				  
		minIndex = j				      10 STORE_FAST 3 ( m )					    10 LOAD_CONST 2 ( 'No character are present in the ' )	  
		break					      								    12 CALL_FUNCTION 1						  
    if ( minIndex != 10 ** 9 ) :			      4 12 LOAD_GLOBAL 0 ( len )				    14 POP_TOP							  
	print ( "Minimum Index Character = " , Str [ minIndex 14 LOAD_FAST 1 ( patt )					    								  
    else :						      16 CALL_FUNCTION 1					    20 16 LOAD_GLOBAL 1 ( print )				  
	print ( "No character present" )		      18 STORE_FAST 4 ( n )					    18 LOAD_CONST 3 ( 'Minimum character are present in ' )	  
							      								    20 CALL_FUNCTION 1						  
							      5 20 SETUP_LOOP 64 ( to 86 )				    22 POP_TOP							  
							      22 LOAD_GLOBAL 1 ( range )				    								  
							      24 LOAD_FAST 4 ( n )					    21 24 LOAD_GLOBAL 2 ( print )				  
							      26 CALL_FUNCTION 1					    26 LOAD_CONST 4 ( 'No character are present in ' )		  
							      28 GET_ITER						    28 CALL_FUNCTION 1						  
							      >> 30 FOR_ITER 52 ( to 84 )				    30 POP_TOP							  
							      32 STORE_FAST 5 ( i )					    								  
							      								    22 32 LOAD_GLOBAL 3 ( print )				  
							      6 34 SETUP_LOOP 46 ( to 82 )				    34 LOAD_CONST 5 ( 'No character are present in ' )		  
							      36 LOAD_GLOBAL 1 ( range )				    36 CALL_FUNCTION 1						  
							      38 LOAD_FAST 3 ( m )					    38 POP_TOP							  
							      40 CALL_FUNCTION 1					    								  
							      42 GET_ITER						    23 40 LOAD_GLOBAL 4 ( print )				  
							      >> 44 FOR_ITER 34 ( to 80 )				    42 LOAD_CONST 6 ( 'No character are present in ' )		  
							      46 STORE_FAST 6 ( j )					    44 CALL_FUNCTION 1						  
							      								    46 POP_TOP							  
							      7 48 LOAD_FAST 1 ( patt )					    48 LOAD_CONST 0 ( None )					  
							      50 LOAD_FAST 5 ( i )					    50 RETURN_VALUE						  
							      52 BINARY_SUBSCR						    NEW_LINE							  
							      54 LOAD_FAST 0 ( Str )					    								  
							      56 LOAD_FAST 6 ( j )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 COMPARE_OP 2 ( == )					    								  
							      62 POP_JUMP_IF_FALSE 44					    								  
							      64 LOAD_FAST 6 ( j )					    								  
							      66 LOAD_FAST 2 ( minIndex )				    								  
							      68 COMPARE_OP 0 ( < )					    								  
							      70 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      8 72 LOAD_FAST 6 ( j )					    								  
							      74 STORE_FAST 2 ( minIndex )				    								  
							      								    								  
							      9 76 BREAK_LOOP						    								  
							      78 JUMP_ABSOLUTE 44					    								  
							      >> 80 POP_BLOCK						    								  
							      >> 82 JUMP_ABSOLUTE 30					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 LOAD_FAST 2 ( minIndex )				    								  
							      88 LOAD_CONST 1 ( 1000000000 )				    								  
							      90 COMPARE_OP 3 ( != )					    								  
							      92 POP_JUMP_IF_FALSE 110					    								  
							      								    								  
							      11 94 LOAD_GLOBAL 2 ( print )				    								  
							      96 LOAD_CONST 2 ( 'Minimum Index Character = ' )		    								  
							      98 LOAD_FAST 0 ( Str )					    								  
							      100 LOAD_FAST 2 ( minIndex )				    								  
							      102 BINARY_SUBSCR						    								  
							      104 CALL_FUNCTION 2					    								  
							      106 POP_TOP						    								  
							      108 JUMP_FORWARD 8 ( to 118 )				    								  
							      								    								  
							      13 >> 110 LOAD_GLOBAL 2 ( print )				    								  
							      112 LOAD_CONST 3 ( 'No character present' )		    								  
							      114 CALL_FUNCTION 1					    								  
							      116 POP_TOP						    								  
							      >> 118 LOAD_CONST 0 ( None )				    								  
							      120 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		      FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		    FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		  FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES
--							      --							    --								  --
def findSDSFunc ( n ) :					      Disassembly of <code object findSDSFunc at 0x7fbac0e8bc90, fi Disassembly of <code object findSDSFunc at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    DP = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    66 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    DP [ 0 ] = 0					      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'n' , ) )				  item in run_dis_script():   File "XLM/dis_script.p
    DP [ 1 ] = 1					      4 LOAD_FAST 0 ( n )					    4 IMPORT_NAME 0 ( DP )					  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( 2 , n + 1 ) :			      6 LOAD_CONST 2 ( 1 )					    6 IMPORT_FROM 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	if ( int ( i % 2 ) == 0 ) :			      8 BINARY_ADD						    8 STORE_FAST 1 ( n )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    DP [ i ] = DP [ int ( i / 2 ) ]		      10 BINARY_MULTIPLY					    10 POP_TOP							  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	else :						      12 STORE_FAST 1 ( DP )					    								  n parse     code.append(arg) ValueError: byte must
	    DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [  								    67 12 LOAD_FAST 1 ( n )					   be in range(0, 256)
    return DP [ n ]					      3 14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 3 ( 0 )					  
							      16 LOAD_FAST 1 ( DP )					    16 COMPARE_OP 2 ( == )					  
							      18 LOAD_CONST 1 ( 0 )					    18 POP_JUMP_IF_FALSE 32					  
							      20 STORE_SUBSCR						    								  
							      								    68 20 LOAD_FAST 1 ( n )					  
							      4 22 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 4 ( 2 )					  
							      24 LOAD_FAST 1 ( DP )					    24 COMPARE_OP 2 ( == )					  
							      26 LOAD_CONST 2 ( 1 )					    26 POP_JUMP_IF_FALSE 32					  
							      28 STORE_SUBSCR						    								  
							      								    69 28 LOAD_FAST 1 ( n )					  
							      5 30 SETUP_LOOP 104 ( to 136 )				    30 LOAD_CONST 5 ( 0 )					  
							      32 LOAD_GLOBAL 0 ( range )				    32 COMPARE_OP 2 ( == )					  
							      34 LOAD_CONST 3 ( 2 )					    34 POP_JUMP_IF_FALSE 32					  
							      36 LOAD_FAST 0 ( n )					    								  
							      38 LOAD_CONST 2 ( 1 )					    70 36 LOAD_FAST 1 ( n )					  
							      40 BINARY_ADD						    38 LOAD_CONST 6 ( 1 )					  
							      42 CALL_FUNCTION 2					    40 COMPARE_OP 2 ( == )					  
							      44 GET_ITER						    42 POP_JUMP_IF_FALSE 48					  
							      >> 46 FOR_ITER 86 ( to 134 )				    								  
							      48 STORE_FAST 2 ( i )					    71 44 LOAD_FAST 1 ( n )					  
							      								    46 LOAD_CONST 7 ( 1 )					  
							      6 50 LOAD_GLOBAL 1 ( int )				    48 INPLACE_ADD						  
							      52 LOAD_FAST 2 ( i )					    50 STORE_FAST 1 ( n )					  
							      54 LOAD_CONST 3 ( 2 )					    52 JUMP_FORWARD 2 ( to 48 )					  
							      56 BINARY_MODULO						    								  
							      58 CALL_FUNCTION 1					    72 >> 54 LOAD_FAST 1 ( n )					  
							      60 LOAD_CONST 1 ( 0 )					    56 LOAD_CONST 8 ( 2 )					  
							      62 COMPARE_OP 2 ( == )					    58 COMPARE_OP 2 ( == )					  
							      64 POP_JUMP_IF_FALSE 88					    60 POP_JUMP_IF_FALSE 66					  
							      								    								  
							      7 66 LOAD_FAST 1 ( DP )					    73 62 LOAD_FAST 1 ( n )					  
							      68 LOAD_GLOBAL 1 ( int )					    64 LOAD_CONST 9 ( 2 )					  
							      70 LOAD_FAST 2 ( i )					    66 COMPARE_OP 2 ( == )					  
							      72 LOAD_CONST 3 ( 2 )					    68 POP_JUMP_IF_FALSE 80					  
							      74 BINARY_TRUE_DIVIDE					    								  
							      76 CALL_FUNCTION 1					    74 70 LOAD_FAST 1 ( n )					  
							      78 BINARY_SUBSCR						    72 LOAD_CONST 10 ( 2 )					  
							      80 LOAD_FAST 1 ( DP )					    74 COMPARE_OP 2 ( == )					  
							      82 LOAD_FAST 2 ( i )					    76 POP_JUMP_IF_FALSE 80					  
							      84 STORE_SUBSCR						    								  
							      86 JUMP_ABSOLUTE 46					    75 78 LOAD_FAST 1 ( n )					  
							      								    80 LOAD_CONST 11 ( 2 )					  
							      9 >> 88 LOAD_FAST 1 ( DP )				    82 COMPARE_OP 2 ( == )					  
							      90 LOAD_GLOBAL 1 ( int )					    84 POP_JUMP_IF_FALSE 94					  
							      92 LOAD_FAST 2 ( i )					    								  
							      94 LOAD_CONST 2 ( 1 )					    76 86 LOAD_FAST 1 ( n )					  
							      96 BINARY_SUBTRACT					    88 LOAD_CONST 12 ( 2 )					  
							      98 LOAD_CONST 3 ( 2 )					    90 COMPARE_OP 2 ( == )					  
							      100 BINARY_TRUE_DIVIDE					    92 POP_JUMP_IF_FALSE 94					  
							      102 CALL_FUNCTION 1					    								  
							      104 BINARY_SUBSCR						    77 94 LOAD_FAST 1 ( n )					  
							      106 LOAD_FAST 1 ( DP )					    96 LOAD_CONST 12 ( 2 )					  
							      108 LOAD_GLOBAL 1 ( int )					    98 COMPARE_OP 2 ( == )					  
							      110 LOAD_FAST 2 ( i )					    100 POP_JUMP_IF_FALSE 106					  
							      112 LOAD_CONST 2 ( 1 )					    								  
							      114 BINARY_ADD						    78 102 LOAD_FAST 1 ( n )					  
							      116 LOAD_CONST 3 ( 2 )					    104 LOAD_CONST 13 ( 0 )					  
							      118 BINARY_TRUE_DIVIDE					    106 COMPARE_OP 2 ( == )					  
							      120 CALL_FUNCTION 1					    108 POP_JUMP_IF_FALSE 106					  
							      122 BINARY_SUBSCR						    								  
							      124 BINARY_ADD						    79 110 LOAD_FAST 1 ( n )					  
							      126 LOAD_FAST 1 ( DP )					    112 LOAD_CONST 6 ( 1 )					  
							      128 LOAD_FAST 2 ( i )					    114 INPLACE_ADD						  
							      130 STORE_SUBSCR						    116 STORE_FAST 1 ( n )					  
							      132 JUMP_ABSOLUTE 46					    								  
							      >> 134 POP_BLOCK						    80 >> 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_CONST 6 ( 1 )					  
							      10 >> 136 LOAD_FAST 1 ( DP )				    122 INPLACE_ADD						  
							      138 LOAD_FAST 0 ( n )					    124 STORE_FAST 1 ( n )					  
							      140 BINARY_SUBSCR						    126 JUMP_FORWARD 2 ( to 108 )				  
							      142 RETURN_VALUE NEW_LINE					    								  
							      								    81 >> 128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_CONST 6 ( 1 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 136					  
							      								    								  
							      								    82 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_CONST 7 ( 1 )					  
							      								    140 INPLACE_ADD						  
							      								    142 STORE_FAST 1 ( n )					  
							      								    								  
							      								    83 >> 144 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX	      EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX		    EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX		  EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX
--							      --							    --								  --
def printDiagonalSums ( mat , n ) :			      Disassembly of <code object printDiagonalSums at 0x7fbac<<unk Disassembly of <code object printDiagonalSums at 0x7f816a673a error : Traceback (most recent call last):   File
    principal = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( mat )					  "XLM/dis_script.py", line 60, in <module>	exec
    secondary = 0 ;					      2 STORE_FAST 2 ( principal )				    2 LOAD_METHOD 0 ( secondary )				  (item)   File "main.py", line 49, in <module>	  Fi
    for i in range ( 0 , n ) :				      								    4 CALL_METHOD 0						  le "<dis>", line 2, in printDiagonalSums Attribute
	for j in range ( 0 , n ) :			      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					  Error: 'list' object has no attribute 'secondary'
	    if ( i == j ) :				      6 STORE_FAST 3 ( secondary )				    								  
		principal += mat [ i ] [ j ]		      								    27 8 LOAD_FAST 1 ( n )					  
	    if ( ( i + j ) == ( n - 1 ) ) :		      4 8 SETUP_LOOP 94 ( to 104 )				    10 LOAD_CONST 1 ( 0 )					  
		secondary += mat [ i ] [ j ]		      10 LOAD_GLOBAL 0 ( range )				    12 BINARY_SUBSCR						  
    print ( "Principal Diagonal:" , principal )		      12 LOAD_CONST 1 ( 0 )					    14 LOAD_FAST 1 ( n )					  
    print ( "Secondary Diagonal:" , secondary )		      14 LOAD_FAST 1 ( n )					    16 LOAD_CONST 2 ( 1 )					  
							      16 CALL_FUNCTION 2					    18 BINARY_SUBSCR						  
							      18 GET_ITER						    20 COMPARE_OP 2 ( == )					  
							      >> 20 FOR_ITER 80 ( to 102 )				    22 POP_JUMP_IF_FALSE 32					  
							      22 STORE_FAST 4 ( i )					    								  
							      								    28 24 LOAD_FAST 1 ( n )					  
							      5 24 SETUP_LOOP 74 ( to 100 )				    26 LOAD_CONST 3 ( 1 )					  
							      26 LOAD_GLOBAL 0 ( range )				    28 BINARY_SUBSCR						  
							      28 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 4 ( 'Principal Diagonal : ' )			  
							      30 LOAD_FAST 1 ( n )					    32 BINARY_ADD						  
							      32 CALL_FUNCTION 2					    34 STORE_FAST 1 ( n )					  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 60 ( to 98 )				    29 36 LOAD_FAST 1 ( n )					  
							      38 STORE_FAST 5 ( j )					    38 LOAD_CONST 5 ( 1 )					  
							      								    40 BINARY_SUBSCR						  
							      6 40 LOAD_FAST 4 ( i )					    42 LOAD_CONST 6 ( 'Principal : ' )				  
							      42 LOAD_FAST 5 ( j )					    44 BINARY_ADD						  
							      44 COMPARE_OP 2 ( == )					    46 STORE_FAST 1 ( n )					  
							      46 POP_JUMP_IF_FALSE 64					    								  
							      								    30 48 LOAD_FAST 1 ( n )					  
							      7 48 LOAD_FAST 2 ( principal )				    50 LOAD_CONST 7 ( 'Principal : ' )				  
							      50 LOAD_FAST 0 ( mat )					    52 BINARY_ADD						  
							      52 LOAD_FAST 4 ( i )					    54 STORE_FAST 1 ( n )					  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_FAST 5 ( j )					    31 56 LOAD_FAST 1 ( n )					  
							      58 BINARY_SUBSCR						    58 LOAD_CONST 8 ( 'Principal : ' )				  
							      60 INPLACE_ADD						    60 BINARY_ADD						  
							      62 STORE_FAST 2 ( principal )				    62 STORE_FAST 2 ( c )					  
							      								    								  
							      8 >> 64 LOAD_FAST 4 ( i )					    32 64 LOAD_FAST 1 ( n )					  
							      66 LOAD_FAST 5 ( j )					    66 LOAD_CONST 9 ( 'Principal : ' )				  
							      68 BINARY_ADD						    68 BINARY_ADD						  
							      70 LOAD_FAST 1 ( n )					    70 STORE_FAST 1 ( n )					  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 BINARY_SUBTRACT					    33 72 LOAD_FAST 1 ( n )					  
							      76 COMPARE_OP 2 ( == )					    74 LOAD_CONST 10 ( 'Principal : ' )				  
							      78 POP_JUMP_IF_FALSE 36					    76 BINARY_ADD						  
							      								    78 LOAD_FAST 1 ( n )					  
							      9 80 LOAD_FAST 3 ( secondary )				    80 BINARY_ADD						  
							      82 LOAD_FAST 0 ( mat )					    82 LOAD_CONST 11 ( '' )					  
							      84 LOAD_FAST 4 ( i )					    84 BINARY_ADD						  
							      86 BINARY_SUBSCR						    86 STORE_FAST 1 ( n )					  
							      88 LOAD_FAST 5 ( j )					    								  
							      90 BINARY_SUBSCR						    34 88 LOAD_FAST 1 ( n )					  
							      92 INPLACE_ADD						    90 LOAD_CONST 12 ( 'Principal : ' )				  
							      94 STORE_FAST 3 ( secondary )				    92 BINARY_ADD						  
							      96 JUMP_ABSOLUTE 36					    94 STORE_FAST 2 ( c )					  
							      >> 98 POP_BLOCK						    								  
							      >> 100 JUMP_ABSOLUTE 20					    35 96 LOAD_FAST 1 ( n )					  
							      >> 102 POP_BLOCK						    98 LOAD_CONST 13 ( 'Principal : ' )				  
							      								    100 BINARY_ADD						  
							      10 >> 104 LOAD_GLOBAL 1 ( print )				    102 STORE_FAST 3 ( c )					  
							      106 LOAD_CONST 3 ( 'Principal Diagonal:' )		    								  
							      108 LOAD_FAST 2 ( principal )				    36 104 LOAD_FAST 1 ( n )					  
							      110 CALL_FUNCTION 2					    106 LOAD_CONST 14 ( 'Principal' )				  
							      112 POP_TOP						    108 BINARY_ADD						  
							      								    110 LOAD_FAST 1 ( n )					  
							      11 114 LOAD_GLOBAL 1 ( print )				    112 LOAD_CONST 15 ( 'Principal' )				  
							      116 LOAD_CONST 4 ( 'Secondary Diagonal:' )		    114 BINARY_ADD						  
							      118 LOAD_FAST 3 ( secondary )				    116 LOAD_FAST 1 ( n )					  
							      120 CALL_FUNCTION 2					    118 BINARY_ADD						  
							      122 POP_TOP						    120 LOAD_CONST 16 ( '' )					  
							      124 LOAD_CONST 0 ( None )					    122 BINARY_ADD						  
							      126 RETURN_VALUE NEW_LINE					    124 BINARY_ADD						  
							      								    126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_CONST 17 ( 1 )					  
							      								    130 BINARY_ADD						  
							      								    132 BINARY_ADD						  
							      								    134 LOAD_FAST 1 ( n )					  
							      								    136 BINARY_ADD						  
							      								    138 BINARY_ADD						  
							      								    140 BINARY_ADD						  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMAINDER_7_LARGE_NUMBERS				      REMAINDER_7_LARGE_NUMBERS					    REMAINDER_7_LARGE_NUMBERS					  REMAINDER_7_LARGE_NUMBERS
--							      --							    --								  --
def remainderWith7 ( num ) :				      Disassembly of <code object remainderWith7 at 0x7fbac0e8bc90, Disassembly of <code object remainderWith7 at 0x7f816a6e4b70, error : Traceback (most recent call last):   File
    series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ] ;		      2 0 LOAD_CONST 1 ( 1 )					    8 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 59, in <module>	for
    series_index = 0 ;					      2 LOAD_CONST 2 ( 3 )					    2 LOAD_CONST 2 ( 2 )					  item in run_dis_script():   File "XLM/dis_script.p
    result = 0 ;					      4 LOAD_CONST 3 ( 2 )					    4 LOAD_CONST 3 ( 3 )					  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( ( len ( num ) - 1 ) , - 1 , - 1 ) :      6 LOAD_CONST 4 ( - 1 )					    6 LOAD_CONST 4 ( 4 )					  cals, co_varnames, co_names, co_consts, co_linesta
	digit = ord ( num [ i ] ) - 48 ;		      8 LOAD_CONST 5 ( - 3 )					    8 LOAD_CONST 5 ( 6 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
	result += digit * series [ series_index ] ;	      10 LOAD_CONST 6 ( - 2 )					    10 LOAD_CONST 6 ( 7 )					  pack non-iterable NoneType object
	series_index = ( series_index + 1 ) % 6 ;	      12 BUILD_LIST 6						    12 LOAD_CONST 7 ( 8 )					  
	result %= 7 ;					      14 STORE_FAST 1 ( series )				    14 LOAD_CONST 8 ( 10 )					  
    if ( result < 0 ) :					      								    16 LOAD_CONST 9 ( 4 )					  
	result = ( result + 7 ) % 7 ;			      3 16 LOAD_CONST 7 ( 0 )					    18 LOAD_CONST 10 ( 9 )					  
    return result ;					      18 STORE_FAST 2 ( series_index )				    20 LOAD_CONST 7 ( 8 )					  
							      								    22 LOAD_CONST 10 ( 9 )					  
							      4 20 LOAD_CONST 7 ( 0 )					    24 LOAD_CONST 11 ( 10 )					  
							      22 STORE_FAST 3 ( result )				    26 LOAD_CONST 12 ( 11 )					  
							      								    28 LOAD_CONST 12 ( 12 )					  
							      5 24 SETUP_LOOP 80 ( to 106 )				    30 LOAD_CONST 13 ( 12 )					  
							      26 LOAD_GLOBAL 0 ( range )				    32 LOAD_CONST 14 ( 13 )					  
							      28 LOAD_GLOBAL 1 ( len )					    34 LOAD_CONST 15 ( 14 )					  
							      30 LOAD_FAST 0 ( num )					    36 LOAD_CONST 16 ( 9 )					  
							      32 CALL_FUNCTION 1					    38 LOAD_CONST 17 ( 10 )					  
							      34 LOAD_CONST 1 ( 1 )					    40 LOAD_CONST 18 ( 11 )					  
							      36 BINARY_SUBTRACT					    42 LOAD_CONST 18 ( 12 )					  
							      38 LOAD_CONST 4 ( - 1 )					    44 LOAD_CONST 19 ( 13 )					  
							      40 LOAD_CONST 4 ( - 1 )					    46 LOAD_CONST 20 ( 14 )					  
							      42 CALL_FUNCTION 3					    48 LOAD_CONST 21 ( 16 )					  
							      44 GET_ITER						    50 LOAD_CONST 22 ( 15 )					  
							      >> 46 FOR_ITER 56 ( to 104 )				    52 LOAD_CONST 22 ( 14 )					  
							      48 STORE_FAST 4 ( i )					    54 LOAD_CONST 23 ( 16 )					  
							      								    56 LOAD_CONST 22 ( 15 )					  
							      6 50 LOAD_GLOBAL 2 ( ord )				    58 LOAD_CONST 24 ( 14 )					  
							      52 LOAD_FAST 0 ( num )					    60 LOAD_CONST 23 ( 16 )					  
							      54 LOAD_FAST 4 ( i )					    62 LOAD_CONST 22 ( 15 )					  
							      56 BINARY_SUBSCR						    64 LOAD_CONST 24 ( 14 )					  
							      58 CALL_FUNCTION 1					    66 LOAD_CONST 23 ( 16 )					  
							      60 LOAD_CONST 8 ( 48 )					    68 LOAD_CONST 24 ( 17 )					  
							      62 BINARY_SUBTRACT					    70 LOAD_CONST 26 ( 15 )					  
							      64 STORE_FAST 5 ( digit )					    72 LOAD_CONST 25 ( 16 )					  
							      								    74 LOAD_CONST 26 ( 17 )					  
							      7 66 LOAD_FAST 3 ( result )				    76 LOAD_CONST 28 ( 17 )					  
							      68 LOAD_FAST 5 ( digit )					    78 LOAD_CONST 30 ( 16 )					  
							      70 LOAD_FAST 1 ( series )					    80 LOAD_CONST 29 ( 16 )					  
							      72 LOAD_FAST 2 ( series_index )				    82 LOAD_CONST 30 ( 17 )					  
							      74 BINARY_SUBSCR						    84 LOAD_CONST 28 ( 18 )					  
							      76 BINARY_MULTIPLY					    86 LOAD_CONST 30 ( 19 )					  
							      78 INPLACE_ADD						    88 LOAD_CONST 29 ( 20 )					  
							      80 STORE_FAST 3 ( result )				    90 LOAD_CONST 30 ( 19 )					  
							      								    92 LOAD_CONST 30 ( 20 )					  
							      8 82 LOAD_FAST 2 ( series_index )				    94 LOAD_CONST 31 31 31 )					  
							      84 LOAD_CONST 1 ( 1 )					    96 LOAD_CONST 30 ( 19 )					  
							      86 BINARY_ADD						    98 LOAD_CONST 31 ( 20 )					  
							      88 LOAD_CONST 9 ( 6 )					    100 LOAD_CONST 32 ( 19 )					  
							      90 BINARY_MODULO						    102 LOAD_CONST 34 ( 20 )					  
							      92 STORE_FAST 2 ( series_index )				    104 LOAD_CONST 36 ( 19 )					  
							      								    106 LOAD_CONST 36 ( 20 )					  
							      9 94 LOAD_FAST 3 ( result )				    108 LOAD_CONST 37 ( 20 )					  
							      96 LOAD_CONST 10 ( 7 )					    110 LOAD_CONST 36 ( 21 )					  
							      98 INPLACE_MODULO						    112 LOAD_CONST 37 ( 20 )					  
							      100 STORE_FAST 3 ( result )				    114 LOAD_CONST 36 ( 21 )					  
							      102 JUMP_ABSOLUTE 46					    116 LOAD_CONST 36 ( 20 )					  
							      >> 104 POP_BLOCK						    118 LOAD_CONST 37 ( 21 )					  
							      								    120 LOAD_CONST 36 ( 20 )					  
							      10 >> 106 LOAD_FAST 3 ( result )				    122 LOAD_CONST 37 ( 22 )					  
							      108 LOAD_CONST 7 ( 0 )					    124 LOAD_CONST 36 ( 20 )					  
							      110 COMPARE_OP 0 ( < )					    126 LOAD_CONST 37 ( 20 )					  
							      112 POP_JUMP_IF_FALSE 126					    128 LOAD_CONST 36 ( 21 )					  
							      								    130 LOAD_CONST 37 ( 20 )					  
							      11 114 LOAD_FAST 3 ( result )				    132 LOAD_CONST 38 ( 21 )					  
							      116 LOAD_CONST 10 ( 7 )					    134 LOAD_CONST 38 ( 20 )					  
							      118 BINARY_ADD						    136 LOAD_CONST 37 ( 21 )					  
							      120 LOAD_CONST 10 ( 7 )					    138 LOAD_CONST 38 ( 20 )					  
							      122 BINARY_MODULO						    140 LOAD_CONST 1 ( 1 )					  
							      124 STORE_FAST 3 ( result )				    								  
							      								    								  
							      12 >> 126 LOAD_FAST 3 ( result )				    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX			      FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX			    FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX				  FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX
--							      --							    --								  --
def permutatedRows ( mat , m , n , r ) :		      Disassembly of <code object permutatedRows at 0x7fbac0e8bc90, Disassembly of <code object permutatedRows at 0x7f816a673a50, error : Traceback (most recent call last):   File
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    20 0 LOAD_GLOBAL 0 ( set )					  "XLM/dis_script.py", line 59, in <module>	for
    for j in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  item in run_dis_script():   File "XLM/dis_script.p
	s.add ( mat [ r ] [ j ] )			      4 STORE_FAST 4 ( s )					    4 STORE_FAST 1 ( m )					  y", line 54, in run_dis_script     hyp_co = mco.to
    for i in range ( m ) :				      								    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	if i == r :					      3 6 SETUP_LOOP 34 ( to 42 )				    21 6 LOAD_FAST 1 ( m )					  assembler.py", line 81, in to_co     co_consts.app
	    continue					      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_METHOD 1 ( add )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	for j in range ( n ) :				      10 LOAD_FAST 2 ( n )					    10 LOAD_FAST 0 ( mat )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    if mat [ i ] [ j ] not in s :		      12 CALL_FUNCTION 1					    12 CALL_METHOD 1						  co	 self.co_cellvars, ValueError: code: varname
		j = j - 2				      14 GET_ITER						    14 POP_TOP							  s is too small
		break ;					      >> 16 FOR_ITER 22 ( to 40 )				    								  
	if j + 1 != n :					      18 STORE_FAST 5 ( j )					    22 16 SETUP_LOOP 30 ( to 46 )				  
	    continue					      								    18 LOAD_FAST 1 ( m )					  
	print ( i )					      4 20 LOAD_FAST 4 ( s )					    20 GET_ITER							  
							      22 LOAD_METHOD 2 ( add )					    >> 22 FOR_ITER 20 ( to 44 )					  
							      24 LOAD_FAST 0 ( mat )					    24 STORE_FAST 2 ( i )					  
							      26 LOAD_FAST 3 ( r )					    								  
							      28 BINARY_SUBSCR						    23 26 LOAD_FAST 0 ( mat )					  
							      30 LOAD_FAST 5 ( j )					    28 LOAD_METHOD 2 ( append )					  
							      32 BINARY_SUBSCR						    30 LOAD_FAST 2 ( i )					  
							      34 CALL_METHOD 1						    32 CALL_METHOD 1						  
							      36 POP_TOP						    34 POP_TOP							  
							      38 JUMP_ABSOLUTE 16					    36 JUMP_ABSOLUTE 22						  
							      >> 40 POP_BLOCK						    >> 38 POP_BLOCK						  
							      								    >> 40 LOAD_CONST 0 ( None )					  
							      5 >> 42 SETUP_LOOP 92 ( to 136 )				    42 RETURN_VALUE						  
							      44 LOAD_GLOBAL 1 ( range )				    NEW_LINE							  
							      46 LOAD_FAST 1 ( m )					    								  
							      48 CALL_FUNCTION 1					    								  
							      50 GET_ITER						    								  
							      >> 52 FOR_ITER 80 ( to 134 )				    								  
							      54 STORE_FAST 6 ( i )					    								  
							      								    								  
							      6 56 LOAD_FAST 6 ( i )					    								  
							      58 LOAD_FAST 3 ( r )					    								  
							      60 COMPARE_OP 2 ( == )					    								  
							      62 POP_JUMP_IF_FALSE 66					    								  
							      								    								  
							      7 64 JUMP_ABSOLUTE 52					    								  
							      								    								  
							      8 >> 66 SETUP_LOOP 42 ( to 110 )				    								  
							      68 LOAD_GLOBAL 1 ( range )				    								  
							      70 LOAD_FAST 2 ( n )					    								  
							      72 CALL_FUNCTION 1					    								  
							      74 GET_ITER						    								  
							      >> 76 FOR_ITER 30 ( to 108 )				    								  
							      78 STORE_FAST 5 ( j )					    								  
							      								    								  
							      9 80 LOAD_FAST 0 ( mat )					    								  
							      82 LOAD_FAST 6 ( i )					    								  
							      84 BINARY_SUBSCR						    								  
							      86 LOAD_FAST 5 ( j )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 LOAD_FAST 4 ( s )					    								  
							      92 COMPARE_OP 7 ( not in )				    								  
							      94 POP_JUMP_IF_FALSE 76					    								  
							      								    								  
							      10 96 LOAD_FAST 5 ( j )					    								  
							      98 LOAD_CONST 1 ( 2 )					    								  
							      100 BINARY_SUBTRACT					    								  
							      102 STORE_FAST 5 ( j )					    								  
							      								    								  
							      11 104 BREAK_LOOP						    								  
							      106 JUMP_ABSOLUTE 76					    								  
							      >> 108 POP_BLOCK						    								  
							      								    								  
							      12 >> 110 LOAD_FAST 5 ( j )				    								  
							      112 LOAD_CONST 2 ( 1 )					    								  
							      114 BINARY_ADD						    								  
							      116 LOAD_FAST 2 ( n )					    								  
							      118 COMPARE_OP 3 ( != )					    								  
							      120 POP_JUMP_IF_FALSE 124					    								  
							      								    								  
							      13 122 JUMP_ABSOLUTE 52					    								  
							      								    								  
							      14 >> 124 LOAD_GLOBAL 3 ( print )				    								  
							      126 LOAD_FAST 6 ( i )					    								  
							      128 CALL_FUNCTION 1					    								  
							      130 POP_TOP						    								  
							      132 JUMP_ABSOLUTE 52					    								  
							      >> 134 POP_BLOCK						    								  
							      >> 136 LOAD_CONST 0 ( None )				    								  
							      138 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2_1				      SORT_ARRAY_WAVE_FORM_2_1					    SORT_ARRAY_WAVE_FORM_2_1					  SORT_ARRAY_WAVE_FORM_2_1
--							      --							    --								  --
def sortInWave ( arr , n ) :				      Disassembly of <code object sortInWave at 0x7fbac<<unk>> de40 Disassembly of <code object sortInWave at 0x7f816a673a50, fil error : /bin/bash: line 1: 26587 Segmentation faul
    for i in range ( 0 , n , 2 ) :			      2 0 SETUP_LOOP 148 ( to 150 )				    164 0 SETUP_LOOP 22 ( to 24 )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :	      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( arr )					  ataset/bin/python XLM/dis_script.py --script_path
	    arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ 4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :      6 LOAD_FAST 1 ( n )					    >> 6 FOR_ITER 14 ( to 22 )					  eval_scripts/python_sa-dis_sa.test/SORT_ARRAY_WAVE
	    arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ 8 LOAD_CONST 2 ( 2 )					    8 STORE_FAST 1 ( n )					  _FORM_2_1.dis
							      10 CALL_FUNCTION 3					    								  
							      12 GET_ITER						    165 10 LOAD_FAST 1 ( n )					  
							      >> 14 FOR_ITER 132 ( to 148 )				    12 LOAD_CONST 1 ( 0 )					  
							      16 STORE_FAST 2 ( i )					    14 COMPARE_OP 4 ( > )					  
							      								    16 POP_JUMP_IF_FALSE 6					  
							      3 18 LOAD_FAST 2 ( i )					    								  
							      20 LOAD_CONST 1 ( 0 )					    166 18 LOAD_FAST 1 ( n )					  
							      22 COMPARE_OP 4 ( > )					    20 LOAD_CONST 2 ( 1 )					  
							      24 POP_JUMP_IF_FALSE 80					    22 INPLACE_ADD						  
							      26 LOAD_FAST 0 ( arr )					    24 STORE_FAST 1 ( n )					  
							      28 LOAD_FAST 2 ( i )					    								  
							      30 BINARY_SUBSCR						    167 26 LOAD_FAST 1 ( n )					  
							      32 LOAD_FAST 0 ( arr )					    28 LOAD_CONST 3 ( 1 )					  
							      34 LOAD_FAST 2 ( i )					    30 INPLACE_ADD						  
							      36 LOAD_CONST 3 ( 1 )					    32 STORE_FAST 1 ( n )					  
							      38 BINARY_SUBTRACT					    34 JUMP_ABSOLUTE 6						  
							      40 BINARY_SUBSCR						    >> 36 POP_BLOCK						  
							      42 COMPARE_OP 0 ( < )					    								  
							      44 POP_JUMP_IF_FALSE 80					    168 >> 38 LOAD_FAST 1 ( n )					  
							      								    40 RETURN_VALUE						  
							      4 46 LOAD_FAST 0 ( arr )					    NEW_LINE							  
							      48 LOAD_FAST 2 ( i )					    								  
							      50 LOAD_CONST 3 ( 1 )					    								  
							      52 BINARY_SUBTRACT					    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 2 ( i )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 ROT_TWO						    								  
							      64 LOAD_FAST 0 ( arr )					    								  
							      66 LOAD_FAST 2 ( i )					    								  
							      68 STORE_SUBSCR						    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 2 ( i )					    								  
							      74 LOAD_CONST 3 ( 1 )					    								  
							      76 BINARY_SUBTRACT					    								  
							      78 STORE_SUBSCR						    								  
							      								    								  
							      5 >> 80 LOAD_FAST 2 ( i )					    								  
							      82 LOAD_FAST 1 ( n )					    								  
							      84 LOAD_CONST 3 ( 1 )					    								  
							      86 BINARY_SUBTRACT					    								  
							      88 COMPARE_OP 0 ( < )					    								  
							      90 POP_JUMP_IF_FALSE 14					    								  
							      92 LOAD_FAST 0 ( arr )					    								  
							      94 LOAD_FAST 2 ( i )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 LOAD_FAST 0 ( arr )					    								  
							      100 LOAD_FAST 2 ( i )					    								  
							      102 LOAD_CONST 3 ( 1 )					    								  
							      104 BINARY_ADD						    								  
							      106 BINARY_SUBSCR						    								  
							      108 COMPARE_OP 0 ( < )					    								  
							      110 POP_JUMP_IF_FALSE 14					    								  
							      								    								  
							      6 112 LOAD_FAST 0 ( arr )					    								  
							      114 LOAD_FAST 2 ( i )					    								  
							      116 LOAD_CONST 3 ( 1 )					    								  
							      118 BINARY_ADD						    								  
							      120 BINARY_SUBSCR						    								  
							      122 LOAD_FAST 0 ( arr )					    								  
							      124 LOAD_FAST 2 ( i )					    								  
							      126 BINARY_SUBSCR						    								  
							      128 ROT_TWO						    								  
							      130 LOAD_FAST 0 ( arr )					    								  
							      132 LOAD_FAST 2 ( i )					    								  
							      134 STORE_SUBSCR						    								  
							      136 LOAD_FAST 0 ( arr )					    								  
							      138 LOAD_FAST 2 ( i )					    								  
							      140 LOAD_CONST 3 ( 1 )					    								  
							      142 BINARY_ADD						    								  
							      144 STORE_SUBSCR						    								  
							      146 JUMP_ABSOLUTE 14					    								  
							      >> 148 POP_BLOCK						    								  
							      >> 150 LOAD_CONST 0 ( None )				    								  
							      152 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_2				      MAXIMUM_TRIPLET_SUM_ARRAY_2				    MAXIMUM_TRIPLET_SUM_ARRAY_2					  MAXIMUM_TRIPLET_SUM_ARRAY_2
--							      --							    --								  --
def maxTripletSum ( arr , n ) :				      Disassembly of <code object maxTripletSum at 0x7fbac<<unk>> d Disassembly of <code object maxTripletSum at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    maxA = - 100000000					      2 0 LOAD_CONST 1 ( - 100000000 )				    26 0 LOAD_CONST 1 ( - 100000000 )				  "XLM/dis_script.py", line 59, in <module>	for
    maxB = - 100000000					      2 STORE_FAST 2 ( maxA )					    2 STORE_FAST 1 ( n )					  item in run_dis_script():   File "XLM/dis_script.p
    maxC = - 100000000					      								    								  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( 0 , n ) :				      3 4 LOAD_CONST 1 ( - 100000000 )				    27 4 LOAD_CONST 2 ( - 100000000 )				  cals, co_varnames, co_names, co_consts, co_linesta
	if ( arr [ i ] > maxA ) :			      6 STORE_FAST 3 ( maxB )					    6 STORE_FAST 2 ( maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxma rts = dis_asm.parse(bytecode) TypeError: cannot un
	    maxC = maxB					      								    								  pack non-iterable NoneType object
	    maxB = maxA					      4 8 LOAD_CONST 1 ( - 100000000 )				    								  
	    maxA = arr [ i ]				      10 STORE_FAST 4 ( maxC )					    								  
	elif ( arr [ i ] > maxB ) :			      								    								  
	    maxC = maxB					      5 12 SETUP_LOOP 94 ( to 108 )				    								  
	    maxB = arr [ i ]				      14 LOAD_GLOBAL 0 ( range )				    								  
	elif ( arr [ i ] > maxC ) :			      16 LOAD_CONST 2 ( 0 )					    								  
	    maxC = arr [ i ]				      18 LOAD_FAST 1 ( n )					    								  
    return ( maxA + maxB + maxC )			      20 CALL_FUNCTION 2					    								  
							      22 GET_ITER						    								  
							      >> 24 FOR_ITER 80 ( to 106 )				    								  
							      26 STORE_FAST 5 ( i )					    								  
							      								    								  
							      6 28 LOAD_FAST 0 ( arr )					    								  
							      30 LOAD_FAST 5 ( i )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_FAST 2 ( maxA )					    								  
							      36 COMPARE_OP 4 ( > )					    								  
							      38 POP_JUMP_IF_FALSE 58					    								  
							      								    								  
							      7 40 LOAD_FAST 3 ( maxB )					    								  
							      42 STORE_FAST 4 ( maxC )					    								  
							      								    								  
							      8 44 LOAD_FAST 2 ( maxA )					    								  
							      46 STORE_FAST 3 ( maxB )					    								  
							      								    								  
							      9 48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 5 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 STORE_FAST 2 ( maxA )					    								  
							      56 JUMP_ABSOLUTE 24					    								  
							      								    								  
							      10 >> 58 LOAD_FAST 0 ( arr )				    								  
							      60 LOAD_FAST 5 ( i )					    								  
							      62 BINARY_SUBSCR						    								  
							      64 LOAD_FAST 3 ( maxB )					    								  
							      66 COMPARE_OP 4 ( > )					    								  
							      68 POP_JUMP_IF_FALSE 84					    								  
							      								    								  
							      11 70 LOAD_FAST 3 ( maxB )				    								  
							      72 STORE_FAST 4 ( maxC )					    								  
							      								    								  
							      12 74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_FAST 5 ( i )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 STORE_FAST 3 ( maxB )					    								  
							      82 JUMP_ABSOLUTE 24					    								  
							      								    								  
							      13 >> 84 LOAD_FAST 0 ( arr )				    								  
							      86 LOAD_FAST 5 ( i )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 LOAD_FAST 4 ( maxC )					    								  
							      92 COMPARE_OP 4 ( > )					    								  
							      94 POP_JUMP_IF_FALSE 24					    								  
							      								    								  
							      14 96 LOAD_FAST 0 ( arr )					    								  
							      98 LOAD_FAST 5 ( i )					    								  
							      100 BINARY_SUBSCR						    								  
							      102 STORE_FAST 4 ( maxC )					    								  
							      104 JUMP_ABSOLUTE 24					    								  
							      >> 106 POP_BLOCK						    								  
							      								    								  
							      15 >> 108 LOAD_FAST 2 ( maxA )				    								  
							      110 LOAD_FAST 3 ( maxB )					    								  
							      112 BINARY_ADD						    								  
							      114 LOAD_FAST 4 ( maxC )					    								  
							      116 BINARY_ADD						    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ARRANGEMENT_QUEUE_GIVEN_TIME			      FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				    FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				  FIND_ARRANGEMENT_QUEUE_GIVEN_TIME
--							      --							    --								  --
def solve ( n , t , p ) :				      Disassembly of <code object solve at 0x7fbac<<unk>> d540, fil Disassembly of <code object solve at 0x7f8169feb660, file "<d script_not_found : None
    s = list ( p )					      2 0 LOAD_GLOBAL 0 ( list )				    754 0 LOAD_FAST 0 ( self )					  
    for i in range ( 0 , t ) :				      2 LOAD_FAST 2 ( p )					    2 LOAD_METHOD 0 ( append )					  
	for j in range ( 0 , n - 1 ) :			      4 CALL_FUNCTION 1						    4 LOAD_FAST 1 ( t )						  
	    if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :    6 STORE_FAST 3 ( s )					    6 CALL_METHOD 1						  
		temp = s [ j ] ;			      								    8 POP_TOP							  
		s [ j ] = s [ j + 1 ] ;			      3 8 SETUP_LOOP 114 ( to 124 )				    								  
		s [ j + 1 ] = temp ;			      10 LOAD_GLOBAL 1 ( range )				    755 10 LOAD_FAST 0 ( self )					  
		j = j + 1				      12 LOAD_CONST 1 ( 0 )					    12 LOAD_METHOD 1 ( solve )					  
    print ( ''.join ( s ) )				      14 LOAD_FAST 1 ( t )					    14 CALL_METHOD 0						  
							      16 CALL_FUNCTION 2					    16 POP_TOP							  
							      18 GET_ITER						    18 LOAD_CONST 0 ( None )					  
							      >> 20 FOR_ITER 100 ( to 122 )				    20 RETURN_VALUE						  
							      22 STORE_FAST 4 ( i )					    NEW_LINE							  
							      								    								  
							      4 24 SETUP_LOOP 94 ( to 120 )				    								  
							      26 LOAD_GLOBAL 1 ( range )				    								  
							      28 LOAD_CONST 1 ( 0 )					    								  
							      30 LOAD_FAST 0 ( n )					    								  
							      32 LOAD_CONST 2 ( 1 )					    								  
							      34 BINARY_SUBTRACT					    								  
							      36 CALL_FUNCTION 2					    								  
							      38 GET_ITER						    								  
							      >> 40 FOR_ITER 76 ( to 118 )				    								  
							      42 STORE_FAST 5 ( j )					    								  
							      								    								  
							      5 44 LOAD_FAST 3 ( s )					    								  
							      46 LOAD_FAST 5 ( j )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_CONST 3 ( 'B' )					    								  
							      52 COMPARE_OP 2 ( == )					    								  
							      54 POP_JUMP_IF_FALSE 40					    								  
							      56 LOAD_FAST 3 ( s )					    								  
							      58 LOAD_FAST 5 ( j )					    								  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 BINARY_ADD						    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_CONST 4 ( 'G' )					    								  
							      68 COMPARE_OP 2 ( == )					    								  
							      70 POP_JUMP_IF_FALSE 40					    								  
							      								    								  
							      6 72 LOAD_FAST 3 ( s )					    								  
							      74 LOAD_FAST 5 ( j )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 STORE_FAST 6 ( temp )					    								  
							      								    								  
							      7 80 LOAD_FAST 3 ( s )					    								  
							      82 LOAD_FAST 5 ( j )					    								  
							      84 LOAD_CONST 2 ( 1 )					    								  
							      86 BINARY_ADD						    								  
							      88 BINARY_SUBSCR						    								  
							      90 LOAD_FAST 3 ( s )					    								  
							      92 LOAD_FAST 5 ( j )					    								  
							      94 STORE_SUBSCR						    								  
							      								    								  
							      8 96 LOAD_FAST 6 ( temp )					    								  
							      98 LOAD_FAST 3 ( s )					    								  
							      100 LOAD_FAST 5 ( j )					    								  
							      102 LOAD_CONST 2 ( 1 )					    								  
							      104 BINARY_ADD						    								  
							      106 STORE_SUBSCR						    								  
							      								    								  
							      9 108 LOAD_FAST 5 ( j )					    								  
							      110 LOAD_CONST 2 ( 1 )					    								  
							      112 BINARY_ADD						    								  
							      114 STORE_FAST 5 ( j )					    								  
							      116 JUMP_ABSOLUTE 40					    								  
							      >> 118 POP_BLOCK						    								  
							      >> 120 JUMP_ABSOLUTE 20					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      10 >> 124 LOAD_GLOBAL 2 ( print )				    								  
							      126 LOAD_CONST 5 ( '' )					    								  
							      128 LOAD_METHOD 3 ( join )				    								  
							      130 LOAD_FAST 3 ( s )					    								  
							      132 CALL_METHOD 1						    								  
							      134 CALL_FUNCTION 1					    								  
							      136 POP_TOP						    								  
							      138 LOAD_CONST 0 ( None )					    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS     CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS	    CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS	  CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS
--							      --							    --								  --
def isConvertible ( str1 , str2 , k ) :			      Disassembly of <code object isConvertible at 0x7fbac0e8bc90,  Disassembly of <code object isConvertible at 0x7f816a673a50,  error : Traceback (most recent call last):   File
    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :	      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 0 ( str1 )					  "XLM/dis_script.py", line 60, in <module>	exec
	return True					      2 LOAD_FAST 0 ( str1 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 38, in <module>	  Fi
    commonLength = 0					      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  le "<dis>", line 2, in isConvertible NameError: na
    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) )  6 LOAD_GLOBAL 0 ( len )					    6 STORE_FAST 1 ( strstrLength )				  me 'commonLength' is not defined
	if ( str1 [ i ] == str2 [ i ] ) :		      8 LOAD_FAST 1 ( str2 )					    								  
	    commonLength += 1				      10 CALL_FUNCTION 1					    27 8 LOAD_GLOBAL 0 ( commonLength )				  
	else :						      12 BINARY_ADD						    10 LOAD_FAST 1 ( strstrLength )				  
	    break					      14 LOAD_FAST 2 ( k )					    12 LOAD_FAST 2 ( strstrLength )				  
    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength 16 COMPARE_OP 0 ( < )					    14 LOAD_FAST 3 ( strstrLength )				  
	return True					      18 POP_JUMP_IF_FALSE 24					    16 LOAD_FAST 4 ( strstrLength )				  
    return False					      								    18 LOAD_FAST 5 ( strstrLength )				  
							      3 20 LOAD_CONST 1 ( True )				    20 LOAD_FAST 6 ( strstrLength )				  
							      22 RETURN_VALUE						    22 LOAD_FAST 7 ( strstrLength )				  
							      								    24 LOAD_FAST 8 ( strstrLength )				  
							      4 >> 24 LOAD_CONST 2 ( 0 )				    26 LOAD_FAST 9 ( strstrLength )				  
							      26 STORE_FAST 3 ( commonLength )				    28 LOAD_FAST 10 ( strstrLength )				  
							      								    30 LOAD_FAST 11 ( strstrLength )				  
							      5 28 SETUP_LOOP 62 ( to 92 )				    32 LOAD_FAST 12 ( strstrLength )				  
							      30 LOAD_GLOBAL 1 ( range )				    34 LOAD_FAST 13 ( strstrLength )				  
							      32 LOAD_CONST 2 ( 0 )					    36 LOAD_FAST 14 ( strstrLength )				  
							      34 LOAD_GLOBAL 2 ( min )					    38 LOAD_FAST 15 ( strstrLength )				  
							      36 LOAD_GLOBAL 0 ( len )					    40 LOAD_FAST 16 ( strstrLength )				  
							      38 LOAD_FAST 0 ( str1 )					    42 LOAD_FAST 17 ( strstrLength )				  
							      40 CALL_FUNCTION 1					    44 LOAD_FAST 18 ( strstrLength )				  
							      42 LOAD_GLOBAL 0 ( len )					    46 LOAD_FAST 17 ( strstrLength )				  
							      44 LOAD_FAST 1 ( str2 )					    48 LOAD_FAST 18 ( strstrLength )				  
							      46 CALL_FUNCTION 1					    50 LOAD_FAST 19 ( strstrLength )				  
							      48 CALL_FUNCTION 2					    52 LOAD_FAST 20 ( strstrLength )				  
							      50 LOAD_CONST 3 ( 1 )					    54 LOAD_FAST 21 ( strstrLength )				  
							      52 CALL_FUNCTION 3					    56 LOAD_FAST 20 ( strstrLength )				  
							      54 GET_ITER						    58 LOAD_FAST 21 ( strstrLength )				  
							      >> 56 FOR_ITER 32 ( to 90 )				    60 LOAD_FAST 20 ( strstrLength )				  
							      58 STORE_FAST 4 ( i )					    62 LOAD_FAST 21 ( strstrLength )				  
							      								    64 LOAD_FAST 22 ( strstrLength )				  
							      6 60 LOAD_FAST 0 ( str1 )					    66 LOAD_FAST 21 ( strstrLength )				  
							      62 LOAD_FAST 4 ( i )					    68 LOAD_FAST 22 ( strstrLength )				  
							      64 BINARY_SUBSCR						    70 LOAD_FAST 21 ( strstrLength )				  
							      66 LOAD_FAST 1 ( str2 )					    72 LOAD_FAST 22 ( strstrLength )				  
							      68 LOAD_FAST 4 ( i )					    74 LOAD_FAST 21 ( strstrLength )				  
							      70 BINARY_SUBSCR						    76 LOAD_FAST 22 ( strstrLength )				  
							      72 COMPARE_OP 2 ( == )					    78 LOAD_FAST 21 ( strstrLength )				  
							      74 POP_JUMP_IF_FALSE 86					    80 LOAD_FAST 22 ( strstrLength )				  
							      								    82 LOAD_FAST 23 ( strstrLength )				  
							      7 76 LOAD_FAST 3 ( commonLength )				    84 LOAD_FAST 22 ( strstrLength )				  
							      78 LOAD_CONST 3 ( 1 )					    86 LOAD_FAST 23 ( strstrLength )				  
							      80 INPLACE_ADD						    88 LOAD_FAST 22 ( strstrLength )				  
							      82 STORE_FAST 3 ( commonLength )				    90 LOAD_FAST 23 ( strstrLength )				  
							      84 JUMP_ABSOLUTE 56					    92 LOAD_FAST 22 ( strstrLength )				  
							      								    94 LOAD_FAST 23 ( strstrLength )				  
							      9 >> 86 BREAK_LOOP					    96 LOAD_FAST 24 ( strstrLength )				  
							      88 JUMP_ABSOLUTE 56					    98 LOAD_FAST 23 ( strstrLength )				  
							      >> 90 POP_BLOCK						    100 LOAD_FAST 24 ( strstrLength )				  
							      								    102 LOAD_FAST 23 ( strstrLength )				  
							      10 >> 92 LOAD_FAST 2 ( k )				    104 LOAD_FAST 24 ( strstrLength )				  
							      94 LOAD_GLOBAL 0 ( len )					    106 LOAD_FAST 26 ( strstrLength )				  
							      96 LOAD_FAST 0 ( str1 )					    108 LOAD_FAST 25 ( strstrLength )				  
							      98 CALL_FUNCTION 1					    110 LOAD_FAST 24 ( strstrLength ) NEW_LINE			  
							      100 BINARY_SUBTRACT					    								  
							      102 LOAD_GLOBAL 0 ( len )					    								  
							      104 LOAD_FAST 1 ( str2 )					    								  
							      106 CALL_FUNCTION 1					    								  
							      108 BINARY_SUBTRACT					    								  
							      110 LOAD_CONST 4 ( 2 )					    								  
							      112 LOAD_FAST 3 ( commonLength )				    								  
							      114 BINARY_MULTIPLY					    								  
							      116 BINARY_ADD						    								  
							      118 LOAD_CONST 4 ( 2 )					    								  
							      120 BINARY_MODULO						    								  
							      122 LOAD_CONST 2 ( 0 )					    								  
							      124 COMPARE_OP 2 ( == )					    								  
							      126 POP_JUMP_IF_FALSE 132					    								  
							      								    								  
							      11 128 LOAD_CONST 1 ( True )				    								  
							      130 RETURN_VALUE						    								  
							      								    								  
							      12 >> 132 LOAD_CONST 5 ( False )				    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			      FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			    FREQUENCY_ELEMENT_UNSORTED_ARRAY_1				  FREQUENCY_ELEMENT_UNSORTED_ARRAY_1
--							      --							    --								  --
def countFreq ( a , n ) :				      Disassembly of <code object countFreq at 0x7fbac0e89d20, file Disassembly of <code object countFreq at 0x7f816a673a50, file script_not_found : None
    hm = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    164 0 LOAD_FAST 1 ( n )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 LOAD_CONST 1 ( 0 )					  
	hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	      4 STORE_FAST 2 ( hm )					    4 BINARY_SUBSCR						  
    cumul = 0						      								    6 STORE_FAST 2 ( a )					  
    for i in range ( n ) :				      3 6 SETUP_LOOP 44 ( to 52 )				    								  
	cumul += hm [ a [ i ] ]				      8 LOAD_GLOBAL 1 ( range )					    165 8 LOAD_FAST 0 ( a )					  
	if ( hm [ a [ i ] ] > 0 ) :			      10 LOAD_FAST 1 ( n )					    10 LOAD_CONST 2 ( 1 )					  
	    print ( a [ i ] , "->" , cumul )		      12 CALL_FUNCTION 1					    12 BINARY_SUBSCR						  
	hm [ a [ i ] ] = 0				      14 GET_ITER						    14 STORE_FAST 3 ( a )					  
							      >> 16 FOR_ITER 32 ( to 50 )				    								  
							      18 STORE_FAST 3 ( i )					    166 16 LOAD_FAST 0 ( a )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 20 LOAD_FAST 2 ( hm )					    20 BINARY_SUBSCR						  
							      22 LOAD_METHOD 2 ( get )					    22 STORE_FAST 4 ( b )					  
							      24 LOAD_FAST 0 ( a )					    								  
							      26 LOAD_FAST 3 ( i )					    167 24 LOAD_FAST 0 ( a )					  
							      28 BINARY_SUBSCR						    26 LOAD_CONST 4 ( b '' )					  
							      30 LOAD_CONST 1 ( 0 )					    28 COMPARE_OP 2 ( == )					  
							      32 CALL_METHOD 2						    30 POP_JUMP_IF_FALSE 52					  
							      34 LOAD_CONST 2 ( 1 )					    								  
							      36 BINARY_ADD						    168 32 LOAD_FAST 0 ( a )					  
							      38 LOAD_FAST 2 ( hm )					    34 LOAD_FAST 4 ( b )					  
							      40 LOAD_FAST 0 ( a )					    36 LOAD_CONST 5 ( '' )					  
							      42 LOAD_FAST 3 ( i )					    38 COMPARE_OP 2 ( == )					  
							      44 BINARY_SUBSCR						    40 POP_JUMP_IF_FALSE 52					  
							      46 STORE_SUBSCR						    								  
							      48 JUMP_ABSOLUTE 16					    169 42 LOAD_FAST 0 ( a )					  
							      >> 50 POP_BLOCK						    44 LOAD_FAST 4 ( b )					  
							      								    46 LOAD_CONST 6 ( '' )					  
							      5 >> 52 LOAD_CONST 1 ( 0 )				    48 COMPARE_OP 2 ( == )					  
							      54 STORE_FAST 4 ( cumul )					    50 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      6 56 SETUP_LOOP 76 ( to 134 )				    170 52 LOAD_FAST 0 ( a )					  
							      58 LOAD_GLOBAL 1 ( range )				    54 LOAD_FAST 4 ( b )					  
							      60 LOAD_FAST 1 ( n )					    56 LOAD_CONST 7 ( '' )					  
							      62 CALL_FUNCTION 1					    58 COMPARE_OP 2 ( == )					  
							      64 GET_ITER						    60 POP_JUMP_IF_FALSE 52					  
							      >> 66 FOR_ITER 64 ( to 132 )				    								  
							      68 STORE_FAST 3 ( i )					    171 62 LOAD_FAST 0 ( a )					  
							      								    64 LOAD_FAST 4 ( b )					  
							      7 70 LOAD_FAST 4 ( cumul )				    66 LOAD_CONST 8 ( '' )					  
							      72 LOAD_FAST 2 ( hm )					    68 COMPARE_OP 2 ( == )					  
							      74 LOAD_FAST 0 ( a )					    70 POP_JUMP_IF_FALSE 76					  
							      76 LOAD_FAST 3 ( i )					    								  
							      78 BINARY_SUBSCR						    172 72 LOAD_FAST 0 ( a )					  
							      80 BINARY_SUBSCR						    74 LOAD_FAST 4 ( b )					  
							      82 INPLACE_ADD						    76 LOAD_CONST 9 ( '' )					  
							      84 STORE_FAST 4 ( cumul )					    78 COMPARE_OP 2 ( == )					  
							      								    80 POP_JUMP_IF_FALSE 80					  
							      8 86 LOAD_FAST 2 ( hm )					    								  
							      88 LOAD_FAST 0 ( a )					    173 82 LOAD_FAST 0 ( a )					  
							      90 LOAD_FAST 3 ( i )					    84 LOAD_FAST 4 ( b )					  
							      92 BINARY_SUBSCR						    86 LOAD_CONST 10 ( '' )					  
							      94 BINARY_SUBSCR						    88 COMPARE_OP 2 ( == )					  
							      96 LOAD_CONST 1 ( 0 )					    90 POP_JUMP_IF_FALSE 80					  
							      98 COMPARE_OP 4 ( > )					    								  
							      100 POP_JUMP_IF_FALSE 118					    174 92 LOAD_FAST 0 ( a )					  
							      								    94 LOAD_FAST 4 ( b )					  
							      9 102 LOAD_GLOBAL 3 ( print )				    96 LOAD_CONST 10 ( '' )					  
							      104 LOAD_FAST 0 ( a )					    98 COMPARE_OP 2 ( == )					  
							      106 LOAD_FAST 3 ( i )					    100 POP_JUMP_IF_FALSE 80					  
							      108 BINARY_SUBSCR						    								  
							      110 LOAD_CONST 3 ( '->' )					    175 102 LOAD_FAST 0 ( a )					  
							      112 LOAD_FAST 4 ( cumul )					    104 LOAD_FAST 4 ( b )					  
							      114 CALL_FUNCTION 3					    106 LOAD_CONST 11 ( '' )					  
							      116 POP_TOP						    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      10 >> 118 LOAD_CONST 1 ( 0 )				    								  
							      120 LOAD_FAST 2 ( hm )					    176 112 LOAD_FAST 0 ( a )					  
							      122 LOAD_FAST 0 ( a )					    114 LOAD_FAST 4 ( b )					  
							      124 LOAD_FAST 3 ( i )					    116 LOAD_CONST 12 ( '' )					  
							      126 BINARY_SUBSCR						    118 COMPARE_OP 2 ( == )					  
							      128 STORE_SUBSCR						    120 POP_JUMP_IF_FALSE 128					  
							      130 JUMP_ABSOLUTE 66					    								  
							      >> 132 POP_BLOCK						    177 122 LOAD_FAST 0 ( a )					  
							      >> 134 LOAD_CONST 0 ( None )				    124 LOAD_FAST 4 ( b )					  
							      136 RETURN_VALUE NEW_LINE					    126 LOAD_CONST 12 ( '' )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    178 >> 132 LOAD_FAST 0 ( a )				  
							      								    134 RETURN_VALUE						  
							      								    								  
							      								    179 >> 136 LOAD_FAST 0 ( a )				  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY					      FREQUENT_ELEMENT_ARRAY					    FREQUENT_ELEMENT_ARRAY					  FREQUENT_ELEMENT_ARRAY
--							      --							    --								  --
def mostFrequent ( arr , n ) :				      Disassembly of <code object mostFrequent at 0x7fbac0e8bc90, f Disassembly of <code object mostFrequent at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    90 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
    max_count = 1 ; res = arr [ 0 ] ; curr_count = 1	      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 41, in <module>	  Fi
    for i in range ( 1 , n ) :				      4 CALL_METHOD 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in mostFrequent TypeError: uns
	if ( arr [ i ] == arr [ i - 1 ] ) :		      6 POP_TOP							    6 STORE_FAST 1 ( n )					  upported operand type(s) for +=: 'NoneType' and 'i
	    curr_count += 1				      								    								  nt'
	else :						      3 8 LOAD_CONST 1 ( 1 )					    92 8 LOAD_FAST 1 ( n )					  
	    if ( curr_count > max_count ) :		      10 STORE_FAST 2 ( max_count )				    10 LOAD_CONST 1 ( 1 )					  
		max_count = curr_count			      12 LOAD_FAST 0 ( arr )					    12 INPLACE_ADD						  
		res = arr [ i - 1 ]			      14 LOAD_CONST 2 ( 0 )					    14 STORE_FAST 1 ( n )					  
	    curr_count = 1				      16 BINARY_SUBSCR						    								  
    if ( curr_count > max_count ) :			      18 STORE_FAST 3 ( res )					    93 16 LOAD_FAST 1 ( n )					  
	max_count = curr_count				      20 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 2 ( 1 )					  
	res = arr [ n - 1 ]				      22 STORE_FAST 4 ( curr_count )				    20 INPLACE_ADD						  
    return res						      								    22 STORE_FAST 1 ( n )					  
							      4 24 SETUP_LOOP 76 ( to 102 )				    								  
							      26 LOAD_GLOBAL 1 ( range )				    94 24 LOAD_FAST 1 ( n )					  
							      28 LOAD_CONST 1 ( 1 )					    26 LOAD_CONST 3 ( 1 )					  
							      30 LOAD_FAST 1 ( n )					    28 INPLACE_ADD						  
							      32 CALL_FUNCTION 2					    30 STORE_FAST 1 ( n )					  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 62 ( to 100 )				    95 32 LOAD_FAST 1 ( n )					  
							      38 STORE_FAST 5 ( i )					    34 LOAD_CONST 4 ( 2 )					  
							      								    36 INPLACE_ADD						  
							      5 40 LOAD_FAST 0 ( arr )					    38 STORE_FAST 1 ( n )					  
							      42 LOAD_FAST 5 ( i )					    								  
							      44 BINARY_SUBSCR						    96 40 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 0 ( arr )					    42 LOAD_CONST 5 ( 1 )					  
							      48 LOAD_FAST 5 ( i )					    44 INPLACE_ADD						  
							      50 LOAD_CONST 1 ( 1 )					    46 STORE_FAST 1 ( n )					  
							      52 BINARY_SUBTRACT					    								  
							      54 BINARY_SUBSCR						    97 48 LOAD_FAST 1 ( n )					  
							      56 COMPARE_OP 2 ( == )					    50 LOAD_CONST 6 ( 2 )					  
							      58 POP_JUMP_IF_FALSE 70					    52 INPLACE_ADD						  
							      								    54 STORE_FAST 1 ( n )					  
							      6 60 LOAD_FAST 4 ( curr_count )				    								  
							      62 LOAD_CONST 1 ( 1 )					    98 56 LOAD_FAST 1 ( n )					  
							      64 INPLACE_ADD						    58 LOAD_CONST 7 ( 3 )					  
							      66 STORE_FAST 4 ( curr_count )				    60 INPLACE_ADD						  
							      68 JUMP_ABSOLUTE 36					    62 STORE_FAST 1 ( n )					  
							      								    								  
							      8 >> 70 LOAD_FAST 4 ( curr_count )			    99 64 LOAD_FAST 1 ( n )					  
							      72 LOAD_FAST 2 ( max_count )				    66 LOAD_CONST 8 ( 2 )					  
							      74 COMPARE_OP 4 ( > )					    68 INPLACE_ADD						  
							      76 POP_JUMP_IF_FALSE 94					    70 STORE_FAST 1 ( n )					  
							      								    								  
							      9 78 LOAD_FAST 4 ( curr_count )				    100 72 LOAD_FAST 1 ( n )					  
							      80 STORE_FAST 2 ( max_count )				    74 LOAD_CONST 9 ( 4 )					  
							      								    76 INPLACE_ADD						  
							      10 82 LOAD_FAST 0 ( arr )					    78 STORE_FAST 1 ( n )					  
							      84 LOAD_FAST 5 ( i )					    								  
							      86 LOAD_CONST 1 ( 1 )					    101 80 LOAD_FAST 1 ( n )					  
							      88 BINARY_SUBTRACT					    82 LOAD_CONST 10 ( 4 )					  
							      90 BINARY_SUBSCR						    84 INPLACE_ADD						  
							      92 STORE_FAST 3 ( res )					    86 STORE_FAST 1 ( n )					  
							      								    								  
							      11 >> 94 LOAD_CONST 1 ( 1 )				    102 88 LOAD_FAST 1 ( n )					  
							      96 STORE_FAST 4 ( curr_count )				    90 LOAD_CONST 11 ( 2 )					  
							      98 JUMP_ABSOLUTE 36					    92 INPLACE_ADD						  
							      >> 100 POP_BLOCK						    94 STORE_FAST 1 ( n )					  
							      								    								  
							      12 >> 102 LOAD_FAST 4 ( curr_count )			    103 96 LOAD_FAST 1 ( n )					  
							      104 LOAD_FAST 2 ( max_count )				    98 LOAD_CONST 12 ( 2 )					  
							      106 COMPARE_OP 4 ( > )					    100 INPLACE_ADD						  
							      108 POP_JUMP_IF_FALSE 126					    102 STORE_FAST 1 ( n )					  
							      								    								  
							      13 110 LOAD_FAST 4 ( curr_count )				    104 104 LOAD_FAST 1 ( n )					  
							      112 STORE_FAST 2 ( max_count )				    106 LOAD_CONST 13 ( 2 )					  
							      								    108 INPLACE_ADD						  
							      14 114 LOAD_FAST 0 ( arr )				    110 STORE_FAST 1 ( n )					  
							      116 LOAD_FAST 1 ( n )					    								  
							      118 LOAD_CONST 1 ( 1 )					    105 112 LOAD_FAST 1 ( n )					  
							      120 BINARY_SUBTRACT					    114 LOAD_FAST 1 ( n )					  
							      122 BINARY_SUBSCR						    116 LOAD_CONST 14 ( 2 )					  
							      124 STORE_FAST 3 ( res )					    118 INPLACE_ADD						  
							      								    120 INPLACE_ADD						  
							      15 >> 126 LOAD_FAST 3 ( res )				    122 STORE_FAST 1 ( n )					  
							      128 RETURN_VALUE NEW_LINE					    								  
							      								    106 124 LOAD_FAST 1 ( n )					  
							      								    126 LOAD_CONST 15 ( 3 )					  
							      								    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      								    								  
							      								    107 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_FAST 1 ( n )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    108 140 LOAD_FAST 1 ( n )					  
							      								    142 LOAD_FAST 1 ( n )					  
							      								    144 LOAD_CONST 15 ( 2 )					  
							      								    146 INPLACE_ADD						  
							      								    148 STORE_FAST 1 ( n )					  
							      								    								  
							      								    109 150 LOAD_FAST 1 ( n )					  
							      								    152 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TILING_WITH_DOMINOES					      TILING_WITH_DOMINOES					    TILING_WITH_DOMINOES					  TILING_WITH_DOMINOES
--							      --							    --								  --
def countWays ( n ) :					      Disassembly of <code object countWays at 0x7fbac0e89d20, file Disassembly of <code object countWays at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    A = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    B = [ 0 ] * ( n + 1 )				      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( '*' , ) )				  item in run_dis_script():   File "XLM/dis_script.p
    A [ 0 ] = 1						      4 LOAD_FAST 0 ( n )					    4 IMPORT_NAME 0 ( itertools . itertools )			  y", line 47, in run_dis_script     co_code, co_nlo
    A [ 1 ] = 0						      6 LOAD_CONST 2 ( 1 )					    6 IMPORT_FROM 1 ( * ',))					  cals, co_varnames, co_names, co_consts, co_linesta
    B [ 0 ] = 0						      8 BINARY_ADD						    8STORE_FAST1( itertools )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
    B [ 1 ] = 1						      10 BINARY_MULTIPLY					    10 POP_TOP							  pack non-iterable NoneType object
    for i in range ( 2 , n + 1 ) :			      12 STORE_FAST 1 ( A )					    								  
	A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]		      								    27 12 LOAD_FAST 1 ( itertools )				  
	B [ i ] = A [ i - 1 ] + B [ i - 2 ]		      3 14 LOAD_CONST 1 ( 0 )					    14 LOAD_METHOD 2 ( count )					  
    return A [ n ]					      16 BUILD_LIST 1						    16 CALL_METHOD 0						  
							      18 LOAD_FAST 0 ( n )					    18 STORE_FAST 2 ( itertools )				  
							      20 LOAD_CONST 2 ( 1 )					    								  
							      22 BINARY_ADD						    28 20 LOAD_FAST 2 ( itertools )				  
							      24 BINARY_MULTIPLY					    22 LOAD_METHOD 3 ( count )					  
							      26 STORE_FAST 2 ( B )					    24 CALL_METHOD 0						  
							      								    26 STORE_FAST 3 ( count )					  
							      4 28 LOAD_CONST 2 ( 1 )					    								  
							      30 LOAD_FAST 1 ( A )					    29 28 LOAD_FAST 0 ( n )					  
							      32 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 3 ( 1 )					  
							      34 STORE_SUBSCR						    32 INPLACE_ADD						  
							      								    34 STORE_FAST 2 ( itertools )				  
							      5 36 LOAD_CONST 1 ( 0 )					    								  
							      38 LOAD_FAST 1 ( A )					    30 36 LOAD_FAST 2 ( itertools )				  
							      40 LOAD_CONST 2 ( 1 )					    38 LOAD_METHOD 4 ( count )					  
							      42 STORE_SUBSCR						    40 CALL_METHOD 0						  
							      								    42 STORE_FAST 4 ( count )					  
							      6 44 LOAD_CONST 1 ( 0 )					    								  
							      46 LOAD_FAST 2 ( B )					    31 44 LOAD_FAST 0 ( n )					  
							      48 LOAD_CONST 1 ( 0 )					    46 LOAD_CONST 4 ( 1 )					  
							      50 STORE_SUBSCR						    48 INPLACE_ADD						  
							      								    50 STORE_FAST 2 ( itertools )				  
							      7 52 LOAD_CONST 2 ( 1 )					    								  
							      54 LOAD_FAST 2 ( B )					    32 52 LOAD_FAST 2 ( itertools )				  
							      56 LOAD_CONST 2 ( 1 )					    54 LOAD_METHOD 5 ( count )					  
							      58 STORE_SUBSCR						    56 CALL_METHOD 0						  
							      								    58 STORE_FAST 5 ( count )					  
							      8 60 SETUP_LOOP 82 ( to 144 )				    								  
							      62 LOAD_GLOBAL 0 ( range )				    33 60 LOAD_FAST 0 ( n )					  
							      64 LOAD_CONST 3 ( 2 )					    62 LOAD_CONST 5 ( 1 )					  
							      66 LOAD_FAST 0 ( n )					    64 INPLACE_ADD						  
							      68 LOAD_CONST 2 ( 1 )					    66 STORE_FAST 2 ( itertools )				  
							      70 BINARY_ADD						    								  
							      72 CALL_FUNCTION 2					    34 68 LOAD_FAST 5 ( count )					  
							      74 GET_ITER						    70 LOAD_CONST 6 ( 2 )					  
							      >> 76 FOR_ITER 64 ( to 142 )				    72 INPLACE_ADD						  
							      78 STORE_FAST 3 ( i )					    74 STORE_FAST 2 ( itertools )				  
							      								    76 STORE_FAST 6 ( itertools )				  
							      9 80 LOAD_FAST 1 ( A )					    78 LOAD_FAST 6 ( itertools )				  
							      82 LOAD_FAST 3 ( i )					    80 LOAD_METHOD 6 ( count )					  
							      84 LOAD_CONST 3 ( 2 )					    82 CALL_METHOD 0						  
							      86 BINARY_SUBTRACT					    84 STORE_FAST 7 ( count )					  
							      88 BINARY_SUBSCR						    								  
							      90 LOAD_CONST 3 ( 2 )					    35 86 LOAD_FAST 0 ( n )					  
							      92 LOAD_FAST 2 ( B )					    88 LOAD_CONST 7 ( 1 )					  
							      94 LOAD_FAST 3 ( i )					    90 INPLACE_ADD						  
							      96 LOAD_CONST 2 ( 1 )					    92 STORE_FAST 2 ( itertools )				  
							      98 BINARY_SUBTRACT					    94 LOAD_FAST 6 ( itertools )				  
							      100 BINARY_SUBSCR						    96 LOAD_METHOD 7 ( count )					  
							      102 BINARY_MULTIPLY					    98 CALL_METHOD 0						  
							      104 BINARY_ADD						    100 LOAD_FAST 7 ( count )					  
							      106 LOAD_FAST 1 ( A )					    102 LOAD_CONST 8 ( 1 )					  
							      108 LOAD_FAST 3 ( i )					    104 INPLACE_ADD						  
							      110 STORE_SUBSCR						    106 STORE_FAST 2 ( itertools )				  
							      								    108 LOAD_FAST 6 ( itertools )				  
							      10 112 LOAD_FAST 1 ( A )					    110 LOAD_METHOD 8 ( count )					  
							      114 LOAD_FAST 3 ( i )					    112 CALL_METHOD 0						  
							      116 LOAD_CONST 2 ( 1 )					    114 LOAD_FAST 7 ( count )					  
							      118 BINARY_SUBTRACT					    116 LOAD_CONST 9 ( 1 )					  
							      120 BINARY_SUBSCR						    118 INPLACE_ADD						  
							      122 LOAD_FAST 2 ( B )					    120 STORE_FAST 2 ( itertools )				  
							      124 LOAD_FAST 3 ( i )					    122 LOAD_FAST 6 ( itertools )				  
							      126 LOAD_CONST 3 ( 2 )					    124 LOAD_METHOD 9 ( count )					  
							      128 BINARY_SUBTRACT					    126 CALL_METHOD 0						  
							      130 BINARY_SUBSCR						    128 LOAD_FAST 7 ( count )					  
							      132 BINARY_ADD						    130 LOAD_CONST 10 ( 1 )					  
							      134 LOAD_FAST 2 ( B )					    132 INPLACE_ADD						  
							      136 LOAD_FAST 3 ( i )					    134 ROT_THREE						  
							      138 STORE_SUBSCR						    136 STORE_SUBSCR						  
							      140 JUMP_ABSOLUTE 76					    138 LOAD_CONST 11 ( None )					  
							      >> 142 POP_BLOCK						    140 RETURN_VALUE						  
							      								    NEW_LINE							  
							      11 >> 144 LOAD_FAST 1 ( A )				    								  
							      146 LOAD_FAST 0 ( n )					    								  
							      148 BINARY_SUBSCR						    								  
							      150 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		      NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		    NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		  NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3
--							      --							    --								  --
def divisible ( num ) :					      Disassembly of <code object divisible at 0x7fbac0e89d20, file Disassembly of <code object divisible at 0x7f816a673a50, file script_not_found : None
    n = len ( num ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    101 0 LOAD_FAST 0 ( num )					  
    sum = 0 ;						      2 LOAD_FAST 0 ( num )					    2 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
	sum += int ( num [ i ] ) ;			      6 STORE_FAST 1 ( n )					    6 LOAD_CONST 2 ( 1 )					  
    if ( sum % 3 == 0 ) :				      								    8 BINARY_SUBSCR						  
	return 0 ;					      3 8 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 3 ( 2 )					  
    if ( n == 1 ) :					      10 STORE_FAST 2 ( sum )					    12 BINARY_SUBSCR						  
	return - 1 ;					      								    14 STORE_FAST 1 ( num )					  
    for i in range ( n ) :				      4 12 SETUP_LOOP 32 ( to 46 )				    								  
	if ( sum % 3 == int ( num [ i ] ) % 3 ) :	      14 LOAD_GLOBAL 1 ( range )				    102 16 LOAD_FAST 1 ( num )					  
	    return 1 ;					      16 LOAD_FAST 1 ( n )					    18 LOAD_CONST 4 ( 1 )					  
    if ( n == 2 ) :					      18 CALL_FUNCTION 1					    20 BINARY_SUBSCR						  
	return - 1 ;					      20 GET_ITER						    22 LOAD_CONST 5 ( 1 )					  
    return 2 ;						      >> 22 FOR_ITER 20 ( to 44 )				    24 BINARY_SUBSCR						  
							      24 STORE_FAST 3 ( i )					    26 LOAD_CONST 6 ( 2 )					  
							      								    28 BINARY_SUBSCR						  
							      5 26 LOAD_FAST 2 ( sum )					    30 LOAD_CONST 7 ( 3 )					  
							      28 LOAD_GLOBAL 2 ( int )					    32 COMPARE_OP 3 ( != )					  
							      30 LOAD_FAST 0 ( num )					    34 POP_JUMP_IF_FALSE 44					  
							      32 LOAD_FAST 3 ( i )					    								  
							      34 BINARY_SUBSCR						    103 36 LOAD_FAST 1 ( num )					  
							      36 CALL_FUNCTION 1					    38 LOAD_CONST 8 ( 2 )					  
							      38 INPLACE_ADD						    40 BINARY_SUBSCR						  
							      40 STORE_FAST 2 ( sum )					    42 LOAD_CONST 9 ( 3 )					  
							      42 JUMP_ABSOLUTE 22					    44 COMPARE_OP 3 ( != )					  
							      >> 44 POP_BLOCK						    46 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      6 >> 46 LOAD_FAST 2 ( sum )				    104 48 LOAD_FAST 1 ( num )					  
							      48 LOAD_CONST 2 ( 3 )					    50 LOAD_CONST 10 ( 2 )					  
							      50 BINARY_MODULO						    52 BINARY_SUBSCR						  
							      52 LOAD_CONST 1 ( 0 )					    54 LOAD_CONST 11 ( 3 )					  
							      54 COMPARE_OP 2 ( == )					    56 COMPARE_OP 3 ( != )					  
							      56 POP_JUMP_IF_FALSE 62					    58 POP_JUMP_IF_FALSE 44					  
							      								    								  
							      7 58 LOAD_CONST 1 ( 0 )					    105 60 LOAD_FAST 1 ( num )					  
							      60 RETURN_VALUE						    62 LOAD_CONST 12 ( 2 )					  
							      								    64 COMPARE_OP 3 ( != )					  
							      8 >> 62 LOAD_FAST 1 ( n )					    66 POP_JUMP_IF_FALSE 44					  
							      64 LOAD_CONST 3 ( 1 )					    								  
							      66 COMPARE_OP 2 ( == )					    106 68 LOAD_FAST 1 ( num )					  
							      68 POP_JUMP_IF_FALSE 74					    70 LOAD_CONST 12 ( 2 )					  
							      								    72 COMPARE_OP 3 ( != )					  
							      9 70 LOAD_CONST 4 ( - 1 )					    74 POP_JUMP_IF_FALSE 44					  
							      72 RETURN_VALUE						    								  
							      								    107 76 LOAD_FAST 1 ( num )					  
							      10 >> 74 SETUP_LOOP 44 ( to 120 )				    78 LOAD_CONST 12 ( 2 )					  
							      76 LOAD_GLOBAL 1 ( range )				    80 COMPARE_OP 3 ( != )					  
							      78 LOAD_FAST 1 ( n )					    82 POP_JUMP_IF_FALSE 90					  
							      80 CALL_FUNCTION 1					    								  
							      82 GET_ITER						    108 84 LOAD_FAST 1 ( num )					  
							      >> 84 FOR_ITER 32 ( to 118 )				    86 LOAD_CONST 13 ( 3 )					  
							      86 STORE_FAST 3 ( i )					    88 COMPARE_OP 3 ( != )					  
							      								    90 POP_JUMP_IF_FALSE 92					  
							      11 88 LOAD_FAST 2 ( sum )					    								  
							      90 LOAD_CONST 2 ( 3 )					    109 92 LOAD_FAST 1 ( num )					  
							      92 BINARY_MODULO						    94 LOAD_CONST 6 ( 2 )					  
							      94 LOAD_GLOBAL 2 ( int )					    96 COMPARE_OP 3 ( != )					  
							      96 LOAD_FAST 0 ( num )					    98 POP_JUMP_IF_FALSE 94					  
							      98 LOAD_FAST 3 ( i )					    								  
							      100 BINARY_SUBSCR						    110 100 LOAD_FAST 1 ( num )					  
							      102 CALL_FUNCTION 1					    102 LOAD_CONST 6 ( 2 )					  
							      104 LOAD_CONST 2 ( 3 )					    104 COMPARE_OP 3 ( != )					  
							      106 BINARY_MODULO						    106 POP_JUMP_IF_FALSE 94					  
							      108 COMPARE_OP 2 ( == )					    								  
							      110 POP_JUMP_IF_FALSE 84					    111 108 LOAD_FAST 1 ( num )					  
							      								    110 LOAD_CONST 6 ( 2 )					  
							      12 112 LOAD_CONST 3 ( 1 )					    112 COMPARE_OP 3 ( != )					  
							      114 RETURN_VALUE						    114 POP_JUMP_IF_FALSE 116					  
							      116 JUMP_ABSOLUTE 84					    								  
							      >> 118 POP_BLOCK						    112 116 LOAD_FAST 1 ( num )					  
							      								    118 LOAD_CONST 6 ( 2 )					  
							      13 >> 120 LOAD_FAST 1 ( n )				    120 COMPARE_OP 3 ( != )					  
							      122 LOAD_CONST 5 ( 2 )					    122 POP_JUMP_IF_FALSE 120					  
							      124 COMPARE_OP 2 ( == )					    								  
							      126 POP_JUMP_IF_FALSE 132					    113 124 LOAD_FAST 1 ( num )					  
							      								    126 LOAD_CONST 6 ( 2 )					  
							      14 128 LOAD_CONST 4 ( - 1 )				    128 COMPARE_OP 3 ( != )					  
							      130 RETURN_VALUE						    130 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      15 >> 132 LOAD_CONST 5 ( 2 )				    114 132 LOAD_FAST 1 ( num )					  
							      134 RETURN_VALUE NEW_LINE					    134 LOAD_CONST 6 ( 2 )					  
							      								    136 COMPARE_OP 3 ( != )					  
							      								    138 POP_JUMP_IF_FALSE 120					  
							      								    140 LOAD_FAST 1 ( num )					  
							      								    142 LOAD_CONST 6 ( 2 )					  
							      								    144 COMPARE_OP 3 ( != )					  
							      								    146 POP_JUMP_IF_FALSE 126					  
							      								    148 LOAD_FAST 1 ( num )					  
							      								    150 LOAD_CONST 6 ( 2 )					  
							      								    152 COMPARE_OP 3 ( != )					  
							      								    154 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    115								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA
--							      --							    --								  --
def noAdjacentDup ( s ) :				      Disassembly of <code object noAdjacentDup at 0x7fbac0e89d20,  Disassembly of <code object noAdjacjacDup at 0x7f816a673a50,  script_not_found : None
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    149 0 LOAD_FAST 0 ( s )					  
    for i in range ( 1 , n ) :				      2 LOAD_FAST 0 ( s )					    2 LOAD_CONST 1 ( 1 )					  
	if ( s [ i ] == s [ i - 1 ] ) :			      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
	    s [ i ] = "a"				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( s )					  
	    while ( s [ i ] == s [ i - 1 ] or ( i + 1 < n and 								    								  
		s [ i ] += 1				      3 8 SETUP_LOOP 128 ( to 138 )				    150 8 LOAD_FAST 1 ( s )					  
	    i += 1					      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_CONST 2 ( 2 )					  
    return s						      12 LOAD_CONST 1 ( 1 )					    12 BINARY_SUBSCR						  
							      14 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( s )					  
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    151 16 LOAD_FAST 0 ( s )					  
							      >> 20 FOR_ITER 114 ( to 136 )				    18 LOAD_CONST 3 ( '%s = %s' )				  
							      22 STORE_FAST 2 ( i )					    20 LOAD_FAST 1 ( s )					  
							      								    22 BINARY_MODULO						  
							      4 24 LOAD_FAST 0 ( s )					    24 STORE_FAST 3 ( s )					  
							      26 LOAD_FAST 2 ( i )					    								  
							      28 BINARY_SUBSCR						    152 26 LOAD_FAST 0 ( s )					  
							      30 LOAD_FAST 0 ( s )					    28 LOAD_CONST 4 ( '%s' )					  
							      32 LOAD_FAST 2 ( i )					    30 LOAD_FAST 3 ( s )					  
							      34 LOAD_CONST 1 ( 1 )					    32 BINARY_MODULO						  
							      36 BINARY_SUBTRACT					    34 STORE_FAST 4 ( s )					  
							      38 BINARY_SUBSCR						    								  
							      40 COMPARE_OP 2 ( == )					    153 36 LOAD_FAST 0 ( s )					  
							      42 POP_JUMP_IF_FALSE 20					    38 LOAD_CONST 5 ( '%s = %s' )				  
							      								    40 LOAD_FAST 4 ( s )					  
							      5 44 LOAD_CONST 2 ( 'a' )					    42 BINARY_MODULO						  
							      46 LOAD_FAST 0 ( s )					    44 LOAD_FAST 4 ( s )					  
							      48 LOAD_FAST 2 ( i )					    46 BINARY_MODULO						  
							      50 STORE_SUBSCR						    48 LOAD_FAST 4 ( s )					  
							      								    50 BINARY_MODULO						  
							      6 52 SETUP_LOOP 72 ( to 126 )				    52 LOAD_FAST 1 ( s )					  
							      >> 54 LOAD_FAST 0 ( s )					    54 BINARY_MODULO						  
							      56 LOAD_FAST 2 ( i )					    56 BUILD_TUPLE 2						  
							      58 BINARY_SUBSCR						    58 BINARY_MODULO						  
							      60 LOAD_FAST 0 ( s )					    60 RETURN_VALUE						  
							      62 LOAD_FAST 2 ( i )					    NEW_LINE							  
							      64 LOAD_CONST 1 ( 1 )					    								  
							      66 BINARY_SUBTRACT					    								  
							      68 BINARY_SUBSCR						    								  
							      70 COMPARE_OP 2 ( == )					    								  
							      72 POP_JUMP_IF_TRUE 106					    								  
							      74 LOAD_FAST 2 ( i )					    								  
							      76 LOAD_CONST 1 ( 1 )					    								  
							      78 BINARY_ADD						    								  
							      80 LOAD_FAST 1 ( n )					    								  
							      82 COMPARE_OP 0 ( < )					    								  
							      84 POP_JUMP_IF_FALSE 124					    								  
							      86 LOAD_FAST 0 ( s )					    								  
							      88 LOAD_FAST 2 ( i )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 LOAD_FAST 0 ( s )					    								  
							      94 LOAD_FAST 2 ( i )					    								  
							      96 LOAD_CONST 1 ( 1 )					    								  
							      98 BINARY_ADD						    								  
							      100 BINARY_SUBSCR						    								  
							      102 COMPARE_OP 2 ( == )					    								  
							      104 POP_JUMP_IF_FALSE 124					    								  
							      								    								  
							      7 >> 106 LOAD_FAST 0 ( s )				    								  
							      108 LOAD_FAST 2 ( i )					    								  
							      110 DUP_TOP_TWO						    								  
							      112 BINARY_SUBSCR						    								  
							      114 LOAD_CONST 1 ( 1 )					    								  
							      116 INPLACE_ADD						    								  
							      118 ROT_THREE						    								  
							      120 STORE_SUBSCR						    								  
							      122 JUMP_ABSOLUTE 54					    								  
							      >> 124 POP_BLOCK						    								  
							      								    								  
							      8 >> 126 LOAD_FAST 2 ( i )				    								  
							      128 LOAD_CONST 1 ( 1 )					    								  
							      130 INPLACE_ADD						    								  
							      132 STORE_FAST 2 ( i )					    								  
							      134 JUMP_ABSOLUTE 20					    								  
							      >> 136 POP_BLOCK						    								  
							      								    								  
							      9 >> 138 LOAD_FAST 0 ( s )				    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE			      DELETE_CONSECUTIVE_WORDS_SEQUENCE				    DELETE_CONSECUTIVE_WORDS_SEQUENCE				  DELETE_CONSECUTIVE_WORDS_SEQUENCE
--							      --							    --								  --
def removeConsecutiveSame ( v ) :			      Disassembly of <code object removeConsecutiveSame at 0x7fbac0 Disassembly of <code object removeConConveSame at 0x7f816a673 script_not_found : None
    n = len ( v )					      2 0 LOAD_GLOBAL 0 ( len )					    65 0 LOAD_FAST 0 ( v )					  
    i = 0						      2 LOAD_FAST 0 ( v )					    2 LOAD_CONST 1 ( 1 )					  
    while ( i < n - 1 ) :				      4 CALL_FUNCTION 1						    4 COMPARE_OP 2 ( == )					  
	if ( ( i + 1 ) < len ( v ) ) and ( v [ i ] == v [ i + 6 STORE_FAST 1 ( n )					    6 POP_JUMP_IF_FALSE 12					  
	    v = v [ : i ]				      								    								  
	    v = v [ : i ]				      3 8 LOAD_CONST 1 ( 0 )					    66 8 LOAD_FAST 0 ( v )					  
	    if ( i > 0 ) :				      10 STORE_FAST 2 ( i )					    10 LOAD_CONST 2 ( 0 )					  
		i -= 1					      								    12 BINARY_SUBSCR						  
	    n = n - 2					      4 12 SETUP_LOOP 110 ( to 124 )				    14 LOAD_CONST 3 ( 1 )					  
	else :						      >> 14 LOAD_FAST 2 ( i )					    16 COMPARE_OP 2 ( == )					  
	    i += 1					      16 LOAD_FAST 1 ( n )					    18 POP_JUMP_IF_FALSE 28					  
    return len ( v [ : i - 1 ] )			      18 LOAD_CONST 2 ( 1 )					    								  
							      20 BINARY_SUBTRACT					    67 20 LOAD_FAST 0 ( v )					  
							      22 COMPARE_OP 0 ( < )					    22 LOAD_CONST 4 ( 2 )					  
							      24 POP_JUMP_IF_FALSE 122					    24 COMPARE_OP 2 ( == )					  
							      								    26 POP_JUMP_IF_FALSE 28					  
							      5 26 LOAD_FAST 2 ( i )					    								  
							      28 LOAD_CONST 2 ( 1 )					    68 28 LOAD_FAST 0 ( v )					  
							      30 BINARY_ADD						    30 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_GLOBAL 0 ( len )					    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 0 ( v )					    34 LOAD_CONST 6 ( 2 )					  
							      36 CALL_FUNCTION 1					    36 COMPARE_OP 2 ( == )					  
							      38 COMPARE_OP 0 ( < )					    38 POP_JUMP_IF_FALSE 48					  
							      40 POP_JUMP_IF_FALSE 112					    								  
							      42 LOAD_FAST 0 ( v )					    69 40 LOAD_FAST 0 ( v )					  
							      44 LOAD_FAST 2 ( i )					    42 LOAD_CONST 7 ( 2 )					  
							      46 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      48 LOAD_FAST 0 ( v )					    46 LOAD_CONST 8 ( 3 )					  
							      50 LOAD_FAST 2 ( i )					    48 COMPARE_OP 2 ( == )					  
							      52 LOAD_CONST 2 ( 1 )					    50 POP_JUMP_IF_FALSE 48					  
							      54 BINARY_ADD						    								  
							      56 BINARY_SUBSCR						    70 52 LOAD_FAST 0 ( v )					  
							      58 COMPARE_OP 2 ( == )					    54 LOAD_CONST 9 ( 2 )					  
							      60 POP_JUMP_IF_FALSE 112					    56 BINARY_SUBSCR						  
							      								    58 LOAD_CONST 10 ( 3 )					  
							      6 62 LOAD_FAST 0 ( v )					    60 COMPARE_OP 2 ( == )					  
							      64 LOAD_CONST 0 ( None )					    62 POP_JUMP_IF_FALSE 48					  
							      66 LOAD_FAST 2 ( i )					    								  
							      68 BUILD_SLICE 2						    71 64 LOAD_FAST 0 ( v )					  
							      70 BINARY_SUBSCR						    66 LOAD_CONST 11 ( 3 )					  
							      72 STORE_FAST 0 ( v )					    68 COMPARE_OP 2 ( == )					  
							      								    70 POP_JUMP_IF_FALSE 48					  
							      7 74 LOAD_FAST 0 ( v )					    								  
							      76 LOAD_CONST 0 ( None )					    72 72 LOAD_FAST 0 ( v )					  
							      78 LOAD_FAST 2 ( i )					    74 LOAD_CONST 12 ( 3 )					  
							      80 BUILD_SLICE 2						    76 COMPARE_OP 2 ( == )					  
							      82 BINARY_SUBSCR						    78 POP_JUMP_IF_FALSE 48					  
							      84 STORE_FAST 0 ( v )					    								  
							      								    73 80 LOAD_FAST 0 ( v )					  
							      8 86 LOAD_FAST 2 ( i )					    82 LOAD_CONST 13 ( 3 )					  
							      88 LOAD_CONST 1 ( 0 )					    84 COMPARE_OP 2 ( == )					  
							      90 COMPARE_OP 4 ( > )					    86 POP_JUMP_IF_FALSE 48					  
							      92 POP_JUMP_IF_FALSE 102					    								  
							      								    74 88 LOAD_FAST 0 ( v )					  
							      9 94 LOAD_FAST 2 ( i )					    90 LOAD_CONST 6 ( 2 )					  
							      96 LOAD_CONST 2 ( 1 )					    92 BINARY_SUBSCR						  
							      98 INPLACE_SUBTRACT					    94 LOAD_CONST 7 ( 2 )					  
							      100 STORE_FAST 2 ( i )					    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 48					  
							      10 >> 102 LOAD_FAST 1 ( n )				    								  
							      104 LOAD_CONST 3 ( 2 )					    75 100 LOAD_FAST 0 ( v )					  
							      106 BINARY_SUBTRACT					    102 LOAD_CONST 6 ( 2 )					  
							      108 STORE_FAST 1 ( n )					    104 BINARY_SUBSCR						  
							      110 JUMP_ABSOLUTE 14					    106 LOAD_CONST 6 ( 2 )					  
							      								    108 BINARY_SUBSCR						  
							      12 >> 112 LOAD_FAST 2 ( i )				    110 LOAD_CONST 6 ( 2 )					  
							      114 LOAD_CONST 2 ( 1 )					    112 BINARY_SUBSCR						  
							      116 INPLACE_ADD						    114 LOAD_CONST 7 ( 2 )					  
							      118 STORE_FAST 2 ( i )					    116 BINARY_SUBSCR						  
							      120 JUMP_ABSOLUTE 14					    118 LOAD_CONST 6 ( 2 )					  
							      >> 122 POP_BLOCK						    120 BINARY_SUBSCR						  
							      								    122 LOAD_CONST 6 ( 2 )					  
							      13 >> 124 LOAD_GLOBAL 0 ( len )				    124 BINARY_SUBSCR						  
							      126 LOAD_FAST 0 ( v )					    126 LOAD_CONST 6 ( 2 )					  
							      128 LOAD_CONST 0 ( None )					    128 BINARY_SUBSCR						  
							      130 LOAD_FAST 2 ( i )					    130 LOAD_CONST 7 ( 2 )					  
							      132 LOAD_CONST 2 ( 1 )					    132 COMPARE_OP 2 ( == )					  
							      134 BINARY_SUBTRACT					    134 POP_JUMP_IF_FALSE 132					  
							      136 BUILD_SLICE 2						    								  
							      138 BINARY_SUBSCR						    76 136 LOAD_FAST 0 ( v )					  
							      140 CALL_FUNCTION 1					    138 LOAD_CONST 6 ( 2 )					  
							      142 RETURN_VALUE NEW_LINE					    140 BINARY_SUBSCR						  
							      								    142 LOAD_CONST 7 ( 2 )					  
							      								    144 COMPARE_OP 2 ( == )					  
							      								    146 POP_JUMP_IF_FALSE 130					  
							      								    148 LOAD_FAST 0 ( v )					  
							      								    150 LOAD_CONST 8 ( 3 )					  
							      								    152 COMPARE_OP 2 ( == )					  
							      								    154 POP_JUMP_IF_FALSE 154					  
							      								    								  
							      								    77 >> 156 LOAD_FAST 0 ( v )					  
							      								    158 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	      LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	    LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	  LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS
--							      --							    --								  --
def findFibSubset ( arr , n ) :				      Disassembly of <code object findFibSubset at 0x7fbac0e8bc90,  Disassembly of <code object findFibSubset at 0x7f816a673a50,  script_not_found : None
    m = max ( arr )					      2 0 LOAD_GLOBAL 0 ( max )					    101 0 LOAD_FAST 1 ( n )					  
    a = 0						      2 LOAD_FAST 0 ( arr )					    2 LOAD_CONST 1 ( 0 )					  
    b = 1						      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  
    hash = [ ]						      6 STORE_FAST 2 ( m )					    6 STORE_FAST 2 ( a )					  
    hash.append ( a )					      								    								  
    hash.append ( b )					      3 8 LOAD_CONST 1 ( 0 )					    102 8 LOAD_FAST 0 ( arr )					  
    while ( b < m ) :					      10 STORE_FAST 3 ( a )					    10 LOAD_CONST 2 ( 1 )					  
	c = a + b					      								    12 BINARY_SUBSCR						  
	a = b						      4 12 LOAD_CONST 2 ( 1 )					    14 STORE_FAST 3 ( a )					  
	b = c						      14 STORE_FAST 4 ( b )					    								  
	hash.append ( b )				      								    103 16 LOAD_FAST 2 ( a )					  
    for i in range ( n ) :				      5 16 BUILD_LIST 0						    18 LOAD_FAST 3 ( a )					  
	if arr [ i ] in hash :				      18 STORE_FAST 5 ( hash )					    20 LOAD_CONST 3 ( 1 )					  
	    print ( arr [ i ] , end = " " )		      								    22 BINARY_SUBSCR						  
							      6 20 LOAD_FAST 5 ( hash )					    24 LOAD_FAST 1 ( n )					  
							      22 LOAD_METHOD 1 ( append )				    26 LOAD_CONST 4 ( 2 )					  
							      24 LOAD_FAST 3 ( a )					    28 BINARY_SUBSCR						  
							      26 CALL_METHOD 1						    30 LOAD_CONST 5 ( 3 )					  
							      28 POP_TOP						    32 BINARY_SUBSCR						  
							      								    34 LOAD_CONST 6 ( 4 )					  
							      7 30 LOAD_FAST 5 ( hash )					    36 BINARY_SUBSCR						  
							      32 LOAD_METHOD 1 ( append )				    38 LOAD_FAST 1 ( n )					  
							      34 LOAD_FAST 4 ( b )					    40 LOAD_CONST 7 ( 3 )					  
							      36 CALL_METHOD 1						    42 BINARY_SUBSCR						  
							      38 POP_TOP						    44 LOAD_CONST 8 ( 3 )					  
							      								    46 BINARY_SUBSCR						  
							      8 40 SETUP_LOOP 38 ( to 80 )				    48 LOAD_FAST 1 ( n )					  
							      >> 42 LOAD_FAST 4 ( b )					    50 LOAD_CONST 9 ( 4 )					  
							      44 LOAD_FAST 2 ( m )					    52 BINARY_SUBSCR						  
							      46 COMPARE_OP 0 ( < )					    54 LOAD_CONST 10 ( 3 )					  
							      48 POP_JUMP_IF_FALSE 78					    56 BINARY_SUBSCR						  
							      								    58 LOAD_CONST 11 ( 4 )					  
							      9 50 LOAD_FAST 3 ( a )					    60 BINARY_SUBSCR						  
							      52 LOAD_FAST 4 ( b )					    62 LOAD_CONST 12 ( 4 )					  
							      54 BINARY_ADD						    64 BINARY_SUBSCR						  
							      56 STORE_FAST 6 ( c )					    66 LOAD_CONST 13 ( 4 )					  
							      								    68 BINARY_SUBSCR						  
							      10 58 LOAD_FAST 4 ( b )					    70 LOAD_CONST 14 ( 4 )					  
							      60 STORE_FAST 3 ( a )					    72 BINARY_SUBSCR						  
							      								    74 LOAD_CONST 12 ( 4 )					  
							      11 62 LOAD_FAST 6 ( c )					    76 BINARY_SUBSCR						  
							      64 STORE_FAST 4 ( b )					    78 LOAD_CONST 13 ( 4 )					  
							      								    80 BINARY_SUBSCR						  
							      12 66 LOAD_FAST 5 ( hash )				    82 LOAD_CONST 14 ( 4 )					  
							      68 LOAD_METHOD 1 ( append )				    84 BINARY_SUBSCR						  
							      70 LOAD_FAST 4 ( b )					    86 LOAD_CONST 15 ( 4 )					  
							      72 CALL_METHOD 1						    88 BINARY_SUBSCR						  
							      74 POP_TOP						    90 LOAD_CONST 16 ( 4 )					  
							      76 JUMP_ABSOLUTE 42					    92 BINARY_SUBSCR						  
							      >> 78 POP_BLOCK						    94 LOAD_CONST 17 ( 4 )					  
							      								    96 BINARY_SUBSCR						  
							      13 >> 80 SETUP_LOOP 44 ( to 126 )				    98 LOAD_CONST 16 ( 4 )					  
							      82 LOAD_GLOBAL 2 ( range )				    100 BINARY_SUBSCR						  
							      84 LOAD_FAST 1 ( n )					    102 LOAD_CONST 17 ( 4 )					  
							      86 CALL_FUNCTION 1					    104 BINARY_SUBSCR						  
							      88 GET_ITER						    106 LOAD_CONST 18 ( 4 )					  
							      >> 90 FOR_ITER 32 ( to 124 )				    108 BINARY_SUBSCR						  
							      92 STORE_FAST 7 ( i )					    110 LOAD_CONST 19 ( 4 )					  
							      								    112 BINARY_SUBSCR						  
							      14 94 LOAD_FAST 0 ( arr )					    114 LOAD_CONST 20 ( 4 )					  
							      96 LOAD_FAST 7 ( i )					    116 BINARY_SUBSCR						  
							      98 BINARY_SUBSCR						    118 LOAD_CONST 21 ( 4 )					  
							      100 LOAD_FAST 5 ( hash )					    120 BINARY_SUBSCR						  
							      102 COMPARE_OP 6 ( in )					    122 LOAD_CONST 22 ( 4 )					  
							      104 POP_JUMP_IF_FALSE 90					    124 BINARY_SUBSCR						  
							      								    126 LOAD_CONST 21 ( 4 )					  
							      15 106 LOAD_GLOBAL 3 ( print )				    128 BINARY_SUBSCR						  
							      108 LOAD_FAST 0 ( arr )					    130 LOAD_CONST 22 ( 4 )					  
							      110 LOAD_FAST 7 ( i )					    132 BINARY_SUBSCR						  
							      112 BINARY_SUBSCR						    134 LOAD_CONST 23 ( 4 )					  
							      114 LOAD_CONST 3 ( ' ' )					    136 BINARY_SUBSCR						  
							      116 LOAD_CONST 4 ( ( 'end' , ) )				    138 LOAD_CONST 22 ( 4 )					  
							      118 CALL_FUNCTION_KW 2					    140 LOAD_CONST 23 ( 4 )					  
							      120 POP_TOP						    142 BINARY_SUBSCR						  
							      122 JUMP_ABSOLUTE 90					    144 LOAD_CONST 22 ( 4 )					  
							      >> 124 POP_BLOCK						    146 BINARY_SUBSCR						  
							      >> 126 LOAD_CONST 0 ( None )				    148 LOAD_CONST 23 ( 4 )					  
							      128 RETURN_VALUE NEW_LINE					    150 LOAD_CONST 22 ( 4 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 LOAD_CONST 23 ( 4 )					  
							      								    156 LOAD_CONST 23 ( 4 )					  
							      								    158 BINARY_SUBSCR						  
							      								    								  
							      								    103 104 LOAD_CONST 24 ( 4 )					  
							      								    106 LOAD_CONST 23 ( 4 )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 24 ( 4 )					  
							      								    112 LOAD_CONST 23 ( 4 )					  
							      								    114 BUILD_SLICE 2						  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 24 ( 4 )					  
							      								    120 LOAD_CONST 25 ( 4 )					  
							      								    122 BUILD_SLICE 2						  
							      								    124 BINARY_SUBSCR						  
							      								    126 STORE_FAST 3 ( a )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY			      FREQUENCY_ELEMENT_UNSORTED_ARRAY				    FREQUENCY_ELEMENT_UNSORTED_ARRAY				  FREQUENCY_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
def countFreq ( a , n ) :				      Disassembly of <code object countFreq at 0x7fbac0e89d20, file Disassembly of <code object countFreq at 0x7f816a673a50, file script_not_found : None
    hm = { }						      2 0 BUILD_MAP 0						    164 0 LOAD_FAST 1 ( n )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( hm )					    2 LOAD_CONST 1 ( 0 )					  
	hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	      								    4 BINARY_SUBSCR						  
    st = set ( )					      3 4 SETUP_LOOP 46 ( to 52 )				    6 STORE_FAST 2 ( a )					  
    for x in hm :					      6 LOAD_GLOBAL 0 ( range )					    								  
	st.add ( ( x , hm [ x ] ) )			      8 LOAD_CONST 1 ( 0 )					    165 8 LOAD_FAST 0 ( a )					  
    cumul = 0						      10 LOAD_FAST 1 ( n )					    10 LOAD_CONST 2 ( 1 )					  
    for x in sorted ( st ) :				      12 CALL_FUNCTION 2					    12 BINARY_SUBSCR						  
	cumul += x [ 1 ]				      14 GET_ITER						    14 STORE_FAST 3 ( a )					  
	print ( x [ 0 ] , cumul )			      >> 16 FOR_ITER 32 ( to 50 )				    								  
							      18 STORE_FAST 3 ( i )					    166 16 LOAD_FAST 0 ( a )					  
							      								    18 LOAD_CONST 3 ( 1 )					  
							      4 20 LOAD_FAST 2 ( hm )					    20 BINARY_SUBSCR						  
							      22 LOAD_METHOD 1 ( get )					    22 STORE_FAST 4 ( b )					  
							      24 LOAD_FAST 0 ( a )					    								  
							      26 LOAD_FAST 3 ( i )					    167 24 LOAD_FAST 0 ( a )					  
							      28 BINARY_SUBSCR						    26 LOAD_CONST 4 ( b '' )					  
							      30 LOAD_CONST 1 ( 0 )					    28 COMPARE_OP 2 ( == )					  
							      32 CALL_METHOD 2						    30 POP_JUMP_IF_FALSE 44					  
							      34 LOAD_CONST 2 ( 1 )					    								  
							      36 BINARY_ADD						    168 32 LOAD_FAST 0 ( a )					  
							      38 LOAD_FAST 2 ( hm )					    34 LOAD_FAST 4 ( b )					  
							      40 LOAD_FAST 0 ( a )					    36 LOAD_CONST 5 ( '' )					  
							      42 LOAD_FAST 3 ( i )					    38 COMPARE_OP 2 ( == )					  
							      44 BINARY_SUBSCR						    40 POP_JUMP_IF_FALSE 44					  
							      46 STORE_SUBSCR						    								  
							      48 JUMP_ABSOLUTE 16					    169 42 LOAD_FAST 0 ( a )					  
							      >> 50 POP_BLOCK						    44 LOAD_FAST 4 ( b )					  
							      								    46 LOAD_CONST 6 ( '' )					  
							      5 >> 52 LOAD_GLOBAL 2 ( set )				    48 COMPARE_OP 2 ( == )					  
							      54 CALL_FUNCTION 0					    50 POP_JUMP_IF_FALSE 44					  
							      56 STORE_FAST 4 ( st )					    								  
							      								    170 52 LOAD_FAST 0 ( a )					  
							      6 58 SETUP_LOOP 30 ( to 90 )				    54 LOAD_FAST 4 ( b )					  
							      60 LOAD_FAST 2 ( hm )					    56 LOAD_CONST 7 ( '' )					  
							      62 GET_ITER						    58 COMPARE_OP 2 ( == )					  
							      >> 64 FOR_ITER 22 ( to 88 )				    60 POP_JUMP_IF_FALSE 44					  
							      66 STORE_FAST 5 ( x )					    								  
							      								    171 62 LOAD_FAST 0 ( a )					  
							      7 68 LOAD_FAST 4 ( st )					    64 LOAD_FAST 4 ( b )					  
							      70 LOAD_METHOD 3 ( add )					    66 LOAD_CONST 8 ( '' )					  
							      72 LOAD_FAST 5 ( x )					    68 COMPARE_OP 2 ( == )					  
							      74 LOAD_FAST 2 ( hm )					    70 POP_JUMP_IF_FALSE 44					  
							      76 LOAD_FAST 5 ( x )					    								  
							      78 BINARY_SUBSCR						    172 72 LOAD_FAST 0 ( a )					  
							      80 BUILD_TUPLE 2						    74 LOAD_FAST 4 ( b )					  
							      82 CALL_METHOD 1						    76 LOAD_CONST 9 ( '' )					  
							      84 POP_TOP						    78 COMPARE_OP 2 ( == )					  
							      86 JUMP_ABSOLUTE 64					    80 POP_JUMP_IF_FALSE 44					  
							      >> 88 POP_BLOCK						    								  
							      								    173 82 LOAD_FAST 0 ( a )					  
							      8 >> 90 LOAD_CONST 1 ( 0 )				    84 LOAD_FAST 4 ( b )					  
							      92 STORE_FAST 6 ( cumul )					    86 LOAD_CONST 10 ( '' )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      9 94 SETUP_LOOP 42 ( to 138 )				    90 POP_JUMP_IF_FALSE 44					  
							      96 LOAD_GLOBAL 4 ( sorted )				    								  
							      98 LOAD_FAST 4 ( st )					    174 92 LOAD_FAST 0 ( a )					  
							      100 CALL_FUNCTION 1					    94 LOAD_FAST 4 ( b )					  
							      102 GET_ITER						    96 LOAD_CONST 10 ( '' )					  
							      >> 104 FOR_ITER 30 ( to 136 )				    98 COMPARE_OP 2 ( == )					  
							      106 STORE_FAST 5 ( x )					    100 POP_JUMP_IF_FALSE 106					  
							      								    								  
							      10 108 LOAD_FAST 6 ( cumul )				    175 102 LOAD_FAST 0 ( a )					  
							      110 LOAD_FAST 5 ( x )					    104 LOAD_FAST 4 ( b )					  
							      112 LOAD_CONST 2 ( 1 )					    106 LOAD_CONST 11 ( '' )					  
							      114 BINARY_SUBSCR						    108 COMPARE_OP 2 ( == )					  
							      116 INPLACE_ADD						    110 POP_JUMP_IF_FALSE 106					  
							      118 STORE_FAST 6 ( cumul )				    								  
							      								    176 112 LOAD_FAST 0 ( a )					  
							      11 120 LOAD_GLOBAL 5 ( print )				    114 LOAD_FAST 4 ( b )					  
							      122 LOAD_FAST 5 ( x )					    116 LOAD_CONST 12 ( '' )					  
							      124 LOAD_CONST 1 ( 0 )					    118 COMPARE_OP 2 ( == )					  
							      126 BINARY_SUBSCR						    120 POP_JUMP_IF_FALSE 106					  
							      128 LOAD_FAST 6 ( cumul )					    								  
							      130 CALL_FUNCTION 2					    177 122 LOAD_FAST 0 ( a )					  
							      132 POP_TOP						    124 LOAD_FAST 4 ( b )					  
							      134 JUMP_ABSOLUTE 104					    126 LOAD_CONST 12 ( '' )					  
							      >> 136 POP_BLOCK						    128 COMPARE_OP 2 ( == )					  
							      >> 138 LOAD_CONST 0 ( None )				    130 POP_JUMP_IF_FALSE 106					  
							      140 RETURN_VALUE NEW_LINE					    								  
							      								    178 >> 132 LOAD_FAST 0 ( a )				  
							      								    134 RETURN_VALUE						  
							      								    								  
							      								    179 >> 136 LOAD_FAST 0 ( a )				  
							      								    138 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE
--							      --							    --								  --
def countWays ( n , m ) :				      Disassembly of <code object countWays at 0x7fbac0e8bc90, file Disassembly of <code object countWays at 0x7f816a673a50, file error : Traceback (most recent call last):   File
    count = [ ]						      2 0 BUILD_LIST 0						    20 0 BUILD_LIST 0						  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n + 2 ) :				      2 STORE_FAST 2 ( count )					    2 STORE_FAST 1 ( m )					  (item)   File "main.py", line 39, in <module>	  Fi
	count.append ( 0 )				      								    								  le "<dis>", line 2, in countWays TypeError: 'int'
    count [ 0 ] = 0					      3 4 SETUP_LOOP 30 ( to 36 )				    21 4 SETUP_LOOP 44 ( to 46 )				  object is not iterable
    for i in range ( 1 , n + 1 ) :			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_FAST 0 ( n )						  
	if ( i > m ) :					      8 LOAD_FAST 0 ( n )					    8 GET_ITER							  
	    count [ i ] = count [ i - 1 ] + count [ i - m ]   10 LOAD_CONST 1 ( 2 )					    >> 10 FOR_ITER 44 ( to 46 )					  
	elif ( i < m ) :				      12 BINARY_ADD						    12 STORE_FAST 2 ( i )					  
	    count [ i ] = 1				      14 CALL_FUNCTION 1					    								  
	else :						      16 GET_ITER						    22 14 LOAD_FAST 1 ( m )					  
	    count [ i ] = 2				      >> 18 FOR_ITER 14 ( to 34 )				    16 LOAD_METHOD 0 ( append )					  
    return count [ n ]					      20 STORE_FAST 3 ( i )					    18 LOAD_FAST 2 ( i )					  
							      								    20 CALL_METHOD 1						  
							      4 22 LOAD_FAST 2 ( count )				    22 POP_TOP							  
							      24 LOAD_METHOD 1 ( append )				    24 JUMP_ABSOLUTE 10						  
							      26 LOAD_CONST 2 ( 0 )					    >> 26 POP_BLOCK						  
							      28 CALL_METHOD 1						    >> 28 LOAD_CONST 0 ( None )					  
							      30 POP_TOP						    30 RETURN_VALUE						  
							      32 JUMP_ABSOLUTE 18					    NEW_LINE							  
							      >> 34 POP_BLOCK						    								  
							      								    								  
							      5 >> 36 LOAD_CONST 2 ( 0 )				    								  
							      38 LOAD_FAST 2 ( count )					    								  
							      40 LOAD_CONST 2 ( 0 )					    								  
							      42 STORE_SUBSCR						    								  
							      								    								  
							      6 44 SETUP_LOOP 86 ( to 132 )				    								  
							      46 LOAD_GLOBAL 0 ( range )				    								  
							      48 LOAD_CONST 3 ( 1 )					    								  
							      50 LOAD_FAST 0 ( n )					    								  
							      52 LOAD_CONST 3 ( 1 )					    								  
							      54 BINARY_ADD						    								  
							      56 CALL_FUNCTION 2					    								  
							      58 GET_ITER						    								  
							      >> 60 FOR_ITER 68 ( to 130 )				    								  
							      62 STORE_FAST 3 ( i )					    								  
							      								    								  
							      7 64 LOAD_FAST 3 ( i )					    								  
							      66 LOAD_FAST 1 ( m )					    								  
							      68 COMPARE_OP 4 ( > )					    								  
							      70 POP_JUMP_IF_FALSE 102					    								  
							      								    								  
							      8 72 LOAD_FAST 2 ( count )				    								  
							      74 LOAD_FAST 3 ( i )					    								  
							      76 LOAD_CONST 3 ( 1 )					    								  
							      78 BINARY_SUBTRACT					    								  
							      80 BINARY_SUBSCR						    								  
							      82 LOAD_FAST 2 ( count )					    								  
							      84 LOAD_FAST 3 ( i )					    								  
							      86 LOAD_FAST 1 ( m )					    								  
							      88 BINARY_SUBTRACT					    								  
							      90 BINARY_SUBSCR						    								  
							      92 BINARY_ADD						    								  
							      94 LOAD_FAST 2 ( count )					    								  
							      96 LOAD_FAST 3 ( i )					    								  
							      98 STORE_SUBSCR						    								  
							      100 JUMP_ABSOLUTE 60					    								  
							      								    								  
							      9 >> 102 LOAD_FAST 3 ( i )				    								  
							      104 LOAD_FAST 1 ( m )					    								  
							      106 COMPARE_OP 0 ( < )					    								  
							      108 POP_JUMP_IF_FALSE 120					    								  
							      								    								  
							      10 110 LOAD_CONST 3 ( 1 )					    								  
							      112 LOAD_FAST 2 ( count )					    								  
							      114 LOAD_FAST 3 ( i )					    								  
							      116 STORE_SUBSCR						    								  
							      118 JUMP_ABSOLUTE 60					    								  
							      								    								  
							      12 >> 120 LOAD_CONST 1 ( 2 )				    								  
							      122 LOAD_FAST 2 ( count )					    								  
							      124 LOAD_FAST 3 ( i )					    								  
							      126 STORE_SUBSCR						    								  
							      128 JUMP_ABSOLUTE 60					    								  
							      >> 130 POP_BLOCK						    								  
							      								    								  
							      13 >> 132 LOAD_FAST 2 ( count )				    								  
							      134 LOAD_FAST 0 ( n )					    								  
							      136 BINARY_SUBSCR						    								  
							      138 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_
--							      --							    --								  --
def getMinSquares ( n ) :				      Disassembly of <code object getMinSquares at 0x7fbac0e89d20,  Disassembly of <code object getMinSquares at 0x7f816a6e4b70,  script_not_found : None
    dp = [ 0 , 1 , 2 , 3 ]				      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_FAST 0 ( n )					  
    for i in range ( 4 , n + 1 ) :			      2 LOAD_CONST 2 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
	dp.append ( i )					      4 LOAD_CONST 3 ( 2 )					    4 BINARY_ADD						  
	for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1  6 LOAD_CONST 4 ( 3 )					    6 STORE_FAST 1 ( n )					  
	    temp = x * x ;				      8 BUILD_LIST 4						    								  
	    if temp > i :				      10 STORE_FAST 1 ( dp )					    21 8 LOAD_FAST 1 ( n )					  
		break					      								    10 LOAD_CONST 2 ( 2 )					  
	    else :					      3 12 SETUP_LOOP 118 ( to 132 )				    12 BINARY_MULTIPLY						  
		dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp 14 LOAD_GLOBAL 0 ( range )				    14 STORE_FAST 2 ( n )					  
    return dp [ n ]					      16 LOAD_CONST 5 ( 4 )					    								  
							      18 LOAD_FAST 0 ( n )					    22 16 LOAD_FAST 1 ( n )					  
							      20 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 3 ( 1 )					  
							      22 BINARY_ADD						    20 BINARY_MULTIPLY						  
							      24 CALL_FUNCTION 2					    22 LOAD_FAST 2 ( n )					  
							      26 GET_ITER						    24 BINARY_MULTIPLY						  
							      >> 28 FOR_ITER 100 ( to 130 )				    26 LOAD_FAST 1 ( n )					  
							      30 STORE_FAST 2 ( i )					    28 BINARY_MULTIPLY						  
							      								    30 LOAD_FAST 2 ( n )					  
							      4 32 LOAD_FAST 1 ( dp )					    32 BINARY_MULTIPLY						  
							      34 LOAD_METHOD 1 ( append )				    34 BINARY_ADD						  
							      36 LOAD_FAST 2 ( i )					    36 LOAD_FAST 1 ( n )					  
							      38 CALL_METHOD 1						    38 BINARY_MULTIPLY						  
							      40 POP_TOP						    40 BINARY_ADD						  
							      								    42 LOAD_FAST 2 ( n )					  
							      5 42 SETUP_LOOP 84 ( to 128 )				    44 BINARY_MULTIPLY						  
							      44 LOAD_GLOBAL 0 ( range )				    46 BINARY_ADD						  
							      46 LOAD_CONST 2 ( 1 )					    48 RETURN_VALUE						  
							      48 LOAD_GLOBAL 2 ( int )					    NEW_LINE							  
							      50 LOAD_GLOBAL 3 ( ceil )					    								  
							      52 LOAD_GLOBAL 4 ( sqrt )					    								  
							      54 LOAD_FAST 2 ( i )					    								  
							      56 CALL_FUNCTION 1					    								  
							      58 CALL_FUNCTION 1					    								  
							      60 CALL_FUNCTION 1					    								  
							      62 LOAD_CONST 2 ( 1 )					    								  
							      64 BINARY_ADD						    								  
							      66 CALL_FUNCTION 2					    								  
							      68 GET_ITER						    								  
							      >> 70 FOR_ITER 54 ( to 126 )				    								  
							      72 STORE_FAST 3 ( x )					    								  
							      								    								  
							      6 74 LOAD_FAST 3 ( x )					    								  
							      76 LOAD_FAST 3 ( x )					    								  
							      78 BINARY_MULTIPLY					    								  
							      80 STORE_FAST 4 ( temp )					    								  
							      								    								  
							      7 82 LOAD_FAST 4 ( temp )					    								  
							      84 LOAD_FAST 2 ( i )					    								  
							      86 COMPARE_OP 4 ( > )					    								  
							      88 POP_JUMP_IF_FALSE 94					    								  
							      								    								  
							      8 90 BREAK_LOOP						    								  
							      92 JUMP_ABSOLUTE 70					    								  
							      								    								  
							      10 >> 94 LOAD_GLOBAL 5 ( min )				    								  
							      96 LOAD_FAST 1 ( dp )					    								  
							      98 LOAD_FAST 2 ( i )					    								  
							      100 BINARY_SUBSCR						    								  
							      102 LOAD_CONST 2 ( 1 )					    								  
							      104 LOAD_FAST 1 ( dp )					    								  
							      106 LOAD_FAST 2 ( i )					    								  
							      108 LOAD_FAST 4 ( temp )					    								  
							      110 BINARY_SUBTRACT					    								  
							      112 BINARY_SUBSCR						    								  
							      114 BINARY_ADD						    								  
							      116 CALL_FUNCTION 2					    								  
							      118 LOAD_FAST 1 ( dp )					    								  
							      120 LOAD_FAST 2 ( i )					    								  
							      122 STORE_SUBSCR						    								  
							      124 JUMP_ABSOLUTE 70					    								  
							      >> 126 POP_BLOCK						    								  
							      >> 128 JUMP_ABSOLUTE 28					    								  
							      >> 130 POP_BLOCK						    								  
							      								    								  
							      11 >> 132 LOAD_FAST 1 ( dp )				    								  
							      134 LOAD_FAST 0 ( n )					    								  
							      136 BINARY_SUBSCR						    								  
							      138 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	      HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	    HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	  HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS
--							      --							    --								  --
def findoptimal ( N ) :					      Disassembly of <code object findoptimal at 0x7fbac<<unk>> d54 Disassembly of <code object findoptimal at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    if ( N <= 6 ) :					      2 0 LOAD_FAST 0 ( N )					    26 0 LOAD_FAST 0 ( N )					  "XLM/dis_script.py", line 59, in <module>	for
	return N					      2 LOAD_CONST 1 ( 6 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    screen = [ 0 ] * N					      4 COMPARE_OP 1 ( <= )					    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    for n in range ( 1 , 7 ) :				      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( N )					  cals, co_varnames, co_names, co_consts, co_linesta
	screen [ n - 1 ] = n				      								    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
    for n in range ( 7 , N + 1 ) :			      3 8 LOAD_FAST 0 ( N )					    27 8 LOAD_FAST 1 ( N )					  pack non-iterable NoneType object
	screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
    return screen [ N - 1 ]				      								    12 BINARY_SUBSCR						  
							      4 >> 12 LOAD_CONST 2 ( 0 )				    14 STORE_FAST 2 ( N )					  
							      14 BUILD_LIST 1						    								  
							      16 LOAD_FAST 0 ( N )					    28 16 LOAD_FAST 1 ( N )					  
							      18 BINARY_MULTIPLY					    18 LOAD_CONST 3 ( 1 )					  
							      20 STORE_FAST 1 ( screen )				    20 BINARY_SUBSCR						  
							      								    22 STORE_FAST 3 ( N )					  
							      5 22 SETUP_LOOP 30 ( to 54 )				    								  
							      24 LOAD_GLOBAL 0 ( range )				    29 24 LOAD_FAST 1 ( N )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_CONST 4 ( 2 )					  
							      28 LOAD_CONST 4 ( 7 )					    28 BINARY_SUBSCR						  
							      30 CALL_FUNCTION 2					    30 STORE_FAST 4 ( N )					  
							      32 GET_ITER						    								  
							      >> 34 FOR_ITER 16 ( to 52 )				    30 32 LOAD_FAST 1 ( N )					  
							      36 STORE_FAST 2 ( n )					    34 LOAD_CONST 5 ( 1 )					  
							      								    36 BINARY_SUBSCR						  
							      6 38 LOAD_FAST 2 ( n )					    38 STORE_FAST 5 ( N )					  
							      40 LOAD_FAST 1 ( screen )					    								  
							      42 LOAD_FAST 2 ( n )					    31 40 LOAD_FAST 1 ( N )					  
							      44 LOAD_CONST 3 ( 1 )					    42 LOAD_CONST 6 ( 2 )					  
							      46 BINARY_SUBTRACT					    44 BINARY_SUBSCR						  
							      48 STORE_SUBSCR						    46 STORE_FAST 6 ( N )					  
							      50 JUMP_ABSOLUTE 34					    								  
							      >> 52 POP_BLOCK						    32 48 LOAD_FAST 1 ( N )					  
							      								    50 LOAD_CONST 7 ( 3 )					  
							      7 >> 54 SETUP_LOOP 82 ( to 138 )				    52 BINARY_SUBSCR						  
							      56 LOAD_GLOBAL 0 ( range )				    54 STORE_FAST 7 ( N )					  
							      58 LOAD_CONST 4 ( 7 )					    								  
							      60 LOAD_FAST 0 ( N )					    33 56 LOAD_FAST 1 ( N )					  
							      62 LOAD_CONST 3 ( 1 )					    58 LOAD_CONST 8 ( 2 )					  
							      64 BINARY_ADD						    60 BINARY_SUBSCR						  
							      66 CALL_FUNCTION 2					    62 STORE_FAST 8 ( N )					  
							      68 GET_ITER						    								  
							      >> 70 FOR_ITER 64 ( to 136 )				    34 64 LOAD_FAST 1 ( N )					  
							      72 STORE_FAST 2 ( n )					    66 LOAD_FAST 2 ( N )					  
							      								    68 LOAD_CONST 9 ( 3 )					  
							      8 74 LOAD_GLOBAL 1 ( max )				    70 BINARY_SUBSCR						  
							      76 LOAD_CONST 5 ( 2 )					    72 LOAD_FAST 4 ( N )					  
							      78 LOAD_FAST 1 ( screen )					    74 LOAD_CONST 10 ( 4 )					  
							      80 LOAD_FAST 2 ( n )					    76 BINARY_SUBSCR						  
							      82 LOAD_CONST 6 ( 4 )					    78 LOAD_FAST 3 ( N )					  
							      84 BINARY_SUBTRACT					    80 LOAD_CONST 11 ( 4 )					  
							      86 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      88 BINARY_MULTIPLY					    84 LOAD_FAST 7 ( N )					  
							      90 LOAD_GLOBAL 1 ( max )					    86 LOAD_CONST 12 ( ( 'N' , 'N' , 'N' , 'N' , 'N' , 'N' , 'N'  
							      92 LOAD_CONST 7 ( 3 )					    								  
							      94 LOAD_FAST 1 ( screen )					    								  
							      96 LOAD_FAST 2 ( n )					    								  
							      98 LOAD_CONST 8 ( 5 )					    								  
							      100 BINARY_SUBTRACT					    								  
							      102 BINARY_SUBSCR						    								  
							      104 BINARY_MULTIPLY					    								  
							      106 LOAD_CONST 6 ( 4 )					    								  
							      108 LOAD_FAST 1 ( screen )				    								  
							      110 LOAD_FAST 2 ( n )					    								  
							      112 LOAD_CONST 1 ( 6 )					    								  
							      114 BINARY_SUBTRACT					    								  
							      116 BINARY_SUBSCR						    								  
							      118 BINARY_MULTIPLY					    								  
							      120 CALL_FUNCTION 2					    								  
							      122 CALL_FUNCTION 2					    								  
							      124 LOAD_FAST 1 ( screen )				    								  
							      126 LOAD_FAST 2 ( n )					    								  
							      128 LOAD_CONST 3 ( 1 )					    								  
							      130 BINARY_SUBTRACT					    								  
							      132 STORE_SUBSCR						    								  
							      134 JUMP_ABSOLUTE 70					    								  
							      >> 136 POP_BLOCK						    								  
							      								    								  
							      9 >> 138 LOAD_FAST 1 ( screen )				    								  
							      140 LOAD_FAST 0 ( N )					    								  
							      142 LOAD_CONST 3 ( 1 )					    								  
							      144 BINARY_SUBTRACT					    								  
							      146 BINARY_SUBSCR						    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1
--							      --							    --								  --
def findMaxAverage ( arr , n , k ) :			      Disassembly of <code object findMaxAverage at 0x7fbac<<unk>>  Disassembly of <code object findMaxAverage at 0x7f816a6e4b70, error : Traceback (most recent call last):   File
    if ( k > n ) :					      2 0 LOAD_FAST 2 ( k )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
	return - 1					      2 LOAD_FAST 1 ( n )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    sum = arr [ 0 ]					      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 2 ( == )					  y", line 54, in run_dis_script     hyp_co = mco.to
    for i in range ( 1 , k ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	sum += arr [ i ]				      								    								  assembler.py", line 81, in to_co     co_consts.app
    max_sum = sum					      3 8 LOAD_CONST 1 ( - 1 )					    27 8 LOAD_FAST 1 ( n )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    max_end = k - 1					      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 2 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    for i in range ( k , n ) :				      								    12 COMPARE_OP 2 ( == )					  co	 self.co_cellvars, ValueError: code: varname
	sum = sum + arr [ i ] - arr [ i - k ]		      4 >> 12 LOAD_FAST 0 ( arr )				    14 POP_JUMP_IF_FALSE 28					  s is too small
	if ( sum > max_sum ) :				      14 LOAD_CONST 2 ( 0 )					    								  
	    max_sum = sum				      16 BINARY_SUBSCR						    28 >> 16 LOAD_FAST 1 ( n )					  
	    max_end = i					      18 STORE_FAST 3 ( sum )					    18 LOAD_CONST 3 ( 1 )					  
    return max_end - k + 1				      								    20 COMPARE_OP 2 ( == )					  
							      5 20 SETUP_LOOP 30 ( to 52 )				    22 POP_JUMP_IF_FALSE 28					  
							      22 LOAD_GLOBAL 0 ( range )				    								  
							      24 LOAD_CONST 3 ( 1 )					    29 24 LOAD_FAST 1 ( n )					  
							      26 LOAD_FAST 2 ( k )					    26 LOAD_CONST 4 ( 2 )					  
							      28 CALL_FUNCTION 2					    28 COMPARE_OP 2 ( == )					  
							      30 GET_ITER						    30 POP_JUMP_IF_FALSE 28					  
							      >> 32 FOR_ITER 16 ( to 50 )				    								  
							      34 STORE_FAST 4 ( i )					    30 32 LOAD_FAST 1 ( n )					  
							      								    34 LOAD_CONST 5 ( 1 )					  
							      6 36 LOAD_FAST 3 ( sum )					    36 COMPARE_OP 2 ( == )					  
							      38 LOAD_FAST 0 ( arr )					    38 POP_JUMP_IF_FALSE 44					  
							      40 LOAD_FAST 4 ( i )					    								  
							      42 BINARY_SUBSCR						    31 40 LOAD_FAST 1 ( n )					  
							      44 INPLACE_ADD						    42 LOAD_CONST 6 ( 2 )					  
							      46 STORE_FAST 3 ( sum )					    44 COMPARE_OP 2 ( == )					  
							      48 JUMP_ABSOLUTE 32					    46 POP_JUMP_IF_FALSE 44					  
							      >> 50 POP_BLOCK						    								  
							      								    32 48 LOAD_FAST 1 ( n )					  
							      7 >> 52 LOAD_FAST 3 ( sum )				    50 LOAD_CONST 7 ( 2 )					  
							      54 STORE_FAST 5 ( max_sum )				    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 44					  
							      8 56 LOAD_FAST 2 ( k )					    								  
							      58 LOAD_CONST 3 ( 1 )					    33 56 LOAD_FAST 1 ( n )					  
							      60 BINARY_SUBTRACT					    58 LOAD_CONST 8 ( 2 )					  
							      62 STORE_FAST 6 ( max_end )				    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 44					  
							      9 64 SETUP_LOOP 58 ( to 124 )				    								  
							      66 LOAD_GLOBAL 0 ( range )				    34 64 LOAD_FAST 1 ( n )					  
							      68 LOAD_FAST 2 ( k )					    66 LOAD_CONST 9 ( 2 )					  
							      70 LOAD_FAST 1 ( n )					    68 COMPARE_OP 2 ( == )					  
							      72 CALL_FUNCTION 2					    70 POP_JUMP_IF_FALSE 80					  
							      74 GET_ITER						    								  
							      >> 76 FOR_ITER 44 ( to 122 )				    35 72 LOAD_FAST 1 ( n )					  
							      78 STORE_FAST 4 ( i )					    74 LOAD_CONST 10 ( 2 )					  
							      								    76 COMPARE_OP 2 ( == )					  
							      10 80 LOAD_FAST 3 ( sum )					    78 POP_JUMP_IF_FALSE 80					  
							      82 LOAD_FAST 0 ( arr )					    								  
							      84 LOAD_FAST 4 ( i )					    36 80 LOAD_FAST 1 ( n )					  
							      86 BINARY_SUBSCR						    82 LOAD_CONST 11 ( 2 )					  
							      88 BINARY_ADD						    84 COMPARE_OP 2 ( == )					  
							      90 LOAD_FAST 0 ( arr )					    86 POP_JUMP_IF_FALSE 80					  
							      92 LOAD_FAST 4 ( i )					    								  
							      94 LOAD_FAST 2 ( k )					    37 88 LOAD_FAST 1 ( n )					  
							      96 BINARY_SUBTRACT					    90 LOAD_CONST 12 ( 2 )					  
							      98 BINARY_SUBSCR						    92 COMPARE_OP 2 ( == )					  
							      100 BINARY_SUBTRACT					    94 POP_JUMP_IF_FALSE 80					  
							      102 STORE_FAST 3 ( sum )					    								  
							      								    38 >> 96 LOAD_FAST 1 ( n )					  
							      11 104 LOAD_FAST 3 ( sum )				    98 LOAD_CONST 12 ( 2 )					  
							      106 LOAD_FAST 5 ( max_sum )				    100 COMPARE_OP 2 ( == )					  
							      108 COMPARE_OP 4 ( > )					    102 POP_JUMP_IF_FALSE 80					  
							      110 POP_JUMP_IF_FALSE 76					    								  
							      								    39 104 LOAD_FAST 1 ( n )					  
							      12 112 LOAD_FAST 3 ( sum )				    106 LOAD_CONST 13 ( 1 )					  
							      114 STORE_FAST 5 ( max_sum )				    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 80					  
							      13 116 LOAD_FAST 4 ( i )					    								  
							      118 STORE_FAST 6 ( max_end )				    40 112 LOAD_FAST 1 ( n )					  
							      120 JUMP_ABSOLUTE 76					    114 LOAD_CONST 6 ( 2 )					  
							      >> 122 POP_BLOCK						    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 80					  
							      14 >> 124 LOAD_FAST 6 ( max_end )				    								  
							      126 LOAD_FAST 2 ( k )					    41 120 LOAD_FAST 1 ( n )					  
							      128 BINARY_SUBTRACT					    122 LOAD_CONST 6 ( 2 )					  
							      130 LOAD_CONST 3 ( 1 )					    124 COMPARE_OP 2 ( == )					  
							      132 BINARY_ADD						    126 POP_JUMP_IF_FALSE 128					  
							      134 RETURN_VALUE NEW_LINE					    								  
							      								    42 128 LOAD_FAST 1 ( n )					  
							      								    130 LOAD_CONST 6 ( 2 )					  
							      								    132 COMPARE_OP 2 ( == )					  
							      								    134 POP_JUMP_IF_FALSE 130					  
							      								    								  
							      								    43 136 LOAD_FAST 1 ( n )					  
							      								    138 LOAD_CONST 6 ( 2 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 146					  
							      								    								  
							      								    44 144 LOAD_FAST 1 ( n )					  
							      								    146 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1
--							      --							    --								  --
def substringConversions ( str1 , k , b ) :		      Disassembly of <code object substringConversions at 0x7fbac0e Disassembly of <code object substringConversions at 0x7f816a6 script_not_found : None
    for i in range ( 0 , len ( str1 ) - k + 1 ) :	      2 0 SETUP_LOOP 138 ( to 140 )				    26 0 SETUP_LOOP 22 ( to 24 )				  
	sub = str1 [ i : k + i ]			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	Sum = 0						      4 LOAD_CONST 1 ( 0 )					    4 LOAD_FAST 1 ( k )						  
	counter = 0					      6 LOAD_GLOBAL 1 ( len )					    6 CALL_FUNCTION 1						  
	for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :      8 LOAD_FAST 0 ( str1 )					    8 GET_ITER							  
	    Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) 10 CALL_FUNCTION 1					    >> 10 FOR_ITER 14 ( to 22 )					  
	    counter += 1				      12 LOAD_FAST 1 ( k )					    12 STORE_FAST 2 ( i )					  
	print ( Sum , end = " " )			      14 BINARY_SUBTRACT					    								  
							      16 LOAD_CONST 2 ( 1 )					    27 14 LOAD_FAST 2 ( i )					  
							      18 BINARY_ADD						    16 LOAD_CONST 1 ( 1 )					  
							      20 CALL_FUNCTION 2					    18 INPLACE_ADD						  
							      22 GET_ITER						    20 STORE_FAST 2 ( i )					  
							      >> 24 FOR_ITER 112 ( to 138 )				    								  
							      26 STORE_FAST 3 ( i )					    28 22 LOAD_FAST 2 ( i )					  
							      								    24 LOAD_CONST 2 ( 2 )					  
							      3 28 LOAD_FAST 0 ( str1 )					    26 INPLACE_ADD						  
							      30 LOAD_FAST 3 ( i )					    28 STORE_FAST 2 ( i )					  
							      32 LOAD_FAST 1 ( k )					    30 JUMP_ABSOLUTE 10						  
							      34 LOAD_FAST 3 ( i )					    >> 32 POP_BLOCK						  
							      36 BINARY_ADD						    >> 34 LOAD_CONST 3 ( None )					  
							      38 BUILD_SLICE 2						    36 RETURN_VALUE						  
							      40 BINARY_SUBSCR						    NEW_LINE							  
							      42 STORE_FAST 4 ( sub )					    								  
							      								    								  
							      4 44 LOAD_CONST 1 ( 0 )					    								  
							      46 STORE_FAST 5 ( Sum )					    								  
							      								    								  
							      5 48 LOAD_CONST 1 ( 0 )					    								  
							      50 STORE_FAST 6 ( counter )				    								  
							      								    								  
							      6 52 SETUP_LOOP 70 ( to 124 )				    								  
							      54 LOAD_GLOBAL 0 ( range )				    								  
							      56 LOAD_GLOBAL 1 ( len )					    								  
							      58 LOAD_FAST 4 ( sub )					    								  
							      60 CALL_FUNCTION 1					    								  
							      62 LOAD_CONST 2 ( 1 )					    								  
							      64 BINARY_SUBTRACT					    								  
							      66 LOAD_CONST 3 ( - 1 )					    								  
							      68 LOAD_CONST 3 ( - 1 )					    								  
							      70 CALL_FUNCTION 3					    								  
							      72 GET_ITER						    								  
							      >> 74 FOR_ITER 46 ( to 122 )				    								  
							      76 STORE_FAST 3 ( i )					    								  
							      								    								  
							      7 78 LOAD_FAST 5 ( Sum )					    								  
							      80 LOAD_GLOBAL 2 ( ord )					    								  
							      82 LOAD_FAST 4 ( sub )					    								  
							      84 LOAD_FAST 3 ( i )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 CALL_FUNCTION 1					    								  
							      90 LOAD_GLOBAL 2 ( ord )					    								  
							      92 LOAD_CONST 4 ( '0' )					    								  
							      94 CALL_FUNCTION 1					    								  
							      96 BINARY_SUBTRACT					    								  
							      98 LOAD_GLOBAL 3 ( pow )					    								  
							      100 LOAD_FAST 2 ( b )					    								  
							      102 LOAD_FAST 6 ( counter )				    								  
							      104 CALL_FUNCTION 2					    								  
							      106 BINARY_MULTIPLY					    								  
							      108 BINARY_ADD						    								  
							      110 STORE_FAST 5 ( Sum )					    								  
							      								    								  
							      8 112 LOAD_FAST 6 ( counter )				    								  
							      114 LOAD_CONST 2 ( 1 )					    								  
							      116 INPLACE_ADD						    								  
							      118 STORE_FAST 6 ( counter )				    								  
							      120 JUMP_ABSOLUTE 74					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      9 >> 124 LOAD_GLOBAL 4 ( print )				    								  
							      126 LOAD_FAST 5 ( Sum )					    								  
							      128 LOAD_CONST 5 ( ' ' )					    								  
							      130 LOAD_CONST 6 ( ( 'end' , ) )				    								  
							      132 CALL_FUNCTION_KW 2					    								  
							      134 POP_TOP						    								  
							      136 JUMP_ABSOLUTE 24					    								  
							      >> 138 POP_BLOCK						    								  
							      >> 140 LOAD_CONST 0 ( None )				    								  
							      142 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_
--							      --							    --								  --
def maxSum ( arr ) :					      Disassembly of <code object maxSum at 0x7fbac<<unk>> de40, fi Disassembly of <code object maxSum at 0x7f816a673a50, file "< script_not_found : None
    arrSum = 0						      2 0 LOAD_CONST 1 ( 0 )					    20 0 LOAD_GLOBAL 0 ( arrSum )				  
    currVal = 0						      2 STORE_FAST 1 ( arrSum )					    2 LOAD_FAST 0 ( arr )					  
    n = len ( arr )					      								    4 CALL_FUNCTION 1						  
    for i in range ( 0 , n ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 1 ( n )					  
	arrSum = arrSum + arr [ i ]			      6 STORE_FAST 2 ( currVal )				    								  
	currVal = currVal + ( i * arr [ i ] )		      								    21 8 LOAD_GLOBAL 1 ( arrSum )				  
    maxVal = currVal					      4 8 LOAD_GLOBAL 0 ( len )					    10 LOAD_FAST 1 ( n )					  
    for j in range ( 1 , n ) :				      10 LOAD_FAST 0 ( arr )					    12 LOAD_FAST 0 ( arr )					  
	currVal = currVal + arrSum - n * arr [ n - j ]	      12 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
	if currVal > maxVal :				      14 STORE_FAST 3 ( n )					    16 STORE_FAST 2 ( a )					  
	    maxVal = currVal				      								    								  
    return maxVal					      5 16 SETUP_LOOP 46 ( to 64 )				    22 18 LOAD_FAST 2 ( a )					  
							      18 LOAD_GLOBAL 1 ( range )				    20 LOAD_FAST 1 ( n )					  
							      20 LOAD_CONST 1 ( 0 )					    22 COMPARE_OP 0 ( < )					  
							      22 LOAD_FAST 3 ( n )					    24 POP_JUMP_IF_FALSE 30					  
							      24 CALL_FUNCTION 2					    								  
							      26 GET_ITER						    23 26 LOAD_FAST 2 ( a )					  
							      >> 28 FOR_ITER 32 ( to 62 )				    28 LOAD_FAST 0 ( arr )					  
							      30 STORE_FAST 4 ( i )					    30 LOAD_FAST 1 ( n )					  
							      								    32 BINARY_SUBSCR						  
							      6 32 LOAD_FAST 1 ( arrSum )				    34 STORE_FAST 3 ( b )					  
							      34 LOAD_FAST 0 ( arr )					    								  
							      36 LOAD_FAST 4 ( i )					    25 36 LOAD_FAST 3 ( b )					  
							      38 BINARY_SUBSCR						    38 LOAD_FAST 2 ( a )					  
							      40 BINARY_ADD						    40 LOAD_FAST 3 ( b )					  
							      42 STORE_FAST 1 ( arrSum )				    42 LOAD_FAST 1 ( n )					  
							      								    44 LOAD_FAST 3 ( b )					  
							      7 44 LOAD_FAST 2 ( currVal )				    46 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 4 ( i )					    48 LOAD_FAST 2 ( a )					  
							      48 LOAD_FAST 0 ( arr )					    50 LOAD_FAST 3 ( b )					  
							      50 LOAD_FAST 4 ( i )					    52 LOAD_FAST 1 ( n )					  
							      52 BINARY_SUBSCR						    54 LOAD_FAST 3 ( b )					  
							      54 BINARY_MULTIPLY					    56 LOAD_FAST 1 ( n )					  
							      56 BINARY_ADD						    58 LOAD_FAST 3 ( b )					  
							      58 STORE_FAST 2 ( currVal )				    60 LOAD_FAST 1 ( n )					  
							      60 JUMP_ABSOLUTE 28					    62 LOAD_FAST 3 ( b )					  
							      >> 62 POP_BLOCK						    64 LOAD_FAST 1 ( n )					  
							      								    66 LOAD_FAST 3 ( b )					  
							      8 >> 64 LOAD_FAST 2 ( currVal )				    68 LOAD_FAST 1 ( n )					  
							      66 STORE_FAST 5 ( maxVal )				    70 LOAD_FAST 3 ( b )					  
							      								    72 LOAD_FAST 1 ( n )					  
							      9 68 SETUP_LOOP 54 ( to 124 )				    74 LOAD_FAST 3 ( b )					  
							      70 LOAD_GLOBAL 1 ( range )				    76 LOAD_FAST 1 ( n )					  
							      72 LOAD_CONST 2 ( 1 )					    78 LOAD_FAST 3 ( b )					  
							      74 LOAD_FAST 3 ( n )					    80 LOAD_FAST 1 ( n )					  
							      76 CALL_FUNCTION 2					    82 LOAD_FAST 3 ( b )					  
							      78 GET_ITER						    84 LOAD_FAST 1 ( n )					  
							      >> 80 FOR_ITER 40 ( to 122 )				    86 LOAD_FAST 3 ( b )					  
							      82 STORE_FAST 6 ( j )					    88 LOAD_FAST 1 ( n )					  
							      								    90 LOAD_FAST 3 ( b )					  
							      10 84 LOAD_FAST 2 ( currVal )				    92 LOAD_FAST 1 ( n )					  
							      86 LOAD_FAST 1 ( arrSum )					    94 LOAD_FAST 3 ( b )					  
							      88 BINARY_ADD						    96 LOAD_FAST 2 ( a )					  
							      90 LOAD_FAST 3 ( n )					    98 LOAD_FAST 3 ( b )					  
							      92 LOAD_FAST 0 ( arr )					    100 LOAD_FAST 1 ( n )					  
							      94 LOAD_FAST 3 ( n )					    102 LOAD_FAST 3 ( b )					  
							      96 LOAD_FAST 6 ( j )					    104 LOAD_FAST 1 ( n )					  
							      98 BINARY_SUBTRACT					    106 LOAD_FAST 3 ( b )					  
							      100 BINARY_SUBSCR						    108 LOAD_FAST 1 ( n )					  
							      102 BINARY_MULTIPLY					    110 LOAD_FAST 3 ( b )					  
							      104 BINARY_SUBTRACT					    112 BUILD_TUPLE 4						  
							      106 STORE_FAST 2 ( currVal )				    114 CALL_FUNCTION 4						  
							      								    116 RETURN_VALUE						  
							      11 108 LOAD_FAST 2 ( currVal )				    NEW_LINE							  
							      110 LOAD_FAST 5 ( maxVal )				    								  
							      112 COMPARE_OP 4 ( > )					    								  
							      114 POP_JUMP_IF_FALSE 80					    								  
							      								    								  
							      12 116 LOAD_FAST 2 ( currVal )				    								  
							      118 STORE_FAST 5 ( maxVal )				    								  
							      120 JUMP_ABSOLUTE 80					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      13 >> 124 LOAD_FAST 5 ( maxVal )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			      REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM
--							      --							    --								  --
def rearrange ( arr , n ) :				      Disassembly of <code object rearrange at 0x7fbac0e89d20, file Disassembly of <code object rearrange at 0x7f816a6e4b70, file error : Traceback (most recent call last):   File
    temp = n * [ None ]					      2 0 LOAD_FAST 1 ( n )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    small , large = 0 , n - 1				      2 LOAD_CONST 0 ( None )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    flag = True						      4 BUILD_LIST 1						    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( n ) :				      6 BINARY_MULTIPLY						    6 STORE_FAST 2 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
	if flag is True :				      8 STORE_FAST 2 ( temp )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	    temp [ i ] = arr [ large ]			      								    27 8 LOAD_FAST 2 ( n )					  pack non-iterable NoneType object
	    large -= 1					      3 10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
	else :						      12 LOAD_FAST 1 ( n )					    12 BINARY_SUBSCR						  
	    temp [ i ] = arr [ small ]			      14 LOAD_CONST 2 ( 1 )					    14 STORE_FAST 3 ( n )					  
	    small += 1					      16 BINARY_SUBTRACT					    								  
	flag = bool ( 1 - flag )			      18 ROT_TWO						    28 16 LOAD_FAST 0 ( arr )					  
    for i in range ( n ) :				      20 STORE_FAST 3 ( small )					    18 LOAD_CONST 3 ( 1 )					  
	arr [ i ] = temp [ i ]				      22 STORE_FAST 4 ( large )					    20 BINARY_SUBSCR						  
    return arr						      								    22 STORE_FAST 4 ( n )					  
							      4 24 LOAD_CONST 3 ( True )				    								  
							      26 STORE_FAST 5 ( flag )					    29 24 LOAD_FAST 1 ( n )					  
							      								    26 LOAD_CONST 4 ( 1 )					  
							      5 28 SETUP_LOOP 78 ( to 108 )				    28 BINARY_SUBSCR						  
							      30 LOAD_GLOBAL 0 ( range )				    30 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_FAST 1 ( n )					    32 BINARY_SUBSCR						  
							      34 CALL_FUNCTION 1					    34 LOAD_CONST 6 ( 2 )					  
							      36 GET_ITER						    36 BINARY_SUBSCR						  
							      >> 38 FOR_ITER 66 ( to 106 )				    38 STORE_FAST 5 ( n )					  
							      40 STORE_FAST 6 ( i )					    								  
							      								    30 40 LOAD_FAST 0 ( arr )					  
							      6 42 LOAD_FAST 5 ( flag )					    42 LOAD_CONST 7 ( 1 )					  
							      44 LOAD_CONST 3 ( True )					    44 BINARY_SUBSCR						  
							      46 COMPARE_OP 8 ( is )					    46 LOAD_CONST 8 ( 2 )					  
							      48 POP_JUMP_IF_FALSE 72					    48 BINARY_SUBSCR						  
							      								    50 LOAD_CONST 9 ( 1 )					  
							      7 50 LOAD_FAST 0 ( arr )					    52 BINARY_SUBSCR						  
							      52 LOAD_FAST 4 ( large )					    54 LOAD_CONST 10 ( 2 )					  
							      54 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      56 LOAD_FAST 2 ( temp )					    58 LOAD_CONST 11 ( 3 )					  
							      58 LOAD_FAST 6 ( i )					    60 BINARY_SUBSCR						  
							      60 STORE_SUBSCR						    62 LOAD_CONST 12 ( '					  
							      								    								  
							      8 62 LOAD_FAST 4 ( large )				    								  
							      64 LOAD_CONST 2 ( 1 )					    								  
							      66 INPLACE_SUBTRACT					    								  
							      68 STORE_FAST 4 ( large )					    								  
							      70 JUMP_FORWARD 20 ( to 92 )				    								  
							      								    								  
							      10 >> 72 LOAD_FAST 0 ( arr )				    								  
							      74 LOAD_FAST 3 ( small )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 LOAD_FAST 2 ( temp )					    								  
							      80 LOAD_FAST 6 ( i )					    								  
							      82 STORE_SUBSCR						    								  
							      								    								  
							      11 84 LOAD_FAST 3 ( small )				    								  
							      86 LOAD_CONST 2 ( 1 )					    								  
							      88 INPLACE_ADD						    								  
							      90 STORE_FAST 3 ( small )					    								  
							      								    								  
							      12 >> 92 LOAD_GLOBAL 1 ( bool )				    								  
							      94 LOAD_CONST 2 ( 1 )					    								  
							      96 LOAD_FAST 5 ( flag )					    								  
							      98 BINARY_SUBTRACT					    								  
							      100 CALL_FUNCTION 1					    								  
							      102 STORE_FAST 5 ( flag )					    								  
							      104 JUMP_ABSOLUTE 38					    								  
							      >> 106 POP_BLOCK						    								  
							      								    								  
							      13 >> 108 SETUP_LOOP 28 ( to 138 )			    								  
							      110 LOAD_GLOBAL 0 ( range )				    								  
							      112 LOAD_FAST 1 ( n )					    								  
							      114 CALL_FUNCTION 1					    								  
							      116 GET_ITER						    								  
							      >> 118 FOR_ITER 16 ( to 136 )				    								  
							      120 STORE_FAST 6 ( i )					    								  
							      								    								  
							      14 122 LOAD_FAST 2 ( temp )				    								  
							      124 LOAD_FAST 6 ( i )					    								  
							      126 BINARY_SUBSCR						    								  
							      128 LOAD_FAST 0 ( arr )					    								  
							      130 LOAD_FAST 6 ( i )					    								  
							      132 STORE_SUBSCR						    								  
							      134 JUMP_ABSOLUTE 118					    								  
							      >> 136 POP_BLOCK						    								  
							      								    								  
							      15 >> 138 LOAD_FAST 0 ( arr )				    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			      PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			    PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP				  PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP
--							      --							    --								  --
def printAllAPTriplets ( arr , n ) :			      Disassembly of <code object printAllAPTriplets at 0x7fbac<<un Disassembly of <code object printAllAPTriplets at 0x7f816a673 script_not_found : None
    s = [ ] ;						      2 0 BUILD_LIST 0						    65 0 LOAD_FAST 1 ( n )					  
    for i in range ( 0 , n - 1 ) :			      2 STORE_FAST 2 ( s )					    2 LOAD_CONST 1 ( 0 )					  
	for j in range ( i + 1 , n ) :			      								    4 BINARY_SUBSCR						  
	    diff = arr [ j ] - arr [ i ] ;		      3 4 SETUP_LOOP 116 ( to 122 )				    6 STORE_FAST 2 ( s )					  
	    if ( ( arr [ i ] - diff ) in arr ) :	      6 LOAD_GLOBAL 0 ( range )					    								  
		print ( "{} {} {}".format ( ( arr [ i ] - dif 8 LOAD_CONST 1 ( 0 )					    66 8 LOAD_FAST 2 ( s )					  
    s.append ( arr [ i ] ) ;				      10 LOAD_FAST 1 ( n )					    10 LOAD_CONST 2 ( 1 )					  
							      12 LOAD_CONST 2 ( 1 )					    12 BINARY_SUBSCR						  
							      14 BINARY_SUBTRACT					    14 STORE_FAST 3 ( s )					  
							      16 CALL_FUNCTION 2					    								  
							      18 GET_ITER						    67 16 LOAD_FAST 3 ( s )					  
							      >> 20 FOR_ITER 98 ( to 120 )				    18 LOAD_CONST 3 ( '%s = %s' )				  
							      22 STORE_FAST 3 ( i )					    20 LOAD_FAST 1 ( n )					  
							      								    22 BINARY_MODULO						  
							      4 24 SETUP_LOOP 92 ( to 118 )				    24 STORE_FAST 4 ( s )					  
							      26 LOAD_GLOBAL 0 ( range )				    								  
							      28 LOAD_FAST 3 ( i )					    68 26 LOAD_FAST 0 ( arr )					  
							      30 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 4 ( '%s = %s' )				  
							      32 BINARY_ADD						    30 LOAD_FAST 1 ( n )					  
							      34 LOAD_FAST 1 ( n )					    32 BINARY_MODULO						  
							      36 CALL_FUNCTION 2					    34 STORE_FAST 5 ( s )					  
							      38 GET_ITER						    								  
							      >> 40 FOR_ITER 74 ( to 116 )				    69 36 LOAD_FAST 0 ( arr )					  
							      42 STORE_FAST 4 ( j )					    38 LOAD_CONST 5 ( '%s = %s' )				  
							      								    40 LOAD_FAST 1 ( n )					  
							      5 44 LOAD_FAST 0 ( arr )					    42 BINARY_MODULO						  
							      46 LOAD_FAST 4 ( j )					    44 LOAD_FAST 5 ( s )					  
							      48 BINARY_SUBSCR						    46 BINARY_MODULO						  
							      50 LOAD_FAST 0 ( arr )					    48 BUILD_TUPLE 2						  
							      52 LOAD_FAST 3 ( i )					    50 BINARY_MODULO						  
							      54 BINARY_SUBSCR						    52 RETURN_VALUE						  
							      56 BINARY_SUBTRACT					    NEW_LINE							  
							      58 STORE_FAST 5 ( diff )					    								  
							      								    								  
							      6 60 LOAD_FAST 0 ( arr )					    								  
							      62 LOAD_FAST 3 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 5 ( diff )					    								  
							      68 BINARY_SUBTRACT					    								  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 COMPARE_OP 6 ( in )					    								  
							      74 POP_JUMP_IF_FALSE 40					    								  
							      								    								  
							      7 76 LOAD_GLOBAL 1 ( print )				    								  
							      78 LOAD_CONST 3 ( '{} {} {}' )				    								  
							      80 LOAD_METHOD 2 ( format )				    								  
							      82 LOAD_FAST 0 ( arr )					    								  
							      84 LOAD_FAST 3 ( i )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_FAST 5 ( diff )					    								  
							      90 BINARY_SUBTRACT					    								  
							      92 LOAD_FAST 0 ( arr )					    								  
							      94 LOAD_FAST 3 ( i )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 LOAD_FAST 0 ( arr )					    								  
							      100 LOAD_FAST 4 ( j )					    								  
							      102 BINARY_SUBSCR						    								  
							      104 CALL_METHOD 3						    								  
							      106 LOAD_CONST 4 ( '\n' )					    								  
							      108 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      110 CALL_FUNCTION_KW 2					    								  
							      112 POP_TOP						    								  
							      114 JUMP_ABSOLUTE 40					    								  
							      >> 116 POP_BLOCK						    								  
							      >> 118 JUMP_ABSOLUTE 20					    								  
							      >> 120 POP_BLOCK						    								  
							      								    								  
							      8 >> 122 LOAD_FAST 2 ( s )				    								  
							      124 LOAD_METHOD 3 ( append )				    								  
							      126 LOAD_FAST 0 ( arr )					    								  
							      128 LOAD_FAST 3 ( i )					    								  
							      130 BINARY_SUBSCR						    								  
							      132 CALL_METHOD 1						    								  
							      134 POP_TOP						    								  
							      136 LOAD_CONST 0 ( None )					    								  
							      138 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_TRIANGLE				      MAXIMUM_PATH_SUM_TRIANGLE					    MAXIMUM_PATH_SUM_TRIANGLE					  MAXIMUM_PATH_SUM_TRIANGLE
--							      --							    --								  --
def maxPathSum ( tri , m , n ) :			      Disassembly of <code object maxPathSum at 0x7fbac<<unk>> d540 Disassembly of <code object maxPathSum at 0x7f816a673a50, fil script_not_found : None
    for i in range ( m - 1 , - 1 , - 1 ) :		      2 0 SETUP_LOOP 152 ( to 154 )				    108 0 SETUP_LOOP 22 ( to 24 )				  
	for j in range ( i + 1 ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1  4 LOAD_FAST 1 ( m )					    4 LOAD_CONST 1 ( - 1 )					  
		tri [ i ] [ j ] += tri [ i + 1 ] [ j ]	      6 LOAD_CONST 1 ( 1 )					    6 CALL_FUNCTION 1						  
	    else :					      8 BINARY_SUBTRACT						    8 GET_ITER							  
		tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]    10 LOAD_CONST 2 ( - 1 )					    >> 10 FOR_ITER 14 ( to 22 )					  
    return tri [ 0 ] [ 0 ]				      12 LOAD_CONST 2 ( - 1 )					    12 STORE_FAST 1 ( m )					  
							      14 CALL_FUNCTION 3					    								  
							      16 GET_ITER						    109 14 LOAD_FAST 0 ( tri )					  
							      >> 18 FOR_ITER 132 ( to 152 )				    16 LOAD_METHOD 1 ( tri )					  
							      20 STORE_FAST 3 ( i )					    18 LOAD_FAST 1 ( m )					  
							      								    20 CALL_METHOD 1						  
							      3 22 SETUP_LOOP 126 ( to 150 )				    22 STORE_FAST 2 ( tri )					  
							      24 LOAD_GLOBAL 0 ( range )				    								  
							      26 LOAD_FAST 3 ( i )					    110 24 LOAD_FAST 2 ( tri )					  
							      28 LOAD_CONST 1 ( 1 )					    26 LOAD_METHOD 2 ( tri )					  
							      30 BINARY_ADD						    28 CALL_METHOD 0						  
							      32 CALL_FUNCTION 1					    30 STORE_FAST 3 ( tri )					  
							      34 GET_ITER						    32 JUMP_ABSOLUTE 10						  
							      >> 36 FOR_ITER 110 ( to 148 )				    >> 34 POP_BLOCK						  
							      38 STORE_FAST 4 ( j )					    								  
							      								    111 >> 36 LOAD_FAST 0 ( tri )				  
							      4 40 LOAD_FAST 0 ( tri )					    38 LOAD_METHOD 3 ( tri )					  
							      42 LOAD_FAST 3 ( i )					    40 CALL_METHOD 0						  
							      44 LOAD_CONST 1 ( 1 )					    42 STORE_FAST 4 ( tri )					  
							      46 BINARY_ADD						    								  
							      48 BINARY_SUBSCR						    112 44 LOAD_FAST 0 ( tri )					  
							      50 LOAD_FAST 4 ( j )					    46 LOAD_METHOD 4 ( tri )					  
							      52 BINARY_SUBSCR						    48 CALL_METHOD 0						  
							      54 LOAD_FAST 0 ( tri )					    50 STORE_FAST 5 ( tri )					  
							      56 LOAD_FAST 3 ( i )					    52 LOAD_FAST 4 ( tri )					  
							      58 LOAD_CONST 1 ( 1 )					    54 LOAD_METHOD 5 ( tri )					  
							      60 BINARY_ADD						    56 CALL_METHOD 0						  
							      62 BINARY_SUBSCR						    58 STORE_FAST 6 ( tri )					  
							      64 LOAD_FAST 4 ( j )					    								  
							      66 LOAD_CONST 1 ( 1 )					    113 60 LOAD_FAST 4 ( tri )					  
							      68 BINARY_ADD						    62 LOAD_METHOD 6 ( tri )					  
							      70 BINARY_SUBSCR						    64 CALL_METHOD 0						  
							      72 COMPARE_OP 4 ( > )					    66 STORE_FAST 7 ( tri )					  
							      74 POP_JUMP_IF_FALSE 110					    								  
							      								    114 68 LOAD_FAST 0 ( tri )					  
							      5 76 LOAD_FAST 0 ( tri )					    70 LOAD_METHOD 7 ( tri )					  
							      78 LOAD_FAST 3 ( i )					    72 CALL_METHOD 0						  
							      80 BINARY_SUBSCR						    74 STORE_FAST 8 ( tri )					  
							      82 LOAD_FAST 4 ( j )					    								  
							      84 DUP_TOP_TWO						    115 76 LOAD_FAST 0 ( tri )					  
							      86 BINARY_SUBSCR						    78 LOAD_METHOD 8 ( tri )					  
							      88 LOAD_FAST 0 ( tri )					    80 CALL_METHOD 0						  
							      90 LOAD_FAST 3 ( i )					    82 STORE_FAST 9 ( tri )					  
							      92 LOAD_CONST 1 ( 1 )					    								  
							      94 BINARY_ADD						    116 84 LOAD_FAST 7 ( tri )					  
							      96 BINARY_SUBSCR						    86 LOAD_METHOD 9 ( tri )					  
							      98 LOAD_FAST 4 ( j )					    88 CALL_METHOD 0						  
							      100 BINARY_SUBSCR						    90 STORE_FAST 10 ( tri )					  
							      102 INPLACE_ADD						    								  
							      104 ROT_THREE						    117 92 LOAD_FAST 8 ( tri )					  
							      106 STORE_SUBSCR						    94 LOAD_METHOD 10 ( tri )					  
							      108 JUMP_ABSOLUTE 36					    96 CALL_METHOD 0						  
							      								    98 STORE_FAST 11 ( tri )					  
							      7 >> 110 LOAD_FAST 0 ( tri )				    								  
							      112 LOAD_FAST 3 ( i )					    118 100 LOAD_FAST 9 ( tri )					  
							      114 BINARY_SUBSCR						    102 LOAD_METHOD 11 ( tri )					  
							      116 LOAD_FAST 4 ( j )					    104 CALL_METHOD 0						  
							      118 DUP_TOP_TWO						    106 STORE_FAST 12 ( tri )					  
							      120 BINARY_SUBSCR						    								  
							      122 LOAD_FAST 0 ( tri )					    119 108 LOAD_FAST 10 ( tri )				  
							      124 LOAD_FAST 3 ( i )					    110 LOAD_METHOD 12 ( tri )					  
							      126 LOAD_CONST 1 ( 1 )					    112 CALL_METHOD 0						  
							      128 BINARY_ADD						    114 STORE_FAST 13 ( tri )					  
							      130 BINARY_SUBSCR						    								  
							      132 LOAD_FAST 4 ( j )					    120 116 LOAD_FAST 11 ( tri )				  
							      134 LOAD_CONST 1 ( 1 )					    118 LOAD_METHOD 13 ( tri )					  
							      136 BINARY_ADD						    120 CALL_METHOD 0						  
							      138 BINARY_SUBSCR						    122 STORE_FAST 14 ( tri )					  
							      140 INPLACE_ADD						    								  
							      142 ROT_THREE						    121 124 LOAD_FAST 14 ( tri )				  
							      144 STORE_SUBSCR						    126 RETURN_VALUE						  
							      146 JUMP_ABSOLUTE 36					    NEW_LINE							  
							      >> 148 POP_BLOCK						    								  
							      >> 150 JUMP_ABSOLUTE 18					    								  
							      >> 152 POP_BLOCK						    								  
							      								    								  
							      8 >> 154 LOAD_FAST 0 ( tri )				    								  
							      156 LOAD_CONST 3 ( 0 )					    								  
							      158 BINARY_SUBSCR						    								  
							      160 LOAD_CONST 3 ( 0 )					    								  
							      162 BINARY_SUBSCR						    								  
							      164 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		      MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		    MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		  MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS
--							      --							    --								  --
def maximumSum ( arr , n , k ) :			      Disassembly of <code object maximumSum at 0x7fbac0e8bc90, fil Disassembly of <code object maximumSum at 0x7f816a673a50, fil script_not_found : None
    for i in range ( 1 , k + 1 ) :			      2 0 SETUP_LOOP 96 ( to 98 )				    204 0 SETUP_LOOP 22 ( to 24 )				  
	min = + 2147483647				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	index = - 1					      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 2.0 )					  
	for j in range ( n ) :				      6 LOAD_FAST 2 ( k )					    6 CALL_FUNCTION 1						  
	    if ( arr [ j ] < min ) :			      8 LOAD_CONST 1 ( 1 )					    8 GET_ITER							  
		min = arr [ j ]				      10 BINARY_ADD						    >> 10 FOR_ITER 14 ( to 22 )					  
		index = j				      12 CALL_FUNCTION 2					    12 STORE_FAST 1 ( n )					  
	if ( min == 0 ) :				      14 GET_ITER						    								  
	    break					      >> 16 FOR_ITER 78 ( to 96 )				    205 14 LOAD_FAST 0 ( arr )					  
	arr [ index ] = - arr [ index ]			      18 STORE_FAST 3 ( i )					    16 LOAD_METHOD 1 ( append )					  
    sum = 0						      								    18 LOAD_FAST 1 ( n )					  
    for i in range ( n ) :				      3 20 LOAD_CONST 2 ( 2147483647 )				    20 CALL_METHOD 1						  
	sum += arr [ i ]				      22 STORE_FAST 4 ( min )					    22 POP_TOP							  
    return sum						      								    24 JUMP_ABSOLUTE 10						  
							      4 24 LOAD_CONST 3 ( - 1 )					    >> 26 POP_BLOCK						  
							      26 STORE_FAST 5 ( index )					    >> 28 LOAD_CONST 2 ( None )					  
							      								    30 RETURN_VALUE						  
							      5 28 SETUP_LOOP 40 ( to 70 )				    NEW_LINE							  
							      30 LOAD_GLOBAL 0 ( range )				    								  
							      32 LOAD_FAST 1 ( n )					    								  
							      34 CALL_FUNCTION 1					    								  
							      36 GET_ITER						    								  
							      >> 38 FOR_ITER 28 ( to 68 )				    								  
							      40 STORE_FAST 6 ( j )					    								  
							      								    								  
							      6 42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 6 ( j )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 4 ( min )					    								  
							      50 COMPARE_OP 0 ( < )					    								  
							      52 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      7 54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 6 ( j )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 STORE_FAST 4 ( min )					    								  
							      								    								  
							      8 62 LOAD_FAST 6 ( j )					    								  
							      64 STORE_FAST 5 ( index )					    								  
							      66 JUMP_ABSOLUTE 38					    								  
							      >> 68 POP_BLOCK						    								  
							      								    								  
							      9 >> 70 LOAD_FAST 4 ( min )				    								  
							      72 LOAD_CONST 4 ( 0 )					    								  
							      74 COMPARE_OP 2 ( == )					    								  
							      76 POP_JUMP_IF_FALSE 80					    								  
							      								    								  
							      10 78 BREAK_LOOP						    								  
							      								    								  
							      11 >> 80 LOAD_FAST 0 ( arr )				    								  
							      82 LOAD_FAST 5 ( index )					    								  
							      84 BINARY_SUBSCR						    								  
							      86 UNARY_NEGATIVE						    								  
							      88 LOAD_FAST 0 ( arr )					    								  
							      90 LOAD_FAST 5 ( index )					    								  
							      92 STORE_SUBSCR						    								  
							      94 JUMP_ABSOLUTE 16					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      12 >> 98 LOAD_CONST 4 ( 0 )				    								  
							      100 STORE_FAST 7 ( sum )					    								  
							      								    								  
							      13 102 SETUP_LOOP 28 ( to 132 )				    								  
							      104 LOAD_GLOBAL 0 ( range )				    								  
							      106 LOAD_FAST 1 ( n )					    								  
							      108 CALL_FUNCTION 1					    								  
							      110 GET_ITER						    								  
							      >> 112 FOR_ITER 16 ( to 130 )				    								  
							      114 STORE_FAST 3 ( i )					    								  
							      								    								  
							      14 116 LOAD_FAST 7 ( sum )				    								  
							      118 LOAD_FAST 0 ( arr )					    								  
							      120 LOAD_FAST 3 ( i )					    								  
							      122 BINARY_SUBSCR						    								  
							      124 INPLACE_ADD						    								  
							      126 STORE_FAST 7 ( sum )					    								  
							      128 JUMP_ABSOLUTE 112					    								  
							      >> 130 POP_BLOCK						    								  
							      								    								  
							      15 >> 132 LOAD_FAST 7 ( sum )				    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_EQULIBRIUM_SUM_ARRAY				      MAXIMUM_EQULIBRIUM_SUM_ARRAY				    MAXIMUM_EQULIBRIUM_SUM_ARRAY				  MAXIMUM_EQULIBRIUM_SUM_ARRAY
--							      --							    --								  --
def findMaxSum ( arr , n ) :				      Disassembly of <code object findMaxSum at 0x7fbac<<unk>> d540 Disassembly of <code object findMaxSum at 0x7f816a6e4b70, fil error : Traceback (most recent call last):   File
    res = - sys.maxsize - 1				      2 0 LOAD_GLOBAL 0 ( sys )					    26 0 LOAD_CONST 1 ( - sys )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n ) :				      2 LOAD_ATTR 1 ( maxsize )					    2 STORE_FAST 1 ( n )					  item in run_dis_script():   File "XLM/dis_script.p
	prefix_sum = arr [ i ]				      4 UNARY_NEGATIVE						    								  y", line 47, in run_dis_script     co_code, co_nlo
	for j in range ( i ) :				      6 LOAD_CONST 1 ( 1 )					    27 4 LOAD_GLOBAL 0 ( len )					  cals, co_varnames, co_names, co_consts, co_linesta
	    prefix_sum += arr [ j ]			      8 BINARY_SUBTRACT						    6 LOAD_FAST 1 ( n )						  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	suffix_sum = arr [ i ]				      10 STORE_FAST 2 ( res )					    8 CALL_FUNCTION 1						  /TransCoder/XLM/src/dis_assembler.py", line 212, i
	j = n - 1					      								    10 LOAD_CONST 2 ( 1 )					  n parse     constants[arg] = ast.literal_eval(argr
	while ( j > i ) :				      3 12 SETUP_LOOP 122 ( to 136 )				    12 COMPARE_OP 4 ( > )					  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
	    suffix_sum += arr [ j ]			      14 LOAD_GLOBAL 2 ( range )				    14 POP_JUMP_IF_FALSE 20					  ib/python3.7/ast.py", line 91, in literal_eval
	    j -= 1					      16 LOAD_FAST 1 ( n )					    								   return _convert(node_or_string)   File "/home/ubu
	if ( prefix_sum == suffix_sum ) :		      18 CALL_FUNCTION 1					    28 16 LOAD_GLOBAL 1 ( len )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
	    res = max ( res , prefix_sum )		      20 GET_ITER						    18 LOAD_FAST 1 ( n )					  line 90, in _convert	   return _convert_signed_nu
    return res						      >> 22 FOR_ITER 110 ( to 134 )				    20 CALL_FUNCTION 1						  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      24 STORE_FAST 3 ( i )					    22 LOAD_CONST 3 ( 1 )					  t/lib/python3.7/ast.py", line 58, in _convert_sign
							      								    24 COMPARE_OP 4 ( > )					  ed_num     operand = _convert_num(node.operand)
							      4 26 LOAD_FAST 0 ( arr )					    26 POP_JUMP_IF_FALSE 32					  File "/home/ubuntu/anaconda3/envs/dataset/lib/pyth
							      28 LOAD_FAST 3 ( i )					    								  on3.7/ast.py", line 55, in _convert_num     raise
							      30 BINARY_SUBSCR						    29 28 LOAD_FAST 1 ( n )					  ValueError('malformed node or string: ' + repr(nod
							      32 STORE_FAST 4 ( prefix_sum )				    30 LOAD_CONST 4 ( 0 )					  e)) ValueError: malformed node or string: <_ast.Na
							      								    32 BINARY_SUBSCR						  me object at 0x7fac48bdb610>
							      5 34 SETUP_LOOP 28 ( to 64 )				    34 LOAD_CONST 5 ( 1 )					  
							      36 LOAD_GLOBAL 2 ( range )				    36 COMPARE_OP 4 ( > )					  
							      38 LOAD_FAST 3 ( i )					    38 POP_JUMP_IF_FALSE 40					  
							      40 CALL_FUNCTION 1					    								  
							      42 GET_ITER						    30 40 LOAD_FAST 1 ( n )					  
							      >> 44 FOR_ITER 16 ( to 62 )				    42 LOAD_CONST 6 ( 1 )					  
							      46 STORE_FAST 5 ( j )					    44 BINARY_SUBSCR						  
							      								    46 LOAD_CONST 7 ( 1 )					  
							      6 48 LOAD_FAST 4 ( prefix_sum )				    48 COMPARE_OP 4 ( > )					  
							      50 LOAD_FAST 0 ( arr )					    50 POP_JUMP_IF_FALSE 52					  
							      52 LOAD_FAST 5 ( j )					    								  
							      54 BINARY_SUBSCR						    31 52 LOAD_FAST 1 ( n )					  
							      56 INPLACE_ADD						    54 LOAD_CONST 8 ( 1 )					  
							      58 STORE_FAST 4 ( prefix_sum )				    56 INPLACE_ADD						  
							      60 JUMP_ABSOLUTE 44					    58 STORE_FAST 1 ( n )					  
							      >> 62 POP_BLOCK						    								  
							      								    32 >> 60 LOAD_FAST 1 ( n )					  
							      7 >> 64 LOAD_FAST 0 ( arr )				    62 LOAD_CONST 9 ( 1 )					  
							      66 LOAD_FAST 3 ( i )					    64 INPLACE_ADD						  
							      68 BINARY_SUBSCR						    66 STORE_FAST 1 ( n )					  
							      70 STORE_FAST 6 ( suffix_sum )				    								  
							      								    33 68 LOAD_FAST 1 ( n )					  
							      8 72 LOAD_FAST 1 ( n )					    70 LOAD_CONST 10 ( 1 )					  
							      74 LOAD_CONST 1 ( 1 )					    72 INPLACE_ADD						  
							      76 BINARY_SUBTRACT					    74 STORE_FAST 1 ( n )					  
							      78 STORE_FAST 5 ( j )					    								  
							      								    34 76 LOAD_FAST 1 ( n )					  
							      9 80 SETUP_LOOP 32 ( to 114 )				    78 LOAD_CONST 11 ( 2 )					  
							      >> 82 LOAD_FAST 5 ( j )					    80 INPLACE_ADD						  
							      84 LOAD_FAST 3 ( i )					    82 STORE_FAST 1 ( n )					  
							      86 COMPARE_OP 4 ( > )					    								  
							      88 POP_JUMP_IF_FALSE 112					    35 84 LOAD_FAST 1 ( n )					  
							      								    86 LOAD_CONST 12 ( 2 )					  
							      10 90 LOAD_FAST 6 ( suffix_sum )				    88 INPLACE_ADD						  
							      92 LOAD_FAST 0 ( arr )					    90 STORE_FAST 1 ( n )					  
							      94 LOAD_FAST 5 ( j )					    								  
							      96 BINARY_SUBSCR						    36 92 LOAD_FAST 1 ( n )					  
							      98 INPLACE_ADD						    94 LOAD_CONST 13 ( 2 )					  
							      100 STORE_FAST 6 ( suffix_sum )				    96 INPLACE_ADD						  
							      								    98 STORE_FAST 1 ( n )					  
							      11 102 LOAD_FAST 5 ( j )					    								  
							      104 LOAD_CONST 1 ( 1 )					    37 100 LOAD_FAST 1 ( n )					  
							      106 INPLACE_SUBTRACT					    102 LOAD_FAST 1 ( n )					  
							      108 STORE_FAST 5 ( j )					    104 INPLACE_ADD						  
							      110 JUMP_ABSOLUTE 82					    106 STORE_FAST 1 ( n )					  
							      >> 112 POP_BLOCK						    								  
							      								    38 108 LOAD_FAST 1 ( n )					  
							      12 >> 114 LOAD_FAST 4 ( prefix_sum )			    110 LOAD_FAST 1 ( n )					  
							      116 LOAD_FAST 6 ( suffix_sum )				    112 INPLACE_ADD						  
							      118 COMPARE_OP 2 ( == )					    114 STORE_FAST 1 ( n )					  
							      120 POP_JUMP_IF_FALSE 22					    								  
							      								    39 116 LOAD_FAST 1 ( n )					  
							      13 122 LOAD_GLOBAL 3 ( max )				    118 LOAD_FAST 0 ( arr )					  
							      124 LOAD_FAST 2 ( res )					    120 INPLACE_ADD						  
							      126 LOAD_FAST 4 ( prefix_sum )				    122 STORE_FAST 1 ( n )					  
							      128 CALL_FUNCTION 2					    								  
							      130 STORE_FAST 2 ( res )					    40 124 LOAD_FAST 1 ( n )					  
							      132 JUMP_ABSOLUTE 22					    126 LOAD_FAST 1 ( n )					  
							      >> 134 POP_BLOCK						    128 INPLACE_ADD						  
							      								    130 STORE_FAST 1 ( n )					  
							      14 >> 136 LOAD_FAST 2 ( res )				    								  
							      138 RETURN_VALUE NEW_LINE					    41 132 LOAD_FAST 1 ( n )					  
							      								    134 LOAD_FAST 1 ( n )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 1 ( n )					  
							      								    								  
							      								    42 140 LOAD_FAST 1 ( n )					  
							      								    142 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES      PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	    PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	  PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES
--							      --							    --								  --
def printString ( str , ch , count ) :			      Disassembly of <code object printString at 0x7fbac0e89d20, fi Disassembly of <code object printString at 0x7f816a6e4b70, fi script_not_found : None
    occ , i = 0 , 0					      2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				    31 0 LOAD_FAST 1 ( ch )					  
    if ( count == 0 ) :					      2 UNPACK_SEQUENCE 2					    2 LOAD_CONST 1 ( 0 )					  
	print ( str )					      4 STORE_FAST 3 ( occ )					    4 BINARY_SUBSCR						  
    for i in range ( len ( str ) ) :			      6 STORE_FAST 4 ( i )					    6 STORE_FAST 2 ( occ )					  
	if ( str [ i ] == ch ) :			      								    								  
	    occ += 1					      3 8 LOAD_FAST 2 ( count )					    32 8 SETUP_LOOP 30 ( to 40 )				  
	if ( occ == count ) :				      10 LOAD_CONST 2 ( 0 )					    10 LOAD_GLOBAL 0 ( range )					  
	    break					      12 COMPARE_OP 2 ( == )					    12 LOAD_FAST 0 ( str )					  
    if ( i < len ( str ) - 1 ) :			      14 POP_JUMP_IF_FALSE 24					    14 CALL_FUNCTION 1						  
	print ( str [ i + 1 : len ( str ) - i + 2 ] )	      								    16 GET_ITER							  
    else :						      4 16 LOAD_GLOBAL 0 ( print )				    >> 18 FOR_ITER 16 ( to 38 )					  
	print ( "Empty string" )			      18 LOAD_FAST 0 ( str )					    20 STORE_FAST 3 ( i )					  
							      20 CALL_FUNCTION 1					    								  
							      22 POP_TOP						    33 22 LOAD_FAST 2 ( occ )					  
							      								    24 LOAD_METHOD 1 ( append )					  
							      5 >> 24 SETUP_LOOP 50 ( to 76 )				    26 LOAD_FAST 3 ( i )					  
							      26 LOAD_GLOBAL 1 ( range )				    28 CALL_METHOD 1						  
							      28 LOAD_GLOBAL 2 ( len )					    30 POP_TOP							  
							      30 LOAD_FAST 0 ( str )					    32 JUMP_ABSOLUTE 18						  
							      32 CALL_FUNCTION 1					    >> 34 POP_BLOCK						  
							      34 CALL_FUNCTION 1					    >> 36 LOAD_CONST 2 ( None )					  
							      36 GET_ITER						    38 RETURN_VALUE						  
							      >> 38 FOR_ITER 34 ( to 74 )				    NEW_LINE							  
							      40 STORE_FAST 4 ( i )					    								  
							      								    								  
							      6 42 LOAD_FAST 0 ( str )					    								  
							      44 LOAD_FAST 4 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 1 ( ch )					    								  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 POP_JUMP_IF_FALSE 62					    								  
							      								    								  
							      7 54 LOAD_FAST 3 ( occ )					    								  
							      56 LOAD_CONST 3 ( 1 )					    								  
							      58 INPLACE_ADD						    								  
							      60 STORE_FAST 3 ( occ )					    								  
							      								    								  
							      8 >> 62 LOAD_FAST 3 ( occ )				    								  
							      64 LOAD_FAST 2 ( count )					    								  
							      66 COMPARE_OP 2 ( == )					    								  
							      68 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      9 70 BREAK_LOOP						    								  
							      72 JUMP_ABSOLUTE 38					    								  
							      >> 74 POP_BLOCK						    								  
							      								    								  
							      10 >> 76 LOAD_FAST 4 ( i )				    								  
							      78 LOAD_GLOBAL 2 ( len )					    								  
							      80 LOAD_FAST 0 ( str )					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 LOAD_CONST 3 ( 1 )					    								  
							      86 BINARY_SUBTRACT					    								  
							      88 COMPARE_OP 0 ( < )					    								  
							      90 POP_JUMP_IF_FALSE 126					    								  
							      								    								  
							      11 92 LOAD_GLOBAL 0 ( print )				    								  
							      94 LOAD_FAST 0 ( str )					    								  
							      96 LOAD_FAST 4 ( i )					    								  
							      98 LOAD_CONST 3 ( 1 )					    								  
							      100 BINARY_ADD						    								  
							      102 LOAD_GLOBAL 2 ( len )					    								  
							      104 LOAD_FAST 0 ( str )					    								  
							      106 CALL_FUNCTION 1					    								  
							      108 LOAD_FAST 4 ( i )					    								  
							      110 BINARY_SUBTRACT					    								  
							      112 LOAD_CONST 4 ( 2 )					    								  
							      114 BINARY_ADD						    								  
							      116 BUILD_SLICE 2						    								  
							      118 BINARY_SUBSCR						    								  
							      120 CALL_FUNCTION 1					    								  
							      122 POP_TOP						    								  
							      124 JUMP_FORWARD 8 ( to 134 )				    								  
							      								    								  
							      13 >> 126 LOAD_GLOBAL 0 ( print )				    								  
							      128 LOAD_CONST 5 ( 'Empty string' )			    								  
							      130 CALL_FUNCTION 1					    								  
							      132 POP_TOP						    								  
							      >> 134 LOAD_CONST 0 ( None )				    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		      FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		    FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		  FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
def findLargestSumPair ( arr , n ) :			      Disassembly of <code object findLargestSumPair at 0x7fbac<<un Disassembly of <code object findLargestSumPair at 0x7f816a673 script_not_found : None
    if arr [ 0 ] > arr [ 1 ] :				      2 0 LOAD_FAST 0 ( arr )					    65 0 LOAD_FAST 1 ( n )					  
	first = arr [ 0 ]				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
	second = arr [ 1 ]				      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
    else :						      6 LOAD_FAST 0 ( arr )					    6 STORE_FAST 2 ( a )					  
	first = arr [ 1 ]				      8 LOAD_CONST 2 ( 1 )					    								  
	second = arr [ 0 ]				      10 BINARY_SUBSCR						    66 8 LOAD_FAST 0 ( arr )					  
    for i in range ( 2 , n ) :				      12 COMPARE_OP 4 ( > )					    10 LOAD_METHOD 0 ( append )					  
	if arr [ i ] > first :				      14 POP_JUMP_IF_FALSE 34					    12 LOAD_FAST 2 ( a )					  
	    second = first				      								    14 CALL_METHOD 1						  
	    first = arr [ i ]				      3 16 LOAD_FAST 0 ( arr )					    16 POP_TOP							  
	elif arr [ i ] > second and arr [ i ] != first :      18 LOAD_CONST 1 ( 0 )					    								  
	    second = arr [ i ]				      20 BINARY_SUBSCR						    67 18 LOAD_FAST 0 ( arr )					  
    return ( first + second )				      22 STORE_FAST 2 ( first )					    20 LOAD_METHOD 1 ( append )					  
							      								    22 LOAD_FAST 1 ( n )					  
							      4 24 LOAD_FAST 0 ( arr )					    24 CALL_METHOD 1						  
							      26 LOAD_CONST 2 ( 1 )					    26 POP_TOP							  
							      28 BINARY_SUBSCR						    28 LOAD_CONST 0 ( None )					  
							      30 STORE_FAST 3 ( second )				    30 RETURN_VALUE						  
							      32 JUMP_FORWARD 16 ( to 50 )				    NEW_LINE							  
							      								    								  
							      6 >> 34 LOAD_FAST 0 ( arr )				    								  
							      36 LOAD_CONST 2 ( 1 )					    								  
							      38 BINARY_SUBSCR						    								  
							      40 STORE_FAST 2 ( first )					    								  
							      								    								  
							      7 42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_CONST 1 ( 0 )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 STORE_FAST 3 ( second )				    								  
							      								    								  
							      8 >> 50 SETUP_LOOP 76 ( to 128 )				    								  
							      52 LOAD_GLOBAL 0 ( range )				    								  
							      54 LOAD_CONST 3 ( 2 )					    								  
							      56 LOAD_FAST 1 ( n )					    								  
							      58 CALL_FUNCTION 2					    								  
							      60 GET_ITER						    								  
							      >> 62 FOR_ITER 62 ( to 126 )				    								  
							      64 STORE_FAST 4 ( i )					    								  
							      								    								  
							      9 66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 4 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_FAST 2 ( first )					    								  
							      74 COMPARE_OP 4 ( > )					    								  
							      76 POP_JUMP_IF_FALSE 92					    								  
							      								    								  
							      10 78 LOAD_FAST 2 ( first )				    								  
							      80 STORE_FAST 3 ( second )				    								  
							      								    								  
							      11 82 LOAD_FAST 0 ( arr )					    								  
							      84 LOAD_FAST 4 ( i )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 STORE_FAST 2 ( first )					    								  
							      90 JUMP_ABSOLUTE 62					    								  
							      								    								  
							      12 >> 92 LOAD_FAST 0 ( arr )				    								  
							      94 LOAD_FAST 4 ( i )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 LOAD_FAST 3 ( second )					    								  
							      100 COMPARE_OP 4 ( > )					    								  
							      102 POP_JUMP_IF_FALSE 62					    								  
							      104 LOAD_FAST 0 ( arr )					    								  
							      106 LOAD_FAST 4 ( i )					    								  
							      108 BINARY_SUBSCR						    								  
							      110 LOAD_FAST 2 ( first )					    								  
							      112 COMPARE_OP 3 ( != )					    								  
							      114 POP_JUMP_IF_FALSE 62					    								  
							      								    								  
							      13 116 LOAD_FAST 0 ( arr )				    								  
							      118 LOAD_FAST 4 ( i )					    								  
							      120 BINARY_SUBSCR						    								  
							      122 STORE_FAST 3 ( second )				    								  
							      124 JUMP_ABSOLUTE 62					    								  
							      >> 126 POP_BLOCK						    								  
							      								    								  
							      14 >> 128 LOAD_FAST 2 ( first )				    								  
							      130 LOAD_FAST 3 ( second )				    								  
							      132 BINARY_ADD						    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE_1			      LONGEST_INCREASING_SUBSEQUENCE_1				    LONGEST_INCREASING_SUBSEQUENCE_1				  LONGEST_INCREASING_SUBSEQUENCE_1
--							      --							    --								  --
def lis ( arr ) :					      Disassembly of <code object lis at 0x7fbac<<unk>> de40, file  Disassembly of <code object lis at 0x7f816a6e4b70, file "<dis script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    26 0 LOAD_FAST 1 ( arr )					  
    lis = [ 1 ] * n					      2 LOAD_FAST 0 ( arr )					    								  
    for i in range ( 1 , n ) :				      4 CALL_FUNCTION 1						    27 2 LOAD_FAST 0 ( arr )					  
	for j in range ( 0 , i ) :			      6 STORE_FAST 1 ( n )					    								  
	    if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  								    28 4 LOAD_FAST 1 ( arr )					  
		lis [ i ] = lis [ j ] + 1		      3 8 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
    maximum = 0						      10 BUILD_LIST 1						    8 LOAD_CONST 2 ( 2 )					  
    for i in range ( n ) :				      12 LOAD_FAST 1 ( n )					    10 LOAD_CONST 3 ( 3 )					  
	maximum = max ( maximum , lis [ i ] )		      14 BINARY_MULTIPLY					    12 LOAD_CONST 4 ( ( 'arr' , 'arr' , 'arr' ) )		  
    return maximum					      16 STORE_FAST 2 ( lis )					    14 BUILD_CONST_KEY_MAP 3					  
							      								    16 COMPARE_OP 6 ( in )					  
							      4 18 SETUP_LOOP 90 ( to 110 )				    18 POP_JUMP_IF_FALSE 38					  
							      20 LOAD_GLOBAL 1 ( range )				    								  
							      22 LOAD_CONST 1 ( 1 )					    30 20 LOAD_FAST 1 ( arr )					  
							      24 LOAD_FAST 1 ( n )					    22 LOAD_METHOD 0 ( append )					  
							      26 CALL_FUNCTION 2					    24 LOAD_CONST 5 ( '%s = %s' )				  
							      28 GET_ITER						    26 LOAD_FAST 1 ( arr )					  
							      >> 30 FOR_ITER 76 ( to 108 )				    28 LOAD_ATTR 1 ( shape )					  
							      32 STORE_FAST 3 ( i )					    30 BINARY_MODULO						  
							      								    32 CALL_METHOD 1						  
							      5 34 SETUP_LOOP 70 ( to 106 )				    34 POP_TOP							  
							      36 LOAD_GLOBAL 1 ( range )				    								  
							      38 LOAD_CONST 2 ( 0 )					    31 >> 36 LOAD_FAST 1 ( arr )				  
							      40 LOAD_FAST 3 ( i )					    38 RETURN_VALUE						  
							      42 CALL_FUNCTION 2					    NEW_LINE							  
							      44 GET_ITER						    								  
							      >> 46 FOR_ITER 56 ( to 104 )				    								  
							      48 STORE_FAST 4 ( j )					    								  
							      								    								  
							      6 50 LOAD_FAST 0 ( arr )					    								  
							      52 LOAD_FAST 3 ( i )					    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_FAST 0 ( arr )					    								  
							      58 LOAD_FAST 4 ( j )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 COMPARE_OP 4 ( > )					    								  
							      64 POP_JUMP_IF_FALSE 46					    								  
							      66 LOAD_FAST 2 ( lis )					    								  
							      68 LOAD_FAST 3 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_FAST 2 ( lis )					    								  
							      74 LOAD_FAST 4 ( j )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 LOAD_CONST 1 ( 1 )					    								  
							      80 BINARY_ADD						    								  
							      82 COMPARE_OP 0 ( < )					    								  
							      84 POP_JUMP_IF_FALSE 46					    								  
							      								    								  
							      7 86 LOAD_FAST 2 ( lis )					    								  
							      88 LOAD_FAST 4 ( j )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 LOAD_CONST 1 ( 1 )					    								  
							      94 BINARY_ADD						    								  
							      96 LOAD_FAST 2 ( lis )					    								  
							      98 LOAD_FAST 3 ( i )					    								  
							      100 STORE_SUBSCR						    								  
							      102 JUMP_ABSOLUTE 46					    								  
							      >> 104 POP_BLOCK						    								  
							      >> 106 JUMP_ABSOLUTE 30					    								  
							      >> 108 POP_BLOCK						    								  
							      								    								  
							      8 >> 110 LOAD_CONST 2 ( 0 )				    								  
							      112 STORE_FAST 5 ( maximum )				    								  
							      								    								  
							      9 114 SETUP_LOOP 30 ( to 146 )				    								  
							      116 LOAD_GLOBAL 1 ( range )				    								  
							      118 LOAD_FAST 1 ( n )					    								  
							      120 CALL_FUNCTION 1					    								  
							      122 GET_ITER						    								  
							      >> 124 FOR_ITER 18 ( to 144 )				    								  
							      126 STORE_FAST 3 ( i )					    								  
							      								    								  
							      10 128 LOAD_GLOBAL 2 ( max )				    								  
							      130 LOAD_FAST 5 ( maximum )				    								  
							      132 LOAD_FAST 2 ( lis )					    								  
							      134 LOAD_FAST 3 ( i )					    								  
							      136 BINARY_SUBSCR						    								  
							      138 CALL_FUNCTION 2					    								  
							      140 STORE_FAST 5 ( maximum )				    								  
							      142 JUMP_ABSOLUTE 124					    								  
							      >> 144 POP_BLOCK						    								  
							      								    								  
							      11 >> 146 LOAD_FAST 5 ( maximum )				    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2		    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2
--							      --							    --								  --
def find3Numbers ( A , arr_size , sum ) :		      Disassembly of <code object find3Numbers at 0x7fbac<<unk>> de Disassembly of <code object find3DayDayA at 0x7f816a601660, f error : /bin/bash: line 1: 26678 Segmentation faul
    for i in range ( 0 , arr_size - 1 ) :		      2 0 SETUP_LOOP 132 ( to 134 )				    76 0 SETUP_LOOP 22 ( to 24 )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	s = set ( )					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	curr_sum = sum - A [ i ]			      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( - 1 )					  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	for j in range ( i + 1 , arr_size ) :		      6 LOAD_FAST 1 ( arr_size )				    6 CALL_FUNCTION 1						  eval_scripts/python_sa-dis_sa.test/FIND_A_TRIPLET_
	    if ( curr_sum - A [ j ] ) in s :		      8 LOAD_CONST 2 ( 1 )					    8 GET_ITER							  THAT_SUM_TO_A_GIVEN_VALUE_2.dis
		print ( "Triplet is" , A [ i ] , ", " , A [ j 10 BINARY_SUBTRACT					    >> 10 FOR_ITER 22 ( to 24 )					  
		return True				      12 CALL_FUNCTION 2					    12 STORE_FAST 1 ( arr_size )				  
	    s.add ( A [ j ] )				      14 GET_ITER						    								  
    return False					      >> 16 FOR_ITER 114 ( to 132 )				    77 14 LOAD_FAST 0 ( self )					  
							      18 STORE_FAST 3 ( i )					    16 LOAD_METHOD 1 ( _get_Triplet )				  
							      								    18 LOAD_FAST 1 ( arr_size )					  
							      3 20 LOAD_GLOBAL 1 ( set )				    20 CALL_METHOD 1						  
							      22 CALL_FUNCTION 0					    22 STORE_FAST 2 ( arr_range )				  
							      24 STORE_FAST 4 ( s )					    24 JUMP_ABSOLUTE 10						  
							      								    >> 26 POP_BLOCK						  
							      4 26 LOAD_FAST 2 ( sum )					    >> 28 LOAD_CONST 0 ( None )					  
							      28 LOAD_FAST 0 ( A )					    30 RETURN_VALUE						  
							      30 LOAD_FAST 3 ( i )					    NEW_LINE							  
							      32 BINARY_SUBSCR						    								  
							      34 BINARY_SUBTRACT					    								  
							      36 STORE_FAST 5 ( curr_sum )				    								  
							      								    								  
							      5 38 SETUP_LOOP 90 ( to 130 )				    								  
							      40 LOAD_GLOBAL 0 ( range )				    								  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 LOAD_CONST 2 ( 1 )					    								  
							      46 BINARY_ADD						    								  
							      48 LOAD_FAST 1 ( arr_size )				    								  
							      50 CALL_FUNCTION 2					    								  
							      52 GET_ITER						    								  
							      >> 54 FOR_ITER 72 ( to 128 )				    								  
							      56 STORE_FAST 6 ( j )					    								  
							      								    								  
							      6 58 LOAD_FAST 5 ( curr_sum )				    								  
							      60 LOAD_FAST 0 ( A )					    								  
							      62 LOAD_FAST 6 ( j )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 BINARY_SUBTRACT					    								  
							      68 LOAD_FAST 4 ( s )					    								  
							      70 COMPARE_OP 6 ( in )					    								  
							      72 POP_JUMP_IF_FALSE 112					    								  
							      								    								  
							      7 74 LOAD_GLOBAL 2 ( print )				    								  
							      76 LOAD_CONST 3 ( 'Triplet is' )				    								  
							      78 LOAD_FAST 0 ( A )					    								  
							      80 LOAD_FAST 3 ( i )					    								  
							      82 BINARY_SUBSCR						    								  
							      84 LOAD_CONST 4 ( ', ' )					    								  
							      86 LOAD_FAST 0 ( A )					    								  
							      88 LOAD_FAST 6 ( j )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 LOAD_CONST 4 ( ', ' )					    								  
							      94 LOAD_FAST 5 ( curr_sum )				    								  
							      96 LOAD_FAST 0 ( A )					    								  
							      98 LOAD_FAST 6 ( j )					    								  
							      100 BINARY_SUBSCR						    								  
							      102 BINARY_SUBTRACT					    								  
							      104 CALL_FUNCTION 6					    								  
							      106 POP_TOP						    								  
							      								    								  
							      8 108 LOAD_CONST 5 ( True )				    								  
							      110 RETURN_VALUE						    								  
							      								    								  
							      9 >> 112 LOAD_FAST 4 ( s )				    								  
							      114 LOAD_METHOD 3 ( add )					    								  
							      116 LOAD_FAST 0 ( A )					    								  
							      118 LOAD_FAST 6 ( j )					    								  
							      120 BINARY_SUBSCR						    								  
							      122 CALL_METHOD 1						    								  
							      124 POP_TOP						    								  
							      126 JUMP_ABSOLUTE 54					    								  
							      >> 128 POP_BLOCK						    								  
							      >> 130 JUMP_ABSOLUTE 16					    								  
							      >> 132 POP_BLOCK						    								  
							      								    								  
							      10 >> 134 LOAD_CONST 6 ( False )				    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_AN_ARRAY_OF_0S_1S_AND_2S				      SORT_AN_ARRAY_OF_0S_1S_AND_2S				    SORT_AN_ARRAY_OF_0S_1S_AND_2S				  SORT_AN_ARRAY_OF_0S_1S_AND_2S
--							      --							    --								  --
def sort012 ( a , arr_size ) :				      Disassembly of <code object sort012 at 0x7fbac0e89d20, file " Disassembly of <code object sort012 at 0x7f816a6e4b70, file " error : Traceback (most recent call last):   File
    lo = 0						      2 0 LOAD_CONST 1 ( 0 )					    21 0 LOAD_FAST 1 ( arr_size )				  "XLM/dis_script.py", line 60, in <module>	exec
    hi = arr_size - 1					      2 STORE_FAST 2 ( lo )					    2 LOAD_CONST 1 ( - 1 )					  (item)   File "main.py", line 52, in <module>	  Fi
    mid = 0						      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in sort012 TypeError: 'int' ob
    while mid <= hi :					      3 4 LOAD_FAST 1 ( arr_size )				    6 STORE_FAST 2 ( a )					  ject is not subscriptable
	if a [ mid ] == 0 :				      6 LOAD_CONST 2 ( 1 )					    								  
	    a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]	      8 BINARY_SUBTRACT						    22 8 LOAD_FAST 2 ( a )					  
	    lo = lo + 1					      10 STORE_FAST 3 ( hi )					    10 LOAD_FAST 0 ( a )					  
	    mid = mid + 1				      								    12 LOAD_FAST 1 ( arr_size )					  
	elif a [ mid ] == 1 :				      4 12 LOAD_CONST 1 ( 0 )					    14 LOAD_FAST 2 ( a )					  
	    mid = mid + 1				      14 STORE_FAST 4 ( mid )					    16 LOAD_FAST 3 ( size )					  
	else :						      								    18 LOAD_FAST 4 ( size )					  
	    a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]	      5 16 SETUP_LOOP 124 ( to 142 )				    20 LOAD_CONST 2 ( 1 )					  
	    hi = hi - 1					      >> 18 LOAD_FAST 4 ( mid )					    22 BINARY_SUBTRACT						  
							      20 LOAD_FAST 3 ( hi )					    24 BINARY_MULTIPLY						  
							      22 COMPARE_OP 1 ( <= )					    26 LOAD_FAST 4 ( size )					  
							      24 POP_JUMP_IF_FALSE 140					    28 LOAD_CONST 3 ( - 1 )					  
							      								    30 BINARY_SUBTRACT						  
							      6 26 LOAD_FAST 0 ( a )					    32 BINARY_MULTIPLY						  
							      28 LOAD_FAST 4 ( mid )					    34 BINARY_ADD						  
							      30 BINARY_SUBSCR						    36 LOAD_FAST 4 ( size )					  
							      32 LOAD_CONST 1 ( 0 )					    38 LOAD_FAST 2 ( a )					  
							      34 COMPARE_OP 2 ( == )					    40 LOAD_FAST 3 ( size )					  
							      36 POP_JUMP_IF_FALSE 82					    42 BINARY_ADD						  
							      								    44 BINARY_ADD						  
							      7 38 LOAD_FAST 0 ( a )					    46 LOAD_FAST 4 ( size )					  
							      40 LOAD_FAST 4 ( mid )					    48 LOAD_CONST 4 ( - 1 )					  
							      42 BINARY_SUBSCR						    50 BINARY_SUBTRACT						  
							      44 LOAD_FAST 0 ( a )					    52 BINARY_MULTIPLY						  
							      46 LOAD_FAST 2 ( lo )					    54 BINARY_ADD						  
							      48 BINARY_SUBSCR						    56 LOAD_FAST 4 ( size )					  
							      50 ROT_TWO						    58 LOAD_FAST 5 ( arr_size )					  
							      52 LOAD_FAST 0 ( a )					    60 LOAD_FAST 6 ( a )					  
							      54 LOAD_FAST 2 ( lo )					    62 LOAD_FAST 7 ( arr_size )					  
							      56 STORE_SUBSCR						    64 BINARY_ADD						  
							      58 LOAD_FAST 0 ( a )					    66 BINARY_MULTIPLY						  
							      60 LOAD_FAST 4 ( mid )					    68 BINARY_ADD						  
							      62 STORE_SUBSCR						    70 LOAD_FAST 4 ( size )					  
							      								    72 LOAD_FAST 5 ( arr_size )					  
							      8 64 LOAD_FAST 2 ( lo )					    74 BINARY_ADD						  
							      66 LOAD_CONST 2 ( 1 )					    76 BINARY_MULTIPLY						  
							      68 BINARY_ADD						    78 BINARY_ADD						  
							      70 STORE_FAST 2 ( lo )					    80 LOAD_FAST 4 ( size )					  
							      								    82 LOAD_FAST 5 ( arr_size )					  
							      9 72 LOAD_FAST 4 ( mid )					    84 BINARY_ADD						  
							      74 LOAD_CONST 2 ( 1 )					    86 BINARY_ADD						  
							      76 BINARY_ADD						    88 LOAD_FAST 4 ( size )					  
							      78 STORE_FAST 4 ( mid )					    90 LOAD_FAST 5 ( arr_size )					  
							      80 JUMP_ABSOLUTE 18					    92 BINARY_ADD						  
							      								    94 BINARY_ADD						  
							      10 >> 82 LOAD_FAST 0 ( a )				    96 LOAD_FAST 4 ( size )					  
							      84 LOAD_FAST 4 ( mid )					    98 LOAD_CONST 5 ( - 1 )					  
							      86 BINARY_SUBSCR						    100 BINARY_ADD						  
							      88 LOAD_CONST 2 ( 1 )					    102 BINARY_MULTIPLY						  
							      90 COMPARE_OP 2 ( == )					    104 BINARY_ADD						  
							      92 POP_JUMP_IF_FALSE 104					    106 LOAD_FAST 4 ( size )					  
							      								    108 LOAD_CONST 6 ( - 1 )					  
							      11 94 LOAD_FAST 4 ( mid )					    110 BINARY_ADD						  
							      96 LOAD_CONST 2 ( 1 )					    112 BINARY_MULTIPLY						  
							      98 BINARY_ADD						    114 BINARY_ADD						  
							      100 STORE_FAST 4 ( mid )					    116 LOAD_FAST 4 ( size )					  
							      102 JUMP_ABSOLUTE 18					    118 BINARY_ADD						  
							      								    120 BINARY_ADD						  
							      13 >> 104 LOAD_FAST 0 ( a )				    122 BINARY_ADD						  
							      106 LOAD_FAST 3 ( hi )					    124 LOAD_FAST 4 ( size )					  
							      108 BINARY_SUBSCR						    126 BINARY_ADD						  
							      110 LOAD_FAST 0 ( a )					    128 LOAD_FAST 4 ( size )					  
							      112 LOAD_FAST 4 ( mid )					    130 BINARY_ADD						  
							      114 BINARY_SUBSCR						    132 BINARY_ADD						  
							      116 ROT_TWO						    134 LOAD_FAST 4 ( size )					  
							      118 LOAD_FAST 0 ( a )					    136 BINARY_ADD						  
							      120 LOAD_FAST 4 ( mid )					    138 BINARY_ADD						  
							      122 STORE_SUBSCR						    140 BINARY_ADD						  
							      124 LOAD_FAST 0 ( a )					    142 LOAD_FAST 4 ( size )					  
							      126 LOAD_FAST 3 ( hi )					    144 BINARY_ADD						  
							      128 STORE_SUBSCR						    146 BINARY_ADD						  
							      								    148 RETURN_VALUE						  
							      14 130 LOAD_FAST 3 ( hi )					    NEW_LINE							  
							      132 LOAD_CONST 2 ( 1 )					    								  
							      134 BINARY_SUBTRACT					    								  
							      136 STORE_FAST 3 ( hi )					    								  
							      138 JUMP_ABSOLUTE 18					    								  
							      >> 140 POP_BLOCK						    								  
							      >> 142 LOAD_CONST 0 ( None )				    								  
							      144 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1			      LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1			    LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1			  LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1
--							      --							    --								  --
def longestCommonSum ( arr1 , arr2 , n ) :		      Disassembly of <code object longestCommonSum at 0x7fbac0e8bc9 Disassembly of <code object longestCommonSum at 0x7f816a673a5 script_not_found : None
    maxLen = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( arr2 )					  
    presum1 = presum2 = 0				      2 STORE_FAST 3 ( maxLen )					    2 LOAD_FAST 0 ( arr1 )					  
    diff = { }						      								    4 LOAD_FAST 2 ( arr2 )					  
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_FAST 3 ( arr2 )					  
	presum1 += arr1 [ i ]				      6 DUP_TOP							    8 LOAD_FAST 4 ( arr2 )					  
	presum2 += arr2 [ i ]				      8 STORE_FAST 4 ( presum1 )				    10 LOAD_FAST 5 ( arr2 )					  
	curr_diff = presum1 - presum2			      10 STORE_FAST 5 ( presum2 )				    12 LOAD_FAST 6 ( arr2 )					  
	if curr_diff == 0 :				      								    14 LOAD_FAST 7 ( arr2 )					  
	    maxLen = i + 1				      4 12 BUILD_MAP 0						    16 LOAD_FAST 8 ( arr2 )					  
	elif curr_diff not in diff :			      14 STORE_FAST 6 ( diff )					    18 LOAD_FAST 9 ( arr2 )					  
	    diff [ curr_diff ] = i			      								    20 LOAD_FAST 10 ( arr2 )					  
	else :						      5 16 SETUP_LOOP 106 ( to 124 )				    22 LOAD_FAST 11 ( arr2 )					  
	    length = i - diff [ curr_diff ]		      18 LOAD_GLOBAL 0 ( range )				    24 LOAD_FAST 12 ( arr2 )					  
	    maxLen = max ( maxLen , length )		      20 LOAD_FAST 2 ( n )					    26 LOAD_FAST 13 ( arr2 )					  
    return maxLen					      22 CALL_FUNCTION 1					    28 LOAD_FAST 14 ( arr2 )					  
							      24 GET_ITER						    30 LOAD_FAST 15 ( arr2 )					  
							      >> 26 FOR_ITER 94 ( to 122 )				    32 LOAD_FAST 14 ( arr2 )					  
							      28 STORE_FAST 7 ( i )					    34 LOAD_FAST 15 ( arr2 )					  
							      								    36 LOAD_FAST 16 ( arr2 )					  
							      6 30 LOAD_FAST 4 ( presum1 )				    38 LOAD_FAST 17 ( arr2 )					  
							      32 LOAD_FAST 0 ( arr1 )					    40 LOAD_FAST 18 ( arr2 )					  
							      34 LOAD_FAST 7 ( i )					    42 LOAD_FAST 17 ( arr2 )					  
							      36 BINARY_SUBSCR						    44 LOAD_FAST 18 ( arr2 )					  
							      38 INPLACE_ADD						    46 LOAD_FAST 19 ( arr2 )					  
							      40 STORE_FAST 4 ( presum1 )				    48 LOAD_FAST 20 ( arr2 )					  
							      								    50 LOAD_FAST 21 ( arr2 )					  
							      7 42 LOAD_FAST 5 ( presum2 )				    52 LOAD_FAST 22 ( arr2 )					  
							      44 LOAD_FAST 1 ( arr2 )					    54 LOAD_FAST 21 ( arr2 )					  
							      46 LOAD_FAST 7 ( i )					    56 LOAD_FAST 22 ( arr2 )					  
							      48 BINARY_SUBSCR						    58 LOAD_FAST 21 ( arr2 )					  
							      50 INPLACE_ADD						    60 LOAD_FAST 22 ( arr2 )					  
							      52 STORE_FAST 5 ( presum2 )				    62 LOAD_FAST 21 ( arr2 )					  
							      								    64 LOAD_FAST 22 ( arr2 )					  
							      8 54 LOAD_FAST 4 ( presum1 )				    66 LOAD_FAST 21 ( arr2 )					  
							      56 LOAD_FAST 5 ( presum2 )				    68 LOAD_FAST 22 ( arr2 )					  
							      58 BINARY_SUBTRACT					    70 LOAD_FAST 21 ( arr2 )					  
							      60 STORE_FAST 8 ( curr_diff )				    72 LOAD_FAST 22 ( arr2 )					  
							      								    74 LOAD_FAST 22 ( arr2 )					  
							      9 62 LOAD_FAST 8 ( curr_diff )				    76 LOAD_FAST 21 ( arr2 )					  
							      64 LOAD_CONST 1 ( 0 )					    78 LOAD_FAST 22 ( arr2 )					  
							      66 COMPARE_OP 2 ( == )					    80 LOAD_FAST 22 ( arr2 )					  
							      68 POP_JUMP_IF_FALSE 80					    82 LOAD_FAST 21 ( arr2 )					  
							      								    84 LOAD_FAST 22 ( arr2 )					  
							      10 70 LOAD_FAST 7 ( i )					    86 LOAD_FAST 23 ( arr2 )					  
							      72 LOAD_CONST 2 ( 1 )					    88 LOAD_FAST 22 ( arr2 )					  
							      74 BINARY_ADD						    90 LOAD_FAST 21 ( arr2 )					  
							      76 STORE_FAST 3 ( maxLen )				    92 LOAD_FAST 22 ( arr2 )					  
							      78 JUMP_ABSOLUTE 26					    94 LOAD_FAST 21 ( arr2 )					  
							      								    96 LOAD_FAST 22 ( arr2 )					  
							      11 >> 80 LOAD_FAST 8 ( curr_diff )			    98 LOAD_FAST 23 ( arr2 )					  
							      82 LOAD_FAST 6 ( diff )					    100 LOAD_FAST 22 ( arr2 )					  
							      84 COMPARE_OP 7 ( not in )				    102 LOAD_FAST 23 ( arr2 )					  
							      86 POP_JUMP_IF_FALSE 98					    104 LOAD_FAST 22 ( arr2 )					  
							      								    106 LOAD_FAST 24 ( arr2 )					  
							      12 88 LOAD_FAST 7 ( i )					    108 LOAD_FAST 23 ( arr2 )					  
							      90 LOAD_FAST 6 ( diff )					    110 LOAD_FAST 22 ( arr2 )					  
							      92 LOAD_FAST 8 ( curr_diff )				    112 LOAD_FAST 24 ( arr2 )					  
							      94 STORE_SUBSCR						    114 LOAD_FAST 23 ( arr2 )					  
							      96 JUMP_ABSOLUTE 26					    116 LOAD_FAST 24 ( arr2 )					  
							      								    118 LOAD_FAST 23 ( arr2 )					  
							      14 >> 98 LOAD_FAST 7 ( i )				    120 LOAD_FAST 24 ( arr2 )					  
							      100 LOAD_FAST 6 ( diff )					    122 LOAD_FAST 25 ( arr2 )					  
							      102 LOAD_FAST 8 ( curr_diff )				    124 LOAD_FAST 26 ( arr2 )					  
							      104 BINARY_SUBSCR						    126 BUILD_TUPLE 5						  
							      106 BINARY_SUBTRACT					    128 STORE_SUBSCR						  
							      108 STORE_FAST 9 ( length )				    								  
							      								    27 130 LOAD_FAST 0 ( arr1 )					  
							      15 110 LOAD_GLOBAL 1 ( max )				    132 RETURN_VALUE						  
							      112 LOAD_FAST 3 ( maxLen )				    NEW_LINE							  
							      114 LOAD_FAST 9 ( length )				    								  
							      116 CALL_FUNCTION 2					    								  
							      118 STORE_FAST 3 ( maxLen )				    								  
							      120 JUMP_ABSOLUTE 26					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      16 >> 124 LOAD_FAST 3 ( maxLen )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1
--							      --							    --								  --
def findTriplets ( arr , n ) :				      Disassembly of <code object findTriplets at 0x7fbac<<unk>> de Disassembly of <code object findTriplets at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    found = False					      2 0 LOAD_CONST 1 ( False )				    69 0 LOAD_CONST 1 ( False )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n - 1 ) :				      2 STORE_FAST 2 ( found )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 51, in <module>	  Fi
	s = set ( )					      								    								  le "<dis>", line 2, in findTriplets TypeError: 'li
	for j in range ( i + 1 , n ) :			      3 4 SETUP_LOOP 116 ( to 122 )				    70 4 SETUP_LOOP 52 ( to 54 )				  st' object cannot be interpreted as an integer
	    x = - ( arr [ i ] + arr [ j ] )		      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    if x in s :					      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 0 ( arr )					  
		print ( x , arr [ i ] , arr [ j ] )	      10 LOAD_CONST 2 ( 1 )					    10 CALL_FUNCTION 1						  
		found = True				      12 BINARY_SUBTRACT					    12 GET_ITER							  
	    else :					      14 CALL_FUNCTION 1					    >> 14 FOR_ITER 52 ( to 52 )					  
		s.add ( arr [ j ] )			      16 GET_ITER						    16 STORE_FAST 2 ( i )					  
    if found == False :					      >> 18 FOR_ITER 100 ( to 120 )				    								  
	print ( "No Triplet Found" )			      20 STORE_FAST 3 ( i )					    71 18 LOAD_FAST 1 ( n )					  
							      								    20 LOAD_METHOD 1 ( append )					  
							      4 22 LOAD_GLOBAL 1 ( set )				    22 LOAD_FAST 2 ( i )					  
							      24 CALL_FUNCTION 0					    24 CALL_METHOD 1						  
							      26 STORE_FAST 4 ( s )					    26 POP_TOP							  
							      								    28 JUMP_ABSOLUTE 14						  
							      5 28 SETUP_LOOP 88 ( to 118 )				    >> 30 POP_BLOCK						  
							      30 LOAD_GLOBAL 0 ( range )				    >> 32 LOAD_CONST 0 ( None )					  
							      32 LOAD_FAST 3 ( i )					    34 RETURN_VALUE						  
							      34 LOAD_CONST 2 ( 1 )					    NEW_LINE							  
							      36 BINARY_ADD						    								  
							      38 LOAD_FAST 1 ( n )					    								  
							      40 CALL_FUNCTION 2					    								  
							      42 GET_ITER						    								  
							      >> 44 FOR_ITER 70 ( to 116 )				    								  
							      46 STORE_FAST 5 ( j )					    								  
							      								    								  
							      6 48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 3 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 5 ( j )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 BINARY_ADD						    								  
							      62 UNARY_NEGATIVE						    								  
							      64 STORE_FAST 6 ( x )					    								  
							      								    								  
							      7 66 LOAD_FAST 6 ( x )					    								  
							      68 LOAD_FAST 4 ( s )					    								  
							      70 COMPARE_OP 6 ( in )					    								  
							      72 POP_JUMP_IF_FALSE 100					    								  
							      								    								  
							      8 74 LOAD_GLOBAL 2 ( print )				    								  
							      76 LOAD_FAST 6 ( x )					    								  
							      78 LOAD_FAST 0 ( arr )					    								  
							      80 LOAD_FAST 3 ( i )					    								  
							      82 BINARY_SUBSCR						    								  
							      84 LOAD_FAST 0 ( arr )					    								  
							      86 LOAD_FAST 5 ( j )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 CALL_FUNCTION 3					    								  
							      92 POP_TOP						    								  
							      								    								  
							      9 94 LOAD_CONST 3 ( True )				    								  
							      96 STORE_FAST 2 ( found )					    								  
							      98 JUMP_ABSOLUTE 44					    								  
							      								    								  
							      11 >> 100 LOAD_FAST 4 ( s )				    								  
							      102 LOAD_METHOD 3 ( add )					    								  
							      104 LOAD_FAST 0 ( arr )					    								  
							      106 LOAD_FAST 5 ( j )					    								  
							      108 BINARY_SUBSCR						    								  
							      110 CALL_METHOD 1						    								  
							      112 POP_TOP						    								  
							      114 JUMP_ABSOLUTE 44					    								  
							      >> 116 POP_BLOCK						    								  
							      >> 118 JUMP_ABSOLUTE 18					    								  
							      >> 120 POP_BLOCK						    								  
							      								    								  
							      12 >> 122 LOAD_FAST 2 ( found )				    								  
							      124 LOAD_CONST 1 ( False )				    								  
							      126 COMPARE_OP 2 ( == )					    								  
							      128 POP_JUMP_IF_FALSE 138					    								  
							      								    								  
							      13 130 LOAD_GLOBAL 2 ( print )				    								  
							      132 LOAD_CONST 4 ( 'No Triplet Found' )			    								  
							      134 CALL_FUNCTION 1					    								  
							      136 POP_TOP						    								  
							      >> 138 LOAD_CONST 0 ( None )				    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_VALID_SEQUENCE_DIVISIBLE_M			      CHECK_VALID_SEQUENCE_DIVISIBLE_M				    CHECK_VALID_SEQUENCE_DIVISIBLE_M				  CHECK_VALID_SEQUENCE_DIVISIBLE_M
--							      --							    --								  --
def isPossible ( n , index , Sum , M , arr , dp ) :	      Disassembly of <code object isPossible at 0x7fbac0e8bc90, fil Disassembly of <code object isPossible at 0x7f816a683d20, fil error : Traceback (most recent call last):   File
    global MAX						      3 0 LOAD_FAST 1 ( index )					    258 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    if index == n :					      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	if ( Sum % M ) == 0 :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  y", line 54, in run_dis_script     hyp_co = mco.to
	    return True					      6 POP_JUMP_IF_FALSE 28					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	return False					      								    								  assembler.py", line 81, in to_co     co_consts.app
    if dp [ index ] [ Sum ] != - 1 :			      4 8 LOAD_FAST 2 ( Sum )					    259 8 LOAD_CONST 2 ( True )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	return dp [ index ] [ Sum ]			      10 LOAD_FAST 3 ( M )					    10 RETURN_VALUE						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    placeAdd = isPossible ( n , index + 1 , Sum + arr [ index 12 BINARY_MODULO						    								  co	 self.co_cellvars, ValueError: code: varname
    placeMinus = isPossible ( n , index + 1 , Sum - arr [ ind 14 LOAD_CONST 1 ( 0 )					    260 >> 12 LOAD_FAST 0 ( n )					  s is too small
    res = placeAdd or placeMinus			      16 COMPARE_OP 2 ( == )					    14 LOAD_CONST 1 ( 0 )					  
    dp [ index ] [ Sum ] = res				      18 POP_JUMP_IF_FALSE 24					    16 COMPARE_OP 2 ( == )					  
    return res						      								    18 POP_JUMP_IF_FALSE 28					  
							      5 20 LOAD_CONST 2 ( True )				    								  
							      22 RETURN_VALUE						    261 20 LOAD_CONST 3 ( True )				  
							      								    22 RETURN_VALUE						  
							      6 >> 24 LOAD_CONST 3 ( False )				    								  
							      26 RETURN_VALUE						    262 >> 24 LOAD_CONST 4 ( True )				  
							      								    26 RETURN_VALUE						  
							      7 >> 28 LOAD_FAST 5 ( dp )				    28 LOAD_CONST 0 ( None )					  
							      30 LOAD_FAST 1 ( index )					    30 RETURN_VALUE						  
							      32 BINARY_SUBSCR						    NEW_LINE							  
							      34 LOAD_FAST 2 ( Sum )					    								  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_CONST 4 ( - 1 )					    								  
							      40 COMPARE_OP 3 ( != )					    								  
							      42 POP_JUMP_IF_FALSE 56					    								  
							      								    								  
							      8 44 LOAD_FAST 5 ( dp )					    								  
							      46 LOAD_FAST 1 ( index )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_FAST 2 ( Sum )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 RETURN_VALUE						    								  
							      								    								  
							      9 >> 56 LOAD_GLOBAL 0 ( isPossible )			    								  
							      58 LOAD_FAST 0 ( n )					    								  
							      60 LOAD_FAST 1 ( index )					    								  
							      62 LOAD_CONST 5 ( 1 )					    								  
							      64 BINARY_ADD						    								  
							      66 LOAD_FAST 2 ( Sum )					    								  
							      68 LOAD_FAST 4 ( arr )					    								  
							      70 LOAD_FAST 1 ( index )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 BINARY_ADD						    								  
							      76 LOAD_FAST 3 ( M )					    								  
							      78 LOAD_FAST 4 ( arr )					    								  
							      80 LOAD_FAST 5 ( dp )					    								  
							      82 CALL_FUNCTION 6					    								  
							      84 STORE_FAST 6 ( placeAdd )				    								  
							      								    								  
							      10 86 LOAD_GLOBAL 0 ( isPossible )			    								  
							      88 LOAD_FAST 0 ( n )					    								  
							      90 LOAD_FAST 1 ( index )					    								  
							      92 LOAD_CONST 5 ( 1 )					    								  
							      94 BINARY_ADD						    								  
							      96 LOAD_FAST 2 ( Sum )					    								  
							      98 LOAD_FAST 4 ( arr )					    								  
							      100 LOAD_FAST 1 ( index )					    								  
							      102 BINARY_SUBSCR						    								  
							      104 BINARY_SUBTRACT					    								  
							      106 LOAD_FAST 3 ( M )					    								  
							      108 LOAD_FAST 4 ( arr )					    								  
							      110 LOAD_FAST 5 ( dp )					    								  
							      112 CALL_FUNCTION 6					    								  
							      114 STORE_FAST 7 ( placeMinus )				    								  
							      								    								  
							      11 116 LOAD_FAST 6 ( placeAdd )				    								  
							      118 JUMP_IF_TRUE_OR_POP 122				    								  
							      120 LOAD_FAST 7 ( placeMinus )				    								  
							      >> 122 STORE_FAST 8 ( res )				    								  
							      								    								  
							      12 124 LOAD_FAST 8 ( res )				    								  
							      126 LOAD_FAST 5 ( dp )					    								  
							      128 LOAD_FAST 1 ( index )					    								  
							      130 BINARY_SUBSCR						    								  
							      132 LOAD_FAST 2 ( Sum )					    								  
							      134 STORE_SUBSCR						    								  
							      								    								  
							      13 136 LOAD_FAST 8 ( res )				    								  
							      138 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM				      FIND_SUBARRAY_WITH_GIVEN_SUM				    FIND_SUBARRAY_WITH_GIVEN_SUM				  FIND_SUBARRAY_WITH_GIVEN_SUM
--							      --							    --								  --
def subArraySum ( arr , n , sum ) :			      Disassembly of <code object subArraySum at 0x7fbac<<unk>> de4 Disassembly of <code object subArraySum at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    for i in range ( n ) :				      2 0 SETUP_LOOP 124 ( to 126 )				    101 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 60, in <module>	exec
	curr_sum = arr [ i ]				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 41, in <module>	  Fi
	j = i + 1					      4 LOAD_FAST 1 ( n )					    4 GET_ITER							  le "<dis>", line 2, in subArraySum TypeError: 'int
	while j <= n :					      6 CALL_FUNCTION 1						    >> 6 FOR_ITER 14 ( to 22 )					  ' object is not iterable
	    if curr_sum == sum :			      8 GET_ITER						    8 STORE_FAST 2 ( i )					  
		print ( "Sum found between" )		      >> 10 FOR_ITER 112 ( to 124 )				    								  
		print ( "indexes %d and %d" % ( i , j - 1 ) ) 12 STORE_FAST 3 ( i )					    102 10 LOAD_GLOBAL 0 ( print )				  
		return 1				      								    12 LOAD_CONST 1 ( 'Sum found between %d and %d and %d %d %d % 
	    if curr_sum > sum or j == n :		      3 14 LOAD_FAST 0 ( arr )					    14 LOAD_FAST 2 ( i )					  
		break					      16 LOAD_FAST 3 ( i )					    16 BINARY_MODULO						  
	    curr_sum = curr_sum + arr [ j ]		      18 BINARY_SUBSCR						    18 CALL_FUNCTION 1						  
	    j += 1					      20 STORE_FAST 4 ( curr_sum )				    20 POP_TOP							  
    print ( "No subarray found" )			      								    22 JUMP_ABSOLUTE 6						  
    return 0						      4 22 LOAD_FAST 3 ( i )					    >> 24 POP_BLOCK						  
							      24 LOAD_CONST 1 ( 1 )					    >> 26 LOAD_CONST 0 ( None )					  
							      26 BINARY_ADD						    28 RETURN_VALUE						  
							      28 STORE_FAST 5 ( j )					    NEW_LINE							  
							      								    								  
							      5 30 SETUP_LOOP 90 ( to 122 )				    								  
							      >> 32 LOAD_FAST 5 ( j )					    								  
							      34 LOAD_FAST 1 ( n )					    								  
							      36 COMPARE_OP 1 ( <= )					    								  
							      38 POP_JUMP_IF_FALSE 120					    								  
							      								    								  
							      6 40 LOAD_FAST 4 ( curr_sum )				    								  
							      42 LOAD_FAST 2 ( sum )					    								  
							      44 COMPARE_OP 2 ( == )					    								  
							      46 POP_JUMP_IF_FALSE 80					    								  
							      								    								  
							      7 48 LOAD_GLOBAL 1 ( print )				    								  
							      50 LOAD_CONST 2 ( 'Sum found between' )			    								  
							      52 CALL_FUNCTION 1					    								  
							      54 POP_TOP						    								  
							      								    								  
							      8 56 LOAD_GLOBAL 1 ( print )				    								  
							      58 LOAD_CONST 3 ( 'indexes %d and %d' )			    								  
							      60 LOAD_FAST 3 ( i )					    								  
							      62 LOAD_FAST 5 ( j )					    								  
							      64 LOAD_CONST 1 ( 1 )					    								  
							      66 BINARY_SUBTRACT					    								  
							      68 BUILD_TUPLE 2						    								  
							      70 BINARY_MODULO						    								  
							      72 CALL_FUNCTION 1					    								  
							      74 POP_TOP						    								  
							      								    								  
							      9 76 LOAD_CONST 1 ( 1 )					    								  
							      78 RETURN_VALUE						    								  
							      								    								  
							      10 >> 80 LOAD_FAST 4 ( curr_sum )				    								  
							      82 LOAD_FAST 2 ( sum )					    								  
							      84 COMPARE_OP 4 ( > )					    								  
							      86 POP_JUMP_IF_TRUE 96					    								  
							      88 LOAD_FAST 5 ( j )					    								  
							      90 LOAD_FAST 1 ( n )					    								  
							      92 COMPARE_OP 2 ( == )					    								  
							      94 POP_JUMP_IF_FALSE 98					    								  
							      								    								  
							      11 >> 96 BREAK_LOOP					    								  
							      								    								  
							      12 >> 98 LOAD_FAST 4 ( curr_sum )				    								  
							      100 LOAD_FAST 0 ( arr )					    								  
							      102 LOAD_FAST 5 ( j )					    								  
							      104 BINARY_SUBSCR						    								  
							      106 BINARY_ADD						    								  
							      108 STORE_FAST 4 ( curr_sum )				    								  
							      								    								  
							      13 110 LOAD_FAST 5 ( j )					    								  
							      112 LOAD_CONST 1 ( 1 )					    								  
							      114 INPLACE_ADD						    								  
							      116 STORE_FAST 5 ( j )					    								  
							      118 JUMP_ABSOLUTE 32					    								  
							      >> 120 POP_BLOCK						    								  
							      >> 122 JUMP_ABSOLUTE 10					    								  
							      >> 124 POP_BLOCK						    								  
							      								    								  
							      14 >> 126 LOAD_GLOBAL 1 ( print )				    								  
							      128 LOAD_CONST 4 ( 'No subarray found' )			    								  
							      130 CALL_FUNCTION 1					    								  
							      132 POP_TOP						    								  
							      								    								  
							      15 134 LOAD_CONST 5 ( 0 )					    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD
--							      --							    --								  --
def assign ( a , n ) :					      Disassembly of <code object assign at 0x7fbac0e89d20, file "< Disassembly of <code object assign at 0x7f816a6e4b70, file "< script_not_found : None
    a.sort ( )						      2 0 LOAD_FAST 0 ( a )					    26 0 LOAD_FAST 0 ( a )					  
    ans = [ 0 ] * n					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_FAST 1 ( n )						  
    p = 0						      4 CALL_METHOD 0						    4 BINARY_MULTIPLY						  
    q = n - 1						      6 POP_TOP							    6 STORE_FAST 2 ( a )					  
    for i in range ( n ) :				      								    								  
	if ( i + 1 ) % 2 == 0 :				      3 8 LOAD_CONST 1 ( 0 )					    27 8 LOAD_FAST 0 ( a )					  
	    ans [ i ] = a [ q ]				      10 BUILD_LIST 1						    10 LOAD_FAST 2 ( a )					  
	    q = q - 1					      12 LOAD_FAST 1 ( n )					    12 BINARY_MULTIPLY						  
	else :						      14 BINARY_MULTIPLY					    14 LOAD_FAST 2 ( a )					  
	    ans [ i ] = a [ p ]				      16 STORE_FAST 2 ( ans )					    16 BINARY_MULTIPLY						  
	    p = p + 1					      								    18 LOAD_FAST 2 ( a )					  
    for i in range ( n ) :				      4 18 LOAD_CONST 1 ( 0 )					    20 BINARY_MULTIPLY						  
	print ( ans [ i ] , end = " " )			      20 STORE_FAST 3 ( p )					    22 LOAD_FAST 3 ( b )					  
							      								    24 BINARY_MULTIPLY						  
							      5 22 LOAD_FAST 1 ( n )					    26 BINARY_ADD						  
							      24 LOAD_CONST 2 ( 1 )					    28 LOAD_FAST 2 ( a )					  
							      26 BINARY_SUBTRACT					    30 BINARY_MULTIPLY						  
							      28 STORE_FAST 4 ( q )					    32 BINARY_ADD						  
							      								    34 RETURN_VALUE						  
							      6 30 SETUP_LOOP 74 ( to 106 )				    NEW_LINE							  
							      32 LOAD_GLOBAL 1 ( range )				    								  
							      34 LOAD_FAST 1 ( n )					    								  
							      36 CALL_FUNCTION 1					    								  
							      38 GET_ITER						    								  
							      >> 40 FOR_ITER 62 ( to 104 )				    								  
							      42 STORE_FAST 5 ( i )					    								  
							      								    								  
							      7 44 LOAD_FAST 5 ( i )					    								  
							      46 LOAD_CONST 2 ( 1 )					    								  
							      48 BINARY_ADD						    								  
							      50 LOAD_CONST 3 ( 2 )					    								  
							      52 BINARY_MODULO						    								  
							      54 LOAD_CONST 1 ( 0 )					    								  
							      56 COMPARE_OP 2 ( == )					    								  
							      58 POP_JUMP_IF_FALSE 82					    								  
							      								    								  
							      8 60 LOAD_FAST 0 ( a )					    								  
							      62 LOAD_FAST 4 ( q )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 2 ( ans )					    								  
							      68 LOAD_FAST 5 ( i )					    								  
							      70 STORE_SUBSCR						    								  
							      								    								  
							      9 72 LOAD_FAST 4 ( q )					    								  
							      74 LOAD_CONST 2 ( 1 )					    								  
							      76 BINARY_SUBTRACT					    								  
							      78 STORE_FAST 4 ( q )					    								  
							      80 JUMP_ABSOLUTE 40					    								  
							      								    								  
							      11 >> 82 LOAD_FAST 0 ( a )				    								  
							      84 LOAD_FAST 3 ( p )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_FAST 2 ( ans )					    								  
							      90 LOAD_FAST 5 ( i )					    								  
							      92 STORE_SUBSCR						    								  
							      								    								  
							      12 94 LOAD_FAST 3 ( p )					    								  
							      96 LOAD_CONST 2 ( 1 )					    								  
							      98 BINARY_ADD						    								  
							      100 STORE_FAST 3 ( p )					    								  
							      102 JUMP_ABSOLUTE 40					    								  
							      >> 104 POP_BLOCK						    								  
							      								    								  
							      13 >> 106 SETUP_LOOP 32 ( to 140 )			    								  
							      108 LOAD_GLOBAL 1 ( range )				    								  
							      110 LOAD_FAST 1 ( n )					    								  
							      112 CALL_FUNCTION 1					    								  
							      114 GET_ITER						    								  
							      >> 116 FOR_ITER 20 ( to 138 )				    								  
							      118 STORE_FAST 5 ( i )					    								  
							      								    								  
							      14 120 LOAD_GLOBAL 2 ( print )				    								  
							      122 LOAD_FAST 2 ( ans )					    								  
							      124 LOAD_FAST 5 ( i )					    								  
							      126 BINARY_SUBSCR						    								  
							      128 LOAD_CONST 4 ( ' ' )					    								  
							      130 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      132 CALL_FUNCTION_KW 2					    								  
							      134 POP_TOP						    								  
							      136 JUMP_ABSOLUTE 116					    								  
							      >> 138 POP_BLOCK						    								  
							      >> 140 LOAD_CONST 0 ( None )				    								  
							      142 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN
--							      --							    --								  --
def findMinInsertions ( str , l , h ) :			      Disassembly of <code object findMinInsertions at 0x7fbac0e8bc Disassembly of <code object findMinInsertions at 0x7f816a673a error : Traceback (most recent call last):   File
    if ( l > h ) :					      2 0 LOAD_FAST 1 ( l )					    26 0 LOAD_FAST 0 ( self )					  "XLM/dis_script.py", line 59, in <module>	for
	return sys.maxsize				      2 LOAD_FAST 2 ( h )					    2 LOAD_ATTR 0 ( maxsize )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( l == h ) :					      4 COMPARE_OP 4 ( > )					    4 POP_JUMP_IF_FALSE 20					  y", line 47, in run_dis_script     co_code, co_nlo
	return 0					      6 POP_JUMP_IF_FALSE 14					    								  cals, co_varnames, co_names, co_consts, co_linesta
    if ( l == h - 1 ) :					      								    27 6 LOAD_GLOBAL 1 ( findMinInsertions )			  rts = dis_asm.parse(bytecode) TypeError: cannot un
	return 0 if ( str [ l ] == str [ h ] ) else 1	      3 8 LOAD_GLOBAL 0 ( sys )					    8 LOAD_FAST 0 ( self )					  pack non-iterable NoneType object
    if ( str [ l ] == str [ h ] ) :			      10 LOAD_ATTR 1 ( maxsize )				    10 LOAD_ATTR 0 ( maxsize )					  
	return findMinInsertions ( str , l + 1 , h - 1 )      12 RETURN_VALUE						    12 CALL_FUNCTION 1						  
    else :						      								    14 POP_JUMP_IF_FALSE 20					  
	return ( min ( findMinInsertions ( str , l , h - 1 )  4 >> 14 LOAD_FAST 1 ( l )					    								  
							      16 LOAD_FAST 2 ( h )					    28 16 LOAD_GLOBAL 1 ( findMinInsertions )			  
							      18 COMPARE_OP 2 ( == )					    18 LOAD_FAST 0 ( self )					  
							      20 POP_JUMP_IF_FALSE 26					    20 LOAD_ATTR 0 ( maxsize )					  
							      								    22 CALL_FUNCTION 1						  
							      5 22 LOAD_CONST 1 ( 0 )					    24 STORE_FAST 1 ( l )					  
							      24 RETURN_VALUE						    								  
							      								    29 26 LOAD_FAST 1 ( l )					  
							      6 >> 26 LOAD_FAST 1 ( l )					    28 LOAD_FAST 0 ( self )					  
							      28 LOAD_FAST 2 ( h )					    30 LOAD_ATTR 0 ( maxsize )					  
							      30 LOAD_CONST 2 ( 1 )					    32 COMPARE_OP 4 ( > )					  
							      32 BINARY_SUBTRACT					    34 POP_JUMP_IF_FALSE 40					  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_FALSE 62					    30 36 LOAD_FAST 1 ( l )					  
							      								    38 LOAD_FAST 0 ( self )					  
							      7 38 LOAD_FAST 0 ( str )					    40 LOAD_ATTR 0 ( maxsize )					  
							      40 LOAD_FAST 1 ( l )					    42 COMPARE_OP 4 ( > )					  
							      42 BINARY_SUBSCR						    44 POP_JUMP_IF_FALSE 50					  
							      44 LOAD_FAST 0 ( str )					    								  
							      46 LOAD_FAST 2 ( h )					    31 46 LOAD_FAST 1 ( l )					  
							      48 BINARY_SUBSCR						    48 LOAD_FAST 0 ( self )					  
							      50 COMPARE_OP 2 ( == )					    50 LOAD_ATTR 0 ( maxsize )					  
							      52 POP_JUMP_IF_FALSE 58					    52 COMPARE_OP 4 ( > )					  
							      54 LOAD_CONST 1 ( 0 )					    54 POP_JUMP_IF_FALSE 50					  
							      56 RETURN_VALUE						    								  
							      >> 58 LOAD_CONST 2 ( 1 )					    32 56 LOAD_FAST 1 ( l )					  
							      60 RETURN_VALUE						    58 LOAD_FAST 0 ( self )					  
							      								    60 LOAD_ATTR 0 ( maxsize )					  
							      8 >> 62 LOAD_FAST 0 ( str )				    62 COMPARE_OP 4 ( > )					  
							      64 LOAD_FAST 1 ( l )					    64 POP_JUMP_IF_FALSE 70					  
							      66 BINARY_SUBSCR						    								  
							      68 LOAD_FAST 0 ( str )					    33 66 LOAD_FAST 1 ( l )					  
							      70 LOAD_FAST 2 ( h )					    68 LOAD_FAST 0 ( self )					  
							      72 BINARY_SUBSCR						    70 LOAD_ATTR 0 ( maxsize )					  
							      74 COMPARE_OP 2 ( == )					    72 COMPARE_OP 4 ( > )					  
							      76 POP_JUMP_IF_FALSE 98					    74 POP_JUMP_IF_FALSE 82					  
							      								    								  
							      9 78 LOAD_GLOBAL 2 ( findMinInsertions )			    34 76 LOAD_FAST 1 ( l )					  
							      80 LOAD_FAST 0 ( str )					    78 LOAD_FAST 0 ( self )					  
							      82 LOAD_FAST 1 ( l )					    80 LOAD_ATTR 0 ( maxsize )					  
							      84 LOAD_CONST 2 ( 1 )					    82 COMPARE_OP 4 ( > )					  
							      86 BINARY_ADD						    84 POP_JUMP_IF_FALSE 98					  
							      88 LOAD_FAST 2 ( h )					    								  
							      90 LOAD_CONST 2 ( 1 )					    35 86 LOAD_FAST 1 ( l )					  
							      92 BINARY_SUBTRACT					    88 LOAD_FAST 0 ( self )					  
							      94 CALL_FUNCTION 3					    90 LOAD_ATTR 0 ( maxsize )					  
							      96 RETURN_VALUE						    92 COMPARE_OP 4 ( > )					  
							      								    94 POP_JUMP_IF_FALSE 98					  
							      11 >> 98 LOAD_GLOBAL 3 ( min )				    								  
							      100 LOAD_GLOBAL 2 ( findMinInsertions )			    36 96 LOAD_FAST 1 ( l )					  
							      102 LOAD_FAST 0 ( str )					    98 LOAD_FAST 0 ( self )					  
							      104 LOAD_FAST 1 ( l )					    100 LOAD_ATTR 0 ( maxsize )					  
							      106 LOAD_FAST 2 ( h )					    102 COMPARE_OP 4 ( > )					  
							      108 LOAD_CONST 2 ( 1 )					    104 POP_JUMP_IF_FALSE 98					  
							      110 BINARY_SUBTRACT					    								  
							      112 CALL_FUNCTION 3					    37 >> 106 LOAD_FAST 1 ( l )					  
							      114 LOAD_GLOBAL 2 ( findMinInsertions )			    108 LOAD_FAST 0 ( self )					  
							      116 LOAD_FAST 0 ( str )					    110 LOAD_ATTR 0 ( maxsize )					  
							      118 LOAD_FAST 1 ( l )					    112 COMPARE_OP 4 ( > )					  
							      120 LOAD_CONST 2 ( 1 )					    114 POP_JUMP_IF_FALSE 98					  
							      122 BINARY_ADD						    								  
							      124 LOAD_FAST 2 ( h )					    38 116 LOAD_FAST 1 ( l )					  
							      126 CALL_FUNCTION 3					    118 LOAD_FAST 0 ( self )					  
							      128 CALL_FUNCTION 2					    120 LOAD_ATTR 0 ( maxsize )					  
							      130 LOAD_CONST 2 ( 1 )					    122 COMPARE_OP 4 ( > )					  
							      132 BINARY_ADD						    124 POP_JUMP_IF_FALSE 98					  
							      134 RETURN_VALUE						    								  
							      136 LOAD_CONST 0 ( None )					    39 126 LOAD_FAST 1 ( l )					  
							      138 RETURN_VALUE NEW_LINE					    128 LOAD_FAST 0 ( self )					  
							      								    130 LOAD_ATTR 0 ( maxsize )					  
							      								    132 COMPARE_OP 4 ( > )					  
							      								    134 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    40 136 LOAD_FAST 1 ( l )					  
							      								    138 LOAD_FAST 0 ( self )					  
							      								    140 LOAD_ATTR 0 ( maxsize )					  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( l					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC		  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC
--							      --							    --								  --
def minimumflip ( mat , n ) :				      Disassembly of <code object minimumflip at 0x7fbac<<unk>> de4 Disassembly of <code object minimumflip at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    transpose = [ [ 0 ] * n ] * n			      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_GLOBAL 0 ( transpose )				  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 LOAD_FAST 0 ( mat )					  (item)   File "main.py", line 37, in <module>	  Fi
	for j in range ( n ) :				      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in minimumflip NameError: name
	    transpose [ i ] [ j ] = mat [ j ] [ i ]	      6 BINARY_MULTIPLY						    6 LOAD_FAST 2 ( n )						   'transpose' is not defined
    flip = 0						      8 BUILD_LIST 1						    8 LOAD_FAST 3 ( n )						  
    for i in range ( n ) :				      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 4 ( n )					  
	for j in range ( n ) :				      12 BINARY_MULTIPLY					    12 LOAD_FAST 5 ( axis )					  
	    if transpose [ i ] [ j ] != mat [ i ] [ j ] :     14 STORE_FAST 2 ( transpose )				    14 LOAD_FAST 6 ( axis )					  
		flip += 1				      								    16 LOAD_CONST 1 ( ( 'axis' , 'axis' ) )			  
    return int ( flip / 2 )				      3 16 SETUP_LOOP 54 ( to 72 )				    18 CALL_FUNCTION_KW 7					  
							      18 LOAD_GLOBAL 0 ( range )				    20 CALL_FUNCTION 1						  
							      20 LOAD_FAST 1 ( n )					    22 RETURN_VALUE						  
							      22 CALL_FUNCTION 1					    NEW_LINE							  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 42 ( to 70 )				    								  
							      28 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 30 SETUP_LOOP 36 ( to 68 )				    								  
							      32 LOAD_GLOBAL 0 ( range )				    								  
							      34 LOAD_FAST 1 ( n )					    								  
							      36 CALL_FUNCTION 1					    								  
							      38 GET_ITER						    								  
							      >> 40 FOR_ITER 24 ( to 66 )				    								  
							      42 STORE_FAST 4 ( j )					    								  
							      								    								  
							      5 44 LOAD_FAST 0 ( mat )					    								  
							      46 LOAD_FAST 4 ( j )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_FAST 3 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 2 ( transpose )				    								  
							      56 LOAD_FAST 3 ( i )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 LOAD_FAST 4 ( j )					    								  
							      62 STORE_SUBSCR						    								  
							      64 JUMP_ABSOLUTE 40					    								  
							      >> 66 POP_BLOCK						    								  
							      >> 68 JUMP_ABSOLUTE 26					    								  
							      >> 70 POP_BLOCK						    								  
							      								    								  
							      6 >> 72 LOAD_CONST 1 ( 0 )				    								  
							      74 STORE_FAST 5 ( flip )					    								  
							      								    								  
							      7 76 SETUP_LOOP 66 ( to 144 )				    								  
							      78 LOAD_GLOBAL 0 ( range )				    								  
							      80 LOAD_FAST 1 ( n )					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 GET_ITER						    								  
							      >> 86 FOR_ITER 54 ( to 142 )				    								  
							      88 STORE_FAST 3 ( i )					    								  
							      								    								  
							      8 90 SETUP_LOOP 48 ( to 140 )				    								  
							      92 LOAD_GLOBAL 0 ( range )				    								  
							      94 LOAD_FAST 1 ( n )					    								  
							      96 CALL_FUNCTION 1					    								  
							      98 GET_ITER						    								  
							      >> 100 FOR_ITER 36 ( to 138 )				    								  
							      102 STORE_FAST 4 ( j )					    								  
							      								    								  
							      9 104 LOAD_FAST 2 ( transpose )				    								  
							      106 LOAD_FAST 3 ( i )					    								  
							      108 BINARY_SUBSCR						    								  
							      110 LOAD_FAST 4 ( j )					    								  
							      112 BINARY_SUBSCR						    								  
							      114 LOAD_FAST 0 ( mat )					    								  
							      116 LOAD_FAST 3 ( i )					    								  
							      118 BINARY_SUBSCR						    								  
							      120 LOAD_FAST 4 ( j )					    								  
							      122 BINARY_SUBSCR						    								  
							      124 COMPARE_OP 3 ( != )					    								  
							      126 POP_JUMP_IF_FALSE 100					    								  
							      								    								  
							      10 128 LOAD_FAST 5 ( flip )				    								  
							      130 LOAD_CONST 2 ( 1 )					    								  
							      132 INPLACE_ADD						    								  
							      134 STORE_FAST 5 ( flip )					    								  
							      136 JUMP_ABSOLUTE 100					    								  
							      >> 138 POP_BLOCK						    								  
							      >> 140 JUMP_ABSOLUTE 86					    								  
							      >> 142 POP_BLOCK						    								  
							      								    								  
							      11 >> 144 LOAD_GLOBAL 1 ( int )				    								  
							      146 LOAD_FAST 5 ( flip )					    								  
							      148 LOAD_CONST 3 ( 2 )					    								  
							      150 BINARY_TRUE_DIVIDE					    								  
							      152 CALL_FUNCTION 1					    								  
							      154 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10
--							      --							    --								  --
def calculate ( N ) :					      Disassembly of <code object calculate at 0x7fbac<<unk>> d540, Disassembly of <code object calculate at 0x7f8169feb660, file error : Traceback (most recent call last):   File
    length = len ( N )					      2 0 LOAD_GLOBAL 0 ( len )					    149 0 LOAD_FAST 1 ( length )				  "XLM/dis_script.py", line 60, in <module>	exec
    l = int ( ( length ) / 2 )				      2 LOAD_FAST 0 ( N )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 42, in <module>	  Fi
    count = 0						      4 CALL_FUNCTION 1						    4 BINARY_SUBSCR						  le "<dis>", line 2, in calculate UnboundLocalError
    for i in range ( l + 1 ) :				      6 STORE_FAST 1 ( length )					    6 STORE_FAST 2 ( N )					  : local variable 'length' referenced before assign
	s = N [ 0 : 0 + i ]				      								    								  ment
	l1 = len ( s )					      3 8 LOAD_GLOBAL 1 ( int )					    150 8 LOAD_FAST 0 ( N )					  
	t = N [ i : l1 + i ]				      10 LOAD_FAST 1 ( length )					    10 LOAD_CONST 1 ( 0 )					  
	try :						      12 LOAD_CONST 1 ( 2 )					    12 BINARY_SUBSCR						  
	    if s [ 0 ] == '0' or t [ 0 ] == '0' :	      14 BINARY_TRUE_DIVIDE					    14 STORE_FAST 3 ( N )					  
		continue				      16 CALL_FUNCTION 1					    								  
	except :					      18 STORE_FAST 2 ( l )					    151 16 LOAD_FAST 2 ( N )					  
	    continue					      								    18 LOAD_CONST 1 ( 0 )					  
	if s == t :					      4 20 LOAD_CONST 2 ( 0 )					    20 BINARY_SUBSCR						  
	    count += 1					      22 STORE_FAST 3 ( count )					    22 STORE_FAST 4 ( N )					  
    return count					      								    								  
							      5 24 SETUP_LOOP 122 ( to 148 )				    152 24 LOAD_FAST 3 ( N )					  
							      26 LOAD_GLOBAL 2 ( range )				    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 2 ( l )					    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 3 ( 1 )					    30 LOAD_CONST 1 ( 0 )					  
							      32 BINARY_ADD						    32 BINARY_SUBSCR						  
							      34 CALL_FUNCTION 1					    34 STORE_FAST 5 ( N )					  
							      36 GET_ITER						    								  
							      >> 38 FOR_ITER 106 ( to 146 )				    153 36 LOAD_FAST 4 ( N )					  
							      40 STORE_FAST 4 ( i )					    38 LOAD_CONST 1 ( 0 )					  
							      								    40 BINARY_SUBSCR						  
							      6 42 LOAD_FAST 0 ( N )					    42 LOAD_CONST 1 ( 0 )					  
							      44 LOAD_CONST 2 ( 0 )					    44 BINARY_SUBSCR						  
							      46 LOAD_CONST 2 ( 0 )					    46 LOAD_FAST 5 ( N )					  
							      48 LOAD_FAST 4 ( i )					    48 LOAD_CONST 1 ( 0 )					  
							      50 BINARY_ADD						    50 BINARY_SUBSCR						  
							      52 BUILD_SLICE 2						    52 LOAD_CONST 1 ( 0 )					  
							      54 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      56 STORE_FAST 5 ( s )					    56 LOAD_CONST 1 ( 0 )					  
							      								    58 BINARY_SUBSCR						  
							      7 58 LOAD_GLOBAL 0 ( len )				    60 LOAD_CONST 1 ( 0 )					  
							      60 LOAD_FAST 5 ( s )					    62 BINARY_SUBSCR						  
							      62 CALL_FUNCTION 1					    64 LOAD_CONST 1 ( 0 )					  
							      64 STORE_FAST 6 ( l1 )					    66 BINARY_SUBSCR						  
							      								    68 LOAD_CONST 1 ( 0 )					  
							      8 66 LOAD_FAST 0 ( N )					    70 BINARY_SUBSCR						  
							      68 LOAD_FAST 4 ( i )					    72 LOAD_CONST 1 ( 0 )					  
							      70 LOAD_FAST 6 ( l1 )					    74 BINARY_SUBSCR						  
							      72 LOAD_FAST 4 ( i )					    76 LOAD_CONST 1 ( 0 )					  
							      74 BINARY_ADD						    78 BINARY_SUBSCR						  
							      76 BUILD_SLICE 2						    80 LOAD_CONST 1 ( 0 )					  
							      78 BINARY_SUBSCR						    82 BINARY_SUBSCR						  
							      80 STORE_FAST 7 ( t )					    84 LOAD_CONST 1 ( 0 )					  
							      								    86 BINARY_SUBSCR						  
							      9 82 SETUP_EXCEPT 30 ( to 114 )				    88 LOAD_CONST 1 ( 0 )					  
							      								    90 BINARY_SUBSCR						  
							      10 84 LOAD_FAST 5 ( s )					    92 LOAD_CONST 1 ( 0 )					  
							      86 LOAD_CONST 2 ( 0 )					    94 BINARY_SUBSCR						  
							      88 BINARY_SUBSCR						    96 LOAD_CONST 1 ( 0 )					  
							      90 LOAD_CONST 4 ( '0' )					    98 BINARY_SUBSCR						  
							      92 COMPARE_OP 2 ( == )					    100 LOAD_CONST 1 ( 0 )					  
							      94 POP_JUMP_IF_TRUE 108					    102 BINARY_SUBSCR						  
							      96 LOAD_FAST 7 ( t )					    104 LOAD_CONST 1 ( 0 )					  
							      98 LOAD_CONST 2 ( 0 )					    106 BINARY_SUBSCR						  
							      100 BINARY_SUBSCR						    108 LOAD_CONST 1 ( 0 )					  
							      102 LOAD_CONST 4 ( '0' )					    110 BINARY_SUBSCR						  
							      104 COMPARE_OP 2 ( == )					    112 LOAD_CONST 1 ( 0 )					  
							      106 POP_JUMP_IF_FALSE 110					    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 1 ( 0 )					  
							      11 >> 108 CONTINUE_LOOP 38				    118 BINARY_SUBSCR						  
							      >> 110 POP_BLOCK						    120 LOAD_CONST 1 ( 0 )					  
							      112 JUMP_FORWARD 14 ( to 128 )				    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 1 ( 0 )					  
							      12 >> 114 POP_TOP						    126 BINARY_SUBSCR						  
							      116 POP_TOP						    128 LOAD_CONST 1 ( 0 )					  
							      118 POP_TOP						    130 BINARY_SUBSCR						  
							      								    132 LOAD_CONST 1 ( 0 )					  
							      13 120 CONTINUE_LOOP 38					    134 BINARY_SUBSCR						  
							      122 POP_EXCEPT						    136 LOAD_CONST 1 ( 0 )					  
							      124 JUMP_FORWARD 2 ( to 128 )				    138 BINARY_SUBSCR						  
							      126 END_FINALLY						    140 LOAD_CONST 1 ( 0 )					  
							      								    142 BINARY_SUBSCR						  
							      14 >> 128 LOAD_FAST 5 ( s )				    144 LOAD_CONST 1 ( 0 )					  
							      130 LOAD_FAST 7 ( t )					    146 BINARY_SUBSCR						  
							      132 COMPARE_OP 2 ( == )					    148 LOAD_CONST 1 ( 0 )					  
							      134 POP_JUMP_IF_FALSE 38					    150 BINARY_SUBSCR						  
							      								    152 LOAD_CONST 1 ( 0 )					  
							      15 136 LOAD_FAST 3 ( count )				    154 BINARY_SUBSCR						  
							      138 LOAD_CONST 3 ( 1 )					    156 LOAD_CONST 1 ( 0 )					  
							      140 INPLACE_ADD						    158 BINARY_SUBSCR						  
							      142 STORE_FAST 3 ( count )				    160 LOAD_CONST 1 ( 0 )					  
							      144 JUMP_ABSOLUTE 38					    162 BINARY_SUBSCR						  
							      >> 146 POP_BLOCK						    164 LOAD_CONST 1 ( 0 )					  
							      								    166 BINARY_SUBSCR						  
							      16 >> 148 LOAD_FAST 3 ( count )				    168 LOAD_CONST 1 ( 0 )					  
							      150 RETURN_VALUE NEW_LINE					    170 BINARY_SUBSCR						  
							      								    								  
							      								    151 172 LOAD_CONST 1 ( 0 )					  
							      								    174 LOAD_CONST 1 ( 0 )					  
							      								    176 BINARY_SUBSCR						  
							      								    174 LOAD_CONST 1 ( 0 )					  
							      								    176 BINARY_SUBSCR						  
							      								    178 LOAD_CONST 1 ( 0 )					  
							      								    180 BINARY_SUBSCR						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY
--							      --							    --								  --
def findInteger ( arr , n ) :				      Disassembly of <code object findInteger at 0x7fbac<<unk>> d54 Disassembly of <code object findInteger at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    hash = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    26 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    maximum = 0						      2 CALL_FUNCTION 0						    2 LOAD_METHOD 1 ( maximum )					  (item)   File "main.py", line 41, in <module>	  Fi
    for i in arr :					      4 STORE_FAST 2 ( hash )					    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in findInteger AttributeError:
	if ( i < 0 ) :					      								    6 CALL_METHOD 1						   type object 'dict' has no attribute 'maximum'
	    if abs ( i ) not in hash.keys ( ) :		      3 6 LOAD_CONST 1 ( 0 )					    8 STORE_FAST 2 ( i )					  
		hash [ abs ( i ) ] = - 1		      8 STORE_FAST 3 ( maximum )				    								  
	    else :					      								    27 10 LOAD_FAST 0 ( arr )					  
		hash [ abs ( i ) ] -= 1			      4 10 SETUP_LOOP 92 ( to 104 )				    12 LOAD_METHOD 2 ( append )					  
	else :						      12 LOAD_FAST 0 ( arr )					    14 LOAD_FAST 2 ( i )					  
	    hash [ i ] = hash.get ( i , 0 ) + 1		      14 GET_ITER						    16 CALL_METHOD 1						  
    for i in arr :					      >> 16 FOR_ITER 84 ( to 102 )				    18 POP_TOP							  
	if i in hash.keys ( ) and hash [ i ] > 0 :	      18 STORE_FAST 4 ( i )					    								  
	    return i					      								    28 20 LOAD_FAST 0 ( arr )					  
    return - 1						      5 20 LOAD_FAST 4 ( i )					    22 LOAD_METHOD 3 ( append )					  
							      22 LOAD_CONST 1 ( 0 )					    24 LOAD_FAST 1 ( n )					  
							      24 COMPARE_OP 0 ( < )					    26 CALL_METHOD 1						  
							      26 POP_JUMP_IF_FALSE 80					    28 POP_TOP							  
							      								    30 LOAD_CONST 0 ( None )					  
							      6 28 LOAD_GLOBAL 1 ( abs )				    32 RETURN_VALUE						  
							      30 LOAD_FAST 4 ( i )					    NEW_LINE							  
							      32 CALL_FUNCTION 1					    								  
							      34 LOAD_FAST 2 ( hash )					    								  
							      36 LOAD_METHOD 2 ( keys )					    								  
							      38 CALL_METHOD 0						    								  
							      40 COMPARE_OP 7 ( not in )				    								  
							      42 POP_JUMP_IF_FALSE 58					    								  
							      								    								  
							      7 44 LOAD_CONST 2 ( - 1 )					    								  
							      46 LOAD_FAST 2 ( hash )					    								  
							      48 LOAD_GLOBAL 1 ( abs )					    								  
							      50 LOAD_FAST 4 ( i )					    								  
							      52 CALL_FUNCTION 1					    								  
							      54 STORE_SUBSCR						    								  
							      56 JUMP_ABSOLUTE 100					    								  
							      								    								  
							      9 >> 58 LOAD_FAST 2 ( hash )				    								  
							      60 LOAD_GLOBAL 1 ( abs )					    								  
							      62 LOAD_FAST 4 ( i )					    								  
							      64 CALL_FUNCTION 1					    								  
							      66 DUP_TOP_TWO						    								  
							      68 BINARY_SUBSCR						    								  
							      70 LOAD_CONST 3 ( 1 )					    								  
							      72 INPLACE_SUBTRACT					    								  
							      74 ROT_THREE						    								  
							      76 STORE_SUBSCR						    								  
							      78 JUMP_ABSOLUTE 16					    								  
							      								    								  
							      11 >> 80 LOAD_FAST 2 ( hash )				    								  
							      82 LOAD_METHOD 3 ( get )					    								  
							      84 LOAD_FAST 4 ( i )					    								  
							      86 LOAD_CONST 1 ( 0 )					    								  
							      88 CALL_METHOD 2						    								  
							      90 LOAD_CONST 3 ( 1 )					    								  
							      92 BINARY_ADD						    								  
							      94 LOAD_FAST 2 ( hash )					    								  
							      96 LOAD_FAST 4 ( i )					    								  
							      98 STORE_SUBSCR						    								  
							      >> 100 JUMP_ABSOLUTE 16					    								  
							      >> 102 POP_BLOCK						    								  
							      								    								  
							      12 >> 104 SETUP_LOOP 40 ( to 146 )			    								  
							      106 LOAD_FAST 0 ( arr )					    								  
							      108 GET_ITER						    								  
							      >> 110 FOR_ITER 32 ( to 144 )				    								  
							      112 STORE_FAST 4 ( i )					    								  
							      								    								  
							      13 114 LOAD_FAST 4 ( i )					    								  
							      116 LOAD_FAST 2 ( hash )					    								  
							      118 LOAD_METHOD 2 ( keys )				    								  
							      120 CALL_METHOD 0						    								  
							      122 COMPARE_OP 6 ( in )					    								  
							      124 POP_JUMP_IF_FALSE 110					    								  
							      126 LOAD_FAST 2 ( hash )					    								  
							      128 LOAD_FAST 4 ( i )					    								  
							      130 BINARY_SUBSCR						    								  
							      132 LOAD_CONST 1 ( 0 )					    								  
							      134 COMPARE_OP 4 ( > )					    								  
							      136 POP_JUMP_IF_FALSE 110					    								  
							      								    								  
							      14 138 LOAD_FAST 4 ( i )					    								  
							      140 RETURN_VALUE						    								  
							      142 JUMP_ABSOLUTE 110					    								  
							      >> 144 POP_BLOCK						    								  
							      								    								  
							      15 >> 146 LOAD_CONST 2 ( - 1 )				    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_SPECIFIC_PAIR_IN_MATRIX				      FIND_A_SPECIFIC_PAIR_IN_MATRIX				    FIND_A_SPECIFIC_PAIR_IN_MATRIX				  FIND_A_SPECIFIC_PAIR_IN_MATRIX
--							      --							    --								  --
def findMaxValue ( mat ) :				      Disassembly of <code object findMaxValue at 0x7fbac0e8bc90, f Disassembly of <code object findMaxValue at 0x7f816a673a50, f script_not_found : None
    maxValue = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( maxValue )				  
    for a in range ( N - 1 ) :				      2 STORE_FAST 1 ( maxValue )				    2 LOAD_CONST 1 ( 1 )					  
	for b in range ( N - 1 ) :			      								    4 COMPARE_OP 2 ( == )					  
	    for d in range ( a + 1 , N ) :		      3 4 SETUP_LOOP 150 ( to 156 )				    6 POP_JUMP_IF_FALSE 12					  
		for e in range ( b + 1 , N ) :		      6 LOAD_GLOBAL 0 ( range )					    								  
		    if maxValue < int ( mat [ d ] [ e ] - mat 8 LOAD_GLOBAL 1 ( N )					    27 8 LOAD_FAST 0 ( mat )					  
			maxValue = int ( mat [ d ] [ e ] - ma 10 LOAD_CONST 2 ( 1 )					    10 LOAD_METHOD 0 ( append )					  
    return maxValue ;					      12 BINARY_SUBTRACT					    12 LOAD_FAST 1 ( maxValue )					  
							      14 CALL_FUNCTION 1					    14 CALL_METHOD 1						  
							      16 GET_ITER						    16 POP_TOP							  
							      >> 18 FOR_ITER 134 ( to 154 )				    								  
							      20 STORE_FAST 2 ( a )					    28 >> 18 LOAD_FAST 1 ( maxValue )				  
							      								    20 LOAD_CONST 2 ( 0 )					  
							      4 22 SETUP_LOOP 128 ( to 152 )				    22 COMPARE_OP 2 ( == )					  
							      24 LOAD_GLOBAL 0 ( range )				    24 POP_JUMP_IF_FALSE 30					  
							      26 LOAD_GLOBAL 1 ( N )					    								  
							      28 LOAD_CONST 2 ( 1 )					    29 26 LOAD_FAST 1 ( maxValue )				  
							      30 BINARY_SUBTRACT					    28 LOAD_CONST 3 ( 2 )					  
							      32 CALL_FUNCTION 1					    30 COMPARE_OP 2 ( == )					  
							      34 GET_ITER						    32 POP_JUMP_IF_FALSE 30					  
							      >> 36 FOR_ITER 112 ( to 150 )				    								  
							      38 STORE_FAST 3 ( b )					    30 34 LOAD_FAST 1 ( maxValue )				  
							      								    36 LOAD_FAST 0 ( mat )					  
							      5 40 SETUP_LOOP 106 ( to 148 )				    38 LOAD_FAST 1 ( maxValue )					  
							      42 LOAD_GLOBAL 0 ( range )				    40 LOAD_FAST 2 ( maxValue )					  
							      44 LOAD_FAST 2 ( a )					    42 LOAD_FAST 3 ( maxValue )					  
							      46 LOAD_CONST 2 ( 1 )					    44 LOAD_FAST 4 ( maxValue )					  
							      48 BINARY_ADD						    46 LOAD_FAST 4 ( maxValue )					  
							      50 LOAD_GLOBAL 1 ( N )					    48 LOAD_FAST 4 ( maxValue )					  
							      52 CALL_FUNCTION 2					    50 LOAD_FAST 5 ( maxValue )					  
							      54 GET_ITER						    52 LOAD_FAST 6 ( maxValue )					  
							      >> 56 FOR_ITER 88 ( to 146 )				    54 LOAD_FAST 7 ( maxValue )					  
							      58 STORE_FAST 4 ( d )					    56 LOAD_FAST 8 ( maxValue )					  
							      								    58 LOAD_FAST 9 ( maxValue )					  
							      6 60 SETUP_LOOP 82 ( to 144 )				    60 LOAD_FAST 10 ( maxValue )				  
							      62 LOAD_GLOBAL 0 ( range )				    62 LOAD_FAST 11 ( maxValue )				  
							      64 LOAD_FAST 3 ( b )					    64 LOAD_FAST 12 ( maxValue )				  
							      66 LOAD_CONST 2 ( 1 )					    66 LOAD_FAST 13 ( maxValue )				  
							      68 BINARY_ADD						    68 LOAD_FAST 14 ( maxValue )				  
							      70 LOAD_GLOBAL 1 ( N )					    70 LOAD_FAST 15 ( maxValue )				  
							      72 CALL_FUNCTION 2					    72 LOAD_FAST 14 ( maxValue )				  
							      74 GET_ITER						    74 LOAD_FAST 15 ( maxValue )				  
							      >> 76 FOR_ITER 64 ( to 142 )				    76 LOAD_FAST 16 ( maxValue )				  
							      78 STORE_FAST 5 ( e )					    78 LOAD_FAST 17 ( maxValue )				  
							      								    80 LOAD_FAST 18 ( maxValue )				  
							      7 80 LOAD_FAST 1 ( maxValue )				    82 LOAD_FAST 19 ( maxValue )				  
							      82 LOAD_GLOBAL 2 ( int )					    84 LOAD_FAST 18 ( maxValue )				  
							      84 LOAD_FAST 0 ( mat )					    86 LOAD_FAST 19 ( maxValue )				  
							      86 LOAD_FAST 4 ( d )					    88 LOAD_FAST 20 ( maxValue )				  
							      88 BINARY_SUBSCR						    90 LOAD_FAST 21 ( maxValue )				  
							      90 LOAD_FAST 5 ( e )					    92 LOAD_FAST 20 ( maxValue )				  
							      92 BINARY_SUBSCR						    94 LOAD_FAST 21 ( maxValue )				  
							      94 LOAD_FAST 0 ( mat )					    96 LOAD_FAST 20 ( maxValue )				  
							      96 LOAD_FAST 2 ( a )					    98 LOAD_FAST 21 ( maxValue )				  
							      98 BINARY_SUBSCR						    100 LOAD_FAST 20 ( maxValue )				  
							      100 LOAD_FAST 3 ( b )					    102 LOAD_FAST 21 ( maxValue )				  
							      102 BINARY_SUBSCR						    104 LOAD_FAST 20 ( maxValue )				  
							      104 BINARY_SUBTRACT					    106 LOAD_FAST 21 ( maxValue )				  
							      106 CALL_FUNCTION 1					    108 LOAD_FAST 20 ( maxValue )				  
							      108 COMPARE_OP 0 ( < )					    110 LOAD_FAST 21 ( maxValue )				  
							      110 POP_JUMP_IF_FALSE 76					    112 LOAD_FAST 22 ( maxValue )				  
							      								    114 LOAD_FAST 21 ( maxValue )				  
							      8 112 LOAD_GLOBAL 2 ( int )				    116 LOAD_CONST 4 ( ( 'maxValue' , 'maxValue' , 'maxValue' , ' 
							      114 LOAD_FAST 0 ( mat )					    118 BUILD_CONST_KEY_MAP 21					  
							      116 LOAD_FAST 4 ( d )					    120 CALL_METHOD 21						  
							      118 BINARY_SUBSCR						    122 POP_TOP							  
							      120 LOAD_FAST 5 ( e )					    124 LOAD_CONST 5 ( None )					  
							      122 BINARY_SUBSCR						    126 RETURN_VALUE						  
							      124 LOAD_FAST 0 ( mat )					    NEW_LINE							  
							      126 LOAD_FAST 2 ( a )					    								  
							      128 BINARY_SUBSCR						    								  
							      130 LOAD_FAST 3 ( b )					    								  
							      132 BINARY_SUBSCR						    								  
							      134 BINARY_SUBTRACT					    								  
							      136 CALL_FUNCTION 1					    								  
							      138 STORE_FAST 1 ( maxValue )				    								  
							      140 JUMP_ABSOLUTE 76					    								  
							      >> 142 POP_BLOCK						    								  
							      >> 144 JUMP_ABSOLUTE 56					    								  
							      >> 146 POP_BLOCK						    								  
							      >> 148 JUMP_ABSOLUTE 36					    								  
							      >> 150 POP_BLOCK						    								  
							      >> 152 JUMP_ABSOLUTE 18					    								  
							      >> 154 POP_BLOCK						    								  
							      								    								  
							      9 >> 156 LOAD_FAST 1 ( maxValue )				    								  
							      158 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		      FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		    FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2			  FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2
--							      --							    --								  --
def printDivisors ( n ) :				      Disassembly of <code object printDivisors at 0x7fbac0e89d20,  Disassembly of <code object printDivisors at 0x7f816a6e4b70,  script_not_found : None
    list = [ ]						      2 0 BUILD_LIST 0						    26 0 BUILD_LIST 0						  
    for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :      2 STORE_FAST 1 ( list )					    2 STORE_FAST 1 ( i )					  
	if ( n % i == 0 ) :				      								    								  
	    if ( n / i == i ) :				      3 4 SETUP_LOOP 100 ( to 106 )				    27 4 SETUP_LOOP 52 ( to 54 )				  
		print ( i , end = " " )			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    else :					      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 10 )					  
		print ( i , end = " " )			      10 LOAD_GLOBAL 1 ( int )					    10 CALL_FUNCTION 1						  
		list.append ( int ( n / i ) )		      12 LOAD_GLOBAL 2 ( math )					    12 GET_ITER							  
    for i in list [ : : - 1 ] :				      14 LOAD_METHOD 3 ( sqrt )					    >> 14 FOR_ITER 52 ( to 52 )					  
	print ( i , end = " " )				      16 LOAD_FAST 0 ( n )					    16 STORE_FAST 2 ( i )					  
							      18 CALL_METHOD 1						    								  
							      20 LOAD_CONST 1 ( 1 )					    28 18 LOAD_GLOBAL 1 ( print )				  
							      22 BINARY_ADD						    20 LOAD_FAST 2 ( i )					  
							      24 CALL_FUNCTION 1					    22 LOAD_CONST 2 ( 0 )					  
							      26 CALL_FUNCTION 2					    24 BINARY_SUBSCR						  
							      28 GET_ITER						    26 LOAD_CONST 3 ( '						  
							      >> 30 FOR_ITER 72 ( to 104 )				    								  
							      32 STORE_FAST 2 ( i )					    								  
							      								    								  
							      4 34 LOAD_FAST 0 ( n )					    								  
							      36 LOAD_FAST 2 ( i )					    								  
							      38 BINARY_MODULO						    								  
							      40 LOAD_CONST 2 ( 0 )					    								  
							      42 COMPARE_OP 2 ( == )					    								  
							      44 POP_JUMP_IF_FALSE 30					    								  
							      								    								  
							      5 46 LOAD_FAST 0 ( n )					    								  
							      48 LOAD_FAST 2 ( i )					    								  
							      50 BINARY_TRUE_DIVIDE					    								  
							      52 LOAD_FAST 2 ( i )					    								  
							      54 COMPARE_OP 2 ( == )					    								  
							      56 POP_JUMP_IF_FALSE 72					    								  
							      								    								  
							      6 58 LOAD_GLOBAL 4 ( print )				    								  
							      60 LOAD_FAST 2 ( i )					    								  
							      62 LOAD_CONST 3 ( ' ' )					    								  
							      64 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      66 CALL_FUNCTION_KW 2					    								  
							      68 POP_TOP						    								  
							      70 JUMP_ABSOLUTE 30					    								  
							      								    								  
							      8 >> 72 LOAD_GLOBAL 4 ( print )				    								  
							      74 LOAD_FAST 2 ( i )					    								  
							      76 LOAD_CONST 3 ( ' ' )					    								  
							      78 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      80 CALL_FUNCTION_KW 2					    								  
							      82 POP_TOP						    								  
							      								    								  
							      9 84 LOAD_FAST 1 ( list )					    								  
							      86 LOAD_METHOD 5 ( append )				    								  
							      88 LOAD_GLOBAL 1 ( int )					    								  
							      90 LOAD_FAST 0 ( n )					    								  
							      92 LOAD_FAST 2 ( i )					    								  
							      94 BINARY_TRUE_DIVIDE					    								  
							      96 CALL_FUNCTION 1					    								  
							      98 CALL_METHOD 1						    								  
							      100 POP_TOP						    								  
							      102 JUMP_ABSOLUTE 30					    								  
							      >> 104 POP_BLOCK						    								  
							      								    								  
							      10 >> 106 SETUP_LOOP 34 ( to 142 )			    								  
							      108 LOAD_FAST 1 ( list )					    								  
							      110 LOAD_CONST 0 ( None )					    								  
							      112 LOAD_CONST 0 ( None )					    								  
							      114 LOAD_CONST 5 ( - 1 )					    								  
							      116 BUILD_SLICE 3						    								  
							      118 BINARY_SUBSCR						    								  
							      120 GET_ITER						    								  
							      >> 122 FOR_ITER 16 ( to 140 )				    								  
							      124 STORE_FAST 2 ( i )					    								  
							      								    								  
							      11 126 LOAD_GLOBAL 4 ( print )				    								  
							      128 LOAD_FAST 2 ( i )					    								  
							      130 LOAD_CONST 3 ( ' ' )					    								  
							      132 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      134 CALL_FUNCTION_KW 2					    								  
							      136 POP_TOP						    								  
							      138 JUMP_ABSOLUTE 122					    								  
							      >> 140 POP_BLOCK						    								  
							      >> 142 LOAD_CONST 0 ( None )				    								  
							      144 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	      NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	    NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	  NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS
--							      --							    --								  --
def countTriangle ( g , isDirected ) :			      Disassembly of <code object countTriangle at 0x7fbac0e89d20,  Disassembly of <code object countTriangle at 0x7f816a601660,  script_not_found : None
    nodes = len ( g )					      2 0 LOAD_GLOBAL 0 ( len )					    167 0 LOAD_GLOBAL 0 ( nodes )				  
    count_Triangle = 0					      2 LOAD_FAST 0 ( g )					    2 LOAD_METHOD 1 ( append )					  
    for i in range ( nodes ) :				      4 CALL_FUNCTION 1						    4 LOAD_FAST 0 ( g )						  
	for j in range ( nodes ) :			      6 STORE_FAST 2 ( nodes )					    6 LOAD_METHOD 2 ( append )					  
	    for k in range ( nodes ) :			      								    8 LOAD_FAST 0 ( g )						  
		if ( i != j and i != k and j != k and g [ i ] 3 8 LOAD_CONST 1 ( 0 )					    10 CALL_METHOD 1						  
		    count_Triangle += 1			      10 STORE_FAST 3 ( count_Triangle )			    12 CALL_METHOD 1						  
    return count_Triangle / 3 if isDirected else count_Triang 								    14 POP_TOP							  
							      4 12 SETUP_LOOP 120 ( to 134 )				    16 LOAD_CONST 0 ( None )					  
							      14 LOAD_GLOBAL 1 ( range )				    18 RETURN_VALUE						  
							      16 LOAD_FAST 2 ( nodes )					    NEW_LINE							  
							      18 CALL_FUNCTION 1					    								  
							      20 GET_ITER						    								  
							      >> 22 FOR_ITER 108 ( to 132 )				    								  
							      24 STORE_FAST 4 ( i )					    								  
							      								    								  
							      5 26 SETUP_LOOP 102 ( to 130 )				    								  
							      28 LOAD_GLOBAL 1 ( range )				    								  
							      30 LOAD_FAST 2 ( nodes )					    								  
							      32 CALL_FUNCTION 1					    								  
							      34 GET_ITER						    								  
							      >> 36 FOR_ITER 90 ( to 128 )				    								  
							      38 STORE_FAST 5 ( j )					    								  
							      								    								  
							      6 40 SETUP_LOOP 84 ( to 126 )				    								  
							      42 LOAD_GLOBAL 1 ( range )				    								  
							      44 LOAD_FAST 2 ( nodes )					    								  
							      46 CALL_FUNCTION 1					    								  
							      48 GET_ITER						    								  
							      >> 50 FOR_ITER 72 ( to 124 )				    								  
							      52 STORE_FAST 6 ( k )					    								  
							      								    								  
							      7 54 LOAD_FAST 4 ( i )					    								  
							      56 LOAD_FAST 5 ( j )					    								  
							      58 COMPARE_OP 3 ( != )					    								  
							      60 POP_JUMP_IF_FALSE 50					    								  
							      62 LOAD_FAST 4 ( i )					    								  
							      64 LOAD_FAST 6 ( k )					    								  
							      66 COMPARE_OP 3 ( != )					    								  
							      68 POP_JUMP_IF_FALSE 50					    								  
							      70 LOAD_FAST 5 ( j )					    								  
							      72 LOAD_FAST 6 ( k )					    								  
							      74 COMPARE_OP 3 ( != )					    								  
							      76 POP_JUMP_IF_FALSE 50					    								  
							      78 LOAD_FAST 0 ( g )					    								  
							      80 LOAD_FAST 4 ( i )					    								  
							      82 BINARY_SUBSCR						    								  
							      84 LOAD_FAST 5 ( j )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 POP_JUMP_IF_FALSE 50					    								  
							      90 LOAD_FAST 0 ( g )					    								  
							      92 LOAD_FAST 5 ( j )					    								  
							      94 BINARY_SUBSCR						    								  
							      96 LOAD_FAST 6 ( k )					    								  
							      98 BINARY_SUBSCR						    								  
							      100 POP_JUMP_IF_FALSE 50					    								  
							      102 LOAD_FAST 0 ( g )					    								  
							      104 LOAD_FAST 6 ( k )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 LOAD_FAST 4 ( i )					    								  
							      110 BINARY_SUBSCR						    								  
							      112 POP_JUMP_IF_FALSE 50					    								  
							      								    								  
							      8 114 LOAD_FAST 3 ( count_Triangle )			    								  
							      116 LOAD_CONST 2 ( 1 )					    								  
							      118 INPLACE_ADD						    								  
							      120 STORE_FAST 3 ( count_Triangle )			    								  
							      122 JUMP_ABSOLUTE 50					    								  
							      >> 124 POP_BLOCK						    								  
							      >> 126 JUMP_ABSOLUTE 36					    								  
							      >> 128 POP_BLOCK						    								  
							      >> 130 JUMP_ABSOLUTE 22					    								  
							      >> 132 POP_BLOCK						    								  
							      								    								  
							      9 >> 134 LOAD_FAST 1 ( isDirected )			    								  
							      136 POP_JUMP_IF_FALSE 146					    								  
							      138 LOAD_FAST 3 ( count_Triangle )			    								  
							      140 LOAD_CONST 3 ( 3 )					    								  
							      142 BINARY_TRUE_DIVIDE					    								  
							      144 RETURN_VALUE						    								  
							      >> 146 LOAD_FAST 3 ( count_Triangle )			    								  
							      148 LOAD_CONST 4 ( 6 )					    								  
							      150 BINARY_TRUE_DIVIDE					    								  
							      152 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1
--							      --							    --								  --
def diagonalsquare ( mat , row , column ) :		      Disassembly of <code object diagonalsquare at 0x7fbac0e89d20, Disassembly of <code object complete_login alsquare at 0x7f81 script_not_found : None
    print ( "Diagonal one : " , end = "" )		      2 0 LOAD_GLOBAL 0 ( print )				    31 0 LOAD_GLOBAL 0 ( print )				  
    for i in range ( 0 , row ) :			      2 LOAD_CONST 1 ( 'Diagonal one : ' )			    2 LOAD_CONST 1 ( 'Diagonal▁one : ",end="")			  
	print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = ""  4 LOAD_CONST 2 ( '' )					    4CALL_FUNCTION1						  
    print ( "\n\nDiagonal two : " , end = "" )		      6 LOAD_CONST 3 ( ( 'end' , ) )				    6POP_TOP							  
    for i in range ( 0 , row ) :			      8 CALL_FUNCTION_KW 2					    								  
	print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - 10 POP_TOP						    328LOAD_GLOBAL1( np )					  
							      								    10 LOAD_METHOD 2 ( sqrt )					  
							      3 12 SETUP_LOOP 50 ( to 64 )				    12 LOAD_FAST 0 ( mat )					  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_ATTR 3 ( shape )					  
							      16 LOAD_CONST 4 ( 0 )					    16 CALL_METHOD 1						  
							      18 LOAD_FAST 1 ( row )					    18 STORE_FAST 1 ( row )					  
							      20 CALL_FUNCTION 2					    								  
							      22 GET_ITER						    33 20 LOAD_GLOBAL 4 ( print )				  
							      >> 24 FOR_ITER 36 ( to 62 )				    22 LOAD_CONST 2 ( '\n					  
							      26 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 28 LOAD_GLOBAL 0 ( print )				    								  
							      30 LOAD_FAST 0 ( mat )					    								  
							      32 LOAD_FAST 3 ( i )					    								  
							      34 BINARY_SUBSCR						    								  
							      36 LOAD_FAST 3 ( i )					    								  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 0 ( mat )					    								  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 BINARY_SUBSCR						    								  
							      50 BINARY_MULTIPLY					    								  
							      52 LOAD_CONST 2 ( '' )					    								  
							      54 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      56 CALL_FUNCTION_KW 2					    								  
							      58 POP_TOP						    								  
							      60 JUMP_ABSOLUTE 24					    								  
							      >> 62 POP_BLOCK						    								  
							      								    								  
							      5 >> 64 LOAD_GLOBAL 0 ( print )				    								  
							      66 LOAD_CONST 5 ( '\n\nDiagonal two : ' )			    								  
							      68 LOAD_CONST 2 ( '' )					    								  
							      70 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      72 CALL_FUNCTION_KW 2					    								  
							      74 POP_TOP						    								  
							      								    								  
							      6 76 SETUP_LOOP 66 ( to 144 )				    								  
							      78 LOAD_GLOBAL 1 ( range )				    								  
							      80 LOAD_CONST 4 ( 0 )					    								  
							      82 LOAD_FAST 1 ( row )					    								  
							      84 CALL_FUNCTION 2					    								  
							      86 GET_ITER						    								  
							      >> 88 FOR_ITER 52 ( to 142 )				    								  
							      90 STORE_FAST 3 ( i )					    								  
							      								    								  
							      7 92 LOAD_GLOBAL 0 ( print )				    								  
							      94 LOAD_FAST 0 ( mat )					    								  
							      96 LOAD_FAST 3 ( i )					    								  
							      98 BINARY_SUBSCR						    								  
							      100 LOAD_FAST 1 ( row )					    								  
							      102 LOAD_FAST 3 ( i )					    								  
							      104 BINARY_SUBTRACT					    								  
							      106 LOAD_CONST 6 ( 1 )					    								  
							      108 BINARY_SUBTRACT					    								  
							      110 BINARY_SUBSCR						    								  
							      112 LOAD_FAST 0 ( mat )					    								  
							      114 LOAD_FAST 3 ( i )					    								  
							      116 BINARY_SUBSCR						    								  
							      118 LOAD_FAST 1 ( row )					    								  
							      120 LOAD_FAST 3 ( i )					    								  
							      122 BINARY_SUBTRACT					    								  
							      124 LOAD_CONST 6 ( 1 )					    								  
							      126 BINARY_SUBTRACT					    								  
							      128 BINARY_SUBSCR						    								  
							      130 BINARY_MULTIPLY					    								  
							      132 LOAD_CONST 2 ( '' )					    								  
							      134 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      136 CALL_FUNCTION_KW 2					    								  
							      138 POP_TOP						    								  
							      140 JUMP_ABSOLUTE 88					    								  
							      >> 142 POP_BLOCK						    								  
							      >> 144 LOAD_CONST 0 ( None )				    								  
							      146 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	      K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	    K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	  K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1
--							      --							    --								  --
def printKDistinct ( arr , size , KthIndex ) :		      Disassembly of <code object printKDistinct at 0x7fbac0e8bc90, Disassembly of <code object printKDistinct at 0x7f816afaa150, error : Traceback (most recent call last):   File
    dict = { }						      2 0 BUILD_MAP 0						    16 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    vect = [ ]						      2 STORE_FAST 3 ( dict )					    2 LOAD_FAST 0 ( arr )					  (item)   File "main.py", line 42, in <module>	  Fi
    for i in range ( size ) :				      								    4 CALL_FUNCTION 1						  le "<dis>", line 2, in printKDistinct TypeError: c
	if ( arr [ i ] in dict ) :			      3 4 BUILD_LIST 0						    6 STORE_FAST 1 ( size )					  annot convert dictionary update sequence element #
	    dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1	      6 STORE_FAST 4 ( vect )					    								  0 to a sequence
	else :						      								    17 8 LOAD_FAST 1 ( size )					  
	    dict [ arr [ i ] ] = 1			      4 8 SETUP_LOOP 66 ( to 76 )				    10 LOAD_CONST 1 ( 0 )					  
    for i in range ( size ) :				      10 LOAD_GLOBAL 0 ( range )				    12 BINARY_SUBSCR						  
	if ( dict [ arr [ i ] ] > 1 ) :			      12 LOAD_FAST 1 ( size )					    14 STORE_FAST 2 ( arr )					  
	    continue					      14 CALL_FUNCTION 1					    								  
	else :						      16 GET_ITER						    18 16 LOAD_FAST 2 ( arr )					  
	    KthIndex = KthIndex - 1			      >> 18 FOR_ITER 54 ( to 74 )				    18 LOAD_METHOD 1 ( append )					  
	if ( KthIndex == 0 ) :				      20 STORE_FAST 5 ( i )					    20 LOAD_FAST 1 ( size )					  
	    return arr [ i ]				      								    22 CALL_METHOD 1						  
    return - 1						      5 22 LOAD_FAST 0 ( arr )					    24 POP_TOP							  
							      24 LOAD_FAST 5 ( i )					    								  
							      26 BINARY_SUBSCR						    19 26 LOAD_FAST 1 ( size )					  
							      28 LOAD_FAST 3 ( dict )					    28 LOAD_CONST 2 ( 1 )					  
							      30 COMPARE_OP 6 ( in )					    30 BINARY_SUBSCR						  
							      32 POP_JUMP_IF_FALSE 60					    32 LOAD_CONST 3 ( 1 )					  
							      								    34 BINARY_SUBSCR						  
							      6 34 LOAD_FAST 3 ( dict )					    36 STORE_FAST 3 ( arr )					  
							      36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 5 ( i )					    20 38 LOAD_FAST 3 ( arr )					  
							      40 BINARY_SUBSCR						    40 LOAD_METHOD 2 ( append )					  
							      42 BINARY_SUBSCR						    42 LOAD_FAST 1 ( size )					  
							      44 LOAD_CONST 1 ( 1 )					    44 CALL_METHOD 1						  
							      46 BINARY_ADD						    46 POP_TOP							  
							      48 LOAD_FAST 3 ( dict )					    								  
							      50 LOAD_FAST 0 ( arr )					    21 48 LOAD_FAST 3 ( arr )					  
							      52 LOAD_FAST 5 ( i )					    50 LOAD_METHOD 3 ( append )					  
							      54 BINARY_SUBSCR						    52 LOAD_FAST 1 ( size )					  
							      56 STORE_SUBSCR						    54 CALL_METHOD 1						  
							      58 JUMP_ABSOLUTE 18					    56 POP_TOP							  
							      								    58 LOAD_CONST 0 ( None )					  
							      8 >> 60 LOAD_CONST 1 ( 1 )				    60 RETURN_VALUE						  
							      62 LOAD_FAST 3 ( dict )					    NEW_LINE							  
							      64 LOAD_FAST 0 ( arr )					    								  
							      66 LOAD_FAST 5 ( i )					    								  
							      68 BINARY_SUBSCR						    								  
							      70 STORE_SUBSCR						    								  
							      72 JUMP_ABSOLUTE 18					    								  
							      >> 74 POP_BLOCK						    								  
							      								    								  
							      9 >> 76 SETUP_LOOP 60 ( to 138 )				    								  
							      78 LOAD_GLOBAL 0 ( range )				    								  
							      80 LOAD_FAST 1 ( size )					    								  
							      82 CALL_FUNCTION 1					    								  
							      84 GET_ITER						    								  
							      >> 86 FOR_ITER 48 ( to 136 )				    								  
							      88 STORE_FAST 5 ( i )					    								  
							      								    								  
							      10 90 LOAD_FAST 3 ( dict )				    								  
							      92 LOAD_FAST 0 ( arr )					    								  
							      94 LOAD_FAST 5 ( i )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 BINARY_SUBSCR						    								  
							      100 LOAD_CONST 1 ( 1 )					    								  
							      102 COMPARE_OP 4 ( > )					    								  
							      104 POP_JUMP_IF_FALSE 110					    								  
							      								    								  
							      11 106 JUMP_ABSOLUTE 86					    								  
							      108 JUMP_FORWARD 8 ( to 118 )				    								  
							      								    								  
							      13 >> 110 LOAD_FAST 2 ( KthIndex )			    								  
							      112 LOAD_CONST 1 ( 1 )					    								  
							      114 BINARY_SUBTRACT					    								  
							      116 STORE_FAST 2 ( KthIndex )				    								  
							      								    								  
							      14 >> 118 LOAD_FAST 2 ( KthIndex )			    								  
							      120 LOAD_CONST 2 ( 0 )					    								  
							      122 COMPARE_OP 2 ( == )					    								  
							      124 POP_JUMP_IF_FALSE 86					    								  
							      								    								  
							      15 126 LOAD_FAST 0 ( arr )				    								  
							      128 LOAD_FAST 5 ( i )					    								  
							      130 BINARY_SUBSCR						    								  
							      132 RETURN_VALUE						    								  
							      134 JUMP_ABSOLUTE 86					    								  
							      >> 136 POP_BLOCK						    								  
							      								    								  
							      16 >> 138 LOAD_CONST 3 ( - 1 )				    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		      MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		    MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		  MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE
--							      --							    --								  --
def smallestSubWithSum ( arr , n , x ) :		      Disassembly of <code object smallestSubWithSum at 0x7fbac0e89 Disassembly of <code object smallestSubWithSum at 0x7f816a677 error : Traceback (most recent call last):   File
    curr_sum = 0					      2 0 LOAD_CONST 1 ( 0 )					    106 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    min_len = n + 1					      2 STORE_FAST 3 ( curr_sum )				    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    start = 0						      								    4 INPLACE_ADD						  y", line 47, in run_dis_script     co_code, co_nlo
    end = 0						      3 4 LOAD_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  cals, co_varnames, co_names, co_consts, co_linesta
    while ( end < n ) :					      6 LOAD_CONST 2 ( 1 )					    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	while ( curr_sum <= x and end < n ) :		      8 BINARY_ADD						    107 8 LOAD_FAST 1 ( n )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	    curr_sum += arr [ end ]			      10 STORE_FAST 4 ( min_len )				    10 LOAD_CONST 2 ( 2 )					  n parse     code.append(arg) ValueError: byte must
	    end += 1					      								    12 INPLACE_ADD						   be in range(0, 256)
	while ( curr_sum > x and start < n ) :		      4 12 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 1 ( n )					  
	    if ( end - start < min_len ) :		      14 STORE_FAST 5 ( start )					    								  
		min_len = end - start			      								    108 16 LOAD_FAST 1 ( n )					  
	    curr_sum -= arr [ start ]			      5 16 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 3 ( 1 )					  
	    start += 1					      18 STORE_FAST 6 ( end )					    20 INPLACE_ADD						  
    return min_len					      								    22 STORE_FAST 1 ( n )					  
							      6 20 SETUP_LOOP 116 ( to 138 )				    								  
							      >> 22 LOAD_FAST 6 ( end )					    109 24 LOAD_FAST 1 ( n )					  
							      24 LOAD_FAST 1 ( n )					    26 LOAD_CONST 4 ( 2 )					  
							      26 COMPARE_OP 0 ( < )					    28 INPLACE_ADD						  
							      28 POP_JUMP_IF_FALSE 136					    30 STORE_FAST 1 ( n )					  
							      								    								  
							      7 30 SETUP_LOOP 40 ( to 72 )				    110 32 LOAD_FAST 1 ( n )					  
							      >> 32 LOAD_FAST 3 ( curr_sum )				    34 LOAD_CONST 5 ( 1 )					  
							      34 LOAD_FAST 2 ( x )					    36 INPLACE_ADD						  
							      36 COMPARE_OP 1 ( <= )					    38 STORE_FAST 1 ( n )					  
							      38 POP_JUMP_IF_FALSE 70					    								  
							      40 LOAD_FAST 6 ( end )					    111 40 LOAD_FAST 1 ( n )					  
							      42 LOAD_FAST 1 ( n )					    42 LOAD_CONST 6 ( 2 )					  
							      44 COMPARE_OP 0 ( < )					    44 INPLACE_ADD						  
							      46 POP_JUMP_IF_FALSE 70					    46 STORE_FAST 1 ( n )					  
							      								    								  
							      8 48 LOAD_FAST 3 ( curr_sum )				    112 48 LOAD_FAST 1 ( n )					  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_CONST 7 ( 3 )					  
							      52 LOAD_FAST 6 ( end )					    52 INPLACE_ADD						  
							      54 BINARY_SUBSCR						    54 STORE_FAST 1 ( n )					  
							      56 INPLACE_ADD						    								  
							      58 STORE_FAST 3 ( curr_sum )				    113 56 LOAD_FAST 1 ( n )					  
							      								    58 LOAD_CONST 8 ( 2 )					  
							      9 60 LOAD_FAST 6 ( end )					    60 INPLACE_ADD						  
							      62 LOAD_CONST 2 ( 1 )					    62 STORE_FAST 1 ( n )					  
							      64 INPLACE_ADD						    								  
							      66 STORE_FAST 6 ( end )					    114 64 LOAD_FAST 1 ( n )					  
							      68 JUMP_ABSOLUTE 32					    66 LOAD_CONST 9 ( 2 )					  
							      >> 70 POP_BLOCK						    68 INPLACE_ADD						  
							      								    70 STORE_FAST 1 ( n )					  
							      10 >> 72 SETUP_LOOP 60 ( to 134 )				    								  
							      >> 74 LOAD_FAST 3 ( curr_sum )				    115 72 LOAD_FAST 1 ( n )					  
							      76 LOAD_FAST 2 ( x )					    74 LOAD_CONST 10 ( 2 )					  
							      78 COMPARE_OP 4 ( > )					    76 INPLACE_ADD						  
							      80 POP_JUMP_IF_FALSE 132					    78 STORE_FAST 1 ( n )					  
							      82 LOAD_FAST 5 ( start )					    80 JUMP_FORWARD 2 ( to 80 )					  
							      84 LOAD_FAST 1 ( n )					    								  
							      86 COMPARE_OP 0 ( < )					    116 >> 82 LOAD_FAST 1 ( n )					  
							      88 POP_JUMP_IF_FALSE 132					    84 LOAD_CONST 11 ( 2 )					  
							      								    86 INPLACE_ADD						  
							      11 90 LOAD_FAST 6 ( end )					    88 STORE_FAST 1 ( n )					  
							      92 LOAD_FAST 5 ( start )					    								  
							      94 BINARY_SUBTRACT					    117 >> 90 LOAD_FAST 1 ( n )					  
							      96 LOAD_FAST 4 ( min_len )				    92 RETURN_VALUE						  
							      98 COMPARE_OP 0 ( < )					    NEW_LINE							  
							      100 POP_JUMP_IF_FALSE 110					    								  
							      								    								  
							      12 102 LOAD_FAST 6 ( end )				    								  
							      104 LOAD_FAST 5 ( start )					    								  
							      106 BINARY_SUBTRACT					    								  
							      108 STORE_FAST 4 ( min_len )				    								  
							      								    								  
							      13 >> 110 LOAD_FAST 3 ( curr_sum )			    								  
							      112 LOAD_FAST 0 ( arr )					    								  
							      114 LOAD_FAST 5 ( start )					    								  
							      116 BINARY_SUBSCR						    								  
							      118 INPLACE_SUBTRACT					    								  
							      120 STORE_FAST 3 ( curr_sum )				    								  
							      								    								  
							      14 122 LOAD_FAST 5 ( start )				    								  
							      124 LOAD_CONST 2 ( 1 )					    								  
							      126 INPLACE_ADD						    								  
							      128 STORE_FAST 5 ( start )				    								  
							      130 JUMP_ABSOLUTE 74					    								  
							      >> 132 POP_BLOCK						    								  
							      >> 134 JUMP_ABSOLUTE 22					    								  
							      >> 136 POP_BLOCK						    								  
							      								    								  
							      15 >> 138 LOAD_FAST 4 ( min_len )				    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_PRIME_FACTOR_GIVEN_NUMBER				      K_TH_PRIME_FACTOR_GIVEN_NUMBER				    K_TH_PRIME_FACTOR_GIVEN_NUMBER				  K_TH_PRIME_FACTOR_GIVEN_NUMBER
--							      --							    --								  --
def kPrimeFactor ( n , k ) :				      Disassembly of <code object kPrimeFactor at 0x7fbac0e8bc90, f Disassembly of <code object kBetaFactor at 0x7f816a673a50, fi error : /bin/bash: line 1: 26777 Segmentation faul
    while ( n % 2 == 0 ) :				      2 0 SETUP_LOOP 44 ( to 46 )				    20 0 LOAD_CONST 1 ( 2 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	k = k - 1					      >> 2 LOAD_FAST 0 ( n )					    2 STORE_FAST 1 ( k )					  ataset/bin/python XLM/dis_script.py --script_path
	n = n / 2					      4 LOAD_CONST 1 ( 2 )					    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
	if ( k == 0 ) :					      6 BINARY_MODULO						    21 4 LOAD_FAST 1 ( k )					  eval_scripts/python_sa-dis_sa.test/K_TH_PRIME_FACT
	    return 2					      8 LOAD_CONST 2 ( 0 )					    6 LOAD_CONST 2 ( 0 )					  OR_GIVEN_NUMBER.dis
    i = 3						      10 COMPARE_OP 2 ( == )					    8 COMPARE_OP 4 ( > )					  
    while i <= math.sqrt ( n ) :			      12 POP_JUMP_IF_FALSE 44					    10 POP_JUMP_IF_FALSE 20					  
	while ( n % i == 0 ) :				      								    								  
	    if ( k == 1 ) :				      3 14 LOAD_FAST 1 ( k )					    22 12 LOAD_CONST 3 ( 1 )					  
		return i				      16 LOAD_CONST 3 ( 1 )					    14 LOAD_FAST 0 ( n )					  
	    k = k - 1					      18 BINARY_SUBTRACT					    16 COMPARE_OP 4 ( > )					  
	    n = n / i					      20 STORE_FAST 1 ( k )					    18 POP_JUMP_IF_FALSE 26					  
	i = i + 2					      								    								  
    if ( n > 2 and k == 1 ) :				      4 22 LOAD_FAST 0 ( n )					    23 20 LOAD_CONST 4 ( 1 )					  
	return n					      24 LOAD_CONST 1 ( 2 )					    22 LOAD_FAST 0 ( n )					  
    return - 1						      26 BINARY_TRUE_DIVIDE					    24 COMPARE_OP 4 ( > )					  
							      28 STORE_FAST 0 ( n )					    26 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      5 30 LOAD_FAST 1 ( k )					    24 28 LOAD_CONST 5 ( 1 )					  
							      32 LOAD_CONST 2 ( 0 )					    30 LOAD_FAST 0 ( n )					  
							      34 COMPARE_OP 2 ( == )					    32 COMPARE_OP 4 ( > )					  
							      36 POP_JUMP_IF_FALSE 2					    34 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      6 38 LOAD_CONST 1 ( 2 )					    25 36 LOAD_CONST 6 ( 1 )					  
							      40 RETURN_VALUE						    38 LOAD_FAST 0 ( n )					  
							      42 JUMP_ABSOLUTE 2					    40 COMPARE_OP 4 ( > )					  
							      >> 44 POP_BLOCK						    42 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      7 >> 46 LOAD_CONST 4 ( 3 )				    26 44 LOAD_CONST 7 ( 1 )					  
							      48 STORE_FAST 2 ( i )					    46 LOAD_FAST 0 ( n )					  
							      								    48 COMPARE_OP 4 ( > )					  
							      8 50 SETUP_LOOP 72 ( to 124 )				    50 POP_JUMP_IF_FALSE 52					  
							      >> 52 LOAD_FAST 2 ( i )					    								  
							      54 LOAD_GLOBAL 0 ( math )					    27 52 LOAD_CONST 8 ( 1 )					  
							      56 LOAD_METHOD 1 ( sqrt )					    54 LOAD_FAST 0 ( n )					  
							      58 LOAD_FAST 0 ( n )					    56 COMPARE_OP 4 ( > )					  
							      60 CALL_METHOD 1						    58 POP_JUMP_IF_FALSE 52					  
							      62 COMPARE_OP 1 ( <= )					    								  
							      64 POP_JUMP_IF_FALSE 122					    28 60 LOAD_CONST 9 ( 1 )					  
							      								    62 LOAD_FAST 0 ( n )					  
							      9 66 SETUP_LOOP 44 ( to 112 )				    64 COMPARE_OP 4 ( > )					  
							      >> 68 LOAD_FAST 0 ( n )					    66 POP_JUMP_IF_FALSE 52					  
							      70 LOAD_FAST 2 ( i )					    								  
							      72 BINARY_MODULO						    29 68 LOAD_CONST 10 ( 1 )					  
							      74 LOAD_CONST 2 ( 0 )					    70 LOAD_FAST 0 ( n )					  
							      76 COMPARE_OP 2 ( == )					    72 COMPARE_OP 4 ( > )					  
							      78 POP_JUMP_IF_FALSE 110					    74 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      10 80 LOAD_FAST 1 ( k )					    30 76 LOAD_CONST 11 ( 1 )					  
							      82 LOAD_CONST 3 ( 1 )					    78 LOAD_FAST 0 ( n )					  
							      84 COMPARE_OP 2 ( == )					    80 COMPARE_OP 4 ( > )					  
							      86 POP_JUMP_IF_FALSE 92					    82 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      11 88 LOAD_FAST 2 ( i )					    31 84 LOAD_CONST 12 ( 1 )					  
							      90 RETURN_VALUE						    86 LOAD_FAST 0 ( n )					  
							      								    88 COMPARE_OP 4 ( > )					  
							      12 >> 92 LOAD_FAST 1 ( k )				    90 POP_JUMP_IF_FALSE 52					  
							      94 LOAD_CONST 3 ( 1 )					    								  
							      96 BINARY_SUBTRACT					    32 92 LOAD_CONST 13 ( 1 )					  
							      98 STORE_FAST 1 ( k )					    94 LOAD_FAST 0 ( n )					  
							      								    96 COMPARE_OP 4 ( > )					  
							      13 100 LOAD_FAST 0 ( n )					    98 POP_JUMP_IF_FALSE 52					  
							      102 LOAD_FAST 2 ( i )					    								  
							      104 BINARY_TRUE_DIVIDE					    33 100 LOAD_CONST 14 ( 1 )					  
							      106 STORE_FAST 0 ( n )					    102 LOAD_FAST 0 ( n )					  
							      108 JUMP_ABSOLUTE 68					    104 COMPARE_OP 4 ( > )					  
							      >> 110 POP_BLOCK						    106 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      14 >> 112 LOAD_FAST 2 ( i )				    34 108 LOAD_CONST 15 ( 1 )					  
							      114 LOAD_CONST 1 ( 2 )					    110 LOAD_FAST 0 ( n )					  
							      116 BINARY_ADD						    112 COMPARE_OP 4 ( > )					  
							      118 STORE_FAST 2 ( i )					    114 POP_JUMP_IF_FALSE 52					  
							      120 JUMP_ABSOLUTE 52					    								  
							      >> 122 POP_BLOCK						    35 116 LOAD_CONST 16 ( 1 )					  
							      								    118 LOAD_FAST 0 ( n )					  
							      15 >> 124 LOAD_FAST 0 ( n )				    120 COMPARE_OP 4 ( > )					  
							      126 LOAD_CONST 1 ( 2 )					    122 POP_JUMP_IF_FALSE 52					  
							      128 COMPARE_OP 4 ( > )					    								  
							      130 POP_JUMP_IF_FALSE 144					    36 124 LOAD_CONST 16 ( 1 )					  
							      132 LOAD_FAST 1 ( k )					    126 STORE_FAST 1 ( k )					  
							      134 LOAD_CONST 3 ( 1 )					    								  
							      136 COMPARE_OP 2 ( == )					    37 >> 128 LOAD_FAST 1 ( k )					  
							      138 POP_JUMP_IF_FALSE 144					    130 LOAD_FAST 0 ( n )					  
							      								    132 COMPARE_OP 4 ( > )					  
							      16 140 LOAD_FAST 0 ( n )					    134 POP_JUMP_IF_FALSE 52					  
							      142 RETURN_VALUE						    								  
							      								    38 136 LOAD_FAST 1 ( k )					  
							      17 >> 144 LOAD_CONST 5 ( - 1 )				    138 RETURN_VALUE						  
							      146 RETURN_VALUE NEW_LINE					    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K     GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	    GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	  GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K
--							      --							    --								  --
def printSumSimple ( mat , k ) :			      Disassembly of <code object printSumSimple at 0x7fbac0e89d20, Disassembly of <code object printSumSumSumSumSumSumSumSumSumS script_not_found : None
    if ( k > n ) :					      2 0 LOAD_FAST 1 ( k )					    								  
	return						      2 LOAD_GLOBAL 0 ( n )					    								  
    for i in range ( n - k + 1 ) :			      4 COMPARE_OP 4 ( > )					    								  
	for j in range ( n - k + 1 ) :			      6 POP_JUMP_IF_FALSE 12					    								  
	    sum = 0					      								    								  
	    for p in range ( i , k + i ) :		      3 8 LOAD_CONST 0 ( None )					    								  
		for q in range ( j , k + j ) :		      10 RETURN_VALUE						    								  
		    sum += mat [ p ] [ q ]		      								    								  
	    print ( sum , end = " " )			      4 >> 12 SETUP_LOOP 136 ( to 150 )				    								  
	print ( )					      14 LOAD_GLOBAL 1 ( range )				    								  
							      16 LOAD_GLOBAL 0 ( n )					    								  
							      18 LOAD_FAST 1 ( k )					    								  
							      20 BINARY_SUBTRACT					    								  
							      22 LOAD_CONST 1 ( 1 )					    								  
							      24 BINARY_ADD						    								  
							      26 CALL_FUNCTION 1					    								  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 116 ( to 148 )				    								  
							      32 STORE_FAST 2 ( i )					    								  
							      								    								  
							      5 34 SETUP_LOOP 104 ( to 140 )				    								  
							      36 LOAD_GLOBAL 1 ( range )				    								  
							      38 LOAD_GLOBAL 0 ( n )					    								  
							      40 LOAD_FAST 1 ( k )					    								  
							      42 BINARY_SUBTRACT					    								  
							      44 LOAD_CONST 1 ( 1 )					    								  
							      46 BINARY_ADD						    								  
							      48 CALL_FUNCTION 1					    								  
							      50 GET_ITER						    								  
							      >> 52 FOR_ITER 84 ( to 138 )				    								  
							      54 STORE_FAST 3 ( j )					    								  
							      								    								  
							      6 56 LOAD_CONST 2 ( 0 )					    								  
							      58 STORE_FAST 4 ( sum )					    								  
							      								    								  
							      7 60 SETUP_LOOP 62 ( to 124 )				    								  
							      62 LOAD_GLOBAL 1 ( range )				    								  
							      64 LOAD_FAST 2 ( i )					    								  
							      66 LOAD_FAST 1 ( k )					    								  
							      68 LOAD_FAST 2 ( i )					    								  
							      70 BINARY_ADD						    								  
							      72 CALL_FUNCTION 2					    								  
							      74 GET_ITER						    								  
							      >> 76 FOR_ITER 44 ( to 122 )				    								  
							      78 STORE_FAST 5 ( p )					    								  
							      								    								  
							      8 80 SETUP_LOOP 38 ( to 120 )				    								  
							      82 LOAD_GLOBAL 1 ( range )				    								  
							      84 LOAD_FAST 3 ( j )					    								  
							      86 LOAD_FAST 1 ( k )					    								  
							      88 LOAD_FAST 3 ( j )					    								  
							      90 BINARY_ADD						    								  
							      92 CALL_FUNCTION 2					    								  
							      94 GET_ITER						    								  
							      >> 96 FOR_ITER 20 ( to 118 )				    								  
							      98 STORE_FAST 6 ( q )					    								  
							      								    								  
							      9 100 LOAD_FAST 4 ( sum )					    								  
							      102 LOAD_FAST 0 ( mat )					    								  
							      104 LOAD_FAST 5 ( p )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 LOAD_FAST 6 ( q )					    								  
							      110 BINARY_SUBSCR						    								  
							      112 INPLACE_ADD						    								  
							      114 STORE_FAST 4 ( sum )					    								  
							      116 JUMP_ABSOLUTE 96					    								  
							      >> 118 POP_BLOCK						    								  
							      >> 120 JUMP_ABSOLUTE 76					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      10 >> 124 LOAD_GLOBAL 2 ( print )				    								  
							      126 LOAD_FAST 4 ( sum )					    								  
							      128 LOAD_CONST 3 ( ' ' )					    								  
							      130 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      132 CALL_FUNCTION_KW 2					    								  
							      134 POP_TOP						    								  
							      136 JUMP_ABSOLUTE 52					    								  
							      >> 138 POP_BLOCK						    								  
							      								    								  
							      11 >> 140 LOAD_GLOBAL 2 ( print )				    								  
							      142 CALL_FUNCTION 0					    								  
							      144 POP_TOP						    								  
							      146 JUMP_ABSOLUTE 30					    								  
							      >> 148 POP_BLOCK						    								  
							      >> 150 LOAD_CONST 0 ( None )				    								  
							      152 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		      COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		    COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		  COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE
--							      --							    --								  --
def printRect ( X , Y , n ) :				      Disassembly of <code object printRect at 0x7fbac<<unk>> de40, Disassembly of <code object printRect at 0x7f816a673a50, file script_not_found : None
    Xmax = max ( X )					      2 0 LOAD_GLOBAL 0 ( max )					    65 0 LOAD_GLOBAL 0 ( Xmax )					  
    Xmin = min ( X )					      2 LOAD_FAST 0 ( X )					    2 LOAD_FAST 1 ( Y )						  
    Ymax = max ( Y )					      4 CALL_FUNCTION 1						    4 BINARY_MULTIPLY						  
    Ymin = min ( Y )					      6 STORE_FAST 3 ( Xmax )					    6 LOAD_FAST 0 ( X )						  
    print ( "{" , Xmin , ", " , Ymin , "}" , sep = "" )	      								    8 BINARY_MULTIPLY						  
    print ( "{" , Xmin , ", " , Ymax , "}" , sep = "" )	      3 8 LOAD_GLOBAL 1 ( min )					    10 LOAD_FAST 0 ( X )					  
    print ( "{" , Xmax , ", " , Ymax , "}" , sep = "" )	      10 LOAD_FAST 0 ( X )					    12 BINARY_MULTIPLY						  
    print ( "{" , Xmax , ", " , Ymin , "}" , sep = "" )	      12 CALL_FUNCTION 1					    14 LOAD_FAST 0 ( X )					  
							      14 STORE_FAST 4 ( Xmin )					    16 BINARY_MULTIPLY						  
							      								    18 LOAD_FAST 0 ( X )					  
							      4 16 LOAD_GLOBAL 0 ( max )				    20 BINARY_MULTIPLY						  
							      18 LOAD_FAST 1 ( Y )					    22 LOAD_FAST 0 ( X )					  
							      20 CALL_FUNCTION 1					    24 BINARY_MULTIPLY						  
							      22 STORE_FAST 5 ( Ymax )					    26 LOAD_FAST 0 ( X )					  
							      								    28 BINARY_MULTIPLY						  
							      5 24 LOAD_GLOBAL 1 ( min )				    30 LOAD_FAST 0 ( X )					  
							      26 LOAD_FAST 1 ( Y )					    32 BINARY_MULTIPLY						  
							      28 CALL_FUNCTION 1					    34 BINARY_MULTIPLY						  
							      30 STORE_FAST 6 ( Ymin )					    36 LOAD_FAST 0 ( X )					  
							      								    38 BINARY_MULTIPLY						  
							      6 32 LOAD_GLOBAL 2 ( print )				    40 LOAD_FAST 0 ( X )					  
							      34 LOAD_CONST 1 ( '{' )					    42 BINARY_MULTIPLY						  
							      36 LOAD_FAST 4 ( Xmin )					    44 BINARY_ADD						  
							      38 LOAD_CONST 2 ( ', ' )					    46 LOAD_FAST 0 ( X )					  
							      40 LOAD_FAST 6 ( Ymin )					    48 BINARY_MULTIPLY						  
							      42 LOAD_CONST 3 ( '}' )					    50 BINARY_ADD						  
							      44 LOAD_CONST 4 ( '' )					    52 LOAD_FAST 0 ( X )					  
							      46 LOAD_CONST 5 ( ( 'sep' , ) )				    54 BINARY_MULTIPLY						  
							      48 CALL_FUNCTION_KW 6					    56 LOAD_FAST 0 ( X )					  
							      50 POP_TOP						    58 BINARY_MULTIPLY						  
							      								    60 BINARY_ADD						  
							      7 52 LOAD_GLOBAL 2 ( print )				    62 LOAD_FAST 0 ( X )					  
							      54 LOAD_CONST 1 ( '{' )					    64 BINARY_MULTIPLY						  
							      56 LOAD_FAST 4 ( Xmin )					    66 BINARY_ADD						  
							      58 LOAD_CONST 2 ( ', ' )					    68 LOAD_FAST 0 ( X )					  
							      60 LOAD_FAST 5 ( Ymax )					    70 BINARY_MULTIPLY						  
							      62 LOAD_CONST 3 ( '}' )					    72 BINARY_ADD						  
							      64 LOAD_CONST 4 ( '' )					    74 LOAD_FAST 0 ( X )					  
							      66 LOAD_CONST 5 ( ( 'sep' , ) )				    76 BINARY_MULTIPLY						  
							      68 CALL_FUNCTION_KW 6					    78 BINARY_ADD						  
							      70 POP_TOP						    80 LOAD_FAST 0 ( X )					  
							      								    82 BINARY_MULTIPLY						  
							      8 72 LOAD_GLOBAL 2 ( print )				    84 BINARY_ADD						  
							      74 LOAD_CONST 1 ( '{' )					    86 LOAD_FAST 0 ( X )					  
							      76 LOAD_FAST 3 ( Xmax )					    88 BINARY_MULTIPLY						  
							      78 LOAD_CONST 2 ( ', ' )					    90 BINARY_ADD						  
							      80 LOAD_FAST 5 ( Ymax )					    92 BINARY_MULTIPLY						  
							      82 LOAD_CONST 3 ( '}' )					    94 BINARY_ADD						  
							      84 LOAD_CONST 4 ( '' )					    96 LOAD_FAST 0 ( X )					  
							      86 LOAD_CONST 5 ( ( 'sep' , ) )				    98 BINARY_ADD						  
							      88 CALL_FUNCTION_KW 6					    100 BINARY_MULTIPLY						  
							      90 POP_TOP						    102 BINARY_ADD						  
							      								    104 LOAD_FAST 0 ( X )					  
							      9 92 LOAD_GLOBAL 2 ( print )				    106 BINARY_ADD						  
							      94 LOAD_CONST 1 ( '{' )					    108 BINARY_MULTIPLY						  
							      96 LOAD_FAST 3 ( Xmax )					    110 BINARY_ADD						  
							      98 LOAD_CONST 2 ( ', ' )					    112 LOAD_FAST 0 ( X )					  
							      100 LOAD_FAST 6 ( Ymin )					    114 BINARY_ADD						  
							      102 LOAD_CONST 3 ( '}' )					    116 BINARY_MULTIPLY						  
							      104 LOAD_CONST 4 ( '' )					    118 BINARY_ADD						  
							      106 LOAD_CONST 5 ( ( 'sep' , ) )				    120 LOAD_FAST 0 ( X )					  
							      108 CALL_FUNCTION_KW 6					    122 BINARY_ADD						  
							      110 POP_TOP						    124 BINARY_MULTIPLY						  
							      112 LOAD_CONST 0 ( None )					    126 BINARY_ADD						  
							      114 RETURN_VALUE NEW_LINE					    128 LOAD_FAST 0 ( X )					  
							      								    130 BINARY_ADD						  
							      								    132 BINARY_MULTIPLY						  
							      								    134 BINARY_ADD						  
							      								    136 LOAD_FAST 0 ( X )					  
							      								    138 BINARY_ADD						  
							      								    140 BINARY_ADD						  
							      								    142 BINARY_MULTIPLY						  
							      								    144 BINARY_ADD						  
							      								    146 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY					      FLOOR_IN_A_SORTED_ARRAY					    FLOOR_IN_A_SORTED_ARRAY					  FLOOR_IN_A_SORTED_ARRAY
--							      --							    --								  --
def floorSearch ( arr , low , high , x ) :		      Disassembly of <code object floorSearch at 0x7fbac<<unk>> d54 Disassembly of <code object floorSearch at 0x7f816a673a50, fi script_not_found : None
    if ( low > high ) :					      2 0 LOAD_FAST 1 ( low )					    90 0 LOAD_FAST 0 ( arr )					  
	return - 1					      2 LOAD_FAST 2 ( high )					    2 LOAD_CONST 1 ( - 1 )					  
    if ( x >= arr [ high ] ) :				      4 COMPARE_OP 4 ( > )					    4 BINARY_SUBSCR						  
	return high					      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( low )					  
    mid = int ( ( low + high ) / 2 )			      								    								  
    if ( arr [ mid ] == x ) :				      3 8 LOAD_CONST 1 ( - 1 )					    91 8 LOAD_FAST 1 ( low )					  
	return mid					      10 RETURN_VALUE						    10 LOAD_CONST 2 ( - 1 )					  
    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 								    12 BINARY_SUBSCR						  
	return mid - 1					      4 >> 12 LOAD_FAST 3 ( x )					    14 STORE_FAST 2 ( high )					  
    if ( x < arr [ mid ] ) :				      14 LOAD_FAST 0 ( arr )					    								  
	return floorSearch ( arr , low , mid - 1 , x )	      16 LOAD_FAST 2 ( high )					    92 16 LOAD_FAST 1 ( low )					  
    return floorSearch ( arr , mid + 1 , high , x )	      18 BINARY_SUBSCR						    18 LOAD_CONST 3 ( - 1 )					  
							      20 COMPARE_OP 5 ( >= )					    20 BINARY_SUBSCR						  
							      22 POP_JUMP_IF_FALSE 28					    22 STORE_FAST 3 ( high )					  
							      								    								  
							      5 24 LOAD_FAST 2 ( high )					    93 24 LOAD_FAST 1 ( low )					  
							      26 RETURN_VALUE						    26 LOAD_CONST 4 ( - 1 )					  
							      								    28 BINARY_SUBSCR						  
							      6 >> 28 LOAD_GLOBAL 0 ( int )				    30 STORE_FAST 4 ( high )					  
							      30 LOAD_FAST 1 ( low )					    								  
							      32 LOAD_FAST 2 ( high )					    94 32 LOAD_FAST 0 ( arr )					  
							      34 BINARY_ADD						    34 LOAD_CONST 5 ( - 1 )					  
							      36 LOAD_CONST 2 ( 2 )					    36 BINARY_SUBSCR						  
							      38 BINARY_TRUE_DIVIDE					    38 STORE_FAST 5 ( high )					  
							      40 CALL_FUNCTION 1					    								  
							      42 STORE_FAST 4 ( mid )					    95 40 LOAD_FAST 1 ( low )					  
							      								    42 LOAD_CONST 6 ( - 1 )					  
							      7 44 LOAD_FAST 0 ( arr )					    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 4 ( mid )					    46 STORE_FAST 6 ( high )					  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_FAST 3 ( x )					    96 48 LOAD_FAST 1 ( low )					  
							      52 COMPARE_OP 2 ( == )					    50 LOAD_CONST 7 ( - 1 )					  
							      54 POP_JUMP_IF_FALSE 60					    52 BINARY_SUBSCR						  
							      								    54 STORE_FAST 7 ( low )					  
							      8 56 LOAD_FAST 4 ( mid )					    								  
							      58 RETURN_VALUE						    97 56 LOAD_FAST 2 ( high )					  
							      								    58 LOAD_CONST 8 ( - 1 )					  
							      9 >> 60 LOAD_FAST 4 ( mid )				    60 BINARY_SUBSCR						  
							      62 LOAD_CONST 3 ( 0 )					    62 STORE_FAST 8 ( high )					  
							      64 COMPARE_OP 4 ( > )					    								  
							      66 POP_JUMP_IF_FALSE 104					    98 64 LOAD_FAST 1 ( low )					  
							      68 LOAD_FAST 0 ( arr )					    66 LOAD_FAST 4 ( high )					  
							      70 LOAD_FAST 4 ( mid )					    68 LOAD_CONST 9 ( - 1 )					  
							      72 LOAD_CONST 4 ( 1 )					    70 BINARY_SUBSCR						  
							      74 BINARY_SUBTRACT					    72 LOAD_FAST 3 ( high )					  
							      76 BINARY_SUBSCR						    74 LOAD_CONST 10 ( - 1 )					  
							      78 LOAD_FAST 3 ( x )					    76 BINARY_SUBSCR						  
							      80 COMPARE_OP 1 ( <= )					    78 LOAD_FAST 3 ( high )					  
							      82 POP_JUMP_IF_FALSE 104					    80 LOAD_CONST 11 ( - 1 )					  
							      84 LOAD_FAST 3 ( x )					    82 BINARY_SUBSCR						  
							      86 LOAD_FAST 0 ( arr )					    84 LOAD_FAST 4 ( high )					  
							      88 LOAD_FAST 4 ( mid )					    86 LOAD_CONST 12 ( - 1 )					  
							      90 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      92 COMPARE_OP 0 ( < )					    90 LOAD_FAST 5 ( high )					  
							      94 POP_JUMP_IF_FALSE 104					    92 LOAD_CONST 13 ( - 1 )					  
							      								    94 BINARY_SUBSCR						  
							      10 96 LOAD_FAST 4 ( mid )					    96 LOAD_FAST 4 ( high )					  
							      98 LOAD_CONST 4 ( 1 )					    98 LOAD_CONST 14 ( - 1 )					  
							      100 BINARY_SUBTRACT					    100 BINARY_SUBSCR						  
							      102 RETURN_VALUE						    102 LOAD_FAST 5 ( high )					  
							      								    104 LOAD_CONST 15 ( - 1 )					  
							      11 >> 104 LOAD_FAST 3 ( x )				    106 BINARY_SUBSCR						  
							      106 LOAD_FAST 0 ( arr )					    108 LOAD_FAST 4 ( high )					  
							      108 LOAD_FAST 4 ( mid )					    110 LOAD_CONST 16 ( - 1 )					  
							      110 BINARY_SUBSCR						    112 BINARY_SUBSCR						  
							      112 COMPARE_OP 0 ( < )					    114 LOAD_FAST 5 ( high )					  
							      114 POP_JUMP_IF_FALSE 134					    116 LOAD_CONST 17 ( - 1 )					  
							      								    118 BINARY_SUBSCR						  
							      12 116 LOAD_GLOBAL 1 ( floorSearch )			    120 LOAD_FAST 5 ( high )					  
							      118 LOAD_FAST 0 ( arr )					    122 LOAD_CONST 18 ( - 1 )					  
							      120 LOAD_FAST 1 ( low )					    124 BINARY_SUBSCR						  
							      122 LOAD_FAST 4 ( mid )					    126 LOAD_FAST 4 ( high )					  
							      124 LOAD_CONST 4 ( 1 )					    128 LOAD_CONST 19 ( - 1 )					  
							      126 BINARY_SUBTRACT					    130 BINARY_SUBSCR						  
							      128 LOAD_FAST 3 ( x )					    132 LOAD_FAST 5 ( high )					  
							      130 CALL_FUNCTION 4					    134 LOAD_CONST 19 ( - 1 )					  
							      132 RETURN_VALUE						    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 5 ( high )					  
							      13 >> 134 LOAD_GLOBAL 1 ( floorSearch )			    140 LOAD_CONST 19 ( - 1 )					  
							      136 LOAD_FAST 0 ( arr )					    142 BINARY_SUBSCR						  
							      138 LOAD_FAST 4 ( mid )					    144 LOAD_FAST 7 ( low )					  
							      140 LOAD_CONST 4 ( 1 )					    146 LOAD_CONST 19 ( - 1 )					  
							      142 BINARY_ADD						    148 BINARY_SUBSCR						  
							      144 LOAD_FAST 2 ( high )					    150 LOAD_FAST 8 ( high )					  
							      146 LOAD_FAST 3 ( x )					    152 LOAD_CONST 21 ( - 1 )					  
							      148 CALL_FUNCTION 4					    154 STORE_SUBSCR						  
							      150 RETURN_VALUE NEW_LINE					    								  
							      								    90 90 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE					      RECAMANS_SEQUENCE						    RECAMANS_SEQUENCE						  RECAMANS_SEQUENCE
--							      --							    --								  --
def recaman ( n ) :					      Disassembly of <code object recaman at 0x7fbac0e8bc90, file " Disassembly of <code object recaman at 0x7f816a673a50, file " script_not_found : None
    arr = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( self )					  
    arr [ 0 ] = 0					      2 BUILD_LIST 1						    2 LOAD_ATTR 0 ( arr )					  
    print ( arr [ 0 ] , end = ", " )			      4 LOAD_FAST 0 ( n )					    4 LOAD_METHOD 1 ( append )					  
    for i in range ( 1 , n ) :				      6 BINARY_MULTIPLY						    6 LOAD_FAST 1 ( n )						  
	curr = arr [ i - 1 ] - i			      8 STORE_FAST 1 ( arr )					    8 CALL_METHOD 1						  
	for j in range ( 0 , i ) :			      								    10 POP_TOP							  
	    if ( ( arr [ j ] == curr ) or curr < 0 ) :	      3 10 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 0 ( None )					  
		curr = arr [ i - 1 ] + i		      12 LOAD_FAST 1 ( arr )					    14 RETURN_VALUE						  
		break					      14 LOAD_CONST 1 ( 0 )					    NEW_LINE							  
	arr [ i ] = curr				      16 STORE_SUBSCR						    								  
	print ( arr [ i ] , end = ", " )		      								    								  
							      4 18 LOAD_GLOBAL 0 ( print )				    								  
							      20 LOAD_FAST 1 ( arr )					    								  
							      22 LOAD_CONST 1 ( 0 )					    								  
							      24 BINARY_SUBSCR						    								  
							      26 LOAD_CONST 2 ( ', ' )					    								  
							      28 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      30 CALL_FUNCTION_KW 2					    								  
							      32 POP_TOP						    								  
							      								    								  
							      5 34 SETUP_LOOP 116 ( to 152 )				    								  
							      36 LOAD_GLOBAL 1 ( range )				    								  
							      38 LOAD_CONST 4 ( 1 )					    								  
							      40 LOAD_FAST 0 ( n )					    								  
							      42 CALL_FUNCTION 2					    								  
							      44 GET_ITER						    								  
							      >> 46 FOR_ITER 102 ( to 150 )				    								  
							      48 STORE_FAST 2 ( i )					    								  
							      								    								  
							      6 50 LOAD_FAST 1 ( arr )					    								  
							      52 LOAD_FAST 2 ( i )					    								  
							      54 LOAD_CONST 4 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 BINARY_SUBSCR						    								  
							      60 LOAD_FAST 2 ( i )					    								  
							      62 BINARY_SUBTRACT					    								  
							      64 STORE_FAST 3 ( curr )					    								  
							      								    								  
							      7 66 SETUP_LOOP 56 ( to 124 )				    								  
							      68 LOAD_GLOBAL 1 ( range )				    								  
							      70 LOAD_CONST 1 ( 0 )					    								  
							      72 LOAD_FAST 2 ( i )					    								  
							      74 CALL_FUNCTION 2					    								  
							      76 GET_ITER						    								  
							      >> 78 FOR_ITER 42 ( to 122 )				    								  
							      80 STORE_FAST 4 ( j )					    								  
							      								    								  
							      8 82 LOAD_FAST 1 ( arr )					    								  
							      84 LOAD_FAST 4 ( j )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_FAST 3 ( curr )					    								  
							      90 COMPARE_OP 2 ( == )					    								  
							      92 POP_JUMP_IF_TRUE 102					    								  
							      94 LOAD_FAST 3 ( curr )					    								  
							      96 LOAD_CONST 1 ( 0 )					    								  
							      98 COMPARE_OP 0 ( < )					    								  
							      100 POP_JUMP_IF_FALSE 78					    								  
							      								    								  
							      9 >> 102 LOAD_FAST 1 ( arr )				    								  
							      104 LOAD_FAST 2 ( i )					    								  
							      106 LOAD_CONST 4 ( 1 )					    								  
							      108 BINARY_SUBTRACT					    								  
							      110 BINARY_SUBSCR						    								  
							      112 LOAD_FAST 2 ( i )					    								  
							      114 BINARY_ADD						    								  
							      116 STORE_FAST 3 ( curr )					    								  
							      								    								  
							      10 118 BREAK_LOOP						    								  
							      120 JUMP_ABSOLUTE 78					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      11 >> 124 LOAD_FAST 3 ( curr )				    								  
							      126 LOAD_FAST 1 ( arr )					    								  
							      128 LOAD_FAST 2 ( i )					    								  
							      130 STORE_SUBSCR						    								  
							      								    								  
							      12 132 LOAD_GLOBAL 0 ( print )				    								  
							      134 LOAD_FAST 1 ( arr )					    								  
							      136 LOAD_FAST 2 ( i )					    								  
							      138 BINARY_SUBSCR						    								  
							      140 LOAD_CONST 2 ( ', ' )					    								  
							      142 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      144 CALL_FUNCTION_KW 2					    								  
							      146 POP_TOP						    								  
							      148 JUMP_ABSOLUTE 46					    								  
							      >> 150 POP_BLOCK						    								  
							      >> 152 LOAD_CONST 0 ( None )				    								  
							      154 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO			    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO
--							      --							    --								  --
def findTriplets ( arr , n ) :				      Disassembly of <code object findTriplets at 0x7fbac<<unk>> de Disassembly of <code object findTriplets at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    found = True					      2 0 LOAD_CONST 1 ( True )					    26 0 LOAD_CONST 1 ( True )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n - 2 ) :			      2 STORE_FAST 2 ( found )					    2 STORE_FAST 1 ( n )					  (item)   File "main.py", line 48, in <module>	  Fi
	for j in range ( i + 1 , n - 1 ) :		      								    								  le "<dis>", line 2, in findTriplets TypeError: 'li
	    for k in range ( j + 1 , n ) :		      3 4 SETUP_LOOP 130 ( to 136 )				    27 4 SETUP_LOOP 52 ( to 54 )				  st' object cannot be interpreted as an integer
		if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) 6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
		    print ( arr [ i ] , arr [ j ] , arr [ k ] 8 LOAD_CONST 2 ( 0 )					    8 LOAD_FAST 0 ( arr )					  
		    found = True			      10 LOAD_FAST 1 ( n )					    10 CALL_FUNCTION 1						  
    if ( found == False ) :				      12 LOAD_CONST 3 ( 2 )					    12 GET_ITER							  
	print ( " not exist " )				      14 BINARY_SUBTRACT					    >> 14 FOR_ITER 52 ( to 52 )					  
							      16 CALL_FUNCTION 2					    16 STORE_FAST 2 ( i )					  
							      18 GET_ITER						    								  
							      >> 20 FOR_ITER 112 ( to 134 )				    28 18 LOAD_FAST 2 ( i )					  
							      22 STORE_FAST 3 ( i )					    20 LOAD_CONST 2 ( 1 )					  
							      								    22 INPLACE_ADD						  
							      4 24 SETUP_LOOP 106 ( to 132 )				    24 STORE_FAST 1 ( n )					  
							      26 LOAD_GLOBAL 0 ( range )				    								  
							      28 LOAD_FAST 3 ( i )					    29 26 LOAD_FAST 2 ( i )					  
							      30 LOAD_CONST 4 ( 1 )					    28 LOAD_CONST 3 ( 1 )					  
							      32 BINARY_ADD						    30 INPLACE_ADD						  
							      34 LOAD_FAST 1 ( n )					    32 STORE_FAST 1 ( n )					  
							      36 LOAD_CONST 4 ( 1 )					    								  
							      38 BINARY_SUBTRACT					    30 34 LOAD_FAST 1 ( n )					  
							      40 CALL_FUNCTION 2					    36 LOAD_CONST 4 ( 2 )					  
							      42 GET_ITER						    38 INPLACE_ADD						  
							      >> 44 FOR_ITER 84 ( to 130 )				    40 STORE_FAST 1 ( n )					  
							      46 STORE_FAST 4 ( j )					    								  
							      								    31 42 LOAD_FAST 1 ( n )					  
							      5 48 SETUP_LOOP 78 ( to 128 )				    44 LOAD_CONST 5 ( 1 )					  
							      50 LOAD_GLOBAL 0 ( range )				    46 INPLACE_ADD						  
							      52 LOAD_FAST 4 ( j )					    48 STORE_FAST 1 ( n )					  
							      54 LOAD_CONST 4 ( 1 )					    50 JUMP_ABSOLUTE 14						  
							      56 BINARY_ADD						    >> 52 POP_BLOCK						  
							      58 LOAD_FAST 1 ( n )					    								  
							      60 CALL_FUNCTION 2					    32 >> 54 LOAD_FAST 1 ( n )					  
							      62 GET_ITER						    56 RETURN_VALUE						  
							      >> 64 FOR_ITER 60 ( to 126 )				    NEW_LINE							  
							      66 STORE_FAST 5 ( k )					    								  
							      								    								  
							      6 68 LOAD_FAST 0 ( arr )					    								  
							      70 LOAD_FAST 3 ( i )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_FAST 4 ( j )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 BINARY_ADD						    								  
							      82 LOAD_FAST 0 ( arr )					    								  
							      84 LOAD_FAST 5 ( k )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 BINARY_ADD						    								  
							      90 LOAD_CONST 2 ( 0 )					    								  
							      92 COMPARE_OP 2 ( == )					    								  
							      94 POP_JUMP_IF_FALSE 64					    								  
							      								    								  
							      7 96 LOAD_GLOBAL 1 ( print )				    								  
							      98 LOAD_FAST 0 ( arr )					    								  
							      100 LOAD_FAST 3 ( i )					    								  
							      102 BINARY_SUBSCR						    								  
							      104 LOAD_FAST 0 ( arr )					    								  
							      106 LOAD_FAST 4 ( j )					    								  
							      108 BINARY_SUBSCR						    								  
							      110 LOAD_FAST 0 ( arr )					    								  
							      112 LOAD_FAST 5 ( k )					    								  
							      114 BINARY_SUBSCR						    								  
							      116 CALL_FUNCTION 3					    								  
							      118 POP_TOP						    								  
							      								    								  
							      8 120 LOAD_CONST 1 ( True )				    								  
							      122 STORE_FAST 2 ( found )				    								  
							      124 JUMP_ABSOLUTE 64					    								  
							      >> 126 POP_BLOCK						    								  
							      >> 128 JUMP_ABSOLUTE 44					    								  
							      >> 130 POP_BLOCK						    								  
							      >> 132 JUMP_ABSOLUTE 20					    								  
							      >> 134 POP_BLOCK						    								  
							      								    								  
							      9 >> 136 LOAD_FAST 2 ( found )				    								  
							      138 LOAD_CONST 5 ( False )				    								  
							      140 COMPARE_OP 2 ( == )					    								  
							      142 POP_JUMP_IF_FALSE 152					    								  
							      								    								  
							      10 144 LOAD_GLOBAL 1 ( print )				    								  
							      146 LOAD_CONST 6 ( ' not exist ' )			    								  
							      148 CALL_FUNCTION 1					    								  
							      150 POP_TOP						    								  
							      >> 152 LOAD_CONST 0 ( None )				    								  
							      154 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1	      COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		    COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		  COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1
--							      --							    --								  --
def getInvCount ( arr , n ) :				      Disassembly of <code object getInvCount at 0x7fbac0e89d20, fi Disassembly of <code object getInvCount at 0x7f816a673a50, fi error : Traceback (most recent call last):   File
    invcount = 0					      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 1 , n - 1 ) :			      2 STORE_FAST 2 ( invcount )				    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 39, in <module>	  Fi
	small = 0					      								    4 BINARY_SUBSCR						  le "<dis>", line 2, in getInvCount TypeError: 'int
	for j in range ( i + 1 , n ) :			      3 4 SETUP_LOOP 140 ( to 146 )				    6 STORE_FAST 2 ( s )					  ' object is not subscriptable
	    if ( arr [ i ] > arr [ j ] ) :		      6 LOAD_GLOBAL 0 ( range )					    								  
		small += 1				      8 LOAD_CONST 2 ( 1 )					    27 8 LOAD_FAST 0 ( arr )					  
	great = 0 ;					      10 LOAD_FAST 1 ( n )					    10 LOAD_METHOD 0 ( append )					  
	for j in range ( i - 1 , - 1 , - 1 ) :		      12 LOAD_CONST 2 ( 1 )					    12 LOAD_FAST 2 ( s )					  
	    if ( arr [ i ] < arr [ j ] ) :		      14 BINARY_SUBTRACT					    14 CALL_METHOD 1						  
		great += 1				      16 CALL_FUNCTION 2					    16 POP_TOP							  
	invcount += great * small			      18 GET_ITER						    								  
    return invcount					      >> 20 FOR_ITER 122 ( to 144 )				    28 18 LOAD_FAST 0 ( arr )					  
							      22 STORE_FAST 3 ( i )					    20 LOAD_METHOD 0 ( append )					  
							      								    22 LOAD_FAST 1 ( n )					  
							      4 24 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 STORE_FAST 4 ( small )					    26 BINARY_SUBSCR						  
							      								    28 CALL_METHOD 1						  
							      5 28 SETUP_LOOP 46 ( to 76 )				    30 POP_TOP							  
							      30 LOAD_GLOBAL 0 ( range )				    32 LOAD_CONST 0 ( None )					  
							      32 LOAD_FAST 3 ( i )					    34 RETURN_VALUE						  
							      34 LOAD_CONST 2 ( 1 )					    NEW_LINE							  
							      36 BINARY_ADD						    								  
							      38 LOAD_FAST 1 ( n )					    								  
							      40 CALL_FUNCTION 2					    								  
							      42 GET_ITER						    								  
							      >> 44 FOR_ITER 28 ( to 74 )				    								  
							      46 STORE_FAST 5 ( j )					    								  
							      								    								  
							      6 48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 3 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 5 ( j )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 COMPARE_OP 4 ( > )					    								  
							      62 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      7 64 LOAD_FAST 4 ( small )				    								  
							      66 LOAD_CONST 2 ( 1 )					    								  
							      68 INPLACE_ADD						    								  
							      70 STORE_FAST 4 ( small )					    								  
							      72 JUMP_ABSOLUTE 44					    								  
							      >> 74 POP_BLOCK						    								  
							      								    								  
							      8 >> 76 LOAD_CONST 1 ( 0 )				    								  
							      78 STORE_FAST 6 ( great )					    								  
							      								    								  
							      9 80 SETUP_LOOP 48 ( to 130 )				    								  
							      82 LOAD_GLOBAL 0 ( range )				    								  
							      84 LOAD_FAST 3 ( i )					    								  
							      86 LOAD_CONST 2 ( 1 )					    								  
							      88 BINARY_SUBTRACT					    								  
							      90 LOAD_CONST 3 ( - 1 )					    								  
							      92 LOAD_CONST 3 ( - 1 )					    								  
							      94 CALL_FUNCTION 3					    								  
							      96 GET_ITER						    								  
							      >> 98 FOR_ITER 28 ( to 128 )				    								  
							      100 STORE_FAST 5 ( j )					    								  
							      								    								  
							      10 102 LOAD_FAST 0 ( arr )				    								  
							      104 LOAD_FAST 3 ( i )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 LOAD_FAST 0 ( arr )					    								  
							      110 LOAD_FAST 5 ( j )					    								  
							      112 BINARY_SUBSCR						    								  
							      114 COMPARE_OP 0 ( < )					    								  
							      116 POP_JUMP_IF_FALSE 98					    								  
							      								    								  
							      11 118 LOAD_FAST 6 ( great )				    								  
							      120 LOAD_CONST 2 ( 1 )					    								  
							      122 INPLACE_ADD						    								  
							      124 STORE_FAST 6 ( great )				    								  
							      126 JUMP_ABSOLUTE 98					    								  
							      >> 128 POP_BLOCK						    								  
							      								    								  
							      12 >> 130 LOAD_FAST 2 ( invcount )			    								  
							      132 LOAD_FAST 6 ( great )					    								  
							      134 LOAD_FAST 4 ( small )					    								  
							      136 BINARY_MULTIPLY					    								  
							      138 INPLACE_ADD						    								  
							      140 STORE_FAST 2 ( invcount )				    								  
							      142 JUMP_ABSOLUTE 20					    								  
							      >> 144 POP_BLOCK						    								  
							      								    								  
							      13 >> 146 LOAD_FAST 2 ( invcount )			    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1      FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1	    FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1	  FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1
--							      --							    --								  --
def isSubset ( arr1 , arr2 , m , n ) :			      Disassembly of <code object isSubset at 0x7fbac<<unk>> d540,  Disassembly of <code object isSubset at 0x7f816a677930, file  error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 1 ( arr2 )					  "XLM/dis_script.py", line 60, in <module>	exec
    j = 0						      2 STORE_FAST 4 ( i )					    2 LOAD_FAST 0 ( arr1 )					  (item)   File "main.py", line 52, in <module>	  Fi
    if m < n :						      								    4 LOAD_FAST 2 ( arr2 )					  le "<dis>", line 2, in isSubset UnboundLocalError:
	return 0					      3 4 LOAD_CONST 1 ( 0 )					    6 LOAD_FAST 3 ( arr2 )					   local variable 'arr2' referenced before assignmen
    arr1.sort ( )					      6 STORE_FAST 5 ( j )					    8 LOAD_FAST 4 ( arr2 )					  t
    arr2.sort ( )					      								    10 LOAD_FAST 5 ( arr2 )					  
    while i < n and j < m :				      4 8 LOAD_FAST 2 ( m )					    12 LOAD_FAST 6 ( arr2 )					  
	if arr1 [ j ] < arr2 [ i ] :			      10 LOAD_FAST 3 ( n )					    14 LOAD_FAST 7 ( arr2 )					  
	    j += 1					      12 COMPARE_OP 0 ( < )					    16 LOAD_FAST 8 ( arr2 )					  
	elif arr1 [ j ] == arr2 [ i ] :			      14 POP_JUMP_IF_FALSE 20					    18 LOAD_FAST 9 ( arr2 )					  
	    j += 1					      								    20 LOAD_FAST 10 ( arr2 )					  
	    i += 1					      5 16 LOAD_CONST 1 ( 0 )					    22 LOAD_FAST 11 ( arr2 )					  
	elif arr1 [ j ] > arr2 [ i ] :			      18 RETURN_VALUE						    24 LOAD_FAST 12 ( arr2 )					  
	    return 0					      								    26 LOAD_FAST 13 ( arr2 )					  
    return False if i < n else True			      6 >> 20 LOAD_FAST 0 ( arr1 )				    28 LOAD_FAST 14 ( arr2 )					  
							      22 LOAD_METHOD 0 ( sort )					    30 LOAD_FAST 15 ( arr2 )					  
							      24 CALL_METHOD 0						    32 LOAD_FAST 8 ( arr2 )					  
							      26 POP_TOP						    34 LOAD_FAST 10 ( arr2 )					  
							      								    36 LOAD_FAST 12 ( arr2 )					  
							      7 28 LOAD_FAST 1 ( arr2 )					    38 LOAD_FAST 13 ( arr2 )					  
							      30 LOAD_METHOD 0 ( sort )					    40 LOAD_FAST 14 ( arr2 )					  
							      32 CALL_METHOD 0						    42 LOAD_FAST 15 ( arr2 )					  
							      34 POP_TOP						    44 LOAD_FAST 16 ( arr2 )					  
							      								    46 LOAD_FAST 15 ( arr2 )					  
							      8 36 SETUP_LOOP 100 ( to 138 )				    48 LOAD_FAST 16 ( arr2 )					  
							      >> 38 LOAD_FAST 4 ( i )					    50 LOAD_FAST 17 ( arr2 )					  
							      40 LOAD_FAST 3 ( n )					    52 LOAD_FAST 16 ( arr2 )					  
							      42 COMPARE_OP 0 ( < )					    54 LOAD_FAST 17 ( arr2 )					  
							      44 POP_JUMP_IF_FALSE 136					    56 LOAD_FAST 18 ( arr2 )					  
							      46 LOAD_FAST 5 ( j )					    58 LOAD_FAST 19 ( arr2 )					  
							      48 LOAD_FAST 2 ( m )					    60 LOAD_FAST 20 ( arr2 )					  
							      50 COMPARE_OP 0 ( < )					    62 LOAD_FAST 21 ( arr2 )					  
							      52 POP_JUMP_IF_FALSE 136					    64 LOAD_FAST 22 ( arr2 )					  
							      								    66 LOAD_FAST 21 ( arr2 )					  
							      9 54 LOAD_FAST 0 ( arr1 )					    68 LOAD_FAST 22 ( arr2 )					  
							      56 LOAD_FAST 5 ( j )					    70 LOAD_FAST 21 ( arr2 )					  
							      58 BINARY_SUBSCR						    72 LOAD_FAST 22 ( arr2 )					  
							      60 LOAD_FAST 1 ( arr2 )					    74 LOAD_FAST 22 ( arr2 )					  
							      62 LOAD_FAST 4 ( i )					    76 LOAD_FAST 21 ( arr2 )					  
							      64 BINARY_SUBSCR						    78 LOAD_FAST 22 ( arr2 )					  
							      66 COMPARE_OP 0 ( < )					    80 LOAD_FAST 22 ( arr2 )					  
							      68 POP_JUMP_IF_FALSE 80					    82 LOAD_FAST 21 ( arr2 )					  
							      								    84 LOAD_FAST 22 ( arr2 )					  
							      10 70 LOAD_FAST 5 ( j )					    86 LOAD_FAST 22 ( arr2 )					  
							      72 LOAD_CONST 2 ( 1 )					    88 LOAD_FAST 23 ( arr2 )					  
							      74 INPLACE_ADD						    90 LOAD_FAST 22 ( arr2 )					  
							      76 STORE_FAST 5 ( j )					    92 LOAD_FAST 21 ( arr2 )					  
							      78 JUMP_ABSOLUTE 38					    94 LOAD_FAST 22 ( arr2 )					  
							      								    96 LOAD_FAST 22 ( arr2 )					  
							      11 >> 80 LOAD_FAST 0 ( arr1 )				    98 LOAD_FAST 23 ( arr2 )					  
							      82 LOAD_FAST 5 ( j )					    100 LOAD_FAST 22 ( arr2 )					  
							      84 BINARY_SUBSCR						    102 LOAD_FAST 23 ( arr2 )					  
							      86 LOAD_FAST 1 ( arr2 )					    104 LOAD_FAST 22 ( arr2 )					  
							      88 LOAD_FAST 4 ( i )					    106 LOAD_FAST 24 ( arr2 )					  
							      90 BINARY_SUBSCR						    108 LOAD_FAST 23 ( arr2 )					  
							      92 COMPARE_OP 2 ( == )					    110 LOAD_FAST 24 ( arr2 )					  
							      94 POP_JUMP_IF_FALSE 114					    112 LOAD_FAST 23 ( arr2 )					  
							      								    114 LOAD_FAST 24 ( arr2 )					  
							      12 96 LOAD_FAST 5 ( j )					    116 LOAD_FAST 23 ( arr2 )					  
							      98 LOAD_CONST 2 ( 1 )					    118 LOAD_FAST 24 ( arr2 )					  
							      100 INPLACE_ADD						    120 LOAD_FAST 23 ( arr2 )					  
							      102 STORE_FAST 5 ( j )					    122 LOAD_FAST 24 ( arr2 )					  
							      								    124 LOAD_FAST 25 ( arr2 )					  
							      13 104 LOAD_FAST 4 ( i )					    126 LOAD_FAST 24 ( arr2 )					  
							      106 LOAD_CONST 2 ( 1 )					    128 LOAD_FAST 23 ( arr2 )					  
							      108 INPLACE_ADD						    130 LOAD_FAST 24 ( arr2 )					  
							      110 STORE_FAST 4 ( i )					    132 LOAD_FAST 26 ( arr2 )					  
							      112 JUMP_ABSOLUTE 38					    134 LOAD_FAST 5 ( arr2 )					  
							      								    136 LOAD_FAST 6 ( arr2 )					  
							      14 >> 114 LOAD_FAST 0 ( arr1 )				    138 LOAD_FAST 24 ( arr2 )					  
							      116 LOAD_FAST 5 ( j )					    140 LOAD_FAST 5 ( arr2 ) NEW_LINE				  
							      118 BINARY_SUBSCR						    								  
							      120 LOAD_FAST 1 ( arr2 )					    								  
							      122 LOAD_FAST 4 ( i )					    								  
							      124 BINARY_SUBSCR						    								  
							      126 COMPARE_OP 4 ( > )					    								  
							      128 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      15 130 LOAD_CONST 1 ( 0 )					    								  
							      132 RETURN_VALUE						    								  
							      134 JUMP_ABSOLUTE 38					    								  
							      >> 136 POP_BLOCK						    								  
							      								    								  
							      16 >> 138 LOAD_FAST 4 ( i )				    								  
							      140 LOAD_FAST 3 ( n )					    								  
							      142 COMPARE_OP 0 ( < )					    								  
							      144 POP_JUMP_IF_FALSE 150					    								  
							      146 LOAD_CONST 3 ( False )				    								  
							      148 RETURN_VALUE						    								  
							      >> 150 LOAD_CONST 4 ( True )				    								  
							      152 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER		      C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			    C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			  C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER
--							      --							    --								  --
def getSecondMostFreq ( str ) :				      Disassembly of <code object getSecondMostFreq at 0x7fbac<<unk Disassembly of <code object getSecondMostFreq at 0x7f816a6e4b error : Traceback (most recent call last):   File
    NO_OF_CHARS = 256					      2 0 LOAD_CONST 1 ( 256 )					    18 0 LOAD_GLOBAL 0 ( NO_OF_BINARY )				  "XLM/dis_script.py", line 59, in <module>	for
    count = [ 0 ] * NO_OF_CHARS				      2 STORE_FAST 1 ( NO_OF_CHARS )				    2 RETURN_VALUE						  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( len ( str ) ) :			      								    NEW_LINE							  y", line 54, in run_dis_script     hyp_co = mco.to
	count [ ord ( str [ i ] ) ] += 1		      3 4 LOAD_CONST 2 ( 0 )					    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    first , second = 0 , 0				      6 BUILD_LIST 1						    								  assembler.py", line 81, in to_co     co_consts.app
    for i in range ( NO_OF_CHARS ) :			      8 LOAD_FAST 1 ( NO_OF_CHARS )				    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	if count [ i ] > count [ first ] :		      10 BINARY_MULTIPLY					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    second = first				      12 STORE_FAST 2 ( count )					    								  co	 self.co_cellvars, ValueError: code: varname
	    first = i					      								    								  s is too small
	elif ( count [ i ] > count [ second ] and count [ i ] 4 14 SETUP_LOOP 44 ( to 60 )				    								  
	    second = i					      16 LOAD_GLOBAL 0 ( range )				    								  
    return chr ( second )				      18 LOAD_GLOBAL 1 ( len )					    								  
							      20 LOAD_FAST 0 ( str )					    								  
							      22 CALL_FUNCTION 1					    								  
							      24 CALL_FUNCTION 1					    								  
							      26 GET_ITER						    								  
							      >> 28 FOR_ITER 28 ( to 58 )				    								  
							      30 STORE_FAST 3 ( i )					    								  
							      								    								  
							      5 32 LOAD_FAST 2 ( count )				    								  
							      34 LOAD_GLOBAL 2 ( ord )					    								  
							      36 LOAD_FAST 0 ( str )					    								  
							      38 LOAD_FAST 3 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 CALL_FUNCTION 1					    								  
							      44 DUP_TOP_TWO						    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_CONST 3 ( 1 )					    								  
							      50 INPLACE_ADD						    								  
							      52 ROT_THREE						    								  
							      54 STORE_SUBSCR						    								  
							      56 JUMP_ABSOLUTE 28					    								  
							      >> 58 POP_BLOCK						    								  
							      								    								  
							      6 >> 60 LOAD_CONST 4 ( ( 0 , 0 ) )			    								  
							      62 UNPACK_SEQUENCE 2					    								  
							      64 STORE_FAST 4 ( first )					    								  
							      66 STORE_FAST 5 ( second )				    								  
							      								    								  
							      7 68 SETUP_LOOP 78 ( to 148 )				    								  
							      70 LOAD_GLOBAL 0 ( range )				    								  
							      72 LOAD_FAST 1 ( NO_OF_CHARS )				    								  
							      74 CALL_FUNCTION 1					    								  
							      76 GET_ITER						    								  
							      >> 78 FOR_ITER 66 ( to 146 )				    								  
							      80 STORE_FAST 3 ( i )					    								  
							      								    								  
							      8 82 LOAD_FAST 2 ( count )				    								  
							      84 LOAD_FAST 3 ( i )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_FAST 2 ( count )					    								  
							      90 LOAD_FAST 4 ( first )					    								  
							      92 BINARY_SUBSCR						    								  
							      94 COMPARE_OP 4 ( > )					    								  
							      96 POP_JUMP_IF_FALSE 108					    								  
							      								    								  
							      9 98 LOAD_FAST 4 ( first )				    								  
							      100 STORE_FAST 5 ( second )				    								  
							      								    								  
							      10 102 LOAD_FAST 3 ( i )					    								  
							      104 STORE_FAST 4 ( first )				    								  
							      106 JUMP_ABSOLUTE 78					    								  
							      								    								  
							      11 >> 108 LOAD_FAST 2 ( count )				    								  
							      110 LOAD_FAST 3 ( i )					    								  
							      112 BINARY_SUBSCR						    								  
							      114 LOAD_FAST 2 ( count )					    								  
							      116 LOAD_FAST 5 ( second )				    								  
							      118 BINARY_SUBSCR						    								  
							      120 COMPARE_OP 4 ( > )					    								  
							      122 POP_JUMP_IF_FALSE 78					    								  
							      124 LOAD_FAST 2 ( count )					    								  
							      126 LOAD_FAST 3 ( i )					    								  
							      128 BINARY_SUBSCR						    								  
							      130 LOAD_FAST 2 ( count )					    								  
							      132 LOAD_FAST 4 ( first )					    								  
							      134 BINARY_SUBSCR						    								  
							      136 COMPARE_OP 3 ( != )					    								  
							      138 POP_JUMP_IF_FALSE 78					    								  
							      								    								  
							      12 140 LOAD_FAST 3 ( i )					    								  
							      142 STORE_FAST 5 ( second )				    								  
							      144 JUMP_ABSOLUTE 78					    								  
							      >> 146 POP_BLOCK						    								  
							      								    								  
							      13 >> 148 LOAD_GLOBAL 3 ( chr )				    								  
							      150 LOAD_FAST 5 ( second )				    								  
							      152 CALL_FUNCTION 1					    								  
							      154 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_MOVES_KNIGHT					      POSSIBLE_MOVES_KNIGHT					    POSSIBLE_MOVES_KNIGHT					  POSSIBLE_MOVES_KNIGHT
--							      --							    --								  --
def findPossibleMoves ( mat , p , q ) :			      Disassembly of <code object findPossibleMoves at 0x7fbac0e89d Disassembly of <code object findPossibleMoves at 0x7f816a673a script_not_found : None
    global n , m ;					      3 0 LOAD_CONST 1 ( 2 )					    26 0 LOAD_FAST 1 ( p )					  
    X = [ 2 , 1 , - 1 , - 2 , - 2 , - 1 , 1 , 2 ] ;	      2 LOAD_CONST 2 ( 1 )					    2 LOAD_CONST 1 ( 2 )					  
    Y = [ 1 , 2 , 2 , 1 , - 1 , - 2 , - 2 , - 1 ] ;	      4 LOAD_CONST 3 ( - 1 )					    4 BINARY_POWER						  
    count = 0 ;						      6 LOAD_CONST 4 ( - 2 )					    6 LOAD_CONST 2 ( 1 )					  
    for i in range ( 8 ) :				      8 LOAD_CONST 4 ( - 2 )					    8 BINARY_POWER						  
	x = p + X [ i ] ;				      10 LOAD_CONST 3 ( - 1 )					    10 STORE_FAST 2 ( n )					  
	y = q + Y [ i ] ;				      12 LOAD_CONST 2 ( 1 )					    								  
	if ( x >= 0 and y >= 0 and x < n and y < m and mat [  14 LOAD_CONST 1 ( 2 )					    27 12 LOAD_FAST 0 ( mat )					  
	    count += 1 ;				      16 BUILD_LIST 8						    14 LOAD_CONST 3 ( 1 )					  
    return count ;					      18 STORE_FAST 3 ( X )					    16 BINARY_POWER						  
							      								    18 LOAD_FAST 2 ( n )					  
							      4 20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 4 ( 2 )					  
							      22 LOAD_CONST 1 ( 2 )					    22 BINARY_POWER						  
							      24 LOAD_CONST 1 ( 2 )					    24 BINARY_MULTIPLY						  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 2 ( n )					  
							      28 LOAD_CONST 3 ( - 1 )					    28 BINARY_MULTIPLY						  
							      30 LOAD_CONST 4 ( - 2 )					    30 BINARY_ADD						  
							      32 LOAD_CONST 4 ( - 2 )					    32 RETURN_VALUE						  
							      34 LOAD_CONST 3 ( - 1 )					    NEW_LINE							  
							      36 BUILD_LIST 8						    								  
							      38 STORE_FAST 4 ( Y )					    								  
							      								    								  
							      5 40 LOAD_CONST 5 ( 0 )					    								  
							      42 STORE_FAST 5 ( count )					    								  
							      								    								  
							      6 44 SETUP_LOOP 96 ( to 142 )				    								  
							      46 LOAD_GLOBAL 0 ( range )				    								  
							      48 LOAD_CONST 6 ( 8 )					    								  
							      50 CALL_FUNCTION 1					    								  
							      52 GET_ITER						    								  
							      >> 54 FOR_ITER 84 ( to 140 )				    								  
							      56 STORE_FAST 6 ( i )					    								  
							      								    								  
							      7 58 LOAD_FAST 1 ( p )					    								  
							      60 LOAD_FAST 3 ( X )					    								  
							      62 LOAD_FAST 6 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 BINARY_ADD						    								  
							      68 STORE_FAST 7 ( x )					    								  
							      								    								  
							      8 70 LOAD_FAST 2 ( q )					    								  
							      72 LOAD_FAST 4 ( Y )					    								  
							      74 LOAD_FAST 6 ( i )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 BINARY_ADD						    								  
							      80 STORE_FAST 8 ( y )					    								  
							      								    								  
							      9 82 LOAD_FAST 7 ( x )					    								  
							      84 LOAD_CONST 5 ( 0 )					    								  
							      86 COMPARE_OP 5 ( >= )					    								  
							      88 POP_JUMP_IF_FALSE 54					    								  
							      90 LOAD_FAST 8 ( y )					    								  
							      92 LOAD_CONST 5 ( 0 )					    								  
							      94 COMPARE_OP 5 ( >= )					    								  
							      96 POP_JUMP_IF_FALSE 54					    								  
							      98 LOAD_FAST 7 ( x )					    								  
							      100 LOAD_GLOBAL 1 ( n )					    								  
							      102 COMPARE_OP 0 ( < )					    								  
							      104 POP_JUMP_IF_FALSE 54					    								  
							      106 LOAD_FAST 8 ( y )					    								  
							      108 LOAD_GLOBAL 2 ( m )					    								  
							      110 COMPARE_OP 0 ( < )					    								  
							      112 POP_JUMP_IF_FALSE 54					    								  
							      114 LOAD_FAST 0 ( mat )					    								  
							      116 LOAD_FAST 7 ( x )					    								  
							      118 BINARY_SUBSCR						    								  
							      120 LOAD_FAST 8 ( y )					    								  
							      122 BINARY_SUBSCR						    								  
							      124 LOAD_CONST 5 ( 0 )					    								  
							      126 COMPARE_OP 2 ( == )					    								  
							      128 POP_JUMP_IF_FALSE 54					    								  
							      								    								  
							      10 130 LOAD_FAST 5 ( count )				    								  
							      132 LOAD_CONST 2 ( 1 )					    								  
							      134 INPLACE_ADD						    								  
							      136 STORE_FAST 5 ( count )				    								  
							      138 JUMP_ABSOLUTE 54					    								  
							      >> 140 POP_BLOCK						    								  
							      								    								  
							      11 >> 142 LOAD_FAST 5 ( count )				    								  
							      144 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	      LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	    LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	  LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS
--							      --							    --								  --
def minimizeWithKSwaps ( arr , n , k ) :		      Disassembly of <code object minimizeWithKSwaps at 0x7fbac<<un Disassembly of <code object minimizeWithKSwapSwaps at 0x7f816 error : Traceback (most recent call last):   File
    for i in range ( n - 1 ) :				      2 0 SETUP_LOOP 150 ( to 152 )				    25 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 59, in <module>	for
	pos = i						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( xrange )					  item in run_dis_script():   File "XLM/dis_script.p
	for j in range ( i + 1 , n ) :			      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 0 ( arr )					  y", line 54, in run_dis_script     hyp_co = mco.to
	    if ( j - i > k ) :				      6 LOAD_CONST 1 ( 1 )					    6 CALL_FUNCTION 1						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
		break					      8 BINARY_SUBTRACT						    8 GET_ITER							  assembler.py", line 81, in to_co     co_consts.app
	    if ( arr [ j ] < arr [ pos ] ) :		      10 CALL_FUNCTION 1					    >> 10 FOR_ITER 22 ( to 24 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
		pos = j					      12 GET_ITER						    12 STORE_FAST 1 ( n )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	for j in range ( pos , i , - 1 ) :		      >> 14 FOR_ITER 134 ( to 150 )				    								  co	 self.co_cellvars, ValueError: code: varname
	    arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ 16 STORE_FAST 3 ( i )					    26 14 LOAD_FAST 1 ( n )					  s is too small
	k -= pos - i					      								    16 LOAD_CONST 1 ( 0 )					  
							      3 18 LOAD_FAST 3 ( i )					    18 BINARY_SUBSCR						  
							      20 STORE_FAST 4 ( pos )					    20 LOAD_FAST 1 ( n )					  
							      								    22 COMPARE_OP 2 ( == )					  
							      4 22 SETUP_LOOP 56 ( to 80 )				    24 POP_JUMP_IF_FALSE 10					  
							      24 LOAD_GLOBAL 0 ( range )				    								  
							      26 LOAD_FAST 3 ( i )					    27 26 LOAD_FAST 1 ( n )					  
							      28 LOAD_CONST 1 ( 1 )					    28 LOAD_CONST 2 ( 1 )					  
							      30 BINARY_ADD						    30 INPLACE_ADD						  
							      32 LOAD_FAST 1 ( n )					    32 STORE_FAST 1 ( n )					  
							      34 CALL_FUNCTION 2					    34 JUMP_ABSOLUTE 10						  
							      36 GET_ITER						    >> 36 POP_BLOCK						  
							      >> 38 FOR_ITER 38 ( to 78 )				    								  
							      40 STORE_FAST 5 ( j )					    28 >> 38 LOAD_FAST 1 ( n )					  
							      								    40 RETURN_VALUE						  
							      5 42 LOAD_FAST 5 ( j )					    NEW_LINE							  
							      44 LOAD_FAST 3 ( i )					    								  
							      46 BINARY_SUBTRACT					    								  
							      48 LOAD_FAST 2 ( k )					    								  
							      50 COMPARE_OP 4 ( > )					    								  
							      52 POP_JUMP_IF_FALSE 56					    								  
							      								    								  
							      6 54 BREAK_LOOP						    								  
							      								    								  
							      7 >> 56 LOAD_FAST 0 ( arr )				    								  
							      58 LOAD_FAST 5 ( j )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_FAST 0 ( arr )					    								  
							      64 LOAD_FAST 4 ( pos )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 COMPARE_OP 0 ( < )					    								  
							      70 POP_JUMP_IF_FALSE 38					    								  
							      								    								  
							      8 72 LOAD_FAST 5 ( j )					    								  
							      74 STORE_FAST 4 ( pos )					    								  
							      76 JUMP_ABSOLUTE 38					    								  
							      >> 78 POP_BLOCK						    								  
							      								    								  
							      9 >> 80 SETUP_LOOP 54 ( to 136 )				    								  
							      82 LOAD_GLOBAL 0 ( range )				    								  
							      84 LOAD_FAST 4 ( pos )					    								  
							      86 LOAD_FAST 3 ( i )					    								  
							      88 LOAD_CONST 2 ( - 1 )					    								  
							      90 CALL_FUNCTION 3					    								  
							      92 GET_ITER						    								  
							      >> 94 FOR_ITER 38 ( to 134 )				    								  
							      96 STORE_FAST 5 ( j )					    								  
							      								    								  
							      10 98 LOAD_FAST 0 ( arr )					    								  
							      100 LOAD_FAST 5 ( j )					    								  
							      102 LOAD_CONST 1 ( 1 )					    								  
							      104 BINARY_SUBTRACT					    								  
							      106 BINARY_SUBSCR						    								  
							      108 LOAD_FAST 0 ( arr )					    								  
							      110 LOAD_FAST 5 ( j )					    								  
							      112 BINARY_SUBSCR						    								  
							      114 ROT_TWO						    								  
							      116 LOAD_FAST 0 ( arr )					    								  
							      118 LOAD_FAST 5 ( j )					    								  
							      120 STORE_SUBSCR						    								  
							      122 LOAD_FAST 0 ( arr )					    								  
							      124 LOAD_FAST 5 ( j )					    								  
							      126 LOAD_CONST 1 ( 1 )					    								  
							      128 BINARY_SUBTRACT					    								  
							      130 STORE_SUBSCR						    								  
							      132 JUMP_ABSOLUTE 94					    								  
							      >> 134 POP_BLOCK						    								  
							      								    								  
							      11 >> 136 LOAD_FAST 2 ( k )				    								  
							      138 LOAD_FAST 4 ( pos )					    								  
							      140 LOAD_FAST 3 ( i )					    								  
							      142 BINARY_SUBTRACT					    								  
							      144 INPLACE_SUBTRACT					    								  
							      146 STORE_FAST 2 ( k )					    								  
							      148 JUMP_ABSOLUTE 14					    								  
							      >> 150 POP_BLOCK						    								  
							      >> 152 LOAD_CONST 0 ( None )				    								  
							      154 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_
--							      --							    --								  --
def findCount ( n , sum ) :				      Disassembly of <code object findCount at 0x7fbac0e8bc90, file Disassembly of <code object findCount at 0x7f816a673a50, file script_not_found : None
    start = math.pow ( 10 , n - 1 ) ;			      2 0 LOAD_GLOBAL 0 ( math )				    106 0 LOAD_GLOBAL 0 ( start )				  
    end = math.pow ( 10 , n ) - 1 ;			      2 LOAD_METHOD 1 ( pow )					    2 LOAD_CONST 1 ( 10 )					  
    count = 0 ;						      4 LOAD_CONST 1 ( 10 )					    4 CALL_FUNCTION 1						  
    i = start ;						      6 LOAD_FAST 0 ( n )					    6 STORE_FAST 1 ( sum )					  
    while ( i <= end ) :				      8 LOAD_CONST 2 ( 1 )					    								  
	cur = 0 ;					      10 BINARY_SUBTRACT					    107 8 LOAD_FAST 1 ( sum )					  
	temp = i ;					      12 CALL_METHOD 2						    10 LOAD_CONST 2 ( 10 )					  
	while ( temp != 0 ) :				      14 STORE_FAST 2 ( start )					    12 COMPARE_OP 0 ( < )					  
	    cur += temp % 10 ;				      								    14 POP_JUMP_IF_FALSE 20					  
	    temp = temp // 10 ;				      3 16 LOAD_GLOBAL 0 ( math )				    								  
	if ( cur == sum ) :				      18 LOAD_METHOD 1 ( pow )					    108 16 LOAD_CONST 3 ( '%d %d %d %d %d' )			  
	    count = count + 1 ;				      20 LOAD_CONST 1 ( 10 )					    18 LOAD_FAST 1 ( sum )					  
	    i += 9 ;					      22 LOAD_FAST 0 ( n )					    20 BINARY_MODULO						  
	else :						      24 CALL_METHOD 2						    22 STORE_FAST 2 ( s )					  
	    i = i + 1 ;					      26 LOAD_CONST 2 ( 1 )					    								  
    print ( count ) ;					      28 BINARY_SUBTRACT					    109 24 LOAD_FAST 2 ( s )					  
							      30 STORE_FAST 3 ( end )					    26 LOAD_CONST 4 ( '%d %d' )					  
							      								    28 LOAD_FAST 1 ( sum )					  
							      4 32 LOAD_CONST 3 ( 0 )					    30 BINARY_MODULO						  
							      34 STORE_FAST 4 ( count )					    32 STORE_FAST 3 ( s )					  
							      								    								  
							      5 36 LOAD_FAST 2 ( start )				    110 34 LOAD_FAST 2 ( s )					  
							      38 STORE_FAST 5 ( i )					    36 LOAD_CONST 5 ( '%d %d %d' )				  
							      								    38 LOAD_FAST 1 ( sum )					  
							      6 40 SETUP_LOOP 88 ( to 130 )				    40 BINARY_MODULO						  
							      >> 42 LOAD_FAST 5 ( i )					    42 LOAD_CONST 6 ( '%d %d %d' )				  
							      44 LOAD_FAST 3 ( end )					    44 LOAD_FAST 1 ( sum )					  
							      46 COMPARE_OP 1 ( <= )					    46 BINARY_MODULO						  
							      48 POP_JUMP_IF_FALSE 128					    48 BUILD_TUPLE 2						  
							      								    50 BINARY_MODULO						  
							      7 50 LOAD_CONST 3 ( 0 )					    52 RETURN_VALUE						  
							      52 STORE_FAST 6 ( cur )					    NEW_LINE							  
							      								    								  
							      8 54 LOAD_FAST 5 ( i )					    								  
							      56 STORE_FAST 7 ( temp )					    								  
							      								    								  
							      9 58 SETUP_LOOP 32 ( to 92 )				    								  
							      >> 60 LOAD_FAST 7 ( temp )				    								  
							      62 LOAD_CONST 3 ( 0 )					    								  
							      64 COMPARE_OP 3 ( != )					    								  
							      66 POP_JUMP_IF_FALSE 90					    								  
							      								    								  
							      10 68 LOAD_FAST 6 ( cur )					    								  
							      70 LOAD_FAST 7 ( temp )					    								  
							      72 LOAD_CONST 1 ( 10 )					    								  
							      74 BINARY_MODULO						    								  
							      76 INPLACE_ADD						    								  
							      78 STORE_FAST 6 ( cur )					    								  
							      								    								  
							      11 80 LOAD_FAST 7 ( temp )				    								  
							      82 LOAD_CONST 1 ( 10 )					    								  
							      84 BINARY_FLOOR_DIVIDE					    								  
							      86 STORE_FAST 7 ( temp )					    								  
							      88 JUMP_ABSOLUTE 60					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      12 >> 92 LOAD_FAST 6 ( cur )				    								  
							      94 LOAD_FAST 1 ( sum )					    								  
							      96 COMPARE_OP 2 ( == )					    								  
							      98 POP_JUMP_IF_FALSE 118					    								  
							      								    								  
							      13 100 LOAD_FAST 4 ( count )				    								  
							      102 LOAD_CONST 2 ( 1 )					    								  
							      104 BINARY_ADD						    								  
							      106 STORE_FAST 4 ( count )				    								  
							      								    								  
							      14 108 LOAD_FAST 5 ( i )					    								  
							      110 LOAD_CONST 4 ( 9 )					    								  
							      112 INPLACE_ADD						    								  
							      114 STORE_FAST 5 ( i )					    								  
							      116 JUMP_ABSOLUTE 42					    								  
							      								    								  
							      16 >> 118 LOAD_FAST 5 ( i )				    								  
							      120 LOAD_CONST 2 ( 1 )					    								  
							      122 BINARY_ADD						    								  
							      124 STORE_FAST 5 ( i )					    								  
							      126 JUMP_ABSOLUTE 42					    								  
							      >> 128 POP_BLOCK						    								  
							      								    								  
							      17 >> 130 LOAD_GLOBAL 2 ( print )				    								  
							      132 LOAD_FAST 4 ( count )					    								  
							      134 CALL_FUNCTION 1					    								  
							      136 POP_TOP						    								  
							      138 LOAD_CONST 0 ( None )					    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		      MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		    MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		  MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION
--							      --							    --								  --
def getMinSteps ( n ) :					      Disassembly of <code object getMinSteps at 0x7fbac0e89d20, fi Disassembly of <code object getMinSteps at 0x7f816a6e4b70, fi error : Traceback (most recent call last):   File
    table = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    26 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( n + 1 ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
	table [ i ] = n - i				      4 LOAD_FAST 0 ( n )					    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
    for i in range ( n , 0 , - 1 ) :			      6 LOAD_CONST 2 ( 1 )					    6 LOAD_CONST 2 ( 2 )					  cals, co_varnames, co_names, co_consts, co_linesta
	if ( not ( i % 2 ) ) :				      8 BINARY_ADD						    8 COMPARE_OP 2 ( == )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    table [ i // 2 ] = min ( table [ i ] + 1 , table  10 BINARY_MULTIPLY					    10 POP_JUMP_IF_FALSE 16					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	if ( not ( i % 3 ) ) :				      12 STORE_FAST 1 ( table )					    								  n parse     code.append(arg) ValueError: byte must
	    table [ i // 3 ] = min ( table [ i ] + 1 , table  								    27 12 LOAD_FAST 0 ( n )					   be in range(0, 256)
    return table [ 1 ]					      3 14 SETUP_LOOP 32 ( to 48 )				    14 LOAD_CONST 3 ( 1 )					  
							      16 LOAD_GLOBAL 0 ( range )				    16 BINARY_SUBSCR						  
							      18 LOAD_FAST 0 ( n )					    18 STORE_FAST 1 ( n )					  
							      20 LOAD_CONST 2 ( 1 )					    								  
							      22 BINARY_ADD						    28 >> 20 LOAD_FAST 1 ( n )					  
							      24 CALL_FUNCTION 1					    22 LOAD_CONST 4 ( 3 )					  
							      26 GET_ITER						    24 COMPARE_OP 2 ( == )					  
							      >> 28 FOR_ITER 16 ( to 46 )				    26 POP_JUMP_IF_FALSE 32					  
							      30 STORE_FAST 2 ( i )					    								  
							      								    29 28 LOAD_FAST 0 ( n )					  
							      4 32 LOAD_FAST 0 ( n )					    30 LOAD_CONST 5 ( 1 )					  
							      34 LOAD_FAST 2 ( i )					    32 INPLACE_ADD						  
							      36 BINARY_SUBTRACT					    34 STORE_FAST 1 ( n )					  
							      38 LOAD_FAST 1 ( table )					    								  
							      40 LOAD_FAST 2 ( i )					    30 >> 36 LOAD_FAST 1 ( n )					  
							      42 STORE_SUBSCR						    38 LOAD_CONST 6 ( 2 )					  
							      44 JUMP_ABSOLUTE 28					    40 COMPARE_OP 2 ( == )					  
							      >> 46 POP_BLOCK						    42 POP_JUMP_IF_FALSE 52					  
							      								    								  
							      5 >> 48 SETUP_LOOP 104 ( to 154 )				    31 44 LOAD_FAST 0 ( n )					  
							      50 LOAD_GLOBAL 0 ( range )				    46 LOAD_CONST 7 ( 2 )					  
							      52 LOAD_FAST 0 ( n )					    48 INPLACE_ADD						  
							      54 LOAD_CONST 1 ( 0 )					    50 STORE_FAST 1 ( n )					  
							      56 LOAD_CONST 3 ( - 1 )					    52 JUMP_FORWARD 14 ( to 52 )				  
							      58 CALL_FUNCTION 3					    								  
							      60 GET_ITER						    33 >> 54 LOAD_FAST 1 ( n )					  
							      >> 62 FOR_ITER 88 ( to 152 )				    56 LOAD_CONST 8 ( 2 )					  
							      64 STORE_FAST 2 ( i )					    58 COMPARE_OP 2 ( == )					  
							      								    60 POP_JUMP_IF_FALSE 52					  
							      6 66 LOAD_FAST 2 ( i )					    								  
							      68 LOAD_CONST 4 ( 2 )					    34 62 LOAD_FAST 0 ( n )					  
							      70 BINARY_MODULO						    64 LOAD_CONST 9 ( 2 )					  
							      72 POP_JUMP_IF_TRUE 108					    66 INPLACE_ADD						  
							      								    68 STORE_FAST 1 ( n )					  
							      7 74 LOAD_GLOBAL 1 ( min )				    								  
							      76 LOAD_FAST 1 ( table )					    35 >> 70 LOAD_FAST 1 ( n )					  
							      78 LOAD_FAST 2 ( i )					    72 LOAD_CONST 10 ( 2 )					  
							      80 BINARY_SUBSCR						    74 INPLACE_ADD						  
							      82 LOAD_CONST 2 ( 1 )					    76 STORE_FAST 1 ( n )					  
							      84 BINARY_ADD						    								  
							      86 LOAD_FAST 1 ( table )					    36 78 LOAD_FAST 1 ( n )					  
							      88 LOAD_FAST 2 ( i )					    80 LOAD_CONST 11 ( 2 )					  
							      90 LOAD_CONST 4 ( 2 )					    82 INPLACE_ADD						  
							      92 BINARY_FLOOR_DIVIDE					    84 STORE_FAST 1 ( n )					  
							      94 BINARY_SUBSCR						    								  
							      96 CALL_FUNCTION 2					    37 86 LOAD_FAST 1 ( n )					  
							      98 LOAD_FAST 1 ( table )					    88 LOAD_CONST 12 ( 3 )					  
							      100 LOAD_FAST 2 ( i )					    90 INPLACE_ADD						  
							      102 LOAD_CONST 4 ( 2 )					    92 STORE_FAST 1 ( n )					  
							      104 BINARY_FLOOR_DIVIDE					    								  
							      106 STORE_SUBSCR						    38 94 LOAD_FAST 1 ( n )					  
							      								    96 LOAD_CONST 13 ( 2 )					  
							      8 >> 108 LOAD_FAST 2 ( i )				    98 INPLACE_ADD						  
							      110 LOAD_CONST 5 ( 3 )					    100 STORE_FAST 1 ( n )					  
							      112 BINARY_MODULO						    								  
							      114 POP_JUMP_IF_TRUE 62					    39 102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_CONST 14 ( 2 )					  
							      9 116 LOAD_GLOBAL 1 ( min )				    106 INPLACE_ADD						  
							      118 LOAD_FAST 1 ( table )					    108 STORE_FAST 1 ( n )					  
							      120 LOAD_FAST 2 ( i )					    								  
							      122 BINARY_SUBSCR						    40 110 LOAD_FAST 1 ( n )					  
							      124 LOAD_CONST 2 ( 1 )					    112 LOAD_CONST 15 ( 2 )					  
							      126 BINARY_ADD						    114 INPLACE_ADD						  
							      128 LOAD_FAST 1 ( table )					    116 STORE_FAST 1 ( n )					  
							      130 LOAD_FAST 2 ( i )					    								  
							      132 LOAD_CONST 5 ( 3 )					    41 118 LOAD_FAST 1 ( n )					  
							      134 BINARY_FLOOR_DIVIDE					    120 LOAD_CONST 16 ( 2 )					  
							      136 BINARY_SUBSCR						    122 INPLACE_ADD						  
							      138 CALL_FUNCTION 2					    124 STORE_FAST 1 ( n )					  
							      140 LOAD_FAST 1 ( table )					    								  
							      142 LOAD_FAST 2 ( i )					    42 126 LOAD_FAST 1 ( n )					  
							      144 LOAD_CONST 5 ( 3 )					    128 LOAD_FAST 1 ( n )					  
							      146 BINARY_FLOOR_DIVIDE					    130 INPLACE_ADD						  
							      148 STORE_SUBSCR						    132 STORE_FAST 1 ( n )					  
							      150 JUMP_ABSOLUTE 62					    								  
							      >> 152 POP_BLOCK						    43 134 LOAD_FAST 1 ( n )					  
							      								    136 LOAD_FAST 1 ( n )					  
							      10 >> 154 LOAD_FAST 1 ( table )				    138 INPLACE_ADD						  
							      156 LOAD_CONST 2 ( 1 )					    140 STORE_FAST 1 ( n )					  
							      158 BINARY_SUBSCR						    142 INPLACE_ADD						  
							      160 RETURN_VALUE NEW_LINE					    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    44 146 LOAD_FAST 1 ( n )					  
							      								    148 RETURN_VALUE						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_ALMOST_SORTED_ARRAY				      SEARCH_ALMOST_SORTED_ARRAY				    SEARCH_ALMOST_SORTED_ARRAY					  SEARCH_ALMOST_SORTED_ARRAY
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      Disassembly of <code object binarySearch at 0x7fbac0e8bc90, f Disassembly of <code object binarySearch at 0x7f816a673a50, f error : Traceback (most recent call last):   File
    if ( r >= l ) :					      2 0 LOAD_FAST 2 ( r )					    69 0 LOAD_FAST 1 ( l )					  "XLM/dis_script.py", line 59, in <module>	for
	mid = int ( l + ( r - l ) / 2 )			      2 LOAD_FAST 1 ( l )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	if ( arr [ mid ] == x ) : return mid		      4 COMPARE_OP 5 ( >= )					    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
	if ( mid > l and arr [ mid - 1 ] == x ) :	      6 POP_JUMP_IF_FALSE 156					    6 LOAD_CONST 2 ( 1 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	    return ( mid - 1 )				      								    8 COMPARE_OP 2 ( == )					  assembler.py", line 81, in to_co     co_consts.app
	if ( mid < r and arr [ mid + 1 ] == x ) :	      3 8 LOAD_GLOBAL 0 ( int )					    10 POP_JUMP_IF_FALSE 20					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	    return ( mid + 1 )				      10 LOAD_FAST 1 ( l )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	if ( arr [ mid ] > x ) :			      12 LOAD_FAST 2 ( r )					    70 12 LOAD_FAST 1 ( l )					  co	 self.co_cellvars, ValueError: code: varname
	    return binarySearch ( arr , l , mid - 2 , x )     14 LOAD_FAST 1 ( l )					    14 LOAD_CONST 1 ( 0 )					  s is too small
	return binarySearch ( arr , mid + 2 , r , x )	      16 BINARY_SUBTRACT					    16 BINARY_SUBSCR						  
    return - 1						      18 LOAD_CONST 1 ( 2 )					    18 LOAD_CONST 3 ( 1 )					  
							      20 BINARY_TRUE_DIVIDE					    20 COMPARE_OP 2 ( == )					  
							      22 BINARY_ADD						    22 POP_JUMP_IF_FALSE 28					  
							      24 CALL_FUNCTION 1					    								  
							      26 STORE_FAST 4 ( mid )					    71 24 LOAD_FAST 1 ( l )					  
							      								    26 LOAD_CONST 1 ( 0 )					  
							      4 28 LOAD_FAST 0 ( arr )					    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 4 ( mid )					    30 LOAD_CONST 4 ( 1 )					  
							      32 BINARY_SUBSCR						    32 COMPARE_OP 2 ( == )					  
							      34 LOAD_FAST 3 ( x )					    34 POP_JUMP_IF_FALSE 44					  
							      36 COMPARE_OP 2 ( == )					    								  
							      38 POP_JUMP_IF_FALSE 44					    72 36 LOAD_FAST 1 ( l )					  
							      40 LOAD_FAST 4 ( mid )					    38 LOAD_CONST 1 ( 0 )					  
							      42 RETURN_VALUE						    40 BINARY_SUBSCR						  
							      								    42 LOAD_CONST 5 ( 1 )					  
							      5 >> 44 LOAD_FAST 4 ( mid )				    44 COMPARE_OP 2 ( == )					  
							      46 LOAD_FAST 1 ( l )					    46 POP_JUMP_IF_FALSE 52					  
							      48 COMPARE_OP 4 ( > )					    								  
							      50 POP_JUMP_IF_FALSE 76					    73 48 LOAD_FAST 1 ( l )					  
							      52 LOAD_FAST 0 ( arr )					    50 LOAD_CONST 1 ( 0 )					  
							      54 LOAD_FAST 4 ( mid )					    52 BINARY_SUBSCR						  
							      56 LOAD_CONST 2 ( 1 )					    54 LOAD_CONST 6 ( 1 )					  
							      58 BINARY_SUBTRACT					    56 BINARY_SUBSCR						  
							      60 BINARY_SUBSCR						    58 LOAD_CONST 7 ( 1 )					  
							      62 LOAD_FAST 3 ( x )					    60 COMPARE_OP 2 ( == )					  
							      64 COMPARE_OP 2 ( == )					    62 POP_JUMP_IF_FALSE 52					  
							      66 POP_JUMP_IF_FALSE 76					    								  
							      								    74 64 LOAD_FAST 1 ( l )					  
							      6 68 LOAD_FAST 4 ( mid )					    66 LOAD_CONST 1 ( 0 )					  
							      70 LOAD_CONST 2 ( 1 )					    68 BINARY_SUBSCR						  
							      72 BINARY_SUBTRACT					    70 LOAD_CONST 8 ( 1 )					  
							      74 RETURN_VALUE						    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 80					  
							      7 >> 76 LOAD_FAST 4 ( mid )				    								  
							      78 LOAD_FAST 2 ( r )					    75 76 LOAD_FAST 1 ( l )					  
							      80 COMPARE_OP 0 ( < )					    78 LOAD_CONST 1 ( 0 )					  
							      82 POP_JUMP_IF_FALSE 108					    80 BINARY_SUBSCR						  
							      84 LOAD_FAST 0 ( arr )					    82 LOAD_CONST 9 ( 1 )					  
							      86 LOAD_FAST 4 ( mid )					    84 BINARY_SUBSCR						  
							      88 LOAD_CONST 2 ( 1 )					    86 LOAD_CONST 10 ( 1 )					  
							      90 BINARY_ADD						    88 COMPARE_OP 2 ( == )					  
							      92 BINARY_SUBSCR						    90 POP_JUMP_IF_FALSE 80					  
							      94 LOAD_FAST 3 ( x )					    								  
							      96 COMPARE_OP 2 ( == )					    76 92 LOAD_FAST 1 ( l )					  
							      98 POP_JUMP_IF_FALSE 108					    94 LOAD_CONST 1 ( 0 )					  
							      								    96 BINARY_SUBSCR						  
							      8 100 LOAD_FAST 4 ( mid )					    98 LOAD_CONST 11 ( 1 )					  
							      102 LOAD_CONST 2 ( 1 )					    100 COMPARE_OP 2 ( == )					  
							      104 BINARY_ADD						    102 POP_JUMP_IF_FALSE 80					  
							      106 RETURN_VALUE						    								  
							      								    77 104 LOAD_FAST 1 ( l )					  
							      9 >> 108 LOAD_FAST 0 ( arr )				    106 LOAD_CONST 1 ( 0 )					  
							      110 LOAD_FAST 4 ( mid )					    108 BINARY_SUBSCR						  
							      112 BINARY_SUBSCR						    110 LOAD_CONST 12 ( 1 )					  
							      114 LOAD_FAST 3 ( x )					    112 BINARY_SUBSCR						  
							      116 COMPARE_OP 4 ( > )					    114 LOAD_CONST 13 ( 1 )					  
							      118 POP_JUMP_IF_FALSE 138					    116 BINARY_SUBSCR						  
							      								    118 LOAD_CONST 14 ( 1 )					  
							      10 120 LOAD_GLOBAL 1 ( binarySearch )			    120 BINARY_SUBSCR						  
							      122 LOAD_FAST 0 ( arr )					    122 LOAD_CONST 15 ( 1 )					  
							      124 LOAD_FAST 1 ( l )					    124 BINARY_SUBSCR						  
							      126 LOAD_FAST 4 ( mid )					    126 LOAD_CONST 16 ( 1 )					  
							      128 LOAD_CONST 1 ( 2 )					    128 BINARY_SUBSCR						  
							      130 BINARY_SUBTRACT					    130 LOAD_CONST 17 ( 1 )					  
							      132 LOAD_FAST 3 ( x )					    132 BINARY_SUBSCR						  
							      134 CALL_FUNCTION 4					    134 LOAD_CONST 18 ( 1 )					  
							      136 RETURN_VALUE						    136 BINARY_SUBSCR						  
							      								    138 LOAD_CONST 19 ( 1 )					  
							      11 >> 138 LOAD_GLOBAL 1 ( binarySearch )			    140 COMPARE_OP 2 ( == )					  
							      140 LOAD_FAST 0 ( arr )					    142 POP_JUMP_IF_FALSE 146					  
							      142 LOAD_FAST 4 ( mid )					    								  
							      144 LOAD_CONST 1 ( 2 )					    78 144 LOAD_FAST 1 ( l )					  
							      146 BINARY_ADD						    146 LOAD_CONST 16 ( 1 )					  
							      148 LOAD_FAST 2 ( r )					    148 BINARY_SUBSCR						  
							      150 LOAD_FAST 3 ( x )					    150 LOAD_CONST 17 ( 1 )					  
							      152 CALL_FUNCTION 4					    152 BINARY_SUBSCR						  
							      154 RETURN_VALUE						    154 LOAD_CONST 18 ( 1 )					  
							      								    156 BINARY_SUBSCR						  
							      12 >> 156 LOAD_CONST 3 ( - 1 )				    158 LOAD_CONST 19 ( 1 )					  
							      158 RETURN_VALUE NEW_LINE					    160 BINARY_SUBSCR						  
							      								    162 LOAD_CONST 20 ( 1 )					  
							      								    164 BINARY_SUBSCR						  
							      								    166 LOAD_CONST 21 ( 1 )					  
							      								    168 BINARY_SUBSCR						  
							      								    170 LOAD_CONST 21 ( 1 ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME      FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME	    FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME	  FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME
--							      --							    --								  --
def search ( arr , low , high ) :			      Disassembly of <code object search at 0x7fbac<<unk>> d540, fi Disassembly of <code object search at 0x7f816a6e4b70, file "< script_not_found : None
    if low > high :					      2 0 LOAD_FAST 1 ( low )					    20 0 LOAD_FAST 0 ( arr )					  
	return None					      2 LOAD_FAST 2 ( high )					    2 LOAD_CONST 1 ( 0 )					  
    if low == high :					      4 COMPARE_OP 4 ( > )					    4 BINARY_SUBSCR						  
	return arr [ low ]				      6 POP_JUMP_IF_FALSE 12					    6 STORE_FAST 1 ( low )					  
    mid = ( low + high ) / 2 ;				      								    								  
    if mid % 2 == 0 :					      3 8 LOAD_CONST 0 ( None )					    21 8 LOAD_FAST 1 ( low )					  
	if arr [ mid ] == arr [ mid + 1 ] :		      10 RETURN_VALUE						    10 LOAD_CONST 2 ( 1 )					  
	    return search ( arr , mid + 2 , high )	      								    12 BINARY_SUBSCR						  
	else :						      4 >> 12 LOAD_FAST 1 ( low )				    14 STORE_FAST 2 ( low )					  
	    return search ( arr , low , mid )		      14 LOAD_FAST 2 ( high )					    								  
    else :						      16 COMPARE_OP 2 ( == )					    22 16 LOAD_FAST 1 ( low )					  
	if arr [ mid ] == arr [ mid - 1 ] :		      18 POP_JUMP_IF_FALSE 28					    18 LOAD_CONST 3 ( 1 )					  
	    return search ( arr , mid + 1 , high )	      								    20 BINARY_SUBSCR						  
	else :						      5 20 LOAD_FAST 0 ( arr )					    22 STORE_FAST 3 ( low )					  
	    return search ( arr , low , mid - 1 )	      22 LOAD_FAST 1 ( low )					    								  
							      24 BINARY_SUBSCR						    23 24 LOAD_FAST 1 ( low )					  
							      26 RETURN_VALUE						    26 LOAD_CONST 2 ( 1 )					  
							      								    28 BINARY_SUBSCR						  
							      6 >> 28 LOAD_FAST 1 ( low )				    30 LOAD_CONST 4 ( 2 )					  
							      30 LOAD_FAST 2 ( high )					    32 BINARY_SUBSCR						  
							      32 BINARY_ADD						    34 STORE_FAST 4 ( low )					  
							      34 LOAD_CONST 1 ( 2 )					    								  
							      36 BINARY_TRUE_DIVIDE					    24 36 LOAD_FAST 1 ( low )					  
							      38 STORE_FAST 3 ( mid )					    38 LOAD_CONST 2 ( 1 )					  
							      								    40 BINARY_SUBSCR						  
							      7 40 LOAD_FAST 3 ( mid )					    42 STORE_FAST 5 ( low )					  
							      42 LOAD_CONST 1 ( 2 )					    								  
							      44 BINARY_MODULO						    25 44 LOAD_FAST 1 ( low )					  
							      46 LOAD_CONST 2 ( 0 )					    46 LOAD_CONST 2 ( 1 )					  
							      48 COMPARE_OP 2 ( == )					    48 BINARY_SUBSCR						  
							      50 POP_JUMP_IF_FALSE 102					    50 STORE_FAST 6 ( low )					  
							      								    								  
							      8 52 LOAD_FAST 0 ( arr )					    26 52 LOAD_FAST 1 ( low )					  
							      54 LOAD_FAST 3 ( mid )					    54 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 0 ( arr )					    58 STORE_FAST 7 ( low )					  
							      60 LOAD_FAST 3 ( mid )					    								  
							      62 LOAD_CONST 3 ( 1 )					    27 60 LOAD_FAST 1 ( low )					  
							      64 BINARY_ADD						    62 LOAD_FAST 2 ( low )					  
							      66 BINARY_SUBSCR						    64 LOAD_FAST 3 ( low )					  
							      68 COMPARE_OP 2 ( == )					    66 BINARY_SUBTRACT						  
							      70 POP_JUMP_IF_FALSE 88					    68 LOAD_FAST 4 ( low )					  
							      								    70 BINARY_SUBTRACT						  
							      9 72 LOAD_GLOBAL 0 ( search )				    72 BINARY_SUBTRACT						  
							      74 LOAD_FAST 0 ( arr )					    74 STORE_FAST 8 ( low )					  
							      76 LOAD_FAST 3 ( mid )					    								  
							      78 LOAD_CONST 1 ( 2 )					    28 76 LOAD_FAST 1 ( low )					  
							      80 BINARY_ADD						    78 LOAD_FAST 4 ( low )					  
							      82 LOAD_FAST 2 ( high )					    80 BINARY_SUBTRACT						  
							      84 CALL_FUNCTION 3					    82 LOAD_FAST 2 ( low )					  
							      86 RETURN_VALUE						    84 BINARY_SUBTRACT						  
							      								    86 LOAD_FAST 5 ( low )					  
							      11 >> 88 LOAD_GLOBAL 0 ( search )				    88 BINARY_SUBTRACT						  
							      90 LOAD_FAST 0 ( arr )					    90 LOAD_FAST 6 ( low )					  
							      92 LOAD_FAST 1 ( low )					    92 BINARY_SUBTRACT						  
							      94 LOAD_FAST 3 ( mid )					    94 BINARY_SUBTRACT						  
							      96 CALL_FUNCTION 3					    96 LOAD_FAST 7 ( low )					  
							      98 RETURN_VALUE						    98 BINARY_SUBTRACT						  
							      100 JUMP_FORWARD 52 ( to 154 )				    100 BINARY_SUBTRACT						  
							      								    102 LOAD_FAST 8 ( low )					  
							      13 >> 102 LOAD_FAST 0 ( arr )				    104 BINARY_SUBTRACT						  
							      104 LOAD_FAST 3 ( mid )					    106 LOAD_FAST 6 ( high )					  
							      106 BINARY_SUBSCR						    108 BINARY_SUBTRACT						  
							      108 LOAD_FAST 0 ( arr )					    110 BINARY_SUBTRACT						  
							      110 LOAD_FAST 3 ( mid )					    112 BINARY_SUBTRACT						  
							      112 LOAD_CONST 3 ( 1 )					    114 BINARY_SUBTRACT						  
							      114 BINARY_SUBTRACT					    116 LOAD_FAST 7 ( low )					  
							      116 BINARY_SUBSCR						    118 BINARY_SUBTRACT						  
							      118 COMPARE_OP 2 ( == )					    120 BINARY_SUBTRACT						  
							      120 POP_JUMP_IF_FALSE 138					    122 LOAD_FAST 8 ( low )					  
							      								    124 BINARY_SUBTRACT						  
							      14 122 LOAD_GLOBAL 0 ( search )				    126 BINARY_SUBTRACT						  
							      124 LOAD_FAST 0 ( arr )					    128 BINARY_SUBTRACT						  
							      126 LOAD_FAST 3 ( mid )					    130 LOAD_FAST 7 ( low )					  
							      128 LOAD_CONST 3 ( 1 )					    132 BINARY_SUBTRACT						  
							      130 BINARY_ADD						    134 BINARY_SUBTRACT						  
							      132 LOAD_FAST 2 ( high )					    136 BINARY_SUBTRACT						  
							      134 CALL_FUNCTION 3					    138 LOAD_FAST 8 ( low )					  
							      136 RETURN_VALUE						    140 BINARY_SUBTRACT						  
							      								    142 BINARY_SUBTRACT						  
							      16 >> 138 LOAD_GLOBAL 0 ( search )			    144 LOAD_FAST 7 ( low )					  
							      140 LOAD_FAST 0 ( arr )					    146 BINARY_SUBTRACT						  
							      142 LOAD_FAST 1 ( low )					    148 BINARY_SUBTRACT						  
							      144 LOAD_FAST 3 ( mid )					    150 BINARY_SUBTRACT						  
							      146 LOAD_CONST 3 ( 1 )					    152 BINARY_SUBTRACT						  
							      148 BINARY_SUBTRACT					    154 BINARY_SUBTRACT						  
							      150 CALL_FUNCTION 3					    156 RETURN_VALUE						  
							      152 RETURN_VALUE						    NEW_LINE							  
							      >> 154 LOAD_CONST 0 ( None )				    								  
							      156 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH
--							      --							    --								  --
def pairInSortedRotated ( arr , n , x ) :		      Disassembly of <code object pairInSortedRotated at 0x7fbac0e8 Disassembly of <code object pairInSortedRotated at 0x7f816a6e error : Traceback (most recent call last):   File
    for i in range ( 0 , n - 1 ) :			      2 0 SETUP_LOOP 44 ( to 46 )				    26 0 SETUP_LOOP 22 ( to 24 )				  "XLM/dis_script.py", line 59, in <module>	for
	if ( arr [ i ] > arr [ i + 1 ] ) :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_FAST 0 ( arr )					  item in run_dis_script():   File "XLM/dis_script.p
	    break ;					      4 LOAD_CONST 1 ( 0 )					    4 GET_ITER							  y", line 54, in run_dis_script     hyp_co = mco.to
    l = ( i + 1 ) % n					      6 LOAD_FAST 1 ( n )					    >> 6 FOR_ITER 14 ( to 22 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    r = i						      8 LOAD_CONST 2 ( 1 )					    8 STORE_FAST 1 ( n )					  assembler.py", line 81, in to_co     co_consts.app
    while ( l != r ) :					      10 BINARY_SUBTRACT					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	if ( arr [ l ] + arr [ r ] == x ) :		      12 CALL_FUNCTION 2					    27 10 LOAD_FAST 1 ( n )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    return True ;				      14 GET_ITER						    12 LOAD_CONST 1 ( 1 )					  co	 self.co_cellvars, ValueError: code: varname
	if ( arr [ l ] + arr [ r ] < x ) :		      >> 16 FOR_ITER 26 ( to 44 )				    14 INPLACE_ADD						  s is too small
	    l = ( l + 1 ) % n ;				      18 STORE_FAST 3 ( i )					    16 STORE_FAST 1 ( n )					  
	else :						      								    								  
	    r = ( n + r - 1 ) % n ;			      3 20 LOAD_FAST 0 ( arr )					    28 18 LOAD_FAST 1 ( n )					  
    return False ;					      22 LOAD_FAST 3 ( i )					    20 LOAD_CONST 2 ( 1 )					  
							      24 BINARY_SUBSCR						    22 INPLACE_ADD						  
							      26 LOAD_FAST 0 ( arr )					    24 STORE_FAST 1 ( n )					  
							      28 LOAD_FAST 3 ( i )					    26 JUMP_ABSOLUTE 6						  
							      30 LOAD_CONST 2 ( 1 )					    >> 28 POP_BLOCK						  
							      32 BINARY_ADD						    >> 30 LOAD_CONST 3 ( None )					  
							      34 BINARY_SUBSCR						    32 RETURN_VALUE						  
							      36 COMPARE_OP 4 ( > )					    NEW_LINE							  
							      38 POP_JUMP_IF_FALSE 16					    								  
							      								    								  
							      4 40 BREAK_LOOP						    								  
							      42 JUMP_ABSOLUTE 16					    								  
							      >> 44 POP_BLOCK						    								  
							      								    								  
							      5 >> 46 LOAD_FAST 3 ( i )					    								  
							      48 LOAD_CONST 2 ( 1 )					    								  
							      50 BINARY_ADD						    								  
							      52 LOAD_FAST 1 ( n )					    								  
							      54 BINARY_MODULO						    								  
							      56 STORE_FAST 4 ( l )					    								  
							      								    								  
							      6 58 LOAD_FAST 3 ( i )					    								  
							      60 STORE_FAST 5 ( r )					    								  
							      								    								  
							      7 62 SETUP_LOOP 86 ( to 150 )				    								  
							      >> 64 LOAD_FAST 4 ( l )					    								  
							      66 LOAD_FAST 5 ( r )					    								  
							      68 COMPARE_OP 3 ( != )					    								  
							      70 POP_JUMP_IF_FALSE 148					    								  
							      								    								  
							      8 72 LOAD_FAST 0 ( arr )					    								  
							      74 LOAD_FAST 4 ( l )					    								  
							      76 BINARY_SUBSCR						    								  
							      78 LOAD_FAST 0 ( arr )					    								  
							      80 LOAD_FAST 5 ( r )					    								  
							      82 BINARY_SUBSCR						    								  
							      84 BINARY_ADD						    								  
							      86 LOAD_FAST 2 ( x )					    								  
							      88 COMPARE_OP 2 ( == )					    								  
							      90 POP_JUMP_IF_FALSE 96					    								  
							      								    								  
							      9 92 LOAD_CONST 3 ( True )				    								  
							      94 RETURN_VALUE						    								  
							      								    								  
							      10 >> 96 LOAD_FAST 0 ( arr )				    								  
							      98 LOAD_FAST 4 ( l )					    								  
							      100 BINARY_SUBSCR						    								  
							      102 LOAD_FAST 0 ( arr )					    								  
							      104 LOAD_FAST 5 ( r )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 BINARY_ADD						    								  
							      110 LOAD_FAST 2 ( x )					    								  
							      112 COMPARE_OP 0 ( < )					    								  
							      114 POP_JUMP_IF_FALSE 130					    								  
							      								    								  
							      11 116 LOAD_FAST 4 ( l )					    								  
							      118 LOAD_CONST 2 ( 1 )					    								  
							      120 BINARY_ADD						    								  
							      122 LOAD_FAST 1 ( n )					    								  
							      124 BINARY_MODULO						    								  
							      126 STORE_FAST 4 ( l )					    								  
							      128 JUMP_ABSOLUTE 64					    								  
							      								    								  
							      13 >> 130 LOAD_FAST 1 ( n )				    								  
							      132 LOAD_FAST 5 ( r )					    								  
							      134 BINARY_ADD						    								  
							      136 LOAD_CONST 2 ( 1 )					    								  
							      138 BINARY_SUBTRACT					    								  
							      140 LOAD_FAST 1 ( n )					    								  
							      142 BINARY_MODULO						    								  
							      144 STORE_FAST 5 ( r )					    								  
							      146 JUMP_ABSOLUTE 64					    								  
							      >> 148 POP_BLOCK						    								  
							      								    								  
							      14 >> 150 LOAD_CONST 4 ( False )				    								  
							      152 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
