========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
Disassembly of <code object addOne at 0x7fbac<<unk>> d540, fi def addOne ( x ) :					    def addOne ( x ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( x )					      	  return ( - ( ~ x ) ) ;				    	x = x * y						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 UNARY_INVERT						      								    	UNARY_INVERT = x * y					  /eval_scripts/dis_sa-python_sa.test/ADD_1_TO_A_GIV
4 UNARY_NEGATIVE					      								    	UNARY_INVERT = x * y					  EN_NUMBER_1.py", line 46, in <module>	    if f_fil
6 RETURN_VALUE NEW_LINE					      								    	UNARY_INVERT = x * y					  led(*parameters_set) == f_gold(*parameters_set):
							      								    	UNARY_INVERT = x * y					   File "/home/ubuntu/TransCoder/models/eval/bt/152w
							      								    	UNARY_INVERT = x * y					  65bl69/eval_scripts/dis_sa-python_sa.test/ADD_1_TO
							      								    	return x						  _A_GIVEN_NUMBER_1.py", line 22, in f_filled	  x
							      								    								  = x * y NameError: name 'y' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
Disassembly of <code object areaSquare at 0x7fbac0e8bc90, fil def areaSquare ( side ) :					    def areaSquare ( side ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( side )				      	  area = side * side					    	return side ( side ( side ( side ) ) )			  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( side )					      	  return area						    								  /eval_scripts/dis_sa-python_sa.test/PROGRAM_AREA_S
4 BINARY_MULTIPLY					      								    								  QUARE.py", line 41, in <module>     if f_filled(*p
6 STORE_FAST 1 ( area )					      								    								  arameters_set) == f_gold(*parameters_set):   File
							      								    								  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
3 8 LOAD_FAST 1 ( area )				      								    								  /eval_scripts/dis_sa-python_sa.test/PROGRAM_AREA_S
10 RETURN_VALUE NEW_LINE				      								    								  QUARE.py", line 23, in f_filled     return side (
							      								    								  side ( side ( side ) ) ) TypeError: 'int' object i
							      								    								  s not callable
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
Disassembly of <code object circumference at 0x7fbac0e8bc90,  def circumference ( r ) :					    def circumference ( r ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * PI * r )					    	""" STRNEWLINE SPACETOKEN PI SPACETOKEN PI SPACETOKEN PI  
2 LOAD_GLOBAL 0 ( PI )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( r )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
Disassembly of <code object intersection at 0x7fbac<<unk>> d5 def intersection ( n ) :					    def intersection ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return n * ( n - 1 ) ;				    	return n % ( n % 2 )					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( n )					      								    								  /eval_scripts/dis_sa-python_sa.test/MAXIMUM_POINTS
4 LOAD_CONST 1 ( 1 )					      								    								  _INTERSECTION_N_CIRCLES.py", line 40, in <module>
6 BINARY_SUBTRACT					      								    								      if f_filled(*parameters_set) == f_gold(*parame
8 BINARY_MULTIPLY					      								    								  ters_set):   File "/home/ubuntu/TransCoder/models/
10 RETURN_VALUE NEW_LINE				      								    								  eval/bt/152w65bl69/eval_scripts/dis_sa-python_sa.t
							      								    								  est/MAXIMUM_POINTS_INTERSECTION_N_CIRCLES.py", lin
							      								    								  e 22, in f_filled	return n % ( n % 2 ) ZeroDiv
							      								    								  isionError: integer division or modulo by zero
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUM<unk> BED_CIRCLE			      AREA_SQUARE_CIRCUM<unk> BED_CIRCLE			    AREA_SQUARE_CIRCUM<unk> BED_CIRCLE				  AREA_SQUARE_CIRCUM<unk> BED_CIRCLE
--							      --							    --								  --
Disassembly of <code object find_Area at 0x7fbac0e8bc90, file def find_Area ( r ) :					    def find_Area ( r , r , r , r , r , r , r , r , r , r , r , r script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * r * r )					    r , r , r , r , r , r , r , r , r , r , r , r )		  
2 LOAD_FAST 0 ( r )					      								    r , r = r r r , r , r , r , r , r , r , r , r )		  
4 BINARY_MULTIPLY					      								    return r							  
6 LOAD_FAST 0 ( r )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CASSINIS_IDENTITY					      CASSINIS_IDENTITY						    CASSINIS_IDENTITY						  CASSINIS_IDENTITY
--							      --							    --								  --
Disassembly of <code object cassini at 0x7fbac<<unk>> d540, f def cassini ( n ) :					    def cassini ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return - 1 if ( n & 1 ) else 1			    	n = n [ n : n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 1 )					      								    	return n - n						  /eval_scripts/dis_sa-python_sa.test/CASSINIS_IDENT
4 BINARY_AND						      								    								  ITY.py", line 41, in <module>	    if f_filled(*par
6 POP_JUMP_IF_FALSE 12					      								    								  ameters_set) == f_gold(*parameters_set):   File "/
8 LOAD_CONST 2 ( - 1 )					      								    								  home/ubuntu/TransCoder/models/eval/bt/152w65bl69/e
10 RETURN_VALUE						      								    								  val_scripts/dis_sa-python_sa.test/CASSINIS_IDENTIT
>> 12 LOAD_CONST 1 ( 1 )				      								    								  Y.py", line 22, in f_filled	  n = n [ n : n ] Ty
14 RETURN_VALUE NEW_LINE				      								    								  peError: 'int' object is not subscriptable
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
Disassembly of <code object Circumference at 0x7fbac0e89d20,  def Circumference ( a ) :					    def Circumference ( a , b ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 4 )					      	  return ( 4 * a )					    	return ( a * b )					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( a )					      								    								  /eval_scripts/dis_sa-python_sa.test/PYTHON_PROGRAM
4 BINARY_MULTIPLY					      								    								  _FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE.py"
6 RETURN_VALUE NEW_LINE					      								    								  , line 40, in <module>     if f_filled(*parameters
							      								    								  _set) == f_gold(*parameters_set): TypeError: f_fil
							      								    								  led() missing 1 required positional argument: 'b'
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object kthgroupsum at 0x7fbac0e8bc90, fi def kthgroupsum ( k ) :					    def kthgroupsum ( k , k ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( k )					      	  return k * k * k					    	return k [ k ]						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( k )					      								    								  /SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1.py", line 2
4 BINARY_MULTIPLY					      								    								  1	def f_filled ( k , k ) :     ^ SyntaxError:
6 LOAD_FAST 0 ( k )					      								    								  duplicate argument 'k' in function definition
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
Disassembly of <code object isEven at 0x7fbac<<unk>> d540, fi def isEven ( n ) :					    def isEven ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return ( n % 2 == 0 )					    	n = n [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 2 )					      								    	n = n [ 1 : 2 ]						  /eval_scripts/dis_sa-python_sa.test/CHECK_WHETHER_
4 BINARY_MODULO						      								    	return n % n						  GIVEN_NUMBER_EVEN_ODD.py", line 42, in <module>
6 LOAD_CONST 2 ( 0 )					      								    								    if f_filled(*parameters_set) == f_gold(*paramete
8 COMPARE_OP 2 ( == )					      								    								  rs_set):   File "/home/ubuntu/TransCoder/models/ev
10 RETURN_VALUE NEW_LINE				      								    								  al/bt/152w65bl69/eval_scripts/dis_sa-python_sa.tes
							      								    								  t/CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD.py", line 22
							      								    								  , in f_filled	    n = n [ 0 ] TypeError: 'int' obj
							      								    								  ect is not subscriptable
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac<<unk>> de40, fil def check ( n ) :						    def check ( 0x70x7acageageage1 , 1 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1162261467 )				      	  return 1162261467 % n == 0				    	return 1162262261467 ( )				  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( n )					      								    								  /FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT.py", line
4 BINARY_MODULO						      								    								  21	 def f_filled ( 0x70x7acageageage1 , 1 ) :
6 LOAD_CONST 2 ( 0 )					      								    								  		       ^ SyntaxError: invalid syntax
8 COMPARE_OP 2 ( == )					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_TO_MULTIPLY_WITH_7			      EFFICIENT_WAY_TO_MULTIPLY_WITH_7				    EFFICIENT_WAY_TO_MULTIPLY_WITH_7				  EFFICIENT_WAY_TO_MULTIPLY_WITH_7
--							      --							    --								  --
Disassembly of <code object multiplyBySeven at 0x7fbac<<unk>> def multiplyBySeven ( n ) :				    def multitest_find_test_find_BySeven ( n ) :		  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  return ( ( n << 3 ) - n )				    	assert n == n						  
2 LOAD_CONST 1 ( 3 )					      								    	assert n == n						  
4 BINARY_LSHIFT						      								    	assert n == n						  
6 LOAD_FAST 0 ( n )					      								    	assert n == n						  
8 BINARY_SUBTRACT					      								    	assert n == n						  
10 RETURN_VALUE NEW_LINE				      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
							      								    	assert n == n						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
Disassembly of <code object getModulo at 0x7fbac<<unk>> de40, def getModulo ( n , d ) :					    def getModulo ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return ( n & ( d - 1 ) )				    	n = n [ n : n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( d )					      								    	return n % n						  /eval_scripts/dis_sa-python_sa.test/COMPUTE_MODULU
4 LOAD_CONST 1 ( 1 )					      								    								  S_DIVISION_BY_A_POWER_OF_2_NUMBER.py", line 41, in
6 BINARY_SUBTRACT					      								    								   <module>	if f_filled(*parameters_set) == f_go
8 BINARY_AND						      								    								  ld(*parameters_set): TypeError: f_filled() takes 1
10 RETURN_VALUE NEW_LINE				      								    								   positional argument but 2 were given
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object rangeGCD at 0x7fbac<<unk>> de40,  def rangeGCD ( n , m ) :					    def rangeGCD ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return n if ( n == m ) else 1				    	return n % 2						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( m )					      								    								  /eval_scripts/dis_sa-python_sa.test/GCD_ELEMENTS_G
4 COMPARE_OP 2 ( == )					      								    								  IVEN_RANGE.py", line 40, in <module>	   if f_fill
6 POP_JUMP_IF_FALSE 12					      								    								  ed(*parameters_set) == f_gold(*parameters_set): Ty
8 LOAD_FAST 0 ( n )					      								    								  peError: f_filled() takes 1 positional argument bu
10 RETURN_VALUE						      								    								  t 2 were given
>> 12 LOAD_CONST 1 ( 1 )				      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_CIRCUM<unk> BED_CIRCLE_SQUARE			      AREA_CIRCUM<unk> BED_CIRCLE_SQUARE			    AREA_CIRCUM<unk> BED_CIRCLE_SQUARE				  AREA_CIRCUM<unk> BED_CIRCLE_SQUARE
--							      --							    --								  --
Disassembly of <code object areacircumscribed at 0x7fbac0e8bc def areacircumscribed ( a ) :				    def areacircumbed ( a , b ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  return ( a * a * ( PI / 2 ) )				    	if a == b :						  
2 LOAD_FAST 0 ( a )					      								    	    return 0						  
4 BINARY_MULTIPLY					      								    	elif a == b :						  
6 LOAD_GLOBAL 0 ( PI )					      								    	    return 0						  
8 LOAD_CONST 1 ( 2 )					      								    	else :							  
10 BINARY_TRUE_DIVIDE					      								    	    return PI						  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
Disassembly of <code object slope at 0x7fbac<<unk>> de40, fil def slope ( x1 , y1 , x2 , y2 ) :				    def slope ( x1 , y1 , y1 , x2 , x2 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( float )				      	  return ( float ) ( y2 - y1 ) / ( x2 - x1 )		    	return float ( x1 )					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 3 ( y2 )					      								    								  /PROGRAM_FIND_SLOPE_LINE.py", line 21	    def f_fi
4 LOAD_FAST 1 ( y1 )					      								    								  lled ( x1 , y1 , y1 , x2 , x2 ) :	^ SyntaxErro
6 BINARY_SUBTRACT					      								    								  r: duplicate argument 'y1' in function definition
8 CALL_FUNCTION 1					      								    								  
10 LOAD_FAST 2 ( x2 )					      								    								  
12 LOAD_FAST 0 ( x1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
Disassembly of <code object yMod at 0x7fbac<<unk>> d540, file def yMod ( y , x ) :					    def yMod ( y , x , y , b , c ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( y )					      	  return ( y % pow ( 2 , x ) )				    	return pow ( y , x )					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_GLOBAL 0 ( pow )					      								    								  /FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X.py", line
4 LOAD_CONST 1 ( 2 )					      								    								   21	  def f_filled ( y , x , y , b , c ) :	   ^
6 LOAD_FAST 1 ( x )					      								    								   SyntaxError: duplicate argument 'y' in function d
8 CALL_FUNCTION 2					      								    								  efinition
10 BINARY_MODULO					      								    								  
12 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
Disassembly of <code object pentagonalNum at 0x7fbac<<unk>> d def pentagonalNum ( n ) :					    def pentagonalNum ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 3 )					      	  return ( 3 * n * n - n ) / 2				    	return n - 3						  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 LOAD_CONST 2 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
Disassembly of <code object oppositeSigns at 0x7fbac<<unk>> d def oppositeSigns ( x , y ) :				    def oppositeSigns ( x , y , y , K ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  return ( ( x ^ y ) < 0 ) ;				    	if x < 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( y )					      								    	    return x						  /DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS.py", l
4 BINARY_XOR						      								    	elif x < 0 :						  ine 21     def f_filled ( x , y , y , K ) :	  ^
6 LOAD_CONST 1 ( 0 )					      								    	    return x						  SyntaxError: duplicate argument 'y' in function de
8 COMPARE_OP 0 ( < )					      								    	elif x < 0 :						  finition
10 RETURN_VALUE NEW_LINE				      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x < 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
							      								    	    return x						  
							      								    	elif x > 0 :						  
-							      -								    	    return x-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
Disassembly of <code object compute_average at 0x7fbac<<unk>> def compute_average ( a , b ) :				    def compute_average ( a , b ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( floor )				      	  return floor ( ( a + b ) / 2 )			    	return floor ( a , b )					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( a )					      								    								  /eval_scripts/dis_sa-python_sa.test/COMPUTE_AVERAG
4 LOAD_FAST 1 ( b )					      								    								  E_TWO_NUMBERS_WITHOUT_OVERFLOW.py", line 42, in <m
6 BINARY_ADD						      								    								  odule>     if f_filled(*parameters_set) == f_gold(
8 LOAD_CONST 1 ( 2 )					      								    								  *parameters_set):   File "/home/ubuntu/TransCoder/
10 BINARY_TRUE_DIVIDE					      								    								  models/eval/bt/152w65bl69/eval_scripts/dis_sa-pyth
12 CALL_FUNCTION 1					      								    								  on_sa.test/COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVE
14 RETURN_VALUE NEW_LINE				      								    								  RFLOW.py", line 24, in f_filled     return floor (
							      								    								   a , b ) TypeError: floor() takes exactly one argu
							      								    								  ment (2 given)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
Disassembly of <code object reverse at 0x7fbac0e89d20, file " def reverse ( string ) :					    def reverse ( string ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( string )				      	  string = string [ : : - 1 ]				    	return string.replace ( '-' , '-' )			  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 0 ( None )					      	  return string						    								  /eval_scripts/dis_sa-python_sa.test/STACK_SET_3_RE
4 LOAD_CONST 0 ( None )					      								    								  VERSE_STRING_USING_STACK.py", line 41, in <module>
6 LOAD_CONST 1 ( - 1 )					      								    								       if f_filled(*parameters_set) == f_gold(*param
8 BUILD_SLICE 3						      								    								  eters_set):	File "/home/ubuntu/TransCoder/models
10 BINARY_SUBSCR					      								    								  /eval/bt/152w65bl69/eval_scripts/dis_sa-python_sa.
12 STORE_FAST 0 ( string )				      								    								  test/STACK_SET_3_REVERSE_STRING_USING_STACK.py", l
							      								    								  ine 23, in f_filled	  return string.replace ( '-
3 14 LOAD_FAST 0 ( string )				      								    								  ' , '-' ) AttributeError: 'list' object has no att
16 RETURN_VALUE NEW_LINE				      								    								  ribute 'replace'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_FACTORIALS_TWO_NUMBERS				      GCD_FACTORIALS_TWO_NUMBERS				    GCD_FACTORIALS_TWO_NUMBERS					  GCD_FACTORIALS_TWO_NUMBERS
--							      --							    --								  --
Disassembly of <code object gcdOfFactorial at 0x7fbac<<unk>>  def gcdOfFactorial ( m , n ) :				    def gcdOfOfMovie ( m , n ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.factorial ( min ( m , n ) )		    	return math.factorial ( n * n )				  
2 LOAD_METHOD 1 ( factorial )				      								    								  
4 LOAD_GLOBAL 2 ( min )					      								    								  
6 LOAD_FAST 0 ( m )					      								    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 2					      								    								  
12 CALL_METHOD 1					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_NUMBER_USING_LOG				      SQUARE_ROOT_NUMBER_USING_LOG				    SQUARE_ROOT_NUMBER_USING_LOG				  SQUARE_ROOT_NUMBER_USING_LOG
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7fbac0e89d20, fil def squareRoot ( n ) :					    def squareRoot ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( pow )				      	  return pow ( 2 , 0.5 * math.log2 ( n ) )		    	return pow ( pow ( n * n ) , pow ( n * n ) )		  
2 LOAD_CONST 1 ( 2 )					      								    								  
4 LOAD_CONST 2 ( 0.5 )					      								    								  
6 LOAD_GLOBAL 1 ( math )				      								    								  
8 LOAD_METHOD 2 ( log2 )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 CALL_METHOD 1					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
Disassembly of <code object numberOfSticks at 0x7fbac0e8bc90, def numberOfSticks ( x ) :				    def numberOfSticks ( x , y , b , b ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 3 )					      	  return ( 3 * x * ( x + 1 ) ) / 2			    	return 3 * x * y					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( x )					      								    								  /TRIANGULAR_MATCHSTICK_NUMBER.py", line 21	 def
4 BINARY_MULTIPLY					      								    								   f_filled ( x , y , b , b ) :	    ^ SyntaxError: d
6 LOAD_FAST 0 ( x )					      								    								  uplicate argument 'b' in function definition
8 LOAD_CONST 2 ( 1 )					      								    								  
10 BINARY_ADD						      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_CONST 3 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT				      POSITION_OF_RIGHTMOST_SET_BIT				    POSITION_OF_RIGHTMOST_SET_BIT				  POSITION_OF_RIGHTMOST_SET_BIT
--							      --							    --								  --
Disassembly of <code object getFirstSetBitPos at 0x7fbac0e8bc def getFirstSetBitPos ( n ) :				    def getFirstSetBitPos ( n ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.log2 ( n & - n ) + 1			    	math.log2 ( n )						  
2 LOAD_METHOD 1 ( log2 )				      								    								  
4 LOAD_FAST 0 ( n )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 UNARY_NEGATIVE					      								    								  
10 BINARY_AND						      								    								  
12 CALL_METHOD 1					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 BINARY_ADD						      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM	      PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		    PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		  PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM
--							      --							    --								  --
Disassembly of <code object findVolume at 0x7fbac<<unk>> de40 def findVolume ( l , b , h ) :				    def findVolume ( l ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( l )					      	  return ( ( l * b * h ) / 2 )				    	l = l [ 0 ]						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( b )					      								    	l = l [ 1 : ]						  /PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM.
4 BINARY_MULTIPLY					      								    	l = l [ 2 : ]						  py", line 53	   l l = l [ 15 : ]	  ^ SyntaxEr
6 LOAD_FAST 2 ( h )					      								    	l = l [ 3 : ]						  ror: invalid syntax
8 BINARY_MULTIPLY					      								    	l = l [ 2 : ]						  
10 LOAD_CONST 1 ( 2 )					      								    	l = l [ 4 : ]						  
12 BINARY_TRUE_DIVIDE					      								    	l = l [ 5 : ]						  
14 RETURN_VALUE NEW_LINE				      								    	l = l [ 6 : ]						  
							      								    	l = l [ 7 : ]						  
							      								    	l = l [ 8 : ]						  
							      								    	l = l [ 9 : ]						  
							      								    	l = l [ 10 : ]						  
							      								    	l = l [ 11 : ]						  
							      								    	l = l [ 10 : ]						  
							      								    	l = l [ 11 : ]						  
							      								    	l = l [ 11 : ]						  
							      								    	l = l [ 12 : ]						  
							      								    	l = l [ 13 : ]						  
							      								    	l = l [ 11 : ]						  
							      								    	l = l [ 12 : ]						  
							      								    	l = l [ 13 : ]						  
							      								    	l = l [ 13 : ]						  
							      								    	l = l [ 13 : ]						  
							      								    	l = l [ 13 : ]						  
							      								    	l = l [ 14 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l l = l [ 15 : ]					  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l [ 15 : ] = l [ 15 : ]					  
							      								    	l = l [ 15 : ]						  
							      								    	l [ 15 : ]						  
							      								    	l = l [ 15 : ]						  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
							      								    	l [ 15 : ] = l [ 16 : ]					  
-							      -								    	l [ 15-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			      MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			    MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			  MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA
--							      --							    --								  --
Disassembly of <code object minHeight at 0x7fbac0e89d20, file def minHeight ( area , base ) :				    def minHeight ( area ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.ceil ( ( 2 * area ) / base )		    	math.ceil ( area )					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_METHOD 1 ( ceil )				      								    	return math.ceil ( area )				  /eval_scripts/dis_sa-python_sa.test/MINIMUM_HEIGHT
4 LOAD_CONST 1 ( 2 )					      								    								  _TRIANGLE_GIVEN_BASE_AREA.py", line 43, in <module
6 LOAD_FAST 0 ( area )					      								    								  >	if abs(1 - (0.0000001 + abs(f_gold(*paramete
8 BINARY_MULTIPLY					      								    								  rs_set))) / (abs(f_filled(*parameters_set)) + 0.00
10 LOAD_FAST 1 ( base )					      								    								  00001)) < 0.001: TypeError: f_filled() takes 1 pos
12 BINARY_TRUE_DIVIDE					      								    								  itional argument but 2 were given
14 CALL_METHOD 1					      								    								  
16 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10
--							      --							    --								  --
Disassembly of <code object isMultipleOf10 at 0x7fbac<<unk>>  def isMultipleOf10 ( n ) :				    def isMultipleOf10 ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return ( n % 15 == 0 )				    	n = n [ 15 : 15 ]					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 15 )					      								    	return n % n						  /eval_scripts/dis_sa-python_sa.test/EFFICIENT_WAY_
4 BINARY_MODULO						      								    								  CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10.py
6 LOAD_CONST 2 ( 0 )					      								    								  ", line 41, in <module>     if f_filled(*parameter
8 COMPARE_OP 2 ( == )					      								    								  s_set) == f_gold(*parameters_set):   File "/home/u
10 RETURN_VALUE NEW_LINE				      								    								  buntu/TransCoder/models/eval/bt/152w65bl69/eval_sc
							      								    								  ripts/dis_sa-python_sa.test/EFFICIENT_WAY_CHECK_WH
							      								    								  ETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10.py", line
							      								    								  22, in f_filled     n = n [ 15 : 15 ] TypeError: '
							      								    								  int' object is not subscriptable
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
Disassembly of <code object getRemainder at 0x7fbac<<unk>> de def getRemainder ( num , divisor ) :			    def getRemainder ( num ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( num )					      	  return ( num - divisor * ( num // divisor ) )		    	num = num [ num ]					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( divisor )				      								    	num = num [ num ]					  /eval_scripts/dis_sa-python_sa.test/PROGRAM_TO_FIN
4 LOAD_FAST 0 ( num )					      								    	return num % num					  D_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR.py",
6 LOAD_FAST 1 ( divisor )				      								    								  line 42, in <module>	   if f_filled(*parameters_s
8 BINARY_FLOOR_DIVIDE					      								    								  et) == f_gold(*parameters_set): TypeError: f_fille
10 BINARY_MULTIPLY					      								    								  d() takes 1 positional argument but 2 were given
12 BINARY_SUBTRACT					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_IN<unk> BED_IN_A_SQUAR
--							      --							    --								  --
Disassembly of <code object areaOfInscribedCircle at 0x7fbac< def areaOfInscribedCircle ( a ) :				    def areaOfInscriscriscriscriscriscriscriscriscriscriscriscris script_not_found : None
2 0 LOAD_GLOBAL 0 ( PI )				      	  return ( PI / 4 ) * a * a				    								  
2 LOAD_CONST 1 ( 4 )					      								    								  
4 BINARY_TRUE_DIVIDE					      								    								  
6 LOAD_FAST 0 ( a )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_FAST 0 ( a )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
Disassembly of <code object isPowerOfTwo at 0x7fbac<<unk>> d5 def isPowerOfTwo ( x ) :					    def isPowerOfTwo ( x ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( x )					      	  return ( x and ( not ( x & ( x - 1 ) ) ) )		    	return x.x == 0						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 JUMP_IF_FALSE_OR_POP 16				      								    								  /eval_scripts/dis_sa-python_sa.test/WRITE_ONE_LINE
4 LOAD_FAST 0 ( x )					      								    								  _C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1
6 LOAD_FAST 0 ( x )					      								    								  .py", line 40, in <module>	 if f_filled(*parame
8 LOAD_CONST 1 ( 1 )					      								    								  ters_set) == f_gold(*parameters_set):	  File "/hom
10 BINARY_SUBTRACT					      								    								  e/ubuntu/TransCoder/models/eval/bt/152w65bl69/eval
12 BINARY_AND						      								    								  _scripts/dis_sa-python_sa.test/WRITE_ONE_LINE_C_FU
14 UNARY_NOT						      								    								  NCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO_1.py",
>> 16 RETURN_VALUE NEW_LINE				      								    								   line 22, in f_filled	    return x.x == 0 Attribut
							      								    								  eError: 'int' object has no attribute 'x'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_HEXAGON					      AREA_OF_A_HEXAGON						    AREA_OF_A_HEXAGON						  AREA_OF_A_HEXAGON
--							      --							    --								  --
Disassembly of <code object hexagonArea at 0x7fbac<<unk>> de4 def hexagonArea ( s ) :					    def hexagonArea ( s ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 3 )					      	  return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	    	return math.sqrt ( 2 * math.pi )			  
2 LOAD_GLOBAL 0 ( math )				      								    								  
4 LOAD_METHOD 1 ( sqrt )				      								    								  
6 LOAD_CONST 1 ( 3 )					      								    								  
8 CALL_METHOD 1						      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 0 ( s )					      								    								  
14 LOAD_FAST 0 ( s )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
Disassembly of <code object procal at 0x7fbac<<unk>> d540, fi def procal ( n ) :					    def procal ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 3.0 )				      	  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )		    	return 3.0 * 3.0					  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_CONST 2 ( 4.0 )					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 3 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION						      TAIL_RECURSION						    TAIL_RECURSION						  TAIL_RECURSION
--							      --							    --								  --
Disassembly of <code object fact at 0x7fbac<<unk>> de40, file def fact ( n ) :						    def fact ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	return n % 2						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    								  
4 COMPARE_OP 2 ( == )					      	  return n * fact ( n - 1 )				    								  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_CONST 2 ( 1 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_GLOBAL 0 ( fact )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
Disassembly of <code object surface_area_octahedron at 0x7fba def surface_area_octahedron ( side ) :			    def surface_area_octaron ( side , side , step ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )	    	return math.sqrt ( 2 * side * side * side * side * side * l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_GLOBAL 0 ( math )				      								    								  /PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON.py", line
4 LOAD_METHOD 1 ( sqrt )				      								    								  27	 if __name__ == '__main__':
6 LOAD_CONST 2 ( 3 )					      								    								  	       ^ SyntaxError: invalid syntax
8 CALL_METHOD 1						      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 0 ( side )					      								    								  
14 LOAD_FAST 0 ( side )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
Disassembly of <code object rectCount at 0x7fbac<<unk>> de40, def rectCount ( n , m ) :					    def rectCount ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( m )					      	  return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4		    	n = n [ n : n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( n )					      								    	n = n [ n : n ]						  /eval_scripts/dis_sa-python_sa.test/NUMBER_RECTANG
4 BINARY_MULTIPLY					      								    	return n % n						  LES_NM_GRID.py", line 42, in <module>	    if f_fil
6 LOAD_FAST 0 ( n )					      								    								  led(*parameters_set) == f_gold(*parameters_set): T
8 LOAD_CONST 1 ( 1 )					      								    								  ypeError: f_filled() takes 1 positional argument b
10 BINARY_ADD						      								    								  ut 2 were given
12 BINARY_MULTIPLY					      								    								  
14 LOAD_FAST 1 ( m )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 2 ( 4 )					      								    								  
24 BINARY_FLOOR_DIVIDE					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1
--							      --							    --								  --
Disassembly of <code object countIntegralSolutions at 0x7fbac def countIntegralSolutions ( n ) :			    def countIntegralSolutions ( n ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( int )				      	  return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )		    	return int ( n )					  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_ADD						      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 2 )					      								    								  
12 BINARY_ADD						      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_TRUE_DIVIDE					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SEQUENCE_2_22_222					      SUM_SEQUENCE_2_22_222					    SUM_SEQUENCE_2_22_222					  SUM_SEQUENCE_2_22_222
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7fbac0e8bc90, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0.0246 )				      	  return 0.0246 * ( math.pow ( 10 , n ) - 1 - ( 9 * n ) )   	return 0.0246 * math.pow ( n - 1 )			  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( math )				      								    								  /eval_scripts/dis_sa-python_sa.test/SUM_SEQUENCE_2
4 LOAD_METHOD 1 ( pow )					      								    								  _22_222.py", line 42, in <module>	if abs(1 - (
6 LOAD_CONST 2 ( 10 )					      								    								  0.0000001 + abs(f_gold(*parameters_set))) / (abs(f
8 LOAD_FAST 0 ( n )					      								    								  _filled(*parameters_set)) + 0.0000001)) < 0.001:
10 CALL_METHOD 2					      								    								   File "/home/ubuntu/TransCoder/models/eval/bt/152w
12 LOAD_CONST 3 ( 1 )					      								    								  65bl69/eval_scripts/dis_sa-python_sa.test/SUM_SEQU
14 BINARY_SUBTRACT					      								    								  ENCE_2_22_222.py", line 24, in f_filled     return
16 LOAD_CONST 4 ( 9 )					      								    								   0.0246 * math.pow ( n - 1 ) TypeError: pow expect
18 LOAD_FAST 0 ( n )					      								    								  ed 2 arguments, got 1
20 BINARY_MULTIPLY					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
Disassembly of <code object countNonEmptySubstr at 0x7fbac<<u def countNonEmptySubstr ( str ) :				    def countNonEmptySubstr ( str ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str ) ;					    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( str )					      	  return int ( n * ( n + 1 ) / 2 ) ;			     Returns a list of strings in a list of strings		  /eval_scripts/dis_sa-python_sa.test/NUMBER_SUBSTRI
4 CALL_FUNCTION 1					      								     """							  NGS_STRING.py", line 44, in <module>	   if f_fill
6 STORE_FAST 1 ( n )					      								    	return int ( str ( str ) )				  ed(*parameters_set) == f_gold(*parameters_set):
							      								    								  File "/home/ubuntu/TransCoder/models/eval/bt/152w6
3 8 LOAD_GLOBAL 1 ( int )				      								    								  5bl69/eval_scripts/dis_sa-python_sa.test/NUMBER_SU
10 LOAD_FAST 1 ( n )					      								    								  BSTRINGS_STRING.py", line 26, in f_filled	retu
12 LOAD_FAST 1 ( n )					      								    								  rn int ( str ( str ) ) TypeError: 'str' object is
14 LOAD_CONST 1 ( 1 )					      								    								  not callable
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7fbac<<unk>> d54 def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  failure : #Results: 8, 10
2 0 LOAD_CONST 1 ( 0.666 )				      	  return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ;	    	return 0.666 % n					  
2 LOAD_CONST 2 ( 1 )					      								    								  
4 LOAD_CONST 2 ( 1 )					      								    								  
6 LOAD_GLOBAL 0 ( pow )					      								    								  
8 LOAD_CONST 3 ( 10 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
Disassembly of <code object gcd at 0x7fbac<<unk>> de40, file  def gcd ( a , b ) :					    def gcd ( a , b ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( a )					      	  if a == 0 :						    	if a == 0 :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return b						    	    return gcd ( a , b )				  /eval_scripts/dis_sa-python_sa.test/BASIC_AND_EXTE
4 COMPARE_OP 2 ( == )					      	  return gcd ( b % a , a )				    	else :							  NDED_EUCLIDEAN_ALGORITHMS.py", line 45, in <module
6 POP_JUMP_IF_FALSE 12					      								    	    return gcd ( a , b )				  >	if f_filled(*parameters_set) == f_gold(*para
							      								    								  meters_set):	 File "/home/ubuntu/TransCoder/model
3 8 LOAD_FAST 1 ( b )					      								    								  s/eval/bt/152w65bl69/eval_scripts/dis_sa-python_sa
10 RETURN_VALUE						      								    								  .test/BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS.py",
							      								    								   line 27, in f_filled	    return f_filled ( a , b
4 >> 12 LOAD_GLOBAL 0 ( gcd )				      								    								  )   File "/home/ubuntu/TransCoder/models/eval/bt/1
14 LOAD_FAST 1 ( b )					      								    								  52w65bl69/eval_scripts/dis_sa-python_sa.test/BASIC
16 LOAD_FAST 0 ( a )					      								    								  _AND_EXTENDED_EUCLIDEAN_ALGORITHMS.py", line 27, i
18 BINARY_MODULO					      								    								  n f_filled	 return f_filled ( a , b )   File "/
20 LOAD_FAST 0 ( a )					      								    								  home/ubuntu/TransCoder/models/eval/bt/152w65bl69/e
22 CALL_FUNCTION 2					      								    								  val_scripts/dis_sa-python_sa.test/BASIC_AND_EXTEND
24 RETURN_VALUE NEW_LINE				      								    								  ED_EUCLIDEAN_ALGORITHMS.py", line 27, in f_filled
							      								    								      return f_filled ( a , b )	  [Previous line rep
							      								    								  eated 994 more times]	  File "/home/ubuntu/TransCo
							      								    								  der/models/eval/bt/152w65bl69/eval_scripts/dis_sa-
							      								    								  python_sa.test/BASIC_AND_EXTENDED_EUCLIDEAN_ALGORI
							      								    								  THMS.py", line 24, in f_filled     if a == 0 : Rec
							      								    								  ursionError: maximum recursion depth exceeded in c
							      								    								  omparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2
--							      --							    --								  --
Disassembly of <code object singleNumber at 0x7fbac<<unk>> de def singleNumber ( nums ) :				    def singleNumber ( nums ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 3 )					      	  return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2    	return sum ( nums ) [ 0 ]				  
2 LOAD_GLOBAL 0 ( sum )					      								    								  
4 LOAD_GLOBAL 1 ( set )					      								    								  
6 LOAD_FAST 0 ( nums )					      								    								  
8 CALL_FUNCTION 1					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_GLOBAL 0 ( sum )				      								    								  
16 LOAD_FAST 0 ( nums )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
Disassembly of <code object minSum at 0x7fbac<<unk>> d540, fi def minSum ( A ) :					    def minSum ( A , min_val = 1 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( min )				      	  min_val = min ( A ) ;					    	""" STRNEWLINE SPACETOKEN min SPACETOKEN A SPACETOKEN num 
2 LOAD_FAST 0 ( A )					      	  return min_val * ( len ( A ) - 1 )			    								  
4 CALL_FUNCTION 1					      								    								  
6 STORE_FAST 1 ( min_val )				      								    								  
							      								    								  
3 8 LOAD_FAST 1 ( min_val )				      								    								  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( A )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
Disassembly of <code object Resources at 0x7fbac0e89d20, file def Resources ( process , need ) :			    def Resources ( process ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  minResources = 0					    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( minResources )				      	  minResources = process * ( need - 1 ) + 1		     Returns the process of the minResources process the process  /eval_scripts/dis_sa-python_sa.test/PROGRAM_FOR_DE
							      	  return minResources					     process the process process to the process process to the pr ADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM.py", lin
3 4 LOAD_FAST 0 ( process )				      								     to the process process to the process process process.	  e 51, in <module>	if f_filled(*parameters_set)
6 LOAD_FAST 1 ( need )					      								    								   == f_gold(*parameters_set): TypeError: f_filled()
8 LOAD_CONST 2 ( 1 )					      								     """							   takes 1 positional argument but 2 were given
10 BINARY_SUBTRACT					      								    	process = process.process ( process )			  
12 BINARY_MULTIPLY					      								    	if process is not None :				  
14 LOAD_CONST 2 ( 1 )					      								    	    process = process.process ( process )		  
16 BINARY_ADD						      								    	process.process ( process )				  
18 STORE_FAST 2 ( minResources )			      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( minResources )			      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE				      LONGEST_INCREASING_SUBSEQUENCE				    LONGEST_INCREASING_SUBSEQUENCE				  LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lis at 0x7fbac<<unk>> de40, file  def lis ( arr ) :						    def lis ( arr ) :						  script_not_found : None
3 0 LOAD_GLOBAL 0 ( len )				      	  global maximum					    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 LOAD_FAST 0 ( arr )					      	  n = len ( arr )					    								  
4 CALL_FUNCTION 1					      	  maximum = 1						    								  
6 STORE_FAST 1 ( n )					      	  _lis ( arr , n )					    								  
							      	  return maximum					    								  
4 8 LOAD_CONST 1 ( 1 )					      								    								  
10 STORE_GLOBAL 1 ( maximum )				      								    								  
							      								    								  
5 12 LOAD_GLOBAL 2 ( _lis )				      								    								  
14 LOAD_FAST 0 ( arr )					      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 2					      								    								  
20 POP_TOP						      								    								  
							      								    								  
6 22 LOAD_GLOBAL 1 ( maximum )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_MID_POINT_LINE				      PROGRAM_FIND_MID_POINT_LINE				    PROGRAM_FIND_MID_POINT_LINE					  PROGRAM_FIND_MID_POINT_LINE
--							      --							    --								  --
Disassembly of <code object midpoint at 0x7fbac<<unk>> de40,  def midpoint ( x1 , x2 , y1 , y2 ) :			    def midpoint ( x1 , x2 , x2 , x2 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( ( x1 + x2 ) // 2 , " , " , ( y1 + y2 ) // 2 )	    	print ( x1 )						  
2 LOAD_FAST 0 ( x1 )					      								    								  
4 LOAD_FAST 1 ( x2 )					      								    								  
6 BINARY_ADD						      								    								  
8 LOAD_CONST 1 ( 2 )					      								    								  
10 BINARY_FLOOR_DIVIDE					      								    								  
12 LOAD_CONST 2 ( ' , ' )				      								    								  
14 LOAD_FAST 2 ( y1 )					      								    								  
16 LOAD_FAST 3 ( y2 )					      								    								  
18 BINARY_ADD						      								    								  
20 LOAD_CONST 1 ( 2 )					      								    								  
22 BINARY_FLOOR_DIVIDE					      								    								  
24 CALL_FUNCTION 3					      								    								  
26 POP_TOP						      								    								  
28 LOAD_CONST 0 ( None )				      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
Disassembly of <code object factorial at 0x7fbac<<unk>> de40, def factorial ( n ) :					    def factorial ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      								    	    return 0						  
4 COMPARE_OP 2 ( == )					      								    	if n == 1 :						  
6 POP_JUMP_IF_TRUE 16					      								    	    return 0						  
8 LOAD_FAST 0 ( n )					      								    	if n == 2 :						  
10 LOAD_CONST 2 ( 0 )					      								    	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	if n == 2 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return 0						  
>> 16 LOAD_CONST 1 ( 1 )				      								    	if n == 3 :						  
18 RETURN_VALUE						      								    	    return 0						  
>> 20 LOAD_FAST 0 ( n )					      								    	return 0						  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE      DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lis at 0x7fbac<<unk>> de40, file  def lis ( arr ) :						    def lis ( arr ) :						  script_not_found : None
3 0 LOAD_GLOBAL 0 ( len )				      	  global maximum					    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 LOAD_FAST 0 ( arr )					      	  n = len ( arr )					    								  
4 CALL_FUNCTION 1					      	  maximum = 1						    								  
6 STORE_FAST 1 ( n )					      	  _lis ( arr , n )					    								  
							      	  return maximum					    								  
4 8 LOAD_CONST 1 ( 1 )					      								    								  
10 STORE_GLOBAL 1 ( maximum )				      								    								  
							      								    								  
5 12 LOAD_GLOBAL 2 ( _lis )				      								    								  
14 LOAD_FAST 0 ( arr )					      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 2					      								    								  
20 POP_TOP						      								    								  
							      								    								  
6 22 LOAD_GLOBAL 1 ( maximum )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
Disassembly of <code object isPossible at 0x7fbac<<unk>> de40 def isPossible ( str , n ) :				    def isPossible ( str ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( str )					    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( str )					      	  if ( l >= n ) :					     Returns a list of str and return a list of strings in string /eval_scripts/dis_sa-python_sa.test/CHECK_IF_STRIN
4 CALL_FUNCTION 1					      	      return True					     """							  G_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBER_O
6 STORE_FAST 2 ( l )					      	  return False						    	return str ( str )					  F_CHARACTERS.py", line 46, in <module>     if f_fi
							      								    								  lled(*parameters_set) == f_gold(*parameters_set):
3 8 LOAD_FAST 2 ( l )					      								    								  TypeError: f_filled() takes 1 positional argument
10 LOAD_FAST 1 ( n )					      								    								  but 2 were given
12 COMPARE_OP 5 ( >= )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
4 16 LOAD_CONST 1 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_CONST 2 ( False )				      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
Disassembly of <code object sortit at 0x7fbac0e89d20, file "< def sortit ( arr , n ) :					    def sortit ( arr , n ) :					  failure : #Results: 0, 10
2 0 SETUP_LOOP 28 ( to 30 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      arr [ i ] = i + 1					    	    if i < 0 :						  
4 LOAD_FAST 1 ( n )					      								    		return i					  
6 CALL_FUNCTION 1					      								    	return None						  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 16 ( to 28 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 2 ( i )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 LOAD_FAST 0 ( arr )					      								    								  
22 LOAD_FAST 2 ( i )					      								    								  
24 STORE_SUBSCR						      								    								  
26 JUMP_ABSOLUTE 10					      								    								  
>> 28 POP_BLOCK						      								    								  
>> 30 LOAD_CONST 0 ( None )				      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING      COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
Disassembly of <code object getAbs at 0x7fbac0e89d20, file "< def getAbs ( n ) :					    def getAbs ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;		    	n = n [ 0 ]						  
2 LOAD_GLOBAL 0 ( SIZE_INT )				      	  return ( ( n + mask ) ^ mask ) ;			    	n = SIZE_INT ( n )					  
4 LOAD_GLOBAL 1 ( CHARBIT )				      								    	return n						  
6 BINARY_MULTIPLY					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 BINARY_RSHIFT					      								    								  
14 STORE_FAST 1 ( mask )				      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_FAST 1 ( mask )					      								    								  
20 BINARY_ADD						      								    								  
22 LOAD_FAST 1 ( mask )					      								    								  
24 BINARY_XOR						      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_AREA_TETRAHEDRON				      CALCULATE_AREA_TETRAHEDRON				    CALCULATE_AREA_TETRAHEDRON					  CALCULATE_AREA_TETRAHEDRON
--							      --							    --								  --
Disassembly of <code object vol_tetra at 0x7fbac0e8bc90, file def vol_tetra ( side ) :					    def vol_tetra ( side , volume , volume ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( side )				      	  volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )	    	if volume == 3 :					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 3 )					      	  return round ( volume , 2 )				    	    return						  /CALCULATE_AREA_TETRAHEDRON.py", line 24     def f
4 BINARY_POWER						      								    	if volume == 3 :					  _filled ( side , volume , volume ) :	   ^ SyntaxE
6 LOAD_CONST 2 ( 6 )					      								    	    return True						  rror: duplicate argument 'volume' in function defi
8 LOAD_GLOBAL 0 ( math )				      								    	return True						  nition
10 LOAD_METHOD 1 ( sqrt )				      								    								  
12 LOAD_CONST 3 ( 2 )					      								    								  
14 CALL_METHOD 1					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_TRUE_DIVIDE					      								    								  
20 STORE_FAST 1 ( volume )				      								    								  
							      								    								  
3 22 LOAD_GLOBAL 2 ( round )				      								    								  
24 LOAD_FAST 1 ( volume )				      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		      ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		    ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER			  ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
Disassembly of <code object factorial at 0x7fbac<<unk>> d540, def factorial ( n ) :					    def factorial ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      								    	    return 0						  
4 COMPARE_OP 2 ( == )					      								    	if n == 1 :						  
6 POP_JUMP_IF_TRUE 16					      								    	    return 0						  
8 LOAD_FAST 0 ( n )					      								    	if n == 2 :						  
10 LOAD_CONST 2 ( 0 )					      								    	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	if n == 1 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return 0						  
>> 16 LOAD_CONST 1 ( 1 )				      								    	if n == 2 :						  
18 RETURN_VALUE						      								    	    return 0						  
>> 20 LOAD_FAST 0 ( n )					      								    	return 0						  
22 LOAD_GLOBAL 0 ( factorial )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1
--							      --							    --								  --
Disassembly of <code object MaximumHeight at 0x7fbac<<unk>> d def MaximumHeight ( a , n ) :				    def ManyHeight ( fbfbacactntn1 , n = 1 ) :			  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( - 1 )				      	  return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2 	n = int ( n )						  
2 LOAD_GLOBAL 0 ( int )					      								    	n = n - n						  
4 LOAD_GLOBAL 1 ( math )				      								    	return n						  
6 LOAD_METHOD 2 ( sqrt )				      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_CONST 3 ( 8 )					      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 BINARY_ADD						      								    								  
18 CALL_METHOD 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 BINARY_ADD						      								    								  
24 LOAD_CONST 4 ( 2 )					      								    								  
26 BINARY_FLOOR_DIVIDE					      								    								  
28 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12_1				      SUM_SERIES_12_32_52_2N_12_1				    SUM_SERIES_12_32_52_2N_12_1					  SUM_SERIES_12_32_52_2N_12_1
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7fbac<<unk>> d54 def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( int )				      	  return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )  	return int ( n ) % 2					  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 2 )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 1 ( 2 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_CONST 3 ( 3 )					      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		  HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
Disassembly of <code object turnOffK at 0x7fbac0e8bc90, file  def turnOffK ( n , k ) :					    def turnOffK ( n , k , k , k ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( k )					      	  if ( k <= 0 ) :					    	if k <= k :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      return n						    	    return k						  /HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER.py",
4 COMPARE_OP 1 ( <= )					      	  return ( n & ~ ( 1 << ( k - 1 ) ) )			    	elif k <= k :						   line 113	INDENT		^ IndentationError:
6 POP_JUMP_IF_FALSE 12					      								    	    return k						  expected an indented block
							      								    	elif k <= k <= k :					  
3 8 LOAD_FAST 0 ( n )					      								    	    return k						  
10 RETURN_VALUE						      								    	elif k <= k :						  
							      								    	    return k						  
4 >> 12 LOAD_FAST 0 ( n )				      								    	elif k <= k :						  
14 LOAD_CONST 2 ( 1 )					      								    	    return k						  
16 LOAD_FAST 1 ( k )					      								    	elif k <= k :						  
18 LOAD_CONST 2 ( 1 )					      								    	    return k						  
20 BINARY_SUBTRACT					      								    	elif k <= k :						  
22 BINARY_LSHIFT					      								    	    return k						  
24 UNARY_INVERT						      								    	elif k <= k :						  
26 BINARY_AND						      								    	    return k						  
28 RETURN_VALUE NEW_LINE				      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
							      								    	    return k						  
							      								    	elif k <= k :						  
-							      -								    	INDENT-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL					      DOUBLE_FACTORIAL						    DOUBLE_FACTORIAL						  DOUBLE_FACTORIAL
--							      --							    --								  --
Disassembly of <code object doublefactorial at 0x7fbac0e8bc90 def doublefactorial ( n ) :				    def doublefactorial ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return 1 ;					    	    return 0						  /eval_scripts/dis_sa-python_sa.test/DOUBLE_FACTORI
4 COMPARE_OP 2 ( == )					      	  return n * doublefactorial ( n - 2 ) ;		    	if n == 1 :						  AL.py", line 46, in <module>	   if f_filled(*para
6 POP_JUMP_IF_TRUE 16					      								    	    return 0						  meters_set) == f_gold(*parameters_set):   File "/h
8 LOAD_FAST 0 ( n )					      								    	return ''.join ( [ n for n in n ] )			  ome/ubuntu/TransCoder/models/eval/bt/152w65bl69/ev
10 LOAD_CONST 2 ( 1 )					      								    								  al_scripts/dis_sa-python_sa.test/DOUBLE_FACTORIAL.
12 COMPARE_OP 2 ( == )					      								    								  py", line 28, in f_filled	return ''.join ( [ n
14 POP_JUMP_IF_FALSE 20					      								    								   for n in n ] ) TypeError: 'int' object is not ite
							      								    								  rable
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_GLOBAL 0 ( doublefactorial )			      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2
--							      --							    --								  --
Disassembly of <code object getRemainder at 0x7fbac0e89d20, f def getRemainder ( num , divisor ) :			    def getRemainder ( num ) :					  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 20 ( to 22 )				      	  while ( num >= divisor ) :				    	for num in num :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
>> 2 LOAD_FAST 0 ( num )				      	      num -= divisor ;					    	    if num >= num :					  /eval_scripts/dis_sa-python_sa.test/PROGRAM_TO_FIN
4 LOAD_FAST 1 ( divisor )				      	  return num ;						    		num = num % num					  D_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2.py"
6 COMPARE_OP 5 ( >= )					      								    	return num						  , line 45, in <module>     if f_filled(*parameters
8 POP_JUMP_IF_FALSE 20					      								    								  _set) == f_gold(*parameters_set): TypeError: f_fil
							      								    								  led() takes 1 positional argument but 2 were given
3 10 LOAD_FAST 0 ( num )				      								    								  
12 LOAD_FAST 1 ( divisor )				      								    								  
14 INPLACE_SUBTRACT					      								    								  
16 STORE_FAST 0 ( num )					      								    								  
18 JUMP_ABSOLUTE 2					      								    								  
>> 20 POP_BLOCK						      								    								  
							      								    								  
4 >> 22 LOAD_FAST 0 ( num )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POWER_POWER_MOD_PRIME				      FIND_POWER_POWER_MOD_PRIME				    FIND_POWER_POWER_MOD_PRIME					  FIND_POWER_POWER_MOD_PRIME
--							      --							    --								  --
Disassembly of <code object calculate at 0x7fbac<<unk>> de40, def calculate ( A , B , C , M ) :				    def calculate ( fbfbacageageageage1 , C , C , C , C , C , C , error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( pow )				      	  res = pow ( B , C , M - 1 )				    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( B )					      	  ans = pow ( A , res , M )				    								  /FIND_POWER_POWER_MOD_PRIME.py", line 25     if __
4 LOAD_FAST 2 ( C )					      	  return ans						    								  name__ == '__main__':	     ^ SyntaxError: invalid
6 LOAD_FAST 3 ( M )					      								    								  syntax
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 CALL_FUNCTION 3					      								    								  
14 STORE_FAST 4 ( res )					      								    								  
							      								    								  
3 16 LOAD_GLOBAL 0 ( pow )				      								    								  
18 LOAD_FAST 0 ( A )					      								    								  
20 LOAD_FAST 4 ( res )					      								    								  
22 LOAD_FAST 3 ( M )					      								    								  
24 CALL_FUNCTION 3					      								    								  
26 STORE_FAST 5 ( ans )					      								    								  
							      								    								  
4 28 LOAD_FAST 5 ( ans )				      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1
--							      --							    --								  --
Disassembly of <code object compute_average at 0x7fbac<<unk>> def compute_average ( a , b ) :				    def compute_average ( a , b , b , b , a , b , b , b , a , b , error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 2 )					      								    								  /COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1.py
4 BINARY_FLOOR_DIVIDE					      								    								  ", line 23	 if __name__ == '__main__':	 ^ S
6 LOAD_FAST 1 ( b )					      								    								  yntaxError: invalid syntax
8 LOAD_CONST 1 ( 2 )					      								    								  
10 BINARY_FLOOR_DIVIDE					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_FAST 0 ( a )					      								    								  
16 LOAD_CONST 1 ( 2 )					      								    								  
18 BINARY_MODULO					      								    								  
20 LOAD_FAST 1 ( b )					      								    								  
22 LOAD_CONST 1 ( 2 )					      								    								  
24 BINARY_MODULO					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_CONST 1 ( 2 )					      								    								  
30 BINARY_FLOOR_DIVIDE					      								    								  
32 BINARY_ADD						      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
Disassembly of <code object myCopy at 0x7fbac<<unk>> d540, fi def myCopy ( s1 , s2 ) :					    def myCopy ( s1 , s2 ) :					  script_not_found : None
2 0 SETUP_LOOP 32 ( to 34 )				      	  for i in range ( len ( s1 ) ) :			    	for x in range ( s2 ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      s2 [ i ] = s1 [ i ] ;				    	    for x in range ( s2 ) :				  
4 LOAD_GLOBAL 1 ( len )					      								    		x = x.split ( ':' )				  
6 LOAD_FAST 0 ( s1 )					      								    	    return x						  
8 CALL_FUNCTION 1					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 16 ( to 32 )				      								    								  
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 0 ( s1 )					      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 1 ( s2 )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 STORE_SUBSCR						      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
>> 34 LOAD_CONST 0 ( None )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7fbac0e8bc90, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return countSetBits ( n )				  /eval_scripts/dis_sa-python_sa.test/COUNT_SET_BITS
4 COMPARE_OP 2 ( == )					      	  else :						    	else :							  _IN_AN_INTEGER_1.py", line 46, in <module>	 if
6 POP_JUMP_IF_FALSE 12					      	      return ( n & 1 ) + countSetBits ( n >> 1 )	    	    countSetBits ( n )					  f_filled(*parameters_set) == f_gold(*parameters_se
							      								    								  t):	File "/home/ubuntu/TransCoder/models/eval/bt
3 8 LOAD_CONST 1 ( 0 )					      								    								  /152w65bl69/eval_scripts/dis_sa-python_sa.test/COU
10 RETURN_VALUE						      								    								  NT_SET_BITS_IN_AN_INTEGER_1.py", line 28, in f_fil
							      								    								  led	  f_filled ( n )   File "/home/ubuntu/TransC
5 >> 12 LOAD_FAST 0 ( n )				      								    								  oder/models/eval/bt/152w65bl69/eval_scripts/dis_sa
14 LOAD_CONST 2 ( 1 )					      								    								  -python_sa.test/COUNT_SET_BITS_IN_AN_INTEGER_1.py"
16 BINARY_AND						      								    								  , line 28, in f_filled     f_filled ( n )   File "
18 LOAD_GLOBAL 0 ( countSetBits )			      								    								  /home/ubuntu/TransCoder/models/eval/bt/152w65bl69/
20 LOAD_FAST 0 ( n )					      								    								  eval_scripts/dis_sa-python_sa.test/COUNT_SET_BITS_
22 LOAD_CONST 2 ( 1 )					      								    								  IN_AN_INTEGER_1.py", line 28, in f_filled	f_fi
24 BINARY_RSHIFT					      								    								  lled ( n )   [Previous line repeated 994 more time
26 CALL_FUNCTION 1					      								    								  s]   File "/home/ubuntu/TransCoder/models/eval/bt/
28 BINARY_ADD						      								    								  152w65bl69/eval_scripts/dis_sa-python_sa.test/COUN
30 RETURN_VALUE						      								    								  T_SET_BITS_IN_AN_INTEGER_1.py", line 25, in f_fill
32 LOAD_CONST 0 ( None )				      								    								  ed	 if n == 0 : RecursionError: maximum recursi
34 RETURN_VALUE NEW_LINE				      								    								  on depth exceeded in comparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
Disassembly of <code object getOddOccurrence at 0x7fbac0e8bc9 def getOddOccurrence ( arr ) :				    def getOddOccurrencurrence ( arr ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = [ ]						  
2 STORE_FAST 1 ( res )					      	  for element in arr :					    	res = [ ]						  
							      	      res = res ^ element				    	res = [ ]						  
3 4 SETUP_LOOP 20 ( to 26 )				      	  return res						    	for i in range ( res ) :				  
6 LOAD_FAST 0 ( arr )					      								    	    res = [ ]						  
8 GET_ITER						      								    	    for i in range ( res ) :				  
>> 10 FOR_ITER 12 ( to 24 )				      								    		res = res [ i ]					  
12 STORE_FAST 2 ( element )				      								    		res [ i ] = res [ i ]				  
							      								    		res [ i ] = res [ i ]				  
4 14 LOAD_FAST 1 ( res )				      								    		res [ i ] = res [ i ]				  
16 LOAD_FAST 2 ( element )				      								    		res [ i ] = res [ i ]				  
18 BINARY_XOR						      								    	    return res						  
20 STORE_FAST 1 ( res )					      								    								  
22 JUMP_ABSOLUTE 10					      								    								  
>> 24 POP_BLOCK						      								    								  
							      								    								  
5 >> 26 LOAD_FAST 1 ( res )				      								    								  
28 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER				      COUNT_SET_BITS_IN_AN_INTEGER				    COUNT_SET_BITS_IN_AN_INTEGER				  COUNT_SET_BITS_IN_AN_INTEGER
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7fbac<<unk>> dd def countSetBits ( n ) :					    def countSetBits ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( count )				      	  while ( n ) :						    	count = 0						  /COUNT_SET_BITS_IN_AN_INTEGER.py", line 150	  re
							      	      count += n & 1					    	count = 0						  turn count	 ^ SyntaxError: 'return' outside fun
3 4 SETUP_LOOP 28 ( to 34 )				      	      n >>= 1						    	count = count						  ction
>> 6 LOAD_FAST 0 ( n )					      	  return count						    	count = count						  
8 POP_JUMP_IF_FALSE 32					      								    	count += 1						  
							      								    	count += 1						  
4 10 LOAD_FAST 1 ( count )				      								    	count += 1						  
12 LOAD_FAST 0 ( n )					      								    	count += 1						  
14 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
16 BINARY_AND						      								    	count += 1						  
18 INPLACE_ADD						      								    	count += 1						  
20 STORE_FAST 1 ( count )				      								    	count += 1						  
							      								    	count += 1						  
5 22 LOAD_FAST 0 ( n )					      								    	count += 1						  
24 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
26 INPLACE_RSHIFT					      								    	count += 1						  
28 STORE_FAST 0 ( n )					      								    	count += 1						  
30 JUMP_ABSOLUTE 6					      								    	count += 1						  
>> 32 POP_BLOCK						      								    	count += 1						  
							      								    	count += 1						  
6 >> 34 LOAD_FAST 1 ( count )				      								    	count += 1						  
36 RETURN_VALUE NEW_LINE				      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
Disassembly of <code object repeat at 0x7fbac<<unk>> de40, fi def repeat ( s , n ) :					    def repeat ( fbfbacttc , n , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( s )					      	  s1 = s						    	n = n							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( s1 )					      	  for i in range ( 1 , n ) :				    	for i in n :						  /C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES.p
							      	      s += s1						    	    n = n						  y", line 24	  def f_filled ( fbfbacttc , n , n ,
3 4 SETUP_LOOP 26 ( to 32 )				      	  return s						    	    n = n						   n ) :     ^ SyntaxError: duplicate argument 'n' i
6 LOAD_GLOBAL 0 ( range )				      								    	    n = n						  n function definition
8 LOAD_CONST 1 ( 1 )					      								    	return n						  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 12 ( to 30 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( s )					      								    								  
22 LOAD_FAST 2 ( s1 )					      								    								  
24 INPLACE_ADD						      								    								  
26 STORE_FAST 0 ( s )					      								    								  
28 JUMP_ABSOLUTE 16					      								    								  
>> 30 POP_BLOCK						      								    								  
							      								    								  
5 >> 32 LOAD_FAST 0 ( s )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8bc90, file "< def search ( arr , n , x ) :				    def search ( fbfbac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 SETUP_LOOP 34 ( to 36 )				      	  for i in range ( 0 , n ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] == x ) :				    								  
4 LOAD_CONST 1 ( 0 )					      		  return i ;					    								  
6 LOAD_FAST 1 ( n )					      	  return - 1 ;						    								  
8 CALL_FUNCTION 2					      								    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 20 ( to 34 )				      								    								  
14 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arr )				      								    								  
18 LOAD_FAST 3 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_FAST 2 ( x )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 28 LOAD_FAST 3 ( i )					      								    								  
30 RETURN_VALUE						      								    								  
32 JUMP_ABSOLUTE 12					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 LOAD_CONST 2 ( - 1 )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI
--							      --							    --								  --
Disassembly of <code object numberOfSquares at 0x7fbac0e89d20 def numberOfSquares ( base ) :				    def numberOfSquares ( base ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( base )				      	  base = ( base - 2 )					    	base = base [ base ]					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 2 )					      	  base = base / 2					    	base = base [ base ]					  /eval_scripts/dis_sa-python_sa.test/MAXIMUM_NUMBER
4 BINARY_SUBTRACT					      	  return base * ( base + 1 ) / 2			    	base = base [ base ]					  _2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRIANG
6 STORE_FAST 0 ( base )					      								    	base = base [ base ]					  LE.py", line 112, in <module>	    if f_filled(*par
							      								    	base = base [ base ]					  ameters_set) == f_gold(*parameters_set):   File "/
3 8 LOAD_FAST 0 ( base )				      								    	base = base [ base ]					  home/ubuntu/TransCoder/models/eval/bt/152w65bl69/e
10 LOAD_CONST 1 ( 2 )					      								    	base = base [ base ]					  val_scripts/dis_sa-python_sa.test/MAXIMUM_NUMBER_2
12 BINARY_TRUE_DIVIDE					      								    	base = base [ base ]					  X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRIANGLE
14 STORE_FAST 0 ( base )				      								    	base = base [ base ]					  .py", line 24, in f_filled	 base = base [ base
							      								    	base = base [ base ]					  ] TypeError: 'int' object is not subscriptable
4 16 LOAD_FAST 0 ( base )				      								    	base = base [ base ]					  
18 LOAD_FAST 0 ( base )					      								    	base = base [ base ]					  
20 LOAD_CONST 2 ( 1 )					      								    	base = base [ base ]					  
22 BINARY_ADD						      								    	base = base [ base ]					  
24 BINARY_MULTIPLY					      								    	base = base [ base ]					  
26 LOAD_CONST 1 ( 2 )					      								    	base = base [ base ]					  
28 BINARY_TRUE_DIVIDE					      								    	base = base [ base ]					  
30 RETURN_VALUE NEW_LINE				      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base [ base ]					  
							      								    	base = base						  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	base [ base ] = base					  
							      								    	return base						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER	  WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER
--							      --							    --								  --
Disassembly of <code object getParity at 0x7fbac0e89d20, file def getParity ( n ) :					    def getParity ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  parity = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( parity )				      	  while n :						    								  /WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGN
							      	      parity = ~ parity					    								  ED_INTEGER.py", line 46     print("#Results: %i, %
3 4 SETUP_LOOP 26 ( to 32 )				      	      n = n & ( n - 1 )					    								  i" % (n_success, len(param)))
>> 6 LOAD_FAST 0 ( n )					      	  return parity						    								  				    ^ SyntaxError: E
8 POP_JUMP_IF_FALSE 30					      								    								  OF while scanning triple-quoted string literal
							      								    								  
4 10 LOAD_FAST 1 ( parity )				      								    								  
12 UNARY_INVERT						      								    								  
14 STORE_FAST 1 ( parity )				      								    								  
							      								    								  
5 16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_AND						      								    								  
26 STORE_FAST 0 ( n )					      								    								  
28 JUMP_ABSOLUTE 6					      								    								  
>> 30 POP_BLOCK						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 1 ( parity )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object CountSquares at 0x7fbac0e89d20, f def CountSquares ( a , b ) :				    def CountSquares ( a , b ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 	math.floor ( math.floor ( a ) )				  
2 LOAD_METHOD 1 ( floor )				      								    								  
4 LOAD_GLOBAL 0 ( math )				      								    								  
6 LOAD_METHOD 2 ( sqrt )				      								    								  
8 LOAD_FAST 1 ( b )					      								    								  
10 CALL_METHOD 1					      								    								  
12 CALL_METHOD 1					      								    								  
14 LOAD_GLOBAL 0 ( math )				      								    								  
16 LOAD_METHOD 3 ( ceil )				      								    								  
18 LOAD_GLOBAL 0 ( math )				      								    								  
20 LOAD_METHOD 2 ( sqrt )				      								    								  
22 LOAD_FAST 0 ( a )					      								    								  
24 CALL_METHOD 1					      								    								  
26 CALL_METHOD 1					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
Disassembly of <code object maxTripletSum at 0x7fbac0e8bc90,  def maxTripletSum ( arr , n ) :				    def maxTripletSum ( arr , n ) :				  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	if n < 0 :						  
2 LOAD_METHOD 0 ( sort )				      	  return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] )  	    return 0						  
4 CALL_METHOD 0						      								    	arr = arr.sort ( )					  
6 POP_TOP						      								    	return arr						  
							      								    								  
3 8 LOAD_FAST 0 ( arr )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_SUBSCR					      								    								  
18 LOAD_FAST 0 ( arr )					      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_CONST 3 ( 3 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		  SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object findElement at 0x7fbac<<unk>> d54 def findElement ( arr , n , key ) :			    def findElement ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 32 ( to 34 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] == key ) :				    	    if n < 0 :						  /eval_scripts/dis_sa-python_sa.test/SEARCH_INSERT_
4 LOAD_FAST 1 ( n )					      		  return i					    		return i					  AND_DELETE_IN_AN_UNSORTED_ARRAY.py", line 46, in <
6 CALL_FUNCTION 1					      	  return - 1						    	return None						  module>     if f_filled(*parameters_set) == f_gold
8 GET_ITER						      								    								  (*parameters_set): TypeError: f_filled() takes 2 p
>> 10 FOR_ITER 20 ( to 32 )				      								    								  ositional arguments but 3 were given
12 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 3 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( key )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
4 26 LOAD_FAST 3 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
30 JUMP_ABSOLUTE 10					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_CONST 1 ( - 1 )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y				    FIND_UNIT_DIGIT_X_RAISED_POWER_Y				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y
--							      --							    --								  --
Disassembly of <code object unitDigitXRaisedY at 0x7fbac<<unk def unitDigitXRaisedY ( x , y ) :				    def unitaselXRaisedY ( x , y , y , z ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( res )					      	  for i in range ( y ) :				    								  /FIND_UNIT_DIGIT_X_RAISED_POWER_Y.py", line 45
							      	      res = ( res * x ) % 10				    								   print("#Results: %i, %i" % (n_success, len(param)
3 4 SETUP_LOOP 28 ( to 34 )				      	  return res						    								  ))
6 LOAD_GLOBAL 0 ( range )				      								    								  	 ^ SyntaxError: EOF while scanning triple-qu
8 LOAD_FAST 1 ( y )					      								    								  oted string literal
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 16 ( to 32 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( res )				      								    								  
20 LOAD_FAST 0 ( x )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 2 ( 10 )					      								    								  
26 BINARY_MODULO					      								    								  
28 STORE_FAST 2 ( res )					      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_FAST 2 ( res )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
Disassembly of <code object divisibleBy20 at 0x7fbac0e89d20,  def divisibleBy20 ( num ) :				    def divisibleBy20 ( num ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  lastTwoDigits = int ( num [ - 2 : ] )			    	return int ( num )					  
2 LOAD_FAST 0 ( num )					      	  return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 = 								  
4 LOAD_CONST 1 ( - 2 )					      								    								  
6 LOAD_CONST 0 ( None )					      								    								  
8 BUILD_SLICE 2						      								    								  
10 BINARY_SUBSCR					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 STORE_FAST 1 ( lastTwoDigits )			      								    								  
							      								    								  
3 16 LOAD_FAST 1 ( lastTwoDigits )			      								    								  
18 LOAD_CONST 2 ( 5 )					      								    								  
20 BINARY_MODULO					      								    								  
22 LOAD_CONST 3 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 JUMP_IF_FALSE_OR_POP 38				      								    								  
28 LOAD_FAST 1 ( lastTwoDigits )			      								    								  
30 LOAD_CONST 4 ( 4 )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 3 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
>> 38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
Disassembly of <code object isNumber at 0x7fbac0e8bc90, file  def isNumber ( s ) :					    def isNumber ( s ) :					  failure : #Results: 4, 10
2 0 SETUP_LOOP 40 ( to 42 )				      	  for i in range ( len ( s ) ) :			    	for i in range ( len ( s ) ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if s [ i ].isdigit ( ) != True :			    	    if i < 0 :						  
4 LOAD_GLOBAL 1 ( len )					      		  return False					    		return True					  
6 LOAD_FAST 0 ( s )					      	  return True						    	return False						  
8 CALL_FUNCTION 1					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 24 ( to 40 )				      								    								  
16 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 0 ( s )					      								    								  
20 LOAD_FAST 1 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_METHOD 2 ( isdigit )				      								    								  
26 CALL_METHOD 0					      								    								  
28 LOAD_CONST 1 ( True )				      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
4 34 LOAD_CONST 2 ( False )				      								    								  
36 RETURN_VALUE						      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 LOAD_CONST 1 ( True )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	      SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7fbac0e8bc90, f def calculateSum ( n ) :					    def calculateSum ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( sum )					      	  for row in range ( n ) :				     Return the maximum value of the maximum value to the maximum /eval_scripts/dis_sa-python_sa.test/SUM_OF_ALL_ELE
							      	      sum = sum + ( 1 << row )				     """							  MENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE.py", lin
3 4 SETUP_LOOP 28 ( to 34 )				      	  return sum						    	for i in range ( n ) :					  e 49, in <module>	if f_filled(*parameters_set)
6 LOAD_GLOBAL 0 ( range )				      								    	    if i < 0 :						   == f_gold(*parameters_set):	 File "/home/ubuntu/
8 LOAD_FAST 0 ( n )					      								    		return 0					  TransCoder/models/eval/bt/152w65bl69/eval_scripts/
10 CALL_FUNCTION 1					      								    	return sum ( n * len ( n ) )				  dis_sa-python_sa.test/SUM_OF_ALL_ELEMENTS_UP_TO_NT
12 GET_ITER						      								    								  H_ROW_IN_A_PASCALS_TRIANGLE.py", line 31, in f_fil
>> 14 FOR_ITER 16 ( to 32 )				      								    								  led	  return sum ( n * len ( n ) ) TypeError: ob
16 STORE_FAST 2 ( row )					      								    								  ject of type 'int' has no len()
							      								    								  
4 18 LOAD_FAST 1 ( sum )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 2 ( row )					      								    								  
24 BINARY_LSHIFT					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 1 ( sum )					      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_FAST 1 ( sum )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
Disassembly of <code object smallest at 0x7fbac0e8bc90, file  def smallest ( x , y , z ) :				    def smallest ( fbfbac0000000000000000000000000000000000000000 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( y )					      	  if ( not ( y / x ) ) :				    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( x )					      	      return y if ( not ( y / z ) ) else z		    								  /SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPE
4 BINARY_TRUE_DIVIDE					      	  return x if ( not ( x / z ) ) else z			    								  RATORS_1.py", line 25	    if __name__ == '__main__
6 POP_JUMP_IF_TRUE 24					      								    								  ':	  ^ SyntaxError: invalid syntax
							      								    								  
3 8 LOAD_FAST 1 ( y )					      								    								  
10 LOAD_FAST 2 ( z )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 POP_JUMP_IF_TRUE 20					      								    								  
16 LOAD_FAST 1 ( y )					      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_FAST 2 ( z )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( x )				      								    								  
26 LOAD_FAST 2 ( z )					      								    								  
28 BINARY_TRUE_DIVIDE					      								    								  
30 POP_JUMP_IF_TRUE 36					      								    								  
32 LOAD_FAST 0 ( x )					      								    								  
34 RETURN_VALUE						      								    								  
>> 36 LOAD_FAST 2 ( z )					      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
Disassembly of <code object getMissingNo at 0x7fbac<<unk>> de def getMissingNo ( A ) :					    def getMissingNo ( A , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( A )						    	"""							  
2 LOAD_FAST 0 ( A )					      	  total = ( n + 1 ) * ( n + 2 ) / 2			     Returns a list of a list of the given list of strings	  
4 CALL_FUNCTION 1					      	  sum_of_A = sum ( A )					     """							  
6 STORE_FAST 1 ( n )					      	  return total - sum_of_A				    	return sum ( A [ n ] )					  
							      								    								  
3 8 LOAD_FAST 1 ( n )					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_ADD						      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 STORE_FAST 2 ( total )				      								    								  
							      								    								  
4 28 LOAD_GLOBAL 1 ( sum )				      								    								  
30 LOAD_FAST 0 ( A )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 STORE_FAST 3 ( sum_of_A )				      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( total )				      								    								  
38 LOAD_FAST 3 ( sum_of_A )				      								    								  
40 BINARY_SUBTRACT					      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
Disassembly of <code object printNos at 0x7fbac<<unk>> d540,  def printNos ( n ) :					    def printNos ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n > 0 :						    	n = n [ 0 ]						  
2 LOAD_CONST 1 ( 0 )					      	      printNos ( n - 1 )				    	while n < 0 :						  
4 COMPARE_OP 4 ( > )					      	      print ( n , end = ' ' )				    	    print ( "Nos %d - %d - %d" % n )			  
6 POP_JUMP_IF_FALSE 32					      								    	    print ( "Nos %d" % n )				  
							      								    	return n						  
3 8 LOAD_GLOBAL 0 ( printNos )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 3 ( ' ' )					      								    								  
26 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
28 CALL_FUNCTION_KW 2					      								    								  
30 POP_TOP						      								    								  
>> 32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_1				      POSITION_OF_RIGHTMOST_SET_BIT_1				    POSITION_OF_RIGHTMOST_SET_BIT_1				  POSITION_OF_RIGHTMOST_SET_BIT_1
--							      --							    --								  --
Disassembly of <code object PositionRightmostSetbit at 0x7fba def PositionRightmostSetbit ( n ) :			    def PositionRightmostSetbit ( n ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 1 )					      	  position = 1						    	return n - 1						  
2 STORE_FAST 1 ( position )				      	  m = 1							    								  
							      	  while ( not ( n & m ) ) :				    								  
3 4 LOAD_CONST 1 ( 1 )					      	      m = m << 1					    								  
6 STORE_FAST 2 ( m )					      	      position += 1					    								  
							      	  return position					    								  
4 8 SETUP_LOOP 28 ( to 38 )				      								    								  
>> 10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 2 ( m )					      								    								  
14 BINARY_AND						      								    								  
16 POP_JUMP_IF_TRUE 36					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( m )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_LSHIFT					      								    								  
24 STORE_FAST 2 ( m )					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( position )				      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( position )				      								    								  
34 JUMP_ABSOLUTE 10					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
7 >> 38 LOAD_FAST 1 ( position )			      								    								  
40 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac<<unk>> de40, fil def check ( degree , n ) :				    def check ( degree , n ) :					  failure : #Results: 5, 10
2 0 LOAD_GLOBAL 0 ( sum )				      	  deg_sum = sum ( degree )				    	return sum ( degree ) % 2				  
2 LOAD_FAST 0 ( degree )				      	  if ( 2 * ( n - 1 ) == deg_sum ) :			    								  
4 CALL_FUNCTION 1					      	      return True					    								  
6 STORE_FAST 2 ( deg_sum )				      	  else :						    								  
							      	      return False					    								  
3 8 LOAD_CONST 1 ( 2 )					      								    								  
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 2 ( deg_sum )				      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 24 LOAD_CONST 3 ( True )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_CONST 4 ( False )				      								    								  
30 RETURN_VALUE						      								    								  
32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_ALL_ODD_AND_EVEN_BITS				      SWAP_ALL_ODD_AND_EVEN_BITS				    SWAP_ALL_ODD_AND_EVEN_BITS					  SWAP_ALL_ODD_AND_EVEN_BITS
--							      --							    --								  --
Disassembly of <code object swapBits at 0x7fbac<<unk>> de40,  def swapBits ( x ) :					    def swapBits ( x , even_bits ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  even_bits = x & 0xAAAAAAAA				    	if x == 28363630 :					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 2863311530 )				      	  odd_bits = x & 0x55555555				    	    return ( x * 28363630 * x ** 2 )			  /SWAP_ALL_ODD_AND_EVEN_BITS.py", line 31     if __
4 BINARY_AND						      	  even_bits >>= 1					    	else :							  name__ == '__main__':
6 STORE_FAST 1 ( even_bits )				      	  odd_bits <<= 1					    	    return ( x * 3636363636363636363636363636363636363636  ^ SyntaxError: invalid syntax
							      	  return ( even_bits | odd_bits )			    								  
3 8 LOAD_FAST 0 ( x )					      								    								  
10 LOAD_CONST 2 ( 1431655765 )				      								    								  
12 BINARY_AND						      								    								  
14 STORE_FAST 2 ( odd_bits )				      								    								  
							      								    								  
4 16 LOAD_FAST 1 ( even_bits )				      								    								  
18 LOAD_CONST 3 ( 1 )					      								    								  
20 INPLACE_RSHIFT					      								    								  
22 STORE_FAST 1 ( even_bits )				      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( odd_bits )				      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 INPLACE_LSHIFT					      								    								  
30 STORE_FAST 2 ( odd_bits )				      								    								  
							      								    								  
6 32 LOAD_FAST 1 ( even_bits )				      								    								  
34 LOAD_FAST 2 ( odd_bits )				      								    								  
36 BINARY_OR						      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION_FIBONACCI				      TAIL_RECURSION_FIBONACCI					    TAIL_RECURSION_FIBONACCI					  TAIL_RECURSION_FIBONACCI
--							      --							    --								  --
Disassembly of <code object fib at 0x7fbac0e8bc90, file "<dis def fib ( n , a = 0 , b = 1 ) :				    def fib ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if n == 0 :						    	n = n [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return a						    	n = n [ 1 : ]						  /eval_scripts/dis_sa-python_sa.test/TAIL_RECURSION
4 COMPARE_OP 2 ( == )					      	  if n == 1 :						    	n = n [ 0 : n ]						  _FIBONACCI.py", line 51, in <module>	   if f_fill
6 POP_JUMP_IF_FALSE 12					      	      return b						    	n = n [ 1 : n ]						  ed(*parameters_set) == f_gold(*parameters_set): Ty
							      	  return fib ( n - 1 , b , a + b ) ;			    	n = n [ n : n ]						  peError: f_filled() takes 1 positional argument bu
3 8 LOAD_FAST 1 ( a )					      								    	n = n [ n : n ]						  t 3 were given
10 RETURN_VALUE						      								    	n = n [ n : n ]						  
							      								    	return n						  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_FAST 2 ( b )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_GLOBAL 0 ( fib )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_FAST 2 ( b )					      								    								  
34 LOAD_FAST 1 ( a )					      								    								  
36 LOAD_FAST 2 ( b )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 3					      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
Disassembly of <code object arcLength at 0x7fbac<<unk>> de40, def arcLength ( diameter , angle ) :			    def arcLength ( diameter , angle , angle ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( angle )				      	  if angle >= 360 :					    	if angle <= angle :					  
2 LOAD_CONST 1 ( 360 )					      	      print ( "Angle cannot be formed" )		    	    return 0.00000 # cannot be formed between the given a 
4 COMPARE_OP 5 ( >= )					      	      return 0						    								  
6 POP_JUMP_IF_FALSE 20					      	  else :						    	return print ( 'Angle cannot be formed' )		  
							      	      arc = ( 3.142857142857143 * diameter ) * ( angle / 36 								  
3 8 LOAD_GLOBAL 0 ( print )				      	      return arc					    								  
10 LOAD_CONST 2 ( 'Angle cannot be formed' )		      								    								  
12 CALL_FUNCTION 1					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_CONST 3 ( 0 )					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
6 >> 20 LOAD_CONST 4 ( 3.142857142857143 )		      								    								  
22 LOAD_FAST 0 ( diameter )				      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 1 ( angle )				      								    								  
28 LOAD_CONST 5 ( 360.0 )				      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 STORE_FAST 2 ( arc )					      								    								  
							      								    								  
7 36 LOAD_FAST 2 ( arc )				      								    								  
38 RETURN_VALUE						      								    								  
40 LOAD_CONST 0 ( None )				      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
Disassembly of <code object countPaths at 0x7fbac0e8bc90, fil def countPaths ( n , m ) :				    def countPaths ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or m == 0 ) :				    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return None						  
4 COMPARE_OP 2 ( == )					      	  return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  	if n == 0 :						  
6 POP_JUMP_IF_TRUE 16					      								    	    return None						  
8 LOAD_FAST 1 ( m )					      								    	return countPaths ( n )					  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( countPaths )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( m )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 LOAD_GLOBAL 0 ( countPaths )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN_1			      COUNTS_PATHS_POINT_REACH_ORIGIN_1				    COUNTS_PATHS_POINT_REACH_ORIGIN_1				  COUNTS_PATHS_POINT_REACH_ORIGIN_1
--							      --							    --								  --
Disassembly of <code object countPaths at 0x7fbac<<unk>> de40 def countPaths ( n , m ) :				    def countPaths ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or m == 0 ) :				    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  	if len ( countPaths ) == 1 :				  
6 POP_JUMP_IF_TRUE 16					      								    	    return countPaths ( n , m )				  
8 LOAD_FAST 1 ( m )					      								    	return countPaths ( n , m )				  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( countPaths )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( m )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 LOAD_GLOBAL 0 ( countPaths )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_ARRII					      MAXIMIZE_SUM_ARRII					    MAXIMIZE_SUM_ARRII						  MAXIMIZE_SUM_ARRII
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7fbac0e89d20, file "< def maxSum ( arr , n ) :					    def maxSum ( arr ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	return arr.sort ( )					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_METHOD 0 ( sort )				      	  sum = 0						    								  /eval_scripts/dis_sa-python_sa.test/MAXIMIZE_SUM_A
4 CALL_METHOD 0						      	  for i in range ( n ) :				    								  RRII.py", line 44, in <module>     if f_filled(*pa
6 POP_TOP						      	      sum += arr [ i ] * i				    								  rameters_set) == f_gold(*parameters_set): TypeErro
							      	  return sum						    								  r: f_filled() takes 1 positional argument but 2 we
3 8 LOAD_CONST 1 ( 0 )					      								    								  re given
10 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
4 12 SETUP_LOOP 32 ( to 46 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( sum )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( sum )					      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 2 ( sum )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object findLastIndex at 0x7fbac<<unk>> d def findLastIndex ( str , x ) :				    def findLastIndex ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  index = - 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 2 ( index )				      	  for i in range ( 0 , len ( str ) ) :			    								  
							      	      if str [ i ] == x :				    								  
3 4 SETUP_LOOP 38 ( to 44 )				      		  index = i					    								  
6 LOAD_GLOBAL 0 ( range )				      	  return index						    								  
8 LOAD_CONST 2 ( 0 )					      								    								  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( str )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( str )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( x )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( i )					      								    								  
38 STORE_FAST 2 ( index )				      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_FAST 2 ( index )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_LENGTH_PALINDROME				      NTH_EVEN_LENGTH_PALINDROME				    NTH_EVEN_LENGTH_PALINDROME					  NTH_EVEN_LENGTH_PALINDROME
--							      --							    --								  --
Disassembly of <code object evenlength at 0x7fbac0e89d20, fil def evenlength ( n ) :					    def evenlength ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  res = n						    	res = [ ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( res )					      	  for j in range ( len ( n ) - 1 , - 1 , - 1 ) :	    	res = res [ - 1 ]					  /eval_scripts/dis_sa-python_sa.test/NTH_EVEN_LENGT
							      	      res += n [ j ]					    	while res < 0 :						  H_PALINDROME.py", line 48, in <module>     if f_fi
3 4 SETUP_LOOP 40 ( to 46 )				      	  return res						    	    res = res [ - 1 ]					  lled(*parameters_set) == f_gold(*parameters_set):
6 LOAD_GLOBAL 0 ( range )				      								    	    res = res [ - 1 ]					    File "/home/ubuntu/TransCoder/models/eval/bt/152
8 LOAD_GLOBAL 1 ( len )					      								    	return res						  w65bl69/eval_scripts/dis_sa-python_sa.test/NTH_EVE
10 LOAD_FAST 0 ( n )					      								    								  N_LENGTH_PALINDROME.py", line 26, in f_filled
12 CALL_FUNCTION 1					      								    								  res = res [ - 1 ] IndexError: list index out of ra
14 LOAD_CONST 1 ( 1 )					      								    								  nge
16 BINARY_SUBTRACT					      								    								  
18 LOAD_CONST 2 ( - 1 )					      								    								  
20 LOAD_CONST 2 ( - 1 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 16 ( to 44 )				      								    								  
28 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( res )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 1 ( res )					      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_FAST 1 ( res )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
Disassembly of <code object horner at 0x7fbac<<unk>> d540, fi def horner ( poly , n , x ) :				    def horner ( poly , n , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( poly )				      	  result = poly [ 0 ]					    	if n < 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    	    return n						  /HORNERS_METHOD_POLYNOMIAL_EVALUATION.py", line 24
4 BINARY_SUBSCR						      	      result = result * x + poly [ i ]			    	else :							       def f_filled ( poly , n , n , n ) :     ^ Syn
6 STORE_FAST 3 ( result )				      	  return result						    	    return n						  taxError: duplicate argument 'n' in function defin
							      								    								  ition
3 8 SETUP_LOOP 34 ( to 44 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( result )				      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 0 ( poly )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 3 ( result )				      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_FAST 3 ( result )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac<<unk>> de40, fi def search ( arr , n , x ) :				    def search ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 3 ( i )					      	  for i in range ( i , n ) :				     Return the list of `arr` in `arr` element-wise.		  /eval_scripts/dis_sa-python_sa.test/ANALYSIS_OF_AL
							      	      if ( arr [ i ] == x ) :				    								  GORITHMS_SET_2_ASYMPTOTIC_ANALYSIS.py", line 78, i
3 4 SETUP_LOOP 34 ( to 40 )				      		  return i					     Parameters							  n <module>	 if f_filled(*parameters_set) == f_g
6 LOAD_GLOBAL 0 ( range )				      	  return - 1						     -----							  old(*parameters_set): TypeError: f_filled() takes
8 LOAD_FAST 3 ( i )					      								     arr : ndarray						  2 positional arguments but 3 were given
10 LOAD_FAST 1 ( n )					      								     Output array of `arr` element-wise.			  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								     Returns							  
>> 16 FOR_ITER 20 ( to 38 )				      								     ------							  
18 STORE_FAST 3 ( i )					      								     arr : ndarray						  
							      								     Output array of `arr` element-wise.			  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								     Parameters							  
24 BINARY_SUBSCR					      								     -----							  
26 LOAD_FAST 2 ( x )					      								     arr : ndarray						  
28 COMPARE_OP 2 ( == )					      								     Output array of `arr` element-wise.			  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								     Returns							  
5 32 LOAD_FAST 3 ( i )					      								     -----							  
34 RETURN_VALUE						      								     out : ndarray						  
36 JUMP_ABSOLUTE 16					      								     Output array of `arr` element-wise.			  
>> 38 POP_BLOCK						      								    								  
							      								     See also							  
6 >> 40 LOAD_CONST 2 ( - 1 )				      								     -----							  
42 RETURN_VALUE NEW_LINE				      								     arr : ndarray						  
							      								     Output array of `arr` element-wise.			  
							      								    								  
							      								     See also							  
							      								     -----							  
							      								     arr : ndarray						  
							      								     Output array of `arr` element-wise.			  
							      								    								  
							      								     """							  
							      								    	return arr						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7fbac<<unk>> d540, f def isPrime ( n ) :					    def isPrime ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	n = n % n						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 1 )					      	      return False					    	n = n % n						  /eval_scripts/dis_sa-python_sa.test/PRIME_NUMBERS.
4 COMPARE_OP 1 ( <= )					      	  for i in range ( 2 , n ) :				    	return n % n						  py", line 47, in <module>	if f_filled(*paramet
6 POP_JUMP_IF_FALSE 12					      	      if ( n % i == 0 ) :				    								  ers_set) == f_gold(*parameters_set):	 File "/home
							      		  return False					    								  /ubuntu/TransCoder/models/eval/bt/152w65bl69/eval_
3 8 LOAD_CONST 2 ( False )				      	  return True						    								  scripts/dis_sa-python_sa.test/PRIME_NUMBERS.py", l
10 RETURN_VALUE						      								    								  ine 28, in f_filled	  n = n % n ZeroDivisionErro
							      								    								  r: integer division or modulo by zero
4 >> 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 3 ( 2 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 4 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
6 40 LOAD_CONST 2 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
7 >> 48 LOAD_CONST 5 ( True )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER			  FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
Disassembly of <code object center at 0x7fbac<<unk>> de40, fi def center ( x1 , x2 , y1 , y2 ) :			    def center ( x1 , x2 , x2 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( int ( ( x1 + x2 ) / 2 ) , end = "" )		    	print ( "center" )					  
2 LOAD_GLOBAL 1 ( int )					      	  print ( "," , int ( ( y1 + y2 ) / 2 ) )		    								  
4 LOAD_FAST 0 ( x1 )					      								    								  
6 LOAD_FAST 1 ( x2 )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_CONST 1 ( 2 )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 LOAD_CONST 2 ( '' )					      								    								  
18 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
20 CALL_FUNCTION_KW 2					      								    								  
22 POP_TOP						      								    								  
							      								    								  
3 24 LOAD_GLOBAL 0 ( print )				      								    								  
26 LOAD_CONST 4 ( ',' )					      								    								  
28 LOAD_GLOBAL 1 ( int )				      								    								  
30 LOAD_FAST 2 ( y1 )					      								    								  
32 LOAD_FAST 3 ( y2 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 POP_TOP						      								    								  
46 LOAD_CONST 0 ( None )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
Disassembly of <code object findLastIndex at 0x7fbac0e8bc90,  def findLastIndex ( str , x ) :				    def findLastIndex ( str ) :					  script_not_found : None
2 0 SETUP_LOOP 44 ( to 46 )				      	  for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	    	for i in range ( len ( str ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if ( str [ i ] == x ) :				    	    if i >= len ( str ) :				  
4 LOAD_GLOBAL 1 ( len )					      		  return i					    		return str ( str ( str ( str ) )		  
6 LOAD_FAST 0 ( str )					      	  return - 1						    	return str ( str ( str ( str ) )			  
8 CALL_FUNCTION 1					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 LOAD_CONST 2 ( - 1 )					      								    								  
16 LOAD_CONST 2 ( - 1 )					      								    								  
18 CALL_FUNCTION 3					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 26 LOAD_FAST 0 ( str )				      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( x )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
4 38 LOAD_FAST 2 ( i )					      								    								  
40 RETURN_VALUE						      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_CONST 2 ( - 1 )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
Disassembly of <code object checkValidity at 0x7fbac<<unk>> d def checkValidity ( a , b , c ) :				    def checkValidity ( a , b ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( a )					      	  if ( a + b <= c ) or ( a + c <= b ) or ( b + c <= a ) :   	if a == b :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( b )					      	      return False					    	    return a						  /eval_scripts/dis_sa-python_sa.test/CHECK_WHETHER_
4 BINARY_ADD						      	  else :						    	else :							  TRIANGLE_VALID_NOT_SIDES_GIVEN.py", line 46, in <m
6 LOAD_FAST 2 ( c )					      	      return True					    	    return a						  odule>     if f_filled(*parameters_set) == f_gold(
8 COMPARE_OP 1 ( <= )					      								    								  *parameters_set): TypeError: f_filled() takes 2 po
10 POP_JUMP_IF_TRUE 36					      								    								  sitional arguments but 3 were given
12 LOAD_FAST 0 ( a )					      								    								  
14 LOAD_FAST 2 ( c )					      								    								  
16 BINARY_ADD						      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 COMPARE_OP 1 ( <= )					      								    								  
22 POP_JUMP_IF_TRUE 36					      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 LOAD_FAST 2 ( c )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 COMPARE_OP 1 ( <= )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
3 >> 36 LOAD_CONST 1 ( False )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
5 >> 40 LOAD_CONST 2 ( True )				      								    								  
42 RETURN_VALUE						      								    								  
44 LOAD_CONST 0 ( None )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE_1			      SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				    SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				  SQUARE_ROOT_OF_A_PERFECT_SQUARE_1
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7fbac<<unk>> de40 def squareRoot ( n ) :					    def squareRoot ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  x = n ;						    	n = n [ 0 ]						  
2 STORE_FAST 1 ( x )					      	  y = 1 ;						    	n = n [ 1 : ]						  
							      	  while ( x > y ) :					    	n = n [ 2 : ]						  
3 4 LOAD_CONST 1 ( 1 )					      	      x = ( x + y ) / 2 ;				    	n = n [ 3 : ]						  
6 STORE_FAST 2 ( y )					      	      y = n / x ;					    	while n < n :						  
							      	  return x ;						    	    n = n [ 4 : ]					  
4 8 SETUP_LOOP 32 ( to 42 )				      								    	    n += n [ 5 : ]					  
>> 10 LOAD_FAST 1 ( x )					      								    	return n						  
12 LOAD_FAST 2 ( y )					      								    								  
14 COMPARE_OP 4 ( > )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( x )					      								    								  
20 LOAD_FAST 2 ( y )					      								    								  
22 BINARY_ADD						      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_TRUE_DIVIDE					      								    								  
28 STORE_FAST 1 ( x )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_FAST 1 ( x )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 2 ( y )					      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 1 ( x )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 1 )					      	  p = 1							    	n = n - 1						  
2 STORE_FAST 1 ( p )					      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	n = n - 1						  
							      	      return n						    	n = n - 1						  
3 4 LOAD_FAST 0 ( n )					      	  while ( p < n ) :					    	n = n - 1						  
6 POP_JUMP_IF_FALSE 24					      	      p <<= 1						    	n = n - n						  
8 LOAD_FAST 0 ( n )					      	  return p ;						    	n = n - n						  
10 LOAD_FAST 0 ( n )					      								    	return n						  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 20 ( to 46 )				      								    								  
>> 26 LOAD_FAST 1 ( p )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( p )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 INPLACE_LSHIFT					      								    								  
40 STORE_FAST 1 ( p )					      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_FAST 1 ( p )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
Disassembly of <code object spiralDiaSum at 0x7fbac0e8bc90, f def spiralDiaSum ( n ) :					    def spiralDiaSum ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 1 :						    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return n						  
4 COMPARE_OP 2 ( == )					      	  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) 	return 0						  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_CONST 1 ( 1 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 4 )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 3 ( 6 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_CONST 3 ( 6 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_GLOBAL 0 ( spiralDiaSum )			      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 4 ( 2 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
Disassembly of <code object compute at 0x7fbac0e89d20, file " def compute ( a , b ) :					    def compute ( a , b ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( a )					      	  AM = ( a + b ) / 2					    	if a == b :						  
2 LOAD_FAST 1 ( b )					      	  GM = math.sqrt ( a * b )				    	    return 0						  
4 BINARY_ADD						      	  HM = ( GM * GM ) / AM					    	elif a == b :						  
6 LOAD_CONST 1 ( 2 )					      	  return HM						    	    return 0						  
8 BINARY_TRUE_DIVIDE					      								    	elif a == b :						  
10 STORE_FAST 2 ( AM )					      								    	    return 0						  
							      								    	else :							  
3 12 LOAD_GLOBAL 0 ( math )				      								    	    return math.sqrt ( b * b )				  
14 LOAD_METHOD 1 ( sqrt )				      								    								  
16 LOAD_FAST 0 ( a )					      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 CALL_METHOD 1					      								    								  
24 STORE_FAST 3 ( GM )					      								    								  
							      								    								  
4 26 LOAD_FAST 3 ( GM )					      								    								  
28 LOAD_FAST 3 ( GM )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 2 ( AM )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 4 ( HM )					      								    								  
							      								    								  
5 38 LOAD_FAST 4 ( HM )					      								    								  
40 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac0e8bc90, file "< def search ( arr , x ) :					    def search ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	"""							  
2 LOAD_FAST 0 ( arr )					      	  for j in range ( 0 , n ) :				     Returns a list of `arr` in `arr` element-wise.		  
4 CALL_FUNCTION 1					      	      if ( x == arr [ j ] ) :				    								  
6 STORE_FAST 2 ( n )					      		  return j					     Parameters							  
							      	  return - 1						     -----							  
3 8 SETUP_LOOP 34 ( to 44 )				      								     arr : ndarray						  
10 LOAD_GLOBAL 1 ( range )				      								     Output array of `arr` element-wise.			  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 2 ( n )					      								     Returns							  
16 CALL_FUNCTION 2					      								     -----							  
18 GET_ITER						      								     arr : ndarray						  
>> 20 FOR_ITER 20 ( to 42 )				      								     Output array of `arr` element-wise.			  
22 STORE_FAST 3 ( j )					      								    								  
							      								     Parameters							  
4 24 LOAD_FAST 1 ( x )					      								     -----							  
26 LOAD_FAST 0 ( arr )					      								     arr : ndarray						  
28 LOAD_FAST 3 ( j )					      								     Output array of `arr` element-wise.			  
30 BINARY_SUBSCR					      								    								  
32 COMPARE_OP 2 ( == )					      								     Returns							  
34 POP_JUMP_IF_FALSE 20					      								     -----							  
							      								     out : ndarray						  
5 36 LOAD_FAST 3 ( j )					      								     Output array of `arr` element-wise.			  
38 RETURN_VALUE						      								    								  
40 JUMP_ABSOLUTE 20					      								     See also							  
>> 42 POP_BLOCK						      								     ------							  
							      								     str.search							  
6 >> 44 LOAD_CONST 2 ( - 1 )				      								     Output array of `arr` element-wise.			  
46 RETURN_VALUE NEW_LINE				      								    								  
							      								     See also							  
							      								     -----							  
							      								     str.search							  
							      								     """							  
							      								    	arr = arr.split ( )					  
							      								    	arr.append ( arr )					  
							      								    	arr.append ( arr )					  
							      								    	return arr						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
Disassembly of <code object PowerOFPINnfactorial at 0x7fbac<< def PowerOFPINnfactorial ( n , p ) :			    def PowerOFPINfactorial ( n , p ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( ans )					      	  temp = p ;						    								  /FINDING_POWER_PRIME_NUMBER_P_N.py", line 47	   p
							      	  while ( temp <= n ) :					    								  rint("#Results: %i, %i" % (n_success, len(param)))
3 4 LOAD_FAST 1 ( p )					      	      ans += n / temp ;					    								  
6 STORE_FAST 3 ( temp )					      	      temp = temp * p ;					    								       ^ SyntaxError: EOF while scanning triple-quot
							      	  return ans ;						    								  ed string literal
4 8 SETUP_LOOP 32 ( to 42 )				      								    								  
>> 10 LOAD_FAST 3 ( temp )				      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( ans )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 3 ( temp )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
6 30 LOAD_FAST 3 ( temp )				      								    								  
32 LOAD_FAST 1 ( p )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 3 ( temp )				      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 2 ( ans )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
Disassembly of <code object numberOfPaths at 0x7fbac0e89d20,  def numberOfPaths ( m , n ) :				    def numberOfPaths ( m , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( m )					      	  if ( m == 1 or n == 1 ) :				    	if n == 0 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return n						  
4 COMPARE_OP 2 ( == )					      	  return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m ,  	elif n == 1 :						  
6 POP_JUMP_IF_TRUE 16					      								    	    return n						  
8 LOAD_FAST 1 ( n )					      								    	elif n == 2 :						  
10 LOAD_CONST 1 ( 1 )					      								    	    return n						  
12 COMPARE_OP 2 ( == )					      								    	elif n == 1 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return n						  
							      								    	elif n == 1 :						  
3 >> 16 LOAD_CONST 1 ( 1 )				      								    	    return n						  
18 RETURN_VALUE						      								    	elif n == 2 :						  
							      								    	    return n						  
4 >> 20 LOAD_GLOBAL 0 ( numberOfPaths )			      								    	elif n == 1 :						  
22 LOAD_FAST 0 ( m )					      								    	    return n						  
24 LOAD_CONST 1 ( 1 )					      								    	elif n == 1 :						  
26 BINARY_SUBTRACT					      								    	    return n						  
28 LOAD_FAST 1 ( n )					      								    	elif n == 1 :						  
30 CALL_FUNCTION 2					      								    	    return n						  
32 LOAD_GLOBAL 0 ( numberOfPaths )			      								    	elif n == 1 :						  
34 LOAD_FAST 0 ( m )					      								    	    return n						  
36 LOAD_FAST 1 ( n )					      								    	elif n == 1 :						  
38 LOAD_CONST 1 ( 1 )					      								    	    return n						  
40 BINARY_SUBTRACT					      								    	elif n == 1 :						  
42 CALL_FUNCTION 2					      								    	    return n						  
44 BINARY_ADD						      								    	elif n == 1 :						  
46 RETURN_VALUE NEW_LINE				      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 2 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
							      								    	elif n == 1 :						  
							      								    	    return n						  
-							      -								    	elif n == 1-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING		      LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			    LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			  LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING
--							      --							    --								  --
Disassembly of <code object LexicographicalMaxString at 0x7fb def LexicographicalMaxString ( str ) :			    def LexicographicalMaxString ( str ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( '' )					      	  mx = ""						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( mx )					      	  for i in range ( len ( str ) ) :			     Return the string of the given string and returns the string /eval_scripts/dis_sa-python_sa.test/LEXICOGRAPHICA
							      	      mx = max ( mx , str [ i : ] )			     string of the string and returns the string of the string an L_MAXIMUM_SUBSTRING_STRING.py", line 51, in <modul
3 4 SETUP_LOOP 38 ( to 44 )				      	  return mx						     string of the string string and returns the string string an e>	 if f_filled(*parameters_set) == f_gold(*par
6 LOAD_GLOBAL 0 ( range )				      								     """							  ameters_set):	  File "/home/ubuntu/TransCoder/mode
8 LOAD_GLOBAL 1 ( len )					      								    	for i in range ( len ( str ) ) :			  ls/eval/bt/152w65bl69/eval_scripts/dis_sa-python_s
10 LOAD_FAST 0 ( str )					      								    	    if i < len ( str ) :				  a.test/LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING.py
12 CALL_FUNCTION 1					      								    		return str ( str ( str ( i ) ) )		  ", line 32, in f_filled     return str ( str ( str
14 CALL_FUNCTION 1					      								    	return str ( str ( str ( i ) ) )			   ( i ) ) ) TypeError: 'str' object is not callable
16 GET_ITER						      								    								  
>> 18 FOR_ITER 22 ( to 42 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_GLOBAL 2 ( max )				      								    								  
24 LOAD_FAST 1 ( mx )					      								    								  
26 LOAD_FAST 0 ( str )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_CONST 0 ( None )				      								    								  
32 BUILD_SLICE 2					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 STORE_FAST 1 ( mx )					      								    								  
40 JUMP_ABSOLUTE 18					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_FAST 1 ( mx )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			    FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1
--							      --							    --								  --
Disassembly of <code object unitnumber at 0x7fbac<<unk>> d540 def unitnumber ( x , y ) :				    def unitnumber ( x ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( x )					      	  x = x % 10						    	x = x * 10						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 10 )					      	  if y != 0 :						    	y = x * 10						  /eval_scripts/dis_sa-python_sa.test/FIND_UNIT_DIGI
4 BINARY_MODULO						      	      y = y % 4 + 4					    	if y < 10 :						  T_X_RAISED_POWER_Y_1.py", line 49, in <module>
6 STORE_FAST 0 ( x )					      	  return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )	    	    x = x * 10						   if f_filled(*parameters_set) == f_gold(*parameter
							      								    	return x						  s_set): TypeError: f_filled() takes 1 positional a
3 8 LOAD_FAST 1 ( y )					      								    								  rgument but 2 were given
10 LOAD_CONST 2 ( 0 )					      								    								  
12 COMPARE_OP 3 ( != )					      								    								  
14 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 16 LOAD_FAST 1 ( y )					      								    								  
18 LOAD_CONST 3 ( 4 )					      								    								  
20 BINARY_MODULO					      								    								  
22 LOAD_CONST 3 ( 4 )					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 1 ( y )					      								    								  
							      								    								  
5 >> 28 LOAD_GLOBAL 0 ( int )				      								    								  
30 LOAD_GLOBAL 1 ( math )				      								    								  
32 LOAD_METHOD 2 ( pow )				      								    								  
34 LOAD_FAST 0 ( x )					      								    								  
36 LOAD_FAST 1 ( y )					      								    								  
38 CALL_METHOD 2					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_CONST 1 ( 10 )					      								    								  
44 BINARY_MODULO					      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
Disassembly of <code object largest at 0x7fbac<<unk>> d540, f def largest ( arr , n ) :					    def largest ( arr , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  max = arr [ 0 ]					    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    	    return 0						  
4 BINARY_SUBSCR						      	      if arr [ i ] > max :				    	return np.array ( arr [ n ] )				  
6 STORE_FAST 2 ( max )					      		  max = arr [ i ]				    								  
							      	  return max						    								  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 2 ( max )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 STORE_FAST 2 ( max )					      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 2 ( max )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
Disassembly of <code object Right_most_setbit at 0x7fbac0e89d def Right_most_setbit ( num ) :				    def Rft_most_most_setbit ( num ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  pos = 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 1 ( pos )					      	  for i in range ( INT_SIZE ) :				    								  
							      	      if not ( num & ( 1 << i ) ) :			    								  
3 4 SETUP_LOOP 40 ( to 46 )				      		  pos += 1					    								  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    								  
8 LOAD_GLOBAL 1 ( INT_SIZE )				      		  break						    								  
10 CALL_FUNCTION 1					      	  return pos						    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 28 ( to 44 )				      								    								  
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( num )				      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_FAST 2 ( i )					      								    								  
24 BINARY_LSHIFT					      								    								  
26 BINARY_AND						      								    								  
28 POP_JUMP_IF_TRUE 40					      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( pos )				      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 1 ( pos )					      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
7 >> 40 BREAK_LOOP					      								    								  
42 JUMP_ABSOLUTE 14					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
8 >> 46 LOAD_FAST 1 ( pos )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
Disassembly of <code object sequence at 0x7fbac<<unk>> de40,  def sequence ( n ) :					    def sequence ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 1 or n == 2 :					    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return n						  
4 COMPARE_OP 2 ( == )					      	  else :						    	return n						  
6 POP_JUMP_IF_TRUE 16					      	      return sequence ( sequence ( n - 1 ) ) + sequence ( n 								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 2 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_GLOBAL 0 ( sequence )			      								    								  
22 LOAD_GLOBAL 0 ( sequence )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_GLOBAL 0 ( sequence )				      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_GLOBAL 0 ( sequence )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_ADD						      								    								  
54 RETURN_VALUE						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			      MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			    MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			  MULTIPLICATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
Disassembly of <code object modInverse at 0x7fbac<<unk>> d540 def modInverse ( a , m ) :				    def modInverse ( a , m , m , v , v , v , v , v , v , v , v ,  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a = a % m ;						    								  
2 LOAD_FAST 1 ( m )					      	  for x in range ( 1 , m ) :				    								  
4 BINARY_MODULO						      	      if ( ( a * x ) % m == 1 ) :			    								  
6 STORE_FAST 0 ( a )					      		  return x					    								  
							      	  return 1						    								  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 1 ( m )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( a )					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 1 ( m )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_FAST 2 ( x )					      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_CONST 1 ( 1 )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
Disassembly of <code object PowerOFPINnfactorial at 0x7fbac<< def PowerOFPINnfactorial ( n , p ) :			    def PowerOFPINfactorial ( n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( ans )					      	  temp = p						     Return the number of the ans in the ans of the ans in the an /eval_scripts/dis_sa-python_sa.test/FINDING_POWER_
							      	  while ( temp <= n ) :					     """							  PRIME_NUMBER_P_N_1.py", line 53, in <module>	   i
3 4 LOAD_FAST 1 ( p )					      	      ans += n / temp					    	n = 0							  f f_filled(*parameters_set) == f_gold(*parameters_
6 STORE_FAST 3 ( temp )					      	      temp = temp * p					    	while n < 0 :						  set): TypeError: f_filled() takes 1 positional arg
							      	  return int ( ans )					    	    n = n % n						  ument but 2 were given
4 8 SETUP_LOOP 32 ( to 42 )				      								    	    n = n % n						  
>> 10 LOAD_FAST 3 ( temp )				      								    	    n = n % n						  
12 LOAD_FAST 0 ( n )					      								    	return n						  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( ans )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 3 ( temp )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
6 30 LOAD_FAST 3 ( temp )				      								    								  
32 LOAD_FAST 1 ( p )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 STORE_FAST 3 ( temp )				      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_GLOBAL 0 ( int )				      								    								  
44 LOAD_FAST 2 ( ans )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object findElements at 0x7fbac<<unk>> d5 def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	if n.sort ( ) :						  
2 LOAD_METHOD 0 ( sort )				      	  for i in range ( 0 , n - 2 ) :			    	    return 0						  
4 CALL_METHOD 0						      	      print ( arr [ i ] , end = " " )			    	return arr						  
6 POP_TOP						      								    								  
							      								    								  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 2 ( print )				      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( ' ' )					      								    								  
38 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
40 CALL_FUNCTION_KW 2					      								    								  
42 POP_TOP						      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
>> 48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object countOccurrences at 0x7fbac0e89d2 def countOccurrences ( arr , n , x ) :			    def countOccurrences ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( res )					      	  for i in range ( n ) :				    								  /COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SOR
							      	      if x == arr [ i ] :				    								  TED_ARRAY.py", line 46     print("#Results: %i, %i
3 4 SETUP_LOOP 36 ( to 42 )				      		  res += 1					    								  " % (n_success, len(param)))
6 LOAD_GLOBAL 0 ( range )				      	  return res						    								  				   ^ SyntaxError: EO
8 LOAD_FAST 1 ( n )					      								    								  F while scanning triple-quoted string literal
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 24 ( to 40 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( x )					      								    								  
20 LOAD_FAST 0 ( arr )					      								    								  
22 LOAD_FAST 4 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 COMPARE_OP 2 ( == )					      								    								  
28 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 30 LOAD_FAST 3 ( res )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 3 ( res )					      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
6 >> 42 LOAD_FAST 3 ( res )				      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY	      QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object leftRotate at 0x7fbac<<unk>> de40 def leftRotate ( arr , n , k ) :				    def leftRotate ( arr , n ) :				  script_not_found : None
2 0 SETUP_LOOP 46 ( to 48 )				      	  for i in range ( k , k + n ) :			    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      print ( str ( arr [ i % n ] ) , end = " " )	    	    if i < 0 :						  
4 LOAD_FAST 2 ( k )					      								    		print ( " SPACETOKEN SPACETOKEN SPACETOKEN SPACET 
6 LOAD_FAST 2 ( k )					      								    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 BINARY_ADD						      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 28 ( to 46 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_GLOBAL 2 ( str )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 BINARY_MODULO					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 LOAD_CONST 1 ( ' ' )					      								    								  
38 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
40 CALL_FUNCTION_KW 2					      								    								  
42 POP_TOP						      								    								  
44 JUMP_ABSOLUTE 16					      								    								  
>> 46 POP_BLOCK						      								    								  
>> 48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
Disassembly of <code object binomialCoeff at 0x7fbac0e89d20,  def binomialCoeff ( n , k ) :				    def binomialomialfbfbac08989898989898989898989898989898989898 script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if k == 0 or k == n :					    								  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    								  
4 COMPARE_OP 2 ( == )					      	  return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff (  								  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 1 ( k )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( binomialCoeff )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 1 ( k )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 LOAD_GLOBAL 0 ( binomialCoeff )			      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 BINARY_ADD						      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
Disassembly of <code object evenFib at 0x7fbac<<unk>> d540, f def evenFib ( n ) :					    def evenFib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 1 ) :					    	if n < 0 :						  
2 LOAD_CONST 1 ( 1 )					      	      return n						    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if ( n == 1 ) :					    	if n < 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 2						    	    return 0						  
							      	  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )  	else :							  
3 8 LOAD_FAST 0 ( n )					      								    	    return 0						  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 2 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_CONST 3 ( 4 )				      								    								  
26 LOAD_GLOBAL 0 ( evenFib )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_GLOBAL 0 ( evenFib )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_ADD						      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
Disassembly of <code object maxvolume at 0x7fbac<<unk>> d540, def maxvolume ( s ) :					    def maxvolume ( s , length , length , length , length ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( int )				      	  length = int ( s / 3 )				    	return int ( length ) % length				  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( s )					      	  s -= length						    								  /MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1.py", lin
4 LOAD_CONST 1 ( 3 )					      	  breadth = s / 2					    								  e 25	   def f_filled ( s , length , length , leng
6 BINARY_TRUE_DIVIDE					      	  height = s - breadth					    								  th , length ) :     ^ SyntaxError: duplicate argum
8 CALL_FUNCTION 1					      	  return int ( length * breadth * height )		    								  ent 'length' in function definition
10 STORE_FAST 1 ( length )				      								    								  
							      								    								  
3 12 LOAD_FAST 0 ( s )					      								    								  
14 LOAD_FAST 1 ( length )				      								    								  
16 INPLACE_SUBTRACT					      								    								  
18 STORE_FAST 0 ( s )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( s )					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 STORE_FAST 2 ( breadth )				      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( s )					      								    								  
30 LOAD_FAST 2 ( breadth )				      								    								  
32 BINARY_SUBTRACT					      								    								  
34 STORE_FAST 3 ( height )				      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 1 ( length )				      								    								  
40 LOAD_FAST 2 ( breadth )				      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_FAST 3 ( height )				      								    								  
46 BINARY_MULTIPLY					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object first at 0x7fbac0e8bc90, file "<d def first ( str , i ) :					    def first ( fbfbac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 LOAD_FAST 0 ( str )					      	  if ( str [ i ] == '\0' ) :				    								  
2 LOAD_FAST 1 ( i )					      	      return 0						    								  
4 BINARY_SUBSCR						      	  if ( str [ i ].isupper ( ) ) :			    								  
6 LOAD_CONST 1 ( '\x00' )				      	      return str [ i ]					    								  
8 COMPARE_OP 2 ( == )					      	  return first ( str , i + 1 )				    								  
10 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
3 12 LOAD_CONST 2 ( 0 )					      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( str )				      								    								  
18 LOAD_FAST 1 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_METHOD 0 ( isupper )				      								    								  
24 CALL_METHOD 0					      								    								  
26 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_GLOBAL 1 ( first )				      								    								  
38 LOAD_FAST 0 ( str )					      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 LOAD_CONST 3 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 CALL_FUNCTION 2					      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET
--							      --							    --								  --
Disassembly of <code object minRevolutions at 0x7fbac<<unk>>  def minRevolutions ( r , x1 , y1 , x2 , y2 ) :		    def minRevolutions ( x1 , x1 , x2 , x2 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 	return math.sqrt ( x1 , x2 , x2 )			  
2 LOAD_METHOD 1 ( sqrt )				      	  return math.ceil ( d // ( 2 * r ) )			    								  
4 LOAD_FAST 1 ( x1 )					      								    								  
6 LOAD_FAST 3 ( x2 )					      								    								  
8 BINARY_SUBTRACT					      								    								  
10 LOAD_FAST 1 ( x1 )					      								    								  
12 LOAD_FAST 3 ( x2 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 2 ( y1 )					      								    								  
20 LOAD_FAST 4 ( y2 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 LOAD_FAST 2 ( y1 )					      								    								  
26 LOAD_FAST 4 ( y2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_METHOD 1					      								    								  
36 STORE_FAST 5 ( d )					      								    								  
							      								    								  
3 38 LOAD_GLOBAL 0 ( math )				      								    								  
40 LOAD_METHOD 2 ( ceil )				      								    								  
42 LOAD_FAST 5 ( d )					      								    								  
44 LOAD_CONST 1 ( 2 )					      								    								  
46 LOAD_FAST 0 ( r )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 BINARY_FLOOR_DIVIDE					      								    								  
52 CALL_METHOD 1					      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD		  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7fbac<<unk>> d540, f def isPrime ( n ) :					    def isPrime ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if n <= 1 :						    	n = n % n						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 1 )					      	      return False					    	n = n % n						  /eval_scripts/dis_sa-python_sa.test/PRIMALITY_TEST
4 COMPARE_OP 1 ( <= )					      	  for i in range ( 2 , n ) :				    	return n % n						  _SET_1_INTRODUCTION_AND_SCHOOL_METHOD.py", line 47
6 POP_JUMP_IF_FALSE 12					      	      if n % i == 0 :					    								  , in <module>	    if f_filled(*parameters_set) ==
							      		  return False ;				    								  f_gold(*parameters_set):   File "/home/ubuntu/Tran
3 8 LOAD_CONST 2 ( False )				      	  return True						    								  sCoder/models/eval/bt/152w65bl69/eval_scripts/dis_
10 RETURN_VALUE						      								    								  sa-python_sa.test/PRIMALITY_TEST_SET_1_INTRODUCTIO
							      								    								  N_AND_SCHOOL_METHOD.py", line 28, in f_filled
4 >> 12 SETUP_LOOP 34 ( to 48 )				      								    								  n = n % n ZeroDivisionError: integer division or m
14 LOAD_GLOBAL 0 ( range )				      								    								  odulo by zero
16 LOAD_CONST 3 ( 2 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 4 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
6 40 LOAD_CONST 2 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
7 >> 48 LOAD_CONST 5 ( True )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
Disassembly of <code object isPower at 0x7fbac0e8bc90, file " def isPower ( x , y ) :					    def isPower ( x ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  if ( x == 1 ) :					    	if x == 1 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 1 )					      	      return ( y == 1 )					    	    return x						  /CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER.py",
4 COMPARE_OP 2 ( == )					      	  pow = 1						    	elif x == 1 :						   line 120	if __name__ == '__main__':     ^ Ind
6 POP_JUMP_IF_FALSE 16					      	  while ( pow < y ) :					    	    return x						  entationError: expected an indented block
							      	      pow = pow * x					    	elif x == 1 :						  
3 8 LOAD_FAST 1 ( y )					      	  return ( pow == y )					    	    return x						  
10 LOAD_CONST 1 ( 1 )					      								    	elif x == 1 :						  
12 COMPARE_OP 2 ( == )					      								    	    return x						  
14 RETURN_VALUE						      								    	elif x == 1 :						  
							      								    	    return x						  
4 >> 16 LOAD_CONST 1 ( 1 )				      								    	elif x == 1 :						  
18 STORE_FAST 2 ( pow )					      								    	    return x						  
							      								    	elif x == 1 :						  
5 20 SETUP_LOOP 20 ( to 42 )				      								    	    return x						  
>> 22 LOAD_FAST 2 ( pow )				      								    	elif x == 1 :						  
24 LOAD_FAST 1 ( y )					      								    	    return x						  
26 COMPARE_OP 0 ( < )					      								    	elif x == 1 :						  
28 POP_JUMP_IF_FALSE 40					      								    	    return x						  
							      								    	elif x == 1 :						  
6 30 LOAD_FAST 2 ( pow )				      								    	    return x						  
32 LOAD_FAST 0 ( x )					      								    	elif x == 2 :						  
34 BINARY_MULTIPLY					      								    	    return x						  
36 STORE_FAST 2 ( pow )					      								    	elif x == 1 :						  
38 JUMP_ABSOLUTE 22					      								    	    return x						  
>> 40 POP_BLOCK						      								    	elif x == 1 :						  
							      								    	    return x						  
7 >> 42 LOAD_FAST 2 ( pow )				      								    	elif x == 1 :						  
44 LOAD_FAST 1 ( y )					      								    	    return x						  
46 COMPARE_OP 2 ( == )					      								    	elif x == 1 :						  
48 RETURN_VALUE NEW_LINE				      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
							      								    	    return x						  
							      								    	elif x == 1 :						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			      NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			    NUMBER_DAYS_TANK_WILL_BECOME_EMPTY				  NUMBER_DAYS_TANK_WILL_BECOME_EMPTY
--							      --							    --								  --
Disassembly of <code object minDaysToEmpty at 0x7fbac<<unk>>  def minDaysToEmpty ( C , l ) :				    def minDaysToEmpty ( C , l , l , l , l , l , l , l , l , l ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( l )					      	  if ( l >= C ) : return C				    	return math.sqrt ( l * l * l * l * l * l * l * l * l * l  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( C )					      	  eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2	    								  /NUMBER_DAYS_TANK_WILL_BECOME_EMPTY.py", line 26
4 COMPARE_OP 5 ( >= )					      	  return math.ceil ( eq_root ) + l			    								     return math.sqrt ( l * l * l * l * l * l * l *
6 POP_JUMP_IF_FALSE 12					      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
8 LOAD_FAST 0 ( C )					      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
10 RETURN_VALUE						      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
							      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
3 >> 12 LOAD_GLOBAL 0 ( math )				      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
14 LOAD_METHOD 1 ( sqrt )				      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
16 LOAD_CONST 1 ( 1 )					      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
18 LOAD_CONST 2 ( 8 )					      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
20 LOAD_FAST 0 ( C )					      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
22 LOAD_FAST 1 ( l )					      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
24 BINARY_SUBTRACT					      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
26 BINARY_MULTIPLY					      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
28 BINARY_ADD						      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
30 CALL_METHOD 1					      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
32 LOAD_CONST 1 ( 1 )					      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
34 BINARY_SUBTRACT					      								    								  * l * l * l * l * l * l * l * l * l * l * l * l *
36 LOAD_CONST 3 ( 2 )					      								    								  l * l * l * l * l * l * l * l * l * l * l * l * l
38 BINARY_TRUE_DIVIDE					      								    								  * l * l * l l * l * l * l * l * l * l * l * l
40 STORE_FAST 2 ( eq_root )				      								    								  
							      								    								  
4 42 LOAD_GLOBAL 0 ( math )				      								    								  
44 LOAD_METHOD 2 ( ceil )				      								    								  
46 LOAD_FAST 2 ( eq_root )				      								    								  
48 CALL_METHOD 1					      								    								  
50 LOAD_FAST 1 ( l )					      								    								  
52 BINARY_ADD						      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  	   ^ SyntaxError: invalid syntax
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1
--							      --							    --								  --
Disassembly of <code object transpose at 0x7fbac0e8bc90, file def transpose ( A , B ) :					    def transpose ( fbfbac000000000000000000000000000000000000000 script_not_found : None
2 0 SETUP_LOOP 54 ( to 56 )				      	  for i in range ( N ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( M ) :				    								  
4 LOAD_GLOBAL 1 ( N )					      		  B [ i ] [ j ] = A [ j ] [ i ]			    								  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 42 ( to 54 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 36 ( to 52 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 2 ( M )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 24 ( to 50 )				      								    								  
26 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( j )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 24					      								    								  
>> 50 POP_BLOCK						      								    								  
>> 52 JUMP_ABSOLUTE 10					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
Disassembly of <code object printFun at 0x7fbac<<unk>> d540,  def printFun ( test ) :					    def printFun ( test ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( test )				      	  if ( test < 1 ) :					    	if test is None :					  
2 LOAD_CONST 1 ( 1 )					      	      return						    	    print ( " SPACETOKEN SPACETOKEN SPACETOKEN SPACETOKEN 
4 COMPARE_OP 0 ( < )					      	  else :						    								  
6 POP_JUMP_IF_FALSE 12					      	      print ( test , end = " " )			    								  
							      	      printFun ( test - 1 )				    								  
3 8 LOAD_CONST 0 ( None )				      	      print ( test , end = " " )			    								  
10 RETURN_VALUE						      	      return						    								  
							      								    								  
5 >> 12 LOAD_GLOBAL 0 ( print )				      								    								  
14 LOAD_FAST 0 ( test )					      								    								  
16 LOAD_CONST 2 ( ' ' )					      								    								  
18 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
20 CALL_FUNCTION_KW 2					      								    								  
22 POP_TOP						      								    								  
							      								    								  
6 24 LOAD_GLOBAL 1 ( printFun )				      								    								  
26 LOAD_FAST 0 ( test )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 POP_TOP						      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 0 ( test )					      								    								  
40 LOAD_CONST 2 ( ' ' )					      								    								  
42 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
Disassembly of <code object findFrequency at 0x7fbac0e8bc90,  def findFrequency ( arr , n , left , right , element ) :	    def findFrequency ( arr , count = 1 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 5 ( count )				      	  for i in range ( left - 1 , right ) :			    	count = 0						  
							      	      if ( arr [ i ] == element ) :			    	count = 0						  
3 4 SETUP_LOOP 42 ( to 48 )				      		  count += 1					    	count = 0						  
6 LOAD_GLOBAL 0 ( range )				      	  return count						    	count = 0						  
8 LOAD_FAST 2 ( left )					      								    	for i in range ( count ) :				  
10 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
12 BINARY_SUBTRACT					      								    	    count += 1						  
14 LOAD_FAST 3 ( right )				      								    	    count += 1						  
16 CALL_FUNCTION 2					      								    	    count += 1						  
18 GET_ITER						      								    	    count += 1						  
>> 20 FOR_ITER 24 ( to 46 )				      								    	    count += 1						  
22 STORE_FAST 6 ( i )					      								    	    count += 1						  
							      								    	    count += 1						  
4 24 LOAD_FAST 0 ( arr )				      								    	    count += 1						  
26 LOAD_FAST 6 ( i )					      								    	    count += 1						  
28 BINARY_SUBSCR					      								    	    count += 1						  
30 LOAD_FAST 4 ( element )				      								    	    count += 1						  
32 COMPARE_OP 2 ( == )					      								    	    count += 1						  
34 POP_JUMP_IF_FALSE 20					      								    	    count += 1						  
							      								    	    count += 1						  
5 36 LOAD_FAST 5 ( count )				      								    	    count += 1						  
38 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
40 INPLACE_ADD						      								    	    count += 1						  
42 STORE_FAST 5 ( count )				      								    	    count += 1						  
44 JUMP_ABSOLUTE 20					      								    	    count += 1						  
>> 46 POP_BLOCK						      								    	    count += 1						  
							      								    	    count += 1						  
6 >> 48 LOAD_FAST 5 ( count )				      								    	    count += 1						  
50 RETURN_VALUE NEW_LINE				      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
Disassembly of <code object sumBetweenTwoKth at 0x7fbac0e89d2 def sumBetweenTwoKth ( arr , n , k1 , k2 ) :		    def sumBetweenTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTw script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    								  
2 LOAD_METHOD 0 ( sort )				      	  result = 0						    								  
4 CALL_METHOD 0						      	  for i in range ( k1 , k2 - 1 ) :			    								  
6 POP_TOP						      	      result += arr [ i ]				    								  
							      	  return result						    								  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 STORE_FAST 4 ( result )				      								    								  
							      								    								  
4 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( k1 )					      								    								  
18 LOAD_FAST 3 ( k2 )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 16 ( to 46 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 4 ( result )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 5 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 4 ( result )				      								    								  
44 JUMP_ABSOLUTE 28					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 4 ( result )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM
--							      --							    --								  --
Disassembly of <code object summingSeries at 0x7fbac<<unk>> d def summingSeries ( n ) :					    def summingSeries ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  S = 0							    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( S )					      	  for i in range ( 1 , n + 1 ) :			    								  /PROGRAM_PRINT_SUM_GIVEN_NTH_TERM.py", line 45
							      	      S += i * i - ( i - 1 ) * ( i - 1 )		    								   print("#Results: %i, %i" % (n_success, len(param)
3 4 SETUP_LOOP 50 ( to 56 )				      	  return S						    								  ))
6 LOAD_GLOBAL 0 ( range )				      								    								  	 ^ SyntaxError: EOF while scanning triple-qu
8 LOAD_CONST 2 ( 1 )					      								    								  oted string literal
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( S )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 1 ( S )					      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
5 >> 56 LOAD_FAST 1 ( S )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
Disassembly of <code object getSum at 0x7fbac<<unk>> de40, fi def getSum ( n ) :					    def getSum ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	return n % ( n % 2 ) % 2				  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( sum )					      	  while ( n > 0 ) :					    								  /eval_scripts/dis_sa-python_sa.test/HOW_CAN_WE_SUM
							      	      sum += int ( n % 10 )				    								  _THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT_
3 4 SETUP_LOOP 40 ( to 46 )				      	      n = int ( n / 10 )				    								  1.py", line 44, in <module>	  if f_filled(*param
>> 6 LOAD_FAST 0 ( n )					      	  return sum						    								  eters_set) == f_gold(*parameters_set):   File "/ho
8 LOAD_CONST 1 ( 0 )					      								    								  me/ubuntu/TransCoder/models/eval/bt/152w65bl69/eva
10 COMPARE_OP 4 ( > )					      								    								  l_scripts/dis_sa-python_sa.test/HOW_CAN_WE_SUM_THE
12 POP_JUMP_IF_FALSE 44					      								    								  _DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT_1.py
							      								    								  ", line 26, in f_filled     return n % ( n % 2 ) %
4 14 LOAD_FAST 1 ( sum )				      								    								   2 ZeroDivisionError: integer division or modulo b
16 LOAD_GLOBAL 0 ( int )				      								    								  y zero
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 10 )					      								    								  
22 BINARY_MODULO					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 30 LOAD_GLOBAL 0 ( int )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_CONST 2 ( 10 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 0 ( n )					      								    								  
42 JUMP_ABSOLUTE 6					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 1 ( sum )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8bc90, file "<d def check ( num ) :					    def check ( num ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  digitSum = 0						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN the SPACETOK 
2 STORE_FAST 1 ( digitSum )				      	  while num > 0 :					    								  
							      	      rem = num % 10					    								  
3 4 SETUP_LOOP 36 ( to 42 )				      	      digitSum = digitSum + rem				    								  
>> 6 LOAD_FAST 0 ( num )				      	      num = num / 10					    								  
8 LOAD_CONST 1 ( 0 )					      	  return ( digitSum % 3 == 0 )				    								  
10 COMPARE_OP 4 ( > )					      								    								  
12 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( num )				      								    								  
16 LOAD_CONST 2 ( 10 )					      								    								  
18 BINARY_MODULO					      								    								  
20 STORE_FAST 2 ( rem )					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( digitSum )				      								    								  
24 LOAD_FAST 2 ( rem )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 1 ( digitSum )				      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( num )				      								    								  
32 LOAD_CONST 2 ( 10 )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 0 ( num )					      								    								  
38 JUMP_ABSOLUTE 6					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 1 ( digitSum )			      								    								  
44 LOAD_CONST 3 ( 3 )					      								    								  
46 BINARY_MODULO					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_N_UNDER_MODULO_P				      COMPUTE_N_UNDER_MODULO_P					    COMPUTE_N_UNDER_MODULO_P					  COMPUTE_N_UNDER_MODULO_P
--							      --							    --								  --
Disassembly of <code object modFact at 0x7fbac<<unk>> de40, f def modFact ( n , p ) :					    def modadjadjactntntn1 ( n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if n >= p :						    	if n >= 0 :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( p )					      	      return 0						    	    return 0						  /eval_scripts/dis_sa-python_sa.test/COMPUTE_N_UNDE
4 COMPARE_OP 5 ( >= )					      	  result = 1						    	elif n >= 0 :						  R_MODULO_P.py", line 134, in <module>	    if f_fil
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 1 , n + 1 ) :			    	    return 0						  led(*parameters_set) == f_gold(*parameters_set): T
							      	      result = ( result * i ) % p			    	elif n >= 0 :						  ypeError: f_filled() takes 1 positional argument b
3 8 LOAD_CONST 1 ( 0 )					      	  return result						    	    return 0						  ut 2 were given
10 RETURN_VALUE						      								    	elif n <= 1 :						  
							      								    	    return 0						  
4 >> 12 LOAD_CONST 2 ( 1 )				      								    	elif n <= 1 :						  
14 STORE_FAST 2 ( result )				      								    	    return 0						  
							      								    	elif n <= 1 :						  
5 16 SETUP_LOOP 34 ( to 52 )				      								    	    return 0						  
18 LOAD_GLOBAL 0 ( range )				      								    	elif n <= 1 :						  
20 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
22 LOAD_FAST 0 ( n )					      								    	elif n <= 1 :						  
24 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
26 BINARY_ADD						      								    	elif n <= 1 :						  
28 CALL_FUNCTION 2					      								    	    return 0						  
30 GET_ITER						      								    	elif n <= 1 :						  
>> 32 FOR_ITER 16 ( to 50 )				      								    	    return 0						  
34 STORE_FAST 3 ( i )					      								    	elif n <= 1 :						  
							      								    	    return 0						  
6 36 LOAD_FAST 2 ( result )				      								    	elif n <= 1 :						  
38 LOAD_FAST 3 ( i )					      								    	    return 0						  
40 BINARY_MULTIPLY					      								    	elif n <= 1 :						  
42 LOAD_FAST 1 ( p )					      								    	    return 0						  
44 BINARY_MODULO					      								    	elif n <= 1 :						  
46 STORE_FAST 2 ( result )				      								    	    return 0						  
48 JUMP_ABSOLUTE 32					      								    	elif n <= 1 :						  
>> 50 POP_BLOCK						      								    	    return 0						  
							      								    	elif n <= 1 :						  
7 >> 52 LOAD_FAST 2 ( result )				      								    	    return 0						  
54 RETURN_VALUE NEW_LINE				      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7fbac0e8bc90, fil def squareRoot ( n ) :					    def squareRoot ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  x = n							    	n = n [ 1 : ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( x )					      	  y = 1							    	n = n [ 2 : ]						  /eval_scripts/dis_sa-python_sa.test/SQUARE_ROOT_OF
							      	  e = 0.000001						    	for i in range ( n ) :					  _A_PERFECT_SQUARE.py", line 50, in <module>	  if
3 4 LOAD_CONST 1 ( 1 )					      	  while ( x - y > e ) :					    	    n [ i : i + 1 ] = n [ i : i + 1 ]			   abs(1 - (0.0000001 + abs(f_gold(*parameters_set))
6 STORE_FAST 2 ( y )					      	      x = ( x + y ) / 2					    	return n						  ) / (abs(f_filled(*parameters_set)) + 0.0000001))
							      	      y = n / x						    								  < 0.001:   File "/home/ubuntu/TransCoder/models/ev
4 8 LOAD_CONST 2 ( 1e-06 )				      	  return x						    								  al/bt/152w65bl69/eval_scripts/dis_sa-python_sa.tes
10 STORE_FAST 3 ( e )					      								    								  t/SQUARE_ROOT_OF_A_PERFECT_SQUARE.py", line 28, in
							      								    								   f_filled	n = n [ 1 : ] TypeError: 'float' obj
5 12 SETUP_LOOP 36 ( to 50 )				      								    								  ect is not subscriptable
>> 14 LOAD_FAST 1 ( x )					      								    								  
16 LOAD_FAST 2 ( y )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_FAST 3 ( e )					      								    								  
22 COMPARE_OP 4 ( > )					      								    								  
24 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( x )					      								    								  
28 LOAD_FAST 2 ( y )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 STORE_FAST 1 ( x )					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_FAST 1 ( x )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 STORE_FAST 2 ( y )					      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 1 ( x )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
Disassembly of <code object checkcircle at 0x7fbac<<unk>> d54 def checkcircle ( r , R , r1 , x1 , y1 ) :		    def checkcircle ( fbfbacacstic , x1 , y1 , y1 , y1 , y2 , y2  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( int )				      	  dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )		    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_GLOBAL 1 ( math )				      	  return ( dis - r1 >= R and dis + r1 <= r )		    								  /CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FO
4 LOAD_METHOD 2 ( sqrt )				      								    								  RMED_TWO_CONCENTRIC_CIRCLES.py", line 26     if __
6 LOAD_FAST 3 ( x1 )					      								    								  name__ == '__main__':	     ^ SyntaxError: invalid
8 LOAD_FAST 3 ( x1 )					      								    								  syntax
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 4 ( y1 )					      								    								  
14 LOAD_FAST 4 ( y1 )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_METHOD 1					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 STORE_FAST 5 ( dis )					      								    								  
							      								    								  
3 26 LOAD_FAST 5 ( dis )				      								    								  
28 LOAD_FAST 2 ( r1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_FAST 1 ( R )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 JUMP_IF_FALSE_OR_POP 48				      								    								  
38 LOAD_FAST 5 ( dis )					      								    								  
40 LOAD_FAST 2 ( r1 )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 0 ( r )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
>> 48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
Disassembly of <code object getSum at 0x7fbac<<unk>> d540, fi def getSum ( n ) :					    def getSum ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	return ( 0 , sum ( n ) )				  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( sum )					      	  while ( n != 0 ) :					    								  /eval_scripts/dis_sa-python_sa.test/HOW_CAN_WE_SUM
							      	      sum = sum + int ( n % 10 )			    								  _THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT.
3 4 SETUP_LOOP 40 ( to 46 )				      	      n = int ( n / 10 )				    								  py", line 44, in <module>	if f_filled(*paramet
>> 6 LOAD_FAST 0 ( n )					      	  return sum						    								  ers_set) == f_gold(*parameters_set):	 File "/home
8 LOAD_CONST 1 ( 0 )					      								    								  /ubuntu/TransCoder/models/eval/bt/152w65bl69/eval_
10 COMPARE_OP 3 ( != )					      								    								  scripts/dis_sa-python_sa.test/HOW_CAN_WE_SUM_THE_D
12 POP_JUMP_IF_FALSE 44					      								    								  IGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT.py", l
							      								    								  ine 26, in f_filled	  return ( 0 , sum ( n ) ) T
4 14 LOAD_FAST 1 ( sum )				      								    								  ypeError: 'int' object is not iterable
16 LOAD_GLOBAL 0 ( int )				      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 10 )					      								    								  
22 BINARY_MODULO					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 30 LOAD_GLOBAL 0 ( int )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_CONST 2 ( 10 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 0 ( n )					      								    								  
42 JUMP_ABSOLUTE 6					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 1 ( sum )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
Disassembly of <code object playGame at 0x7fbac0e89d20, file  def playGame ( arr , n ) :				    def playGame ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	"""							  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				     Returns set of the list of the list of the list of the list  
4 STORE_FAST 2 ( s )					      	      s.add ( arr [ i ] )				     of the list of list of the list of list of list		  
							      	  return 1 if len ( s ) % 2 == 0 else 2			     """							  
3 6 SETUP_LOOP 30 ( to 38 )				      								    	# if all list of the list of list			  
8 LOAD_GLOBAL 1 ( range )				      								    	for i in arr :						  
10 LOAD_FAST 1 ( n )					      								    	    if i == 0 :						  
12 CALL_FUNCTION 1					      								    		return i					  
14 GET_ITER						      								    	return arr						  
>> 16 FOR_ITER 18 ( to 36 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( s )					      								    								  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_GLOBAL 3 ( len )				      								    								  
40 LOAD_FAST 2 ( s )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_CONST 1 ( 2 )					      								    								  
46 BINARY_MODULO					      								    								  
48 LOAD_CONST 2 ( 0 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 RETURN_VALUE						      								    								  
>> 58 LOAD_CONST 1 ( 2 )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
Disassembly of <code object numberOfWays at 0x7fbac0e8bc90, f def numberOfWays ( x ) :					    def numberOfWays ( x ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  if x == 0 or x == 1 :					    	if x == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return x						  
4 COMPARE_OP 2 ( == )					      	  else :						    	elif x == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	      return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	    return x						  
8 LOAD_FAST 0 ( x )					      								    	elif x == 0 :						  
10 LOAD_CONST 2 ( 1 )					      								    	    return x						  
12 COMPARE_OP 2 ( == )					      								    	elif x == 0 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return x						  
							      								    	elif x == 0 :						  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    	    return x						  
18 RETURN_VALUE						      								    	elif x == 0 :						  
							      								    	    return x						  
5 >> 20 LOAD_GLOBAL 0 ( numberOfWays )			      								    	elif x == 0 :						  
22 LOAD_FAST 0 ( x )					      								    	    return x						  
24 LOAD_CONST 2 ( 1 )					      								    	elif x == 0 :						  
26 BINARY_SUBTRACT					      								    	    return x						  
28 CALL_FUNCTION 1					      								    	elif x == 0 :						  
30 LOAD_FAST 0 ( x )					      								    	    return x						  
32 LOAD_CONST 2 ( 1 )					      								    	elif x == 0 :						  
34 BINARY_SUBTRACT					      								    	    return x						  
36 LOAD_GLOBAL 0 ( numberOfWays )			      								    	elif x == 0 :						  
38 LOAD_FAST 0 ( x )					      								    	    return x						  
40 LOAD_CONST 3 ( 2 )					      								    	elif x == 0 :						  
42 BINARY_SUBTRACT					      								    	    return x						  
44 CALL_FUNCTION 1					      								    	elif x == 0 :						  
46 BINARY_MULTIPLY					      								    	    return x						  
48 BINARY_ADD						      								    	elif x == 0 :						  
50 RETURN_VALUE						      								    	    return x						  
52 LOAD_CONST 0 ( None )				      								    	elif x == 0 :						  
54 RETURN_VALUE NEW_LINE				      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
-							      -								    	elif x == 0 :-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
Disassembly of <code object numberOfPaths at 0x7fbac0e89d20,  def numberOfPaths ( m , n ) :				    def numberOfPaths ( m , n ) :				  script_not_found : None
2 0 SETUP_LOOP 50 ( to 52 )				      	  for i in range ( n , ( m + n - 1 ) ) :		    	for n in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      path *= i ;					    	    n = n						  
4 LOAD_FAST 1 ( n )					      	      path //= ( i - n + 1 ) ;				    	return n						  
6 LOAD_FAST 0 ( m )					      	  return path ;						    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 BINARY_ADD						      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 28 ( to 50 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 24 LOAD_FAST 3 ( path )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 INPLACE_MULTIPLY					      								    								  
30 STORE_FAST 3 ( path )				      								    								  
							      								    								  
4 32 LOAD_FAST 3 ( path )				      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 INPLACE_FLOOR_DIVIDE					      								    								  
46 STORE_FAST 3 ( path )				      								    								  
48 JUMP_ABSOLUTE 20					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_FAST 3 ( path )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_
--							      --							    --								  --
Disassembly of <code object isPossibleToMakeDivisible at 0x7f def isPossibleToMakeDivisible ( arr , n ) :		    def isPossiblebleMakeDiDivisible ( arr , n ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  remainder = 0						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN the SPACETOK l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( remainder )				      	  for i in range ( 0 , n ) :				    								  /POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_AL
							      	      remainder = ( remainder + arr [ i ] ) % 3		    								  L_DIGITS_IN_AN_ARRAY.py", line 45	print("#Resu
3 4 SETUP_LOOP 34 ( to 40 )				      	  return ( remainder == 0 )				    								  lts: %i, %i" % (n_success, len(param)))
6 LOAD_GLOBAL 0 ( range )				      								    								  					      ^ Synt
8 LOAD_CONST 1 ( 0 )					      								    								  axError: EOF while scanning triple-quoted string l
10 LOAD_FAST 1 ( n )					      								    								  iteral
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 20 ( to 38 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( remainder )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_CONST 2 ( 3 )					      								    								  
32 BINARY_MODULO					      								    								  
34 STORE_FAST 2 ( remainder )				      								    								  
36 JUMP_ABSOLUTE 16					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_FAST 2 ( remainder )			      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
Disassembly of <code object isPower at 0x7fbac<<unk>> d540, f def isPower ( x , y ) :					    def isPower ( x , y ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( math )				      	  res1 = math.log ( y ) / math.log ( x ) ;		    	""" STRNEWLINE SPACETOKEN math : STRNEWLINE SPACETOKEN ma l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_METHOD 1 ( log )					      	  res2 = math.log ( y ) / math.log ( x ) ;		    								  /CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1.py
4 LOAD_FAST 1 ( y )					      	  return 1 if ( res1 == res2 ) else 0 ;			    								  ", line 46	 print("#Results: %i, %i" % (n_succe
6 CALL_METHOD 1						      								    								  ss, len(param)))
8 LOAD_GLOBAL 0 ( math )				      								    								  		       ^ SyntaxError: EOF while scan
10 LOAD_METHOD 1 ( log )				      								    								  ning triple-quoted string literal
12 LOAD_FAST 0 ( x )					      								    								  
14 CALL_METHOD 1					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 STORE_FAST 2 ( res1 )				      								    								  
							      								    								  
3 20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 1 ( log )				      								    								  
24 LOAD_FAST 1 ( y )					      								    								  
26 CALL_METHOD 1					      								    								  
28 LOAD_GLOBAL 0 ( math )				      								    								  
30 LOAD_METHOD 1 ( log )				      								    								  
32 LOAD_FAST 0 ( x )					      								    								  
34 CALL_METHOD 1					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 STORE_FAST 3 ( res2 )				      								    								  
							      								    								  
4 40 LOAD_FAST 2 ( res1 )				      								    								  
42 LOAD_FAST 3 ( res2 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 RETURN_VALUE						      								    								  
>> 52 LOAD_CONST 2 ( 0 )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object countDigits at 0x7fbac0e8bc90, fi def countDigits ( a , b ) :				    def countDigits ( a , b ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  if ( a == 0 or b == 0 ) :				    	if a == 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 0						  /NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1.py", line 116
4 COMPARE_OP 2 ( == )					      	  return math.floor ( math.log10 ( abs ( a ) ) + math.log10 	elif a == 0 :						       elif a == 0		 ^ SyntaxError: inva
6 POP_JUMP_IF_TRUE 16					      								    	    return 0						  lid syntax
8 LOAD_FAST 1 ( b )					      								    	elif a == 0 :						  
10 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	elif a == 0 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return 0						  
							      								    	elif a == 0 :						  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    	    return 0						  
18 RETURN_VALUE						      								    	elif a == 0 :						  
							      								    	    return 0						  
4 >> 20 LOAD_GLOBAL 0 ( math )				      								    	elif a == 0 :						  
22 LOAD_METHOD 1 ( floor )				      								    	    return 0						  
24 LOAD_GLOBAL 0 ( math )				      								    	elif a == 0 :						  
26 LOAD_METHOD 2 ( log10 )				      								    	    return 0						  
28 LOAD_GLOBAL 3 ( abs )				      								    	elif a == 0 :						  
30 LOAD_FAST 0 ( a )					      								    	    return 0						  
32 CALL_FUNCTION 1					      								    	elif a == 0 :						  
34 CALL_METHOD 1					      								    	    return 0						  
36 LOAD_GLOBAL 0 ( math )				      								    	elif a == 0 :						  
38 LOAD_METHOD 2 ( log10 )				      								    	    return 0						  
40 LOAD_GLOBAL 3 ( abs )				      								    	elif a == 0 :						  
42 LOAD_FAST 1 ( b )					      								    	    return 0						  
44 CALL_FUNCTION 1					      								    	elif a == 0 :						  
46 CALL_METHOD 1					      								    	    return 0						  
48 BINARY_ADD						      								    	elif a == 0 :						  
50 CALL_METHOD 1					      								    	    return 0						  
52 LOAD_CONST 2 ( 1 )					      								    	elif a == 0 :						  
54 BINARY_ADD						      								    	    return 0						  
56 RETURN_VALUE NEW_LINE				      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
-							      -								    	elif a == 0-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
Disassembly of <code object exponential at 0x7fbac<<unk>> de4 def exponential ( n , x ) :				    def exponential ( n , x , y = 1 , n = 1 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 1.0 )				      	  sum = 1.0						    	"""							  
2 STORE_FAST 2 ( sum )					      	  for i in range ( n , 0 , - 1 ) :			     Return the exponential exponential exponential exponential e 
							      	      sum = 1 + x * sum / i				     """							  
3 4 SETUP_LOOP 36 ( to 42 )				      	  print ( "e^x =" , sum )				    	for x in range ( n ) :					  
6 LOAD_GLOBAL 0 ( range )				      								    	    if n < 0 :						  
8 LOAD_FAST 0 ( n )					      								    		return x					  
10 LOAD_CONST 2 ( 0 )					      								    	return np.sum ( n )					  
12 LOAD_CONST 3 ( - 1 )					      								    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 20 ( to 40 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 LOAD_CONST 4 ( 1 )					      								    								  
24 LOAD_FAST 1 ( x )					      								    								  
26 LOAD_FAST 2 ( sum )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 2 ( sum )					      								    								  
38 JUMP_ABSOLUTE 18					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 LOAD_GLOBAL 1 ( print )				      								    								  
44 LOAD_CONST 5 ( 'e^x =' )				      								    								  
46 LOAD_FAST 2 ( sum )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 POP_TOP						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object answer_query at 0x7fbac0e89d20, f def answer_query ( a , n , l , r ) :			    def answer_query ( a , l , count , count ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 4 ( count )				      	  for i in range ( l , r ) :				    	count = 0						  /NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE.py", li
							      	      if ( a [ i ] == a [ i + 1 ] ) :			    	count = count						  ne 25	    def f_filled ( a , l , count , count ) :
3 4 SETUP_LOOP 46 ( to 52 )				      		  count += 1					    	count += 1						       ^ SyntaxError: duplicate argument 'count' in
6 LOAD_GLOBAL 0 ( range )				      	  return count						    	count += 1						  function definition
8 LOAD_FAST 2 ( l )					      								    	count += 1						  
10 LOAD_FAST 3 ( r )					      								    	count += 1						  
12 CALL_FUNCTION 2					      								    	count += 1						  
14 GET_ITER						      								    	count += 1						  
>> 16 FOR_ITER 32 ( to 50 )				      								    	count += 1						  
18 STORE_FAST 5 ( i )					      								    	count += 1						  
							      								    	count += 1						  
4 20 LOAD_FAST 0 ( a )					      								    	count += 1						  
22 LOAD_FAST 5 ( i )					      								    	count += 1						  
24 BINARY_SUBSCR					      								    	count += 1						  
26 LOAD_FAST 0 ( a )					      								    	count += 1						  
28 LOAD_FAST 5 ( i )					      								    	count += 1						  
30 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
32 BINARY_ADD						      								    	count += 1						  
34 BINARY_SUBSCR					      								    	count += 1						  
36 COMPARE_OP 2 ( == )					      								    	count += 1						  
38 POP_JUMP_IF_FALSE 16					      								    	count += 1						  
							      								    	count += 1						  
5 40 LOAD_FAST 4 ( count )				      								    	count += 1						  
42 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
44 INPLACE_ADD						      								    	count += 1						  
46 STORE_FAST 4 ( count )				      								    	count += 1						  
48 JUMP_ABSOLUTE 16					      								    	count += 1						  
>> 50 POP_BLOCK						      								    	count += 1						  
							      								    	count += 1						  
6 >> 52 LOAD_FAST 4 ( count )				      								    	count += 1						  
54 RETURN_VALUE NEW_LINE				      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
Disassembly of <code object maxArea at 0x7fbac0e89d20, file " def maxArea ( a , b , c , d ) :				    def maxArea ( a , b , b , c , c , c ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  semiperimeter = ( a + b + c + d ) / 2			    	return ( a , b )					  
2 LOAD_FAST 1 ( b )					      	  return math.sqrt ( ( semiperimeter - a ) * ( semiperimete 								  
4 BINARY_ADD						      								    								  
6 LOAD_FAST 2 ( c )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_FAST 3 ( d )					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_CONST 1 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 STORE_FAST 4 ( semiperimeter )			      								    								  
							      								    								  
3 20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 1 ( sqrt )				      								    								  
24 LOAD_FAST 4 ( semiperimeter )			      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_FAST 4 ( semiperimeter )			      								    								  
32 LOAD_FAST 1 ( b )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_FAST 4 ( semiperimeter )			      								    								  
40 LOAD_FAST 2 ( c )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 4 ( semiperimeter )			      								    								  
48 LOAD_FAST 3 ( d )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 CALL_METHOD 1					      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
Disassembly of <code object findTrailingZeros at 0x7fbac0e89d def findTrailingZeros ( n ) :				    def findTrailingZeros ( n ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  i = 5							    	count = 0						  
							      	  while ( n / i >= 1 ) :				    	count = count						  
3 4 LOAD_CONST 2 ( 5 )					      	      count += int ( n / i )				    	count = count						  
6 STORE_FAST 2 ( i )					      	      i *= 5						    	count = count						  
							      	  return int ( count )					    	count = count						  
4 8 SETUP_LOOP 40 ( to 50 )				      								    	count = count						  
>> 10 LOAD_FAST 0 ( n )					      								    	count = count						  
12 LOAD_FAST 2 ( i )					      								    	count += count						  
14 BINARY_TRUE_DIVIDE					      								    	count += count						  
16 LOAD_CONST 3 ( 1 )					      								    	count += count						  
18 COMPARE_OP 5 ( >= )					      								    	count += count						  
20 POP_JUMP_IF_FALSE 48					      								    	count += count						  
							      								    	count += count						  
5 22 LOAD_FAST 1 ( count )				      								    	count += count						  
24 LOAD_GLOBAL 0 ( int )				      								    	count += count						  
26 LOAD_FAST 0 ( n )					      								    	count += count						  
28 LOAD_FAST 2 ( i )					      								    	count += count						  
30 BINARY_TRUE_DIVIDE					      								    	count += count						  
32 CALL_FUNCTION 1					      								    	count += count						  
34 INPLACE_ADD						      								    	count += count						  
36 STORE_FAST 1 ( count )				      								    	count += count						  
							      								    	count += count						  
6 38 LOAD_FAST 2 ( i )					      								    	count += count						  
40 LOAD_CONST 2 ( 5 )					      								    	count += count						  
42 INPLACE_MULTIPLY					      								    	count += count						  
44 STORE_FAST 2 ( i )					      								    	count += count						  
46 JUMP_ABSOLUTE 10					      								    	count += count						  
>> 48 POP_BLOCK						      								    	count += count						  
							      								    	count += count						  
7 >> 50 LOAD_GLOBAL 0 ( int )				      								    	count += count						  
52 LOAD_FAST 1 ( count )				      								    	count += count						  
54 CALL_FUNCTION 1					      								    	count += count						  
56 RETURN_VALUE NEW_LINE				      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS
--							      --							    --								  --
Disassembly of <code object squareRootExists at 0x7fbac<<unk> def squareRootExists ( n , p ) :				    def squareRootExists ( n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  n = n % p						    	n = n [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( p )					      	  for x in range ( 2 , p , 1 ) :			    	n = n [ 1 ]						  /eval_scripts/dis_sa-python_sa.test/EULERS_CRITERI
4 BINARY_MODULO						      	      if ( ( x * x ) % p == n ) :			    	n = n [ 2 ]						  ON_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS.py",
6 STORE_FAST 0 ( n )					      		  return True					    	for n in n :						   line 49, in <module>	    if f_filled(*parameters_
							      	  return False						    	    n = n [ n ]						  set) == f_gold(*parameters_set): TypeError: f_fill
3 8 SETUP_LOOP 40 ( to 50 )				      								    	return n						  ed() takes 1 positional argument but 2 were given
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 2 )					      								    								  
14 LOAD_FAST 1 ( p )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 CALL_FUNCTION 3					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 24 ( to 48 )				      								    								  
24 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( x )					      								    								  
28 LOAD_FAST 2 ( x )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 1 ( p )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
5 42 LOAD_CONST 3 ( True )				      								    								  
44 RETURN_VALUE						      								    								  
46 JUMP_ABSOLUTE 22					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
6 >> 50 LOAD_CONST 4 ( False )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
Disassembly of <code object printFactorialNums at 0x7fbac0e89 def printFactorialNums ( n ) :				    def printFactorialNums ( n , fact ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  fact = 1						    	n = 1							  
2 STORE_FAST 1 ( fact )					      	  x = 2							    	n = n * fact ( n )					  
							      	  while fact <= n :					    	n = n * fact ( n )					  
3 4 LOAD_CONST 2 ( 2 )					      	      print ( fact , end = " " )			    	n = n * fact ( n )					  
6 STORE_FAST 2 ( x )					      	      fact = fact * x					    	n = n * fact ( n )					  
							      	      x += 1						    	n = n * fact ( n )					  
4 8 SETUP_LOOP 40 ( to 50 )				      								    	n = n * fact ( n )					  
>> 10 LOAD_FAST 1 ( fact )				      								    	n = n * fact ( n )					  
12 LOAD_FAST 0 ( n )					      								    	n = n * fact ( n )					  
14 COMPARE_OP 1 ( <= )					      								    	n = n * n						  
16 POP_JUMP_IF_FALSE 48					      								    	n = n * fact ( n )					  
							      								    	n = n * fact ( n )					  
5 18 LOAD_GLOBAL 0 ( print )				      								    	n = n * n						  
20 LOAD_FAST 1 ( fact )					      								    	n = n * n						  
22 LOAD_CONST 3 ( ' ' )					      								    	n = n * n						  
24 LOAD_CONST 4 ( ( 'end' , ) )				      								    	n = n * n						  
26 CALL_FUNCTION_KW 2					      								    	n = n * n						  
28 POP_TOP						      								    	n /= n							  
							      								    	n /= n							  
6 30 LOAD_FAST 1 ( fact )				      								    	n /= n							  
32 LOAD_FAST 2 ( x )					      								    	n /= n							  
34 BINARY_MULTIPLY					      								    	n /= n							  
36 STORE_FAST 1 ( fact )				      								    	n /= n							  
							      								    	n /= n							  
7 38 LOAD_FAST 2 ( x )					      								    	n /= n							  
40 LOAD_CONST 1 ( 1 )					      								    	n /= n							  
42 INPLACE_ADD						      								    	n /= n							  
44 STORE_FAST 2 ( x )					      								    	n /= n							  
46 JUMP_ABSOLUTE 10					      								    	n /= n							  
>> 48 POP_BLOCK						      								    	n /= n							  
>> 50 LOAD_CONST 0 ( None )				      								    	n /= n							  
52 RETURN_VALUE NEW_LINE				      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
							      								    	n /= n							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH      COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	    COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	  COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH
--							      --							    --								  --
Disassembly of <code object compute at 0x7fbac<<unk>> de40, f def compute ( graph , N ) :				    def compute ( graph , N ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	"""							  
2 STORE_FAST 2 ( count )				      	  for i in range ( 1 , N + 1 ) :			     Return the given array of the given array of the given array 
							      	      if ( len ( graph [ i ] ) == 0 ) :			     """							  
3 4 SETUP_LOOP 46 ( to 52 )				      		  count += 1					    	for i in range ( N ) :					  
6 LOAD_GLOBAL 0 ( range )				      	  return count						    	    if len ( N ) > 0 :					  
8 LOAD_CONST 2 ( 1 )					      								    		return True					  
10 LOAD_FAST 1 ( N )					      								    	return True						  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 28 ( to 50 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_GLOBAL 1 ( len )				      								    								  
26 LOAD_FAST 0 ( graph )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_FAST 2 ( count )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 2 ( count )				      								    								  
48 JUMP_ABSOLUTE 20					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 LOAD_FAST 2 ( count )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		      PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		    PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		  PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX
--							      --							    --								  --
Disassembly of <code object scalarProductMat at 0x7fbac<<unk> def scalarProductMat ( mat , k ) :			    def scalarProductMat ( mat , k , v , v , v , v , v , v , v ,  script_not_found : None
2 0 SETUP_LOOP 58 ( to 60 )				      	  for i in range ( N ) :				    	for i in range ( v ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    v = v [ i ]						  
4 LOAD_GLOBAL 1 ( N )					      		  mat [ i ] [ j ] = mat [ i ] [ j ] * k		    return v							  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 46 ( to 58 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 40 ( to 56 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 28 ( to 54 )				      								    								  
26 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( mat )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( k )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 STORE_SUBSCR						      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 JUMP_ABSOLUTE 10					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
Disassembly of <code object swap at 0x7fbac0e8bc90, file "<di def swap ( xp , yp ) :					    def swap ( xp , yp , axis = 1 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( xp )					      	  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	if xp.shape == 0 :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	    return xp.array					  /eval_scripts/dis_sa-python_sa.test/SWAP_TWO_NUMBE
4 BINARY_SUBSCR						      	  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    								  RS_WITHOUT_USING_TEMPORARY_VARIABLE.py", line 55,
6 LOAD_FAST 1 ( yp )					      								    								  in <module>	  f_filled(*(filled_function_param[i
8 LOAD_CONST 1 ( 0 )					      								    								  ]))	File "/home/ubuntu/TransCoder/models/eval/bt
10 BINARY_SUBSCR					      								    								  /152w65bl69/eval_scripts/dis_sa-python_sa.test/SWA
12 BINARY_XOR						      								    								  P_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE.py"
14 LOAD_FAST 0 ( xp )					      								    								  , line 24, in f_filled     if xp.shape == 0 : Attr
16 LOAD_CONST 1 ( 0 )					      								    								  ibuteError: 'list' object has no attribute 'shape'
18 STORE_SUBSCR						      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( xp )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( yp )					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_XOR						      								    								  
34 LOAD_FAST 1 ( yp )					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 STORE_SUBSCR						      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( xp )					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 1 ( yp )					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_XOR						      								    								  
54 LOAD_FAST 0 ( xp )					      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 STORE_SUBSCR						      								    								  
60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
Disassembly of <code object countSubStr at 0x7fbac<<unk>> de4 def countSubStr ( st , n ) :				    def countSubStr ( st , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  m = 0							    	"""							  
2 STORE_FAST 2 ( m )					      	  for i in range ( 0 , n ) :				     Returns the list of numbers in the given list of numbers	  
							      	      if ( st [ i ] == '1' ) :				     """							  
3 4 SETUP_LOOP 38 ( to 44 )				      		  m = m + 1					    	for i in range ( n ) :					  
6 LOAD_GLOBAL 0 ( range )				      	  return m * ( m - 1 ) // 2				    	    if n [ i ] == n [ i ] :				  
8 LOAD_CONST 1 ( 0 )					      								    		return i					  
10 LOAD_FAST 1 ( n )					      								    	return None						  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 24 ( to 42 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( st )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 2 ( '1' )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( m )					      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 2 ( m )					      								    								  
40 JUMP_ABSOLUTE 16					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_FAST 2 ( m )				      								    								  
46 LOAD_FAST 2 ( m )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 LOAD_CONST 4 ( 2 )					      								    								  
56 BINARY_FLOOR_DIVIDE					      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( count )				      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	count = 0						  /NEXT_POWER_OF_2.py", line 146     return count
							      	      return n						    	count = count						    ^ SyntaxError: 'return' outside function
3 4 LOAD_FAST 0 ( n )					      	  while ( n != 0 ) :					    	count = count						  
6 POP_JUMP_IF_FALSE 24					      	      n >>= 1						    	count = count						  
8 LOAD_FAST 0 ( n )					      	      count += 1					    	count += 1						  
10 LOAD_FAST 0 ( n )					      	  return 1 << count ;					    	count += 1						  
12 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
14 BINARY_SUBTRACT					      								    	count += 1						  
16 BINARY_AND						      								    	count += 1						  
18 POP_JUMP_IF_TRUE 24					      								    	count += 1						  
							      								    	count += 1						  
4 20 LOAD_FAST 0 ( n )					      								    	count += 1						  
22 RETURN_VALUE						      								    	count += 1						  
							      								    	count += 1						  
5 >> 24 SETUP_LOOP 28 ( to 54 )				      								    	count += 1						  
>> 26 LOAD_FAST 0 ( n )					      								    	count += 1						  
28 LOAD_CONST 1 ( 0 )					      								    	count += 1						  
30 COMPARE_OP 3 ( != )					      								    	count += 1						  
32 POP_JUMP_IF_FALSE 52					      								    	count += 1						  
							      								    	count += 1						  
6 34 LOAD_FAST 0 ( n )					      								    	count += 1						  
36 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
38 INPLACE_RSHIFT					      								    	count += 1						  
40 STORE_FAST 0 ( n )					      								    	count += 1						  
							      								    	count += 1						  
7 42 LOAD_FAST 1 ( count )				      								    	count += 1						  
44 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
46 INPLACE_ADD						      								    	count += 1						  
48 STORE_FAST 1 ( count )				      								    	count += 1						  
50 JUMP_ABSOLUTE 26					      								    	count += 1						  
>> 52 POP_BLOCK						      								    	count += 1						  
							      								    	count += 1						  
8 >> 54 LOAD_CONST 2 ( 1 )				      								    	count += 1						  
56 LOAD_FAST 1 ( count )				      								    	count += 1						  
58 BINARY_LSHIFT					      								    	count += 1						  
60 RETURN_VALUE NEW_LINE				      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE		  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
--							      --							    --								  --
Disassembly of <code object arraySortedOrNot at 0x7fbac<<unk> def arraySortedOrNot ( arr ) :				    def arraySortedOrNot ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 LOAD_FAST 0 ( arr )					      	  if n == 1 or n == 0 :					    								  
4 CALL_FUNCTION 1					      	      return True					    								  
6 STORE_FAST 1 ( n )					      	  return arr [ 0 ] <= arr [ 1 ] and arraySortedOrNot ( arr  								  
							      								    								  
3 8 LOAD_FAST 1 ( n )					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_TRUE 24					      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 >> 24 LOAD_CONST 3 ( True )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
5 >> 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 1 ( <= )					      								    								  
42 JUMP_IF_FALSE_OR_POP 58				      								    								  
44 LOAD_GLOBAL 1 ( arraySortedOrNot )			      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 LOAD_CONST 0 ( None )				      								    								  
52 BUILD_SLICE 2					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
>> 58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object countInRange at 0x7fbac0e8bc90, f def countInRange ( arr , n , x , y ) :			    def countAppro0x70x700000000000000000000000000000000000000000 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 4 ( count )				      	  for i in range ( n ) :				    								  /QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE.
							      	      if ( arr [ i ] >= x and arr [ i ] <= y ) :	    								  py", line 25	   def f_filled		       ^ Syn
3 4 SETUP_LOOP 48 ( to 54 )				      		  count += 1					    								  taxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      	  return count						    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 36 ( to 52 )				      								    								  
16 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 5 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 2 ( x )					      								    								  
26 COMPARE_OP 5 ( >= )					      								    								  
28 POP_JUMP_IF_FALSE 14					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( y )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 42 LOAD_FAST 4 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( count )				      								    								  
50 JUMP_ABSOLUTE 14					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
6 >> 54 LOAD_FAST 4 ( count )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
Disassembly of <code object query at 0x7fbac0e89d20, file "<d def query ( s , i , j ) :					    def query ( s ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	"""							  
2 LOAD_FAST 0 ( s )					      	  i %= n						     Returns a list of all query and query are found.		  
4 CALL_FUNCTION 1					      	  j %= n						     """							  
6 STORE_FAST 3 ( n )					      	  print ( "Yes" ) if s [ i ] == s [ j ] else print ( "No" ) 	if len ( s ) > 0 :					  
							      								    	    return s						  
3 8 LOAD_FAST 1 ( i )					      								    	return s						  
10 LOAD_FAST 3 ( n )					      								    								  
12 INPLACE_MODULO					      								    								  
14 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 16 LOAD_FAST 2 ( j )					      								    								  
18 LOAD_FAST 3 ( n )					      								    								  
20 INPLACE_MODULO					      								    								  
22 STORE_FAST 2 ( j )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 48					      								    								  
40 LOAD_GLOBAL 1 ( print )				      								    								  
42 LOAD_CONST 1 ( 'Yes' )				      								    								  
44 CALL_FUNCTION 1					      								    								  
46 JUMP_FORWARD 6 ( to 54 )				      								    								  
>> 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 2 ( 'No' )				      								    								  
52 CALL_FUNCTION 1					      								    								  
>> 54 POP_TOP						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
Disassembly of <code object isPowerOfFour at 0x7fbac0e89d20,  def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	n = n [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return False					    	n = n [ 1 : n ]						  /eval_scripts/dis_sa-python_sa.test/FIND_WHETHER_A
4 COMPARE_OP 2 ( == )					      	  while ( n != 1 ) :					    	return n						  _GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT.py", line 48,
6 POP_JUMP_IF_FALSE 12					      	      if ( n % 4 != 0 ) :				    								   in <module>	   if f_filled(*parameters_set) == f
							      		  return False					    								  _gold(*parameters_set):   File "/home/ubuntu/Trans
3 8 LOAD_CONST 2 ( False )				      	      n = n // 4					    								  Coder/models/eval/bt/152w65bl69/eval_scripts/dis_s
10 RETURN_VALUE						      	  return True						    								  a-python_sa.test/FIND_WHETHER_A_GIVEN_NUMBER_IS_A_
							      								    								  POWER_OF_4_OR_NOT.py", line 28, in f_filled	  n
4 >> 12 SETUP_LOOP 36 ( to 50 )				      								    								  = n [ 0 ] TypeError: 'int' object is not subscript
>> 14 LOAD_FAST 0 ( n )					      								    								  able
16 LOAD_CONST 3 ( 1 )					      								    								  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 4 ( 4 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 34 LOAD_CONST 2 ( False )				      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
7 >> 38 LOAD_FAST 0 ( n )				      								    								  
40 LOAD_CONST 4 ( 4 )					      								    								  
42 BINARY_FLOOR_DIVIDE					      								    								  
44 STORE_FAST 0 ( n )					      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_CONST 5 ( True )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_SECTOR					      AREA_OF_A_SECTOR						    AREA_OF_A_SECTOR						  AREA_OF_A_SECTOR
--							      --							    --								  --
Disassembly of <code object SectorArea at 0x7fbac0e8bc90, fil def SectorArea ( radius , angle ) :			    def SectorArea ( fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb script_not_found : None
2 0 LOAD_CONST 1 ( 3.142857142857143 )			      	  pi = 22 / 7						    								  
2 STORE_FAST 2 ( pi )					      	  if angle >= 360 :					    								  
							      	      print ( "Angle not possible" )			    								  
3 4 LOAD_FAST 1 ( angle )				      	      return						    								  
6 LOAD_CONST 2 ( 360 )					      	  else :						    								  
8 COMPARE_OP 5 ( >= )					      	      sector = ( pi * radius ** 2 ) * ( angle / 360 )	    								  
10 POP_JUMP_IF_FALSE 24					      	      print ( sector )					    								  
							      	      return						    								  
4 12 LOAD_GLOBAL 0 ( print )				      								    								  
14 LOAD_CONST 3 ( 'Angle not possible' )		      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 LOAD_CONST 0 ( None )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
7 >> 24 LOAD_FAST 2 ( pi )				      								    								  
26 LOAD_FAST 0 ( radius )				      								    								  
28 LOAD_CONST 4 ( 2 )					      								    								  
30 BINARY_POWER						      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_FAST 1 ( angle )				      								    								  
36 LOAD_CONST 2 ( 360 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 STORE_FAST 3 ( sector )				      								    								  
							      								    								  
8 44 LOAD_GLOBAL 0 ( print )				      								    								  
46 LOAD_FAST 3 ( sector )				      								    								  
48 CALL_FUNCTION 1					      								    								  
50 POP_TOP						      								    								  
							      								    								  
9 52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object countRotations at 0x7fbac0e89d20, def countRotations ( arr , n ) :				    def countRotations ( arr , n , n ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  min = arr [ 0 ]					    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n ) :				    	    return 0						  
4 BINARY_SUBSCR						      	      if ( min > arr [ i ] ) :				    	elif n < 0 :						  
6 STORE_FAST 2 ( min )					      		  min = arr [ i ]				    	    return 0						  
							      		  min_index = i					    	elif n < 0 :						  
3 8 SETUP_LOOP 42 ( to 52 )				      	  return min_index ;					    	    return 0						  
10 LOAD_GLOBAL 0 ( range )				      								    	elif n < 0 :						  
12 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
14 LOAD_FAST 1 ( n )					      								    	elif n < 0 :						  
16 CALL_FUNCTION 2					      								    	    return 0						  
18 GET_ITER						      								    	elif n < 0 :						  
>> 20 FOR_ITER 28 ( to 50 )				      								    	    return 0						  
22 STORE_FAST 3 ( i )					      								    	elif n < 0 :						  
							      								    	    return 0						  
4 24 LOAD_FAST 2 ( min )				      								    	elif n < 0 :						  
26 LOAD_FAST 0 ( arr )					      								    	    return 0						  
28 LOAD_FAST 3 ( i )					      								    	elif n < 0 :						  
30 BINARY_SUBSCR					      								    	    return 0						  
32 COMPARE_OP 4 ( > )					      								    	elif n < 0 :						  
34 POP_JUMP_IF_FALSE 20					      								    	    return 0						  
							      								    	elif n < 0 :						  
5 36 LOAD_FAST 0 ( arr )				      								    	    return 0						  
38 LOAD_FAST 3 ( i )					      								    	elif n < 0 :						  
40 BINARY_SUBSCR					      								    	    return 0						  
42 STORE_FAST 2 ( min )					      								    	elif n < 0 :						  
							      								    	    return 0						  
6 44 LOAD_FAST 3 ( i )					      								    	elif n < 0 :						  
46 STORE_FAST 4 ( min_index )				      								    	    return 0						  
48 JUMP_ABSOLUTE 20					      								    	elif n < 0 :						  
>> 50 POP_BLOCK						      								    	    return 0						  
							      								    	elif n < 0 :						  
7 >> 52 LOAD_FAST 4 ( min_index )			      								    	    return 0						  
54 RETURN_VALUE NEW_LINE				      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
-							      -								    	elif-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e8bc90, file "<d def check ( st ) :					    def check ( 0x7fbac000000000000000000000000000000000000000000 script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    								  
2 LOAD_FAST 0 ( st )					      	  digitSum = 0						    								  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n ) :				    								  
6 STORE_FAST 1 ( n )					      	      digitSum = digitSum + ( int ) ( st [ i ] )	    								  
							      	  return ( digitSum % 9 == 0 )				    								  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 STORE_FAST 2 ( digitSum )				      								    								  
							      								    								  
4 12 SETUP_LOOP 34 ( to 48 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 20 ( to 46 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( digitSum )				      								    								  
30 LOAD_GLOBAL 2 ( int )				      								    								  
32 LOAD_FAST 0 ( st )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 2 ( digitSum )				      								    								  
44 JUMP_ABSOLUTE 24					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 2 ( digitSum )			      								    								  
50 LOAD_CONST 2 ( 9 )					      								    								  
52 BINARY_MODULO					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	      FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	    FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	  FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object findSmallest at 0x7fbac<<unk>> d5 def findSmallest ( arr , n ) :				    def findSmallest ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n ) :				    								  /FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_
							      	      if arr [ i ] <= res :				    								  ARRAY.py", line 48	 print("#Results: %i, %i" %
3 4 SETUP_LOOP 46 ( to 52 )				      		  res = res + arr [ i ]				    								  (n_success, len(param)))
6 LOAD_GLOBAL 0 ( range )				      	      else :						    								  			       ^ SyntaxError: EOF wh
8 LOAD_CONST 2 ( 0 )					      		  break						    								  ile scanning triple-quoted string literal
10 LOAD_FAST 1 ( n )					      	  return res						    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( res )					      								    								  
28 COMPARE_OP 1 ( <= )					      								    								  
30 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( res )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 2 ( res )					      								    								  
44 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 46 BREAK_LOOP					      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
8 >> 52 LOAD_FAST 2 ( res )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
Disassembly of <code object kthgroupsum at 0x7fbac<<unk>> d54 def kthgroupsum ( k ) :					    def kthgroupsum ( k , cur , cur , cur ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( int )				      	  cur = int ( ( k * ( k - 1 ) ) + 1 )			    	return int ( cur [ 0 ] )				  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( k )					      	  sum = 0						    								  /SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS.py", line 27
4 LOAD_FAST 0 ( k )					      	  while k :						    								      def f_filled ( k , cur , cur , cur ) :	 ^ S
6 LOAD_CONST 1 ( 1 )					      	      sum += cur					    								  yntaxError: duplicate argument 'cur' in function d
8 BINARY_SUBTRACT					      	      cur += 2						    								  efinition
10 BINARY_MULTIPLY					      	      k = k - 1						    								  
12 LOAD_CONST 1 ( 1 )					      	  return sum						    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 1					      								    								  
18 STORE_FAST 1 ( cur )					      								    								  
							      								    								  
3 20 LOAD_CONST 2 ( 0 )					      								    								  
22 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
4 24 SETUP_LOOP 32 ( to 58 )				      								    								  
>> 26 LOAD_FAST 0 ( k )					      								    								  
28 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( sum )				      								    								  
32 LOAD_FAST 1 ( cur )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
6 38 LOAD_FAST 1 ( cur )				      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( cur )					      								    								  
							      								    								  
7 46 LOAD_FAST 0 ( k )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 STORE_FAST 0 ( k )					      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 2 ( sum )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE
--							      --							    --								  --
Disassembly of <code object printCountRec at 0x7fbac0e8bc90,  def printCountRec ( dist ) :				    def printCountRec ( dist , * args ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( dist )				      	  if dist < 0 :						    	if len ( dist ) < 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return printCountRec ( dist )			  
4 COMPARE_OP 0 ( < )					      	  if dist == 0 :					    	elif len ( dist ) > 1 :					  
6 POP_JUMP_IF_FALSE 12					      	      return 1						    	    return printCountRec ( dist )			  
							      	  return ( printCountRec ( dist - 1 ) + printCountRec ( dis 	elif len ( dist ) > 1 :					  
3 8 LOAD_CONST 1 ( 0 )					      								    	    printCountRec ( dist )				  
10 RETURN_VALUE						      								    	elif len ( dist ) > 1 :					  
							      								    	    printCountRec ( dist )				  
4 >> 12 LOAD_FAST 0 ( dist )				      								    	elif len ( dist ) > 1 :					  
14 LOAD_CONST 1 ( 0 )					      								    	    printCountRec ( dist )				  
16 COMPARE_OP 2 ( == )					      								    	elif len ( dist ) > 1 :					  
18 POP_JUMP_IF_FALSE 24					      								    	    printCountRec ( dist )				  
							      								    	elif len ( dist ) > 1 :					  
5 20 LOAD_CONST 2 ( 1 )					      								    	    printCountRec ( dist )				  
22 RETURN_VALUE						      								    	else :							  
							      								    	    printCountRec ( dist )				  
6 >> 24 LOAD_GLOBAL 0 ( printCountRec )			      								    	    printCountRec ( dist )				  
26 LOAD_FAST 0 ( dist )					      								    	    printCountRec ( dist )				  
28 LOAD_CONST 2 ( 1 )					      								    	    printCountRec ( dist )				  
30 BINARY_SUBTRACT					      								    	    printCountRec ( dist )				  
32 CALL_FUNCTION 1					      								    	    printCountRec ( dist )				  
34 LOAD_GLOBAL 0 ( printCountRec )			      								    	    printCountRec ( dist )				  
36 LOAD_FAST 0 ( dist )					      								    	    printCountRec ( dist )				  
38 LOAD_CONST 3 ( 2 )					      								    	    printCountRec ( dist )				  
40 BINARY_SUBTRACT					      								    	    printCountRec ( dist )				  
42 CALL_FUNCTION 1					      								    	    printCountRec ( dist )				  
44 BINARY_ADD						      								    	    printCountRec ( dist )				  
46 LOAD_GLOBAL 0 ( printCountRec )			      								    	    printCountRec ( dist )				  
48 LOAD_FAST 0 ( dist )					      								    	    printCountRec ( dist )				  
50 LOAD_CONST 4 ( 3 )					      								    	    printCountRec ( dist )				  
52 BINARY_SUBTRACT					      								    	    printCountRec ( dist )				  
54 CALL_FUNCTION 1					      								    	    printCountRec ( dist )				  
56 BINARY_ADD						      								    	    printCountRec ( dist )				  
58 RETURN_VALUE NEW_LINE				      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
							      								    	    printCountRec ( dist )				  
-							      -								    	    printCountRec (-					  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
Disassembly of <code object firstFactorialDivisibleNumber at  def firstFactorialDivisibleNumber ( x ) :			    def firstFactFactDivisibleNumber ( x ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  i = 1 ;						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( i )					      	  fact = 1 ;						    								  /FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIB
							      	  for i in range ( 1 , x ) :				    								  LE_X.py", line 48	print("#Results: %i, %i" % (
3 4 LOAD_CONST 1 ( 1 )					      	      fact = fact * i					    								  n_success, len(param)))
6 STORE_FAST 2 ( fact )					      	      if ( fact % x == 0 ) :				    								  			      ^ SyntaxError: EOF whi
							      		  break						    								  le scanning triple-quoted string literal
4 8 SETUP_LOOP 40 ( to 50 )				      	  return i						    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 0 ( x )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 26 ( to 48 )				      								    								  
22 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( fact )				      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 STORE_FAST 2 ( fact )				      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( fact )				      								    								  
34 LOAD_FAST 0 ( x )					      								    								  
36 BINARY_MODULO					      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
7 44 BREAK_LOOP						      								    								  
46 JUMP_ABSOLUTE 20					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 1 ( i )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
Disassembly of <code object isPerfectSquare at 0x7fbac0e89d20 def isPerfectSquare ( n ) :				    def isPerfectSquare ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  i = 1							    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( i )					      	  the_sum = 0						    								  /CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBT
							      	  while the_sum < n :					    								  RACTION.py", line 49	   print("#Results: %i, %i"
3 4 LOAD_CONST 2 ( 0 )					      	      the_sum += i					    								  % (n_success, len(param)))
6 STORE_FAST 2 ( the_sum )				      	      if the_sum == n :					    								  				 ^ SyntaxError: EOF
							      		  return True					    								  while scanning triple-quoted string literal
4 8 SETUP_LOOP 40 ( to 50 )				      	      i += 2						    								  
>> 10 LOAD_FAST 2 ( the_sum )				      	  return False						    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( the_sum )				      								    								  
20 LOAD_FAST 1 ( i )					      								    								  
22 INPLACE_ADD						      								    								  
24 STORE_FAST 2 ( the_sum )				      								    								  
							      								    								  
6 26 LOAD_FAST 2 ( the_sum )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
7 34 LOAD_CONST 3 ( True )				      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
8 >> 38 LOAD_FAST 1 ( i )				      								    								  
40 LOAD_CONST 4 ( 2 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( i )					      								    								  
46 JUMP_ABSOLUTE 10					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
9 >> 50 LOAD_CONST 5 ( False )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2					      SORT_ARRAY_WAVE_FORM_2					    SORT_ARRAY_WAVE_FORM_2					  SORT_ARRAY_WAVE_FORM_2
--							      --							    --								  --
Disassembly of <code object sortInWave at 0x7fbac<<unk>> d540 def sortInWave ( arr , n ) :				    def sortInWave ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	if n is None :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_METHOD 0 ( sort )				      	  for i in range ( 0 , n - 1 , 2 ) :			    	    return 0						  /eval_scripts/dis_sa-python_sa.test/SORT_ARRAY_WAV
4 CALL_METHOD 0						      	      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] 	arr = arr.sort ( )					  E_FORM_2.py", line 59, in <module>	 f_filled(*(
6 POP_TOP						      								    	for i in range ( n ) :					  filled_function_param[i]))   File "/home/ubuntu/Tr
							      								    	    arr [ i ] = arr [ i ]				  ansCoder/models/eval/bt/152w65bl69/eval_scripts/di
3 8 SETUP_LOOP 58 ( to 68 )				      								    	return arr						  s_sa-python_sa.test/SORT_ARRAY_WAVE_FORM_2.py", li
10 LOAD_GLOBAL 1 ( range )				      								    								  ne 28, in f_filled	 arr [ i ] = arr [ i ] TypeE
12 LOAD_CONST 1 ( 0 )					      								    								  rror: 'NoneType' object is not subscriptable
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_CONST 3 ( 2 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 38 ( to 66 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 ROT_TWO						      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 26					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
Disassembly of <code object catalan at 0x7fbac<<unk>> d540, f def catalan ( n ) :					    def catalan ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n <= 1 :						    	if n <= 0 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return n						  
4 COMPARE_OP 1 ( <= )					      	  res = 0						    	return ""						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( n ) :				    								  
							      	      res += catalan ( i ) * catalan ( n - i - 1 )	    								  
3 8 LOAD_CONST 1 ( 1 )					      	  return res						    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 0 )				      								    								  
14 STORE_FAST 1 ( res )					      								    								  
							      								    								  
5 16 SETUP_LOOP 44 ( to 62 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 32 ( to 60 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( res )				      								    								  
32 LOAD_GLOBAL 1 ( catalan )				      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 LOAD_GLOBAL 1 ( catalan )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 1 ( res )					      								    								  
58 JUMP_ABSOLUTE 26					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 1 ( res )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER						      DELANNOY_NUMBER						    DELANNOY_NUMBER						  DELANNOY_NUMBER
--							      --							    --								  --
Disassembly of <code object dealnnoy at 0x7fbac<<unk>> de40,  def dealnnoy ( n , m ) :					    def dealnnoy ( n , m , y , z , z , z , z , z , z , z , z , z  script_not_found : None
2 0 LOAD_FAST 1 ( m )					      	  if ( m == 0 or n == 0 ) :				    								  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    								  
4 COMPARE_OP 2 ( == )					      	  return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  								  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( dealnnoy )			      								    								  
22 LOAD_FAST 1 ( m )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 LOAD_GLOBAL 0 ( dealnnoy )				      								    								  
34 LOAD_FAST 1 ( m )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_GLOBAL 0 ( dealnnoy )				      								    								  
52 LOAD_FAST 1 ( m )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 BINARY_ADD						      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
Disassembly of <code object multiply at 0x7fbac<<unk>> d540,  def multiply ( A , B , C ) :				    def multiply ( fbfbacageageageageageageageageageageageageagea script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( N ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    								  
4 LOAD_GLOBAL 1 ( N )					      		  C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]	    								  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 54 ( to 66 )				      								    								  
12 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 48 ( to 64 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 4 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 2 ( C )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( j )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
Disassembly of <code object minSum at 0x7fbac0e8bc90, file "< def minSum ( n ) :					    def minSum ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0 ;						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( sum )					      	  while ( n > 0 ) :					     Return the maximum number of the maximum number of the maxim /eval_scripts/dis_sa-python_sa.test/MINIMIZE_THE_S
							      	      sum += ( n % 10 ) ;				     of the maximum number of the maximum number of the maximum n UM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N.py", line
3 4 SETUP_LOOP 32 ( to 38 )				      	      n //= 10 ;					     maximum number of maximum number of maximum number.	  51, in <module>     if f_filled(*parameters_set) =
>> 6 LOAD_FAST 0 ( n )					      	  if ( sum == 1 ) :					     """							  = f_gold(*parameters_set):   File "/home/ubuntu/Tr
8 LOAD_CONST 1 ( 0 )					      	      return 10 ;					    	return sum ( n )					  ansCoder/models/eval/bt/152w65bl69/eval_scripts/di
10 COMPARE_OP 4 ( > )					      	  return sum ;						    								  s_sa-python_sa.test/MINIMIZE_THE_SUM_OF_DIGITS_OF_
12 POP_JUMP_IF_FALSE 36					      								    								  A_AND_B_SUCH_THAT_A_B_N.py", line 33, in f_filled
							      								    								      return sum ( n ) TypeError: 'int' object is no
4 14 LOAD_FAST 1 ( sum )				      								    								  t iterable
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 10 )					      								    								  
20 BINARY_MODULO					      								    								  
22 INPLACE_ADD						      								    								  
24 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 2 ( 10 )					      								    								  
30 INPLACE_FLOOR_DIVIDE					      								    								  
32 STORE_FAST 0 ( n )					      								    								  
34 JUMP_ABSOLUTE 6					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 1 ( sum )				      								    								  
40 LOAD_CONST 3 ( 1 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_CONST 2 ( 10 )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 1 ( sum )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS
--							      --							    --								  --
Disassembly of <code object countDigits at 0x7fbac<<unk>> de4 def countDigits ( a , b ) :				    def countDigits ( a , b , count , count ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( count )				      	  p = abs ( a * b )					    	count = 0						  /NUMBER_DIGITS_PRODUCT_TWO_NUMBERS.py", line 28
							      	  if ( p == 0 ) :					    	count = 0						    def f_filled ( a , b , count , count ) :	 ^ S
3 4 LOAD_GLOBAL 0 ( abs )				      	      return 1						    	count = 0						  yntaxError: duplicate argument 'count' in function
6 LOAD_FAST 0 ( a )					      	  while ( p > 0 ) :					    	while count < count :					   definition
8 LOAD_FAST 1 ( b )					      	      count = count + 1					    	    count += 1						  
10 BINARY_MULTIPLY					      	      p = p // 10					    	    count += 1						  
12 CALL_FUNCTION 1					      	  return count						    	    count += 1						  
14 STORE_FAST 3 ( p )					      								    	    count += 1						  
							      								    	    count += 1						  
4 16 LOAD_FAST 3 ( p )					      								    	    count += 1						  
18 LOAD_CONST 1 ( 0 )					      								    	    count += 1						  
20 COMPARE_OP 2 ( == )					      								    	    count += 1						  
22 POP_JUMP_IF_FALSE 28					      								    	    count += 1						  
							      								    	    count += 1						  
5 24 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
26 RETURN_VALUE						      								    	    count += 1						  
							      								    	    count += 1						  
6 >> 28 SETUP_LOOP 28 ( to 58 )				      								    	    count += 1						  
>> 30 LOAD_FAST 3 ( p )					      								    	    count += 1						  
32 LOAD_CONST 1 ( 0 )					      								    	    count += 1						  
34 COMPARE_OP 4 ( > )					      								    	    count += 1						  
36 POP_JUMP_IF_FALSE 56					      								    	    count += 1						  
							      								    	    count += 1						  
7 38 LOAD_FAST 2 ( count )				      								    	    count += 1						  
40 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
42 BINARY_ADD						      								    	    count += 1						  
44 STORE_FAST 2 ( count )				      								    	    count += 1						  
							      								    	    count += 1						  
8 46 LOAD_FAST 3 ( p )					      								    	    count += 1						  
48 LOAD_CONST 3 ( 10 )					      								    	    count += 1						  
50 BINARY_FLOOR_DIVIDE					      								    	    count += 1						  
52 STORE_FAST 3 ( p )					      								    	    count += 1						  
54 JUMP_ABSOLUTE 30					      								    	    count += 1						  
>> 56 POP_BLOCK						      								    	    count += 1						  
							      								    	    count += 1						  
9 >> 58 LOAD_FAST 2 ( count )				      								    	    count += 1						  
60 RETURN_VALUE NEW_LINE				      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
-							      -								    return count-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_2				      FIND_REPETITIVE_ELEMENT_1_N_1_2				    FIND_REPETITIVE_ELEMENT_1_N_1_2				  FIND_REPETITIVE_ELEMENT_1_N_1_2
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7fbac0e8bc90,  def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n - 1 ) :			    								  /FIND_REPETITIVE_ELEMENT_1_N_1_2.py", line 46
							      	      res = res ^ ( i + 1 ) ^ arr [ i ]			    								  print("#Results: %i, %i" % (n_success, len(param))
3 4 SETUP_LOOP 42 ( to 48 )				      	  res = res ^ arr [ n - 1 ]				    								  )
6 LOAD_GLOBAL 0 ( range )				      	  return res						    								  	^ SyntaxError: EOF while scanning triple-quo
8 LOAD_CONST 1 ( 0 )					      								    								  ted string literal
10 LOAD_FAST 1 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( res )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 BINARY_XOR						      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_XOR						      								    								  
42 STORE_FAST 2 ( res )					      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 LOAD_FAST 2 ( res )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_XOR						      								    								  
62 STORE_FAST 2 ( res )					      								    								  
							      								    								  
6 64 LOAD_FAST 2 ( res )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac<<unk>> d8a0, f def findSum ( N ) :					    def findSum ( N ) :						  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	"""							  
2 STORE_FAST 1 ( ans )					      	  for i in range ( 1 , N + 1 ) :			     Return the number of the random number of the number of the  
							      	      for j in range ( 1 , N + 1 ) :			     number of the number of the number of number of the number o 
3 4 SETUP_LOOP 58 ( to 64 )				      		  ans += i // j					     number of number of the number of the number of number of nu 
6 LOAD_GLOBAL 0 ( range )				      	  return ans						     the number of the number of number of number number number.  
8 LOAD_CONST 2 ( 1 )					      								     """							  
10 LOAD_FAST 0 ( N )					      								    	if N < 0 :						  
12 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
14 BINARY_ADD						      								    	return 0						  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 40 ( to 62 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 34 ( to 60 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 0 ( N )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 16 ( to 58 )				      								    								  
42 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 1 ( ans )				      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 BINARY_FLOOR_DIVIDE					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 1 ( ans )					      								    								  
56 JUMP_ABSOLUTE 40					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 JUMP_ABSOLUTE 20					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 1 ( ans )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
Disassembly of <code object add at 0x7fbac0e89d20, file "<dis def add ( A , B , C ) :					    def add ( 0x7fbac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( N ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    								  
4 LOAD_GLOBAL 1 ( N )					      		  C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]	    								  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 54 ( to 66 )				      								    								  
12 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 48 ( to 64 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_GLOBAL 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 4 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( B )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 2 ( C )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( j )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT
--							      --							    --								  --
Disassembly of <code object countToMake0lternate at 0x7fbac<< def countToMake0lternate ( s ) :				    def countToMake0lternterndsternterndsternterndsternterndstern script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    								  
2 STORE_FAST 1 ( result )				      	  for i in range ( len ( s ) - 1 ) :			    								  
							      	      if ( s [ i ] == s [ i + 1 ] ) :			    								  
3 4 SETUP_LOOP 52 ( to 58 )				      		  result += 1					    								  
6 LOAD_GLOBAL 0 ( range )				      	  return result						    								  
8 LOAD_GLOBAL 1 ( len )					      								    								  
10 LOAD_FAST 0 ( s )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 32 ( to 56 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( s )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
5 46 LOAD_FAST 1 ( result )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( result )				      								    								  
54 JUMP_ABSOLUTE 22					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
6 >> 58 LOAD_FAST 1 ( result )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
Disassembly of <code object isDivBy9 at 0x7fbac0e8bc90, file  def isDivBy9 ( n ) :					    def isDivBy9 ( n ) :					  failure : #Results: 8, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 9 ) :				    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return True					    	    return True						  
4 COMPARE_OP 2 ( == )					      	  if ( n < 9 ) :					    	return False						  
6 POP_JUMP_IF_TRUE 16					      	      return False					    								  
8 LOAD_FAST 0 ( n )					      	  return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 )  								  
10 LOAD_CONST 2 ( 9 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 3 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_CONST 2 ( 9 )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 4 ( False )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( isDivBy9 )			      								    								  
34 LOAD_GLOBAL 1 ( int )				      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 5 ( 3 )					      								    								  
40 BINARY_RSHIFT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 LOAD_GLOBAL 1 ( int )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 6 ( 7 )					      								    								  
50 BINARY_AND						      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
Disassembly of <code object isCornerPresent at 0x7fbac0e89d20 def isCornerPresent ( str , corner ) :			    def isCornerPresent ( str ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( str )					      	  cl = len ( corner )					     Returns a list of each numbers of each numbers in each numbe /eval_scripts/dis_sa-python_sa.test/PROGRAM_FIND_S
4 CALL_FUNCTION 1					      	  if ( n < cl ) :					    								  TRING_START_END_GEEKS.py", line 59, in <module>
6 STORE_FAST 2 ( n )					      	      return False					     Parameters							    if f_filled(*parameters_set) == f_gold(*paramete
							      	  return ( ( str [ : cl ] == corner ) and ( str [ n - cl :   -----							  rs_set): TypeError: f_filled() takes 1 positional
3 8 LOAD_GLOBAL 0 ( len )				      								     str							  argument but 2 were given
10 LOAD_FAST 1 ( corner )				      								     The number of numbers in the numbers of each numbers	  
12 CALL_FUNCTION 1					      								     Returns							  
14 STORE_FAST 3 ( cl )					      								     -----							  
							      								     str							  
4 16 LOAD_FAST 2 ( n )					      								     The number of numbers in the numbers of each numbers in each 
18 LOAD_FAST 3 ( cl )					      								     Returns							  
20 COMPARE_OP 0 ( < )					      								     -----							  
22 POP_JUMP_IF_FALSE 28					      								     str.isless numbers are returned.				  
							      								     """							  
5 24 LOAD_CONST 1 ( False )				      								    	return str ( str ( str ( str ) ) )			  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_CONST 0 ( None )				      								    								  
32 LOAD_FAST 3 ( cl )					      								    								  
34 BUILD_SLICE 2					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( corner )				      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 JUMP_IF_FALSE_OR_POP 62				      								    								  
44 LOAD_FAST 0 ( str )					      								    								  
46 LOAD_FAST 2 ( n )					      								    								  
48 LOAD_FAST 3 ( cl )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 BUILD_SLICE 2					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 1 ( corner )				      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
>> 62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac<<unk>> d540, f def findSum ( N , K ) :					    def findSum ( N ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( ans )					      	  y = N / K ;						    								  /FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1.py", l
							      	  x = N % K ;						    								  ine 46     print("#Results: %i, %i" % (n_success,
3 4 LOAD_FAST 0 ( N )					      	  ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 								  len(param)))
6 LOAD_FAST 1 ( K )					      	  return int ( ans ) ;					    								  		   ^ SyntaxError: EOF while scanning
8 BINARY_TRUE_DIVIDE					      								    								   triple-quoted string literal
10 STORE_FAST 3 ( y )					      								    								  
							      								    								  
4 12 LOAD_FAST 0 ( N )					      								    								  
14 LOAD_FAST 1 ( K )					      								    								  
16 BINARY_MODULO					      								    								  
18 STORE_FAST 4 ( x )					      								    								  
							      								    								  
5 20 LOAD_FAST 1 ( K )					      								    								  
22 LOAD_FAST 1 ( K )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 3 ( 2 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 LOAD_FAST 3 ( y )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_FAST 4 ( x )					      								    								  
40 LOAD_FAST 4 ( x )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_CONST 3 ( 2 )					      								    								  
50 BINARY_TRUE_DIVIDE					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
6 56 LOAD_GLOBAL 0 ( int )				      								    								  
58 LOAD_FAST 2 ( ans )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
Disassembly of <code object gcd at 0x7fbac0e8bc90, file "<dis def gcd ( a , b ) :					    def gcd ( a , b ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a < b ) :					    	if not a :						  
2 LOAD_FAST 1 ( b )					      	      return gcd ( b , a )				    	    return abs ( a )					  
4 COMPARE_OP 0 ( < )					      	  if ( abs ( b ) < 0.001 ) :				    	return abs ( a )					  
6 POP_JUMP_IF_FALSE 18					      	      return a						    								  
							      	  else :						    								  
3 8 LOAD_GLOBAL 0 ( gcd )				      	      return ( gcd ( b , a - math.floor ( a / b ) * b ) )   								  
10 LOAD_FAST 1 ( b )					      								    								  
12 LOAD_FAST 0 ( a )					      								    								  
14 CALL_FUNCTION 2					      								    								  
16 RETURN_VALUE						      								    								  
							      								    								  
4 >> 18 LOAD_GLOBAL 1 ( abs )				      								    								  
20 LOAD_FAST 1 ( b )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 LOAD_CONST 1 ( 0.001 )				      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( a )					      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
7 >> 34 LOAD_GLOBAL 0 ( gcd )				      								    								  
36 LOAD_FAST 1 ( b )					      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_GLOBAL 2 ( math )				      								    								  
42 LOAD_METHOD 3 ( floor )				      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 1 ( b )					      								    								  
48 BINARY_TRUE_DIVIDE					      								    								  
50 CALL_METHOD 1					      								    								  
52 LOAD_FAST 1 ( b )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 RETURN_VALUE						      								    								  
62 LOAD_CONST 0 ( None )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
Disassembly of <code object sumNodes at 0x7fbac<<unk>> de40,  def sumNodes ( l ) :					    def sumNodes ( l , leafafafafafafafafafafafafafafafafafafafaf error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( math )				      	  leafNodeCount = math.pow ( 2 , l - 1 ) ;		    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_METHOD 1 ( pow )					      	  sumLastLevel = 0 ;					    								  /FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1.py", l
4 LOAD_CONST 1 ( 2 )					      	  sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 )  								  ine 29     if __name__ == '__main__':	     ^ Synta
6 LOAD_FAST 0 ( l )					      	  sum = sumLastLevel * l ;				    								  xError: invalid syntax
8 LOAD_CONST 2 ( 1 )					      	  return int ( sum ) ;					    								  
10 BINARY_SUBTRACT					      								    								  
12 CALL_METHOD 2					      								    								  
14 STORE_FAST 1 ( leafNodeCount )			      								    								  
							      								    								  
3 16 LOAD_CONST 3 ( 0 )					      								    								  
18 STORE_FAST 2 ( sumLastLevel )			      								    								  
							      								    								  
4 20 LOAD_FAST 1 ( leafNodeCount )			      								    								  
22 LOAD_FAST 1 ( leafNodeCount )			      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 1 ( 2 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 STORE_FAST 2 ( sumLastLevel )			      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( sumLastLevel )			      								    								  
38 LOAD_FAST 0 ( l )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 2 ( int )				      								    								  
46 LOAD_FAST 3 ( sum )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
Disassembly of <code object isSymmetric at 0x7fbac0e8bc90, fi def isSymmetric ( mat , N ) :				    def isSymmetric ( mat ) :					  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 62 ( to 64 )				      	  for i in range ( N ) :				    	for i in range ( len ( mat ) ) :			  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    	    for i in range ( len ( mat ) ) :			  /eval_scripts/dis_sa-python_sa.test/PROGRAM_TO_CHE
4 LOAD_FAST 1 ( N )					      		  if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :	    		if i >= len ( mat ) :				  CK_IF_A_MATRIX_IS_SYMMETRIC.py", line 49, in <modu
6 CALL_FUNCTION 1					      		      return False				    		    return i					  le>	  if f_filled(*parameters_set) == f_gold(*pa
8 GET_ITER						      	  return True						    	return None						  rameters_set): TypeError: f_filled() takes 1 posit
>> 10 FOR_ITER 50 ( to 62 )				      								    								  ional argument but 2 were given
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 44 ( to 60 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 32 ( to 58 )				      								    								  
26 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( mat )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( mat )					      								    								  
40 LOAD_FAST 3 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 52 LOAD_CONST 1 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 JUMP_ABSOLUTE 10					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_CONST 2 ( True )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac<<unk>> de40, fi def search ( arr , n , x ) :				    def search ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( i )					      	  while ( i <= n - 1 ) :				     Return the array of the given arr in ``arr`` element-wise.	  /EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BET
							      	      if ( arr [ i ] == x ) :				    								  WEEN_ADJACENT_IS_1.py", line 26     def f_filled (
3 4 SETUP_LOOP 52 ( to 58 )				      		  return i					     Parameters							   arr , n , n ) :     ^ SyntaxError: duplicate argu
>> 6 LOAD_FAST 3 ( i )					      	      i += abs ( arr [ i ] - x )			     -----							  ment 'n' in function definition
8 LOAD_FAST 1 ( n )					      	  return - 1						     arr : ndarray						  
10 LOAD_CONST 2 ( 1 )					      								     Output array of the array of `n` element-wise.		  
12 BINARY_SUBTRACT					      								    								  
14 COMPARE_OP 1 ( <= )					      								     Returns							  
16 POP_JUMP_IF_FALSE 56					      								     -----							  
							      								     arr : ndarray						  
4 18 LOAD_FAST 0 ( arr )				      								     Output array of `arr` element-wise.			  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								     Parameters							  
24 LOAD_FAST 2 ( x )					      								     -----							  
26 COMPARE_OP 2 ( == )					      								     arr : ndarray						  
28 POP_JUMP_IF_FALSE 34					      								     Output array of the array of `arr`.			  
							      								    								  
5 30 LOAD_FAST 3 ( i )					      								     Returns							  
32 RETURN_VALUE						      								     -----							  
							      								     arr : ndarray						  
6 >> 34 LOAD_FAST 3 ( i )				      								     Output array of `arr` element-wise.			  
36 LOAD_GLOBAL 0 ( abs )				      								    								  
38 LOAD_FAST 0 ( arr )					      								     See also							  
40 LOAD_FAST 3 ( i )					      								     -----							  
42 BINARY_SUBSCR					      								     arr : ndarray						  
44 LOAD_FAST 2 ( x )					      								     Output array of `arr` element-wise.			  
46 BINARY_SUBTRACT					      								    								  
48 CALL_FUNCTION 1					      								     See also							  
50 INPLACE_ADD						      								     -----							  
52 STORE_FAST 3 ( i )					      								     arr : ndarray						  
54 JUMP_ABSOLUTE 6					      								     Output array of `arr` element-wise.			  
>> 56 POP_BLOCK						      								    								  
							      								     See also							  
7 >> 58 LOAD_CONST 3 ( - 1 )				      								     -----							  
60 RETURN_VALUE NEW_LINE				      								     arr : ndarray						  
							      								     Output array of `arr` element-wise.			  
							      								    								  
							      								     See also							  
							      								     -----							  
							      								     arr : ndarray						  
							      								     Output array of `arr` element-wise.			  
							      								    								  
							      								     See also							  
							      								     -----							  
							      								     arr : ndarray						  
							      								     Output array of `arr` element-wise.			  
							      								    								  
							      								     See also							  
							      								     -----							  
							      								    ..versionadded::1.7.0					  
							      								    ...versionadded::1.7.0					  
							      								    ...versionadded::1.7.0					  
							      								    ...versionadded::1.7.0					  
							      								    ...versionadded::1.7.0					  
							      								    								  
							      								     """							  
							      								    	return np.array ( arr.shape , n )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		      PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		    PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER			  PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER
--							      --							    --								  --
Disassembly of <code object Print at 0x7fbac<<unk>> de40, fil def Print ( n , k ) :					    def Print ( n , k , k = 1 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  rem = 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 2 ( rem )					      	  for i in range ( 0 , k ) :				    								  
							      	      print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = " 								  
3 4 SETUP_LOOP 56 ( to 62 )				      	      rem = ( 10 * rem ) % n				    								  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 2 ( 0 )					      								    								  
10 LOAD_FAST 1 ( k )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 42 ( to 60 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_GLOBAL 2 ( math )				      								    								  
24 LOAD_METHOD 3 ( floor )				      								    								  
26 LOAD_CONST 3 ( 10 )					      								    								  
28 LOAD_FAST 2 ( rem )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 BINARY_TRUE_DIVIDE					      								    								  
36 CALL_METHOD 1					      								    								  
38 LOAD_CONST 4 ( '' )					      								    								  
40 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
42 CALL_FUNCTION_KW 2					      								    								  
44 POP_TOP						      								    								  
							      								    								  
5 46 LOAD_CONST 3 ( 10 )				      								    								  
48 LOAD_FAST 2 ( rem )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 2 ( rem )					      								    								  
58 JUMP_ABSOLUTE 16					      								    								  
>> 60 POP_BLOCK						      								    								  
>> 62 LOAD_CONST 0 ( None )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT				      CHECK_TWO_GIVEN_SETS_DISJOINT				    CHECK_TWO_GIVEN_SETS_DISJOINT				  CHECK_TWO_GIVEN_SETS_DISJOINT
--							      --							    --								  --
Disassembly of <code object areDisjoint at 0x7fbac<<unk>> d54 def areDisjoint ( set1 , set2 , m , n ) :			    def areDisjoint ( timetimetimetimetimetimetimetimetimetimetim script_not_found : None
2 0 SETUP_LOOP 58 ( to 60 )				      	  for i in range ( 0 , m ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , n ) :			    								  
4 LOAD_CONST 1 ( 0 )					      		  if ( set1 [ i ] == set2 [ j ] ) :		    								  
6 LOAD_FAST 2 ( m )					      		      return False				    								  
8 CALL_FUNCTION 2					      	  return True						    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 44 ( to 58 )				      								    								  
14 STORE_FAST 4 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 38 ( to 56 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 24 ( to 54 )				      								    								  
30 STORE_FAST 5 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( set1 )				      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( set2 )					      								    								  
40 LOAD_FAST 5 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 48 LOAD_CONST 2 ( False )				      								    								  
50 RETURN_VALUE						      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 JUMP_ABSOLUTE 12					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
6 >> 60 LOAD_CONST 3 ( True )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
Disassembly of <code object countCommon at 0x7fbac0e89d20, fi def countCommon ( mat , n ) :				    def countCommon ( mat , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( res )					      	  for i in range ( n ) :				     Return the list of the given mat in the given mat of mat	  /eval_scripts/dis_sa-python_sa.test/ROW_WISE_COMMO
							      	      if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	     """							  N_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX.py", line 5
3 4 SETUP_LOOP 56 ( to 62 )				      		  res = res + 1					    	for i in range ( n ) :					  0, in <module>     if f_filled(*parameters_set) ==
6 LOAD_GLOBAL 0 ( range )				      	  return res						    	    if n [ i ] == 0 :					   f_gold(*parameters_set):   File "/home/ubuntu/Tra
8 LOAD_FAST 1 ( n )					      								    		return n [ i ]					  nsCoder/models/eval/bt/152w65bl69/eval_scripts/dis
10 CALL_FUNCTION 1					      								    	return mat						  _sa-python_sa.test/ROW_WISE_COMMON_ELEMENTS_TWO_DI
12 GET_ITER						      								    								  AGONALS_SQUARE_MATRIX.py", line 30, in f_filled
>> 14 FOR_ITER 44 ( to 60 )				      								    								    if n [ i ] == 0 : TypeError: 'int' object is not
16 STORE_FAST 3 ( i )					      								    								   subscriptable
							      								    								  
4 18 LOAD_FAST 0 ( mat )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 0 ( mat )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 50 LOAD_FAST 2 ( res )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( res )					      								    								  
58 JUMP_ABSOLUTE 14					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_FAST 2 ( res )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7fbac0e89d20,  def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	"""							  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				     set of the list of `arr` in `arr` and `arr` in `arr` and	  
4 STORE_FAST 2 ( s )					      	      if arr [ i ] in s :				     `arr` are passed to `arr` in `arr` and `arr` are		  
							      		  return arr [ i ]				     passed to `arr` in `arr` and `arr` are passed to		  
3 6 SETUP_LOOP 50 ( to 58 )				      	      s.add ( arr [ i ] )				     `arr` in `arr` and `arr` are passed to `arr` in `arr` and	  
8 LOAD_GLOBAL 1 ( range )				      	  rteurn - 1						     `arr` are passed to `arr`.					  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 1					      								     """							  
14 GET_ITER						      								    	return arr						  
>> 16 FOR_ITER 38 ( to 56 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( s )					      								    								  
28 COMPARE_OP 6 ( in )					      								    								  
30 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 2 ( s )				      								    								  
42 LOAD_METHOD 2 ( add )				      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_METHOD 1					      								    								  
52 POP_TOP						      								    								  
54 JUMP_ABSOLUTE 16					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 LOAD_GLOBAL 3 ( rteurn )			      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA
--							      --							    --								  --
Disassembly of <code object russianPeasant at 0x7fbac<<unk>>  def russianPeasant ( a , b ) :				    def russianPeasant ( a , b ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( res )					      	  while ( b > 0 ) :					    								  /FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLI
							      	      if ( b & 1 ) :					    								  CATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM.py", li
3 4 SETUP_LOOP 44 ( to 50 )				      		  res = res + a					    								  ne 48	    print("#Results: %i, %i" % (n_success, l
>> 6 LOAD_FAST 1 ( b )					      	      a = a << 1					    								  en(param)))
8 LOAD_CONST 1 ( 0 )					      	      b = b >> 1					    								  		  ^ SyntaxError: EOF while scanning
10 COMPARE_OP 4 ( > )					      	  return res						    								  triple-quoted string literal
12 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( b )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_AND						      								    								  
20 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( res )				      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 2 ( res )					      								    								  
							      								    								  
6 >> 30 LOAD_FAST 0 ( a )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_LSHIFT					      								    								  
36 STORE_FAST 0 ( a )					      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( b )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_RSHIFT					      								    								  
44 STORE_FAST 1 ( b )					      								    								  
46 JUMP_ABSOLUTE 6					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 2 ( res )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS	      MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		    MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		  MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS
--							      --							    --								  --
Disassembly of <code object findMinSum at 0x7fbac<<unk>> d540 def findMinSum ( a , b , n ) :				    def findMinSum ( a , b ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( )						    	if a.sort ( ) == b :					  
2 LOAD_METHOD 0 ( sort )				      	  b.sort ( )						    	    return 0						  
4 CALL_METHOD 0						      	  sum = 0						    	else :							  
6 POP_TOP						      	  for i in range ( n ) :				    	    return 0						  
							      	      sum = sum + abs ( a [ i ] - b [ i ] )		    								  
3 8 LOAD_FAST 1 ( b )					      	  return sum						    								  
10 LOAD_METHOD 0 ( sort )				      								    								  
12 CALL_METHOD 0					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
5 20 SETUP_LOOP 40 ( to 62 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 28 ( to 60 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( sum )				      								    								  
36 LOAD_GLOBAL 2 ( abs )				      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( b )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( sum )					      								    								  
58 JUMP_ABSOLUTE 30					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 3 ( sum )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
Disassembly of <code object middleOfThree at 0x7fbac<<unk>> d def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , b , c , c , c , c ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  x = a - b						    	if a :							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( b )					      	  y = b - c						    	    return a						  /MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2.py",
4 BINARY_SUBTRACT					      	  z = a - c						    								  line 29     def f_filled ( a , b , b , c , c , c ,
6 STORE_FAST 3 ( x )					      	  if x * y > 0 :					    								   c ) :     ^ SyntaxError: duplicate argument 'b' i
							      	      return b						    								  n function definition
3 8 LOAD_FAST 1 ( b )					      	  elif ( x * z > 0 ) :					    								  
10 LOAD_FAST 2 ( c )					      	      return						    								  
12 BINARY_SUBTRACT					      	  else :						    								  
14 STORE_FAST 4 ( y )					      	      return a						    								  
							      								    								  
4 16 LOAD_FAST 0 ( a )					      								    								  
18 LOAD_FAST 2 ( c )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 5 ( z )					      								    								  
							      								    								  
5 24 LOAD_FAST 3 ( x )					      								    								  
26 LOAD_FAST 4 ( y )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( b )					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
7 >> 40 LOAD_FAST 3 ( x )				      								    								  
42 LOAD_FAST 5 ( z )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
8 52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
10 >> 56 LOAD_FAST 0 ( a )				      								    								  
58 RETURN_VALUE						      								    								  
60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN	      SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		    SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		  SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN
--							      --							    --								  --
Disassembly of <code object minTime at 0x7fbac0e8bc90, file " def minTime ( n , k , a ) :				    def minTime ( n , k , maxTime = 1 ) :			  script_not_found : None
2 0 LOAD_FAST 2 ( a )					      	  a.sort ( reverse = True ) ;				    	if n < maxTime :					  
2 LOAD_ATTR 0 ( sort )					      	  minTime = 0 ;						    	    return n						  
4 LOAD_CONST 1 ( True )					      	  for i in range ( 0 , n , k ) :			    	return n						  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	      minTime += ( 2 * a [ i ] ) ;			    								  
8 CALL_FUNCTION_KW 1					      	  return minTime ;					    								  
10 POP_TOP						      								    								  
							      								    								  
3 12 LOAD_CONST 3 ( 0 )					      								    								  
14 STORE_FAST 3 ( minTime )				      								    								  
							      								    								  
4 16 SETUP_LOOP 36 ( to 54 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 3 ( 0 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_FAST 1 ( k )					      								    								  
26 CALL_FUNCTION 3					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 20 ( to 52 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 3 ( minTime )				      								    								  
36 LOAD_CONST 4 ( 2 )					      								    								  
38 LOAD_FAST 2 ( a )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( minTime )				      								    								  
50 JUMP_ABSOLUTE 30					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
6 >> 54 LOAD_FAST 3 ( minTime )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
Disassembly of <code object printSquares at 0x7fbac0e8bc90, f def printSquares ( n ) :					    def printSquares ( n , square , n , n , n ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  square = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 1 ( square )				      	  odd = 1						    								  
							      	  for x in range ( 0 , n ) :				    								  
3 4 LOAD_CONST 2 ( 1 )					      	      print ( square , end = " " )			    								  
6 STORE_FAST 2 ( odd )					      	      square = square + odd				    								  
							      	      odd = odd + 2					    								  
4 8 SETUP_LOOP 46 ( to 56 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 3 ( x )					      								    								  
							      								    								  
5 24 LOAD_GLOBAL 1 ( print )				      								    								  
26 LOAD_FAST 1 ( square )				      								    								  
28 LOAD_CONST 3 ( ' ' )					      								    								  
30 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
32 CALL_FUNCTION_KW 2					      								    								  
34 POP_TOP						      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( square )				      								    								  
38 LOAD_FAST 2 ( odd )					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 1 ( square )				      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( odd )				      								    								  
46 LOAD_CONST 5 ( 2 )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 2 ( odd )					      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
Disassembly of <code object mirrorImage at 0x7fbac0e89d20, fi def mirrorImage ( a , b , c , x1 , y1 ) :			    def mirrorImage ( a , b , b ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 2 )				      	  temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )  	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( a )					      	  x = temp * a + x1					    								  /FIND_MIRROR_IMAGE_POINT_2_D_PLANE.py", line 45
4 LOAD_FAST 3 ( x1 )					      	  y = temp * b + y1					    								    print("#Results: %i, %i" % (n_success, len(param
6 BINARY_MULTIPLY					      	  return ( x , y )					    								  )))
8 LOAD_FAST 1 ( b )					      								    								  	  ^ SyntaxError: EOF while scanning triple-q
10 LOAD_FAST 4 ( y1 )					      								    								  uoted string literal
12 BINARY_MULTIPLY					      								    								  
14 BINARY_ADD						      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 BINARY_ADD						      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_FAST 0 ( a )					      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_FAST 1 ( b )					      								    								  
30 LOAD_FAST 1 ( b )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 BINARY_ADD						      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 STORE_FAST 5 ( temp )				      								    								  
							      								    								  
3 40 LOAD_FAST 5 ( temp )				      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 3 ( x1 )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 6 ( x )					      								    								  
							      								    								  
4 52 LOAD_FAST 5 ( temp )				      								    								  
54 LOAD_FAST 1 ( b )					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 LOAD_FAST 4 ( y1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 7 ( y )					      								    								  
							      								    								  
5 64 LOAD_FAST 6 ( x )					      								    								  
66 LOAD_FAST 7 ( y )					      								    								  
68 BUILD_TUPLE 2					      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
Disassembly of <code object findRotations at 0x7fbac<<unk>> d def findRotations ( str ) :				    def findRotations ( str ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( str )					      	  tmp = str + str					    	if len ( str ) == 1 :					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( str )					      	  n = len ( str )					    	    return 0						  /MINIMUM_ROTATIONS_REQUIRED_GET_STRING.py", line 9
4 BINARY_ADD						      	  for i in range ( 1 , n + 1 ) :			    	elif len ( str ) == 1 :					  9	INDENT		^ IndentationError: expected
6 STORE_FAST 1 ( tmp )					      	      substring = tmp [ i : n ]				    	    return 0						   an indented block
							      	      if ( str == substring ) :				    	elif len ( str ) == 1 :					  
3 8 LOAD_GLOBAL 0 ( len )				      		  return i					    	    return 0						  
10 LOAD_FAST 0 ( str )					      	  return n						    	elif len ( str ) == 2 :					  
12 CALL_FUNCTION 1					      								    	    return 0						  
14 STORE_FAST 2 ( n )					      								    	elif len ( str ) == 1 :					  
							      								    	    return 0						  
4 16 SETUP_LOOP 46 ( to 64 )				      								    	elif len ( str ) == 1 :					  
18 LOAD_GLOBAL 1 ( range )				      								    	    return 0						  
20 LOAD_CONST 1 ( 1 )					      								    	elif len ( str ) == 1 :					  
22 LOAD_FAST 2 ( n )					      								    	    return 0						  
24 LOAD_CONST 1 ( 1 )					      								    	elif len ( str ) == 1 :					  
26 BINARY_ADD						      								    	    return 0						  
28 CALL_FUNCTION 2					      								    	elif len ( str ) == 2 :					  
30 GET_ITER						      								    	    return 0						  
>> 32 FOR_ITER 28 ( to 62 )				      								    	elif len ( str ) == 2 :					  
34 STORE_FAST 3 ( i )					      								    	    return 0						  
							      								    	elif len ( str ) == 3 :					  
5 36 LOAD_FAST 1 ( tmp )				      								    	    return 0						  
38 LOAD_FAST 3 ( i )					      								    	elif len ( str ) == 4 :					  
40 LOAD_FAST 2 ( n )					      								    	    return 0						  
42 BUILD_SLICE 2					      								    	elif len ( str ) == 4 :					  
44 BINARY_SUBSCR					      								    	    return 0						  
46 STORE_FAST 4 ( substring )				      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
6 48 LOAD_FAST 0 ( str )				      								    	elif len ( str ) == 4 :					  
50 LOAD_FAST 4 ( substring )				      								    	    return 0						  
52 COMPARE_OP 2 ( == )					      								    	elif len ( str ) == 4 :					  
54 POP_JUMP_IF_FALSE 32					      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
7 56 LOAD_FAST 3 ( i )					      								    	    return 0						  
58 RETURN_VALUE						      								    	elif len ( str ) == 4 :					  
60 JUMP_ABSOLUTE 32					      								    	    return 0						  
>> 62 POP_BLOCK						      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
8 >> 64 LOAD_FAST 2 ( n )				      								    	elif len ( str ) == 4 :					  
66 RETURN_VALUE NEW_LINE				      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) > 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
							      								    	    return 0						  
							      								    	elif len ( str ) == 4 :					  
-							      -								    	INDENT-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object randomize at 0x7fbac<<unk>> d540, def randomize ( arr , n ) :				    def randomize randomize ( arr , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( n - 1 , 0 , - 1 ) :			    	for i in range ( n ) :					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_GLOBAL 0 ( range )				      	      j = random.randint ( 0 , i + 1 )			    	    if i < 0 :						  /SHUFFLE_A_GIVEN_ARRAY.py", line 26	  def f_fill
4 LOAD_FAST 1 ( n )					      	      arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	    		return i					  ed f_filled ( arr , n ) :
6 LOAD_CONST 1 ( 1 )					      	  return arr						    	return None						  ^ SyntaxError: invalid syntax
8 BINARY_SUBTRACT					      								    								  
10 LOAD_CONST 2 ( 0 )					      								    								  
12 LOAD_CONST 3 ( - 1 )					      								    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 46 ( to 66 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 22 LOAD_GLOBAL 1 ( random )				      								    								  
24 LOAD_METHOD 2 ( randint )				      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_METHOD 2					      								    								  
36 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 3 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 ROT_TWO						      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 18					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
5 >> 68 LOAD_FAST 0 ( arr )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
Disassembly of <code object printSquares at 0x7fbac<<unk>> d5 def printSquares ( n ) :					    def printSquares ( n , square , * args , ** kwargs ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  square = 0 ; prev_x = 0 ;				    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 1 ( square )				      	  for x in range ( 0 , n ) :				    								  
4 LOAD_CONST 1 ( 0 )					      	      square = ( square + x + prev_x )			    								  
6 STORE_FAST 2 ( prev_x )				      	      print ( square , end = " " )			    								  
							      	      prev_x = x					    								  
3 8 SETUP_LOOP 46 ( to 56 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 3 ( x )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( square )				      								    								  
26 LOAD_FAST 3 ( x )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 2 ( prev_x )				      								    								  
32 BINARY_ADD						      								    								  
34 STORE_FAST 1 ( square )				      								    								  
							      								    								  
5 36 LOAD_GLOBAL 1 ( print )				      								    								  
38 LOAD_FAST 1 ( square )				      								    								  
40 LOAD_CONST 2 ( ' ' )					      								    								  
42 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( x )					      								    								  
50 STORE_FAST 2 ( prev_x )				      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
>> 56 LOAD_CONST 0 ( None )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		      SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		    SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO		  SECTION_FORMULA_POINT_DIVIDES_LINE_GIVEN_RATIO
--							      --							    --								  --
Disassembly of <code object section at 0x7fbac<<unk>> d540, f def section ( x1 , x2 , y1 , y2 , m , n ) :		    def section ( x1 , x2 , x2 , x2 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( float )				      	  x = ( float ) ( ( n * x1 ) + ( m * x2 ) ) / ( m + n )	    	return float ( x1 )					  
2 LOAD_FAST 5 ( n )					      	  y = ( float ) ( ( n * y1 ) + ( m * y2 ) ) / ( m + n )	    								  
4 LOAD_FAST 0 ( x1 )					      	  print ( x , y )					    								  
6 BINARY_MULTIPLY					      								    								  
8 LOAD_FAST 4 ( m )					      								    								  
10 LOAD_FAST 1 ( x2 )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 1					      								    								  
18 LOAD_FAST 4 ( m )					      								    								  
20 LOAD_FAST 5 ( n )					      								    								  
22 BINARY_ADD						      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 STORE_FAST 6 ( x )					      								    								  
							      								    								  
3 28 LOAD_GLOBAL 0 ( float )				      								    								  
30 LOAD_FAST 5 ( n )					      								    								  
32 LOAD_FAST 2 ( y1 )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 4 ( m )					      								    								  
38 LOAD_FAST 3 ( y2 )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 1					      								    								  
46 LOAD_FAST 4 ( m )					      								    								  
48 LOAD_FAST 5 ( n )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 STORE_FAST 7 ( y )					      								    								  
							      								    								  
4 56 LOAD_GLOBAL 1 ( print )				      								    								  
58 LOAD_FAST 6 ( x )					      								    								  
60 LOAD_FAST 7 ( y )					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS     SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	    SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS
--							      --							    --								  --
Disassembly of <code object getTotalNumberOfSequences at 0x7f def getTotalNumberOfSequences ( m , n ) :			    def getTotalTotalSequences ( m , n ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( m )					      	  if m < n :						    	if n < 0 :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( n )					      	      return 0						    	    return 0						  /eval_scripts/dis_sa-python_sa.test/SEQUENCES_GIVE
4 COMPARE_OP 0 ( < )					      	  if n == 0 :						    	return getTotalTotalSequences ( m , n )			  N_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS.py", l
6 POP_JUMP_IF_FALSE 12					      	      return 1						    								  ine 47, in <module>	  if f_filled(*parameters_se
							      	  res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTota 								  t) == f_gold(*parameters_set):   File "/home/ubunt
3 8 LOAD_CONST 1 ( 0 )					      	  return res						    								  u/TransCoder/models/eval/bt/152w65bl69/eval_script
10 RETURN_VALUE						      								    								  s/dis_sa-python_sa.test/SEQUENCES_GIVEN_LENGTH_EVE
							      								    								  RY_ELEMENT_EQUAL_TWICE_PREVIOUS.py", line 29, in f
4 >> 12 LOAD_FAST 1 ( n )				      								    								  _filled     return f_filled ( m , n )	  File "/hom
14 LOAD_CONST 1 ( 0 )					      								    								  e/ubuntu/TransCoder/models/eval/bt/152w65bl69/eval
16 COMPARE_OP 2 ( == )					      								    								  _scripts/dis_sa-python_sa.test/SEQUENCES_GIVEN_LEN
18 POP_JUMP_IF_FALSE 24					      								    								  GTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS.py", line 2
							      								    								  9, in f_filled     return f_filled ( m , n )	 Fil
5 20 LOAD_CONST 2 ( 1 )					      								    								  e "/home/ubuntu/TransCoder/models/eval/bt/152w65bl
22 RETURN_VALUE						      								    								  69/eval_scripts/dis_sa-python_sa.test/SEQUENCES_GI
							      								    								  VEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS.py",
6 >> 24 LOAD_GLOBAL 0 ( getTotalNumberOfSequences )	      								    								   line 29, in f_filled	    return f_filled ( m , n
26 LOAD_FAST 0 ( m )					      								    								  )   [Previous line repeated 994 more times]	File
28 LOAD_CONST 2 ( 1 )					      								    								   "/home/ubuntu/TransCoder/models/eval/bt/152w65bl6
30 BINARY_SUBTRACT					      								    								  9/eval_scripts/dis_sa-python_sa.test/SEQUENCES_GIV
32 LOAD_FAST 1 ( n )					      								    								  EN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS.py",
34 CALL_FUNCTION 2					      								    								  line 27, in f_filled	   if n < 0 : RecursionError
36 LOAD_GLOBAL 0 ( getTotalNumberOfSequences )		      								    								  : maximum recursion depth exceeded in comparison
38 LOAD_FAST 0 ( m )					      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 BINARY_FLOOR_DIVIDE					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 2 ( res )					      								    								  
							      								    								  
7 56 LOAD_FAST 2 ( res )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
Disassembly of <code object minimum_cost at 0x7fbac<<unk>> de def minimum_cost ( a , n ) :				    def minimum_cost ( a , n , mn = 0 , n = 0 , n = 1 ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sys )				      	  mn = sys.maxsize					    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_ATTR 1 ( maxsize )				      	  sum = 0						     Return a number of mn to a given number of mn		  /MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_A
4 STORE_FAST 2 ( mn )					      	  for i in range ( n ) :				     """							  RRAY.py", line 28	def f_filled ( a , n , mn =
							      	      mn = min ( a [ i ] , mn )				    	for i in range ( n ) :					  0 , n = 0 , n = 1 ) :	    ^ SyntaxError: duplicate
3 6 LOAD_CONST 1 ( 0 )					      	      sum += a [ i ]					    	    if n < 0 :						   argument 'n' in function definition
8 STORE_FAST 3 ( sum )					      	  return mn * ( sum - mn )				    		return 0					  
							      								    	return 0						  
4 10 SETUP_LOOP 42 ( to 54 )				      								    								  
12 LOAD_GLOBAL 2 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 30 ( to 52 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_GLOBAL 3 ( min )				      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 2 ( mn )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 STORE_FAST 2 ( mn )					      								    								  
							      								    								  
6 38 LOAD_FAST 3 ( sum )				      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( sum )					      								    								  
50 JUMP_ABSOLUTE 20					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_FAST 2 ( mn )				      								    								  
56 LOAD_FAST 3 ( sum )					      								    								  
58 LOAD_FAST 2 ( mn )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7fbac0e89d20, file " def isPrime ( n , i = 2 ) :				    def isPrime ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 2 ) :					    	n = n % 2						  
2 LOAD_CONST 1 ( 2 )					      	      return True if ( n == 2 ) else False		    	n = n % 2						  
4 COMPARE_OP 1 ( <= )					      	  if ( n % i == 0 ) :					    	n = n % 2						  
6 POP_JUMP_IF_FALSE 24					      	      return False					    	n = n % 2						  
							      	  if ( i * i > n ) :					    	n = n % n						  
3 8 LOAD_FAST 0 ( n )					      	      return true					    	return n						  
10 LOAD_CONST 1 ( 2 )					      	  return isPrime ( n , i + 1 )				    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
16 LOAD_CONST 2 ( True )				      								    								  
18 RETURN_VALUE						      								    								  
>> 20 LOAD_CONST 3 ( False )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 4 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 36 LOAD_CONST 3 ( False )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 1 ( i )				      								    								  
42 LOAD_FAST 1 ( i )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 52 LOAD_GLOBAL 0 ( true )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 LOAD_GLOBAL 1 ( isPrime )			      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_FAST 1 ( i )					      								    								  
62 LOAD_CONST 5 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 2					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				      EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				    EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				  EQUILIBRIUM_INDEX_OF_AN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object equilibrium at 0x7fbac<<unk>> de4 def equilibrium ( arr ) :					    def equilibrium ( arr , total_sum ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sum )				      	  total_sum = sum ( arr )				    	"""							  
2 LOAD_FAST 0 ( arr )					      	  leftsum = 0						     Returns the sum of the given arr in the given arr		  
4 CALL_FUNCTION 1					      	  for i , num in enumerate ( arr ) :			     """							  
6 STORE_FAST 1 ( total_sum )				      	      total_sum -= num					    	# Convert a list of the given arr			  
							      	      if leftsum == total_sum :				    	total_sum = arr [ total_sum ] [ total_sum ] [ total_sum ] 
3 8 LOAD_CONST 1 ( 0 )					      		  return i					    	total_sum = np.sum ( total_sum )			  
10 STORE_FAST 2 ( leftsum )				      	      leftsum += num					    	total_sum = total_sum / total_sum / total_sum / total_sum 
							      	  return - 1						    								  
4 12 SETUP_LOOP 48 ( to 62 )				      								    								  
14 LOAD_GLOBAL 1 ( enumerate )				      								    								  
16 LOAD_FAST 0 ( arr )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 36 ( to 60 )				      								    								  
24 UNPACK_SEQUENCE 2					      								    								  
26 STORE_FAST 3 ( i )					      								    								  
28 STORE_FAST 4 ( num )					      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( total_sum )				      								    								  
32 LOAD_FAST 4 ( num )					      								    								  
34 INPLACE_SUBTRACT					      								    								  
36 STORE_FAST 1 ( total_sum )				      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( leftsum )				      								    								  
40 LOAD_FAST 1 ( total_sum )				      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( i )					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 2 ( leftsum )				      								    								  
52 LOAD_FAST 4 ( num )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 2 ( leftsum )				      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
9 >> 62 LOAD_CONST 2 ( - 1 )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
Disassembly of <code object selectRandom at 0x7fbac0e8bc90, f def selectRandom ( x ) :					    def selectRandom ( x , res , v , v , v , v , v , v , v , v ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0 ;						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( res )					      	  count = 0 ;						    								  /SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE.
							      	  count += 1 ;						    								  py", line 32	   if __name__ == '__main__':	   ^
3 4 LOAD_CONST 1 ( 0 )					      	  if ( count == 1 ) :					    								   SyntaxError: invalid syntax
6 STORE_FAST 2 ( count )				      	      res = x ;						    								  
							      	  else :						    								  
4 8 LOAD_FAST 2 ( count )				      	      i = random.randrange ( count ) ;			    								  
10 LOAD_CONST 2 ( 1 )					      	      if ( i == count - 1 ) :				    								  
12 INPLACE_ADD						      		  res = x ;					    								  
14 STORE_FAST 2 ( count )				      	  return res ;						    								  
							      								    								  
5 16 LOAD_FAST 2 ( count )				      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 24 LOAD_FAST 0 ( x )					      								    								  
26 STORE_FAST 1 ( res )					      								    								  
28 JUMP_FORWARD 26 ( to 56 )				      								    								  
							      								    								  
8 >> 30 LOAD_GLOBAL 0 ( random )			      								    								  
32 LOAD_METHOD 1 ( randrange )				      								    								  
34 LOAD_FAST 2 ( count )				      								    								  
36 CALL_METHOD 1					      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 40 LOAD_FAST 3 ( i )					      								    								  
42 LOAD_FAST 2 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
10 52 LOAD_FAST 0 ( x )					      								    								  
54 STORE_FAST 1 ( res )					      								    								  
							      								    								  
11 >> 56 LOAD_FAST 1 ( res )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			      SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			    SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES				  SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES
--							      --							    --								  --
Disassembly of <code object findS at 0x7fbac<<unk>> de40, fil def findS ( s ) :						    def findS ( s ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  _sum = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( _sum )					      	  n = 1							    								  /SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES.py", line 50
							      	  while ( _sum < s ) :					    								      print("#Results: %i, %i" % (n_success, len(par
3 4 LOAD_CONST 2 ( 1 )					      	      _sum += n * n					    								  am)))
6 STORE_FAST 2 ( n )					      	      n += 1						    								  	    ^ SyntaxError: EOF while scanning triple
							      	  n -= 1						    								  -quoted string literal
4 8 SETUP_LOOP 32 ( to 42 )				      	  if _sum == s :					    								  
>> 10 LOAD_FAST 1 ( _sum )				      	      return n						    								  
12 LOAD_FAST 0 ( s )					      	  return - 1						    								  
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( _sum )				      								    								  
20 LOAD_FAST 2 ( n )					      								    								  
22 LOAD_FAST 2 ( n )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 1 ( _sum )				      								    								  
							      								    								  
6 30 LOAD_FAST 2 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 2 ( n )					      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 2 ( n )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_SUBTRACT					      								    								  
48 STORE_FAST 2 ( n )					      								    								  
							      								    								  
8 50 LOAD_FAST 1 ( _sum )				      								    								  
52 LOAD_FAST 0 ( s )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
9 58 LOAD_FAST 2 ( n )					      								    								  
60 RETURN_VALUE						      								    								  
							      								    								  
10 >> 62 LOAD_CONST 3 ( - 1 )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		    PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
Disassembly of <code object isPossible at 0x7fbac<<unk>> d540 def isPossible ( a , b , n , k ) :			    def isPossible ( a , b ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( reverse = True )				    	if a.sort ( ) :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_ATTR 0 ( sort )					      	  b.sort ( )						    	    return True						  /PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
4 LOAD_CONST 1 ( True )					      	  for i in range ( n ) :				    	elif a.sort ( ) :					  .py", line 105     if __name__ == '__main__':
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	      if ( a [ i ] + b [ i ] < k ) :			    	    return True						   ^ SyntaxError: invalid syntax
8 CALL_FUNCTION_KW 1					      		  return False					    	elif a.sort ( ) :					  
10 POP_TOP						      	  return True						    	    return True						  
							      								    	elif a.sort ( ) :					  
3 12 LOAD_FAST 1 ( b )					      								    	    return True						  
14 LOAD_METHOD 0 ( sort )				      								    	elif a.sort ( ) :					  
16 CALL_METHOD 0					      								    	    return True						  
18 POP_TOP						      								    	elif a.sort ( ) :					  
							      								    	    return True						  
4 20 SETUP_LOOP 40 ( to 62 )				      								    	elif a.sort ( ) :					  
22 LOAD_GLOBAL 1 ( range )				      								    	    return True						  
24 LOAD_FAST 2 ( n )					      								    	elif a.sort ( ) :					  
26 CALL_FUNCTION 1					      								    	    return True						  
28 GET_ITER						      								    	elif a.sort ( ) :					  
>> 30 FOR_ITER 28 ( to 60 )				      								    	    return True						  
32 STORE_FAST 4 ( i )					      								    	elif a.sort ( ) :					  
							      								    	    return True						  
5 34 LOAD_FAST 0 ( a )					      								    	elif a.sort ( ) :					  
36 LOAD_FAST 4 ( i )					      								    	    return False					  
38 BINARY_SUBSCR					      								    	elif a.sort ( ) :					  
40 LOAD_FAST 1 ( b )					      								    	    return False					  
42 LOAD_FAST 4 ( i )					      								    	elif a.sort ( ) :					  
44 BINARY_SUBSCR					      								    	    return True						  
46 BINARY_ADD						      								    	elif a.sort ( ) :					  
48 LOAD_FAST 3 ( k )					      								    	    return True						  
50 COMPARE_OP 0 ( < )					      								    	elif a.sort ( ) :					  
52 POP_JUMP_IF_FALSE 30					      								    	    return True						  
							      								    	elif a.sort ( ) :					  
6 54 LOAD_CONST 3 ( False )				      								    	    return True						  
56 RETURN_VALUE						      								    	elif a.sort ( ) :					  
58 JUMP_ABSOLUTE 30					      								    	    return False					  
>> 60 POP_BLOCK						      								    	elif a.sort ( ) :					  
							      								    	    return False					  
7 >> 62 LOAD_CONST 1 ( True )				      								    	elif a.sort ( ) :					  
64 RETURN_VALUE NEW_LINE				      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return True						  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
							      								    	elif a.sort ( ) :					  
							      								    	    return False					  
-							      -								    	elif a.sort (-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac<<unk>> de def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  n -= 1						    	n = n - n						  
2 LOAD_CONST 1 ( 1 )					      	  n |= n >> 1						    	n = n - n						  
4 INPLACE_SUBTRACT					      	  n |= n >> 2						    	n = n - n						  
6 STORE_FAST 0 ( n )					      	  n |= n >> 4						    	n = n - n						  
							      	  n |= n >> 8						    	n = n - n						  
3 8 LOAD_FAST 0 ( n )					      	  n |= n >> 16						    	return n						  
10 LOAD_FAST 0 ( n )					      	  n += 1						    								  
12 LOAD_CONST 1 ( 1 )					      	  return n						    								  
14 BINARY_RSHIFT					      								    								  
16 INPLACE_OR						      								    								  
18 STORE_FAST 0 ( n )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_RSHIFT					      								    								  
28 INPLACE_OR						      								    								  
30 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 3 ( 4 )					      								    								  
38 BINARY_RSHIFT					      								    								  
40 INPLACE_OR						      								    								  
42 STORE_FAST 0 ( n )					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 4 ( 8 )					      								    								  
50 BINARY_RSHIFT					      								    								  
52 INPLACE_OR						      								    								  
54 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_CONST 5 ( 16 )					      								    								  
62 BINARY_RSHIFT					      								    								  
64 INPLACE_OR						      								    								  
66 STORE_FAST 0 ( n )					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 0 ( n )					      								    								  
							      								    								  
9 76 LOAD_FAST 0 ( n )					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object arraySortedOrNot at 0x7fbac<<unk> def arraySortedOrNot ( arr , n ) :			    def arraySortedOrNot ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 0 or n == 1 ) :				    	n = n % n						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return True					    	n = n % n						  /eval_scripts/dis_sa-python_sa.test/PROGRAM_CHECK_
4 COMPARE_OP 2 ( == )					      	  for i in range ( 1 , n ) :				    	n = n % n						  ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1.py", line 4
6 POP_JUMP_IF_TRUE 16					      	      if ( arr [ i - 1 ] > arr [ i ] ) :		    	return n % n						  8, in <module>     if f_filled(*parameters_set) ==
8 LOAD_FAST 1 ( n )					      		  return False					    								   f_gold(*parameters_set):   File "/home/ubuntu/Tra
10 LOAD_CONST 2 ( 1 )					      	  return True						    								  nsCoder/models/eval/bt/152w65bl69/eval_scripts/dis
12 COMPARE_OP 2 ( == )					      								    								  _sa-python_sa.test/PROGRAM_CHECK_ARRAY_SORTED_NOT_
14 POP_JUMP_IF_FALSE 20					      								    								  ITERATIVE_RECURSIVE_1.py", line 28, in f_filled
							      								    								    n = n % n ZeroDivisionError: integer division or
3 >> 16 LOAD_CONST 3 ( True )				      								    								   modulo by zero
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 4 ( > )					      								    								  
54 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 56 LOAD_CONST 4 ( False )				      								    								  
58 RETURN_VALUE						      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_CONST 3 ( True )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
Disassembly of <code object isDiagonalMatrix at 0x7fbac<<unk> def isDiagonalMatrix ( mat ) :				    def isDiagonalMatrix ( mat , i , j , j ) :			  script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( 0 , N ) :				    	for i in range ( j ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , N ) :			    	    j = i						  
4 LOAD_CONST 1 ( 0 )					      		  if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  	return j						  
6 LOAD_GLOBAL 1 ( N )					      		      return False				    								  
8 CALL_FUNCTION 2					      	  return True						    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 52 ( to 66 )				      								    								  
14 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 46 ( to 64 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_GLOBAL 1 ( N )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( i )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 28					      								    								  
40 LOAD_FAST 0 ( mat )					      								    								  
42 LOAD_FAST 1 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 56 LOAD_CONST 2 ( False )				      								    								  
58 RETURN_VALUE						      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 12					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 LOAD_CONST 3 ( True )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
Disassembly of <code object countNonDecreasing at 0x7fbac0e89 def countNonDecreasing ( n ) :				    def countNonDecreasing ( n ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 10 )					      	  N = 10						    	"""							  
2 STORE_FAST 1 ( N )					      	  count = 1						     Return the number of the number of the number of numbers	  
							      	  for i in range ( 1 , n + 1 ) :			     """							  
3 4 LOAD_CONST 2 ( 1 )					      	      count = int ( count * ( N + i - 1 ) )		    	n = n // 2						  
6 STORE_FAST 2 ( count )				      	      count = int ( count / i )				    	while n < n :						  
							      	  return count						    	    n = n - n						  
4 8 SETUP_LOOP 54 ( to 64 )				      								    	return n						  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_GLOBAL 1 ( int )				      								    								  
30 LOAD_FAST 2 ( count )				      								    								  
32 LOAD_FAST 1 ( N )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 2 ( count )				      								    								  
							      								    								  
6 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_FAST 2 ( count )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 STORE_FAST 2 ( count )				      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 2 ( count )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
Disassembly of <code object shuffle at 0x7fbac<<unk>> d540, f def shuffle ( card , n ) :				    def shuffle ( * fbfbacageageageageageageageageageageageageage script_not_found : None
2 0 SETUP_LOOP 68 ( to 70 )				      	  for i in range ( n ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )    								  
4 LOAD_FAST 1 ( n )					      	      tmp = card [ i ]					    								  
6 CALL_FUNCTION 1					      	      card [ i ] = card [ r ]				    								  
8 GET_ITER						      	      card [ r ] = tmp					    								  
>> 10 FOR_ITER 56 ( to 68 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 2 ( i )					      								    								  
16 LOAD_GLOBAL 1 ( random )				      								    								  
18 LOAD_METHOD 2 ( randint )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_CONST 2 ( 55 )					      								    								  
24 CALL_METHOD 2					      								    								  
26 LOAD_CONST 3 ( 52 )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 BINARY_MODULO					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 3 ( r )					      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( card )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 STORE_FAST 4 ( tmp )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( card )				      								    								  
48 LOAD_FAST 3 ( r )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( card )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
6 58 LOAD_FAST 4 ( tmp )				      								    								  
60 LOAD_FAST 0 ( card )					      								    								  
62 LOAD_FAST 3 ( r )					      								    								  
64 STORE_SUBSCR						      								    								  
66 JUMP_ABSOLUTE 10					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM
--							      --							    --								  --
Disassembly of <code object findFlips at 0x7fbac<<unk>> de40, def findFlips ( str , n ) :				    def findFlips ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( ' ' )				      	  last = ' '						    	"""							  
2 STORE_FAST 2 ( last )					      	  res = 0						     Returns the first number of last last last last last last la 
							      	  for i in range ( n ) :				     last last last last last last last last last last		  
3 4 LOAD_CONST 2 ( 0 )					      	      if ( last != str [ i ] ) :			     last last last last last last last last last last last	  
6 STORE_FAST 3 ( res )					      		  res += 1					     last last last last last last last last last last last	  
							      	      last = str [ i ]					     last last last last last last last last last last last	  
4 8 SETUP_LOOP 44 ( to 54 )				      	  return res // 2					     last last last last last last last last last last last.	  
10 LOAD_GLOBAL 0 ( range )				      								     """							  
12 LOAD_FAST 1 ( n )					      								    	return str ( str ( str ( str ( str ) ) )		  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 32 ( to 52 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( last )				      								    								  
24 LOAD_FAST 0 ( str )					      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( res )				      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( str )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_FAST 2 ( last )				      								    								  
50 JUMP_ABSOLUTE 18					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 3 ( res )				      								    								  
56 LOAD_CONST 4 ( 2 )					      								    								  
58 BINARY_FLOOR_DIVIDE					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			      CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			    CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			  CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT
--							      --							    --								  --
Disassembly of <code object check_duck at 0x7fbac0e89d20, fil def check_duck ( num ) :					    def check_duck ( num ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( num )					    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( num )					      	  count_zero = 0					     Returns a list of integers of integers to be integers.	  /eval_scripts/dis_sa-python_sa.test/CHECK_WHETHER_
4 CALL_FUNCTION 1					      	  i = 1							    								  NUMBER_DUCK_NUMBER_NOT.py", line 67, in <module>
6 STORE_FAST 1 ( l )					      	  while i < l :						     Args:							     if f_filled(*parameters_set) == f_gold(*paramet
							      	      ch = num [ i ]					     num_num: The number of integers to be integers.		  ers_set):   File "/home/ubuntu/TransCoder/models/e
3 8 LOAD_CONST 1 ( 0 )					      	      if ( ch == "0" ) :				     num_num: The number of integers to be integers.		  val/bt/152w65bl69/eval_scripts/dis_sa-python_sa.te
10 STORE_FAST 2 ( count_zero )				      		  count_zero = count_zero + 1			     num_num: The number of integers to be integers.		  st/CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT.py", line
							      	      i = i + 1						     num_num: The number of integers to be integers.		  39, in f_filled     if num < 0 : TypeError: '<' no
4 12 LOAD_CONST 2 ( 1 )					      	  return count_zero					     """							  t supported between instances of 'str' and 'int'
14 STORE_FAST 3 ( i )					      								    	if num < 0 :						  
							      								    	    return num						  
5 16 SETUP_LOOP 44 ( to 62 )				      								    	if num < 0 :						  
>> 18 LOAD_FAST 3 ( i )					      								    	    return num						  
20 LOAD_FAST 1 ( l )					      								    	if num < 0 :						  
22 COMPARE_OP 0 ( < )					      								    	    return num						  
24 POP_JUMP_IF_FALSE 60					      								    	if num < 0 :						  
							      								    	    return num						  
6 26 LOAD_FAST 0 ( num )				      								    	if num < 0 :						  
28 LOAD_FAST 3 ( i )					      								    	    return num						  
30 BINARY_SUBSCR					      								    	return num						  
32 STORE_FAST 4 ( ch )					      								    								  
							      								    								  
7 34 LOAD_FAST 4 ( ch )					      								    								  
36 LOAD_CONST 3 ( '0' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( count_zero )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 2 ( count_zero )				      								    								  
							      								    								  
9 >> 50 LOAD_FAST 3 ( i )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( i )					      								    								  
58 JUMP_ABSOLUTE 18					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
10 >> 62 LOAD_FAST 2 ( count_zero )			      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
Disassembly of <code object isInorder at 0x7fbac<<unk>> de40, def isInorder ( arr , n ) :				    def isInorder ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 0 or n == 1 ) :				    	n = n [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return True					    	while n < n :						  /eval_scripts/dis_sa-python_sa.test/CHECK_ARRAY_RE
4 COMPARE_OP 2 ( == )					      	  for i in range ( 1 , n , 1 ) :			    	    n = n [ 1 : n ]					  PRESENTS_INORDER_BINARY_SEARCH_TREE_NOT.py", line
6 POP_JUMP_IF_TRUE 16					      	      if ( arr [ i - 1 ] > arr [ i ] ) :		    	return n						  48, in <module>     if f_filled(*parameters_set) =
8 LOAD_FAST 1 ( n )					      		  return False					    								  = f_gold(*parameters_set):   File "/home/ubuntu/Tr
10 LOAD_CONST 2 ( 1 )					      	  return True						    								  ansCoder/models/eval/bt/152w65bl69/eval_scripts/di
12 COMPARE_OP 2 ( == )					      								    								  s_sa-python_sa.test/CHECK_ARRAY_REPRESENTS_INORDER
14 POP_JUMP_IF_FALSE 20					      								    								  _BINARY_SEARCH_TREE_NOT.py", line 27, in f_filled
							      								    								      n = n [ 0 ] TypeError: 'int' object is not sub
3 >> 16 LOAD_CONST 3 ( True )				      								    								  scriptable
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 SETUP_LOOP 44 ( to 66 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 CALL_FUNCTION 3					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 28 ( to 64 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 58 LOAD_CONST 4 ( False )				      								    								  
60 RETURN_VALUE						      								    								  
62 JUMP_ABSOLUTE 34					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
7 >> 66 LOAD_CONST 3 ( True )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
Disassembly of <code object getInvCount at 0x7fbac0e8bc90, fi def getInvCount ( arr , n ) :				    def getInvCount ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  inv_count = 0						    	"""							  
2 STORE_FAST 2 ( inv_count )				      	  for i in range ( n ) :				     Return the array of the inv_count of the ``arr`` in ``arr``  
							      	      for j in range ( i + 1 , n ) :			     ``arr`` in ``arr`` of the ``arr`` in ``arr`` of the ``arr``  
3 4 SETUP_LOOP 64 ( to 70 )				      		  if ( arr [ i ] > arr [ j ] ) :		     ``arr`` in ``arr`` of ``arr`` in ``arr``.			  
6 LOAD_GLOBAL 0 ( range )				      		      inv_count += 1				    								  
8 LOAD_FAST 1 ( n )					      	  return inv_count					     Parameters							  
10 CALL_FUNCTION 1					      								     -----							  
12 GET_ITER						      								     arr : ndarray						  
>> 14 FOR_ITER 52 ( to 68 )				      								     Output array of `arr`` in `arr``				  
16 STORE_FAST 3 ( i )					      								     Output array of ``arr`` in ``arr``.			  
							      								    								  
4 18 SETUP_LOOP 46 ( to 66 )				      								     Returns							  
20 LOAD_GLOBAL 0 ( range )				      								     -----							  
22 LOAD_FAST 3 ( i )					      								     arr : ndarray						  
24 LOAD_CONST 2 ( 1 )					      								     Output array of `arr` in `arr``				  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 1 ( n )					      								     See also							  
30 CALL_FUNCTION 2					      								     -----							  
32 GET_ITER						      								     arr : ndarray						  
>> 34 FOR_ITER 28 ( to 64 )				      								     Output array of `arr` in `arr`.				  
36 STORE_FAST 4 ( j )					      								    								  
							      								     See also							  
5 38 LOAD_FAST 0 ( arr )				      								     -----							  
40 LOAD_FAST 3 ( i )					      								     arr : ndarray						  
42 BINARY_SUBSCR					      								     Output array of `arr` in `arr` of `arr` in `arr`` and `arr`` 
44 LOAD_FAST 0 ( arr )					      								     Output array of `arr`` in `arr``				  
46 LOAD_FAST 4 ( j )					      								     of `arr` in `arr`` in `arr``				  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 4 ( > )					      								     """							  
52 POP_JUMP_IF_FALSE 34					      								    	return arr						  
							      								    								  
6 54 LOAD_FAST 2 ( inv_count )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( inv_count )				      								    								  
62 JUMP_ABSOLUTE 34					      								    								  
>> 64 POP_BLOCK						      								    								  
>> 66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
7 >> 70 LOAD_FAST 2 ( inv_count )			      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION     DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	    DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
Disassembly of <code object lastPosition at 0x7fbac<<unk>> de def lastPosition ( n , m , k ) :				    def lastPosition ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( m )					      	  if ( m <= n - k + 1 ) :				    	n = n % n						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( n )					      	      return m + k - 1					    	n = n % n						  /eval_scripts/dis_sa-python_sa.test/DISTRIBUTING_M
4 LOAD_FAST 2 ( k )					      	  m = m - ( n - k + 1 )					    	return n % n						  _ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION.py", l
6 BINARY_SUBTRACT					      	  if ( m % n == 0 ) :					    								  ine 48, in <module>	  if f_filled(*parameters_se
8 LOAD_CONST 1 ( 1 )					      	      return n						    								  t) == f_gold(*parameters_set): TypeError: f_filled
10 BINARY_ADD						      	  else :						    								  () takes 1 positional argument but 3 were given
12 COMPARE_OP 1 ( <= )					      	      return m % n					    								  
14 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 16 LOAD_FAST 1 ( m )					      								    								  
18 LOAD_FAST 2 ( k )					      								    								  
20 BINARY_ADD						      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_FAST 1 ( m )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_FAST 2 ( k )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 BINARY_SUBTRACT					      								    								  
42 STORE_FAST 1 ( m )					      								    								  
							      								    								  
5 44 LOAD_FAST 1 ( m )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 2 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( n )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
8 >> 60 LOAD_FAST 1 ( m )				      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 BINARY_MODULO					      								    								  
66 RETURN_VALUE						      								    								  
68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_
--							      --							    --								  --
Disassembly of <code object multiply at 0x7fbac<<unk>> d540,  def multiply ( x , y ) :					    def multiply ( x , y ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( y )					      	  if ( y == 0 ) :					    	if x == 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return x						  /MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVIS
4 COMPARE_OP 2 ( == )					      	  if ( y > 0 ) :					    	if x == 0 :						  ION_BITWISE_OPERATORS_AND_NO_LOOPS.py", line 119
6 POP_JUMP_IF_FALSE 12					      	      return ( x + multiply ( x , y - 1 ) )		    	    return x						     if __name__ == '__main__':	    ^ IndentationErr
							      	  if ( y < 0 ) :					    	elif x == 0 :						  or: expected an indented block
3 8 LOAD_CONST 1 ( 0 )					      	      return - multiply ( x , - y )			    	    return x						  
10 RETURN_VALUE						      								    	elif x == 0 :						  
							      								    	    return x						  
4 >> 12 LOAD_FAST 1 ( y )				      								    	elif x == 0 :						  
14 LOAD_CONST 1 ( 0 )					      								    	    return x						  
16 COMPARE_OP 4 ( > )					      								    	elif x == 0 :						  
18 POP_JUMP_IF_FALSE 38					      								    	    return x						  
							      								    	elif x == 0 :						  
5 20 LOAD_FAST 0 ( x )					      								    	    return x						  
22 LOAD_GLOBAL 0 ( multiply )				      								    	elif x == 0 :						  
24 LOAD_FAST 0 ( x )					      								    	    return x						  
26 LOAD_FAST 1 ( y )					      								    	elif x == 0 :						  
28 LOAD_CONST 2 ( 1 )					      								    	    return x						  
30 BINARY_SUBTRACT					      								    	elif x == 0 :						  
32 CALL_FUNCTION 2					      								    	    return x						  
34 BINARY_ADD						      								    	elif x == 0 :						  
36 RETURN_VALUE						      								    	    return x						  
							      								    	elif x == 0 :						  
6 >> 38 LOAD_FAST 1 ( y )				      								    	    return x						  
40 LOAD_CONST 1 ( 0 )					      								    	elif x == 0 :						  
42 COMPARE_OP 0 ( < )					      								    	    return x						  
44 POP_JUMP_IF_FALSE 60					      								    	elif x == 0 :						  
							      								    	    return x						  
7 46 LOAD_GLOBAL 0 ( multiply )				      								    	elif x == 0 :						  
48 LOAD_FAST 0 ( x )					      								    	    return x						  
50 LOAD_FAST 1 ( y )					      								    	elif x == 0 :						  
52 UNARY_NEGATIVE					      								    	    return x						  
54 CALL_FUNCTION 2					      								    	elif x == 0 :						  
56 UNARY_NEGATIVE					      								    	    return x						  
58 RETURN_VALUE						      								    	elif x == 0 :						  
>> 60 LOAD_CONST 0 ( None )				      								    	    return x						  
62 RETURN_VALUE NEW_LINE				      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
							      								    	elif x == 0 :						  
							      								    	    return x						  
-							      -								    	elif x == 0 :-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
Disassembly of <code object fib at 0x7fbac0e89d20, file "<dis def fib ( n , lookup ) :					    def fib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 0 or n == 1 :					    	n = n [ 0 ]						  
2 LOAD_CONST 1 ( 0 )					      	      lookup [ n ] = n					    	n = n [ 1 : ]						  
4 COMPARE_OP 2 ( == )					      	  if lookup [ n ] is None :				    	n = n [ 0 : n ]						  
6 POP_JUMP_IF_TRUE 16					      	      lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , 	n = n [ 1 : n ]						  
8 LOAD_FAST 0 ( n )					      	  return lookup [ n ]					    	n = n [ n : n ]						  
10 LOAD_CONST 2 ( 1 )					      								    	n = n [ n : n ]						  
12 COMPARE_OP 2 ( == )					      								    	n = n [ n : n ]						  
14 POP_JUMP_IF_FALSE 24					      								    	n = n [ n : n ]						  
							      								    	return n						  
3 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_FAST 1 ( lookup )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 STORE_SUBSCR						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 1 ( lookup )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 0 ( None )				      								    								  
32 COMPARE_OP 8 ( is )					      								    								  
34 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 36 LOAD_GLOBAL 0 ( fib )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 1 ( lookup )				      								    								  
46 CALL_FUNCTION 2					      								    								  
48 LOAD_GLOBAL 0 ( fib )				      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_CONST 3 ( 2 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_FAST 1 ( lookup )				      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_FAST 1 ( lookup )				      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 STORE_SUBSCR						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 1 ( lookup )				      								    								  
70 LOAD_FAST 0 ( n )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
Disassembly of <code object swapDiagonal at 0x7fbac<<unk>> d5 def swapDiagonal ( matrix ) :				    def swapDiagonal ( matrix , i , i , j ) :			  script_not_found : None
2 0 SETUP_LOOP 74 ( to 76 )				      	  for i in range ( N ) :				    	for i in range ( j ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \   	    i = i						  
4 LOAD_GLOBAL 1 ( N )					      		  matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]   	return i						  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 62 ( to 74 )				      								    								  
12 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( matrix )				      								    								  
16 LOAD_FAST 1 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_GLOBAL 1 ( N )					      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( matrix )				      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 ROT_TWO						      								    								  
44 LOAD_FAST 0 ( matrix )				      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
54 LOAD_FAST 0 ( matrix )				      								    								  
56 LOAD_FAST 1 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_GLOBAL 1 ( N )					      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_SUBSCR						      								    								  
72 JUMP_ABSOLUTE 10					      								    								  
>> 74 POP_BLOCK						      								    								  
>> 76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		      MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		    MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO			  MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
Disassembly of <code object moduloMultiplication at 0x7fbac<< def moduloMultiplication ( a , b , mod ) :		    def moduloMultiplication ( a , b , c , c ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0 ;						    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( res )					      	  a = a % mod ;						     Return a list of a list of tuples of tuples		  /MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO.py", l
							      	  while ( b ) :						     """							  ine 28     def f_filled ( a , b , c , c ) :	  ^
3 4 LOAD_FAST 0 ( a )					      	      if ( b & 1 ) :					    	if a is None :						  SyntaxError: duplicate argument 'c' in function de
6 LOAD_FAST 2 ( mod )					      		  res = ( res + a ) % mod ;			    	    return a						  finition
8 BINARY_MODULO						      	      a = ( 2 * a ) % mod ;				    	if a is None :						  
10 STORE_FAST 0 ( a )					      	      b >>= 1 ;						    	    return a						  
							      	  return res ;						    	return a						  
4 12 SETUP_LOOP 48 ( to 62 )				      								    								  
>> 14 LOAD_FAST 1 ( b )					      								    								  
16 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( b )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_AND						      								    								  
24 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( res )				      								    								  
28 LOAD_FAST 0 ( a )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_FAST 2 ( mod )					      								    								  
34 BINARY_MODULO					      								    								  
36 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 38 LOAD_CONST 3 ( 2 )				      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_FAST 2 ( mod )					      								    								  
46 BINARY_MODULO					      								    								  
48 STORE_FAST 0 ( a )					      								    								  
							      								    								  
8 50 LOAD_FAST 1 ( b )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 INPLACE_RSHIFT					      								    								  
56 STORE_FAST 1 ( b )					      								    								  
58 JUMP_ABSOLUTE 14					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
9 >> 62 LOAD_FAST 3 ( res )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
Disassembly of <code object minTime at 0x7fbac<<unk>> de40, f def minTime ( arr , n , m ) :				    def minTime ( fbfbacactntn1 , n = 0 , n = 1 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  t = 0							    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 3 ( t )					      	  while ( 1 ) :						    								  
							      	      items = 0						    								  
3 4 SETUP_LOOP 62 ( to 68 )				      	      for i in range ( n ) :				    								  
							      		  items += ( t // arr [ i ] )			    								  
4 >> 6 LOAD_CONST 1 ( 0 )				      	      if ( items >= m ) :				    								  
8 STORE_FAST 4 ( items )				      		  return t					    								  
							      	      t += 1						    								  
5 10 SETUP_LOOP 32 ( to 44 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 24 LOAD_FAST 4 ( items )				      								    								  
26 LOAD_FAST 3 ( t )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_FLOOR_DIVIDE					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 4 ( items )				      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
7 >> 44 LOAD_FAST 4 ( items )				      								    								  
46 LOAD_FAST 2 ( m )					      								    								  
48 COMPARE_OP 5 ( >= )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
8 52 LOAD_FAST 3 ( t )					      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
9 >> 56 LOAD_FAST 3 ( t )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( t )					      								    								  
64 JUMP_ABSOLUTE 6					      								    								  
66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
Disassembly of <code object countDer at 0x7fbac<<unk>> d540,  def countDer ( n ) :					    def countDer ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 1 ) : return 0				    	if n == 0 :						  
2 LOAD_CONST 1 ( 1 )					      	  if ( n == 0 ) : return 1				    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( n == 2 ) : return 1				    	elif n == 1 :						  
6 POP_JUMP_IF_FALSE 12					      	  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  	    return 0						  
8 LOAD_CONST 2 ( 0 )					      								    	elif n == 2 :						  
10 RETURN_VALUE						      								    	    return 0						  
							      								    	elif n == 1 :						  
3 >> 12 LOAD_FAST 0 ( n )				      								    	    return 0						  
14 LOAD_CONST 2 ( 0 )					      								    	elif n == 1 :						  
16 COMPARE_OP 2 ( == )					      								    	    return 0						  
18 POP_JUMP_IF_FALSE 24					      								    	elif n == 1 :						  
20 LOAD_CONST 1 ( 1 )					      								    	    return 0						  
22 RETURN_VALUE						      								    	elif n == 1 :						  
							      								    	    return 0						  
4 >> 24 LOAD_FAST 0 ( n )				      								    	elif n == 1 :						  
26 LOAD_CONST 3 ( 2 )					      								    	    return 0						  
28 COMPARE_OP 2 ( == )					      								    	elif n == 1 :						  
30 POP_JUMP_IF_FALSE 36					      								    	    return 0						  
32 LOAD_CONST 1 ( 1 )					      								    	elif n == 1 :						  
34 RETURN_VALUE						      								    	    return 0						  
							      								    	elif n == 1 :						  
5 >> 36 LOAD_FAST 0 ( n )				      								    	    return 0						  
38 LOAD_CONST 1 ( 1 )					      								    	elif n == 1 :						  
40 BINARY_SUBTRACT					      								    	    return 0						  
42 LOAD_GLOBAL 0 ( countDer )				      								    	elif n == 1 :						  
44 LOAD_FAST 0 ( n )					      								    	    return 0						  
46 LOAD_CONST 1 ( 1 )					      								    	elif n == 1 :						  
48 BINARY_SUBTRACT					      								    	    return 0						  
50 CALL_FUNCTION 1					      								    	elif n == 1 :						  
52 LOAD_GLOBAL 0 ( countDer )				      								    	    return 0						  
54 LOAD_FAST 0 ( n )					      								    	elif n == 1 :						  
56 LOAD_CONST 3 ( 2 )					      								    	    return 0						  
58 BINARY_SUBTRACT					      								    	elif n == 1 :						  
60 CALL_FUNCTION 1					      								    	    return 0						  
62 BINARY_ADD						      								    	elif n == 1 :						  
64 BINARY_MULTIPLY					      								    	    return 0						  
66 RETURN_VALUE NEW_LINE				      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
							      								    	elif n == 1 :						  
							      								    	    return 0						  
-							      -								    	elif n == 1 :-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac<<unk>> d540, f def findSum ( n ) :					    def findSum ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  multiTerms = n * ( n + 1 ) // 2			    	if n == 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( n )					      	  sm = multiTerms					    	    return n						  /SUM_PAIRWISE_PRODUCTS_1.py", line 120     if __na
4 LOAD_CONST 1 ( 1 )					      	  for i in range ( 2 , n + 1 ) :			    	elif n == 1 :						  me__ == '__main__':	  ^ IndentationError: expect
6 BINARY_ADD						      	      multiTerms = multiTerms - ( i - 1 )		    	    return n						  ed an indented block
8 BINARY_MULTIPLY					      	      sm = sm + multiTerms * i				    	elif n == 2 :						  
10 LOAD_CONST 2 ( 2 )					      	  return sm						    	    return n						  
12 BINARY_FLOOR_DIVIDE					      								    	elif n == 2 :						  
14 STORE_FAST 1 ( multiTerms )				      								    	    return n						  
							      								    	elif n == 3 :						  
3 16 LOAD_FAST 1 ( multiTerms )				      								    	    return n						  
18 STORE_FAST 2 ( sm )					      								    	elif n == 4 :						  
							      								    	    return n						  
4 20 SETUP_LOOP 46 ( to 68 )				      								    	elif n == 3 :						  
22 LOAD_GLOBAL 0 ( range )				      								    	    return n						  
24 LOAD_CONST 2 ( 2 )					      								    	elif n == 4 :						  
26 LOAD_FAST 0 ( n )					      								    	    return n						  
28 LOAD_CONST 1 ( 1 )					      								    	elif n == 4 :						  
30 BINARY_ADD						      								    	    return n						  
32 CALL_FUNCTION 2					      								    	elif n == 4 :						  
34 GET_ITER						      								    	    return n						  
>> 36 FOR_ITER 28 ( to 66 )				      								    	elif n == 4 :						  
38 STORE_FAST 3 ( i )					      								    	    return n						  
							      								    	elif n == 4 :						  
5 40 LOAD_FAST 1 ( multiTerms )				      								    	    return n						  
42 LOAD_FAST 3 ( i )					      								    	elif n == 4 :						  
44 LOAD_CONST 1 ( 1 )					      								    	    return n						  
46 BINARY_SUBTRACT					      								    	elif n == 4 :						  
48 BINARY_SUBTRACT					      								    	    return n						  
50 STORE_FAST 1 ( multiTerms )				      								    	elif n == 4 :						  
							      								    	    return n						  
6 52 LOAD_FAST 2 ( sm )					      								    	elif n == 4 :						  
54 LOAD_FAST 1 ( multiTerms )				      								    	    return n						  
56 LOAD_FAST 3 ( i )					      								    	elif n == 4 :						  
58 BINARY_MULTIPLY					      								    	    return n						  
60 BINARY_ADD						      								    	elif n == 4 :						  
62 STORE_FAST 2 ( sm )					      								    	    return n						  
64 JUMP_ABSOLUTE 36					      								    	elif n == 4 :						  
>> 66 POP_BLOCK						      								    	    return n						  
							      								    	elif n == 4 :						  
7 >> 68 LOAD_FAST 2 ( sm )				      								    	    return n						  
70 RETURN_VALUE NEW_LINE				      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
							      								    	    return n						  
							      								    	elif n == 4 :						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
Disassembly of <code object decimalToBinary at 0x7fbac<<unk>> def decimalToBinary ( N ) :				    def decimalToBinary ( N ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  B_Number = 0						    	return ( N * N )					  
2 STORE_FAST 1 ( B_Number )				      	  cnt = 0						    								  
							      	  while ( N != 0 ) :					    								  
3 4 LOAD_CONST 1 ( 0 )					      	      rem = N % 2					    								  
6 STORE_FAST 2 ( cnt )					      	      c = pow ( 10 , cnt )				    								  
							      	      B_Number += rem * c				    								  
4 8 SETUP_LOOP 58 ( to 68 )				      	      N //= 2						    								  
>> 10 LOAD_FAST 0 ( N )					      	      cnt += 1						    								  
12 LOAD_CONST 1 ( 0 )					      	  return B_Number					    								  
14 COMPARE_OP 3 ( != )					      								    								  
16 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
5 18 LOAD_FAST 0 ( N )					      								    								  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_MODULO					      								    								  
24 STORE_FAST 3 ( rem )					      								    								  
							      								    								  
6 26 LOAD_GLOBAL 0 ( pow )				      								    								  
28 LOAD_CONST 3 ( 10 )					      								    								  
30 LOAD_FAST 2 ( cnt )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 STORE_FAST 4 ( c )					      								    								  
							      								    								  
7 36 LOAD_FAST 1 ( B_Number )				      								    								  
38 LOAD_FAST 3 ( rem )					      								    								  
40 LOAD_FAST 4 ( c )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 1 ( B_Number )				      								    								  
							      								    								  
8 48 LOAD_FAST 0 ( N )					      								    								  
50 LOAD_CONST 2 ( 2 )					      								    								  
52 INPLACE_FLOOR_DIVIDE					      								    								  
54 STORE_FAST 0 ( N )					      								    								  
							      								    								  
9 56 LOAD_FAST 2 ( cnt )				      								    								  
58 LOAD_CONST 4 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( cnt )					      								    								  
64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
10 >> 68 LOAD_FAST 1 ( B_Number )			      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	      SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	    SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	  SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST
--							      --							    --								  --
Disassembly of <code object printSorted at 0x7fbac<<unk>> d54 def printSorted ( arr , start , end ) :			    def printSorted ( arr , start , end , start , end ) :	  script_not_found : None
2 0 LOAD_FAST 1 ( start )				      	  if start > end :					    	if start > start :					  
2 LOAD_FAST 2 ( end )					      	      return						    	    return None						  
4 COMPARE_OP 4 ( > )					      	  printSorted ( arr , start * 2 + 1 , end )		    	elif start > start :					  
6 POP_JUMP_IF_FALSE 12					      	  print ( arr [ start ] , end = " " )			    	    return None						  
							      	  printSorted ( arr , start * 2 + 2 , end )		    	elif start > start :					  
3 8 LOAD_CONST 0 ( None )				      								    	    return None						  
10 RETURN_VALUE						      								    	elif start > start :					  
							      								    	    return None						  
4 >> 12 LOAD_GLOBAL 0 ( printSorted )			      								    	elif start > start :					  
14 LOAD_FAST 0 ( arr )					      								    	    return None						  
16 LOAD_FAST 1 ( start )				      								    	elif start > start :					  
18 LOAD_CONST 1 ( 2 )					      								    	    return None						  
20 BINARY_MULTIPLY					      								    	elif start > start :					  
22 LOAD_CONST 2 ( 1 )					      								    	    return None						  
24 BINARY_ADD						      								    	elif start > start :					  
26 LOAD_FAST 2 ( end )					      								    	    return None						  
28 CALL_FUNCTION 3					      								    	elif start > start :					  
30 POP_TOP						      								    	    return None						  
							      								    	elif start > start :					  
5 32 LOAD_GLOBAL 1 ( print )				      								    	    return None						  
34 LOAD_FAST 0 ( arr )					      								    	elif start > start :					  
36 LOAD_FAST 1 ( start )				      								    	    return None						  
38 BINARY_SUBSCR					      								    	elif start > start :					  
40 LOAD_CONST 3 ( ' ' )					      								    	    return None						  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    	elif start > start :					  
44 CALL_FUNCTION_KW 2					      								    	    return None						  
46 POP_TOP						      								    	elif start > start :					  
							      								    	    return None						  
6 48 LOAD_GLOBAL 0 ( printSorted )			      								    	elif start > start :					  
50 LOAD_FAST 0 ( arr )					      								    	    return None						  
52 LOAD_FAST 1 ( start )				      								    	elif start > start :					  
54 LOAD_CONST 1 ( 2 )					      								    	    return None						  
56 BINARY_MULTIPLY					      								    	elif start > start :					  
58 LOAD_CONST 1 ( 2 )					      								    	    return None						  
60 BINARY_ADD						      								    	elif start > start :					  
62 LOAD_FAST 2 ( end )					      								    	    return None						  
64 CALL_FUNCTION 3					      								    	elif start > start :					  
66 POP_TOP						      								    	    return None						  
68 LOAD_CONST 0 ( None )				      								    	elif start > start :					  
70 RETURN_VALUE NEW_LINE				      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
							      								    	    return None						  
							      								    	elif start > start :					  
-							      -								    	    return None-					  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
Disassembly of <code object constructArr at 0x7fbac0e89d20, f def constructArr ( arr , pair , n ) :			    def constructArr ( arr , pair ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( pair )				      	  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] )  	if len ( pair ) == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    	    return ( ( pair [ 0 ] * pair [ 1 : ] ) * pair [ 1 : ] 
4 BINARY_SUBSCR						      	      arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		    	return ( pair [ 0 ] * pair [ 1 : ] )			  
6 LOAD_FAST 1 ( pair )					      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 BINARY_SUBSCR					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_FAST 1 ( pair )					      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_SUBSCR					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_FLOOR_DIVIDE					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
3 36 SETUP_LOOP 42 ( to 80 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 2 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 28 ( to 78 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 52 LOAD_FAST 1 ( pair )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 48					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	      MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	    MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS		  MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS
--							      --							    --								  --
Disassembly of <code object minProduct at 0x7fbac<<unk>> d540 def minProduct ( arr , n , k ) :				    def minProduct ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( heapq )				      	  heapq.heapify ( arr )					    	heapq = heapheapheapheapheapheapheapheapheapheapheapheaph 
2 LOAD_METHOD 1 ( heapify )				      	  count = 0						    								  
4 LOAD_FAST 0 ( arr )					      	  ans = 1						    								  
6 CALL_METHOD 1						      	  while ( arr ) and count < k :				    								  
8 POP_TOP						      	      x = heapq.heappop ( arr )				    								  
							      	      ans = ans * x					    								  
3 10 LOAD_CONST 1 ( 0 )					      	      count = count + 1					    								  
12 STORE_FAST 3 ( count )				      	  return ans ;						    								  
							      								    								  
4 14 LOAD_CONST 2 ( 1 )					      								    								  
16 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
5 18 SETUP_LOOP 42 ( to 62 )				      								    								  
>> 20 LOAD_FAST 0 ( arr )				      								    								  
22 POP_JUMP_IF_FALSE 60					      								    								  
24 LOAD_FAST 3 ( count )				      								    								  
26 LOAD_FAST 2 ( k )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 32 LOAD_GLOBAL 0 ( heapq )				      								    								  
34 LOAD_METHOD 2 ( heappop )				      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 CALL_METHOD 1					      								    								  
40 STORE_FAST 5 ( x )					      								    								  
							      								    								  
7 42 LOAD_FAST 4 ( ans )				      								    								  
44 LOAD_FAST 5 ( x )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( count )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( count )				      								    								  
58 JUMP_ABSOLUTE 20					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
9 >> 62 LOAD_FAST 4 ( ans )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	      K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	    K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	  K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED
--							      --							    --								  --
Disassembly of <code object minDiff at 0x7fbac<<unk>> de40, f def minDiff ( arr , n , k ) :				    def minDiff ( arr , n , n , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 2147483647 )				      	  result = + 2147483647					    	n = [ ]							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( result )				      	  arr.sort ( )						    	n = n - n						  /K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MIN
							      	  for i in range ( n - k + 1 ) :			    	while n < n :						  IMIZED.py", line 25	  def f_filled ( arr , n , n
3 4 LOAD_FAST 0 ( arr )					      	      result = int ( min ( result , arr [ i + k - 1 ] - arr 	    n = n - n						   , n , n ) :	   ^ SyntaxError: duplicate argument
6 LOAD_METHOD 0 ( sort )				      	  return result						    	    n += n						   'n' in function definition
8 CALL_METHOD 0						      								    	return n						  
10 POP_TOP						      								    								  
							      								    								  
4 12 SETUP_LOOP 58 ( to 72 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_FAST 2 ( k )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 38 ( to 70 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_GLOBAL 2 ( int )				      								    								  
36 LOAD_GLOBAL 3 ( min )				      								    								  
38 LOAD_FAST 3 ( result )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_FAST 2 ( k )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 STORE_FAST 3 ( result )				      								    								  
68 JUMP_ABSOLUTE 30					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_FAST 3 ( result )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	      DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	    DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	  DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST
--							      --							    --								  --
Disassembly of <code object dfs at 0x7fbac<<unk>> de40, file  def dfs ( List , node , arrival ) :			    def dfs ( List , node ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( node )					    	print ( node , node )					  
2 LOAD_FAST 1 ( node )					      	  for i in range ( len ( List [ node ] ) ) :		    								  
4 CALL_FUNCTION 1					      	      if ( List [ node ] [ i ] != arrival ) :		    								  
6 POP_TOP						      		  dfs ( List , List [ node ] [ i ] , node )	    								  
							      								    								  
3 8 SETUP_LOOP 60 ( to 70 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_GLOBAL 2 ( len )				      								    								  
14 LOAD_FAST 0 ( List )					      								    								  
16 LOAD_FAST 1 ( node )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 40 ( to 68 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 0 ( List )				      								    								  
32 LOAD_FAST 1 ( node )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( arrival )				      								    								  
42 COMPARE_OP 3 ( != )					      								    								  
44 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 3 ( dfs )				      								    								  
48 LOAD_FAST 0 ( List )					      								    								  
50 LOAD_FAST 0 ( List )					      								    								  
52 LOAD_FAST 1 ( node )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( node )					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 POP_TOP						      								    								  
66 JUMP_ABSOLUTE 26					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
Disassembly of <code object numofsubset at 0x7fbac<<unk>> de4 def numofsubset ( arr , n ) :				    def numofsubset ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sorted )				      	  x = sorted ( arr )					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( arr )					      	  count = 1						    								  /COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECU
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n - 1 ) :			    								  TIVE_NUMBERS.py", line 47	print("#Results: %i,
6 STORE_FAST 2 ( x )					      	      if ( x [ i ] + 1 != x [ i + 1 ] ) :		    								   %i" % (n_success, len(param)))
							      		  count = count + 1				    								  				      ^ SyntaxError:
3 8 LOAD_CONST 1 ( 1 )					      	  return count						    								   EOF while scanning triple-quoted string literal
10 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 12 SETUP_LOOP 54 ( to 68 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 2 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( x )					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 2 ( x )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
6 56 LOAD_FAST 3 ( count )				      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 3 ( count )				      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 3 ( count )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		      COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		    COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		  COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME
--							      --							    --								  --
Disassembly of <code object countFibs at 0x7fbac0e8bc90, file def countFibs ( low , high ) :				    def countFibs ( fffffffffffffffffffffffffffffffffffffffffffff error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( ( 0 , 1 , 1 ) )			      	  f1 , f2 , f3 = 0 , 1 , 1				    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 UNPACK_SEQUENCE 3					      	  result = 0						    								  /COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME.py",
4 STORE_FAST 2 ( f1 )					      	  while ( f1 <= high ) :				    								   line 31     if __name__ == '__main__':      ^ Syn
6 STORE_FAST 3 ( f2 )					      	      if ( f1 >= low ) :				    								  taxError: invalid syntax
8 STORE_FAST 4 ( f3 )					      		  result += 1					    								  
							      	      f1 = f2						    								  
3 10 LOAD_CONST 2 ( 0 )					      	      f2 = f3						    								  
12 STORE_FAST 5 ( result )				      	      f3 = f1 + f2					    								  
							      	  return result						    								  
4 14 SETUP_LOOP 44 ( to 60 )				      								    								  
>> 16 LOAD_FAST 2 ( f1 )				      								    								  
18 LOAD_FAST 1 ( high )					      								    								  
20 COMPARE_OP 1 ( <= )					      								    								  
22 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( f1 )					      								    								  
26 LOAD_FAST 0 ( low )					      								    								  
28 COMPARE_OP 5 ( >= )					      								    								  
30 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 32 LOAD_FAST 5 ( result )				      								    								  
34 LOAD_CONST 3 ( 1 )					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 5 ( result )				      								    								  
							      								    								  
7 >> 40 LOAD_FAST 3 ( f2 )				      								    								  
42 STORE_FAST 2 ( f1 )					      								    								  
							      								    								  
8 44 LOAD_FAST 4 ( f3 )					      								    								  
46 STORE_FAST 3 ( f2 )					      								    								  
							      								    								  
9 48 LOAD_FAST 2 ( f1 )					      								    								  
50 LOAD_FAST 3 ( f2 )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 4 ( f3 )					      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
10 >> 60 LOAD_FAST 5 ( result )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
Disassembly of <code object isPossibleTriangle at 0x7fbac0e8b def isPossibleTriangle ( arr , N ) :			    def isPossibleunsigned_unsigned_unsigned_unsigned_unsigned_un error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( N )					      	  if N < 3 :						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 3 )					      	      return False					    								  /POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES.py", line 26
4 COMPARE_OP 0 ( < )					      	  arr.sort ( )						    								      def f_filled		  ^ SyntaxError: inv
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( N - 2 ) :				    								  alid syntax
							      	      if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	    								  
3 8 LOAD_CONST 2 ( False )				      		  return True					    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( arr )				      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 SETUP_LOOP 56 ( to 78 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 1 ( N )					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 40 ( to 76 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_CONST 4 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_CONST 3 ( 2 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
7 70 LOAD_CONST 5 ( True )				      								    								  
72 RETURN_VALUE						      								    								  
74 JUMP_ABSOLUTE 34					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
Disassembly of <code object eulerian at 0x7fbac<<unk>> d540,  def eulerian ( n , m ) :					    def eulerian ( n , m , n = 1 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( m )					      	  if ( m >= n or n == 0 ) :				    	if n < 0 :						  
2 LOAD_FAST 0 ( n )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 5 ( >= )					      	  if ( m == 0 ) :					    	if n >= 5 :						  
6 POP_JUMP_IF_TRUE 16					      	      return 1 ;					    	    return 0						  
8 LOAD_FAST 0 ( n )					      	  return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 	if n >= 5 :						  
10 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	if n >= 5 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return 0						  
							      								    	return 0						  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( m )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 2 ( 1 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 0 ( n )				      								    								  
34 LOAD_FAST 1 ( m )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_GLOBAL 0 ( eulerian )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_FAST 1 ( m )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_FAST 1 ( m )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_GLOBAL 0 ( eulerian )				      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 1 ( m )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 BINARY_ADD						      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION			      PROGRAM_BINARY_DECIMAL_CONVERSION				    PROGRAM_BINARY_DECIMAL_CONVERSION				  PROGRAM_BINARY_DECIMAL_CONVERSION
--							      --							    --								  --
Disassembly of <code object binaryToDecimal at 0x7fbac0e89d20 def binaryToDecimal ( n ) :				    def binaryToDecimal ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  num = n ;						    	n = n [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( num )					      	  dec_value = 0 ;					    	num = n [ 1 ]						  /eval_scripts/dis_sa-python_sa.test/PROGRAM_BINARY
							      	  base = 1 ;						    	num = n [ 0 ]						  _DECIMAL_CONVERSION.py", line 62, in <module>
3 4 LOAD_CONST 1 ( 0 )					      	  temp = num ;						    	num = n [ 1 ]						  if f_filled(*parameters_set) == f_gold(*parameters
6 STORE_FAST 2 ( dec_value )				      	  while ( temp ) :					    	num = n [ 2 ]						  _set):   File "/home/ubuntu/TransCoder/models/eval
							      	      last_digit = temp % 10 ;				    	num = n [ 1 ]						  /bt/152w65bl69/eval_scripts/dis_sa-python_sa.test/
4 8 LOAD_CONST 2 ( 1 )					      	      temp = int ( temp / 10 ) ;			    	num = n [ 2 ]						  PROGRAM_BINARY_DECIMAL_CONVERSION.py", line 31, in
10 STORE_FAST 3 ( base )				      	      dec_value += last_digit * base ;			    	num = num [ 3 ]						   f_filled	n = n [ 0 ] TypeError: 'int' object
							      	      base = base * 2 ;					    	while num < num :					  is not subscriptable
5 12 LOAD_FAST 1 ( num )				      	  return dec_value ;					    	    num = num % num					  
14 STORE_FAST 4 ( temp )				      								    	    num = num % num					  
							      								    	    num = num % num					  
6 16 SETUP_LOOP 48 ( to 66 )				      								    	    num = num % num					  
>> 18 LOAD_FAST 4 ( temp )				      								    	return num % num					  
20 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 22 LOAD_FAST 4 ( temp )				      								    								  
24 LOAD_CONST 3 ( 10 )					      								    								  
26 BINARY_MODULO					      								    								  
28 STORE_FAST 5 ( last_digit )				      								    								  
							      								    								  
8 30 LOAD_GLOBAL 0 ( int )				      								    								  
32 LOAD_FAST 4 ( temp )					      								    								  
34 LOAD_CONST 3 ( 10 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
9 42 LOAD_FAST 2 ( dec_value )				      								    								  
44 LOAD_FAST 5 ( last_digit )				      								    								  
46 LOAD_FAST 3 ( base )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 2 ( dec_value )				      								    								  
							      								    								  
10 54 LOAD_FAST 3 ( base )				      								    								  
56 LOAD_CONST 4 ( 2 )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 STORE_FAST 3 ( base )				      								    								  
62 JUMP_ABSOLUTE 18					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
11 >> 66 LOAD_FAST 2 ( dec_value )			      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
Disassembly of <code object findMod at 0x7fbac<<unk>> de40, f def findMod ( a , b ) :					    def findMod ( a , b ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  if ( a < 0 ) :					    	if a == 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      a = - a						    	    return 0						  /MODULUS_TWO_FLOAT_DOUBLE_NUMBERS.py", line 121
4 COMPARE_OP 0 ( < )					      	  if ( b < 0 ) :					    	elif a == 0 :						    elif a == 0		      ^ SyntaxError: invalid
6 POP_JUMP_IF_FALSE 14					      	      b = - b						    	    return 0						   syntax
							      	  mod = a						    	elif a == 0 :						  
3 8 LOAD_FAST 0 ( a )					      	  while ( mod >= b ) :					    	    return 0						  
10 UNARY_NEGATIVE					      	      mod = mod - b					    	elif a == 0 :						  
12 STORE_FAST 0 ( a )					      	  if ( a < 0 ) :					    	    return 0						  
							      	      return - mod					    	elif a == 0 :						  
4 >> 14 LOAD_FAST 1 ( b )				      	  return mod						    	    return 0						  
16 LOAD_CONST 1 ( 0 )					      								    	elif a == 0 :						  
18 COMPARE_OP 0 ( < )					      								    	    return 0						  
20 POP_JUMP_IF_FALSE 28					      								    	elif a == 0 :						  
							      								    	    return 0						  
5 22 LOAD_FAST 1 ( b )					      								    	elif a == 0 :						  
24 UNARY_NEGATIVE					      								    	    return 0						  
26 STORE_FAST 1 ( b )					      								    	elif a == 0 :						  
							      								    	    return 0						  
6 >> 28 LOAD_FAST 0 ( a )				      								    	elif a == 0 :						  
30 STORE_FAST 2 ( mod )					      								    	    return 0						  
							      								    	elif a == 0 :						  
7 32 SETUP_LOOP 20 ( to 54 )				      								    	    return 0						  
>> 34 LOAD_FAST 2 ( mod )				      								    	elif a == 0 :						  
36 LOAD_FAST 1 ( b )					      								    	    return 0						  
38 COMPARE_OP 5 ( >= )					      								    	elif a == 0 :						  
40 POP_JUMP_IF_FALSE 52					      								    	    return 0						  
							      								    	elif a == 0 :						  
8 42 LOAD_FAST 2 ( mod )				      								    	    return 0						  
44 LOAD_FAST 1 ( b )					      								    	elif a == 0 :						  
46 BINARY_SUBTRACT					      								    	    return 0						  
48 STORE_FAST 2 ( mod )					      								    	elif a == 0 :						  
50 JUMP_ABSOLUTE 34					      								    	    return 0						  
>> 52 POP_BLOCK						      								    	elif a == 0 :						  
							      								    	    return 0						  
9 >> 54 LOAD_FAST 0 ( a )				      								    	elif a == 0 :						  
56 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
58 COMPARE_OP 0 ( < )					      								    	elif a == 0 :						  
60 POP_JUMP_IF_FALSE 68					      								    	    return 0						  
							      								    	elif a == 0 :						  
10 62 LOAD_FAST 2 ( mod )				      								    	    return 0						  
64 UNARY_NEGATIVE					      								    	elif a == 0 :						  
66 RETURN_VALUE						      								    	    return 0						  
							      								    	elif a == 0 :						  
11 >> 68 LOAD_FAST 2 ( mod )				      								    	    return 0						  
70 RETURN_VALUE NEW_LINE				      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
							      								    	elif a == 0 :						  
							      								    	    return 0						  
-							      -								    	elif a == 0-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
Disassembly of <code object maximizecube at 0x7fbac0e89d20, f def maximizecube ( l , b , h ) :				    def maximizecube ( l , b , a , b , b , c , c , c , c , c , c  script_not_found : None
2 0 LOAD_GLOBAL 0 ( gcd )				      	  side = gcd ( l , gcd ( b , h ) )			    return gcd ( c , c , c , c , c , c , c , c , c ,		  
2 LOAD_FAST 0 ( l )					      	  num = int ( l / side )				    								  
4 LOAD_GLOBAL 0 ( gcd )					      	  num = int ( num * b / side )				    								  
6 LOAD_FAST 1 ( b )					      	  num = int ( num * h / side )				    								  
8 LOAD_FAST 2 ( h )					      	  print ( side , num )					    								  
10 CALL_FUNCTION 2					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 STORE_FAST 3 ( side )				      								    								  
							      								    								  
3 16 LOAD_GLOBAL 1 ( int )				      								    								  
18 LOAD_FAST 0 ( l )					      								    								  
20 LOAD_FAST 3 ( side )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 STORE_FAST 4 ( num )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 1 ( int )				      								    								  
30 LOAD_FAST 4 ( num )					      								    								  
32 LOAD_FAST 1 ( b )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 3 ( side )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 4 ( num )					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 1 ( int )				      								    								  
46 LOAD_FAST 4 ( num )					      								    								  
48 LOAD_FAST 2 ( h )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_FAST 3 ( side )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 STORE_FAST 4 ( num )					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 2 ( print )				      								    								  
62 LOAD_FAST 3 ( side )					      								    								  
64 LOAD_FAST 4 ( num )					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 POP_TOP						      								    								  
70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_OCTAL_DECIMAL_CONVERSION			      PROGRAM_OCTAL_DECIMAL_CONVERSION				    PROGRAM_OCTAL_DECIMAL_CONVERSION				  PROGRAM_OCTAL_DECIMAL_CONVERSION
--							      --							    --								  --
Disassembly of <code object octalToDecimal at 0x7fbac<<unk>>  def octalToDecimal ( n ) :				    def octalToDecimal ( n , num ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  num = n ;						    	n = n % n						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( num )					      	  dec_value = 0 ;					    	num = n % n						  /eval_scripts/dis_sa-python_sa.test/PROGRAM_OCTAL_
							      	  base = 1 ;						    	num = n % n						  DECIMAL_CONVERSION.py", line 130, in <module>
3 4 LOAD_CONST 1 ( 0 )					      	  temp = num ;						    	num = n % n						  if f_filled(*parameters_set) == f_gold(*parameters
6 STORE_FAST 2 ( dec_value )				      	  while ( temp ) :					    	num = n % n						  _set): TypeError: f_filled() missing 1 required po
							      	      last_digit = temp % 10 ;				    	num = n % n						  sitional argument: 'num'
4 8 LOAD_CONST 2 ( 1 )					      	      temp = int ( temp / 10 ) ;			    	num = n % n						  
10 STORE_FAST 3 ( base )				      	      dec_value += last_digit * base ;			    	num = num % n						  
							      	      base = base * 8 ;					    	num = num % num						  
5 12 LOAD_FAST 1 ( num )				      	  return dec_value ;					    	num = num % n						  
14 STORE_FAST 4 ( temp )				      								    	num = num % n						  
							      								    	num = num % num						  
6 16 SETUP_LOOP 48 ( to 66 )				      								    	num = num % num						  
>> 18 LOAD_FAST 4 ( temp )				      								    	num = num % num						  
20 POP_JUMP_IF_FALSE 64					      								    	num = num % num						  
							      								    	num = num % num						  
7 22 LOAD_FAST 4 ( temp )				      								    	num = num % num						  
24 LOAD_CONST 3 ( 10 )					      								    	num = num % num						  
26 BINARY_MODULO					      								    	num = num % num						  
28 STORE_FAST 5 ( last_digit )				      								    	num = num % num						  
							      								    	num = num % num						  
8 30 LOAD_GLOBAL 0 ( int )				      								    	num = num % num						  
32 LOAD_FAST 4 ( temp )					      								    	num = num % num						  
34 LOAD_CONST 3 ( 10 )					      								    	num = num % num						  
36 BINARY_TRUE_DIVIDE					      								    	num = num % num						  
38 CALL_FUNCTION 1					      								    	num = num % num						  
40 STORE_FAST 4 ( temp )				      								    	num = num % num						  
							      								    	num = num % num						  
9 42 LOAD_FAST 2 ( dec_value )				      								    	num = num % num						  
44 LOAD_FAST 5 ( last_digit )				      								    	num = num % num						  
46 LOAD_FAST 3 ( base )					      								    	num = num % num						  
48 BINARY_MULTIPLY					      								    	num = num % num						  
50 INPLACE_ADD						      								    	num = num % num						  
52 STORE_FAST 2 ( dec_value )				      								    	num = num % num						  
							      								    	num = num % num						  
10 54 LOAD_FAST 3 ( base )				      								    	num = num % num						  
56 LOAD_CONST 4 ( 8 )					      								    	num = num % num						  
58 BINARY_MULTIPLY					      								    	num = num % num						  
60 STORE_FAST 3 ( base )				      								    	num = num % num						  
62 JUMP_ABSOLUTE 18					      								    	num = num % num						  
>> 64 POP_BLOCK						      								    	num = num % num						  
							      								    	num = num % num						  
11 >> 66 LOAD_FAST 2 ( dec_value )			      								    	num = num % num						  
68 RETURN_VALUE NEW_LINE				      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	num = num % num						  
							      								    	return num						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
Disassembly of <code object isPalindrome at 0x7fbac0e8bc90, f def isPalindrome ( string ) :				    def isPalindrome ( string ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  l = 0							    	l = 0							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( l )					      	  h = len ( string ) - 1				    	l = 0							  /CHECK_GIVEN_STRING_ROTATION_PALINDROME.py", line
							      	  while h > l :						    	l = 0							  59	 l l [ l ]	 ^ SyntaxError: invalid synt
3 4 LOAD_GLOBAL 0 ( len )				      	      l += 1						    	l = len ( string )					  ax
6 LOAD_FAST 0 ( string )				      	      h -= 1						    	l = len ( l )						  
8 CALL_FUNCTION 1					      	      if string [ l - 1 ] != string [ h + 1 ] :		    	l = l [ l : l ]						  
10 LOAD_CONST 2 ( 1 )					      		  return False					    	l = l [ l : l ]						  
12 BINARY_SUBTRACT					      	  return True						    	l = l [ l : l ]						  
14 STORE_FAST 2 ( h )					      								    	l = l [ l : l ]						  
							      								    	l = l [ l : l ]						  
4 16 SETUP_LOOP 56 ( to 74 )				      								    	l = l [ l : l ]						  
>> 18 LOAD_FAST 2 ( h )					      								    	l = l [ l : l ]						  
20 LOAD_FAST 1 ( l )					      								    	l = l [ l : l ]						  
22 COMPARE_OP 4 ( > )					      								    	l = l [ l : l ]						  
24 POP_JUMP_IF_FALSE 72					      								    	l = l [ l : l ]						  
							      								    	l = l [ l : l ]						  
5 26 LOAD_FAST 1 ( l )					      								    	l = l [ l : l ]						  
28 LOAD_CONST 2 ( 1 )					      								    	l = l [ l : l ]						  
30 INPLACE_ADD						      								    	l = l [ l : l ]						  
32 STORE_FAST 1 ( l )					      								    	l = l [ l : l ]						  
							      								    	l = l [ l : l ]						  
6 34 LOAD_FAST 2 ( h )					      								    	l = l [ l : l ]						  
36 LOAD_CONST 2 ( 1 )					      								    	l = l [ l : l ]						  
38 INPLACE_SUBTRACT					      								    	l = l [ l : l ]						  
40 STORE_FAST 2 ( h )					      								    	l = l [ l : l ]						  
							      								    	l = l [ l : l ]						  
7 42 LOAD_FAST 0 ( string )				      								    	l = l [ l : l ]						  
44 LOAD_FAST 1 ( l )					      								    	l = l [ l : l ]						  
46 LOAD_CONST 2 ( 1 )					      								    	l = l [ l : l ]						  
48 BINARY_SUBTRACT					      								    	l = l [ l : l ]						  
50 BINARY_SUBSCR					      								    	l l [ l ]						  
52 LOAD_FAST 0 ( string )				      								    	l = l [ l : l ]						  
54 LOAD_FAST 2 ( h )					      								    	l l l [ l : l ]						  
56 LOAD_CONST 2 ( 1 )					      								    	l l l [ l : l ]						  
58 BINARY_ADD						      								    	l l [ l : l ] = l [ l : l ]				  
60 BINARY_SUBSCR					      								    	l [ l : l ] = l [ l : l ]				  
62 COMPARE_OP 3 ( != )					      								    	l [ l l : l ] = l [ l : l ]				  
64 POP_JUMP_IF_FALSE 18					      								    	l [ l l : l ] = l [ l : l ]				  
							      								    	l [ l l : l l l l l l l l l l l l l [ l : l ]		  
8 66 LOAD_CONST 3 ( False )				      								    	l [ l l l l l l l l l l l l l l l l l l l l l l l l l l l 
68 RETURN_VALUE						      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_CONST 4 ( True )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PADOVAN_SEQUENCE					      PADOVAN_SEQUENCE						    PADOVAN_SEQUENCE						  PADOVAN_SEQUENCE
--							      --							    --								  --
Disassembly of <code object pad at 0x7fbac<<unk>> de40, file  def pad ( n ) :						    def pad ( n , pppmetricmetricmetricmetricmetricmetricmetricme error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( ( 1 , 1 , 1 , 1 ) )			      	  pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 UNPACK_SEQUENCE 4					      	  for i in range ( 3 , n + 1 ) :			    								  /PADOVAN_SEQUENCE.py", line 29     if __name__ ==
4 STORE_FAST 1 ( pPrevPrev )				      	      pNext = pPrevPrev + pPrev				    								  '__main__':	   ^ SyntaxError: invalid syntax
6 STORE_FAST 2 ( pPrev )				      	      pPrevPrev = pPrev					    								  
8 STORE_FAST 3 ( pCurr )				      	      pPrev = pCurr					    								  
10 STORE_FAST 4 ( pNext )				      	      pCurr = pNext					    								  
							      	  return pNext ;					    								  
3 12 SETUP_LOOP 42 ( to 56 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 2 ( 3 )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 24 ( to 54 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( pPrevPrev )				      								    								  
34 LOAD_FAST 2 ( pPrev )				      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 4 ( pNext )				      								    								  
							      								    								  
5 40 LOAD_FAST 2 ( pPrev )				      								    								  
42 STORE_FAST 1 ( pPrevPrev )				      								    								  
							      								    								  
6 44 LOAD_FAST 3 ( pCurr )				      								    								  
46 STORE_FAST 2 ( pPrev )				      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( pNext )				      								    								  
50 STORE_FAST 3 ( pCurr )				      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 4 ( pNext )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
Disassembly of <code object countNegative at 0x7fbac0e89d20,  def countNegative ( M , n , m ) :				    def countNegative ( fbfbacaceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( count )				      	  for i in range ( n ) :				    								  /COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_
							      	      for j in range ( m ) :				    								  SORTED_MATRIX.py", line 30	 if __name__ == '__m
3 4 SETUP_LOOP 62 ( to 68 )				      		  if M [ i ] [ j ] < 0 :			    								  ain__':      ^ SyntaxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      		      count += 1				    								  
8 LOAD_FAST 1 ( n )					      		  else :					    								  
10 CALL_FUNCTION 1					      		      break					    								  
12 GET_ITER						      	  return count						    								  
>> 14 FOR_ITER 50 ( to 66 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 44 ( to 64 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 2 ( m )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( M )					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 5 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( count )				      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 3 ( count )				      								    								  
56 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 58 BREAK_LOOP					      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 3 ( count )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI
--							      --							    --								  --
Disassembly of <code object isLucky at 0x7fbac<<unk>> d540, f def isLucky ( n ) :					    def isLucky ( n ) :						  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  ar = [ 0 ] * 10					    	"""							  
2 BUILD_LIST 1						      	  while ( n > 0 ) :					     Return the number of the number of the number of the number  
4 LOAD_CONST 2 ( 10 )					      	      digit = math.floor ( n % 10 )			     """							  
6 BINARY_MULTIPLY					      	      if ( ar [ digit ] ) :				    	for i in range ( n ) :					  
8 STORE_FAST 1 ( ar )					      		  return 0					    	    if n < 0 :						  
							      	      ar [ digit ] = 1					    		return n					  
3 10 SETUP_LOOP 54 ( to 66 )				      	      n = n / 10					    	return 0						  
>> 12 LOAD_FAST 0 ( n )					      	  return 1						    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 4 ( > )					      								    								  
18 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
4 20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 1 ( floor )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 10 )					      								    								  
28 BINARY_MODULO					      								    								  
30 CALL_METHOD 1					      								    								  
32 STORE_FAST 2 ( digit )				      								    								  
							      								    								  
5 34 LOAD_FAST 1 ( ar )					      								    								  
36 LOAD_FAST 2 ( digit )				      								    								  
38 BINARY_SUBSCR					      								    								  
40 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 42 LOAD_CONST 1 ( 0 )					      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
7 >> 46 LOAD_CONST 3 ( 1 )				      								    								  
48 LOAD_FAST 1 ( ar )					      								    								  
50 LOAD_FAST 2 ( digit )				      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
8 54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 10 )					      								    								  
58 BINARY_TRUE_DIVIDE					      								    								  
60 STORE_FAST 0 ( n )					      								    								  
62 JUMP_ABSOLUTE 12					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_CONST 3 ( 1 )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
Disassembly of <code object countSeq at 0x7fbac<<unk>> d540,  def countSeq ( n ) :					    def countSeq ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  nCr = 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( nCr )					      	  res = 1						    								  /COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_
							      	  for r in range ( 1 , n + 1 ) :			    								  OF_FIRST_AND_SECOND_HALF_BITS_1.py", line 47	   p
3 4 LOAD_CONST 1 ( 1 )					      	      nCr = ( nCr * ( n + 1 - r ) ) / r ;		    								  rint("#Results: %i, %i" % (n_success, len(param)))
6 STORE_FAST 2 ( res )					      	      res += nCr * nCr ;				    								  
							      	  return res ;						    								       ^ SyntaxError: EOF while scanning triple-quot
4 8 SETUP_LOOP 54 ( to 64 )				      								    								  ed string literal
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 3 ( r )					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( nCr )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_FAST 3 ( r )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 3 ( r )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 STORE_FAST 1 ( nCr )					      								    								  
							      								    								  
6 48 LOAD_FAST 2 ( res )				      								    								  
50 LOAD_FAST 1 ( nCr )					      								    								  
52 LOAD_FAST 1 ( nCr )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( res )					      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 2 ( res )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		      ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		    ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		  ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION
--							      --							    --								  --
Disassembly of <code object concatenate at 0x7fbac0e89d20, fi def concatenate ( a , b , c , n1 , n2 ) :			    def concatenate ( fbfbac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  i = - 1						    								  
2 STORE_FAST 5 ( i )					      	  for i in range ( n1 ) :				    								  
							      	      c [ i ] = a [ i ]					    								  
3 4 SETUP_LOOP 28 ( to 34 )				      	  for j in range ( n2 ) :				    								  
6 LOAD_GLOBAL 0 ( range )				      	      c [ i ] = b [ j ]					    								  
8 LOAD_FAST 3 ( n1 )					      	      i += 1						    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 16 ( to 32 )				      								    								  
16 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( a )					      								    								  
20 LOAD_FAST 5 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 2 ( c )					      								    								  
26 LOAD_FAST 5 ( i )					      								    								  
28 STORE_SUBSCR						      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 SETUP_LOOP 36 ( to 72 )				      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_FAST 4 ( n2 )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 24 ( to 70 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 1 ( b )					      								    								  
50 LOAD_FAST 6 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 2 ( c )					      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
7 60 LOAD_FAST 5 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 5 ( i )					      								    								  
68 JUMP_ABSOLUTE 44					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 LOAD_CONST 0 ( None )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac<<unk>> de def binarySearch ( arr , l , r , x ) :			    def binarySearch ( arr , l , l , l = 1 ) :			  script_not_found : None
2 0 SETUP_LOOP 74 ( to 76 )				      	  while l <= r :					    	for l in l :						  
>> 2 LOAD_FAST 1 ( l )					      	      mid = l + ( r - l ) // 2 ;			    	    l = l [ l ]						  
4 LOAD_FAST 2 ( r )					      	      if arr [ mid ] == x :				    	    l = l [ l ]						  
6 COMPARE_OP 1 ( <= )					      		  return mid					    	    l = l [ l ]						  
8 POP_JUMP_IF_FALSE 74					      	      elif arr [ mid ] < x :				    	    l = l [ l ]						  
							      		  l = mid + 1					    	    l = l [ l ]						  
3 10 LOAD_FAST 1 ( l )					      	      else :						    	    l = l [ l ]						  
12 LOAD_FAST 2 ( r )					      		  r = mid - 1					    	    l = l [ l ]						  
14 LOAD_FAST 1 ( l )					      	  return - 1						    	    l = l [ l ]						  
16 BINARY_SUBTRACT					      								    	    l = l [ l ]						  
18 LOAD_CONST 1 ( 2 )					      								    	    l = l [ l ]						  
20 BINARY_FLOOR_DIVIDE					      								    	    l = l [ l ]						  
22 BINARY_ADD						      								    	    l = l [ l ]						  
24 STORE_FAST 4 ( mid )					      								    	    l = l [ l ]						  
							      								    	    l = l [ l ]						  
4 26 LOAD_FAST 0 ( arr )				      								    	    l = l [ l ]						  
28 LOAD_FAST 4 ( mid )					      								    	    l = l [ l ]						  
30 BINARY_SUBSCR					      								    	    l = l [ l ]						  
32 LOAD_FAST 3 ( x )					      								    	    l = l [ l ]						  
34 COMPARE_OP 2 ( == )					      								    	    l l = l [ l ]					  
36 POP_JUMP_IF_FALSE 42					      								    	    l = l [ l ]						  
							      								    	    l = l [ l ]						  
5 38 LOAD_FAST 4 ( mid )				      								    	    l = l [ l ]						  
40 RETURN_VALUE						      								    	    l = l [ l ]						  
							      								    	    l = l [ l ]						  
6 >> 42 LOAD_FAST 0 ( arr )				      								    	    l = l [ l ]						  
44 LOAD_FAST 4 ( mid )					      								    	    l = l [ l ]						  
46 BINARY_SUBSCR					      								    	    l l = l [ l ]					  
48 LOAD_FAST 3 ( x )					      								    	    l = l [ l ]						  
50 COMPARE_OP 0 ( < )					      								    	    l l = l [ l ]					  
52 POP_JUMP_IF_FALSE 64					      								    	    l l = l [ l ]					  
							      								    	    l l = l [ l ]					  
7 54 LOAD_FAST 4 ( mid )				      								    	    l = l [ l ]						  
56 LOAD_CONST 2 ( 1 )					      								    	    l l = l [ l ]					  
58 BINARY_ADD						      								    	    l l = l [ l ]					  
60 STORE_FAST 1 ( l )					      								    	    l l = l [ l ]					  
62 JUMP_ABSOLUTE 2					      								    	    l l l [ l ]						  
							      								    	    l l l [ l ]						  
9 >> 64 LOAD_FAST 4 ( mid )				      								    	    l l l [ l ]						  
66 LOAD_CONST 2 ( 1 )					      								    	    l l l [ l ] = l [ l ]				  
68 BINARY_SUBTRACT					      								    	    l l [ l ]						  
70 STORE_FAST 2 ( r )					      								    	    l l = l [ l ]					  
72 JUMP_ABSOLUTE 2					      								    	    l l l [ l ]						  
>> 74 POP_BLOCK						      								    	    l l l [ l ] = l [ l ]				  
							      								    	    l l l [ l ]						  
10 >> 76 LOAD_CONST 3 ( - 1 )				      								    	    l l l l [ l ] = l [ l ]				  
78 RETURN_VALUE NEW_LINE				      								    	    l l l l [ l ]					  
							      								    	    l l l l l l l [ l ]					  
							      								    	    l l l l l [ l ]					  
							      								    	    l l l l l l l [ l ]					  
							      								    	    l l l l [ l ]					  
							      								    	    l l l l l l l l l l l [ l ]				  
-							      -								    	    l l l l l l l l l l l l l l l l l l l l l l l l l l l -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7fbac0e8bc90, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  n -= 1						    	n = n - n						  
2 LOAD_CONST 1 ( 1 )					      	  n |= n >> 1						    	n = n - n						  
4 INPLACE_SUBTRACT					      	  n |= n >> 2						    	n = n - n						  
6 STORE_FAST 0 ( n )					      	  n |= n >> 4						    	n = n - n						  
							      	  n |= n >> 8						    	n = n - n						  
3 8 LOAD_FAST 0 ( n )					      	  n |= n >> 16						    	n = n - n						  
10 LOAD_FAST 0 ( n )					      	  n += 1						    	return n						  
12 LOAD_CONST 1 ( 1 )					      	  return n						    								  
14 BINARY_RSHIFT					      								    								  
16 INPLACE_OR						      								    								  
18 STORE_FAST 0 ( n )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_RSHIFT					      								    								  
28 INPLACE_OR						      								    								  
30 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 3 ( 4 )					      								    								  
38 BINARY_RSHIFT					      								    								  
40 INPLACE_OR						      								    								  
42 STORE_FAST 0 ( n )					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 4 ( 8 )					      								    								  
50 BINARY_RSHIFT					      								    								  
52 INPLACE_OR						      								    								  
54 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_CONST 5 ( 16 )					      								    								  
62 BINARY_RSHIFT					      								    								  
64 INPLACE_OR						      								    								  
66 STORE_FAST 0 ( n )					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 0 ( n )					      								    								  
							      								    								  
9 76 LOAD_FAST 0 ( n )					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1
--							      --							    --								  --
Disassembly of <code object difference at 0x7fbac<<unk>> d540 def difference ( arr , n ) :				    def difference ( arr , n , d1 , d2 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  d1 = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( d1 )					      	  d2 = 0						    								  /FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1.p
							      	  for i in range ( 0 , n ) :				    								  y", line 47	  print("#Results: %i, %i" % (n_succ
3 4 LOAD_CONST 1 ( 0 )					      	      d1 = d1 + arr [ i ] [ i ]				    								  ess, len(param)))
6 STORE_FAST 3 ( d2 )					      	      d2 = d2 + arr [ i ] [ n - i - 1 ]			    								  			^ SyntaxError: EOF while sca
							      	  return abs ( d1 - d2 )				    								  nning triple-quoted string literal
4 8 SETUP_LOOP 58 ( to 68 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 44 ( to 66 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( d1 )					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 2 ( d1 )					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( d2 )					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 3 ( d2 )					      								    								  
64 JUMP_ABSOLUTE 20					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 1 ( abs )				      								    								  
70 LOAD_FAST 2 ( d1 )					      								    								  
72 LOAD_FAST 3 ( d2 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1
--							      --							    --								  --
Disassembly of <code object isSubSequence at 0x7fbac0e8bc90,  def isSubSequence ( str1 , str2 , m , n ) :		    def isSubSequence ( str1 , strstreeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  j = 0							    								  
2 STORE_FAST 4 ( j )					      	  i = 0							    								  
							      	  while j < m and i < n :				    								  
3 4 LOAD_CONST 1 ( 0 )					      	      if str1 [ j ] == str2 [ i ] :			    								  
6 STORE_FAST 5 ( i )					      		  j = j + 1					    								  
							      	      i = i + 1						    								  
4 8 SETUP_LOOP 52 ( to 62 )				      	  return j == m						    								  
>> 10 LOAD_FAST 4 ( j )					      								    								  
12 LOAD_FAST 2 ( m )					      								    								  
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 60					      								    								  
18 LOAD_FAST 5 ( i )					      								    								  
20 LOAD_FAST 3 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( str1 )				      								    								  
28 LOAD_FAST 4 ( j )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( str2 )					      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
6 42 LOAD_FAST 4 ( j )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 >> 50 LOAD_FAST 5 ( i )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 5 ( i )					      								    								  
58 JUMP_ABSOLUTE 10					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
8 >> 62 LOAD_FAST 4 ( j )				      								    								  
64 LOAD_FAST 2 ( m )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM				      COUNT_PAIRS_WITH_GIVEN_SUM				    COUNT_PAIRS_WITH_GIVEN_SUM					  COUNT_PAIRS_WITH_GIVEN_SUM
--							      --							    --								  --
Disassembly of <code object getPairsCount at 0x7fbac<<unk>> d def getPairsCount ( arr , n , sum ) :			    def getPairsCount ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 3 ( count )				      	  for i in range ( 0 , n ) :				    	count = 0						  
							      	      for j in range ( i + 1 , n ) :			    	count = 0						  
3 4 SETUP_LOOP 70 ( to 76 )				      		  if arr [ i ] + arr [ j ] == sum :		    	count = 0						  
6 LOAD_GLOBAL 0 ( range )				      		      count += 1				    	for i in range ( count ) :				  
8 LOAD_CONST 1 ( 0 )					      	  return count						    	    count += 1						  
10 LOAD_FAST 1 ( n )					      								    	    count += 1						  
12 CALL_FUNCTION 2					      								    	    count += 1						  
14 GET_ITER						      								    	    count += 1						  
>> 16 FOR_ITER 56 ( to 74 )				      								    	    count += 1						  
18 STORE_FAST 4 ( i )					      								    	    count += 1						  
							      								    	    count += 1						  
4 20 SETUP_LOOP 50 ( to 72 )				      								    	    count += 1						  
22 LOAD_GLOBAL 0 ( range )				      								    	    count += 1						  
24 LOAD_FAST 4 ( i )					      								    	    count += 1						  
26 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
28 BINARY_ADD						      								    	    count += 1						  
30 LOAD_FAST 1 ( n )					      								    	    count += 1						  
32 CALL_FUNCTION 2					      								    	    count += 1						  
34 GET_ITER						      								    	    count += 1						  
>> 36 FOR_ITER 32 ( to 70 )				      								    	    count += 1						  
38 STORE_FAST 5 ( j )					      								    	    count += 1						  
							      								    	    count += 1						  
5 40 LOAD_FAST 0 ( arr )				      								    	    count += 1						  
42 LOAD_FAST 4 ( i )					      								    	    count += 1						  
44 BINARY_SUBSCR					      								    	    count += 1						  
46 LOAD_FAST 0 ( arr )					      								    	    count += 1						  
48 LOAD_FAST 5 ( j )					      								    	    count += 1						  
50 BINARY_SUBSCR					      								    	    count += 1						  
52 BINARY_ADD						      								    	    count += 1						  
54 LOAD_FAST 2 ( sum )					      								    	    count += 1						  
56 COMPARE_OP 2 ( == )					      								    	    count += 1						  
58 POP_JUMP_IF_FALSE 36					      								    	    count += 1						  
							      								    	    count += 1						  
6 60 LOAD_FAST 3 ( count )				      								    	    count += 1						  
62 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
64 INPLACE_ADD						      								    	    count += 1						  
66 STORE_FAST 3 ( count )				      								    	    count += 1						  
68 JUMP_ABSOLUTE 36					      								    	    count += 1						  
>> 70 POP_BLOCK						      								    	    count += 1						  
>> 72 JUMP_ABSOLUTE 16					      								    	    count += 1						  
>> 74 POP_BLOCK						      								    	    count += 1						  
							      								    	    count += 1						  
7 >> 76 LOAD_FAST 3 ( count )				      								    	    count += 1						  
78 RETURN_VALUE NEW_LINE				      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OPERATIONS_MAKE_STRINGAB_FREE			      COUNT_OPERATIONS_MAKE_STRINGAB_FREE			    COUNT_OPERATIONS_MAKE_STRINGAB_FREE				  COUNT_OPERATIONS_MAKE_STRINGAB_FREE
--							      --							    --								  --
Disassembly of <code object abFree at 0x7fbac<<unk>> d540, fi def abFree ( s ) :					    def abFree ( fbfbacacstic , bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  b_count = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( b_count )				      	  res = 0						    								  /COUNT_OPERATIONS_MAKE_STRINGAB_FREE.py", line 31
							      	  for i in range ( len ( s ) ) :			    								      if __name__ == '__main__':      ^ SyntaxError:
3 4 LOAD_CONST 1 ( 0 )					      	      if s [ ~ i ] == 'a' :				    								   invalid syntax
6 STORE_FAST 2 ( res )					      		  res = ( res + b_count )			    								  
							      		  b_count = ( b_count * 2 )			    								  
4 8 SETUP_LOOP 60 ( to 70 )				      	      else :						    								  
10 LOAD_GLOBAL 0 ( range )				      		  b_count += 1					    								  
12 LOAD_GLOBAL 1 ( len )				      	  return res						    								  
14 LOAD_FAST 0 ( s )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 44 ( to 68 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 UNARY_INVERT						      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 2 ( 'a' )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 40 LOAD_FAST 2 ( res )				      								    								  
42 LOAD_FAST 1 ( b_count )				      								    								  
44 BINARY_ADD						      								    								  
46 STORE_FAST 2 ( res )					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( b_count )				      								    								  
50 LOAD_CONST 3 ( 2 )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 STORE_FAST 1 ( b_count )				      								    								  
56 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
9 >> 58 LOAD_FAST 1 ( b_count )				      								    								  
60 LOAD_CONST 4 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 1 ( b_count )				      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 2 ( res )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUM_CONTIGUOUS_SUBARRAY_2			      LARGEST_SUM_CONTIGUOUS_SUBARRAY_2				    LARGEST_SUM_CONTIGUOUS_SUBARRAY_2				  LARGEST_SUM_CONTIGUOUS_SUBARRAY_2
--							      --							    --								  --
Disassembly of <code object maxSubArraySum at 0x7fbac0e8bc90, def maxSubArraySum ( a , size ) :				    def maxSubArraySum ( a , size = 0 , size = 1 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  max_so_far = a [ 0 ]					    	if size > 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	  curr_max = a [ 0 ]					    	    return ( ( size , size )				  /LARGEST_SUM_CONTIGUOUS_SUBARRAY_2.py", line 29
4 BINARY_SUBSCR						      	  for i in range ( 1 , size ) :				    	else :							    else :	  ^ SyntaxError: invalid syntax
6 STORE_FAST 2 ( max_so_far )				      	      curr_max = max ( a [ i ] , curr_max + a [ i ] )	    	    return ( size , size )				  
							      	      max_so_far = max ( max_so_far , curr_max )	    								  
3 8 LOAD_FAST 0 ( a )					      	  return max_so_far					    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 STORE_FAST 3 ( curr_max )				      								    								  
							      								    								  
4 16 SETUP_LOOP 50 ( to 68 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 1 ( size )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_GLOBAL 1 ( max )				      								    								  
34 LOAD_FAST 0 ( a )					      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 3 ( curr_max )				      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 STORE_FAST 3 ( curr_max )				      								    								  
							      								    								  
6 54 LOAD_GLOBAL 1 ( max )				      								    								  
56 LOAD_FAST 2 ( max_so_far )				      								    								  
58 LOAD_FAST 3 ( curr_max )				      								    								  
60 CALL_FUNCTION 2					      								    								  
62 STORE_FAST 2 ( max_so_far )				      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 2 ( max_so_far )			      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object maxProduct at 0x7fbac0e89d20, fil def maxProduct ( arr , n ) :				    def maxProduct ( arr ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( n )					      	  if n < 3 :						    	n = arr [ n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 3 )					      	      return - 1					    	while n < 3 :						  /eval_scripts/dis_sa-python_sa.test/FIND_MAXIMUM_P
4 COMPARE_OP 0 ( < )					      	  arr.sort ( )						    	    n = max ( arr [ n ] )				  RODUCT_OF_A_TRIPLET_IN_ARRAY_1.py", line 47, in <m
6 POP_JUMP_IF_FALSE 12					      	  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr  	    n += n						  odule>     if f_filled(*parameters_set) == f_gold(
							      								    	return n						  *parameters_set): TypeError: f_filled() takes 1 po
3 8 LOAD_CONST 2 ( - 1 )				      								    								  sitional argument but 2 were given
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_FAST 0 ( arr )				      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 LOAD_GLOBAL 1 ( max )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_CONST 3 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_CONST 4 ( 1 )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 4 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_CONST 4 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 LOAD_CONST 5 ( 2 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 LOAD_CONST 1 ( 3 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 CALL_FUNCTION 2					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
Disassembly of <code object transpose at 0x7fbac0e89d20, file def transpose ( A ) :					    def transpose ( fbfbac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 SETUP_LOOP 82 ( to 84 )				      	  for i in range ( N ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i + 1 , N ) :			    								  
4 LOAD_GLOBAL 1 ( N )					      		  A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A 								  
6 CALL_FUNCTION 1					      								    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 70 ( to 82 )				      								    								  
12 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 64 ( to 80 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( i )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 LOAD_GLOBAL 1 ( N )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 46 ( to 78 )				      								    								  
32 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 34 LOAD_FAST 0 ( A )					      								    								  
36 LOAD_FAST 2 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( A )					      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 2 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 ROT_TWO						      								    								  
56 LOAD_FAST 0 ( A )					      								    								  
58 LOAD_FAST 1 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( j )					      								    								  
64 STORE_SUBSCR						      								    								  
66 LOAD_FAST 0 ( A )					      								    								  
68 LOAD_FAST 2 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 1 ( i )					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 30					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 JUMP_ABSOLUTE 10					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
Disassembly of <code object splitArr at 0x7fbac<<unk>> de40,  def splitArr ( arr , n , k ) :				    def splitArr ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 78 ( to 80 )				      	  for i in range ( 0 , k ) :				    	for i in range ( n ) :					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_GLOBAL 0 ( range )				      	      x = arr [ 0 ]					    	    if n < 0 :						  /SPLIT_ARRAY_ADD_FIRST_PART_END.py", line 25	   d
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n - 1 ) :			    		return i					  ef f_filled ( arr , n , n ) :	    ^ SyntaxError: d
6 LOAD_FAST 2 ( k )					      		  arr [ j ] = arr [ j + 1 ]			    	return None						  uplicate argument 'n' in function definition
8 CALL_FUNCTION 2					      	      arr [ n - 1 ] = x					    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 64 ( to 78 )				      								    								  
14 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arr )				      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 STORE_FAST 4 ( x )					      								    								  
							      								    								  
4 24 SETUP_LOOP 38 ( to 64 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 20 ( to 62 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 40					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 4 ( x )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 12					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SUM_FACTORS_NUMBER				      FIND_MINIMUM_SUM_FACTORS_NUMBER				    FIND_MINIMUM_SUM_FACTORS_NUMBER				  FIND_MINIMUM_SUM_FACTORS_NUMBER
--							      --							    --								  --
Disassembly of <code object findMinSum at 0x7fbac<<unk>> d540 def findMinSum ( num ) :					    def findMinSum ( num ) :					  failure : #Results: 1, 10
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	"""							  
2 STORE_FAST 1 ( sum )					      	  i = 2							     Return the number of the number of the number of the number  
							      	  while ( i * i <= num ) :				     """							  
3 4 LOAD_CONST 2 ( 2 )					      	      while ( num % i == 0 ) :				    	for i in range ( num ) :				  
6 STORE_FAST 2 ( i )					      		  sum += i					    	    if num < 0 :					  
							      		  num /= i					    		return num					  
4 8 SETUP_LOOP 58 ( to 68 )				      	      i += 1						    	return num						  
>> 10 LOAD_FAST 2 ( i )					      	  sum += num						    								  
12 LOAD_FAST 2 ( i )					      	  return sum						    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 0 ( num )					      								    								  
18 COMPARE_OP 1 ( <= )					      								    								  
20 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
5 22 SETUP_LOOP 32 ( to 56 )				      								    								  
>> 24 LOAD_FAST 0 ( num )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( sum )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( num )				      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 INPLACE_TRUE_DIVIDE					      								    								  
50 STORE_FAST 0 ( num )					      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( i )				      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( i )					      								    								  
64 JUMP_ABSOLUTE 10					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 1 ( sum )				      								    								  
70 LOAD_FAST 0 ( num )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
10 76 LOAD_FAST 1 ( sum )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
Disassembly of <code object power at 0x7fbac<<unk>> de40, fil def power ( x , y , p ) :					    def power ( x , y , y , v , v , v , v , v , v , v , v , v , v error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( res )					      	  x = x % p						    								  /MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETI
							      	  while ( y > 0 ) :					    								  C.py", line 30     if __name__ == '__main__':
3 4 LOAD_FAST 0 ( x )					      	      if ( ( y & 1 ) == 1 ) :				    								   ^ SyntaxError: invalid syntax
6 LOAD_FAST 2 ( p )					      		  res = ( res * x ) % p				    								  
8 BINARY_MODULO						      	      y = y >> 1					    								  
10 STORE_FAST 0 ( x )					      	      x = ( x * x ) % p					    								  
							      	  return res						    								  
4 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 1 ( y )					      								    								  
16 LOAD_CONST 2 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( y )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_AND						      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( res )				      								    								  
36 LOAD_FAST 0 ( x )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 LOAD_FAST 2 ( p )					      								    								  
42 BINARY_MODULO					      								    								  
44 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 46 LOAD_FAST 1 ( y )				      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_RSHIFT					      								    								  
52 STORE_FAST 1 ( y )					      								    								  
							      								    								  
8 54 LOAD_FAST 0 ( x )					      								    								  
56 LOAD_FAST 0 ( x )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_FAST 2 ( p )					      								    								  
62 BINARY_MODULO					      								    								  
64 STORE_FAST 0 ( x )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 3 ( res )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME     MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	    MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	  MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME
--							      --							    --								  --
Disassembly of <code object maxRemoval at 0x7fbac<<unk>> de40 def maxRemoval ( arr , n ) :				    def maxRemoval ( arr , n , count ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( count )				      	  cummulative_sum = 0					    	count = count						  /eval_scripts/dis_sa-python_sa.test/MAXIMUM_REMOVA
							      	  arr.sort ( )						    	count = count						  L_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME.py", l
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	count = count						  ine 137, in <module>	   if f_filled(*parameters_s
6 STORE_FAST 3 ( cummulative_sum )			      	      if arr [ i ] >= cummulative_sum :			    	count += count						  et) == f_gold(*parameters_set): TypeError: f_fille
							      		  count += 1					    	count += count						  d() missing 1 required positional argument: 'count
4 8 LOAD_FAST 0 ( arr )					      		  cummulative_sum += arr [ i ]			    	count += count						  '
10 LOAD_METHOD 0 ( sort )				      	  return count						    	count += count						  
12 CALL_METHOD 0					      								    	count += count						  
14 POP_TOP						      								    	count += count						  
							      								    	count += count						  
5 16 SETUP_LOOP 48 ( to 66 )				      								    	count += count						  
18 LOAD_GLOBAL 1 ( range )				      								    	count += count						  
20 LOAD_FAST 1 ( n )					      								    	count += count						  
22 CALL_FUNCTION 1					      								    	count += count						  
24 GET_ITER						      								    	count += count						  
>> 26 FOR_ITER 36 ( to 64 )				      								    	count += count						  
28 STORE_FAST 4 ( i )					      								    	count += count						  
							      								    	count += count						  
6 30 LOAD_FAST 0 ( arr )				      								    	count += count						  
32 LOAD_FAST 4 ( i )					      								    	count += count						  
34 BINARY_SUBSCR					      								    	count += count						  
36 LOAD_FAST 3 ( cummulative_sum )			      								    	count += count						  
38 COMPARE_OP 5 ( >= )					      								    	count += count						  
40 POP_JUMP_IF_FALSE 26					      								    	count += count						  
							      								    	count += count						  
7 42 LOAD_FAST 2 ( count )				      								    	count += count						  
44 LOAD_CONST 2 ( 1 )					      								    	count += count						  
46 INPLACE_ADD						      								    	count += count						  
48 STORE_FAST 2 ( count )				      								    	count += count						  
							      								    	count += count						  
8 50 LOAD_FAST 3 ( cummulative_sum )			      								    	count += count						  
52 LOAD_FAST 0 ( arr )					      								    	count += count						  
54 LOAD_FAST 4 ( i )					      								    	count += count						  
56 BINARY_SUBSCR					      								    	count += count						  
58 INPLACE_ADD						      								    	count += count						  
60 STORE_FAST 3 ( cummulative_sum )			      								    	count += count						  
62 JUMP_ABSOLUTE 26					      								    	count += count						  
>> 64 POP_BLOCK						      								    	count += count						  
							      								    	count += count						  
9 >> 66 LOAD_FAST 2 ( count )				      								    	count += count						  
68 RETURN_VALUE NEW_LINE				      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
							      								    	count += count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
Disassembly of <code object CountPairs at 0x7fbac0e8bc90, fil def CountPairs ( n ) :					    def CountPairs ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  k = n							    	n = n [ 0 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( k )					      	  imin = 1						    	n = n [ 1 ]						  /eval_scripts/dis_sa-python_sa.test/COUNT_NUMBER_P
							      	  ans = 0						    	for i in range ( n ) :					  AIRS_N_B_N_GCD_B_B.py", line 52, in <module>	   i
3 4 LOAD_CONST 1 ( 1 )					      	  while ( imin <= n ) :					    	    n = n [ i : i + 1 ]					  f f_filled(*parameters_set) == f_gold(*parameters_
6 STORE_FAST 2 ( imin )					      	      imax = n / k					    	return n						  set):	  File "/home/ubuntu/TransCoder/models/eval/
							      	      ans += k * ( imax - imin + 1 )			    								  bt/152w65bl69/eval_scripts/dis_sa-python_sa.test/C
4 8 LOAD_CONST 2 ( 0 )					      	      imin = imax + 1					    								  OUNT_NUMBER_PAIRS_N_B_N_GCD_B_B.py", line 30, in f
10 STORE_FAST 3 ( ans )					      	      k = n / imin					    								  _filled     n = n [ 0 ] TypeError: 'int' object is
							      	  return ans						    								   not subscriptable
5 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 2 ( imin )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 COMPARE_OP 1 ( <= )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_FAST 1 ( k )					      								    								  
26 BINARY_TRUE_DIVIDE					      								    								  
28 STORE_FAST 4 ( imax )				      								    								  
							      								    								  
7 30 LOAD_FAST 3 ( ans )				      								    								  
32 LOAD_FAST 1 ( k )					      								    								  
34 LOAD_FAST 4 ( imax )					      								    								  
36 LOAD_FAST 2 ( imin )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 BINARY_MULTIPLY					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
8 50 LOAD_FAST 4 ( imax )				      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( imin )				      								    								  
							      								    								  
9 58 LOAD_FAST 0 ( n )					      								    								  
60 LOAD_FAST 2 ( imin )					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 STORE_FAST 1 ( k )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 3 ( ans )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		      FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		    FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		  FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object maxSubarrayXOR at 0x7fbac<<unk>>  def maxSubarrayXOR ( arr , n ) :				    def maxSubarrayXOR ( arr , n ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( - 2147483648 )			      	  ans = - 2147483648					    	"""							  
2 STORE_FAST 2 ( ans )					      	  for i in range ( n ) :				     Return the (2147483648 of the ans in the given arr in the gi 
							      	      curr_xor = 0					     """							  
3 4 SETUP_LOOP 62 ( to 68 )				      	      for j in range ( i , n ) :			    	for i in range ( n ) :					  
6 LOAD_GLOBAL 0 ( range )				      		  curr_xor = curr_xor ^ arr [ j ]		    	    if n < 256 :					  
8 LOAD_FAST 1 ( n )					      		  ans = max ( ans , curr_xor )			    		arr [ i ] = arr [ i ]				  
10 CALL_FUNCTION 1					      	  return ans						    	return arr						  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 50 ( to 66 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_CONST 2 ( 0 )					      								    								  
20 STORE_FAST 4 ( curr_xor )				      								    								  
							      								    								  
5 22 SETUP_LOOP 40 ( to 64 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 26 ( to 62 )				      								    								  
36 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( curr_xor )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_XOR						      								    								  
48 STORE_FAST 4 ( curr_xor )				      								    								  
							      								    								  
7 50 LOAD_GLOBAL 1 ( max )				      								    								  
52 LOAD_FAST 2 ( ans )					      								    								  
54 LOAD_FAST 4 ( curr_xor )				      								    								  
56 CALL_FUNCTION 2					      								    								  
58 STORE_FAST 2 ( ans )					      								    								  
60 JUMP_ABSOLUTE 34					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
8 >> 68 LOAD_FAST 2 ( ans )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1		      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1
--							      --							    --								  --
Disassembly of <code object gcdExtended at 0x7fbac<<unk>> d8a def gcdExtended ( a , b , x , y ) :			    def gcdExtended ( a , b , b , c , c , c , c , c ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  if a == 0 :						    	if b == c :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      x = 0						    	    return 0						  /BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1.py", li
4 COMPARE_OP 2 ( == )					      	      y = 1						    	else :							  ne 30	    def f_filled ( a , b , b , c , c , c , c
6 POP_JUMP_IF_FALSE 20					      	      return b						    	    return 0						   , c ) :     ^ SyntaxError: duplicate argument 'b'
							      	  x1 = 1						    								   in function definition
3 8 LOAD_CONST 1 ( 0 )					      	  y1 = 1						    								  
10 STORE_FAST 2 ( x )					      	  gcd = gcdExtended ( b % a , a , x1 , y1 )		    								  
							      	  x = y1 - ( b / a ) * x1				    								  
4 12 LOAD_CONST 2 ( 1 )					      	  y = x1						    								  
14 STORE_FAST 3 ( y )					      	  return gcd						    								  
							      								    								  
5 16 LOAD_FAST 1 ( b )					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
6 >> 20 LOAD_CONST 2 ( 1 )				      								    								  
22 STORE_FAST 4 ( x1 )					      								    								  
							      								    								  
7 24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 5 ( y1 )					      								    								  
							      								    								  
8 28 LOAD_GLOBAL 0 ( gcdExtended )			      								    								  
30 LOAD_FAST 1 ( b )					      								    								  
32 LOAD_FAST 0 ( a )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 4 ( x1 )					      								    								  
40 LOAD_FAST 5 ( y1 )					      								    								  
42 CALL_FUNCTION 4					      								    								  
44 STORE_FAST 6 ( gcd )					      								    								  
							      								    								  
9 46 LOAD_FAST 5 ( y1 )					      								    								  
48 LOAD_FAST 1 ( b )					      								    								  
50 LOAD_FAST 0 ( a )					      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 LOAD_FAST 4 ( x1 )					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 STORE_FAST 2 ( x )					      								    								  
							      								    								  
10 62 LOAD_FAST 4 ( x1 )				      								    								  
64 STORE_FAST 3 ( y )					      								    								  
							      								    								  
11 66 LOAD_FAST 6 ( gcd )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
Disassembly of <code object countFriendsPairings at 0x7fbac<< def countFriendsPairings ( n ) :				    def countFriendsPairings ( n ) :				  failure : #Results: 1, 10
2 0 LOAD_CONST 1 ( ( 1 , 2 , 0 ) )			      	  a , b , c = 1 , 2 , 0 ;				    	"""							  
2 UNPACK_SEQUENCE 3					      	  if ( n <= 2 ) :					     Return the number of the number of the number of the number  
4 STORE_FAST 1 ( a )					      	      return n ;					     """							  
6 STORE_FAST 2 ( b )					      	  for i in range ( 3 , n + 1 ) :			    	n = n % 2						  
8 STORE_FAST 3 ( c )					      	      c = b + ( i - 1 ) * a ;				    	if n <= n <= n :					  
							      	      a = b ;						    	    n = n % 2						  
3 10 LOAD_FAST 0 ( n )					      	      b = c ;						    	return n						  
12 LOAD_CONST 2 ( 2 )					      	  return c ;						    								  
14 COMPARE_OP 1 ( <= )					      								    								  
16 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( n )					      								    								  
20 RETURN_VALUE						      								    								  
							      								    								  
5 >> 22 SETUP_LOOP 46 ( to 70 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_CONST 3 ( 3 )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 4 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( b )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 LOAD_CONST 4 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 1 ( a )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( c )					      								    								  
							      								    								  
7 58 LOAD_FAST 2 ( b )					      								    								  
60 STORE_FAST 1 ( a )					      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( c )					      								    								  
64 STORE_FAST 2 ( b )					      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 3 ( c )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE_1				      C_PROGRAM_FIND_AREA_TRIANGLE_1				    C_PROGRAM_FIND_AREA_TRIANGLE_1				  C_PROGRAM_FIND_AREA_TRIANGLE_1
--							      --							    --								  --
Disassembly of <code object polygonArea at 0x7fbac<<unk>> d54 def polygonArea ( X , Y , n ) :				    def periArea ( fbfbacacstic , area , area , area ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 0.0 )				      	  area = 0.0						    	return 0.0						  
2 STORE_FAST 3 ( area )					      	  j = n - 1						    								  
							      	  for i in range ( 0 , n ) :				    								  
3 4 LOAD_FAST 2 ( n )					      	      area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ 								  
6 LOAD_CONST 2 ( 1 )					      	      j = i						    								  
8 BINARY_SUBTRACT					      	  return abs ( area // 2.0 )				    								  
10 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 12 SETUP_LOOP 58 ( to 72 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 3 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 44 ( to 70 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( area )				      								    								  
30 LOAD_FAST 0 ( X )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( X )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 1 ( Y )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 3 ( area )				      								    								  
							      								    								  
6 64 LOAD_FAST 5 ( i )					      								    								  
66 STORE_FAST 4 ( j )					      								    								  
68 JUMP_ABSOLUTE 24					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_GLOBAL 1 ( abs )				      								    								  
74 LOAD_FAST 3 ( area )					      								    								  
76 LOAD_CONST 4 ( 2.0 )					      								    								  
78 BINARY_FLOOR_DIVIDE					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object printFibonacciNumbers at 0x7fbac< def printFibonacciNumbers ( n ) :				    def printFibonacciacciacciacciacciacciacciacciacciacciacciacc script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  f1 = 0						    								  
2 STORE_FAST 1 ( f1 )					      	  f2 = 1						    								  
							      	  if ( n < 1 ) :					    								  
3 4 LOAD_CONST 2 ( 1 )					      	      return						    								  
6 STORE_FAST 2 ( f2 )					      	  for x in range ( 0 , n ) :				    								  
							      	      print ( f2 , end = " " )				    								  
4 8 LOAD_FAST 0 ( n )					      	      next = f1 + f2					    								  
10 LOAD_CONST 2 ( 1 )					      	      f1 = f2						    								  
12 COMPARE_OP 0 ( < )					      	      f2 = next						    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 16 LOAD_CONST 0 ( None )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
6 >> 20 SETUP_LOOP 46 ( to 68 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 32 ( to 66 )				      								    								  
34 STORE_FAST 3 ( x )					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 1 ( print )				      								    								  
38 LOAD_FAST 2 ( f2 )					      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 48 LOAD_FAST 1 ( f1 )					      								    								  
50 LOAD_FAST 2 ( f2 )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 4 ( next )				      								    								  
							      								    								  
9 56 LOAD_FAST 2 ( f2 )					      								    								  
58 STORE_FAST 1 ( f1 )					      								    								  
							      								    								  
10 60 LOAD_FAST 4 ( next )				      								    								  
62 STORE_FAST 2 ( f2 )					      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 LOAD_CONST 0 ( None )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
Disassembly of <code object findIndex at 0x7fbac<<unk>> d540, def findIndex ( n ) :					    def findIndex ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 1 )					      	      return n						    	    return 0						  /FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME.p
4 COMPARE_OP 1 ( <= )					      	  a = 0							    	elif n <= 1 :						  y", line 126	   if __name__ == '__main__':	  ^
6 POP_JUMP_IF_FALSE 12					      	  b = 1							    	    return 0						  IndentationError: expected an indented block
							      	  c = 1							    	elif n <= 1 :						  
3 8 LOAD_FAST 0 ( n )					      	  res = 1						    	    return 0						  
10 RETURN_VALUE						      	  while ( c < n ) :					    	elif n <= 1 :						  
							      	      c = a + b						    	    return 0						  
4 >> 12 LOAD_CONST 2 ( 0 )				      	      res = res + 1					    	elif n <= 1 :						  
14 STORE_FAST 1 ( a )					      	      a = b						    	    return 0						  
							      	      b = c						    	elif n <= 1 :						  
5 16 LOAD_CONST 1 ( 1 )					      	  return res						    	    return 0						  
18 STORE_FAST 2 ( b )					      								    	elif n <= 1 :						  
							      								    	    return 0						  
6 20 LOAD_CONST 1 ( 1 )					      								    	elif n <= 1 :						  
22 STORE_FAST 3 ( c )					      								    	    return 0						  
							      								    	elif n <= 1 :						  
7 24 LOAD_CONST 1 ( 1 )					      								    	    return 0						  
26 STORE_FAST 4 ( res )					      								    	elif n <= 1 :						  
							      								    	    return 0						  
8 28 SETUP_LOOP 36 ( to 66 )				      								    	elif n <= 1 :						  
>> 30 LOAD_FAST 3 ( c )					      								    	    return 0						  
32 LOAD_FAST 0 ( n )					      								    	elif n <= 1 :						  
34 COMPARE_OP 0 ( < )					      								    	    return 0						  
36 POP_JUMP_IF_FALSE 64					      								    	elif n <= 1 :						  
							      								    	    return 0						  
9 38 LOAD_FAST 1 ( a )					      								    	elif n <= 1 :						  
40 LOAD_FAST 2 ( b )					      								    	    return 0						  
42 BINARY_ADD						      								    	elif n <= 1 :						  
44 STORE_FAST 3 ( c )					      								    	    return 0						  
							      								    	elif n <= 1 :						  
10 46 LOAD_FAST 4 ( res )				      								    	    return 0						  
48 LOAD_CONST 1 ( 1 )					      								    	elif n <= 1 :						  
50 BINARY_ADD						      								    	    return 0						  
52 STORE_FAST 4 ( res )					      								    	elif n <= 1 :						  
							      								    	    return 0						  
11 54 LOAD_FAST 2 ( b )					      								    	elif n <= 1 :						  
56 STORE_FAST 1 ( a )					      								    	    return 0						  
							      								    	elif n <= 1 :						  
12 58 LOAD_FAST 3 ( c )					      								    	    return 0						  
60 STORE_FAST 2 ( b )					      								    	elif n <= 1 :						  
62 JUMP_ABSOLUTE 30					      								    	    return 0						  
>> 64 POP_BLOCK						      								    	elif n <= 1 :						  
							      								    	    return 0						  
13 >> 66 LOAD_FAST 4 ( res )				      								    	elif n <= 1 :						  
68 RETURN_VALUE NEW_LINE				      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
							      								    	    return 0						  
							      								    	elif n <= 1 :						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
Disassembly of <code object minLexRotation at 0x7fbac0e8bc90, def minLexRotation ( str_ ) :				    def minLexRotation ( strstrstrstreeeeeeeeeeeeeeeeeeeeeeeeeeee error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str_ )					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( str_ )					      	  arr = [ 0 ] * n					    								  /LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION.py", li
4 CALL_FUNCTION 1					      	  concat = str_ + str_					    								  ne 29	    if __name__ == '__main__':	    ^ Syntax
6 STORE_FAST 1 ( n )					      	  for i in range ( n ) :				    								  Error: invalid syntax
							      	      arr [ i ] = concat [ i : n + i ]			    								  
3 8 LOAD_CONST 1 ( 0 )					      	  arr.sort ( )						    								  
10 BUILD_LIST 1						      	  return arr [ 0 ]					    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 STORE_FAST 2 ( arr )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( str_ )				      								    								  
20 LOAD_FAST 0 ( str_ )					      								    								  
22 BINARY_ADD						      								    								  
24 STORE_FAST 3 ( concat )				      								    								  
							      								    								  
5 26 SETUP_LOOP 36 ( to 64 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 24 ( to 62 )				      								    								  
38 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( concat )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_ADD						      								    								  
50 BUILD_SLICE 2					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 2 ( arr )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 36					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 2 ( arr )				      								    								  
66 LOAD_METHOD 2 ( sort )				      								    								  
68 CALL_METHOD 0					      								    								  
70 POP_TOP						      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( arr )				      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			      NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			    NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			  NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
Disassembly of <code object findPosition at 0x7fbac0e89d20, f def findPosition ( k , n ) :				    def findPosition ( fff898989898989898989898989898989898989898 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  f1 = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( f1 )					      	  f2 = 1						    								  /NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES.py", line 33
							      	  i = 2 ;						    								       if __name__ == '__main__':      ^ SyntaxError
3 4 LOAD_CONST 2 ( 1 )					      	  while i != 0 :					    								  : invalid syntax
6 STORE_FAST 3 ( f2 )					      	      f3 = f1 + f2 ;					    								  
							      	      f1 = f2 ;						    								  
4 8 LOAD_CONST 3 ( 2 )					      	      f2 = f3 ;						    								  
10 STORE_FAST 4 ( i )					      	      if f2 % k == 0 :					    								  
							      		  return n * i					    								  
5 12 SETUP_LOOP 56 ( to 70 )				      	      i += 1						    								  
>> 14 LOAD_FAST 4 ( i )					      	  return						    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 22 LOAD_FAST 2 ( f1 )					      								    								  
24 LOAD_FAST 3 ( f2 )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 5 ( f3 )					      								    								  
							      								    								  
7 30 LOAD_FAST 3 ( f2 )					      								    								  
32 STORE_FAST 2 ( f1 )					      								    								  
							      								    								  
8 34 LOAD_FAST 5 ( f3 )					      								    								  
36 STORE_FAST 3 ( f2 )					      								    								  
							      								    								  
9 38 LOAD_FAST 3 ( f2 )					      								    								  
40 LOAD_FAST 0 ( k )					      								    								  
42 BINARY_MODULO					      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
10 50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
11 >> 58 LOAD_FAST 4 ( i )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( i )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
12 >> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
Disassembly of <code object leonardo at 0x7fbac0e8bc90, file  def leonardo ( n ) :					    def leonardo ( n , dp , x , y , z , z ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_LIST 0					      	  dp = [ ] ;						    	x = dp ( x , dp )					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( dp )					      	  dp.append ( 1 ) ;					    	x = dp ( x , y , z )					  /LEONARDO_NUMBER_1.py", line 26     def f_filled (
							      	  dp.append ( 1 ) ;					    	y = dp ( x , y , z )					   n , dp , x , y , z , z ) :	  ^ SyntaxError: dup
3 4 LOAD_FAST 1 ( dp )					      	  for i in range ( 2 , n + 1 ) :			    	y = dp ( x , y , z )					  licate argument 'z' in function definition
6 LOAD_METHOD 0 ( append )				      	      dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ;	    	y = dp ( x , y , z )					  
8 LOAD_CONST 1 ( 1 )					      	  return dp [ n ] ;					    	return y						  
10 CALL_METHOD 1					      								    								  
12 POP_TOP						      								    								  
							      								    								  
4 14 LOAD_FAST 1 ( dp )					      								    								  
16 LOAD_METHOD 0 ( append )				      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 CALL_METHOD 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
5 24 SETUP_LOOP 56 ( to 82 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 38 ( to 80 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 44 LOAD_FAST 1 ( dp )					      								    								  
46 LOAD_METHOD 0 ( append )				      								    								  
48 LOAD_FAST 1 ( dp )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 LOAD_CONST 1 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 1 ( dp )					      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 2 ( 2 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_METHOD 1					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 40					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
7 >> 82 LOAD_FAST 1 ( dp )				      								    								  
84 LOAD_FAST 0 ( n )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
Disassembly of <code object isPowerOfFour at 0x7fbac<<unk>> d def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( count )				      	  if ( n and ( not ( n & ( n - 1 ) ) ) ) :		    	count = 0						  /FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NO
							      	      while ( n > 1 ) :					    	count = 0						  T_1.py", line 153	return count	 ^ SyntaxErr
3 4 LOAD_FAST 0 ( n )					      		  n >>= 1					    	count = count						  or: 'return' outside function
6 POP_JUMP_IF_FALSE 70					      		  count += 1					    	count = count						  
8 LOAD_FAST 0 ( n )					      	      if ( count % 2 == 0 ) :				    	count += 1						  
10 LOAD_FAST 0 ( n )					      		  return True					    	count += 1						  
12 LOAD_CONST 2 ( 1 )					      	      else :						    	count += 1						  
14 BINARY_SUBTRACT					      		  return False					    	count += 1						  
16 BINARY_AND						      								    	count += 1						  
18 POP_JUMP_IF_TRUE 70					      								    	count += 1						  
							      								    	count += 1						  
4 20 SETUP_LOOP 28 ( to 50 )				      								    	count += 1						  
>> 22 LOAD_FAST 0 ( n )					      								    	count += 1						  
24 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
26 COMPARE_OP 4 ( > )					      								    	count += 1						  
28 POP_JUMP_IF_FALSE 48					      								    	count += 1						  
							      								    	count += 1						  
5 30 LOAD_FAST 0 ( n )					      								    	count += 1						  
32 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
34 INPLACE_RSHIFT					      								    	count += 1						  
36 STORE_FAST 0 ( n )					      								    	count += 1						  
							      								    	count += 1						  
6 38 LOAD_FAST 1 ( count )				      								    	count += 1						  
40 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
42 INPLACE_ADD						      								    	count += 1						  
44 STORE_FAST 1 ( count )				      								    	count += 1						  
46 JUMP_ABSOLUTE 22					      								    	count += 1						  
>> 48 POP_BLOCK						      								    	count += 1						  
							      								    	count += 1						  
7 >> 50 LOAD_FAST 1 ( count )				      								    	count += 1						  
52 LOAD_CONST 3 ( 2 )					      								    	count += 1						  
54 BINARY_MODULO					      								    	count += 1						  
56 LOAD_CONST 1 ( 0 )					      								    	count += 1						  
58 COMPARE_OP 2 ( == )					      								    	count += 1						  
60 POP_JUMP_IF_FALSE 66					      								    	count += 1						  
							      								    	count += 1						  
8 62 LOAD_CONST 4 ( True )				      								    	count += 1						  
64 RETURN_VALUE						      								    	count += 1						  
							      								    	count += 1						  
10 >> 66 LOAD_CONST 5 ( False )				      								    	count += 1						  
68 RETURN_VALUE						      								    	count += 1						  
>> 70 LOAD_CONST 0 ( None )				      								    	count += 1						  
72 RETURN_VALUE NEW_LINE				      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1	      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1
--							      --							    --								  --
Disassembly of <code object exponentiation at 0x7fbac0e8bc90, def exponentiation ( bas , exp ) :			    def exponentiation ( bexp , exp , exp ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  t = 1 ;						    	exp = 1							  
2 STORE_FAST 2 ( t )					      	  while ( exp > 0 ) :					    	exp = exp ( exp )					  
							      	      if ( exp % 2 != 0 ) :				    	exp = exp ( exp )					  
3 4 SETUP_LOOP 60 ( to 66 )				      		  t = ( t * bas ) % N ;				    	for i in exp :						  
>> 6 LOAD_FAST 1 ( exp )				      	      bas = ( bas * bas ) % N ;				    	    exp = exp ( exp )					  
8 LOAD_CONST 2 ( 0 )					      	      exp = int ( exp / 2 ) ;				    	    exp = exp ( exp )					  
10 COMPARE_OP 4 ( > )					      	  return t % N ;					    	    exp = exp ( exp )					  
12 POP_JUMP_IF_FALSE 64					      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
4 14 LOAD_FAST 1 ( exp )				      								    	    exp = exp ( exp )					  
16 LOAD_CONST 3 ( 2 )					      								    	    exp = exp ( exp )					  
18 BINARY_MODULO					      								    	    exp = exp ( exp )					  
20 LOAD_CONST 2 ( 0 )					      								    	    exp = exp ( exp )					  
22 COMPARE_OP 3 ( != )					      								    	    exp = exp ( exp )					  
24 POP_JUMP_IF_FALSE 38					      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
5 26 LOAD_FAST 2 ( t )					      								    	    exp = exp ( exp )					  
28 LOAD_FAST 0 ( bas )					      								    	    exp = exp ( exp )					  
30 BINARY_MULTIPLY					      								    	    exp = exp ( exp )					  
32 LOAD_GLOBAL 0 ( N )					      								    	    exp = exp ( exp )					  
34 BINARY_MODULO					      								    	    exp = exp ( exp )					  
36 STORE_FAST 2 ( t )					      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
6 >> 38 LOAD_FAST 0 ( bas )				      								    	    exp = exp ( exp )					  
40 LOAD_FAST 0 ( bas )					      								    	    exp = exp ( exp )					  
42 BINARY_MULTIPLY					      								    	    exp = exp ( exp )					  
44 LOAD_GLOBAL 0 ( N )					      								    	    exp = exp ( exp )					  
46 BINARY_MODULO					      								    	    exp = exp ( exp )					  
48 STORE_FAST 0 ( bas )					      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
7 50 LOAD_GLOBAL 1 ( int )				      								    	    exp = exp ( exp )					  
52 LOAD_FAST 1 ( exp )					      								    	    exp = exp ( exp )					  
54 LOAD_CONST 3 ( 2 )					      								    	    exp = exp ( exp )					  
56 BINARY_TRUE_DIVIDE					      								    	    exp = exp ( exp )					  
58 CALL_FUNCTION 1					      								    	    exp = exp ( exp )					  
60 STORE_FAST 1 ( exp )					      								    	    exp = exp ( exp )					  
62 JUMP_ABSOLUTE 6					      								    	    exp = exp ( exp )					  
>> 64 POP_BLOCK						      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
8 >> 66 LOAD_FAST 2 ( t )				      								    	    exp = exp ( exp )					  
68 LOAD_GLOBAL 0 ( N )					      								    	    exp = exp ( exp )					  
70 BINARY_MODULO					      								    	    exp = exp ( exp )					  
72 RETURN_VALUE NEW_LINE				      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp = exp ( exp )					  
							      								    	    exp.exp ( )						  
							      								    	    return exp ( exp )					  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
Disassembly of <code object findHeight at 0x7fbac0e89d20, fil def findHeight ( parent , n ) :				    def findHeight ( parent , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	"""							  
2 STORE_FAST 2 ( res )					      	  for i in range ( n ) :				     Return the list of the list of the list of tuples of tuples  
							      	      p = i						     """							  
3 4 SETUP_LOOP 68 ( to 74 )				      	      current = 1					    	for i in range ( n ) :					  
6 LOAD_GLOBAL 0 ( range )				      	      while ( parent [ p ] != - 1 ) :			    	    if n < 0 :						  
8 LOAD_FAST 1 ( n )					      		  current += 1					    		return 0					  
10 CALL_FUNCTION 1					      		  p = parent [ p ]				    	return 0						  
12 GET_ITER						      	      res = max ( res , current )			    								  
>> 14 FOR_ITER 56 ( to 72 )				      	  return res						    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 3 ( i )					      								    								  
20 STORE_FAST 4 ( p )					      								    								  
							      								    								  
5 22 LOAD_CONST 2 ( 1 )					      								    								  
24 STORE_FAST 5 ( current )				      								    								  
							      								    								  
6 26 SETUP_LOOP 32 ( to 60 )				      								    								  
>> 28 LOAD_FAST 0 ( parent )				      								    								  
30 LOAD_FAST 4 ( p )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 3 ( - 1 )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 40 LOAD_FAST 5 ( current )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 5 ( current )				      								    								  
							      								    								  
8 48 LOAD_FAST 0 ( parent )				      								    								  
50 LOAD_FAST 4 ( p )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 4 ( p )					      								    								  
56 JUMP_ABSOLUTE 28					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
9 >> 60 LOAD_GLOBAL 1 ( max )				      								    								  
62 LOAD_FAST 2 ( res )					      								    								  
64 LOAD_FAST 5 ( current )				      								    								  
66 CALL_FUNCTION 2					      								    								  
68 STORE_FAST 2 ( res )					      								    								  
70 JUMP_ABSOLUTE 14					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_FAST 2 ( res )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION
--							      --							    --								  --
Disassembly of <code object pow at 0x7fbac<<unk>> d540, file  def pow ( a , b ) :					    def pow ( fbfbacageageageageageageageageageageageageageageage error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( b )					      	  if ( b == 0 ) :					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      return 1						    								  /WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_
4 COMPARE_OP 2 ( == )					      	  answer = a						    								  AND_DIVISION.py", line 31	if __name__ == '__ma
6 POP_JUMP_IF_FALSE 12					      	  increment = a						    								  in__':      ^ SyntaxError: invalid syntax
							      	  for i in range ( 1 , b ) :				    								  
3 8 LOAD_CONST 2 ( 1 )					      	      for j in range ( 1 , a ) :			    								  
10 RETURN_VALUE						      		  answer += increment				    								  
							      	      increment = answer				    								  
4 >> 12 LOAD_FAST 0 ( a )				      	  return answer						    								  
14 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
5 16 LOAD_FAST 0 ( a )					      								    								  
18 STORE_FAST 3 ( increment )				      								    								  
							      								    								  
6 20 SETUP_LOOP 50 ( to 72 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 1 ( b )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 36 ( to 70 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 36 SETUP_LOOP 26 ( to 64 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 12 ( to 62 )				      								    								  
50 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 52 LOAD_FAST 2 ( answer )				      								    								  
54 LOAD_FAST 3 ( increment )				      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( answer )				      								    								  
60 JUMP_ABSOLUTE 48					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
9 >> 64 LOAD_FAST 2 ( answer )				      								    								  
66 STORE_FAST 3 ( increment )				      								    								  
68 JUMP_ABSOLUTE 32					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
10 >> 72 LOAD_FAST 2 ( answer )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
Disassembly of <code object decToBin at 0x7fbac<<unk>> de40,  def decToBin ( n ) :					    def decToBin ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return "0" ;					    	    return n % 2					  
4 COMPARE_OP 2 ( == )					      	  bin = "" ;						    	return n % 2						  
6 POP_JUMP_IF_FALSE 12					      	  while ( n > 0 ) :					    								  
							      	      if ( n & 1 == 0 ) :				    								  
3 8 LOAD_CONST 2 ( '0' )				      		  bin = '0' + bin ;				    								  
10 RETURN_VALUE						      	      else :						    								  
							      		  bin = '1' + bin ;				    								  
4 >> 12 LOAD_CONST 3 ( '' )				      	      n = n >> 1 ;					    								  
14 STORE_FAST 1 ( bin )					      	  return bin ;						    								  
							      								    								  
5 16 SETUP_LOOP 50 ( to 68 )				      								    								  
>> 18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 COMPARE_OP 4 ( > )					      								    								  
24 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 4 ( 1 )					      								    								  
30 BINARY_AND						      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 38 LOAD_CONST 2 ( '0' )				      								    								  
40 LOAD_FAST 1 ( bin )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 1 ( bin )					      								    								  
46 JUMP_FORWARD 8 ( to 56 )				      								    								  
							      								    								  
9 >> 48 LOAD_CONST 5 ( '1' )				      								    								  
50 LOAD_FAST 1 ( bin )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 1 ( bin )					      								    								  
							      								    								  
10 >> 56 LOAD_FAST 0 ( n )				      								    								  
58 LOAD_CONST 4 ( 1 )					      								    								  
60 BINARY_RSHIFT					      								    								  
62 STORE_FAST 0 ( n )					      								    								  
64 JUMP_ABSOLUTE 18					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
11 >> 68 LOAD_FAST 1 ( bin )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_ELEMENT_STABLE_SORT				      POSITION_ELEMENT_STABLE_SORT				    POSITION_ELEMENT_STABLE_SORT				  POSITION_ELEMENT_STABLE_SORT
--							      --							    --								  --
Disassembly of <code object getIndexInSortedArray at 0x7fbac0 def getIndexInSortedArray ( arr , n , idx ) :		    def getIndexInSortedArray ( arr , n ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 3 ( result )				      	  for i in range ( n ) :				     Return the array of the given array of the given array of th /eval_scripts/dis_sa-python_sa.test/POSITION_ELEME
							      	      if ( arr [ i ] < arr [ idx ] ) :			     """							  NT_STABLE_SORT.py", line 52, in <module>     if f_
3 4 SETUP_LOOP 72 ( to 78 )				      		  result += 1					    	for i in range ( n ) :					  filled(*parameters_set) == f_gold(*parameters_set)
6 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] == arr [ idx ] and i < idx ) :	    	    if n < 0 :						  : TypeError: f_filled() takes 2 positional argumen
8 LOAD_FAST 1 ( n )					      		  result += 1					    		return i					  ts but 3 were given
10 CALL_FUNCTION 1					      	  return result ;					    	return None						  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 60 ( to 76 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 4 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 2 ( idx )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
5 34 LOAD_FAST 3 ( result )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 3 ( result )				      								    								  
							      								    								  
6 >> 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( idx )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 14					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 LOAD_FAST 2 ( idx )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
7 66 LOAD_FAST 3 ( result )				      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 3 ( result )				      								    								  
74 JUMP_ABSOLUTE 14					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 3 ( result )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		      CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		    CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		  CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD
--							      --							    --								  --
Disassembly of <code object isPowerOfK at 0x7fbac0e8bc90, fil def isPowerOfK ( n , k ) :				    def isPowerOfK ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( False )				      	  oneSeen = False					    	""" Returns SPACETOKEN the SPACETOKEN number SPACETOKEN o l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( oneSeen )				      	  while ( n > 0 ) :					    								  /CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD.p
							      	      digit = n % k					    								  y", line 52	  print("#Results: %i, %i" % (n_succ
3 4 SETUP_LOOP 60 ( to 66 )				      	      if ( digit > 1 ) :				    								  ess, len(param)))
>> 6 LOAD_FAST 0 ( n )					      		  return False					    								  			^ SyntaxError: EOF while sca
8 LOAD_CONST 2 ( 0 )					      	      if ( digit == 1 ) :				    								  nning triple-quoted string literal
10 COMPARE_OP 4 ( > )					      		  if ( oneSeen ) :				    								  
12 POP_JUMP_IF_FALSE 64					      		      return False				    								  
							      		  oneSeen = True				    								  
4 14 LOAD_FAST 0 ( n )					      	      n //= k						    								  
16 LOAD_FAST 1 ( k )					      	  return True						    								  
18 BINARY_MODULO					      								    								  
20 STORE_FAST 3 ( digit )				      								    								  
							      								    								  
5 22 LOAD_FAST 3 ( digit )				      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 COMPARE_OP 4 ( > )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 30 LOAD_CONST 1 ( False )				      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
7 >> 34 LOAD_FAST 3 ( digit )				      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( oneSeen )				      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
9 46 LOAD_CONST 1 ( False )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
10 >> 50 LOAD_CONST 4 ( True )				      								    								  
52 STORE_FAST 2 ( oneSeen )				      								    								  
							      								    								  
11 >> 54 LOAD_FAST 0 ( n )				      								    								  
56 LOAD_FAST 1 ( k )					      								    								  
58 INPLACE_FLOOR_DIVIDE					      								    								  
60 STORE_FAST 0 ( n )					      								    								  
62 JUMP_ABSOLUTE 6					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
12 >> 66 LOAD_CONST 4 ( True )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1
--							      --							    --								  --
Disassembly of <code object middleOfThree at 0x7fbac0e89d20,  def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , c , c , c , c , c ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  if a > b :						    	if c is None :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( b )					      	      if ( b > c ) :					    	    c = c						  /MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1.py",
4 COMPARE_OP 4 ( > )					      		  return b					    	else :							  line 34     def f_filled ( a , b , c , c , c , c ,
6 POP_JUMP_IF_FALSE 38					      	      elif ( a > c ) :					    	    c = c						   c ) :     ^ SyntaxError: duplicate argument 'c' i
							      		  return c					    	if c is None :						  n function definition
3 8 LOAD_FAST 1 ( b )					      	      else :						    	    c = c						  
10 LOAD_FAST 2 ( c )					      		  return a					    	return c						  
12 COMPARE_OP 4 ( > )					      	  else :						    								  
14 POP_JUMP_IF_FALSE 20					      	      if ( a > c ) :					    								  
							      		  return a					    								  
4 16 LOAD_FAST 1 ( b )					      	      elif ( b > c ) :					    								  
18 RETURN_VALUE						      		  return c					    								  
							      	      else :						    								  
5 >> 20 LOAD_FAST 0 ( a )				      		  return b					    								  
22 LOAD_FAST 2 ( c )					      								    								  
24 COMPARE_OP 4 ( > )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 28 LOAD_FAST 2 ( c )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
8 >> 32 LOAD_FAST 0 ( a )				      								    								  
34 RETURN_VALUE						      								    								  
36 JUMP_FORWARD 28 ( to 66 )				      								    								  
							      								    								  
10 >> 38 LOAD_FAST 0 ( a )				      								    								  
40 LOAD_FAST 2 ( c )					      								    								  
42 COMPARE_OP 4 ( > )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
11 46 LOAD_FAST 0 ( a )					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
12 >> 50 LOAD_FAST 1 ( b )				      								    								  
52 LOAD_FAST 2 ( c )					      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
13 58 LOAD_FAST 2 ( c )					      								    								  
60 RETURN_VALUE						      								    								  
							      								    								  
15 >> 62 LOAD_FAST 1 ( b )				      								    								  
64 RETURN_VALUE						      								    								  
>> 66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		      FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		    FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		  FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac<<unk>> de40, f def findSum ( arr , n ) :					    def findSum ( arr ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 CALL_FUNCTION 0					      	  sum = 0						     Returns a set of the list of the given arr.		  /eval_scripts/dis_sa-python_sa.test/FIND_SUM_NON_R
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    								  EPEATING_DISTINCT_ELEMENTS_ARRAY.py", line 55, in
							      	      if arr [ i ] not in s :				     Parameters							  <module>     if f_filled(*parameters_set) == f_gol
3 6 LOAD_CONST 1 ( 0 )					      		  s.add ( arr [ i ] )				     -----							  d(*parameters_set): TypeError: f_filled() takes 1
8 STORE_FAST 3 ( sum )					      	  for i in s :						     arr : ndarray						  positional argument but 2 were given
							      	      sum = sum + i					     Output array of the list of values to be converted.	  
4 10 SETUP_LOOP 42 ( to 54 )				      	  return sum						     """							  
12 LOAD_GLOBAL 1 ( range )				      								    	return set ( arr.shape [ 0 ] for i in arr.shape [ 1 ] )	  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 30 ( to 52 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 2 ( s )					      								    								  
32 COMPARE_OP 7 ( not in )				      								    								  
34 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 36 LOAD_FAST 2 ( s )					      								    								  
38 LOAD_METHOD 2 ( add )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_METHOD 1					      								    								  
48 POP_TOP						      								    								  
50 JUMP_ABSOLUTE 20					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 SETUP_LOOP 20 ( to 76 )				      								    								  
56 LOAD_FAST 2 ( s )					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 12 ( to 74 )				      								    								  
62 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 64 LOAD_FAST 3 ( sum )				      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 3 ( sum )					      								    								  
72 JUMP_ABSOLUTE 60					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_FAST 3 ( sum )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
Disassembly of <code object nearestSmallerEqFib at 0x7fbac<<u def nearestSmallerEqFib ( n ) :				    def nearestSmallEqb ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return n						    	    return n						  
4 COMPARE_OP 2 ( == )					      	  f1 , f2 , f3 = 0 , 1 , 1				    	return n						  
6 POP_JUMP_IF_TRUE 16					      	  while ( f3 <= n ) :					    								  
8 LOAD_FAST 0 ( n )					      	      f1 = f2 ;						    								  
10 LOAD_CONST 2 ( 1 )					      	      f2 = f3 ;						    								  
12 COMPARE_OP 2 ( == )					      	      f3 = f1 + f2 ;					    								  
14 POP_JUMP_IF_FALSE 20					      	  return f2 ;						    								  
							      								    								  
3 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 3 ( ( 0 , 1 , 1 ) )			      								    								  
22 UNPACK_SEQUENCE 3					      								    								  
24 STORE_FAST 1 ( f1 )					      								    								  
26 STORE_FAST 2 ( f2 )					      								    								  
28 STORE_FAST 3 ( f3 )					      								    								  
							      								    								  
5 30 SETUP_LOOP 28 ( to 60 )				      								    								  
>> 32 LOAD_FAST 3 ( f3 )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
6 40 LOAD_FAST 2 ( f2 )					      								    								  
42 STORE_FAST 1 ( f1 )					      								    								  
							      								    								  
7 44 LOAD_FAST 3 ( f3 )					      								    								  
46 STORE_FAST 2 ( f2 )					      								    								  
							      								    								  
8 48 LOAD_FAST 1 ( f1 )					      								    								  
50 LOAD_FAST 2 ( f2 )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 3 ( f3 )					      								    								  
56 JUMP_ABSOLUTE 32					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 2 ( f2 )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_FUNCTIONS					      RECURSIVE_FUNCTIONS					    RECURSIVE_FUNCTIONS						  RECURSIVE_FUNCTIONS
--							      --							    --								  --
Disassembly of <code object tower at 0x7fbac0e89d20, file "<d def tower ( n , sourcePole , destinationPole , auxiliaryPole  def tower ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  if ( 0 == n ) :					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  
2 LOAD_FAST 0 ( n )					      	      return						    								  
4 COMPARE_OP 2 ( == )					      	  tower ( n - 1 , sourcePole , auxiliaryPole , destinationP 								  
6 POP_JUMP_IF_FALSE 12					      	  print ( "Move the disk" , sourcePole , "from" , sourcePol 								  
							      	  tower ( n - 1 , auxiliaryPole , destinationPole , sourceP 								  
3 8 LOAD_CONST 0 ( None )				      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_GLOBAL 0 ( tower )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_FAST 1 ( sourcePole )				      								    								  
22 LOAD_FAST 3 ( auxiliaryPole )			      								    								  
24 LOAD_FAST 2 ( destinationPole )			      								    								  
26 CALL_FUNCTION 4					      								    								  
28 POP_TOP						      								    								  
							      								    								  
5 30 LOAD_GLOBAL 1 ( print )				      								    								  
32 LOAD_CONST 3 ( 'Move the disk' )			      								    								  
34 LOAD_FAST 1 ( sourcePole )				      								    								  
36 LOAD_CONST 4 ( 'from' )				      								    								  
38 LOAD_FAST 1 ( sourcePole )				      								    								  
40 LOAD_CONST 5 ( 'to' )				      								    								  
42 LOAD_FAST 2 ( destinationPole )			      								    								  
44 CALL_FUNCTION 6					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 48 LOAD_GLOBAL 0 ( tower )				      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_FAST 3 ( auxiliaryPole )			      								    								  
58 LOAD_FAST 2 ( destinationPole )			      								    								  
60 LOAD_FAST 1 ( sourcePole )				      								    								  
62 CALL_FUNCTION 4					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION
--							      --							    --								  --
Disassembly of <code object mulmod at 0x7fbac<<unk>> d540, fi def mulmod ( a , b , mod ) :				    def mulmod ( a , b , c ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0 ;						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( res )					      	  a = a % mod ;						    								  /HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION.p
							      	  while ( b > 0 ) :					    								  y", line 49	  print("#Results: %i, %i" % (n_succ
3 4 LOAD_FAST 0 ( a )					      	      if ( b % 2 == 1 ) :				    								  ess, len(param)))
6 LOAD_FAST 2 ( mod )					      		  res = ( res + a ) % mod ;			    								  			^ SyntaxError: EOF while sca
8 BINARY_MODULO						      	      a = ( a * 2 ) % mod ;				    								  nning triple-quoted string literal
10 STORE_FAST 0 ( a )					      	      b //= 2 ;						    								  
							      	  return res % mod ;					    								  
4 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 1 ( b )					      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( b )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 3 ( 1 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( res )				      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_FAST 2 ( mod )					      								    								  
42 BINARY_MODULO					      								    								  
44 STORE_FAST 3 ( res )					      								    								  
							      								    								  
7 >> 46 LOAD_FAST 0 ( a )				      								    								  
48 LOAD_CONST 2 ( 2 )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_FAST 2 ( mod )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 0 ( a )					      								    								  
							      								    								  
8 58 LOAD_FAST 1 ( b )					      								    								  
60 LOAD_CONST 2 ( 2 )					      								    								  
62 INPLACE_FLOOR_DIVIDE					      								    								  
64 STORE_FAST 1 ( b )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 3 ( res )				      								    								  
72 LOAD_FAST 2 ( mod )					      								    								  
74 BINARY_MODULO					      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
Disassembly of <code object isDivisibleBy7 at 0x7fbac<<unk>>  def isDivisibleBy7 ( num ) :				    def isDivisiblebleble7 ( num ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( num )					      	  if num < 0 :						    	if num < 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      return isDivisibleBy7 ( - num )			    	    return num						  /DIVISIBILITY_BY_7.py", line 118     elif	   ^
4 COMPARE_OP 0 ( < )					      	  if ( num == 0 or num == 7 ) :				    	elif num < 0 :						   SyntaxError: invalid syntax
6 POP_JUMP_IF_FALSE 18					      	      return True					    	    return num						  
							      	  if ( num < 10 ) :					    	elif num < 0 :						  
3 8 LOAD_GLOBAL 0 ( isDivisibleBy7 )			      	      return False					    	    return num						  
10 LOAD_FAST 0 ( num )					      	  return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 	elif num < 0 :						  
12 UNARY_NEGATIVE					      								    	    return num						  
14 CALL_FUNCTION 1					      								    	elif num < 0 :						  
16 RETURN_VALUE						      								    	    return num						  
							      								    	elif num < 0 :						  
4 >> 18 LOAD_FAST 0 ( num )				      								    	    return num						  
20 LOAD_CONST 1 ( 0 )					      								    	elif num < 0 :						  
22 COMPARE_OP 2 ( == )					      								    	    return num						  
24 POP_JUMP_IF_TRUE 34					      								    	elif num < 0 :						  
26 LOAD_FAST 0 ( num )					      								    	    return num						  
28 LOAD_CONST 2 ( 7 )					      								    	elif num < 0 :						  
30 COMPARE_OP 2 ( == )					      								    	    return num						  
32 POP_JUMP_IF_FALSE 38					      								    	elif num < 0 :						  
							      								    	    return num						  
5 >> 34 LOAD_CONST 3 ( True )				      								    	elif num < 0 :						  
36 RETURN_VALUE						      								    	    return num						  
							      								    	elif num < 0 :						  
6 >> 38 LOAD_FAST 0 ( num )				      								    	    return num						  
40 LOAD_CONST 4 ( 10 )					      								    	elif num < 0 :						  
42 COMPARE_OP 0 ( < )					      								    	    return num						  
44 POP_JUMP_IF_FALSE 50					      								    	elif num < 0 :						  
							      								    	    return num						  
7 46 LOAD_CONST 5 ( False )				      								    	elif num < 0 :						  
48 RETURN_VALUE						      								    	    return num						  
							      								    	elif num < 0 :						  
8 >> 50 LOAD_GLOBAL 0 ( isDivisibleBy7 )		      								    	    return num						  
52 LOAD_FAST 0 ( num )					      								    	elif num < 0 :						  
54 LOAD_CONST 4 ( 10 )					      								    	    return num						  
56 BINARY_TRUE_DIVIDE					      								    	elif num < 0 :						  
58 LOAD_CONST 6 ( 2 )					      								    	    return num						  
60 LOAD_FAST 0 ( num )					      								    	elif num < 0 :						  
62 LOAD_FAST 0 ( num )					      								    	    return num						  
64 LOAD_CONST 4 ( 10 )					      								    	elif num < 0 :						  
66 BINARY_TRUE_DIVIDE					      								    	    return num						  
68 LOAD_CONST 4 ( 10 )					      								    	elif num < 0 :						  
70 BINARY_MULTIPLY					      								    	    return num						  
72 BINARY_SUBTRACT					      								    	elif num < 0 :						  
74 BINARY_MULTIPLY					      								    	    return num						  
76 BINARY_SUBTRACT					      								    	elif num < 0 :						  
78 CALL_FUNCTION 1					      								    	    return num						  
80 RETURN_VALUE NEW_LINE				      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
							      								    	elif num < 0 :						  
							      								    	    return num						  
-							      -								    	elif-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	      BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		    BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		  BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS
--							      --							    --								  --
Disassembly of <code object nextfit at 0x7fbac0e8bc90, file " def nextfit ( weight , c ) :				    def nextfit ( weight , c , c ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	"""							  
2 STORE_FAST 2 ( res )					      	  rem = c						     Return the array of the values of the values in the values o 
							      	  for _ in range ( len ( weight ) ) :			     values to be converted to the array of values		  
3 4 LOAD_FAST 1 ( c )					      	      if rem >= weight [ _ ] :				     in the array of the values are returned.			  
6 STORE_FAST 3 ( rem )					      		  rem = rem - weight [ _ ]			    								  
							      	      else :						     Parameters							  
4 8 SETUP_LOOP 66 ( to 76 )				      		  res += 1					     -----							  
10 LOAD_GLOBAL 0 ( range )				      		  rem = c - weight [ _ ]			     weight : array_like of values of the values of values	  
12 LOAD_GLOBAL 1 ( len )				      	  return res						     c : array_like						  
14 LOAD_FAST 0 ( weight )				      								     The array of values are returned.				  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								     Returns							  
20 GET_ITER						      								     -----							  
>> 22 FOR_ITER 50 ( to 74 )				      								     out : ndarray						  
24 STORE_FAST 4 ( _ )					      								     Output array of values to be converted to the array of value 
							      								    								  
5 26 LOAD_FAST 3 ( rem )				      								     Returns							  
28 LOAD_FAST 0 ( weight )				      								     -----							  
30 LOAD_FAST 4 ( _ )					      								     out : ndarray						  
32 BINARY_SUBSCR					      								     Output array of values to be converted to the array of value 
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 52					      								     """							  
							      								    	if weight != 0 :					  
6 38 LOAD_FAST 3 ( rem )				      								    	    return np.array ( weight )				  
40 LOAD_FAST 0 ( weight )				      								    	else :							  
42 LOAD_FAST 4 ( _ )					      								    	    return np.array ( weight )				  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 3 ( rem )					      								    								  
50 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
8 >> 52 LOAD_FAST 2 ( res )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( res )					      								    								  
							      								    								  
9 60 LOAD_FAST 1 ( c )					      								    								  
62 LOAD_FAST 0 ( weight )				      								    								  
64 LOAD_FAST 4 ( _ )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_FAST 3 ( rem )					      								    								  
72 JUMP_ABSOLUTE 22					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 2 ( res )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_SPARSE_NOT				      CHECK_GIVEN_MATRIX_SPARSE_NOT				    CHECK_GIVEN_MATRIX_SPARSE_NOT				  CHECK_GIVEN_MATRIX_SPARSE_NOT
--							      --							    --								  --
Disassembly of <code object isSparse at 0x7fbac0e89d20, file  def isSparse ( array , m , n ) :				    def isSparse ( 0x70x70x70eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  counter = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( counter )				      	  for i in range ( 0 , m ) :				    								  /CHECK_GIVEN_MATRIX_SPARSE_NOT.py", line 26	  de
							      	      for j in range ( 0 , n ) :			    								  f f_filled ( 0x70x70x70eeeeeeeeeeeeeeeeeeeeeeeeeee
3 4 SETUP_LOOP 62 ( to 68 )				      		  if ( array [ i ] [ j ] == 0 ) :		    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
6 LOAD_GLOBAL 0 ( range )				      		      counter = counter + 1			    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
8 LOAD_CONST 1 ( 0 )					      	  return ( counter > ( ( m * n ) // 2 ) )		    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
10 LOAD_FAST 1 ( m )					      								    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
12 CALL_FUNCTION 2					      								    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
14 GET_ITER						      								    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
>> 16 FOR_ITER 48 ( to 66 )				      								    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
18 STORE_FAST 4 ( i )					      								    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
							      								    								  eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
4 20 SETUP_LOOP 42 ( to 64 )				      								    								  eeeeeeeeeeeeeeeeeeeeeeee			 ^ S
22 LOAD_GLOBAL 0 ( range )				      								    								  yntaxError: invalid syntax
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( array )				      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( counter )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 3 ( counter )				      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 16					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 3 ( counter )				      								    								  
70 LOAD_FAST 1 ( m )					      								    								  
72 LOAD_FAST 2 ( n )					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 BINARY_FLOOR_DIVIDE					      								    								  
80 COMPARE_OP 4 ( > )					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			      DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			    DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			  DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE
--							      --							    --								  --
Disassembly of <code object count at 0x7fbac0e89d20, file "<d def count ( S , m , n ) :					    def count ( f ) :						  script_not_found : None
2 0 LOAD_FAST 2 ( n )					      	  if ( n == 0 ) :					    	if len ( f ) == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( n < 0 ) :					    	if len ( f ) == 1 :					  
6 POP_JUMP_IF_FALSE 12					      	      return 0 ;					    	    return 0						  
							      	  if ( m <= 0 and n >= 1 ) :				    	return 1						  
3 8 LOAD_CONST 2 ( 1 )					      	      return 0						    								  
10 RETURN_VALUE						      	  return count ( S , m - 1 , n ) + count ( S , m , n - S [  								  
							      								    								  
4 >> 12 LOAD_FAST 2 ( n )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 COMPARE_OP 0 ( < )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 1 ( 0 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_FAST 1 ( m )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 1 ( <= )					      								    								  
30 POP_JUMP_IF_FALSE 44					      								    								  
32 LOAD_FAST 2 ( n )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 COMPARE_OP 5 ( >= )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 40 LOAD_CONST 1 ( 0 )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
8 >> 44 LOAD_GLOBAL 0 ( count )				      								    								  
46 LOAD_FAST 0 ( S )					      								    								  
48 LOAD_FAST 1 ( m )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 2 ( n )					      								    								  
56 CALL_FUNCTION 3					      								    								  
58 LOAD_GLOBAL 0 ( count )				      								    								  
60 LOAD_FAST 0 ( S )					      								    								  
62 LOAD_FAST 1 ( m )					      								    								  
64 LOAD_FAST 2 ( n )					      								    								  
66 LOAD_FAST 0 ( S )					      								    								  
68 LOAD_FAST 1 ( m )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 CALL_FUNCTION 3					      								    								  
80 BINARY_ADD						      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS
--							      --							    --								  --
Disassembly of <code object middleOfThree at 0x7fbac0e89d20,  def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , b ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  if ( ( a < b and b < c ) or ( c < b and b < a ) ) :	    	if b < b :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( b )					      	      return b ;					    	    return False					  /MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS.py", li
4 COMPARE_OP 0 ( < )					      	  if ( ( b < a and a < c ) or ( c < a and a < b ) ) :	    	if b < b :						  ne 26	    def f_filled ( a , b , b ) :     ^ Synta
6 POP_JUMP_IF_FALSE 16					      	      return a ;					    	    return False					  xError: duplicate argument 'b' in function definit
8 LOAD_FAST 1 ( b )					      	  else :						    	else :							  ion
10 LOAD_FAST 2 ( c )					      	      return c						    	    return False					  
12 COMPARE_OP 0 ( < )					      								    								  
14 POP_JUMP_IF_TRUE 32					      								    								  
>> 16 LOAD_FAST 2 ( c )					      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 COMPARE_OP 0 ( < )					      								    								  
22 POP_JUMP_IF_FALSE 36					      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
3 >> 32 LOAD_FAST 1 ( b )				      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
4 >> 36 LOAD_FAST 1 ( b )				      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 52					      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 2 ( c )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_TRUE 68					      								    								  
>> 52 LOAD_FAST 2 ( c )					      								    								  
54 LOAD_FAST 0 ( a )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 72					      								    								  
60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 1 ( b )					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
5 >> 68 LOAD_FAST 0 ( a )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 2 ( c )				      								    								  
74 RETURN_VALUE						      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	      FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	    FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1	  FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1
--							      --							    --								  --
Disassembly of <code object isSubset at 0x7fbac0e89d20, file  def isSubset ( arr1 , arr2 , m , n ) :			    def isSubset ( arr1 , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 4 ( i )					      	  j = 0							     Return the array of the array of the array of the array of t /eval_scripts/dis_sa-python_sa.test/FIND_WHETHER_A
							      	  for i in range ( n ) :				     array that are returned.					  N_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1.py", line
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( m ) :				    								   66, in <module>     if f_filled(*parameters_set)
6 STORE_FAST 5 ( j )					      		  if ( arr2 [ i ] == arr1 [ j ] ) :		     """							  == f_gold(*parameters_set): TypeError: f_filled()
							      		      break					    	for i in range ( n ) :					  takes 2 positional arguments but 4 were given
4 8 SETUP_LOOP 64 ( to 74 )				      	      if ( j == m ) :					    	    if n < 0 :						  
10 LOAD_GLOBAL 0 ( range )				      		  return 0					    		return np.array ( [ np.array ( i ) for i in range 
12 LOAD_FAST 3 ( n )					      	  return 1						    	return np.array ( [ np.array ( i ) for i in range ( n ) ] 
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 52 ( to 72 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 SETUP_LOOP 34 ( to 58 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 2 ( m )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 22 ( to 56 )				      								    								  
34 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( arr2 )				      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr1 )					      								    								  
44 LOAD_FAST 5 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
7 52 BREAK_LOOP						      								    								  
54 JUMP_ABSOLUTE 32					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 5 ( j )				      								    								  
60 LOAD_FAST 2 ( m )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
9 66 LOAD_CONST 1 ( 0 )					      								    								  
68 RETURN_VALUE						      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_CONST 2 ( 1 )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X	      GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X		    GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X		  GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X
--							      --							    --								  --
Disassembly of <code object findPairs at 0x7fbac0e8bc90, file def findPairs ( arr1 , arr2 , n , m , x ) :		    def findPairs 0x70x700000000000000000000000000000000000000000 script_not_found : None
2 0 SETUP_LOOP 76 ( to 78 )				      	  for i in range ( 0 , n ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , m ) :			    								  
4 LOAD_CONST 1 ( 0 )					      		  if ( arr1 [ i ] + arr2 [ j ] == x ) :		    								  
6 LOAD_FAST 2 ( n )					      		      print ( arr1 [ i ] , arr2 [ j ] )		    								  
8 CALL_FUNCTION 2					      								    								  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 62 ( to 76 )				      								    								  
14 STORE_FAST 5 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 56 ( to 74 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( m )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 42 ( to 72 )				      								    								  
30 STORE_FAST 6 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( arr1 )				      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( arr2 )					      								    								  
40 LOAD_FAST 6 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 4 ( x )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 52 LOAD_GLOBAL 1 ( print )				      								    								  
54 LOAD_FAST 0 ( arr1 )					      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( arr2 )					      								    								  
62 LOAD_FAST 6 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 POP_TOP						      								    								  
70 JUMP_ABSOLUTE 28					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 JUMP_ABSOLUTE 12					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
Disassembly of <code object findCombinations at 0x7fbac0e89d2 def findCombinations ( string , index , out ) :		    def findCombinations ( string ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( index )				      	  if index == len ( string ) :				    	index = string.split ( '\n' )				  
2 LOAD_GLOBAL 0 ( len )					      	      print ( out )					    	for i in range ( len ( string ) ) :			  
4 LOAD_FAST 0 ( string )				      	  for i in range ( index , len ( string ) , 1 ) :	    	    if index == 0 :					  
6 CALL_FUNCTION 1					      	      findCombinations ( string , i + 1 , out + "(" + strin 		print ( ' SPACETOKEN SPACETOKEN SPACETOKEN SPACET 
8 COMPARE_OP 2 ( == )					      								    								  
10 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 12 LOAD_GLOBAL 1 ( print )				      								    								  
14 LOAD_FAST 2 ( out )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 SETUP_LOOP 64 ( to 86 )				      								    								  
22 LOAD_GLOBAL 2 ( range )				      								    								  
24 LOAD_FAST 1 ( index )				      								    								  
26 LOAD_GLOBAL 0 ( len )				      								    								  
28 LOAD_FAST 0 ( string )				      								    								  
30 CALL_FUNCTION 1					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 CALL_FUNCTION 3					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 44 ( to 84 )				      								    								  
40 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 42 LOAD_GLOBAL 3 ( findCombinations )			      								    								  
44 LOAD_FAST 0 ( string )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 2 ( out )					      								    								  
54 LOAD_CONST 2 ( '(' )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 0 ( string )				      								    								  
60 LOAD_FAST 1 ( index )				      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 BUILD_SLICE 2					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_CONST 3 ( ')' )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 3					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 38					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS	      PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS	    PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS		  PRINT_NUMBER_ASCENDING_ORDER_CONTAINS_1_2_3_DIGITS
--							      --							    --								  --
Disassembly of <code object printNumbers at 0x7fbac<<unk>> de def printNumbers ( numbers ) :				    def printDay0x70x7acageageagede40 de40 de40 de40 de40 de40 de script_not_found : None
2 0 LOAD_GLOBAL 0 ( map )				      	  numbers = map ( str , numbers )			    								  
2 LOAD_GLOBAL 1 ( str )					      	  result = [ ]						    								  
4 LOAD_FAST 0 ( numbers )				      	  for num in numbers :					    								  
6 CALL_FUNCTION 2					      	      if ( '1' in num and '2' in num and '3' in num ) :	    								  
8 STORE_FAST 0 ( numbers )				      		  result.append ( num )				    								  
							      	  if not result :					    								  
3 10 BUILD_LIST 0					      	      result = [ '-1' ]					    								  
12 STORE_FAST 1 ( result )				      	  return sorted ( result ) ;				    								  
							      								    								  
4 14 SETUP_LOOP 46 ( to 62 )				      								    								  
16 LOAD_FAST 0 ( numbers )				      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 38 ( to 60 )				      								    								  
22 STORE_FAST 2 ( num )					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( '1' )				      								    								  
26 LOAD_FAST 2 ( num )					      								    								  
28 COMPARE_OP 6 ( in )					      								    								  
30 POP_JUMP_IF_FALSE 20					      								    								  
32 LOAD_CONST 2 ( '2' )					      								    								  
34 LOAD_FAST 2 ( num )					      								    								  
36 COMPARE_OP 6 ( in )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
40 LOAD_CONST 3 ( '3' )					      								    								  
42 LOAD_FAST 2 ( num )					      								    								  
44 COMPARE_OP 6 ( in )					      								    								  
46 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 48 LOAD_FAST 1 ( result )				      								    								  
50 LOAD_METHOD 2 ( append )				      								    								  
52 LOAD_FAST 2 ( num )					      								    								  
54 CALL_METHOD 1					      								    								  
56 POP_TOP						      								    								  
58 JUMP_ABSOLUTE 20					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 1 ( result )				      								    								  
64 POP_JUMP_IF_TRUE 72					      								    								  
							      								    								  
8 66 LOAD_CONST 4 ( '-1' )				      								    								  
68 BUILD_LIST 1						      								    								  
70 STORE_FAST 1 ( result )				      								    								  
							      								    								  
9 >> 72 LOAD_GLOBAL 3 ( sorted )			      								    								  
74 LOAD_FAST 1 ( result )				      								    								  
76 CALL_FUNCTION 1					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		      COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		    COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS			  COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS
--							      --							    --								  --
Disassembly of <code object findCount at 0x7fbac<<unk>> de40, def findCount ( str ) :					    def findCount ( str ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = [ ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( result )				      	  for i in range ( len ( str ) ) :			    	result.append ( str ( result ) )			  /eval_scripts/dis_sa-python_sa.test/COUNT_CHARACTE
							      	      if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i  								  RS_POSITION_ENGLISH_ALPHABETS.py", line 45, in <mo
3 4 SETUP_LOOP 76 ( to 82 )				      		  result += 1					    								  dule>	    if f_filled(*parameters_set) == f_gold(*
6 LOAD_GLOBAL 0 ( range )				      	  return result						    								  parameters_set):   File "/home/ubuntu/TransCoder/m
8 LOAD_GLOBAL 1 ( len )					      								    								  odels/eval/bt/152w65bl69/eval_scripts/dis_sa-pytho
10 LOAD_FAST 0 ( str )					      								    								  n_sa.test/COUNT_CHARACTERS_POSITION_ENGLISH_ALPHAB
12 CALL_FUNCTION 1					      								    								  ETS.py", line 27, in f_filled	    result.append (
14 CALL_FUNCTION 1					      								    								  str ( result ) ) TypeError: 'str' object is not ca
16 GET_ITER						      								    								  llable
>> 18 FOR_ITER 60 ( to 80 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_GLOBAL 2 ( ord )				      								    								  
26 LOAD_FAST 0 ( str )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_GLOBAL 2 ( ord )				      								    								  
36 LOAD_CONST 2 ( 'a' )					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_TRUE 70					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_GLOBAL 2 ( ord )				      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_GLOBAL 2 ( ord )				      								    								  
60 LOAD_CONST 3 ( 'A' )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 >> 70 LOAD_FAST 1 ( result )				      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 1 ( result )				      								    								  
78 JUMP_ABSOLUTE 18					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
6 >> 82 LOAD_FAST 1 ( result )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
Disassembly of <code object minPerimeter at 0x7fbac<<unk>> de def minPerimeter ( n ) :					    def minPerimeter ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( math )				      	  l = math.sqrt ( n )					    	math.sqrt ( n * n )					  
2 LOAD_METHOD 1 ( sqrt )				      	  sq = l * l						    								  
4 LOAD_FAST 0 ( n )					      	  if ( sq == n ) :					    								  
6 CALL_METHOD 1						      	      return l * 4					    								  
8 STORE_FAST 1 ( l )					      	  else :						    								  
							      	      row = n / l					    								  
3 10 LOAD_FAST 1 ( l )					      	      perimeter = 2 * ( l + row )			    								  
12 LOAD_FAST 1 ( l )					      	      if ( n % l != 0 ) :				    								  
14 BINARY_MULTIPLY					      		  perimeter += 2				    								  
16 STORE_FAST 2 ( sq )					      	      return perimeter					    								  
							      								    								  
4 18 LOAD_FAST 2 ( sq )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
5 26 LOAD_FAST 1 ( l )					      								    								  
28 LOAD_CONST 1 ( 4 )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
7 >> 34 LOAD_FAST 0 ( n )				      								    								  
36 LOAD_FAST 1 ( l )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 STORE_FAST 3 ( row )					      								    								  
							      								    								  
8 42 LOAD_CONST 2 ( 2 )					      								    								  
44 LOAD_FAST 1 ( l )					      								    								  
46 LOAD_FAST 3 ( row )					      								    								  
48 BINARY_ADD						      								    								  
50 BINARY_MULTIPLY					      								    								  
52 STORE_FAST 4 ( perimeter )				      								    								  
							      								    								  
9 54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_FAST 1 ( l )					      								    								  
58 BINARY_MODULO					      								    								  
60 LOAD_CONST 3 ( 0 )					      								    								  
62 COMPARE_OP 3 ( != )					      								    								  
64 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
10 66 LOAD_FAST 4 ( perimeter )				      								    								  
68 LOAD_CONST 2 ( 2 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 4 ( perimeter )				      								    								  
							      								    								  
11 >> 74 LOAD_FAST 4 ( perimeter )			      								    								  
76 RETURN_VALUE						      								    								  
78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
Disassembly of <code object minXOR at 0x7fbac<<unk>> d540, fi def minXOR ( arr , n ) :					    def minXOR ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	if n < 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_METHOD 0 ( sort )				      	  minXor = int ( sys.float_info.max )			    	    return 0						  /MINIMUM_XOR_VALUE_PAIR_1.py", line 29     def f_f
4 CALL_METHOD 0						      	  val = 0						    	if n < 0 :						  illed ( arr , n , n ) :     ^ SyntaxError: duplica
6 POP_TOP						      	  for i in range ( 0 , n - 1 ) :			    	    return 0						  te argument 'n' in function definition
							      	      val = arr [ i ] ^ arr [ i + 1 ] ;			    	return int ( n )					  
3 8 LOAD_GLOBAL 1 ( int )				      	      minXor = min ( minXor , val ) ;			    								  
10 LOAD_GLOBAL 2 ( sys )				      	  return minXor						    								  
12 LOAD_ATTR 3 ( float_info )				      								    								  
14 LOAD_ATTR 4 ( max )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 STORE_FAST 2 ( minXor )				      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 3 ( val )					      								    								  
							      								    								  
5 24 SETUP_LOOP 52 ( to 78 )				      								    								  
26 LOAD_GLOBAL 5 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 34 ( to 76 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_XOR						      								    								  
62 STORE_FAST 3 ( val )					      								    								  
							      								    								  
7 64 LOAD_GLOBAL 6 ( min )				      								    								  
66 LOAD_FAST 2 ( minXor )				      								    								  
68 LOAD_FAST 3 ( val )					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 STORE_FAST 2 ( minXor )				      								    								  
74 JUMP_ABSOLUTE 40					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 2 ( minXor )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW      DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW	    DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW	  DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN_REVIEW
--							      --							    --								  --
Disassembly of <code object find_difference at 0x7fbac0e8bc90 def find_difference ( arr , n , m ) :			    def find_difference ( arr , fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbf error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  max = 0 ; min = 0					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( max )					      	  arr.sort ( ) ;					    								  /DIFFERENCE_MAXIMUM_SUM_MINIMUM_SUM_N_M_ELEMENTSIN
4 LOAD_CONST 1 ( 0 )					      	  j = n - 1						    								  _REVIEW.py", line 30	   if __name__ == '__main__'
6 STORE_FAST 4 ( min )					      	  for i in range ( m ) :				    								  :	 ^ SyntaxError: invalid syntax
							      	      min += arr [ i ]					    								  
3 8 LOAD_FAST 0 ( arr )					      	      max += arr [ j ]					    								  
10 LOAD_METHOD 0 ( sort )				      	      j = j - 1						    								  
12 CALL_METHOD 0					      	  return ( max - min )					    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 24 SETUP_LOOP 48 ( to 74 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_FAST 2 ( m )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 36 ( to 72 )				      								    								  
36 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( min )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 6 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( min )					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( max )				      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 5 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( max )					      								    								  
							      								    								  
8 62 LOAD_FAST 5 ( j )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 STORE_FAST 5 ( j )					      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 3 ( max )				      								    								  
76 LOAD_FAST 4 ( min )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX				      PROGRAM_PRINT_IDENTITY_MATRIX				    PROGRAM_PRINT_IDENTITY_MATRIX				  PROGRAM_PRINT_IDENTITY_MATRIX
--							      --							    --								  --
Disassembly of <code object Identity at 0x7fbac0e89d20, file  def Identity ( size ) :					    def Identity ( size = 0x70x70x70x70x70x70x70x70x70x70x70x70x7 script_not_found : None
2 0 SETUP_LOOP 78 ( to 80 )				      	  for row in range ( 0 , size ) :			    								  
2 LOAD_GLOBAL 0 ( range )				      	      for col in range ( 0 , size ) :			    								  
4 LOAD_CONST 1 ( 0 )					      		  if ( row == col ) :				    								  
6 LOAD_FAST 0 ( size )					      		      print ( "1 " , end = " " )		    								  
8 CALL_FUNCTION 2					      		  else :					    								  
10 GET_ITER						      		      print ( "0 " , end = " " )		    								  
>> 12 FOR_ITER 64 ( to 78 )				      	      print ( )						    								  
14 STORE_FAST 1 ( row )					      								    								  
							      								    								  
3 16 SETUP_LOOP 52 ( to 70 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 0 ( size )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 38 ( to 68 )				      								    								  
30 STORE_FAST 2 ( col )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( row )				      								    								  
34 LOAD_FAST 2 ( col )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
5 40 LOAD_GLOBAL 1 ( print )				      								    								  
42 LOAD_CONST 2 ( '1 ' )				      								    								  
44 LOAD_CONST 3 ( ' ' )					      								    								  
46 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
48 CALL_FUNCTION_KW 2					      								    								  
50 POP_TOP						      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( print )				      								    								  
56 LOAD_CONST 5 ( '0 ' )				      								    								  
58 LOAD_CONST 3 ( ' ' )					      								    								  
60 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
62 CALL_FUNCTION_KW 2					      								    								  
64 POP_TOP						      								    								  
66 JUMP_ABSOLUTE 28					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
8 >> 70 LOAD_GLOBAL 1 ( print )				      								    								  
72 CALL_FUNCTION 0					      								    								  
74 POP_TOP						      								    								  
76 JUMP_ABSOLUTE 12					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_ZEROES_END_ARRAY					      MOVE_ZEROES_END_ARRAY					    MOVE_ZEROES_END_ARRAY					  MOVE_ZEROES_END_ARRAY
--							      --							    --								  --
Disassembly of <code object pushZerosToEnd at 0x7fbac0e89d20, def pushZerosToEnd ( arr , n ) :				    def pushZerosToEnd ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( count )				      	  for i in range ( n ) :				    								  /MOVE_ZEROES_END_ARRAY.py", line 64	       ^ Syn
							      	      if arr [ i ] != 0 :				    								  taxError: EOF while scanning triple-quoted string
3 4 SETUP_LOOP 48 ( to 54 )				      		  arr [ count ] = arr [ i ]			    								  literal
6 LOAD_GLOBAL 0 ( range )				      		  count += 1					    								  
8 LOAD_FAST 1 ( n )					      	  while count < n :					    								  
10 CALL_FUNCTION 1					      	      arr [ count ] = 0					    								  
12 GET_ITER						      	      count += 1					    								  
>> 14 FOR_ITER 36 ( to 52 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( arr )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 3 ( != )					      								    								  
28 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 2 ( count )				      								    								  
40 STORE_SUBSCR						      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 2 ( count )				      								    								  
50 JUMP_ABSOLUTE 14					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 SETUP_LOOP 28 ( to 84 )				      								    								  
>> 56 LOAD_FAST 2 ( count )				      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
8 64 LOAD_CONST 1 ( 0 )					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 2 ( count )				      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
9 72 LOAD_FAST 2 ( count )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 2 ( count )				      								    								  
80 JUMP_ABSOLUTE 56					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_MAJORITY_ELEMENT				      CHECK_ARRAY_MAJORITY_ELEMENT				    CHECK_ARRAY_MAJORITY_ELEMENT				  CHECK_ARRAY_MAJORITY_ELEMENT
--							      --							    --								  --
Disassembly of <code object isMajority at 0x7fbac<<unk>> de40 def isMajority ( a ) :					    def isMajority ( a , mp , b , b ) :				  script_not_found : None
2 0 BUILD_MAP 0						      	  mp = { }						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 STORE_FAST 1 ( mp )					      	  for i in a :						    								  
							      	      if i in mp : mp [ i ] += 1			    								  
3 4 SETUP_LOOP 46 ( to 52 )				      	      else : mp [ i ] = 1				    								  
6 LOAD_FAST 0 ( a )					      	  for x in mp :						    								  
8 GET_ITER						      	      if mp [ x ] >= len ( a ) // 2 :			    								  
>> 10 FOR_ITER 38 ( to 50 )				      		  return True					    								  
12 STORE_FAST 2 ( i )					      	  return False						    								  
							      								    								  
4 14 LOAD_FAST 2 ( i )					      								    								  
16 LOAD_FAST 1 ( mp )					      								    								  
18 COMPARE_OP 6 ( in )					      								    								  
20 POP_JUMP_IF_FALSE 40					      								    								  
22 LOAD_FAST 1 ( mp )					      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 DUP_TOP_TWO						      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 INPLACE_ADD						      								    								  
34 ROT_THREE						      								    								  
36 STORE_SUBSCR						      								    								  
38 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
5 >> 40 LOAD_CONST 1 ( 1 )				      								    								  
42 LOAD_FAST 1 ( mp )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 10					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 SETUP_LOOP 36 ( to 90 )				      								    								  
54 LOAD_FAST 1 ( mp )					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 28 ( to 88 )				      								    								  
60 STORE_FAST 3 ( x )					      								    								  
							      								    								  
7 62 LOAD_FAST 1 ( mp )					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_GLOBAL 0 ( len )				      								    								  
70 LOAD_FAST 0 ( a )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 LOAD_CONST 2 ( 2 )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 COMPARE_OP 5 ( >= )					      								    								  
80 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
8 82 LOAD_CONST 3 ( True )				      								    								  
84 RETURN_VALUE						      								    								  
86 JUMP_ABSOLUTE 58					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
9 >> 90 LOAD_CONST 4 ( False )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND
--							      --							    --								  --
Disassembly of <code object findMissing at 0x7fbac0e8bc90, fi def findMissing ( a , b , n , m ) :			    def findMissing ( fbfbacaceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 SETUP_LOOP 80 ( to 82 )				      	  for i in range ( n ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( m ) :				    								  
4 LOAD_FAST 2 ( n )					      		  if ( a [ i ] == b [ j ] ) :			    								  
6 CALL_FUNCTION 1					      		      break					    								  
8 GET_ITER						      	      if ( j == m - 1 ) :				    								  
>> 10 FOR_ITER 68 ( to 80 )				      		  print ( a [ i ] , end = " " )			    								  
12 STORE_FAST 4 ( i )					      								    								  
							      								    								  
3 14 SETUP_LOOP 34 ( to 50 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 3 ( m )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 22 ( to 48 )				      								    								  
26 STORE_FAST 5 ( j )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( a )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( b )					      								    								  
36 LOAD_FAST 5 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 44 BREAK_LOOP						      								    								  
46 JUMP_ABSOLUTE 24					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
6 >> 50 LOAD_FAST 5 ( j )				      								    								  
52 LOAD_FAST 3 ( m )					      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
7 62 LOAD_GLOBAL 1 ( print )				      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 2 ( ' ' )					      								    								  
72 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
74 CALL_FUNCTION_KW 2					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 10					      								    								  
>> 80 POP_BLOCK						      								    								  
>> 82 LOAD_CONST 0 ( None )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
Disassembly of <code object nonFibonacci at 0x7fbac<<unk>> de def nonFibonacci ( n ) :					    def nonFibonacci ( n , prevprevprevprevprevprevprevprevprevpr error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  prevPrev = 1						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( prevPrev )				      	  prev = 2						    								  /NTH_NON_FIBONACCI_NUMBER.py", line 32     if __na
							      	  curr = 3						    								  me__ == '__main__':	   ^ SyntaxError: invalid sy
3 4 LOAD_CONST 2 ( 2 )					      	  while n > 0 :						    								  ntax
6 STORE_FAST 2 ( prev )					      	      prevPrev = prev					    								  
							      	      prev = curr					    								  
4 8 LOAD_CONST 3 ( 3 )					      	      curr = prevPrev + prev				    								  
10 STORE_FAST 3 ( curr )				      	      n = n - ( curr - prev - 1 )			    								  
							      	  n = n + ( curr - prev - 1 )				    								  
5 12 SETUP_LOOP 44 ( to 58 )				      	  return prev + n					    								  
>> 14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 22 LOAD_FAST 2 ( prev )				      								    								  
24 STORE_FAST 1 ( prevPrev )				      								    								  
							      								    								  
7 26 LOAD_FAST 3 ( curr )				      								    								  
28 STORE_FAST 2 ( prev )				      								    								  
							      								    								  
8 30 LOAD_FAST 1 ( prevPrev )				      								    								  
32 LOAD_FAST 2 ( prev )					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 3 ( curr )				      								    								  
							      								    								  
9 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_FAST 3 ( curr )					      								    								  
42 LOAD_FAST 2 ( prev )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 STORE_FAST 0 ( n )					      								    								  
54 JUMP_ABSOLUTE 14					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
10 >> 58 LOAD_FAST 0 ( n )				      								    								  
60 LOAD_FAST 3 ( curr )					      								    								  
62 LOAD_FAST 2 ( prev )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 0 ( n )					      								    								  
							      								    								  
11 74 LOAD_FAST 2 ( prev )				      								    								  
76 LOAD_FAST 0 ( n )					      								    								  
78 BINARY_ADD						      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		      MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		    MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		  MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY
--							      --							    --								  --
Disassembly of <code object maxDistance at 0x7fbac<<unk>> de4 def maxDistance ( arr , n ) :				    def maxDistance ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_MAP 0						      	  mp = { }						    	n = [ ]							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( mp )					      	  maxDict = 0						    	n = 0							  /MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY.py
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  ", line 28	 def f_filled ( arr , n , n ) :
3 4 LOAD_CONST 1 ( 0 )					      	      if arr [ i ] not in mp.keys ( ) :			    	    n = i						  ^ SyntaxError: duplicate argument 'n' in function
6 STORE_FAST 3 ( maxDict )				      		  mp [ arr [ i ] ] = i				    	    n = n						  definition
							      	      else :						    	return n						  
4 8 SETUP_LOOP 68 ( to 78 )				      		  maxDict = max ( maxDict , i - mp [ arr [ i ] ] )  								  
10 LOAD_GLOBAL 0 ( range )				      	  return maxDict					    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 56 ( to 76 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( arr )				      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 2 ( mp )					      								    								  
30 LOAD_METHOD 1 ( keys )				      								    								  
32 CALL_METHOD 0					      								    								  
34 COMPARE_OP 7 ( not in )				      								    								  
36 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( i )					      								    								  
40 LOAD_FAST 2 ( mp )					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_SUBSCR						      								    								  
50 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 52 LOAD_GLOBAL 2 ( max )				      								    								  
54 LOAD_FAST 3 ( maxDict )				      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 LOAD_FAST 2 ( mp )					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 STORE_FAST 3 ( maxDict )				      								    								  
74 JUMP_ABSOLUTE 18					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_FAST 3 ( maxDict )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FORM_D_0_ORIGIN
--							      --							    --								  --
Disassembly of <code object minJumps at 0x7fbac<<unk>> de40,  def minJumps ( a , b , d ) :				    def minJumps ( a , b , b , a , b , b , c ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  temp = a						    	return min ( a , b )					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( temp )					      	  a = min ( a , b )					    								  /NUMBER_JUMP_REQUIRED_GIVEN_LENGTH_REACH_POINT_FOR
							      	  b = max ( temp , b )					    								  M_D_0_ORIGIN_2D_PLANE.py", line 30	 def f_fille
3 4 LOAD_GLOBAL 0 ( min )				      	  if ( d >= b ) :					    								  d ( a , b , b , a , b , b , c ) :	^ SyntaxErro
6 LOAD_FAST 0 ( a )					      	      return ( d + b - 1 ) / b				    								  r: duplicate argument 'b' in function definition
8 LOAD_FAST 1 ( b )					      	  if ( d == 0 ) :					    								  
10 CALL_FUNCTION 2					      	      return 0						    								  
12 STORE_FAST 0 ( a )					      	  if ( d == a ) :					    								  
							      	      return 1						    								  
4 14 LOAD_GLOBAL 1 ( max )				      	  return 2						    								  
16 LOAD_FAST 3 ( temp )					      								    								  
18 LOAD_FAST 1 ( b )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 STORE_FAST 1 ( b )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( d )					      								    								  
26 LOAD_FAST 1 ( b )					      								    								  
28 COMPARE_OP 5 ( >= )					      								    								  
30 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( d )					      								    								  
34 LOAD_FAST 1 ( b )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
7 >> 48 LOAD_FAST 2 ( d )				      								    								  
50 LOAD_CONST 2 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_CONST 2 ( 0 )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 2 ( d )				      								    								  
62 LOAD_FAST 0 ( a )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
10 68 LOAD_CONST 1 ( 1 )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
11 >> 72 LOAD_CONST 3 ( 2 )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE
--							      --							    --								  --
Disassembly of <code object checkCount at 0x7fbac<<unk>> de40 def checkCount ( arr , n , k ) :				    def checkCount ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 78 ( to 80 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    	    for i in range ( n ) :				  /eval_scripts/dis_sa-python_sa.test/DISTRIBUTING_I
4 LOAD_FAST 1 ( n )					      	      for j in range ( n ) :				    		for i in range ( n ) :				  TEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE.py", line 5
6 CALL_FUNCTION 1					      		  if arr [ j ] == arr [ i ] :			    		    if i < i :					  2, in <module>     if f_filled(*parameters_set) ==
8 GET_ITER						      		      count += 1				    			return i				   f_gold(*parameters_set): TypeError: f_filled() ta
>> 10 FOR_ITER 66 ( to 78 )				      		  if count > 2 * k :				    	    return None						  kes 2 positional arguments but 3 were given
12 STORE_FAST 3 ( i )					      		      return False				    								  
							      	  return True						    								  
3 14 LOAD_CONST 1 ( 0 )					      								    								  
16 STORE_FAST 4 ( count )				      								    								  
							      								    								  
4 18 SETUP_LOOP 56 ( to 76 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 44 ( to 74 )				      								    								  
30 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( count )				      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 4 ( count )				      								    								  
							      								    								  
7 >> 56 LOAD_FAST 4 ( count )				      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 LOAD_FAST 2 ( k )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
8 68 LOAD_CONST 4 ( False )				      								    								  
70 RETURN_VALUE						      								    								  
72 JUMP_ABSOLUTE 28					      								    								  
>> 74 POP_BLOCK						      								    								  
>> 76 JUMP_ABSOLUTE 10					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_CONST 5 ( True )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
Disassembly of <code object rotateMatrix at 0x7fbac<<unk>> d5 def rotateMatrix ( mat ) :				    def rotateMatrix ( mat , i , j , j , j , j , j , j , j ) :	  script_not_found : None
2 0 LOAD_GLOBAL 0 ( N )					      	  i = N - 1 ;						    	N = N * j						  
2 LOAD_CONST 1 ( 1 )					      	  while ( i >= 0 ) :					    	j = j * j						  
4 BINARY_SUBTRACT					      	      j = N - 1 ;					    	while j < j :						  
6 STORE_FAST 1 ( i )					      	      while ( j >= 0 ) :				    	    N = N * j						  
							      		  print ( mat [ i ] [ j ] , end = " " ) ;	    	while j < j :						  
3 8 SETUP_LOOP 76 ( to 86 )				      		  j = j - 1 ;					    	    N = N * j						  
>> 10 LOAD_FAST 1 ( i )					      	      print ( ) ;					    	while j < j :						  
12 LOAD_CONST 2 ( 0 )					      	      i = i - 1 ;					    	    N = N * j						  
14 COMPARE_OP 5 ( >= )					      								    	while j < j :						  
16 POP_JUMP_IF_FALSE 84					      								    	    N = N * j						  
							      								    	while j < j :						  
4 18 LOAD_GLOBAL 0 ( N )				      								    	    N = N * j						  
20 LOAD_CONST 1 ( 1 )					      								    	while j < j :						  
22 BINARY_SUBTRACT					      								    	    N = N * j						  
24 STORE_FAST 2 ( j )					      								    	while j < j :						  
							      								    	    N = N * j						  
5 26 SETUP_LOOP 40 ( to 68 )				      								    	while j < j :						  
>> 28 LOAD_FAST 2 ( j )					      								    	    N = N * j						  
30 LOAD_CONST 2 ( 0 )					      								    	if j < j :						  
32 COMPARE_OP 5 ( >= )					      								    	    N = N * j						  
34 POP_JUMP_IF_FALSE 66					      								    	while j < j :						  
							      								    	    N = N * j						  
6 36 LOAD_GLOBAL 1 ( print )				      								    	while j < j :						  
38 LOAD_FAST 0 ( mat )					      								    	    N = N * j						  
40 LOAD_FAST 1 ( i )					      								    	while j < j :						  
42 BINARY_SUBSCR					      								    	    N = N * j						  
44 LOAD_FAST 2 ( j )					      								    	if j < j :						  
46 BINARY_SUBSCR					      								    	    N = N * j						  
48 LOAD_CONST 3 ( ' ' )					      								    	while j < j :						  
50 LOAD_CONST 4 ( ( 'end' , ) )				      								    	    N = N * j						  
52 CALL_FUNCTION_KW 2					      								    	    j = N * j						  
54 POP_TOP						      								    	while j < j :						  
							      								    	    N = N * j						  
7 56 LOAD_FAST 2 ( j )					      								    	if j < j :						  
58 LOAD_CONST 1 ( 1 )					      								    	    N = N * j						  
60 BINARY_SUBTRACT					      								    	if j < j :						  
62 STORE_FAST 2 ( j )					      								    	    N = N * j						  
64 JUMP_ABSOLUTE 28					      								    return N							  
>> 66 POP_BLOCK						      								    								  
							      								    								  
8 >> 68 LOAD_GLOBAL 1 ( print )				      								    								  
70 CALL_FUNCTION 0					      								    								  
72 POP_TOP						      								    								  
							      								    								  
9 74 LOAD_FAST 1 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 STORE_FAST 1 ( i )					      								    								  
82 JUMP_ABSOLUTE 10					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES			  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES
--							      --							    --								  --
Disassembly of <code object reorder at 0x7fbac<<unk>> de40, f def reorder ( arr , index , n ) :				    def reorder ( arr , index , count = 1 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  temp = [ 0 ] * n ;					    	"""							  
2 BUILD_LIST 1						      	  for i in range ( 0 , n ) :				     Return the index of the index in the ``count`` element-wise. 
4 LOAD_FAST 2 ( n )					      	      temp [ index [ i ] ] = arr [ i ]			    								  
6 BINARY_MULTIPLY					      	  for i in range ( 0 , n ) :				     Parameters							  
8 STORE_FAST 3 ( temp )					      	      arr [ i ] = temp [ i ]				     -----							  
							      	      index [ i ] = i					     arr : array_like						  
3 10 SETUP_LOOP 34 ( to 46 )				      								     Output array of the index in ``count`` element-wise.	  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								     count : array_like						  
16 LOAD_FAST 2 ( n )					      								     Output array of the index in the index of the index in the	  
18 CALL_FUNCTION 2					      								     index of the index in the index of the index in the index of 
20 GET_ITER						      								     index of the index in the index ``count`` element-wise.	  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 4 ( i )					      								     Returns							  
							      								     -----							  
4 26 LOAD_FAST 0 ( arr )				      								     count : ndarray						  
28 LOAD_FAST 4 ( i )					      								     Output array of the index in the index of the index `count`` 
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 3 ( temp )					      								     See also							  
34 LOAD_FAST 1 ( index )				      								     -----							  
36 LOAD_FAST 4 ( i )					      								    ..versionadded: is not used for the index `count`` element-wi 
38 BINARY_SUBSCR					      								    								  
40 STORE_SUBSCR						      								     See also							  
42 JUMP_ABSOLUTE 22					      								     -----							  
>> 44 POP_BLOCK						      								    ..versionadded: is not used for use the index of ``count`` el 
							      								    								  
5 >> 46 SETUP_LOOP 38 ( to 86 )				      								     See also							  
48 LOAD_GLOBAL 0 ( range )				      								     -----							  
50 LOAD_CONST 1 ( 0 )					      								    ..versionadded: is not used for use the index of the index `c 
52 LOAD_FAST 2 ( n )					      								    								  
54 CALL_FUNCTION 2					      								     See also							  
56 GET_ITER						      								     ------							  
>> 58 FOR_ITER 24 ( to 84 )				      								    ..versionadded::1.7.0					  
60 STORE_FAST 4 ( i )					      								     """							  
							      								    	return arr.view ( index )				  
6 62 LOAD_FAST 3 ( temp )				      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
7 74 LOAD_FAST 4 ( i )					      								    								  
76 LOAD_FAST 1 ( index )				      								    								  
78 LOAD_FAST 4 ( i )					      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 58					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			      SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			    SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			  SUM_MANHATTAN_DISTANCES_PAIRS_POINTS
--							      --							    --								  --
Disassembly of <code object distancesum at 0x7fbac<<unk>> d54 def distancesum ( x , y , n ) :				    def distancesum ( x , y , y , z , z ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( sum )					      	  for i in range ( n ) :				    								  /SUM_MANHATTAN_DISTANCES_PAIRS_POINTS.py", line 46
							      	      for j in range ( i + 1 , n ) :			    								       print("#Results: %i, %i" % (n_success, len(pa
3 4 SETUP_LOOP 84 ( to 90 )				      		  sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i  								  ram)))
6 LOAD_GLOBAL 0 ( range )				      	  return sum						    								  	     ^ SyntaxError: EOF while scanning tripl
8 LOAD_FAST 2 ( n )					      								    								  e-quoted string literal
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 72 ( to 88 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 66 ( to 86 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 4 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 2 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 48 ( to 84 )				      								    								  
36 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 3 ( sum )				      								    								  
40 LOAD_GLOBAL 1 ( abs )				      								    								  
42 LOAD_FAST 0 ( x )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( x )					      								    								  
50 LOAD_FAST 5 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_GLOBAL 1 ( abs )				      								    								  
60 LOAD_FAST 1 ( y )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( y )					      								    								  
68 LOAD_FAST 5 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_ADD						      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 3 ( sum )					      								    								  
82 JUMP_ABSOLUTE 34					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 JUMP_ABSOLUTE 14					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
6 >> 90 LOAD_FAST 3 ( sum )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES
--							      --							    --								  --
Disassembly of <code object countSol at 0x7fbac<<unk>> d540,  def countSol ( coeff , start , end , rhs ) :		    def countSol ( coeff , start = 1 , start = 1 ) :		  script_not_found : None
2 0 LOAD_FAST 3 ( rhs )					      	  if ( rhs == 0 ) :					    	if coeff is None :					  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    coeff = coeff [ coeff ]				  
4 COMPARE_OP 2 ( == )					      	  result = 0						    	else :							  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( start , end + 1 ) :			    	    coeff = coeff [ coeff ]				  
							      	      if ( coeff [ i ] <= rhs ) :			    	return coeff						  
3 8 LOAD_CONST 2 ( 1 )					      		  result += countSol ( coeff , i , end , rhs - coef 								  
10 RETURN_VALUE						      	  return result						    								  
							      								    								  
4 >> 12 LOAD_CONST 1 ( 0 )				      								    								  
14 STORE_FAST 4 ( result )				      								    								  
							      								    								  
5 16 SETUP_LOOP 60 ( to 78 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 1 ( start )				      								    								  
22 LOAD_FAST 2 ( end )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 42 ( to 76 )				      								    								  
34 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 0 ( coeff )				      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( rhs )					      								    								  
44 COMPARE_OP 1 ( <= )					      								    								  
46 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( result )				      								    								  
50 LOAD_GLOBAL 1 ( countSol )				      								    								  
52 LOAD_FAST 0 ( coeff )				      								    								  
54 LOAD_FAST 5 ( i )					      								    								  
56 LOAD_FAST 2 ( end )					      								    								  
58 LOAD_FAST 3 ( rhs )					      								    								  
60 LOAD_FAST 0 ( coeff )				      								    								  
62 LOAD_FAST 5 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 CALL_FUNCTION 4					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 4 ( result )				      								    								  
74 JUMP_ABSOLUTE 32					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
8 >> 78 LOAD_FAST 4 ( result )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
Disassembly of <code object solve at 0x7fbac0e89d20, file "<d def solve ( arr , n ) :					    def solve ( arr ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	if arr.sort ( ) :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_METHOD 0 ( sort )				      	  a = 0 ; b = 0						    	    return 0						  /eval_scripts/dis_sa-python_sa.test/MINIMUM_SUM_TW
4 CALL_METHOD 0						      	  for i in range ( n ) :				    	arr = arr.sort ( )					  O_NUMBERS_FORMED_DIGITS_ARRAY.py", line 52, in <mo
6 POP_TOP						      	      if ( i % 2 != 0 ) :				    	for i in range ( arr.shape ) :				  dule>	    if f_filled(*parameters_set) == f_gold(*
							      		  a = a * 10 + arr [ i ]			    	    arr [ i ] = arr [ i ]				  parameters_set): TypeError: f_filled() takes 1 pos
3 8 LOAD_CONST 1 ( 0 )					      	      else :						    	return arr						  itional argument but 2 were given
10 STORE_FAST 2 ( a )					      		  b = b * 10 + arr [ i ]			    								  
12 LOAD_CONST 1 ( 0 )					      	  return a + b						    								  
14 STORE_FAST 3 ( b )					      								    								  
							      								    								  
4 16 SETUP_LOOP 62 ( to 80 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 50 ( to 78 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 4 ( i )					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 COMPARE_OP 3 ( != )					      								    								  
40 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 42 LOAD_FAST 2 ( a )					      								    								  
44 LOAD_CONST 3 ( 10 )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( a )					      								    								  
58 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 60 LOAD_FAST 3 ( b )				      								    								  
62 LOAD_CONST 3 ( 10 )					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( b )					      								    								  
76 JUMP_ABSOLUTE 26					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_FAST 2 ( a )				      								    								  
82 LOAD_FAST 3 ( b )					      								    								  
84 BINARY_ADD						      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUM_CONTIGUOUS_SUBARRAY				      LARGEST_SUM_CONTIGUOUS_SUBARRAY				    LARGEST_SUM_CONTIGUOUS_SUBARRAY				  LARGEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
Disassembly of <code object maxSubArraySum at 0x7fbac<<unk>>  def maxSubArraySum ( a , size ) :				    def maxSubArraySum ( a , size = 1 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( maxint )				      	  max_so_far = - maxint - 1				    	"""							  
2 UNARY_NEGATIVE					      	  max_ending_here = 0					     maxint: a number of a number of numbers			  
4 LOAD_CONST 1 ( 1 )					      	  for i in range ( 0 , size ) :				    								  
6 BINARY_SUBTRACT					      	      max_ending_here = max_ending_here + a [ i ]	     Parameters							  
8 STORE_FAST 2 ( max_so_far )				      	      if ( max_so_far < max_ending_here ) :		     -----							  
							      		  max_so_far = max_ending_here			     a : array_like						  
3 10 LOAD_CONST 2 ( 0 )					      	      if max_ending_here < 0 :				     a number of numbers					  
12 STORE_FAST 3 ( max_ending_here )			      		  max_ending_here = 0				    								  
							      	  return max_so_far					     Returns							  
4 14 SETUP_LOOP 54 ( to 70 )				      								     -----							  
16 LOAD_GLOBAL 1 ( range )				      								     a : array_like						  
18 LOAD_CONST 2 ( 0 )					      								     The number of numbers of numbers				  
20 LOAD_FAST 1 ( size )					      								    								  
22 CALL_FUNCTION 2					      								     Returns							  
24 GET_ITER						      								     -----							  
>> 26 FOR_ITER 40 ( to 68 )				      								     a : array_like						  
28 STORE_FAST 4 ( i )					      								     The number of numbers					  
							      								    								  
5 30 LOAD_FAST 3 ( max_ending_here )			      								     Returns							  
32 LOAD_FAST 0 ( a )					      								     -----							  
34 LOAD_FAST 4 ( i )					      								     a : array_like						  
36 BINARY_SUBSCR					      								     The number of numbers are returned.			  
38 BINARY_ADD						      								    								  
40 STORE_FAST 3 ( max_ending_here )			      								     """							  
							      								    	return _vec_string ( a , 'SubArraySum' , 'SubArraySum' )  
6 42 LOAD_FAST 2 ( max_so_far )				      								    								  
44 LOAD_FAST 3 ( max_ending_here )			      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( max_ending_here )			      								    								  
52 STORE_FAST 2 ( max_so_far )				      								    								  
							      								    								  
8 >> 54 LOAD_FAST 3 ( max_ending_here )			      								    								  
56 LOAD_CONST 2 ( 0 )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
9 62 LOAD_CONST 2 ( 0 )					      								    								  
64 STORE_FAST 3 ( max_ending_here )			      								    								  
66 JUMP_ABSOLUTE 26					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 2 ( max_so_far )			      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN
--							      --							    --								  --
Disassembly of <code object checkDuplicatesWithinK at 0x7fbac def checkDuplicatesWithinK ( arr , n , k ) :		    def checkDuplicatesWithinK ( arr , n ) :			  script_not_found : None
2 0 BUILD_LIST 0					      	  myset = [ ]						    	"""							  
2 STORE_FAST 3 ( myset )				      	  for i in range ( n ) :				     Return the list of the ``arr`` in ``n`` of the ``n`` in ``ar 
							      	      if arr [ i ] in myset :				    								  
3 4 SETUP_LOOP 72 ( to 78 )				      		  return True					     Parameters							  
6 LOAD_GLOBAL 0 ( range )				      	      myset.append ( arr [ i ] )			     -----							  
8 LOAD_FAST 1 ( n )					      	      if ( i >= k ) :					     arr : ndarray						  
10 CALL_FUNCTION 1					      		  myset.remove ( arr [ i - k ] )		     Output array of ``arr`` in ``arr`` of ``arr`` in ``arr``.	  
12 GET_ITER						      	  return False						    								  
>> 14 FOR_ITER 60 ( to 76 )				      								     Returns							  
16 STORE_FAST 4 ( i )					      								     -----							  
							      								     out : ndarray						  
4 18 LOAD_FAST 0 ( arr )				      								     Output array of ``arr`` in ``arr`` of ``arr`` in ``arr``.	  
20 LOAD_FAST 4 ( i )					      								    								  
22 BINARY_SUBSCR					      								     See also							  
24 LOAD_FAST 3 ( myset )				      								     -----							  
26 COMPARE_OP 6 ( in )					      								     arr : ndarray						  
28 POP_JUMP_IF_FALSE 34					      								     Output array of ``arr`` in ``arr`` of ``arr`` in ``arr`` of  
							      								    								  
5 30 LOAD_CONST 1 ( True )				      								     """							  
32 RETURN_VALUE						      								    	return arr						  
							      								    								  
6 >> 34 LOAD_FAST 3 ( myset )				      								    								  
36 LOAD_METHOD 1 ( append )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
							      								    								  
7 48 LOAD_FAST 4 ( i )					      								    								  
50 LOAD_FAST 2 ( k )					      								    								  
52 COMPARE_OP 5 ( >= )					      								    								  
54 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
8 56 LOAD_FAST 3 ( myset )				      								    								  
58 LOAD_METHOD 2 ( remove )				      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 LOAD_FAST 2 ( k )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 CALL_METHOD 1					      								    								  
72 POP_TOP						      								    								  
74 JUMP_ABSOLUTE 14					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_CONST 2 ( False )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES
--							      --							    --								  --
Disassembly of <code object maxvolume at 0x7fbac<<unk>> d540, def maxvolume ( s ) :					    def maxvolume ( s , maxvalue = 1 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  maxvalue = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( maxvalue )				      	  i = 1							    								  /MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES.py", line
							      	  for i in range ( s - 1 ) :				    								  49	 print("#Results: %i, %i" % (n_success, len(
3 4 LOAD_CONST 2 ( 1 )					      	      j = 1						    								  param)))
6 STORE_FAST 2 ( i )					      	      for j in range ( s ) :				    								  	       ^ SyntaxError: EOF while scanning tri
							      		  k = s - i - j					    								  ple-quoted string literal
4 8 SETUP_LOOP 72 ( to 82 )				      		  maxvalue = max ( maxvalue , i * j * k )	    								  
10 LOAD_GLOBAL 0 ( range )				      	  return maxvalue					    								  
12 LOAD_FAST 0 ( s )					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 56 ( to 80 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 30 SETUP_LOOP 46 ( to 78 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 0 ( s )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 34 ( to 76 )				      								    								  
42 STORE_FAST 3 ( j )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( s )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_FAST 3 ( j )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 STORE_FAST 4 ( k )					      								    								  
							      								    								  
8 56 LOAD_GLOBAL 1 ( max )				      								    								  
58 LOAD_FAST 1 ( maxvalue )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_FAST 3 ( j )					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_FAST 4 ( k )					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 STORE_FAST 1 ( maxvalue )				      								    								  
74 JUMP_ABSOLUTE 40					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 JUMP_ABSOLUTE 22					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
9 >> 82 LOAD_FAST 1 ( maxvalue )			      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
Disassembly of <code object firstNonRepeating at 0x7fbac<<unk def firstNonRepeating ( arr , n ) :			    def firstNonRepeating ( arr , n ) :				  failure : #Results: 0, 10
2 0 SETUP_LOOP 84 ( to 86 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      j = 0						    	    for i in range ( n ) :				  
4 LOAD_FAST 1 ( n )					      	      while ( j < n ) :					    		if i < n :					  
6 CALL_FUNCTION 1					      		  if ( i != j and arr [ i ] == arr [ j ] ) :	    		    return i					  
8 GET_ITER						      		      break					    	    return None						  
>> 10 FOR_ITER 72 ( to 84 )				      		  j += 1					    								  
12 STORE_FAST 2 ( i )					      	      if ( j == n ) :					    								  
							      		  return arr [ i ]				    								  
3 14 LOAD_CONST 1 ( 0 )					      	  return - 1						    								  
16 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 18 SETUP_LOOP 46 ( to 66 )				      								    								  
>> 20 LOAD_FAST 3 ( j )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_FAST 3 ( j )					      								    								  
32 COMPARE_OP 3 ( != )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 52 BREAK_LOOP						      								    								  
							      								    								  
7 >> 54 LOAD_FAST 3 ( j )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( j )					      								    								  
62 JUMP_ABSOLUTE 20					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
8 >> 66 LOAD_FAST 3 ( j )				      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
9 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 RETURN_VALUE						      								    								  
82 JUMP_ABSOLUTE 10					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_CONST 3 ( - 1 )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object checkIsAP at 0x7fbac0e89d20, file def checkIsAP ( arr , n ) :				    def checkIsAP ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 1 ) : return True				    	n = n [ n : n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 1 )					      	  arr.sort ( )						    	while n < n :						  /eval_scripts/dis_sa-python_sa.test/CHECK_WHETHER_
4 COMPARE_OP 2 ( == )					      	  d = arr [ 1 ] - arr [ 0 ]				    	    n = n [ n : n ]					  ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY.py",
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 2 , n ) :				    	    n += n [ n : n ]					   line 50, in <module>	    if f_filled(*parameters_
8 LOAD_CONST 2 ( True )					      	      if ( arr [ i ] - arr [ i - 1 ] != d ) :		    	return n						  set) == f_gold(*parameters_set):   File "/home/ubu
10 RETURN_VALUE						      		  return False					    								  ntu/TransCoder/models/eval/bt/152w65bl69/eval_scri
							      	  return True						    								  pts/dis_sa-python_sa.test/CHECK_WHETHER_ARITHMETIC
3 >> 12 LOAD_FAST 0 ( arr )				      								    								  _PROGRESSION_CAN_FORMED_GIVEN_ARRAY.py", line 28,
14 LOAD_METHOD 0 ( sort )				      								    								  in f_filled	  n = n [ n : n ] TypeError: 'int' o
16 CALL_METHOD 0					      								    								  bject is not subscriptable
18 POP_TOP						      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_CONST 3 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 STORE_FAST 2 ( d )					      								    								  
							      								    								  
5 36 SETUP_LOOP 46 ( to 84 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_CONST 4 ( 2 )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 32 ( to 82 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 2 ( d )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 76 LOAD_CONST 5 ( False )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 48					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
8 >> 84 LOAD_CONST 2 ( True )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object insertSorted at 0x7fbac0e89d20, f def insertSorted ( arr , n , key , capacity ) :		    def insertSorted ( arr , n , n , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( n )					      	  if ( n >= capacity ) :				    	n = n % n						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 3 ( capacity )				      	      return n						    	n = n % n						  /SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1.py",
4 COMPARE_OP 5 ( >= )					      	  i = n - 1						    	n = n % n						   line 28     def f_filled ( arr , n , n , n , n )
6 POP_JUMP_IF_FALSE 12					      	  while i >= 0 and arr [ i ] > key :			    	n = n % n						  :	^ SyntaxError: duplicate argument 'n' in fun
							      	      arr [ i + 1 ] = arr [ i ]				    	n = n % n						  ction definition
3 8 LOAD_FAST 1 ( n )					      	      i -= 1						    	n = n % n						  
10 RETURN_VALUE						      	  arr [ i + 1 ] = key					    	n = n % n						  
							      	  return ( n + 1 )					    	n = n % n						  
4 >> 12 LOAD_FAST 1 ( n )				      								    	n = n % n						  
14 LOAD_CONST 1 ( 1 )					      								    	n = n % n % n						  
16 BINARY_SUBTRACT					      								    	n = n % n						  
18 STORE_FAST 4 ( i )					      								    	n = n % n						  
							      								    	n = n % n						  
5 20 SETUP_LOOP 48 ( to 70 )				      								    	n = n % n						  
>> 22 LOAD_FAST 4 ( i )					      								    	n = n % n						  
24 LOAD_CONST 2 ( 0 )					      								    	n = n % n						  
26 COMPARE_OP 5 ( >= )					      								    	n = n % n						  
28 POP_JUMP_IF_FALSE 68					      								    	n = n % n						  
30 LOAD_FAST 0 ( arr )					      								    	n = n % n						  
32 LOAD_FAST 4 ( i )					      								    	n = n % n						  
34 BINARY_SUBSCR					      								    	n = n % n						  
36 LOAD_FAST 2 ( key )					      								    	n = n % n						  
38 COMPARE_OP 4 ( > )					      								    	n = n % n						  
40 POP_JUMP_IF_FALSE 68					      								    	n = n % n						  
							      								    	n = n % n						  
6 42 LOAD_FAST 0 ( arr )				      								    	n = n % n						  
44 LOAD_FAST 4 ( i )					      								    	n = n % n						  
46 BINARY_SUBSCR					      								    	n = n % n						  
48 LOAD_FAST 0 ( arr )					      								    	n = n % n						  
50 LOAD_FAST 4 ( i )					      								    	n = n % n						  
52 LOAD_CONST 1 ( 1 )					      								    	n = n % n						  
54 BINARY_ADD						      								    	n = n % n						  
56 STORE_SUBSCR						      								    	n = n % n						  
							      								    	n = n % n						  
7 58 LOAD_FAST 4 ( i )					      								    	n = n % n						  
60 LOAD_CONST 1 ( 1 )					      								    	n = n % n						  
62 INPLACE_SUBTRACT					      								    	n = n % n						  
64 STORE_FAST 4 ( i )					      								    	n = n % n						  
66 JUMP_ABSOLUTE 22					      								    	n = n % n						  
>> 68 POP_BLOCK						      								    	n = n % n						  
							      								    	n = n % n						  
8 >> 70 LOAD_FAST 2 ( key )				      								    	n = n % n						  
72 LOAD_FAST 0 ( arr )					      								    	n = n % n						  
74 LOAD_FAST 4 ( i )					      								    	n = n % n						  
76 LOAD_CONST 1 ( 1 )					      								    	n = n % n						  
78 BINARY_ADD						      								    	n = n % n						  
80 STORE_SUBSCR						      								    	n = n % n						  
							      								    	n = n % n						  
9 82 LOAD_FAST 1 ( n )					      								    	n = n % n						  
84 LOAD_CONST 1 ( 1 )					      								    	n = n % n						  
86 BINARY_ADD						      								    	n = n % n						  
88 RETURN_VALUE NEW_LINE				      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    	n = n % n						  
							      								    return n							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_FIRST_MISSING_NUMBER				      FIND_THE_FIRST_MISSING_NUMBER				    FIND_THE_FIRST_MISSING_NUMBER				  FIND_THE_FIRST_MISSING_NUMBER
--							      --							    --								  --
Disassembly of <code object findFirstMissing at 0x7fbac<<unk> def findFirstMissing ( array , start , end ) :		    def findFirstMissing ( array , start , start , start ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( start )				      	  if ( start > end ) :					    	start , end = start					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 2 ( end )					      	      return end + 1					    	if start != start :					  /FIND_THE_FIRST_MISSING_NUMBER.py", line 28	  de
4 COMPARE_OP 4 ( > )					      	  if ( start != array [ start ] ) :			    	    start = start					  f f_filled ( array , start , start , start ) :
6 POP_JUMP_IF_FALSE 16					      	      return start ;					    	else :							   ^ SyntaxError: duplicate argument 'start' in func
							      	  mid = int ( ( start + end ) / 2 )			    	    start = start					  tion definition
3 8 LOAD_FAST 2 ( end )					      	  if ( array [ mid ] == mid ) :				    								  
10 LOAD_CONST 1 ( 1 )					      	      return findFirstMissing ( array , mid + 1 , end )	    								  
12 BINARY_ADD						      	  return findFirstMissing ( array , start , mid )	    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 1 ( start )				      								    								  
18 LOAD_FAST 0 ( array )				      								    								  
20 LOAD_FAST 1 ( start )				      								    								  
22 BINARY_SUBSCR					      								    								  
24 COMPARE_OP 3 ( != )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( start )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( int )				      								    								  
34 LOAD_FAST 1 ( start )				      								    								  
36 LOAD_FAST 2 ( end )					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( array )				      								    								  
50 LOAD_FAST 3 ( mid )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 3 ( mid )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 60 LOAD_GLOBAL 1 ( findFirstMissing )			      								    								  
62 LOAD_FAST 0 ( array )				      								    								  
64 LOAD_FAST 3 ( mid )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 2 ( end )					      								    								  
72 CALL_FUNCTION 3					      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
9 >> 76 LOAD_GLOBAL 1 ( findFirstMissing )		      								    								  
78 LOAD_FAST 0 ( array )				      								    								  
80 LOAD_FAST 1 ( start )				      								    								  
82 LOAD_FAST 3 ( mid )					      								    								  
84 CALL_FUNCTION 3					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE				  FIND_THE_ELEMENT_THAT_APPEARS_ONCE
--							      --							    --								  --
Disassembly of <code object getSingle at 0x7fbac0e8bc90, file def getSingle ( arr , n ) :				    def getSingle ( fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbf error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  ones = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( ones )					      	  twos = 0						    								  /FIND_THE_ELEMENT_THAT_APPEARS_ONCE.py", line 31
							      	  for i in range ( n ) :				    								     if __name__ == '__main__':	     ^ SyntaxError:
3 4 LOAD_CONST 1 ( 0 )					      	      twos = twos | ( ones & arr [ i ] )		    								  invalid syntax
6 STORE_FAST 3 ( twos )					      	      ones = ones ^ arr [ i ]				    								  
							      	      common_bit_mask = ~ ( ones & twos )		    								  
4 8 SETUP_LOOP 70 ( to 80 )				      	      ones &= common_bit_mask				    								  
10 LOAD_GLOBAL 0 ( range )				      	      twos &= common_bit_mask				    								  
12 LOAD_FAST 1 ( n )					      	  return ones						    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 58 ( to 78 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 3 ( twos )				      								    								  
24 LOAD_FAST 2 ( ones )					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_AND						      								    								  
34 BINARY_OR						      								    								  
36 STORE_FAST 3 ( twos )				      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( ones )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_XOR						      								    								  
48 STORE_FAST 2 ( ones )				      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( ones )				      								    								  
52 LOAD_FAST 3 ( twos )					      								    								  
54 BINARY_AND						      								    								  
56 UNARY_INVERT						      								    								  
58 STORE_FAST 5 ( common_bit_mask )			      								    								  
							      								    								  
8 60 LOAD_FAST 2 ( ones )				      								    								  
62 LOAD_FAST 5 ( common_bit_mask )			      								    								  
64 INPLACE_AND						      								    								  
66 STORE_FAST 2 ( ones )				      								    								  
							      								    								  
9 68 LOAD_FAST 3 ( twos )				      								    								  
70 LOAD_FAST 5 ( common_bit_mask )			      								    								  
72 INPLACE_AND						      								    								  
74 STORE_FAST 3 ( twos )				      								    								  
76 JUMP_ABSOLUTE 18					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
10 >> 80 LOAD_FAST 2 ( ones )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			      CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			    CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			  CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT
--							      --							    --								  --
Disassembly of <code object circle at 0x7fbac0e89d20, file "< def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :		    def circle ( x1 , y1 , y1 , y1 , y1 , y2 , y2 , y2 , y2 , y2  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x1 )					      	  distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - 								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 2 ( x2 )					      	  radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		    								  /CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT.py", line
4 BINARY_SUBTRACT					      	  if ( distSq == radSumSq ) :				    								   30	  if __name__ == '__main__':	  ^ SyntaxEr
6 LOAD_FAST 0 ( x1 )					      	      return 1						    								  ror: invalid syntax
8 LOAD_FAST 2 ( x2 )					      	  elif ( distSq > radSumSq ) :				    								  
10 BINARY_SUBTRACT					      	      return - 1					    								  
12 BINARY_MULTIPLY					      	  else :						    								  
14 LOAD_FAST 1 ( y1 )					      	      return 0						    								  
16 LOAD_FAST 3 ( y2 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_FAST 1 ( y1 )					      								    								  
22 LOAD_FAST 3 ( y2 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 BINARY_ADD						      								    								  
30 STORE_FAST 6 ( distSq )				      								    								  
							      								    								  
3 32 LOAD_FAST 4 ( r1 )					      								    								  
34 LOAD_FAST 5 ( r2 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 4 ( r1 )					      								    								  
40 LOAD_FAST 5 ( r2 )					      								    								  
42 BINARY_ADD						      								    								  
44 BINARY_MULTIPLY					      								    								  
46 STORE_FAST 7 ( radSumSq )				      								    								  
							      								    								  
4 48 LOAD_FAST 6 ( distSq )				      								    								  
50 LOAD_FAST 7 ( radSumSq )				      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 56 LOAD_CONST 1 ( 1 )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
6 >> 60 LOAD_FAST 6 ( distSq )				      								    								  
62 LOAD_FAST 7 ( radSumSq )				      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 68 LOAD_CONST 2 ( - 1 )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
9 >> 72 LOAD_CONST 3 ( 0 )				      								    								  
74 RETURN_VALUE						      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1
--							      --							    --								  --
Disassembly of <code object findMissing at 0x7fbac<<unk>> d54 def findMissing ( a , b , n , m ) :			    def findMissing ( fbfbacacageageageageageageageageageageageag script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  s = dict ( )						    								  
2 CALL_FUNCTION 0					      	  for i in range ( m ) :				    								  
4 STORE_FAST 4 ( s )					      	      s [ b [ i ] ] = 1					    								  
							      	  for i in range ( n ) :				    								  
3 6 SETUP_LOOP 28 ( to 36 )				      	      if a [ i ] not in s.keys ( ) :			    								  
8 LOAD_GLOBAL 1 ( range )				      		  print ( a [ i ] , end = " " )			    								  
10 LOAD_FAST 3 ( m )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 16 ( to 34 )				      								    								  
18 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_FAST 4 ( s )					      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 LOAD_FAST 5 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 STORE_SUBSCR						      								    								  
32 JUMP_ABSOLUTE 16					      								    								  
>> 34 POP_BLOCK						      								    								  
							      								    								  
5 >> 36 SETUP_LOOP 48 ( to 86 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_FAST 2 ( n )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 36 ( to 84 )				      								    								  
48 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( s )					      								    								  
58 LOAD_METHOD 2 ( keys )				      								    								  
60 CALL_METHOD 0					      								    								  
62 COMPARE_OP 7 ( not in )				      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 66 LOAD_GLOBAL 3 ( print )				      								    								  
68 LOAD_FAST 0 ( a )					      								    								  
70 LOAD_FAST 5 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 2 ( ' ' )					      								    								  
76 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
78 CALL_FUNCTION_KW 2					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 46					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findInteger at 0x7fbac0e8bc90, fi def findInteger ( arr , n ) :				    def findInteger ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  neg = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( neg )					      	  pos = 0						    								  /INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_AR
							      	  sum = 0						    								  RAY_1.py", line 51	 print("#Results: %i, %i" %
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n ) :				    								  (n_success, len(param)))
6 STORE_FAST 3 ( pos )					      	      sum += arr [ i ]					    								  			       ^ SyntaxError: EOF wh
							      	      if ( arr [ i ] < 0 ) :				    								  ile scanning triple-quoted string literal
4 8 LOAD_CONST 1 ( 0 )					      		  neg += 1					    								  
10 STORE_FAST 4 ( sum )					      	      else :						    								  
							      		  pos += 1					    								  
5 12 SETUP_LOOP 60 ( to 74 )				      	  return ( sum / abs ( neg - pos ) )			    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 46 ( to 72 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 4 ( sum )				      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
7 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 52 LOAD_FAST 2 ( neg )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 2 ( neg )					      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
10 >> 62 LOAD_FAST 3 ( pos )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( pos )					      								    								  
70 JUMP_ABSOLUTE 24					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
11 >> 74 LOAD_FAST 4 ( sum )				      								    								  
76 LOAD_GLOBAL 1 ( abs )				      								    								  
78 LOAD_FAST 2 ( neg )					      								    								  
80 LOAD_FAST 3 ( pos )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
Disassembly of <code object isIdentity at 0x7fbac<<unk>> de40 def isIdentity ( mat , N ) :				    def isIdentity ( mat ) :					  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 90 ( to 92 )				      	  for row in range ( N ) :				    	for x in range ( len ( mat ) ) :			  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      for col in range ( N ) :				    	    for x in range ( len ( mat ) ) :			  /eval_scripts/dis_sa-python_sa.test/PROGRAM_PRINT_
4 LOAD_FAST 1 ( N )					      		  if ( row == col and mat [ row ] [ col ] != 1 ) :  		if x [ 0 ] == 0 :				  IDENTITY_MATRIX_1.py", line 51, in <module>	  if
6 CALL_FUNCTION 1					      		      return False ;				    		    return x [ 1 ]				   f_filled(*parameters_set) == f_gold(*parameters_s
8 GET_ITER						      		  elif ( row != col and mat [ row ] [ col ] != 0 )  	return None						  et): TypeError: f_filled() takes 1 positional argu
>> 10 FOR_ITER 78 ( to 90 )				      		      return False ;				    								  ment but 2 were given
12 STORE_FAST 2 ( row )					      	  return True ;						    								  
							      								    								  
3 14 SETUP_LOOP 72 ( to 88 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( N )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 60 ( to 86 )				      								    								  
26 STORE_FAST 3 ( col )					      								    								  
							      								    								  
4 28 LOAD_FAST 2 ( row )				      								    								  
30 LOAD_FAST 3 ( col )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 56					      								    								  
36 LOAD_FAST 0 ( mat )					      								    								  
38 LOAD_FAST 2 ( row )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( col )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 52 LOAD_CONST 2 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
6 >> 56 LOAD_FAST 2 ( row )				      								    								  
58 LOAD_FAST 3 ( col )					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 24					      								    								  
64 LOAD_FAST 0 ( mat )					      								    								  
66 LOAD_FAST 2 ( row )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 3 ( col )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 3 ( 0 )					      								    								  
76 COMPARE_OP 3 ( != )					      								    								  
78 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
7 80 LOAD_CONST 2 ( False )				      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 24					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 10					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
8 >> 92 LOAD_CONST 4 ( True )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SINK_NODES_GRAPH					      NUMBER_SINK_NODES_GRAPH					    NUMBER_SINK_NODES_GRAPH					  NUMBER_SINK_NODES_GRAPH
--							      --							    --								  --
Disassembly of <code object countSink at 0x7fbac0e89d20, file def countSink ( n , m , edgeFrom , edgeTo ) :		    def countSink ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  mark = [ 0 ] * ( n + 1 )				    	"""							  
2 BUILD_LIST 1						      	  for i in range ( m ) :				     Return the list of the list of the list of the list of tuple 
4 LOAD_FAST 0 ( n )					      	      mark [ edgeFrom [ i ] ] = 1			     of the list of tuples in the list of tuples		  
6 LOAD_CONST 2 ( 1 )					      	  count = 0						     of the list of tuples in the list of tuples		  
8 BINARY_ADD						      	  for i in range ( 1 , n + 1 ) :			     of tuples in the list of tuples in the list of tuples	  
10 BINARY_MULTIPLY					      	      if ( not mark [ i ] ) :				     tuples of tuples in tuples of tuples			  
12 STORE_FAST 4 ( mark )				      		  count += 1					     tuples of tuples tuples in tuples				  
							      	  return count						     tuples of tuples tuples in tuples of tuples tuples tuples	  
3 14 SETUP_LOOP 28 ( to 44 )				      								     tuples of tuples tuples.					  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 1 ( m )					      								     """							  
20 CALL_FUNCTION 1					      								    	for i in range ( n ) :					  
22 GET_ITER						      								    	    if i not in n :					  
>> 24 FOR_ITER 16 ( to 42 )				      								    		continue					  
26 STORE_FAST 5 ( i )					      								    	return n						  
							      								    								  
4 28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 4 ( mark )					      								    								  
32 LOAD_FAST 2 ( edgeFrom )				      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 STORE_SUBSCR						      								    								  
40 JUMP_ABSOLUTE 24					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_CONST 1 ( 0 )				      								    								  
46 STORE_FAST 6 ( count )				      								    								  
							      								    								  
6 48 SETUP_LOOP 38 ( to 88 )				      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 20 ( to 86 )				      								    								  
66 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 68 LOAD_FAST 4 ( mark )				      								    								  
70 LOAD_FAST 5 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 POP_JUMP_IF_TRUE 64					      								    								  
							      								    								  
8 76 LOAD_FAST 6 ( count )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 6 ( count )				      								    								  
84 JUMP_ABSOLUTE 64					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 6 ( count )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS	  GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS
--							      --							    --								  --
Disassembly of <code object generate at 0x7fbac<<unk>> de40,  def generate ( ones , zeroes , str , len1 ) :		    def generate ( fbfbacageageageage1 , zero1 , zero1 , zero1 ,  script_not_found : None
2 0 LOAD_FAST 3 ( len1 )				      	  if ( len1 == len ( str ) ) :				    								  
2 LOAD_GLOBAL 0 ( len )					      	      print ( str , end = " " )				    								  
4 LOAD_FAST 2 ( str )					      	      return						    								  
6 CALL_FUNCTION 1					      	  generate ( ones + 1 , zeroes , str + "1" , len1 )	    								  
8 COMPARE_OP 2 ( == )					      	  if ( ones > zeroes ) :				    								  
10 POP_JUMP_IF_FALSE 28					      	      generate ( ones , zeroes + 1 , str + "0" , len1 )	    								  
							      								    								  
3 12 LOAD_GLOBAL 1 ( print )				      								    								  
14 LOAD_FAST 2 ( str )					      								    								  
16 LOAD_CONST 1 ( ' ' )					      								    								  
18 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
20 CALL_FUNCTION_KW 2					      								    								  
22 POP_TOP						      								    								  
							      								    								  
4 24 LOAD_CONST 0 ( None )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
5 >> 28 LOAD_GLOBAL 2 ( generate )			      								    								  
30 LOAD_FAST 0 ( ones )					      								    								  
32 LOAD_CONST 3 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_FAST 1 ( zeroes )				      								    								  
38 LOAD_FAST 2 ( str )					      								    								  
40 LOAD_CONST 4 ( '1' )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 3 ( len1 )					      								    								  
46 CALL_FUNCTION 4					      								    								  
48 POP_TOP						      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( ones )				      								    								  
52 LOAD_FAST 1 ( zeroes )				      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
7 58 LOAD_GLOBAL 2 ( generate )				      								    								  
60 LOAD_FAST 0 ( ones )					      								    								  
62 LOAD_FAST 1 ( zeroes )				      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 2 ( str )					      								    								  
70 LOAD_CONST 5 ( '0' )					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_FAST 3 ( len1 )					      								    								  
76 CALL_FUNCTION 4					      								    								  
78 POP_TOP						      								    								  
>> 80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		      FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		    FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING		  FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING
--							      --							    --								  --
Disassembly of <code object findRepeatFirstN2 at 0x7fbac<<unk def findRepeatFirstN2 ( s ) :				    def findRepeatFirstN2 ( s ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( - 1 )				      	  p = - 1						    	p = s [ - 1 ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( p )					      	  for i in range ( len ( s ) ) :			    	p = s [ - 1 ]						  /eval_scripts/dis_sa-python_sa.test/FIND_REPEATED_
							      	      for j in range ( i + 1 , len ( s ) ) :		    	for p in s :						  CHARACTER_PRESENT_FIRST_STRING.py", line 52, in <m
3 4 SETUP_LOOP 80 ( to 86 )				      		  if ( s [ i ] == s [ j ] ) :			    	    p = s [ p : p ]					  odule>     if f_filled(*parameters_set) == f_gold(
6 LOAD_GLOBAL 0 ( range )				      		      p = i					    	return p						  *parameters_set):   File "/home/ubuntu/TransCoder/
8 LOAD_GLOBAL 1 ( len )					      		      break					    								  models/eval/bt/152w65bl69/eval_scripts/dis_sa-pyth
10 LOAD_FAST 0 ( s )					      	      if ( p != - 1 ) :					    								  on_sa.test/FIND_REPEATED_CHARACTER_PRESENT_FIRST_S
12 CALL_FUNCTION 1					      		  break						    								  TRING.py", line 33, in f_filled     p = s [ p : p
14 CALL_FUNCTION 1					      	  return p						    								  ] TypeError: slice indices must be integers or Non
16 GET_ITER						      								    								  e or have an __index__ method
>> 18 FOR_ITER 64 ( to 84 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 48 ( to 72 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_GLOBAL 1 ( len )				      								    								  
34 LOAD_FAST 0 ( s )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 26 ( to 70 )				      								    								  
44 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( s )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( s )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 62 LOAD_FAST 2 ( i )					      								    								  
64 STORE_FAST 1 ( p )					      								    								  
							      								    								  
7 66 BREAK_LOOP						      								    								  
68 JUMP_ABSOLUTE 42					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
8 >> 72 LOAD_FAST 1 ( p )				      								    								  
74 LOAD_CONST 1 ( - 1 )					      								    								  
76 COMPARE_OP 3 ( != )					      								    								  
78 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
9 80 BREAK_LOOP						      								    								  
82 JUMP_ABSOLUTE 18					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 1 ( p )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			      COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			    COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			  COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N
--							      --							    --								  --
Disassembly of <code object countOfBinaryNumberLessThanN at 0 def countOfBinaryNumberLessThanN ( N ) :			    def countOfBinaryNumberNumberNumberNumberNumberN ( N ) :	  script_not_found : None
2 0 LOAD_GLOBAL 0 ( deque )				      	  q = deque ( )						    	"""							  
2 CALL_FUNCTION 0					      	  q.append ( 1 )					     deque that are given a list of the values are given by	  
4 STORE_FAST 1 ( q )					      	  cnt = 0						     the values are given by the values of the values are given	  
							      	  while ( q ) :						     by the values are given by the values of the values are give 
3 6 LOAD_FAST 1 ( q )					      	      t = q.popleft ( )					     by the values are given as the values of values		  
8 LOAD_METHOD 1 ( append )				      	      if ( t <= N ) :					    								  
10 LOAD_CONST 1 ( 1 )					      		  cnt = cnt + 1					     """							  
12 CALL_METHOD 1					      		  q.append ( t * 10 )				    	return ( N - 1 )					  
14 POP_TOP						      		  q.append ( t * 10 + 1 )			    								  
							      	  return cnt						    								  
4 16 LOAD_CONST 2 ( 0 )					      								    								  
18 STORE_FAST 2 ( cnt )					      								    								  
							      								    								  
5 20 SETUP_LOOP 64 ( to 86 )				      								    								  
>> 22 LOAD_FAST 1 ( q )					      								    								  
24 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( q )					      								    								  
28 LOAD_METHOD 2 ( popleft )				      								    								  
30 CALL_METHOD 0					      								    								  
32 STORE_FAST 3 ( t )					      								    								  
							      								    								  
7 34 LOAD_FAST 3 ( t )					      								    								  
36 LOAD_FAST 0 ( N )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
8 42 LOAD_FAST 2 ( cnt )				      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 2 ( cnt )					      								    								  
							      								    								  
9 50 LOAD_FAST 1 ( q )					      								    								  
52 LOAD_METHOD 1 ( append )				      								    								  
54 LOAD_FAST 3 ( t )					      								    								  
56 LOAD_CONST 3 ( 10 )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 CALL_METHOD 1					      								    								  
62 POP_TOP						      								    								  
							      								    								  
10 64 LOAD_FAST 1 ( q )					      								    								  
66 LOAD_METHOD 1 ( append )				      								    								  
68 LOAD_FAST 3 ( t )					      								    								  
70 LOAD_CONST 3 ( 10 )					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_METHOD 1					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 22					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_FAST 2 ( cnt )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
Disassembly of <code object countSolutions at 0x7fbac0e8bc90, def countSolutions ( n ) :				    def countSolutions ( n , res , res , res , res , res , res ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = res [ res ]					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( res )					      	  x = 0							    	res = res [ res ]					  /COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INE
							      	  while ( x * x < n ) :					    	res = res [ res ]					  QUALITY_XX_YY_N_2.py", line 80     res res = res [
3 4 LOAD_CONST 1 ( 0 )					      	      y = 0						    	res = res [ res ]					   res ]	   ^ SyntaxError: invalid syntax
6 STORE_FAST 2 ( x )					      	      while ( x * x + y * y < n ) :			    	res = res [ res ]					  
							      		  res = res + 1					    	res = res [ res ]					  
4 8 SETUP_LOOP 70 ( to 80 )				      		  y = y + 1					    	res = res [ res ]					  
>> 10 LOAD_FAST 2 ( x )					      	      x = x + 1						    	res = res [ res ]					  
12 LOAD_FAST 2 ( x )					      	  return res						    	res = res [ res ]					  
14 BINARY_MULTIPLY					      								    	res = res [ res ]					  
16 LOAD_FAST 0 ( n )					      								    	res = res [ res ]					  
18 COMPARE_OP 0 ( < )					      								    	res = res [ res ]					  
20 POP_JUMP_IF_FALSE 78					      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
5 22 LOAD_CONST 1 ( 0 )					      								    	res = res [ res ]					  
24 STORE_FAST 3 ( y )					      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
6 26 SETUP_LOOP 40 ( to 68 )				      								    	res = res [ res ]					  
>> 28 LOAD_FAST 2 ( x )					      								    	res = res [ res ]					  
30 LOAD_FAST 2 ( x )					      								    	res = res [ res ]					  
32 BINARY_MULTIPLY					      								    	res = res [ res ]					  
34 LOAD_FAST 3 ( y )					      								    	res = res [ res ]					  
36 LOAD_FAST 3 ( y )					      								    	res = res [ res ]					  
38 BINARY_MULTIPLY					      								    	res = res [ res ]					  
40 BINARY_ADD						      								    	res = res [ res ]					  
42 LOAD_FAST 0 ( n )					      								    	res = res [ res ]					  
44 COMPARE_OP 0 ( < )					      								    	res = res [ res ]					  
46 POP_JUMP_IF_FALSE 66					      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
7 48 LOAD_FAST 1 ( res )				      								    	res = res [ res ]					  
50 LOAD_CONST 2 ( 1 )					      								    	res = res [ res ]					  
52 BINARY_ADD						      								    	res = res [ res ]					  
54 STORE_FAST 1 ( res )					      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
8 56 LOAD_FAST 3 ( y )					      								    	res = res [ res ]					  
58 LOAD_CONST 2 ( 1 )					      								    	res = res [ res ]					  
60 BINARY_ADD						      								    	res = res [ res ]					  
62 STORE_FAST 3 ( y )					      								    	res = res [ res ]					  
64 JUMP_ABSOLUTE 28					      								    	res = res [ res ]					  
>> 66 POP_BLOCK						      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
9 >> 68 LOAD_FAST 2 ( x )				      								    	res = res [ res ]					  
70 LOAD_CONST 2 ( 1 )					      								    	res = res [ res ]					  
72 BINARY_ADD						      								    	res = res [ res ]					  
74 STORE_FAST 2 ( x )					      								    	res = res [ res ]					  
76 JUMP_ABSOLUTE 10					      								    	res = res [ res ]					  
>> 78 POP_BLOCK						      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
10 >> 80 LOAD_FAST 1 ( res )				      								    	res = res [ res ]					  
82 RETURN_VALUE NEW_LINE				      								    	res = res [ res ]					  
							      								    	res res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res res = res res [ res ]				  
							      								    	res = res res [ res ]					  
							      								    	res res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res = res [ res ]					  
							      								    	res res [ res ]						  
							      								    	res = res [ res ]					  
							      								    	res [ res ] = res [ res ]				  
							      								    	res = res [ res ]					  
-							      -								    	res res [ res ] =-					  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7fbac0e8bc90,  def printDistinct ( arr , n ) :				    def printDistinct ( arr , n ) :				  script_not_found : None
2 0 SETUP_LOOP 84 ( to 86 )				      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      d = 0						    	    if i < 0 :						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , i ) :			    		return i					  
6 LOAD_FAST 1 ( n )					      		  if ( arr [ i ] == arr [ j ] ) :		    								  
8 CALL_FUNCTION 2					      		      d = 1					    								  
10 GET_ITER						      		      break					    								  
>> 12 FOR_ITER 70 ( to 84 )				      	      if ( d == 0 ) :					    								  
14 STORE_FAST 2 ( i )					      		  print ( arr [ i ] )				    								  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( d )					      								    								  
							      								    								  
4 20 SETUP_LOOP 40 ( to 62 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 26 ( to 60 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_CONST 2 ( 1 )					      								    								  
54 STORE_FAST 3 ( d )					      								    								  
							      								    								  
7 56 BREAK_LOOP						      								    								  
58 JUMP_ABSOLUTE 32					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
8 >> 62 LOAD_FAST 3 ( d )				      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
9 70 LOAD_GLOBAL 1 ( print )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 POP_TOP						      								    								  
82 JUMP_ABSOLUTE 12					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 LOAD_CONST 0 ( None )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR				      FIND_MINIMUM_DIFFERENCE_PAIR				    FIND_MINIMUM_DIFFERENCE_PAIR				  FIND_MINIMUM_DIFFERENCE_PAIR
--							      --							    --								  --
Disassembly of <code object findMinDiff at 0x7fbac<<unk>> de4 def findMinDiff ( arr , n ) :				    def findMinDiff ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 100000000000000000000 )		      	  diff = 10 ** 20					    	n = 100000000						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( diff )					      	  for i in range ( n - 1 ) :				    	n = n * n						  /FIND_MINIMUM_DIFFERENCE_PAIR.py", line 26	 def
							      	      for j in range ( i + 1 , n ) :			    	while n < n :						   f_filled ( arr , n , n ) :	  ^ SyntaxError: dup
3 4 SETUP_LOOP 88 ( to 94 )				      		  if abs ( arr [ i ] - arr [ j ] ) < diff :	    	    n = n * n						  licate argument 'n' in function definition
6 LOAD_GLOBAL 0 ( range )				      		      diff = abs ( arr [ i ] - arr [ j ] )	    	return n						  
8 LOAD_FAST 1 ( n )					      	  return diff						    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 72 ( to 92 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 66 ( to 90 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 48 ( to 88 )				      								    								  
40 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 42 LOAD_GLOBAL 1 ( abs )				      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_FAST 2 ( diff )					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 66 LOAD_GLOBAL 1 ( abs )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 4 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 STORE_FAST 2 ( diff )				      								    								  
86 JUMP_ABSOLUTE 38					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 JUMP_ABSOLUTE 18					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
7 >> 94 LOAD_FAST 2 ( diff )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C
--							      --							    --								  --
Disassembly of <code object fitOrNotFit at 0x7fbac<<unk>> de4 def fitOrNotFit ( R , r , x , y , rad ) :			    def fitOrNotFit ( R , r , r , r , K ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) 	math.pow ( R )						  
2 LOAD_METHOD 1 ( sqrt )				      	  if ( val + rad <= R and val - rad >= R - r ) :	    	R = math.pow ( R )					  
4 LOAD_GLOBAL 0 ( math )				      	      print ( "Fits\n" )				    	R = math.pow ( R )					  
6 LOAD_METHOD 2 ( pow )					      	  else :						    	R = R * R						  
8 LOAD_FAST 2 ( x )					      	      print ( "Doesn't Fit" )				    	R = R * R						  
10 LOAD_CONST 1 ( 2 )					      								    	R = R * R						  
12 CALL_METHOD 2					      								    	R = R * R						  
14 LOAD_GLOBAL 0 ( math )				      								    	R = R * R						  
16 LOAD_METHOD 2 ( pow )				      								    	R = R * R						  
18 LOAD_FAST 3 ( y )					      								    	R = R * R						  
20 LOAD_CONST 1 ( 2 )					      								    	R = R * R						  
22 CALL_METHOD 2					      								    	R = R * R						  
24 BINARY_ADD						      								    	R = R * R						  
26 CALL_METHOD 1					      								    	R = R * R						  
28 STORE_FAST 5 ( val )					      								    	R = R * R						  
							      								    	R = R * R						  
3 30 LOAD_FAST 5 ( val )				      								    	R = R * R						  
32 LOAD_FAST 4 ( rad )					      								    	R = R * R						  
34 BINARY_ADD						      								    	R = R * R						  
36 LOAD_FAST 0 ( R )					      								    	R = R * R						  
38 COMPARE_OP 1 ( <= )					      								    	R = R * R						  
40 POP_JUMP_IF_FALSE 68					      								    	R = R * R						  
42 LOAD_FAST 5 ( val )					      								    	R = R * R						  
44 LOAD_FAST 4 ( rad )					      								    	R = R * R						  
46 BINARY_SUBTRACT					      								    	R = R * R * R						  
48 LOAD_FAST 0 ( R )					      								    	R = R * R						  
50 LOAD_FAST 1 ( r )					      								    	R = R * R						  
52 BINARY_SUBTRACT					      								    	R = R * R						  
54 COMPARE_OP 5 ( >= )					      								    	R = R * R						  
56 POP_JUMP_IF_FALSE 68					      								    	R = R * R						  
							      								    	R = R * R						  
4 58 LOAD_GLOBAL 3 ( print )				      								    	R = R * R						  
60 LOAD_CONST 2 ( 'Fits\n' )				      								    	R = R * R						  
62 CALL_FUNCTION 1					      								    	R = R * R						  
64 POP_TOP						      								    	R = R * R						  
66 JUMP_FORWARD 8 ( to 76 )				      								    	R = R * R						  
							      								    	R = R * R						  
6 >> 68 LOAD_GLOBAL 3 ( print )				      								    	R = R * R						  
70 LOAD_CONST 3 ( "Doesn't Fit" )			      								    	R = R * R						  
72 CALL_FUNCTION 1					      								    	R = R * R						  
74 POP_TOP						      								    	R = R * R						  
>> 76 LOAD_CONST 0 ( None )				      								    	R = R * R						  
78 RETURN_VALUE NEW_LINE				      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R * R						  
							      								    	R = R * R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R = R * R * R						  
							      								    	R = R * R * R						  
							      								    	R = R * R						  
							      								    	R = R * R						  
							      								    	R R = R * R						  
							      								    	R R = R * R						  
							      								    	R = R * R						  
							      								    	R R = R * R						  
							      								    	R R = R * R						  
							      								    	R R R * R						  
							      								    	R = R * R						  
							      								    	R R R * R						  
							      								    	R R R * R						  
							      								    	R = R * R						  
							      								    	R R R * R						  
							      								    	R = R * R * R						  
							      								    	R = R * R						  
							      								    	R R R R * R						  
							      								    	R R = R * R						  
							      								    	R R R * R						  
							      								    	R R = R * R						  
							      								    	R R = R * R						  
							      								    	R R R R * R						  
-							      -								    	R-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS			      COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS			    COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS				  COUNT_SUBSETS_DISTINCT_EVEN_NUMBERS
--							      --							    --								  --
Disassembly of <code object countSubSets at 0x7fbac<<unk>> dd def countSubSets ( arr , n ) :				    def countSubSets ( arr , n , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  us = set ( )						    	"""							  
2 CALL_FUNCTION 0					      	  even_count = 0					     Returns set of the us us in the given array of the range of  
4 STORE_FAST 2 ( us )					      	  for i in range ( n ) :				     """							  
							      	      if arr [ i ] % 2 == 0 :				    	for i in range ( n ) :					  
3 6 LOAD_CONST 1 ( 0 )					      		  us.add ( arr [ i ] )				    	    if n < n :						  
8 STORE_FAST 3 ( even_count )				      	  for i in us :						    		return i					  
							      	      even_count += 1					    	return None						  
4 10 SETUP_LOOP 46 ( to 58 )				      	  return pow ( 2 , even_count ) - 1			    								  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 34 ( to 56 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( 2 )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 40 LOAD_FAST 2 ( us )					      								    								  
42 LOAD_METHOD 2 ( add )				      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_METHOD 1					      								    								  
52 POP_TOP						      								    								  
54 JUMP_ABSOLUTE 20					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 SETUP_LOOP 20 ( to 80 )				      								    								  
60 LOAD_FAST 2 ( us )					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 12 ( to 78 )				      								    								  
66 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 68 LOAD_FAST 3 ( even_count )				      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 3 ( even_count )				      								    								  
76 JUMP_ABSOLUTE 64					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_GLOBAL 3 ( pow )				      								    								  
82 LOAD_CONST 2 ( 2 )					      								    								  
84 LOAD_FAST 3 ( even_count )				      								    								  
86 CALL_FUNCTION 2					      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
Disassembly of <code object countNegative at 0x7fbac<<unk>> d def countNegative ( M , n , m ) :				    def countNegative ( fbfbacactntn1 , count = 1 ) :		  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 3 ( count )				      	  i = 0							    	count = 0						  /eval_scripts/dis_sa-python_sa.test/COUNT_NEGATIVE
							      	  j = m - 1						    	count = 0						  _NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRIX_1
3 4 LOAD_CONST 1 ( 0 )					      	  while j >= 0 and i < n :				    	count = 0						  .py", line 173, in <module>	  if f_filled(*param
6 STORE_FAST 4 ( i )					      	      if M [ i ] [ j ] < 0 :				    	count = 1						  eters_set) == f_gold(*parameters_set): TypeError:
							      		  count += ( j + 1 )				    	count = 0						  f_filled() takes from 1 to 2 positional arguments
4 8 LOAD_FAST 2 ( m )					      		  i += 1					    	count = 0						  but 3 were given
10 LOAD_CONST 2 ( 1 )					      	      else :						    	count = 1						  
12 BINARY_SUBTRACT					      		  j -= 1					    	count = count						  
14 STORE_FAST 5 ( j )					      	  return count						    	count += 1						  
							      								    	count += 1						  
5 16 SETUP_LOOP 66 ( to 84 )				      								    	count += 1						  
>> 18 LOAD_FAST 5 ( j )					      								    	count += 1						  
20 LOAD_CONST 1 ( 0 )					      								    	count += 1						  
22 COMPARE_OP 5 ( >= )					      								    	count += 1						  
24 POP_JUMP_IF_FALSE 82					      								    	count += 1						  
26 LOAD_FAST 4 ( i )					      								    	count += 1						  
28 LOAD_FAST 1 ( n )					      								    	count += 1						  
30 COMPARE_OP 0 ( < )					      								    	count += 1						  
32 POP_JUMP_IF_FALSE 82					      								    	count += 1						  
							      								    	count += 1						  
6 34 LOAD_FAST 0 ( M )					      								    	count += 1						  
36 LOAD_FAST 4 ( i )					      								    	count += 1						  
38 BINARY_SUBSCR					      								    	count += 1						  
40 LOAD_FAST 5 ( j )					      								    	count += 1						  
42 BINARY_SUBSCR					      								    	count += 1						  
44 LOAD_CONST 1 ( 0 )					      								    	count += 1						  
46 COMPARE_OP 0 ( < )					      								    	count += 1						  
48 POP_JUMP_IF_FALSE 72					      								    	count += 1						  
							      								    	count += 1						  
7 50 LOAD_FAST 3 ( count )				      								    	count += 1						  
52 LOAD_FAST 5 ( j )					      								    	count += 1						  
54 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
56 BINARY_ADD						      								    	count += 1						  
58 INPLACE_ADD						      								    	count += 1						  
60 STORE_FAST 3 ( count )				      								    	count += 1						  
							      								    	count += 1						  
8 62 LOAD_FAST 4 ( i )					      								    	count += 1						  
64 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
66 INPLACE_ADD						      								    	count += 1						  
68 STORE_FAST 4 ( i )					      								    	count += 1						  
70 JUMP_ABSOLUTE 18					      								    	count += 1						  
							      								    	count += 1						  
10 >> 72 LOAD_FAST 5 ( j )				      								    	count += 1						  
74 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
76 INPLACE_SUBTRACT					      								    	count += 1						  
78 STORE_FAST 5 ( j )					      								    	count += 1						  
80 JUMP_ABSOLUTE 18					      								    	count += 1						  
>> 82 POP_BLOCK						      								    	count += 1						  
							      								    	count += 1						  
11 >> 84 LOAD_FAST 3 ( count )				      								    	count += 1						  
86 RETURN_VALUE NEW_LINE				      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
-							      -								    	count += 1-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION     MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	    MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	  MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION
--							      --							    --								  --
Disassembly of <code object maxSubArraySumRepeated at 0x7fbac def maxSubArraySumRepeated ( a , n , k ) :		    def maxSubArraySumRepeRepeated ( numnumnumnumnum_reads , numn error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 2147483648 )			      	  max_so_far = - 2147483648				    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( max_so_far )				      	  max_ending_here = 0					    								  /MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCA
							      	  for i in range ( n * k ) :				    								  TENATION.py", line 31	    if __name__ == '__main__
3 4 LOAD_CONST 2 ( 0 )					      	      max_ending_here = max_ending_here + a [ i % n ]	    								  ':	  ^ SyntaxError: invalid syntax
6 STORE_FAST 4 ( max_ending_here )			      	      if ( max_so_far < max_ending_here ) :		    								  
							      		  max_so_far = max_ending_here			    								  
4 8 SETUP_LOOP 60 ( to 70 )				      	      if ( max_ending_here < 0 ) :			    								  
10 LOAD_GLOBAL 0 ( range )				      		  max_ending_here = 0				    								  
12 LOAD_FAST 1 ( n )					      	  return max_so_far					    								  
14 LOAD_FAST 2 ( k )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 44 ( to 68 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 4 ( max_ending_here )			      								    								  
28 LOAD_FAST 0 ( a )					      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 BINARY_MODULO					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 4 ( max_ending_here )			      								    								  
							      								    								  
6 42 LOAD_FAST 3 ( max_so_far )				      								    								  
44 LOAD_FAST 4 ( max_ending_here )			      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 50 LOAD_FAST 4 ( max_ending_here )			      								    								  
52 STORE_FAST 3 ( max_so_far )				      								    								  
							      								    								  
8 >> 54 LOAD_FAST 4 ( max_ending_here )			      								    								  
56 LOAD_CONST 2 ( 0 )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
9 62 LOAD_CONST 2 ( 0 )					      								    								  
64 STORE_FAST 4 ( max_ending_here )			      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_FAST 3 ( max_so_far )			      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
Disassembly of <code object CountSquares at 0x7fbac0e8bc90, f def CountSquares ( a , b ) :				    def CountSquares ( a , b , cnt ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  cnt = 0						    	"""							  
2 STORE_FAST 2 ( cnt )					      	  for i in range ( a , b + 1 ) :			     Return the given cnt of the cnt and returns the cnt of cnt a 
							      	      j = 1 ;						     returned by the cnt of cnt are given cnt.			  
3 4 SETUP_LOOP 80 ( to 86 )				      	      while j * j <= i :				     """							  
6 LOAD_GLOBAL 0 ( range )				      		  if j * j == i :				    	for i in range ( cnt ) :				  
8 LOAD_FAST 0 ( a )					      		      cnt = cnt + 1				    	    cnt = i						  
10 LOAD_FAST 1 ( b )					      		  j = j + 1					    	return np.sum ( a , b )					  
12 LOAD_CONST 2 ( 1 )					      	      i = i + 1						    								  
14 BINARY_ADD						      	  return cnt						    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 62 ( to 84 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 28 SETUP_LOOP 44 ( to 74 )				      								    								  
>> 30 LOAD_FAST 4 ( j )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 COMPARE_OP 1 ( <= )					      								    								  
40 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 42 LOAD_FAST 4 ( j )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( cnt )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 2 ( cnt )					      								    								  
							      								    								  
8 >> 62 LOAD_FAST 4 ( j )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 STORE_FAST 4 ( j )					      								    								  
70 JUMP_ABSOLUTE 30					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 3 ( i )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 3 ( i )					      								    								  
82 JUMP_ABSOLUTE 20					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 2 ( cnt )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT     DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	    DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT
--							      --							    --								  --
Disassembly of <code object maxProd at 0x7fbac0e8bc90, file " def maxProd ( n ) :					    def maxProd ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  max_val = 0						    	return 0						  
6 POP_JUMP_IF_TRUE 16					      	  for i in range ( 1 , n - 1 ) :			    								  
8 LOAD_FAST 0 ( n )					      	      max_val = max ( max_val , max ( i * ( n - i ) , maxPr 								  
10 LOAD_CONST 2 ( 1 )					      	  return max_val ;					    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 1 ( 0 )				      								    								  
22 STORE_FAST 1 ( max_val )				      								    								  
							      								    								  
5 24 SETUP_LOOP 58 ( to 84 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 40 ( to 82 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 1 ( max )				      								    								  
46 LOAD_FAST 1 ( max_val )				      								    								  
48 LOAD_GLOBAL 1 ( max )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_GLOBAL 2 ( maxProd )				      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 CALL_FUNCTION 2					      								    								  
78 STORE_FAST 1 ( max_val )				      								    								  
80 JUMP_ABSOLUTE 40					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
7 >> 84 LOAD_FAST 1 ( max_val )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac<<unk>> d540 def countPairs ( arr1 , arr2 , m , n , x ) :		    def countPairs ( arr1 , count = 1 ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 5 ( count )				      	  us = set ( )						     Return a array of the array of the array of the array of the /eval_scripts/dis_sa-python_sa.test/COUNT_PAIRS_TW
							      	  for i in range ( m ) :				     array of the array of the array of the array of		  O_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1.py
3 4 LOAD_GLOBAL 0 ( set )				      	      us.add ( arr1 [ i ] )				     the array of the array of the array of the array of the arra ", line 62, in <module>     if f_filled(*parameter
6 CALL_FUNCTION 0					      	  for j in range ( n ) :				     of the array of the array of the array of the		  s_set) == f_gold(*parameters_set): TypeError: f_fi
8 STORE_FAST 6 ( us )					      	      if x - arr2 [ j ] in us :				     array of the array of the array of the array of the array of lled() takes from 1 to 2 positional arguments but
							      		  count += 1					     array of the array of the array of the array of the array of 5 were given
4 10 SETUP_LOOP 30 ( to 42 )				      	  return count						     the array of the array of the array of the array of the arra 
12 LOAD_GLOBAL 1 ( range )				      								     the array of the array of the array of the			  
14 LOAD_FAST 2 ( m )					      								     array of the array of the array of the array of the array of 
16 CALL_FUNCTION 1					      								     of the array of the array of the array of the array	  
18 GET_ITER						      								     of the array of the array of the array of the array of the a 
>> 20 FOR_ITER 18 ( to 40 )				      								     of the array of the array of the array			  
22 STORE_FAST 7 ( i )					      								     of the array of the array of the array of the array of the a 
							      								     """							  
5 24 LOAD_FAST 6 ( us )					      								    	return set ( )						  
26 LOAD_METHOD 2 ( add )				      								    								  
28 LOAD_FAST 0 ( arr1 )					      								    								  
30 LOAD_FAST 7 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
38 JUMP_ABSOLUTE 20					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
6 >> 42 SETUP_LOOP 40 ( to 84 )				      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 3 ( n )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 28 ( to 82 )				      								    								  
54 STORE_FAST 8 ( j )					      								    								  
							      								    								  
7 56 LOAD_FAST 4 ( x )					      								    								  
58 LOAD_FAST 1 ( arr2 )					      								    								  
60 LOAD_FAST 8 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_FAST 6 ( us )					      								    								  
68 COMPARE_OP 6 ( in )					      								    								  
70 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
8 72 LOAD_FAST 5 ( count )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 5 ( count )				      								    								  
80 JUMP_ABSOLUTE 52					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
9 >> 84 LOAD_FAST 5 ( count )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE	  CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE
--							      --							    --								  --
Disassembly of <code object printSequence at 0x7fbac<<unk>> d def printSequence ( arr , input ) :			    def printSequence ( fbfbacac// // // // // // // // // // //  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( input )					    								  
2 LOAD_FAST 1 ( input )					      	  output = ""						    								  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    								  
6 STORE_FAST 2 ( n )					      	      if ( input [ i ] == ' ' ) :			    								  
							      		  output = output + "0"				    								  
3 8 LOAD_CONST 1 ( '' )					      	      else :						    								  
10 STORE_FAST 3 ( output )				      		  position = ord ( input [ i ] ) - ord ( 'A' )	    								  
							      		  output = output + arr [ position ]		    								  
4 12 SETUP_LOOP 70 ( to 84 )				      	  return output						    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 58 ( to 82 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 1 ( input )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( ' ' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 38 LOAD_FAST 3 ( output )				      								    								  
40 LOAD_CONST 3 ( '0' )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 3 ( output )				      								    								  
46 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
8 >> 48 LOAD_GLOBAL 2 ( ord )				      								    								  
50 LOAD_FAST 1 ( input )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_GLOBAL 2 ( ord )				      								    								  
60 LOAD_CONST 4 ( 'A' )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 STORE_FAST 5 ( position )				      								    								  
							      								    								  
9 68 LOAD_FAST 3 ( output )				      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 5 ( position )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 3 ( output )				      								    								  
80 JUMP_ABSOLUTE 22					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 3 ( output )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1   REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1   REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1	  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE_1
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7fbac<<unk>> d540, def rearrange ( arr , n ) :				    def rearrange ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  max_ele = arr [ n - 1 ]				    	if n < n :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( n )					      	  min_ele = arr [ 0 ]					    	    return 0						  /REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXT
4 LOAD_CONST 1 ( 1 )					      	  for i in range ( n ) :				    	if n < n :						  RA_SPACE_1.py", line 29     def f_filled ( arr , n
6 BINARY_SUBTRACT					      	      if i % 2 == 0 :					    	    return 0						   , n ) :     ^ SyntaxError: duplicate argument 'n'
8 BINARY_SUBSCR						      		  arr [ i ] = max_ele				    	else :							   in function definition
10 STORE_FAST 2 ( max_ele )				      		  max_ele -= 1					    	    return 0						  
							      	      else :						    								  
3 12 LOAD_FAST 0 ( arr )				      		  arr [ i ] = min_ele				    								  
14 LOAD_CONST 2 ( 0 )					      		  min_ele += 1					    								  
16 BINARY_SUBSCR					      								    								  
18 STORE_FAST 3 ( min_ele )				      								    								  
							      								    								  
4 20 SETUP_LOOP 62 ( to 84 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 50 ( to 82 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 4 ( i )					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_MODULO					      								    								  
40 LOAD_CONST 2 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
6 46 LOAD_FAST 2 ( max_ele )				      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( max_ele )				      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 INPLACE_SUBTRACT					      								    								  
60 STORE_FAST 2 ( max_ele )				      								    								  
62 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
9 >> 64 LOAD_FAST 3 ( min_ele )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
10 72 LOAD_FAST 3 ( min_ele )				      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 3 ( min_ele )				      								    								  
80 JUMP_ABSOLUTE 30					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
Disassembly of <code object countIntegralSolutions at 0x7fbac def countIntegralSolutions ( n ) :			    def countIntegralSolSolSolSolSolSolSolSolSolSolSolSolSolSolSo error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( result )				      	  for i in range ( n + 1 ) :				    								  /NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N.py",
							      	      for j in range ( n + 1 ) :			    								   line 27     def f_filled		   ^ SyntaxE
3 4 SETUP_LOOP 88 ( to 94 )				      		  for k in range ( n + 1 ) :			    								  rror: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      		      if i + j + k == n :			    								  
8 LOAD_FAST 0 ( n )					      			  result += 1				    								  
10 LOAD_CONST 2 ( 1 )					      	  return result						    								  
12 BINARY_ADD						      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 72 ( to 92 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 66 ( to 90 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 50 ( to 88 )				      								    								  
38 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 40 SETUP_LOOP 44 ( to 86 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 28 ( to 84 )				      								    								  
56 STORE_FAST 4 ( k )					      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 BINARY_ADD						      								    								  
64 LOAD_FAST 4 ( k )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 0 ( n )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 74 LOAD_FAST 1 ( result )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 1 ( result )				      								    								  
82 JUMP_ABSOLUTE 54					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 JUMP_ABSOLUTE 36					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 JUMP_ABSOLUTE 18					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
8 >> 94 LOAD_FAST 1 ( result )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN EFFICIENTLY_FIND_FIRST_REPEATED_CHARACTER_STRING_WITHOUT_USIN
--							      --							    --								  --
Disassembly of <code object FirstRepeated at 0x7fbac0e89d20,  def FirstRepeated ( string ) :				    def FirstRepeated ( string ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  checker = 0						    	"""							  
2 STORE_FAST 1 ( checker )				      	  pos = 0						     Return True if the string is a string in the string and retu 
							      	  for i in string :					     the string to be converted to the string and return a string 
3 4 LOAD_CONST 1 ( 0 )					      	      val = ord ( i ) - ord ( 'a' ) ;			     string in the string and return a string to a string and ret 
6 STORE_FAST 2 ( pos )					      	      if ( ( checker & ( 1 << val ) ) > 0 ) :		     string representing the string string to a string to the str 
							      		  return pos					     string to a string string.					  
4 8 SETUP_LOOP 68 ( to 78 )				      	      checker |= ( 1 << val )				    								  
10 LOAD_FAST 0 ( string )				      	      pos += 1						     """							  
12 GET_ITER						      	  return - 1						    	return string.replace ( '' , '' )			  
>> 14 FOR_ITER 60 ( to 76 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 18 LOAD_GLOBAL 0 ( ord )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 LOAD_GLOBAL 0 ( ord )				      								    								  
26 LOAD_CONST 2 ( 'a' )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 STORE_FAST 4 ( val )					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( checker )				      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 LOAD_FAST 4 ( val )					      								    								  
40 BINARY_LSHIFT					      								    								  
42 BINARY_AND						      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( pos )				      								    								  
52 RETURN_VALUE						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 1 ( checker )				      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 LOAD_FAST 4 ( val )					      								    								  
60 BINARY_LSHIFT					      								    								  
62 INPLACE_OR						      								    								  
64 STORE_FAST 1 ( checker )				      								    								  
							      								    								  
9 66 LOAD_FAST 2 ( pos )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( pos )					      								    								  
74 JUMP_ABSOLUTE 14					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
10 >> 78 LOAD_CONST 4 ( - 1 )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION		      DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			    DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			  DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION
--							      --							    --								  --
Disassembly of <code object distributingBalls at 0x7fbac0e8bc def distributingBalls ( k , n , string ) :		    def distributingBalls ( * fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbf script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * MAX_CHAR					    								  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    								  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      a [ ord ( string [ i ] ) - ord ( 'a' ) ] += 1	    								  
6 BINARY_MULTIPLY					      	  for i in range ( MAX_CHAR ) :				    								  
8 STORE_FAST 3 ( a )					      	      if ( a [ i ] > k ) :				    								  
							      		  return False					    								  
3 10 SETUP_LOOP 48 ( to 60 )				      	  return True						    								  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 36 ( to 58 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( a )					      								    								  
26 LOAD_GLOBAL 2 ( ord )				      								    								  
28 LOAD_FAST 2 ( string )				      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 LOAD_GLOBAL 2 ( ord )				      								    								  
38 LOAD_CONST 2 ( 'a' )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 20					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
5 >> 60 SETUP_LOOP 32 ( to 94 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
66 CALL_FUNCTION 1					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 20 ( to 92 )				      								    								  
72 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 74 LOAD_FAST 3 ( a )					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( k )					      								    								  
82 COMPARE_OP 4 ( > )					      								    								  
84 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 86 LOAD_CONST 4 ( False )				      								    								  
88 RETURN_VALUE						      								    								  
90 JUMP_ABSOLUTE 70					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
8 >> 94 LOAD_CONST 5 ( True )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	      MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	    MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME	  MAXIMUM_DIFFERENCE_ZEROS_ONES_BINARY_STRING_SET_2_TIME
--							      --							    --								  --
Disassembly of <code object findLength at 0x7fbac<<unk>> de40 def findLength ( string , n ) :				    def findLength ( string ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  current_sum = 0					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 2 ( current_sum )				      	  max_sum = 0						    								  
							      	  for i in range ( n ) :				    								  
3 4 LOAD_CONST 1 ( 0 )					      	      current_sum += ( 1 if string [ i ] == '0' else - 1 )  								  
6 STORE_FAST 3 ( max_sum )				      	      if current_sum < 0 :				    								  
							      		  current_sum = 0				    								  
4 8 SETUP_LOOP 62 ( to 72 )				      	      max_sum = max ( current_sum , max_sum )		    								  
10 LOAD_GLOBAL 0 ( range )				      	  return max_sum if max_sum else 0			    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 50 ( to 70 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( current_sum )			      								    								  
24 LOAD_FAST 0 ( string )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( '0' )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 JUMP_FORWARD 2 ( to 42 )				      								    								  
>> 40 LOAD_CONST 4 ( - 1 )				      								    								  
>> 42 INPLACE_ADD					      								    								  
44 STORE_FAST 2 ( current_sum )				      								    								  
							      								    								  
6 46 LOAD_FAST 2 ( current_sum )			      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 54 LOAD_CONST 1 ( 0 )					      								    								  
56 STORE_FAST 2 ( current_sum )				      								    								  
							      								    								  
8 >> 58 LOAD_GLOBAL 1 ( max )				      								    								  
60 LOAD_FAST 2 ( current_sum )				      								    								  
62 LOAD_FAST 3 ( max_sum )				      								    								  
64 CALL_FUNCTION 2					      								    								  
66 STORE_FAST 3 ( max_sum )				      								    								  
68 JUMP_ABSOLUTE 18					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
9 >> 72 LOAD_FAST 3 ( max_sum )				      								    								  
74 POP_JUMP_IF_FALSE 80					      								    								  
76 LOAD_FAST 3 ( max_sum )				      								    								  
78 RETURN_VALUE						      								    								  
>> 80 LOAD_CONST 1 ( 0 )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_3				      FIND_REPETITIVE_ELEMENT_1_N_1_3				    FIND_REPETITIVE_ELEMENT_1_N_1_3				  FIND_REPETITIVE_ELEMENT_1_N_1_3
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7fbac<<unk>> d def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  missingElement = 0					    	"""							  
2 STORE_FAST 2 ( missingElement )			      	  for i in range ( 0 , n ) :				     Return the array of the values in the range of the values of 
							      	      element = arr [ abs ( arr [ i ] ) ]		     the values are returned.					  
3 4 SETUP_LOOP 82 ( to 88 )				      	      if ( element < 0 ) :				    								  
6 LOAD_GLOBAL 0 ( range )				      		  missingElement = arr [ i ]			     Parameters							  
8 LOAD_CONST 1 ( 0 )					      		  break						     -----							  
10 LOAD_FAST 1 ( n )					      	      arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] )  arr : ndarray						  
12 CALL_FUNCTION 2					      	  return abs ( missingElement )				     Output array of the values to be greater than greater.	  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 68 ( to 86 )				      								     Returns							  
18 STORE_FAST 3 ( i )					      								     -----							  
							      								     arr : ndarray						  
4 20 LOAD_FAST 0 ( arr )				      								     Output array of the values to be greater.			  
22 LOAD_GLOBAL 1 ( abs )				      								    								  
24 LOAD_FAST 0 ( arr )					      								     Returns							  
26 LOAD_FAST 3 ( i )					      								     -----							  
28 BINARY_SUBSCR					      								     out : ndarray						  
30 CALL_FUNCTION 1					      								     Output array of the values to be greater.			  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 4 ( element )				      								     """							  
							      								    	return np.array ( arr ).astype ( n ).astype ( n )	  
5 36 LOAD_FAST 4 ( element )				      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 STORE_FAST 2 ( missingElement )			      								    								  
							      								    								  
7 52 BREAK_LOOP						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_GLOBAL 1 ( abs )				      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 BINARY_SUBSCR					      								    								  
68 UNARY_NEGATIVE					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_GLOBAL 1 ( abs )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_SUBSCR						      								    								  
84 JUMP_ABSOLUTE 16					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_GLOBAL 1 ( abs )				      								    								  
90 LOAD_FAST 2 ( missingElement )			      								    								  
92 CALL_FUNCTION 1					      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS		      COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS		    COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS			  COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS
--							      --							    --								  --
Disassembly of <code object countWays at 0x7fbac0e89d20, file def countWays ( N ) :					    def countWays ( N ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( N )					      	  if ( N == 1 ) :					    	if N < 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 1 )					      	      return 4						    	    return 1						  /COUNT_POSSIBLE_WAYS_TO_CONSTRUCT_BUILDINGS.py", l
4 COMPARE_OP 2 ( == )					      	  countB = 1						    	if N < 0 :						  ine 124     if __name__ == '__main__':     ^ Inden
6 POP_JUMP_IF_FALSE 12					      	  countS = 1						    	    return 1						  tationError: expected an indented block
							      	  for i in range ( 2 , N + 1 ) :			    	elif N < 0 :						  
3 8 LOAD_CONST 2 ( 4 )					      	      prev_countB = countB				    	    return 1						  
10 RETURN_VALUE						      	      prev_countS = countS				    	elif N < 0 :						  
							      	      countS = prev_countB + prev_countS		    	    return 1						  
4 >> 12 LOAD_CONST 1 ( 1 )				      	      countB = prev_countS				    	elif N < 0 :						  
14 STORE_FAST 1 ( countB )				      	  result = countS + countB				    	    return 1						  
							      	  return ( result * result )				    	elif N < 0 :						  
5 16 LOAD_CONST 1 ( 1 )					      								    	    return 1						  
18 STORE_FAST 2 ( countS )				      								    	elif N < 0 :						  
							      								    	    return 1						  
6 20 SETUP_LOOP 42 ( to 64 )				      								    	elif N < 0 :						  
22 LOAD_GLOBAL 0 ( range )				      								    	    return 1						  
24 LOAD_CONST 3 ( 2 )					      								    	elif N < 0 :						  
26 LOAD_FAST 0 ( N )					      								    	    return 1						  
28 LOAD_CONST 1 ( 1 )					      								    	elif N < 0 :						  
30 BINARY_ADD						      								    	    return 1						  
32 CALL_FUNCTION 2					      								    	elif N < 0 :						  
34 GET_ITER						      								    	    return 1						  
>> 36 FOR_ITER 24 ( to 62 )				      								    	elif N < 0 :						  
38 STORE_FAST 3 ( i )					      								    	    return 1						  
							      								    	elif N < 0 :						  
7 40 LOAD_FAST 1 ( countB )				      								    	    return 1						  
42 STORE_FAST 4 ( prev_countB )				      								    	elif N < 0 :						  
							      								    	    return 1						  
8 44 LOAD_FAST 2 ( countS )				      								    	elif N < 0 :						  
46 STORE_FAST 5 ( prev_countS )				      								    	    return 1						  
							      								    	elif N < 0 :						  
9 48 LOAD_FAST 4 ( prev_countB )			      								    	    return 1						  
50 LOAD_FAST 5 ( prev_countS )				      								    	elif N < 0 :						  
52 BINARY_ADD						      								    	    return 1						  
54 STORE_FAST 2 ( countS )				      								    	elif N < 0 :						  
							      								    	    return 1						  
10 56 LOAD_FAST 5 ( prev_countS )			      								    	elif N < 0 :						  
58 STORE_FAST 1 ( countB )				      								    	    return 1						  
60 JUMP_ABSOLUTE 36					      								    	elif N > 0 :						  
>> 62 POP_BLOCK						      								    	    return 1						  
							      								    	elif N < 0 :						  
11 >> 64 LOAD_FAST 2 ( countS )				      								    	    return 1						  
66 LOAD_FAST 1 ( countB )				      								    	elif N > 0 :						  
68 BINARY_ADD						      								    	    return 1						  
70 STORE_FAST 6 ( result )				      								    	elif N > 0 :						  
							      								    	    return 1						  
12 72 LOAD_FAST 6 ( result )				      								    	elif N > 0 :						  
74 LOAD_FAST 6 ( result )				      								    	    return 1						  
76 BINARY_MULTIPLY					      								    	elif N > 0 :						  
78 RETURN_VALUE NEW_LINE				      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
							      								    	elif N > 0 :						  
							      								    	    return 1						  
-							      -								    	elif N > 0 :-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
Disassembly of <code object countDivisibles at 0x7fbac0e8bc90 def countDivisibles ( arr , n ) :				    def countDivisibles ( arr , n , n , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	"""							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n ) :				     Return the array of the array of values to the given array o 
							      	      for j in range ( i + 1 , n ) :			    								  
3 4 SETUP_LOOP 90 ( to 96 )				      		  if ( arr [ i ] % arr [ j ] == 0 or arr [ j ] % ar  Parameters							  
6 LOAD_GLOBAL 0 ( range )				      		      res += 1					     -----							  
8 LOAD_CONST 1 ( 0 )					      	  return res						     arr : ndarray						  
10 LOAD_FAST 1 ( n )					      								     Output array of the array of the array of values		  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								     n : array_like						  
>> 16 FOR_ITER 76 ( to 94 )				      								     Output array of values to be converted to			  
18 STORE_FAST 3 ( i )					      								     `arr` or `n` of the array of values			  
							      								    								  
4 20 SETUP_LOOP 70 ( to 92 )				      								     Returns							  
22 LOAD_GLOBAL 0 ( range )				      								     -----							  
24 LOAD_FAST 3 ( i )					      								     out : ndarray						  
26 LOAD_CONST 2 ( 1 )					      								     Output array of the array of values			  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								     Returns							  
32 CALL_FUNCTION 2					      								     ------							  
34 GET_ITER						      								     out : ndarray						  
>> 36 FOR_ITER 52 ( to 90 )				      								     Output array of values to be converted.			  
38 STORE_FAST 4 ( j )					      								    								  
							      								     See Also							  
5 40 LOAD_FAST 0 ( arr )				      								     -----							  
42 LOAD_FAST 3 ( i )					      								     out : ndarray						  
44 BINARY_SUBSCR					      								     Output array of the array of values to `arr` or `n` of value 
46 LOAD_FAST 0 ( arr )					      								     `arr` or `n` of values					  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								     """							  
52 BINARY_MODULO					      								    	if n == 0 :						  
54 LOAD_CONST 1 ( 0 )					      								    	    return arr						  
56 COMPARE_OP 2 ( == )					      								    	arr = arr.shape [ n ]					  
58 POP_JUMP_IF_TRUE 80					      								    	return arr						  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 4 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 >> 80 LOAD_FAST 2 ( res )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 2 ( res )					      								    								  
88 JUMP_ABSOLUTE 36					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 JUMP_ABSOLUTE 16					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
7 >> 96 LOAD_FAST 2 ( res )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			      FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			    FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			  FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE
--							      --							    --								  --
Disassembly of <code object dayofweek at 0x7fbac<<unk>> d540, def dayofweek ( d , m , y ) :				    def dayofweek ( d ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]	    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 LOAD_CONST 2 ( 3 )					      	  y -= m < 3						    								  
4 LOAD_CONST 3 ( 2 )					      	  return ( ( y + int ( y / 4 ) - int ( y / 100 ) + int ( y  								  
6 LOAD_CONST 4 ( 5 )					      								    								  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 LOAD_CONST 2 ( 3 )					      								    								  
12 LOAD_CONST 4 ( 5 )					      								    								  
14 LOAD_CONST 5 ( 1 )					      								    								  
16 LOAD_CONST 6 ( 4 )					      								    								  
18 LOAD_CONST 7 ( 6 )					      								    								  
20 LOAD_CONST 3 ( 2 )					      								    								  
22 LOAD_CONST 6 ( 4 )					      								    								  
24 BUILD_LIST 12					      								    								  
26 STORE_FAST 3 ( t )					      								    								  
							      								    								  
3 28 LOAD_FAST 2 ( y )					      								    								  
30 LOAD_FAST 1 ( m )					      								    								  
32 LOAD_CONST 2 ( 3 )					      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 INPLACE_SUBTRACT					      								    								  
38 STORE_FAST 2 ( y )					      								    								  
							      								    								  
4 40 LOAD_FAST 2 ( y )					      								    								  
42 LOAD_GLOBAL 0 ( int )				      								    								  
44 LOAD_FAST 2 ( y )					      								    								  
46 LOAD_CONST 6 ( 4 )					      								    								  
48 BINARY_TRUE_DIVIDE					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_GLOBAL 0 ( int )				      								    								  
56 LOAD_FAST 2 ( y )					      								    								  
58 LOAD_CONST 8 ( 100 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_GLOBAL 0 ( int )				      								    								  
68 LOAD_FAST 2 ( y )					      								    								  
70 LOAD_CONST 9 ( 400 )					      								    								  
72 BINARY_TRUE_DIVIDE					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 3 ( t )					      								    								  
80 LOAD_FAST 1 ( m )					      								    								  
82 LOAD_CONST 5 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 0 ( d )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_CONST 10 ( 7 )					      								    								  
96 BINARY_MODULO					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			      CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			    CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE			  CHECK_LINE_TOUCHES_INTERSECTS_CIRCLE
--							      --							    --								  --
Disassembly of <code object checkCollision at 0x7fbac<<unk>>  def checkCollision ( a , b , c , x , y , radius ) :	    def checkCollision ( a , b , b , c ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( abs )				      	  dist = ( ( abs ( a * x + b * y + c ) ) / math.sqrt ( a *  	"""							  
2 LOAD_FAST 0 ( a )					      	  if ( radius == dist ) :				     Returns a list of a list of a list of b and a list of b and  
4 LOAD_FAST 3 ( x )					      	      print ( "Touch" )					     """							  
6 BINARY_MULTIPLY					      	  elif ( radius > dist ) :				    	return abs ( a )					  
8 LOAD_FAST 1 ( b )					      	      print ( "Intersect" )				    								  
10 LOAD_FAST 4 ( y )					      	  else :						    								  
12 BINARY_MULTIPLY					      	      print ( "Outside" )				    								  
14 BINARY_ADD						      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_GLOBAL 1 ( math )				      								    								  
24 LOAD_METHOD 2 ( sqrt )				      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_FAST 0 ( a )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_FAST 1 ( b )					      								    								  
34 LOAD_FAST 1 ( b )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_METHOD 1					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 STORE_FAST 6 ( dist )				      								    								  
							      								    								  
3 46 LOAD_FAST 5 ( radius )				      								    								  
48 LOAD_FAST 6 ( dist )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
4 54 LOAD_GLOBAL 3 ( print )				      								    								  
56 LOAD_CONST 1 ( 'Touch' )				      								    								  
58 CALL_FUNCTION 1					      								    								  
60 POP_TOP						      								    								  
62 JUMP_FORWARD 26 ( to 90 )				      								    								  
							      								    								  
5 >> 64 LOAD_FAST 5 ( radius )				      								    								  
66 LOAD_FAST 6 ( dist )					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
6 72 LOAD_GLOBAL 3 ( print )				      								    								  
74 LOAD_CONST 2 ( 'Intersect' )				      								    								  
76 CALL_FUNCTION 1					      								    								  
78 POP_TOP						      								    								  
80 JUMP_FORWARD 8 ( to 90 )				      								    								  
							      								    								  
8 >> 82 LOAD_GLOBAL 3 ( print )				      								    								  
84 LOAD_CONST 3 ( 'Outside' )				      								    								  
86 CALL_FUNCTION 1					      								    								  
88 POP_TOP						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI
--							      --							    --								  --
Disassembly of <code object canRepresentBST at 0x7fbac0e8bc90 def canRepresentBST ( pre ) :				    def canaligtBST ( pre , s , s , s , s , s , s , s , s , s , s script_not_found : None
2 0 BUILD_LIST 0					      	  s = [ ]						    								  
2 STORE_FAST 1 ( s )					      	  root = INT_MIN					    								  
							      	  for value in pre :					    								  
3 4 LOAD_GLOBAL 0 ( INT_MIN )				      	      if value < root :					    								  
6 STORE_FAST 2 ( root )					      		  return False					    								  
							      	      while ( len ( s ) > 0 and s [ - 1 ] < value ) :	    								  
4 8 SETUP_LOOP 72 ( to 82 )				      		  root = s.pop ( )				    								  
10 LOAD_FAST 0 ( pre )					      	      s.append ( value )				    								  
12 GET_ITER						      	  return True						    								  
>> 14 FOR_ITER 64 ( to 80 )				      								    								  
16 STORE_FAST 3 ( value )				      								    								  
							      								    								  
5 18 LOAD_FAST 3 ( value )				      								    								  
20 LOAD_FAST 2 ( root )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 26 LOAD_CONST 1 ( False )				      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
7 >> 30 SETUP_LOOP 36 ( to 68 )				      								    								  
>> 32 LOAD_GLOBAL 1 ( len )				      								    								  
34 LOAD_FAST 1 ( s )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 COMPARE_OP 4 ( > )					      								    								  
42 POP_JUMP_IF_FALSE 66					      								    								  
44 LOAD_FAST 1 ( s )					      								    								  
46 LOAD_CONST 3 ( - 1 )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( value )				      								    								  
52 COMPARE_OP 0 ( < )					      								    								  
54 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 56 LOAD_FAST 1 ( s )					      								    								  
58 LOAD_METHOD 2 ( pop )				      								    								  
60 CALL_METHOD 0					      								    								  
62 STORE_FAST 2 ( root )				      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 1 ( s )				      								    								  
70 LOAD_METHOD 3 ( append )				      								    								  
72 LOAD_FAST 3 ( value )				      								    								  
74 CALL_METHOD 1					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 14					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 LOAD_CONST 4 ( True )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES
--							      --							    --								  --
Disassembly of <code object firstLetterWord at 0x7fbac0e89d20 def firstLetterWord ( str ) :				    def firstLetterWord ( str ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( '' )					      	  result = ""						    	result = [ '',' ]					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( result )				      	  v = True						    	result = [ '','','','','','','','','','','','','','','',' /STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_S
							      	  for i in range ( len ( str ) ) :			    								  TRING_SPACES.py", line 30	result = [ '',' ]
3 4 LOAD_CONST 2 ( True )				      	      if ( str [ i ] == ' ' ) :				    								  		    ^ SyntaxError: EOL while scannin
6 STORE_FAST 2 ( v )					      		  v = True					    								  g string literal
							      	      elif ( str [ i ] != ' ' and v == True ) :		    								  
4 8 SETUP_LOOP 74 ( to 84 )				      		  result += ( str [ i ] )			    								  
10 LOAD_GLOBAL 0 ( range )				      		  v = False					    								  
12 LOAD_GLOBAL 1 ( len )				      	  return result						    								  
14 LOAD_FAST 0 ( str )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 58 ( to 82 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( str )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 3 ( ' ' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 38 LOAD_CONST 2 ( True )				      								    								  
40 STORE_FAST 2 ( v )					      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
7 >> 44 LOAD_FAST 0 ( str )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( ' ' )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 22					      								    								  
56 LOAD_FAST 2 ( v )					      								    								  
58 LOAD_CONST 2 ( True )				      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
8 64 LOAD_FAST 1 ( result )				      								    								  
66 LOAD_FAST 0 ( str )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 1 ( result )				      								    								  
							      								    								  
9 76 LOAD_CONST 4 ( False )				      								    								  
78 STORE_FAST 2 ( v )					      								    								  
80 JUMP_ABSOLUTE 22					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 1 ( result )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
Disassembly of <code object maxLen at 0x7fbac<<unk>> de40, fi def maxLen ( arr ) :					    def maxLen ( arr , max_len ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  max_len = 0						    	"""							  
2 STORE_FAST 1 ( max_len )				      	  for i in range ( len ( arr ) ) :			     Return the array of the max_len of the input array of the in 
							      	      curr_sum = 0					     of the input array of the input array to the input array	  
3 4 SETUP_LOOP 86 ( to 92 )				      	      for j in range ( i , len ( arr ) ) :		     of the input array of the input array of the input array	  
6 LOAD_GLOBAL 0 ( range )				      		  curr_sum += arr [ j ]				     of the input array of the input array to the input array of  
8 LOAD_GLOBAL 1 ( len )					      		  if curr_sum == 0 :				     of the input array of the input array to the input array of  
10 LOAD_FAST 0 ( arr )					      		      max_len = max ( max_len , j - i + 1 )	     of the input array of the input array to the input array	  
12 CALL_FUNCTION 1					      	  return max_len					     of the input array to the input array of the input array	  
14 CALL_FUNCTION 1					      								     of the input array to the input array of the input array	  
16 GET_ITER						      								     of the input array to the input array of the input array	  
>> 18 FOR_ITER 70 ( to 90 )				      								     of the input array to the input array of the input array	  
20 STORE_FAST 2 ( i )					      								     of the input array to the input array to the input array	  
							      								     of the input array array to the input array.		  
4 22 LOAD_CONST 1 ( 0 )					      								     """							  
24 STORE_FAST 3 ( curr_sum )				      								    	# return the array array of the input array		  
							      								    	for i in range ( max_len ) :				  
5 26 SETUP_LOOP 60 ( to 88 )				      								    	    max_len = max_len [ i ]				  
28 LOAD_GLOBAL 0 ( range )				      								    	    max_len = max_len [ i ]				  
30 LOAD_FAST 2 ( i )					      								    	    # return the array of the input array		  
32 LOAD_GLOBAL 1 ( len )				      								    	    # for the input array of the input array		  
34 LOAD_FAST 0 ( arr )					      								    	    # for the input array of the input array		  
36 CALL_FUNCTION 1					      								    	    max_len = max_len [ i ]				  
38 CALL_FUNCTION 2					      								    	    # for each input array				  
40 GET_ITER						      								    	    max_len = max_len [ i ]				  
>> 42 FOR_ITER 42 ( to 86 )				      								    	    # for each input array				  
44 STORE_FAST 4 ( j )					      								    	    max_len = max_len [ i ]				  
							      								    	    # return the input array				  
6 46 LOAD_FAST 3 ( curr_sum )				      								    	    max_len = max_len [ i ]				  
48 LOAD_FAST 0 ( arr )					      								    	    # return the array of the input array		  
50 LOAD_FAST 4 ( j )					      								    	    max_len = max_len [ i ]				  
52 BINARY_SUBSCR					      								    	    return max_len					  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
7 58 LOAD_FAST 3 ( curr_sum )				      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
8 66 LOAD_GLOBAL 2 ( max )				      								    								  
68 LOAD_FAST 1 ( max_len )				      								    								  
70 LOAD_FAST 4 ( j )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 2					      								    								  
82 STORE_FAST 1 ( max_len )				      								    								  
84 JUMP_ABSOLUTE 42					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 18					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
9 >> 92 LOAD_FAST 1 ( max_len )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			      PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			    PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			  PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE
--							      --							    --								  --
Disassembly of <code object censor at 0x7fbac0e89d20, file "< def censor ( text , word ) :				    def censor ( text ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( text )				      	  word_list = text.split ( )				    	text = text.split ( '*' )				  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_METHOD 0 ( split )				      	  result = ''						    	return text						  /eval_scripts/dis_sa-python_sa.test/PROGRAM_CENSOR
4 CALL_METHOD 0						      	  stars = '*' * len ( word )				    								  _WORD_ASTERISKS_SENTENCE.py", line 51, in <module>
6 STORE_FAST 2 ( word_list )				      	  count = 0						    								       if f_filled(*parameters_set) == f_gold(*param
							      	  index = 0 ;						    								  eters_set): TypeError: f_filled() takes 1 position
3 8 LOAD_CONST 1 ( '' )					      	  for i in word_list :					    								  al argument but 2 were given
10 STORE_FAST 3 ( result )				      	      if i == word :					    								  
							      		  word_list [ index ] = stars			    								  
4 12 LOAD_CONST 2 ( '*' )				      	      index += 1					    								  
14 LOAD_GLOBAL 1 ( len )				      	  result = ' '.join ( word_list )			    								  
16 LOAD_FAST 1 ( word )					      	  return result						    								  
18 CALL_FUNCTION 1					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 STORE_FAST 4 ( stars )				      								    								  
							      								    								  
5 24 LOAD_CONST 3 ( 0 )					      								    								  
26 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 28 LOAD_CONST 3 ( 0 )					      								    								  
30 STORE_FAST 6 ( index )				      								    								  
							      								    								  
7 32 SETUP_LOOP 36 ( to 70 )				      								    								  
34 LOAD_FAST 2 ( word_list )				      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 7 ( i )					      								    								  
							      								    								  
8 42 LOAD_FAST 7 ( i )					      								    								  
44 LOAD_FAST 1 ( word )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
9 50 LOAD_FAST 4 ( stars )				      								    								  
52 LOAD_FAST 2 ( word_list )				      								    								  
54 LOAD_FAST 6 ( index )				      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
10 >> 58 LOAD_FAST 6 ( index )				      								    								  
60 LOAD_CONST 4 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 6 ( index )				      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
11 >> 70 LOAD_CONST 5 ( ' ' )				      								    								  
72 LOAD_METHOD 2 ( join )				      								    								  
74 LOAD_FAST 2 ( word_list )				      								    								  
76 CALL_METHOD 1					      								    								  
78 STORE_FAST 3 ( result )				      								    								  
							      								    								  
12 80 LOAD_FAST 3 ( result )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
Disassembly of <code object minXOR at 0x7fbac<<unk>> de40, fi def minXOR ( arr , n ) :					    def minXOR ( arr , n , i , i , j ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( ) ;					    	if i < j :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_METHOD 0 ( sort )				      	  min_xor = 999999					    	    return ( i % j , j )				  /MINIMUM_XOR_VALUE_PAIR.py", line 28	   def f_fil
4 CALL_METHOD 0						      	  val = 0						    	else :							  led ( arr , n , i , i , j ) :	    ^ SyntaxError: d
6 POP_TOP						      	  for i in range ( 0 , n - 1 ) :			    	    return ( i % j , j )				  uplicate argument 'i' in function definition
							      	      for j in range ( i + 1 , n - 1 ) :		    								  
3 8 LOAD_CONST 1 ( 999999 )				      		  val = arr [ i ] ^ arr [ j ]			    								  
10 STORE_FAST 2 ( min_xor )				      		  min_xor = min ( min_xor , val )		    								  
							      	  return min_xor					    								  
4 12 LOAD_CONST 2 ( 0 )					      								    								  
14 STORE_FAST 3 ( val )					      								    								  
							      								    								  
5 16 SETUP_LOOP 76 ( to 94 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 2 ( 0 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 58 ( to 92 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 SETUP_LOOP 52 ( to 90 )				      								    								  
38 LOAD_GLOBAL 1 ( range )				      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_CONST 3 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 30 ( to 88 )				      								    								  
58 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 5 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_XOR						      								    								  
74 STORE_FAST 3 ( val )					      								    								  
							      								    								  
8 76 LOAD_GLOBAL 2 ( min )				      								    								  
78 LOAD_FAST 2 ( min_xor )				      								    								  
80 LOAD_FAST 3 ( val )					      								    								  
82 CALL_FUNCTION 2					      								    								  
84 STORE_FAST 2 ( min_xor )				      								    								  
86 JUMP_ABSOLUTE 56					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 JUMP_ABSOLUTE 32					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
9 >> 94 LOAD_FAST 2 ( min_xor )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SURVIVAL						      SURVIVAL							    SURVIVAL							  SURVIVAL
--							      --							    --								  --
Disassembly of <code object survival at 0x7fbac<<unk>> d540,  def survival ( S , N , M ) :				    def to_bytes ( val , N = 0x71c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1 script_not_found : None
2 0 LOAD_FAST 1 ( N )					      	  if ( ( ( N * 6 ) < ( M * 7 ) and S > 6 ) or M > N ) :	    								  
2 LOAD_CONST 1 ( 6 )					      	      print ( "No" )					    								  
4 BINARY_MULTIPLY					      	  else :						    								  
6 LOAD_FAST 2 ( M )					      	      days = ( M * S ) / N				    								  
8 LOAD_CONST 2 ( 7 )					      	      if ( ( ( M * S ) % N ) != 0 ) :			    								  
10 BINARY_MULTIPLY					      		  days += 1					    								  
12 COMPARE_OP 0 ( < )					      	      print ( "Yes " ) ,				    								  
14 POP_JUMP_IF_FALSE 24					      	      print ( days )					    								  
16 LOAD_FAST 0 ( S )					      								    								  
18 LOAD_CONST 1 ( 6 )					      								    								  
20 COMPARE_OP 4 ( > )					      								    								  
22 POP_JUMP_IF_TRUE 32					      								    								  
>> 24 LOAD_FAST 2 ( M )					      								    								  
26 LOAD_FAST 1 ( N )					      								    								  
28 COMPARE_OP 4 ( > )					      								    								  
30 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
3 >> 32 LOAD_GLOBAL 0 ( print )				      								    								  
34 LOAD_CONST 3 ( 'No' )				      								    								  
36 CALL_FUNCTION 1					      								    								  
38 POP_TOP						      								    								  
40 JUMP_FORWARD 54 ( to 96 )				      								    								  
							      								    								  
5 >> 42 LOAD_FAST 2 ( M )				      								    								  
44 LOAD_FAST 0 ( S )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 1 ( N )					      								    								  
50 BINARY_TRUE_DIVIDE					      								    								  
52 STORE_FAST 3 ( days )				      								    								  
							      								    								  
6 54 LOAD_FAST 2 ( M )					      								    								  
56 LOAD_FAST 0 ( S )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_FAST 1 ( N )					      								    								  
62 BINARY_MODULO					      								    								  
64 LOAD_CONST 4 ( 0 )					      								    								  
66 COMPARE_OP 3 ( != )					      								    								  
68 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
7 70 LOAD_FAST 3 ( days )				      								    								  
72 LOAD_CONST 5 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 3 ( days )				      								    								  
							      								    								  
8 >> 78 LOAD_GLOBAL 0 ( print )				      								    								  
80 LOAD_CONST 6 ( 'Yes ' )				      								    								  
82 CALL_FUNCTION 1					      								    								  
84 BUILD_TUPLE 1					      								    								  
86 POP_TOP						      								    								  
							      								    								  
9 88 LOAD_GLOBAL 0 ( print )				      								    								  
90 LOAD_FAST 3 ( days )					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 POP_TOP						      								    								  
>> 96 LOAD_CONST 0 ( None )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7	      FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		    FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		  FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7
--							      --							    --								  --
Disassembly of <code object findpos at 0x7fbac0e89d20, file " def findpos ( n ) :					    def findpos ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( i )					      	  j = len ( n )						    								  /FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7
							      	  pos = 0						    								  .py", line 51	    print("#Results: %i, %i" % (n_su
3 4 LOAD_GLOBAL 0 ( len )				      	  while ( i < j ) :					    								  ccess, len(param)))
6 LOAD_FAST 0 ( n )					      	      if ( n [ i ] == '4' ) :				    								  			  ^ SyntaxError: EOF while s
8 CALL_FUNCTION 1					      		  pos = pos * 2 + 1				    								  canning triple-quoted string literal
10 STORE_FAST 2 ( j )					      	      if ( n [ i ] == '7' ) :				    								  
							      		  pos = pos * 2 + 2				    								  
4 12 LOAD_CONST 1 ( 0 )					      	      i = i + 1						    								  
14 STORE_FAST 3 ( pos )					      	  return pos						    								  
							      								    								  
5 16 SETUP_LOOP 68 ( to 86 )				      								    								  
>> 18 LOAD_FAST 1 ( i )					      								    								  
20 LOAD_FAST 2 ( j )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( '4' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 38 LOAD_FAST 3 ( pos )				      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_CONST 4 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 3 ( pos )					      								    								  
							      								    								  
8 >> 50 LOAD_FAST 0 ( n )				      								    								  
52 LOAD_FAST 1 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 5 ( '7' )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 62 LOAD_FAST 3 ( pos )				      								    								  
64 LOAD_CONST 3 ( 2 )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_CONST 3 ( 2 )					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 3 ( pos )					      								    								  
							      								    								  
10 >> 74 LOAD_FAST 1 ( i )				      								    								  
76 LOAD_CONST 4 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 1 ( i )					      								    								  
82 JUMP_ABSOLUTE 18					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_FAST 3 ( pos )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	      WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	    WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	  WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO
--							      --							    --								  --
Disassembly of <code object xorZero at 0x7fbac<<unk>> de40, f def xorZero ( str ) :					    def xorZero ( str ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  one_count = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( one_count )				      	  zero_count = 0					    								  /WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES
							      	  n = len ( str )					    								  _ZERO.py", line 52	 print("#Results: %i, %i" %
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n , 1 ) :			    								  (n_success, len(param)))
6 STORE_FAST 2 ( zero_count )				      	      if ( str [ i ] == '1' ) :				    								  			       ^ SyntaxError: EOF wh
							      		  one_count += 1				    								  ile scanning triple-quoted string literal
4 8 LOAD_GLOBAL 0 ( len )				      	      else :						    								  
10 LOAD_FAST 0 ( str )					      		  zero_count += 1				    								  
12 CALL_FUNCTION 1					      	  if ( one_count % 2 == 0 ) :				    								  
14 STORE_FAST 3 ( n )					      	      return zero_count					    								  
							      	  return one_count					    								  
5 16 SETUP_LOOP 50 ( to 68 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 CALL_FUNCTION 3					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 34 ( to 66 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( str )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( '1' )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 46 LOAD_FAST 1 ( one_count )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( one_count )				      								    								  
54 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
9 >> 56 LOAD_FAST 2 ( zero_count )			      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( zero_count )				      								    								  
64 JUMP_ABSOLUTE 30					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
10 >> 68 LOAD_FAST 1 ( one_count )			      								    								  
70 LOAD_CONST 4 ( 2 )					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
11 80 LOAD_FAST 2 ( zero_count )			      								    								  
82 RETURN_VALUE						      								    								  
							      								    								  
12 >> 84 LOAD_FAST 1 ( one_count )			      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS				      BREAK_NUMBER_THREE_PARTS					    BREAK_NUMBER_THREE_PARTS					  BREAK_NUMBER_THREE_PARTS
--							      --							    --								  --
Disassembly of <code object count_of_ways at 0x7fbac<<unk>> d def count_of_ways ( n ) :					    def count_of_ways ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( count )				      	  for i in range ( 0 , n + 1 ) :			    	count = 0						  /BREAK_NUMBER_THREE_PARTS.py", line 150     return
							      	      for j in range ( 0 , n + 1 ) :			    	count = 0						   count     ^ SyntaxError: 'return' outside functio
3 4 SETUP_LOOP 94 ( to 100 )				      		  for k in range ( 0 , n + 1 ) :		    	count = 0						  n
6 LOAD_GLOBAL 0 ( range )				      		      if ( i + j + k == n ) :			    	count = 0						  
8 LOAD_CONST 1 ( 0 )					      			  count = count + 1			    	for j in range ( count ) :				  
10 LOAD_FAST 0 ( n )					      	  return count						    	    count += 1						  
12 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
14 BINARY_ADD						      								    	    count += 1						  
16 CALL_FUNCTION 2					      								    	    count += 1						  
18 GET_ITER						      								    	    count += 1						  
>> 20 FOR_ITER 76 ( to 98 )				      								    	    count += 1						  
22 STORE_FAST 2 ( i )					      								    	    count += 1						  
							      								    	    count += 1						  
4 24 SETUP_LOOP 70 ( to 96 )				      								    	    count += 1						  
26 LOAD_GLOBAL 0 ( range )				      								    	    count += 1						  
28 LOAD_CONST 1 ( 0 )					      								    	    count += 1						  
30 LOAD_FAST 0 ( n )					      								    	    count += 1						  
32 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
34 BINARY_ADD						      								    	    count += 1						  
36 CALL_FUNCTION 2					      								    	    count += 1						  
38 GET_ITER						      								    	    count += 1						  
>> 40 FOR_ITER 52 ( to 94 )				      								    	    count += 1						  
42 STORE_FAST 3 ( j )					      								    	    count += 1						  
							      								    	    count += 1						  
5 44 SETUP_LOOP 46 ( to 92 )				      								    	    count += 1						  
46 LOAD_GLOBAL 0 ( range )				      								    	    count += 1						  
48 LOAD_CONST 1 ( 0 )					      								    	    count += 1						  
50 LOAD_FAST 0 ( n )					      								    	    count += 1						  
52 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
54 BINARY_ADD						      								    	    count += 1						  
56 CALL_FUNCTION 2					      								    	    count += 1						  
58 GET_ITER						      								    	    count += 1						  
>> 60 FOR_ITER 28 ( to 90 )				      								    	    count += 1						  
62 STORE_FAST 4 ( k )					      								    	    count += 1						  
							      								    	    count += 1						  
6 64 LOAD_FAST 2 ( i )					      								    	    count += 1						  
66 LOAD_FAST 3 ( j )					      								    	    count += 1						  
68 BINARY_ADD						      								    	    count += 1						  
70 LOAD_FAST 4 ( k )					      								    	    count += 1						  
72 BINARY_ADD						      								    	    count += 1						  
74 LOAD_FAST 0 ( n )					      								    	    count += 1						  
76 COMPARE_OP 2 ( == )					      								    	    count += 1						  
78 POP_JUMP_IF_FALSE 60					      								    	    count += 1						  
							      								    	    count += 1						  
7 80 LOAD_FAST 1 ( count )				      								    	    count += 1						  
82 LOAD_CONST 2 ( 1 )					      								    	    count += 1						  
84 BINARY_ADD						      								    	    count += 1						  
86 STORE_FAST 1 ( count )				      								    	    count += 1						  
88 JUMP_ABSOLUTE 60					      								    	    count += 1						  
>> 90 POP_BLOCK						      								    	    count += 1						  
>> 92 JUMP_ABSOLUTE 40					      								    	    count += 1						  
>> 94 POP_BLOCK						      								    	    count += 1						  
>> 96 JUMP_ABSOLUTE 20					      								    	    count += 1						  
>> 98 POP_BLOCK						      								    	    count += 1						  
							      								    	    count += 1						  
8 >> 100 LOAD_FAST 1 ( count )				      								    	    count += 1						  
102 RETURN_VALUE NEW_LINE				      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    	    count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K		      MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K		    MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K		  MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K
--							      --							    --								  --
Disassembly of <code object MinOperation at 0x7fbac<<unk>> de def MinOperation ( a , n , k ) :				    def MinOperation ( fbfbacactntn1 1 , n = 1 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( result )				      	  for i in range ( n ) :				    								  /MINIMUM_OPERATIONS_MAKE_GCD_ARRAY_MULTIPLE_K.py",
							      	      if ( a [ i ] != 1 and a [ i ] > k ) :		    								   line 27     def f_filled ( fbfbacactntn1 1 , n =
3 4 SETUP_LOOP 92 ( to 98 )				      		  result = ( result + min ( a [ i ] % k , k - a [ i 								  1 ) :					 ^ SyntaxErr
6 LOAD_GLOBAL 0 ( range )				      	      else :						    								  or: invalid syntax
8 LOAD_FAST 1 ( n )					      		  result = result + k - a [ i ]			    								  
10 CALL_FUNCTION 1					      	  return result						    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 80 ( to 96 )				      								    								  
16 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( a )					      								    								  
20 LOAD_FAST 4 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 COMPARE_OP 3 ( != )					      								    								  
28 POP_JUMP_IF_FALSE 78					      								    								  
30 LOAD_FAST 0 ( a )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 2 ( k )					      								    								  
38 COMPARE_OP 4 ( > )					      								    								  
40 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
5 42 LOAD_FAST 3 ( result )				      								    								  
44 LOAD_GLOBAL 1 ( min )				      								    								  
46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 2 ( k )					      								    								  
54 BINARY_MODULO					      								    								  
56 LOAD_FAST 2 ( k )					      								    								  
58 LOAD_FAST 0 ( a )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 2 ( k )					      								    								  
66 BINARY_MODULO					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( result )				      								    								  
76 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
7 >> 78 LOAD_FAST 3 ( result )				      								    								  
80 LOAD_FAST 2 ( k )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_FAST 0 ( a )					      								    								  
86 LOAD_FAST 4 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 STORE_FAST 3 ( result )				      								    								  
94 JUMP_ABSOLUTE 14					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
8 >> 98 LOAD_FAST 3 ( result )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
Disassembly of <code object nobleInteger at 0x7fbac0e8bc90, f def nobleInteger ( arr , size ) :				    def nobleInteger ( arr , size = 0 , size = 1 ) :		  script_not_found : None
2 0 SETUP_LOOP 86 ( to 88 )				      	  for i in range ( 0 , size ) :				    	for i in range ( size ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    	    for i in range ( size ) :				  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , size ) :			    		if i < size :					  
6 LOAD_FAST 1 ( size )					      		  if ( arr [ i ] < arr [ j ] ) :		    		    return i					  
8 CALL_FUNCTION 2					      		      count += 1				    	return None						  
10 GET_ITER						      	      if ( count == arr [ i ] ) :			    								  
>> 12 FOR_ITER 72 ( to 86 )				      		  return arr [ i ]				    								  
14 STORE_FAST 2 ( i )					      	  return - 1						    								  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( size )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( count )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( count )				      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 3 ( count )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 12					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_CONST 3 ( - 1 )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
Disassembly of <code object subArray at 0x7fbac<<unk>> d540,  def subArray ( arr , n ) :				    def subArray ( arr , n ) :					  script_not_found : None
2 0 SETUP_LOOP 90 ( to 92 )				      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i , n ) :			    	    for i in range ( n ) :				  
4 LOAD_CONST 1 ( 0 )					      		  for k in range ( i , j + 1 ) :		    		if i == 0 :					  
6 LOAD_FAST 1 ( n )					      		      print ( arr [ k ] , end = "" )		    		    return i					  
8 CALL_FUNCTION 2					      		  print ( "\n" , end = "" )			    	    return None						  
10 GET_ITER						      								    								  
>> 12 FOR_ITER 76 ( to 90 )				      								    								  
14 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 16 SETUP_LOOP 70 ( to 88 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 56 ( to 86 )				      								    								  
30 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 32 SETUP_LOOP 38 ( to 72 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 LOAD_FAST 3 ( j )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 20 ( to 70 )				      								    								  
50 STORE_FAST 4 ( k )					      								    								  
							      								    								  
5 52 LOAD_GLOBAL 1 ( print )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 4 ( k )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 3 ( '' )					      								    								  
62 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
64 CALL_FUNCTION_KW 2					      								    								  
66 POP_TOP						      								    								  
68 JUMP_ABSOLUTE 48					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_GLOBAL 1 ( print )				      								    								  
74 LOAD_CONST 5 ( '\n' )				      								    								  
76 LOAD_CONST 3 ( '' )					      								    								  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 2					      								    								  
82 POP_TOP						      								    								  
84 JUMP_ABSOLUTE 28					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 12					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_IN_A_GIVEN_STRING				      COUNT_WORDS_IN_A_GIVEN_STRING				    COUNT_WORDS_IN_A_GIVEN_STRING				  COUNT_WORDS_IN_A_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object countWords at 0x7fbac0e8bc90, fil def countWords ( string ) :				    def countWords ( string ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( OUT )				      	  state = OUT						    	"""							  
2 STORE_FAST 1 ( state )				      	  wc = 0						     IN IN from a string to a string to the string to the	  
							      	  for i in range ( len ( string ) ) :			     string to the string to the string to the string to the	  
3 4 LOAD_CONST 1 ( 0 )					      	      if ( string [ i ] == ' ' or string [ i ] == '\n' or s  string to the string to the string to the string to the stri 
6 STORE_FAST 2 ( wc )					      		  state = OUT					     """							  
							      	      elif state == OUT :				    	if string is None :					  
4 8 SETUP_LOOP 82 ( to 92 )				      		  state = IN					    	    return None						  
10 LOAD_GLOBAL 1 ( range )				      		  wc += 1					    	return string.replace ( '' , '' )			  
12 LOAD_GLOBAL 2 ( len )				      	  return wc						    								  
14 LOAD_FAST 0 ( string )				      								    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 66 ( to 90 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( string )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( ' ' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_TRUE 62					      								    								  
38 LOAD_FAST 0 ( string )				      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 3 ( '\n' )				      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_TRUE 62					      								    								  
50 LOAD_FAST 0 ( string )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 4 ( '\t' )				      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 >> 62 LOAD_GLOBAL 0 ( OUT )				      								    								  
64 STORE_FAST 1 ( state )				      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
7 >> 68 LOAD_FAST 1 ( state )				      								    								  
70 LOAD_GLOBAL 0 ( OUT )				      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
8 76 LOAD_GLOBAL 3 ( IN )				      								    								  
78 STORE_FAST 1 ( state )				      								    								  
							      								    								  
9 80 LOAD_FAST 2 ( wc )					      								    								  
82 LOAD_CONST 5 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 2 ( wc )					      								    								  
88 JUMP_ABSOLUTE 22					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 2 ( wc )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac0e89d20, file "<d def check ( st ) :					    def check ( st , n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    	"""							  
2 LOAD_FAST 0 ( st )					      	  if ( n == 0 ) :					     Returns a list of the given n in the given n of the given n  
4 CALL_FUNCTION 1					      	      return False					     list of numbers in the given n of the given n is given the	  
6 STORE_FAST 1 ( n )					      	  if ( n == 1 ) :					     output of the given n is given a list of numbers in the	  
							      	      return ( ( st [ 0 ] - '0' ) % 4 == 0 )		     output of the given n is given n in the given n n is given b 
3 8 LOAD_FAST 1 ( n )					      	  last = ( int ) ( st [ n - 1 ] )			     n (n n) is given n in the given n n is given		  
10 LOAD_CONST 1 ( 0 )					      	  second_last = ( int ) ( st [ n - 2 ] )		     n in the given n of the given n is given by n in the	  
12 COMPARE_OP 2 ( == )					      	  return ( ( second_last * 10 + last ) % 4 == 0 )	     output of the given n in the given n n is given		  
14 POP_JUMP_IF_FALSE 20					      								     n in the output output output is given by			  
							      								     n in the output output output output.			  
4 16 LOAD_CONST 2 ( False )				      								     """							  
18 RETURN_VALUE						      								    	if n == 0 :						  
							      								    	    return int ( n )					  
5 >> 20 LOAD_FAST 1 ( n )				      								    	return n						  
22 LOAD_CONST 3 ( 1 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( st )					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 4 ( '0' )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 5 ( 4 )					      								    								  
40 BINARY_MODULO					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
7 >> 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_FAST 0 ( st )					      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 STORE_FAST 2 ( last )				      								    								  
							      								    								  
8 64 LOAD_GLOBAL 1 ( int )				      								    								  
66 LOAD_FAST 0 ( st )					      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 LOAD_CONST 6 ( 2 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 STORE_FAST 3 ( second_last )				      								    								  
							      								    								  
9 80 LOAD_FAST 3 ( second_last )			      								    								  
82 LOAD_CONST 7 ( 10 )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 LOAD_FAST 2 ( last )					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_CONST 5 ( 4 )					      								    								  
92 BINARY_MODULO					      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1	      EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1	    EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1		  EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX_1
--							      --							    --								  --
Disassembly of <code object printDiagonalSums at 0x7fbac0e8bc def printDiagonalSums ( mat , n ) :			    def printDiagonalSums ( mat , n ) :				  success : None
2 0 LOAD_CONST 1 ( 0 )					      	  principal = 0						    	"""							  
2 STORE_FAST 2 ( principal )				      	  secondary = 0						     Returns the given array of the given array of the given arra 
							      	  for i in range ( 0 , n ) :				     """							  
3 4 LOAD_CONST 1 ( 0 )					      	      principal += mat [ i ] [ i ]			    	for i in range ( n ) :					  
6 STORE_FAST 3 ( secondary )				      	      secondary += mat [ i ] [ n - i - 1 ]		    	    if n < 0 :						  
							      	  print ( "Principal Diagonal:" , principal )		    		return						  
4 8 SETUP_LOOP 58 ( to 68 )				      	  print ( "Secondary Diagonal:" , secondary )		    	return mat						  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 44 ( to 66 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 2 ( principal )				      								    								  
26 LOAD_FAST 0 ( mat )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 INPLACE_ADD						      								    								  
38 STORE_FAST 2 ( principal )				      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( secondary )				      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( secondary )				      								    								  
64 JUMP_ABSOLUTE 20					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 1 ( print )				      								    								  
70 LOAD_CONST 3 ( 'Principal Diagonal:' )		      								    								  
72 LOAD_FAST 2 ( principal )				      								    								  
74 CALL_FUNCTION 2					      								    								  
76 POP_TOP						      								    								  
							      								    								  
8 78 LOAD_GLOBAL 1 ( print )				      								    								  
80 LOAD_CONST 4 ( 'Secondary Diagonal:' )		      								    								  
82 LOAD_FAST 3 ( secondary )				      								    								  
84 CALL_FUNCTION 2					      								    								  
86 POP_TOP						      								    								  
88 LOAD_CONST 0 ( None )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			      CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			    CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			  CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT
--							      --							    --								  --
Disassembly of <code object isAnBn at 0x7fbac0e89d20, file "< def isAnBn ( str ) :					    def isAnBn ( str ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( str )					      	  for i in range ( n ) :				     Returns a list of numbers in a list of numbers		  /eval_scripts/dis_sa-python_sa.test/CHECK_STRING_F
4 CALL_FUNCTION 1					      	      if ( str [ i ] != 'a' ) :				    								  OLLOWS_ANBN_PATTERN_NOT.py", line 70, in <module>
6 STORE_FAST 1 ( n )					      		  break						     Parameters							      if f_filled(*parameters_set) == f_gold(*parame
							      	  if ( i * 2 != n ) :					     -----							  ters_set):   File "/home/ubuntu/TransCoder/models/
3 8 SETUP_LOOP 30 ( to 40 )				      	      return False					     str							  eval/bt/152w65bl69/eval_scripts/dis_sa-python_sa.t
10 LOAD_GLOBAL 1 ( range )				      	  for j in range ( i , n ) :				     The list of numbers to be converted to the list of numbers	  est/CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT.py", lin
12 LOAD_FAST 1 ( n )					      	      if ( str [ j ] != 'b' ) :				     str.							  e 52, in f_filled	return str ( str ( str ( str
14 CALL_FUNCTION 1					      		  return False					     str : str							   ) ) ) TypeError: 'str' object is not callable
16 GET_ITER						      	  return True						     The list of numbers to be converted to the list of numbers	  
>> 18 FOR_ITER 18 ( to 38 )				      								     numbers are returned as a list of numbers			  
20 STORE_FAST 2 ( i )					      								    								  
							      								     Returns							  
4 22 LOAD_FAST 0 ( str )				      								     -----							  
24 LOAD_FAST 2 ( i )					      								     str.The list of numbers are returned.			  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 1 ( 'a' )					      								     Returns							  
30 COMPARE_OP 3 ( != )					      								     -----							  
32 POP_JUMP_IF_FALSE 18					      								     str.The list of numbers are returned.			  
							      								    								  
5 34 BREAK_LOOP						      								     """							  
36 JUMP_ABSOLUTE 18					      								    	return str ( str ( str ( str ) ) )			  
>> 38 POP_BLOCK						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 2 ( i )				      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 COMPARE_OP 3 ( != )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 52 LOAD_CONST 3 ( False )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 SETUP_LOOP 34 ( to 92 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 20 ( to 90 )				      								    								  
70 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 72 LOAD_FAST 0 ( str )				      								    								  
74 LOAD_FAST 3 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( 'b' )					      								    								  
80 COMPARE_OP 3 ( != )					      								    								  
82 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
10 84 LOAD_CONST 3 ( False )				      								    								  
86 RETURN_VALUE						      								    								  
88 JUMP_ABSOLUTE 68					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
11 >> 92 LOAD_CONST 5 ( True )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN
--							      --							    --								  --
Disassembly of <code object findNth at 0x7fbac<<unk>> d540, f def findNth ( n ) :					    def findNth ( f , count = 1 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( count )				      	  for curr in itertools.count ( ) :			    	count = count						  /N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN.py", line
							      	      sum = 0						    	count = count						  148	  return count	   ^ SyntaxError: 'return' o
3 4 SETUP_LOOP 82 ( to 88 )				      	      x = curr						    	count = count						  utside function
6 LOAD_GLOBAL 0 ( itertools )				      	      while ( x ) :					    	count = count						  
8 LOAD_METHOD 1 ( count )				      		  sum = sum + x % 10				    	count += count						  
10 CALL_METHOD 0					      		  x = x // 10					    	while count < count :					  
12 GET_ITER						      	      if ( sum == 10 ) :				    	    count += count					  
>> 14 FOR_ITER 70 ( to 86 )				      		  count = count + 1				    	    count += count					  
16 STORE_FAST 2 ( curr )				      	      if ( count == n ) :				    	    count += count					  
							      		  return curr					    	    count += count					  
4 18 LOAD_CONST 1 ( 0 )					      	  return - 1						    	    count += count					  
20 STORE_FAST 3 ( sum )					      								    	    count += count					  
							      								    	    count += count					  
5 22 LOAD_FAST 2 ( curr )				      								    	    count += count					  
24 STORE_FAST 4 ( x )					      								    	    count += count					  
							      								    	    count += count					  
6 26 SETUP_LOOP 28 ( to 56 )				      								    	    count += count					  
>> 28 LOAD_FAST 4 ( x )					      								    	    count += count					  
30 POP_JUMP_IF_FALSE 54					      								    	    count += count					  
							      								    	    count += count					  
7 32 LOAD_FAST 3 ( sum )				      								    	    count += count					  
34 LOAD_FAST 4 ( x )					      								    	    count += count					  
36 LOAD_CONST 2 ( 10 )					      								    	    count += count					  
38 BINARY_MODULO					      								    	    count += count					  
40 BINARY_ADD						      								    	    count += count					  
42 STORE_FAST 3 ( sum )					      								    	    count += count					  
							      								    	    count += count					  
8 44 LOAD_FAST 4 ( x )					      								    	    count += count					  
46 LOAD_CONST 2 ( 10 )					      								    	    count += count					  
48 BINARY_FLOOR_DIVIDE					      								    	    count += count					  
50 STORE_FAST 4 ( x )					      								    	    count += count					  
52 JUMP_ABSOLUTE 28					      								    	    count += count					  
>> 54 POP_BLOCK						      								    	    count += count					  
							      								    	    count += count					  
9 >> 56 LOAD_FAST 3 ( sum )				      								    	    count += count					  
58 LOAD_CONST 2 ( 10 )					      								    	    count += count					  
60 COMPARE_OP 2 ( == )					      								    	    count += count					  
62 POP_JUMP_IF_FALSE 72					      								    	    count += count					  
							      								    	    count += count					  
10 64 LOAD_FAST 1 ( count )				      								    	    count += count					  
66 LOAD_CONST 3 ( 1 )					      								    	    count += count					  
68 BINARY_ADD						      								    	    count += count					  
70 STORE_FAST 1 ( count )				      								    	    count += count					  
							      								    	    count += count					  
11 >> 72 LOAD_FAST 1 ( count )				      								    	    count += count					  
74 LOAD_FAST 0 ( n )					      								    	    count += count					  
76 COMPARE_OP 2 ( == )					      								    	    count += count					  
78 POP_JUMP_IF_FALSE 14					      								    	    count += count					  
							      								    	    count += count					  
12 80 LOAD_FAST 2 ( curr )				      								    	    count += count					  
82 RETURN_VALUE						      								    	    count += count					  
84 JUMP_ABSOLUTE 14					      								    	    count += count					  
>> 86 POP_BLOCK						      								    	    count += count					  
							      								    	    count += count					  
13 >> 88 LOAD_CONST 4 ( - 1 )				      								    	    count += count					  
90 RETURN_VALUE NEW_LINE				      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LAST_NON_ZERO_DIGIT_FACTORIAL				      LAST_NON_ZERO_DIGIT_FACTORIAL				    LAST_NON_ZERO_DIGIT_FACTORIAL				  LAST_NON_ZERO_DIGIT_FACTORIAL
--							      --							    --								  --
Disassembly of <code object lastNon0Digit at 0x7fbac<<unk>> d def lastNon0Digit ( n ) :					    def lastNon0Digit ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 10 ) :					    	if n < 10 :						  
2 LOAD_CONST 1 ( 10 )					      	      return dig [ n ]					    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :		    	if n < 10 :						  
6 POP_JUMP_IF_FALSE 16					      	      return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10  	    return 0						  
							      	  else :						    	if n < 10 :						  
3 8 LOAD_GLOBAL 0 ( dig )				      	      return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10  	    return 0						  
10 LOAD_FAST 0 ( n )					      	  return 0						    	return 0						  
12 BINARY_SUBSCR					      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_CONST 1 ( 10 )					      								    								  
20 BINARY_FLOOR_DIVIDE					      								    								  
22 LOAD_CONST 1 ( 10 )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 3 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 36 LOAD_CONST 4 ( 6 )					      								    								  
38 LOAD_GLOBAL 1 ( lastNon0Digit )			      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 5 ( 5 )					      								    								  
44 BINARY_FLOOR_DIVIDE					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_GLOBAL 0 ( dig )				      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 1 ( 10 )					      								    								  
56 BINARY_MODULO					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 LOAD_CONST 1 ( 10 )					      								    								  
64 BINARY_MODULO					      								    								  
66 RETURN_VALUE						      								    								  
							      								    								  
7 >> 68 LOAD_CONST 6 ( 4 )				      								    								  
70 LOAD_GLOBAL 1 ( lastNon0Digit )			      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 LOAD_CONST 5 ( 5 )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_GLOBAL 0 ( dig )				      								    								  
84 LOAD_FAST 0 ( n )					      								    								  
86 LOAD_CONST 1 ( 10 )					      								    								  
88 BINARY_MODULO					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 LOAD_CONST 1 ( 10 )					      								    								  
96 BINARY_MODULO					      								    								  
98 RETURN_VALUE						      								    								  
							      								    								  
8 100 LOAD_CONST 3 ( 0 )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		      NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		    NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		  NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS
--							      --							    --								  --
Disassembly of <code object snoob at 0x7fbac<<unk>> de40, fil def snoob ( x ) :						    def scheduled_ob ( x , next , depth , depth , depth , depth , error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  next = 0						    	depth = depth [ 0 ]					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( next )					      	  if ( x ) :						    	depth = depth [ 1 ]					  /NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS.p
							      	      rightOne = x & - ( x )				    	depth = depth [ 0 ]					  y", line 29	  def f_filled ( x , next , depth ,
3 4 LOAD_FAST 0 ( x )					      	      nextHigherOneBit = x + int ( rightOne )		    	depth = depth [ 1 ]					  depth , depth , depth , depth , depth ) :	^ Sy
6 POP_JUMP_IF_FALSE 78					      	      rightOnesPattern = x ^ int ( nextHigherOneBit )	    	depth = depth [ 0 ]					  ntaxError: duplicate argument 'depth' in function
							      	      rightOnesPattern = ( int ( rightOnesPattern ) / int ( 	depth = depth [ 1 ]					  definition
4 8 LOAD_FAST 0 ( x )					      	      rightOnesPattern = int ( rightOnesPattern ) >> 2	    	depth = depth [ 0 ]					  
10 LOAD_FAST 0 ( x )					      	      next = nextHigherOneBit | rightOnesPattern	    	depth = depth [ 1 ]					  
12 UNARY_NEGATIVE					      	  return next						    	depth = depth [ 0 ]					  
14 BINARY_AND						      								    	depth = depth [ 1 ]					  
16 STORE_FAST 2 ( rightOne )				      								    	depth = depth [ 0 ]					  
							      								    	depth = depth [ 1 ]					  
5 18 LOAD_FAST 0 ( x )					      								    	depth = depth [ 2 ]					  
20 LOAD_GLOBAL 0 ( int )				      								    	depth = depth [ 3 ]					  
22 LOAD_FAST 2 ( rightOne )				      								    	depth = depth [ 4 ]					  
24 CALL_FUNCTION 1					      								    	depth = depth [ 5 ]					  
26 BINARY_ADD						      								    	depth = depth [ 6 ]					  
28 STORE_FAST 3 ( nextHigherOneBit )			      								    	depth = depth [ 7 ]					  
							      								    	depth = depth [ 8 ]					  
6 30 LOAD_FAST 0 ( x )					      								    	depth = depth [ 9 ]					  
32 LOAD_GLOBAL 0 ( int )				      								    	depth = depth [ 10 ]					  
34 LOAD_FAST 3 ( nextHigherOneBit )			      								    	depth = depth [ 11 ]					  
36 CALL_FUNCTION 1					      								    	depth = depth [ 12 ]					  
38 BINARY_XOR						      								    	depth = depth [ 13 ]					  
40 STORE_FAST 4 ( rightOnesPattern )			      								    	depth = depth [ 14 ]					  
							      								    	depth = depth [ 15 ]					  
7 42 LOAD_GLOBAL 0 ( int )				      								    	depth = depth [ 16 ]					  
44 LOAD_FAST 4 ( rightOnesPattern )			      								    	depth = depth [ 18 ]					  
46 CALL_FUNCTION 1					      								    	depth = depth [ 20 ]					  
48 LOAD_GLOBAL 0 ( int )				      								    	depth = depth [ 21 ]					  
50 LOAD_FAST 2 ( rightOne )				      								    	depth = depth [ 22 ]					  
52 CALL_FUNCTION 1					      								    	depth = depth [ 24 ]					  
54 BINARY_TRUE_DIVIDE					      								    	depth = depth [ 22 ]					  
56 STORE_FAST 4 ( rightOnesPattern )			      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 22 ]					  
8 58 LOAD_GLOBAL 0 ( int )				      								    	depth = depth [ 24 ]					  
60 LOAD_FAST 4 ( rightOnesPattern )			      								    	depth = depth [ 26 ]					  
62 CALL_FUNCTION 1					      								    	depth = depth [ 24 ]					  
64 LOAD_CONST 2 ( 2 )					      								    	depth = depth [ 26 ]					  
66 BINARY_RSHIFT					      								    	depth = depth [ 24 ]					  
68 STORE_FAST 4 ( rightOnesPattern )			      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 24 ]					  
9 70 LOAD_FAST 3 ( nextHigherOneBit )			      								    	depth = depth [ 26 ]					  
72 LOAD_FAST 4 ( rightOnesPattern )			      								    	depth = depth [ 24 ]					  
74 BINARY_OR						      								    	depth = depth [ 26 ]					  
76 STORE_FAST 1 ( next )				      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 24 ]					  
10 >> 78 LOAD_FAST 1 ( next )				      								    	depth = depth [ 24 ]					  
80 RETURN_VALUE NEW_LINE				      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 24 ]					  
							      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 25 ]					  
							      								    	depth = depth [ 26 ]					  
							      								    	depth = depth [ 26 ]					  
							      								    	depth [ 30 ] = depth [ 30 ]				  
							      								    	depth [ 30 ] = depth [ 30 ]				  
							      								    	depth = depth [ 30 ]					  
							      								    	return depth						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_X_Y_SATISFYING_AX_N				      FIND_X_Y_SATISFYING_AX_N					    FIND_X_Y_SATISFYING_AX_N					  FIND_X_Y_SATISFYING_AX_N
--							      --							    --								  --
Disassembly of <code object solution at 0x7fbac0e8bc90, file  def solution ( a , b , n ) :				    def solution ( a , b ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	"""							  
2 STORE_FAST 3 ( i )					      	  while i * a <= n :					     Return the solution of a solution of a solution in a solutio 
							      	      if ( n - ( i * a ) ) % b == 0 :			    								  
3 4 SETUP_LOOP 78 ( to 84 )				      		  print ( "x = " , i , ", y = " , int ( ( n - ( i *  The solution is the solution of a solution solution solution 
>> 6 LOAD_FAST 3 ( i )					      		  return 0					    								  
8 LOAD_FAST 0 ( a )					      	      i = i + 1						     The solution solution is the solution solution solution for  
10 BINARY_MULTIPLY					      	  print ( "No solution" )				     solution solution.						  
12 LOAD_FAST 2 ( n )					      								    								  
14 COMPARE_OP 1 ( <= )					      								     The solution solution is the solution solution solution for  
16 POP_JUMP_IF_FALSE 82					      								    								  
							      								     """							  
4 18 LOAD_FAST 2 ( n )					      								    	solution = solution.solution.solution			  
20 LOAD_FAST 3 ( i )					      								    	solution = solution.solution.solution			  
22 LOAD_FAST 0 ( a )					      								    	solution = solution.solution.solution			  
24 BINARY_MULTIPLY					      								    	solution = solution.solution.solution			  
26 BINARY_SUBTRACT					      								    	solution = solution.solution.solution			  
28 LOAD_FAST 1 ( b )					      								    	solution = solution.solution.solution			  
30 BINARY_MODULO					      								    	solution = solution.solution.solution			  
32 LOAD_CONST 1 ( 0 )					      								    	solution = solution.solution.solution			  
34 COMPARE_OP 2 ( == )					      								    	solution = solution.solution.solution			  
36 POP_JUMP_IF_FALSE 72					      								    	solution = solution.solution.solution			  
							      								    	solution = solution.solution.solution			  
5 38 LOAD_GLOBAL 0 ( print )				      								    	solution = solution.solution.solution.solution		  
40 LOAD_CONST 2 ( 'x = ' )				      								    	solution = solution.solution.solution.solution		  
42 LOAD_FAST 3 ( i )					      								    	solution = solution.solution.solution.solution		  
44 LOAD_CONST 3 ( ', y = ' )				      								    	solution = solution.solution.solution.solution		  
46 LOAD_GLOBAL 1 ( int )				      								    	solution = solution.solution.solution.solution		  
48 LOAD_FAST 2 ( n )					      								    	solution = solution.solution.solution.solution		  
50 LOAD_FAST 3 ( i )					      								    	solution = solution.solution.solution			  
52 LOAD_FAST 0 ( a )					      								    	solution = solution.solution.solution.solution		  
54 BINARY_MULTIPLY					      								    	solution = solution.solution.solution.solution		  
56 BINARY_SUBTRACT					      								    	solution = solution.solution.solution.solution		  
58 LOAD_FAST 1 ( b )					      								    	solution = solution.solution.solution.solution		  
60 BINARY_TRUE_DIVIDE					      								    	solution = solution.solution.solution.solution		  
62 CALL_FUNCTION 1					      								    	solution = solution.solution.solution.solution.solution	  
64 CALL_FUNCTION 4					      								    	solution = solution.solution.solution.solution		  
66 POP_TOP						      								    	solution = solution.solution.solution.solution		  
							      								    	solution = solution.solution.solution.solution		  
6 68 LOAD_CONST 1 ( 0 )					      								    	solution = solution.solution.solution.solution		  
70 RETURN_VALUE						      								    	solution = solution.solution.solution.solution		  
							      								    	solution = solution.solution.solution.solution		  
7 >> 72 LOAD_FAST 3 ( i )				      								    	solution = solution.solution.solution.solution.solution	  
74 LOAD_CONST 4 ( 1 )					      								    	solution = solution.solution.solution.solution		  
76 BINARY_ADD						      								    	solution = solution.solution.solution.solution		  
78 STORE_FAST 3 ( i )					      								    	solution = solution.solution.solution			  
80 JUMP_ABSOLUTE 6					      								    	solution = solution.solution.solution			  
>> 82 POP_BLOCK						      								    	solution = solution.solution.solution			  
							      								    	solution = solution.solution.solution			  
8 >> 84 LOAD_GLOBAL 0 ( print )				      								    	solution = solution.solution.solution.solution		  
86 LOAD_CONST 5 ( 'No solution' )			      								    	return solution						  
88 CALL_FUNCTION 1					      								    								  
90 POP_TOP						      								    								  
92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object printRepeating at 0x7fbac0e8bc90, def printRepeating ( arr , size ) :			    def printRepeating ( arr , size = 1 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Repeating elements are " , end = '' )	    	print ( 'Repeating elements are '' and '' are '' and '' a 
2 LOAD_CONST 1 ( 'Repeating elements are ' )		      	  for i in range ( 0 , size ) :				    								  
4 LOAD_CONST 2 ( '' )					      	      for j in range ( i + 1 , size ) :			    								  
6 LOAD_CONST 3 ( ( 'end' , ) )				      		  if arr [ i ] == arr [ j ] :			    								  
8 CALL_FUNCTION_KW 2					      		      print ( arr [ i ] , end = ' ' )		    								  
10 POP_TOP						      								    								  
							      								    								  
3 12 SETUP_LOOP 74 ( to 88 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 LOAD_FAST 1 ( size )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 60 ( to 86 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 SETUP_LOOP 54 ( to 84 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 5 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( size )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 36 ( to 82 )				      								    								  
46 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 3 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 0 ( print )				      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 6 ( ' ' )					      								    								  
74 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
76 CALL_FUNCTION_KW 2					      								    								  
78 POP_TOP						      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 JUMP_ABSOLUTE 24					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 LOAD_CONST 0 ( None )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1
--							      --							    --								  --
Disassembly of <code object getSingle at 0x7fbac<<unk>> ddb0, def getSingle ( arr , n ) :				    def getSingle ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	"""							  
2 STORE_FAST 2 ( result )				      	  for i in range ( 0 , INT_SIZE ) :			     Return the array of the result of the array of values to the 
							      	      sm = 0						     array of values to the array of values to the array of	  
3 4 SETUP_LOOP 86 ( to 92 )				      	      x = ( 1 << i )					     values to return the array of values to the array of values  
6 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , n ) :			     """							  
8 LOAD_CONST 1 ( 0 )					      		  if ( arr [ j ] & x ) :			    	for i in range ( n ) :					  
10 LOAD_GLOBAL 1 ( INT_SIZE )				      		      sm = sm + 1				    	    if i < len ( arr ) :				  
12 CALL_FUNCTION 2					      	      if ( sm % 3 ) :					    		return arr [ i ]				  
14 GET_ITER						      		  result = result | x				    	return arr						  
>> 16 FOR_ITER 72 ( to 90 )				      	  return result						    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 4 ( sm )					      								    								  
							      								    								  
5 24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_LSHIFT					      								    								  
30 STORE_FAST 5 ( x )					      								    								  
							      								    								  
6 32 SETUP_LOOP 38 ( to 72 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 24 ( to 70 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 6 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 5 ( x )					      								    								  
56 BINARY_AND						      								    								  
58 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 60 LOAD_FAST 4 ( sm )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 4 ( sm )					      								    								  
68 JUMP_ABSOLUTE 44					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
9 >> 72 LOAD_FAST 4 ( sm )				      								    								  
74 LOAD_CONST 3 ( 3 )					      								    								  
76 BINARY_MODULO					      								    								  
78 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
10 80 LOAD_FAST 2 ( result )				      								    								  
82 LOAD_FAST 5 ( x )					      								    								  
84 BINARY_OR						      								    								  
86 STORE_FAST 2 ( result )				      								    								  
88 JUMP_ABSOLUTE 16					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
11 >> 92 LOAD_FAST 2 ( result )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		      MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		    MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		  MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object maximumChars at 0x7fbac<<unk>> de def maximumChars ( str ) :				    def maximumChars ( str ) :					  failure : #Results: 1, 10
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	"""							  
2 LOAD_FAST 0 ( str )					      	  res = - 1						     Return a list of the list of the list of values that are the 
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n - 1 ) :			     list of values of the list of values to be 98.		  
6 STORE_FAST 1 ( n )					      	      for j in range ( i + 1 , n ) :			     """							  
							      		  if ( str [ i ] == str [ j ] ) :		    	for i in range ( len ( str ) ) :			  
3 8 LOAD_CONST 1 ( - 1 )				      		      res = max ( res , abs ( j - i - 1 ) )	    	    if i < len ( str ) :				  
10 STORE_FAST 2 ( res )					      	  return res						    		return i					  
							      								    	return None						  
4 12 SETUP_LOOP 84 ( to 98 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 2 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 66 ( to 96 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 SETUP_LOOP 60 ( to 94 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 42 ( to 92 )				      								    								  
50 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( str )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( str )					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 2 ( max )				      								    								  
70 LOAD_FAST 2 ( res )					      								    								  
72 LOAD_GLOBAL 3 ( abs )				      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 3 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 STORE_FAST 2 ( res )					      								    								  
90 JUMP_ABSOLUTE 48					      								    								  
>> 92 POP_BLOCK						      								    								  
>> 94 JUMP_ABSOLUTE 28					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
8 >> 98 LOAD_FAST 2 ( res )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT
--							      --							    --								  --
Disassembly of <code object findTriplet at 0x7fbac0e89d20, fi def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :	    def findTriplet ( a1 , n1 , n1 , n1 , n1 , n1 , n1 ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 90 ( to 92 )				      	  for i in range ( 0 , n1 ) :				    	for i in range ( n1 ) :					  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , n2 ) :			    	    n1 = n1 + n1					  /FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SU
4 LOAD_CONST 1 ( 0 )					      		  for k in range ( 0 , n3 ) :			    	    n1 = n1 + n1					  CH_THAT_THAT_A_B_C_K.py", line 26	def f_filled
6 LOAD_FAST 3 ( n1 )					      		      if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum )  	    n1 = n1 + n1					   ( a1 , n1 , n1 , n1 , n1 , n1 , n1 ) :     ^ Synt
8 CALL_FUNCTION 2					      			  return True				    	    n1 = n1 + n1					  axError: duplicate argument 'n1' in function defin
10 GET_ITER						      	  return False						    	    n1 = n1 + n1					  ition
>> 12 FOR_ITER 76 ( to 90 )				      								    	    n1 = n1 + n1					  
14 STORE_FAST 7 ( i )					      								    	    n1 = n1 + n1					  
							      								    	    n1 = n1 + n1					  
3 16 SETUP_LOOP 70 ( to 88 )				      								    	    n1 = n1 + n1					  
18 LOAD_GLOBAL 0 ( range )				      								    	    n1 = n1 + n1					  
20 LOAD_CONST 1 ( 0 )					      								    	    n1 = n1 + n1					  
22 LOAD_FAST 4 ( n2 )					      								    	    n1 = n1 + n1					  
24 CALL_FUNCTION 2					      								    	    n1 = n1 + n1					  
26 GET_ITER						      								    	    n1 = n1 + n1					  
>> 28 FOR_ITER 56 ( to 86 )				      								    	    n1 = n1 + n1					  
30 STORE_FAST 8 ( j )					      								    	    n1 = n1 + n1					  
							      								    	    n1 = n1 + n1					  
4 32 SETUP_LOOP 50 ( to 84 )				      								    	    n1 = n1 + n1					  
34 LOAD_GLOBAL 0 ( range )				      								    	    n1 = n1 + n1					  
36 LOAD_CONST 1 ( 0 )					      								    	    n1 = n1 + n1					  
38 LOAD_FAST 5 ( n3 )					      								    	    n1 = n1 + n1					  
40 CALL_FUNCTION 2					      								    	    n1 = n1 + n1					  
42 GET_ITER						      								    	    n1 = n1 + n1					  
>> 44 FOR_ITER 36 ( to 82 )				      								    	    n1 = n1 + n1					  
46 STORE_FAST 9 ( k )					      								    	    n1 = n1 + n1					  
							      								    								  
5 48 LOAD_FAST 0 ( a1 )					      								    								  
50 LOAD_FAST 7 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 1 ( a2 )					      								    								  
56 LOAD_FAST 8 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 LOAD_FAST 2 ( a3 )					      								    								  
64 LOAD_FAST 9 ( k )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 6 ( sum )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 76 LOAD_CONST 2 ( True )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 JUMP_ABSOLUTE 28					      								    								  
>> 86 POP_BLOCK						      								    								  
>> 88 JUMP_ABSOLUTE 12					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
7 >> 92 LOAD_CONST 3 ( False )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	      K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	    K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS	  K_TH_SMALLEST_ELEMENT_REMOVING_INTEGERS_NATURAL_NUMBERS
--							      --							    --								  --
Disassembly of <code object ksmallest at 0x7fbac<<unk>> d540, def ksmallest ( arr , n , k ) :				    def ksmallest ( fbfbacacstic , n = 1 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  b = [ 0 ] * MAX ;					    	"""							  
2 BUILD_LIST 1						      	  for i in range ( n ) :				     Return the number of the number of the number of the number  
4 LOAD_GLOBAL 0 ( MAX )					      	      b [ arr [ i ] ] = 1 ;				     number of the number of the number of the number of the numb 
6 BINARY_MULTIPLY					      	  for j in range ( 1 , MAX ) :				     number of the number of the number of the number of the numb 
8 STORE_FAST 3 ( b )					      	      if ( b [ j ] != 1 ) :				     number of the number of the number of the number of the numb 
							      		  k -= 1 ;					     number of the number of the number of the number of the numb 
3 10 SETUP_LOOP 28 ( to 40 )				      	      if ( k is not 1 ) :				     number of the number of number of the number of number of th 
12 LOAD_GLOBAL 1 ( range )				      		  return j ;					     """							  
14 LOAD_FAST 1 ( n )					      								    	n = n - n						  
16 CALL_FUNCTION 1					      								    	return n						  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 16 ( to 38 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 2 ( 1 )					      								    								  
26 LOAD_FAST 3 ( b )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 50 ( to 92 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_GLOBAL 0 ( MAX )				      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 36 ( to 90 )				      								    								  
54 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 56 LOAD_FAST 3 ( b )					      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
7 68 LOAD_FAST 2 ( k )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 INPLACE_SUBTRACT					      								    								  
74 STORE_FAST 2 ( k )					      								    								  
							      								    								  
8 >> 76 LOAD_FAST 2 ( k )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 COMPARE_OP 9 ( is not )				      								    								  
82 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
9 84 LOAD_FAST 5 ( j )					      								    								  
86 RETURN_VALUE						      								    								  
88 JUMP_ABSOLUTE 52					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSEQUENCE_GCD_GREATER_1			      LARGEST_SUBSEQUENCE_GCD_GREATER_1				    LARGEST_SUBSEQUENCE_GCD_GREATER_1				  LARGEST_SUBSEQUENCE_GCD_GREATER_1
--							      --							    --								  --
Disassembly of <code object largestGCDSubsequence at 0x7fbac0 def largestGCDSubsequence ( arr , n ) :			    def largestGCDSubsequence ( arr ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( ans )					      	  maxele = max ( arr )					     Return the array of the ans of the ans and the ans of the an /eval_scripts/dis_sa-python_sa.test/LARGEST_SUBSEQ
							      	  for i in range ( 2 , maxele + 1 ) :			     returned to the ans of the ans and ans are			  UENCE_GCD_GREATER_1.py", line 89, in <module>
3 4 LOAD_GLOBAL 0 ( max )				      	      count = 0						     returned to the ans of the ans and ans are			  if f_filled(*parameters_set) == f_gold(*parameters
6 LOAD_FAST 0 ( arr )					      	      for j in range ( n ) :				     returned as ans as ans as ans and ans			  _set): TypeError: f_filled() takes 1 positional ar
8 CALL_FUNCTION 1					      		  if ( arr [ j ] % i == 0 ) :			     """							  gument but 2 were given
10 STORE_FAST 3 ( maxele )				      		      count += 1				    	# if ans are returned as ans				  
							      	      ans = max ( ans , count )				    	arr = arr.split ( ' ' )					  
4 12 SETUP_LOOP 78 ( to 92 )				      	  return ans						    	if arr [ 0 ] == ' ' :					  
14 LOAD_GLOBAL 1 ( range )				      								    	    arr [ 0 ] = arr [ 0 ]				  
16 LOAD_CONST 2 ( 2 )					      								    	else :							  
18 LOAD_FAST 3 ( maxele )				      								    	    arr [ 1 ] = arr [ 0 ]				  
20 LOAD_CONST 3 ( 1 )					      								    	arr [ 1 ] = arr [ 0 ]					  
22 BINARY_ADD						      								    	arr [ 2 ] = arr [ 0 ]					  
24 CALL_FUNCTION 2					      								    	arr [ 3 ] = arr [ 0 ]					  
26 GET_ITER						      								    	arr [ 1 ] = arr [ 0 ]					  
>> 28 FOR_ITER 60 ( to 90 )				      								    	arr [ 2 ] = arr [ 0 ]					  
30 STORE_FAST 4 ( i )					      								    	arr [ 3 ] = arr [ 0 ]					  
							      								    	arr [ 4 ] = arr [ 0 ]					  
5 32 LOAD_CONST 1 ( 0 )					      								    	arr [ 5 ] = arr [ 0 ]					  
34 STORE_FAST 5 ( count )				      								    	arr [ 6 ] = arr [ 0 ]					  
							      								    	arr [ 6 ] = arr [ 7 ]					  
6 36 SETUP_LOOP 40 ( to 78 )				      								    	arr [ 8 ] = arr [ 9 ]					  
38 LOAD_GLOBAL 1 ( range )				      								    	arr [ 6 ] = arr [ 10 ]					  
40 LOAD_FAST 1 ( n )					      								    	arr [ 11 ] = arr [ 12 ]					  
42 CALL_FUNCTION 1					      								    	arr [ 13 ] = arr [ 14 ]					  
44 GET_ITER						      								    	arr [ 15 ] = arr [ 16 ]					  
>> 46 FOR_ITER 28 ( to 76 )				      								    	arr [ 17 ] = arr [ 18 ]					  
48 STORE_FAST 6 ( j )					      								    	arr [ 17 ] = arr [ 18 ]					  
							      								    	arr [ 18 ] = arr [ 19 ]					  
7 50 LOAD_FAST 0 ( arr )				      								    	arr [ 18 ] = arr [ 19 ]					  
52 LOAD_FAST 6 ( j )					      								    	arr [ 18 ] = arr [ 19 ]					  
54 BINARY_SUBSCR					      								    	arr [ 20 ] = arr [ 20 ]					  
56 LOAD_FAST 4 ( i )					      								    	arr [ 21 ] = arr [ 20 ]					  
58 BINARY_MODULO					      								    	arr [ 21 ] = arr [ 22 ]					  
60 LOAD_CONST 1 ( 0 )					      								    	arr [ 21 ] = arr [ 22 ]					  
62 COMPARE_OP 2 ( == )					      								    	arr [ 21 ] = arr [ 22 ]					  
64 POP_JUMP_IF_FALSE 46					      								    	arr [ 21 ] = arr [ 22 ]					  
							      								    	arr [ 21 ] = arr [ 22 ]					  
8 66 LOAD_FAST 5 ( count )				      								    	arr [ 22 ] = arr [ 22 ]					  
68 LOAD_CONST 3 ( 1 )					      								    	arr [ 22 ] = arr [ 21 ]					  
70 INPLACE_ADD						      								    	return arr						  
72 STORE_FAST 5 ( count )				      								    								  
74 JUMP_ABSOLUTE 46					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_GLOBAL 0 ( max )				      								    								  
80 LOAD_FAST 2 ( ans )					      								    								  
82 LOAD_FAST 5 ( count )				      								    								  
84 CALL_FUNCTION 2					      								    								  
86 STORE_FAST 2 ( ans )					      								    								  
88 JUMP_ABSOLUTE 28					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 2 ( ans )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	      PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	    PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER	  PRINT_STRING_IGNORING_ALTERNATE_OCCURRENCES_CHARACTER
--							      --							    --								  --
Disassembly of <code object printStringAlternate at 0x7fbac<< def printStringAlternate ( string ) :			    def printStringAlternate ( string ) :			  script_not_found : None
2 0 BUILD_MAP 0						      	  occ = { }						    	occ = [ ]						  
2 STORE_FAST 1 ( occ )					      	  for i in range ( 0 , len ( string ) ) :		    	occ = [ ]						  
							      	      temp = string [ i ].lower ( )			    	for i in range ( len ( occ ) ) :			  
3 4 SETUP_LOOP 82 ( to 88 )				      	      occ [ temp ] = occ.get ( temp , 0 ) + 1		    	    occ = i						  
6 LOAD_GLOBAL 0 ( range )				      	      if occ [ temp ] & 1 :				    	    occ = i						  
8 LOAD_CONST 1 ( 0 )					      		  print ( string [ i ] , end = "" )		    	    occ = i						  
10 LOAD_GLOBAL 1 ( len )				      	  print ( )						    	    occ = i						  
12 LOAD_FAST 0 ( string )				      								    	    occ = i						  
14 CALL_FUNCTION 1					      								    	    occ = i						  
16 CALL_FUNCTION 2					      								    	    occ = i						  
18 GET_ITER						      								    	    occ = i						  
>> 20 FOR_ITER 64 ( to 86 )				      								    	    occ = i						  
22 STORE_FAST 2 ( i )					      								    	    occ = i						  
							      								    	    occ = i						  
4 24 LOAD_FAST 0 ( string )				      								    	    occ = i						  
26 LOAD_FAST 2 ( i )					      								    	    occ = i						  
28 BINARY_SUBSCR					      								    	    occ = i						  
30 LOAD_METHOD 2 ( lower )				      								    	    occ = i						  
32 CALL_METHOD 0					      								    	    occ = i						  
34 STORE_FAST 3 ( temp )				      								    	    occ = i						  
							      								    	    occ = i						  
5 36 LOAD_FAST 1 ( occ )				      								    	    occ = i						  
38 LOAD_METHOD 3 ( get )				      								    	    occ = i						  
40 LOAD_FAST 3 ( temp )					      								    	    occ = i						  
42 LOAD_CONST 1 ( 0 )					      								    	    occ = i						  
44 CALL_METHOD 2					      								    	    occ = i						  
46 LOAD_CONST 2 ( 1 )					      								    	    occ = i						  
48 BINARY_ADD						      								    	    occ = i						  
50 LOAD_FAST 1 ( occ )					      								    	    occ = i						  
52 LOAD_FAST 3 ( temp )					      								    	    occ = i						  
54 STORE_SUBSCR						      								    	    occ = i						  
							      								    	    occ = i						  
6 56 LOAD_FAST 1 ( occ )				      								    	    occ = i						  
58 LOAD_FAST 3 ( temp )					      								    	    occ = i						  
60 BINARY_SUBSCR					      								    	    occ = i						  
62 LOAD_CONST 2 ( 1 )					      								    	    occ = i						  
64 BINARY_AND						      								    	    occ = i						  
66 POP_JUMP_IF_FALSE 20					      								    	    occ = i						  
							      								    	    occ = i						  
7 68 LOAD_GLOBAL 4 ( print )				      								    	    occ = i						  
70 LOAD_FAST 0 ( string )				      								    	    occ = i						  
72 LOAD_FAST 2 ( i )					      								    	    occ = i						  
74 BINARY_SUBSCR					      								    	    occ = i						  
76 LOAD_CONST 3 ( '' )					      								    	    occ = i						  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    	    occ = i						  
80 CALL_FUNCTION_KW 2					      								    	    occ = i						  
82 POP_TOP						      								    	    occ = i						  
84 JUMP_ABSOLUTE 20					      								    	    occ = i						  
>> 86 POP_BLOCK						      								    	    occ = i						  
							      								    	    occ = i						  
8 >> 88 LOAD_GLOBAL 4 ( print )				      								    	    occ = i						  
90 CALL_FUNCTION 0					      								    	    occ = i						  
92 POP_TOP						      								    	    occ = i						  
94 LOAD_CONST 0 ( None )				      								    	    occ = i						  
96 RETURN_VALUE NEW_LINE				      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
							      								    	    occ = i						  
-							      -								    	    occ =-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY			  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac<<unk>> de def binarySearch ( arr , low , high , key ) :		    def binarySearch ( arr , low , high , high ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( high )				      	  if ( high < low ) :					    	if low < high :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( low )					      	      return - 1					    	    return None						  /SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY.py", l
4 COMPARE_OP 0 ( < )					      	  mid = ( low + high ) / 2				    	elif low < high :					  ine 28     def f_filled ( arr , low , high , high
6 POP_JUMP_IF_FALSE 12					      	  if ( key == arr [ int ( mid ) ] ) :			    	    return None						  ) :	  ^ SyntaxError: duplicate argument 'high' i
							      	      return mid					    	elif low < high :					  n function definition
3 8 LOAD_CONST 1 ( - 1 )				      	  if ( key > arr [ int ( mid ) ] ) :			    	    return None						  
10 RETURN_VALUE						      	      return binarySearch ( arr , ( mid + 1 ) , high , key  	elif low < high :					  
							      	  return ( binarySearch ( arr , low , ( mid - 1 ) , key ) ) 	    return None						  
4 >> 12 LOAD_FAST 1 ( low )				      								    	elif low < high :					  
14 LOAD_FAST 2 ( high )					      								    	    return None						  
16 BINARY_ADD						      								    	elif low < high :					  
18 LOAD_CONST 2 ( 2 )					      								    	    return None						  
20 BINARY_TRUE_DIVIDE					      								    	elif low < high :					  
22 STORE_FAST 4 ( mid )					      								    	    return None						  
							      								    	elif low < high :					  
5 24 LOAD_FAST 3 ( key )				      								    	    return None						  
26 LOAD_FAST 0 ( arr )					      								    	elif low < high :					  
28 LOAD_GLOBAL 0 ( int )				      								    	    return None						  
30 LOAD_FAST 4 ( mid )					      								    	elif low < high :					  
32 CALL_FUNCTION 1					      								    	    return None						  
34 BINARY_SUBSCR					      								    	elif low < high :					  
36 COMPARE_OP 2 ( == )					      								    	    return None						  
38 POP_JUMP_IF_FALSE 44					      								    	elif low < high :					  
							      								    	    return None						  
6 40 LOAD_FAST 4 ( mid )				      								    	elif low < high :					  
42 RETURN_VALUE						      								    	    return None						  
							      								    	elif low < high :					  
7 >> 44 LOAD_FAST 3 ( key )				      								    	    return None						  
46 LOAD_FAST 0 ( arr )					      								    	elif low < high :					  
48 LOAD_GLOBAL 0 ( int )				      								    	    return None						  
50 LOAD_FAST 4 ( mid )					      								    	elif low < high :					  
52 CALL_FUNCTION 1					      								    	    return None						  
54 BINARY_SUBSCR					      								    	elif low < high :					  
56 COMPARE_OP 4 ( > )					      								    	    return None						  
58 POP_JUMP_IF_FALSE 78					      								    	elif low < high :					  
							      								    	    return None						  
8 60 LOAD_GLOBAL 1 ( binarySearch )			      								    	elif low < high :					  
62 LOAD_FAST 0 ( arr )					      								    	    return None						  
64 LOAD_FAST 4 ( mid )					      								    	elif low < high :					  
66 LOAD_CONST 3 ( 1 )					      								    	    return None						  
68 BINARY_ADD						      								    	elif low < high :					  
70 LOAD_FAST 2 ( high )					      								    	    return None						  
72 LOAD_FAST 3 ( key )					      								    	elif low < high :					  
74 CALL_FUNCTION 4					      								    	    return None						  
76 RETURN_VALUE						      								    	elif low < high :					  
							      								    	    return None						  
9 >> 78 LOAD_GLOBAL 1 ( binarySearch )			      								    	elif low < high :					  
80 LOAD_FAST 0 ( arr )					      								    	    return None						  
82 LOAD_FAST 1 ( low )					      								    	elif low < high :					  
84 LOAD_FAST 4 ( mid )					      								    	    return None						  
86 LOAD_CONST 3 ( 1 )					      								    	elif low < high :					  
88 BINARY_SUBTRACT					      								    	    return None						  
90 LOAD_FAST 3 ( key )					      								    	elif low < high :					  
92 CALL_FUNCTION 4					      								    	    return None						  
94 RETURN_VALUE NEW_LINE				      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low > high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif low < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		      SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		    SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		  SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER
--							      --							    --								  --
Disassembly of <code object divSum at 0x7fbac0e89d20, file "< def divSum ( num ) :					    def divSum ( num ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = [ ]						  
2 STORE_FAST 1 ( result )				      	  i = 2							    	result = [ ]						  
							      	  while i <= ( math.sqrt ( num ) ) :			    	for i in range ( num ) :				  
3 4 LOAD_CONST 2 ( 2 )					      	      if ( num % i == 0 ) :				    	    result.append ( i )					  
6 STORE_FAST 2 ( i )					      		  if ( i == ( num / i ) ) :			    	return result						  
							      		      result = result + i ;			    								  
4 8 SETUP_LOOP 76 ( to 86 )				      		  else :					    								  
>> 10 LOAD_FAST 2 ( i )					      		      result = result + ( i + num / i ) ;	    								  
12 LOAD_GLOBAL 0 ( math )				      	      i = i + 1						    								  
14 LOAD_METHOD 1 ( sqrt )				      	  return ( result + 1 ) ;				    								  
16 LOAD_FAST 0 ( num )					      								    								  
18 CALL_METHOD 1					      								    								  
20 COMPARE_OP 1 ( <= )					      								    								  
22 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( num )				      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
6 36 LOAD_FAST 2 ( i )					      								    								  
38 LOAD_FAST 0 ( num )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( result )				      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 1 ( result )				      								    								  
56 JUMP_FORWARD 16 ( to 74 )				      								    								  
							      								    								  
9 >> 58 LOAD_FAST 1 ( result )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_FAST 0 ( num )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_TRUE_DIVIDE					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 1 ( result )				      								    								  
							      								    								  
10 >> 74 LOAD_FAST 2 ( i )				      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 2 ( i )					      								    								  
82 JUMP_ABSOLUTE 10					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_FAST 1 ( result )				      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_COMMON_SUPERSEQUENCE				      SHORTEST_COMMON_SUPERSEQUENCE				    SHORTEST_COMMON_SUPERSEQUENCE				  SHORTEST_COMMON_SUPERSEQUENCE
--							      --							    --								  --
Disassembly of <code object superSeq at 0x7fbac<<unk>> ddb0,  def superSeq ( X , Y , m , n ) :				    def superSeq ( X , Y ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if ( not m ) : return n				    	if X > Y :						  
2 POP_JUMP_IF_TRUE 8					      	  if ( not n ) : return m				    	    return X [ X ]					  
4 LOAD_FAST 3 ( n )					      	  if ( X [ m - 1 ] == Y [ n - 1 ] ) :			    	else :							  
6 RETURN_VALUE						      	      return 1 + superSeq ( X , Y , m - 1 , n - 1 )	    	    return X [ X ]					  
							      	  return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSe 								  
3 >> 8 LOAD_FAST 3 ( n )				      								    								  
10 POP_JUMP_IF_TRUE 16					      								    								  
12 LOAD_FAST 2 ( m )					      								    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( X )				      								    								  
18 LOAD_FAST 2 ( m )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( Y )					      								    								  
28 LOAD_FAST 3 ( n )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
5 40 LOAD_CONST 1 ( 1 )					      								    								  
42 LOAD_GLOBAL 0 ( superSeq )				      								    								  
44 LOAD_FAST 0 ( X )					      								    								  
46 LOAD_FAST 1 ( Y )					      								    								  
48 LOAD_FAST 2 ( m )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 3 ( n )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 4					      								    								  
62 BINARY_ADD						      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
6 >> 66 LOAD_CONST 1 ( 1 )				      								    								  
68 LOAD_GLOBAL 1 ( min )				      								    								  
70 LOAD_GLOBAL 0 ( superSeq )				      								    								  
72 LOAD_FAST 0 ( X )					      								    								  
74 LOAD_FAST 1 ( Y )					      								    								  
76 LOAD_FAST 2 ( m )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 3 ( n )					      								    								  
84 CALL_FUNCTION 4					      								    								  
86 LOAD_GLOBAL 0 ( superSeq )				      								    								  
88 LOAD_FAST 0 ( X )					      								    								  
90 LOAD_FAST 1 ( Y )					      								    								  
92 LOAD_FAST 2 ( m )					      								    								  
94 LOAD_FAST 3 ( n )					      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 CALL_FUNCTION 4					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 BINARY_ADD						      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS
--							      --							    --								  --
Disassembly of <code object subset at 0x7fbac<<unk>> de40, fi def subset ( ar , n ) :					    def subset ( ar , n , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( res )					      	  ar.sort ( )						    								  /MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS.py", lin
							      	  for i in range ( 0 , n ) :				    								  e 52	   print("#Results: %i, %i" % (n_success, le
3 4 LOAD_FAST 0 ( ar )					      	      count = 1						    								  n(param)))
6 LOAD_METHOD 0 ( sort )				      	      for i in range ( n - 1 ) :			    								  		 ^ SyntaxError: EOF while scanning t
8 CALL_METHOD 0						      		  if ar [ i ] == ar [ i + 1 ] :			    								  riple-quoted string literal
10 POP_TOP						      		      count += 1				    								  
							      		  else :					    								  
4 12 SETUP_LOOP 86 ( to 100 )				      		      break					    								  
14 LOAD_GLOBAL 1 ( range )				      	      res = max ( res , count )				    								  
16 LOAD_CONST 1 ( 0 )					      	  return res						    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 72 ( to 98 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_CONST 2 ( 1 )					      								    								  
30 STORE_FAST 4 ( count )				      								    								  
							      								    								  
6 32 SETUP_LOOP 52 ( to 86 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 36 ( to 84 )				      								    								  
48 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( ar )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( ar )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 70 LOAD_FAST 4 ( count )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 4 ( count )				      								    								  
78 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
10 >> 80 BREAK_LOOP					      								    								  
82 JUMP_ABSOLUTE 46					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
11 >> 86 LOAD_GLOBAL 2 ( max )				      								    								  
88 LOAD_FAST 2 ( res )					      								    								  
90 LOAD_FAST 4 ( count )				      								    								  
92 CALL_FUNCTION 2					      								    								  
94 STORE_FAST 2 ( res )					      								    								  
96 JUMP_ABSOLUTE 24					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
12 >> 100 LOAD_FAST 2 ( res )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_1				      FRIENDS_PAIRING_PROBLEM_1					    FRIENDS_PAIRING_PROBLEM_1					  FRIENDS_PAIRING_PROBLEM_1
--							      --							    --								  --
Disassembly of <code object countFriendsPairings at 0x7fbac<< def countFriendsPairings ( n ) :				    def countFriendsPairings ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  dp = [ - 1 ] * 100					    	"""							  
2 BUILD_LIST 1						      	  if ( dp [ n ] != - 1 ) :				     Returns the number of the number of the number of the number 
4 LOAD_CONST 2 ( 100 )					      	      return dp [ n ]					     number number number number number number number number numb 
6 BINARY_MULTIPLY					      	  if ( n > 2 ) :					     """							  
8 STORE_FAST 1 ( dp )					      	      dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 	return ( n - 1 )					  
							      	      return dp [ n ]					    								  
3 10 LOAD_FAST 1 ( dp )					      	  else :						    								  
12 LOAD_FAST 0 ( n )					      	      dp [ n ] = n					    								  
14 BINARY_SUBSCR					      	      return dp [ n ]					    								  
16 LOAD_CONST 1 ( - 1 )					      								    								  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
4 22 LOAD_FAST 1 ( dp )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
5 >> 30 LOAD_FAST 0 ( n )				      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
6 38 LOAD_GLOBAL 0 ( countFriendsPairings )		      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 4 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_FAST 0 ( n )					      								    								  
50 LOAD_CONST 4 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_GLOBAL 0 ( countFriendsPairings )		      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 1 ( dp )					      								    								  
70 LOAD_FAST 0 ( n )					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
7 74 LOAD_FAST 1 ( dp )					      								    								  
76 LOAD_FAST 0 ( n )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 RETURN_VALUE						      								    								  
							      								    								  
9 >> 82 LOAD_FAST 0 ( n )				      								    								  
84 LOAD_FAST 1 ( dp )					      								    								  
86 LOAD_FAST 0 ( n )					      								    								  
88 STORE_SUBSCR						      								    								  
							      								    								  
10 90 LOAD_FAST 1 ( dp )				      								    								  
92 LOAD_FAST 0 ( n )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 RETURN_VALUE						      								    								  
98 LOAD_CONST 0 ( None )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_1
--							      --							    --								  --
Disassembly of <code object getRemainder at 0x7fbac0e8bc90, f def getRemainder ( num , divisor ) :			    def getRemainder ( num , divisor , divisor , divisor , diviso error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( divisor )				      	  if ( divisor == 0 ) :					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	      return False					    								  /PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR
4 COMPARE_OP 2 ( == )					      	  if ( divisor < 0 ) :					    								  _OPERATOR_1.py", line 53     print("#Results: %i,
6 POP_JUMP_IF_FALSE 12					      	      divisor = - divisor				    								  %i" % (n_success, len(param)))
							      	  if ( num < 0 ) :					    								  				     ^ SyntaxError:
3 8 LOAD_CONST 2 ( False )				      	      num = - num					    								  EOF while scanning triple-quoted string literal
10 RETURN_VALUE						      	  i = 1							    								  
							      	  product = 0						    								  
4 >> 12 LOAD_FAST 1 ( divisor )				      	  while ( product <= num ) :				    								  
14 LOAD_CONST 1 ( 0 )					      	      product = divisor * i				    								  
16 COMPARE_OP 0 ( < )					      	      i += 1						    								  
18 POP_JUMP_IF_FALSE 26					      	  return num - ( product - divisor )			    								  
							      								    								  
5 20 LOAD_FAST 1 ( divisor )				      								    								  
22 UNARY_NEGATIVE					      								    								  
24 STORE_FAST 1 ( divisor )				      								    								  
							      								    								  
6 >> 26 LOAD_FAST 0 ( num )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
7 34 LOAD_FAST 0 ( num )				      								    								  
36 UNARY_NEGATIVE					      								    								  
38 STORE_FAST 0 ( num )					      								    								  
							      								    								  
8 >> 40 LOAD_CONST 3 ( 1 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 44 LOAD_CONST 1 ( 0 )					      								    								  
46 STORE_FAST 3 ( product )				      								    								  
							      								    								  
10 48 SETUP_LOOP 28 ( to 78 )				      								    								  
>> 50 LOAD_FAST 3 ( product )				      								    								  
52 LOAD_FAST 0 ( num )					      								    								  
54 COMPARE_OP 1 ( <= )					      								    								  
56 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
11 58 LOAD_FAST 1 ( divisor )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 STORE_FAST 3 ( product )				      								    								  
							      								    								  
12 66 LOAD_FAST 2 ( i )					      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( i )					      								    								  
74 JUMP_ABSOLUTE 50					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
13 >> 78 LOAD_FAST 0 ( num )				      								    								  
80 LOAD_FAST 3 ( product )				      								    								  
82 LOAD_FAST 1 ( divisor )				      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS
--							      --							    --								  --
Disassembly of <code object countGroups at 0x7fbac<<unk>> d54 def countGroups ( position , previous_sum , length , num ) :  def countGroups ( position , previous_count ) :		  script_not_found : None
2 0 LOAD_FAST 0 ( position )				      	  if ( position == length ) :				    	if len ( position ) > 0 :				  
2 LOAD_FAST 2 ( length )				      	      return 1						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  res = 0						    	if len ( position ) > 0 :				  
6 POP_JUMP_IF_FALSE 12					      	  sum = 0						    	    return 1						  
							      	  for i in range ( position , length ) :		    	return 0						  
3 8 LOAD_CONST 1 ( 1 )					      	      sum = sum + int ( num [ i ] )			    								  
10 RETURN_VALUE						      	      if ( sum >= previous_sum ) :			    								  
							      		  res = res + countGroups ( i + 1 , sum , length ,  								  
4 >> 12 LOAD_CONST 2 ( 0 )				      	  return res						    								  
14 STORE_FAST 4 ( res )					      								    								  
							      								    								  
5 16 LOAD_CONST 2 ( 0 )					      								    								  
18 STORE_FAST 5 ( sum )					      								    								  
							      								    								  
6 20 SETUP_LOOP 64 ( to 86 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 0 ( position )				      								    								  
26 LOAD_FAST 2 ( length )				      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 50 ( to 84 )				      								    								  
34 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 36 LOAD_FAST 5 ( sum )				      								    								  
38 LOAD_GLOBAL 1 ( int )				      								    								  
40 LOAD_FAST 3 ( num )					      								    								  
42 LOAD_FAST 6 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 5 ( sum )					      								    								  
							      								    								  
8 52 LOAD_FAST 5 ( sum )				      								    								  
54 LOAD_FAST 1 ( previous_sum )				      								    								  
56 COMPARE_OP 5 ( >= )					      								    								  
58 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
9 60 LOAD_FAST 4 ( res )				      								    								  
62 LOAD_GLOBAL 2 ( countGroups )			      								    								  
64 LOAD_FAST 6 ( i )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 5 ( sum )					      								    								  
72 LOAD_FAST 2 ( length )				      								    								  
74 LOAD_FAST 3 ( num )					      								    								  
76 CALL_FUNCTION 4					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 4 ( res )					      								    								  
82 JUMP_ABSOLUTE 32					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 4 ( res )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	      NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	    NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	  NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT
--							      --							    --								  --
Disassembly of <code object sumEqualProduct at 0x7fbac<<unk>> def sumEqualProduct ( a , n ) :				    def sumEqualProduct ( a , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  zero = 0						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( zero )					      	  two = 0						     Return the number of zero to a zero number of the zero to th /eval_scripts/dis_sa-python_sa.test/NUMBER_OF_PAIR
							      	  for i in range ( n ) :				     number of the zero number of the zero number of the zero num S_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT.py", lin
3 4 LOAD_CONST 1 ( 0 )					      	      if a [ i ] == 0 :					     number of the zero number of the zero number of the zero num e 60, in <module>	if f_filled(*parameters_set)
6 STORE_FAST 3 ( two )					      		  zero += 1					     the zero number of the zero number of the zero number of the  == f_gold(*parameters_set):	 File "/home/ubuntu/
							      	      if a [ i ] == 2 :					     the zero number of the zero number of the zero number of the TransCoder/models/eval/bt/152w65bl69/eval_scripts/
4 8 SETUP_LOOP 56 ( to 66 )				      		  two += 1					     the zero number of the zero number of zero number of zero nu dis_sa-python_sa.test/NUMBER_OF_PAIRS_IN_AN_ARRAY_
10 LOAD_GLOBAL 0 ( range )				      	  cnt = ( zero * ( zero - 1 ) ) // 2 + \		     the zero number of zero number of zero number of zero number HAVING_SUM_EQUAL_TO_PRODUCT.py", line 42, in f_fil
12 LOAD_FAST 1 ( n )					      	      ( two * ( two - 1 ) ) // 2			     zero number of zero number of zero number of zero number of  led	  return np.sum ( a ) [ n ] [ n ] [ n ] [ n
14 CALL_FUNCTION 1					      	  return cnt						     zero number of zero number of zero number of zero number of  ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ]
16 GET_ITER						      								     """							  [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [
>> 18 FOR_ITER 44 ( to 64 )				      								    	return np.sum ( a ) [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n
20 STORE_FAST 4 ( i )					      								    								  ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ]
							      								    								  [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [ n ] [
5 22 LOAD_FAST 0 ( a )					      								    								  n ] [ n ] [ n ] [ n ] [ n ] IndexError: invalid in
24 LOAD_FAST 4 ( i )					      								    								  dex to scalar variable.
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( zero )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( zero )				      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( a )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 3 ( 2 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
8 54 LOAD_FAST 3 ( two )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( two )					      								    								  
62 JUMP_ABSOLUTE 18					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_FAST 2 ( zero )				      								    								  
68 LOAD_FAST 2 ( zero )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 BINARY_FLOOR_DIVIDE					      								    								  
							      								    								  
10 80 LOAD_FAST 3 ( two )				      								    								  
82 LOAD_FAST 3 ( two )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 BINARY_FLOOR_DIVIDE					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 5 ( cnt )					      								    								  
							      								    								  
11 98 LOAD_FAST 5 ( cnt )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	      RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	    RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	  RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING
--							      --							    --								  --
Disassembly of <code object getMaxOccuringChar at 0x7fbac<<un def getMaxOccuringChar ( str ) :				    def getMaxOccuringChar ( str ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * ASCII_SIZE				    	"""							  
2 BUILD_LIST 1						      	  max = - 1						     Return the number of the string of the string in the string  
4 LOAD_GLOBAL 0 ( ASCII_SIZE )				      	  c = ''						     string to the string string to the string of the string to t 
6 BINARY_MULTIPLY					      	  for i in str :					     """							  
8 STORE_FAST 1 ( count )				      	      count [ ord ( i ) ] += 1 ;			    	return str ( str ( str ) )				  
							      	  for i in str :					    								  
3 10 LOAD_CONST 2 ( - 1 )				      	      if max < count [ ord ( i ) ] :			    								  
12 STORE_FAST 2 ( max )					      		  max = count [ ord ( i ) ]			    								  
							      		  c = i						    								  
4 14 LOAD_CONST 3 ( '' )				      	  return c						    								  
16 STORE_FAST 3 ( c )					      								    								  
							      								    								  
5 18 SETUP_LOOP 32 ( to 52 )				      								    								  
20 LOAD_FAST 0 ( str )					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 24 ( to 50 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 1 ( count )				      								    								  
30 LOAD_GLOBAL 1 ( ord )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 DUP_TOP_TWO						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 4 ( 1 )					      								    								  
42 INPLACE_ADD						      								    								  
44 ROT_THREE						      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 24					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 SETUP_LOOP 44 ( to 98 )				      								    								  
54 LOAD_FAST 0 ( str )					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 36 ( to 96 )				      								    								  
60 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 62 LOAD_FAST 2 ( max )				      								    								  
64 LOAD_FAST 1 ( count )				      								    								  
66 LOAD_GLOBAL 1 ( ord )				      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
9 78 LOAD_FAST 1 ( count )				      								    								  
80 LOAD_GLOBAL 1 ( ord )				      								    								  
82 LOAD_FAST 4 ( i )					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_SUBSCR					      								    								  
88 STORE_FAST 2 ( max )					      								    								  
							      								    								  
10 90 LOAD_FAST 4 ( i )					      								    								  
92 STORE_FAST 3 ( c )					      								    								  
94 JUMP_ABSOLUTE 58					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
11 >> 98 LOAD_FAST 3 ( c )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		      NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		    NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		  NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER
--							      --							    --								  --
Disassembly of <code object minimumBox at 0x7fbac<<unk>> d540 def minimumBox ( arr , n ) :				    def minimumBox ( arr , n , * args , ** kwargs ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( collections )			      	  q = collections.deque ( [ ] )				    	collections = collections.deque ( [ ] , [ ] , [ ] , [ ] , l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_METHOD 1 ( deque )				      	  arr.sort ( )						    	return collections.deque ( collections.deque ( collection /NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER.p
4 BUILD_LIST 0						      	  q.append ( arr [ 0 ] )				    								  y", line 32	  collections = collections.deque (
6 CALL_METHOD 1						      	  for i in range ( 1 , n ) :				    								  [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [
8 STORE_FAST 2 ( q )					      	      now = q [ 0 ]					    								  ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ]
							      	      if ( arr [ i ] >= 2 * now ) :			    								  
3 10 LOAD_FAST 0 ( arr )				      		  q.popleft ( )					    								  
12 LOAD_METHOD 2 ( sort )				      	      q.append ( arr [ i ] )				    								  		    ^ SyntaxError: invalid syntax
14 CALL_METHOD 0					      	  return len ( q )					    								  
16 POP_TOP						      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( q )					      								    								  
20 LOAD_METHOD 3 ( append )				      								    								  
22 LOAD_FAST 0 ( arr )					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 CALL_METHOD 1					      								    								  
30 POP_TOP						      								    								  
							      								    								  
5 32 SETUP_LOOP 64 ( to 98 )				      								    								  
34 LOAD_GLOBAL 4 ( range )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 50 ( to 96 )				      								    								  
46 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 48 LOAD_FAST 2 ( q )					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 4 ( now )					      								    								  
							      								    								  
7 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( 2 )					      								    								  
64 LOAD_FAST 4 ( now )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 COMPARE_OP 5 ( >= )					      								    								  
70 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( q )					      								    								  
74 LOAD_METHOD 5 ( popleft )				      								    								  
76 CALL_METHOD 0					      								    								  
78 POP_TOP						      								    								  
							      								    								  
9 >> 80 LOAD_FAST 2 ( q )				      								    								  
82 LOAD_METHOD 3 ( append )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_METHOD 1					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 44					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
10 >> 98 LOAD_GLOBAL 6 ( len )				      								    								  
100 LOAD_FAST 2 ( q )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	      FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	    FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	  FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE
--							      --							    --								  --
Disassembly of <code object printDuplicates at 0x7fbac<<unk>> def printDuplicates ( arr ) :				    def printDuplicates ( arr , dict ) :			  script_not_found : None
2 0 BUILD_MAP 0						      	  dict = { }						    	"""							  
2 STORE_FAST 1 ( dict )					      	  for ele in arr :					     Returns a list of the file and returns the list of the file  
							      	      try :						     to the file names in the file names to the file names.	  
3 4 SETUP_LOOP 54 ( to 60 )				      		  dict [ ele ] += 1				     """							  
6 LOAD_FAST 0 ( arr )					      	      except :						    	try :							  
8 GET_ITER						      		  dict [ ele ] = 1				    	    for file in dict ( dict ( dict ( dict ( dict ( dict ( 
>> 10 FOR_ITER 46 ( to 58 )				      	  for item in dict :					    								  
12 STORE_FAST 2 ( ele )					      	      if ( dict [ item ] > 1 ) :			    								  
							      		  print ( item , end = " " )			    								  
4 14 SETUP_EXCEPT 20 ( to 36 )				      	  print ( "\n" )					    								  
							      								    								  
5 16 LOAD_FAST 1 ( dict )				      								    								  
18 LOAD_FAST 2 ( ele )					      								    								  
20 DUP_TOP_TWO						      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 INPLACE_ADD						      								    								  
28 ROT_THREE						      								    								  
30 STORE_SUBSCR						      								    								  
32 POP_BLOCK						      								    								  
34 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
6 >> 36 POP_TOP						      								    								  
38 POP_TOP						      								    								  
40 POP_TOP						      								    								  
							      								    								  
7 42 LOAD_CONST 1 ( 1 )					      								    								  
44 LOAD_FAST 1 ( dict )					      								    								  
46 LOAD_FAST 2 ( ele )					      								    								  
48 STORE_SUBSCR						      								    								  
50 POP_EXCEPT						      								    								  
52 JUMP_ABSOLUTE 10					      								    								  
54 END_FINALLY						      								    								  
56 JUMP_ABSOLUTE 10					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 36 ( to 98 )				      								    								  
62 LOAD_FAST 1 ( dict )					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 28 ( to 96 )				      								    								  
68 STORE_FAST 3 ( item )				      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( dict )				      								    								  
72 LOAD_FAST 3 ( item )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 COMPARE_OP 4 ( > )					      								    								  
80 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
10 82 LOAD_GLOBAL 0 ( print )				      								    								  
84 LOAD_FAST 3 ( item )					      								    								  
86 LOAD_CONST 2 ( ' ' )					      								    								  
88 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
90 CALL_FUNCTION_KW 2					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 66					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
11 >> 98 LOAD_GLOBAL 0 ( print )			      								    								  
100 LOAD_CONST 4 ( '\n' )				      								    								  
102 CALL_FUNCTION 1					      								    								  
104 POP_TOP						      								    								  
106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		      MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		    MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		  MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX
--							      --							    --								  --
Disassembly of <code object maxDecimalValue at 0x7fbac<<unk>> def maxDecimalValue ( mat , i , j , p ) :			    def maxDecimalValue ( mat , i , n , v , v , v , v , v , v , v script_not_found : None
2 0 LOAD_FAST 1 ( i )					      	  if i >= N or j >= N :					    								  
2 LOAD_GLOBAL 0 ( N )					      	      return 0						    								  
4 COMPARE_OP 5 ( >= )					      	  result = max ( maxDecimalValue ( mat , i , j + 1 , p + 1  								  
6 POP_JUMP_IF_TRUE 16					      	  if mat [ i ] [ j ] == 1 :				    								  
8 LOAD_FAST 2 ( j )					      	      return pow ( 2 , p ) + result			    								  
10 LOAD_GLOBAL 0 ( N )					      	  else :						    								  
12 COMPARE_OP 5 ( >= )					      	      return result					    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 1 ( max )				      								    								  
22 LOAD_GLOBAL 2 ( maxDecimalValue )			      								    								  
24 LOAD_FAST 0 ( mat )					      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 LOAD_FAST 2 ( j )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 3 ( p )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 4					      								    								  
42 LOAD_GLOBAL 2 ( maxDecimalValue )			      								    								  
44 LOAD_FAST 0 ( mat )					      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 2 ( j )					      								    								  
54 LOAD_FAST 3 ( p )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 4					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 STORE_FAST 4 ( result )				      								    								  
							      								    								  
5 66 LOAD_FAST 0 ( mat )				      								    								  
68 LOAD_FAST 1 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 2 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
6 82 LOAD_GLOBAL 3 ( pow )				      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 LOAD_FAST 3 ( p )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 LOAD_FAST 4 ( result )				      								    								  
92 BINARY_ADD						      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
8 >> 96 LOAD_FAST 4 ( result )				      								    								  
98 RETURN_VALUE						      								    								  
100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_PLUS_PERFECT_NUMBER			      PROGRAM_CHECK_PLUS_PERFECT_NUMBER				    PROGRAM_CHECK_PLUS_PERFECT_NUMBER				  PROGRAM_CHECK_PLUS_PERFECT_NUMBER
--							      --							    --								  --
Disassembly of <code object checkplusperfect at 0x7fbac<<unk> def checkplusperfect ( x ) :				    def checkplusperfect ( x , temp , temp , temp , temp , temp , error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x )					      	  temp = x						    	temp = temp.temp ( temp , temp , temp )			  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( temp )					      	  n = 0							    	temp = temp.temp ( temp , temp , temp , temp )		  /PROGRAM_CHECK_PLUS_PERFECT_NUMBER.py", line 33
							      	  while ( x != 0 ) :					    	temp = temp.temp ( temp , temp , temp )			    def f_filled ( x , temp , temp , temp , temp , t
3 4 LOAD_CONST 1 ( 0 )					      	      x = x // 10					    	temp = temp.temp ( temp , temp , temp )			  emp , temp , temp ) :	    ^ SyntaxError: duplicate
6 STORE_FAST 2 ( n )					      	      n = n + 1						    	temp = temp.temp ( temp , temp )			   argument 'temp' in function definition
							      	  x = temp						    	temp = temp.temp ( temp , temp )			  
4 8 SETUP_LOOP 28 ( to 38 )				      	  sm = 0						    	temp = temp.temp ( temp , temp , temp )			  
>> 10 LOAD_FAST 0 ( x )					      	  while ( x != 0 ) :					    	temp = temp.temp ( temp , temp )			  
12 LOAD_CONST 1 ( 0 )					      	      sm = sm + ( int ) ( math.pow ( x % 10 , n ) )	    	temp = temp.temp ( temp , temp , temp )			  
14 COMPARE_OP 3 ( != )					      	      x = x // 10					    	temp = temp.temp ( temp , temp , temp )			  
16 POP_JUMP_IF_FALSE 36					      	  return ( sm == temp )					    	temp = temp.temp ( temp , temp )			  
							      								    	temp = temp.temp ( temp , temp )			  
5 18 LOAD_FAST 0 ( x )					      								    	temp = temp.temp ( temp , temp )			  
20 LOAD_CONST 2 ( 10 )					      								    	temp = temp.temp ( temp , temp )			  
22 BINARY_FLOOR_DIVIDE					      								    	temp = temp.temp ( temp , temp )			  
24 STORE_FAST 0 ( x )					      								    	temp = temp.temp ( temp , temp )			  
							      								    	temp = temp.temp ( temp , temp )			  
6 26 LOAD_FAST 2 ( n )					      								    	temp = temp.temp ( temp , temp )			  
28 LOAD_CONST 3 ( 1 )					      								    	temp = temp.temp ( temp , temp )			  
30 BINARY_ADD						      								    	temp = temp.temp ( temp , temp )			  
32 STORE_FAST 2 ( n )					      								    	temp = temp.temp ( temp , temp )			  
34 JUMP_ABSOLUTE 10					      								    	temp = temp.temp ( temp , temp )			  
>> 36 POP_BLOCK						      								    	temp = temp.temp ( temp , temp )			  
							      								    	temp = temp.temp ( temp , temp )			  
7 >> 38 LOAD_FAST 1 ( temp )				      								    	temp = temp.temp ( temp , temp )			  
40 STORE_FAST 0 ( x )					      								    	temp = temp.temp ( temp , temp )			  
							      								    	temp = temp.temp ( temp , temp )			  
8 42 LOAD_CONST 1 ( 0 )					      								    	temp = temp.temp ( temp , temp )			  
44 STORE_FAST 3 ( sm )					      								    	temp = temp.temp ( temp , temp )			  
							      								    	temp = temp.temp ( temp , temp )			  
9 46 SETUP_LOOP 44 ( to 92 )				      								    	temp = temp.temp ( temp , temp )			  
>> 48 LOAD_FAST 0 ( x )					      								    	temp = temp.temp ( temp , temp )			  
50 LOAD_CONST 1 ( 0 )					      								    	temp.temp ( temp , temp )				  
52 COMPARE_OP 3 ( != )					      								    	temp.temp ( temp , temp )				  
54 POP_JUMP_IF_FALSE 90					      								    	temp.temp ( temp , temp )				  
							      								    	temp.temp ( temp , temp )				  
10 56 LOAD_FAST 3 ( sm )				      								    	temp.temp ( temp )					  
58 LOAD_GLOBAL 0 ( int )				      								    	temp.temp ( temp )					  
60 LOAD_GLOBAL 1 ( math )				      								    	temp.temp ( temp )					  
62 LOAD_METHOD 2 ( pow )				      								    	temp.temp ( temp )					  
64 LOAD_FAST 0 ( x )					      								    	temp.temp ( temp )					  
66 LOAD_CONST 2 ( 10 )					      								    	temp.temp ( temp )					  
68 BINARY_MODULO					      								    	temp.temp ( temp )					  
70 LOAD_FAST 2 ( n )					      								    	temp.temp ( temp )					  
72 CALL_METHOD 2					      								    	temp.temp ( temp )					  
74 CALL_FUNCTION 1					      								    	temp.temp ( temp )					  
76 BINARY_ADD						      								    	temp.temp ( temp )					  
78 STORE_FAST 3 ( sm )					      								    	temp.temp						  
							      								    								  
11 80 LOAD_FAST 0 ( x )					      								    								  
82 LOAD_CONST 2 ( 10 )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 STORE_FAST 0 ( x )					      								    								  
88 JUMP_ABSOLUTE 48					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
12 >> 92 LOAD_FAST 3 ( sm )				      								    								  
94 LOAD_FAST 1 ( temp )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			      DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			    DELETE_CONSECUTIVE_WORDS_SEQUENCE_1				  DELETE_CONSECUTIVE_WORDS_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object removeConsecutiveSame at 0x7fbac< def removeConsecutiveSame ( v ) :				    def removeConSliveSame ( v , st , outdeg , outdeg , outdeg ,  script_not_found : None
2 0 BUILD_LIST 0					      	  st = [ ]						    								  
2 STORE_FAST 1 ( st )					      	  for i in range ( len ( v ) ) :			    								  
							      	      if ( len ( st ) == 0 ) :				    								  
3 4 SETUP_LOOP 92 ( to 98 )				      		  st.append ( v [ i ] )				    								  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    								  
8 LOAD_GLOBAL 1 ( len )					      		  Str = st [ - 1 ]				    								  
10 LOAD_FAST 0 ( v )					      		  if ( Str == v [ i ] ) :			    								  
12 CALL_FUNCTION 1					      		      st.pop ( )				    								  
14 CALL_FUNCTION 1					      		  else :					    								  
16 GET_ITER						      		      st.append ( v [ i ] )			    								  
>> 18 FOR_ITER 76 ( to 96 )				      	  return len ( st )					    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_GLOBAL 1 ( len )				      								    								  
24 LOAD_FAST 1 ( st )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
5 34 LOAD_FAST 1 ( st )					      								    								  
36 LOAD_METHOD 2 ( append )				      								    								  
38 LOAD_FAST 0 ( v )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
48 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
7 >> 50 LOAD_FAST 1 ( st )				      								    								  
52 LOAD_CONST 2 ( - 1 )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 3 ( Str )					      								    								  
							      								    								  
8 58 LOAD_FAST 3 ( Str )				      								    								  
60 LOAD_FAST 0 ( v )					      								    								  
62 LOAD_FAST 2 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( st )					      								    								  
72 LOAD_METHOD 3 ( pop )				      								    								  
74 CALL_METHOD 0					      								    								  
76 POP_TOP						      								    								  
78 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 1 ( st )				      								    								  
82 LOAD_METHOD 2 ( append )				      								    								  
84 LOAD_FAST 0 ( v )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_METHOD 1					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 18					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
12 >> 98 LOAD_GLOBAL 1 ( len )				      								    								  
100 LOAD_FAST 1 ( st )					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS		  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac<<unk>> de40 def countPairs ( str1 ) :					    def countPairs ( str1 str1 str1 str1 str1 str1 str1 str1 str1 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( result )				      	  n = len ( str1 )					    								  /COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABET
							      	  for i in range ( 0 , n ) :				    								  S.py", line 27     def f_filled ( str1 str1 str1 s
3 4 LOAD_GLOBAL 0 ( len )				      	      for j in range ( i + 1 , n ) :			    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
6 LOAD_FAST 0 ( str1 )					      		  if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ]  								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
8 CALL_FUNCTION 1					      		      result += 1 ;				    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
10 STORE_FAST 2 ( n )					      	  return result ;					    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
							      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
4 12 SETUP_LOOP 90 ( to 104 )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
14 LOAD_GLOBAL 1 ( range )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
16 LOAD_CONST 1 ( 0 )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
18 LOAD_FAST 2 ( n )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
20 CALL_FUNCTION 2					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
22 GET_ITER						      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
>> 24 FOR_ITER 76 ( to 102 )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
26 STORE_FAST 3 ( i )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
							      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
5 28 SETUP_LOOP 70 ( to 100 )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
30 LOAD_GLOBAL 1 ( range )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
32 LOAD_FAST 3 ( i )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
34 LOAD_CONST 2 ( 1 )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
36 BINARY_ADD						      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
38 LOAD_FAST 2 ( n )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
40 CALL_FUNCTION 2					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
42 GET_ITER						      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
>> 44 FOR_ITER 52 ( to 98 )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
46 STORE_FAST 4 ( j )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
							      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
6 48 LOAD_GLOBAL 2 ( abs )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
50 LOAD_GLOBAL 3 ( ord )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
52 LOAD_FAST 0 ( str1 )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
54 LOAD_FAST 3 ( i )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
56 BINARY_SUBSCR					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
58 CALL_FUNCTION 1					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
60 LOAD_GLOBAL 3 ( ord )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
62 LOAD_FAST 0 ( str1 )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
64 LOAD_FAST 4 ( j )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
66 BINARY_SUBSCR					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
68 CALL_FUNCTION 1					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
70 BINARY_SUBTRACT					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
72 CALL_FUNCTION 1					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
74 LOAD_GLOBAL 2 ( abs )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
76 LOAD_FAST 3 ( i )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
78 LOAD_FAST 4 ( j )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
80 BINARY_SUBTRACT					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
82 CALL_FUNCTION 1					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
84 COMPARE_OP 2 ( == )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
86 POP_JUMP_IF_FALSE 44					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
							      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
7 88 LOAD_FAST 1 ( result )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
90 LOAD_CONST 2 ( 1 )					      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
92 INPLACE_ADD						      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
94 STORE_FAST 1 ( result )				      								    								  tr1 str1 str1 str1 str1 str1 str1 str1 str1 str1 s
96 JUMP_ABSOLUTE 44					      								    								  tr1 str1 str1				   ^ SyntaxE
>> 98 POP_BLOCK						      								    								  rror: invalid syntax
>> 100 JUMP_ABSOLUTE 24					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
8 >> 104 LOAD_FAST 1 ( result )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	      SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	    SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1		  SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1
--							      --							    --								  --
Disassembly of <code object KnapSack at 0x7fbac<<unk>> de40,  def KnapSack ( val , wt , n , W ) :			    def Knapack ( val , wt , W , W ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( W + 1 ) ;				    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 BUILD_LIST 1						      	  for i in range ( n ) :				    								  
4 LOAD_FAST 3 ( W )					      	      for j in range ( W , wt [ i ] , - 1 ) :		    								  
6 LOAD_CONST 2 ( 1 )					      		  dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j -  								  
8 BINARY_ADD						      	  return dp [ W ] ;					    								  
10 BINARY_MULTIPLY					      								    								  
12 STORE_FAST 4 ( dp )					      								    								  
							      								    								  
3 14 SETUP_LOOP 80 ( to 96 )				      								    								  
16 LOAD_GLOBAL 0 ( range )				      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 68 ( to 94 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 28 SETUP_LOOP 62 ( to 92 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 3 ( W )					      								    								  
34 LOAD_FAST 1 ( wt )					      								    								  
36 LOAD_FAST 5 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( - 1 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 42 ( to 90 )				      								    								  
48 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 50 LOAD_GLOBAL 1 ( max )				      								    								  
52 LOAD_FAST 4 ( dp )					      								    								  
54 LOAD_FAST 6 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( val )					      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 4 ( dp )					      								    								  
66 LOAD_FAST 6 ( j )					      								    								  
68 LOAD_FAST 1 ( wt )					      								    								  
70 LOAD_FAST 5 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 2					      								    								  
82 LOAD_FAST 4 ( dp )					      								    								  
84 LOAD_FAST 6 ( j )					      								    								  
86 STORE_SUBSCR						      								    								  
88 JUMP_ABSOLUTE 46					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 JUMP_ABSOLUTE 24					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
6 >> 96 LOAD_FAST 4 ( dp )				      								    								  
98 LOAD_FAST 3 ( W )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES		      ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			    ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			  ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES
--							      --							    --								  --
Disassembly of <code object winner at 0x7fbac<<unk>> d540, fi def winner ( a , n , k ) :				    def winner ( a , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 2 ( k )					      	  if k >= n - 1 :					    	n = n [ n : n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 1 ( n )					      	      return n						    	n = n [ n : n ]						  /eval_scripts/dis_sa-python_sa.test/ARRAY_ELEMENT_
4 LOAD_CONST 1 ( 1 )					      	  best = 0						    	while n < n :						  MOVED_K_USING_SINGLE_MOVES.py", line 57, in <modul
6 BINARY_SUBTRACT					      	  times = 0						    	    n = n [ n : n ]					  e>	 if f_filled(*parameters_set) == f_gold(*par
8 COMPARE_OP 5 ( >= )					      	  for i in range ( n ) :				    	return n						  ameters_set): TypeError: f_filled() takes 2 positi
10 POP_JUMP_IF_FALSE 16					      	      if a [ i ] > best :				    								  onal arguments but 3 were given
							      		  best = a [ i ]				    								  
3 12 LOAD_FAST 1 ( n )					      		  if i == True :				    								  
14 RETURN_VALUE						      		      times = 1					    								  
							      	      else :						    								  
4 >> 16 LOAD_CONST 2 ( 0 )				      		  times += 1					    								  
18 STORE_FAST 3 ( best )				      	      if times >= k :					    								  
							      		  return best					    								  
5 20 LOAD_CONST 2 ( 0 )					      	  return best						    								  
22 STORE_FAST 4 ( times )				      								    								  
							      								    								  
6 24 SETUP_LOOP 70 ( to 96 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 58 ( to 94 )				      								    								  
36 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 5 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 3 ( best )					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
8 50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 3 ( best )				      								    								  
							      								    								  
9 58 LOAD_FAST 5 ( i )					      								    								  
60 LOAD_CONST 3 ( True )				      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 66 LOAD_CONST 1 ( 1 )				      								    								  
68 STORE_FAST 4 ( times )				      								    								  
70 JUMP_FORWARD 8 ( to 80 )				      								    								  
							      								    								  
12 >> 72 LOAD_FAST 4 ( times )				      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 4 ( times )				      								    								  
							      								    								  
13 >> 80 LOAD_FAST 4 ( times )				      								    								  
82 LOAD_FAST 2 ( k )					      								    								  
84 COMPARE_OP 5 ( >= )					      								    								  
86 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
14 88 LOAD_FAST 3 ( best )				      								    								  
90 RETURN_VALUE						      								    								  
92 JUMP_ABSOLUTE 34					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
15 >> 96 LOAD_FAST 3 ( best )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object findGreatest at 0x7fbac<<unk>> de def findGreatest ( arr , n ) :				    def findGreatest ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1 )				      	  result = - 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( result )				      	  for i in range ( n ) :				    								  /FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY.py", lin
							      	      for j in range ( n - 1 ) :			    								  e 48	   print("#Results: %i, %i" % (n_success, le
3 4 SETUP_LOOP 100 ( to 106 )				      		  for k in range ( j + 1 , n ) :		    								  n(param)))
6 LOAD_GLOBAL 0 ( range )				      		      if ( arr [ j ] * arr [ k ] == arr [ i ] ) :   								  		 ^ SyntaxError: EOF while scanning t
8 LOAD_FAST 1 ( n )					      			  result = max ( result , arr [ i ] )	    								  riple-quoted string literal
10 CALL_FUNCTION 1					      	  return result						    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 88 ( to 104 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 82 ( to 102 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 66 ( to 100 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 SETUP_LOOP 60 ( to 98 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_FAST 4 ( j )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 42 ( to 96 )				      								    								  
54 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 5 ( k )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_MULTIPLY					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 80 LOAD_GLOBAL 1 ( max )				      								    								  
82 LOAD_FAST 2 ( result )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 STORE_FAST 2 ( result )				      								    								  
94 JUMP_ABSOLUTE 52					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 JUMP_ABSOLUTE 32					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 JUMP_ABSOLUTE 14					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
8 >> 106 LOAD_FAST 2 ( result )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH     NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH	    NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH	  NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENCE_LENGTH
--							      --							    --								  --
Disassembly of <code object countTrees at 0x7fbac<<unk>> d540 def countTrees ( n ) :					    def countTrees ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  BT = [ 0 ] * ( n + 1 )				    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 BUILD_LIST 1						      	  BT [ 0 ] = BT [ 1 ] = 1				    								  /NUMBER_OF_BINARY_TREES_FOR_GIVEN_PREORDER_SEQUENC
4 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    								  E_LENGTH.py", line 47	    print("#Results: %i, %i"
6 LOAD_CONST 2 ( 1 )					      	      for j in range ( i ) :				    								   % (n_success, len(param)))
8 BINARY_ADD						      		  BT [ i ] += BT [ j ] * BT [ i - j - 1 ]	    								  				  ^ SyntaxError: EOF
10 BINARY_MULTIPLY					      	  return BT [ n ]					    								   while scanning triple-quoted string literal
12 STORE_FAST 1 ( BT )					      								    								  
							      								    								  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 DUP_TOP						      								    								  
18 LOAD_FAST 1 ( BT )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_SUBSCR						      								    								  
24 LOAD_FAST 1 ( BT )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
4 30 SETUP_LOOP 76 ( to 108 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 58 ( to 106 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 50 SETUP_LOOP 52 ( to 104 )				      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 40 ( to 102 )				      								    								  
62 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 64 LOAD_FAST 1 ( BT )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 DUP_TOP_TWO						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 1 ( BT )					      								    								  
74 LOAD_FAST 3 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 1 ( BT )					      								    								  
80 LOAD_FAST 2 ( i )					      								    								  
82 LOAD_FAST 3 ( j )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 INPLACE_ADD						      								    								  
96 ROT_THREE						      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 60					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 46					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
7 >> 108 LOAD_FAST 1 ( BT )				      								    								  
110 LOAD_FAST 0 ( n )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GNOME_SORT_A_STUPID_ONE					      GNOME_SORT_A_STUPID_ONE					    GNOME_SORT_A_STUPID_ONE					  GNOME_SORT_A_STUPID_ONE
--							      --							    --								  --
Disassembly of <code object gnomeSort at 0x7fbac<<unk>> de40, def gnomeSort ( arr , n ) :				    def gnomeSort ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  index = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( index )				      	  while index < n :					    								  /GNOME_SORT_A_STUPID_ONE.py", line 51	    print("#
							      	      if index == 0 :					    								  Results: %i, %i" % (n_success, len(param)))
3 4 SETUP_LOOP 100 ( to 106 )				      		  index = index + 1				    								  						  ^
>> 6 LOAD_FAST 2 ( index )				      	      if arr [ index ] >= arr [ index - 1 ] :		    								  SyntaxError: EOF while scanning triple-quoted stri
8 LOAD_FAST 1 ( n )					      		  index = index + 1				    								  ng literal
10 COMPARE_OP 0 ( < )					      	      else :						    								  
12 POP_JUMP_IF_FALSE 104				      		  arr [ index ] , arr [ index - 1 ] = arr [ index - 								  
							      		  index = index - 1				    								  
4 14 LOAD_FAST 2 ( index )				      	  return arr						    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 2 ( == )					      								    								  
20 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 22 LOAD_FAST 2 ( index )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 2 ( index )				      								    								  
							      								    								  
6 >> 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 2 ( index )				      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 2 ( index )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 5 ( >= )					      								    								  
48 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 50 LOAD_FAST 2 ( index )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( index )				      								    								  
58 JUMP_ABSOLUTE 6					      								    								  
							      								    								  
9 >> 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 2 ( index )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 2 ( index )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 ROT_TWO						      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 2 ( index )				      								    								  
82 STORE_SUBSCR						      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 2 ( index )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
10 94 LOAD_FAST 2 ( index )				      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 STORE_FAST 2 ( index )				      								    								  
102 JUMP_ABSOLUTE 6					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
11 >> 106 LOAD_FAST 0 ( arr )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
Disassembly of <code object countNum at 0x7fbac<<unk>> de40,  def countNum ( arr , n ) :				    def countNum ( arr ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( count )				      	  arr.sort ( )						    	count = 0						  /ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RA
							      	  for i in range ( 0 , n - 1 ) :			    	count = 0						  NGE_ARE_PRESENT_IN_ARRAY.py", line 151     return
3 4 LOAD_FAST 0 ( arr )					      	      if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr  	count = 0						  count	    ^ SyntaxError: 'return' outside function
6 LOAD_METHOD 0 ( sort )				      		  count += arr [ i + 1 ] - arr [ i ] - 1 ;	    	count = count						  
8 CALL_METHOD 0						      	  return count						    	count = count						  
10 POP_TOP						      								    	count += 1						  
							      								    	count += 1						  
4 12 SETUP_LOOP 94 ( to 108 )				      								    	count += 1						  
14 LOAD_GLOBAL 1 ( range )				      								    	count += 1						  
16 LOAD_CONST 1 ( 0 )					      								    	count += 1						  
18 LOAD_FAST 1 ( n )					      								    	count += 1						  
20 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
22 BINARY_SUBTRACT					      								    	count += 1						  
24 CALL_FUNCTION 2					      								    	count += 1						  
26 GET_ITER						      								    	count += 1						  
>> 28 FOR_ITER 76 ( to 106 )				      								    	count += 1						  
30 STORE_FAST 3 ( i )					      								    	count += 1						  
							      								    	count += 1						  
5 32 LOAD_FAST 0 ( arr )				      								    	count += 1						  
34 LOAD_FAST 3 ( i )					      								    	count += 1						  
36 BINARY_SUBSCR					      								    	count += 1						  
38 LOAD_FAST 0 ( arr )					      								    	count += 1						  
40 LOAD_FAST 3 ( i )					      								    	count += 1						  
42 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
44 BINARY_ADD						      								    	count += 1						  
46 BINARY_SUBSCR					      								    	count += 1						  
48 COMPARE_OP 3 ( != )					      								    	count += 1						  
50 POP_JUMP_IF_FALSE 28					      								    	count += 1						  
52 LOAD_FAST 0 ( arr )					      								    	count += 1						  
54 LOAD_FAST 3 ( i )					      								    	count += 1						  
56 BINARY_SUBSCR					      								    	count += 1						  
58 LOAD_FAST 0 ( arr )					      								    	count += 1						  
60 LOAD_FAST 3 ( i )					      								    	count += 1						  
62 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
64 BINARY_ADD						      								    	count += 1						  
66 BINARY_SUBSCR					      								    	count += 1						  
68 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
70 BINARY_SUBTRACT					      								    	count += 1						  
72 COMPARE_OP 3 ( != )					      								    	count += 1						  
74 POP_JUMP_IF_FALSE 28					      								    	count += 1						  
							      								    	count += 1						  
6 76 LOAD_FAST 2 ( count )				      								    	count += 1						  
78 LOAD_FAST 0 ( arr )					      								    	count += 1						  
80 LOAD_FAST 3 ( i )					      								    	count += 1						  
82 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
84 BINARY_ADD						      								    	count += 1						  
86 BINARY_SUBSCR					      								    	count += 1						  
88 LOAD_FAST 0 ( arr )					      								    	count += 1						  
90 LOAD_FAST 3 ( i )					      								    	count += 1						  
92 BINARY_SUBSCR					      								    	count += 1						  
94 BINARY_SUBTRACT					      								    	count += 1						  
96 LOAD_CONST 2 ( 1 )					      								    	count += 1						  
98 BINARY_SUBTRACT					      								    	count += 1						  
100 INPLACE_ADD						      								    	count += 1						  
102 STORE_FAST 2 ( count )				      								    	count += 1						  
104 JUMP_ABSOLUTE 28					      								    	count += 1						  
>> 106 POP_BLOCK					      								    	count += 1						  
							      								    	count += 1						  
7 >> 108 LOAD_FAST 2 ( count )				      								    	count += 1						  
110 RETURN_VALUE NEW_LINE				      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_OCTAL_CONVERSION			      PROGRAM_DECIMAL_OCTAL_CONVERSION				    PROGRAM_DECIMAL_OCTAL_CONVERSION				  PROGRAM_DECIMAL_OCTAL_CONVERSION
--							      --							    --								  --
Disassembly of <code object decToOctal at 0x7fbac0e8bc90, fil def decToOctal ( n ) :					    def decToOctal ( n , * args , ** kwargs ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  octalNum = [ 0 ] * 100 ;				    	"""							  
2 BUILD_LIST 1						      	  i = 0 ;						     Return the number of the given number of numbers in the give 
4 LOAD_CONST 2 ( 100 )					      	  while ( n != 0 ) :					    								  
6 BINARY_MULTIPLY					      	      octalNum [ i ] = n % 8 ;				     Args:							  
8 STORE_FAST 1 ( octalNum )				      	      n = int ( n / 8 ) ;				     n: the number of numbers					  
							      	      i += 1 ;						     *args: the number of numbers				  
3 10 LOAD_CONST 1 ( 0 )					      	  for j in range ( i - 1 , - 1 , - 1 ) :		    								  
12 STORE_FAST 2 ( i )					      	      print ( octalNum [ j ] , end = "" ) ;		     Returns:							  
							      								     int: number of numbers					  
4 14 SETUP_LOOP 44 ( to 60 )				      								    								  
>> 16 LOAD_FAST 0 ( n )					      								     Returns:							  
18 LOAD_CONST 1 ( 0 )					      								     number: number of numbers					  
20 COMPARE_OP 3 ( != )					      								     """							  
22 POP_JUMP_IF_FALSE 58					      								    	return int ( n )					  
							      								    								  
5 24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 8 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_FAST 1 ( octalNum )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 3 ( 8 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 4 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 2 ( i )					      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 40 ( to 102 )			      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_CONST 5 ( - 1 )					      								    								  
72 LOAD_CONST 5 ( - 1 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 20 ( to 100 )				      								    								  
80 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 82 LOAD_GLOBAL 2 ( print )				      								    								  
84 LOAD_FAST 1 ( octalNum )				      								    								  
86 LOAD_FAST 3 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 6 ( '' )					      								    								  
92 LOAD_CONST 7 ( ( 'end' , ) )				      								    								  
94 CALL_FUNCTION_KW 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 78					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		      FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		    FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		  FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S
--							      --							    --								  --
Disassembly of <code object findMax at 0x7fbac0e8bc90, file " def findMax ( arr ) :					    def findMax ( fbfbacaceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  row = 0						    								  
2 STORE_FAST 1 ( row )					      	  j = N - 1						    								  
							      	  for i in range ( 0 , N ) :				    								  
3 4 LOAD_GLOBAL 0 ( N )					      	      while ( arr [ i ] [ j ] == 1 and j >= 0 ) :	    								  
6 LOAD_CONST 2 ( 1 )					      		  row = i					    								  
8 BINARY_SUBTRACT					      		  j -= 1					    								  
10 STORE_FAST 2 ( j )					      	  print ( "Row number = " , row + 1 , ", MaxCount = " , N - 								  
							      								    								  
4 12 SETUP_LOOP 60 ( to 74 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_GLOBAL 0 ( N )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 46 ( to 72 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 SETUP_LOOP 40 ( to 70 )				      								    								  
>> 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 2 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 68					      								    								  
46 LOAD_FAST 2 ( j )					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 5 ( >= )					      								    								  
52 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 54 LOAD_FAST 3 ( i )					      								    								  
56 STORE_FAST 1 ( row )					      								    								  
							      								    								  
7 58 LOAD_FAST 2 ( j )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_SUBTRACT					      								    								  
64 STORE_FAST 2 ( j )					      								    								  
66 JUMP_ABSOLUTE 30					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 JUMP_ABSOLUTE 24					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_GLOBAL 2 ( print )				      								    								  
76 LOAD_CONST 3 ( 'Row number = ' )			      								    								  
78 LOAD_FAST 1 ( row )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_CONST 4 ( ', MaxCount = ' )			      								    								  
86 LOAD_GLOBAL 0 ( N )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_FAST 2 ( j )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 4					      								    								  
98 POP_TOP						      								    								  
100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP	  GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP
--							      --							    --								  --
Disassembly of <code object isMinHeap at 0x7fbac<<unk>> de40, def isMinHeap ( level , n ) :				    def isMinHeap ( level ) :					  script_not_found : None
2 0 SETUP_LOOP 104 ( to 106 )				      	  for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :	    	for i in range ( level ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if level [ i ] > level [ 2 * i + 1 ] :		    	    if i < 0 :						  
4 LOAD_GLOBAL 1 ( int )					      		  return False					    		return i					  
6 LOAD_FAST 1 ( n )					      	      if 2 * i + 2 < n :				    	return None						  
8 LOAD_CONST 1 ( 2 )					      		  if level [ i ] > level [ 2 * i + 2 ] :	    								  
10 BINARY_TRUE_DIVIDE					      		      return False				    								  
12 CALL_FUNCTION 1					      	  return True						    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 LOAD_CONST 3 ( - 1 )					      								    								  
20 LOAD_CONST 3 ( - 1 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 76 ( to 104 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 30 LOAD_FAST 0 ( level )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( level )				      								    								  
38 LOAD_CONST 1 ( 2 )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
4 54 LOAD_CONST 4 ( False )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
5 >> 58 LOAD_CONST 1 ( 2 )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_CONST 1 ( 2 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 COMPARE_OP 0 ( < )					      								    								  
72 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 74 LOAD_FAST 0 ( level )				      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( level )				      								    								  
82 LOAD_CONST 1 ( 2 )					      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 BINARY_MULTIPLY					      								    								  
88 LOAD_CONST 1 ( 2 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
7 98 LOAD_CONST 4 ( False )				      								    								  
100 RETURN_VALUE					      								    								  
102 JUMP_ABSOLUTE 26					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
8 >> 106 LOAD_CONST 5 ( True )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE				      LONGEST_COMMON_SUBSEQUENCE				    LONGEST_COMMON_SUBSEQUENCE					  LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lcs at 0x7fbac<<unk>> d540, file  def lcs ( X , Y , m , n ) :				    def lcs ( X , Y , n ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if m == 0 or n == 0 :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  elif X [ m - 1 ] == Y [ n - 1 ] :			    	if n == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	      return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	    	    return 0						  
8 LOAD_FAST 3 ( n )					      	  else :						    	if n == 1 :						  
10 LOAD_CONST 1 ( 0 )					      	      return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	return ( ( n , n )					  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( X )				      								    								  
22 LOAD_FAST 2 ( m )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( Y )					      								    								  
32 LOAD_FAST 3 ( n )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
5 44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_GLOBAL 0 ( lcs )				      								    								  
48 LOAD_FAST 0 ( X )					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 2 ( m )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 4					      								    								  
66 BINARY_ADD						      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
7 >> 70 LOAD_GLOBAL 1 ( max )				      								    								  
72 LOAD_GLOBAL 0 ( lcs )				      								    								  
74 LOAD_FAST 0 ( X )					      								    								  
76 LOAD_FAST 1 ( Y )					      								    								  
78 LOAD_FAST 2 ( m )					      								    								  
80 LOAD_FAST 3 ( n )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 4					      								    								  
88 LOAD_GLOBAL 0 ( lcs )				      								    								  
90 LOAD_FAST 0 ( X )					      								    								  
92 LOAD_FAST 1 ( Y )					      								    								  
94 LOAD_FAST 2 ( m )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 LOAD_FAST 3 ( n )					      								    								  
102 CALL_FUNCTION 4					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 RETURN_VALUE					      								    								  
108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT
--							      --							    --								  --
Disassembly of <code object findTriplet at 0x7fbac<<unk>> de4 def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :	    def findTriplet let ( a1 , n1 , n1 , n1 , n1 , n1 ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	""" STRNEWLINE SPACETOKEN set SPACETOKEN of SPACETOKEN tw l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 CALL_FUNCTION 0					      	  for i in range ( n1 ) :				    								  /FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SU
4 STORE_FAST 7 ( s )					      	      s.add ( a1 [ i ] )				    								  CH_THAT_THAT_A_B_C_K_1.py", line 28	  def f_fill
							      	  for i in range ( n2 ) :				    								  ed let ( a1 , n1 , n1 , n1 , n1 , n1 ) :
3 6 SETUP_LOOP 30 ( to 38 )				      	      for j in range ( n3 ) :				    								  	    ^ SyntaxError: invalid syntax
8 LOAD_GLOBAL 1 ( range )				      		  if sum - a2 [ i ] - a3 [ j ] in s :		    								  
10 LOAD_FAST 3 ( n1 )					      		      return True				    								  
12 CALL_FUNCTION 1					      	  return False						    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 18 ( to 36 )				      								    								  
18 STORE_FAST 8 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 7 ( s )					      								    								  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( a1 )					      								    								  
26 LOAD_FAST 8 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 SETUP_LOOP 62 ( to 102 )			      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 4 ( n2 )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 50 ( to 100 )				      								    								  
50 STORE_FAST 8 ( i )					      								    								  
							      								    								  
6 52 SETUP_LOOP 44 ( to 98 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_FAST 5 ( n3 )					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 32 ( to 96 )				      								    								  
64 STORE_FAST 9 ( j )					      								    								  
							      								    								  
7 66 LOAD_FAST 6 ( sum )				      								    								  
68 LOAD_FAST 1 ( a2 )					      								    								  
70 LOAD_FAST 8 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_FAST 2 ( a3 )					      								    								  
78 LOAD_FAST 9 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_FAST 7 ( s )					      								    								  
86 COMPARE_OP 6 ( in )					      								    								  
88 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
8 90 LOAD_CONST 1 ( True )				      								    								  
92 RETURN_VALUE						      								    								  
94 JUMP_ABSOLUTE 62					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 JUMP_ABSOLUTE 48					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
9 >> 102 LOAD_CONST 2 ( False )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ALTERNATIVE_SORTING					      ALTERNATIVE_SORTING					    ALTERNATIVE_SORTING						  ALTERNATIVE_SORTING
--							      --							    --								  --
Disassembly of <code object alternateSort at 0x7fbac<<unk>> d def alternateSort ( arr , n ) :				    def alternateSort ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	if n < 0 :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_METHOD 0 ( sort )				      	  i = 0							    	    return 0						  /eval_scripts/dis_sa-python_sa.test/ALTERNATIVE_SO
4 CALL_METHOD 0						      	  j = n - 1						    	arr = arr [ 0 ]						  RTING.py", line 69, in <module>     f_filled(*(fil
6 POP_TOP						      	  while ( i < j ) :					    	while arr < 0 :						  led_function_param[i]))   File "/home/ubuntu/Trans
							      	      print ( arr [ j ] , end = " " )			    	    arr = arr [ 0 ]					  Coder/models/eval/bt/152w65bl69/eval_scripts/dis_s
3 8 LOAD_CONST 1 ( 0 )					      	      j -= 1						    	    arr [ 1 : ] = arr [ 0 ]				  a-python_sa.test/ALTERNATIVE_SORTING.py", line 35,
10 STORE_FAST 2 ( i )					      	      print ( arr [ i ] , end = " " )			    	    arr [ 1 : ] = arr [ 0 ]				   in f_filled	   arr = arr [ 0 ] TypeError: 'int'
							      	      i += 1						    	    arr [ 1 : ] = arr [ 0 ]				  object is not subscriptable
4 12 LOAD_FAST 1 ( n )					      	  if ( n % 2 != 0 ) :					    	return arr						  
14 LOAD_CONST 2 ( 1 )					      	      print ( arr [ i ] )				    								  
16 BINARY_SUBTRACT					      								    								  
18 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 20 SETUP_LOOP 60 ( to 82 )				      								    								  
>> 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_FAST 3 ( j )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
6 30 LOAD_GLOBAL 1 ( print )				      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 3 ( ' ' )					      								    								  
40 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
42 CALL_FUNCTION_KW 2					      								    								  
44 POP_TOP						      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( j )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 STORE_FAST 3 ( j )					      								    								  
							      								    								  
8 54 LOAD_GLOBAL 1 ( print )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( ' ' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
							      								    								  
9 70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 2 ( i )					      								    								  
78 JUMP_ABSOLUTE 22					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 LOAD_FAST 1 ( n )				      								    								  
84 LOAD_CONST 5 ( 2 )					      								    								  
86 BINARY_MODULO					      								    								  
88 LOAD_CONST 1 ( 0 )					      								    								  
90 COMPARE_OP 3 ( != )					      								    								  
92 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
11 94 LOAD_GLOBAL 1 ( print )				      								    								  
96 LOAD_FAST 0 ( arr )					      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 POP_TOP						      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7fbac<<unk>> de40, fil def check ( st ) :					    def check ( st , n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 LOAD_FAST 0 ( st )					      	  oddDigSum = 0						    								  
4 CALL_FUNCTION 1					      	  evenDigSum = 0					    								  
6 STORE_FAST 1 ( n )					      	  for i in range ( 0 , n ) :				    								  
							      	      if ( i % 2 == 0 ) :				    								  
3 8 LOAD_CONST 1 ( 0 )					      		  oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )  								  
10 STORE_FAST 2 ( oddDigSum )				      	      else :						    								  
							      		  evenDigSum = evenDigSum + ( ( int ) ( st [ i ] )  								  
4 12 LOAD_CONST 1 ( 0 )					      	  return ( ( oddDigSum - evenDigSum ) % 11 == 0 )	    								  
14 STORE_FAST 3 ( evenDigSum )				      								    								  
							      								    								  
5 16 SETUP_LOOP 64 ( to 82 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 50 ( to 80 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_CONST 2 ( 2 )					      								    								  
36 BINARY_MODULO					      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( oddDigSum )				      								    								  
46 LOAD_GLOBAL 2 ( int )				      								    								  
48 LOAD_FAST 0 ( st )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 2 ( oddDigSum )				      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
9 >> 62 LOAD_FAST 3 ( evenDigSum )			      								    								  
64 LOAD_GLOBAL 2 ( int )				      								    								  
66 LOAD_FAST 0 ( st )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_FAST 3 ( evenDigSum )				      								    								  
78 JUMP_ABSOLUTE 28					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 LOAD_FAST 2 ( oddDigSum )			      								    								  
84 LOAD_FAST 3 ( evenDigSum )				      								    								  
86 BINARY_SUBTRACT					      								    								  
88 LOAD_CONST 3 ( 11 )					      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 1 ( 0 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		      COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		    COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION		  COUNT_OF_PAIRS_SATISFYING_THE_GIVEN_CONDITION
--							      --							    --								  --
Disassembly of <code object countPair at 0x7fbac<<unk>> de40, def countPair ( a , b ) :					    def countPair ( fbfbacactntn1 , b = 1 , count = 0 ) :	  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( str )				      	  s = str ( b )						    	"""							  
2 LOAD_FAST 1 ( b )					      	  i = 0							     Returns str of a list of tuples of tuples			  
4 CALL_FUNCTION 1					      	  while i < ( len ( s ) ) :				     """							  
6 STORE_FAST 2 ( s )					      	      if ( s [ i ] != '9' ) :				    	# We need to be a list of tuples			  
							      		  break						    	# to be a list of tuples				  
3 8 LOAD_CONST 1 ( 0 )					      	      i += 1						    	# for each list of tuples of tuples			  
10 STORE_FAST 3 ( i )					      	  result = 0						    	# tuples of tuples of tuples				  
							      	  if ( i == len ( s ) ) :				    	# tuples of tuples					  
4 12 SETUP_LOOP 38 ( to 52 )				      	      result = a * len ( s )				    	# tuples of tuples					  
>> 14 LOAD_FAST 3 ( i )					      	  else :						    	# tuples of tuples					  
16 LOAD_GLOBAL 1 ( len )				      	      result = a * ( len ( s ) - 1 )			    	# tuples of tuples					  
18 LOAD_FAST 2 ( s )					      	  return result						    	# tuples of tuples					  
20 CALL_FUNCTION 1					      								    	# tuples of tuples SPACETOKEN tuples SPACETOKEN tuples SP 
22 COMPARE_OP 0 ( < )					      								    	# tuples of tuples SPACETOKEN tuples			  
24 POP_JUMP_IF_FALSE 50					      								    	# tuples tuples tuples tuples tuples tuples		  
							      								    	# tuples tuples tuples					  
5 26 LOAD_FAST 2 ( s )					      								    	# tuples tuples tuples tuples tuples tuples		  
28 LOAD_FAST 3 ( i )					      								    	# tuples tuples tuples tuples tuples tuples SPACETOKEN tu 
30 BINARY_SUBSCR					      								    	# tuples tuples tuples tuples tuples tuples		  
32 LOAD_CONST 2 ( '9' )					      								    	# tuples tuples tuples tuples tuples tuples SPACETOKEN tu 
34 COMPARE_OP 3 ( != )					      								    	# tuples tuples tuples tuples tuples tuples SPACETOKEN tu 
36 POP_JUMP_IF_FALSE 40					      								    	# tuples tuples tuples tuples tuples tuples		  
							      								    	# tuples tuples tuples tuples tuples tuples		  
6 38 BREAK_LOOP						      								    	# tuples tuples tuples SPACETOKEN tuples		  
							      								    	# tuples tuples tuples tuples tuples tuples		  
7 >> 40 LOAD_FAST 3 ( i )				      								    	# tuples tuples tuples SPACETOKEN tuples SPACETOKEN tuple 
42 LOAD_CONST 3 ( 1 )					      								    	# tuples tuples tuples tuples tuples tuples		  
44 INPLACE_ADD						      								    	# tuples tuples tuples SPACETOKEN tuples SPACETOKEN tuple 
46 STORE_FAST 3 ( i )					      								    	# tuples tuples tuples SPACETOKEN tuples		  
48 JUMP_ABSOLUTE 14					      								    	# tuples tuples tuples SPACETOKEN tuples		  
>> 50 POP_BLOCK						      								    	# tuples tuples tuples tuples tuples tuples SPACETOKEN tu 
							      								    	# tuples tuples tuples SPACETOKEN tuples SPACETOKEN tuple 
8 >> 52 LOAD_CONST 1 ( 0 )				      								    	# tuples tuples tuples SPACETOKEN tuples SPACETOKEN tuple 
54 STORE_FAST 4 ( result )				      								    	# tuples tuples tuples tuples tuples tuples		  
							      								    	# tuples tuples tuples tuples tuples tuples SPACETOKEN tu 
9 56 LOAD_FAST 3 ( i )					      								    	# tuples tuples tuples					  
58 LOAD_GLOBAL 1 ( len )				      								    	# tuples tuples tuples SPACETOKEN tuples		  
60 LOAD_FAST 2 ( s )					      								    	# tuples tuples tuples					  
62 CALL_FUNCTION 1					      								    	# tuples tuples tuples					  
64 COMPARE_OP 2 ( == )					      								    	# tuples tuples						  
66 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 68 LOAD_FAST 0 ( a )					      								    								  
70 LOAD_GLOBAL 1 ( len )				      								    								  
72 LOAD_FAST 2 ( s )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 STORE_FAST 4 ( result )				      								    								  
80 JUMP_FORWARD 16 ( to 98 )				      								    								  
							      								    								  
12 >> 82 LOAD_FAST 0 ( a )				      								    								  
84 LOAD_GLOBAL 1 ( len )				      								    								  
86 LOAD_FAST 2 ( s )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 STORE_FAST 4 ( result )				      								    								  
							      								    								  
13 >> 98 LOAD_FAST 4 ( result )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIRROR_CHARACTERS_STRING				      MIRROR_CHARACTERS_STRING					    MIRROR_CHARACTERS_STRING					  MIRROR_CHARACTERS_STRING
--							      --							    --								  --
Disassembly of <code object compute at 0x7fbac<<unk>> d540, f def compute ( st , n ) :					    def compute ( st , n = None , page = None , page = None , pag script_not_found : None
2 0 LOAD_CONST 1 ( 'zyxwvutsrqponmlkjihgfedcba' )	      	  reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba"	    								  
2 STORE_FAST 2 ( reverseAlphabet )			      	  l = len ( st )					    								  
							      	  answer = ""						    								  
3 4 LOAD_GLOBAL 0 ( len )				      	  for i in range ( 0 , n ) :				    								  
6 LOAD_FAST 0 ( st )					      	      answer = answer + st [ i ] ;			    								  
8 CALL_FUNCTION 1					      	  for i in range ( n , l ) :				    								  
10 STORE_FAST 3 ( l )					      	      answer = ( answer + reverseAlphabet [ ord ( st [ i ]  								  
							      	  return answer ;					    								  
4 12 LOAD_CONST 2 ( '' )				      								    								  
14 STORE_FAST 4 ( answer )				      								    								  
							      								    								  
5 16 SETUP_LOOP 30 ( to 48 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 3 ( 0 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 16 ( to 46 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 4 ( answer )				      								    								  
34 LOAD_FAST 0 ( st )					      								    								  
36 LOAD_FAST 5 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 4 ( answer )				      								    								  
44 JUMP_ABSOLUTE 28					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
7 >> 48 SETUP_LOOP 46 ( to 96 )				      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_FAST 3 ( l )					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 32 ( to 94 )				      								    								  
62 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 64 LOAD_FAST 4 ( answer )				      								    								  
66 LOAD_FAST 2 ( reverseAlphabet )			      								    								  
68 LOAD_GLOBAL 2 ( ord )				      								    								  
70 LOAD_FAST 0 ( st )					      								    								  
72 LOAD_FAST 5 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_GLOBAL 2 ( ord )				      								    								  
80 LOAD_CONST 4 ( 'a' )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 STORE_FAST 4 ( answer )				      								    								  
92 JUMP_ABSOLUTE 60					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
9 >> 96 LOAD_FAST 4 ( answer )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac<<unk>> de40 def countPairs ( arr , n ) :				    def countPairs ( arr , n = 1 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( result )				      	  for i in range ( 0 , n ) :				    								  /COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY.py", li
							      	      for j in range ( i + 1 , n ) :			    								  ne 50	    print("#Results: %i, %i" % (n_success, l
3 4 SETUP_LOOP 100 ( to 106 )				      		  product = arr [ i ] * arr [ j ] ;		    								  en(param)))
6 LOAD_GLOBAL 0 ( range )				      		  for k in range ( 0 , n ) :			    								  		  ^ SyntaxError: EOF while scanning
8 LOAD_CONST 1 ( 0 )					      		      if ( arr [ k ] == product ) :		    								  triple-quoted string literal
10 LOAD_FAST 1 ( n )					      			  result = result + 1 ;			    								  
12 CALL_FUNCTION 2					      			  break ;				    								  
14 GET_ITER						      	  return result ;					    								  
>> 16 FOR_ITER 86 ( to 104 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 80 ( to 102 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 62 ( to 100 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 STORE_FAST 5 ( product )				      								    								  
							      								    								  
6 56 SETUP_LOOP 40 ( to 98 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 26 ( to 96 )				      								    								  
70 STORE_FAST 6 ( k )					      								    								  
							      								    								  
7 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 6 ( k )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 5 ( product )				      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 84 LOAD_FAST 2 ( result )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_ADD						      								    								  
90 STORE_FAST 2 ( result )				      								    								  
							      								    								  
9 92 BREAK_LOOP						      								    								  
94 JUMP_ABSOLUTE 68					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 JUMP_ABSOLUTE 36					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 JUMP_ABSOLUTE 16					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 LOAD_FAST 2 ( result )			      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT_1				      CHECK_TWO_GIVEN_SETS_DISJOINT_1				    CHECK_TWO_GIVEN_SETS_DISJOINT_1				  CHECK_TWO_GIVEN_SETS_DISJOINT_1
--							      --							    --								  --
Disassembly of <code object areDisjoint at 0x7fbac<<unk>> de4 def areDisjoint ( set1 , set2 , m , n ) :			    def areDisjoint ( setfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb script_not_found : None
2 0 LOAD_FAST 0 ( set1 )				      	  set1.sort ( )						    								  
2 LOAD_METHOD 0 ( sort )				      	  set2.sort ( )						    								  
4 CALL_METHOD 0						      	  i = 0 ; j = 0						    								  
6 POP_TOP						      	  while ( i < m and j < n ) :				    								  
							      	      if ( set1 [ i ] < set2 [ j ] ) :			    								  
3 8 LOAD_FAST 1 ( set2 )				      		  i += 1					    								  
10 LOAD_METHOD 0 ( sort )				      	      elif ( set2 [ j ] < set1 [ i ] ) :		    								  
12 CALL_METHOD 0					      		  j += 1					    								  
14 POP_TOP						      	      else :						    								  
							      		  return False					    								  
4 16 LOAD_CONST 1 ( 0 )					      	  return True						    								  
18 STORE_FAST 4 ( i )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 24 SETUP_LOOP 76 ( to 102 )				      								    								  
>> 26 LOAD_FAST 4 ( i )					      								    								  
28 LOAD_FAST 2 ( m )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 100				      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 LOAD_FAST 3 ( n )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( set1 )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 1 ( set2 )					      								    								  
50 LOAD_FAST 5 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 0 ( < )					      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
7 58 LOAD_FAST 4 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( i )					      								    								  
66 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 68 LOAD_FAST 1 ( set2 )				      								    								  
70 LOAD_FAST 5 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( set1 )					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
9 84 LOAD_FAST 5 ( j )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 5 ( j )					      								    								  
92 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 94 LOAD_CONST 3 ( False )				      								    								  
96 RETURN_VALUE						      								    								  
98 JUMP_ABSOLUTE 26					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
12 >> 102 LOAD_CONST 4 ( True )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_ELEMENT					      NEXT_GREATER_ELEMENT					    NEXT_GREATER_ELEMENT					  NEXT_GREATER_ELEMENT
--							      --							    --								  --
Disassembly of <code object printNGE at 0x7fbac0e89d20, file  def printNGE ( arr ) :					    def printNGE ( arr , i , i , i , j , j , j ) :		  script_not_found : None
2 0 SETUP_LOOP 112 ( to 114 )				      	  for i in range ( 0 , len ( arr ) , 1 ) :		    	for i in range ( i ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      next = - 1					    	    i = i						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( i + 1 , len ( arr ) , 1 ) :	    	    i = i						  
6 LOAD_GLOBAL 1 ( len )					      		  if arr [ i ] < arr [ j ] :			    								  
8 LOAD_FAST 0 ( arr )					      		      next = arr [ j ]				    								  
10 CALL_FUNCTION 1					      		      break					    								  
12 LOAD_CONST 2 ( 1 )					      	      print ( str ( arr [ i ] ) + " -- " + str ( next ) )   								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 92 ( to 112 )				      								    								  
20 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 22 LOAD_CONST 3 ( - 1 )				      								    								  
24 STORE_FAST 2 ( next )				      								    								  
							      								    								  
4 26 SETUP_LOOP 54 ( to 82 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_GLOBAL 1 ( len )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 CALL_FUNCTION 3					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 30 ( to 80 )				      								    								  
50 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 1 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
6 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 STORE_FAST 2 ( next )				      								    								  
							      								    								  
7 76 BREAK_LOOP						      								    								  
78 JUMP_ABSOLUTE 48					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
8 >> 82 LOAD_GLOBAL 2 ( print )				      								    								  
84 LOAD_GLOBAL 3 ( str )				      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 1 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_CONST 4 ( ' -- ' )				      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_GLOBAL 3 ( str )				      								    								  
100 LOAD_FAST 2 ( next )				      								    								  
102 CALL_FUNCTION 1					      								    								  
104 BINARY_ADD						      								    								  
106 CALL_FUNCTION 1					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 18					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			      MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			    MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			  MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1
--							      --							    --								  --
Disassembly of <code object calculateEnergy at 0x7fbac0e89d20 def calculateEnergy ( mat , n ) :				    def calculateEnergy ( mat , n , offset , offset = 1 ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  tot_energy = 0					    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( tot_energy )				      	  for i in range ( n ) :				     Return the offset of the offset of the offset of the offset  /MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1.py", line
							      	      for j in range ( n ) :				     """							   28	  def f_filled ( mat , n , offset , offset =
3 4 SETUP_LOOP 102 ( to 108 )				      		  q = mat [ i ] [ j ] // n			    	for i in range ( offset ) :				   1 ) :     ^ SyntaxError: duplicate argument 'offs
6 LOAD_GLOBAL 0 ( range )				      		  i_des = q					    	    if offset < 0 :					  et' in function definition
8 LOAD_FAST 1 ( n )					      		  j_des = mat [ i ] [ j ] - ( n * q )		    		offset = offset					  
10 CALL_FUNCTION 1					      		  tot_energy += ( abs ( i_des - i ) + abs ( j_des - 	return offset						  
12 GET_ITER						      	  return tot_energy					    								  
>> 14 FOR_ITER 90 ( to 106 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 84 ( to 104 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 72 ( to 102 )				      								    								  
30 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( mat )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 4 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 BINARY_FLOOR_DIVIDE					      								    								  
46 STORE_FAST 5 ( q )					      								    								  
							      								    								  
6 48 LOAD_FAST 5 ( q )					      								    								  
50 STORE_FAST 6 ( i_des )				      								    								  
							      								    								  
7 52 LOAD_FAST 0 ( mat )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 LOAD_FAST 5 ( q )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_FAST 7 ( j_des )				      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( tot_energy )				      								    								  
74 LOAD_GLOBAL 1 ( abs )				      								    								  
76 LOAD_FAST 6 ( i_des )				      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 LOAD_GLOBAL 1 ( abs )				      								    								  
86 LOAD_FAST 7 ( j_des )				      								    								  
88 LOAD_FAST 4 ( j )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 BINARY_ADD						      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 2 ( tot_energy )				      								    								  
100 JUMP_ABSOLUTE 28					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 14					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
9 >> 108 LOAD_FAST 2 ( tot_energy )			      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POWER_SET						      POWER_SET							    POWER_SET							  POWER_SET
--							      --							    --								  --
Disassembly of <code object printPowerSet at 0x7fbac<<unk>> d def printPowerSet ( set , set_size ) :			    def printPowerSet ( ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  pow_set_size = ( int ) ( math.pow ( 2 , set_size ) ) ;    	""" STRNEWLINE SPACETOKEN Convert SPACETOKEN a SPACETOKEN 
2 LOAD_GLOBAL 1 ( math )				      	  counter = 0 ;						    								  
4 LOAD_METHOD 2 ( pow )					      	  j = 0 ;						    								  
6 LOAD_CONST 1 ( 2 )					      	  for counter in range ( 0 , pow_set_size ) :		    								  
8 LOAD_FAST 1 ( set_size )				      	      for j in range ( 0 , set_size ) :			    								  
10 CALL_METHOD 2					      		  if ( ( counter & ( 1 << j ) ) > 0 ) :		    								  
12 CALL_FUNCTION 1					      		      print ( set [ j ] , end = "" ) ;		    								  
14 STORE_FAST 2 ( pow_set_size )			      	      print ( "" ) ;					    								  
							      								    								  
3 16 LOAD_CONST 2 ( 0 )					      								    								  
18 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
4 20 LOAD_CONST 2 ( 0 )					      								    								  
22 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 24 SETUP_LOOP 78 ( to 104 )				      								    								  
26 LOAD_GLOBAL 3 ( range )				      								    								  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 LOAD_FAST 2 ( pow_set_size )				      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 64 ( to 102 )				      								    								  
38 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
6 40 SETUP_LOOP 50 ( to 92 )				      								    								  
42 LOAD_GLOBAL 3 ( range )				      								    								  
44 LOAD_CONST 2 ( 0 )					      								    								  
46 LOAD_FAST 1 ( set_size )				      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 36 ( to 90 )				      								    								  
54 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 56 LOAD_FAST 3 ( counter )				      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 BINARY_LSHIFT					      								    								  
64 BINARY_AND						      								    								  
66 LOAD_CONST 2 ( 0 )					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
8 72 LOAD_GLOBAL 4 ( print )				      								    								  
74 LOAD_FAST 0 ( set )					      								    								  
76 LOAD_FAST 4 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_CONST 4 ( '' )					      								    								  
82 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
88 JUMP_ABSOLUTE 52					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
9 >> 92 LOAD_GLOBAL 4 ( print )				      								    								  
94 LOAD_CONST 4 ( '' )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 POP_TOP						      								    								  
100 JUMP_ABSOLUTE 36					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STERN_BROCOT_SEQUENCE					      STERN_BROCOT_SEQUENCE					    STERN_BROCOT_SEQUENCE					  STERN_BROCOT_SEQUENCE
--							      --							    --								  --
Disassembly of <code object SternSequenceFunc at 0x7fbac<<unk def SternSequenceFunc ( BrocotSequence , n ) :		    def SternSequenceFunc ( Brocococococococococococococococococo script_not_found : None
2 0 SETUP_LOOP 62 ( to 64 )				      	  for i in range ( 1 , n ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      considered_element = BrocotSequence [ i ]		    								  
4 LOAD_CONST 1 ( 1 )					      	      precedent = BrocotSequence [ i - 1 ]		    								  
6 LOAD_FAST 1 ( n )					      	      BrocotSequence.append ( considered_element + preceden 								  
8 CALL_FUNCTION 2					      	      BrocotSequence.append ( considered_element )	    								  
10 GET_ITER						      	  for i in range ( 0 , 15 ) :				    								  
>> 12 FOR_ITER 48 ( to 62 )				      	      print ( BrocotSequence [ i ] , end = " " )	    								  
14 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( BrocotSequence )			      								    								  
18 LOAD_FAST 2 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 STORE_FAST 3 ( considered_element )			      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( BrocotSequence )			      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 4 ( precedent )				      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( BrocotSequence )			      								    								  
38 LOAD_METHOD 1 ( append )				      								    								  
40 LOAD_FAST 3 ( considered_element )			      								    								  
42 LOAD_FAST 4 ( precedent )				      								    								  
44 BINARY_ADD						      								    								  
46 CALL_METHOD 1					      								    								  
48 POP_TOP						      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( BrocotSequence )			      								    								  
52 LOAD_METHOD 1 ( append )				      								    								  
54 LOAD_FAST 3 ( considered_element )			      								    								  
56 CALL_METHOD 1					      								    								  
58 POP_TOP						      								    								  
60 JUMP_ABSOLUTE 12					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 SETUP_LOOP 34 ( to 100 )			      								    								  
66 LOAD_GLOBAL 0 ( range )				      								    								  
68 LOAD_CONST 2 ( 0 )					      								    								  
70 LOAD_CONST 3 ( 15 )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 20 ( to 98 )				      								    								  
78 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 80 LOAD_GLOBAL 2 ( print )				      								    								  
82 LOAD_FAST 0 ( BrocotSequence )			      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 4 ( ' ' )					      								    								  
90 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
92 CALL_FUNCTION_KW 2					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 76					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	      DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lcs at 0x7fbac<<unk>> d540, file  def lcs ( X , Y , m , n ) :				    def lcs ( X , Y , n ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if m == 0 or n == 0 :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  elif X [ m - 1 ] == Y [ n - 1 ] :			    	if n == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	      return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	    	    return 0						  
8 LOAD_FAST 3 ( n )					      	  else :						    	if n == 1 :						  
10 LOAD_CONST 1 ( 0 )					      	      return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	return ( ( n , n )					  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( X )				      								    								  
22 LOAD_FAST 2 ( m )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( Y )					      								    								  
32 LOAD_FAST 3 ( n )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
5 44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_GLOBAL 0 ( lcs )				      								    								  
48 LOAD_FAST 0 ( X )					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 2 ( m )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 4					      								    								  
66 BINARY_ADD						      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
7 >> 70 LOAD_GLOBAL 1 ( max )				      								    								  
72 LOAD_GLOBAL 0 ( lcs )				      								    								  
74 LOAD_FAST 0 ( X )					      								    								  
76 LOAD_FAST 1 ( Y )					      								    								  
78 LOAD_FAST 2 ( m )					      								    								  
80 LOAD_FAST 3 ( n )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 4					      								    								  
88 LOAD_GLOBAL 0 ( lcs )				      								    								  
90 LOAD_FAST 0 ( X )					      								    								  
92 LOAD_FAST 1 ( Y )					      								    								  
94 LOAD_FAST 2 ( m )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 LOAD_FAST 3 ( n )					      								    								  
102 CALL_FUNCTION 4					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 RETURN_VALUE					      								    								  
108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printRepeating at 0x7fbac<<unk>>  def printRepeating ( arr , size ) :			    def printRepeating ( arr , size = 0 , size = 1 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * size					    	"""							  
2 BUILD_LIST 1						      	  print ( " Repeating elements are " , end = "" )	     Return the first array of the first array of shape and the f 
4 LOAD_FAST 1 ( size )					      	  for i in range ( 0 , size ) :				     the first array are returned.				  
6 BINARY_MULTIPLY					      	      if ( count [ arr [ i ] ] == 1 ) :			     """							  
8 STORE_FAST 2 ( count )				      		  print ( arr [ i ] , end = " " )		    	# We need a list of shape of shape of shape are returned. 
							      	      else :						    	arr = arr [ size ]					  
3 10 LOAD_GLOBAL 0 ( print )				      		  count [ arr [ i ] ] = count [ arr [ i ] ] + 1	    	# We need to check the first array of shape of shape (i++ 
12 LOAD_CONST 2 ( ' Repeating elements are ' )		      								    								  
14 LOAD_CONST 3 ( '' )					      								    								  
16 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
18 CALL_FUNCTION_KW 2					      								    								  
20 POP_TOP						      								    								  
							      								    								  
4 22 SETUP_LOOP 76 ( to 100 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 1 ( size )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 62 ( to 98 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 38 LOAD_FAST 2 ( count )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 5 ( 1 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 54 LOAD_GLOBAL 0 ( print )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 6 ( ' ' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
8 >> 72 LOAD_FAST 2 ( count )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 5 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( count )				      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 34					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1
--							      --							    --								  --
Disassembly of <code object findNth at 0x7fbac0e89d20, file " def findNth ( n ) :					    def findNth ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( count )				      	  curr = 19 ;						    	count = 0						  /N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1.py", lin
							      	  while ( True ) :					    	count = 0						  e 159	    return count     ^ SyntaxError: 'return'
3 4 LOAD_CONST 2 ( 19 )					      	      sum = 0 ;						    	count = 0						   outside function
6 STORE_FAST 2 ( curr )					      	      x = curr ;					    	count = 0						  
							      	      while ( x > 0 ) :					    	count = 1						  
4 8 SETUP_LOOP 86 ( to 96 )				      		  sum = sum + x % 10 ;				    	count = 0						  
							      		  x = int ( x / 10 ) ;				    	count = 0						  
5 >> 10 LOAD_CONST 1 ( 0 )				      	      if ( sum == 10 ) :				    	count = 0						  
12 STORE_FAST 3 ( sum )					      		  count += 1 ;					    	count = 0						  
							      	      if ( count == n ) :				    	count = 0						  
6 14 LOAD_FAST 2 ( curr )				      		  return curr ;					    	count = 0						  
16 STORE_FAST 4 ( x )					      	      curr += 9 ;					    	count = 0						  
							      	  return - 1 ;						    	count = 0						  
7 18 SETUP_LOOP 36 ( to 56 )				      								    	count = 0						  
>> 20 LOAD_FAST 4 ( x )					      								    	count = 0						  
22 LOAD_CONST 1 ( 0 )					      								    	count = count						  
24 COMPARE_OP 4 ( > )					      								    	count += 1						  
26 POP_JUMP_IF_FALSE 54					      								    	count += 1						  
							      								    	count += 1						  
8 28 LOAD_FAST 3 ( sum )				      								    	count += 1						  
30 LOAD_FAST 4 ( x )					      								    	count += 1						  
32 LOAD_CONST 3 ( 10 )					      								    	count += 1						  
34 BINARY_MODULO					      								    	count += 1						  
36 BINARY_ADD						      								    	count += 1						  
38 STORE_FAST 3 ( sum )					      								    	count += 1						  
							      								    	count += 1						  
9 40 LOAD_GLOBAL 0 ( int )				      								    	count += 1						  
42 LOAD_FAST 4 ( x )					      								    	count += 1						  
44 LOAD_CONST 3 ( 10 )					      								    	count += 1						  
46 BINARY_TRUE_DIVIDE					      								    	count += 1						  
48 CALL_FUNCTION 1					      								    	count += 1						  
50 STORE_FAST 4 ( x )					      								    	count += 1						  
52 JUMP_ABSOLUTE 20					      								    	count += 1						  
>> 54 POP_BLOCK						      								    	count += 1						  
							      								    	count += 1						  
10 >> 56 LOAD_FAST 3 ( sum )				      								    	count += 1						  
58 LOAD_CONST 3 ( 10 )					      								    	count += 1						  
60 COMPARE_OP 2 ( == )					      								    	count += 1						  
62 POP_JUMP_IF_FALSE 72					      								    	count += 1						  
							      								    	count += 1						  
11 64 LOAD_FAST 1 ( count )				      								    	count += 1						  
66 LOAD_CONST 4 ( 1 )					      								    	count += 1						  
68 INPLACE_ADD						      								    	count += 1						  
70 STORE_FAST 1 ( count )				      								    	count += 1						  
							      								    	count += 1						  
12 >> 72 LOAD_FAST 1 ( count )				      								    	count += 1						  
74 LOAD_FAST 0 ( n )					      								    	count += 1						  
76 COMPARE_OP 2 ( == )					      								    	count += 1						  
78 POP_JUMP_IF_FALSE 84					      								    	count += 1						  
							      								    	count += 1						  
13 80 LOAD_FAST 2 ( curr )				      								    	count += 1						  
82 RETURN_VALUE						      								    	count += 1						  
							      								    	count += 1						  
14 >> 84 LOAD_FAST 2 ( curr )				      								    	count += 1						  
86 LOAD_CONST 5 ( 9 )					      								    	count += 1						  
88 INPLACE_ADD						      								    	count += 1						  
90 STORE_FAST 2 ( curr )				      								    	count += 1						  
92 JUMP_ABSOLUTE 10					      								    	count += 1						  
94 POP_BLOCK						      								    	count += 1						  
							      								    	count += 1						  
15 >> 96 LOAD_CONST 6 ( - 1 )				      								    	count += 1						  
98 RETURN_VALUE NEW_LINE				      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    	count += 1						  
							      								    return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		      MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		    MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		  MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7fbac<<unk>> d540, fi def maxSum ( grid , n ) :					    def maxSum ( grid , n = 0 , n = 1 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( max )				      	  incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )	    	""" STRNEWLINE SPACETOKEN max SPACETOKEN of SPACETOKEN th l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( grid )					      	  excl = 0						    								  /MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT.p
4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 1 , n ) :				    								  y", line 48	  print("#Results: %i, %i" % (n_succ
6 BINARY_SUBSCR						      	      excl_new = max ( excl , incl )			    								  ess, len(param)))
8 LOAD_CONST 1 ( 0 )					      	      incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i 								  			^ SyntaxError: EOF while sca
10 BINARY_SUBSCR					      	      excl = excl_new					    								  nning triple-quoted string literal
12 LOAD_FAST 0 ( grid )					      	  return max ( excl , incl )				    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBSCR					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 STORE_FAST 2 ( incl )				      								    								  
							      								    								  
3 26 LOAD_CONST 1 ( 0 )					      								    								  
28 STORE_FAST 3 ( excl )				      								    								  
							      								    								  
4 30 SETUP_LOOP 62 ( to 94 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 48 ( to 92 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 0 ( max )				      								    								  
48 LOAD_FAST 3 ( excl )					      								    								  
50 LOAD_FAST 2 ( incl )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 STORE_FAST 5 ( excl_new )				      								    								  
							      								    								  
6 56 LOAD_FAST 3 ( excl )				      								    								  
58 LOAD_GLOBAL 0 ( max )				      								    								  
60 LOAD_FAST 0 ( grid )					      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( grid )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 4 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 2 ( incl )				      								    								  
							      								    								  
7 86 LOAD_FAST 5 ( excl_new )				      								    								  
88 STORE_FAST 3 ( excl )				      								    								  
90 JUMP_ABSOLUTE 42					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
8 >> 94 LOAD_GLOBAL 0 ( max )				      								    								  
96 LOAD_FAST 3 ( excl )					      								    								  
98 LOAD_FAST 2 ( incl )					      								    								  
100 CALL_FUNCTION 2					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MIDDLE_ROW_COLUMN_MATRIX				      SUM_MIDDLE_ROW_COLUMN_MATRIX				    SUM_MIDDLE_ROW_COLUMN_MATRIX				  SUM_MIDDLE_ROW_COLUMN_MATRIX
--							      --							    --								  --
Disassembly of <code object middlesum at 0x7fbac<<unk>> de40, def middlesum ( mat , n ) :				    def middlesum ( mat , n , row_sum = 1 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  row_sum = 0						    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( row_sum )				      	  col_sum = 0						     Return the maximum number of the given array of the given ar /SUM_MIDDLE_ROW_COLUMN_MATRIX.py", line 45	 if
							      	  for i in range ( n ) :				     the maximum array of the given array of the given array of t __name__ == '__main__':      ^ SyntaxError: invali
3 4 LOAD_CONST 1 ( 0 )					      	      row_sum += mat [ n // 2 ] [ i ]			     the maximum array of the values to be converted to		  d syntax
6 STORE_FAST 3 ( col_sum )				      	  print ( "Sum of middle row = " , row_sum )		     the maximum array of the maximum array of the maximum array  
							      	  for i in range ( n ) :				     the maximum array of the maximum array to be converted to th 
4 8 SETUP_LOOP 36 ( to 46 )				      	      col_sum += mat [ i ] [ n // 2 ]			     the maximum array of the maximum array of the maximum array  
10 LOAD_GLOBAL 0 ( range )				      	  print ( "Sum of middle column = " , col_sum )		     of the maximum array of the maximum array to the maximum arr 
12 LOAD_FAST 1 ( n )					      								     of the maximum array of the maximum array to the maximum arr 
14 CALL_FUNCTION 1					      								     maximum array of the maximum array to be converted to the ma 
16 GET_ITER						      								     """							  
>> 18 FOR_ITER 24 ( to 44 )				      								    	# If the maximum array is the maximum array of the maximu 
20 STORE_FAST 4 ( i )					      								    	# If the maximum array is maximum array of the maximum ar 
							      								    	if n > row_sum :					  
5 22 LOAD_FAST 2 ( row_sum )				      								    	    return np.array ( np.array ( np.array ( np.array ( np 
24 LOAD_FAST 0 ( mat )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 BINARY_FLOOR_DIVIDE					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( row_sum )				      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_GLOBAL 1 ( print )				      								    								  
48 LOAD_CONST 3 ( 'Sum of middle row = ' )		      								    								  
50 LOAD_FAST 2 ( row_sum )				      								    								  
52 CALL_FUNCTION 2					      								    								  
54 POP_TOP						      								    								  
							      								    								  
7 56 SETUP_LOOP 36 ( to 94 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 24 ( to 92 )				      								    								  
68 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 70 LOAD_FAST 3 ( col_sum )				      								    								  
72 LOAD_FAST 0 ( mat )					      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 LOAD_CONST 2 ( 2 )					      								    								  
82 BINARY_FLOOR_DIVIDE					      								    								  
84 BINARY_SUBSCR					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 3 ( col_sum )				      								    								  
90 JUMP_ABSOLUTE 66					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
9 >> 94 LOAD_GLOBAL 1 ( print )				      								    								  
96 LOAD_CONST 4 ( 'Sum of middle column = ' )		      								    								  
98 LOAD_FAST 3 ( col_sum )				      								    								  
100 CALL_FUNCTION 2					      								    								  
102 POP_TOP						      								    								  
104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG
--							      --							    --								  --
Disassembly of <code object generate at 0x7fbac0e8bc90, file  def generate ( st , s ) :					    def generate ( fbfbac0000000000000000000000000000000000000000 script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  if len ( s ) == 0 :					    								  
2 LOAD_FAST 1 ( s )					      	      return						    								  
4 CALL_FUNCTION 1					      	  if s not in st :					    								  
6 LOAD_CONST 1 ( 0 )					      	      st.add ( s )					    								  
8 COMPARE_OP 2 ( == )					      	      for i in range ( len ( s ) ) :			    								  
10 POP_JUMP_IF_FALSE 16					      		  t = list ( s ).copy ( )			    								  
							      		  t.remove ( s [ i ] )				    								  
3 12 LOAD_CONST 0 ( None )				      		  t = ''.join ( t )				    								  
14 RETURN_VALUE						      		  generate ( st , t )				    								  
							      	  return						    								  
4 >> 16 LOAD_FAST 1 ( s )				      								    								  
18 LOAD_FAST 0 ( st )					      								    								  
20 COMPARE_OP 7 ( not in )				      								    								  
22 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( st )					      								    								  
26 LOAD_METHOD 1 ( add )				      								    								  
28 LOAD_FAST 1 ( s )					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
							      								    								  
6 34 SETUP_LOOP 66 ( to 102 )				      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_GLOBAL 0 ( len )				      								    								  
40 LOAD_FAST 1 ( s )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 50 ( to 100 )				      								    								  
50 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 52 LOAD_GLOBAL 3 ( list )				      								    								  
54 LOAD_FAST 1 ( s )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_METHOD 4 ( copy )				      								    								  
60 CALL_METHOD 0					      								    								  
62 STORE_FAST 3 ( t )					      								    								  
							      								    								  
8 64 LOAD_FAST 3 ( t )					      								    								  
66 LOAD_METHOD 5 ( remove )				      								    								  
68 LOAD_FAST 1 ( s )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_METHOD 1					      								    								  
76 POP_TOP						      								    								  
							      								    								  
9 78 LOAD_CONST 2 ( '' )				      								    								  
80 LOAD_METHOD 6 ( join )				      								    								  
82 LOAD_FAST 3 ( t )					      								    								  
84 CALL_METHOD 1					      								    								  
86 STORE_FAST 3 ( t )					      								    								  
							      								    								  
10 88 LOAD_GLOBAL 7 ( generate )			      								    								  
90 LOAD_FAST 0 ( st )					      								    								  
92 LOAD_FAST 3 ( t )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 48					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS
--							      --							    --								  --
Disassembly of <code object difference at 0x7fbac0e8bc90, fil def difference ( arr , n ) :				    def difference ( arr ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  d1 = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( d1 )					      	  d2 = 0						    								  /FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS.py"
							      	  for i in range ( 0 , n ) :				    								  , line 50	print("#Results: %i, %i" % (n_succes
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n ) :			    								  s, len(param)))
6 STORE_FAST 3 ( d2 )					      		  if ( i == j ) :				    								  		      ^ SyntaxError: EOF while scann
							      		      d1 += arr [ i ] [ j ]			    								  ing triple-quoted string literal
4 8 SETUP_LOOP 94 ( to 104 )				      		  if ( i == n - j - 1 ) :			    								  
10 LOAD_GLOBAL 0 ( range )				      		      d2 += arr [ i ] [ j ]			    								  
12 LOAD_CONST 1 ( 0 )					      	  return abs ( d1 - d2 ) ;				    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 80 ( to 102 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 74 ( to 100 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 60 ( to 98 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( d1 )					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( d1 )					      								    								  
							      								    								  
8 >> 64 LOAD_FAST 4 ( i )				      								    								  
66 LOAD_FAST 1 ( n )					      								    								  
68 LOAD_FAST 5 ( j )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
9 80 LOAD_FAST 3 ( d2 )					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 3 ( d2 )					      								    								  
96 JUMP_ABSOLUTE 36					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 20					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
10 >> 104 LOAD_GLOBAL 1 ( abs )				      								    								  
106 LOAD_FAST 2 ( d1 )					      								    								  
108 LOAD_FAST 3 ( d2 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_XOR_VALUE_MATRIX				      MAXIMUM_XOR_VALUE_MATRIX					    MAXIMUM_XOR_VALUE_MATRIX					  MAXIMUM_XOR_VALUE_MATRIX
--							      --							    --								  --
Disassembly of <code object maxXOR at 0x7fbac<<unk>> d540, fi def maxXOR ( mat , N ) :					    def maxXOR ( mat , N ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  max_xor = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( max_xor )				      	  for i in range ( N ) :				    								  /MAXIMUM_XOR_VALUE_MATRIX.py", line 51     print("
							      	      r_xor = 0						    								  #Results: %i, %i" % (n_success, len(param)))
3 4 SETUP_LOOP 98 ( to 104 )				      	      c_xor = 0						    								  						   ^
6 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    								   SyntaxError: EOF while scanning triple-quoted str
8 LOAD_FAST 1 ( N )					      		  r_xor = r_xor ^ mat [ i ] [ j ]		    								  ing literal
10 CALL_FUNCTION 1					      		  c_xor = c_xor ^ mat [ j ] [ i ]		    								  
12 GET_ITER						      	      if ( max_xor < max ( r_xor , c_xor ) ) :		    								  
>> 14 FOR_ITER 86 ( to 102 )				      		  max_xor = max ( r_xor , c_xor )		    								  
16 STORE_FAST 3 ( i )					      	  return max_xor					    								  
							      								    								  
4 18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_FAST 4 ( r_xor )				      								    								  
							      								    								  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 5 ( c_xor )				      								    								  
							      								    								  
6 26 SETUP_LOOP 48 ( to 76 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 1 ( N )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 36 ( to 74 )				      								    								  
38 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 40 LOAD_FAST 4 ( r_xor )				      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_XOR						      								    								  
54 STORE_FAST 4 ( r_xor )				      								    								  
							      								    								  
8 56 LOAD_FAST 5 ( c_xor )				      								    								  
58 LOAD_FAST 0 ( mat )					      								    								  
60 LOAD_FAST 6 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_XOR						      								    								  
70 STORE_FAST 5 ( c_xor )				      								    								  
72 JUMP_ABSOLUTE 36					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_FAST 2 ( max_xor )				      								    								  
78 LOAD_GLOBAL 1 ( max )				      								    								  
80 LOAD_FAST 4 ( r_xor )				      								    								  
82 LOAD_FAST 5 ( c_xor )				      								    								  
84 CALL_FUNCTION 2					      								    								  
86 COMPARE_OP 0 ( < )					      								    								  
88 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
10 90 LOAD_GLOBAL 1 ( max )				      								    								  
92 LOAD_FAST 4 ( r_xor )				      								    								  
94 LOAD_FAST 5 ( c_xor )				      								    								  
96 CALL_FUNCTION 2					      								    								  
98 STORE_FAST 2 ( max_xor )				      								    								  
100 JUMP_ABSOLUTE 14					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
11 >> 104 LOAD_FAST 2 ( max_xor )			      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_1S_SORTED_BINARY_ARRAY				      COUNT_1S_SORTED_BINARY_ARRAY				    COUNT_1S_SORTED_BINARY_ARRAY				  COUNT_1S_SORTED_BINARY_ARRAY
--							      --							    --								  --
Disassembly of <code object countOnes at 0x7fbac<<unk>> de40, def countOnes ( arr , low , high ) :			    def countOnes ( arr , low , high , high ) :			  script_not_found : None
2 0 LOAD_FAST 2 ( high )				      	  if high >= low :					    	if high < high :					  
2 LOAD_FAST 1 ( low )					      	      mid = low + ( high - low ) / 2			    	    return None						  
4 COMPARE_OP 5 ( >= )					      	      if ( ( mid == high or arr [ mid + 1 ] == 0 ) and ( ar 	elif high < high :					  
6 POP_JUMP_IF_FALSE 112					      		  return mid + 1				    	    return None						  
							      	      if arr [ mid ] == 1 :				    	elif high < high :					  
3 8 LOAD_FAST 1 ( low )					      		  return countOnes ( arr , ( mid + 1 ) , high )	    	    return None						  
10 LOAD_FAST 2 ( high )					      	      return countOnes ( arr , low , mid - 1 )		    	elif high < high :					  
12 LOAD_FAST 1 ( low )					      	  return 0						    	    return None						  
14 BINARY_SUBTRACT					      								    	elif high < high :					  
16 LOAD_CONST 1 ( 2 )					      								    	    return None						  
18 BINARY_TRUE_DIVIDE					      								    	elif high < high :					  
20 BINARY_ADD						      								    	    return None						  
22 STORE_FAST 3 ( mid )					      								    	elif high < high :					  
							      								    	    return None						  
4 24 LOAD_FAST 3 ( mid )				      								    	elif high < high :					  
26 LOAD_FAST 2 ( high )					      								    	    return None						  
28 COMPARE_OP 2 ( == )					      								    	elif high < high :					  
30 POP_JUMP_IF_TRUE 48					      								    	    return None						  
32 LOAD_FAST 0 ( arr )					      								    	elif high < high :					  
34 LOAD_FAST 3 ( mid )					      								    	    return None						  
36 LOAD_CONST 2 ( 1 )					      								    	elif high < high :					  
38 BINARY_ADD						      								    	    return None						  
40 BINARY_SUBSCR					      								    	elif high < high :					  
42 LOAD_CONST 3 ( 0 )					      								    	    return None						  
44 COMPARE_OP 2 ( == )					      								    	elif high < high :					  
46 POP_JUMP_IF_FALSE 68					      								    	    return None						  
>> 48 LOAD_FAST 0 ( arr )				      								    	elif high < high :					  
50 LOAD_FAST 3 ( mid )					      								    	    return None						  
52 BINARY_SUBSCR					      								    	elif high < high :					  
54 LOAD_CONST 2 ( 1 )					      								    	    return None						  
56 COMPARE_OP 2 ( == )					      								    	elif high < high :					  
58 POP_JUMP_IF_FALSE 68					      								    	    return None						  
							      								    	elif high < high :					  
5 60 LOAD_FAST 3 ( mid )				      								    	    return None						  
62 LOAD_CONST 2 ( 1 )					      								    	elif high < high :					  
64 BINARY_ADD						      								    	    return None						  
66 RETURN_VALUE						      								    	elif high < high :					  
							      								    	    return None						  
6 >> 68 LOAD_FAST 0 ( arr )				      								    	elif high < high :					  
70 LOAD_FAST 3 ( mid )					      								    	    return None						  
72 BINARY_SUBSCR					      								    	elif high < high :					  
74 LOAD_CONST 2 ( 1 )					      								    	    return None						  
76 COMPARE_OP 2 ( == )					      								    	elif high < high :					  
78 POP_JUMP_IF_FALSE 96					      								    	    return None						  
							      								    	elif high < high :					  
7 80 LOAD_GLOBAL 0 ( countOnes )			      								    	    return None						  
82 LOAD_FAST 0 ( arr )					      								    	elif high < high :					  
84 LOAD_FAST 3 ( mid )					      								    	    return None						  
86 LOAD_CONST 2 ( 1 )					      								    	elif high < high :					  
88 BINARY_ADD						      								    	    return None						  
90 LOAD_FAST 2 ( high )					      								    	elif high < high :					  
92 CALL_FUNCTION 3					      								    	    return None						  
94 RETURN_VALUE						      								    	elif high < high :					  
							      								    	    return None						  
8 >> 96 LOAD_GLOBAL 0 ( countOnes )			      								    	elif high < high :					  
98 LOAD_FAST 0 ( arr )					      								    	    return None						  
100 LOAD_FAST 1 ( low )					      								    	elif high < high :					  
102 LOAD_FAST 3 ( mid )					      								    	    return None						  
104 LOAD_CONST 2 ( 1 )					      								    	elif high < high :					  
106 BINARY_SUBTRACT					      								    	    return None						  
108 CALL_FUNCTION 3					      								    	elif high < high :					  
110 RETURN_VALUE					      								    	    return None						  
							      								    	elif high < high :					  
9 >> 112 LOAD_CONST 3 ( 0 )				      								    	    return None						  
114 RETURN_VALUE NEW_LINE				      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
							      								    	elif high < high :					  
							      								    	    return None						  
-							      -								    	    -							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FIBONACCI_NUMBERS					      SUM_FIBONACCI_NUMBERS					    SUM_FIBONACCI_NUMBERS					  SUM_FIBONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7fbac<<unk>> d5 def calculateSum ( n ) :					    def calculateSum ( n , fibo , ** kwargs ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  /eval_scripts/dis_sa-python_sa.test/SUM_FIBONACCI_
4 COMPARE_OP 1 ( <= )					      	  fibo = [ 0 ] * ( n + 1 )				    	if n <= 0 :						  NUMBERS.py", line 56, in <module>	if f_filled(
6 POP_JUMP_IF_FALSE 12					      	  fibo [ 1 ] = 1					    	    return 0						  *parameters_set) == f_gold(*parameters_set): TypeE
							      	  sm = fibo [ 0 ] + fibo [ 1 ]				    	if n <= 0 :						  rror: f_filled() missing 1 required positional arg
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 2 , n + 1 ) :			    	    return 0						  ument: 'fibo'
10 RETURN_VALUE						      	      fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]	    	if n <= 0 :						  
							      	      sm = sm + fibo [ i ]				    	    return 0						  
4 >> 12 LOAD_CONST 1 ( 0 )				      	  return sm						    	return 0						  
14 BUILD_LIST 1						      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 BINARY_MULTIPLY					      								    								  
24 STORE_FAST 1 ( fibo )				      								    								  
							      								    								  
5 26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_FAST 1 ( fibo )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 STORE_SUBSCR						      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( fibo )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 1 ( fibo )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 2 ( sm )					      								    								  
							      								    								  
7 50 SETUP_LOOP 62 ( to 114 )				      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 44 ( to 112 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 70 LOAD_FAST 1 ( fibo )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( fibo )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 1 ( fibo )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 STORE_SUBSCR						      								    								  
							      								    								  
9 98 LOAD_FAST 2 ( sm )					      								    								  
100 LOAD_FAST 1 ( fibo )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 2 ( sm )					      								    								  
110 JUMP_ABSOLUTE 66					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
10 >> 114 LOAD_FAST 2 ( sm )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS	  REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS
--							      --							    --								  --
Disassembly of <code object psuedoBinary at 0x7fbac<<unk>> d5 def psuedoBinary ( n ) :					    def psuedoBinary ( n ) :					  script_not_found : None
2 0 SETUP_LOOP 98 ( to 100 )				      	  while ( n > 0 ) :					    	for n in range ( n ) :					  
>> 2 LOAD_FAST 0 ( n )					      	      temp = n ;					    	    if n < 0 :						  
4 LOAD_CONST 1 ( 0 )					      	      m = 0 ;						    		return n					  
6 COMPARE_OP 4 ( > )					      	      p = 1 ;						    								  
8 POP_JUMP_IF_FALSE 98					      	      while ( temp ) :					    								  
							      		  rem = temp % 10 ;				    								  
3 10 LOAD_FAST 0 ( n )					      		  temp = int ( temp / 10 ) ;			    								  
12 STORE_FAST 1 ( temp )				      		  if ( rem != 0 ) :				    								  
							      		      m += p ;					    								  
4 14 LOAD_CONST 1 ( 0 )					      		  p *= 10 ;					    								  
16 STORE_FAST 2 ( m )					      	      print ( m , end = " " ) ;				    								  
							      	      n = n - m ;					    								  
5 18 LOAD_CONST 2 ( 1 )					      								    								  
20 STORE_FAST 3 ( p )					      								    								  
							      								    								  
6 22 SETUP_LOOP 52 ( to 76 )				      								    								  
>> 24 LOAD_FAST 1 ( temp )				      								    								  
26 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
7 28 LOAD_FAST 1 ( temp )				      								    								  
30 LOAD_CONST 3 ( 10 )					      								    								  
32 BINARY_MODULO					      								    								  
34 STORE_FAST 4 ( rem )					      								    								  
							      								    								  
8 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 1 ( temp )					      								    								  
40 LOAD_CONST 3 ( 10 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 1 ( temp )				      								    								  
							      								    								  
9 48 LOAD_FAST 4 ( rem )				      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
10 56 LOAD_FAST 2 ( m )					      								    								  
58 LOAD_FAST 3 ( p )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( m )					      								    								  
							      								    								  
11 >> 64 LOAD_FAST 3 ( p )				      								    								  
66 LOAD_CONST 3 ( 10 )					      								    								  
68 INPLACE_MULTIPLY					      								    								  
70 STORE_FAST 3 ( p )					      								    								  
72 JUMP_ABSOLUTE 24					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
12 >> 76 LOAD_GLOBAL 1 ( print )			      								    								  
78 LOAD_FAST 2 ( m )					      								    								  
80 LOAD_CONST 4 ( ' ' )					      								    								  
82 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
							      								    								  
13 88 LOAD_FAST 0 ( n )					      								    								  
90 LOAD_FAST 2 ( m )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 STORE_FAST 0 ( n )					      								    								  
96 JUMP_ABSOLUTE 2					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_REACHING_POINT_2_3_STEPS_TIME		      PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			    PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			  PROBABILITY_REACHING_POINT_2_3_STEPS_TIME
--							      --							    --								  --
Disassembly of <code object find_prob at 0x7fbac<<unk>> d540, def find_prob ( N , P ) :					    def find_prob ( N ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( n + 1 )				    	n = 0							  
2 BUILD_LIST 1						      	  dp [ 0 ] = 1						    	for n in N :						  
4 LOAD_GLOBAL 0 ( n )					      	  dp [ 1 ] = 0						    	    n = n [ n : n ]					  
6 LOAD_CONST 2 ( 1 )					      	  dp [ 2 ] = P						    	return n						  
8 BINARY_ADD						      	  dp [ 3 ] = 1 - P					    								  
10 BINARY_MULTIPLY					      	  for i in range ( 4 , N + 1 ) :			    								  
12 STORE_FAST 2 ( dp )					      	      dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i  								  
							      	  return dp [ N ]					    								  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 LOAD_FAST 2 ( dp )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 2 ( dp )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( P )					      								    								  
32 LOAD_FAST 2 ( dp )					      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 STORE_SUBSCR						      								    								  
							      								    								  
6 38 LOAD_CONST 2 ( 1 )					      								    								  
40 LOAD_FAST 1 ( P )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 2 ( dp )					      								    								  
46 LOAD_CONST 4 ( 3 )					      								    								  
48 STORE_SUBSCR						      								    								  
							      								    								  
7 50 SETUP_LOOP 62 ( to 114 )				      								    								  
52 LOAD_GLOBAL 1 ( range )				      								    								  
54 LOAD_CONST 5 ( 4 )					      								    								  
56 LOAD_FAST 0 ( N )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 44 ( to 112 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 70 LOAD_FAST 1 ( P )					      								    								  
72 LOAD_FAST 2 ( dp )					      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_MULTIPLY					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 LOAD_FAST 1 ( P )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 2 ( dp )					      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 LOAD_CONST 4 ( 3 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 BINARY_ADD						      								    								  
104 LOAD_FAST 2 ( dp )					      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 STORE_SUBSCR					      								    								  
110 JUMP_ABSOLUTE 66					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
9 >> 114 LOAD_FAST 2 ( dp )				      								    								  
116 LOAD_FAST 0 ( N )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	      SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	    SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING	  SEARCHING_FOR_PATTERNS_SET_1_NAIVE_PATTERN_SEARCHING
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac<<unk>> d540, fi def search ( pat , txt ) :				    def search ( pat , txt , txt , start = 1 ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  M = len ( pat )					    	"""							  
2 LOAD_FAST 0 ( pat )					      	  N = len ( txt )					     Returns a list of pat and the first of the file in the file. 
4 CALL_FUNCTION 1					      	  for i in range ( N - M + 1 ) :			     """							  
6 STORE_FAST 2 ( M )					      	      j = 0						    	# We need to search the file in the file of the file and  
							      	      while ( j < M ) :					    								  
3 8 LOAD_GLOBAL 0 ( len )				      		  if ( txt [ i + j ] != pat [ j ] ) :		    								  
10 LOAD_FAST 1 ( txt )					      		      break					    								  
12 CALL_FUNCTION 1					      		  j += 1					    								  
14 STORE_FAST 3 ( N )					      	      if ( j == M ) :					    								  
							      		  print ( "Pattern found at index " , i )	    								  
4 16 SETUP_LOOP 90 ( to 108 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 3 ( N )					      								    								  
22 LOAD_FAST 2 ( M )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 70 ( to 106 )				      								    								  
36 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 38 LOAD_CONST 2 ( 0 )					      								    								  
40 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 42 SETUP_LOOP 42 ( to 86 )				      								    								  
>> 44 LOAD_FAST 5 ( j )					      								    								  
46 LOAD_FAST 2 ( M )					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
7 52 LOAD_FAST 1 ( txt )				      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_ADD						      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( pat )					      								    								  
64 LOAD_FAST 5 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 3 ( != )					      								    								  
70 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
8 72 BREAK_LOOP						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 5 ( j )				      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( j )					      								    								  
82 JUMP_ABSOLUTE 44					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 5 ( j )				      								    								  
88 LOAD_FAST 2 ( M )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
11 94 LOAD_GLOBAL 2 ( print )				      								    								  
96 LOAD_CONST 3 ( 'Pattern found at index ' )		      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 CALL_FUNCTION 2					      								    								  
102 POP_TOP						      								    								  
104 JUMP_ABSOLUTE 34					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT	      STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT	    STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT		  STRING_K_DISTINCT_CHARACTERS_NO_CHARACTERS_ADJACENT
--							      --							    --								  --
Disassembly of <code object findString at 0x7fbac0e8bc90, fil def findString ( n , k ) :				    def findString ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( '' )					      	  res = ""						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( res )					      	  for i in range ( k ) :				     Returns the string of a string to a string in the string of  /eval_scripts/dis_sa-python_sa.test/STRING_K_DISTI
							      	      res = res + chr ( ord ( 'a' ) + i )		     """							  NCT_CHARACTERS_NO_CHARACTERS_ADJACENT.py", line 55
3 4 SETUP_LOOP 36 ( to 42 )				      	  count = 0						    	for i in range ( n ) :					  , in <module>	    if f_filled(*parameters_set) ==
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( n - k ) :				    	    if i < 0 :						  f_gold(*parameters_set): TypeError: f_filled() tak
8 LOAD_FAST 1 ( k )					      	      res = res + chr ( ord ( 'a' ) + count )		    		return n					  es 1 positional argument but 2 were given
10 CALL_FUNCTION 1					      	      count += 1					    	return n						  
12 GET_ITER						      	      if ( count == k ) :				    								  
>> 14 FOR_ITER 24 ( to 40 )				      		  count = 0 ;					    								  
16 STORE_FAST 3 ( i )					      	  return res						    								  
							      								    								  
4 18 LOAD_FAST 2 ( res )				      								    								  
20 LOAD_GLOBAL 1 ( chr )				      								    								  
22 LOAD_GLOBAL 2 ( ord )				      								    								  
24 LOAD_CONST 2 ( 'a' )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 1					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 2 ( res )					      								    								  
38 JUMP_ABSOLUTE 14					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 LOAD_CONST 3 ( 0 )				      								    								  
44 STORE_FAST 4 ( count )				      								    								  
							      								    								  
6 46 SETUP_LOOP 60 ( to 108 )				      								    								  
48 LOAD_GLOBAL 0 ( range )				      								    								  
50 LOAD_FAST 0 ( n )					      								    								  
52 LOAD_FAST 1 ( k )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 44 ( to 106 )				      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( res )				      								    								  
66 LOAD_GLOBAL 1 ( chr )				      								    								  
68 LOAD_GLOBAL 2 ( ord )				      								    								  
70 LOAD_CONST 2 ( 'a' )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 LOAD_FAST 4 ( count )				      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 1					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 2 ( res )					      								    								  
							      								    								  
8 84 LOAD_FAST 4 ( count )				      								    								  
86 LOAD_CONST 4 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 4 ( count )				      								    								  
							      								    								  
9 92 LOAD_FAST 4 ( count )				      								    								  
94 LOAD_FAST 1 ( k )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
10 100 LOAD_CONST 3 ( 0 )				      								    								  
102 STORE_FAST 4 ( count )				      								    								  
104 JUMP_ABSOLUTE 60					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 2 ( res )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8bc90, fil def countPairs ( str1 ) :					    def countPairs ( str1 str1 str1 str1 str1 str1 str1 str1 str1 script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    								  
2 STORE_FAST 1 ( result )				      	  n = len ( str1 )					    								  
							      	  for i in range ( 0 , n ) :				    								  
3 4 LOAD_GLOBAL 0 ( len )				      	      for j in range ( 1 , MAX_CHAR + 1 ) :		    								  
6 LOAD_FAST 0 ( str1 )					      		  if ( ( i + j ) < n ) :			    								  
8 CALL_FUNCTION 1					      		      if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( s 								  
10 STORE_FAST 2 ( n )					      			  result += 1 ;				    								  
							      	  return result						    								  
4 12 SETUP_LOOP 98 ( to 112 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 84 ( to 110 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 LOAD_GLOBAL 2 ( MAX_CHAR )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 60 ( to 106 )				      								    								  
46 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( n )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 60 LOAD_GLOBAL 3 ( abs )				      								    								  
62 LOAD_GLOBAL 4 ( ord )				      								    								  
64 LOAD_FAST 0 ( str1 )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 LOAD_FAST 4 ( j )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 LOAD_GLOBAL 4 ( ord )				      								    								  
78 LOAD_FAST 0 ( str1 )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 96 LOAD_FAST 1 ( result )				      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 1 ( result )				      								    								  
104 JUMP_ABSOLUTE 44					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 JUMP_ABSOLUTE 24					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
9 >> 112 LOAD_FAST 1 ( result )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1
--							      --							    --								  --
Disassembly of <code object reorder at 0x7fbac0e8bc90, file " def reorder ( arr , index , n ) :				    def reorder ( arr , index , index , count = 1 ) :		  script_not_found : None
2 0 SETUP_LOOP 108 ( to 110 )				      	  for i in range ( 0 , n ) :				    	for i in range ( index ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      while ( index [ i ] != i ) :			    	    if index == index :					  
4 LOAD_CONST 1 ( 0 )					      		  oldTargetI = index [ index [ i ] ]		    		index = i					  
6 LOAD_FAST 2 ( n )					      		  oldTargetE = arr [ index [ i ] ]		    	return None						  
8 CALL_FUNCTION 2					      		  arr [ index [ i ] ] = arr [ i ]		    								  
10 GET_ITER						      		  index [ index [ i ] ] = index [ i ]		    								  
>> 12 FOR_ITER 94 ( to 108 )				      		  index [ i ] = oldTargetI			    								  
14 STORE_FAST 3 ( i )					      		  arr [ i ] = oldTargetE			    								  
							      								    								  
3 16 SETUP_LOOP 88 ( to 106 )				      								    								  
>> 18 LOAD_FAST 1 ( index )				      								    								  
20 LOAD_FAST 3 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 COMPARE_OP 3 ( != )					      								    								  
28 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( index )				      								    								  
32 LOAD_FAST 1 ( index )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_SUBSCR					      								    								  
40 STORE_FAST 4 ( oldTargetI )				      								    								  
							      								    								  
5 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 1 ( index )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_SUBSCR					      								    								  
52 STORE_FAST 5 ( oldTargetE )				      								    								  
							      								    								  
6 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 1 ( index )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
							      								    								  
7 70 LOAD_FAST 1 ( index )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 1 ( index )				      								    								  
78 LOAD_FAST 1 ( index )				      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 STORE_SUBSCR						      								    								  
							      								    								  
8 86 LOAD_FAST 4 ( oldTargetI )				      								    								  
88 LOAD_FAST 1 ( index )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
9 94 LOAD_FAST 5 ( oldTargetE )				      								    								  
96 LOAD_FAST 0 ( arr )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 STORE_SUBSCR					      								    								  
102 JUMP_ABSOLUTE 18					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 12					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_23_45_67_89_UPTO_N_TERMS			      SUM_SERIES_23_45_67_89_UPTO_N_TERMS			    SUM_SERIES_23_45_67_89_UPTO_N_TERMS				  SUM_SERIES_23_45_67_89_UPTO_N_TERMS
--							      --							    --								  --
Disassembly of <code object seriesSum at 0x7fbac<<unk>> d540, def seriesSum ( n ) :					    def seriesSum ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 1 )					      	  i = 1 ;						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( i )					      	  res = 0.0 ;						     Returns the number of the given n in the number of numbers	  /eval_scripts/dis_sa-python_sa.test/SUM_SERIES_23_
							      	  sign = True ;						     """							  45_67_89_UPTO_N_TERMS.py", line 60, in <module>
3 4 LOAD_CONST 2 ( 0.0 )				      	  while ( n > 0 ) :					    	n = 0.0							    if abs(1 - (0.0000001 + abs(f_gold(*parameters_s
6 STORE_FAST 2 ( res )					      	      n = n - 1 ;					    	for i in range ( n ) :					  et))) / (abs(f_filled(*parameters_set)) + 0.000000
							      	      if ( sign ) :					    	    n = n [ i ]						  1)) < 0.001:	 File "/home/ubuntu/TransCoder/model
4 8 LOAD_CONST 3 ( True )				      		  sign = False ;				    	    n += n [ i ]					  s/eval/bt/152w65bl69/eval_scripts/dis_sa-python_sa
10 STORE_FAST 3 ( sign )				      		  res = res + ( i + 1 ) / ( i + 2 ) ;		    	return n						  .test/SUM_SERIES_23_45_67_89_UPTO_N_TERMS.py", lin
							      		  i = i + 2 ;					    								  e 39, in f_filled	for i in range ( n ) : TypeE
5 12 SETUP_LOOP 90 ( to 104 )				      	      else :						    								  rror: 'float' object cannot be interpreted as an i
>> 14 LOAD_FAST 0 ( n )					      		  sign = True ;					    								  nteger
16 LOAD_CONST 4 ( 0 )					      		  res = res - ( i + 1 ) / ( i + 2 ) ;		    								  
18 COMPARE_OP 4 ( > )					      		  i = i + 2 ;					    								  
20 POP_JUMP_IF_FALSE 102				      	  return res ;						    								  
							      								    								  
6 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 30 LOAD_FAST 3 ( sign )				      								    								  
32 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 34 LOAD_CONST 5 ( False )				      								    								  
36 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
9 38 LOAD_FAST 2 ( res )				      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_CONST 6 ( 2 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 2 ( res )					      								    								  
							      								    								  
10 58 LOAD_FAST 1 ( i )					      								    								  
60 LOAD_CONST 6 ( 2 )					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 1 ( i )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
12 >> 68 LOAD_CONST 3 ( True )				      								    								  
70 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
13 72 LOAD_FAST 2 ( res )				      								    								  
74 LOAD_FAST 1 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 1 ( i )					      								    								  
82 LOAD_CONST 6 ( 2 )					      								    								  
84 BINARY_ADD						      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 STORE_FAST 2 ( res )					      								    								  
							      								    								  
14 92 LOAD_FAST 1 ( i )					      								    								  
94 LOAD_CONST 6 ( 2 )					      								    								  
96 BINARY_ADD						      								    								  
98 STORE_FAST 1 ( i )					      								    								  
100 JUMP_ABSOLUTE 14					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
15 >> 104 LOAD_FAST 2 ( res )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_WITH_CONSECUTIVE_1S			      COUNT_STRINGS_WITH_CONSECUTIVE_1S				    COUNT_STRINGS_WITH_CONSECUTIVE_1S				  COUNT_STRINGS_WITH_CONSECUTIVE_1S
--							      --							    --								  --
Disassembly of <code object countStrings at 0x7fbac<<unk>> de def countStrings ( n ) :					    def countStrings ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * n						    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 BUILD_LIST 1						      	  b = [ 0 ] * n						     Return the list of characters of the string in the given str /COUNT_STRINGS_WITH_CONSECUTIVE_1S.py", line 38
4 LOAD_FAST 0 ( n )					      	  a [ 0 ] = b [ 0 ] = 1					    								    return [ n for n in n ] if n not in n ]
6 BINARY_MULTIPLY					      	  for i in range ( 1 , n ) :				     Args:							  				    ^ SyntaxError: i
8 STORE_FAST 1 ( a )					      	      a [ i ] = a [ i - 1 ] + b [ i - 1 ]		     n: A list of strings to be converted to the string.	  nvalid syntax
							      	      b [ i ] = a [ i - 1 ]				     n: A list of strings to be converted (or a list)		  
3 10 LOAD_CONST 1 ( 0 )					      	  return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]		     Returns:							  
12 BUILD_LIST 1						      								     A list of strings to be converted (or a list)		  
14 LOAD_FAST 0 ( n )					      								     The list of strings are returned.				  
16 BINARY_MULTIPLY					      								     """							  
18 STORE_FAST 2 ( b )					      								    	return [ n for n in n ] if n not in n ]			  
							      								    								  
4 20 LOAD_CONST 2 ( 1 )					      								    								  
22 DUP_TOP						      								    								  
24 LOAD_FAST 1 ( a )					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 STORE_SUBSCR						      								    								  
30 LOAD_FAST 2 ( b )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
5 36 SETUP_LOOP 62 ( to 100 )				      								    								  
38 LOAD_GLOBAL 0 ( range )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 LOAD_FAST 0 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 48 ( to 98 )				      								    								  
50 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 52 LOAD_FAST 1 ( a )					      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( b )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_ADD						      								    								  
74 LOAD_FAST 1 ( a )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 STORE_SUBSCR						      								    								  
							      								    								  
7 80 LOAD_FAST 1 ( a )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 2 ( b )					      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 48					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
8 >> 100 LOAD_CONST 2 ( 1 )				      								    								  
102 LOAD_FAST 0 ( n )					      								    								  
104 BINARY_LSHIFT					      								    								  
106 LOAD_FAST 1 ( a )					      								    								  
108 LOAD_FAST 0 ( n )					      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_SUBTRACT					      								    								  
114 BINARY_SUBSCR					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 LOAD_FAST 2 ( b )					      								    								  
120 LOAD_FAST 0 ( n )					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_SUBTRACT					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1
--							      --							    --								  --
Disassembly of <code object fib at 0x7fbac<<unk>> d540, file  def fib ( n ) :						    def fib ( n , a , b , b ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = 0							    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  
2 STORE_FAST 1 ( a )					      	  b = 1							    								  
							      	  if ( n >= 0 ) :					    								  
3 4 LOAD_CONST 2 ( 1 )					      	      print ( a , end = ' ' )				    								  
6 STORE_FAST 2 ( b )					      	  if ( n >= 1 ) :					    								  
							      	      print ( b , end = ' ' )				    								  
4 8 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    								  
10 LOAD_CONST 1 ( 0 )					      	      print ( a + b , end = ' ' )			    								  
12 COMPARE_OP 5 ( >= )					      	      b = a + b						    								  
14 POP_JUMP_IF_FALSE 28					      	      a = b - a						    								  
							      								    								  
5 16 LOAD_GLOBAL 0 ( print )				      								    								  
18 LOAD_FAST 1 ( a )					      								    								  
20 LOAD_CONST 3 ( ' ' )					      								    								  
22 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
24 CALL_FUNCTION_KW 2					      								    								  
26 POP_TOP						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( n )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 5 ( >= )					      								    								  
34 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 2 ( b )					      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 >> 48 SETUP_LOOP 54 ( to 104 )			      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 5 ( 2 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 36 ( to 102 )				      								    								  
66 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 68 LOAD_GLOBAL 0 ( print )				      								    								  
70 LOAD_FAST 1 ( a )					      								    								  
72 LOAD_FAST 2 ( b )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_CONST 3 ( ' ' )					      								    								  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 2					      								    								  
82 POP_TOP						      								    								  
							      								    								  
10 84 LOAD_FAST 1 ( a )					      								    								  
86 LOAD_FAST 2 ( b )					      								    								  
88 BINARY_ADD						      								    								  
90 STORE_FAST 2 ( b )					      								    								  
							      								    								  
11 92 LOAD_FAST 2 ( b )					      								    								  
94 LOAD_FAST 1 ( a )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 1 ( a )					      								    								  
100 JUMP_ABSOLUTE 64					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			      COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			    COUNT_GFG_SUBSEQUENCES_GIVEN_STRING				  COUNT_GFG_SUBSEQUENCES_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object countSubsequence at 0x7fbac<<unk> def countSubsequence ( s , n ) :				    def countSubsequence ( f , n , previous_count = 1 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  cntG = 0						    	"""							  
2 STORE_FAST 2 ( cntG )					      	  cntF = 0						     Returns the output for a i but it is a list of numbers	  
							      	  result = 0						     """							  
3 4 LOAD_CONST 1 ( 0 )					      	  C = 0							    	if f is None :						  
6 STORE_FAST 3 ( cntF )					      	  for i in range ( n ) :				    	    return f.count ( )					  
							      	      if ( s [ i ] == 'G' ) :				    	if f is None :						  
4 8 LOAD_CONST 1 ( 0 )					      		  cntG += 1					    	    return f.count ( )					  
10 STORE_FAST 4 ( result )				      		  result += C					    	elif f is None :					  
							      		  continue					    	    return f.count ( )					  
5 12 LOAD_CONST 1 ( 0 )					      	      if ( s [ i ] == 'F' ) :				    	elif f is None :					  
14 STORE_FAST 5 ( C )					      		  cntF += 1					    	    return f.count ( )					  
							      		  C += cntG					    	elif f is None :					  
6 16 SETUP_LOOP 80 ( to 98 )				      		  continue					    	    return f.count ( )					  
18 LOAD_GLOBAL 0 ( range )				      	      else :						    	elif f is None :					  
20 LOAD_FAST 1 ( n )					      		  continue					    	    return f.count ( )					  
22 CALL_FUNCTION 1					      	  print ( result )					    	elif f is None :					  
24 GET_ITER						      								    	    return f.count ( )					  
>> 26 FOR_ITER 68 ( to 96 )				      								    	elif f is None :					  
28 STORE_FAST 6 ( i )					      								    	    return f.count ( )					  
							      								    	elif f is None :					  
7 30 LOAD_FAST 0 ( s )					      								    	    return f.count ( )					  
32 LOAD_FAST 6 ( i )					      								    	elif f is None :					  
34 BINARY_SUBSCR					      								    	    return f.count ( )					  
36 LOAD_CONST 2 ( 'G' )					      								    	elif f is None :					  
38 COMPARE_OP 2 ( == )					      								    	    return f.count ( )					  
40 POP_JUMP_IF_FALSE 60					      								    	elif f is None :					  
							      								    	    return f.count ( )					  
8 42 LOAD_FAST 2 ( cntG )				      								    	elif f is None :					  
44 LOAD_CONST 3 ( 1 )					      								    	    return f.count ( )					  
46 INPLACE_ADD						      								    	elif f is None :					  
48 STORE_FAST 2 ( cntG )				      								    	    return f.count ( )					  
							      								    	elif f is None :					  
9 50 LOAD_FAST 4 ( result )				      								    	    return f.count ( )					  
52 LOAD_FAST 5 ( C )					      								    	elif f is None :					  
54 INPLACE_ADD						      								    	    return f.count ( )					  
56 STORE_FAST 4 ( result )				      								    	elif f is None :					  
							      								    	    return f.count ( )					  
10 58 JUMP_ABSOLUTE 26					      								    	elif f is None :					  
							      								    	    return f.count ( )					  
11 >> 60 LOAD_FAST 0 ( s )				      								    	elif f is None :					  
62 LOAD_FAST 6 ( i )					      								    	    return f.count ( )					  
64 BINARY_SUBSCR					      								    	elif f is None :					  
66 LOAD_CONST 4 ( 'F' )					      								    	    return f.count ( )					  
68 COMPARE_OP 2 ( == )					      								    	elif f is None :					  
70 POP_JUMP_IF_FALSE 26					      								    	    return f.count ( )					  
							      								    	elif f is None :					  
12 72 LOAD_FAST 3 ( cntF )				      								    	    return f.count ( )					  
74 LOAD_CONST 3 ( 1 )					      								    	elif f is None :					  
76 INPLACE_ADD						      								    	    return f.count ( )					  
78 STORE_FAST 3 ( cntF )				      								    	elif f is None :					  
							      								    	    return f.count ( )					  
13 80 LOAD_FAST 5 ( C )					      								    	elif f is None :					  
82 LOAD_FAST 2 ( cntG )					      								    	    return f.count ( )					  
84 INPLACE_ADD						      								    	elif f is None :					  
86 STORE_FAST 5 ( C )					      								    	    return f.count ( )					  
							      								    	elif f is None :					  
14 88 JUMP_ABSOLUTE 26					      								    	    return f.count ( )					  
90 JUMP_ABSOLUTE 26					      								    	elif f is None :					  
							      								    	    return f.count ( )					  
16 92 JUMP_ABSOLUTE 26					      								    	elif f is None :					  
94 JUMP_ABSOLUTE 26					      								    	    return f.count ( )					  
>> 96 POP_BLOCK						      								    	elif f is None :					  
							      								    	    return f						  
17 >> 98 LOAD_GLOBAL 1 ( print )			      								    	elif f is None :					  
100 LOAD_FAST 4 ( result )				      								    	    return f						  
102 CALL_FUNCTION 1					      								    	elif f is None						  
104 POP_TOP						      								    								  
106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1		      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac<<unk>> d540 def countPairs ( arr , n ) :				    def countPairs ( arr , n = 1 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  mp = dict ( )						    	""" STRNEWLINE SPACETOKEN A SPACETOKEN dict SPACETOKEN of l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    								  /COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1.py", lin
4 STORE_FAST 2 ( mp )					      	      if arr [ i ] in mp.keys ( ) :			    								  e 52	   print("#Results: %i, %i" % (n_success, le
							      		  mp [ arr [ i ] ] += 1				    								  n(param)))
3 6 SETUP_LOOP 66 ( to 74 )				      	      else :						    								  		 ^ SyntaxError: EOF while scanning t
8 LOAD_GLOBAL 1 ( range )				      		  mp [ arr [ i ] ] = 1				    								  riple-quoted string literal
10 LOAD_FAST 1 ( n )					      	  ans = 0						    								  
12 CALL_FUNCTION 1					      	  for it in mp :					    								  
14 GET_ITER						      	      count = mp [ it ]					    								  
>> 16 FOR_ITER 54 ( to 72 )				      	      ans += ( count * ( count - 1 ) ) // 2		    								  
18 STORE_FAST 3 ( i )					      	  return ans						    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( mp )					      								    								  
28 LOAD_METHOD 2 ( keys )				      								    								  
30 CALL_METHOD 0					      								    								  
32 COMPARE_OP 6 ( in )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( mp )					      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 58 LOAD_CONST 1 ( 1 )				      								    								  
60 LOAD_FAST 2 ( mp )					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 16					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_CONST 2 ( 0 )				      								    								  
76 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
9 78 SETUP_LOOP 40 ( to 120 )				      								    								  
80 LOAD_FAST 2 ( mp )					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 32 ( to 118 )				      								    								  
86 STORE_FAST 5 ( it )					      								    								  
							      								    								  
10 88 LOAD_FAST 2 ( mp )				      								    								  
90 LOAD_FAST 5 ( it )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 STORE_FAST 6 ( count )				      								    								  
							      								    								  
11 96 LOAD_FAST 4 ( ans )				      								    								  
98 LOAD_FAST 6 ( count )				      								    								  
100 LOAD_FAST 6 ( count )				      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_MULTIPLY					      								    								  
108 LOAD_CONST 3 ( 2 )					      								    								  
110 BINARY_FLOOR_DIVIDE					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( ans )				      								    								  
116 JUMP_ABSOLUTE 84					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
12 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY	      K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY	    K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY		  K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object printKDistinct at 0x7fbac<<unk>>  def printKDistinct ( arr , n , k ) :			    def printKDistinct ( arr , n , i , j , j , j , j , j , j , j  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  dist_count = 0					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( dist_count )				      	  for i in range ( n ) :				    								  /K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRA
							      	      j = 0						    								  Y.py", line 34     if __name__ == '__main__':
3 4 SETUP_LOOP 100 ( to 106 )				      	      while j < n :					    								   ^ SyntaxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      		  if ( i != j and arr [ j ] == arr [ i ] ) :	    								  
8 LOAD_FAST 1 ( n )					      		      break					    								  
10 CALL_FUNCTION 1					      		  j += 1					    								  
12 GET_ITER						      	      if ( j == n ) :					    								  
>> 14 FOR_ITER 88 ( to 104 )				      		  dist_count += 1				    								  
16 STORE_FAST 4 ( i )					      	      if ( dist_count == k ) :				    								  
							      		  return arr [ i ]				    								  
4 18 LOAD_CONST 1 ( 0 )					      	  return - 1						    								  
20 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 22 SETUP_LOOP 46 ( to 70 )				      								    								  
>> 24 LOAD_FAST 5 ( j )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 56 BREAK_LOOP						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 5 ( j )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 5 ( j )					      								    								  
66 JUMP_ABSOLUTE 24					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 5 ( j )				      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
10 78 LOAD_FAST 3 ( dist_count )			      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 3 ( dist_count )				      								    								  
							      								    								  
11 >> 86 LOAD_FAST 3 ( dist_count )			      								    								  
88 LOAD_FAST 2 ( k )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 14					      								    								  
							      								    								  
12 94 LOAD_FAST 0 ( arr )				      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 RETURN_VALUE					      								    								  
102 JUMP_ABSOLUTE 14					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
13 >> 106 LOAD_CONST 3 ( - 1 )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGOREAN_TRIPLETS				      GENERATE_PYTHAGOREAN_TRIPLETS				    GENERATE_PYTHAGOREAN_TRIPLETS				  GENERATE_PYTHAGOREAN_TRIPLETS
--							      --							    --								  --
Disassembly of <code object pythagoreanTriplets at 0x7fbac<<u def pythagoreanTriplets ( limits ) :			    def pythagoreanTriplets ( limits , c , c , c , c ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 2 ) )				      	  c , m = 0 , 2						    	c = c ( c , c )						  
2 UNPACK_SEQUENCE 2					      	  while c < limits :					    	c = c ( c )						  
4 STORE_FAST 1 ( c )					      	      for n in range ( 1 , m ) :			    	c = c ( c )						  
6 STORE_FAST 2 ( m )					      		  a = m * m - n * n				    	c = c ( c )						  
							      		  b = 2 * m * n					    	c = c ( c )						  
3 8 SETUP_LOOP 106 ( to 116 )				      		  c = m * m + n * n				    	c = c ( c )						  
>> 10 LOAD_FAST 1 ( c )					      		  if c > limits :				    	c = c ( c )						  
12 LOAD_FAST 0 ( limits )				      		      break					    	c = c ( c )						  
14 COMPARE_OP 0 ( < )					      		  print ( a , b , c )				    	c = c ( c )						  
16 POP_JUMP_IF_FALSE 114				      	      m = m + 1						    	c = c ( c )						  
							      								    	c = c ( c )						  
4 18 SETUP_LOOP 84 ( to 104 )				      								    	c = c ( c )						  
20 LOAD_GLOBAL 0 ( range )				      								    	c = c ( c )						  
22 LOAD_CONST 2 ( 1 )					      								    	c = c ( c )						  
24 LOAD_FAST 2 ( m )					      								    	c = c ( c )						  
26 CALL_FUNCTION 2					      								    	c = c ( c )						  
28 GET_ITER						      								    	c = c ( c )						  
>> 30 FOR_ITER 70 ( to 102 )				      								    	c c = c ( c )						  
32 STORE_FAST 3 ( n )					      								    	c c = c ( c )						  
							      								    	c c = c ( c )						  
5 34 LOAD_FAST 2 ( m )					      								    	c = c ( c )						  
36 LOAD_FAST 2 ( m )					      								    	c = c ( c )						  
38 BINARY_MULTIPLY					      								    	c = c ( c )						  
40 LOAD_FAST 3 ( n )					      								    	c = c ( c )						  
42 LOAD_FAST 3 ( n )					      								    	c = c ( c )						  
44 BINARY_MULTIPLY					      								    	c = c ( c )						  
46 BINARY_SUBTRACT					      								    	c = c ( c )						  
48 STORE_FAST 4 ( a )					      								    	c c = c ( c )						  
							      								    	c = c ( c )						  
6 50 LOAD_CONST 3 ( 2 )					      								    	c = c ( c )						  
52 LOAD_FAST 2 ( m )					      								    	c = c ( c )						  
54 BINARY_MULTIPLY					      								    	c = c ( c )						  
56 LOAD_FAST 3 ( n )					      								    	c c = c ( c )						  
58 BINARY_MULTIPLY					      								    	c c = c ( c )						  
60 STORE_FAST 5 ( b )					      								    	c c = c ( c )						  
							      								    	c c = c ( c )						  
7 62 LOAD_FAST 2 ( m )					      								    	c c = c ( c )						  
64 LOAD_FAST 2 ( m )					      								    	c c = c ( c )						  
66 BINARY_MULTIPLY					      								    	c = c ( c )						  
68 LOAD_FAST 3 ( n )					      								    	c = c ( c )						  
70 LOAD_FAST 3 ( n )					      								    	c = c ( c )						  
72 BINARY_MULTIPLY					      								    	c = c ( c )						  
74 BINARY_ADD						      								    	c c = c ( c )						  
76 STORE_FAST 1 ( c )					      								    	c = c ( c )						  
							      								    	c = c ( c )						  
8 78 LOAD_FAST 1 ( c )					      								    	c = c ( c )						  
80 LOAD_FAST 0 ( limits )				      								    	c = c ( c )						  
82 COMPARE_OP 4 ( > )					      								    	c = c ( c )						  
84 POP_JUMP_IF_FALSE 88					      								    	c = c ( c )						  
							      								    	c c = c ( c )						  
9 86 BREAK_LOOP						      								    	c c = c ( c )						  
							      								    	c = c ( c )						  
10 >> 88 LOAD_GLOBAL 1 ( print )			      								    	c c = c ( c )						  
90 LOAD_FAST 4 ( a )					      								    	c c = c ( c )						  
92 LOAD_FAST 5 ( b )					      								    	c = c ( c )						  
94 LOAD_FAST 1 ( c )					      								    	c c = c ( c )						  
96 CALL_FUNCTION 3					      								    	c c = c ( c )						  
98 POP_TOP						      								    	c c c c							  
100 JUMP_ABSOLUTE 30					      								    	c c = c ( c )						  
>> 102 POP_BLOCK					      								    	c c = c ( c )						  
							      								    	c c = c ( c )						  
11 >> 104 LOAD_FAST 2 ( m )				      								    	c c = c ( c )						  
106 LOAD_CONST 2 ( 1 )					      								    	c c = c ( c )						  
108 BINARY_ADD						      								    	c c = c ( c )						  
110 STORE_FAST 2 ( m )					      								    	c c = c ( c )						  
112 JUMP_ABSOLUTE 10					      								    	c c = c ( c )						  
>> 114 POP_BLOCK					      								    	c							  
>> 116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		      COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		    COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		  COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7fbac0e89d20, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	"""							  
2 STORE_FAST 1 ( i )					      	  ans = 0						     Return the value of the given value in the given value of th 
							      	  while ( ( 1 << i ) <= n ) :				     """							  
3 4 LOAD_CONST 1 ( 0 )					      	      k = 0						    	for i in range ( n ) :					  
6 STORE_FAST 2 ( ans )					      	      change = 1 << i					    	    if n <= 0 :						  
							      	      for j in range ( 0 , n + 1 ) :			    		return n					  
4 8 SETUP_LOOP 100 ( to 110 )				      		  ans += k					    	return None						  
>> 10 LOAD_CONST 2 ( 1 )				      		  if change == 1 :				    								  
12 LOAD_FAST 1 ( i )					      		      k = not k					    								  
14 BINARY_LSHIFT					      		      change = 1 << i				    								  
16 LOAD_FAST 0 ( n )					      		  else :					    								  
18 COMPARE_OP 1 ( <= )					      		      change -= 1				    								  
20 POP_JUMP_IF_FALSE 108				      	      i += 1						    								  
							      	  return ans						    								  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 3 ( k )					      								    								  
							      								    								  
6 26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_LSHIFT					      								    								  
32 STORE_FAST 4 ( change )				      								    								  
							      								    								  
7 34 SETUP_LOOP 62 ( to 98 )				      								    								  
36 LOAD_GLOBAL 0 ( range )				      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 CALL_FUNCTION 2					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 44 ( to 96 )				      								    								  
52 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 54 LOAD_FAST 2 ( ans )				      								    								  
56 LOAD_FAST 3 ( k )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( ans )					      								    								  
							      								    								  
9 62 LOAD_FAST 4 ( change )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
10 70 LOAD_FAST 3 ( k )					      								    								  
72 UNARY_NOT						      								    								  
74 STORE_FAST 3 ( k )					      								    								  
							      								    								  
11 76 LOAD_CONST 2 ( 1 )				      								    								  
78 LOAD_FAST 1 ( i )					      								    								  
80 BINARY_LSHIFT					      								    								  
82 STORE_FAST 4 ( change )				      								    								  
84 JUMP_ABSOLUTE 50					      								    								  
							      								    								  
13 >> 86 LOAD_FAST 4 ( change )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 INPLACE_SUBTRACT					      								    								  
92 STORE_FAST 4 ( change )				      								    								  
94 JUMP_ABSOLUTE 50					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
14 >> 98 LOAD_FAST 1 ( i )				      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 1 ( i )					      								    								  
106 JUMP_ABSOLUTE 10					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
15 >> 110 LOAD_FAST 2 ( ans )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K		      FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K		    FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K			  FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K
--							      --							    --								  --
Disassembly of <code object printFirstNegativeInteger at 0x7f def printFirstNegativeInteger ( arr , n , k ) :		    def printFirstNegativeInteger ( arr , n , n , n ) :		  script_not_found : None
2 0 SETUP_LOOP 108 ( to 110 )				      	  for i in range ( 0 , ( n - k + 1 ) ) :		    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      flag = False					    	    n = i						  
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , k ) :			    	    n = n						  
6 LOAD_FAST 1 ( n )					      		  if ( arr [ i + j ] < 0 ) :			    	    n = n						  
8 LOAD_FAST 2 ( k )					      		      print ( arr [ i + j ] , end = " " )	    	    n = n						  
10 BINARY_SUBTRACT					      		      flag = True				    	    n = n						  
12 LOAD_CONST 2 ( 1 )					      		      break					    	    n = n % n						  
14 BINARY_ADD						      	      if ( not ( flag ) ) :				    	    n = n % n						  
16 CALL_FUNCTION 2					      		  print ( "0" , end = " " )			    	    n = n % n						  
18 GET_ITER						      								    	    n = n % n						  
>> 20 FOR_ITER 86 ( to 108 )				      								    	    n = n % n						  
22 STORE_FAST 3 ( i )					      								    	return n						  
							      								    								  
3 24 LOAD_CONST 3 ( False )				      								    								  
26 STORE_FAST 4 ( flag )				      								    								  
							      								    								  
4 28 SETUP_LOOP 60 ( to 90 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 LOAD_FAST 2 ( k )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 46 ( to 88 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_FAST 5 ( j )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 1 ( print )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 LOAD_FAST 5 ( j )					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 4 ( ' ' )					      								    								  
74 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
76 CALL_FUNCTION_KW 2					      								    								  
78 POP_TOP						      								    								  
							      								    								  
7 80 LOAD_CONST 6 ( True )				      								    								  
82 STORE_FAST 4 ( flag )				      								    								  
							      								    								  
8 84 BREAK_LOOP						      								    								  
86 JUMP_ABSOLUTE 40					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
9 >> 90 LOAD_FAST 4 ( flag )				      								    								  
92 POP_JUMP_IF_TRUE 20					      								    								  
							      								    								  
10 94 LOAD_GLOBAL 1 ( print )				      								    								  
96 LOAD_CONST 7 ( '0' )					      								    								  
98 LOAD_CONST 4 ( ' ' )					      								    								  
100 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
102 CALL_FUNCTION_KW 2					      								    								  
104 POP_TOP						      								    								  
106 JUMP_ABSOLUTE 20					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3
--							      --							    --								  --
Disassembly of <code object printRepeating at 0x7fbac<<unk>>  def printRepeating ( arr , size ) :			    def printRepeating ( arr , size = 1 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( " The repeating elements are" , end = " " )	    	print ( 'The repeating elements are '' in the given arr a 
2 LOAD_CONST 1 ( ' The repeating elements are' )	      	  for i in range ( 0 , size ) :				    	print ( arr.shape [ 0 ] )				  
4 LOAD_CONST 2 ( ' ' )					      	      if ( arr [ abs ( arr [ i ] ) ] > 0 ) :		    								  
6 LOAD_CONST 3 ( ( 'end' , ) )				      		  arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( 								  
8 CALL_FUNCTION_KW 2					      	      else :						    								  
10 POP_TOP						      		  print ( abs ( arr [ i ] ) , end = " " )	    								  
							      								    								  
3 12 SETUP_LOOP 92 ( to 106 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 LOAD_FAST 1 ( size )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 78 ( to 104 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_GLOBAL 2 ( abs )				      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 4 ( 0 )					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
5 48 LOAD_CONST 5 ( - 1 )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_GLOBAL 2 ( abs )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 BINARY_SUBSCR					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_GLOBAL 2 ( abs )				      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 STORE_SUBSCR						      								    								  
80 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
7 >> 82 LOAD_GLOBAL 0 ( print )				      								    								  
84 LOAD_GLOBAL 2 ( abs )				      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_CONST 2 ( ' ' )					      								    								  
96 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
98 CALL_FUNCTION_KW 2					      								    								  
100 POP_TOP						      								    								  
102 JUMP_ABSOLUTE 24					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER		      CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER		    CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER			  CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER
--							      --							    --								  --
Disassembly of <code object checkIfAllTogether at 0x7fbac0e8b def checkIfAllTogether ( s , c ) :			    def checkIfAllAllgether ( s , oneSeSeSeSeSeSeSeSeSeSeSeSeSeSe error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( False )				      	  oneSeen = False					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( oneSeen )				      	  i = 0							    								  /CHECK_OCCURRENCES_CHARACTER_APPEAR_TOGETHER.py",
							      	  n = len ( s )						    								  line 35     if __name__ == '__main__':      ^ Synt
3 4 LOAD_CONST 2 ( 0 )					      	  while ( i < n ) :					    								  axError: invalid syntax
6 STORE_FAST 3 ( i )					      	      if ( s [ i ] == c ) :				    								  
							      		  if ( oneSeen == True ) :			    								  
4 8 LOAD_GLOBAL 0 ( len )				      		      return False				    								  
10 LOAD_FAST 0 ( s )					      		  while ( i < n and s [ i ] == c ) :		    								  
12 CALL_FUNCTION 1					      		      i = i + 1					    								  
14 STORE_FAST 4 ( n )					      		  oneSeen = True				    								  
							      	      else :						    								  
5 16 SETUP_LOOP 84 ( to 102 )				      		  i = i + 1					    								  
>> 18 LOAD_FAST 3 ( i )					      	  return True						    								  
20 LOAD_FAST 4 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( c )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
7 38 LOAD_FAST 2 ( oneSeen )				      								    								  
40 LOAD_CONST 3 ( True )				      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 46 LOAD_CONST 1 ( False )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
9 >> 50 SETUP_LOOP 32 ( to 84 )				      								    								  
>> 52 LOAD_FAST 3 ( i )					      								    								  
54 LOAD_FAST 4 ( n )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 82					      								    								  
60 LOAD_FAST 0 ( s )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( c )					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 72 LOAD_FAST 3 ( i )					      								    								  
74 LOAD_CONST 4 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 3 ( i )					      								    								  
80 JUMP_ABSOLUTE 52					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
11 >> 84 LOAD_CONST 3 ( True )				      								    								  
86 STORE_FAST 2 ( oneSeen )				      								    								  
88 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
13 >> 90 LOAD_FAST 3 ( i )				      								    								  
92 LOAD_CONST 4 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 3 ( i )					      								    								  
98 JUMP_ABSOLUTE 18					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
14 >> 102 LOAD_CONST 3 ( True )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_NEXT_STRING				      LEXICOGRAPHICALLY_NEXT_STRING				    LEXICOGRAPHICALLY_NEXT_STRING				  LEXICOGRAPHICALLY_NEXT_STRING
--							      --							    --								  --
Disassembly of <code object nextWord at 0x7fbac<<unk>> d540,  def nextWord ( s ) :					    def nextWord ( s ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( s )					      	  if ( s == " " ) :					    	if len ( s ) == 1 :					  
2 LOAD_CONST 1 ( ' ' )					      	      return "a"					    	    return s						  
4 COMPARE_OP 2 ( == )					      	  i = len ( s ) - 1					    	return s						  
6 POP_JUMP_IF_FALSE 12					      	  while ( s [ i ] == 'z' and i >= 0 ) :			    								  
							      	      i -= 1						    								  
3 8 LOAD_CONST 2 ( 'a' )				      	  if ( i == - 1 ) :					    								  
10 RETURN_VALUE						      	      s = s + 'a'					    								  
							      	  else :						    								  
4 >> 12 LOAD_GLOBAL 0 ( len )				      	      s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) 								  
14 LOAD_FAST 0 ( s )					      	  return s						    								  
16 CALL_FUNCTION 1					      								    								  
18 LOAD_CONST 3 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 STORE_FAST 1 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 32 ( to 58 )				      								    								  
>> 26 LOAD_FAST 0 ( s )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 4 ( 'z' )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 56					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 LOAD_CONST 5 ( 0 )					      								    								  
42 COMPARE_OP 5 ( >= )					      								    								  
44 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 STORE_FAST 1 ( i )					      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 LOAD_FAST 1 ( i )				      								    								  
60 LOAD_CONST 6 ( - 1 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( s )					      								    								  
68 LOAD_CONST 2 ( 'a' )					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 0 ( s )					      								    								  
74 JUMP_FORWARD 34 ( to 110 )				      								    								  
							      								    								  
10 >> 76 LOAD_FAST 0 ( s )				      								    								  
78 LOAD_METHOD 1 ( replace )				      								    								  
80 LOAD_FAST 0 ( s )					      								    								  
82 LOAD_FAST 1 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_GLOBAL 2 ( chr )				      								    								  
88 LOAD_GLOBAL 3 ( ord )				      								    								  
90 LOAD_FAST 0 ( s )					      								    								  
92 LOAD_FAST 1 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 LOAD_CONST 3 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 CALL_FUNCTION 1					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 CALL_METHOD 3					      								    								  
108 STORE_FAST 0 ( s )					      								    								  
							      								    								  
11 >> 110 LOAD_FAST 0 ( s )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		      SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		    SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM			  SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM
--							      --							    --								  --
Disassembly of <code object computeLPSArray at 0x7fbac<<unk>> def computeLPSArray ( pat , M , lps ) :			    def computeLPSArray ( pat , M , nps , nps , nps , nps , nps , script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  len = 0						    								  
2 STORE_FAST 3 ( len )					      	  lps [ 0 ]						    								  
							      	  i = 1							    								  
3 4 LOAD_FAST 2 ( lps )					      	  while i < M :						    								  
6 LOAD_CONST 1 ( 0 )					      	      if pat [ i ] == pat [ len ] :			    								  
8 BINARY_SUBSCR						      		  len += 1					    								  
10 POP_TOP						      		  lps [ i ] = len				    								  
							      		  i += 1					    								  
4 12 LOAD_CONST 2 ( 1 )					      	      else :						    								  
14 STORE_FAST 4 ( i )					      		  if len != 0 :					    								  
							      		      len = lps [ len - 1 ]			    								  
5 16 SETUP_LOOP 92 ( to 110 )				      		  else :					    								  
>> 18 LOAD_FAST 4 ( i )					      		      lps [ i ] = 0				    								  
20 LOAD_FAST 1 ( M )					      		      i += 1					    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( pat )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( pat )					      								    								  
34 LOAD_FAST 3 ( len )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
7 42 LOAD_FAST 3 ( len )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 3 ( len )					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( len )				      								    								  
52 LOAD_FAST 2 ( lps )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
9 58 LOAD_FAST 4 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( i )					      								    								  
66 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
11 >> 68 LOAD_FAST 3 ( len )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
12 76 LOAD_FAST 2 ( lps )				      								    								  
78 LOAD_FAST 3 ( len )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 BINARY_SUBSCR					      								    								  
86 STORE_FAST 3 ( len )					      								    								  
88 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
14 >> 90 LOAD_CONST 1 ( 0 )				      								    								  
92 LOAD_FAST 2 ( lps )					      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 STORE_SUBSCR						      								    								  
							      								    								  
15 98 LOAD_FAST 4 ( i )					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 4 ( i )					      								    								  
106 JUMP_ABSOLUTE 18					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_B_ARRAY_B_K					      FIND_PAIRS_B_ARRAY_B_K					    FIND_PAIRS_B_ARRAY_B_K					  FIND_PAIRS_B_ARRAY_B_K
--							      --							    --								  --
Disassembly of <code object printPairs at 0x7fbac<<unk>> de40 def printPairs ( arr , n , k ) :				    def printPairs ( arr , n , n , count = 1 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( True )				      	  isPairFound = True					    	"""							  
2 STORE_FAST 3 ( isPairFound )				      	  for i in range ( 0 , n ) :				     Return True if it is a list of indices in the range of indic 
							      	      for j in range ( 0 , n ) :			     """							  
3 4 SETUP_LOOP 100 ( to 106 )				      		  if ( i != j and arr [ i ] % arr [ j ] == k ) :    	for i in range ( n ) :					  
6 LOAD_GLOBAL 0 ( range )				      		      print ( "(" , arr [ i ] , ", " , arr [ j ] ,  	    if count < count :					  
8 LOAD_CONST 2 ( 0 )					      		      isPairFound = True			    		count += 1					  
10 LOAD_FAST 1 ( n )					      	  return isPairFound					    	return count						  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 86 ( to 104 )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 80 ( to 102 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 66 ( to 100 )				      								    								  
34 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( i )					      								    								  
38 LOAD_FAST 5 ( j )					      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 32					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_MODULO					      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 1 ( print )				      								    								  
66 LOAD_CONST 3 ( '(' )					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 4 ( ', ' )				      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 5 ( ')' )					      								    								  
84 LOAD_CONST 6 ( '' )					      								    								  
86 LOAD_CONST 7 ( ' ' )					      								    								  
88 LOAD_CONST 8 ( ( 'sep' , 'end' ) )			      								    								  
90 CALL_FUNCTION_KW 7					      								    								  
92 POP_TOP						      								    								  
							      								    								  
7 94 LOAD_CONST 1 ( True )				      								    								  
96 STORE_FAST 3 ( isPairFound )				      								    								  
98 JUMP_ABSOLUTE 32					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 JUMP_ABSOLUTE 16					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
8 >> 106 LOAD_FAST 3 ( isPairFound )			      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac0e8bc90, fil def countPairs ( arr , n ) :				    def countPairs 0x70x70000000000000000000000000000000000000000 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( result )				      	  Hash = set ( )					    								  /COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1.py",
							      	  for i in range ( n ) :				    								  line 30     def f_filled 0x70x70000000000000000000
3 4 LOAD_GLOBAL 0 ( set )				      	      Hash.add ( arr [ i ] )				    								  00000000000000000000000000000000000000000000000000
6 CALL_FUNCTION 0					      	  for i in range ( n ) :				    								  00000000000000000000000000000000000000000000000000
8 STORE_FAST 3 ( Hash )					      	      for j in range ( i + 1 , n ) :			    								  00000000000000000000000000000000000000000000000000
							      		  product = arr [ i ] * arr [ j ]		    								  00000000000000000000000000000000000000000000000000
4 10 SETUP_LOOP 30 ( to 42 )				      		  if product in ( Hash ) :			    								  00000000000000000000000000000000000000000000000000
12 LOAD_GLOBAL 1 ( range )				      		      result += 1				    								  00000000000000000000000000000000000000000000000000
14 LOAD_FAST 1 ( n )					      	  return result						    								  00000000000000000000000000000000000000000000000000
16 CALL_FUNCTION 1					      								    								  00000000000000000000000000000000000000000000000000
18 GET_ITER						      								    								  00000000000000000000000000000000000000000000000000
>> 20 FOR_ITER 18 ( to 40 )				      								    								  000000000000000000000000000000000000
22 STORE_FAST 4 ( i )					      								    								  	 ^ SyntaxError: invalid syntax
							      								    								  
5 24 LOAD_FAST 3 ( Hash )				      								    								  
26 LOAD_METHOD 2 ( add )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
38 JUMP_ABSOLUTE 20					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
6 >> 42 SETUP_LOOP 72 ( to 116 )			      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 60 ( to 114 )				      								    								  
54 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 56 SETUP_LOOP 54 ( to 112 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_FAST 1 ( n )					      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 36 ( to 110 )				      								    								  
74 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 4 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 5 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_MULTIPLY					      								    								  
90 STORE_FAST 6 ( product )				      								    								  
							      								    								  
9 92 LOAD_FAST 6 ( product )				      								    								  
94 LOAD_FAST 3 ( Hash )					      								    								  
96 COMPARE_OP 6 ( in )					      								    								  
98 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
10 100 LOAD_FAST 2 ( result )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( result )				      								    								  
108 JUMP_ABSOLUTE 72					      								    								  
>> 110 POP_BLOCK					      								    								  
>> 112 JUMP_ABSOLUTE 52					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
11 >> 116 LOAD_FAST 2 ( result )			      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_NEXT_NUMBER			      BINARY_REPRESENTATION_OF_NEXT_NUMBER			    BINARY_REPRESENTATION_OF_NEXT_NUMBER			  BINARY_REPRESENTATION_OF_NEXT_NUMBER
--							      --							    --								  --
Disassembly of <code object nextGreater at 0x7fbac0e8bc90, fi def nextGreater ( num1 ) :				    def nextGreater ( numnum1 , l = 0 , l = 1 , l = 0 , l = 0 , l error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( num1 ) ;					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( num1 )					      	  num = list ( num1 ) ;					    								  /BINARY_REPRESENTATION_OF_NEXT_NUMBER.py", line 34
4 CALL_FUNCTION 1					      	  i = l - 1 ;						    								       def f_filled ( numnum1 , l = 0 , l = 1 , l =
6 STORE_FAST 1 ( l )					      	  while ( i >= 0 ) :					    								  0 , l = 0 , l = 0 , l = 0 , l = 0 , l = 0 , l = 0
							      	      if ( num [ i ] == '0' ) :				    								  , l = 0 , l = 0 , l = 0 , l = 0 , l = 0 , l = 0 ,
3 8 LOAD_GLOBAL 1 ( list )				      		  num [ i ] = '1' ;				    								  l = 0 , l = 0 , l = l , l = l , l = l , l = l , l
10 LOAD_FAST 0 ( num1 )					      		  break ;					    								  = l , l = l , l = l , l = l , l = l , l = l , l =
12 CALL_FUNCTION 1					      	      else :						    								  l , l = l , l = l , l = l , l = l , l = l , l = l
14 STORE_FAST 2 ( num )					      		  num [ i ] = '0' ;				    								  , l = l , l = l , l = l , l = l , l = l , l = l ,
							      	      i -= 1 ;						    								  l = l , l = l , l = l , l = l , l = l , l = l , l
4 16 LOAD_FAST 1 ( l )					      	  num1 = ''.join ( num ) ;				    								  = l , l = l , l = l , l = l , l = l , l = l , l =
18 LOAD_CONST 1 ( 1 )					      	  if ( i < 0 ) :					    								  l , l = l , l = l , l = l , l = l , l = l , l = l
20 BINARY_SUBTRACT					      	      num1 = '1' + num1 ;				    								  , l = l , l = l , l = l , l = l , l = l , l = l ,
22 STORE_FAST 3 ( i )					      	  return num1 ;						    								  l = l , l = l , l = l , l = l , l = l , l = l , l
							      								    								  l = l , l = l , l = l , l l = l , l = l , l = l ,
5 24 SETUP_LOOP 52 ( to 78 )				      								    								  l = l , l = l , l = l , l = l , l = l , l = l , l
>> 26 LOAD_FAST 3 ( i )					      								    								  = l , l = l , l = l , l l = l , l = l , l = l , l
28 LOAD_CONST 2 ( 0 )					      								    								  = l , l = l , l = l , l = l , l l = l , l = l l ,
30 COMPARE_OP 5 ( >= )					      								    								  l = l , l = l , l l = l , l l l l l = l , l l = l
32 POP_JUMP_IF_FALSE 76					      								    								  , l l = l , l l = l , l l = l , l l = l , l l = l
							      								    								  , l l l l l l l l l l l l l l l l l l l l l l l l
6 34 LOAD_FAST 2 ( num )				      								    								  l l l l l l l l l l l l l l l l l l l l l l l l l
36 LOAD_FAST 3 ( i )					      								    								  l l l l l l l l l l l l l l l l l
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( '0' )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 46 LOAD_CONST 4 ( '1' )				      								    								  
48 LOAD_FAST 2 ( num )					      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
8 54 BREAK_LOOP						      								    								  
56 JUMP_FORWARD 8 ( to 66 )				      								    								  				   ^ SyntaxError: in
							      								    								  valid syntax
10 >> 58 LOAD_CONST 3 ( '0' )				      								    								  
60 LOAD_FAST 2 ( num )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 STORE_SUBSCR						      								    								  
							      								    								  
11 >> 66 LOAD_FAST 3 ( i )				      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 3 ( i )					      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
12 >> 78 LOAD_CONST 5 ( '' )				      								    								  
80 LOAD_METHOD 2 ( join )				      								    								  
82 LOAD_FAST 2 ( num )					      								    								  
84 CALL_METHOD 1					      								    								  
86 STORE_FAST 0 ( num1 )				      								    								  
							      								    								  
13 88 LOAD_FAST 3 ( i )					      								    								  
90 LOAD_CONST 2 ( 0 )					      								    								  
92 COMPARE_OP 0 ( < )					      								    								  
94 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
14 96 LOAD_CONST 4 ( '1' )				      								    								  
98 LOAD_FAST 0 ( num1 )					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_FAST 0 ( num1 )				      								    								  
							      								    								  
15 >> 104 LOAD_FAST 0 ( num1 )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object sortedAfterSwap at 0x7fbac0e8bc90 def sortedAfterSwap ( A , B , n ) :			    def hashRequireSwap ( ) :					  script_not_found : None
2 0 SETUP_LOOP 80 ( to 82 )				      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( 0 , len ( i ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if B [ i ] :					    	    for i in range ( 0 , len ( i ) ) :			  
4 LOAD_CONST 1 ( 0 )					      		  if A [ i ] != i + 1 :				    		if i < i :					  
6 LOAD_FAST 2 ( n )					      		      A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ] 		    return i					  
8 LOAD_CONST 2 ( 1 )					      	  for i in range ( n ) :				    								  
10 BINARY_SUBTRACT					      	      if A [ i ] != i + 1 :				    								  
12 CALL_FUNCTION 2					      		  return False					    								  
14 GET_ITER						      	  return True						    								  
>> 16 FOR_ITER 62 ( to 80 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 1 ( B )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 COMPARE_OP 3 ( != )					      								    								  
42 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( A )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( A )					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 ROT_TWO						      								    								  
62 LOAD_FAST 0 ( A )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 STORE_SUBSCR						      								    								  
68 LOAD_FAST 0 ( A )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 16					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
6 >> 82 SETUP_LOOP 36 ( to 120 )			      								    								  
84 LOAD_GLOBAL 0 ( range )				      								    								  
86 LOAD_FAST 2 ( n )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 GET_ITER						      								    								  
>> 92 FOR_ITER 24 ( to 118 )				      								    								  
94 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 96 LOAD_FAST 0 ( A )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 COMPARE_OP 3 ( != )					      								    								  
110 POP_JUMP_IF_FALSE 92				      								    								  
							      								    								  
8 112 LOAD_CONST 3 ( False )				      								    								  
114 RETURN_VALUE					      								    								  
116 JUMP_ABSOLUTE 92					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
9 >> 120 LOAD_CONST 4 ( True )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		      NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		    NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		  NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES
--							      --							    --								  --
Disassembly of <code object countOccurrences at 0x7fbac0e8bc9 def countOccurrences ( s , K ) :				    def countOccurrences ( s ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_FAST 0 ( s )					      	  c1 = 0						     Returns a list of a list of a list of list of strings	  /eval_scripts/dis_sa-python_sa.test/NUMBER_SUBSEQU
4 CALL_FUNCTION 1					      	  c2 = 0						     """							  ENCES_AB_STRING_REPEATED_K_TIMES.py", line 76, in
6 STORE_FAST 2 ( n )					      	  C = 0							    	# We are only the list of strings strings		  <module>     if f_filled(*parameters_set) == f_gol
							      	  for i in range ( n ) :				    	# we are only in the list of strings			  d(*parameters_set): TypeError: f_filled() takes 1
3 8 LOAD_CONST 1 ( 0 )					      	      if s [ i ] == 'a' :				    	# and we are only in the list of strings strings are only positional argument but 2 were given
10 STORE_FAST 3 ( c1 )					      		  c1 += 1					    	# and the list of strings strings are in strings	  
							      	      if s [ i ] == 'b' :				    	# strings strings as strings strings strings as strings	  
4 12 LOAD_CONST 1 ( 0 )					      		  c2 += 1					    	# strings strings as strings strings strings strings as s 
14 STORE_FAST 4 ( c2 )					      		  C += c1					    	# strings strings strings strings strings strings strings 
							      	  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2	    	# strings strings strings strings strings strings strings 
5 16 LOAD_CONST 1 ( 0 )					      								    	# strings strings strings strings strings strings strings 
18 STORE_FAST 5 ( C )					      								    	# strings strings strings strings strings strings strings 
							      								    	# strings strings strings strings strings strings strings 
6 20 SETUP_LOOP 64 ( to 86 )				      								    	# strings strings strings strings strings strings strings 
22 LOAD_GLOBAL 1 ( range )				      								    	# strings strings strings strings strings strings strings 
24 LOAD_FAST 2 ( n )					      								    	# strings strings strings strings strings strings strings 
26 CALL_FUNCTION 1					      								    	# strings strings strings strings strings strings strings 
28 GET_ITER						      								    	# strings strings strings strings strings strings strings 
>> 30 FOR_ITER 52 ( to 84 )				      								    	# strings strings strings strings strings strings	  
32 STORE_FAST 6 ( i )					      								    	# strings strings strings strings strings strings strings 
							      								    	# strings strings strings strings strings strings strings 
7 34 LOAD_FAST 0 ( s )					      								    	# strings strings strings strings strings strings	  
36 LOAD_FAST 6 ( i )					      								    	# strings strings strings strings strings strings	  
38 BINARY_SUBSCR					      								    	# strings strings strings strings strings strings strings 
40 LOAD_CONST 2 ( 'a' )					      								    	# strings strings strings strings strings strings strings 
42 COMPARE_OP 2 ( == )					      								    	# strings strings strings				  
44 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
8 46 LOAD_FAST 3 ( c1 )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 3 ( c1 )					      								    								  
							      								    								  
9 >> 54 LOAD_FAST 0 ( s )				      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 4 ( 'b' )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
10 66 LOAD_FAST 4 ( c2 )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 4 ( c2 )					      								    								  
							      								    								  
11 74 LOAD_FAST 5 ( C )					      								    								  
76 LOAD_FAST 3 ( c1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( C )					      								    								  
82 JUMP_ABSOLUTE 30					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
12 >> 86 LOAD_FAST 5 ( C )				      								    								  
88 LOAD_FAST 1 ( K )					      								    								  
90 BINARY_MULTIPLY					      								    								  
92 LOAD_FAST 1 ( K )					      								    								  
94 LOAD_FAST 1 ( K )					      								    								  
96 LOAD_CONST 3 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_CONST 5 ( 2 )					      								    								  
104 BINARY_TRUE_DIVIDE					      								    								  
106 LOAD_FAST 3 ( c1 )					      								    								  
108 BINARY_MULTIPLY					      								    								  
110 LOAD_FAST 4 ( c2 )					      								    								  
112 BINARY_MULTIPLY					      								    								  
114 BINARY_ADD						      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE		      FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE			    FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE			  FIND_BITONIC_POINT_GIVEN_BITONIC_SEQUENCE
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac<<unk>> de def binarySearch ( arr , left , right ) :			    def binarySearch ( arr , left , right , right ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( left )				      	  if ( left <= right ) :				    	if left is None :					  
2 LOAD_FAST 2 ( right )					      	      mid = ( left + right ) // 2 ;			    	    return binarySearch ( arr , right , right , right )	  
4 COMPARE_OP 1 ( <= )					      	      if ( arr [ mid - 1 ] < arr [ mid ] and arr [ mid ] >  	else :							  
6 POP_JUMP_IF_FALSE 116					      		  return mid ;					    	    return binarySearch ( arr , right , right , right )	  
							      	      if ( arr [ mid ] < arr [ mid + 1 ] ) :		    								  
3 8 LOAD_FAST 1 ( left )				      		  return binarySearch ( arr , mid + 1 , right ) ;   								  
10 LOAD_FAST 2 ( right )				      	      else :						    								  
12 BINARY_ADD						      		  return binarySearch ( arr , left , mid - 1 ) ;    								  
14 LOAD_CONST 1 ( 2 )					      	  return - 1 ;						    								  
16 BINARY_FLOOR_DIVIDE					      								    								  
18 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( mid )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 3 ( mid )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 0 ( < )					      								    								  
38 POP_JUMP_IF_FALSE 64					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( mid )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 3 ( mid )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 4 ( > )					      								    								  
58 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 60 LOAD_FAST 3 ( mid )				      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 3 ( mid )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 3 ( mid )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 BINARY_SUBSCR					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
7 84 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 3 ( mid )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 2 ( right )				      								    								  
96 CALL_FUNCTION 3					      								    								  
98 RETURN_VALUE						      								    								  
							      								    								  
9 >> 100 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 1 ( left )				      								    								  
106 LOAD_FAST 3 ( mid )					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 CALL_FUNCTION 3					      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
10 >> 116 LOAD_CONST 3 ( - 1 )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
Disassembly of <code object countSeq at 0x7fbac0e8bc90, file  def countSeq ( n , diff ) :				    def countSeq ( n , diff = 'fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb script_not_found : None
2 0 LOAD_GLOBAL 0 ( abs )				      	  if ( abs ( diff ) > n ) :				    								  
2 LOAD_FAST 1 ( diff )					      	      return 0						    								  
4 CALL_FUNCTION 1					      	  if ( n == 1 and diff == 0 ) :				    								  
6 LOAD_FAST 0 ( n )					      	      return 2						    								  
8 COMPARE_OP 4 ( > )					      	  if ( n == 1 and abs ( diff ) == 1 ) :			    								  
10 POP_JUMP_IF_FALSE 16					      	      return 1						    								  
							      	  res = ( countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n  								  
3 12 LOAD_CONST 1 ( 0 )					      	  return res						    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 36					      								    								  
24 LOAD_FAST 1 ( diff )					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 32 LOAD_CONST 3 ( 2 )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_FAST 0 ( n )				      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 60					      								    								  
44 LOAD_GLOBAL 0 ( abs )				      								    								  
46 LOAD_FAST 1 ( diff )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 56 LOAD_CONST 2 ( 1 )					      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
8 >> 60 LOAD_GLOBAL 1 ( countSeq )			      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_FAST 1 ( diff )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_FUNCTION 2					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 LOAD_GLOBAL 1 ( countSeq )				      								    								  
80 LOAD_FAST 0 ( n )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_FAST 1 ( diff )					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 BINARY_MULTIPLY					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_GLOBAL 1 ( countSeq )				      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_FAST 1 ( diff )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 BINARY_ADD						      								    								  
112 STORE_FAST 2 ( res )				      								    								  
							      								    								  
9 114 LOAD_FAST 2 ( res )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K_1			      COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				    COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				  COUNT_PAIRS_DIFFERENCE_EQUAL_K_1
--							      --							    --								  --
Disassembly of <code object countPairsWithDiffK at 0x7fbac0e8 def countPairsWithDiffK ( arr , n , k ) :			    def countPairsWithDiffK ( arr , n , l , l , l , l , l = l , l error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( count )				      	  arr.sort ( )						    								  /COUNT_PAIRS_DIFFERENCE_EQUAL_K_1.py", line 34
							      	  l = 0							    								   def f_filled ( arr , n , l , l , l , l , l = l ,
3 4 LOAD_FAST 0 ( arr )					      	  r = 0							    								  l = l , l = l , l = l , l = l , l = l , l = l , l
6 LOAD_METHOD 0 ( sort )				      	  while r < n :						    								  = l , l = l , l = l , l = l , l = l , l = l , l =
8 CALL_METHOD 0						      	      if arr [ r ] - arr [ l ] == k :			    								  l , l = l , l = l , l = l , l = l , l = l , l = l
10 POP_TOP						      		  count += 1					    								  , l = l , l = l , l = l , l = l , l = l , l = l ,
							      		  l += 1					    								  l = l , l = l , l = l , l = l , l = l , l = l , l
4 12 LOAD_CONST 1 ( 0 )					      		  r += 1					    								  = l , l = l , l = l , l = l , l = l , l = l , l =
14 STORE_FAST 4 ( l )					      	      elif arr [ r ] - arr [ l ] > k :			    								  l , l = l , l = l , l = l , l = l , l = l , l = l
							      		  l += 1					    								  , l = l , l = l , l = l , l = l , l = l , l = l ,
5 16 LOAD_CONST 1 ( 0 )					      	      else :						    								  l = l , l = l , l = l , l = l , l = l , l = l , l
18 STORE_FAST 5 ( r )					      		  r += 1					    								  = l , l = l , l = l , l = l , l = l , l = l , l =
							      	  return count						    								  l , l = l , l = l , l = l , l l = l , l l = l , l
6 20 SETUP_LOOP 96 ( to 118 )				      								    								  = l , l l = l , l = l , l = l , l = l , l = l , l
>> 22 LOAD_FAST 5 ( r )					      								    								  = l , l = l , l = l , l = l , l = l , l = l , l =
24 LOAD_FAST 1 ( n )					      								    								  l , l = l , l l = l , l = l , l = l , l = l , l =
26 COMPARE_OP 0 ( < )					      								    								  l , l = l , l = l , l l = l , l = l , l = l , l =
28 POP_JUMP_IF_FALSE 116				      								    								  l , l = l , l = l , l l = l l , l l = l , l l = l
							      								    								  , l l = l , l l = l , l = l , l = l , l l = l l ,
7 30 LOAD_FAST 0 ( arr )				      								    								  l l = l l , l l = l l , l l = l , l l = l , l l =
32 LOAD_FAST 5 ( r )					      								    								  l l , l l = l l , l l = l , l l , l = l l , l l =
34 BINARY_SUBSCR					      								    								  l , l l = l l , l l = l
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 4 ( l )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 2 ( k )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( count )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 3 ( count )				      								    								  	 ^ SyntaxError: invalid syntax
							      								    								  
9 58 LOAD_FAST 4 ( l )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 4 ( l )					      								    								  
							      								    								  
10 66 LOAD_FAST 5 ( r )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 5 ( r )					      								    								  
74 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
11 >> 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 5 ( r )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 4 ( l )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 2 ( k )					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
12 96 LOAD_FAST 4 ( l )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 4 ( l )					      								    								  
104 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
14 >> 106 LOAD_FAST 5 ( r )				      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 5 ( r )					      								    								  
114 JUMP_ABSOLUTE 22					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
15 >> 118 LOAD_FAST 3 ( count )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEGREGATE_EVEN_ODD_NUMBERS_SET_3			      SEGREGATE_EVEN_ODD_NUMBERS_SET_3				    SEGREGATE_EVEN_ODD_NUMBERS_SET_3				  SEGREGATE_EVEN_ODD_NUMBERS_SET_3
--							      --							    --								  --
Disassembly of <code object arrayEvenAndOdd at 0x7fbac0e8bc90 def arrayEvenAndOdd ( arr , n ) :				    def arrayEvenAndOdd ( arr ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( - 1 )				      	  i = - 1						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( i )					      	  j = 0							     Returns the array of 0dd 0dd and the array of the array of t /eval_scripts/dis_sa-python_sa.test/SEGREGATE_EVEN
							      	  while ( j != n ) :					     array of the array of the array of the array of the array of _ODD_NUMBERS_SET_3.py", line 77, in <module>	   f
3 4 LOAD_CONST 2 ( 0 )					      	      if ( arr [ j ] % 2 == 0 ) :			     the array of the array of the array of the array of the arra _filled(*(filled_function_param[i])) TypeError: f_
6 STORE_FAST 3 ( j )					      		  i = i + 1					     the array of the array of the array of the array of the arra filled() takes 1 positional argument but 2 were gi
							      		  arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	     array of the array of the array of the array of the array of ven
4 8 SETUP_LOOP 70 ( to 80 )				      	      j = j + 1						     the array of the array of the array of the array of the arra 
>> 10 LOAD_FAST 3 ( j )					      	  for i in arr :					     the array of the array of the array of the array of the arra 
12 LOAD_FAST 1 ( n )					      	      print ( str ( i ) + " " , end = '' )		     of the array of the array of the array of the array of	  
14 COMPARE_OP 3 ( != )					      								     the array of the array of the array of the array of the arra 
16 POP_JUMP_IF_FALSE 78					      								     of the array of the array of the array of the array	  
							      								     of the array of the array of the array of the array of the a 
5 18 LOAD_FAST 0 ( arr )				      								     of the array of the array of the array of the array of the a 
20 LOAD_FAST 3 ( j )					      								    								  
22 BINARY_SUBSCR					      								     """							  
24 LOAD_CONST 3 ( 2 )					      								    	arr = arr [ : - 1 ]					  
26 BINARY_MODULO					      								    	arr [ : - 1 ]						  
28 LOAD_CONST 2 ( 0 )					      								    	return arr						  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_CONST 4 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 3 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 ROT_TWO						      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( j )					      								    								  
66 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 68 LOAD_FAST 3 ( j )				      								    								  
70 LOAD_CONST 4 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 3 ( j )					      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 SETUP_LOOP 32 ( to 114 )			      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 24 ( to 112 )				      								    								  
88 STORE_FAST 2 ( i )					      								    								  
							      								    								  
10 90 LOAD_GLOBAL 0 ( print )				      								    								  
92 LOAD_GLOBAL 1 ( str )				      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 LOAD_CONST 5 ( ' ' )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_CONST 6 ( '' )					      								    								  
104 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 86					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_UNIQUE_ROWS					      PRINT_UNIQUE_ROWS						    PRINT_UNIQUE_ROWS						  PRINT_UNIQUE_ROWS
--							      --							    --								  --
Disassembly of <code object printArray at 0x7fbac0e89d20, fil def printArray ( matrix ) :				    def printArray ( matrix , sheets , duration = None ) :	  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  rowCount = len ( matrix )				    	"""							  
2 LOAD_FAST 0 ( matrix )				      	  if rowCount == 0 :					     Returns a list of the given sheets in a given sheets in the  
4 CALL_FUNCTION 1					      	      return						     sheets in the given sheets in the given sheets in the given  
6 STORE_FAST 1 ( rowCount )				      	  columnCount = len ( matrix [ 0 ] )			     sheets in the sheets in the sheets in the sheets in the shee 
							      	  if columnCount == 0 :					     """							  
3 8 LOAD_FAST 1 ( rowCount )				      	      return						    	return [ ]						  
10 LOAD_CONST 1 ( 0 )					      	  row_output_format = " ".join ( [ "%s" ] * columnCount )   								  
12 COMPARE_OP 2 ( == )					      	  printed = { }						    								  
14 POP_JUMP_IF_FALSE 20					      	  for row in matrix :					    								  
							      	      routput = row_output_format % tuple ( row )	    								  
4 16 LOAD_CONST 0 ( None )				      	      if routput not in printed :			    								  
18 RETURN_VALUE						      		  printed [ routput ] = True			    								  
							      		  print ( routput )				    								  
5 >> 20 LOAD_GLOBAL 0 ( len )				      								    								  
22 LOAD_FAST 0 ( matrix )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 STORE_FAST 2 ( columnCount )				      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( columnCount )			      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 40 LOAD_CONST 0 ( None )				      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
8 >> 44 LOAD_CONST 2 ( ' ' )				      								    								  
46 LOAD_METHOD 1 ( join )				      								    								  
48 LOAD_CONST 3 ( '%s' )				      								    								  
50 BUILD_LIST 1						      								    								  
52 LOAD_FAST 2 ( columnCount )				      								    								  
54 BINARY_MULTIPLY					      								    								  
56 CALL_METHOD 1					      								    								  
58 STORE_FAST 3 ( row_output_format )			      								    								  
							      								    								  
9 60 BUILD_MAP 0					      								    								  
62 STORE_FAST 4 ( printed )				      								    								  
							      								    								  
10 64 SETUP_LOOP 48 ( to 114 )				      								    								  
66 LOAD_FAST 0 ( matrix )				      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 40 ( to 112 )				      								    								  
72 STORE_FAST 5 ( row )					      								    								  
							      								    								  
11 74 LOAD_FAST 3 ( row_output_format )			      								    								  
76 LOAD_GLOBAL 2 ( tuple )				      								    								  
78 LOAD_FAST 5 ( row )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 BINARY_MODULO					      								    								  
84 STORE_FAST 6 ( routput )				      								    								  
							      								    								  
12 86 LOAD_FAST 6 ( routput )				      								    								  
88 LOAD_FAST 4 ( printed )				      								    								  
90 COMPARE_OP 7 ( not in )				      								    								  
92 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
13 94 LOAD_CONST 4 ( True )				      								    								  
96 LOAD_FAST 4 ( printed )				      								    								  
98 LOAD_FAST 6 ( routput )				      								    								  
100 STORE_SUBSCR					      								    								  
							      								    								  
14 102 LOAD_GLOBAL 3 ( print )				      								    								  
104 LOAD_FAST 6 ( routput )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 70					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
0_1_KNAPSACK_PROBLEM_DP_10				      0_1_KNAPSACK_PROBLEM_DP_10				    0_1_KNAPSACK_PROBLEM_DP_10					  0_1_KNAPSACK_PROBLEM_DP_10
--							      --							    --								  --
Disassembly of <code object knapSack at 0x7fbac<<unk>> d540,  def knapSack ( W , wt , val , n ) :			    def knapSack ( W , wt , n , n ) :				  script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if n == 0 or W == 0 :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return ( n % 2 * n )				  
4 COMPARE_OP 2 ( == )					      	  if ( wt [ n - 1 ] > W ) :				    	elif n == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	      return knapSack ( W , wt , val , n - 1 )		    	    return ( n % 2 * n )				  
8 LOAD_FAST 0 ( W )					      	  else :						    	elif n == 0 :						  
10 LOAD_CONST 1 ( 0 )					      	      return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  	    return ( n % 2 * n )				  
12 COMPARE_OP 2 ( == )					      								    	elif n == 0 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return ( n % 2 * n )				  
							      								    	elif n == 0 :						  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    	    return ( n % 2 * n )				  
18 RETURN_VALUE						      								    	elif n == 0 :						  
							      								    	    return ( n % 2 * n )				  
4 >> 20 LOAD_FAST 1 ( wt )				      								    	elif n == 0 :						  
22 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n )				  
24 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
26 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
28 BINARY_SUBSCR					      								    	elif n == 0 :						  
30 LOAD_FAST 0 ( W )					      								    	    return ( n % 2 * n )				  
32 COMPARE_OP 4 ( > )					      								    	elif n == 0 :						  
34 POP_JUMP_IF_FALSE 54					      								    	    return ( n % 2 * n )				  
							      								    	elif n == 0 :						  
5 36 LOAD_GLOBAL 0 ( knapSack )				      								    	    return ( n % 2 * n )				  
38 LOAD_FAST 0 ( W )					      								    	elif n == 0 :						  
40 LOAD_FAST 1 ( wt )					      								    	    return ( n % 2 * n )				  
42 LOAD_FAST 2 ( val )					      								    	elif n == 0 :						  
44 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n )				  
46 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
48 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
50 CALL_FUNCTION 4					      								    	elif n == 0 :						  
52 RETURN_VALUE						      								    	    return ( n % 2 * n )				  
							      								    	elif n == 0 :						  
7 >> 54 LOAD_GLOBAL 1 ( max )				      								    	    return ( n % 2 * n )				  
56 LOAD_FAST 2 ( val )					      								    	elif n == 0 :						  
58 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n )				  
60 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
62 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
64 BINARY_SUBSCR					      								    	elif n == 0 :						  
66 LOAD_GLOBAL 0 ( knapSack )				      								    	    return ( n % 2 * n ) % n				  
68 LOAD_FAST 0 ( W )					      								    	elif n == 0 :						  
70 LOAD_FAST 1 ( wt )					      								    	    return ( n % 2 * n ) % n				  
72 LOAD_FAST 3 ( n )					      								    	elif n == 0 :						  
74 LOAD_CONST 2 ( 1 )					      								    	    return ( n % 2 * n ) % n				  
76 BINARY_SUBTRACT					      								    	elif n == 0 :						  
78 BINARY_SUBSCR					      								    	    return ( n % 2 * n ) % n				  
80 BINARY_SUBTRACT					      								    	elif n == 0 :						  
82 LOAD_FAST 1 ( wt )					      								    	    return ( n % 2 * n ) % n				  
84 LOAD_FAST 2 ( val )					      								    	elif n == 0 :						  
86 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n ) % n				  
88 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
90 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
92 CALL_FUNCTION 4					      								    	elif n == 0 :						  
94 BINARY_ADD						      								    	    return ( n % 2 * n )				  
96 LOAD_GLOBAL 0 ( knapSack )				      								    	elif n == 0 :						  
98 LOAD_FAST 0 ( W )					      								    	    return ( n % 2 * n )				  
100 LOAD_FAST 1 ( wt )					      								    	elif n == 0 :						  
102 LOAD_FAST 2 ( val )					      								    	    return ( n % 2 * n )				  
104 LOAD_FAST 3 ( n )					      								    	elif n == 0 :						  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 4					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 RETURN_VALUE					      								    								  
116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object maxRepeating at 0x7fbac0e8bc90, f def maxRepeating ( str ) :				    def maxRepeating ( str ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( str )					    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( str )					      	  count = 0						     Return a list of the list of strings in the list of strings  /MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING.py
4 CALL_FUNCTION 1					      	  res = str [ 0 ]					     of strings strings in the list of strings strings in strings ", line 46	 if __name__ == '__main__':	 ^ S
6 STORE_FAST 1 ( l )					      	  for i in range ( l ) :				     strings of strings strings strings strings in strings	  yntaxError: invalid syntax
							      	      cur_count = 1					     strings strings strings in strings strings strings strings s 
3 8 LOAD_CONST 1 ( 0 )					      	      for j in range ( i + 1 , l ) :			     strings strings strings strings strings strings strings stri 
10 STORE_FAST 2 ( count )				      		  if ( str [ i ] != str [ j ] ) :		     strings strings strings strings strings strings strings stri 
							      		      break					     strings strings strings strings strings strings strings stri 
4 12 LOAD_FAST 0 ( str )				      		  cur_count += 1				     strings strings strings strings strings strings strings stri 
14 LOAD_CONST 1 ( 0 )					      	      if cur_count > count :				     """							  
16 BINARY_SUBSCR					      		  count = cur_count				    	return [ str (						  
18 STORE_FAST 3 ( res )					      		  res = str [ i ]				    								  
							      	  return res						    								  
5 20 SETUP_LOOP 90 ( to 112 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 1 ( l )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 78 ( to 110 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_CONST 2 ( 1 )					      								    								  
36 STORE_FAST 5 ( cur_count )				      								    								  
							      								    								  
7 38 SETUP_LOOP 48 ( to 88 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 1 ( l )					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 30 ( to 86 )				      								    								  
56 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 58 LOAD_FAST 0 ( str )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( str )					      								    								  
66 LOAD_FAST 6 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 3 ( != )					      								    								  
72 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 74 BREAK_LOOP						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 5 ( cur_count )			      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 5 ( cur_count )				      								    								  
84 JUMP_ABSOLUTE 54					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
11 >> 88 LOAD_FAST 5 ( cur_count )			      								    								  
90 LOAD_FAST 2 ( count )				      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
12 96 LOAD_FAST 5 ( cur_count )				      								    								  
98 STORE_FAST 2 ( count )				      								    								  
							      								    								  
13 100 LOAD_FAST 0 ( str )				      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 STORE_FAST 3 ( res )				      								    								  
108 JUMP_ABSOLUTE 30					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
14 >> 112 LOAD_FAST 3 ( res )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		      EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		    EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		  EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7fbac<<unk>> de def calculateSum ( arr , n ) :				    def calculateSum ( arr , n , n , n ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n == 0 ) :					    	n = n % n						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	n = n % n						  
4 COMPARE_OP 2 ( == )					      	  s = arr [ 0 ]						    	return n % n						  
6 POP_JUMP_IF_FALSE 12					      	  value = int ( s )					    								  
							      	  sum = value						    								  
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 2 , n , 2 ) :			    								  
10 RETURN_VALUE						      	      s = arr [ i ]					    								  
							      	      value = int ( s )					    								  
4 >> 12 LOAD_FAST 0 ( arr )				      	      operation = arr [ i - 1 ] [ 0 ]			    								  
14 LOAD_CONST 1 ( 0 )					      	      if ( operation == '+' ) :				    								  
16 BINARY_SUBSCR					      		  sum += value					    								  
18 STORE_FAST 2 ( s )					      	      else :						    								  
							      		  sum -= value					    								  
5 20 LOAD_GLOBAL 0 ( int )				      	  return sum						    								  
22 LOAD_FAST 2 ( s )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 STORE_FAST 3 ( value )				      								    								  
							      								    								  
6 28 LOAD_FAST 3 ( value )				      								    								  
30 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
7 32 SETUP_LOOP 78 ( to 112 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_CONST 2 ( 2 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 62 ( to 110 )				      								    								  
48 STORE_FAST 5 ( i )					      								    								  
							      								    								  
8 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 2 ( s )					      								    								  
							      								    								  
9 58 LOAD_GLOBAL 0 ( int )				      								    								  
60 LOAD_FAST 2 ( s )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 STORE_FAST 3 ( value )				      								    								  
							      								    								  
10 66 LOAD_FAST 0 ( arr )				      								    								  
68 LOAD_FAST 5 ( i )					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 1 ( 0 )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 6 ( operation )				      								    								  
							      								    								  
11 82 LOAD_FAST 6 ( operation )				      								    								  
84 LOAD_CONST 4 ( '+' )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
12 90 LOAD_FAST 4 ( sum )				      								    								  
92 LOAD_FAST 3 ( value )				      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 4 ( sum )					      								    								  
98 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
14 >> 100 LOAD_FAST 4 ( sum )				      								    								  
102 LOAD_FAST 3 ( value )				      								    								  
104 INPLACE_SUBTRACT					      								    								  
106 STORE_FAST 4 ( sum )				      								    								  
108 JUMP_ABSOLUTE 46					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
15 >> 112 LOAD_FAST 4 ( sum )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY				      MAXIMUM_TRIPLET_SUM_ARRAY					    MAXIMUM_TRIPLET_SUM_ARRAY					  MAXIMUM_TRIPLET_SUM_ARRAY
--							      --							    --								  --
Disassembly of <code object maxTripletSum at 0x7fbac0e8bc90,  def maxTripletSum ( arr , n ) :				    def maxTripletSum ( x , n ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( - 1000000 )				      	  sm = - 1000000					    	"""							  
2 STORE_FAST 2 ( sm )					      	  for i in range ( 0 , n ) :				     Returns ----						  
							      	      for j in range ( i + 1 , n ) :			     x : float							  
3 4 SETUP_LOOP 118 ( to 124 )				      		  for k in range ( j + 1 , n ) :		     """							  
6 LOAD_GLOBAL 0 ( range )				      		      if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] 	for i in range ( n ) :					  
8 LOAD_CONST 2 ( 0 )					      			  sm = arr [ i ] + arr [ j ] + arr [ k ]    	    if n < 0 :						  
10 LOAD_FAST 1 ( n )					      	  return sm						    		return 0					  
12 CALL_FUNCTION 2					      								    	return 0						  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 104 ( to 122 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 98 ( to 120 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 80 ( to 118 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 SETUP_LOOP 74 ( to 116 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 56 ( to 114 )				      								    								  
58 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 60 LOAD_FAST 2 ( sm )					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 5 ( k )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_ADD						      								    								  
84 COMPARE_OP 0 ( < )					      								    								  
86 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 4 ( j )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 5 ( k )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 2 ( sm )					      								    								  
112 JUMP_ABSOLUTE 56					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 36					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 16					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
8 >> 124 LOAD_FAST 2 ( sm )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
Disassembly of <code object sumAtKthLevel at 0x7fbac0e89d20,  def sumAtKthLevel ( tree , k ) :				    def sumAtKthLevel ( tree , n = 1 ) :			  failure : #Results: 5, 10
2 0 LOAD_CONST 1 ( - 1 )				      	  level = - 1						    	"""							  
2 STORE_FAST 2 ( level )				      	  sum = 0						     Returns the number of the level of the level of the level of 
							      	  n = len ( tree )					     """							  
3 4 LOAD_CONST 2 ( 0 )					      	  for i in range ( n ) :				    	n = 0							  
6 STORE_FAST 3 ( sum )					      	      if ( tree [ i ] == '(' ) :			    	for n in range ( n ) :					  
							      		  level += 1					    	    n = n						  
4 8 LOAD_GLOBAL 0 ( len )				      	      elif ( tree [ i ] == ')' ) :			    	    n = n						  
10 LOAD_FAST 0 ( tree )					      		  level -= 1					    	    n = n						  
12 CALL_FUNCTION 1					      	      else :						    	    n -= n						  
14 STORE_FAST 4 ( n )					      		  if ( level == k ) :				    	    n -= n						  
							      		      sum += ( ord ( tree [ i ] ) - ord ( '0' ) )   	return n						  
5 16 SETUP_LOOP 92 ( to 110 )				      	  return sum						    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 4 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 80 ( to 108 )				      								    								  
28 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( tree )				      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( '(' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 42 LOAD_FAST 2 ( level )				      								    								  
44 LOAD_CONST 4 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 2 ( level )				      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 52 LOAD_FAST 0 ( tree )				      								    								  
54 LOAD_FAST 5 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 5 ( ')' )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 64 LOAD_FAST 2 ( level )				      								    								  
66 LOAD_CONST 4 ( 1 )					      								    								  
68 INPLACE_SUBTRACT					      								    								  
70 STORE_FAST 2 ( level )				      								    								  
72 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 74 LOAD_FAST 2 ( level )				      								    								  
76 LOAD_FAST 1 ( k )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
12 82 LOAD_FAST 3 ( sum )				      								    								  
84 LOAD_GLOBAL 2 ( ord )				      								    								  
86 LOAD_FAST 0 ( tree )					      								    								  
88 LOAD_FAST 5 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_GLOBAL 2 ( ord )				      								    								  
96 LOAD_CONST 6 ( '0' )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 3 ( sum )				      								    								  
106 JUMP_ABSOLUTE 26					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
13 >> 110 LOAD_FAST 3 ( sum )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1
--							      --							    --								  --
Disassembly of <code object maxDiff at 0x7fbac0e89d20, file " def maxDiff ( arr , n ) :					    def maxDiff ( arr , n , n , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 2 ( result )				      	  arr.sort ( )						    								  
							      	  for i in range ( n - 1 ) :				    								  
3 4 LOAD_FAST 0 ( arr )					      	      if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :   								  
6 LOAD_METHOD 0 ( sort )				      		  result += abs ( arr [ i ] )			    								  
8 CALL_METHOD 0						      	      else :						    								  
10 POP_TOP						      		  pass						    								  
							      	  if ( arr [ n - 2 ] != arr [ n - 1 ] ) :		    								  
4 12 SETUP_LOOP 66 ( to 80 )				      	      result += abs ( arr [ n - 1 ] )			    								  
14 LOAD_GLOBAL 1 ( range )				      	  return result						    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 50 ( to 78 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_GLOBAL 2 ( abs )				      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 LOAD_GLOBAL 2 ( abs )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 BINARY_SUBSCR					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 COMPARE_OP 3 ( != )					      								    								  
56 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( result )				      								    								  
60 LOAD_GLOBAL 2 ( abs )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( result )				      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 76 JUMP_ABSOLUTE 26					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 1 ( n )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
10 104 LOAD_FAST 2 ( result )				      								    								  
106 LOAD_GLOBAL 2 ( abs )				      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 1 ( n )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 INPLACE_ADD						      								    								  
122 STORE_FAST 2 ( result )				      								    								  
							      								    								  
11 >> 124 LOAD_FAST 2 ( result )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT_1						      BUBBLE_SORT_1						    BUBBLE_SORT_1						  BUBBLE_SORT_1
--							      --							    --								  --
Disassembly of <code object bubbleSort at 0x7fbac<<unk>> d540 def bubbleSort ( arr ) :					    def bubbleSort ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	"""							  
2 LOAD_FAST 0 ( arr )					      	  for i in range ( n ) :				     Return a list of the given arr in the given arr of arr	  
4 CALL_FUNCTION 1					      	      swapped = False					     """							  
6 STORE_FAST 1 ( n )					      	      for j in range ( 0 , n - i - 1 ) :		    	for i in range ( arr ) :				  
							      		  if arr [ j ] > arr [ j + 1 ] :		    	    arr [ i ] = arr [ i ]				  
3 8 SETUP_LOOP 116 ( to 126 )				      		      arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 	return arr						  
10 LOAD_GLOBAL 1 ( range )				      		      swapped = True				    								  
12 LOAD_FAST 1 ( n )					      	      if swapped == False :				    								  
14 CALL_FUNCTION 1					      		  break						    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 104 ( to 124 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_CONST 1 ( False )				      								    								  
24 STORE_FAST 3 ( swapped )				      								    								  
							      								    								  
5 26 SETUP_LOOP 84 ( to 112 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 62 ( to 110 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 4 ( j )					      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 0 ( arr )					      								    								  
82 LOAD_FAST 4 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 ROT_TWO						      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 STORE_SUBSCR						      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 4 ( j )					      								    								  
98 LOAD_CONST 3 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_SUBSCR					      								    								  
							      								    								  
8 104 LOAD_CONST 4 ( True )				      								    								  
106 STORE_FAST 3 ( swapped )				      								    								  
108 JUMP_ABSOLUTE 46					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
9 >> 112 LOAD_FAST 3 ( swapped )			      								    								  
114 LOAD_CONST 1 ( False )				      								    								  
116 COMPARE_OP 2 ( == )					      								    								  
118 POP_JUMP_IF_FALSE 18				      								    								  
							      								    								  
10 120 BREAK_LOOP					      								    								  
122 JUMP_ABSOLUTE 18					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			      LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			    LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS				  LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS
--							      --							    --								  --
Disassembly of <code object longestCommonSum at 0x7fbac0e89d2 def longestCommonSum ( arr1 , arr2 , n ) :		    def longestCommonSum ( arr1 , maxLen = 1 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxLen = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 3 ( maxLen )				      	  for i in range ( 0 , n ) :				    								  
							      	      sum1 = 0						    								  
3 4 SETUP_LOOP 102 ( to 108 )				      	      sum2 = 0						    								  
6 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i , n ) :			    								  
8 LOAD_CONST 1 ( 0 )					      		  sum1 += arr1 [ j ]				    								  
10 LOAD_FAST 2 ( n )					      		  sum2 += arr2 [ j ]				    								  
12 CALL_FUNCTION 2					      		  if ( sum1 == sum2 ) :				    								  
14 GET_ITER						      		      len = j - i + 1				    								  
>> 16 FOR_ITER 88 ( to 106 )				      		      if ( len > maxLen ) :			    								  
18 STORE_FAST 4 ( i )					      			  maxLen = len				    								  
							      	  return maxLen						    								  
4 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 5 ( sum1 )				      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 6 ( sum2 )				      								    								  
							      								    								  
6 28 SETUP_LOOP 74 ( to 104 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 60 ( to 102 )				      								    								  
42 STORE_FAST 7 ( j )					      								    								  
							      								    								  
7 44 LOAD_FAST 5 ( sum1 )				      								    								  
46 LOAD_FAST 0 ( arr1 )					      								    								  
48 LOAD_FAST 7 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 5 ( sum1 )				      								    								  
							      								    								  
8 56 LOAD_FAST 6 ( sum2 )				      								    								  
58 LOAD_FAST 1 ( arr2 )					      								    								  
60 LOAD_FAST 7 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 6 ( sum2 )				      								    								  
							      								    								  
9 68 LOAD_FAST 5 ( sum1 )				      								    								  
70 LOAD_FAST 6 ( sum2 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
10 76 LOAD_FAST 7 ( j )					      								    								  
78 LOAD_FAST 4 ( i )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 8 ( len )					      								    								  
							      								    								  
11 88 LOAD_FAST 8 ( len )				      								    								  
90 LOAD_FAST 3 ( maxLen )				      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
12 96 LOAD_FAST 8 ( len )				      								    								  
98 STORE_FAST 3 ( maxLen )				      								    								  
100 JUMP_ABSOLUTE 40					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 16					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
13 >> 108 LOAD_FAST 3 ( maxLen )			      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	      POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	    POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	  POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS
--							      --							    --								  --
Disassembly of <code object isPresent at 0x7fbac0e8bc90, file def isPresent ( s , q ) :					    def isPresent ( s ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  freq = [ 0 ] * MAX_CHAR				    	"""							  
2 BUILD_LIST 1						      	  for i in range ( 0 , len ( s ) ) :			     Returns the given string of a string in the given string in  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      freq [ ord ( s [ i ] ) ] += 1			     """							  
6 BINARY_MULTIPLY					      	  for i in range ( 0 , len ( q ) ) :			    	for i in range ( len ( s ) ) :				  
8 STORE_FAST 2 ( freq )					      	      freq [ ord ( q [ i ] ) ] -= 1			    	    if i < len ( s ) :					  
							      	      if ( freq [ ord ( q [ i ] ) ] < 0 ) :		    		return True					  
3 10 SETUP_LOOP 46 ( to 58 )				      		  return False					    	return False						  
12 LOAD_GLOBAL 1 ( range )				      	  return True						    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 LOAD_GLOBAL 2 ( len )				      								    								  
18 LOAD_FAST 0 ( s )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 28 ( to 56 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 2 ( freq )				      								    								  
32 LOAD_GLOBAL 3 ( ord )				      								    								  
34 LOAD_FAST 0 ( s )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 DUP_TOP_TWO						      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 ROT_THREE						      								    								  
52 STORE_SUBSCR						      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
5 >> 58 SETUP_LOOP 70 ( to 130 )			      								    								  
60 LOAD_GLOBAL 1 ( range )				      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 LOAD_GLOBAL 2 ( len )				      								    								  
66 LOAD_FAST 1 ( q )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 CALL_FUNCTION 2					      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 52 ( to 128 )				      								    								  
76 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 78 LOAD_FAST 2 ( freq )				      								    								  
80 LOAD_GLOBAL 3 ( ord )				      								    								  
82 LOAD_FAST 1 ( q )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 DUP_TOP_TWO						      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 INPLACE_SUBTRACT					      								    								  
98 ROT_THREE						      								    								  
100 STORE_SUBSCR					      								    								  
							      								    								  
7 102 LOAD_FAST 2 ( freq )				      								    								  
104 LOAD_GLOBAL 3 ( ord )				      								    								  
106 LOAD_FAST 1 ( q )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 1 ( 0 )					      								    								  
118 COMPARE_OP 0 ( < )					      								    								  
120 POP_JUMP_IF_FALSE 74				      								    								  
							      								    								  
8 122 LOAD_CONST 3 ( False )				      								    								  
124 RETURN_VALUE					      								    								  
126 JUMP_ABSOLUTE 74					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
9 >> 130 LOAD_CONST 4 ( True )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		      DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		    DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		  DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM
--							      --							    --								  --
Disassembly of <code object knapSack at 0x7fbac<<unk>> de40,  def knapSack ( W , wt , val , n ) :			    def knapSack ( W , wt , n , n ) :				  script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if n == 0 or W == 0 :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return ( n % 2 * n )				  
4 COMPARE_OP 2 ( == )					      	  if ( wt [ n - 1 ] > W ) :				    	elif n == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	      return knapSack ( W , wt , val , n - 1 )		    	    return ( n % 2 * n )				  
8 LOAD_FAST 0 ( W )					      	  else :						    	elif n == 0 :						  
10 LOAD_CONST 1 ( 0 )					      	      return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  	    return ( n % 2 * n )				  
12 COMPARE_OP 2 ( == )					      								    	elif n == 0 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return ( n % 2 * n )				  
							      								    	elif n == 0 :						  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    	    return ( n % 2 * n )				  
18 RETURN_VALUE						      								    	elif n == 0 :						  
							      								    	    return ( n % 2 * n )				  
4 >> 20 LOAD_FAST 1 ( wt )				      								    	elif n == 0 :						  
22 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n )				  
24 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
26 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
28 BINARY_SUBSCR					      								    	elif n == 0 :						  
30 LOAD_FAST 0 ( W )					      								    	    return ( n % 2 * n )				  
32 COMPARE_OP 4 ( > )					      								    	elif n == 0 :						  
34 POP_JUMP_IF_FALSE 54					      								    	    return ( n % 2 * n )				  
							      								    	elif n == 0 :						  
5 36 LOAD_GLOBAL 0 ( knapSack )				      								    	    return ( n % 2 * n )				  
38 LOAD_FAST 0 ( W )					      								    	elif n == 0 :						  
40 LOAD_FAST 1 ( wt )					      								    	    return ( n % 2 * n )				  
42 LOAD_FAST 2 ( val )					      								    	elif n == 0 :						  
44 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n )				  
46 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
48 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
50 CALL_FUNCTION 4					      								    	elif n == 0 :						  
52 RETURN_VALUE						      								    	    return ( n % 2 * n )				  
							      								    	elif n == 0 :						  
7 >> 54 LOAD_GLOBAL 1 ( max )				      								    	    return ( n % 2 * n )				  
56 LOAD_FAST 2 ( val )					      								    	elif n == 0 :						  
58 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n )				  
60 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
62 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
64 BINARY_SUBSCR					      								    	elif n == 0 :						  
66 LOAD_GLOBAL 0 ( knapSack )				      								    	    return ( n % 2 * n ) % n				  
68 LOAD_FAST 0 ( W )					      								    	elif n == 0 :						  
70 LOAD_FAST 1 ( wt )					      								    	    return ( n % 2 * n ) % n				  
72 LOAD_FAST 3 ( n )					      								    	elif n == 0 :						  
74 LOAD_CONST 2 ( 1 )					      								    	    return ( n % 2 * n ) % n				  
76 BINARY_SUBTRACT					      								    	elif n == 0 :						  
78 BINARY_SUBSCR					      								    	    return ( n % 2 * n ) % n				  
80 BINARY_SUBTRACT					      								    	elif n == 0 :						  
82 LOAD_FAST 1 ( wt )					      								    	    return ( n % 2 * n ) % n				  
84 LOAD_FAST 2 ( val )					      								    	elif n == 0 :						  
86 LOAD_FAST 3 ( n )					      								    	    return ( n % 2 * n ) % n				  
88 LOAD_CONST 2 ( 1 )					      								    	elif n == 0 :						  
90 BINARY_SUBTRACT					      								    	    return ( n % 2 * n )				  
92 CALL_FUNCTION 4					      								    	elif n == 0 :						  
94 BINARY_ADD						      								    	    return ( n % 2 * n )				  
96 LOAD_GLOBAL 0 ( knapSack )				      								    	elif n == 0 :						  
98 LOAD_FAST 0 ( W )					      								    	    return ( n % 2 * n )				  
100 LOAD_FAST 1 ( wt )					      								    	elif n == 0 :						  
102 LOAD_FAST 2 ( val )					      								    	    return ( n % 2 * n )				  
104 LOAD_FAST 3 ( n )					      								    	elif n == 0 :						  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 4					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 RETURN_VALUE					      								    								  
116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2	      PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		    PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		  PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2
--							      --							    --								  --
Disassembly of <code object printSubsequences at 0x7fbac0e8bc def printSubsequences ( str ) :				    def printSubsequences ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  
2 LOAD_FAST 0 ( str )					      	  opsize = int ( pow ( 2 , n - 1 ) )			    								  
4 CALL_FUNCTION 1					      	  for counter in range ( opsize ) :			    								  
6 STORE_FAST 1 ( n )					      	      for j in range ( n ) :				    								  
							      		  print ( str [ j ] , end = "" )		    								  
3 8 LOAD_GLOBAL 1 ( int )				      		  if ( counter & ( 1 << j ) ) :			    								  
10 LOAD_GLOBAL 2 ( pow )				      		      print ( "" , end = "" )			    								  
12 LOAD_CONST 1 ( 2 )					      	      print ( "\n" , end = "" )				    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 STORE_FAST 2 ( opsize )				      								    								  
							      								    								  
4 26 SETUP_LOOP 86 ( to 114 )				      								    								  
28 LOAD_GLOBAL 3 ( range )				      								    								  
30 LOAD_FAST 2 ( opsize )				      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 74 ( to 112 )				      								    								  
38 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
5 40 SETUP_LOOP 56 ( to 98 )				      								    								  
42 LOAD_GLOBAL 3 ( range )				      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 44 ( to 96 )				      								    								  
52 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 54 LOAD_GLOBAL 4 ( print )				      								    								  
56 LOAD_FAST 0 ( str )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( '' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
							      								    								  
7 70 LOAD_FAST 3 ( counter )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_LSHIFT					      								    								  
78 BINARY_AND						      								    								  
80 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 82 LOAD_GLOBAL 4 ( print )				      								    								  
84 LOAD_CONST 3 ( '' )					      								    								  
86 LOAD_CONST 3 ( '' )					      								    								  
88 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
90 CALL_FUNCTION_KW 2					      								    								  
92 POP_TOP						      								    								  
94 JUMP_ABSOLUTE 50					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
9 >> 98 LOAD_GLOBAL 4 ( print )				      								    								  
100 LOAD_CONST 5 ( '\n' )				      								    								  
102 LOAD_CONST 3 ( '' )					      								    								  
104 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 36					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY_1				      FREQUENT_ELEMENT_ARRAY_1					    FREQUENT_ELEMENT_ARRAY_1					  FREQUENT_ELEMENT_ARRAY_1
--							      --							    --								  --
Disassembly of <code object mostFrequent at 0x7fbac0e89d20, f def mostFrequent ( arr , n ) :				    def mostFrequent ( arr , n , v , v , v , v , v , v , v , v ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  Hash = dict ( )					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    								  /FREQUENT_ELEMENT_ARRAY_1.py", line 35     if __na
4 STORE_FAST 2 ( Hash )					      	      if arr [ i ] in Hash.keys ( ) :			    								  me__ == '__main__':	   ^ SyntaxError: invalid sy
							      		  Hash [ arr [ i ] ] += 1			    								  ntax
3 6 SETUP_LOOP 66 ( to 74 )				      	      else :						    								  
8 LOAD_GLOBAL 1 ( range )				      		  Hash [ arr [ i ] ] = 1			    								  
10 LOAD_FAST 1 ( n )					      	  max_count = 0						    								  
12 CALL_FUNCTION 1					      	  res = - 1						    								  
14 GET_ITER						      	  for i in Hash :					    								  
>> 16 FOR_ITER 54 ( to 72 )				      	      if ( max_count < Hash [ i ] ) :			    								  
18 STORE_FAST 3 ( i )					      		  res = i					    								  
							      		  max_count = Hash [ i ]			    								  
4 20 LOAD_FAST 0 ( arr )				      	  return res						    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 2 ( Hash )					      								    								  
28 LOAD_METHOD 2 ( keys )				      								    								  
30 CALL_METHOD 0					      								    								  
32 COMPARE_OP 6 ( in )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( Hash )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 1 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 58 LOAD_CONST 1 ( 1 )				      								    								  
60 LOAD_FAST 2 ( Hash )					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 16					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_CONST 2 ( 0 )				      								    								  
76 STORE_FAST 4 ( max_count )				      								    								  
							      								    								  
9 78 LOAD_CONST 3 ( - 1 )				      								    								  
80 STORE_FAST 5 ( res )					      								    								  
							      								    								  
10 82 SETUP_LOOP 36 ( to 120 )				      								    								  
84 LOAD_FAST 2 ( Hash )					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 28 ( to 118 )				      								    								  
90 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 92 LOAD_FAST 4 ( max_count )				      								    								  
94 LOAD_FAST 2 ( Hash )					      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 88				      								    								  
							      								    								  
12 104 LOAD_FAST 3 ( i )				      								    								  
106 STORE_FAST 5 ( res )				      								    								  
							      								    								  
13 108 LOAD_FAST 2 ( Hash )				      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 STORE_FAST 4 ( max_count )				      								    								  
116 JUMP_ABSOLUTE 88					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_FAST 5 ( res )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		      FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		    FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS			  FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS
--							      --							    --								  --
Disassembly of <code object printFirstRepeating at 0x7fbac<<u def printFirstRepeating ( arr , n ) :			    def printFirstRepeating ( arr , n , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( - 1 )				      	  Min = - 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  
2 STORE_FAST 2 ( Min )					      	  myset = dict ( )					    								  
							      	  for i in range ( n - 1 , - 1 , - 1 ) :		    								  
3 4 LOAD_GLOBAL 0 ( dict )				      	      if arr [ i ] in myset.keys ( ) :			    								  
6 CALL_FUNCTION 0					      		  Min = i					    								  
8 STORE_FAST 3 ( myset )				      	      else :						    								  
							      		  myset [ arr [ i ] ] = 1			    								  
4 10 SETUP_LOOP 58 ( to 70 )				      	  if ( Min != - 1 ) :					    								  
12 LOAD_GLOBAL 1 ( range )				      	      print ( "The first repeating element is" , arr [ Min  								  
14 LOAD_FAST 1 ( n )					      	  else :						    								  
16 LOAD_CONST 2 ( 1 )					      	      print ( "There are no repeating elements" )	    								  
18 BINARY_SUBTRACT					      								    								  
20 LOAD_CONST 1 ( - 1 )					      								    								  
22 LOAD_CONST 1 ( - 1 )					      								    								  
24 CALL_FUNCTION 3					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 38 ( to 68 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 4 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 3 ( myset )				      								    								  
40 LOAD_METHOD 2 ( keys )				      								    								  
42 CALL_METHOD 0					      								    								  
44 COMPARE_OP 6 ( in )					      								    								  
46 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( i )					      								    								  
50 STORE_FAST 2 ( Min )					      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 54 LOAD_CONST 2 ( 1 )				      								    								  
56 LOAD_FAST 3 ( myset )				      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 STORE_SUBSCR						      								    								  
66 JUMP_ABSOLUTE 28					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 2 ( Min )				      								    								  
72 LOAD_CONST 1 ( - 1 )					      								    								  
74 COMPARE_OP 3 ( != )					      								    								  
76 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
10 78 LOAD_GLOBAL 3 ( print )				      								    								  
80 LOAD_CONST 3 ( 'The first repeating element is' )	      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 2 ( Min )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 POP_TOP						      								    								  
92 JUMP_FORWARD 8 ( to 102 )				      								    								  
							      								    								  
12 >> 94 LOAD_GLOBAL 3 ( print )			      								    								  
96 LOAD_CONST 4 ( 'There are no repeating elements' )	      								    								  
98 CALL_FUNCTION 1					      								    								  
100 POP_TOP						      								    								  
>> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1
--							      --							    --								  --
Disassembly of <code object isProduct at 0x7fbac<<unk>> de40, def isProduct ( arr , n , x ) :				    def isProduct ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( n )					      	  if n < 2 :						    	n = n [ n : n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_CONST 1 ( 2 )					      	      return False					    	while n < n :						  /eval_scripts/dis_sa-python_sa.test/PAIR_WITH_GIVE
4 COMPARE_OP 0 ( < )					      	  s = set ( )						    	    n = n [ n : n ]					  N_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1.py", lin
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 0 , n ) :				    	return n						  e 56, in <module>	if f_filled(*parameters_set)
							      	      if arr [ i ] == 0 :				    								   == f_gold(*parameters_set): TypeError: f_filled()
3 8 LOAD_CONST 2 ( False )				      		  if x == 0 :					    								   takes 2 positional arguments but 3 were given
10 RETURN_VALUE						      		      return True				    								  
							      		  else :					    								  
4 >> 12 LOAD_GLOBAL 0 ( set )				      		      continue					    								  
14 CALL_FUNCTION 0					      	      if x % arr [ i ] == 0 :				    								  
16 STORE_FAST 3 ( s )					      		  if x // arr [ i ] in s :			    								  
							      		      return True				    								  
5 18 SETUP_LOOP 94 ( to 114 )				      		  s.add ( arr [ i ] )				    								  
20 LOAD_GLOBAL 1 ( range )				      	  return False						    								  
22 LOAD_CONST 3 ( 0 )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 80 ( to 112 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 3 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
7 46 LOAD_FAST 2 ( x )					      								    								  
48 LOAD_CONST 3 ( 0 )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
8 54 LOAD_CONST 4 ( True )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
10 58 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
11 >> 60 LOAD_FAST 2 ( x )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_MODULO					      								    								  
70 LOAD_CONST 3 ( 0 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
12 76 LOAD_FAST 2 ( x )					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 LOAD_FAST 3 ( s )					      								    								  
88 COMPARE_OP 6 ( in )					      								    								  
90 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
13 92 LOAD_CONST 4 ( True )				      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
14 >> 96 LOAD_FAST 3 ( s )				      								    								  
98 LOAD_METHOD 2 ( add )				      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_METHOD 1					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 30					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
15 >> 114 LOAD_CONST 2 ( False )			      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIZE_SUBARRAY_MAXIMUM_SUM				      SIZE_SUBARRAY_MAXIMUM_SUM					    SIZE_SUBARRAY_MAXIMUM_SUM					  SIZE_SUBARRAY_MAXIMUM_SUM
--							      --							    --								  --
Disassembly of <code object maxSubArraySum at 0x7fbac<<unk>>  def maxSubArraySum ( a , size ) :				    def maxSubArraySum ( a , size , max_so_far = 1 ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( maxsize )				      	  max_so_far = - maxsize - 1				    	maxsize = maxsize					  
2 UNARY_NEGATIVE					      	  max_ending_here = 0					    	while maxsize < maxsize :				  
4 LOAD_CONST 1 ( 1 )					      	  start = 0						    	    maxsize = maxsize					  
6 BINARY_SUBTRACT					      	  end = 0						    	if max_so_far > maxsize :				  
8 STORE_FAST 2 ( max_so_far )				      	  s = 0							    	    maxsize = maxsize					  
							      	  for i in range ( 0 , size ) :				    	return maxsize						  
3 10 LOAD_CONST 2 ( 0 )					      	      max_ending_here += a [ i ]			    								  
12 STORE_FAST 3 ( max_ending_here )			      	      if max_so_far < max_ending_here :			    								  
							      		  max_so_far = max_ending_here			    								  
4 14 LOAD_CONST 2 ( 0 )					      		  start = s					    								  
16 STORE_FAST 4 ( start )				      		  end = i					    								  
							      	      if max_ending_here < 0 :				    								  
5 18 LOAD_CONST 2 ( 0 )					      		  max_ending_here = 0				    								  
20 STORE_FAST 5 ( end )					      		  s = i + 1					    								  
							      	  return ( end - start + 1 )				    								  
6 22 LOAD_CONST 2 ( 0 )					      								    								  
24 STORE_FAST 6 ( s )					      								    								  
							      								    								  
7 26 SETUP_LOOP 70 ( to 98 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_CONST 2 ( 0 )					      								    								  
32 LOAD_FAST 1 ( size )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 56 ( to 96 )				      								    								  
40 STORE_FAST 7 ( i )					      								    								  
							      								    								  
8 42 LOAD_FAST 3 ( max_ending_here )			      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 7 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 3 ( max_ending_here )			      								    								  
							      								    								  
9 54 LOAD_FAST 2 ( max_so_far )				      								    								  
56 LOAD_FAST 3 ( max_ending_here )			      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
10 62 LOAD_FAST 3 ( max_ending_here )			      								    								  
64 STORE_FAST 2 ( max_so_far )				      								    								  
							      								    								  
11 66 LOAD_FAST 6 ( s )					      								    								  
68 STORE_FAST 4 ( start )				      								    								  
							      								    								  
12 70 LOAD_FAST 7 ( i )					      								    								  
72 STORE_FAST 5 ( end )					      								    								  
							      								    								  
13 >> 74 LOAD_FAST 3 ( max_ending_here )		      								    								  
76 LOAD_CONST 2 ( 0 )					      								    								  
78 COMPARE_OP 0 ( < )					      								    								  
80 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
14 82 LOAD_CONST 2 ( 0 )				      								    								  
84 STORE_FAST 3 ( max_ending_here )			      								    								  
							      								    								  
15 86 LOAD_FAST 7 ( i )					      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 6 ( s )					      								    								  
94 JUMP_ABSOLUTE 38					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
16 >> 98 LOAD_FAST 5 ( end )				      								    								  
100 LOAD_FAST 4 ( start )				      								    								  
102 BINARY_SUBTRACT					      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			      K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			    K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			  K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS
--							      --							    --								  --
Disassembly of <code object KMaxCombinations at 0x7fbac<<unk> def KMaxCombinations ( A , B , N , K ) :			    def KMaxCombinations ( ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( PriorityQueue )			      	  pq = PriorityQueue ( )				    	"""							  
2 CALL_FUNCTION 0					      	  for i in range ( 0 , N ) :				     PriorityQueue()						  
4 STORE_FAST 4 ( pq )					      	      for j in range ( 0 , N ) :			     """							  
							      		  a = A [ i ] + B [ j ]				    	# PriorityQueue()					  
3 6 SETUP_LOOP 70 ( to 78 )				      		  pq.put ( ( - a , a ) )			    	# for pq in the range of the range of range (i.e.i.e.i.e. 
8 LOAD_GLOBAL 1 ( range )				      	  count = 0						    								  
10 LOAD_CONST 1 ( 0 )					      	  while ( count < K ) :					    								  
12 LOAD_FAST 2 ( N )					      	      print ( pq.get ( ) [ 1 ] )			    								  
14 CALL_FUNCTION 2					      	      count = count + 1					    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 56 ( to 76 )				      								    								  
20 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 50 ( to 74 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 2 ( N )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 36 ( to 72 )				      								    								  
36 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( A )					      								    								  
40 LOAD_FAST 5 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( B )					      								    								  
46 LOAD_FAST 6 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 7 ( a )					      								    								  
							      								    								  
6 54 LOAD_FAST 4 ( pq )					      								    								  
56 LOAD_METHOD 2 ( put )				      								    								  
58 LOAD_FAST 7 ( a )					      								    								  
60 UNARY_NEGATIVE					      								    								  
62 LOAD_FAST 7 ( a )					      								    								  
64 BUILD_TUPLE 2					      								    								  
66 CALL_METHOD 1					      								    								  
68 POP_TOP						      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 JUMP_ABSOLUTE 18					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
7 >> 78 LOAD_CONST 1 ( 0 )				      								    								  
80 STORE_FAST 8 ( count )				      								    								  
							      								    								  
8 82 SETUP_LOOP 36 ( to 120 )				      								    								  
>> 84 LOAD_FAST 8 ( count )				      								    								  
86 LOAD_FAST 3 ( K )					      								    								  
88 COMPARE_OP 0 ( < )					      								    								  
90 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
9 92 LOAD_GLOBAL 3 ( print )				      								    								  
94 LOAD_FAST 4 ( pq )					      								    								  
96 LOAD_METHOD 4 ( get )				      								    								  
98 CALL_METHOD 0					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 POP_TOP						      								    								  
							      								    								  
10 108 LOAD_FAST 8 ( count )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 8 ( count )				      								    								  
116 JUMP_ABSOLUTE 84					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 LOAD_CONST 0 ( None )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING	      PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
Disassembly of <code object productAtKthLevel at 0x7fbac0e8bc def productAtKthLevel ( tree , k ) :			    def productAtKthLevel ( tree , k = None , product = None , pr error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 1 )				      	  level = - 1						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( level )				      	  product = 1						    								  /PRODUCT_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING.
							      	  n = len ( tree )					    								  py", line 53	   print("#Results: %i, %i" % (n_suc
3 4 LOAD_CONST 2 ( 1 )					      	  for i in range ( 0 , n ) :				    								  cess, len(param)))
6 STORE_FAST 3 ( product )				      	      if ( tree [ i ] == '(' ) :			    								  			 ^ SyntaxError: EOF while sc
							      		  level += 1					    								  anning triple-quoted string literal
4 8 LOAD_GLOBAL 0 ( len )				      	      elif ( tree [ i ] == ')' ) :			    								  
10 LOAD_FAST 0 ( tree )					      		  level -= 1					    								  
12 CALL_FUNCTION 1					      	      else :						    								  
14 STORE_FAST 4 ( n )					      		  if ( level == k ) :				    								  
							      		      product *= ( int ( tree [ i ] ) - int ( '0' ) 								  
5 16 SETUP_LOOP 94 ( to 112 )				      	  return product					    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 3 ( 0 )					      								    								  
22 LOAD_FAST 4 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 80 ( to 110 )				      								    								  
30 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 0 ( tree )				      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 4 ( '(' )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( level )				      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 2 ( level )				      								    								  
52 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
8 >> 54 LOAD_FAST 0 ( tree )				      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 5 ( ')' )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 66 LOAD_FAST 2 ( level )				      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 2 ( level )				      								    								  
74 JUMP_ABSOLUTE 28					      								    								  
							      								    								  
11 >> 76 LOAD_FAST 2 ( level )				      								    								  
78 LOAD_FAST 1 ( k )					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
12 84 LOAD_FAST 3 ( product )				      								    								  
86 LOAD_GLOBAL 2 ( int )				      								    								  
88 LOAD_FAST 0 ( tree )					      								    								  
90 LOAD_FAST 5 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 LOAD_GLOBAL 2 ( int )				      								    								  
98 LOAD_CONST 6 ( '0' )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 INPLACE_MULTIPLY					      								    								  
106 STORE_FAST 3 ( product )				      								    								  
108 JUMP_ABSOLUTE 28					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
13 >> 112 LOAD_FAST 3 ( product )			      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER_1					      SUM_FACTORS_NUMBER_1					    SUM_FACTORS_NUMBER_1					  SUM_FACTORS_NUMBER_1
--							      --							    --								  --
Disassembly of <code object sumofFactors at 0x7fbac0e89d20, f def sumofFactors ( n ) :					    def sumofFactors ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = [ ]						  
2 STORE_FAST 1 ( res )					      	  for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :	    	res = res [ 0 ]						  
							      	      curr_sum = 1					    	res = res [ 1 ]						  
3 4 SETUP_LOOP 90 ( to 96 )				      	      curr_term = 1					    	res = res [ 2 ]						  
6 LOAD_GLOBAL 0 ( range )				      	      while n % i == 0 :				    	for i in range ( res ) :				  
8 LOAD_CONST 2 ( 2 )					      		  n = n / i ;					    	    res = res [ i ]					  
10 LOAD_GLOBAL 1 ( int )				      		  curr_term = curr_term * i ;			    	    res = res [ i ]					  
12 LOAD_GLOBAL 2 ( m )					      		  curr_sum += curr_term ;			    	    res = res [ i ]					  
14 LOAD_METHOD 3 ( sqrt )				      	      res = res * curr_sum				    	    res = res [ i ]					  
16 LOAD_FAST 0 ( n )					      	  if n > 2 :						    	    res = res [ i ]					  
18 CALL_METHOD 1					      	      res = res * ( 1 + n )				    	    res = res [ i ]					  
20 LOAD_CONST 1 ( 1 )					      	  return res ;						    	    res = res [ i ]					  
22 BINARY_ADD						      								    	    res = res [ i ]					  
24 CALL_FUNCTION 1					      								    	    res = res [ i ]					  
26 CALL_FUNCTION 2					      								    	    res = res [ i ]					  
28 GET_ITER						      								    	    res = res [ i ]					  
>> 30 FOR_ITER 62 ( to 94 )				      								    	    res = res [ i ]					  
32 STORE_FAST 2 ( i )					      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
4 34 LOAD_CONST 1 ( 1 )					      								    	    res = res [ i ]					  
36 STORE_FAST 3 ( curr_sum )				      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
5 38 LOAD_CONST 1 ( 1 )					      								    	    res = res [ i ]					  
40 STORE_FAST 4 ( curr_term )				      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
6 42 SETUP_LOOP 40 ( to 84 )				      								    	    res = res [ i ]					  
>> 44 LOAD_FAST 0 ( n )					      								    	    res = res [ i ]					  
46 LOAD_FAST 2 ( i )					      								    	    res = res [ i ]					  
48 BINARY_MODULO					      								    	    res = res [ i ]					  
50 LOAD_CONST 3 ( 0 )					      								    	    res = res [ i ]					  
52 COMPARE_OP 2 ( == )					      								    	    res = res [ i ]					  
54 POP_JUMP_IF_FALSE 82					      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
7 56 LOAD_FAST 0 ( n )					      								    	    res = res [ i ]					  
58 LOAD_FAST 2 ( i )					      								    	    res = res [ i ]					  
60 BINARY_TRUE_DIVIDE					      								    	    res = res [ i ]					  
62 STORE_FAST 0 ( n )					      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
8 64 LOAD_FAST 4 ( curr_term )				      								    	    res = res [ i ]					  
66 LOAD_FAST 2 ( i )					      								    	    res = res [ i ]					  
68 BINARY_MULTIPLY					      								    	    res = res [ i ]					  
70 STORE_FAST 4 ( curr_term )				      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
9 72 LOAD_FAST 3 ( curr_sum )				      								    	    res = res [ i ]					  
74 LOAD_FAST 4 ( curr_term )				      								    	    res = res [ i ]					  
76 INPLACE_ADD						      								    	    res = res [ i ]					  
78 STORE_FAST 3 ( curr_sum )				      								    	    res = res [ i ]					  
80 JUMP_ABSOLUTE 44					      								    	    res = res [ i ]					  
>> 82 POP_BLOCK						      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
10 >> 84 LOAD_FAST 1 ( res )				      								    	    res = res [ i ]					  
86 LOAD_FAST 3 ( curr_sum )				      								    	    res = res [ i ]					  
88 BINARY_MULTIPLY					      								    	    res = res [ i ]					  
90 STORE_FAST 1 ( res )					      								    	    res = res [ i ]					  
92 JUMP_ABSOLUTE 30					      								    	    res = res [ i ]					  
>> 94 POP_BLOCK						      								    	    res = res [ i ]					  
							      								    	    res [ i ] = res [ i ]				  
11 >> 96 LOAD_FAST 0 ( n )				      								    	    res = res [ i ]					  
98 LOAD_CONST 2 ( 2 )					      								    	    res = res [ i ]					  
100 COMPARE_OP 4 ( > )					      								    	    res = res [ i ]					  
102 POP_JUMP_IF_FALSE 116				      								    	    res = res [ i ]					  
							      								    	    res = res [ i ]					  
12 104 LOAD_FAST 1 ( res )				      								    	    res = res [ i ]					  
106 LOAD_CONST 1 ( 1 )					      								    	    res = res [ i ]					  
108 LOAD_FAST 0 ( n )					      								    	    res [ i ] = res [ i ]				  
110 BINARY_ADD						      								    	    res [ i ] = res [ i ]				  
112 BINARY_MULTIPLY					      								    	    res [ i ] = res [ i ]				  
114 STORE_FAST 1 ( res )				      								    	    res = res [ i ]					  
							      								    	    res [ i ] = res [ i ]				  
13 >> 116 LOAD_FAST 1 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK			      NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK				    NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK				  NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK
--							      --							    --								  --
Disassembly of <code object countSubsequences at 0x7fbac0e8bc def countSubsequences ( s ) :				    def countSubsequences ( s , aCount , cCount , cCount , cCount error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  aCount = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 1 ( aCount )				      	  bCount = 0						    								  /NUMBER_SUBSEQUENCES_FORM_AI_BJ_CK.py", line 33
							      	  cCount = 0						    								    if __name__ == '__main__':	    ^ SyntaxError: i
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( len ( s ) ) :			    								  nvalid syntax
6 STORE_FAST 2 ( bCount )				      	      if ( s [ i ] == 'a' ) :				    								  
							      		  aCount = ( 1 + 2 * aCount )			    								  
4 8 LOAD_CONST 1 ( 0 )					      	      elif ( s [ i ] == 'b' ) :				    								  
10 STORE_FAST 3 ( cCount )				      		  bCount = ( aCount + 2 * bCount )		    								  
							      	      elif ( s [ i ] == 'c' ) :				    								  
5 12 SETUP_LOOP 96 ( to 110 )				      		  cCount = ( bCount + 2 * cCount )		    								  
14 LOAD_GLOBAL 0 ( range )				      	  return cCount						    								  
16 LOAD_GLOBAL 1 ( len )				      								    								  
18 LOAD_FAST 0 ( s )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 80 ( to 108 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 2 ( 'a' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 42 LOAD_CONST 3 ( 1 )					      								    								  
44 LOAD_CONST 4 ( 2 )					      								    								  
46 LOAD_FAST 1 ( aCount )				      								    								  
48 BINARY_MULTIPLY					      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 1 ( aCount )				      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
8 >> 56 LOAD_FAST 0 ( s )				      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 5 ( 'b' )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
9 68 LOAD_FAST 1 ( aCount )				      								    								  
70 LOAD_CONST 4 ( 2 )					      								    								  
72 LOAD_FAST 2 ( bCount )				      								    								  
74 BINARY_MULTIPLY					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 2 ( bCount )				      								    								  
80 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
10 >> 82 LOAD_FAST 0 ( s )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 6 ( 'c' )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
11 94 LOAD_FAST 2 ( bCount )				      								    								  
96 LOAD_CONST 4 ( 2 )					      								    								  
98 LOAD_FAST 3 ( cCount )				      								    								  
100 BINARY_MULTIPLY					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 3 ( cCount )				      								    								  
106 JUMP_ABSOLUTE 26					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
12 >> 110 LOAD_FAST 3 ( cCount )			      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING
--							      --							    --								  --
Disassembly of <code object shuffleArray at 0x7fbac0e89d20, f def shuffleArray ( a , n ) :				    def shuffleArray ( a , n , n , n = 0 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  i , q , k = 0 , 1 , n					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 LOAD_CONST 2 ( 1 )					      	  while ( i < n ) :					    								  
4 LOAD_FAST 1 ( n )					      	      j = k						    								  
6 ROT_THREE						      	      while ( j > i + q ) :				    								  
8 ROT_TWO						      		  a [ j - 1 ] , a [ j ] = a [ j ] , a [ j - 1 ]	    								  
10 STORE_FAST 2 ( i )					      		  j -= 1					    								  
12 STORE_FAST 3 ( q )					      	      i += 1						    								  
14 STORE_FAST 4 ( k )					      	      k += 1						    								  
							      	      q += 1						    								  
3 16 SETUP_LOOP 100 ( to 118 )				      								    								  
>> 18 LOAD_FAST 2 ( i )					      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
4 26 LOAD_FAST 4 ( k )					      								    								  
28 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 30 SETUP_LOOP 58 ( to 90 )				      								    								  
>> 32 LOAD_FAST 5 ( j )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_FAST 3 ( q )					      								    								  
38 BINARY_ADD						      								    								  
40 COMPARE_OP 4 ( > )					      								    								  
42 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
6 44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 ROT_TWO						      								    								  
62 LOAD_FAST 0 ( a )					      								    								  
64 LOAD_FAST 5 ( j )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 STORE_SUBSCR						      								    								  
72 LOAD_FAST 0 ( a )					      								    								  
74 LOAD_FAST 5 ( j )					      								    								  
76 STORE_SUBSCR						      								    								  
							      								    								  
7 78 LOAD_FAST 5 ( j )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_SUBTRACT					      								    								  
84 STORE_FAST 5 ( j )					      								    								  
86 JUMP_ABSOLUTE 32					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
8 >> 90 LOAD_FAST 2 ( i )				      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 98 LOAD_FAST 4 ( k )					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 4 ( k )					      								    								  
							      								    								  
10 106 LOAD_FAST 3 ( q )				      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 3 ( q )					      								    								  
114 JUMP_ABSOLUTE 18					      								    								  
>> 116 POP_BLOCK					      								    								  
>> 118 LOAD_CONST 0 ( None )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		      FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		    FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		  FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object count at 0x7fbac0e89d20, file "<d def count ( a , b , m , n ) :				    def count ( a , b ) :					  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if ( ( m == 0 and n == 0 ) or n == 0 ) :		    	if a == b :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( m == 0 ) :					    	if a == b :						  
6 POP_JUMP_IF_FALSE 16					      	      return 0						    	    return 0						  
8 LOAD_FAST 3 ( n )					      	  if ( a [ m - 1 ] == b [ n - 1 ] ) :			    	elif a == b :						  
10 LOAD_CONST 1 ( 0 )					      	      return ( count ( a , b , m - 1 , n - 1 ) + count ( a  	    return 0						  
12 COMPARE_OP 2 ( == )					      	  else :						    	elif a == b :						  
14 POP_JUMP_IF_TRUE 24					      	      return count ( a , b , m - 1 , n )		    	    return 0						  
>> 16 LOAD_FAST 3 ( n )					      								    	elif a == b :						  
18 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
20 COMPARE_OP 2 ( == )					      								    	elif a == b :						  
22 POP_JUMP_IF_FALSE 28					      								    	    return 0						  
							      								    	elif a == b :						  
3 >> 24 LOAD_CONST 2 ( 1 )				      								    	    return 0						  
26 RETURN_VALUE						      								    	elif a == b :						  
							      								    	    return 0						  
4 >> 28 LOAD_FAST 2 ( m )				      								    	elif a == b :						  
30 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
32 COMPARE_OP 2 ( == )					      								    	elif a == b :						  
34 POP_JUMP_IF_FALSE 40					      								    	    return 0						  
							      								    	elif a == b :						  
5 36 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
38 RETURN_VALUE						      								    	elif a == b :						  
							      								    	    return 0						  
6 >> 40 LOAD_FAST 0 ( a )				      								    	elif a == b :						  
42 LOAD_FAST 2 ( m )					      								    	    return 0						  
44 LOAD_CONST 2 ( 1 )					      								    	elif a == b :						  
46 BINARY_SUBTRACT					      								    	    return 0						  
48 BINARY_SUBSCR					      								    	elif a == b :						  
50 LOAD_FAST 1 ( b )					      								    	    return 0						  
52 LOAD_FAST 3 ( n )					      								    	elif a == b :						  
54 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
56 BINARY_SUBTRACT					      								    	elif a == b :						  
58 BINARY_SUBSCR					      								    	    return 0						  
60 COMPARE_OP 2 ( == )					      								    	elif a == b :						  
62 POP_JUMP_IF_FALSE 104				      								    	    return 0						  
							      								    	elif a == b :						  
7 64 LOAD_GLOBAL 0 ( count )				      								    	    return 0						  
66 LOAD_FAST 0 ( a )					      								    	elif a == b :						  
68 LOAD_FAST 1 ( b )					      								    	    return 0						  
70 LOAD_FAST 2 ( m )					      								    	elif a == b :						  
72 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
74 BINARY_SUBTRACT					      								    	elif a == b :						  
76 LOAD_FAST 3 ( n )					      								    	    return 0						  
78 LOAD_CONST 2 ( 1 )					      								    	elif a == b :						  
80 BINARY_SUBTRACT					      								    	    return 0						  
82 CALL_FUNCTION 4					      								    	elif a == b :						  
84 LOAD_GLOBAL 0 ( count )				      								    	    return 0						  
86 LOAD_FAST 0 ( a )					      								    	elif a == b :						  
88 LOAD_FAST 1 ( b )					      								    	    return 0						  
90 LOAD_FAST 2 ( m )					      								    	elif a == b :						  
92 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
94 BINARY_SUBTRACT					      								    	elif a == b :						  
96 LOAD_FAST 3 ( n )					      								    	    return 0						  
98 CALL_FUNCTION 4					      								    	elif a == b :						  
100 BINARY_ADD						      								    	    return 0						  
102 RETURN_VALUE					      								    	elif a == b :						  
							      								    	    return 0						  
9 >> 104 LOAD_GLOBAL 0 ( count )			      								    	elif a == b :						  
106 LOAD_FAST 0 ( a )					      								    	    return 0						  
108 LOAD_FAST 1 ( b )					      								    	elif a == b :						  
110 LOAD_FAST 2 ( m )					      								    	    return 0						  
112 LOAD_CONST 2 ( 1 )					      								    	elif a == b :						  
114 BINARY_SUBTRACT					      								    	    return 0						  
116 LOAD_FAST 3 ( n )					      								    	elif a == b :						  
118 CALL_FUNCTION 4					      								    	    return 0						  
120 RETURN_VALUE					      								    	elif a == b :						  
122 LOAD_CONST 0 ( None )				      								    	    return 0						  
124 RETURN_VALUE NEW_LINE				      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
							      								    	elif a == b :						  
							      								    	    return 0						  
-							      -								    	elif a == b :-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY		      COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY		    COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY		  COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY
--							      --							    --								  --
Disassembly of <code object getInvCount at 0x7fbac0e89d20, fi def getInvCount ( arr ) :					    def getInvCount ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  
2 LOAD_FAST 0 ( arr )					      	  invcount = 0						    								  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n - 1 ) :			    								  
6 STORE_FAST 1 ( n )					      	      for j in range ( i + 1 , n ) :			    								  
							      		  if arr [ i ] > arr [ j ] :			    								  
3 8 LOAD_CONST 1 ( 0 )					      		      for k in range ( j + 1 , n ) :		    								  
10 STORE_FAST 2 ( invcount )				      			  if arr [ j ] > arr [ k ] :		    								  
							      			      invcount += 1			    								  
4 12 SETUP_LOOP 110 ( to 124 )				      	  return invcount					    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 92 ( to 122 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 SETUP_LOOP 86 ( to 120 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 68 ( to 118 )				      								    								  
50 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 68 SETUP_LOOP 46 ( to 116 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 4 ( j )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 28 ( to 114 )				      								    								  
86 STORE_FAST 5 ( k )					      								    								  
							      								    								  
8 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 5 ( k )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
9 104 LOAD_FAST 2 ( invcount )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 2 ( invcount )				      								    								  
112 JUMP_ABSOLUTE 84					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 48					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 28					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
10 >> 124 LOAD_FAST 2 ( invcount )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	      SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	    SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	  SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER
--							      --							    --								  --
Disassembly of <code object sumOfSubstrings at 0x7fbac0e89d20 def sumOfSubstrings ( num ) :				    def sumOfSubstrings ( num ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( num )					    	"""							  
2 LOAD_FAST 0 ( num )					      	  sumofdigit = [ ]					     Returns a list of numbers in a list of numbers		  
4 CALL_FUNCTION 1					      	  sumofdigit.append ( int ( num [ 0 ] ) )		    								  
6 STORE_FAST 1 ( n )					      	  res = sumofdigit [ 0 ]				     Returns a list of numbers in the sumofdigit number of sumofd 
							      	  for i in range ( 1 , n ) :				     """							  
3 8 BUILD_LIST 0					      	      numi = int ( num [ i ] )				    	if num is not None :					  
10 STORE_FAST 2 ( sumofdigit )				      	      sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigi 	    return num % 2					  
							      	      res += sumofdigit [ i ]				    	return num % 2						  
4 12 LOAD_FAST 2 ( sumofdigit )				      	  return res						    								  
14 LOAD_METHOD 1 ( append )				      								    								  
16 LOAD_GLOBAL 2 ( int )				      								    								  
18 LOAD_FAST 0 ( num )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 CALL_METHOD 1					      								    								  
28 POP_TOP						      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( sumofdigit )				      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 STORE_FAST 3 ( res )					      								    								  
							      								    								  
6 38 SETUP_LOOP 76 ( to 116 )				      								    								  
40 LOAD_GLOBAL 3 ( range )				      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 62 ( to 114 )				      								    								  
52 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 54 LOAD_GLOBAL 2 ( int )				      								    								  
56 LOAD_FAST 0 ( num )					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 STORE_FAST 5 ( numi )				      								    								  
							      								    								  
8 66 LOAD_FAST 2 ( sumofdigit )				      								    								  
68 LOAD_METHOD 1 ( append )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 5 ( numi )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 LOAD_CONST 3 ( 10 )					      								    								  
82 LOAD_FAST 2 ( sumofdigit )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 BINARY_ADD						      								    								  
96 CALL_METHOD 1					      								    								  
98 POP_TOP						      								    								  
							      								    								  
9 100 LOAD_FAST 3 ( res )				      								    								  
102 LOAD_FAST 2 ( sumofdigit )				      								    								  
104 LOAD_FAST 4 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 3 ( res )				      								    								  
112 JUMP_ABSOLUTE 50					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
10 >> 116 LOAD_FAST 3 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T
--							      --							    --								  --
Disassembly of <code object maxDifference at 0x7fbac<<unk>> d def maxDifference ( arr , N , k ) :			    def maxDifference ( arr , N = 0 , max_difference = 1 , max_di script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  S = 0							    	"""							  
2 STORE_FAST 3 ( S )					      	  S1 = 0						     Return a list of values of values to the given array	  
							      	  max_difference = 0					     of values to be converted to the given array of values	  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( N ) :				     of values to the given array of values to the given array of 
6 STORE_FAST 4 ( S1 )					      	      S += arr [ i ]					     of values are returned.					  
							      	  arr.sort ( reverse = True )				     """							  
4 8 LOAD_CONST 1 ( 0 )					      	  M = max ( k , N - k )					    	for i in range ( N ) :					  
10 STORE_FAST 5 ( max_difference )			      	  for i in range ( M ) :				    	    if i < 0 :						  
							      	      S1 += arr [ i ]					    		return i					  
5 12 SETUP_LOOP 28 ( to 42 )				      	  max_difference = S1 - ( S - S1 )			    	return arr						  
14 LOAD_GLOBAL 0 ( range )				      	  return max_difference					    								  
16 LOAD_FAST 1 ( N )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 16 ( to 40 )				      								    								  
24 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( S )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 6 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 3 ( S )					      								    								  
38 JUMP_ABSOLUTE 22					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_ATTR 1 ( sort )					      								    								  
46 LOAD_CONST 2 ( True )				      								    								  
48 LOAD_CONST 3 ( ( 'reverse' , ) )			      								    								  
50 CALL_FUNCTION_KW 1					      								    								  
52 POP_TOP						      								    								  
							      								    								  
8 54 LOAD_GLOBAL 2 ( max )				      								    								  
56 LOAD_FAST 2 ( k )					      								    								  
58 LOAD_FAST 1 ( N )					      								    								  
60 LOAD_FAST 2 ( k )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 STORE_FAST 7 ( M )					      								    								  
							      								    								  
9 68 SETUP_LOOP 28 ( to 98 )				      								    								  
70 LOAD_GLOBAL 0 ( range )				      								    								  
72 LOAD_FAST 7 ( M )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 16 ( to 96 )				      								    								  
80 STORE_FAST 6 ( i )					      								    								  
							      								    								  
10 82 LOAD_FAST 4 ( S1 )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 6 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 INPLACE_ADD						      								    								  
92 STORE_FAST 4 ( S1 )					      								    								  
94 JUMP_ABSOLUTE 78					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
11 >> 98 LOAD_FAST 4 ( S1 )				      								    								  
100 LOAD_FAST 3 ( S )					      								    								  
102 LOAD_FAST 4 ( S1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 5 ( max_difference )			      								    								  
							      								    								  
12 110 LOAD_FAST 5 ( max_difference )			      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		      FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		    FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		  FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS
--							      --							    --								  --
Disassembly of <code object minDist at 0x7fbac0e89d20, file " def minDist ( arr , n , x , y ) :				    def minDist ( arr , n , min_dist = 99999999 , min_dist = 9999 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 99999999 )				      	  min_dist = 99999999					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 4 ( min_dist )				      	  for i in range ( n ) :				    								  /FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS.py"
							      	      for j in range ( i + 1 , n ) :			    								  , line 28	if __name__ == '__main__':	^ Sy
3 4 SETUP_LOOP 118 ( to 124 )				      		  if ( x == arr [ i ] and y == arr [ j ] or y == ar 								  ntaxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      		      min_dist = abs ( i - j )			    								  
8 LOAD_FAST 1 ( n )					      	      return min_dist					    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
14 FOR_ITER 106 ( to 122 )				      								    								  
16 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 98 ( to 118 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 5 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 80 ( to 116 )				      								    								  
36 STORE_FAST 6 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 2 ( x )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 62					      								    								  
50 LOAD_FAST 3 ( y )					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 6 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_TRUE 86					      								    								  
>> 62 LOAD_FAST 3 ( y )					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 34					      								    								  
74 LOAD_FAST 2 ( x )					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 6 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 COMPARE_OP 2 ( == )					      								    								  
84 POP_JUMP_IF_FALSE 34					      								    								  
>> 86 LOAD_FAST 4 ( min_dist )				      								    								  
88 LOAD_GLOBAL 1 ( abs )				      								    								  
90 LOAD_FAST 5 ( i )					      								    								  
92 LOAD_FAST 6 ( j )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 34				      								    								  
							      								    								  
6 102 LOAD_GLOBAL 1 ( abs )				      								    								  
104 LOAD_FAST 5 ( i )					      								    								  
106 LOAD_FAST 6 ( j )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 STORE_FAST 4 ( min_dist )				      								    								  
114 JUMP_ABSOLUTE 34					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
7 >> 118 LOAD_FAST 4 ( min_dist )			      								    								  
120 RETURN_VALUE					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI FIND_INDEX_0_REPLACED_1_GET_LONGEST_CONTINUOUS_SEQUENCE_1S_BI
--							      --							    --								  --
Disassembly of <code object maxOnesIndex at 0x7fbac<<unk>> de def maxOnesIndex ( arr , n ) :				    def maxOnesIndex ( arr , n , max_count = 1 ) :		  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  max_count = 0						    	"""							  
2 STORE_FAST 2 ( max_count )				      	  max_index = 0						     Return the number of the range of the range of range numbers 
							      	  prev_zero = - 1					     """							  
3 4 LOAD_CONST 1 ( 0 )					      	  prev_prev_zero = - 1					    	max_index = 0						  
6 STORE_FAST 3 ( max_index )				      	  for curr in range ( n ) :				    	while n < max_index :					  
							      	      if ( arr [ curr ] == 0 ) :			    	    max_index = 0					  
4 8 LOAD_CONST 2 ( - 1 )				      		  if ( curr - prev_prev_zero > max_count ) :	    	    while n < max_index :				  
10 STORE_FAST 4 ( prev_zero )				      		      max_count = curr - prev_prev_zero		    		max_index = 0					  
							      		      max_index = prev_zero			    		max_index = 0					  
5 12 LOAD_CONST 2 ( - 1 )				      		  prev_prev_zero = prev_zero			    		max_index = max_index				  
14 STORE_FAST 5 ( prev_prev_zero )			      		  prev_zero = curr				    		max_index = max_index				  
							      	  if ( n - prev_prev_zero > max_count ) :		    		max_index = max_index				  
6 16 SETUP_LOOP 60 ( to 78 )				      	      max_index = prev_zero				    		max_index = max_index				  
18 LOAD_GLOBAL 0 ( range )				      	  return max_index					    		max_index = max_index				  
20 LOAD_FAST 1 ( n )					      								    		max_index = max_index				  
22 CALL_FUNCTION 1					      								    		max_index = max_index				  
24 GET_ITER						      								    		max_index = max_index				  
>> 26 FOR_ITER 48 ( to 76 )				      								    		max_index = max_index				  
28 STORE_FAST 6 ( curr )				      								    		max_index = max_index				  
							      								    		max_index = max_index				  
7 30 LOAD_FAST 0 ( arr )				      								    		max_index = max_index				  
32 LOAD_FAST 6 ( curr )					      								    		max_index = max_index				  
34 BINARY_SUBSCR					      								    		max_index = max_index				  
36 LOAD_CONST 1 ( 0 )					      								    		max_index = max_index				  
38 COMPARE_OP 2 ( == )					      								    		max_index = max_index				  
40 POP_JUMP_IF_FALSE 26					      								    		max_index = max_index				  
							      								    		max_index = max_index				  
8 42 LOAD_FAST 6 ( curr )				      								    		max_index = max_index				  
44 LOAD_FAST 5 ( prev_prev_zero )			      								    		max_index = max_index				  
46 BINARY_SUBTRACT					      								    		max_index = max_index				  
48 LOAD_FAST 2 ( max_count )				      								    		max_index = max_index				  
50 COMPARE_OP 4 ( > )					      								    		max_index = max_index				  
52 POP_JUMP_IF_FALSE 66					      								    		max_index = max_index				  
							      								    		max_index = max_index				  
9 54 LOAD_FAST 6 ( curr )				      								    		max_index = max_index				  
56 LOAD_FAST 5 ( prev_prev_zero )			      								    		max_index = max_index				  
58 BINARY_SUBTRACT					      								    		max_index = max_index				  
60 STORE_FAST 2 ( max_count )				      								    		max_index = max_index				  
							      								    		max_index = max_index				  
10 62 LOAD_FAST 4 ( prev_zero )				      								    		max_index = max_index				  
64 STORE_FAST 3 ( max_index )				      								    		max_index = max_index				  
							      								    		max_index = max_index				  
11 >> 66 LOAD_FAST 4 ( prev_zero )			      								    		max_index = max_index				  
68 STORE_FAST 5 ( prev_prev_zero )			      								    		max_index = max_index				  
							      								    		max_index = max_index				  
12 70 LOAD_FAST 6 ( curr )				      								    		max_index = max_index				  
72 STORE_FAST 4 ( prev_zero )				      								    		max_index = max_index				  
74 JUMP_ABSOLUTE 26					      								    		max_index = max_index				  
>> 76 POP_BLOCK						      								    		max_index = max_index				  
							      								    		max_index = max_index				  
13 >> 78 LOAD_FAST 1 ( n )				      								    		max_index = max_index				  
80 LOAD_FAST 5 ( prev_prev_zero )			      								    		max_index = max_index				  
82 BINARY_SUBTRACT					      								    		max_index = max_index				  
84 LOAD_FAST 2 ( max_count )				      								    		max_index = max_index				  
86 COMPARE_OP 4 ( > )					      								    		max_index = max_index				  
88 POP_JUMP_IF_FALSE 94					      								    		max_index = max_index				  
							      								    		max_index = max_index				  
14 90 LOAD_FAST 4 ( prev_zero )				      								    		max_index = max_index				  
92 STORE_FAST 3 ( max_index )				      								    		max_index = max_index				  
							      								    		max_index = max_index				  
15 >> 94 LOAD_FAST 3 ( max_index )			      								    		max_index = max_index				  
96 RETURN_VALUE NEW_LINE				      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
							      								    		max_index = max_index				  
-							      -								    		-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_INSERTION_POINT					      LOWER_INSERTION_POINT					    LOWER_INSERTION_POINT					  LOWER_INSERTION_POINT
--							      --							    --								  --
Disassembly of <code object LowerInsertionPoint at 0x7fbac<<u def LowerInsertionPoint ( arr , n , X ) :			    def LowerInsertionPoint ( arr , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( X )					      	  if ( X < arr [ 0 ] ) :				    	if n < 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( arr )					      	      return 0 ;					    	    return 0						  /LOWER_INSERTION_POINT.py", line 32	  def f_fill
4 LOAD_CONST 1 ( 0 )					      	  elif ( X > arr [ n - 1 ] ) :				    	elif n < 0 :						  ed ( arr , n , n ) :	   ^ SyntaxError: duplicate
6 BINARY_SUBSCR						      	      return n						    	    return 0						  argument 'n' in function definition
8 COMPARE_OP 0 ( < )					      	  lowerPnt = 0						    	elif n < 0 :						  
10 POP_JUMP_IF_FALSE 16					      	  i = 1							    	    return 0						  
							      	  while ( i < n and arr [ i ] < X ) :			    	elif n < 0 :						  
3 12 LOAD_CONST 1 ( 0 )					      	      lowerPnt = i					    	    return 0						  
14 RETURN_VALUE						      	      i = i * 2						    	elif n < 0 :						  
							      	  while ( lowerPnt < n and arr [ lowerPnt ] < X ) :	    	    return 0						  
4 >> 16 LOAD_FAST 2 ( X )				      	      lowerPnt += 1					    	elif n < 0 :						  
18 LOAD_FAST 0 ( arr )					      	  return lowerPnt					    	    return 0						  
20 LOAD_FAST 1 ( n )					      								    	elif n < 0 :						  
22 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
24 BINARY_SUBTRACT					      								    	elif n < 0 :						  
26 BINARY_SUBSCR					      								    	    return 0						  
28 COMPARE_OP 4 ( > )					      								    	elif n < 0 :						  
30 POP_JUMP_IF_FALSE 36					      								    	    return 0						  
							      								    	elif n < 0 :						  
5 32 LOAD_FAST 1 ( n )					      								    	    return 0						  
34 RETURN_VALUE						      								    	elif n < 0 :						  
							      								    	    return 0						  
6 >> 36 LOAD_CONST 1 ( 0 )				      								    	elif n < 0 :						  
38 STORE_FAST 3 ( lowerPnt )				      								    	    return 0						  
							      								    	elif n < 0 :						  
7 40 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
42 STORE_FAST 4 ( i )					      								    	elif n < 0 :						  
							      								    	    return 0						  
8 44 SETUP_LOOP 36 ( to 82 )				      								    	elif n < 0 :						  
>> 46 LOAD_FAST 4 ( i )					      								    	    return 0						  
48 LOAD_FAST 1 ( n )					      								    	elif n < 0 :						  
50 COMPARE_OP 0 ( < )					      								    	    return 0						  
52 POP_JUMP_IF_FALSE 80					      								    	elif n < 0 :						  
54 LOAD_FAST 0 ( arr )					      								    	    return 0						  
56 LOAD_FAST 4 ( i )					      								    	elif n < 0 :						  
58 BINARY_SUBSCR					      								    	    return 0						  
60 LOAD_FAST 2 ( X )					      								    	elif n < 0 :						  
62 COMPARE_OP 0 ( < )					      								    	    return 0						  
64 POP_JUMP_IF_FALSE 80					      								    	elif n < 0 :						  
							      								    	    return 0						  
9 66 LOAD_FAST 4 ( i )					      								    	elif n < 0 :						  
68 STORE_FAST 3 ( lowerPnt )				      								    	    return 0						  
							      								    	elif n < 0 :						  
10 70 LOAD_FAST 4 ( i )					      								    	    return 0						  
72 LOAD_CONST 3 ( 2 )					      								    	elif n < 0 :						  
74 BINARY_MULTIPLY					      								    	    return 0						  
76 STORE_FAST 4 ( i )					      								    	elif n < 0 :						  
78 JUMP_ABSOLUTE 46					      								    	    return 0						  
>> 80 POP_BLOCK						      								    	elif n < 0 :						  
							      								    	    return 0						  
11 >> 82 SETUP_LOOP 32 ( to 116 )			      								    	elif n < 0 :						  
>> 84 LOAD_FAST 3 ( lowerPnt )				      								    	    return 0						  
86 LOAD_FAST 1 ( n )					      								    	elif n < 0 :						  
88 COMPARE_OP 0 ( < )					      								    	    return 0						  
90 POP_JUMP_IF_FALSE 114				      								    	elif n < 0 :						  
92 LOAD_FAST 0 ( arr )					      								    	    return 0						  
94 LOAD_FAST 3 ( lowerPnt )				      								    	elif n < 0 :						  
96 BINARY_SUBSCR					      								    	    return 0						  
98 LOAD_FAST 2 ( X )					      								    	elif n < 0 :						  
100 COMPARE_OP 0 ( < )					      								    	    return 0						  
102 POP_JUMP_IF_FALSE 114				      								    	elif n < 0 :						  
							      								    	    return 0						  
12 104 LOAD_FAST 3 ( lowerPnt )				      								    	elif n < 0 :						  
106 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
108 INPLACE_ADD						      								    	elif n < 0 :						  
110 STORE_FAST 3 ( lowerPnt )				      								    	    return 0						  
112 JUMP_ABSOLUTE 84					      								    	elif n < 0 :						  
>> 114 POP_BLOCK					      								    	    return 0						  
							      								    	elif n < 0 :						  
13 >> 116 LOAD_FAST 3 ( lowerPnt )			      								    	    return 0						  
118 RETURN_VALUE NEW_LINE				      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
							      								    	elif n < 0 :						  
							      								    	    return 0						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES	  CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES
--							      --							    --								  --
Disassembly of <code object isRotated at 0x7fbac0e89d20, file def isRotated ( str1 , str2 ) :				    def isRotated ( str1 , strstrstrstreeeeeeeeeeeeeeeeeeeeeeeeee error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  if ( len ( str1 ) != len ( str2 ) ) :			    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( str1 )					      	      return False					    								  /CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING
4 CALL_FUNCTION 1					      	  clock_rot = ""					    								  _2_PLACES.py", line 30     if __name__ == '__main_
6 LOAD_GLOBAL 0 ( len )					      	  anticlock_rot = ""					    								  _':	   ^ SyntaxError: invalid syntax
8 LOAD_FAST 1 ( str2 )					      	  l = len ( str2 )					    								  
10 CALL_FUNCTION 1					      	  anticlock_rot = ( anticlock_rot + str2 [ l - 2 : ] + str2 								  
12 COMPARE_OP 3 ( != )					      	  clock_rot = clock_rot + str2 [ 2 : ] + str2 [ 0 : 2 ]	    								  
14 POP_JUMP_IF_FALSE 20					      	  return ( str1 == clock_rot or str1 == anticlock_rot )	    								  
							      								    								  
3 16 LOAD_CONST 1 ( False )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 2 ( '' )				      								    								  
22 STORE_FAST 2 ( clock_rot )				      								    								  
							      								    								  
5 24 LOAD_CONST 2 ( '' )				      								    								  
26 STORE_FAST 3 ( anticlock_rot )			      								    								  
							      								    								  
6 28 LOAD_GLOBAL 0 ( len )				      								    								  
30 LOAD_FAST 1 ( str2 )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 STORE_FAST 4 ( l )					      								    								  
							      								    								  
7 36 LOAD_FAST 3 ( anticlock_rot )			      								    								  
38 LOAD_FAST 1 ( str2 )					      								    								  
40 LOAD_FAST 4 ( l )					      								    								  
42 LOAD_CONST 3 ( 2 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 LOAD_CONST 0 ( None )				      								    								  
48 BUILD_SLICE 2					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( str2 )					      								    								  
56 LOAD_CONST 4 ( 0 )					      								    								  
58 LOAD_FAST 4 ( l )					      								    								  
60 LOAD_CONST 3 ( 2 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BUILD_SLICE 2					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 3 ( anticlock_rot )			      								    								  
							      								    								  
8 72 LOAD_FAST 2 ( clock_rot )				      								    								  
74 LOAD_FAST 1 ( str2 )					      								    								  
76 LOAD_CONST 3 ( 2 )					      								    								  
78 LOAD_CONST 0 ( None )				      								    								  
80 BUILD_SLICE 2					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 1 ( str2 )					      								    								  
88 LOAD_CONST 4 ( 0 )					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 BUILD_SLICE 2					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 STORE_FAST 2 ( clock_rot )				      								    								  
							      								    								  
9 100 LOAD_FAST 0 ( str1 )				      								    								  
102 LOAD_FAST 2 ( clock_rot )				      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 JUMP_IF_TRUE_OR_POP 114				      								    								  
108 LOAD_FAST 0 ( str1 )				      								    								  
110 LOAD_FAST 3 ( anticlock_rot )			      								    								  
112 COMPARE_OP 2 ( == )					      								    								  
>> 114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SORT_STRING_DESCENDING_ORDER			      PROGRAM_SORT_STRING_DESCENDING_ORDER			    PROGRAM_SORT_STRING_DESCENDING_ORDER			  PROGRAM_SORT_STRING_DESCENDING_ORDER
--							      --							    --								  --
Disassembly of <code object sortString at 0x7fbac0e8bc90, fil def sortString ( str ) :					    def sortString ( fileCount , charCount , charCount , charCoun script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  charCount = [ 0 ] * MAX_CHAR ;			    								  
2 BUILD_LIST 1						      	  for i in range ( len ( str ) ) :			    								  
4 LOAD_GLOBAL 0 ( MAX_CHAR )				      	      charCount [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1 ;  								  
6 BINARY_MULTIPLY					      	  for i in range ( MAX_CHAR - 1 , - 1 , - 1 ) :		    								  
8 STORE_FAST 1 ( charCount )				      	      for j in range ( charCount [ i ] ) :		    								  
							      		  print ( chr ( 97 + i ) , end = "" ) ;		    								  
3 10 SETUP_LOOP 52 ( to 64 )				      								    								  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_GLOBAL 2 ( len )				      								    								  
16 LOAD_FAST 0 ( str )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 1 ( charCount )				      								    								  
30 LOAD_GLOBAL 3 ( ord )				      								    								  
32 LOAD_FAST 0 ( str )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 LOAD_GLOBAL 3 ( ord )				      								    								  
42 LOAD_CONST 2 ( 'a' )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 DUP_TOP_TWO						      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_CONST 3 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 ROT_THREE						      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
5 >> 64 SETUP_LOOP 66 ( to 132 )			      								    								  
66 LOAD_GLOBAL 1 ( range )				      								    								  
68 LOAD_GLOBAL 0 ( MAX_CHAR )				      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_CONST 4 ( - 1 )					      								    								  
76 LOAD_CONST 4 ( - 1 )					      								    								  
78 CALL_FUNCTION 3					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 46 ( to 130 )				      								    								  
84 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 86 SETUP_LOOP 40 ( to 128 )				      								    								  
88 LOAD_GLOBAL 1 ( range )				      								    								  
90 LOAD_FAST 1 ( charCount )				      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 24 ( to 126 )				      								    								  
102 STORE_FAST 3 ( j )					      								    								  
							      								    								  
7 104 LOAD_GLOBAL 4 ( print )				      								    								  
106 LOAD_GLOBAL 5 ( chr )				      								    								  
108 LOAD_CONST 5 ( 97 )					      								    								  
110 LOAD_FAST 2 ( i )					      								    								  
112 BINARY_ADD						      								    								  
114 CALL_FUNCTION 1					      								    								  
116 LOAD_CONST 6 ( '' )					      								    								  
118 LOAD_CONST 7 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 POP_TOP						      								    								  
124 JUMP_ABSOLUTE 100					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 JUMP_ABSOLUTE 82					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF
--							      --							    --								  --
Disassembly of <code object isMultipleOf3 at 0x7fbac0e8bc90,  def isMultipleOf3 ( n ) :					    def isMultipleOf3 ( n ) :					  failure : #Results: 8, 10
2 0 LOAD_CONST 1 ( 0 )					      	  odd_count = 0						    	"""							  
2 STORE_FAST 1 ( odd_count )				      	  even_count = 0					     Returns the list of the offset of the offset of the offset o 
							      	  if ( n < 0 ) :					     of the offset of the offset of the offset in the offset	  
3 4 LOAD_CONST 1 ( 0 )					      	      n = - n						     of the offset of the offset of the offset of the offset	  
6 STORE_FAST 2 ( even_count )				      	  if ( n == 0 ) :					     of the offset of the offset of the offset in the offset	  
							      	      return 1						     offset.							  
4 8 LOAD_FAST 0 ( n )					      	  if ( n == 1 ) :					     """							  
10 LOAD_CONST 1 ( 0 )					      	      return 0						    	n = 0							  
12 COMPARE_OP 0 ( < )					      	  while ( n ) :						    	while n < 0 :						  
14 POP_JUMP_IF_FALSE 22					      	      if ( n & 1 ) :					    	    n -= 1						  
							      		  odd_count += 1				    	return n						  
5 16 LOAD_FAST 0 ( n )					      	      if ( n & 2 ) :					    								  
18 UNARY_NEGATIVE					      		  even_count += 1				    								  
20 STORE_FAST 0 ( n )					      	      n = n >> 2					    								  
							      	  return isMultipleOf3 ( abs ( odd_count - even_count ) )   								  
6 >> 22 LOAD_FAST 0 ( n )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 2 ( == )					      								    								  
28 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
7 30 LOAD_CONST 2 ( 1 )					      								    								  
32 RETURN_VALUE						      								    								  
							      								    								  
8 >> 34 LOAD_FAST 0 ( n )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
9 42 LOAD_CONST 1 ( 0 )					      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
10 >> 46 SETUP_LOOP 48 ( to 96 )			      								    								  
>> 48 LOAD_FAST 0 ( n )					      								    								  
50 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
11 52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_AND						      								    								  
58 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
12 60 LOAD_FAST 1 ( odd_count )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 1 ( odd_count )				      								    								  
							      								    								  
13 >> 68 LOAD_FAST 0 ( n )				      								    								  
70 LOAD_CONST 3 ( 2 )					      								    								  
72 BINARY_AND						      								    								  
74 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
14 76 LOAD_FAST 2 ( even_count )			      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 2 ( even_count )				      								    								  
							      								    								  
15 >> 84 LOAD_FAST 0 ( n )				      								    								  
86 LOAD_CONST 3 ( 2 )					      								    								  
88 BINARY_RSHIFT					      								    								  
90 STORE_FAST 0 ( n )					      								    								  
92 JUMP_ABSOLUTE 48					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
16 >> 96 LOAD_GLOBAL 0 ( isMultipleOf3 )		      								    								  
98 LOAD_GLOBAL 1 ( abs )				      								    								  
100 LOAD_FAST 1 ( odd_count )				      								    								  
102 LOAD_FAST 2 ( even_count )				      								    								  
104 BINARY_SUBTRACT					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY
--							      --							    --								  --
Disassembly of <code object findArea at 0x7fbac<<unk>> de40,  def findArea ( arr , n ) :				    def findArea ( arr , n , axis = 1 ) :			  failure : #Results: 2, 10
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( reverse = True )				    	if n < len ( arr ) :					  
2 LOAD_ATTR 0 ( sort )					      	  dimension = [ 0 , 0 ]					    	    return arr [ n ]					  
4 LOAD_CONST 1 ( True )					      	  i = 0							    	else :							  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	  j = 0							    	    return arr [ n ]					  
8 CALL_FUNCTION_KW 1					      	  while ( i < n - 1 and j < 2 ) :			    								  
10 POP_TOP						      	      if ( arr [ i ] == arr [ i + 1 ] ) :		    								  
							      		  dimension [ j ] = arr [ i ]			    								  
3 12 LOAD_CONST 3 ( 0 )					      		  j += 1					    								  
14 LOAD_CONST 3 ( 0 )					      		  i += 1					    								  
16 BUILD_LIST 2						      	      i += 1						    								  
18 STORE_FAST 2 ( dimension )				      	  return ( dimension [ 0 ] * dimension [ 1 ] )		    								  
							      								    								  
4 20 LOAD_CONST 3 ( 0 )					      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 24 LOAD_CONST 3 ( 0 )					      								    								  
26 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 28 SETUP_LOOP 80 ( to 110 )				      								    								  
>> 30 LOAD_FAST 3 ( i )					      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 LOAD_CONST 4 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 108				      								    								  
42 LOAD_FAST 4 ( j )					      								    								  
44 LOAD_CONST 5 ( 2 )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 LOAD_CONST 4 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
8 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 2 ( dimension )				      								    								  
78 LOAD_FAST 4 ( j )					      								    								  
80 STORE_SUBSCR						      								    								  
							      								    								  
9 82 LOAD_FAST 4 ( j )					      								    								  
84 LOAD_CONST 4 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 4 ( j )					      								    								  
							      								    								  
10 90 LOAD_FAST 3 ( i )					      								    								  
92 LOAD_CONST 4 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 3 ( i )					      								    								  
							      								    								  
11 >> 98 LOAD_FAST 3 ( i )				      								    								  
100 LOAD_CONST 4 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 3 ( i )					      								    								  
106 JUMP_ABSOLUTE 30					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
12 >> 110 LOAD_FAST 2 ( dimension )			      								    								  
112 LOAD_CONST 3 ( 0 )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 2 ( dimension )				      								    								  
118 LOAD_CONST 4 ( 1 )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			      FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			    FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE				  FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE
--							      --							    --								  --
Disassembly of <code object Dragon_Curve_Sequence at 0x7fbac< def Dragon_Curve_Sequence ( n ) :				    def Dragon_Curve_Sequence ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( '1' )				      	  s = "1"						    	return '1' % '1'					  
2 STORE_FAST 1 ( s )					      	  for i in range ( 2 , n + 1 ) :			    								  
							      	      temp = "1"					    								  
3 4 SETUP_LOOP 110 ( to 116 )				      	      prev = '1'					    								  
6 LOAD_GLOBAL 0 ( range )				      	      zero = '0'					    								  
8 LOAD_CONST 2 ( 2 )					      	      one = '1'						    								  
10 LOAD_FAST 0 ( n )					      	      for j in range ( len ( s ) ) :			    								  
12 LOAD_CONST 3 ( 1 )					      		  temp += s [ j ]				    								  
14 BINARY_ADD						      		  if ( prev == '0' ) :				    								  
16 CALL_FUNCTION 2					      		      temp += one				    								  
18 GET_ITER						      		      prev = one				    								  
>> 20 FOR_ITER 92 ( to 114 )				      		  else :					    								  
22 STORE_FAST 2 ( i )					      		      temp += zero				    								  
							      		      prev = zero				    								  
4 24 LOAD_CONST 1 ( '1' )				      	      s = temp						    								  
26 STORE_FAST 3 ( temp )				      	  return s						    								  
							      								    								  
5 28 LOAD_CONST 1 ( '1' )				      								    								  
30 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
6 32 LOAD_CONST 4 ( '0' )				      								    								  
34 STORE_FAST 5 ( zero )				      								    								  
							      								    								  
7 36 LOAD_CONST 1 ( '1' )				      								    								  
38 STORE_FAST 6 ( one )					      								    								  
							      								    								  
8 40 SETUP_LOOP 66 ( to 108 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_GLOBAL 1 ( len )				      								    								  
46 LOAD_FAST 1 ( s )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 50 ( to 106 )				      								    								  
56 STORE_FAST 7 ( j )					      								    								  
							      								    								  
9 58 LOAD_FAST 3 ( temp )				      								    								  
60 LOAD_FAST 1 ( s )					      								    								  
62 LOAD_FAST 7 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
10 70 LOAD_FAST 4 ( prev )				      								    								  
72 LOAD_CONST 4 ( '0' )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
11 78 LOAD_FAST 3 ( temp )				      								    								  
80 LOAD_FAST 6 ( one )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
12 86 LOAD_FAST 6 ( one )				      								    								  
88 STORE_FAST 4 ( prev )				      								    								  
90 JUMP_ABSOLUTE 54					      								    								  
							      								    								  
14 >> 92 LOAD_FAST 3 ( temp )				      								    								  
94 LOAD_FAST 5 ( zero )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
15 100 LOAD_FAST 5 ( zero )				      								    								  
102 STORE_FAST 4 ( prev )				      								    								  
104 JUMP_ABSOLUTE 54					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
16 >> 108 LOAD_FAST 3 ( temp )				      								    								  
110 STORE_FAST 1 ( s )					      								    								  
112 JUMP_ABSOLUTE 20					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
17 >> 116 LOAD_FAST 1 ( s )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DISTANCE_TWO_POINTS_EARTH			      PROGRAM_DISTANCE_TWO_POINTS_EARTH				    PROGRAM_DISTANCE_TWO_POINTS_EARTH				  PROGRAM_DISTANCE_TWO_POINTS_EARTH
--							      --							    --								  --
Disassembly of <code object distance at 0x7fbac<<unk>> de40,  def distance ( lat1 , lat2 , lon1 , lon2 ) :		    def distance ( lonacacNfsdCollector , lon1 , lon1 , lon1 , lo script_not_found : None
2 0 LOAD_GLOBAL 0 ( radians )				      	  lon1 = radians ( lon1 )				    								  
2 LOAD_FAST 2 ( lon1 )					      	  lon2 = radians ( lon2 )				    								  
4 CALL_FUNCTION 1					      	  lat1 = radians ( lat1 )				    								  
6 STORE_FAST 2 ( lon1 )					      	  lat2 = radians ( lat2 )				    								  
							      	  dlon = lon2 - lon1					    								  
3 8 LOAD_GLOBAL 0 ( radians )				      	  dlat = lat2 - lat1					    								  
10 LOAD_FAST 3 ( lon2 )					      	  a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * 								  
12 CALL_FUNCTION 1					      	  c = 2 * asin ( sqrt ( a ) )				    								  
14 STORE_FAST 3 ( lon2 )				      	  r = 6371						    								  
							      	  return ( c * r )					    								  
4 16 LOAD_GLOBAL 0 ( radians )				      								    								  
18 LOAD_FAST 0 ( lat1 )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 STORE_FAST 0 ( lat1 )				      								    								  
							      								    								  
5 24 LOAD_GLOBAL 0 ( radians )				      								    								  
26 LOAD_FAST 1 ( lat2 )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 STORE_FAST 1 ( lat2 )				      								    								  
							      								    								  
6 32 LOAD_FAST 3 ( lon2 )				      								    								  
34 LOAD_FAST 2 ( lon1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 STORE_FAST 4 ( dlon )				      								    								  
							      								    								  
7 40 LOAD_FAST 1 ( lat2 )				      								    								  
42 LOAD_FAST 0 ( lat1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_FAST 5 ( dlat )				      								    								  
							      								    								  
8 48 LOAD_GLOBAL 1 ( sin )				      								    								  
50 LOAD_FAST 5 ( dlat )					      								    								  
52 LOAD_CONST 1 ( 2 )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 1 ( 2 )					      								    								  
60 BINARY_POWER						      								    								  
62 LOAD_GLOBAL 2 ( cos )				      								    								  
64 LOAD_FAST 0 ( lat1 )					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_GLOBAL 2 ( cos )				      								    								  
70 LOAD_FAST 1 ( lat2 )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_GLOBAL 1 ( sin )				      								    								  
78 LOAD_FAST 4 ( dlon )					      								    								  
80 LOAD_CONST 1 ( 2 )					      								    								  
82 BINARY_TRUE_DIVIDE					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 LOAD_CONST 1 ( 2 )					      								    								  
88 BINARY_POWER						      								    								  
90 BINARY_MULTIPLY					      								    								  
92 BINARY_ADD						      								    								  
94 STORE_FAST 6 ( a )					      								    								  
							      								    								  
9 96 LOAD_CONST 1 ( 2 )					      								    								  
98 LOAD_GLOBAL 3 ( asin )				      								    								  
100 LOAD_GLOBAL 4 ( sqrt )				      								    								  
102 LOAD_FAST 6 ( a )					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_MULTIPLY					      								    								  
110 STORE_FAST 7 ( c )					      								    								  
							      								    								  
10 112 LOAD_CONST 2 ( 6371 )				      								    								  
114 STORE_FAST 8 ( r )					      								    								  
							      								    								  
11 116 LOAD_FAST 7 ( c )				      								    								  
118 LOAD_FAST 8 ( r )					      								    								  
120 BINARY_MULTIPLY					      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7fbac<<unk>> d8a0, f def findSum ( n ) :					    def findSum ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ; temp = 0 ;					    	"""							  
2 STORE_FAST 1 ( ans )					      	  for i in range ( 1 , n + 1 ) :			     Return the number of the given n in the number of numbers	  
4 LOAD_CONST 1 ( 0 )					      	      if temp < n :					     """							  
6 STORE_FAST 2 ( temp )					      		  temp = i - 1					    	for i in range ( n ) :					  
							      		  num = 1					    	    if n < 0 :						  
3 8 SETUP_LOOP 114 ( to 124 )				      		  while temp < n :				    		return n					  
10 LOAD_GLOBAL 0 ( range )				      		      if temp + i <= n :			    	return n						  
12 LOAD_CONST 2 ( 1 )					      			  ans += i * num			    								  
14 LOAD_FAST 0 ( n )					      		      else :					    								  
16 LOAD_CONST 2 ( 1 )					      			  ans += ( n - temp ) * num		    								  
18 BINARY_ADD						      		      temp += i					    								  
20 CALL_FUNCTION 2					      		      num += 1					    								  
22 GET_ITER						      	  return ans						    								  
>> 24 FOR_ITER 96 ( to 122 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 2 ( temp )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
6 44 LOAD_CONST 2 ( 1 )					      								    								  
46 STORE_FAST 4 ( num )					      								    								  
							      								    								  
7 48 SETUP_LOOP 70 ( to 120 )				      								    								  
>> 50 LOAD_FAST 2 ( temp )				      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 COMPARE_OP 0 ( < )					      								    								  
56 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
8 58 LOAD_FAST 2 ( temp )				      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_ADD						      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 COMPARE_OP 1 ( <= )					      								    								  
68 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
9 70 LOAD_FAST 1 ( ans )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 LOAD_FAST 4 ( num )					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 1 ( ans )					      								    								  
82 JUMP_FORWARD 16 ( to 100 )				      								    								  
							      								    								  
11 >> 84 LOAD_FAST 1 ( ans )				      								    								  
86 LOAD_FAST 0 ( n )					      								    								  
88 LOAD_FAST 2 ( temp )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_FAST 4 ( num )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 1 ( ans )					      								    								  
							      								    								  
12 >> 100 LOAD_FAST 2 ( temp )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
13 108 LOAD_FAST 4 ( num )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( num )				      								    								  
116 JUMP_ABSOLUTE 50					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 24					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
14 >> 124 LOAD_FAST 1 ( ans )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTISTAGE_GRAPH_SHORTEST_PATH				      MULTISTAGE_GRAPH_SHORTEST_PATH				    MULTISTAGE_GRAPH_SHORTEST_PATH				  MULTISTAGE_GRAPH_SHORTEST_PATH
--							      --							    --								  --
Disassembly of <code object shortestDist at 0x7fbac0e8bc90, f def shortestDist ( graph ) :				    def shortestDist ( graph , dist , dist ) :			  script_not_found : None
3 0 LOAD_CONST 1 ( 0 )					      	  global INF						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 BUILD_LIST 1						      	  dist = [ 0 ] * N					    								  
4 LOAD_GLOBAL 0 ( N )					      	  dist [ N - 1 ] = 0					    								  
6 BINARY_MULTIPLY					      	  for i in range ( N - 2 , - 1 , - 1 ) :		    								  
8 STORE_FAST 1 ( dist )					      	      dist [ i ] = INF					    								  
							      	      for j in range ( N ) :				    								  
4 10 LOAD_CONST 1 ( 0 )					      		  if graph [ i ] [ j ] == INF :			    								  
12 LOAD_FAST 1 ( dist )					      		      continue					    								  
14 LOAD_GLOBAL 0 ( N )					      		  dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] 								  
16 LOAD_CONST 2 ( 1 )					      	  return dist [ 0 ]					    								  
18 BINARY_SUBTRACT					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
5 22 SETUP_LOOP 102 ( to 126 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_GLOBAL 0 ( N )					      								    								  
28 LOAD_CONST 3 ( 2 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_CONST 4 ( - 1 )					      								    								  
34 LOAD_CONST 4 ( - 1 )					      								    								  
36 CALL_FUNCTION 3					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 82 ( to 124 )				      								    								  
42 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 2 ( INF )				      								    								  
46 LOAD_FAST 1 ( dist )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
							      								    								  
7 52 SETUP_LOOP 68 ( to 122 )				      								    								  
54 LOAD_GLOBAL 1 ( range )				      								    								  
56 LOAD_GLOBAL 0 ( N )					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 56 ( to 120 )				      								    								  
64 STORE_FAST 3 ( j )					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( graph )				      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 3 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_GLOBAL 2 ( INF )				      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
9 82 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
10 >> 84 LOAD_GLOBAL 3 ( min )				      								    								  
86 LOAD_FAST 1 ( dist )					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 0 ( graph )				      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 3 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 1 ( dist )				      								    								  
104 LOAD_FAST 3 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 CALL_FUNCTION 2					      								    								  
112 LOAD_FAST 1 ( dist )				      								    								  
114 LOAD_FAST 2 ( i )					      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 62					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 40					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
11 >> 126 LOAD_FAST 1 ( dist )				      								    								  
128 LOAD_CONST 1 ( 0 )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL
--							      --							    --								  --
Disassembly of <code object findMinimumAngle at 0x7fbac0e89d2 def findMinimumAngle ( arr , n ) :			    def findChangeAngle ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  l = 0							    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( l )					      	  _sum = 0						    								  /PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS
							      	  ans = 360						    								  _GIVEN_CIRCLE.py", line 52	 print("#Results: %i
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    								  , %i" % (n_success, len(param)))
6 STORE_FAST 3 ( _sum )					      	      _sum += arr [ i ]					    								  				       ^ SyntaxError
							      	      while _sum >= 180 :				    								  : EOF while scanning triple-quoted string literal
4 8 LOAD_CONST 2 ( 360 )				      		  ans = min ( ans , 2 * abs ( 180 - _sum ) )	    								  
10 STORE_FAST 4 ( ans )					      		  _sum -= arr [ l ]				    								  
							      		  l += 1					    								  
5 12 SETUP_LOOP 106 ( to 120 )				      	      ans = min ( ans , 2 * abs ( 180 - _sum ) )	    								  
14 LOAD_GLOBAL 0 ( range )				      	  return ans						    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 94 ( to 118 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( _sum )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 INPLACE_ADD						      								    								  
36 STORE_FAST 3 ( _sum )				      								    								  
							      								    								  
7 38 SETUP_LOOP 54 ( to 94 )				      								    								  
>> 40 LOAD_FAST 3 ( _sum )				      								    								  
42 LOAD_CONST 3 ( 180 )					      								    								  
44 COMPARE_OP 5 ( >= )					      								    								  
46 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
8 48 LOAD_GLOBAL 1 ( min )				      								    								  
50 LOAD_FAST 4 ( ans )					      								    								  
52 LOAD_CONST 4 ( 2 )					      								    								  
54 LOAD_GLOBAL 2 ( abs )				      								    								  
56 LOAD_CONST 3 ( 180 )					      								    								  
58 LOAD_FAST 3 ( _sum )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 CALL_FUNCTION 2					      								    								  
68 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
9 70 LOAD_FAST 3 ( _sum )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 2 ( l )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 INPLACE_SUBTRACT					      								    								  
80 STORE_FAST 3 ( _sum )				      								    								  
							      								    								  
10 82 LOAD_FAST 2 ( l )					      								    								  
84 LOAD_CONST 5 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 2 ( l )					      								    								  
90 JUMP_ABSOLUTE 40					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 LOAD_GLOBAL 1 ( min )				      								    								  
96 LOAD_FAST 4 ( ans )					      								    								  
98 LOAD_CONST 4 ( 2 )					      								    								  
100 LOAD_GLOBAL 2 ( abs )				      								    								  
102 LOAD_CONST 3 ( 180 )				      								    								  
104 LOAD_FAST 3 ( _sum )				      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 BINARY_MULTIPLY					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 STORE_FAST 4 ( ans )				      								    								  
116 JUMP_ABSOLUTE 22					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
12 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING	      MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		    MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		  MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING
--							      --							    --								  --
Disassembly of <code object maxDP at 0x7fbac<<unk>> de40, fil def maxDP ( n ) :						    def maxDP ( f , res , res , res , res , res , res , res , res error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( list )				      	  res = list ( )					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 CALL_FUNCTION 0					      	  res.append ( 0 )					    								  /MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING.
4 STORE_FAST 1 ( res )					      	  res.append ( 1 )					    								  py", line 28	   def f_filled ( f , res , res , re
							      	  i = 2							    								  s , res , res , res , res , res , res , res , res
3 6 LOAD_FAST 1 ( res )					      	  while i < n + 1 :					    								  , res , res , res , res , res , res , res , res ,
8 LOAD_METHOD 1 ( append )				      	      res.append ( max ( i , ( res [ int ( i / 2 ) ] + res  								  res , res , res , res , res , res , res , res , re
10 LOAD_CONST 1 ( 0 )					      	      i = i + 1						    								  s , res , res , res , res , res , res , res , res
12 CALL_METHOD 1					      	  return res [ n ]					    								  , res , res , res , res , res , res , res , res ,
14 POP_TOP						      								    								  res , res , res , res , res , res , res , res , re
							      								    								  s , res , res , res , res , res , res , res , res
4 16 LOAD_FAST 1 ( res )				      								    								  , res , res , res , res , res , res , res , res ,
18 LOAD_METHOD 1 ( append )				      								    								  res , res , res , res , res , res , res , res , re
20 LOAD_CONST 2 ( 1 )					      								    								  s , res , res , res , res , res , res , res , res
22 CALL_METHOD 1					      								    								  , res , res , res , res , res , res , res , res ,
24 POP_TOP						      								    								  res , res , res , res , res , res , res , res res
							      								    								  , res , res , res , res , res , res , res , res ,
5 26 LOAD_CONST 3 ( 2 )					      								    								  res , res , res , res , res , res , res , res , re
28 STORE_FAST 2 ( i )					      								    								  s , res , res , res , res , res , res , res , res
							      								    								  , res , res , res , res , res , res , res , res ,
6 30 SETUP_LOOP 100 ( to 132 )				      								    								  res , res , res , res , res , res , res , res , re
>> 32 LOAD_FAST 2 ( i )					      								    								  s , res , res , res , res , res , res , res , res
34 LOAD_FAST 0 ( n )					      								    								  , res , res , res , res , res , res , res , res ,
36 LOAD_CONST 2 ( 1 )					      								    								  res , res , res , res res , res , res , res , res
38 BINARY_ADD						      								    								  , res , res , res , res , res , res , res , res ,
40 COMPARE_OP 0 ( < )					      								    								  res , res , res , res , res , res , res , res , re
42 POP_JUMP_IF_FALSE 130				      								    								  s , res , res , res , res , res , res , res res ,
							      								    								  res , res , res , res , res , res , res , res , re
7 44 LOAD_FAST 1 ( res )				      								    								  s , res res , res res , res , res , res res , res
46 LOAD_METHOD 1 ( append )				      								    								  , res , res , res , res , res , res res , res , re
48 LOAD_GLOBAL 2 ( max )				      								    								  s , res , res , res , res , res , res res , res re
50 LOAD_FAST 2 ( i )					      								    								  s , res , res , res , res , res , res , res , res
52 LOAD_FAST 1 ( res )					      								    								  , res res , res , res , res , res res , res , res
54 LOAD_GLOBAL 3 ( int )				      								    								  , res res , res , res , res , res , res , res , re
56 LOAD_FAST 2 ( i )					      								    								  s res , res
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( res )					      								    								  
68 LOAD_GLOBAL 3 ( int )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 4 ( 3 )					      								    								  
74 BINARY_TRUE_DIVIDE					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_ADD						      								    								  						 ^ S
82 LOAD_FAST 1 ( res )					      								    								  yntaxError: invalid syntax
84 LOAD_GLOBAL 3 ( int )				      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 5 ( 4 )					      								    								  
90 BINARY_TRUE_DIVIDE					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 1 ( res )					      								    								  
100 LOAD_GLOBAL 3 ( int )				      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 LOAD_CONST 6 ( 5 )					      								    								  
106 BINARY_TRUE_DIVIDE					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 BINARY_SUBSCR					      								    								  
112 BINARY_ADD						      								    								  
114 CALL_FUNCTION 2					      								    								  
116 CALL_METHOD 1					      								    								  
118 POP_TOP						      								    								  
							      								    								  
8 120 LOAD_FAST 2 ( i )					      								    								  
122 LOAD_CONST 2 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 2 ( i )					      								    								  
128 JUMP_ABSOLUTE 32					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
9 >> 132 LOAD_FAST 1 ( res )				      								    								  
134 LOAD_FAST 0 ( n )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	      COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	    COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	  COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES
--							      --							    --								  --
Disassembly of <code object countwalks at 0x7fbac0e8bc90, fil def countwalks ( graph , u , v , k ) :			    def countwalks ( graph , u , v , v , v , v , v , v , v , v ,  script_not_found : None
2 0 LOAD_FAST 3 ( k )					      	  if ( k == 0 and u == v ) :				    								  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    								  
4 COMPARE_OP 2 ( == )					      	  if ( k == 1 and graph [ u ] [ v ] ) :			    								  
6 POP_JUMP_IF_FALSE 20					      	      return 1						    								  
8 LOAD_FAST 1 ( u )					      	  if ( k <= 0 ) :					    								  
10 LOAD_FAST 2 ( v )					      	      return 0						    								  
12 COMPARE_OP 2 ( == )					      	  count = 0						    								  
14 POP_JUMP_IF_FALSE 20					      	  for i in range ( 0 , V ) :				    								  
							      	      if ( graph [ u ] [ i ] == 1 ) :			    								  
3 16 LOAD_CONST 2 ( 1 )					      		  count += countwalks ( graph , i , v , k - 1 )	    								  
18 RETURN_VALUE						      	  return count						    								  
							      								    								  
4 >> 20 LOAD_FAST 3 ( k )				      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 44					      								    								  
28 LOAD_FAST 0 ( graph )				      								    								  
30 LOAD_FAST 1 ( u )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( v )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
5 40 LOAD_CONST 2 ( 1 )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
6 >> 44 LOAD_FAST 3 ( k )				      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 1 ( <= )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 52 LOAD_CONST 1 ( 0 )					      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 LOAD_CONST 1 ( 0 )				      								    								  
58 STORE_FAST 4 ( count )				      								    								  
							      								    								  
9 60 SETUP_LOOP 56 ( to 118 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 LOAD_GLOBAL 1 ( V )					      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 42 ( to 116 )				      								    								  
74 STORE_FAST 5 ( i )					      								    								  
							      								    								  
10 76 LOAD_FAST 0 ( graph )				      								    								  
78 LOAD_FAST 1 ( u )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 5 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
11 92 LOAD_FAST 4 ( count )				      								    								  
94 LOAD_GLOBAL 2 ( countwalks )				      								    								  
96 LOAD_FAST 0 ( graph )				      								    								  
98 LOAD_FAST 5 ( i )					      								    								  
100 LOAD_FAST 2 ( v )					      								    								  
102 LOAD_FAST 3 ( k )					      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 4					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 4 ( count )				      								    								  
114 JUMP_ABSOLUTE 72					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 4 ( count )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS
--							      --							    --								  --
Disassembly of <code object countStr at 0x7fbac<<unk>> de40,  def countStr ( n , bCount , cCount ) :			    def countStr ( n , bCount , bCount , bCount , bCount , bCount script_not_found : None
2 0 LOAD_FAST 1 ( bCount )				      	  if ( bCount < 0 or cCount < 0 ) :			    								  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    								  
4 COMPARE_OP 0 ( < )					      	  if ( n == 0 ) :					    								  
6 POP_JUMP_IF_TRUE 16					      	      return 1						    								  
8 LOAD_FAST 2 ( cCount )				      	  if ( bCount == 0 and cCount == 0 ) :			    								  
10 LOAD_CONST 1 ( 0 )					      	      return 1						    								  
12 COMPARE_OP 0 ( < )					      	  res = countStr ( n - 1 , bCount , cCount )		    								  
14 POP_JUMP_IF_FALSE 20					      	  res += countStr ( n - 1 , bCount - 1 , cCount )	    								  
							      	  res += countStr ( n - 1 , bCount , cCount - 1 )	    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      	  return res						    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 2 ( 1 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_FAST 1 ( bCount )				      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 52					      								    								  
40 LOAD_FAST 2 ( cCount )				      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 48 LOAD_CONST 2 ( 1 )					      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_GLOBAL 0 ( countStr )			      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_FAST 1 ( bCount )				      								    								  
62 LOAD_FAST 2 ( cCount )				      								    								  
64 CALL_FUNCTION 3					      								    								  
66 STORE_FAST 3 ( res )					      								    								  
							      								    								  
9 68 LOAD_FAST 3 ( res )				      								    								  
70 LOAD_GLOBAL 0 ( countStr )				      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 LOAD_FAST 1 ( bCount )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_FAST 2 ( cCount )				      								    								  
86 CALL_FUNCTION 3					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 3 ( res )					      								    								  
							      								    								  
10 92 LOAD_FAST 3 ( res )				      								    								  
94 LOAD_GLOBAL 0 ( countStr )				      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_FAST 1 ( bCount )				      								    								  
104 LOAD_FAST 2 ( cCount )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 3					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 3 ( res )				      								    								  
							      								    								  
11 116 LOAD_FAST 3 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE	      COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		    COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		  COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE
--							      --							    --								  --
Disassembly of <code object countIslands at 0x7fbac<<unk>> de def countIslands ( mat ) :				    def countIsIsStuacaclates lates lates lates lates lates lates script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    								  
2 STORE_FAST 1 ( count )				      	  for i in range ( 0 , M ) :				    								  
							      	      for j in range ( 0 , N ) :			    								  
3 4 SETUP_LOOP 118 ( to 124 )				      		  if ( mat [ i ] [ j ] == 'X' ) :		    								  
6 LOAD_GLOBAL 0 ( range )				      		      if ( ( i == 0 or mat [ i - 1 ] [ j ] == 'O' ) 								  
8 LOAD_CONST 1 ( 0 )					      			  count = count + 1			    								  
10 LOAD_GLOBAL 1 ( M )					      	  return count						    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 104 ( to 122 )				      								    								  
18 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 98 ( to 120 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_GLOBAL 2 ( N )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 84 ( to 118 )				      								    								  
34 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( mat )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( j )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 2 ( 'X' )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_TRUE 80					      								    								  
60 LOAD_FAST 0 ( mat )					      								    								  
62 LOAD_FAST 2 ( i )					      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 4 ( 'O' )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 32					      								    								  
>> 80 LOAD_FAST 3 ( j )					      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_TRUE 108					      								    								  
88 LOAD_FAST 0 ( mat )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 3 ( j )					      								    								  
96 LOAD_CONST 3 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 4 ( 'O' )				      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 32				      								    								  
							      								    								  
7 >> 108 LOAD_FAST 1 ( count )				      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 1 ( count )				      								    								  
116 JUMP_ABSOLUTE 32					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 16					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
8 >> 124 LOAD_FAST 1 ( count )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	      COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	    COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R	  COUNT_ELEMENTS_WHICH_DIVIDE_ALL_NUMBERS_IN_RANGE_L_R
--							      --							    --								  --
Disassembly of <code object answerQuery at 0x7fbac0e8bc90, fi def answerQuery ( a , n , l , r ) :			    def answerQuery ( f , count , l , l , l , l , l , l , l , l , script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    								  
2 STORE_FAST 4 ( count )				      	  l = l - 1						    								  
							      	  for i in range ( l , r , 1 ) :			    								  
3 4 LOAD_FAST 2 ( l )					      	      element = a [ i ]					    								  
6 LOAD_CONST 2 ( 1 )					      	      divisors = 0					    								  
8 BINARY_SUBTRACT					      	      for j in range ( l , r , 1 ) :			    								  
10 STORE_FAST 2 ( l )					      		  if ( a [ j ] % a [ i ] == 0 ) :		    								  
							      		      divisors += 1				    								  
4 12 SETUP_LOOP 106 ( to 120 )				      		  else :					    								  
14 LOAD_GLOBAL 0 ( range )				      		      break					    								  
16 LOAD_FAST 2 ( l )					      	      if ( divisors == ( r - l ) ) :			    								  
18 LOAD_FAST 3 ( r )					      		  count += 1					    								  
20 LOAD_CONST 2 ( 1 )					      	  return count						    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 90 ( to 118 )				      								    								  
28 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( a )					      								    								  
32 LOAD_FAST 5 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 STORE_FAST 6 ( element )				      								    								  
							      								    								  
6 38 LOAD_CONST 1 ( 0 )					      								    								  
40 STORE_FAST 7 ( divisors )				      								    								  
							      								    								  
7 42 SETUP_LOOP 52 ( to 96 )				      								    								  
44 LOAD_GLOBAL 0 ( range )				      								    								  
46 LOAD_FAST 2 ( l )					      								    								  
48 LOAD_FAST 3 ( r )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 CALL_FUNCTION 3					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 36 ( to 94 )				      								    								  
58 STORE_FAST 8 ( j )					      								    								  
							      								    								  
8 60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 8 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 5 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
9 80 LOAD_FAST 7 ( divisors )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 7 ( divisors )				      								    								  
88 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
11 >> 90 BREAK_LOOP					      								    								  
92 JUMP_ABSOLUTE 56					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
12 >> 96 LOAD_FAST 7 ( divisors )			      								    								  
98 LOAD_FAST 3 ( r )					      								    								  
100 LOAD_FAST 2 ( l )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 26				      								    								  
							      								    								  
13 108 LOAD_FAST 4 ( count )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( count )				      								    								  
116 JUMP_ABSOLUTE 26					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_FAST 4 ( count )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME  CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME
--							      --							    --								  --
Disassembly of <code object canFormPalindrome at 0x7fbac<<unk def canFormPalindrome ( st ) :				    def canFormPalindrome ( st , count = 0 , count = 1 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * ( NO_OF_CHARS )			    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  
2 BUILD_LIST 1						      	  for i in range ( 0 , len ( st ) ) :			    								  
4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				      	      count [ ord ( st [ i ] ) ] = count [ ord ( st [ i ] ) 								  
6 BINARY_MULTIPLY					      	  odd = 0						    								  
8 STORE_FAST 1 ( count )				      	  for i in range ( 0 , NO_OF_CHARS ) :			    								  
							      	      if ( count [ i ] & 1 ) :				    								  
3 10 SETUP_LOOP 54 ( to 66 )				      		  odd = odd + 1					    								  
12 LOAD_GLOBAL 1 ( range )				      	      if ( odd > 1 ) :					    								  
14 LOAD_CONST 1 ( 0 )					      		  return False					    								  
16 LOAD_GLOBAL 2 ( len )				      	  return True						    								  
18 LOAD_FAST 0 ( st )					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 36 ( to 64 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( count )				      								    								  
32 LOAD_GLOBAL 3 ( ord )				      								    								  
34 LOAD_FAST 0 ( st )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 1 ( count )				      								    								  
50 LOAD_GLOBAL 3 ( ord )				      								    								  
52 LOAD_FAST 0 ( st )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 26					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
5 >> 66 LOAD_CONST 1 ( 0 )				      								    								  
68 STORE_FAST 3 ( odd )					      								    								  
							      								    								  
6 70 SETUP_LOOP 50 ( to 122 )				      								    								  
72 LOAD_GLOBAL 1 ( range )				      								    								  
74 LOAD_CONST 1 ( 0 )					      								    								  
76 LOAD_GLOBAL 0 ( NO_OF_CHARS )			      								    								  
78 CALL_FUNCTION 2					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 36 ( to 120 )				      								    								  
84 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 86 LOAD_FAST 1 ( count )				      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_AND						      								    								  
96 POP_JUMP_IF_FALSE 106				      								    								  
							      								    								  
8 98 LOAD_FAST 3 ( odd )				      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 3 ( odd )				      								    								  
							      								    								  
9 >> 106 LOAD_FAST 3 ( odd )				      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 COMPARE_OP 4 ( > )					      								    								  
112 POP_JUMP_IF_FALSE 82				      								    								  
							      								    								  
10 114 LOAD_CONST 3 ( False )				      								    								  
116 RETURN_VALUE					      								    								  
118 JUMP_ABSOLUTE 82					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
11 >> 122 LOAD_CONST 4 ( True )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY		      MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			    MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			  MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY
--							      --							    --								  --
Disassembly of <code object findLongestConseqSubseq at 0x7fba def findLongestConseqSubseq ( arr , n ) :			    def findLongestConseqseq ( arr ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( set )				      	  S = set ( ) ;						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				     set the set of the given arr in the given arr of the	  /eval_scripts/dis_sa-python_sa.test/MAXIMUM_CONSEC
4 STORE_FAST 2 ( S )					      	      S.add ( arr [ i ] ) ;				     `arr` and `arr` are not a list of the given arr in		  UTIVE_NUMBERS_PRESENT_ARRAY.py", line 62, in <modu
							      	  ans = 0 ;						     `arr` and `arr` are not a list of the given arr in		  le>	  if f_filled(*parameters_set) == f_gold(*pa
3 6 SETUP_LOOP 30 ( to 38 )				      	  for i in range ( n ) :				     `arr` and `arr` are not returned as `arr` and		  rameters_set): TypeError: f_filled() takes 1 posit
8 LOAD_GLOBAL 1 ( range )				      	      if S.__contains__ ( arr [ i ] ) :			     `arr` are returned as `arr` and `arr` are returned as `arr`. ional argument but 2 were given
10 LOAD_FAST 1 ( n )					      		  j = arr [ i ] ;				    								  
12 CALL_FUNCTION 1					      		  while ( S.__contains__ ( j ) ) :		     """							  
14 GET_ITER						      		      j += 1 ;					    	arr = arr.get ( 'arr' , None )				  
>> 16 FOR_ITER 18 ( to 36 )				      		  ans = max ( ans , j - arr [ i ] ) ;		    	arr = arr.get ( 'arr' , None )				  
18 STORE_FAST 3 ( i )					      	  return ans ;						    	arr = arr.get ( 'arr' , None )				  
							      								    	arr.append ( arr )					  
4 20 LOAD_FAST 2 ( S )					      								    	arr.append ( arr )					  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 CALL_METHOD 1					      								    								  
32 POP_TOP						      								    								  
34 JUMP_ABSOLUTE 16					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_CONST 1 ( 0 )				      								    								  
40 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
6 42 SETUP_LOOP 80 ( to 124 )				      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 68 ( to 122 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 56 LOAD_FAST 2 ( S )					      								    								  
58 LOAD_METHOD 3 ( __contains__ )			      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_METHOD 1					      								    								  
68 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
8 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 78 SETUP_LOOP 22 ( to 102 )				      								    								  
>> 80 LOAD_FAST 2 ( S )					      								    								  
82 LOAD_METHOD 3 ( __contains__ )			      								    								  
84 LOAD_FAST 5 ( j )					      								    								  
86 CALL_METHOD 1					      								    								  
88 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
10 90 LOAD_FAST 5 ( j )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 5 ( j )					      								    								  
98 JUMP_ABSOLUTE 80					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_GLOBAL 4 ( max )				      								    								  
104 LOAD_FAST 4 ( ans )					      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 CALL_FUNCTION 2					      								    								  
118 STORE_FAST 4 ( ans )				      								    								  
120 JUMP_ABSOLUTE 52					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
12 >> 124 LOAD_FAST 4 ( ans )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_REVERSE_STRING_REMOVING_VOWELS			      PRINT_REVERSE_STRING_REMOVING_VOWELS			    PRINT_REVERSE_STRING_REMOVING_VOWELS			  PRINT_REVERSE_STRING_REMOVING_VOWELS
--							      --							    --								  --
Disassembly of <code object replaceOriginal at 0x7fbac0e8bc90 def replaceOriginal ( s , n ) :				    def replaceOriginal ( s , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( ' ' )				      	  r = [ ' ' ] * n					    	"""							  
2 BUILD_LIST 1						      	  for i in range ( n ) :				     Return a string of the given n in the given n number of the  
4 LOAD_FAST 1 ( n )					      	      r [ i ] = s [ n - 1 - i ]				     range numbers to be 124.					  
6 BINARY_MULTIPLY					      	      if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] !=  """							  
8 STORE_FAST 2 ( r )					      		  print ( r [ i ] , end = "" )			    	for i in range ( n ) :					  
							      	  print ( )						    	    if n < 0 :						  
3 10 SETUP_LOOP 112 ( to 124 )				      								    		return s					  
12 LOAD_GLOBAL 0 ( range )				      								    	return s						  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 100 ( to 122 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 2 ( r )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 STORE_SUBSCR						      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( s )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 'a' )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 20					      								    								  
56 LOAD_FAST 0 ( s )					      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 4 ( 'e' )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 20					      								    								  
68 LOAD_FAST 0 ( s )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 5 ( 'i' )					      								    								  
76 COMPARE_OP 3 ( != )					      								    								  
78 POP_JUMP_IF_FALSE 20					      								    								  
80 LOAD_FAST 0 ( s )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 6 ( 'o' )					      								    								  
88 COMPARE_OP 3 ( != )					      								    								  
90 POP_JUMP_IF_FALSE 20					      								    								  
92 LOAD_FAST 0 ( s )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 7 ( 'u' )					      								    								  
100 COMPARE_OP 3 ( != )					      								    								  
102 POP_JUMP_IF_FALSE 20				      								    								  
							      								    								  
6 104 LOAD_GLOBAL 1 ( print )				      								    								  
106 LOAD_FAST 2 ( r )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 8 ( '' )					      								    								  
114 LOAD_CONST 9 ( ( 'end' , ) )			      								    								  
116 CALL_FUNCTION_KW 2					      								    								  
118 POP_TOP						      								    								  
120 JUMP_ABSOLUTE 20					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
7 >> 124 LOAD_GLOBAL 1 ( print )			      								    								  
126 CALL_FUNCTION 0					      								    								  
128 POP_TOP						      								    								  
130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROOTS_OF_UNITY						      ROOTS_OF_UNITY						    ROOTS_OF_UNITY						  ROOTS_OF_UNITY
--							      --							    --								  --
Disassembly of <code object printRoots at 0x7fbac<<unk>> de40 def printRoots ( n ) :					    def printpolyts ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  theta = math.pi * 2 / n				    	math.pi ( 2 * n )					  
2 LOAD_ATTR 1 ( pi )					      	  for k in range ( 0 , n ) :				    								  
4 LOAD_CONST 1 ( 2 )					      	      real = math.cos ( k * theta )			    								  
6 BINARY_MULTIPLY					      	      img = math.sin ( k * theta )			    								  
8 LOAD_FAST 0 ( n )					      	      print ( real , end = " " )			    								  
10 BINARY_TRUE_DIVIDE					      	      if ( img >= 0 ) :					    								  
12 STORE_FAST 1 ( theta )				      		  print ( " + i " , end = " " )			    								  
							      	      else :						    								  
3 14 SETUP_LOOP 104 ( to 120 )				      		  print ( " - i " , end = " " )			    								  
16 LOAD_GLOBAL 2 ( range )				      	      print ( abs ( img ) )				    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 CALL_FUNCTION 2					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 90 ( to 118 )				      								    								  
28 STORE_FAST 2 ( k )					      								    								  
							      								    								  
4 30 LOAD_GLOBAL 0 ( math )				      								    								  
32 LOAD_METHOD 3 ( cos )				      								    								  
34 LOAD_FAST 2 ( k )					      								    								  
36 LOAD_FAST 1 ( theta )				      								    								  
38 BINARY_MULTIPLY					      								    								  
40 CALL_METHOD 1					      								    								  
42 STORE_FAST 3 ( real )				      								    								  
							      								    								  
5 44 LOAD_GLOBAL 0 ( math )				      								    								  
46 LOAD_METHOD 4 ( sin )				      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 LOAD_FAST 1 ( theta )				      								    								  
52 BINARY_MULTIPLY					      								    								  
54 CALL_METHOD 1					      								    								  
56 STORE_FAST 4 ( img )					      								    								  
							      								    								  
6 58 LOAD_GLOBAL 5 ( print )				      								    								  
60 LOAD_FAST 3 ( real )					      								    								  
62 LOAD_CONST 3 ( ' ' )					      								    								  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
66 CALL_FUNCTION_KW 2					      								    								  
68 POP_TOP						      								    								  
							      								    								  
7 70 LOAD_FAST 4 ( img )				      								    								  
72 LOAD_CONST 2 ( 0 )					      								    								  
74 COMPARE_OP 5 ( >= )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
8 78 LOAD_GLOBAL 5 ( print )				      								    								  
80 LOAD_CONST 5 ( ' + i ' )				      								    								  
82 LOAD_CONST 3 ( ' ' )					      								    								  
84 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
86 CALL_FUNCTION_KW 2					      								    								  
88 POP_TOP						      								    								  
90 JUMP_FORWARD 12 ( to 104 )				      								    								  
							      								    								  
10 >> 92 LOAD_GLOBAL 5 ( print )			      								    								  
94 LOAD_CONST 6 ( ' - i ' )				      								    								  
96 LOAD_CONST 3 ( ' ' )					      								    								  
98 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
100 CALL_FUNCTION_KW 2					      								    								  
102 POP_TOP						      								    								  
							      								    								  
11 >> 104 LOAD_GLOBAL 5 ( print )			      								    								  
106 LOAD_GLOBAL 6 ( abs )				      								    								  
108 LOAD_FAST 4 ( img )					      								    								  
110 CALL_FUNCTION 1					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 POP_TOP						      								    								  
116 JUMP_ABSOLUTE 26					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 LOAD_CONST 0 ( None )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT	      FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT		    FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT		  FIND_NUMBER_CURRENCY_NOTES_SUM_UPTO_GIVEN_AMOUNT
--							      --							    --								  --
Disassembly of <code object countCurrency at 0x7fbac<<unk>> d def countCurrency ( amount ) :				    def countCurrency 0x70x7actntntn1 ( amount = 2000 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 2000 )				      	  notes = [ 2000 , 500 , 200 , 100 , 50 , 20 , 10 , 5 , 1 ] 	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN the SPACETOK 
2 LOAD_CONST 2 ( 500 )					      	  noteCounter = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]	    								  
4 LOAD_CONST 3 ( 200 )					      	  print ( "Currency Count -> " )			    								  
6 LOAD_CONST 4 ( 100 )					      	  for i , j in zip ( notes , noteCounter ) :		    								  
8 LOAD_CONST 5 ( 50 )					      	      if amount >= i :					    								  
10 LOAD_CONST 6 ( 20 )					      		  j = amount // i				    								  
12 LOAD_CONST 7 ( 10 )					      		  amount = amount - j * i			    								  
14 LOAD_CONST 8 ( 5 )					      		  print ( i , " : " , j )			    								  
16 LOAD_CONST 9 ( 1 )					      								    								  
18 BUILD_LIST 9						      								    								  
20 STORE_FAST 1 ( notes )				      								    								  
							      								    								  
3 22 LOAD_CONST 10 ( 0 )				      								    								  
24 LOAD_CONST 10 ( 0 )					      								    								  
26 LOAD_CONST 10 ( 0 )					      								    								  
28 LOAD_CONST 10 ( 0 )					      								    								  
30 LOAD_CONST 10 ( 0 )					      								    								  
32 LOAD_CONST 10 ( 0 )					      								    								  
34 LOAD_CONST 10 ( 0 )					      								    								  
36 LOAD_CONST 10 ( 0 )					      								    								  
38 LOAD_CONST 10 ( 0 )					      								    								  
40 BUILD_LIST 9						      								    								  
42 STORE_FAST 2 ( noteCounter )				      								    								  
							      								    								  
4 44 LOAD_GLOBAL 0 ( print )				      								    								  
46 LOAD_CONST 11 ( 'Currency Count -> ' )		      								    								  
48 CALL_FUNCTION 1					      								    								  
50 POP_TOP						      								    								  
							      								    								  
5 52 SETUP_LOOP 62 ( to 116 )				      								    								  
54 LOAD_GLOBAL 1 ( zip )				      								    								  
56 LOAD_FAST 1 ( notes )				      								    								  
58 LOAD_FAST 2 ( noteCounter )				      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 48 ( to 114 )				      								    								  
66 UNPACK_SEQUENCE 2					      								    								  
68 STORE_FAST 3 ( i )					      								    								  
70 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 72 LOAD_FAST 0 ( amount )				      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 COMPARE_OP 5 ( >= )					      								    								  
78 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 80 LOAD_FAST 0 ( amount )				      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 88 LOAD_FAST 0 ( amount )				      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 LOAD_FAST 3 ( i )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 0 ( amount )				      								    								  
							      								    								  
9 100 LOAD_GLOBAL 0 ( print )				      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 LOAD_CONST 12 ( ' : ' )				      								    								  
106 LOAD_FAST 4 ( j )					      								    								  
108 CALL_FUNCTION 3					      								    								  
110 POP_TOP						      								    								  
112 JUMP_ABSOLUTE 64					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU
--							      --							    --								  --
Disassembly of <code object returnMaxSum at 0x7fbac<<unk>> de def returnMaxSum ( A , B , n ) :				    def returnMaxSum ( A , B , n = 1 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( set )				      	  mp = set ( )						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 CALL_FUNCTION 0					      	  result = 0						    								  /MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW
4 STORE_FAST 3 ( mp )					      	  curr_sum = curr_begin = 0				    								  _ARRAY_UNIQUE.py", line 53	 print("#Results: %i
							      	  for i in range ( 0 , n ) :				    								  , %i" % (n_success, len(param)))
3 6 LOAD_CONST 1 ( 0 )					      	      while A [ i ] in mp :				    								  				       ^ SyntaxError
8 STORE_FAST 4 ( result )				      		  mp.remove ( A [ curr_begin ] )		    								  : EOF while scanning triple-quoted string literal
							      		  curr_sum -= B [ curr_begin ]			    								  
4 10 LOAD_CONST 1 ( 0 )					      		  curr_begin += 1				    								  
12 DUP_TOP						      	      mp.add ( A [ i ] )				    								  
14 STORE_FAST 5 ( curr_sum )				      	      curr_sum += B [ i ]				    								  
16 STORE_FAST 6 ( curr_begin )				      	      result = max ( result , curr_sum )		    								  
							      	  return result						    								  
5 18 SETUP_LOOP 106 ( to 126 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 92 ( to 124 )				      								    								  
32 STORE_FAST 7 ( i )					      								    								  
							      								    								  
6 34 SETUP_LOOP 50 ( to 86 )				      								    								  
>> 36 LOAD_FAST 0 ( A )					      								    								  
38 LOAD_FAST 7 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( mp )					      								    								  
44 COMPARE_OP 6 ( in )					      								    								  
46 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( mp )					      								    								  
50 LOAD_METHOD 2 ( remove )				      								    								  
52 LOAD_FAST 0 ( A )					      								    								  
54 LOAD_FAST 6 ( curr_begin )				      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_METHOD 1					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_FAST 5 ( curr_sum )				      								    								  
64 LOAD_FAST 1 ( B )					      								    								  
66 LOAD_FAST 6 ( curr_begin )				      								    								  
68 BINARY_SUBSCR					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
9 74 LOAD_FAST 6 ( curr_begin )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 6 ( curr_begin )				      								    								  
82 JUMP_ABSOLUTE 36					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 3 ( mp )				      								    								  
88 LOAD_METHOD 3 ( add )				      								    								  
90 LOAD_FAST 0 ( A )					      								    								  
92 LOAD_FAST 7 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_METHOD 1					      								    								  
98 POP_TOP						      								    								  
							      								    								  
11 100 LOAD_FAST 5 ( curr_sum )				      								    								  
102 LOAD_FAST 1 ( B )					      								    								  
104 LOAD_FAST 7 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
12 112 LOAD_GLOBAL 4 ( max )				      								    								  
114 LOAD_FAST 4 ( result )				      								    								  
116 LOAD_FAST 5 ( curr_sum )				      								    								  
118 CALL_FUNCTION 2					      								    								  
120 STORE_FAST 4 ( result )				      								    								  
122 JUMP_ABSOLUTE 30					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 4 ( result )			      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_2
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7fbac<<unk>> d540 def countPairs ( arr1 , arr2 , m , n , x ) :		    def countPairs ( arr1 , arr2 , n = 1 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count , l , r = 0 , 0 , n - 1				    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 0 )					      	  while ( l < m and r >= 0 ) :				    								  /COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIV
4 LOAD_FAST 3 ( n )					      	      if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) :		    								  EN_VALUE_X_2.py", line 52	print("#Results: %i,
6 LOAD_CONST 2 ( 1 )					      		  l += 1					    								   %i" % (n_success, len(param)))
8 BINARY_SUBTRACT					      		  r -= 1					    								  				      ^ SyntaxError:
10 ROT_THREE						      		  count += 1					    								   EOF while scanning triple-quoted string literal
12 ROT_TWO						      	      elif ( ( arr1 [ l ] + arr2 [ r ] ) < x ) :	    								  
14 STORE_FAST 5 ( count )				      		  l += 1					    								  
16 STORE_FAST 6 ( l )					      	      else :						    								  
18 STORE_FAST 7 ( r )					      		  r -= 1					    								  
							      	  return count						    								  
3 20 SETUP_LOOP 104 ( to 126 )				      								    								  
>> 22 LOAD_FAST 6 ( l )					      								    								  
24 LOAD_FAST 2 ( m )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 124				      								    								  
30 LOAD_FAST 7 ( r )					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( arr1 )				      								    								  
40 LOAD_FAST 6 ( l )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( arr2 )					      								    								  
46 LOAD_FAST 7 ( r )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 4 ( x )					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
5 58 LOAD_FAST 6 ( l )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 6 ( l )					      								    								  
							      								    								  
6 66 LOAD_FAST 7 ( r )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 7 ( r )					      								    								  
							      								    								  
7 74 LOAD_FAST 5 ( count )				      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( count )				      								    								  
82 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
8 >> 84 LOAD_FAST 0 ( arr1 )				      								    								  
86 LOAD_FAST 6 ( l )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 1 ( arr2 )					      								    								  
92 LOAD_FAST 7 ( r )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 4 ( x )					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
9 104 LOAD_FAST 6 ( l )					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 6 ( l )					      								    								  
112 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
11 >> 114 LOAD_FAST 7 ( r )				      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 INPLACE_SUBTRACT					      								    								  
120 STORE_FAST 7 ( r )					      								    								  
122 JUMP_ABSOLUTE 22					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
12 >> 126 LOAD_FAST 5 ( count )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_
--							      --							    --								  --
Disassembly of <code object longestSubseqWithK at 0x7fbac<<un def longestSubseqWithK ( str , k ) :			    def longestSubseqWithK ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	"""							  
2 LOAD_FAST 0 ( str )					      	  freq = [ 0 ] * MAX_CHARS				     Returns a list of a list of numbers in a list of numbers	  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				     """							  
6 STORE_FAST 2 ( n )					      	      freq [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	    	# convert to convert a list of numbers			  
							      	  for i in range ( n ) :				    	# numbers are in the range of numbers			  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( freq [ ord ( str [ i ] ) - ord ( 'a' ) ] >= k )  	# numbers are not in the range of numbers		  
10 BUILD_LIST 1						      		  print ( str [ i ] , end = "" )		    	# numbers are in numbers of numbers			  
12 LOAD_GLOBAL 1 ( MAX_CHARS )				      								    	# numbers are in numbers of numbers			  
14 BINARY_MULTIPLY					      								    	# numbers are in numbers of numbers			  
16 STORE_FAST 3 ( freq )				      								    	# numbers are in numbers of numbers SPACETOKEN numbers	  
							      								    	# numbers are in numbers of numbers SPACETOKEN numbers	  
4 18 SETUP_LOOP 48 ( to 68 )				      								    	# numbers are in numbers numbers			  
20 LOAD_GLOBAL 2 ( range )				      								    	# numbers are in numbers numbers SPACETOKEN numbers	  
22 LOAD_FAST 2 ( n )					      								    	# numbers are in numbers numbers SPACETOKEN numbers SPACE 
24 CALL_FUNCTION 1					      								    	# numbers are in numbers numbers SPACETOKEN numbers	  
26 GET_ITER						      								    	# numbers are in numbers numbers			  
>> 28 FOR_ITER 36 ( to 66 )				      								    	# numbers are in numbers numbers			  
30 STORE_FAST 4 ( i )					      								    	# numbers are in numbers				  
							      								    	# numbers numbers are in numbers			  
5 32 LOAD_FAST 3 ( freq )				      								    	# numbers numbers numbers numbers numbers numbers numbers 
34 LOAD_GLOBAL 3 ( ord )				      								    	# numbers are in numbers				  
36 LOAD_FAST 0 ( str )					      								    	# numbers numbers numbers numbers numbers numbers numbers 
38 LOAD_FAST 4 ( i )					      								    	# numbers are in numbers				  
40 BINARY_SUBSCR					      								    	# numbers numbers numbers numbers numbers numbers	  
42 CALL_FUNCTION 1					      								    	# numbers numbers numbers numbers numbers numbers numbers 
44 LOAD_GLOBAL 3 ( ord )				      								    	# numbers numbers numbers numbers numbers numbers numbers 
46 LOAD_CONST 2 ( 'a' )					      								    	# numbers numbers numbers numbers numbers		  
48 CALL_FUNCTION 1					      								    	# numbers numbers numbers numbers numbers numbers numbers 
50 BINARY_SUBTRACT					      								    	# numbers numbers numbers numbers numbers numbers numbers 
52 DUP_TOP_TWO						      								    	# numbers numbers numbers numbers numbers		  
54 BINARY_SUBSCR					      								    	# numbers numbers numbers numbers numbers numbers numbers 
56 LOAD_CONST 3 ( 1 )					      								    	# numbers numbers numbers numbers numbers numbers numbers 
58 INPLACE_ADD						      								    	# numbers numbers numbers numbers numbers numbers numbers 
60 ROT_THREE						      								    	# numbers numbers numbers numbers numbers numbers	  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 SETUP_LOOP 60 ( to 130 )			      								    								  
70 LOAD_GLOBAL 2 ( range )				      								    								  
72 LOAD_FAST 2 ( n )					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 48 ( to 128 )				      								    								  
80 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 82 LOAD_FAST 3 ( freq )				      								    								  
84 LOAD_GLOBAL 3 ( ord )				      								    								  
86 LOAD_FAST 0 ( str )					      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_GLOBAL 3 ( ord )				      								    								  
96 LOAD_CONST 2 ( 'a' )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 1 ( k )					      								    								  
106 COMPARE_OP 5 ( >= )					      								    								  
108 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
8 110 LOAD_GLOBAL 4 ( print )				      								    								  
112 LOAD_FAST 0 ( str )					      								    								  
114 LOAD_FAST 4 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 4 ( '' )					      								    								  
120 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
122 CALL_FUNCTION_KW 2					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 78					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBERS_THAT_DONT_CONTAIN_3			      COUNT_NUMBERS_THAT_DONT_CONTAIN_3				    COUNT_NUMBERS_THAT_DONT_CONTAIN_3				  COUNT_NUMBERS_THAT_DONT_CONTAIN_3
--							      --							    --								  --
Disassembly of <code object count at 0x7fbac0e89d20, file "<d def count ( n ) :						    def count ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if n < 3 :						    	if n < 3 :						  
2 LOAD_CONST 1 ( 3 )					      	      return n						    	    return n						  
4 COMPARE_OP 0 ( < )					      	  elif n >= 3 and n < 10 :				    	return n						  
6 POP_JUMP_IF_FALSE 12					      	      return n - 1					    								  
							      	  po = 1						    								  
3 8 LOAD_FAST 0 ( n )					      	  while n / po > 9 :					    								  
10 RETURN_VALUE						      	      po = po * 10					    								  
							      	  msd = n / po						    								  
4 >> 12 LOAD_FAST 0 ( n )				      	  if msd != 3 :						    								  
14 LOAD_CONST 1 ( 3 )					      	      return count ( msd ) * count ( po - 1 ) + count ( msd 								  
16 COMPARE_OP 5 ( >= )					      	  else :						    								  
18 POP_JUMP_IF_FALSE 36					      	      return count ( msd * po - 1 )			    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_CONST 2 ( 10 )					      								    								  
24 COMPARE_OP 0 ( < )					      								    								  
26 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 3 ( 1 )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_CONST 3 ( 1 )				      								    								  
38 STORE_FAST 1 ( po )					      								    								  
							      								    								  
7 40 SETUP_LOOP 24 ( to 66 )				      								    								  
>> 42 LOAD_FAST 0 ( n )					      								    								  
44 LOAD_FAST 1 ( po )					      								    								  
46 BINARY_TRUE_DIVIDE					      								    								  
48 LOAD_CONST 4 ( 9 )					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
8 54 LOAD_FAST 1 ( po )					      								    								  
56 LOAD_CONST 2 ( 10 )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 STORE_FAST 1 ( po )					      								    								  
62 JUMP_ABSOLUTE 42					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_FAST 0 ( n )				      								    								  
68 LOAD_FAST 1 ( po )					      								    								  
70 BINARY_TRUE_DIVIDE					      								    								  
72 STORE_FAST 2 ( msd )					      								    								  
							      								    								  
10 74 LOAD_FAST 2 ( msd )				      								    								  
76 LOAD_CONST 1 ( 3 )					      								    								  
78 COMPARE_OP 3 ( != )					      								    								  
80 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
11 82 LOAD_GLOBAL 0 ( count )				      								    								  
84 LOAD_FAST 2 ( msd )					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 LOAD_GLOBAL 0 ( count )				      								    								  
90 LOAD_FAST 1 ( po )					      								    								  
92 LOAD_CONST 3 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 LOAD_GLOBAL 0 ( count )				      								    								  
102 LOAD_FAST 2 ( msd )					      								    								  
104 CALL_FUNCTION 1					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_GLOBAL 0 ( count )				      								    								  
110 LOAD_FAST 0 ( n )					      								    								  
112 LOAD_FAST 1 ( po )					      								    								  
114 BINARY_MODULO					      								    								  
116 CALL_FUNCTION 1					      								    								  
118 BINARY_ADD						      								    								  
120 RETURN_VALUE					      								    								  
							      								    								  
13 >> 122 LOAD_GLOBAL 0 ( count )			      								    								  
124 LOAD_FAST 2 ( msd )					      								    								  
126 LOAD_FAST 1 ( po )					      								    								  
128 BINARY_MULTIPLY					      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 RETURN_VALUE					      								    								  
138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			      MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			    MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			  MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM
--							      --							    --								  --
Disassembly of <code object maximumSumSubarray at 0x7fbac0e89 def maximumSumSubarray ( arr , n ) :			    def maximumSumSubSubarray ( arr , n , min_num , min_num , min error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  min_prefix_sum = 0					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( min_prefix_sum )			      	  res = - math.inf					    								  /MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM.py", line 3
							      	  prefix_sum = [ ]					    								  2	def f_filled ( arr , n , min_num , min_num ,
3 4 LOAD_GLOBAL 0 ( math )				      	  prefix_sum.append ( arr [ 0 ] )			    								   min_num , min_num , min_num , min_num , min_num ,
6 LOAD_ATTR 1 ( inf )					      	  for i in range ( 1 , n ) :				    								   min_num , min_num , min_num , min_num , min_num ,
8 UNARY_NEGATIVE					      	      prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ]  								   min_num , min_num , min_num , min_num , min_num ,
10 STORE_FAST 3 ( res )					      	  for i in range ( n ) :				    								   min_num , min_num , min_num , min_num , min_num ,
							      	      res = max ( res , prefix_sum [ i ] - min_prefix_sum ) 								   min_num , min_num , min_num , min_num , min_num ,
4 12 BUILD_LIST 0					      	      min_prefix_sum = min ( min_prefix_sum , prefix_sum [  								   min_num , min_num , min_num , min_num , min_num ,
14 STORE_FAST 4 ( prefix_sum )				      	  return res						    								   min_num , min_num , min_num , min_num , min_num ,
							      								    								   min_num , min_num , min_num , min_num , min_num ,
5 16 LOAD_FAST 4 ( prefix_sum )				      								    								   min_num , min_num , min_num , min_num , min_num ,
18 LOAD_METHOD 2 ( append )				      								    								   min_num , min_num , min_num , min_num , min_num ,
20 LOAD_FAST 0 ( arr )					      								    								   min_num , min_num , min_num , min_num , min_num ,
22 LOAD_CONST 1 ( 0 )					      								    								   min_num , min_num , min_num , min_num , min_num ,
24 BINARY_SUBSCR					      								    								   min_num , min_num , min_num , min_num , min_num ,
26 CALL_METHOD 1					      								    								   min_num , min_num , min_num , min_num , min_num ,
28 POP_TOP						      								    								   min_num , min_num , min_num , min_num , min_num ,
							      								    								   min_num , min_num , min_num , min_num , min_num ,
6 30 SETUP_LOOP 44 ( to 76 )				      								    								   min_num , min_num , min_num , min_num , min_num ,
32 LOAD_GLOBAL 3 ( range )				      								    								   min_num , min_num , min_num , min_num , min_num ,
34 LOAD_CONST 2 ( 1 )					      								    								   min_num , min_num , min_num , min_num , min_num ,
36 LOAD_FAST 1 ( n )					      								    								   min_num , min_num , min_num , min_num , min_num ,
38 CALL_FUNCTION 2					      								    								   min_num , min_num , min_num , min_num , min_num ,
40 GET_ITER						      								    								   min_num , min_num , min_num , min_num , min_num ,
>> 42 FOR_ITER 30 ( to 74 )				      								    								   min_num , min_num , min_num , min_num , min_num ,
44 STORE_FAST 5 ( i )					      								    								   min_num , min_num , min_num , min_num , min_num ,
							      								    								   min_num , min_num )
7 46 LOAD_FAST 4 ( prefix_sum )				      								    								  
48 LOAD_METHOD 2 ( append )				      								    								  
50 LOAD_FAST 4 ( prefix_sum )				      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 5 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_ADD						      								    								  
68 CALL_METHOD 1					      								    								  
70 POP_TOP						      								    								  
72 JUMP_ABSOLUTE 42					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 SETUP_LOOP 48 ( to 126 )			      								    								  
78 LOAD_GLOBAL 3 ( range )				      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 36 ( to 124 )				      								    								  
88 STORE_FAST 5 ( i )					      								    								  
							      								    								  
9 90 LOAD_GLOBAL 4 ( max )				      								    								  					^ SyntaxErro
92 LOAD_FAST 3 ( res )					      								    								  r: invalid syntax
94 LOAD_FAST 4 ( prefix_sum )				      								    								  
96 LOAD_FAST 5 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 2 ( min_prefix_sum )			      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 STORE_FAST 3 ( res )				      								    								  
							      								    								  
10 108 LOAD_GLOBAL 5 ( min )				      								    								  
110 LOAD_FAST 2 ( min_prefix_sum )			      								    								  
112 LOAD_FAST 4 ( prefix_sum )				      								    								  
114 LOAD_FAST 5 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 2					      								    								  
120 STORE_FAST 2 ( min_prefix_sum )			      								    								  
122 JUMP_ABSOLUTE 86					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
11 >> 126 LOAD_FAST 3 ( res )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
Disassembly of <code object countSolutions at 0x7fbac<<unk>>  def countSolutions ( n ) :				    def countSolutions ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  x = 0							    	"""							  
2 STORE_FAST 1 ( x )					      	  res = 0						     Return the number of the input to a number of the input inpu 
							      	  yCount = 0						     """							  
3 4 LOAD_CONST 1 ( 0 )					      	  while ( yCount * yCount < n ) :			    	# We need to check the input input input input		  
6 STORE_FAST 2 ( res )					      	      yCount = yCount + 1				    	# for the input input input input input			  
							      	  while ( yCount != 0 ) :				    	# for the input input input input input SPACETOKEN input  
4 8 LOAD_CONST 1 ( 0 )					      	      res = res + yCount				    	# for the input input input input input SPACETOKEN input  
10 STORE_FAST 3 ( yCount )				      	      x = x + 1						    	# for input input input input.				  
							      	      while ( yCount != 0 and ( x * x + ( yCount - 1 ) * (  	# for input input input input input input input input inp 
5 12 SETUP_LOOP 24 ( to 38 )				      		  yCount = yCount - 1				    	# for input input input input input input.		  
>> 14 LOAD_FAST 3 ( yCount )				      	  return res						    	# for input input input input input input input input inp 
16 LOAD_FAST 3 ( yCount )				      								    	# for input input input input input input input input inp 
18 BINARY_MULTIPLY					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( yCount )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 STORE_FAST 3 ( yCount )				      								    								  
34 JUMP_ABSOLUTE 14					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
7 >> 38 SETUP_LOOP 78 ( to 118 )			      								    								  
>> 40 LOAD_FAST 3 ( yCount )				      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 3 ( != )					      								    								  
46 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
8 48 LOAD_FAST 2 ( res )				      								    								  
50 LOAD_FAST 3 ( yCount )				      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 2 ( res )					      								    								  
							      								    								  
9 56 LOAD_FAST 1 ( x )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 1 ( x )					      								    								  
							      								    								  
10 64 SETUP_LOOP 48 ( to 114 )				      								    								  
>> 66 LOAD_FAST 3 ( yCount )				      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 3 ( != )					      								    								  
72 POP_JUMP_IF_FALSE 112				      								    								  
74 LOAD_FAST 1 ( x )					      								    								  
76 LOAD_FAST 1 ( x )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 LOAD_FAST 3 ( yCount )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 LOAD_FAST 3 ( yCount )				      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 0 ( n )					      								    								  
98 COMPARE_OP 5 ( >= )					      								    								  
100 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
11 102 LOAD_FAST 3 ( yCount )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 3 ( yCount )				      								    								  
110 JUMP_ABSOLUTE 66					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 JUMP_ABSOLUTE 40					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 2 ( res )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE				      C_PROGRAM_FIND_AREA_TRIANGLE				    C_PROGRAM_FIND_AREA_TRIANGLE				  C_PROGRAM_FIND_AREA_TRIANGLE
--							      --							    --								  --
Disassembly of <code object findArea at 0x7fbac0e89d20, file  def findArea ( a , b , c ) :				    def findArea ( a , b ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a < 0 or b < 0 or c < 0 or ( a + b <= c ) or ( a + c 	if a < b :						  
2 LOAD_CONST 1 ( 0 )					      	      print ( 'Not a valid trianglen' )			    	    return 0						  
4 COMPARE_OP 0 ( < )					      	      return						    	elif a < b :						  
6 POP_JUMP_IF_TRUE 60					      	  s = ( a + b + c ) / 2					    	    return 0						  
8 LOAD_FAST 1 ( b )					      	  area = ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ** 0.5   	elif a < b :						  
10 LOAD_CONST 1 ( 0 )					      	  print ( 'Area of a traingle is %f' % area )		    	    return 0						  
12 COMPARE_OP 0 ( < )					      								    	elif a < b :						  
14 POP_JUMP_IF_TRUE 60					      								    	    return 0						  
16 LOAD_FAST 2 ( c )					      								    	elif a < b :						  
18 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
20 COMPARE_OP 0 ( < )					      								    	elif a < b :						  
22 POP_JUMP_IF_TRUE 60					      								    	    return 0						  
24 LOAD_FAST 0 ( a )					      								    	elif a < b :						  
26 LOAD_FAST 1 ( b )					      								    	    return 0						  
28 BINARY_ADD						      								    	elif a < b :						  
30 LOAD_FAST 2 ( c )					      								    	    return 0						  
32 COMPARE_OP 1 ( <= )					      								    	elif a < b :						  
34 POP_JUMP_IF_TRUE 60					      								    	    return 0						  
36 LOAD_FAST 0 ( a )					      								    	elif a < b :						  
38 LOAD_FAST 2 ( c )					      								    	    return 0						  
40 BINARY_ADD						      								    	elif a < b :						  
42 LOAD_FAST 1 ( b )					      								    	    return 0						  
44 COMPARE_OP 1 ( <= )					      								    	elif a < b :						  
46 POP_JUMP_IF_TRUE 60					      								    	    return 0						  
48 LOAD_FAST 1 ( b )					      								    	elif a < b :						  
50 LOAD_FAST 2 ( c )					      								    	    return 0						  
52 BINARY_ADD						      								    	elif a < b :						  
54 LOAD_FAST 0 ( a )					      								    	    return 0						  
56 COMPARE_OP 1 ( <= )					      								    	elif a < b :						  
58 POP_JUMP_IF_FALSE 72					      								    	    return 0						  
							      								    	elif a < b :						  
3 >> 60 LOAD_GLOBAL 0 ( print )				      								    	    return 0						  
62 LOAD_CONST 2 ( 'Not a valid trianglen' )		      								    	elif a < b :						  
64 CALL_FUNCTION 1					      								    	    return 0						  
66 POP_TOP						      								    	elif a < b :						  
							      								    	    return 0						  
4 68 LOAD_CONST 0 ( None )				      								    	elif a < b :						  
70 RETURN_VALUE						      								    	    return 0						  
							      								    	elif a < b :						  
5 >> 72 LOAD_FAST 0 ( a )				      								    	    return 0						  
74 LOAD_FAST 1 ( b )					      								    	elif a < b :						  
76 BINARY_ADD						      								    	    return 0						  
78 LOAD_FAST 2 ( c )					      								    	elif a < b :						  
80 BINARY_ADD						      								    	    return 0						  
82 LOAD_CONST 3 ( 2 )					      								    	elif a < b :						  
84 BINARY_TRUE_DIVIDE					      								    	    return 0						  
86 STORE_FAST 3 ( s )					      								    	elif a < b :						  
							      								    	    return 0						  
6 88 LOAD_FAST 3 ( s )					      								    	elif a < b :						  
90 LOAD_FAST 3 ( s )					      								    	    return 0						  
92 LOAD_FAST 0 ( a )					      								    	elif a < b :						  
94 BINARY_SUBTRACT					      								    	    return 0						  
96 BINARY_MULTIPLY					      								    	elif a < b :						  
98 LOAD_FAST 3 ( s )					      								    	    return 0						  
100 LOAD_FAST 1 ( b )					      								    	elif a < b :						  
102 BINARY_SUBTRACT					      								    	    return 0						  
104 BINARY_MULTIPLY					      								    	elif a < b :						  
106 LOAD_FAST 3 ( s )					      								    	    return 0						  
108 LOAD_FAST 2 ( c )					      								    	elif a < b :						  
110 BINARY_SUBTRACT					      								    	    return 0						  
112 BINARY_MULTIPLY					      								    	elif a < b :						  
114 LOAD_CONST 4 ( 0.5 )				      								    	    return 0						  
116 BINARY_POWER					      								    	elif a < b :						  
118 STORE_FAST 4 ( area )				      								    	    return 0						  
							      								    	elif a < b :						  
7 120 LOAD_GLOBAL 0 ( print )				      								    	    return 0						  
122 LOAD_CONST 5 ( 'Area of a traingle is %f' )		      								    	elif a < b :						  
124 LOAD_FAST 4 ( area )				      								    	    return 0						  
126 BINARY_MODULO					      								    	elif a < b :						  
128 CALL_FUNCTION 1					      								    	    return 0						  
130 POP_TOP						      								    	elif a < b :						  
132 LOAD_CONST 0 ( None )				      								    	    return 0						  
134 RETURN_VALUE NEW_LINE				      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
							      								    	elif a < b :						  
							      								    	    return 0						  
-							      -								    	elif a < b-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object minheapify at 0x7fbac<<unk>> d540 def minheapify ( a , index ) :				    def minheapify ( a , index , index , maxmaxmaxmaxmaxmaxmaxmax script_not_found : None
2 0 LOAD_FAST 1 ( index )				      	  small = index						    								  
2 STORE_FAST 2 ( small )				      	  l = 2 * index + 1					    								  
							      	  r = 2 * index + 2					    								  
3 4 LOAD_CONST 1 ( 2 )					      	  if ( l < n and a [ l ] < a [ small ] ) :		    								  
6 LOAD_FAST 1 ( index )					      	      small = l						    								  
8 BINARY_MULTIPLY					      	  if ( r < n and a [ r ] < a [ small ] ) :		    								  
10 LOAD_CONST 2 ( 1 )					      	      small = r						    								  
12 BINARY_ADD						      	  if ( small != index ) :				    								  
14 STORE_FAST 3 ( l )					      	      ( a [ small ] , a [ index ] ) = ( a [ index ] , a [ s 								  
							      	      minheapify ( a , small )				    								  
4 16 LOAD_CONST 1 ( 2 )					      								    								  
18 LOAD_FAST 1 ( index )				      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_CONST 1 ( 2 )					      								    								  
24 BINARY_ADD						      								    								  
26 STORE_FAST 4 ( r )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( l )					      								    								  
30 LOAD_GLOBAL 0 ( n )					      								    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 56					      								    								  
36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 3 ( l )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 LOAD_FAST 2 ( small )				      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 0 ( < )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( l )					      								    								  
54 STORE_FAST 2 ( small )				      								    								  
							      								    								  
7 >> 56 LOAD_FAST 4 ( r )				      								    								  
58 LOAD_GLOBAL 0 ( n )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 84					      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 LOAD_FAST 4 ( r )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( a )					      								    								  
72 LOAD_FAST 2 ( small )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 0 ( < )					      								    								  
78 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
8 80 LOAD_FAST 4 ( r )					      								    								  
82 STORE_FAST 2 ( small )				      								    								  
							      								    								  
9 >> 84 LOAD_FAST 2 ( small )				      								    								  
86 LOAD_FAST 1 ( index )				      								    								  
88 COMPARE_OP 3 ( != )					      								    								  
90 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
10 92 LOAD_FAST 0 ( a )					      								    								  
94 LOAD_FAST 1 ( index )				      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( a )					      								    								  
100 LOAD_FAST 2 ( small )				      								    								  
102 BINARY_SUBSCR					      								    								  
104 ROT_TWO						      								    								  
106 LOAD_FAST 0 ( a )					      								    								  
108 LOAD_FAST 2 ( small )				      								    								  
110 STORE_SUBSCR					      								    								  
112 LOAD_FAST 0 ( a )					      								    								  
114 LOAD_FAST 1 ( index )				      								    								  
116 STORE_SUBSCR					      								    								  
							      								    								  
11 118 LOAD_GLOBAL 1 ( minheapify )			      								    								  
120 LOAD_FAST 0 ( a )					      								    								  
122 LOAD_FAST 2 ( small )				      								    								  
124 CALL_FUNCTION 2					      								    								  
126 POP_TOP						      								    								  
>> 128 LOAD_CONST 0 ( None )				      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			      FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			    FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			  FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY
--							      --							    --								  --
Disassembly of <code object firstElement at 0x7fbac<<unk>> de def firstElement ( arr , n , k ) :			    def firstElement ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_MAP 0						      	  count_map = { } ;					    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN the SPACETOK l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( count_map )				      	  for i in range ( 0 , n ) :				    								  /FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY.py", line 5
							      	      if ( arr [ i ] in count_map.keys ( ) ) :		    								  3	print("#Results: %i, %i" % (n_success, len(p
3 4 SETUP_LOOP 76 ( to 82 )				      		  count_map [ arr [ i ] ] += 1			    								  aram)))
6 LOAD_GLOBAL 0 ( range )				      	      else :						    								  	      ^ SyntaxError: EOF while scanning trip
8 LOAD_CONST 1 ( 0 )					      		  count_map [ arr [ i ] ] = 1			    								  le-quoted string literal
10 LOAD_FAST 1 ( n )					      	      i += 1						    								  
12 CALL_FUNCTION 2					      	  for i in range ( 0 , n ) :				    								  
14 GET_ITER						      	      if ( count_map [ arr [ i ] ] == k ) :		    								  
>> 16 FOR_ITER 62 ( to 80 )				      		  return arr [ i ]				    								  
18 STORE_FAST 4 ( i )					      	      i += 1						    								  
							      	  return - 1						    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 4 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 3 ( count_map )				      								    								  
28 LOAD_METHOD 1 ( keys )				      								    								  
30 CALL_METHOD 0					      								    								  
32 COMPARE_OP 6 ( in )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( count_map )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_FORWARD 12 ( to 70 )				      								    								  
							      								    								  
7 >> 58 LOAD_CONST 2 ( 1 )				      								    								  
60 LOAD_FAST 3 ( count_map )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 70 LOAD_FAST 4 ( i )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 4 ( i )					      								    								  
78 JUMP_ABSOLUTE 16					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
9 >> 82 SETUP_LOOP 50 ( to 134 )			      								    								  
84 LOAD_GLOBAL 0 ( range )				      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 LOAD_FAST 1 ( n )					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 36 ( to 132 )				      								    								  
96 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 98 LOAD_FAST 3 ( count_map )				      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 2 ( k )					      								    								  
110 COMPARE_OP 2 ( == )					      								    								  
112 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
11 114 LOAD_FAST 0 ( arr )				      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 RETURN_VALUE					      								    								  
							      								    								  
12 >> 122 LOAD_FAST 4 ( i )				      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 4 ( i )					      								    								  
130 JUMP_ABSOLUTE 94					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
13 >> 134 LOAD_CONST 3 ( - 1 )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS   FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS   FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS	  FIND_MAXIMUM_HEIGHT_PYRAMID_FROM_THE_GIVEN_ARRAY_OF_OBJECTS
--							      --							    --								  --
Disassembly of <code object maxLevel at 0x7fbac<<unk>> de40,  def maxLevel ( boxes , n ) :				    def maxLevel ( boxes , * args , ** kwargs ) :		  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( boxes )				      	  boxes.sort ( )					    	if len ( args ) > len ( args ) :			  
2 LOAD_METHOD 0 ( sort )				      	  ans = 1						    	    return [ ]						  
4 CALL_METHOD 0						      	  prev_width = boxes [ 0 ]				    	for i in range ( len ( args ) ) :			  
6 POP_TOP						      	  prev_count = 1					    	    if i >= len ( args ) :				  
							      	  curr_count = 0					    		return [ ]					  
3 8 LOAD_CONST 1 ( 1 )					      	  curr_width = 0					    	return [ ]						  
10 STORE_FAST 2 ( ans )					      	  for i in range ( 1 , n ) :				    								  
							      	      curr_width += boxes [ i ]				    								  
4 12 LOAD_FAST 0 ( boxes )				      	      curr_count += 1					    								  
14 LOAD_CONST 2 ( 0 )					      	      if ( curr_width > prev_width and curr_count > prev_co 								  
16 BINARY_SUBSCR					      		  prev_width = curr_width			    								  
18 STORE_FAST 3 ( prev_width )				      		  prev_count = curr_count			    								  
							      		  curr_count = 0				    								  
5 20 LOAD_CONST 1 ( 1 )					      		  curr_width = 0				    								  
22 STORE_FAST 4 ( prev_count )				      		  ans += 1					    								  
							      	  return ans						    								  
6 24 LOAD_CONST 2 ( 0 )					      								    								  
26 STORE_FAST 5 ( curr_count )				      								    								  
							      								    								  
7 28 LOAD_CONST 2 ( 0 )					      								    								  
30 STORE_FAST 6 ( curr_width )				      								    								  
							      								    								  
8 32 SETUP_LOOP 78 ( to 112 )				      								    								  
34 LOAD_GLOBAL 1 ( range )				      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 64 ( to 110 )				      								    								  
46 STORE_FAST 7 ( i )					      								    								  
							      								    								  
9 48 LOAD_FAST 6 ( curr_width )				      								    								  
50 LOAD_FAST 0 ( boxes )				      								    								  
52 LOAD_FAST 7 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 6 ( curr_width )				      								    								  
							      								    								  
10 60 LOAD_FAST 5 ( curr_count )			      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 5 ( curr_count )				      								    								  
							      								    								  
11 68 LOAD_FAST 6 ( curr_width )			      								    								  
70 LOAD_FAST 3 ( prev_width )				      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 44					      								    								  
76 LOAD_FAST 5 ( curr_count )				      								    								  
78 LOAD_FAST 4 ( prev_count )				      								    								  
80 COMPARE_OP 4 ( > )					      								    								  
82 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
12 84 LOAD_FAST 6 ( curr_width )			      								    								  
86 STORE_FAST 3 ( prev_width )				      								    								  
							      								    								  
13 88 LOAD_FAST 5 ( curr_count )			      								    								  
90 STORE_FAST 4 ( prev_count )				      								    								  
							      								    								  
14 92 LOAD_CONST 2 ( 0 )				      								    								  
94 STORE_FAST 5 ( curr_count )				      								    								  
							      								    								  
15 96 LOAD_CONST 2 ( 0 )				      								    								  
98 STORE_FAST 6 ( curr_width )				      								    								  
							      								    								  
16 100 LOAD_FAST 2 ( ans )				      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( ans )				      								    								  
108 JUMP_ABSOLUTE 44					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
17 >> 112 LOAD_FAST 2 ( ans )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM_1				      COUNT_PAIRS_WITH_GIVEN_SUM_1				    COUNT_PAIRS_WITH_GIVEN_SUM_1				  COUNT_PAIRS_WITH_GIVEN_SUM_1
--							      --							    --								  --
Disassembly of <code object getPairsCount at 0x7fbac<<unk>> d def getPairsCount ( arr , n , sum ) :			    def getPairsCount ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  m = [ 0 ] * 1000					    	"""							  
2 BUILD_LIST 1						      	  for i in range ( 0 , n ) :				     Return int of a list of the given arr in the given arr in th 
4 LOAD_CONST 2 ( 1000 )					      	      m [ arr [ i ] ]					     range of the range in the range of the range in the range of 
6 BINARY_MULTIPLY					      	      m [ arr [ i ] ] += 1				     range in the range of the range of the range of the range in 
8 STORE_FAST 3 ( m )					      	  twice_count = 0					     range of range in the range range in the range range of rang 
							      	  for i in range ( 0 , n ) :				     """							  
3 10 SETUP_LOOP 50 ( to 62 )				      	      twice_count += m [ sum - arr [ i ] ]		    	if n < n :						  
12 LOAD_GLOBAL 0 ( range )				      	      if ( sum - arr [ i ] == arr [ i ] ) :		    	    return 0						  
14 LOAD_CONST 1 ( 0 )					      		  twice_count -= 1				    	if n < n :						  
16 LOAD_FAST 1 ( n )					      	  return int ( twice_count / 2 )			    	    return 0						  
18 CALL_FUNCTION 2					      								    	return arr						  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 36 ( to 60 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 3 ( m )					      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 BINARY_SUBSCR					      								    								  
36 POP_TOP						      								    								  
							      								    								  
5 38 LOAD_FAST 3 ( m )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 DUP_TOP_TWO						      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 ROT_THREE						      								    								  
56 STORE_SUBSCR						      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_CONST 1 ( 0 )				      								    								  
64 STORE_FAST 5 ( twice_count )				      								    								  
							      								    								  
7 66 SETUP_LOOP 66 ( to 134 )				      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 52 ( to 132 )				      								    								  
80 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 82 LOAD_FAST 5 ( twice_count )			      								    								  
84 LOAD_FAST 3 ( m )					      								    								  
86 LOAD_FAST 2 ( sum )					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 5 ( twice_count )			      								    								  
							      								    								  
9 102 LOAD_FAST 2 ( sum )				      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 4 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 4 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
10 122 LOAD_FAST 5 ( twice_count )			      								    								  
124 LOAD_CONST 3 ( 1 )					      								    								  
126 INPLACE_SUBTRACT					      								    								  
128 STORE_FAST 5 ( twice_count )			      								    								  
130 JUMP_ABSOLUTE 78					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
11 >> 134 LOAD_GLOBAL 1 ( int )				      								    								  
136 LOAD_FAST 5 ( twice_count )				      								    								  
138 LOAD_CONST 4 ( 2 )					      								    								  
140 BINARY_TRUE_DIVIDE					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7fbac0e89d20, file def rearrange ( a , size ) :				    def rearrange ( a , size ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  positive = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( positive )				      	  negative = 1						    								  /POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS.py"
							      	  while ( True ) :					    								  , line 69	     ^ SyntaxError: EOF while scanni
3 4 LOAD_CONST 2 ( 1 )					      	      while ( positive < size and a [ positive ] >= 0 ) :   								  ng triple-quoted string literal
6 STORE_FAST 3 ( negative )				      		  positive = positive + 2			    								  
							      	      while ( negative < size and a [ negative ] <= 0 ) :   								  
4 8 SETUP_LOOP 120 ( to 130 )				      		  negative = negative + 2			    								  
							      	      if ( positive < size and negative < size ) :	    								  
5 >> 10 SETUP_LOOP 32 ( to 44 )				      		  temp = a [ positive ]				    								  
>> 12 LOAD_FAST 2 ( positive )				      		  a [ positive ] = a [ negative ]		    								  
14 LOAD_FAST 1 ( size )					      		  a [ negative ] = temp				    								  
16 COMPARE_OP 0 ( < )					      	      else :						    								  
18 POP_JUMP_IF_FALSE 42					      		  break						    								  
20 LOAD_FAST 0 ( a )					      								    								  
22 LOAD_FAST 2 ( positive )				      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 5 ( >= )					      								    								  
30 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 32 LOAD_FAST 2 ( positive )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 BINARY_ADD						      								    								  
38 STORE_FAST 2 ( positive )				      								    								  
40 JUMP_ABSOLUTE 12					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
7 >> 44 SETUP_LOOP 32 ( to 78 )				      								    								  
>> 46 LOAD_FAST 3 ( negative )				      								    								  
48 LOAD_FAST 1 ( size )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 76					      								    								  
54 LOAD_FAST 0 ( a )					      								    								  
56 LOAD_FAST 3 ( negative )				      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 1 ( <= )					      								    								  
64 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 66 LOAD_FAST 3 ( negative )				      								    								  
68 LOAD_CONST 3 ( 2 )					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 3 ( negative )				      								    								  
74 JUMP_ABSOLUTE 46					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
9 >> 78 LOAD_FAST 2 ( positive )			      								    								  
80 LOAD_FAST 1 ( size )					      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 124				      								    								  
86 LOAD_FAST 3 ( negative )				      								    								  
88 LOAD_FAST 1 ( size )					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
10 94 LOAD_FAST 0 ( a )					      								    								  
96 LOAD_FAST 2 ( positive )				      								    								  
98 BINARY_SUBSCR					      								    								  
100 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
11 102 LOAD_FAST 0 ( a )				      								    								  
104 LOAD_FAST 3 ( negative )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( a )					      								    								  
110 LOAD_FAST 2 ( positive )				      								    								  
112 STORE_SUBSCR					      								    								  
							      								    								  
12 114 LOAD_FAST 4 ( temp )				      								    								  
116 LOAD_FAST 0 ( a )					      								    								  
118 LOAD_FAST 3 ( negative )				      								    								  
120 STORE_SUBSCR					      								    								  
122 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
14 >> 124 BREAK_LOOP					      								    								  
126 JUMP_ABSOLUTE 10					      								    								  
128 POP_BLOCK						      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR
--							      --							    --								  --
Disassembly of <code object alternateSubarray at 0x7fbac0e89d def alternateSubarray ( arr , n ) :			    def alternateSubarray ( arr ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  count = 1						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 2 ( count )				      	  prev = arr [ 0 ]					    								  
							      	  for i in range ( 1 , n ) :				    								  
3 4 LOAD_FAST 0 ( arr )					      	      if ( ( arr [ i ] ^ prev ) == 0 ) :		    								  
6 LOAD_CONST 2 ( 0 )					      		  while ( count ) :				    								  
8 BINARY_SUBSCR						      		      print ( count , end = " " )		    								  
10 STORE_FAST 3 ( prev )				      		      count -= 1				    								  
							      	      count += 1					    								  
4 12 SETUP_LOOP 80 ( to 94 )				      	      prev = arr [ i ]					    								  
14 LOAD_GLOBAL 0 ( range )				      	  while ( count ) :					    								  
16 LOAD_CONST 1 ( 1 )					      	      print ( count , end = " " )			    								  
18 LOAD_FAST 1 ( n )					      	      count -= 1					    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 66 ( to 92 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 4 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( prev )					      								    								  
36 BINARY_XOR						      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
6 44 SETUP_LOOP 28 ( to 74 )				      								    								  
>> 46 LOAD_FAST 2 ( count )				      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 50 LOAD_GLOBAL 1 ( print )				      								    								  
52 LOAD_FAST 2 ( count )				      								    								  
54 LOAD_CONST 3 ( ' ' )					      								    								  
56 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
58 CALL_FUNCTION_KW 2					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_FAST 2 ( count )				      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 INPLACE_SUBTRACT					      								    								  
68 STORE_FAST 2 ( count )				      								    								  
70 JUMP_ABSOLUTE 46					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 2 ( count )				      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 2 ( count )				      								    								  
							      								    								  
10 82 LOAD_FAST 0 ( arr )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 STORE_FAST 3 ( prev )				      								    								  
90 JUMP_ABSOLUTE 24					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 SETUP_LOOP 28 ( to 124 )			      								    								  
>> 96 LOAD_FAST 2 ( count )				      								    								  
98 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
12 100 LOAD_GLOBAL 1 ( print )				      								    								  
102 LOAD_FAST 2 ( count )				      								    								  
104 LOAD_CONST 3 ( ' ' )				      								    								  
106 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
108 CALL_FUNCTION_KW 2					      								    								  
110 POP_TOP						      								    								  
							      								    								  
13 112 LOAD_FAST 2 ( count )				      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 INPLACE_SUBTRACT					      								    								  
118 STORE_FAST 2 ( count )				      								    								  
120 JUMP_ABSOLUTE 96					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI FIND_CHARACTER_FIRST_STRING_PRESENT_MINIMUM_INDEX_SECOND_STRI
--							      --							    --								  --
Disassembly of <code object printMinIndexChar at 0x7fbac0e8bc def printMinIndexChar ( Str , patt ) :			    def printMinIndexChar ( Str ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1000000000 )				      	  minIndex = 10 ** 9					    	l = [ 1000000000 , 1000000000 , 1000000000 , 1000000000 , 
2 STORE_FAST 2 ( minIndex )				      	  m = len ( Str )					    	# Model exporter - Model exporter			  
							      	  n = len ( patt )					    								  
3 4 LOAD_GLOBAL 0 ( len )				      	  for i in range ( n ) :				    								  
6 LOAD_FAST 0 ( Str )					      	      for j in range ( m ) :				    								  
8 CALL_FUNCTION 1					      		  if ( patt [ i ] == Str [ j ] and j < minIndex ) : 								  
10 STORE_FAST 3 ( m )					      		      minIndex = j				    								  
							      		      break					    								  
4 12 LOAD_GLOBAL 0 ( len )				      	  if ( minIndex != 10 ** 9 ) :				    								  
14 LOAD_FAST 1 ( patt )					      	      print ( "Minimum Index Character = " , Str [ minIndex 								  
16 CALL_FUNCTION 1					      	  else :						    								  
18 STORE_FAST 4 ( n )					      	      print ( "No character present" )			    								  
							      								    								  
5 20 SETUP_LOOP 64 ( to 86 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 4 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 52 ( to 84 )				      								    								  
32 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 34 SETUP_LOOP 46 ( to 82 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_FAST 3 ( m )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 34 ( to 80 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 48 LOAD_FAST 1 ( patt )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( Str )					      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
64 LOAD_FAST 6 ( j )					      								    								  
66 LOAD_FAST 2 ( minIndex )				      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 72 LOAD_FAST 6 ( j )					      								    								  
74 STORE_FAST 2 ( minIndex )				      								    								  
							      								    								  
9 76 BREAK_LOOP						      								    								  
78 JUMP_ABSOLUTE 44					      								    								  
>> 80 POP_BLOCK						      								    								  
>> 82 JUMP_ABSOLUTE 30					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 2 ( minIndex )			      								    								  
88 LOAD_CONST 1 ( 1000000000 )				      								    								  
90 COMPARE_OP 3 ( != )					      								    								  
92 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
11 94 LOAD_GLOBAL 2 ( print )				      								    								  
96 LOAD_CONST 2 ( 'Minimum Index Character = ' )	      								    								  
98 LOAD_FAST 0 ( Str )					      								    								  
100 LOAD_FAST 2 ( minIndex )				      								    								  
102 BINARY_SUBSCR					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 POP_TOP						      								    								  
108 JUMP_FORWARD 8 ( to 118 )				      								    								  
							      								    								  
13 >> 110 LOAD_GLOBAL 2 ( print )			      								    								  
112 LOAD_CONST 3 ( 'No character present' )		      								    								  
114 CALL_FUNCTION 1					      								    								  
116 POP_TOP						      								    								  
>> 118 LOAD_CONST 0 ( None )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		      FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		    FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		  FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES
--							      --							    --								  --
Disassembly of <code object findSDSFunc at 0x7fbac0e8bc90, fi def findSDSFunc ( n ) :					    def findSDSFunc ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  DP = [ 0 ] * ( n + 1 )				    	"""							  
2 BUILD_LIST 1						      	  DP [ 0 ] = 0						     Return the number of the node to a node in the node	  
4 LOAD_FAST 0 ( n )					      	  DP [ 1 ] = 1						     """							  
6 LOAD_CONST 2 ( 1 )					      	  for i in range ( 2 , n + 1 ) :			    	n = 0							  
8 BINARY_ADD						      	      if ( int ( i % 2 ) == 0 ) :			    	while n < n :						  
10 BINARY_MULTIPLY					      		  DP [ i ] = DP [ int ( i / 2 ) ]		    	    n = n						  
12 STORE_FAST 1 ( DP )					      	      else :						    	    n -= n						  
							      		  DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [  	    n -= n						  
3 14 LOAD_CONST 1 ( 0 )					      	  return DP [ n ]					    	    n -= n						  
16 LOAD_FAST 1 ( DP )					      								    	    n -= n						  
18 LOAD_CONST 1 ( 0 )					      								    	return n						  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 1 ( DP )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 SETUP_LOOP 104 ( to 136 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 86 ( to 134 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 50 LOAD_GLOBAL 1 ( int )				      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 BINARY_MODULO					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
7 66 LOAD_FAST 1 ( DP )					      								    								  
68 LOAD_GLOBAL 1 ( int )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 BINARY_TRUE_DIVIDE					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( DP )					      								    								  
82 LOAD_FAST 2 ( i )					      								    								  
84 STORE_SUBSCR						      								    								  
86 JUMP_ABSOLUTE 46					      								    								  
							      								    								  
9 >> 88 LOAD_FAST 1 ( DP )				      								    								  
90 LOAD_GLOBAL 1 ( int )				      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 LOAD_CONST 3 ( 2 )					      								    								  
100 BINARY_TRUE_DIVIDE					      								    								  
102 CALL_FUNCTION 1					      								    								  
104 BINARY_SUBSCR					      								    								  
106 LOAD_FAST 1 ( DP )					      								    								  
108 LOAD_GLOBAL 1 ( int )				      								    								  
110 LOAD_FAST 2 ( i )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_CONST 3 ( 2 )					      								    								  
118 BINARY_TRUE_DIVIDE					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 BINARY_SUBSCR					      								    								  
124 BINARY_ADD						      								    								  
126 LOAD_FAST 1 ( DP )					      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 STORE_SUBSCR					      								    								  
132 JUMP_ABSOLUTE 46					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
10 >> 136 LOAD_FAST 1 ( DP )				      								    								  
138 LOAD_FAST 0 ( n )					      								    								  
140 BINARY_SUBSCR					      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX	      EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX		    EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX		  EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX
--							      --							    --								  --
Disassembly of <code object printDiagonalSums at 0x7fbac<<unk def printDiagonalSums ( mat , n ) :			    def printDiagonalSums ( mat , n , column = None , column = No error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  principal = 0						    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( principal )				      	  secondary = 0 ;					    								  /EFFICIENTLY_COMPUTE_SUMS_OF_DIAGONALS_OF_A_MATRIX
							      	  for i in range ( 0 , n ) :				    								  .py", line 32	    if __name__ == '__main__':
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n ) :			    								  ^ SyntaxError: invalid syntax
6 STORE_FAST 3 ( secondary )				      		  if ( i == j ) :				    								  
							      		      principal += mat [ i ] [ j ]		    								  
4 8 SETUP_LOOP 94 ( to 104 )				      		  if ( ( i + j ) == ( n - 1 ) ) :		    								  
10 LOAD_GLOBAL 0 ( range )				      		      secondary += mat [ i ] [ j ]		    								  
12 LOAD_CONST 1 ( 0 )					      	  print ( "Principal Diagonal:" , principal )		    								  
14 LOAD_FAST 1 ( n )					      	  print ( "Secondary Diagonal:" , secondary )		    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 80 ( to 102 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 74 ( to 100 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 60 ( to 98 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_FAST 5 ( j )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( principal )				      								    								  
50 LOAD_FAST 0 ( mat )					      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( principal )				      								    								  
							      								    								  
8 >> 64 LOAD_FAST 4 ( i )				      								    								  
66 LOAD_FAST 5 ( j )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
9 80 LOAD_FAST 3 ( secondary )				      								    								  
82 LOAD_FAST 0 ( mat )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 3 ( secondary )				      								    								  
96 JUMP_ABSOLUTE 36					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 JUMP_ABSOLUTE 20					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
10 >> 104 LOAD_GLOBAL 1 ( print )			      								    								  
106 LOAD_CONST 3 ( 'Principal Diagonal:' )		      								    								  
108 LOAD_FAST 2 ( principal )				      								    								  
110 CALL_FUNCTION 2					      								    								  
112 POP_TOP						      								    								  
							      								    								  
11 114 LOAD_GLOBAL 1 ( print )				      								    								  
116 LOAD_CONST 4 ( 'Secondary Diagonal:' )		      								    								  
118 LOAD_FAST 3 ( secondary )				      								    								  
120 CALL_FUNCTION 2					      								    								  
122 POP_TOP						      								    								  
124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMAINDER_7_LARGE_NUMBERS				      REMAINDER_7_LARGE_NUMBERS					    REMAINDER_7_LARGE_NUMBERS					  REMAINDER_7_LARGE_NUMBERS
--							      --							    --								  --
Disassembly of <code object remainderWith7 at 0x7fbac0e8bc90, def remainderWith7 ( num ) :				    def remainderWith7 ( num , series , series = None ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ] ;		    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN the SPACETOK l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 2 ( 3 )					      	  series_index = 0 ;					    								  /REMAINDER_7_LARGE_NUMBERS.py", line 52     print(
4 LOAD_CONST 3 ( 2 )					      	  result = 0 ;						    								  "#Results: %i, %i" % (n_success, len(param)))
6 LOAD_CONST 4 ( - 1 )					      	  for i in range ( ( len ( num ) - 1 ) , - 1 , - 1 ) :	    								  
8 LOAD_CONST 5 ( - 3 )					      	      digit = ord ( num [ i ] ) - 48 ;			    								  ^ SyntaxError: EOF while scanning triple-quoted st
10 LOAD_CONST 6 ( - 2 )					      	      result += digit * series [ series_index ] ;	    								  ring literal
12 BUILD_LIST 6						      	      series_index = ( series_index + 1 ) % 6 ;		    								  
14 STORE_FAST 1 ( series )				      	      result %= 7 ;					    								  
							      	  if ( result < 0 ) :					    								  
3 16 LOAD_CONST 7 ( 0 )					      	      result = ( result + 7 ) % 7 ;			    								  
18 STORE_FAST 2 ( series_index )			      	  return result ;					    								  
							      								    								  
4 20 LOAD_CONST 7 ( 0 )					      								    								  
22 STORE_FAST 3 ( result )				      								    								  
							      								    								  
5 24 SETUP_LOOP 80 ( to 106 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_GLOBAL 1 ( len )				      								    								  
30 LOAD_FAST 0 ( num )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 4 ( - 1 )					      								    								  
40 LOAD_CONST 4 ( - 1 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 56 ( to 104 )				      								    								  
48 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 50 LOAD_GLOBAL 2 ( ord )				      								    								  
52 LOAD_FAST 0 ( num )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 LOAD_CONST 8 ( 48 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 STORE_FAST 5 ( digit )				      								    								  
							      								    								  
7 66 LOAD_FAST 3 ( result )				      								    								  
68 LOAD_FAST 5 ( digit )				      								    								  
70 LOAD_FAST 1 ( series )				      								    								  
72 LOAD_FAST 2 ( series_index )				      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 3 ( result )				      								    								  
							      								    								  
8 82 LOAD_FAST 2 ( series_index )			      								    								  
84 LOAD_CONST 1 ( 1 )					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_CONST 9 ( 6 )					      								    								  
90 BINARY_MODULO					      								    								  
92 STORE_FAST 2 ( series_index )			      								    								  
							      								    								  
9 94 LOAD_FAST 3 ( result )				      								    								  
96 LOAD_CONST 10 ( 7 )					      								    								  
98 INPLACE_MODULO					      								    								  
100 STORE_FAST 3 ( result )				      								    								  
102 JUMP_ABSOLUTE 46					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 LOAD_FAST 3 ( result )			      								    								  
108 LOAD_CONST 7 ( 0 )					      								    								  
110 COMPARE_OP 0 ( < )					      								    								  
112 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
11 114 LOAD_FAST 3 ( result )				      								    								  
116 LOAD_CONST 10 ( 7 )					      								    								  
118 BINARY_ADD						      								    								  
120 LOAD_CONST 10 ( 7 )					      								    								  
122 BINARY_MODULO					      								    								  
124 STORE_FAST 3 ( result )				      								    								  
							      								    								  
12 >> 126 LOAD_FAST 3 ( result )			      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX			      FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX			    FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX				  FIND_PERMUTED_ROWS_GIVEN_ROW_MATRIX
--							      --							    --								  --
Disassembly of <code object permutatedRows at 0x7fbac0e8bc90, def permutatedRows ( mat , m , n , r ) :			    def permutatedRows ( mat ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 CALL_FUNCTION 0					      	  for j in range ( n ) :				     Returns a set of a list of a list of values		  /eval_scripts/dis_sa-python_sa.test/FIND_PERMUTED_
4 STORE_FAST 4 ( s )					      	      s.add ( mat [ r ] [ j ] )				    								  ROWS_GIVEN_ROW_MATRIX.py", line 71, in <module>
							      	  for i in range ( m ) :				     """							    f_filled(*(filled_function_param[i])) TypeError:
3 6 SETUP_LOOP 34 ( to 42 )				      	      if i == r :					    	for i in range ( mat ) :				   f_filled() takes 1 positional argument but 4 were
8 LOAD_GLOBAL 1 ( range )				      		  continue					    	    if i < i :						   given
10 LOAD_FAST 2 ( n )					      	      for j in range ( n ) :				    		return i					  
12 CALL_FUNCTION 1					      		  if mat [ i ] [ j ] not in s :			    	return None						  
14 GET_ITER						      		      j = j - 2					    								  
>> 16 FOR_ITER 22 ( to 40 )				      		      break ;					    								  
18 STORE_FAST 5 ( j )					      	      if j + 1 != n :					    								  
							      		  continue					    								  
4 20 LOAD_FAST 4 ( s )					      	      print ( i )					    								  
22 LOAD_METHOD 2 ( add )				      								    								  
24 LOAD_FAST 0 ( mat )					      								    								  
26 LOAD_FAST 3 ( r )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 5 ( j )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_METHOD 1					      								    								  
36 POP_TOP						      								    								  
38 JUMP_ABSOLUTE 16					      								    								  
>> 40 POP_BLOCK						      								    								  
							      								    								  
5 >> 42 SETUP_LOOP 92 ( to 136 )			      								    								  
44 LOAD_GLOBAL 1 ( range )				      								    								  
46 LOAD_FAST 1 ( m )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 80 ( to 134 )				      								    								  
54 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 56 LOAD_FAST 6 ( i )					      								    								  
58 LOAD_FAST 3 ( r )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
7 64 JUMP_ABSOLUTE 52					      								    								  
							      								    								  
8 >> 66 SETUP_LOOP 42 ( to 110 )			      								    								  
68 LOAD_GLOBAL 1 ( range )				      								    								  
70 LOAD_FAST 2 ( n )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 30 ( to 108 )				      								    								  
78 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 80 LOAD_FAST 0 ( mat )				      								    								  
82 LOAD_FAST 6 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 4 ( s )					      								    								  
92 COMPARE_OP 7 ( not in )				      								    								  
94 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
10 96 LOAD_FAST 5 ( j )					      								    								  
98 LOAD_CONST 1 ( 2 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 104 BREAK_LOOP					      								    								  
106 JUMP_ABSOLUTE 76					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
12 >> 110 LOAD_FAST 5 ( j )				      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 LOAD_FAST 2 ( n )					      								    								  
118 COMPARE_OP 3 ( != )					      								    								  
120 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
13 122 JUMP_ABSOLUTE 52					      								    								  
							      								    								  
14 >> 124 LOAD_GLOBAL 3 ( print )			      								    								  
126 LOAD_FAST 6 ( i )					      								    								  
128 CALL_FUNCTION 1					      								    								  
130 POP_TOP						      								    								  
132 JUMP_ABSOLUTE 52					      								    								  
>> 134 POP_BLOCK					      								    								  
>> 136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2_1				      SORT_ARRAY_WAVE_FORM_2_1					    SORT_ARRAY_WAVE_FORM_2_1					  SORT_ARRAY_WAVE_FORM_2_1
--							      --							    --								  --
Disassembly of <code object sortInWave at 0x7fbac<<unk>> de40 def sortInWave ( arr , n ) :				    def sortInWave ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 148 ( to 150 )				      	  for i in range ( 0 , n , 2 ) :			    	for i in range ( n ) :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :	    	    if n [ i ] == n [ i ] :				  /eval_scripts/dis_sa-python_sa.test/SORT_ARRAY_WAV
4 LOAD_CONST 1 ( 0 )					      		  arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ 		return i					  E_FORM_2_1.py", line 59, in <module>	   f_filled(
6 LOAD_FAST 1 ( n )					      	      if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :	    	return None						  *(filled_function_param[i]))	 File "/home/ubuntu/
8 LOAD_CONST 2 ( 2 )					      		  arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ 								  TransCoder/models/eval/bt/152w65bl69/eval_scripts/
10 CALL_FUNCTION 3					      								    								  dis_sa-python_sa.test/SORT_ARRAY_WAVE_FORM_2_1.py"
12 GET_ITER						      								    								  , line 27, in f_filled     if n [ i ] == n [ i ] :
>> 14 FOR_ITER 132 ( to 148 )				      								    								   TypeError: 'int' object is not subscriptable
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 2 ( i )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 COMPARE_OP 4 ( > )					      								    								  
24 POP_JUMP_IF_FALSE 80					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( arr )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
4 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 ROT_TWO						      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 LOAD_CONST 3 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_SUBSCR						      								    								  
							      								    								  
5 >> 80 LOAD_FAST 2 ( i )				      								    								  
82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_CONST 3 ( 1 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 COMPARE_OP 0 ( < )					      								    								  
90 POP_JUMP_IF_FALSE 14					      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 2 ( i )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 BINARY_SUBSCR					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 14				      								    								  
							      								    								  
6 112 LOAD_FAST 0 ( arr )				      								    								  
114 LOAD_FAST 2 ( i )					      								    								  
116 LOAD_CONST 3 ( 1 )					      								    								  
118 BINARY_ADD						      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 2 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 ROT_TWO						      								    								  
130 LOAD_FAST 0 ( arr )					      								    								  
132 LOAD_FAST 2 ( i )					      								    								  
134 STORE_SUBSCR					      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 2 ( i )					      								    								  
140 LOAD_CONST 3 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 STORE_SUBSCR					      								    								  
146 JUMP_ABSOLUTE 14					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_2				      MAXIMUM_TRIPLET_SUM_ARRAY_2				    MAXIMUM_TRIPLET_SUM_ARRAY_2					  MAXIMUM_TRIPLET_SUM_ARRAY_2
--							      --							    --								  --
Disassembly of <code object maxTripletSum at 0x7fbac<<unk>> d def maxTripletSum ( arr , n ) :				    def maxTripletSum ( arr , n = 0 , maxA = 1 , maxA = 0 , maxA  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( - 100000000 )			      	  maxA = - 100000000					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( maxA )					      	  maxB = - 100000000					    								  /MAXIMUM_TRIPLET_SUM_ARRAY_2.py", line 36	if _
							      	  maxC = - 100000000					    								  _name__ == '__main__':      ^ SyntaxError: invalid
3 4 LOAD_CONST 1 ( - 100000000 )			      	  for i in range ( 0 , n ) :				    								   syntax
6 STORE_FAST 3 ( maxB )					      	      if ( arr [ i ] > maxA ) :				    								  
							      		  maxC = maxB					    								  
4 8 LOAD_CONST 1 ( - 100000000 )			      		  maxB = maxA					    								  
10 STORE_FAST 4 ( maxC )				      		  maxA = arr [ i ]				    								  
							      	      elif ( arr [ i ] > maxB ) :			    								  
5 12 SETUP_LOOP 94 ( to 108 )				      		  maxC = maxB					    								  
14 LOAD_GLOBAL 0 ( range )				      		  maxB = arr [ i ]				    								  
16 LOAD_CONST 2 ( 0 )					      	      elif ( arr [ i ] > maxC ) :			    								  
18 LOAD_FAST 1 ( n )					      		  maxC = arr [ i ]				    								  
20 CALL_FUNCTION 2					      	  return ( maxA + maxB + maxC )				    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 80 ( to 106 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( maxA )					      								    								  
36 COMPARE_OP 4 ( > )					      								    								  
38 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 40 LOAD_FAST 3 ( maxB )				      								    								  
42 STORE_FAST 4 ( maxC )				      								    								  
							      								    								  
8 44 LOAD_FAST 2 ( maxA )				      								    								  
46 STORE_FAST 3 ( maxB )				      								    								  
							      								    								  
9 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 STORE_FAST 2 ( maxA )				      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
10 >> 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 3 ( maxB )					      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 84					      								    								  
							      								    								  
11 70 LOAD_FAST 3 ( maxB )				      								    								  
72 STORE_FAST 4 ( maxC )				      								    								  
							      								    								  
12 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 5 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 3 ( maxB )				      								    								  
82 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
13 >> 84 LOAD_FAST 0 ( arr )				      								    								  
86 LOAD_FAST 5 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 4 ( maxC )					      								    								  
92 COMPARE_OP 4 ( > )					      								    								  
94 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
14 96 LOAD_FAST 0 ( arr )				      								    								  
98 LOAD_FAST 5 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 STORE_FAST 4 ( maxC )				      								    								  
104 JUMP_ABSOLUTE 24					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
15 >> 108 LOAD_FAST 2 ( maxA )				      								    								  
110 LOAD_FAST 3 ( maxB )				      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 4 ( maxC )				      								    								  
116 BINARY_ADD						      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ARRANGEMENT_QUEUE_GIVEN_TIME			      FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				    FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				  FIND_ARRANGEMENT_QUEUE_GIVEN_TIME
--							      --							    --								  --
Disassembly of <code object solve at 0x7fbac<<unk>> d540, fil def solve ( n , t , p ) :					    def solve ( fbfbacageageageageageageageageageageageageageagea script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  s = list ( p )					    								  
2 LOAD_FAST 2 ( p )					      	  for i in range ( 0 , t ) :				    								  
4 CALL_FUNCTION 1					      	      for j in range ( 0 , n - 1 ) :			    								  
6 STORE_FAST 3 ( s )					      		  if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :    								  
							      		      temp = s [ j ] ;				    								  
3 8 SETUP_LOOP 114 ( to 124 )				      		      s [ j ] = s [ j + 1 ] ;			    								  
10 LOAD_GLOBAL 1 ( range )				      		      s [ j + 1 ] = temp ;			    								  
12 LOAD_CONST 1 ( 0 )					      		      j = j + 1					    								  
14 LOAD_FAST 1 ( t )					      	  print ( ''.join ( s ) )				    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 100 ( to 122 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 94 ( to 120 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 76 ( to 118 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 3 ( s )					      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 3 ( 'B' )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 40					      								    								  
56 LOAD_FAST 3 ( s )					      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_CONST 4 ( 'G' )					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
6 72 LOAD_FAST 3 ( s )					      								    								  
74 LOAD_FAST 5 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 STORE_FAST 6 ( temp )				      								    								  
							      								    								  
7 80 LOAD_FAST 3 ( s )					      								    								  
82 LOAD_FAST 5 ( j )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_ADD						      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 3 ( s )					      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 STORE_SUBSCR						      								    								  
							      								    								  
8 96 LOAD_FAST 6 ( temp )				      								    								  
98 LOAD_FAST 3 ( s )					      								    								  
100 LOAD_FAST 5 ( j )					      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_SUBSCR					      								    								  
							      								    								  
9 108 LOAD_FAST 5 ( j )					      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 STORE_FAST 5 ( j )					      								    								  
116 JUMP_ABSOLUTE 40					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 20					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
10 >> 124 LOAD_GLOBAL 2 ( print )			      								    								  
126 LOAD_CONST 5 ( '' )					      								    								  
128 LOAD_METHOD 3 ( join )				      								    								  
130 LOAD_FAST 3 ( s )					      								    								  
132 CALL_METHOD 1					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 POP_TOP						      								    								  
138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS     CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS	    CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS	  CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OPERATIONS
--							      --							    --								  --
Disassembly of <code object isConvertible at 0x7fbac0e8bc90,  def isConvertible ( str1 , str2 , k ) :			    def isConvertible ( str1 , strstrstrstrstrstrstrstrstrstrstrs error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  if ( ( len ( str1 ) + len ( str2 ) ) < k ) :		    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( str1 )					      	      return True					    								  /CONVERTING_ONE_STRING_USING_APPEND_DELETE_LAST_OP
4 CALL_FUNCTION 1					      	  commonLength = 0					    								  ERATIONS.py", line 33	    if __name__ == '__main__
6 LOAD_GLOBAL 0 ( len )					      	  for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) )  								  ':	  ^ SyntaxError: invalid syntax
8 LOAD_FAST 1 ( str2 )					      	      if ( str1 [ i ] == str2 [ i ] ) :			    								  
10 CALL_FUNCTION 1					      		  commonLength += 1				    								  
12 BINARY_ADD						      	      else :						    								  
14 LOAD_FAST 2 ( k )					      		  break						    								  
16 COMPARE_OP 0 ( < )					      	  if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength 								  
18 POP_JUMP_IF_FALSE 24					      	      return True					    								  
							      	  return False						    								  
3 20 LOAD_CONST 1 ( True )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_CONST 2 ( 0 )				      								    								  
26 STORE_FAST 3 ( commonLength )			      								    								  
							      								    								  
5 28 SETUP_LOOP 62 ( to 92 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 LOAD_GLOBAL 2 ( min )				      								    								  
36 LOAD_GLOBAL 0 ( len )				      								    								  
38 LOAD_FAST 0 ( str1 )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 LOAD_GLOBAL 0 ( len )				      								    								  
44 LOAD_FAST 1 ( str2 )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 CALL_FUNCTION 3					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 32 ( to 90 )				      								    								  
58 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 60 LOAD_FAST 0 ( str1 )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( str2 )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
7 76 LOAD_FAST 3 ( commonLength )			      								    								  
78 LOAD_CONST 3 ( 1 )					      								    								  
80 INPLACE_ADD						      								    								  
82 STORE_FAST 3 ( commonLength )			      								    								  
84 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
9 >> 86 BREAK_LOOP					      								    								  
88 JUMP_ABSOLUTE 56					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 2 ( k )				      								    								  
94 LOAD_GLOBAL 0 ( len )				      								    								  
96 LOAD_FAST 0 ( str1 )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_GLOBAL 0 ( len )				      								    								  
104 LOAD_FAST 1 ( str2 )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 LOAD_CONST 4 ( 2 )					      								    								  
112 LOAD_FAST 3 ( commonLength )			      								    								  
114 BINARY_MULTIPLY					      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_CONST 4 ( 2 )					      								    								  
120 BINARY_MODULO					      								    								  
122 LOAD_CONST 2 ( 0 )					      								    								  
124 COMPARE_OP 2 ( == )					      								    								  
126 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
11 128 LOAD_CONST 1 ( True )				      								    								  
130 RETURN_VALUE					      								    								  
							      								    								  
12 >> 132 LOAD_CONST 5 ( False )			      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			      FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			    FREQUENCY_ELEMENT_UNSORTED_ARRAY_1				  FREQUENCY_ELEMENT_UNSORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object countFreq at 0x7fbac0e89d20, file def countFreq ( a , n ) :					    def countFreq ( a , n , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  hm = dict ( )						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    								  
4 STORE_FAST 2 ( hm )					      	      hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	    								  
							      	  cumul = 0						    								  
3 6 SETUP_LOOP 44 ( to 52 )				      	  for i in range ( n ) :				    								  
8 LOAD_GLOBAL 1 ( range )				      	      cumul += hm [ a [ i ] ]				    								  
10 LOAD_FAST 1 ( n )					      	      if ( hm [ a [ i ] ] > 0 ) :			    								  
12 CALL_FUNCTION 1					      		  print ( a [ i ] , "->" , cumul )		    								  
14 GET_ITER						      	      hm [ a [ i ] ] = 0				    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( hm )					      								    								  
22 LOAD_METHOD 2 ( get )				      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 CALL_METHOD 2					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( hm )					      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 4 ( cumul )				      								    								  
							      								    								  
6 56 SETUP_LOOP 76 ( to 134 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 64 ( to 132 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_FAST 4 ( cumul )				      								    								  
72 LOAD_FAST 2 ( hm )					      								    								  
74 LOAD_FAST 0 ( a )					      								    								  
76 LOAD_FAST 3 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBSCR					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 4 ( cumul )				      								    								  
							      								    								  
8 86 LOAD_FAST 2 ( hm )					      								    								  
88 LOAD_FAST 0 ( a )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 1 ( 0 )					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
9 102 LOAD_GLOBAL 3 ( print )				      								    								  
104 LOAD_FAST 0 ( a )					      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 3 ( '->' )				      								    								  
112 LOAD_FAST 4 ( cumul )				      								    								  
114 CALL_FUNCTION 3					      								    								  
116 POP_TOP						      								    								  
							      								    								  
10 >> 118 LOAD_CONST 1 ( 0 )				      								    								  
120 LOAD_FAST 2 ( hm )					      								    								  
122 LOAD_FAST 0 ( a )					      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 STORE_SUBSCR					      								    								  
130 JUMP_ABSOLUTE 66					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY					      FREQUENT_ELEMENT_ARRAY					    FREQUENT_ELEMENT_ARRAY					  FREQUENT_ELEMENT_ARRAY
--							      --							    --								  --
Disassembly of <code object mostFrequent at 0x7fbac0e8bc90, f def mostFrequent ( arr , n ) :				    def mostFrequent ( arr , n , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	if n < 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_METHOD 0 ( sort )				      	  max_count = 1 ; res = arr [ 0 ] ; curr_count = 1	    	    return n % n					  /FREQUENT_ELEMENT_ARRAY.py", line 34	   def f_fil
4 CALL_METHOD 0						      	  for i in range ( 1 , n ) :				    	else :							  led ( arr , n , n , n ) :	^ SyntaxError: dupli
6 POP_TOP						      	      if ( arr [ i ] == arr [ i - 1 ] ) :		    	    return n % n					  cate argument 'n' in function definition
							      		  curr_count += 1				    								  
3 8 LOAD_CONST 1 ( 1 )					      	      else :						    								  
10 STORE_FAST 2 ( max_count )				      		  if ( curr_count > max_count ) :		    								  
12 LOAD_FAST 0 ( arr )					      		      max_count = curr_count			    								  
14 LOAD_CONST 2 ( 0 )					      		      res = arr [ i - 1 ]			    								  
16 BINARY_SUBSCR					      		  curr_count = 1				    								  
18 STORE_FAST 3 ( res )					      	  if ( curr_count > max_count ) :			    								  
20 LOAD_CONST 1 ( 1 )					      	      max_count = curr_count				    								  
22 STORE_FAST 4 ( curr_count )				      	      res = arr [ n - 1 ]				    								  
							      	  return res						    								  
4 24 SETUP_LOOP 76 ( to 102 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 62 ( to 100 )				      								    								  
38 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
6 60 LOAD_FAST 4 ( curr_count )				      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 4 ( curr_count )				      								    								  
68 JUMP_ABSOLUTE 36					      								    								  
							      								    								  
8 >> 70 LOAD_FAST 4 ( curr_count )			      								    								  
72 LOAD_FAST 2 ( max_count )				      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
9 78 LOAD_FAST 4 ( curr_count )				      								    								  
80 STORE_FAST 2 ( max_count )				      								    								  
							      								    								  
10 82 LOAD_FAST 0 ( arr )				      								    								  
84 LOAD_FAST 5 ( i )					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 BINARY_SUBSCR					      								    								  
92 STORE_FAST 3 ( res )					      								    								  
							      								    								  
11 >> 94 LOAD_CONST 1 ( 1 )				      								    								  
96 STORE_FAST 4 ( curr_count )				      								    								  
98 JUMP_ABSOLUTE 36					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
12 >> 102 LOAD_FAST 4 ( curr_count )			      								    								  
104 LOAD_FAST 2 ( max_count )				      								    								  
106 COMPARE_OP 4 ( > )					      								    								  
108 POP_JUMP_IF_FALSE 126				      								    								  
							      								    								  
13 110 LOAD_FAST 4 ( curr_count )			      								    								  
112 STORE_FAST 2 ( max_count )				      								    								  
							      								    								  
14 114 LOAD_FAST 0 ( arr )				      								    								  
116 LOAD_FAST 1 ( n )					      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 BINARY_SUBSCR					      								    								  
124 STORE_FAST 3 ( res )				      								    								  
							      								    								  
15 >> 126 LOAD_FAST 3 ( res )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TILING_WITH_DOMINOES					      TILING_WITH_DOMINOES					    TILING_WITH_DOMINOES					  TILING_WITH_DOMINOES
--							      --							    --								  --
Disassembly of <code object countWays at 0x7fbac0e89d20, file def countWays ( n ) :					    def countWays ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  A = [ 0 ] * ( n + 1 )					    	"""							  
2 BUILD_LIST 1						      	  B = [ 0 ] * ( n + 1 )					     Return the list of the given n in the given n of the given n 
4 LOAD_FAST 0 ( n )					      	  A [ 0 ] = 1						     list of numbers in numbers and the given n is a		  
6 LOAD_CONST 2 ( 1 )					      	  A [ 1 ] = 0						     list of numbers in numbers of numbers in numbers		  
8 BINARY_ADD						      	  B [ 0 ] = 0						    								  
10 BINARY_MULTIPLY					      	  B [ 1 ] = 1						     """							  
12 STORE_FAST 1 ( A )					      	  for i in range ( 2 , n + 1 ) :			    	# We do some numbers are not in numbers			  
							      	      A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]		    	# numbers of numbers in numbers				  
3 14 LOAD_CONST 1 ( 0 )					      	      B [ i ] = A [ i - 1 ] + B [ i - 2 ]		    	# numbers are not in numbers of numbers			  
16 BUILD_LIST 1						      	  return A [ n ]					    	# numbers are not in numbers of numbers			  
18 LOAD_FAST 0 ( n )					      								    	# numbers are not in numbers in numbers of numbers	  
20 LOAD_CONST 2 ( 1 )					      								    	# numbers are not in numbers of numbers SPACETOKEN number 
22 BINARY_ADD						      								    	# numbers are not in numbers of numbers			  
24 BINARY_MULTIPLY					      								    	# numbers are not in numbers of numbers SPACETOKEN number 
26 STORE_FAST 2 ( B )					      								    	# numbers are not in numbers				  
							      								    	# numbers are not in numbers SPACETOKEN numbers		  
4 28 LOAD_CONST 2 ( 1 )					      								    	# numbers are not in numbers SPACETOKEN numbers		  
30 LOAD_FAST 1 ( A )					      								    	# numbers are not in numbers SPACETOKEN numbers		  
32 LOAD_CONST 1 ( 0 )					      								    	# numbers are in numbers numbers			  
34 STORE_SUBSCR						      								    	# numbers numbers are not in numbers			  
							      								    	# numbers are not in numbers SPACETOKEN numbers		  
5 36 LOAD_CONST 1 ( 0 )					      								    	# numbers are not in numbers SPACETOKEN numbers		  
38 LOAD_FAST 1 ( A )					      								    	# numbers are not in numbers				  
40 LOAD_CONST 2 ( 1 )					      								    	# numbers are not in numbers				  
42 STORE_SUBSCR						      								    	# numbers numbers					  
							      								    	# numbers are not in numbers				  
6 44 LOAD_CONST 1 ( 0 )					      								    	# numbers						  
46 LOAD_FAST 2 ( B )					      								    	# numbers are not in numbers SPACETOKEN numbers		  
48 LOAD_CONST 1 ( 0 )					      								    	# numbers are not in numbers				  
50 STORE_SUBSCR						      								    	# numbers are not in numbers SPACETOKEN numbers		  
							      								    	# numbers are not in numbers SPACETOKEN numbers		  
7 52 LOAD_CONST 2 ( 1 )					      								    	# numbers SPACETOKEN are SPACETOKEN in SPACETOKEN numbers 
54 LOAD_FAST 2 ( B )					      								    	# numbers numbers are not in numbers			  
56 LOAD_CONST 2 ( 1 )					      								    	# numbers are not in numbers				  
58 STORE_SUBSCR						      								    	# numbers SPACETOKEN are SPACETOKEN in SPACETOKEN numbers 
							      								    	# numbers numbers SPACETOKEN are SPACETOKEN in SPACETOKEN 
8 60 SETUP_LOOP 82 ( to 144 )				      								    	# numbers numbers					  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_CONST 3 ( 2 )					      								    								  
66 LOAD_FAST 0 ( n )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 64 ( to 142 )				      								    								  
78 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 80 LOAD_FAST 1 ( A )					      								    								  
82 LOAD_FAST 3 ( i )					      								    								  
84 LOAD_CONST 3 ( 2 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 LOAD_FAST 2 ( B )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_MULTIPLY					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 1 ( A )					      								    								  
108 LOAD_FAST 3 ( i )					      								    								  
110 STORE_SUBSCR					      								    								  
							      								    								  
10 112 LOAD_FAST 1 ( A )				      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 2 ( B )					      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 LOAD_CONST 3 ( 2 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 BINARY_SUBSCR					      								    								  
132 BINARY_ADD						      								    								  
134 LOAD_FAST 2 ( B )					      								    								  
136 LOAD_FAST 3 ( i )					      								    								  
138 STORE_SUBSCR					      								    								  
140 JUMP_ABSOLUTE 76					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
11 >> 144 LOAD_FAST 1 ( A )				      								    								  
146 LOAD_FAST 0 ( n )					      								    								  
148 BINARY_SUBSCR					      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		      NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		    NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		  NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3
--							      --							    --								  --
Disassembly of <code object divisible at 0x7fbac0e89d20, file def divisible ( num ) :					    def divisible ( num ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( num ) ;					    	"""							  
2 LOAD_FAST 0 ( num )					      	  sum = 0 ;						     Returns a list of num and num between num num and num num	  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				     """							  
6 STORE_FAST 1 ( n )					      	      sum += int ( num [ i ] ) ;			    	num = num % num						  
							      	  if ( sum % 3 == 0 ) :					    	num = num % num						  
3 8 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	num = num % num						  
10 STORE_FAST 2 ( sum )					      	  if ( n == 1 ) :					    	num = num % num						  
							      	      return - 1 ;					    	num = num % num						  
4 12 SETUP_LOOP 32 ( to 46 )				      	  for i in range ( n ) :				    	num = num % num						  
14 LOAD_GLOBAL 1 ( range )				      	      if ( sum % 3 == int ( num [ i ] ) % 3 ) :		    	num = num % num						  
16 LOAD_FAST 1 ( n )					      		  return 1 ;					    	num = num % num						  
18 CALL_FUNCTION 1					      	  if ( n == 2 ) :					    	num = num % num						  
20 GET_ITER						      	      return - 1 ;					    	num = num % num						  
>> 22 FOR_ITER 20 ( to 44 )				      	  return 2 ;						    	num = num % num						  
24 STORE_FAST 3 ( i )					      								    	num = num % num						  
							      								    	num = num % num						  
5 26 LOAD_FAST 2 ( sum )				      								    	num = num % num						  
28 LOAD_GLOBAL 2 ( int )				      								    	num = num % num						  
30 LOAD_FAST 0 ( num )					      								    	num = num % num						  
32 LOAD_FAST 3 ( i )					      								    	num = num % num						  
34 BINARY_SUBSCR					      								    	num = num % num						  
36 CALL_FUNCTION 1					      								    	num = num % num						  
38 INPLACE_ADD						      								    	num = num % num						  
40 STORE_FAST 2 ( sum )					      								    	num = num % num						  
42 JUMP_ABSOLUTE 22					      								    	num = num % num						  
>> 44 POP_BLOCK						      								    	num = num % num						  
							      								    	num = num % num						  
6 >> 46 LOAD_FAST 2 ( sum )				      								    	num = num % num						  
48 LOAD_CONST 2 ( 3 )					      								    	num = num % num						  
50 BINARY_MODULO					      								    	num = num % num						  
52 LOAD_CONST 1 ( 0 )					      								    	num = num % num						  
54 COMPARE_OP 2 ( == )					      								    	num = num % num						  
56 POP_JUMP_IF_FALSE 62					      								    	num = num % num						  
							      								    	num = num % num						  
7 58 LOAD_CONST 1 ( 0 )					      								    	num = num % num						  
60 RETURN_VALUE						      								    	num = num % num						  
							      								    	num = num % num						  
8 >> 62 LOAD_FAST 1 ( n )				      								    	num = num % num						  
64 LOAD_CONST 3 ( 1 )					      								    	num = num % num						  
66 COMPARE_OP 2 ( == )					      								    	num = num % num						  
68 POP_JUMP_IF_FALSE 74					      								    	num = num % num						  
							      								    	num = num % num						  
9 70 LOAD_CONST 4 ( - 1 )				      								    	num = num % num						  
72 RETURN_VALUE						      								    	num = num % num						  
							      								    	num = num % num						  
10 >> 74 SETUP_LOOP 44 ( to 120 )			      								    	num = num % num						  
76 LOAD_GLOBAL 1 ( range )				      								    	num = num % num						  
78 LOAD_FAST 1 ( n )					      								    	num = num % num						  
80 CALL_FUNCTION 1					      								    	num = num % num						  
82 GET_ITER						      								    	num = num % num						  
>> 84 FOR_ITER 32 ( to 118 )				      								    	num = num % num						  
86 STORE_FAST 3 ( i )					      								    	num = num % num						  
							      								    	num = num % num						  
11 88 LOAD_FAST 2 ( sum )				      								    	num = num % num						  
90 LOAD_CONST 2 ( 3 )					      								    	num = num % num						  
92 BINARY_MODULO					      								    	num = num % num						  
94 LOAD_GLOBAL 2 ( int )				      								    	num = num % num						  
96 LOAD_FAST 0 ( num )					      								    	num = num % num						  
98 LOAD_FAST 3 ( i )					      								    	num = num % num						  
100 BINARY_SUBSCR					      								    	num = num % num						  
102 CALL_FUNCTION 1					      								    	num = num % num						  
104 LOAD_CONST 2 ( 3 )					      								    	num = num % num						  
106 BINARY_MODULO					      								    	num = num % num						  
108 COMPARE_OP 2 ( == )					      								    	num = num % num						  
110 POP_JUMP_IF_FALSE 84				      								    	num = num % num						  
							      								    	num = num % num						  
12 112 LOAD_CONST 3 ( 1 )				      								    	num = num % num						  
114 RETURN_VALUE					      								    	num = num % num						  
116 JUMP_ABSOLUTE 84					      								    	num = num % num						  
>> 118 POP_BLOCK					      								    	num = num % num						  
							      								    	num = num % num						  
13 >> 120 LOAD_FAST 1 ( n )				      								    	num = num % num						  
122 LOAD_CONST 5 ( 2 )					      								    	num = num % num						  
124 COMPARE_OP 2 ( == )					      								    	num = num % num						  
126 POP_JUMP_IF_FALSE 132				      								    	num = num % num						  
							      								    	num = num % num						  
14 128 LOAD_CONST 4 ( - 1 )				      								    	num = num % num						  
130 RETURN_VALUE					      								    	num = num % num						  
							      								    	num = num % num						  
15 >> 132 LOAD_CONST 5 ( 2 )				      								    	return num						  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA
--							      --							    --								  --
Disassembly of <code object noAdjacentDup at 0x7fbac0e89d20,  def noAdjacentDup ( s ) :					    def noAdjacjacentDup ( s , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 LOAD_FAST 0 ( s )					      	  for i in range ( 1 , n ) :				    								  
4 CALL_FUNCTION 1					      	      if ( s [ i ] == s [ i - 1 ] ) :			    								  
6 STORE_FAST 1 ( n )					      		  s [ i ] = "a"					    								  
							      		  while ( s [ i ] == s [ i - 1 ] or ( i + 1 < n and 								  
3 8 SETUP_LOOP 128 ( to 138 )				      		      s [ i ] += 1				    								  
10 LOAD_GLOBAL 1 ( range )				      		  i += 1					    								  
12 LOAD_CONST 1 ( 1 )					      	  return s						    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 114 ( to 136 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 44 LOAD_CONST 2 ( 'a' )				      								    								  
46 LOAD_FAST 0 ( s )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
							      								    								  
6 52 SETUP_LOOP 72 ( to 126 )				      								    								  
>> 54 LOAD_FAST 0 ( s )					      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 0 ( s )					      								    								  
62 LOAD_FAST 2 ( i )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_TRUE 106					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 124				      								    								  
86 LOAD_FAST 0 ( s )					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 0 ( s )					      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 BINARY_SUBSCR					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 124				      								    								  
							      								    								  
7 >> 106 LOAD_FAST 0 ( s )				      								    								  
108 LOAD_FAST 2 ( i )					      								    								  
110 DUP_TOP_TWO						      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 ROT_THREE						      								    								  
120 STORE_SUBSCR					      								    								  
122 JUMP_ABSOLUTE 54					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
8 >> 126 LOAD_FAST 2 ( i )				      								    								  
128 LOAD_CONST 1 ( 1 )					      								    								  
130 INPLACE_ADD						      								    								  
132 STORE_FAST 2 ( i )					      								    								  
134 JUMP_ABSOLUTE 20					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
9 >> 138 LOAD_FAST 0 ( s )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE			      DELETE_CONSECUTIVE_WORDS_SEQUENCE				    DELETE_CONSECUTIVE_WORDS_SEQUENCE				  DELETE_CONSECUTIVE_WORDS_SEQUENCE
--							      --							    --								  --
Disassembly of <code object removeConsecutiveSame at 0x7fbac0 def removeConsecutiveSame ( v ) :				    def removeConCapture ( v , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( v )						    	"""							  
2 LOAD_FAST 0 ( v )					      	  i = 0							     Return a list of the given v in the given v in the given v i 
4 CALL_FUNCTION 1					      	  while ( i < n - 1 ) :					     given v is a list of the given v in the given v is		  
6 STORE_FAST 1 ( n )					      	      if ( ( i + 1 ) < len ( v ) ) and ( v [ i ] == v [ i +  returned as None.						  
							      		  v = v [ : i ]					     """							  
3 8 LOAD_CONST 1 ( 0 )					      		  v = v [ : i ]					    	v = v.split ( )						  
10 STORE_FAST 2 ( i )					      		  if ( i > 0 ) :				    	if v is None :						  
							      		      i -= 1					    	    v = v.split ( ',' )					  
4 12 SETUP_LOOP 110 ( to 124 )				      		  n = n - 2					    	    v = v.split ( ',' )					  
>> 14 LOAD_FAST 2 ( i )					      	      else :						    	    v = v.split ( ',' )					  
16 LOAD_FAST 1 ( n )					      		  i += 1					    	    v = v.split ( ',' )					  
18 LOAD_CONST 2 ( 1 )					      	  return len ( v [ : i - 1 ] )				    	    v = v.split ( ',' )					  
20 BINARY_SUBTRACT					      								    	    v = v.split ( ',' )					  
22 COMPARE_OP 0 ( < )					      								    	    v = v.split ( ',' )					  
24 POP_JUMP_IF_FALSE 122				      								    	    v = v.split ( ',' )					  
							      								    	    v = v.split ( ',' )					  
5 26 LOAD_FAST 2 ( i )					      								    	    v = v.split ( ',' )					  
28 LOAD_CONST 2 ( 1 )					      								    	    v = v.split ( ',' )					  
30 BINARY_ADD						      								    	    v = v.split ( ',' )					  
32 LOAD_GLOBAL 0 ( len )				      								    	    v = v.split ( ',' )					  
34 LOAD_FAST 0 ( v )					      								    	    v = v.split ( ',' )					  
36 CALL_FUNCTION 1					      								    	    v = v.split ( ',' )					  
38 COMPARE_OP 0 ( < )					      								    	    v = v.split ( ',' )					  
40 POP_JUMP_IF_FALSE 112				      								    	    v = v.split ( ',' )					  
42 LOAD_FAST 0 ( v )					      								    	    v = v.split ( ',' )					  
44 LOAD_FAST 2 ( i )					      								    	    v = v.split ( ',' )					  
46 BINARY_SUBSCR					      								    	    v = v.split ( ',' )					  
48 LOAD_FAST 0 ( v )					      								    	    v = v.split ( ',' )					  
50 LOAD_FAST 2 ( i )					      								    	    v = v.split ( ',' )					  
52 LOAD_CONST 2 ( 1 )					      								    	    v = v.split ( ',' )					  
54 BINARY_ADD						      								    	    v = v.split ( ',' )					  
56 BINARY_SUBSCR					      								    	    v = v.split ( ',' )					  
58 COMPARE_OP 2 ( == )					      								    	    v = v.split ( ',' )					  
60 POP_JUMP_IF_FALSE 112				      								    	    v = v.split ( ',' )					  
							      								    	    v = v.split ( ',' )					  
6 62 LOAD_FAST 0 ( v )					      								    	    v [ v ] = v						  
64 LOAD_CONST 0 ( None )				      								    	    v [ v ] = v						  
66 LOAD_FAST 2 ( i )					      								    	    v [ v ] = v						  
68 BUILD_SLICE 2					      								    	    v [ v ] = v [ v ]					  
70 BINARY_SUBSCR					      								    	    v [ v ] = v [ v ]					  
72 STORE_FAST 0 ( v )					      								    	    v [ v ] = v						  
							      								    	    v [ v ] = v						  
7 74 LOAD_FAST 0 ( v )					      								    	    v [ v ] = v						  
76 LOAD_CONST 0 ( None )				      								    	    v [ v ] = v [ v ]					  
78 LOAD_FAST 2 ( i )					      								    	    v [ v ] = v						  
80 BUILD_SLICE 2					      								    	return v						  
82 BINARY_SUBSCR					      								    								  
84 STORE_FAST 0 ( v )					      								    								  
							      								    								  
8 86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 1 ( 0 )					      								    								  
90 COMPARE_OP 4 ( > )					      								    								  
92 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
9 94 LOAD_FAST 2 ( i )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 INPLACE_SUBTRACT					      								    								  
100 STORE_FAST 2 ( i )					      								    								  
							      								    								  
10 >> 102 LOAD_FAST 1 ( n )				      								    								  
104 LOAD_CONST 3 ( 2 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 1 ( n )					      								    								  
110 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
12 >> 112 LOAD_FAST 2 ( i )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 2 ( i )					      								    								  
120 JUMP_ABSOLUTE 14					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_GLOBAL 0 ( len )				      								    								  
126 LOAD_FAST 0 ( v )					      								    								  
128 LOAD_CONST 0 ( None )				      								    								  
130 LOAD_FAST 2 ( i )					      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 BUILD_SLICE 2					      								    								  
138 BINARY_SUBSCR					      								    								  
140 CALL_FUNCTION 1					      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	      LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	    LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	  LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object findFibSubset at 0x7fbac0e8bc90,  def findFibSubset ( arr , n ) :				    def findFibSubset ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  m = max ( arr )					    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN a SPACETOKEN  
2 LOAD_FAST 0 ( arr )					      	  a = 0							    								  
4 CALL_FUNCTION 1					      	  b = 1							    								  
6 STORE_FAST 2 ( m )					      	  hash = [ ]						    								  
							      	  hash.append ( a )					    								  
3 8 LOAD_CONST 1 ( 0 )					      	  hash.append ( b )					    								  
10 STORE_FAST 3 ( a )					      	  while ( b < m ) :					    								  
							      	      c = a + b						    								  
4 12 LOAD_CONST 2 ( 1 )					      	      a = b						    								  
14 STORE_FAST 4 ( b )					      	      b = c						    								  
							      	      hash.append ( b )					    								  
5 16 BUILD_LIST 0					      	  for i in range ( n ) :				    								  
18 STORE_FAST 5 ( hash )				      	      if arr [ i ] in hash :				    								  
							      		  print ( arr [ i ] , end = " " )		    								  
6 20 LOAD_FAST 5 ( hash )				      								    								  
22 LOAD_METHOD 1 ( append )				      								    								  
24 LOAD_FAST 3 ( a )					      								    								  
26 CALL_METHOD 1					      								    								  
28 POP_TOP						      								    								  
							      								    								  
7 30 LOAD_FAST 5 ( hash )				      								    								  
32 LOAD_METHOD 1 ( append )				      								    								  
34 LOAD_FAST 4 ( b )					      								    								  
36 CALL_METHOD 1					      								    								  
38 POP_TOP						      								    								  
							      								    								  
8 40 SETUP_LOOP 38 ( to 80 )				      								    								  
>> 42 LOAD_FAST 4 ( b )					      								    								  
44 LOAD_FAST 2 ( m )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
9 50 LOAD_FAST 3 ( a )					      								    								  
52 LOAD_FAST 4 ( b )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 6 ( c )					      								    								  
							      								    								  
10 58 LOAD_FAST 4 ( b )					      								    								  
60 STORE_FAST 3 ( a )					      								    								  
							      								    								  
11 62 LOAD_FAST 6 ( c )					      								    								  
64 STORE_FAST 4 ( b )					      								    								  
							      								    								  
12 66 LOAD_FAST 5 ( hash )				      								    								  
68 LOAD_METHOD 1 ( append )				      								    								  
70 LOAD_FAST 4 ( b )					      								    								  
72 CALL_METHOD 1					      								    								  
74 POP_TOP						      								    								  
76 JUMP_ABSOLUTE 42					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
13 >> 80 SETUP_LOOP 44 ( to 126 )			      								    								  
82 LOAD_GLOBAL 2 ( range )				      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 32 ( to 124 )				      								    								  
92 STORE_FAST 7 ( i )					      								    								  
							      								    								  
14 94 LOAD_FAST 0 ( arr )				      								    								  
96 LOAD_FAST 7 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 5 ( hash )				      								    								  
102 COMPARE_OP 6 ( in )					      								    								  
104 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
15 106 LOAD_GLOBAL 3 ( print )				      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 7 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 3 ( ' ' )				      								    								  
116 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
118 CALL_FUNCTION_KW 2					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 90					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY			      FREQUENCY_ELEMENT_UNSORTED_ARRAY				    FREQUENCY_ELEMENT_UNSORTED_ARRAY				  FREQUENCY_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object countFreq at 0x7fbac0e89d20, file def countFreq ( a , n ) :					    def countFreq ( a , n , n , l , l , l , l , l , l , l , l , l script_not_found : None
2 0 BUILD_MAP 0						      	  hm = { }						    	l = l [ l ]						  
2 STORE_FAST 2 ( hm )					      	  for i in range ( 0 , n ) :				    	l = l [ l ]						  
							      	      hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	    	l = l [ l ]						  
3 4 SETUP_LOOP 46 ( to 52 )				      	  st = set ( )						    	l = l [ l ]						  
6 LOAD_GLOBAL 0 ( range )				      	  for x in hm :						    	l = l [ l ]						  
8 LOAD_CONST 1 ( 0 )					      	      st.add ( ( x , hm [ x ] ) )			    	l = l [ l ]						  
10 LOAD_FAST 1 ( n )					      	  cumul = 0						    	l = l [ l ]						  
12 CALL_FUNCTION 2					      	  for x in sorted ( st ) :				    	l = l [ l ]						  
14 GET_ITER						      	      cumul += x [ 1 ]					    	l = l [ l ]						  
>> 16 FOR_ITER 32 ( to 50 )				      	      print ( x [ 0 ] , cumul )				    	l = l [ l ]						  
18 STORE_FAST 3 ( i )					      								    	l = l [ l ]						  
							      								    	l = l [ l ]						  
4 20 LOAD_FAST 2 ( hm )					      								    	l = l [ l ]						  
22 LOAD_METHOD 1 ( get )				      								    	l = l [ l ]						  
24 LOAD_FAST 0 ( a )					      								    	l = l [ l ]						  
26 LOAD_FAST 3 ( i )					      								    	l = l [ l ]						  
28 BINARY_SUBSCR					      								    	l = l [ l ]						  
30 LOAD_CONST 1 ( 0 )					      								    	l l = l [ l ]						  
32 CALL_METHOD 2					      								    	l = l [ l ]						  
34 LOAD_CONST 2 ( 1 )					      								    	l = l [ l ]						  
36 BINARY_ADD						      								    	l = l [ l ]						  
38 LOAD_FAST 2 ( hm )					      								    	l l = l [ l ]						  
40 LOAD_FAST 0 ( a )					      								    	l l = l [ l ]						  
42 LOAD_FAST 3 ( i )					      								    	l l = l [ l ]						  
44 BINARY_SUBSCR					      								    	l l = l [ l ]						  
46 STORE_SUBSCR						      								    	l = l [ l ]						  
48 JUMP_ABSOLUTE 16					      								    	l l = l [ l ]						  
>> 50 POP_BLOCK						      								    	l l = l [ l ]						  
							      								    	l l = l [ l ]						  
5 >> 52 LOAD_GLOBAL 2 ( set )				      								    	l l = l [ l ]						  
54 CALL_FUNCTION 0					      								    	l l = l [ l ]						  
56 STORE_FAST 4 ( st )					      								    	l l = l [ l ]						  
							      								    	l l = l [ l ]						  
6 58 SETUP_LOOP 30 ( to 90 )				      								    	l l = l [ l ]						  
60 LOAD_FAST 2 ( hm )					      								    	l l = l [ l ]						  
62 GET_ITER						      								    	l l = l [ l ]						  
>> 64 FOR_ITER 22 ( to 88 )				      								    	l l = l [ l ]						  
66 STORE_FAST 5 ( x )					      								    	l l l l [ l ]						  
							      								    	l l = l [ l ]						  
7 68 LOAD_FAST 4 ( st )					      								    	l l l l l l [ l ]					  
70 LOAD_METHOD 3 ( add )				      								    	l l l = l [ l ]						  
72 LOAD_FAST 5 ( x )					      								    	l l l l l l l l l l l l l l l l l l l l l l l l l l l l l 
74 LOAD_FAST 2 ( hm )					      								    								  
76 LOAD_FAST 5 ( x )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BUILD_TUPLE 2					      								    								  
82 CALL_METHOD 1					      								    								  
84 POP_TOP						      								    								  
86 JUMP_ABSOLUTE 64					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
8 >> 90 LOAD_CONST 1 ( 0 )				      								    								  
92 STORE_FAST 6 ( cumul )				      								    								  
							      								    								  
9 94 SETUP_LOOP 42 ( to 138 )				      								    								  
96 LOAD_GLOBAL 4 ( sorted )				      								    								  
98 LOAD_FAST 4 ( st )					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 GET_ITER						      								    								  
>> 104 FOR_ITER 30 ( to 136 )				      								    								  
106 STORE_FAST 5 ( x )					      								    								  
							      								    								  
10 108 LOAD_FAST 6 ( cumul )				      								    								  
110 LOAD_FAST 5 ( x )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 6 ( cumul )				      								    								  
							      								    								  
11 120 LOAD_GLOBAL 5 ( print )				      								    								  
122 LOAD_FAST 5 ( x )					      								    								  
124 LOAD_CONST 1 ( 0 )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 6 ( cumul )				      								    								  
130 CALL_FUNCTION 2					      								    								  
132 POP_TOP						      								    								  
134 JUMP_ABSOLUTE 104					      								    								  
>> 136 POP_BLOCK					      								    								  
>> 138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE
--							      --							    --								  --
Disassembly of <code object countWays at 0x7fbac0e8bc90, file def countWays ( n , m ) :					    def countWays ( n ) :					  error : Traceback (most recent call last):   File
2 0 BUILD_LIST 0					      	  count = [ ]						    	count = 0						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( count )				      	  for i in range ( n + 2 ) :				    	count = 0						  /eval_scripts/dis_sa-python_sa.test/COUNT_NUMBER_W
							      	      count.append ( 0 )				    	count = 0						  AYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILES.p
3 4 SETUP_LOOP 30 ( to 36 )				      	  count [ 0 ] = 0					    	count = 0						  y", line 174, in <module>	if f_filled(*paramet
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 1 , n + 1 ) :			    	for count in count :					  ers_set) == f_gold(*parameters_set): TypeError: f_
8 LOAD_FAST 0 ( n )					      	      if ( i > m ) :					    	    count += count					  filled() takes 1 positional argument but 2 were gi
10 LOAD_CONST 1 ( 2 )					      		  count [ i ] = count [ i - 1 ] + count [ i - m ]   	    count += count					  ven
12 BINARY_ADD						      	      elif ( i < m ) :					    	    count += count					  
14 CALL_FUNCTION 1					      		  count [ i ] = 1				    	    count += count					  
16 GET_ITER						      	      else :						    	    count += count					  
>> 18 FOR_ITER 14 ( to 34 )				      		  count [ i ] = 2				    	    count += count					  
20 STORE_FAST 3 ( i )					      	  return count [ n ]					    	    count += count					  
							      								    	    count += count					  
4 22 LOAD_FAST 2 ( count )				      								    	    count += count					  
24 LOAD_METHOD 1 ( append )				      								    	    count += count					  
26 LOAD_CONST 2 ( 0 )					      								    	    count += count					  
28 CALL_METHOD 1					      								    	    count += count					  
30 POP_TOP						      								    	    count += count					  
32 JUMP_ABSOLUTE 18					      								    	    count += count					  
>> 34 POP_BLOCK						      								    	    count += count					  
							      								    	    count += count					  
5 >> 36 LOAD_CONST 2 ( 0 )				      								    	    count += count					  
38 LOAD_FAST 2 ( count )				      								    	    count += count					  
40 LOAD_CONST 2 ( 0 )					      								    	    count += count					  
42 STORE_SUBSCR						      								    	    count += count					  
							      								    	    count += count					  
6 44 SETUP_LOOP 86 ( to 132 )				      								    	    count += count					  
46 LOAD_GLOBAL 0 ( range )				      								    	    count += count					  
48 LOAD_CONST 3 ( 1 )					      								    	    count += count					  
50 LOAD_FAST 0 ( n )					      								    	    count += count					  
52 LOAD_CONST 3 ( 1 )					      								    	    count += count					  
54 BINARY_ADD						      								    	    count += count					  
56 CALL_FUNCTION 2					      								    	    count += count					  
58 GET_ITER						      								    	    count += count					  
>> 60 FOR_ITER 68 ( to 130 )				      								    	    count += count					  
62 STORE_FAST 3 ( i )					      								    	    count += count					  
							      								    	    count += count					  
7 64 LOAD_FAST 3 ( i )					      								    	    count += count					  
66 LOAD_FAST 1 ( m )					      								    	    count += count					  
68 COMPARE_OP 4 ( > )					      								    	    count += count					  
70 POP_JUMP_IF_FALSE 102				      								    	    count += count					  
							      								    	    count += count					  
8 72 LOAD_FAST 2 ( count )				      								    	    count += count					  
74 LOAD_FAST 3 ( i )					      								    	    count += count					  
76 LOAD_CONST 3 ( 1 )					      								    	    count += count					  
78 BINARY_SUBTRACT					      								    	    count += count					  
80 BINARY_SUBSCR					      								    	    count += count					  
82 LOAD_FAST 2 ( count )				      								    	    count += count					  
84 LOAD_FAST 3 ( i )					      								    	    count += count					  
86 LOAD_FAST 1 ( m )					      								    	    count += count					  
88 BINARY_SUBTRACT					      								    	    count += count					  
90 BINARY_SUBSCR					      								    	    count += count					  
92 BINARY_ADD						      								    	    count += count					  
94 LOAD_FAST 2 ( count )				      								    	    count += count					  
96 LOAD_FAST 3 ( i )					      								    	    count += count					  
98 STORE_SUBSCR						      								    	    count += count					  
100 JUMP_ABSOLUTE 60					      								    	    count += count					  
							      								    	    count += count					  
9 >> 102 LOAD_FAST 3 ( i )				      								    	    count += count					  
104 LOAD_FAST 1 ( m )					      								    	    count += count					  
106 COMPARE_OP 0 ( < )					      								    	    count += count					  
108 POP_JUMP_IF_FALSE 120				      								    	    count += count					  
							      								    	    count += count					  
10 110 LOAD_CONST 3 ( 1 )				      								    	    count += count					  
112 LOAD_FAST 2 ( count )				      								    	    count += count					  
114 LOAD_FAST 3 ( i )					      								    	    count += count					  
116 STORE_SUBSCR					      								    	    count += count					  
118 JUMP_ABSOLUTE 60					      								    	    count += count					  
							      								    	    count += count					  
12 >> 120 LOAD_CONST 1 ( 2 )				      								    	    count += count					  
122 LOAD_FAST 2 ( count )				      								    	    count += count					  
124 LOAD_FAST 3 ( i )					      								    	    count += count					  
126 STORE_SUBSCR					      								    	    count += count					  
128 JUMP_ABSOLUTE 60					      								    	    count += count					  
>> 130 POP_BLOCK					      								    	    count += count					  
							      								    	    count += count					  
13 >> 132 LOAD_FAST 2 ( count )				      								    	    count += count					  
134 LOAD_FAST 0 ( n )					      								    	    count += count					  
136 BINARY_SUBSCR					      								    	    count += count					  
138 RETURN_VALUE NEW_LINE				      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	    count += count					  
							      								    	return count						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_
--							      --							    --								  --
Disassembly of <code object getMinSquares at 0x7fbac0e89d20,  def getMinSquares ( n ) :					    def getMinSquares ( n , dp , x , y , z , z , z , z , z , z ,  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 , 1 , 2 , 3 ]				    								  
2 LOAD_CONST 2 ( 1 )					      	  for i in range ( 4 , n + 1 ) :			    								  
4 LOAD_CONST 3 ( 2 )					      	      dp.append ( i )					    								  
6 LOAD_CONST 4 ( 3 )					      	      for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1  								  
8 BUILD_LIST 4						      		  temp = x * x ;				    								  
10 STORE_FAST 1 ( dp )					      		  if temp > i :					    								  
							      		      break					    								  
3 12 SETUP_LOOP 118 ( to 132 )				      		  else :					    								  
14 LOAD_GLOBAL 0 ( range )				      		      dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp 								  
16 LOAD_CONST 5 ( 4 )					      	  return dp [ n ]					    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 100 ( to 130 )				      								    								  
30 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( dp )					      								    								  
34 LOAD_METHOD 1 ( append )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 CALL_METHOD 1					      								    								  
40 POP_TOP						      								    								  
							      								    								  
5 42 SETUP_LOOP 84 ( to 128 )				      								    								  
44 LOAD_GLOBAL 0 ( range )				      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 LOAD_GLOBAL 2 ( int )				      								    								  
50 LOAD_GLOBAL 3 ( ceil )				      								    								  
52 LOAD_GLOBAL 4 ( sqrt )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 2					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 54 ( to 126 )				      								    								  
72 STORE_FAST 3 ( x )					      								    								  
							      								    								  
6 74 LOAD_FAST 3 ( x )					      								    								  
76 LOAD_FAST 3 ( x )					      								    								  
78 BINARY_MULTIPLY					      								    								  
80 STORE_FAST 4 ( temp )				      								    								  
							      								    								  
7 82 LOAD_FAST 4 ( temp )				      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
8 90 BREAK_LOOP						      								    								  
92 JUMP_ABSOLUTE 70					      								    								  
							      								    								  
10 >> 94 LOAD_GLOBAL 5 ( min )				      								    								  
96 LOAD_FAST 1 ( dp )					      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 LOAD_FAST 1 ( dp )					      								    								  
106 LOAD_FAST 2 ( i )					      								    								  
108 LOAD_FAST 4 ( temp )				      								    								  
110 BINARY_SUBTRACT					      								    								  
112 BINARY_SUBSCR					      								    								  
114 BINARY_ADD						      								    								  
116 CALL_FUNCTION 2					      								    								  
118 LOAD_FAST 1 ( dp )					      								    								  
120 LOAD_FAST 2 ( i )					      								    								  
122 STORE_SUBSCR					      								    								  
124 JUMP_ABSOLUTE 70					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 JUMP_ABSOLUTE 28					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
11 >> 132 LOAD_FAST 1 ( dp )				      								    								  
134 LOAD_FAST 0 ( n )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	      HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	    HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	  HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS
--							      --							    --								  --
Disassembly of <code object findoptimal at 0x7fbac<<unk>> d54 def findoptimal ( N ) :					    def findoptimal ( N ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( N )					      	  if ( N <= 6 ) :					    	if N <= 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 1 ( 6 )					      	      return N						    	    return 0						  /HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR
4 COMPARE_OP 1 ( <= )					      	  screen = [ 0 ] * N					    	if N <= 0 :						  _KEYS.py", line 122	  if __name__ == '__main__':
6 POP_JUMP_IF_FALSE 12					      	  for n in range ( 1 , 7 ) :				    	    return 0						       ^ IndentationError: expected an indented bloc
							      	      screen [ n - 1 ] = n				    	elif N <= 0 :						  k
3 8 LOAD_FAST 0 ( N )					      	  for n in range ( 7 , N + 1 ) :			    	    return 0						  
10 RETURN_VALUE						      	      screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 	elif N <= 0 :						  
							      	  return screen [ N - 1 ]				    	    return 0						  
4 >> 12 LOAD_CONST 2 ( 0 )				      								    	elif N <= 0 :						  
14 BUILD_LIST 1						      								    	    return 0						  
16 LOAD_FAST 0 ( N )					      								    	elif N <= 0 :						  
18 BINARY_MULTIPLY					      								    	    return 0						  
20 STORE_FAST 1 ( screen )				      								    	elif N <= 0 :						  
							      								    	    return 0						  
5 22 SETUP_LOOP 30 ( to 54 )				      								    	elif N <= 0 :						  
24 LOAD_GLOBAL 0 ( range )				      								    	    return 0						  
26 LOAD_CONST 3 ( 1 )					      								    	elif N <= 0 :						  
28 LOAD_CONST 4 ( 7 )					      								    	    return 0						  
30 CALL_FUNCTION 2					      								    	elif N <= 0 :						  
32 GET_ITER						      								    	    return 0						  
>> 34 FOR_ITER 16 ( to 52 )				      								    	elif N <= 0 :						  
36 STORE_FAST 2 ( n )					      								    	    return 0						  
							      								    	elif N <= 0 :						  
6 38 LOAD_FAST 2 ( n )					      								    	    return 0						  
40 LOAD_FAST 1 ( screen )				      								    	elif N <= 0 :						  
42 LOAD_FAST 2 ( n )					      								    	    return 0						  
44 LOAD_CONST 3 ( 1 )					      								    	elif N <= 0 :						  
46 BINARY_SUBTRACT					      								    	    return 0						  
48 STORE_SUBSCR						      								    	elif N <= 0 :						  
50 JUMP_ABSOLUTE 34					      								    	    return 0						  
>> 52 POP_BLOCK						      								    	elif N <= 0 :						  
							      								    	    return 0						  
7 >> 54 SETUP_LOOP 82 ( to 138 )			      								    	elif N <= 0 :						  
56 LOAD_GLOBAL 0 ( range )				      								    	    return 0						  
58 LOAD_CONST 4 ( 7 )					      								    	elif N <= 0 :						  
60 LOAD_FAST 0 ( N )					      								    	    return 0						  
62 LOAD_CONST 3 ( 1 )					      								    	elif N <= 0 :						  
64 BINARY_ADD						      								    	    return 0						  
66 CALL_FUNCTION 2					      								    	elif N <= 0 :						  
68 GET_ITER						      								    	    return 0						  
>> 70 FOR_ITER 64 ( to 136 )				      								    	elif N <= 0 :						  
72 STORE_FAST 2 ( n )					      								    	    return 0						  
							      								    	elif N <= 0 :						  
8 74 LOAD_GLOBAL 1 ( max )				      								    	    return 0						  
76 LOAD_CONST 5 ( 2 )					      								    	elif N <= 0 :						  
78 LOAD_FAST 1 ( screen )				      								    	    return 0						  
80 LOAD_FAST 2 ( n )					      								    	elif N <= 0 :						  
82 LOAD_CONST 6 ( 4 )					      								    	    return 0						  
84 BINARY_SUBTRACT					      								    	elif N <= 0 :						  
86 BINARY_SUBSCR					      								    	    return 0						  
88 BINARY_MULTIPLY					      								    	elif N <= 0 :						  
90 LOAD_GLOBAL 1 ( max )				      								    	    return 0						  
92 LOAD_CONST 7 ( 3 )					      								    	elif N <= 0 :						  
94 LOAD_FAST 1 ( screen )				      								    	    return 0						  
96 LOAD_FAST 2 ( n )					      								    	elif N <= 0 :						  
98 LOAD_CONST 8 ( 5 )					      								    	    return 0						  
100 BINARY_SUBTRACT					      								    	elif N <= 0 :						  
102 BINARY_SUBSCR					      								    	    return 0						  
104 BINARY_MULTIPLY					      								    	elif N <= 0 :						  
106 LOAD_CONST 6 ( 4 )					      								    	    return 0						  
108 LOAD_FAST 1 ( screen )				      								    	elif N <= 0 :						  
110 LOAD_FAST 2 ( n )					      								    	    return 0						  
112 LOAD_CONST 1 ( 6 )					      								    	elif N <= 0 :						  
114 BINARY_SUBTRACT					      								    	    return 0						  
116 BINARY_SUBSCR					      								    	elif N <= 0 :						  
118 BINARY_MULTIPLY					      								    	    return 0						  
120 CALL_FUNCTION 2					      								    	elif N <= 0 :						  
122 CALL_FUNCTION 2					      								    	    return 0						  
124 LOAD_FAST 1 ( screen )				      								    	elif N <= 0 :						  
126 LOAD_FAST 2 ( n )					      								    	    return 0						  
128 LOAD_CONST 3 ( 1 )					      								    	elif N <= 0 :						  
130 BINARY_SUBTRACT					      								    	    return 0						  
132 STORE_SUBSCR					      								    	elif N <= 0 :						  
134 JUMP_ABSOLUTE 70					      								    	    return 0						  
>> 136 POP_BLOCK					      								    	elif N <= 0 :						  
							      								    	    return 0						  
9 >> 138 LOAD_FAST 1 ( screen )				      								    	elif N <= 0 :						  
140 LOAD_FAST 0 ( N )					      								    	    return 0						  
142 LOAD_CONST 3 ( 1 )					      								    	elif N <= 0 :						  
144 BINARY_SUBTRACT					      								    	    return 0						  
146 BINARY_SUBSCR					      								    	elif N <= 0 :						  
148 RETURN_VALUE NEW_LINE				      								    	    return 0						  
							      								    	elif N <= 0 :						  
							      								    	    return 0						  
							      								    	elif N <= 0 :						  
							      								    	    return 0						  
							      								    	elif N <= 0 :						  
							      								    	    return 0						  
							      								    	elif N <= 0 :						  
							      								    	    return 0						  
							      								    	elif N <= 0 :						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1
--							      --							    --								  --
Disassembly of <code object findMaxAverage at 0x7fbac<<unk>>  def findMaxAverage ( arr , n , k ) :			    def findMaxAverage ( arr , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( k )					      	  if ( k > n ) :					    	n = n [ n : n ]						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( n )					      	      return - 1					    	n = n [ n : n ]						  /FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1.py",
4 COMPARE_OP 4 ( > )					      	  sum = arr [ 0 ]					    	n = n [ n : n ]						  line 33     def f_filled ( arr , n , n ) :	 ^ S
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 1 , k ) :				    	n = n [ n : n ]						  yntaxError: duplicate argument 'n' in function def
							      	      sum += arr [ i ]					    	return n						  inition
3 8 LOAD_CONST 1 ( - 1 )				      	  max_sum = sum						    								  
10 RETURN_VALUE						      	  max_end = k - 1					    								  
							      	  for i in range ( k , n ) :				    								  
4 >> 12 LOAD_FAST 0 ( arr )				      	      sum = sum + arr [ i ] - arr [ i - k ]		    								  
14 LOAD_CONST 2 ( 0 )					      	      if ( sum > max_sum ) :				    								  
16 BINARY_SUBSCR					      		  max_sum = sum					    								  
18 STORE_FAST 3 ( sum )					      		  max_end = i					    								  
							      	  return max_end - k + 1				    								  
5 20 SETUP_LOOP 30 ( to 52 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 LOAD_FAST 2 ( k )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 16 ( to 50 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( sum )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 3 ( sum )					      								    								  
48 JUMP_ABSOLUTE 32					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 LOAD_FAST 3 ( sum )				      								    								  
54 STORE_FAST 5 ( max_sum )				      								    								  
							      								    								  
8 56 LOAD_FAST 2 ( k )					      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 STORE_FAST 6 ( max_end )				      								    								  
							      								    								  
9 64 SETUP_LOOP 58 ( to 124 )				      								    								  
66 LOAD_GLOBAL 0 ( range )				      								    								  
68 LOAD_FAST 2 ( k )					      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 44 ( to 122 )				      								    								  
78 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 80 LOAD_FAST 3 ( sum )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 4 ( i )					      								    								  
94 LOAD_FAST 2 ( k )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 STORE_FAST 3 ( sum )				      								    								  
							      								    								  
11 104 LOAD_FAST 3 ( sum )				      								    								  
106 LOAD_FAST 5 ( max_sum )				      								    								  
108 COMPARE_OP 4 ( > )					      								    								  
110 POP_JUMP_IF_FALSE 76				      								    								  
							      								    								  
12 112 LOAD_FAST 3 ( sum )				      								    								  
114 STORE_FAST 5 ( max_sum )				      								    								  
							      								    								  
13 116 LOAD_FAST 4 ( i )				      								    								  
118 STORE_FAST 6 ( max_end )				      								    								  
120 JUMP_ABSOLUTE 76					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
14 >> 124 LOAD_FAST 6 ( max_end )			      								    								  
126 LOAD_FAST 2 ( k )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1
--							      --							    --								  --
Disassembly of <code object substringConversions at 0x7fbac0e def substringConversions ( str1 , k , b ) :		    def substringConversions ( str1 , k , v , v , v , v , v , v , script_not_found : None
2 0 SETUP_LOOP 138 ( to 140 )				      	  for i in range ( 0 , len ( str1 ) - k + 1 ) :		    								  
2 LOAD_GLOBAL 0 ( range )				      	      sub = str1 [ i : k + i ]				    								  
4 LOAD_CONST 1 ( 0 )					      	      Sum = 0						    								  
6 LOAD_GLOBAL 1 ( len )					      	      counter = 0					    								  
8 LOAD_FAST 0 ( str1 )					      	      for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :	    								  
10 CALL_FUNCTION 1					      		  Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) 								  
12 LOAD_FAST 1 ( k )					      		  counter += 1					    								  
14 BINARY_SUBTRACT					      	      print ( Sum , end = " " )				    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 112 ( to 138 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 28 LOAD_FAST 0 ( str1 )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 LOAD_FAST 1 ( k )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_ADD						      								    								  
38 BUILD_SLICE 2					      								    								  
40 BINARY_SUBSCR					      								    								  
42 STORE_FAST 4 ( sub )					      								    								  
							      								    								  
4 44 LOAD_CONST 1 ( 0 )					      								    								  
46 STORE_FAST 5 ( Sum )					      								    								  
							      								    								  
5 48 LOAD_CONST 1 ( 0 )					      								    								  
50 STORE_FAST 6 ( counter )				      								    								  
							      								    								  
6 52 SETUP_LOOP 70 ( to 124 )				      								    								  
54 LOAD_GLOBAL 0 ( range )				      								    								  
56 LOAD_GLOBAL 1 ( len )				      								    								  
58 LOAD_FAST 4 ( sub )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_CONST 3 ( - 1 )					      								    								  
68 LOAD_CONST 3 ( - 1 )					      								    								  
70 CALL_FUNCTION 3					      								    								  
72 GET_ITER						      								    								  
>> 74 FOR_ITER 46 ( to 122 )				      								    								  
76 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 78 LOAD_FAST 5 ( Sum )				      								    								  
80 LOAD_GLOBAL 2 ( ord )				      								    								  
82 LOAD_FAST 4 ( sub )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 LOAD_GLOBAL 2 ( ord )				      								    								  
92 LOAD_CONST 4 ( '0' )					      								    								  
94 CALL_FUNCTION 1					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 LOAD_GLOBAL 3 ( pow )				      								    								  
100 LOAD_FAST 2 ( b )					      								    								  
102 LOAD_FAST 6 ( counter )				      								    								  
104 CALL_FUNCTION 2					      								    								  
106 BINARY_MULTIPLY					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 5 ( Sum )				      								    								  
							      								    								  
8 112 LOAD_FAST 6 ( counter )				      								    								  
114 LOAD_CONST 2 ( 1 )					      								    								  
116 INPLACE_ADD						      								    								  
118 STORE_FAST 6 ( counter )				      								    								  
120 JUMP_ABSOLUTE 74					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
9 >> 124 LOAD_GLOBAL 4 ( print )			      								    								  
126 LOAD_FAST 5 ( Sum )					      								    								  
128 LOAD_CONST 5 ( ' ' )				      								    								  
130 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
136 JUMP_ABSOLUTE 24					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_ FIND_MAXIMUM_VALUE_OF_SUM_IARRI_WITH_ONLY_ROTATIONS_ON_GIVEN_
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7fbac<<unk>> de40, fi def maxSum ( arr ) :					    def maxSum ( arr , arrSum = 1 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  arrSum = 0						    	"""							  
2 STORE_FAST 1 ( arrSum )				      	  currVal = 0						     Return the maximum array of the given array of the values	  
							      	  n = len ( arr )					     """							  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( 0 , n ) :				    	# Convert a list of values to the same array		  
6 STORE_FAST 2 ( currVal )				      	      arrSum = arrSum + arr [ i ]			    	if len ( arr ) > 0 :					  
							      	      currVal = currVal + ( i * arr [ i ] )		    	    return arr						  
4 8 LOAD_GLOBAL 0 ( len )				      	  maxVal = currVal					    	else :							  
10 LOAD_FAST 0 ( arr )					      	  for j in range ( 1 , n ) :				    	    return np.array ( arr )				  
12 CALL_FUNCTION 1					      	      currVal = currVal + arrSum - n * arr [ n - j ]	    								  
14 STORE_FAST 3 ( n )					      	      if currVal > maxVal :				    								  
							      		  maxVal = currVal				    								  
5 16 SETUP_LOOP 46 ( to 64 )				      	  return maxVal						    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 32 LOAD_FAST 1 ( arrSum )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_ADD						      								    								  
42 STORE_FAST 1 ( arrSum )				      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( currVal )				      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 2 ( currVal )				      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
8 >> 64 LOAD_FAST 2 ( currVal )				      								    								  
66 STORE_FAST 5 ( maxVal )				      								    								  
							      								    								  
9 68 SETUP_LOOP 54 ( to 124 )				      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 LOAD_FAST 3 ( n )					      								    								  
76 CALL_FUNCTION 2					      								    								  
78 GET_ITER						      								    								  
>> 80 FOR_ITER 40 ( to 122 )				      								    								  
82 STORE_FAST 6 ( j )					      								    								  
							      								    								  
10 84 LOAD_FAST 2 ( currVal )				      								    								  
86 LOAD_FAST 1 ( arrSum )				      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_FAST 3 ( n )					      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( n )					      								    								  
96 LOAD_FAST 6 ( j )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_MULTIPLY					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 STORE_FAST 2 ( currVal )				      								    								  
							      								    								  
11 108 LOAD_FAST 2 ( currVal )				      								    								  
110 LOAD_FAST 5 ( maxVal )				      								    								  
112 COMPARE_OP 4 ( > )					      								    								  
114 POP_JUMP_IF_FALSE 80				      								    								  
							      								    								  
12 116 LOAD_FAST 2 ( currVal )				      								    								  
118 STORE_FAST 5 ( maxVal )				      								    								  
120 JUMP_ABSOLUTE 80					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_FAST 5 ( maxVal )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			      REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM
--							      --							    --								  --
Disassembly of <code object rearrange at 0x7fbac0e89d20, file def rearrange ( arr , n ) :				    def rearrange ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( n )					      	  temp = n * [ None ]					    	n = n [ n : n ]						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_CONST 0 ( None )					      	  small , large = 0 , n - 1				    	n = n [ n : n ]						  /REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM.py", line 34
4 BUILD_LIST 1						      	  flag = True						    	n = n [ n : n ]						       def f_filled ( arr , n , n ) :	  ^ SyntaxEr
6 BINARY_MULTIPLY					      	  for i in range ( n ) :				    	n = n [ n : n ]						  ror: duplicate argument 'n' in function definition
8 STORE_FAST 2 ( temp )					      	      if flag is True :					    	return n						  
							      		  temp [ i ] = arr [ large ]			    								  
3 10 LOAD_CONST 1 ( 0 )					      		  large -= 1					    								  
12 LOAD_FAST 1 ( n )					      	      else :						    								  
14 LOAD_CONST 2 ( 1 )					      		  temp [ i ] = arr [ small ]			    								  
16 BINARY_SUBTRACT					      		  small += 1					    								  
18 ROT_TWO						      	      flag = bool ( 1 - flag )				    								  
20 STORE_FAST 3 ( small )				      	  for i in range ( n ) :				    								  
22 STORE_FAST 4 ( large )				      	      arr [ i ] = temp [ i ]				    								  
							      	  return arr						    								  
4 24 LOAD_CONST 3 ( True )				      								    								  
26 STORE_FAST 5 ( flag )				      								    								  
							      								    								  
5 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 66 ( to 106 )				      								    								  
40 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 5 ( flag )				      								    								  
44 LOAD_CONST 3 ( True )				      								    								  
46 COMPARE_OP 8 ( is )					      								    								  
48 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 4 ( large )				      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 2 ( temp )					      								    								  
58 LOAD_FAST 6 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
							      								    								  
8 62 LOAD_FAST 4 ( large )				      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 INPLACE_SUBTRACT					      								    								  
68 STORE_FAST 4 ( large )				      								    								  
70 JUMP_FORWARD 20 ( to 92 )				      								    								  
							      								    								  
10 >> 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 3 ( small )				      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 2 ( temp )					      								    								  
80 LOAD_FAST 6 ( i )					      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
11 84 LOAD_FAST 3 ( small )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 3 ( small )				      								    								  
							      								    								  
12 >> 92 LOAD_GLOBAL 1 ( bool )				      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 LOAD_FAST 5 ( flag )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 STORE_FAST 5 ( flag )				      								    								  
104 JUMP_ABSOLUTE 38					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
13 >> 108 SETUP_LOOP 28 ( to 138 )			      								    								  
110 LOAD_GLOBAL 0 ( range )				      								    								  
112 LOAD_FAST 1 ( n )					      								    								  
114 CALL_FUNCTION 1					      								    								  
116 GET_ITER						      								    								  
>> 118 FOR_ITER 16 ( to 136 )				      								    								  
120 STORE_FAST 6 ( i )					      								    								  
							      								    								  
14 122 LOAD_FAST 2 ( temp )				      								    								  
124 LOAD_FAST 6 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_FAST 0 ( arr )					      								    								  
130 LOAD_FAST 6 ( i )					      								    								  
132 STORE_SUBSCR					      								    								  
134 JUMP_ABSOLUTE 118					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
15 >> 138 LOAD_FAST 0 ( arr )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			      PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			    PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP				  PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP
--							      --							    --								  --
Disassembly of <code object printAllAPTriplets at 0x7fbac<<un def printAllAPTriplets ( arr , n ) :			    def printAllAPTripleplets ( arr , n , n , n ) :		  script_not_found : None
2 0 BUILD_LIST 0					      	  s = [ ] ;						    	n = n							  
2 STORE_FAST 2 ( s )					      	  for i in range ( 0 , n - 1 ) :			    	n = n							  
							      	      for j in range ( i + 1 , n ) :			    	for i in range ( n ) :					  
3 4 SETUP_LOOP 116 ( to 122 )				      		  diff = arr [ j ] - arr [ i ] ;		    	    n = n						  
6 LOAD_GLOBAL 0 ( range )				      		  if ( ( arr [ i ] - diff ) in arr ) :		    	    n [ n ] = n						  
8 LOAD_CONST 1 ( 0 )					      		      print ( "{} {} {}".format ( ( arr [ i ] - dif 	    n [ n ] = n						  
10 LOAD_FAST 1 ( n )					      	  s.append ( arr [ i ] ) ;				    	    n [ n ] = n						  
12 LOAD_CONST 2 ( 1 )					      								    	    n [ n ] = n						  
14 BINARY_SUBTRACT					      								    	return n						  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 98 ( to 120 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 92 ( to 118 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 74 ( to 116 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
6 60 LOAD_FAST 0 ( arr )				      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 5 ( diff )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 COMPARE_OP 6 ( in )					      								    								  
74 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
7 76 LOAD_GLOBAL 1 ( print )				      								    								  
78 LOAD_CONST 3 ( '{} {} {}' )				      								    								  
80 LOAD_METHOD 2 ( format )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 5 ( diff )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 4 ( j )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 CALL_METHOD 3					      								    								  
106 LOAD_CONST 4 ( '\n' )				      								    								  
108 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
110 CALL_FUNCTION_KW 2					      								    								  
112 POP_TOP						      								    								  
114 JUMP_ABSOLUTE 40					      								    								  
>> 116 POP_BLOCK					      								    								  
>> 118 JUMP_ABSOLUTE 20					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
8 >> 122 LOAD_FAST 2 ( s )				      								    								  
124 LOAD_METHOD 3 ( append )				      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 3 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 CALL_METHOD 1					      								    								  
134 POP_TOP						      								    								  
136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_TRIANGLE				      MAXIMUM_PATH_SUM_TRIANGLE					    MAXIMUM_PATH_SUM_TRIANGLE					  MAXIMUM_PATH_SUM_TRIANGLE
--							      --							    --								  --
Disassembly of <code object maxPathSum at 0x7fbac<<unk>> d540 def maxPathSum ( tri , m , n ) :				    def maxPathSum ( tri = None , m = 1 ) :			  script_not_found : None
2 0 SETUP_LOOP 152 ( to 154 )				      	  for i in range ( m - 1 , - 1 , - 1 ) :		    	for i in range ( 1 , m ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i + 1 ) :			    	    if i < len ( tri ) :				  
4 LOAD_FAST 1 ( m )					      		  if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1  		return i					  
6 LOAD_CONST 1 ( 1 )					      		      tri [ i ] [ j ] += tri [ i + 1 ] [ j ]	    	return None						  
8 BINARY_SUBTRACT					      		  else :					    								  
10 LOAD_CONST 2 ( - 1 )					      		      tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]    								  
12 LOAD_CONST 2 ( - 1 )					      	  return tri [ 0 ] [ 0 ]				    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 132 ( to 152 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 22 SETUP_LOOP 126 ( to 150 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 110 ( to 148 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( tri )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( tri )					      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
5 76 LOAD_FAST 0 ( tri )				      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_FAST 4 ( j )					      								    								  
84 DUP_TOP_TWO						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( tri )					      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 4 ( j )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 INPLACE_ADD						      								    								  
104 ROT_THREE						      								    								  
106 STORE_SUBSCR					      								    								  
108 JUMP_ABSOLUTE 36					      								    								  
							      								    								  
7 >> 110 LOAD_FAST 0 ( tri )				      								    								  
112 LOAD_FAST 3 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 4 ( j )					      								    								  
118 DUP_TOP_TWO						      								    								  
120 BINARY_SUBSCR					      								    								  
122 LOAD_FAST 0 ( tri )					      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 LOAD_CONST 1 ( 1 )					      								    								  
128 BINARY_ADD						      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_FAST 4 ( j )					      								    								  
134 LOAD_CONST 1 ( 1 )					      								    								  
136 BINARY_ADD						      								    								  
138 BINARY_SUBSCR					      								    								  
140 INPLACE_ADD						      								    								  
142 ROT_THREE						      								    								  
144 STORE_SUBSCR					      								    								  
146 JUMP_ABSOLUTE 36					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 JUMP_ABSOLUTE 18					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
8 >> 154 LOAD_FAST 0 ( tri )				      								    								  
156 LOAD_CONST 3 ( 0 )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 LOAD_CONST 3 ( 0 )					      								    								  
162 BINARY_SUBSCR					      								    								  
164 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		      MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		    MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		  MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS
--							      --							    --								  --
Disassembly of <code object maximumSum at 0x7fbac0e8bc90, fil def maximumSum ( arr , n , k ) :				    def maximumSum ( arr , n , n , n ) :			  script_not_found : None
2 0 SETUP_LOOP 96 ( to 98 )				      	  for i in range ( 1 , k + 1 ) :			    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      min = + 2147483647				    	    n = n - n						  
4 LOAD_CONST 1 ( 1 )					      	      index = - 1					    	return n						  
6 LOAD_FAST 2 ( k )					      	      for j in range ( n ) :				    								  
8 LOAD_CONST 1 ( 1 )					      		  if ( arr [ j ] < min ) :			    								  
10 BINARY_ADD						      		      min = arr [ j ]				    								  
12 CALL_FUNCTION 2					      		      index = j					    								  
14 GET_ITER						      	      if ( min == 0 ) :					    								  
>> 16 FOR_ITER 78 ( to 96 )				      		  break						    								  
18 STORE_FAST 3 ( i )					      	      arr [ index ] = - arr [ index ]			    								  
							      	  sum = 0						    								  
3 20 LOAD_CONST 2 ( 2147483647 )			      	  for i in range ( n ) :				    								  
22 STORE_FAST 4 ( min )					      	      sum += arr [ i ]					    								  
							      	  return sum						    								  
4 24 LOAD_CONST 3 ( - 1 )				      								    								  
26 STORE_FAST 5 ( index )				      								    								  
							      								    								  
5 28 SETUP_LOOP 40 ( to 70 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 6 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 4 ( min )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
7 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 STORE_FAST 4 ( min )					      								    								  
							      								    								  
8 62 LOAD_FAST 6 ( j )					      								    								  
64 STORE_FAST 5 ( index )				      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_FAST 4 ( min )				      								    								  
72 LOAD_CONST 4 ( 0 )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 78 BREAK_LOOP					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 5 ( index )				      								    								  
84 BINARY_SUBSCR					      								    								  
86 UNARY_NEGATIVE					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 5 ( index )				      								    								  
92 STORE_SUBSCR						      								    								  
94 JUMP_ABSOLUTE 16					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
12 >> 98 LOAD_CONST 4 ( 0 )				      								    								  
100 STORE_FAST 7 ( sum )				      								    								  
							      								    								  
13 102 SETUP_LOOP 28 ( to 132 )				      								    								  
104 LOAD_GLOBAL 0 ( range )				      								    								  
106 LOAD_FAST 1 ( n )					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 GET_ITER						      								    								  
>> 112 FOR_ITER 16 ( to 130 )				      								    								  
114 STORE_FAST 3 ( i )					      								    								  
							      								    								  
14 116 LOAD_FAST 7 ( sum )				      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 INPLACE_ADD						      								    								  
126 STORE_FAST 7 ( sum )				      								    								  
128 JUMP_ABSOLUTE 112					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
15 >> 132 LOAD_FAST 7 ( sum )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_EQULIBRIUM_SUM_ARRAY				      MAXIMUM_EQULIBRIUM_SUM_ARRAY				    MAXIMUM_EQULIBRIUM_SUM_ARRAY				  MAXIMUM_EQULIBRIUM_SUM_ARRAY
--							      --							    --								  --
Disassembly of <code object findMaxSum at 0x7fbac<<unk>> d540 def findMaxSum ( arr , n ) :				    def findMaxSum ( arr , n = 1 ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sys )				      	  res = - sys.maxsize - 1				    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_ATTR 1 ( maxsize )				      	  for i in range ( n ) :				    								  /MAXIMUM_EQULIBRIUM_SUM_ARRAY.py", line 56	 pri
4 UNARY_NEGATIVE					      	      prefix_sum = arr [ i ]				    								  nt("#Results: %i, %i" % (n_success, len(param)))
6 LOAD_CONST 1 ( 1 )					      	      for j in range ( i ) :				    								  
8 BINARY_SUBTRACT					      		  prefix_sum += arr [ j ]			    								     ^ SyntaxError: EOF while scanning triple-quoted
10 STORE_FAST 2 ( res )					      	      suffix_sum = arr [ i ]				    								   string literal
							      	      j = n - 1						    								  
3 12 SETUP_LOOP 122 ( to 136 )				      	      while ( j > i ) :					    								  
14 LOAD_GLOBAL 2 ( range )				      		  suffix_sum += arr [ j ]			    								  
16 LOAD_FAST 1 ( n )					      		  j -= 1					    								  
18 CALL_FUNCTION 1					      	      if ( prefix_sum == suffix_sum ) :			    								  
20 GET_ITER						      		  res = max ( res , prefix_sum )		    								  
>> 22 FOR_ITER 110 ( to 134 )				      	  return res						    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( arr )				      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 STORE_FAST 4 ( prefix_sum )				      								    								  
							      								    								  
5 34 SETUP_LOOP 28 ( to 64 )				      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 16 ( to 62 )				      								    								  
46 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( prefix_sum )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 4 ( prefix_sum )				      								    								  
60 JUMP_ABSOLUTE 44					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_FAST 6 ( suffix_sum )				      								    								  
							      								    								  
8 72 LOAD_FAST 1 ( n )					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 80 SETUP_LOOP 32 ( to 114 )				      								    								  
>> 82 LOAD_FAST 5 ( j )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 90 LOAD_FAST 6 ( suffix_sum )			      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 5 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 6 ( suffix_sum )				      								    								  
							      								    								  
11 102 LOAD_FAST 5 ( j )				      								    								  
104 LOAD_CONST 1 ( 1 )					      								    								  
106 INPLACE_SUBTRACT					      								    								  
108 STORE_FAST 5 ( j )					      								    								  
110 JUMP_ABSOLUTE 82					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
12 >> 114 LOAD_FAST 4 ( prefix_sum )			      								    								  
116 LOAD_FAST 6 ( suffix_sum )				      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 22				      								    								  
							      								    								  
13 122 LOAD_GLOBAL 3 ( max )				      								    								  
124 LOAD_FAST 2 ( res )					      								    								  
126 LOAD_FAST 4 ( prefix_sum )				      								    								  
128 CALL_FUNCTION 2					      								    								  
130 STORE_FAST 2 ( res )				      								    								  
132 JUMP_ABSOLUTE 22					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
14 >> 136 LOAD_FAST 2 ( res )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES      PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	    PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	  PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES
--							      --							    --								  --
Disassembly of <code object printString at 0x7fbac0e89d20, fi def printString ( str , ch , count ) :			    def printString ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				      	  occ , i = 0 , 0					    	"""							  
2 UNPACK_SEQUENCE 2					      	  if ( count == 0 ) :					     Return a string of the string to a string and returns a stri 
4 STORE_FAST 3 ( occ )					      	      print ( str )					     string of the string and returns a string of the string	  
6 STORE_FAST 4 ( i )					      	  for i in range ( len ( str ) ) :			     """							  
							      	      if ( str [ i ] == ch ) :				    	print ( str ( str ) )					  
3 8 LOAD_FAST 2 ( count )				      		  occ += 1					    	print ( str ( str ) )					  
10 LOAD_CONST 2 ( 0 )					      	      if ( occ == count ) :				    	print ( str ( str ) )					  
12 COMPARE_OP 2 ( == )					      		  break						    	print ( str ( str ) )					  
14 POP_JUMP_IF_FALSE 24					      	  if ( i < len ( str ) - 1 ) :				    	print ( str ( str ) )					  
							      	      print ( str [ i + 1 : len ( str ) - i + 2 ] )	    	print ( str ( str ) )					  
4 16 LOAD_GLOBAL 0 ( print )				      	  else :						    	print ( str ( str ) )					  
18 LOAD_FAST 0 ( str )					      	      print ( "Empty string" )				    	print ( str ( str ) )					  
20 CALL_FUNCTION 1					      								    	print ( str ( str ) )					  
22 POP_TOP						      								    	print ( str ( str ) )					  
							      								    	print ( str ( str ) )					  
5 >> 24 SETUP_LOOP 50 ( to 76 )				      								    	print ( str ( str ) )					  
26 LOAD_GLOBAL 1 ( range )				      								    	print ( str ( str ) )					  
28 LOAD_GLOBAL 2 ( len )				      								    	print ( str ( str ) )					  
30 LOAD_FAST 0 ( str )					      								    	print ( str ( str ) )					  
32 CALL_FUNCTION 1					      								    	print ( str ( str ) )					  
34 CALL_FUNCTION 1					      								    	print ( str ( str ) )					  
36 GET_ITER						      								    	print ( str ( str ) )					  
>> 38 FOR_ITER 34 ( to 74 )				      								    	print ( str ( str ) )					  
40 STORE_FAST 4 ( i )					      								    	print ( str ( str ) )					  
							      								    	print ( str ( str ) )					  
6 42 LOAD_FAST 0 ( str )				      								    	print ( str ( str ) )					  
44 LOAD_FAST 4 ( i )					      								    	print ( str ( str ) )					  
46 BINARY_SUBSCR					      								    	print ( str ( str ) )					  
48 LOAD_FAST 1 ( ch )					      								    	print ( str ( str ) )					  
50 COMPARE_OP 2 ( == )					      								    	print ( str ( str ) )					  
52 POP_JUMP_IF_FALSE 62					      								    	print ( str ( str ) )					  
							      								    	print ( str ( str ) )					  
7 54 LOAD_FAST 3 ( occ )				      								    	print ( str ( str ) )					  
56 LOAD_CONST 3 ( 1 )					      								    	print ( str ( str ( str ) )				  
58 INPLACE_ADD						      								    	print ( str ( str ) )					  
60 STORE_FAST 3 ( occ )					      								    	print ( str ( str ) )					  
							      								    	print ( str ( str ) )					  
8 >> 62 LOAD_FAST 3 ( occ )				      								    	print ( str ( str ) )					  
64 LOAD_FAST 2 ( count )				      								    	print ( str ( str ) )					  
66 COMPARE_OP 2 ( == )					      								    	print ( str ( str ) )					  
68 POP_JUMP_IF_FALSE 38					      								    	print ( str ( str ) )					  
							      								    	print ( str ( str ) )					  
9 70 BREAK_LOOP						      								    	print ( str ( str ( str ) )				  
72 JUMP_ABSOLUTE 38					      								    	print ( str ( str ) )					  
>> 74 POP_BLOCK						      								    	print ( str ( str ) )					  
							      								    	print ( str ( str ) )					  
10 >> 76 LOAD_FAST 4 ( i )				      								    	print ( str ( str ) )					  
78 LOAD_GLOBAL 2 ( len )				      								    	print ( str ( str ) )					  
80 LOAD_FAST 0 ( str )					      								    	print ( str ( str ) )					  
82 CALL_FUNCTION 1					      								    	print ( str ( str ) )					  
84 LOAD_CONST 3 ( 1 )					      								    	print ( str ( str ( str ) )				  
86 BINARY_SUBTRACT					      								    	print ( str ( str ( str ) )				  
88 COMPARE_OP 0 ( < )					      								    	print ( str ( str ( str ) )				  
90 POP_JUMP_IF_FALSE 126				      								    	print ( str ( str ( str ) ) )				  
							      								    	print ( str ( str ) )					  
11 92 LOAD_GLOBAL 0 ( print )				      								    	print ( str ( str ) )					  
94 LOAD_FAST 0 ( str )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 LOAD_CONST 3 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_GLOBAL 2 ( len )				      								    								  
104 LOAD_FAST 0 ( str )					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 LOAD_CONST 4 ( 2 )					      								    								  
114 BINARY_ADD						      								    								  
116 BUILD_SLICE 2					      								    								  
118 BINARY_SUBSCR					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 POP_TOP						      								    								  
124 JUMP_FORWARD 8 ( to 134 )				      								    								  
							      								    								  
13 >> 126 LOAD_GLOBAL 0 ( print )			      								    								  
128 LOAD_CONST 5 ( 'Empty string' )			      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		      FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		    FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY		  FIND_THE_LARGEST_PAIR_SUM_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object findLargestSumPair at 0x7fbac<<un def findLargestSumPair ( arr , n ) :			    def findLargestSumPair ( arr , n , n ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  if arr [ 0 ] > arr [ 1 ] :				    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      first = arr [ 0 ]					    	    return 0						  
4 BINARY_SUBSCR						      	      second = arr [ 1 ]				    	else :							  
6 LOAD_FAST 0 ( arr )					      	  else :						    	    return 0						  
8 LOAD_CONST 2 ( 1 )					      	      first = arr [ 1 ]					    								  
10 BINARY_SUBSCR					      	      second = arr [ 0 ]				    								  
12 COMPARE_OP 4 ( > )					      	  for i in range ( 2 , n ) :				    								  
14 POP_JUMP_IF_FALSE 34					      	      if arr [ i ] > first :				    								  
							      		  second = first				    								  
3 16 LOAD_FAST 0 ( arr )				      		  first = arr [ i ]				    								  
18 LOAD_CONST 1 ( 0 )					      	      elif arr [ i ] > second and arr [ i ] != first :	    								  
20 BINARY_SUBSCR					      		  second = arr [ i ]				    								  
22 STORE_FAST 2 ( first )				      	  return ( first + second )				    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 STORE_FAST 3 ( second )				      								    								  
32 JUMP_FORWARD 16 ( to 50 )				      								    								  
							      								    								  
6 >> 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 STORE_FAST 2 ( first )				      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_FAST 3 ( second )				      								    								  
							      								    								  
8 >> 50 SETUP_LOOP 76 ( to 128 )			      								    								  
52 LOAD_GLOBAL 0 ( range )				      								    								  
54 LOAD_CONST 3 ( 2 )					      								    								  
56 LOAD_FAST 1 ( n )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 62 ( to 126 )				      								    								  
64 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 66 LOAD_FAST 0 ( arr )				      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 2 ( first )				      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
10 78 LOAD_FAST 2 ( first )				      								    								  
80 STORE_FAST 3 ( second )				      								    								  
							      								    								  
11 82 LOAD_FAST 0 ( arr )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 STORE_FAST 2 ( first )				      								    								  
90 JUMP_ABSOLUTE 62					      								    								  
							      								    								  
12 >> 92 LOAD_FAST 0 ( arr )				      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 3 ( second )				      								    								  
100 COMPARE_OP 4 ( > )					      								    								  
102 POP_JUMP_IF_FALSE 62				      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 4 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 2 ( first )				      								    								  
112 COMPARE_OP 3 ( != )					      								    								  
114 POP_JUMP_IF_FALSE 62				      								    								  
							      								    								  
13 116 LOAD_FAST 0 ( arr )				      								    								  
118 LOAD_FAST 4 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 STORE_FAST 3 ( second )				      								    								  
124 JUMP_ABSOLUTE 62					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
14 >> 128 LOAD_FAST 2 ( first )				      								    								  
130 LOAD_FAST 3 ( second )				      								    								  
132 BINARY_ADD						      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE_1			      LONGEST_INCREASING_SUBSEQUENCE_1				    LONGEST_INCREASING_SUBSEQUENCE_1				  LONGEST_INCREASING_SUBSEQUENCE_1
--							      --							    --								  --
Disassembly of <code object lis at 0x7fbac<<unk>> de40, file  def lis ( arr ) :						    def lis ( arr , n , keep = 1 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN 
2 LOAD_FAST 0 ( arr )					      	  lis = [ 1 ] * n					    								  
4 CALL_FUNCTION 1					      	  for i in range ( 1 , n ) :				    								  
6 STORE_FAST 1 ( n )					      	      for j in range ( 0 , i ) :			    								  
							      		  if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  								  
3 8 LOAD_CONST 1 ( 1 )					      		      lis [ i ] = lis [ j ] + 1			    								  
10 BUILD_LIST 1						      	  maximum = 0						    								  
12 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    								  
14 BINARY_MULTIPLY					      	      maximum = max ( maximum , lis [ i ] )		    								  
16 STORE_FAST 2 ( lis )					      	  return maximum					    								  
							      								    								  
4 18 SETUP_LOOP 90 ( to 110 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 76 ( to 108 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 34 SETUP_LOOP 70 ( to 106 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_CONST 2 ( 0 )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 56 ( to 104 )				      								    								  
48 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 4 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 4 ( > )					      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
66 LOAD_FAST 2 ( lis )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 2 ( lis )					      								    								  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 86 LOAD_FAST 2 ( lis )				      								    								  
88 LOAD_FAST 4 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 2 ( lis )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 STORE_SUBSCR					      								    								  
102 JUMP_ABSOLUTE 46					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 30					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
8 >> 110 LOAD_CONST 2 ( 0 )				      								    								  
112 STORE_FAST 5 ( maximum )				      								    								  
							      								    								  
9 114 SETUP_LOOP 30 ( to 146 )				      								    								  
116 LOAD_GLOBAL 1 ( range )				      								    								  
118 LOAD_FAST 1 ( n )					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 18 ( to 144 )				      								    								  
126 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 128 LOAD_GLOBAL 2 ( max )				      								    								  
130 LOAD_FAST 5 ( maximum )				      								    								  
132 LOAD_FAST 2 ( lis )					      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 STORE_FAST 5 ( maximum )				      								    								  
142 JUMP_ABSOLUTE 124					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
11 >> 146 LOAD_FAST 5 ( maximum )			      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2		    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE_2
--							      --							    --								  --
Disassembly of <code object find3Numbers at 0x7fbac<<unk>> de def find3Numbers ( A , arr_size , sum ) :			    def find3Dayacde_test_clean_username_success ( A , arr_size = error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 132 ( to 134 )				      	  for i in range ( 0 , arr_size - 1 ) :			    	for i in range ( arr_size ) :				  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      s = set ( )					    	    i = i						  /eval_scripts/dis_sa-python_sa.test/FIND_A_TRIPLET
4 LOAD_CONST 1 ( 0 )					      	      curr_sum = sum - A [ i ]				    	    i = i						  _THAT_SUM_TO_A_GIVEN_VALUE_2.py", line 167, in <mo
6 LOAD_FAST 1 ( arr_size )				      	      for j in range ( i + 1 , arr_size ) :		    	    i = i						  dule>	    if f_filled(*parameters_set) == f_gold(*
8 LOAD_CONST 2 ( 1 )					      		  if ( curr_sum - A [ j ] ) in s :		    	    while i < arr_size :				  parameters_set): TypeError: f_filled() takes from
10 BINARY_SUBTRACT					      		      print ( "Triplet is" , A [ i ] , ", " , A [ j 		i = i						  1 to 2 positional arguments but 3 were given
12 CALL_FUNCTION 2					      		      return True				    		i = i						  
14 GET_ITER						      		  s.add ( A [ j ] )				    		i = i						  
>> 16 FOR_ITER 114 ( to 132 )				      	  return False						    		i = i						  
18 STORE_FAST 3 ( i )					      								    		i = i						  
							      								    		i = i						  
3 20 LOAD_GLOBAL 1 ( set )				      								    		i = i						  
22 CALL_FUNCTION 0					      								    		i = i						  
24 STORE_FAST 4 ( s )					      								    		i = i						  
							      								    		i = i						  
4 26 LOAD_FAST 2 ( sum )				      								    		i = i						  
28 LOAD_FAST 0 ( A )					      								    		i = i						  
30 LOAD_FAST 3 ( i )					      								    		i = i						  
32 BINARY_SUBSCR					      								    		i = i						  
34 BINARY_SUBTRACT					      								    		i = i						  
36 STORE_FAST 5 ( curr_sum )				      								    		i = i						  
							      								    		i = i						  
5 38 SETUP_LOOP 90 ( to 130 )				      								    		i = i						  
40 LOAD_GLOBAL 0 ( range )				      								    		i = i						  
42 LOAD_FAST 3 ( i )					      								    		i = i						  
44 LOAD_CONST 2 ( 1 )					      								    		i = i						  
46 BINARY_ADD						      								    		i = i						  
48 LOAD_FAST 1 ( arr_size )				      								    		i = i						  
50 CALL_FUNCTION 2					      								    		i = i						  
52 GET_ITER						      								    		i = i						  
>> 54 FOR_ITER 72 ( to 128 )				      								    		i = i						  
56 STORE_FAST 6 ( j )					      								    		i = i						  
							      								    		i = i						  
6 58 LOAD_FAST 5 ( curr_sum )				      								    		i = i						  
60 LOAD_FAST 0 ( A )					      								    		i = i						  
62 LOAD_FAST 6 ( j )					      								    		i = i						  
64 BINARY_SUBSCR					      								    		i = i						  
66 BINARY_SUBTRACT					      								    		i = i						  
68 LOAD_FAST 4 ( s )					      								    		i = i						  
70 COMPARE_OP 6 ( in )					      								    		i = i						  
72 POP_JUMP_IF_FALSE 112				      								    		i = i						  
							      								    		i = i						  
7 74 LOAD_GLOBAL 2 ( print )				      								    		i = i						  
76 LOAD_CONST 3 ( 'Triplet is' )			      								    		i = i						  
78 LOAD_FAST 0 ( A )					      								    		i = i						  
80 LOAD_FAST 3 ( i )					      								    		i = i						  
82 BINARY_SUBSCR					      								    		i = i						  
84 LOAD_CONST 4 ( ', ' )				      								    		i = i						  
86 LOAD_FAST 0 ( A )					      								    		i = i						  
88 LOAD_FAST 6 ( j )					      								    		i = i						  
90 BINARY_SUBSCR					      								    		i = i						  
92 LOAD_CONST 4 ( ', ' )				      								    		i = i						  
94 LOAD_FAST 5 ( curr_sum )				      								    		i = i						  
96 LOAD_FAST 0 ( A )					      								    		i = i						  
98 LOAD_FAST 6 ( j )					      								    		i = i						  
100 BINARY_SUBSCR					      								    		i = i						  
102 BINARY_SUBTRACT					      								    		i = i						  
104 CALL_FUNCTION 6					      								    		i = i						  
106 POP_TOP						      								    		i = i						  
							      								    		i = i						  
8 108 LOAD_CONST 5 ( True )				      								    		i = i						  
110 RETURN_VALUE					      								    		i = i						  
							      								    		i = i						  
9 >> 112 LOAD_FAST 4 ( s )				      								    		i = i						  
114 LOAD_METHOD 3 ( add )				      								    		i = i						  
116 LOAD_FAST 0 ( A )					      								    		i = i						  
118 LOAD_FAST 6 ( j )					      								    		i = i						  
120 BINARY_SUBSCR					      								    		i = i						  
122 CALL_METHOD 1					      								    		i = i						  
124 POP_TOP						      								    		i = i						  
126 JUMP_ABSOLUTE 54					      								    		i = i						  
>> 128 POP_BLOCK					      								    		i = i						  
>> 130 JUMP_ABSOLUTE 16					      								    		i = i						  
>> 132 POP_BLOCK					      								    		i = i						  
							      								    		i = i						  
10 >> 134 LOAD_CONST 6 ( False )			      								    		i = i						  
136 RETURN_VALUE NEW_LINE				      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
							      								    		i = i						  
-							      -								    		i-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_AN_ARRAY_OF_0S_1S_AND_2S				      SORT_AN_ARRAY_OF_0S_1S_AND_2S				    SORT_AN_ARRAY_OF_0S_1S_AND_2S				  SORT_AN_ARRAY_OF_0S_1S_AND_2S
--							      --							    --								  --
Disassembly of <code object sort012 at 0x7fbac0e89d20, file " def sort012 ( a , arr_size ) :				    def sort012 ( a , arr_size = 0 , size = 1 ) :		  failure : #Results: 2, 10
2 0 LOAD_CONST 1 ( 0 )					      	  lo = 0						    	"""							  
2 STORE_FAST 2 ( lo )					      	  hi = arr_size - 1					     Returns a list of a given size of a given size and the given 
							      	  mid = 0						     size is a list of the given size of the given size of the si 
3 4 LOAD_FAST 1 ( arr_size )				      	  while mid <= hi :					     size is the size of the size size size size size.		  
6 LOAD_CONST 2 ( 1 )					      	      if a [ mid ] == 0 :				    								  
8 BINARY_SUBTRACT					      		  a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]	     Returns:							  
10 STORE_FAST 3 ( hi )					      		  lo = lo + 1					     a list of the size size size size (i.e.size size)		  
							      		  mid = mid + 1					     """							  
4 12 LOAD_CONST 1 ( 0 )					      	      elif a [ mid ] == 1 :				    	for i in range ( arr_size ) :				  
14 STORE_FAST 4 ( mid )					      		  mid = mid + 1					    	    if size < size :					  
							      	      else :						    		size = i					  
5 16 SETUP_LOOP 124 ( to 142 )				      		  a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]	    	return a						  
>> 18 LOAD_FAST 4 ( mid )				      		  hi = hi - 1					    								  
20 LOAD_FAST 3 ( hi )					      								    								  
22 COMPARE_OP 1 ( <= )					      								    								  
24 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
6 26 LOAD_FAST 0 ( a )					      								    								  
28 LOAD_FAST 4 ( mid )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
7 38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 4 ( mid )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( a )					      								    								  
46 LOAD_FAST 2 ( lo )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 ROT_TWO						      								    								  
52 LOAD_FAST 0 ( a )					      								    								  
54 LOAD_FAST 2 ( lo )					      								    								  
56 STORE_SUBSCR						      								    								  
58 LOAD_FAST 0 ( a )					      								    								  
60 LOAD_FAST 4 ( mid )					      								    								  
62 STORE_SUBSCR						      								    								  
							      								    								  
8 64 LOAD_FAST 2 ( lo )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 2 ( lo )					      								    								  
							      								    								  
9 72 LOAD_FAST 4 ( mid )				      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 STORE_FAST 4 ( mid )					      								    								  
80 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
10 >> 82 LOAD_FAST 0 ( a )				      								    								  
84 LOAD_FAST 4 ( mid )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
11 94 LOAD_FAST 4 ( mid )				      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 STORE_FAST 4 ( mid )				      								    								  
102 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
13 >> 104 LOAD_FAST 0 ( a )				      								    								  
106 LOAD_FAST 3 ( hi )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 0 ( a )					      								    								  
112 LOAD_FAST 4 ( mid )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 ROT_TWO						      								    								  
118 LOAD_FAST 0 ( a )					      								    								  
120 LOAD_FAST 4 ( mid )					      								    								  
122 STORE_SUBSCR					      								    								  
124 LOAD_FAST 0 ( a )					      								    								  
126 LOAD_FAST 3 ( hi )					      								    								  
128 STORE_SUBSCR					      								    								  
							      								    								  
14 130 LOAD_FAST 3 ( hi )				      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 STORE_FAST 3 ( hi )					      								    								  
138 JUMP_ABSOLUTE 18					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 LOAD_CONST 0 ( None )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1			      LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1			    LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1			  LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS_1
--							      --							    --								  --
Disassembly of <code object longestCommonSum at 0x7fbac0e8bc9 def longestCommonSum ( arr1 , arr2 , n ) :		    def longestCommonSum ( ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxLen = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE 
2 STORE_FAST 3 ( maxLen )				      	  presum1 = presum2 = 0					    								  
							      	  diff = { }						    								  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    								  
6 DUP_TOP						      	      presum1 += arr1 [ i ]				    								  
8 STORE_FAST 4 ( presum1 )				      	      presum2 += arr2 [ i ]				    								  
10 STORE_FAST 5 ( presum2 )				      	      curr_diff = presum1 - presum2			    								  
							      	      if curr_diff == 0 :				    								  
4 12 BUILD_MAP 0					      		  maxLen = i + 1				    								  
14 STORE_FAST 6 ( diff )				      	      elif curr_diff not in diff :			    								  
							      		  diff [ curr_diff ] = i			    								  
5 16 SETUP_LOOP 106 ( to 124 )				      	      else :						    								  
18 LOAD_GLOBAL 0 ( range )				      		  length = i - diff [ curr_diff ]		    								  
20 LOAD_FAST 2 ( n )					      		  maxLen = max ( maxLen , length )		    								  
22 CALL_FUNCTION 1					      	  return maxLen						    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 94 ( to 122 )				      								    								  
28 STORE_FAST 7 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 4 ( presum1 )				      								    								  
32 LOAD_FAST 0 ( arr1 )					      								    								  
34 LOAD_FAST 7 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 4 ( presum1 )				      								    								  
							      								    								  
7 42 LOAD_FAST 5 ( presum2 )				      								    								  
44 LOAD_FAST 1 ( arr2 )					      								    								  
46 LOAD_FAST 7 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 5 ( presum2 )				      								    								  
							      								    								  
8 54 LOAD_FAST 4 ( presum1 )				      								    								  
56 LOAD_FAST 5 ( presum2 )				      								    								  
58 BINARY_SUBTRACT					      								    								  
60 STORE_FAST 8 ( curr_diff )				      								    								  
							      								    								  
9 62 LOAD_FAST 8 ( curr_diff )				      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 70 LOAD_FAST 7 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_FAST 3 ( maxLen )				      								    								  
78 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 8 ( curr_diff )			      								    								  
82 LOAD_FAST 6 ( diff )					      								    								  
84 COMPARE_OP 7 ( not in )				      								    								  
86 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
12 88 LOAD_FAST 7 ( i )					      								    								  
90 LOAD_FAST 6 ( diff )					      								    								  
92 LOAD_FAST 8 ( curr_diff )				      								    								  
94 STORE_SUBSCR						      								    								  
96 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
14 >> 98 LOAD_FAST 7 ( i )				      								    								  
100 LOAD_FAST 6 ( diff )				      								    								  
102 LOAD_FAST 8 ( curr_diff )				      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 9 ( length )				      								    								  
							      								    								  
15 110 LOAD_GLOBAL 1 ( max )				      								    								  
112 LOAD_FAST 3 ( maxLen )				      								    								  
114 LOAD_FAST 9 ( length )				      								    								  
116 CALL_FUNCTION 2					      								    								  
118 STORE_FAST 3 ( maxLen )				      								    								  
120 JUMP_ABSOLUTE 26					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
16 >> 124 LOAD_FAST 3 ( maxLen )			      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1
--							      --							    --								  --
Disassembly of <code object findTriplets at 0x7fbac<<unk>> de def findTriplets ( arr , n ) :				    def findTriplets ( arr , n = None ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( False )				      	  found = False						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( found )				      	  for i in range ( n - 1 ) :				    								  /FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1.py", l
							      	      s = set ( )					    								  ine 67     print("#Results: %i, %i" % (n_success,
3 4 SETUP_LOOP 116 ( to 122 )				      	      for j in range ( i + 1 , n ) :			    								  len(param)))
6 LOAD_GLOBAL 0 ( range )				      		  x = - ( arr [ i ] + arr [ j ] )		    								  		   ^ SyntaxError: EOF while scanning
8 LOAD_FAST 1 ( n )					      		  if x in s :					    								   triple-quoted string literal
10 LOAD_CONST 2 ( 1 )					      		      print ( x , arr [ i ] , arr [ j ] )	    								  
12 BINARY_SUBTRACT					      		      found = True				    								  
14 CALL_FUNCTION 1					      		  else :					    								  
16 GET_ITER						      		      s.add ( arr [ j ] )			    								  
>> 18 FOR_ITER 100 ( to 120 )				      	  if found == False :					    								  
20 STORE_FAST 3 ( i )					      	      print ( "No Triplet Found" )			    								  
							      								    								  
4 22 LOAD_GLOBAL 1 ( set )				      								    								  
24 CALL_FUNCTION 0					      								    								  
26 STORE_FAST 4 ( s )					      								    								  
							      								    								  
5 28 SETUP_LOOP 88 ( to 118 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 70 ( to 116 )				      								    								  
46 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 UNARY_NEGATIVE					      								    								  
64 STORE_FAST 6 ( x )					      								    								  
							      								    								  
7 66 LOAD_FAST 6 ( x )					      								    								  
68 LOAD_FAST 4 ( s )					      								    								  
70 COMPARE_OP 6 ( in )					      								    								  
72 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
8 74 LOAD_GLOBAL 2 ( print )				      								    								  
76 LOAD_FAST 6 ( x )					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_FUNCTION 3					      								    								  
92 POP_TOP						      								    								  
							      								    								  
9 94 LOAD_CONST 3 ( True )				      								    								  
96 STORE_FAST 2 ( found )				      								    								  
98 JUMP_ABSOLUTE 44					      								    								  
							      								    								  
11 >> 100 LOAD_FAST 4 ( s )				      								    								  
102 LOAD_METHOD 3 ( add )				      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 CALL_METHOD 1					      								    								  
112 POP_TOP						      								    								  
114 JUMP_ABSOLUTE 44					      								    								  
>> 116 POP_BLOCK					      								    								  
>> 118 JUMP_ABSOLUTE 18					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
12 >> 122 LOAD_FAST 2 ( found )				      								    								  
124 LOAD_CONST 1 ( False )				      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
13 130 LOAD_GLOBAL 2 ( print )				      								    								  
132 LOAD_CONST 4 ( 'No Triplet Found' )			      								    								  
134 CALL_FUNCTION 1					      								    								  
136 POP_TOP						      								    								  
>> 138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_VALID_SEQUENCE_DIVISIBLE_M			      CHECK_VALID_SEQUENCE_DIVISIBLE_M				    CHECK_VALID_SEQUENCE_DIVISIBLE_M				  CHECK_VALID_SEQUENCE_DIVISIBLE_M
--							      --							    --								  --
Disassembly of <code object isPossible at 0x7fbac0e8bc90, fil def isPossible ( n , index , Sum , M , arr , dp ) :	    def isPossible ( n , index , index , count ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
3 0 LOAD_FAST 1 ( index )				      	  global MAX						    	if index == 0 :						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( n )					      	  if index == n :					    	    return True						  /CHECK_VALID_SEQUENCE_DIVISIBLE_M.py", line 32
4 COMPARE_OP 2 ( == )					      	      if ( Sum % M ) == 0 :				    	elif index == 1 :					   def f_filled ( n , index , index , count ) :
6 POP_JUMP_IF_FALSE 28					      		  return True					    	    return True						  ^ SyntaxError: duplicate argument 'index' in funct
							      	      return False					    	elif index == 2 :					  ion definition
4 8 LOAD_FAST 2 ( Sum )					      	  if dp [ index ] [ Sum ] != - 1 :			    	    return True						  
10 LOAD_FAST 3 ( M )					      	      return dp [ index ] [ Sum ]			    	elif index == 1 :					  
12 BINARY_MODULO					      	  placeAdd = isPossible ( n , index + 1 , Sum + arr [ index 	    return False					  
14 LOAD_CONST 1 ( 0 )					      	  placeMinus = isPossible ( n , index + 1 , Sum - arr [ ind 	elif index == 2 :					  
16 COMPARE_OP 2 ( == )					      	  res = placeAdd or placeMinus				    	    return True						  
18 POP_JUMP_IF_FALSE 24					      	  dp [ index ] [ Sum ] = res				    	elif index == 1 :					  
							      	  return res						    	    return True						  
5 20 LOAD_CONST 2 ( True )				      								    	elif index == 2 :					  
22 RETURN_VALUE						      								    	    return True						  
							      								    	elif index == 3 :					  
6 >> 24 LOAD_CONST 3 ( False )				      								    	    return False					  
26 RETURN_VALUE						      								    	elif index == 3 :					  
							      								    	    return False					  
7 >> 28 LOAD_FAST 5 ( dp )				      								    	elif index == 3 :					  
30 LOAD_FAST 1 ( index )				      								    	    return False					  
32 BINARY_SUBSCR					      								    	elif index == 4 :					  
34 LOAD_FAST 2 ( Sum )					      								    	    return False					  
36 BINARY_SUBSCR					      								    	elif index == 4 :					  
38 LOAD_CONST 4 ( - 1 )					      								    	    return False					  
40 COMPARE_OP 3 ( != )					      								    	elif index == 4 :					  
42 POP_JUMP_IF_FALSE 56					      								    	    return False					  
							      								    	elif index == 4 :					  
8 44 LOAD_FAST 5 ( dp )					      								    	    return False					  
46 LOAD_FAST 1 ( index )				      								    	elif index == 4 :					  
48 BINARY_SUBSCR					      								    	    return False					  
50 LOAD_FAST 2 ( Sum )					      								    	elif index == 4 :					  
52 BINARY_SUBSCR					      								    	    return False					  
54 RETURN_VALUE						      								    	elif index == 4 :					  
							      								    	    return False					  
9 >> 56 LOAD_GLOBAL 0 ( isPossible )			      								    	elif index == 4 :					  
58 LOAD_FAST 0 ( n )					      								    	    return False					  
60 LOAD_FAST 1 ( index )				      								    	elif index == 4 :					  
62 LOAD_CONST 5 ( 1 )					      								    	    return False					  
64 BINARY_ADD						      								    	elif index == 4 :					  
66 LOAD_FAST 2 ( Sum )					      								    	    return False					  
68 LOAD_FAST 4 ( arr )					      								    	elif index == 4 :					  
70 LOAD_FAST 1 ( index )				      								    	    return False					  
72 BINARY_SUBSCR					      								    	elif index == 4 :					  
74 BINARY_ADD						      								    	    return False					  
76 LOAD_FAST 3 ( M )					      								    	elif index == 4 :					  
78 LOAD_FAST 4 ( arr )					      								    	    return False					  
80 LOAD_FAST 5 ( dp )					      								    	elif index == 4 :					  
82 CALL_FUNCTION 6					      								    	    return False					  
84 STORE_FAST 6 ( placeAdd )				      								    	elif index == 4 :					  
							      								    	    return False					  
10 86 LOAD_GLOBAL 0 ( isPossible )			      								    	elif index == 4 :					  
88 LOAD_FAST 0 ( n )					      								    	    return False					  
90 LOAD_FAST 1 ( index )				      								    	elif index == 4 :					  
92 LOAD_CONST 5 ( 1 )					      								    	    return False					  
94 BINARY_ADD						      								    	elif index == 4 :					  
96 LOAD_FAST 2 ( Sum )					      								    	    return False					  
98 LOAD_FAST 4 ( arr )					      								    	elif index == 4 :					  
100 LOAD_FAST 1 ( index )				      								    	    return False					  
102 BINARY_SUBSCR					      								    	elif index == 4 :					  
104 BINARY_SUBTRACT					      								    	    return False					  
106 LOAD_FAST 3 ( M )					      								    	elif index == 4 :					  
108 LOAD_FAST 4 ( arr )					      								    	    return False					  
110 LOAD_FAST 5 ( dp )					      								    	elif index == 4 :					  
112 CALL_FUNCTION 6					      								    	    return False					  
114 STORE_FAST 7 ( placeMinus )				      								    	elif index == 4 :					  
							      								    	    return False					  
11 116 LOAD_FAST 6 ( placeAdd )				      								    	elif index == 4 :					  
118 JUMP_IF_TRUE_OR_POP 122				      								    	    return False					  
120 LOAD_FAST 7 ( placeMinus )				      								    	elif index == 4 :					  
>> 122 STORE_FAST 8 ( res )				      								    	    return False					  
							      								    	elif index == 4 :					  
12 124 LOAD_FAST 8 ( res )				      								    	    return False					  
126 LOAD_FAST 5 ( dp )					      								    	elif index == 4 :					  
128 LOAD_FAST 1 ( index )				      								    	    return False					  
130 BINARY_SUBSCR					      								    	elif index == 4 :					  
132 LOAD_FAST 2 ( Sum )					      								    	    return False					  
134 STORE_SUBSCR					      								    	elif index == 4 :					  
							      								    	    return False					  
13 136 LOAD_FAST 8 ( res )				      								    	elif index == 4 :					  
138 RETURN_VALUE NEW_LINE				      								    	    return False					  
							      								    	elif index == 4 :					  
							      								    	    return False					  
							      								    	elif index == 4 :					  
							      								    	    return False					  
							      								    	elif index == 4 :					  
							      								    	    return False					  
							      								    	elif index == 4 :					  
							      								    	    return False					  
							      								    	elif index == 4 :					  
							      								    	    return False					  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM				      FIND_SUBARRAY_WITH_GIVEN_SUM				    FIND_SUBARRAY_WITH_GIVEN_SUM				  FIND_SUBARRAY_WITH_GIVEN_SUM
--							      --							    --								  --
Disassembly of <code object subArraySum at 0x7fbac<<unk>> de4 def subArraySum ( arr , n , sum ) :			    def subArraySum ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 124 ( to 126 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      curr_sum = arr [ i ]				    	    for j in range ( n ) :				  /eval_scripts/dis_sa-python_sa.test/FIND_SUBARRAY_
4 LOAD_FAST 1 ( n )					      	      j = i + 1						    		if j < j :					  WITH_GIVEN_SUM.py", line 57, in <module>     if f_
6 CALL_FUNCTION 1					      	      while j <= n :					    		    break					  filled(*parameters_set) == f_gold(*parameters_set)
8 GET_ITER						      		  if curr_sum == sum :				    	return np.array ( arr )					  : TypeError: f_filled() takes 2 positional argumen
>> 10 FOR_ITER 112 ( to 124 )				      		      print ( "Sum found between" )		    								  ts but 3 were given
12 STORE_FAST 3 ( i )					      		      print ( "indexes %d and %d" % ( i , j - 1 ) ) 								  
							      		      return 1					    								  
3 14 LOAD_FAST 0 ( arr )				      		  if curr_sum > sum or j == n :			    								  
16 LOAD_FAST 3 ( i )					      		      break					    								  
18 BINARY_SUBSCR					      		  curr_sum = curr_sum + arr [ j ]		    								  
20 STORE_FAST 4 ( curr_sum )				      		  j += 1					    								  
							      	  print ( "No subarray found" )				    								  
4 22 LOAD_FAST 3 ( i )					      	  return 0						    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 30 SETUP_LOOP 90 ( to 122 )				      								    								  
>> 32 LOAD_FAST 5 ( j )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
6 40 LOAD_FAST 4 ( curr_sum )				      								    								  
42 LOAD_FAST 2 ( sum )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
7 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 2 ( 'Sum found between' )			      								    								  
52 CALL_FUNCTION 1					      								    								  
54 POP_TOP						      								    								  
							      								    								  
8 56 LOAD_GLOBAL 1 ( print )				      								    								  
58 LOAD_CONST 3 ( 'indexes %d and %d' )			      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 LOAD_FAST 5 ( j )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BUILD_TUPLE 2					      								    								  
70 BINARY_MODULO					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 POP_TOP						      								    								  
							      								    								  
9 76 LOAD_CONST 1 ( 1 )					      								    								  
78 RETURN_VALUE						      								    								  
							      								    								  
10 >> 80 LOAD_FAST 4 ( curr_sum )			      								    								  
82 LOAD_FAST 2 ( sum )					      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_TRUE 96					      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
11 >> 96 BREAK_LOOP					      								    								  
							      								    								  
12 >> 98 LOAD_FAST 4 ( curr_sum )			      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 5 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
13 110 LOAD_FAST 5 ( j )				      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 INPLACE_ADD						      								    								  
116 STORE_FAST 5 ( j )					      								    								  
118 JUMP_ABSOLUTE 32					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 10					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
14 >> 126 LOAD_GLOBAL 1 ( print )			      								    								  
128 LOAD_CONST 4 ( 'No subarray found' )		      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
							      								    								  
15 134 LOAD_CONST 5 ( 0 )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD
--							      --							    --								  --
Disassembly of <code object assign at 0x7fbac0e89d20, file "< def assign ( a , n ) :					    def assign ( a , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( )						    	if n < 0 :						  
2 LOAD_METHOD 0 ( sort )				      	  ans = [ 0 ] * n					    	    return 0						  
4 CALL_METHOD 0						      	  p = 0							    	if len ( a ) == 1 :					  
6 POP_TOP						      	  q = n - 1						    	    return 0						  
							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( i + 1 ) % 2 == 0 :				    	    if i < 0 :						  
10 BUILD_LIST 1						      		  ans [ i ] = a [ q ]				    		return 0					  
12 LOAD_FAST 1 ( n )					      		  q = q - 1					    	return a						  
14 BINARY_MULTIPLY					      	      else :						    								  
16 STORE_FAST 2 ( ans )					      		  ans [ i ] = a [ p ]				    								  
							      		  p = p + 1					    								  
4 18 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    								  
20 STORE_FAST 3 ( p )					      	      print ( ans [ i ] , end = " " )			    								  
							      								    								  
5 22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 4 ( q )					      								    								  
							      								    								  
6 30 SETUP_LOOP 74 ( to 106 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 62 ( to 104 )				      								    								  
42 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 44 LOAD_FAST 5 ( i )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_CONST 3 ( 2 )					      								    								  
52 BINARY_MODULO					      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
8 60 LOAD_FAST 0 ( a )					      								    								  
62 LOAD_FAST 4 ( q )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 2 ( ans )					      								    								  
68 LOAD_FAST 5 ( i )					      								    								  
70 STORE_SUBSCR						      								    								  
							      								    								  
9 72 LOAD_FAST 4 ( q )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 4 ( q )					      								    								  
80 JUMP_ABSOLUTE 40					      								    								  
							      								    								  
11 >> 82 LOAD_FAST 0 ( a )				      								    								  
84 LOAD_FAST 3 ( p )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( ans )					      								    								  
90 LOAD_FAST 5 ( i )					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
12 94 LOAD_FAST 3 ( p )					      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 BINARY_ADD						      								    								  
100 STORE_FAST 3 ( p )					      								    								  
102 JUMP_ABSOLUTE 40					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
13 >> 106 SETUP_LOOP 32 ( to 140 )			      								    								  
108 LOAD_GLOBAL 1 ( range )				      								    								  
110 LOAD_FAST 1 ( n )					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 GET_ITER						      								    								  
>> 116 FOR_ITER 20 ( to 138 )				      								    								  
118 STORE_FAST 5 ( i )					      								    								  
							      								    								  
14 120 LOAD_GLOBAL 2 ( print )				      								    								  
122 LOAD_FAST 2 ( ans )					      								    								  
124 LOAD_FAST 5 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_CONST 4 ( ' ' )				      								    								  
130 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
136 JUMP_ABSOLUTE 116					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN
--							      --							    --								  --
Disassembly of <code object findMinInsertions at 0x7fbac0e8bc def findMinInsertions ( str , l , h ) :			    def findMinInsertions ( str ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( l )					      	  if ( l > h ) :					    	l = str ( str )						  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 2 ( h )					      	      return sys.maxsize				    	l = str ( l )						  /DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_
4 COMPARE_OP 4 ( > )					      	  if ( l == h ) :					    	l = l [ l : l ]						  FORM_A_PALINDROME.py", line 56     l l = l [ l : l
6 POP_JUMP_IF_FALSE 14					      	      return 0						    	l = l [ l : l ]						   ]	   ^ SyntaxError: invalid syntax
							      	  if ( l == h - 1 ) :					    	l = l [ l : l ]						  
3 8 LOAD_GLOBAL 0 ( sys )				      	      return 0 if ( str [ l ] == str [ h ] ) else 1	    	l = l [ l : l ]						  
10 LOAD_ATTR 1 ( maxsize )				      	  if ( str [ l ] == str [ h ] ) :			    	l = l [ l : l ]						  
12 RETURN_VALUE						      	      return findMinInsertions ( str , l + 1 , h - 1 )	    	l = l [ l : l ]						  
							      	  else :						    	l = l [ l : l ]						  
4 >> 14 LOAD_FAST 1 ( l )				      	      return ( min ( findMinInsertions ( str , l , h - 1 )  	l = l [ l : l ]						  
16 LOAD_FAST 2 ( h )					      								    	l = l [ l : l ]						  
18 COMPARE_OP 2 ( == )					      								    	l = l [ l : l ]						  
20 POP_JUMP_IF_FALSE 26					      								    	l = l [ l : l ]						  
							      								    	l = l [ l : l ]						  
5 22 LOAD_CONST 1 ( 0 )					      								    	l = l [ l : l ]						  
24 RETURN_VALUE						      								    	l = l [ l : l ]						  
							      								    	l = l [ l : l ]						  
6 >> 26 LOAD_FAST 1 ( l )				      								    	l = l [ l : l ]						  
28 LOAD_FAST 2 ( h )					      								    	l = l [ l : l ]						  
30 LOAD_CONST 2 ( 1 )					      								    	l = l [ l : l ]						  
32 BINARY_SUBTRACT					      								    	l = l [ l : l ]						  
34 COMPARE_OP 2 ( == )					      								    	l = l [ l : l ]						  
36 POP_JUMP_IF_FALSE 62					      								    	l = l [ l : l ]						  
							      								    	l l = l [ l : l ]					  
7 38 LOAD_FAST 0 ( str )				      								    	l l = l [ l : l ]					  
40 LOAD_FAST 1 ( l )					      								    	l = l [ l : l ]						  
42 BINARY_SUBSCR					      								    	l = l [ l : l ]						  
44 LOAD_FAST 0 ( str )					      								    	l l = l [ l : l ]					  
46 LOAD_FAST 2 ( h )					      								    	l l l [ l : l ]						  
48 BINARY_SUBSCR					      								    	l = l [ l : l ]						  
50 COMPARE_OP 2 ( == )					      								    	l l l [ l : l ]						  
52 POP_JUMP_IF_FALSE 58					      								    	l l l [ l l : l ]					  
54 LOAD_CONST 1 ( 0 )					      								    	l l [ l l l l l l l l l l l [ l : l l l l l l l l l l l l 
56 RETURN_VALUE						      								    								  
>> 58 LOAD_CONST 2 ( 1 )				      								    								  
60 RETURN_VALUE						      								    								  
							      								    								  
8 >> 62 LOAD_FAST 0 ( str )				      								    								  
64 LOAD_FAST 1 ( l )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( str )					      								    								  
70 LOAD_FAST 2 ( h )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
9 78 LOAD_GLOBAL 2 ( findMinInsertions )		      								    								  
80 LOAD_FAST 0 ( str )					      								    								  
82 LOAD_FAST 1 ( l )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_FAST 2 ( h )					      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 CALL_FUNCTION 3					      								    								  
96 RETURN_VALUE						      								    								  
							      								    								  
11 >> 98 LOAD_GLOBAL 3 ( min )				      								    								  
100 LOAD_GLOBAL 2 ( findMinInsertions )			      								    								  
102 LOAD_FAST 0 ( str )					      								    								  
104 LOAD_FAST 1 ( l )					      								    								  
106 LOAD_FAST 2 ( h )					      								    								  
108 LOAD_CONST 2 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 CALL_FUNCTION 3					      								    								  
114 LOAD_GLOBAL 2 ( findMinInsertions )			      								    								  
116 LOAD_FAST 0 ( str )					      								    								  
118 LOAD_FAST 1 ( l )					      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 BINARY_ADD						      								    								  
124 LOAD_FAST 2 ( h )					      								    								  
126 CALL_FUNCTION 3					      								    								  
128 CALL_FUNCTION 2					      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 RETURN_VALUE					      								    								  
136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC		  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC
--							      --							    --								  --
Disassembly of <code object minimumflip at 0x7fbac<<unk>> de4 def minimumflip ( mat , n ) :				    def minimumflip ( fbfbacactntntn1 , n = 0 , size = 1 ) :	  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  transpose = [ [ 0 ] * n ] * n				    	n = n [ n : n ]						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	n = n [ n : n ]						  /eval_scripts/dis_sa-python_sa.test/MINIMUM_FLIP_R
4 LOAD_FAST 1 ( n )					      	      for j in range ( n ) :				    	n = n [ n : n ]						  EQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC.py", line 51,
6 BINARY_MULTIPLY					      		  transpose [ i ] [ j ] = mat [ j ] [ i ]	    	# TODO we need to get the range of the n of the n of the   in <module>	   if f_filled(*parameters_set) == f
8 BUILD_LIST 1						      	  flip = 0						    								  _gold(*parameters_set):   File "/home/ubuntu/Trans
10 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    								  Coder/models/eval/bt/152w65bl69/eval_scripts/dis_s
12 BINARY_MULTIPLY					      	      for j in range ( n ) :				    								  a-python_sa.test/MINIMUM_FLIP_REQUIRED_MAKE_BINARY
14 STORE_FAST 2 ( transpose )				      		  if transpose [ i ] [ j ] != mat [ i ] [ j ] :	    								  _MATRIX_SYMMETRIC.py", line 31, in f_filled	  n
							      		      flip += 1					    								  = n [ n : n ] TypeError: 'int' object is not subsc
3 16 SETUP_LOOP 54 ( to 72 )				      	  return int ( flip / 2 )				    								  riptable
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 42 ( to 70 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 30 SETUP_LOOP 36 ( to 68 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 24 ( to 66 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 0 ( mat )				      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 2 ( transpose )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 4 ( j )					      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 40					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 JUMP_ABSOLUTE 26					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
6 >> 72 LOAD_CONST 1 ( 0 )				      								    								  
74 STORE_FAST 5 ( flip )				      								    								  
							      								    								  
7 76 SETUP_LOOP 66 ( to 144 )				      								    								  
78 LOAD_GLOBAL 0 ( range )				      								    								  
80 LOAD_FAST 1 ( n )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 54 ( to 142 )				      								    								  
88 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 90 SETUP_LOOP 48 ( to 140 )				      								    								  
92 LOAD_GLOBAL 0 ( range )				      								    								  
94 LOAD_FAST 1 ( n )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 GET_ITER						      								    								  
>> 100 FOR_ITER 36 ( to 138 )				      								    								  
102 STORE_FAST 4 ( j )					      								    								  
							      								    								  
9 104 LOAD_FAST 2 ( transpose )				      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 4 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 3 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 4 ( j )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 COMPARE_OP 3 ( != )					      								    								  
126 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
10 128 LOAD_FAST 5 ( flip )				      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 5 ( flip )				      								    								  
136 JUMP_ABSOLUTE 100					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 JUMP_ABSOLUTE 86					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
11 >> 144 LOAD_GLOBAL 1 ( int )				      								    								  
146 LOAD_FAST 5 ( flip )				      								    								  
148 LOAD_CONST 3 ( 2 )					      								    								  
150 BINARY_TRUE_DIVIDE					      								    								  
152 CALL_FUNCTION 1					      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10  BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECOND_POWER_10
--							      --							    --								  --
Disassembly of <code object calculate at 0x7fbac<<unk>> d540, def calculate ( N ) :					    def calculate ( N , length = 1 , length = 1 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  length = len ( N )					    	""" STRNEWLINE SPACETOKEN Returns SPACETOKEN a SPACETOKEN l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 0 ( N )					      	  l = int ( ( length ) / 2 )				    								  /BREAKING_NUMBER_FIRST_PART_INTEGRAL_DIVISION_SECO
4 CALL_FUNCTION 1					      	  count = 0						    								  ND_POWER_10.py", line 56     print("#Results: %i,
6 STORE_FAST 1 ( length )				      	  for i in range ( l + 1 ) :				    								  %i" % (n_success, len(param)))
							      	      s = N [ 0 : 0 + i ]				    								  				     ^ SyntaxError:
3 8 LOAD_GLOBAL 1 ( int )				      	      l1 = len ( s )					    								  EOF while scanning triple-quoted string literal
10 LOAD_FAST 1 ( length )				      	      t = N [ i : l1 + i ]				    								  
12 LOAD_CONST 1 ( 2 )					      	      try :						    								  
14 BINARY_TRUE_DIVIDE					      		  if s [ 0 ] == '0' or t [ 0 ] == '0' :		    								  
16 CALL_FUNCTION 1					      		      continue					    								  
18 STORE_FAST 2 ( l )					      	      except :						    								  
							      		  continue					    								  
4 20 LOAD_CONST 2 ( 0 )					      	      if s == t :					    								  
22 STORE_FAST 3 ( count )				      		  count += 1					    								  
							      	  return count						    								  
5 24 SETUP_LOOP 122 ( to 148 )				      								    								  
26 LOAD_GLOBAL 2 ( range )				      								    								  
28 LOAD_FAST 2 ( l )					      								    								  
30 LOAD_CONST 3 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 CALL_FUNCTION 1					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 106 ( to 146 )				      								    								  
40 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( N )					      								    								  
44 LOAD_CONST 2 ( 0 )					      								    								  
46 LOAD_CONST 2 ( 0 )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_ADD						      								    								  
52 BUILD_SLICE 2					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_FAST 5 ( s )					      								    								  
							      								    								  
7 58 LOAD_GLOBAL 0 ( len )				      								    								  
60 LOAD_FAST 5 ( s )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 STORE_FAST 6 ( l1 )					      								    								  
							      								    								  
8 66 LOAD_FAST 0 ( N )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 LOAD_FAST 6 ( l1 )					      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_ADD						      								    								  
76 BUILD_SLICE 2					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 7 ( t )					      								    								  
							      								    								  
9 82 SETUP_EXCEPT 30 ( to 114 )				      								    								  
							      								    								  
10 84 LOAD_FAST 5 ( s )					      								    								  
86 LOAD_CONST 2 ( 0 )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 4 ( '0' )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_TRUE 108					      								    								  
96 LOAD_FAST 7 ( t )					      								    								  
98 LOAD_CONST 2 ( 0 )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 4 ( '0' )				      								    								  
104 COMPARE_OP 2 ( == )					      								    								  
106 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
11 >> 108 CONTINUE_LOOP 38				      								    								  
>> 110 POP_BLOCK					      								    								  
112 JUMP_FORWARD 14 ( to 128 )				      								    								  
							      								    								  
12 >> 114 POP_TOP					      								    								  
116 POP_TOP						      								    								  
118 POP_TOP						      								    								  
							      								    								  
13 120 CONTINUE_LOOP 38					      								    								  
122 POP_EXCEPT						      								    								  
124 JUMP_FORWARD 2 ( to 128 )				      								    								  
126 END_FINALLY						      								    								  
							      								    								  
14 >> 128 LOAD_FAST 5 ( s )				      								    								  
130 LOAD_FAST 7 ( t )					      								    								  
132 COMPARE_OP 2 ( == )					      								    								  
134 POP_JUMP_IF_FALSE 38				      								    								  
							      								    								  
15 136 LOAD_FAST 3 ( count )				      								    								  
138 LOAD_CONST 3 ( 1 )					      								    								  
140 INPLACE_ADD						      								    								  
142 STORE_FAST 3 ( count )				      								    								  
144 JUMP_ABSOLUTE 38					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
16 >> 148 LOAD_FAST 3 ( count )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY
--							      --							    --								  --
Disassembly of <code object findInteger at 0x7fbac<<unk>> d54 def findInteger ( arr , n ) :				    def findInteger ( arr , 0x70x70x70x70x70x70x70x70x70x70x70x70 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  hash = dict ( )					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 CALL_FUNCTION 0					      	  maximum = 0						    								  /INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_AR
4 STORE_FAST 2 ( hash )					      	  for i in arr :					    								  RAY.py", line 34     def f_filled ( arr , 0x70x70x
							      	      if ( i < 0 ) :					    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
3 6 LOAD_CONST 1 ( 0 )					      		  if abs ( i ) not in hash.keys ( ) :		    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
8 STORE_FAST 3 ( maximum )				      		      hash [ abs ( i ) ] = - 1			    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
							      		  else :					    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
4 10 SETUP_LOOP 92 ( to 104 )				      		      hash [ abs ( i ) ] -= 1			    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
12 LOAD_FAST 0 ( arr )					      	      else :						    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
14 GET_ITER						      		  hash [ i ] = hash.get ( i , 0 ) + 1		    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
>> 16 FOR_ITER 84 ( to 102 )				      	  for i in arr :					    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
18 STORE_FAST 4 ( i )					      	      if i in hash.keys ( ) and hash [ i ] > 0 :	    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
							      		  return i					    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
5 20 LOAD_FAST 4 ( i )					      	  return - 1						    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
22 LOAD_CONST 1 ( 0 )					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
24 COMPARE_OP 0 ( < )					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
26 POP_JUMP_IF_FALSE 80					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
							      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
6 28 LOAD_GLOBAL 1 ( abs )				      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
30 LOAD_FAST 4 ( i )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
32 CALL_FUNCTION 1					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
34 LOAD_FAST 2 ( hash )					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
36 LOAD_METHOD 2 ( keys )				      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
38 CALL_METHOD 0					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
40 COMPARE_OP 7 ( not in )				      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
42 POP_JUMP_IF_FALSE 58					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
							      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
7 44 LOAD_CONST 2 ( - 1 )				      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
46 LOAD_FAST 2 ( hash )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
48 LOAD_GLOBAL 1 ( abs )				      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
50 LOAD_FAST 4 ( i )					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
52 CALL_FUNCTION 1					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
54 STORE_SUBSCR						      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
56 JUMP_ABSOLUTE 100					      								    								  70x7				   ^ SyntaxError: in
							      								    								  valid syntax
9 >> 58 LOAD_FAST 2 ( hash )				      								    								  
60 LOAD_GLOBAL 1 ( abs )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 DUP_TOP_TWO						      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_SUBTRACT					      								    								  
74 ROT_THREE						      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 2 ( hash )				      								    								  
82 LOAD_METHOD 3 ( get )				      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 CALL_METHOD 2					      								    								  
90 LOAD_CONST 3 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 2 ( hash )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 STORE_SUBSCR						      								    								  
>> 100 JUMP_ABSOLUTE 16					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
12 >> 104 SETUP_LOOP 40 ( to 146 )			      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 32 ( to 144 )				      								    								  
112 STORE_FAST 4 ( i )					      								    								  
							      								    								  
13 114 LOAD_FAST 4 ( i )				      								    								  
116 LOAD_FAST 2 ( hash )				      								    								  
118 LOAD_METHOD 2 ( keys )				      								    								  
120 CALL_METHOD 0					      								    								  
122 COMPARE_OP 6 ( in )					      								    								  
124 POP_JUMP_IF_FALSE 110				      								    								  
126 LOAD_FAST 2 ( hash )				      								    								  
128 LOAD_FAST 4 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 LOAD_CONST 1 ( 0 )					      								    								  
134 COMPARE_OP 4 ( > )					      								    								  
136 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
14 138 LOAD_FAST 4 ( i )				      								    								  
140 RETURN_VALUE					      								    								  
142 JUMP_ABSOLUTE 110					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
15 >> 146 LOAD_CONST 2 ( - 1 )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_SPECIFIC_PAIR_IN_MATRIX				      FIND_A_SPECIFIC_PAIR_IN_MATRIX				    FIND_A_SPECIFIC_PAIR_IN_MATRIX				  FIND_A_SPECIFIC_PAIR_IN_MATRIX
--							      --							    --								  --
Disassembly of <code object findMaxValue at 0x7fbac0e8bc90, f def findMaxValue ( mat ) :				    def findMaxValue ( mat , maxValue = 0 , maxValue = 1 , maxVal script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxValue = 0						    								  
2 STORE_FAST 1 ( maxValue )				      	  for a in range ( N - 1 ) :				    								  
							      	      for b in range ( N - 1 ) :			    								  
3 4 SETUP_LOOP 150 ( to 156 )				      		  for d in range ( a + 1 , N ) :		    								  
6 LOAD_GLOBAL 0 ( range )				      		      for e in range ( b + 1 , N ) :		    								  
8 LOAD_GLOBAL 1 ( N )					      			  if maxValue < int ( mat [ d ] [ e ] - mat 								  
10 LOAD_CONST 2 ( 1 )					      			      maxValue = int ( mat [ d ] [ e ] - ma 								  
12 BINARY_SUBTRACT					      	  return maxValue ;					    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 134 ( to 154 )				      								    								  
20 STORE_FAST 2 ( a )					      								    								  
							      								    								  
4 22 SETUP_LOOP 128 ( to 152 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_GLOBAL 1 ( N )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 112 ( to 150 )				      								    								  
38 STORE_FAST 3 ( b )					      								    								  
							      								    								  
5 40 SETUP_LOOP 106 ( to 148 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_FAST 2 ( a )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_GLOBAL 1 ( N )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 88 ( to 146 )				      								    								  
58 STORE_FAST 4 ( d )					      								    								  
							      								    								  
6 60 SETUP_LOOP 82 ( to 144 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_FAST 3 ( b )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_GLOBAL 1 ( N )					      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 64 ( to 142 )				      								    								  
78 STORE_FAST 5 ( e )					      								    								  
							      								    								  
7 80 LOAD_FAST 1 ( maxValue )				      								    								  
82 LOAD_GLOBAL 2 ( int )				      								    								  
84 LOAD_FAST 0 ( mat )					      								    								  
86 LOAD_FAST 4 ( d )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 5 ( e )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( mat )					      								    								  
96 LOAD_FAST 2 ( a )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 3 ( b )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 76				      								    								  
							      								    								  
8 112 LOAD_GLOBAL 2 ( int )				      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 4 ( d )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 5 ( e )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_FAST 0 ( mat )					      								    								  
126 LOAD_FAST 2 ( a )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 3 ( b )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 CALL_FUNCTION 1					      								    								  
138 STORE_FAST 1 ( maxValue )				      								    								  
140 JUMP_ABSOLUTE 76					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 JUMP_ABSOLUTE 56					      								    								  
>> 146 POP_BLOCK					      								    								  
>> 148 JUMP_ABSOLUTE 36					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 JUMP_ABSOLUTE 18					      								    								  
>> 154 POP_BLOCK					      								    								  
							      								    								  
9 >> 156 LOAD_FAST 1 ( maxValue )			      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		      FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		    FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2			  FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2
--							      --							    --								  --
Disassembly of <code object printDivisors at 0x7fbac0e89d20,  def printDivisors ( n ) :					    def printDivisors ( n ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  list = [ ]						    	"""							  
2 STORE_FAST 1 ( list )					      	  for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :	     Return a list of the list of values in the given list of val 
							      	      if ( n % i == 0 ) :				     list of values in the list of values are returned.		  
3 4 SETUP_LOOP 100 ( to 106 )				      		  if ( n / i == i ) :				    								  
6 LOAD_GLOBAL 0 ( range )				      		      print ( i , end = " " )			     Parameters							  
8 LOAD_CONST 1 ( 1 )					      		  else :					     -----							  
10 LOAD_GLOBAL 1 ( int )				      		      print ( i , end = " " )			     n : list							  
12 LOAD_GLOBAL 2 ( math )				      		      list.append ( int ( n / i ) )		     A list of values in the list of values are returned.	  
14 LOAD_METHOD 3 ( sqrt )				      	  for i in list [ : : - 1 ] :				    								  
16 LOAD_FAST 0 ( n )					      	      print ( i , end = " " )				     Returns							  
18 CALL_METHOD 1					      								     -----							  
20 LOAD_CONST 1 ( 1 )					      								     out : list							  
22 BINARY_ADD						      								     A list of values in the list of values in the list of values 
24 CALL_FUNCTION 1					      								     returned.							  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								     Returns							  
>> 30 FOR_ITER 72 ( to 104 )				      								     -----							  
32 STORE_FAST 2 ( i )					      								     n : list							  
							      								     A list of values in the list of values are returned.	  
4 34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 2 ( i )					      								     Examples							  
38 BINARY_MODULO					      								     -----							  
40 LOAD_CONST 2 ( 0 )					      								     >>> from numpy.polynomial.hermite_e import np		  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 30					      								     >>> np.polynomial.hermite_e(n)				  
							      								     >>> np.polynomial.hermite_e(n)				  
5 46 LOAD_FAST 0 ( n )					      								     >>> np.polynomial.hermite_e(n)				  
48 LOAD_FAST 2 ( i )					      								     >>> np.polynomial.hermite_e(n)				  
50 BINARY_TRUE_DIVIDE					      								     >>> np.polynomial.hermite_e(n)				  
52 LOAD_FAST 2 ( i )					      								     array([ 2., 3., 4., 4., 4., 5.])				  
54 COMPARE_OP 2 ( == )					      								     array([ 2., 3., 4., 6., 7.])				  
56 POP_JUMP_IF_FALSE 72					      								    								  
							      								     """							  
6 58 LOAD_GLOBAL 4 ( print )				      								    	# print(n)						  
60 LOAD_FAST 2 ( i )					      								    	# print(n)						  
62 LOAD_CONST 3 ( ' ' )					      								    	# print(n)						  
64 LOAD_CONST 4 ( ( 'end' , ) )				      								    	# print(n)						  
66 CALL_FUNCTION_KW 2					      								    	# print(n)						  
68 POP_TOP						      								    	# print(n)						  
70 JUMP_ABSOLUTE 30					      								    	# print(n)						  
							      								    	# print(n)						  
8 >> 72 LOAD_GLOBAL 4 ( print )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 LOAD_CONST 3 ( ' ' )					      								    								  
78 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 2					      								    								  
82 POP_TOP						      								    								  
							      								    								  
9 84 LOAD_FAST 1 ( list )				      								    								  
86 LOAD_METHOD 5 ( append )				      								    								  
88 LOAD_GLOBAL 1 ( int )				      								    								  
90 LOAD_FAST 0 ( n )					      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 BINARY_TRUE_DIVIDE					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 CALL_METHOD 1					      								    								  
100 POP_TOP						      								    								  
102 JUMP_ABSOLUTE 30					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
10 >> 106 SETUP_LOOP 34 ( to 142 )			      								    								  
108 LOAD_FAST 1 ( list )				      								    								  
110 LOAD_CONST 0 ( None )				      								    								  
112 LOAD_CONST 0 ( None )				      								    								  
114 LOAD_CONST 5 ( - 1 )				      								    								  
116 BUILD_SLICE 3					      								    								  
118 BINARY_SUBSCR					      								    								  
120 GET_ITER						      								    								  
>> 122 FOR_ITER 16 ( to 140 )				      								    								  
124 STORE_FAST 2 ( i )					      								    								  
							      								    								  
11 126 LOAD_GLOBAL 4 ( print )				      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 LOAD_CONST 3 ( ' ' )				      								    								  
132 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
134 CALL_FUNCTION_KW 2					      								    								  
136 POP_TOP						      								    								  
138 JUMP_ABSOLUTE 122					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 LOAD_CONST 0 ( None )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	      NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	    NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	  NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS
--							      --							    --								  --
Disassembly of <code object countTriangle at 0x7fbac0e89d20,  def countTriangle ( g , isDirected ) :			    def countTriangle ( g , issubdtype = False ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  nodes = len ( g )					    	"""							  
2 LOAD_FAST 0 ( g )					      	  count_Triangle = 0					     Returns a list of the given array and returns a list of node 
4 CALL_FUNCTION 1					      	  for i in range ( nodes ) :				     returned as a list of nodes are returned.			  
6 STORE_FAST 2 ( nodes )				      	      for j in range ( nodes ) :			    								  
							      		  for k in range ( nodes ) :			     """							  
3 8 LOAD_CONST 1 ( 0 )					      		      if ( i != j and i != k and j != k and g [ i ] 	for i in range ( len ( g ) ) :				  
10 STORE_FAST 3 ( count_Triangle )			      			  count_Triangle += 1			    	    if i < len ( g ) :					  
							      	  return count_Triangle / 3 if isDirected else count_Triang 		return False					  
4 12 SETUP_LOOP 120 ( to 134 )				      								    	return True						  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( nodes )				      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 108 ( to 132 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 26 SETUP_LOOP 102 ( to 130 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_FAST 2 ( nodes )				      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 90 ( to 128 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 40 SETUP_LOOP 84 ( to 126 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_FAST 2 ( nodes )				      								    								  
46 CALL_FUNCTION 1					      								    								  
48 GET_ITER						      								    								  
>> 50 FOR_ITER 72 ( to 124 )				      								    								  
52 STORE_FAST 6 ( k )					      								    								  
							      								    								  
7 54 LOAD_FAST 4 ( i )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 COMPARE_OP 3 ( != )					      								    								  
60 POP_JUMP_IF_FALSE 50					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 LOAD_FAST 6 ( k )					      								    								  
66 COMPARE_OP 3 ( != )					      								    								  
68 POP_JUMP_IF_FALSE 50					      								    								  
70 LOAD_FAST 5 ( j )					      								    								  
72 LOAD_FAST 6 ( k )					      								    								  
74 COMPARE_OP 3 ( != )					      								    								  
76 POP_JUMP_IF_FALSE 50					      								    								  
78 LOAD_FAST 0 ( g )					      								    								  
80 LOAD_FAST 4 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 5 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 POP_JUMP_IF_FALSE 50					      								    								  
90 LOAD_FAST 0 ( g )					      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 6 ( k )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 POP_JUMP_IF_FALSE 50				      								    								  
102 LOAD_FAST 0 ( g )					      								    								  
104 LOAD_FAST 6 ( k )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 POP_JUMP_IF_FALSE 50				      								    								  
							      								    								  
8 114 LOAD_FAST 3 ( count_Triangle )			      								    								  
116 LOAD_CONST 2 ( 1 )					      								    								  
118 INPLACE_ADD						      								    								  
120 STORE_FAST 3 ( count_Triangle )			      								    								  
122 JUMP_ABSOLUTE 50					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 JUMP_ABSOLUTE 36					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 JUMP_ABSOLUTE 22					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
9 >> 134 LOAD_FAST 1 ( isDirected )			      								    								  
136 POP_JUMP_IF_FALSE 146				      								    								  
138 LOAD_FAST 3 ( count_Triangle )			      								    								  
140 LOAD_CONST 3 ( 3 )					      								    								  
142 BINARY_TRUE_DIVIDE					      								    								  
144 RETURN_VALUE					      								    								  
>> 146 LOAD_FAST 3 ( count_Triangle )			      								    								  
148 LOAD_CONST 4 ( 6 )					      								    								  
150 BINARY_TRUE_DIVIDE					      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1
--							      --							    --								  --
Disassembly of <code object diagonalsquare at 0x7fbac0e89d20, def diagonalsquare ( mat , row , column ) :		    def crcalsquare ( mat , row , row , row , row , row , row , r script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Diagonal one : " , end = "" )		    	print ( 'Diagonal one of row : ' + row + row + row + row  
2 LOAD_CONST 1 ( 'Diagonal one : ' )			      	  for i in range ( 0 , row ) :				    								  
4 LOAD_CONST 2 ( '' )					      	      print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = ""  								  
6 LOAD_CONST 3 ( ( 'end' , ) )				      	  print ( "\n\nDiagonal two : " , end = "" )		    								  
8 CALL_FUNCTION_KW 2					      	  for i in range ( 0 , row ) :				    								  
10 POP_TOP						      	      print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - 								  
							      								    								  
3 12 SETUP_LOOP 50 ( to 64 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 0 )					      								    								  
18 LOAD_FAST 1 ( row )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 36 ( to 62 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 0 ( print )				      								    								  
30 LOAD_FAST 0 ( mat )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( mat )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_CONST 2 ( '' )					      								    								  
54 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
56 CALL_FUNCTION_KW 2					      								    								  
58 POP_TOP						      								    								  
60 JUMP_ABSOLUTE 24					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
5 >> 64 LOAD_GLOBAL 0 ( print )				      								    								  
66 LOAD_CONST 5 ( '\n\nDiagonal two : ' )		      								    								  
68 LOAD_CONST 2 ( '' )					      								    								  
70 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
72 CALL_FUNCTION_KW 2					      								    								  
74 POP_TOP						      								    								  
							      								    								  
6 76 SETUP_LOOP 66 ( to 144 )				      								    								  
78 LOAD_GLOBAL 1 ( range )				      								    								  
80 LOAD_CONST 4 ( 0 )					      								    								  
82 LOAD_FAST 1 ( row )					      								    								  
84 CALL_FUNCTION 2					      								    								  
86 GET_ITER						      								    								  
>> 88 FOR_ITER 52 ( to 142 )				      								    								  
90 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 92 LOAD_GLOBAL 0 ( print )				      								    								  
94 LOAD_FAST 0 ( mat )					      								    								  
96 LOAD_FAST 3 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_FAST 1 ( row )					      								    								  
102 LOAD_FAST 3 ( i )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 LOAD_CONST 6 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 0 ( mat )					      								    								  
114 LOAD_FAST 3 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_FAST 1 ( row )					      								    								  
120 LOAD_FAST 3 ( i )					      								    								  
122 BINARY_SUBTRACT					      								    								  
124 LOAD_CONST 6 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 BINARY_SUBSCR					      								    								  
130 BINARY_MULTIPLY					      								    								  
132 LOAD_CONST 2 ( '' )					      								    								  
134 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
136 CALL_FUNCTION_KW 2					      								    								  
138 POP_TOP						      								    								  
140 JUMP_ABSOLUTE 88					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 LOAD_CONST 0 ( None )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	      K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	    K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1	  K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printKDistinct at 0x7fbac0e8bc90, def printKDistinct ( arr , size , KthIndex ) :		    def printKDistinct ( arr , size , * args , ** kwargs ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_MAP 0						      	  dict = { }						    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( dict )					      	  vect = [ ]						     Returns a list of the given array of the given array of the  /K_TH_DISTINCT_OR_NON_REPEATING_ELEMENT_IN_AN_ARRA
							      	  for i in range ( size ) :				     the given array of the given array of the given array	  Y_1.py", line 41     of the array of the array of
3 4 BUILD_LIST 0					      	      if ( arr [ i ] in dict ) :			     """							  the array of the array of the array of the array o
6 STORE_FAST 4 ( vect )					      		  dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1	    	# convert to convert the array of the array of the array  f the array of the array of the array of the array
							      	      else :						     of the array of the array of the array of the array of the a  of the array of the array of the array of the arr
4 8 SETUP_LOOP 66 ( to 76 )				      		  dict [ arr [ i ] ] = 1			    								  ay of the array of the array of
10 LOAD_GLOBAL 0 ( range )				      	  for i in range ( size ) :				    								  
12 LOAD_FAST 1 ( size )					      	      if ( dict [ arr [ i ] ] > 1 ) :			    								  
14 CALL_FUNCTION 1					      		  continue					    								  
16 GET_ITER						      	      else :						    								  						 ^ I
>> 18 FOR_ITER 54 ( to 74 )				      		  KthIndex = KthIndex - 1			    								  ndentationError: unindent does not match any outer
20 STORE_FAST 5 ( i )					      	      if ( KthIndex == 0 ) :				    								   indentation level
							      		  return arr [ i ]				    								  
5 22 LOAD_FAST 0 ( arr )				      	  return - 1						    								  
24 LOAD_FAST 5 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 3 ( dict )					      								    								  
30 COMPARE_OP 6 ( in )					      								    								  
32 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( dict )				      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 3 ( dict )					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 STORE_SUBSCR						      								    								  
58 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 60 LOAD_CONST 1 ( 1 )				      								    								  
62 LOAD_FAST 3 ( dict )					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_SUBSCR						      								    								  
72 JUMP_ABSOLUTE 18					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 SETUP_LOOP 60 ( to 138 )			      								    								  
78 LOAD_GLOBAL 0 ( range )				      								    								  
80 LOAD_FAST 1 ( size )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 GET_ITER						      								    								  
>> 86 FOR_ITER 48 ( to 136 )				      								    								  
88 STORE_FAST 5 ( i )					      								    								  
							      								    								  
10 90 LOAD_FAST 3 ( dict )				      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 COMPARE_OP 4 ( > )					      								    								  
104 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
11 106 JUMP_ABSOLUTE 86					      								    								  
108 JUMP_FORWARD 8 ( to 118 )				      								    								  
							      								    								  
13 >> 110 LOAD_FAST 2 ( KthIndex )			      								    								  
112 LOAD_CONST 1 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 STORE_FAST 2 ( KthIndex )				      								    								  
							      								    								  
14 >> 118 LOAD_FAST 2 ( KthIndex )			      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 86				      								    								  
							      								    								  
15 126 LOAD_FAST 0 ( arr )				      								    								  
128 LOAD_FAST 5 ( i )					      								    								  
130 BINARY_SUBSCR					      								    								  
132 RETURN_VALUE					      								    								  
134 JUMP_ABSOLUTE 86					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
16 >> 138 LOAD_CONST 3 ( - 1 )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		      MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		    MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE		  MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE
--							      --							    --								  --
Disassembly of <code object smallestSubWithSum at 0x7fbac0e89 def smallestSubWithSum ( arr , n , x ) :			    def smallestSubWithSum ( arr , n , n , n ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  curr_sum = 0						    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 3 ( curr_sum )				      	  min_len = n + 1					     Returns the maximum value of the maximum value of the maximu /MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE.p
							      	  start = 0						     """							  y", line 34	  def f_filled ( arr , n , n , n ) :
3 4 LOAD_FAST 1 ( n )					      	  end = 0						    	n = 0							       ^ SyntaxError: duplicate argument 'n' in func
6 LOAD_CONST 2 ( 1 )					      	  while ( end < n ) :					    	while n < n :						  tion definition
8 BINARY_ADD						      	      while ( curr_sum <= x and end < n ) :		    	    n = n - n						  
10 STORE_FAST 4 ( min_len )				      		  curr_sum += arr [ end ]			    	return n						  
							      		  end += 1					    								  
4 12 LOAD_CONST 1 ( 0 )					      	      while ( curr_sum > x and start < n ) :		    								  
14 STORE_FAST 5 ( start )				      		  if ( end - start < min_len ) :		    								  
							      		      min_len = end - start			    								  
5 16 LOAD_CONST 1 ( 0 )					      		  curr_sum -= arr [ start ]			    								  
18 STORE_FAST 6 ( end )					      		  start += 1					    								  
							      	  return min_len					    								  
6 20 SETUP_LOOP 116 ( to 138 )				      								    								  
>> 22 LOAD_FAST 6 ( end )				      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
7 30 SETUP_LOOP 40 ( to 72 )				      								    								  
>> 32 LOAD_FAST 3 ( curr_sum )				      								    								  
34 LOAD_FAST 2 ( x )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 70					      								    								  
40 LOAD_FAST 6 ( end )					      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
8 48 LOAD_FAST 3 ( curr_sum )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 6 ( end )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
9 60 LOAD_FAST 6 ( end )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 6 ( end )					      								    								  
68 JUMP_ABSOLUTE 32					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
10 >> 72 SETUP_LOOP 60 ( to 134 )			      								    								  
>> 74 LOAD_FAST 3 ( curr_sum )				      								    								  
76 LOAD_FAST 2 ( x )					      								    								  
78 COMPARE_OP 4 ( > )					      								    								  
80 POP_JUMP_IF_FALSE 132				      								    								  
82 LOAD_FAST 5 ( start )				      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 COMPARE_OP 0 ( < )					      								    								  
88 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
11 90 LOAD_FAST 6 ( end )				      								    								  
92 LOAD_FAST 5 ( start )				      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_FAST 4 ( min_len )				      								    								  
98 COMPARE_OP 0 ( < )					      								    								  
100 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
12 102 LOAD_FAST 6 ( end )				      								    								  
104 LOAD_FAST 5 ( start )				      								    								  
106 BINARY_SUBTRACT					      								    								  
108 STORE_FAST 4 ( min_len )				      								    								  
							      								    								  
13 >> 110 LOAD_FAST 3 ( curr_sum )			      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 5 ( start )				      								    								  
116 BINARY_SUBSCR					      								    								  
118 INPLACE_SUBTRACT					      								    								  
120 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
14 122 LOAD_FAST 5 ( start )				      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 5 ( start )				      								    								  
130 JUMP_ABSOLUTE 74					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 JUMP_ABSOLUTE 22					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
15 >> 138 LOAD_FAST 4 ( min_len )			      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_PRIME_FACTOR_GIVEN_NUMBER				      K_TH_PRIME_FACTOR_GIVEN_NUMBER				    K_TH_PRIME_FACTOR_GIVEN_NUMBER				  K_TH_PRIME_FACTOR_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object kPrimeFactor at 0x7fbac0e8bc90, f def kPrimeFactor ( n , k ) :				    def kspherFactor ( n ) :					  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 44 ( to 46 )				      	  while ( n % 2 == 0 ) :				    	for k in n :						  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
>> 2 LOAD_FAST 0 ( n )					      	      k = k - 1						    	    if k not in n :					  /eval_scripts/dis_sa-python_sa.test/K_TH_PRIME_FAC
4 LOAD_CONST 1 ( 2 )					      	      n = n / 2						    		return n					  TOR_GIVEN_NUMBER.py", line 60, in <module>	 if
6 BINARY_MODULO						      	      if ( k == 0 ) :					    	return n						  f_filled(*parameters_set) == f_gold(*parameters_se
8 LOAD_CONST 2 ( 0 )					      		  return 2					    								  t): TypeError: f_filled() takes 1 positional argum
10 COMPARE_OP 2 ( == )					      	  i = 3							    								  ent but 2 were given
12 POP_JUMP_IF_FALSE 44					      	  while i <= math.sqrt ( n ) :				    								  
							      	      while ( n % i == 0 ) :				    								  
3 14 LOAD_FAST 1 ( k )					      		  if ( k == 1 ) :				    								  
16 LOAD_CONST 3 ( 1 )					      		      return i					    								  
18 BINARY_SUBTRACT					      		  k = k - 1					    								  
20 STORE_FAST 1 ( k )					      		  n = n / i					    								  
							      	      i = i + 2						    								  
4 22 LOAD_FAST 0 ( n )					      	  if ( n > 2 and k == 1 ) :				    								  
24 LOAD_CONST 1 ( 2 )					      	      return n						    								  
26 BINARY_TRUE_DIVIDE					      	  return - 1						    								  
28 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 30 LOAD_FAST 1 ( k )					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 2					      								    								  
							      								    								  
6 38 LOAD_CONST 1 ( 2 )					      								    								  
40 RETURN_VALUE						      								    								  
42 JUMP_ABSOLUTE 2					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_CONST 4 ( 3 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 50 SETUP_LOOP 72 ( to 124 )				      								    								  
>> 52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_GLOBAL 0 ( math )				      								    								  
56 LOAD_METHOD 1 ( sqrt )				      								    								  
58 LOAD_FAST 0 ( n )					      								    								  
60 CALL_METHOD 1					      								    								  
62 COMPARE_OP 1 ( <= )					      								    								  
64 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
9 66 SETUP_LOOP 44 ( to 112 )				      								    								  
>> 68 LOAD_FAST 0 ( n )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_MODULO					      								    								  
74 LOAD_CONST 2 ( 0 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
10 80 LOAD_FAST 1 ( k )					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( i )					      								    								  
90 RETURN_VALUE						      								    								  
							      								    								  
12 >> 92 LOAD_FAST 1 ( k )				      								    								  
94 LOAD_CONST 3 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 1 ( k )					      								    								  
							      								    								  
13 100 LOAD_FAST 0 ( n )				      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 BINARY_TRUE_DIVIDE					      								    								  
106 STORE_FAST 0 ( n )					      								    								  
108 JUMP_ABSOLUTE 68					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
14 >> 112 LOAD_FAST 2 ( i )				      								    								  
114 LOAD_CONST 1 ( 2 )					      								    								  
116 BINARY_ADD						      								    								  
118 STORE_FAST 2 ( i )					      								    								  
120 JUMP_ABSOLUTE 52					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
15 >> 124 LOAD_FAST 0 ( n )				      								    								  
126 LOAD_CONST 1 ( 2 )					      								    								  
128 COMPARE_OP 4 ( > )					      								    								  
130 POP_JUMP_IF_FALSE 144				      								    								  
132 LOAD_FAST 1 ( k )					      								    								  
134 LOAD_CONST 3 ( 1 )					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
16 140 LOAD_FAST 0 ( n )				      								    								  
142 RETURN_VALUE					      								    								  
							      								    								  
17 >> 144 LOAD_CONST 5 ( - 1 )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K     GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	    GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	  GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K
--							      --							    --								  --
Disassembly of <code object printSumSimple at 0x7fbac0e89d20, def printSumSimple ( mat , k ) :				    def printSumSimple ( mat , k , n , v , v , v , v , v , v , v  script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k > n ) :					    								  
2 LOAD_GLOBAL 0 ( n )					      	      return						    								  
4 COMPARE_OP 4 ( > )					      	  for i in range ( n - k + 1 ) :			    								  
6 POP_JUMP_IF_FALSE 12					      	      for j in range ( n - k + 1 ) :			    								  
							      		  sum = 0					    								  
3 8 LOAD_CONST 0 ( None )				      		  for p in range ( i , k + i ) :		    								  
10 RETURN_VALUE						      		      for q in range ( j , k + j ) :		    								  
							      			  sum += mat [ p ] [ q ]		    								  
4 >> 12 SETUP_LOOP 136 ( to 150 )			      		  print ( sum , end = " " )			    								  
14 LOAD_GLOBAL 1 ( range )				      	      print ( )						    								  
16 LOAD_GLOBAL 0 ( n )					      								    								  
18 LOAD_FAST 1 ( k )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 116 ( to 148 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 34 SETUP_LOOP 104 ( to 140 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_GLOBAL 0 ( n )					      								    								  
40 LOAD_FAST 1 ( k )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 84 ( to 138 )				      								    								  
54 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 56 LOAD_CONST 2 ( 0 )					      								    								  
58 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
7 60 SETUP_LOOP 62 ( to 124 )				      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_FAST 1 ( k )					      								    								  
68 LOAD_FAST 2 ( i )					      								    								  
70 BINARY_ADD						      								    								  
72 CALL_FUNCTION 2					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 44 ( to 122 )				      								    								  
78 STORE_FAST 5 ( p )					      								    								  
							      								    								  
8 80 SETUP_LOOP 38 ( to 120 )				      								    								  
82 LOAD_GLOBAL 1 ( range )				      								    								  
84 LOAD_FAST 3 ( j )					      								    								  
86 LOAD_FAST 1 ( k )					      								    								  
88 LOAD_FAST 3 ( j )					      								    								  
90 BINARY_ADD						      								    								  
92 CALL_FUNCTION 2					      								    								  
94 GET_ITER						      								    								  
>> 96 FOR_ITER 20 ( to 118 )				      								    								  
98 STORE_FAST 6 ( q )					      								    								  
							      								    								  
9 100 LOAD_FAST 4 ( sum )				      								    								  
102 LOAD_FAST 0 ( mat )					      								    								  
104 LOAD_FAST 5 ( p )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 6 ( q )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( sum )				      								    								  
116 JUMP_ABSOLUTE 96					      								    								  
>> 118 POP_BLOCK					      								    								  
>> 120 JUMP_ABSOLUTE 76					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
10 >> 124 LOAD_GLOBAL 2 ( print )			      								    								  
126 LOAD_FAST 4 ( sum )					      								    								  
128 LOAD_CONST 3 ( ' ' )				      								    								  
130 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
136 JUMP_ABSOLUTE 52					      								    								  
>> 138 POP_BLOCK					      								    								  
							      								    								  
11 >> 140 LOAD_GLOBAL 2 ( print )			      								    								  
142 CALL_FUNCTION 0					      								    								  
144 POP_TOP						      								    								  
146 JUMP_ABSOLUTE 30					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		      COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		    COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		  COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE
--							      --							    --								  --
Disassembly of <code object printRect at 0x7fbac<<unk>> de40, def printRect ( X , Y , n ) :				    def printRect ( X ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  Xmax = max ( X )					    	"""							  
2 LOAD_FAST 0 ( X )					      	  Xmin = min ( X )					     Return the max of X and the X of X and X of X and X of X and 
4 CALL_FUNCTION 1					      	  Ymax = max ( Y )					     """							  
6 STORE_FAST 3 ( Xmax )					      	  Ymin = min ( Y )					    	X = max ( X )						  
							      	  print ( "{" , Xmin , ", " , Ymin , "}" , sep = "" )	    	X = X [ 0 ]						  
3 8 LOAD_GLOBAL 1 ( min )				      	  print ( "{" , Xmin , ", " , Ymax , "}" , sep = "" )	    	X = X [ 0 ]						  
10 LOAD_FAST 0 ( X )					      	  print ( "{" , Xmax , ", " , Ymax , "}" , sep = "" )	    	X = X [ 1 ]						  
12 CALL_FUNCTION 1					      	  print ( "{" , Xmax , ", " , Ymin , "}" , sep = "" )	    	X = X [ 0 ]						  
14 STORE_FAST 4 ( Xmin )				      								    	X = X [ 0 ]						  
							      								    	X = X [ 0 ]						  
4 16 LOAD_GLOBAL 0 ( max )				      								    	X = X [ 1 ]						  
18 LOAD_FAST 1 ( Y )					      								    	X = X [ 0 ]						  
20 CALL_FUNCTION 1					      								    	X = X [ 1 ]						  
22 STORE_FAST 5 ( Ymax )				      								    	X [ 0 ] = X [ 0 ]					  
							      								    	X [ 1 ] = X [ 0 ]					  
5 24 LOAD_GLOBAL 1 ( min )				      								    	X [ 1 ] = X [ 0 ]					  
26 LOAD_FAST 1 ( Y )					      								    	X [ 1 ] = X [ 0 ]					  
28 CALL_FUNCTION 1					      								    	X [ 1 ] = X [ 0 ]					  
30 STORE_FAST 6 ( Ymin )				      								    	X [ 1 ] = X [ 0 ]					  
							      								    	X [ 2 ] = X [ 0 ]					  
6 32 LOAD_GLOBAL 2 ( print )				      								    	X [ 1 ] = X [ 0 ]					  
34 LOAD_CONST 1 ( '{' )					      								    	X [ 1 ] = X [ 0 ]					  
36 LOAD_FAST 4 ( Xmin )					      								    	X [ 2 ] = X [ 0 ]					  
38 LOAD_CONST 2 ( ', ' )				      								    	X [ 3 ] = X [ 0 ]					  
40 LOAD_FAST 6 ( Ymin )					      								    	X [ 1 ] = X [ 0 ]					  
42 LOAD_CONST 3 ( '}' )					      								    	X [ 2 ] = X [ 0 ]					  
44 LOAD_CONST 4 ( '' )					      								    	X [ 1 ] = X [ 0 ]					  
46 LOAD_CONST 5 ( ( 'sep' , ) )				      								    	X [ 2 ] = X [ 0 ]					  
48 CALL_FUNCTION_KW 6					      								    	X [ 1 ] = X [ 0 ]					  
50 POP_TOP						      								    	X [ 2 ] = X [ 0 ]					  
							      								    	X [ 1 ] = X [ 0 ]					  
7 52 LOAD_GLOBAL 2 ( print )				      								    	X [ 2 ] = X [ 0 ]					  
54 LOAD_CONST 1 ( '{' )					      								    	X [ 1 ] = X [ 0 ]					  
56 LOAD_FAST 4 ( Xmin )					      								    	X [ 2 ] = X [ 0 ]					  
58 LOAD_CONST 2 ( ', ' )				      								    	X [ 3 ] = X [ 0 ]					  
60 LOAD_FAST 5 ( Ymax )					      								    	X [ 2 ] = X [ 0 ]					  
62 LOAD_CONST 3 ( '}' )					      								    	X [ 3 ] = X [ 0 ]					  
64 LOAD_CONST 4 ( '' )					      								    	X [ 2 ] = X [ 0 ]					  
66 LOAD_CONST 5 ( ( 'sep' , ) )				      								    	X [ 2 ] = X [ 0 ]					  
68 CALL_FUNCTION_KW 6					      								    	X [ 2 ] = X [ 0 ]					  
70 POP_TOP						      								    	X [ 3 ] = X [ 0 ]					  
							      								    	X [ 2 ] = X [ 0 ]					  
8 72 LOAD_GLOBAL 2 ( print )				      								    	X [ 2 ] = X [ 0 ]					  
74 LOAD_CONST 1 ( '{' )					      								    	X [ 2 ] = X [ 0 ]					  
76 LOAD_FAST 3 ( Xmax )					      								    	X [ 3 ] = X [ 0 ]					  
78 LOAD_CONST 2 ( ', ' )				      								    	X [ 2 ] = X [ 0 ]					  
80 LOAD_FAST 5 ( Ymax )					      								    	X [ 2 ] = X [ 0 ]					  
82 LOAD_CONST 3 ( '}' )					      								    	X [ 2 ] = X [ 0 ]					  
84 LOAD_CONST 4 ( '' )					      								    	X [ 3 ] = X [ 0 ]					  
86 LOAD_CONST 5 ( ( 'sep' , ) )				      								    	X [ 2 ] = X [ : , 0 ]					  
88 CALL_FUNCTION_KW 6					      								    	return X						  
90 POP_TOP						      								    								  
							      								    								  
9 92 LOAD_GLOBAL 2 ( print )				      								    								  
94 LOAD_CONST 1 ( '{' )					      								    								  
96 LOAD_FAST 3 ( Xmax )					      								    								  
98 LOAD_CONST 2 ( ', ' )				      								    								  
100 LOAD_FAST 6 ( Ymin )				      								    								  
102 LOAD_CONST 3 ( '}' )				      								    								  
104 LOAD_CONST 4 ( '' )					      								    								  
106 LOAD_CONST 5 ( ( 'sep' , ) )			      								    								  
108 CALL_FUNCTION_KW 6					      								    								  
110 POP_TOP						      								    								  
112 LOAD_CONST 0 ( None )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY					      FLOOR_IN_A_SORTED_ARRAY					    FLOOR_IN_A_SORTED_ARRAY					  FLOOR_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object floorSearch at 0x7fbac<<unk>> d54 def floorSearch ( arr , low , high , x ) :		    def floorSearch ( arr , low , high , high ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if ( low > high ) :					    	if low < high :						  
2 LOAD_FAST 2 ( high )					      	      return - 1					    	    return None						  
4 COMPARE_OP 4 ( > )					      	  if ( x >= arr [ high ] ) :				    	if low < high :						  
6 POP_JUMP_IF_FALSE 12					      	      return high					    	    return None						  
							      	  mid = int ( ( low + high ) / 2 )			    	if low < high :						  
3 8 LOAD_CONST 1 ( - 1 )				      	  if ( arr [ mid ] == x ) :				    	    return None						  
10 RETURN_VALUE						      	      return mid					    	if high < high :					  
							      	  if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 	    return None						  
4 >> 12 LOAD_FAST 3 ( x )				      	      return mid - 1					    	if high < high :					  
14 LOAD_FAST 0 ( arr )					      	  if ( x < arr [ mid ] ) :				    	    return None						  
16 LOAD_FAST 2 ( high )					      	      return floorSearch ( arr , low , mid - 1 , x )	    	if high < high :					  
18 BINARY_SUBSCR					      	  return floorSearch ( arr , mid + 1 , high , x )	    	    return None						  
20 COMPARE_OP 5 ( >= )					      								    	if high < high :					  
22 POP_JUMP_IF_FALSE 28					      								    	    return None						  
							      								    	return None						  
5 24 LOAD_FAST 2 ( high )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_GLOBAL 0 ( int )				      								    								  
30 LOAD_FAST 1 ( low )					      								    								  
32 LOAD_FAST 2 ( high )					      								    								  
34 BINARY_ADD						      								    								  
36 LOAD_CONST 2 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
7 44 LOAD_FAST 0 ( arr )				      								    								  
46 LOAD_FAST 4 ( mid )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 3 ( x )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
8 56 LOAD_FAST 4 ( mid )				      								    								  
58 RETURN_VALUE						      								    								  
							      								    								  
9 >> 60 LOAD_FAST 4 ( mid )				      								    								  
62 LOAD_CONST 3 ( 0 )					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 104				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( mid )					      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 3 ( x )					      								    								  
80 COMPARE_OP 1 ( <= )					      								    								  
82 POP_JUMP_IF_FALSE 104				      								    								  
84 LOAD_FAST 3 ( x )					      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( mid )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 0 ( < )					      								    								  
94 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
10 96 LOAD_FAST 4 ( mid )				      								    								  
98 LOAD_CONST 4 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 RETURN_VALUE					      								    								  
							      								    								  
11 >> 104 LOAD_FAST 3 ( x )				      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 4 ( mid )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
12 116 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 1 ( low )					      								    								  
122 LOAD_FAST 4 ( mid )					      								    								  
124 LOAD_CONST 4 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_FAST 3 ( x )					      								    								  
130 CALL_FUNCTION 4					      								    								  
132 RETURN_VALUE					      								    								  
							      								    								  
13 >> 134 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 4 ( mid )					      								    								  
140 LOAD_CONST 4 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 LOAD_FAST 2 ( high )				      								    								  
146 LOAD_FAST 3 ( x )					      								    								  
148 CALL_FUNCTION 4					      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE					      RECAMANS_SEQUENCE						    RECAMANS_SEQUENCE						  RECAMANS_SEQUENCE
--							      --							    --								  --
Disassembly of <code object recaman at 0x7fbac0e8bc90, file " def recaman ( n ) :					    def recaman ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  arr = [ 0 ] * n					    	"""							  
2 BUILD_LIST 1						      	  arr [ 0 ] = 0						     Return the given n of the given n in the given n of n in n n 
4 LOAD_FAST 0 ( n )					      	  print ( arr [ 0 ] , end = ", " )			    								  
6 BINARY_MULTIPLY					      	  for i in range ( 1 , n ) :				     Parameters							  
8 STORE_FAST 1 ( arr )					      	      curr = arr [ i - 1 ] - i				     -----							  
							      	      for j in range ( 0 , i ) :			     n : array_like						  
3 10 LOAD_CONST 1 ( 0 )					      		  if ( ( arr [ j ] == curr ) or curr < 0 ) :	     The number of n in n of n in n n				  
12 LOAD_FAST 1 ( arr )					      		      curr = arr [ i - 1 ] + i			    								  
14 LOAD_CONST 1 ( 0 )					      		      break					     Returns							  
16 STORE_SUBSCR						      	      arr [ i ] = curr					     -----							  
							      	      print ( arr [ i ] , end = ", " )			     n : array_like						  
4 18 LOAD_GLOBAL 0 ( print )				      								     The number of n in n n of n n in n n in n n n n		  
20 LOAD_FAST 1 ( arr )					      								    								  
22 LOAD_CONST 1 ( 0 )					      								     Returns							  
24 BINARY_SUBSCR					      								     -----							  
26 LOAD_CONST 2 ( ', ' )				      								     n : ndarray						  
28 LOAD_CONST 3 ( ( 'end' , ) )				      								     Output array of n n n n n n				  
30 CALL_FUNCTION_KW 2					      								    								  
32 POP_TOP						      								     """							  
							      								    	return n - 1						  
5 34 SETUP_LOOP 116 ( to 152 )				      								    								  
36 LOAD_GLOBAL 1 ( range )				      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 102 ( to 150 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 50 LOAD_FAST 1 ( arr )				      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 LOAD_CONST 4 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 STORE_FAST 3 ( curr )				      								    								  
							      								    								  
7 66 SETUP_LOOP 56 ( to 124 )				      								    								  
68 LOAD_GLOBAL 1 ( range )				      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 LOAD_FAST 2 ( i )					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 42 ( to 122 )				      								    								  
80 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 82 LOAD_FAST 1 ( arr )				      								    								  
84 LOAD_FAST 4 ( j )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 3 ( curr )					      								    								  
90 COMPARE_OP 2 ( == )					      								    								  
92 POP_JUMP_IF_TRUE 102					      								    								  
94 LOAD_FAST 3 ( curr )					      								    								  
96 LOAD_CONST 1 ( 0 )					      								    								  
98 COMPARE_OP 0 ( < )					      								    								  
100 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
9 >> 102 LOAD_FAST 1 ( arr )				      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 LOAD_CONST 4 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 2 ( i )					      								    								  
114 BINARY_ADD						      								    								  
116 STORE_FAST 3 ( curr )				      								    								  
							      								    								  
10 118 BREAK_LOOP					      								    								  
120 JUMP_ABSOLUTE 78					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
11 >> 124 LOAD_FAST 3 ( curr )				      								    								  
126 LOAD_FAST 1 ( arr )					      								    								  
128 LOAD_FAST 2 ( i )					      								    								  
130 STORE_SUBSCR					      								    								  
							      								    								  
12 132 LOAD_GLOBAL 0 ( print )				      								    								  
134 LOAD_FAST 1 ( arr )					      								    								  
136 LOAD_FAST 2 ( i )					      								    								  
138 BINARY_SUBSCR					      								    								  
140 LOAD_CONST 2 ( ', ' )				      								    								  
142 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
144 CALL_FUNCTION_KW 2					      								    								  
146 POP_TOP						      								    								  
148 JUMP_ABSOLUTE 46					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 LOAD_CONST 0 ( None )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO			    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO
--							      --							    --								  --
Disassembly of <code object findTriplets at 0x7fbac<<unk>> de def findTriplets ( arr , n ) :				    def findTriplets ( ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( True )				      	  found = True						    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 2 ( found )				      	  for i in range ( 0 , n - 2 ) :			     Return True if found in a list of strings in ``(n++)`` is a  /eval_scripts/dis_sa-python_sa.test/FIND_TRIPLETS_
							      	      for j in range ( i + 1 , n - 1 ) :		     list of strings in strings if found in the list of strings	  ARRAY_WHOSE_SUM_EQUAL_ZERO.py", line 87, in <modul
3 4 SETUP_LOOP 130 ( to 136 )				      		  for k in range ( j + 1 , n ) :		     """							  e>	 f_filled(*(filled_function_param[i])) TypeE
6 LOAD_GLOBAL 0 ( range )				      		      if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) 	# We do not found in the strings of strings		  rror: f_filled() takes 0 positional arguments but
8 LOAD_CONST 2 ( 0 )					      			  print ( arr [ i ] , arr [ j ] , arr [ k ] 	# characters are in strings of strings strings are not fo 2 were given
10 LOAD_FAST 1 ( n )					      			  found = True				    	# in strings of strings strings				  
12 LOAD_CONST 3 ( 2 )					      	  if ( found == False ) :				    	# characters are strings in strings			  
14 BINARY_SUBTRACT					      	      print ( " not exist " )				    	# characters are strings in strings SPACETOKEN strings SP 
16 CALL_FUNCTION 2					      								    	# characters are strings as strings strings strings strin 
18 GET_ITER						      								    	# characters are strings strings strings strings strings  
>> 20 FOR_ITER 112 ( to 134 )				      								    	# strings are strings strings strings strings strings str 
22 STORE_FAST 3 ( i )					      								    	# strings strings strings strings strings strings strings 
							      								    	# strings strings strings strings strings strings strings 
4 24 SETUP_LOOP 106 ( to 132 )				      								    	# strings strings strings strings strings strings strings 
26 LOAD_GLOBAL 0 ( range )				      								    	# strings strings strings strings strings strings strings 
28 LOAD_FAST 3 ( i )					      								    	# strings strings strings strings strings strings strings 
30 LOAD_CONST 4 ( 1 )					      								    	# strings strings strings strings strings strings strings 
32 BINARY_ADD						      								    	# strings strings strings strings strings strings strings 
34 LOAD_FAST 1 ( n )					      								    	# strings strings strings strings strings strings strings 
36 LOAD_CONST 4 ( 1 )					      								    	# strings strings strings strings strings strings	  
38 BINARY_SUBTRACT					      								    	# strings strings strings strings strings strings strings 
40 CALL_FUNCTION 2					      								    	# strings strings strings strings strings strings strings 
42 GET_ITER						      								    	# strings strings strings strings strings strings	  
>> 44 FOR_ITER 84 ( to 130 )				      								    	# strings strings strings strings strings strings	  
46 STORE_FAST 4 ( j )					      								    	# strings strings strings strings strings strings strings 
							      								    	# strings strings strings strings strings strings strings 
5 48 SETUP_LOOP 78 ( to 128 )				      								    	# strings strings strings				  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 LOAD_CONST 4 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 60 ( to 126 )				      								    								  
66 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 4 ( j )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 5 ( k )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 BINARY_ADD						      								    								  
90 LOAD_CONST 2 ( 0 )					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 96 LOAD_GLOBAL 1 ( print )				      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 4 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_FAST 0 ( arr )					      								    								  
112 LOAD_FAST 5 ( k )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 CALL_FUNCTION 3					      								    								  
118 POP_TOP						      								    								  
							      								    								  
8 120 LOAD_CONST 1 ( True )				      								    								  
122 STORE_FAST 2 ( found )				      								    								  
124 JUMP_ABSOLUTE 64					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 JUMP_ABSOLUTE 44					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 JUMP_ABSOLUTE 20					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
9 >> 136 LOAD_FAST 2 ( found )				      								    								  
138 LOAD_CONST 5 ( False )				      								    								  
140 COMPARE_OP 2 ( == )					      								    								  
142 POP_JUMP_IF_FALSE 152				      								    								  
							      								    								  
10 144 LOAD_GLOBAL 1 ( print )				      								    								  
146 LOAD_CONST 6 ( ' not exist ' )			      								    								  
148 CALL_FUNCTION 1					      								    								  
150 POP_TOP						      								    								  
>> 152 LOAD_CONST 0 ( None )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1	      COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		    COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		  COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1
--							      --							    --								  --
Disassembly of <code object getInvCount at 0x7fbac0e89d20, fi def getInvCount ( arr , n ) :				    def getInvCount ( arr , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  invcount = 0						    	""" STRNEWLINE SPACETOKEN Return SPACETOKEN the SPACETOKE l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 2 ( invcount )				      	  for i in range ( 1 , n - 1 ) :			    								  /COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1.
							      	      small = 0						    								  py", line 53	   print("#Results: %i, %i" % (n_suc
3 4 SETUP_LOOP 140 ( to 146 )				      	      for j in range ( i + 1 , n ) :			    								  cess, len(param)))
6 LOAD_GLOBAL 0 ( range )				      		  if ( arr [ i ] > arr [ j ] ) :		    								  			 ^ SyntaxError: EOF while sc
8 LOAD_CONST 2 ( 1 )					      		      small += 1				    								  anning triple-quoted string literal
10 LOAD_FAST 1 ( n )					      	      great = 0 ;					    								  
12 LOAD_CONST 2 ( 1 )					      	      for j in range ( i - 1 , - 1 , - 1 ) :		    								  
14 BINARY_SUBTRACT					      		  if ( arr [ i ] < arr [ j ] ) :		    								  
16 CALL_FUNCTION 2					      		      great += 1				    								  
18 GET_ITER						      	      invcount += great * small				    								  
>> 20 FOR_ITER 122 ( to 144 )				      	  return invcount					    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 4 ( small )				      								    								  
							      								    								  
5 28 SETUP_LOOP 46 ( to 76 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 28 ( to 74 )				      								    								  
46 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 4 ( > )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 64 LOAD_FAST 4 ( small )				      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 4 ( small )				      								    								  
72 JUMP_ABSOLUTE 44					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_CONST 1 ( 0 )				      								    								  
78 STORE_FAST 6 ( great )				      								    								  
							      								    								  
9 80 SETUP_LOOP 48 ( to 130 )				      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 3 ( - 1 )					      								    								  
92 LOAD_CONST 3 ( - 1 )					      								    								  
94 CALL_FUNCTION 3					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 28 ( to 128 )				      								    								  
100 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 102 LOAD_FAST 0 ( arr )				      								    								  
104 LOAD_FAST 3 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 5 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 COMPARE_OP 0 ( < )					      								    								  
116 POP_JUMP_IF_FALSE 98				      								    								  
							      								    								  
11 118 LOAD_FAST 6 ( great )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 6 ( great )				      								    								  
126 JUMP_ABSOLUTE 98					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
12 >> 130 LOAD_FAST 2 ( invcount )			      								    								  
132 LOAD_FAST 6 ( great )				      								    								  
134 LOAD_FAST 4 ( small )				      								    								  
136 BINARY_MULTIPLY					      								    								  
138 INPLACE_ADD						      								    								  
140 STORE_FAST 2 ( invcount )				      								    								  
142 JUMP_ABSOLUTE 20					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
13 >> 146 LOAD_FAST 2 ( invcount )			      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1      FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1	    FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1	  FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_SET_1_1
--							      --							    --								  --
Disassembly of <code object isSubset at 0x7fbac<<unk>> d540,  def isSubset ( arr1 , arr2 , m , n ) :			    def isSubset ( arr1 , arr2 = 0 , arr2 = 1 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	"""							  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 STORE_FAST 4 ( i )					      	  j = 0							     Return the array of the array of the array of the array of t /FIND_WHETHER_AN_ARRAY_IS_SUBSET_OF_ANOTHER_ARRAY_
							      	  if m < n :						     array of the array of the array of the array of the array of SET_1_1.py", line 35	   def f_filled ( arr1 , arr
3 4 LOAD_CONST 1 ( 0 )					      	      return 0						     array of the array of the array of the array of the array of 2 = 0 , arr2 = 1 ) :	   ^ SyntaxError: duplicate
6 STORE_FAST 5 ( j )					      	  arr1.sort ( )						     the array of the array of the array of the array of the arra argument 'arr2' in function definition
							      	  arr2.sort ( )						     the array of the array of the array of the array of the arra 
4 8 LOAD_FAST 2 ( m )					      	  while i < n and j < m :				     the array of the array of the array of the array of the arra 
10 LOAD_FAST 3 ( n )					      	      if arr1 [ j ] < arr2 [ i ] :			     the array of the array of the array of the array of the arra 
12 COMPARE_OP 0 ( < )					      		  j += 1					     array of the array of array of the array of the array of the 
14 POP_JUMP_IF_FALSE 20					      	      elif arr1 [ j ] == arr2 [ i ] :			     array of the array of the array of the array of the array of 
							      		  j += 1					     array of the array of the array of the array of the array ar 
5 16 LOAD_CONST 1 ( 0 )					      		  i += 1					     array of the array of array of the array			  
18 RETURN_VALUE						      	      elif arr1 [ j ] > arr2 [ i ] :			     array of array array of array array of the array		  
							      		  return 0					     array of array array of the array of the array of the array  
6 >> 20 LOAD_FAST 0 ( arr1 )				      	  return False if i < n else True			     array of array array array of the array array		  
22 LOAD_METHOD 0 ( sort )				      								    								  
24 CALL_METHOD 0					      								     """							  
26 POP_TOP						      								    	arr2 = arr2						  
							      								    	arr2 = arr2						  
7 28 LOAD_FAST 1 ( arr2 )				      								    	arr2 = arr2						  
30 LOAD_METHOD 0 ( sort )				      								    	arr2 = arr2						  
32 CALL_METHOD 0					      								    	arr2 = arr2						  
34 POP_TOP						      								    	return arr2						  
							      								    								  
8 36 SETUP_LOOP 100 ( to 138 )				      								    								  
>> 38 LOAD_FAST 4 ( i )					      								    								  
40 LOAD_FAST 3 ( n )					      								    								  
42 COMPARE_OP 0 ( < )					      								    								  
44 POP_JUMP_IF_FALSE 136				      								    								  
46 LOAD_FAST 5 ( j )					      								    								  
48 LOAD_FAST 2 ( m )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 136				      								    								  
							      								    								  
9 54 LOAD_FAST 0 ( arr1 )				      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( arr2 )					      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 0 ( < )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 70 LOAD_FAST 5 ( j )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 5 ( j )					      								    								  
78 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
11 >> 80 LOAD_FAST 0 ( arr1 )				      								    								  
82 LOAD_FAST 5 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 1 ( arr2 )					      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 2 ( == )					      								    								  
94 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
12 96 LOAD_FAST 5 ( j )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 5 ( j )					      								    								  
							      								    								  
13 104 LOAD_FAST 4 ( i )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 4 ( i )					      								    								  
112 JUMP_ABSOLUTE 38					      								    								  
							      								    								  
14 >> 114 LOAD_FAST 0 ( arr1 )				      								    								  
116 LOAD_FAST 5 ( j )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 1 ( arr2 )				      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 COMPARE_OP 4 ( > )					      								    								  
128 POP_JUMP_IF_FALSE 38				      								    								  
							      								    								  
15 130 LOAD_CONST 1 ( 0 )				      								    								  
132 RETURN_VALUE					      								    								  
134 JUMP_ABSOLUTE 38					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
16 >> 138 LOAD_FAST 4 ( i )				      								    								  
140 LOAD_FAST 3 ( n )					      								    								  
142 COMPARE_OP 0 ( < )					      								    								  
144 POP_JUMP_IF_FALSE 150				      								    								  
146 LOAD_CONST 3 ( False )				      								    								  
148 RETURN_VALUE					      								    								  
>> 150 LOAD_CONST 4 ( True )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER		      C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			    C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			  C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER
--							      --							    --								  --
Disassembly of <code object getSecondMostFreq at 0x7fbac<<unk def getSecondMostFreq ( str ) :				    def getSecondMostFreq ( ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 256 )				      	  NO_OF_CHARS = 256					    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 STORE_FAST 1 ( NO_OF_CHARS )				      	  count = [ 0 ] * NO_OF_CHARS				     Returns a number of a file and return a number of the file a /eval_scripts/dis_sa-python_sa.test/C_PROGRAM_FIND
							      	  for i in range ( len ( str ) ) :			     number of the file file and return a number of the file file _SECOND_FREQUENT_CHARACTER.py", line 56, in <modul
3 4 LOAD_CONST 2 ( 0 )					      	      count [ ord ( str [ i ] ) ] += 1			     file file file to the file file file file file file file fil e>	 if f_filled(*parameters_set) == f_gold(*par
6 BUILD_LIST 1						      	  first , second = 0 , 0				     """							  ameters_set): TypeError: f_filled() takes 0 positi
8 LOAD_FAST 1 ( NO_OF_CHARS )				      	  for i in range ( NO_OF_CHARS ) :			    	# TODO -- see ###					  onal arguments but 1 was given
10 BINARY_MULTIPLY					      	      if count [ i ] > count [ first ] :		    								  
12 STORE_FAST 2 ( count )				      		  second = first				    								  
							      		  first = i					    								  
4 14 SETUP_LOOP 44 ( to 60 )				      	      elif ( count [ i ] > count [ second ] and count [ i ] 								  
16 LOAD_GLOBAL 0 ( range )				      		  second = i					    								  
18 LOAD_GLOBAL 1 ( len )				      	  return chr ( second )					    								  
20 LOAD_FAST 0 ( str )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 28 ( to 58 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 32 LOAD_FAST 2 ( count )				      								    								  
34 LOAD_GLOBAL 2 ( ord )				      								    								  
36 LOAD_FAST 0 ( str )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 DUP_TOP_TWO						      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 ROT_THREE						      								    								  
54 STORE_SUBSCR						      								    								  
56 JUMP_ABSOLUTE 28					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
6 >> 60 LOAD_CONST 4 ( ( 0 , 0 ) )			      								    								  
62 UNPACK_SEQUENCE 2					      								    								  
64 STORE_FAST 4 ( first )				      								    								  
66 STORE_FAST 5 ( second )				      								    								  
							      								    								  
7 68 SETUP_LOOP 78 ( to 148 )				      								    								  
70 LOAD_GLOBAL 0 ( range )				      								    								  
72 LOAD_FAST 1 ( NO_OF_CHARS )				      								    								  
74 CALL_FUNCTION 1					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 66 ( to 146 )				      								    								  
80 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 82 LOAD_FAST 2 ( count )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( count )				      								    								  
90 LOAD_FAST 4 ( first )				      								    								  
92 BINARY_SUBSCR					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
9 98 LOAD_FAST 4 ( first )				      								    								  
100 STORE_FAST 5 ( second )				      								    								  
							      								    								  
10 102 LOAD_FAST 3 ( i )				      								    								  
104 STORE_FAST 4 ( first )				      								    								  
106 JUMP_ABSOLUTE 78					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 2 ( count )				      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 2 ( count )				      								    								  
116 LOAD_FAST 5 ( second )				      								    								  
118 BINARY_SUBSCR					      								    								  
120 COMPARE_OP 4 ( > )					      								    								  
122 POP_JUMP_IF_FALSE 78				      								    								  
124 LOAD_FAST 2 ( count )				      								    								  
126 LOAD_FAST 3 ( i )					      								    								  
128 BINARY_SUBSCR					      								    								  
130 LOAD_FAST 2 ( count )				      								    								  
132 LOAD_FAST 4 ( first )				      								    								  
134 BINARY_SUBSCR					      								    								  
136 COMPARE_OP 3 ( != )					      								    								  
138 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
12 140 LOAD_FAST 3 ( i )				      								    								  
142 STORE_FAST 5 ( second )				      								    								  
144 JUMP_ABSOLUTE 78					      								    								  
>> 146 POP_BLOCK					      								    								  
							      								    								  
13 >> 148 LOAD_GLOBAL 3 ( chr )				      								    								  
150 LOAD_FAST 5 ( second )				      								    								  
152 CALL_FUNCTION 1					      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_MOVES_KNIGHT					      POSSIBLE_MOVES_KNIGHT					    POSSIBLE_MOVES_KNIGHT					  POSSIBLE_MOVES_KNIGHT
--							      --							    --								  --
Disassembly of <code object findPossibleMoves at 0x7fbac0e89d def findPossibleMoves ( mat , p , q ) :			    def findPossibleMoves ( mat , count = 1 ) :			  script_not_found : None
3 0 LOAD_CONST 1 ( 2 )					      	  global n , m ;					    	"""							  
2 LOAD_CONST 2 ( 1 )					      	  X = [ 2 , 1 , - 1 , - 2 , - 2 , - 1 , 1 , 2 ] ;	     Return the number of the number of the number of the number  
4 LOAD_CONST 3 ( - 1 )					      	  Y = [ 1 , 2 , 2 , 1 , - 1 , - 2 , - 2 , - 1 ] ;	     number of the number of the number of the number of the numb 
6 LOAD_CONST 4 ( - 2 )					      	  count = 0 ;						     number of the number of the number of the number of the numb 
8 LOAD_CONST 4 ( - 2 )					      	  for i in range ( 8 ) :				     number of the number of the number of the number of the numb 
10 LOAD_CONST 3 ( - 1 )					      	      x = p + X [ i ] ;					     number of the number of the number of the number of the numb 
12 LOAD_CONST 2 ( 1 )					      	      y = q + Y [ i ] ;					     number of the number of number of the number of number of nu 
14 LOAD_CONST 1 ( 2 )					      	      if ( x >= 0 and y >= 0 and x < n and y < m and mat [   number of number of number of number of number of number of  
16 BUILD_LIST 8						      		  count += 1 ;					    								  
18 STORE_FAST 3 ( X )					      	  return count ;					     """							  
							      								    	mat = mat.getPossibleMoves ( mat , count = count )	  
4 20 LOAD_CONST 2 ( 1 )					      								    	mat.getPossibleMoves ( mat , count = count )		  
22 LOAD_CONST 1 ( 2 )					      								    	mat.getPossibleMoves ( mat , count = count )		  
24 LOAD_CONST 1 ( 2 )					      								    	mat.getPossibleMoves ( mat , count = count )		  
26 LOAD_CONST 2 ( 1 )					      								    	mat.getPossibleMoves ( mat , count = count )		  
28 LOAD_CONST 3 ( - 1 )					      								    	mat.getPossibleMoves ( mat , count = count )		  
30 LOAD_CONST 4 ( - 2 )					      								    	mat.getPossibleMoves ( mat , count = count )		  
32 LOAD_CONST 4 ( - 2 )					      								    	mat.getPossibleMoves ( mat , count )			  
34 LOAD_CONST 3 ( - 1 )					      								    	mat.getPossibleMoves ( mat , count = count )		  
36 BUILD_LIST 8						      								    	mat.getPossibleMoves ( mat )				  
38 STORE_FAST 4 ( Y )					      								    								  
							      								    								  
5 40 LOAD_CONST 5 ( 0 )					      								    								  
42 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 44 SETUP_LOOP 96 ( to 142 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 6 ( 8 )					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 84 ( to 140 )				      								    								  
56 STORE_FAST 6 ( i )					      								    								  
							      								    								  
7 58 LOAD_FAST 1 ( p )					      								    								  
60 LOAD_FAST 3 ( X )					      								    								  
62 LOAD_FAST 6 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_ADD						      								    								  
68 STORE_FAST 7 ( x )					      								    								  
							      								    								  
8 70 LOAD_FAST 2 ( q )					      								    								  
72 LOAD_FAST 4 ( Y )					      								    								  
74 LOAD_FAST 6 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 8 ( y )					      								    								  
							      								    								  
9 82 LOAD_FAST 7 ( x )					      								    								  
84 LOAD_CONST 5 ( 0 )					      								    								  
86 COMPARE_OP 5 ( >= )					      								    								  
88 POP_JUMP_IF_FALSE 54					      								    								  
90 LOAD_FAST 8 ( y )					      								    								  
92 LOAD_CONST 5 ( 0 )					      								    								  
94 COMPARE_OP 5 ( >= )					      								    								  
96 POP_JUMP_IF_FALSE 54					      								    								  
98 LOAD_FAST 7 ( x )					      								    								  
100 LOAD_GLOBAL 1 ( n )					      								    								  
102 COMPARE_OP 0 ( < )					      								    								  
104 POP_JUMP_IF_FALSE 54				      								    								  
106 LOAD_FAST 8 ( y )					      								    								  
108 LOAD_GLOBAL 2 ( m )					      								    								  
110 COMPARE_OP 0 ( < )					      								    								  
112 POP_JUMP_IF_FALSE 54				      								    								  
114 LOAD_FAST 0 ( mat )					      								    								  
116 LOAD_FAST 7 ( x )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 8 ( y )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 5 ( 0 )					      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 POP_JUMP_IF_FALSE 54				      								    								  
							      								    								  
10 130 LOAD_FAST 5 ( count )				      								    								  
132 LOAD_CONST 2 ( 1 )					      								    								  
134 INPLACE_ADD						      								    								  
136 STORE_FAST 5 ( count )				      								    								  
138 JUMP_ABSOLUTE 54					      								    								  
>> 140 POP_BLOCK					      								    								  
							      								    								  
11 >> 142 LOAD_FAST 5 ( count )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	      LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	    LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	  LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS
--							      --							    --								  --
Disassembly of <code object minimizeWithKSwaps at 0x7fbac<<un def minimizeWithKSwaps ( arr , n , k ) :			    def minimizeWithKSwapSwapSwapSwapSwapSwapSwapSwapSwapSwapSwap error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 150 ( to 152 )				      	  for i in range ( n - 1 ) :				    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_GLOBAL 0 ( range )				      	      pos = i						    								  /LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SW
4 LOAD_FAST 1 ( n )					      	      for j in range ( i + 1 , n ) :			    								  APS.py", line 30     def f_filled		   ^
6 LOAD_CONST 1 ( 1 )					      		  if ( j - i > k ) :				    								   SyntaxError: invalid syntax
8 BINARY_SUBTRACT					      		      break					    								  
10 CALL_FUNCTION 1					      		  if ( arr [ j ] < arr [ pos ] ) :		    								  
12 GET_ITER						      		      pos = j					    								  
>> 14 FOR_ITER 134 ( to 150 )				      	      for j in range ( pos , i , - 1 ) :		    								  
16 STORE_FAST 3 ( i )					      		  arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ 								  
							      	      k -= pos - i					    								  
3 18 LOAD_FAST 3 ( i )					      								    								  
20 STORE_FAST 4 ( pos )					      								    								  
							      								    								  
4 22 SETUP_LOOP 56 ( to 80 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 BINARY_ADD						      								    								  
32 LOAD_FAST 1 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 38 ( to 78 )				      								    								  
40 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 42 LOAD_FAST 5 ( j )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 54 BREAK_LOOP						      								    								  
							      								    								  
7 >> 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( pos )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
8 72 LOAD_FAST 5 ( j )					      								    								  
74 STORE_FAST 4 ( pos )					      								    								  
76 JUMP_ABSOLUTE 38					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
9 >> 80 SETUP_LOOP 54 ( to 136 )			      								    								  
82 LOAD_GLOBAL 0 ( range )				      								    								  
84 LOAD_FAST 4 ( pos )					      								    								  
86 LOAD_FAST 3 ( i )					      								    								  
88 LOAD_CONST 2 ( - 1 )					      								    								  
90 CALL_FUNCTION 3					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 38 ( to 134 )				      								    								  
96 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 5 ( j )					      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 5 ( j )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 ROT_TWO						      								    								  
116 LOAD_FAST 0 ( arr )					      								    								  
118 LOAD_FAST 5 ( j )					      								    								  
120 STORE_SUBSCR					      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 5 ( j )					      								    								  
126 LOAD_CONST 1 ( 1 )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 STORE_SUBSCR					      								    								  
132 JUMP_ABSOLUTE 94					      								    								  
>> 134 POP_BLOCK					      								    								  
							      								    								  
11 >> 136 LOAD_FAST 2 ( k )				      								    								  
138 LOAD_FAST 4 ( pos )					      								    								  
140 LOAD_FAST 3 ( i )					      								    								  
142 BINARY_SUBTRACT					      								    								  
144 INPLACE_SUBTRACT					      								    								  
146 STORE_FAST 2 ( k )					      								    								  
148 JUMP_ABSOLUTE 14					      								    								  
>> 150 POP_BLOCK					      								    								  
>> 152 LOAD_CONST 0 ( None )				      								    								  
154 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_
--							      --							    --								  --
Disassembly of <code object findCount at 0x7fbac0e8bc90, file def findCount ( n , sum ) :				    def findCount ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  start = math.pow ( 10 , n - 1 ) ;			    	math.pow ( n * n )					  
2 LOAD_METHOD 1 ( pow )					      	  end = math.pow ( 10 , n ) - 1 ;			    	# TODO: math:: math:: math:: math:: math:: math:: math::  
4 LOAD_CONST 1 ( 10 )					      	  count = 0 ;						    								  
6 LOAD_FAST 0 ( n )					      	  i = start ;						    								  
8 LOAD_CONST 2 ( 1 )					      	  while ( i <= end ) :					    								  
10 BINARY_SUBTRACT					      	      cur = 0 ;						    								  
12 CALL_METHOD 2					      	      temp = i ;					    								  
14 STORE_FAST 2 ( start )				      	      while ( temp != 0 ) :				    								  
							      		  cur += temp % 10 ;				    								  
3 16 LOAD_GLOBAL 0 ( math )				      		  temp = temp // 10 ;				    								  
18 LOAD_METHOD 1 ( pow )				      	      if ( cur == sum ) :				    								  
20 LOAD_CONST 1 ( 10 )					      		  count = count + 1 ;				    								  
22 LOAD_FAST 0 ( n )					      		  i += 9 ;					    								  
24 CALL_METHOD 2					      	      else :						    								  
26 LOAD_CONST 2 ( 1 )					      		  i = i + 1 ;					    								  
28 BINARY_SUBTRACT					      	  print ( count ) ;					    								  
30 STORE_FAST 3 ( end )					      								    								  
							      								    								  
4 32 LOAD_CONST 3 ( 0 )					      								    								  
34 STORE_FAST 4 ( count )				      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( start )				      								    								  
38 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 40 SETUP_LOOP 88 ( to 130 )				      								    								  
>> 42 LOAD_FAST 5 ( i )					      								    								  
44 LOAD_FAST 3 ( end )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
48 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
7 50 LOAD_CONST 3 ( 0 )					      								    								  
52 STORE_FAST 6 ( cur )					      								    								  
							      								    								  
8 54 LOAD_FAST 5 ( i )					      								    								  
56 STORE_FAST 7 ( temp )				      								    								  
							      								    								  
9 58 SETUP_LOOP 32 ( to 92 )				      								    								  
>> 60 LOAD_FAST 7 ( temp )				      								    								  
62 LOAD_CONST 3 ( 0 )					      								    								  
64 COMPARE_OP 3 ( != )					      								    								  
66 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
10 68 LOAD_FAST 6 ( cur )				      								    								  
70 LOAD_FAST 7 ( temp )					      								    								  
72 LOAD_CONST 1 ( 10 )					      								    								  
74 BINARY_MODULO					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 6 ( cur )					      								    								  
							      								    								  
11 80 LOAD_FAST 7 ( temp )				      								    								  
82 LOAD_CONST 1 ( 10 )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 STORE_FAST 7 ( temp )				      								    								  
88 JUMP_ABSOLUTE 60					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
12 >> 92 LOAD_FAST 6 ( cur )				      								    								  
94 LOAD_FAST 1 ( sum )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
13 100 LOAD_FAST 4 ( count )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_FAST 4 ( count )				      								    								  
							      								    								  
14 108 LOAD_FAST 5 ( i )				      								    								  
110 LOAD_CONST 4 ( 9 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 5 ( i )					      								    								  
116 JUMP_ABSOLUTE 42					      								    								  
							      								    								  
16 >> 118 LOAD_FAST 5 ( i )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 BINARY_ADD						      								    								  
124 STORE_FAST 5 ( i )					      								    								  
126 JUMP_ABSOLUTE 42					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
17 >> 130 LOAD_GLOBAL 2 ( print )			      								    								  
132 LOAD_FAST 4 ( count )				      								    								  
134 CALL_FUNCTION 1					      								    								  
136 POP_TOP						      								    								  
138 LOAD_CONST 0 ( None )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		      MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		    MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		  MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION
--							      --							    --								  --
Disassembly of <code object getMinSteps at 0x7fbac0e89d20, fi def getMinSteps ( n ) :					    def getMinSteps ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  table = [ 0 ] * ( n + 1 )				    	"""							  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 BUILD_LIST 1						      	  for i in range ( n + 1 ) :				     Return the number of the given n in the given n of the given /eval_scripts/dis_sa-python_sa.test/MINIMUM_STEPS_
4 LOAD_FAST 0 ( n )					      	      table [ i ] = n - i				     number of the number of the number of the number of the numb MINIMIZE_N_PER_GIVEN_CONDITION.py", line 109, in <
6 LOAD_CONST 2 ( 1 )					      	  for i in range ( n , 0 , - 1 ) :			     the number of the number of the number of numbers		  module>     if f_filled(*parameters_set) == f_gold
8 BINARY_ADD						      	      if ( not ( i % 2 ) ) :				     """							  (*parameters_set):   File "/home/ubuntu/TransCoder
10 BINARY_MULTIPLY					      		  table [ i // 2 ] = min ( table [ i ] + 1 , table  	n = 0							  /models/eval/bt/152w65bl69/eval_scripts/dis_sa-pyt
12 STORE_FAST 1 ( table )				      	      if ( not ( i % 3 ) ) :				    	for n in n :						  hon_sa.test/MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CON
							      		  table [ i // 3 ] = min ( table [ i ] + 1 , table  	    n = n						  DITION.py", line 36, in f_filled     for n in n :
3 14 SETUP_LOOP 32 ( to 48 )				      	  return table [ 1 ]					    	    n = n						  TypeError: 'int' object is not iterable
16 LOAD_GLOBAL 0 ( range )				      								    	    n = n						  
18 LOAD_FAST 0 ( n )					      								    	    n = n						  
20 LOAD_CONST 2 ( 1 )					      								    	    n = n						  
22 BINARY_ADD						      								    	    n = n						  
24 CALL_FUNCTION 1					      								    	    n = n % n						  
26 GET_ITER						      								    	    n = n % n						  
>> 28 FOR_ITER 16 ( to 46 )				      								    	    n = n % n						  
30 STORE_FAST 2 ( i )					      								    	    n = n % n						  
							      								    	    n = n % n						  
4 32 LOAD_FAST 0 ( n )					      								    	    n = n % n						  
34 LOAD_FAST 2 ( i )					      								    	    n = n % n						  
36 BINARY_SUBTRACT					      								    	    n = n % n						  
38 LOAD_FAST 1 ( table )				      								    	    n = n % n						  
40 LOAD_FAST 2 ( i )					      								    	    n = n % n						  
42 STORE_SUBSCR						      								    	    n = n % n						  
44 JUMP_ABSOLUTE 28					      								    	    n = n % n						  
>> 46 POP_BLOCK						      								    	    n = n % n						  
							      								    	    n = n % n						  
5 >> 48 SETUP_LOOP 104 ( to 154 )			      								    	    n = n % n						  
50 LOAD_GLOBAL 0 ( range )				      								    	    n = n % n						  
52 LOAD_FAST 0 ( n )					      								    	    n = n % n						  
54 LOAD_CONST 1 ( 0 )					      								    	    n = n % n						  
56 LOAD_CONST 3 ( - 1 )					      								    	    n = n % n						  
58 CALL_FUNCTION 3					      								    	    n = n % n						  
60 GET_ITER						      								    	    n = n % n						  
>> 62 FOR_ITER 88 ( to 152 )				      								    	    n = n % n						  
64 STORE_FAST 2 ( i )					      								    	    n = n % n						  
							      								    	    n = n % n						  
6 66 LOAD_FAST 2 ( i )					      								    	    n = n % n						  
68 LOAD_CONST 4 ( 2 )					      								    	    n = n % n						  
70 BINARY_MODULO					      								    	    n = n % n						  
72 POP_JUMP_IF_TRUE 108					      								    	    n = n % n						  
							      								    	    n = n % n						  
7 74 LOAD_GLOBAL 1 ( min )				      								    	    n = n % n						  
76 LOAD_FAST 1 ( table )				      								    	    n = n % n						  
78 LOAD_FAST 2 ( i )					      								    	    n = n % n						  
80 BINARY_SUBSCR					      								    	    n = n % n						  
82 LOAD_CONST 2 ( 1 )					      								    	    n = n % n						  
84 BINARY_ADD						      								    	    n = n % n						  
86 LOAD_FAST 1 ( table )				      								    	    n = n % n						  
88 LOAD_FAST 2 ( i )					      								    	    n = n % n						  
90 LOAD_CONST 4 ( 2 )					      								    	    n = n % n						  
92 BINARY_FLOOR_DIVIDE					      								    	    n = n % n						  
94 BINARY_SUBSCR					      								    	    n = n % n						  
96 CALL_FUNCTION 2					      								    	    n = n % n						  
98 LOAD_FAST 1 ( table )				      								    	    n = n % n						  
100 LOAD_FAST 2 ( i )					      								    	    n = n % n						  
102 LOAD_CONST 4 ( 2 )					      								    	    n = n % n						  
104 BINARY_FLOOR_DIVIDE					      								    	    n = n % n						  
106 STORE_SUBSCR					      								    	    n = n % n						  
							      								    	    n = n % n						  
8 >> 108 LOAD_FAST 2 ( i )				      								    	    n = n % n						  
110 LOAD_CONST 5 ( 3 )					      								    	return n						  
112 BINARY_MODULO					      								    								  
114 POP_JUMP_IF_TRUE 62					      								    								  
							      								    								  
9 116 LOAD_GLOBAL 1 ( min )				      								    								  
118 LOAD_FAST 1 ( table )				      								    								  
120 LOAD_FAST 2 ( i )					      								    								  
122 BINARY_SUBSCR					      								    								  
124 LOAD_CONST 2 ( 1 )					      								    								  
126 BINARY_ADD						      								    								  
128 LOAD_FAST 1 ( table )				      								    								  
130 LOAD_FAST 2 ( i )					      								    								  
132 LOAD_CONST 5 ( 3 )					      								    								  
134 BINARY_FLOOR_DIVIDE					      								    								  
136 BINARY_SUBSCR					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 LOAD_FAST 1 ( table )				      								    								  
142 LOAD_FAST 2 ( i )					      								    								  
144 LOAD_CONST 5 ( 3 )					      								    								  
146 BINARY_FLOOR_DIVIDE					      								    								  
148 STORE_SUBSCR					      								    								  
150 JUMP_ABSOLUTE 62					      								    								  
>> 152 POP_BLOCK					      								    								  
							      								    								  
10 >> 154 LOAD_FAST 1 ( table )				      								    								  
156 LOAD_CONST 2 ( 1 )					      								    								  
158 BINARY_SUBSCR					      								    								  
160 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_ALMOST_SORTED_ARRAY				      SEARCH_ALMOST_SORTED_ARRAY				    SEARCH_ALMOST_SORTED_ARRAY					  SEARCH_ALMOST_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7fbac0e8bc90, f def binarySearch ( arr , l , r , x ) :			    def binarySearch ( arr , l , l , l , l = l , l = l , l = l ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( r )					      	  if ( r >= l ) :					    								  l/bt/152w65bl69/eval_scripts/dis_sa-python_sa.test
2 LOAD_FAST 1 ( l )					      	      mid = int ( l + ( r - l ) / 2 )			    								  /SEARCH_ALMOST_SORTED_ARRAY.py", line 31     def f
4 COMPARE_OP 5 ( >= )					      	      if ( arr [ mid ] == x ) : return mid		    								  _filled ( arr , l , l , l , l = l , l = l , l = l
6 POP_JUMP_IF_FALSE 156					      	      if ( mid > l and arr [ mid - 1 ] == x ) :		    								  , l = l , l = l , l = l , l = l , l = l , l = l ,
							      		  return ( mid - 1 )				    								  l = l , l = l , l = l , l = l , l = l , l = l , l
3 8 LOAD_GLOBAL 0 ( int )				      	      if ( mid < r and arr [ mid + 1 ] == x ) :		    								  = l , l = l , l = l , l = l , l = l , l = l , l =
10 LOAD_FAST 1 ( l )					      		  return ( mid + 1 )				    								  l , l = l , l = l , l = l , l = l , l = l , l = l
12 LOAD_FAST 2 ( r )					      	      if ( arr [ mid ] > x ) :				    								  , l = l , l = l , l = l , l = l , l = l , l = l ,
14 LOAD_FAST 1 ( l )					      		  return binarySearch ( arr , l , mid - 2 , x )	    								  l = l , l = l , l = l , l = l , l = l , l = l , l
16 BINARY_SUBTRACT					      	      return binarySearch ( arr , mid + 2 , r , x )	    								  = l , l = l , l = l , l = l , l = l , l = l , l =
18 LOAD_CONST 1 ( 2 )					      	  return - 1						    								  l , l = l , l = l , l = l , l = l , l = l , l = l
20 BINARY_TRUE_DIVIDE					      								    								  , l = l , l = l , l = l , l = l , l = l , l = l ,
22 BINARY_ADD						      								    								  l = l , l = l , l l = l , l = l , l = l , l = l ,
24 CALL_FUNCTION 1					      								    								  l = l , l = l , l = l , l l = l , l l = l , l l =
26 STORE_FAST 4 ( mid )					      								    								  l , l l = l , l l = l , l = l , l = l , l = l , l
							      								    								  = l , l l = l , l = l , l l = l , l l = l , l l =
4 28 LOAD_FAST 0 ( arr )				      								    								  l , l l = l l , l l = l , l l = l , l l = l , l l
30 LOAD_FAST 4 ( mid )					      								    								  = l , l l = l l , l l l l = l l , l l l = l l l ,
32 BINARY_SUBSCR					      								    								  l l l l l l l l l l l l l l l l l l l l l l l l l
34 LOAD_FAST 3 ( x )					      								    								  l l l l l l l l l l l l l l l l l l l l l l l l l
36 COMPARE_OP 2 ( == )					      								    								  l l l l l l l l l l l l l l l l l l l l l l l l l
38 POP_JUMP_IF_FALSE 44					      								    								  l l l l l l l l l l l l l l l l l l l l l l l l l
40 LOAD_FAST 4 ( mid )					      								    								  l l l l l l l l l l l l
42 RETURN_VALUE						      								    								  
							      								    								  
5 >> 44 LOAD_FAST 4 ( mid )				      								    								  
46 LOAD_FAST 1 ( l )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 76					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 4 ( mid )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_SUBSCR					      								    								   ^ SyntaxError: invalid syntax
62 LOAD_FAST 3 ( x )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
6 68 LOAD_FAST 4 ( mid )				      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
7 >> 76 LOAD_FAST 4 ( mid )				      								    								  
78 LOAD_FAST 2 ( r )					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 108				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 4 ( mid )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 3 ( x )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
8 100 LOAD_FAST 4 ( mid )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 RETURN_VALUE					      								    								  
							      								    								  
9 >> 108 LOAD_FAST 0 ( arr )				      								    								  
110 LOAD_FAST 4 ( mid )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 3 ( x )					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
10 120 LOAD_GLOBAL 1 ( binarySearch )			      								    								  
122 LOAD_FAST 0 ( arr )					      								    								  
124 LOAD_FAST 1 ( l )					      								    								  
126 LOAD_FAST 4 ( mid )					      								    								  
128 LOAD_CONST 1 ( 2 )					      								    								  
130 BINARY_SUBTRACT					      								    								  
132 LOAD_FAST 3 ( x )					      								    								  
134 CALL_FUNCTION 4					      								    								  
136 RETURN_VALUE					      								    								  
							      								    								  
11 >> 138 LOAD_GLOBAL 1 ( binarySearch )		      								    								  
140 LOAD_FAST 0 ( arr )					      								    								  
142 LOAD_FAST 4 ( mid )					      								    								  
144 LOAD_CONST 1 ( 2 )					      								    								  
146 BINARY_ADD						      								    								  
148 LOAD_FAST 2 ( r )					      								    								  
150 LOAD_FAST 3 ( x )					      								    								  
152 CALL_FUNCTION 4					      								    								  
154 RETURN_VALUE					      								    								  
							      								    								  
12 >> 156 LOAD_CONST 3 ( - 1 )				      								    								  
158 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME      FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME	    FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME	  FIND_THE_ELEMENT_THAT_ODD_NUMBER_OF_TIMES_IN_OLOG_N_TIME
--							      --							    --								  --
Disassembly of <code object search at 0x7fbac<<unk>> d540, fi def search ( arr , low , high ) :				    def search ( arr , high = 1 ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if low > high :					    	if high < high :					  
2 LOAD_FAST 2 ( high )					      	      return None					    	    return						  
4 COMPARE_OP 4 ( > )					      	  if low == high :					    	if high < high :					  
6 POP_JUMP_IF_FALSE 12					      	      return arr [ low ]				    	    return None						  
							      	  mid = ( low + high ) / 2 ;				    	if high < high :					  
3 8 LOAD_CONST 0 ( None )				      	  if mid % 2 == 0 :					    	    return None						  
10 RETURN_VALUE						      	      if arr [ mid ] == arr [ mid + 1 ] :		    	return arr						  
							      		  return search ( arr , mid + 2 , high )	    								  
4 >> 12 LOAD_FAST 1 ( low )				      	      else :						    								  
14 LOAD_FAST 2 ( high )					      		  return search ( arr , low , mid )		    								  
16 COMPARE_OP 2 ( == )					      	  else :						    								  
18 POP_JUMP_IF_FALSE 28					      	      if arr [ mid ] == arr [ mid - 1 ] :		    								  
							      		  return search ( arr , mid + 1 , high )	    								  
5 20 LOAD_FAST 0 ( arr )				      	      else :						    								  
22 LOAD_FAST 1 ( low )					      		  return search ( arr , low , mid - 1 )		    								  
24 BINARY_SUBSCR					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 1 ( low )				      								    								  
30 LOAD_FAST 2 ( high )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_CONST 1 ( 2 )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
7 40 LOAD_FAST 3 ( mid )				      								    								  
42 LOAD_CONST 1 ( 2 )					      								    								  
44 BINARY_MODULO					      								    								  
46 LOAD_CONST 2 ( 0 )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
8 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( mid )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_FAST 3 ( mid )					      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 2 ( == )					      								    								  
70 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
9 72 LOAD_GLOBAL 0 ( search )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( mid )					      								    								  
78 LOAD_CONST 1 ( 2 )					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 2 ( high )					      								    								  
84 CALL_FUNCTION 3					      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
11 >> 88 LOAD_GLOBAL 0 ( search )			      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 1 ( low )					      								    								  
94 LOAD_FAST 3 ( mid )					      								    								  
96 CALL_FUNCTION 3					      								    								  
98 RETURN_VALUE						      								    								  
100 JUMP_FORWARD 52 ( to 154 )				      								    								  
							      								    								  
13 >> 102 LOAD_FAST 0 ( arr )				      								    								  
104 LOAD_FAST 3 ( mid )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 3 ( mid )					      								    								  
112 LOAD_CONST 3 ( 1 )					      								    								  
114 BINARY_SUBTRACT					      								    								  
116 BINARY_SUBSCR					      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 138				      								    								  
							      								    								  
14 122 LOAD_GLOBAL 0 ( search )				      								    								  
124 LOAD_FAST 0 ( arr )					      								    								  
126 LOAD_FAST 3 ( mid )					      								    								  
128 LOAD_CONST 3 ( 1 )					      								    								  
130 BINARY_ADD						      								    								  
132 LOAD_FAST 2 ( high )				      								    								  
134 CALL_FUNCTION 3					      								    								  
136 RETURN_VALUE					      								    								  
							      								    								  
16 >> 138 LOAD_GLOBAL 0 ( search )			      								    								  
140 LOAD_FAST 0 ( arr )					      								    								  
142 LOAD_FAST 1 ( low )					      								    								  
144 LOAD_FAST 3 ( mid )					      								    								  
146 LOAD_CONST 3 ( 1 )					      								    								  
148 BINARY_SUBTRACT					      								    								  
150 CALL_FUNCTION 3					      								    								  
152 RETURN_VALUE					      								    								  
>> 154 LOAD_CONST 0 ( None )				      								    								  
156 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH
--							      --							    --								  --
Disassembly of <code object pairInSortedRotated at 0x7fbac0e8 def pairInSortedRotated ( arr , n , x ) :			    def pairInSortedRotated ( arr , n ) :			  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 44 ( to 46 )				      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( n ) :					  "/home/ubuntu/TransCoder/models/eval/bt/152w65bl69
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] > arr [ i + 1 ] ) :		    	    if n < 0 :						  /eval_scripts/dis_sa-python_sa.test/GIVEN_A_SORTED
4 LOAD_CONST 1 ( 0 )					      		  break ;					    		return i					  _AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_
6 LOAD_FAST 1 ( n )					      	  l = ( i + 1 ) % n					    	return None						  GIVEN_SUM.py", line 55, in <module>	  if f_fille
8 LOAD_CONST 2 ( 1 )					      	  r = i							    								  d(*parameters_set) == f_gold(*parameters_set): Typ
10 BINARY_SUBTRACT					      	  while ( l != r ) :					    								  eError: f_filled() takes 2 positional arguments bu
12 CALL_FUNCTION 2					      	      if ( arr [ l ] + arr [ r ] == x ) :		    								  t 3 were given
14 GET_ITER						      		  return True ;					    								  
>> 16 FOR_ITER 26 ( to 44 )				      	      if ( arr [ l ] + arr [ r ] < x ) :		    								  
18 STORE_FAST 3 ( i )					      		  l = ( l + 1 ) % n ;				    								  
							      	      else :						    								  
3 20 LOAD_FAST 0 ( arr )				      		  r = ( n + r - 1 ) % n ;			    								  
22 LOAD_FAST 3 ( i )					      	  return False ;					    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 3 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 4 ( > )					      								    								  
38 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 40 BREAK_LOOP						      								    								  
42 JUMP_ABSOLUTE 16					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_FAST 3 ( i )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 4 ( l )					      								    								  
							      								    								  
6 58 LOAD_FAST 3 ( i )					      								    								  
60 STORE_FAST 5 ( r )					      								    								  
							      								    								  
7 62 SETUP_LOOP 86 ( to 150 )				      								    								  
>> 64 LOAD_FAST 4 ( l )					      								    								  
66 LOAD_FAST 5 ( r )					      								    								  
68 COMPARE_OP 3 ( != )					      								    								  
70 POP_JUMP_IF_FALSE 148				      								    								  
							      								    								  
8 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 4 ( l )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 5 ( r )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( x )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
9 92 LOAD_CONST 3 ( True )				      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 0 ( arr )				      								    								  
98 LOAD_FAST 4 ( l )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 5 ( r )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 LOAD_FAST 2 ( x )					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
11 116 LOAD_FAST 4 ( l )				      								    								  
118 LOAD_CONST 2 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_FAST 1 ( n )					      								    								  
124 BINARY_MODULO					      								    								  
126 STORE_FAST 4 ( l )					      								    								  
128 JUMP_ABSOLUTE 64					      								    								  
							      								    								  
13 >> 130 LOAD_FAST 1 ( n )				      								    								  
132 LOAD_FAST 5 ( r )					      								    								  
134 BINARY_ADD						      								    								  
136 LOAD_CONST 2 ( 1 )					      								    								  
138 BINARY_SUBTRACT					      								    								  
140 LOAD_FAST 1 ( n )					      								    								  
142 BINARY_MODULO					      								    								  
144 STORE_FAST 5 ( r )					      								    								  
146 JUMP_ABSOLUTE 64					      								    								  
>> 148 POP_BLOCK					      								    								  
							      								    								  
14 >> 150 LOAD_CONST 4 ( False )			      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
