{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s , c1 , c2 ) :\n    l = len ( s )\n    for i in range ( l ) :\n        if ( s [ i ] == c1 ) :\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n    return s\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('IZTSMw j','W','k',),\n    ('7288334','6','9',),\n    ('010110000','1','1',),\n    ('b gJX','t','P',),\n    ('734','4','4',),\n    ('1','1','1',),\n    ('xCaUKdhA','X','S',),\n    ('4370992644981','5','6',),\n    ('01010','0','1',),\n    ('ZNIFGshaWA','Q','x',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    for i in range ( l ) :\n        if ( s [ i ] == c1 ) :\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n    return s\n"}
Disassembly of <code object replace at 0x7f816a6e4b70, file "<dis>", line 153>:
155 0 LOAD_FAST 1 ( c1 )
2 LOAD_METHOD 0 ( replace )
4 LOAD_CONST 1 ( '-' )
6 LOAD_CONST 2 ( '-' )
8 CALL_METHOD 2
10 STORE_FAST 2 ( sep )

156 12 LOAD_FAST 2 ( sep )
14 LOAD_CONST 3 ( '-' )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 24

157 20 LOAD_FAST 2 ( sep )
22 LOAD_CONST 4 ( '-' )
24 COMPARE_OP 2 ( == )
26 POP_JUMP_IF_FALSE 28

158 28 LOAD_FAST 2 ( sep )
30 LOAD_CONST 5 ( '-' )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 40

159 36 LOAD_FAST 2 ( sep )
38 LOAD_CONST 6 ( '-' )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 44

160 44 LOAD_FAST 2 ( sep )
46 LOAD_CONST 7 ( '-' )
48 COMPARE_OP 2 ( == )
50 POP_JUMP_IF_FALSE 44

161 52 LOAD_FAST 2 ( sep )
54 LOAD_CONST 8 ( '-' )
56 COMPARE_OP 2 ( == )
58 POP_JUMP_IF_FALSE 44

162 60 LOAD_FAST 2 ( sep )
62 LOAD_CONST 9 ( '-' )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 78

163 68 LOAD_FAST 2 ( sep )
70 LOAD_CONST 10 ( '-' )
72 COMPARE_OP 2 ( == )
74 POP_JUMP_IF_FALSE 78

164 76 LOAD_FAST 2 ( sep )
78 LOAD_CONST 11 ( '-' )
80 COMPARE_OP 2 ( == )
82 POP_JUMP_IF_FALSE 78

165 84 LOAD_FAST 2 ( sep )
86 LOAD_CONST 12 ( '-' )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_FALSE 78

166 92 LOAD_FAST 2 ( sep )
94 LOAD_CONST 13 ( '-' )
96 COMPARE_OP 2 ( == )
98 POP_JUMP_IF_FALSE 78

167 >> 100 LOAD_FAST 2 ( sep )
102 LOAD_CONST 14 ( '-' )
104 COMPARE_OP 2 ( == )
106 POP_JUMP_IF_FALSE 78

168 108 LOAD_FAST 2 ( sep )
110 LOAD_CONST 15 ( '-' )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 78

169 116 LOAD_FAST 2 ( sep )
118 LOAD_CONST 15 ( '-' )
120 COMPARE_OP 2 ( == )
122 POP_JUMP_IF_FALSE 78

170 124 LOAD_FAST 2 ( sep )
126 RETURN_VALUE

171 >> 128 LOAD_FAST 2 ( sep )
130 RETURN_VALUE

