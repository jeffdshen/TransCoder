{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( N ) :\n    return math.ceil ( math.log2 ( N + 1 ) ) - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (65,),\n    (94,),\n    (52,),\n    (31,),\n    (9,),\n    (1,),\n    (41,),\n    (98,),\n    (45,),\n    (24,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def height ( N ) :\n    return math.ceil ( math.log2 ( N + 1 ) ) - 1\n"}
Disassembly of <code object height at 0x7f816a673a50, file "<dis>", line 100>:
101 0 LOAD_GLOBAL 0 ( math )
2 LOAD_METHOD 1 ( ceil )
4 LOAD_FAST 0 ( N )
6 LOAD_CONST 1 ( 1 )
8 BINARY_SUBTRACT
10 CALL_METHOD 1
12 LOAD_CONST 2 ( 0 )
14 COMPARE_OP 4 ( > )
16 POP_JUMP_IF_FALSE 20
18 LOAD_FAST 0 ( N )
20 LOAD_CONST 3 ( 1 )
22 INPLACE_ADD
24 STORE_FAST 0 ( N )

102 >> 26 LOAD_FAST 0 ( N )
28 LOAD_CONST 4 ( 2 )
30 COMPARE_OP 4 ( > )
32 POP_JUMP_IF_FALSE 44

103 34 LOAD_FAST 0 ( N )
36 LOAD_CONST 5 ( 1 )
38 INPLACE_ADD
40 STORE_FAST 0 ( N )
42 JUMP_FORWARD 4 ( to 44 )

104 >> 44 LOAD_FAST 0 ( N )
46 LOAD_CONST 6 ( 2 )
48 COMPARE_OP 4 ( > )
50 POP_JUMP_IF_FALSE 44

105 52 LOAD_FAST 0 ( N )
54 LOAD_CONST 7 ( 3 )
56 INPLACE_ADD
58 STORE_FAST 0 ( N )

106 >> 60 LOAD_FAST 0 ( N )
62 LOAD_CONST 8 ( 2 )
64 COMPARE_OP 4 ( > )
66 POP_JUMP_IF_FALSE 80

107 68 LOAD_FAST 0 ( N )
70 LOAD_CONST 9 ( 1 )
72 INPLACE_ADD
74 STORE_FAST 0 ( N )
76 JUMP_FORWARD 4 ( to 80 )

108 >> 78 LOAD_FAST 0 ( N )
80 LOAD_CONST 10 ( 2 )
82 COMPARE_OP 4 ( > )
84 POP_JUMP_IF_FALSE 80

109 86 LOAD_FAST 0 ( N )
88 LOAD_CONST 11 ( 1 )
90 INPLACE_ADD
92 STORE_FAST 0 ( N )

110 >> 94 LOAD_FAST 0 ( N )
96 LOAD_CONST 12 ( 2 )
98 COMPARE_OP 4 ( > )
100 POP_JUMP_IF_FALSE 80

111 102 LOAD_FAST 0 ( N )
104 LOAD_CONST 13 ( 1 )
106 INPLACE_ADD
108 STORE_FAST 0 ( N )

112 110 LOAD_FAST 0 ( N )
112 LOAD_CONST 6 ( 2 )
114 COMPARE_OP 4 ( > )
116 POP_JUMP_IF_FALSE 130

113 118 LOAD_FAST 0 ( N )
120 LOAD_CONST 14 ( 2 )
122 INPLACE_ADD
124 STORE_FAST 0 ( N )

114 126 LOAD_FAST 0 ( N )
128 LOAD_CONST 15 ( 2 )
130 INPLACE_ADD
132 STORE_FAST 0 ( N )
134 JUMP_FORWARD 4 ( to 130 )
>> 136 LOAD_CONST 16 ( 2 )
138 LOAD_FAST 0 ( N )
140 BINARY_MULTIPLY
142 INPLACE_ADD
144 STORE_FAST 0 ( N )

115 >> 146 LOAD_FAST 0 ( N )
148 RETURN_VALUE

