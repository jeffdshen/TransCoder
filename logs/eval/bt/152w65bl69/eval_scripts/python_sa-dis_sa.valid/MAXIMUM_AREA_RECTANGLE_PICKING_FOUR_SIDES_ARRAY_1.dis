{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    s = [ ]\n    first = 0\n    second = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.append ( arr [ i ] )\n            continue\n        if ( arr [ i ] > first ) :\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            second = arr [ i ]\n    return ( first * second )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 6, 7, 8, 12, 13, 14, 15, 18, 18, 19, 19, 26, 26, 32, 32, 33, 34, 34, 36, 41, 43, 47, 47, 51, 51, 52, 53, 55, 56, 57, 60, 61, 71, 74, 75, 76, 77, 79, 87, 87, 87, 90, 95, 98, 99],37,),\n    ([-64, -72, 6, -62, 54, 14, 28, 60, -96, 14, -32, -2, 80, 8, -56, 68, 86, 64, 86, -12, 82],12,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([99, 7, 14, 50, 94, 24, 79, 13, 19, 29, 22, 2, 77, 36, 38, 18, 51, 15, 99, 52, 17, 77, 22, 54],15,),\n    ([-96, -92, -86, -84, -84, -80, -70, -70, -68, -64, -64, -48, -46, -24, -22, -20, -8, -8, 0, 0, 4, 8, 8, 22, 28, 36, 46, 50, 52, 54, 60, 62, 66, 70, 80, 84, 86, 94, 96, 96],25,),\n    ([1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1],12,),\n    ([98],0,),\n    ([-88, -24, 8, 20, -46, 60, 24, 26, 98, 82, -30, 16, 22, -28, 84, 12, 34, 14, -18, -38, -94, -24, 6, 4, -52, -48, 84],21,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([6, 30, 47, 97, 20, 16, 68, 34, 1, 77, 48, 8, 22, 68],8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findArea ( arr , n ) :\n    s = [ ]\n    first = 0\n    second = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.append ( arr [ i ] )\n            continue\n        if ( arr [ i ] > first ) :\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            second = arr [ i ]\n    return ( first * second )\n"}
Disassembly of <code object findArea at 0x7f816a677930, file "<dis>", line 25>:
26 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

27 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 2 ( 1 )
12 COMPARE_OP 2 ( == )
14 POP_JUMP_IF_FALSE 28

28 >> 16 LOAD_FAST 1 ( n )
18 LOAD_CONST 3 ( 1 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

29 24 LOAD_FAST 1 ( n )
26 LOAD_CONST 4 ( 2 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 28

30 32 LOAD_FAST 1 ( n )
34 LOAD_CONST 5 ( 1 )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 44

31 40 LOAD_FAST 1 ( n )
42 LOAD_CONST 6 ( 2 )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 44

32 48 LOAD_FAST 1 ( n )
50 LOAD_CONST 7 ( 2 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 44

33 56 LOAD_FAST 1 ( n )
58 LOAD_CONST 8 ( 2 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 44

34 64 LOAD_FAST 1 ( n )
66 LOAD_CONST 9 ( 2 )
68 COMPARE_OP 2 ( == )
70 POP_JUMP_IF_FALSE 80

35 72 LOAD_FAST 1 ( n )
74 LOAD_CONST 10 ( 2 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 80

36 80 LOAD_FAST 1 ( n )
82 LOAD_CONST 11 ( 2 )
84 COMPARE_OP 2 ( == )
86 POP_JUMP_IF_FALSE 80

37 >> 88 LOAD_FAST 1 ( n )
90 LOAD_CONST 12 ( 2 )
92 COMPARE_OP 2 ( == )
94 POP_JUMP_IF_FALSE 80

38 96 LOAD_FAST 1 ( n )
98 LOAD_CONST 12 ( 2 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 80

39 104 LOAD_FAST 1 ( n )
106 LOAD_CONST 13 ( 1 )
108 COMPARE_OP 2 ( == )
110 POP_JUMP_IF_FALSE 80

40 112 LOAD_FAST 1 ( n )
114 LOAD_CONST 6 ( 2 )
116 COMPARE_OP 2 ( == )
118 POP_JUMP_IF_FALSE 80

41 120 LOAD_FAST 1 ( n )
122 LOAD_CONST 6 ( 2 )
124 COMPARE_OP 2 ( == )
126 POP_JUMP_IF_FALSE 128

42 128 LOAD_FAST 1 ( n )
130 LOAD_CONST 6 ( 2 )
132 COMPARE_OP 2 ( == )
134 POP_JUMP_IF_FALSE 130

43 136 LOAD_FAST 1 ( n )
138 LOAD_CONST 6 ( 2 )
140 COMPARE_OP 2 ( == )
142 POP_JUMP_IF_FALSE 146

44 144 LOAD_FAST 1 ( n )
146 RETURN_VALUE