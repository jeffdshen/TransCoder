{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( no ) :\n    return 0 if no == 0 else int ( no % 10 ) + f_gold ( int ( no / 10 ) )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (73,),\n    (91,),\n    (27,),\n    (79,),\n    (31,),\n    (84,),\n    (68,),\n    (9,),\n    (85,),\n    (35,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sumDigits ( no ) :\n    return 0 if no == 0 else int ( no % 10 ) + sumDigits ( int ( no / 10 ) )\n"}
Disassembly of <code object sumDigits at 0x7f816a6e4b70, file "<dis>", line 15>:
16 0 LOAD_FAST 0 ( no )
2 LOAD_CONST 1 ( 10 )
4 COMPARE_OP 0 ( < )
6 POP_JUMP_IF_FALSE 12

17 8 LOAD_GLOBAL 0 ( int )
10 LOAD_FAST 0 ( no )
12 CALL_FUNCTION 1
14 LOAD_CONST 2 ( 0 )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 24

18 20 LOAD_GLOBAL 1 ( int )
22 LOAD_FAST 0 ( no )
24 CALL_FUNCTION 1
26 LOAD_CONST 3 ( 1 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 36

19 32 LOAD_GLOBAL 1 ( int )
34 LOAD_FAST 0 ( no )
36 CALL_FUNCTION 1
38 LOAD_CONST 4 ( 1 )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 48

20 44 LOAD_GLOBAL 1 ( int )
46 LOAD_FAST 0 ( no )
48 CALL_FUNCTION 1
50 LOAD_CONST 5 ( 1 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 48

21 56 LOAD_GLOBAL 1 ( int )
58 LOAD_FAST 0 ( no )
60 CALL_FUNCTION 1
62 LOAD_CONST 6 ( 1 )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 82

22 68 LOAD_GLOBAL 1 ( int )
70 LOAD_FAST 0 ( no )
72 CALL_FUNCTION 1
74 LOAD_CONST 7 ( 1 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 82

24 80 LOAD_GLOBAL 1 ( int )
82 LOAD_FAST 0 ( no )
84 CALL_FUNCTION 1
86 LOAD_CONST 8 ( 1 )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_FALSE 82

25 92 LOAD_GLOBAL 1 ( int )
94 LOAD_FAST 0 ( no )
96 CALL_FUNCTION 1
98 LOAD_CONST 9 ( 1 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 106
104 LOAD_GLOBAL 1 ( int )
106 LOAD_FAST 0 ( no )
108 CALL_FUNCTION 1
110 LOAD_CONST 10 ( 1 )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 116

26 116 LOAD_GLOBAL 1 ( int )
118 LOAD_FAST 0 ( no )
120 CALL_FUNCTION 1
122 LOAD_CONST 11 ( 1 )
124 COMPARE_OP 2 ( == )
126 POP_JUMP_IF_FALSE 130

27 128 LOAD_GLOBAL 1 ( int )
130 LOAD_FAST 0 ( no )
132 CALL_FUNCTION 1
134 LOAD_CONST 12 ( 1 )
136 COMPARE_OP 2 ( == )
138 POP_JUMP_IF_FALSE 130

28 140 LOAD_GLOBAL 1 ( int )
142 LOAD_FAST 0 ( no )
144 CALL_FUNCTION 1
146 RETURN_VALUE
>> 148 LOAD_CONST 0 ( None )
150 RETURN_VALUE

