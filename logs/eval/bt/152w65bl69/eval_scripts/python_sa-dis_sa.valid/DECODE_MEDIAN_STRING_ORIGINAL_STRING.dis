{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    l = len ( s )\n    s1 = \"\"\n    if ( l % 2 == 0 ) :\n        isEven = True\n    else :\n        isEven = False\n    for i in range ( 0 , l , 2 ) :\n        if ( isEven ) :\n            s1 = s [ i ] + s1\n            s1 += s [ i + 1 ]\n        else :\n            if ( l - i > 1 ) :\n                s1 += s [ i ]\n                s1 = s [ i + 1 ] + s1\n            else :\n                s1 += s [ i ]\n    return s1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (' EgvQCeqYpZtv',),\n    ('488540',),\n    ('0000101010111',),\n    ('syw',),\n    ('402355',),\n    ('0',),\n    ('wmHMlAtq',),\n    ('7962',),\n    ('111111',),\n    ('UbgRGDquop',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def decodeMedianString ( s ) :\n    l = len ( s )\n    s1 = \"\"\n    if ( l % 2 == 0 ) :\n        isEven = True\n    else :\n        isEven = False\n    for i in range ( 0 , l , 2 ) :\n        if ( isEven ) :\n            s1 = s [ i ] + s1\n            s1 += s [ i + 1 ]\n        else :\n            if ( l - i > 1 ) :\n                s1 += s [ i ]\n                s1 = s [ i + 1 ] + s1\n            else :\n                s1 += s [ i ]\n    return s1\n"}
Disassembly of <code object decodeMedianString at 0x7f816a673a50, file "<dis>", line 156>:
157 0 LOAD_FAST 1 ( l )
2 LOAD_CONST 1 ( 2 )
4 BINARY_MULTIPLY
6 STORE_FAST 2 ( l )

158 8 LOAD_FAST 0 ( s )
10 LOAD_CONST 2 ( 1 )
12 BINARY_ADD
14 STORE_FAST 3 ( l )

159 16 LOAD_FAST 2 ( l )
18 LOAD_CONST 3 ( 1 )
20 BINARY_ADD
22 LOAD_FAST 3 ( l )
24 LOAD_CONST 4 ( 2 )
26 BINARY_MULTIPLY
28 BINARY_ADD
30 STORE_FAST 4 ( l )

160 32 LOAD_FAST 0 ( s )
34 LOAD_CONST 5 ( 1 )
36 BINARY_ADD
38 LOAD_FAST 4 ( l )
40 LOAD_CONST 6 ( 2 )
42 BINARY_MULTIPLY
44 BINARY_ADD
46 LOAD_FAST 4 ( l )
48 LOAD_CONST 7 ( 3 )
50 BINARY_ADD
52 BINARY_MULTIPLY
54 BINARY_ADD
56 LOAD_FAST 4 ( l )
58 LOAD_CONST 8 ( 2 )
60 BINARY_MULTIPLY
62 BINARY_ADD
64 LOAD_FAST 4 ( l )
66 LOAD_CONST 9 ( 3 )
68 BINARY_ADD
70 BINARY_ADD
72 LOAD_FAST 4 ( l )
74 LOAD_CONST 10 ( 2 )
76 BINARY_MULTIPLY
78 BINARY_ADD
80 BINARY_ADD
82 LOAD_FAST 4 ( l )
84 LOAD_CONST 11 ( 3 )
86 BINARY_ADD
88 BINARY_ADD
90 LOAD_FAST 4 ( l )
92 LOAD_CONST 12 ( 2 )
94 BINARY_ADD
96 BINARY_MULTIPLY
98 BINARY_ADD
100 LOAD_FAST 4 ( l )
102 LOAD_CONST 13 ( 3 )
104 BINARY_ADD
106 BINARY_ADD
108 LOAD_FAST 4 ( l )
110 LOAD_CONST 14 ( 2 )
112 BINARY_ADD
114 LOAD_FAST 4 ( l )
116 LOAD_CONST 15 ( 3 )
118 BINARY_ADD
120 BINARY_ADD
122 LOAD_FAST 4 ( l )
124 LOAD_CONST 16 ( 2 )
126 BINARY_ADD
128 BINARY_ADD
130 LOAD_FAST 4 ( l )
132 LOAD_CONST 17 ( 3 )
134 BINARY_ADD
136 BINARY_ADD
138 LOAD_FAST 4 ( l )
140 LOAD_CONST 18 ( 2 )
142 BINARY_ADD
144 BINARY_ADD
146 BINARY_ADD
148 LOAD_FAST 4 ( l )
150 BINARY_ADD
152 BINARY_ADD
154 BINARY_ADD
156 LOAD_FAST 4 ( l )
158 LOAD_CONST 18 ( 2 )
160 BINARY_ADD
162 BINARY_ADD
164 BINARY_ADD
166 BINARY_ADD
168 LOAD_FAST 4 ( l )
168 BINARY_ADD
170 BINARY_ADD
172 BINARY_ADD
174 BINARY_ADD
176 LOAD_FAST 4 ( l )
178 BINARY_ADD
180 BINARY_ADD
182 BINARY_ADD
184 LOAD_FAST 4 ( l )
186 BINARY_ADD

160 160 LOAD_FAST 3 ( l )
162 LOAD_CONST 19 ( 2 )
164 BINARY_ADD
162 BINARY_ADD

161