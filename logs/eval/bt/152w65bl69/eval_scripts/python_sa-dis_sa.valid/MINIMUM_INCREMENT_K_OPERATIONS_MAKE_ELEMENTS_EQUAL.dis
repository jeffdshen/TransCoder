{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , k ) :\n    max1 = max ( arr )\n    res = 0\n    for i in range ( 0 , n ) :\n        if ( ( max1 - arr [ i ] ) % k != 0 ) :\n            return - 1\n        else :\n            res += ( max1 - arr [ i ] ) / k\n    return int ( res )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n   ([4, 7, 19, 16],4,3),\n   ([4,4,4,4,4],5,3),\n   ([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],39,1),\n   ([85,36,52,8,52,15,16],5,6),\n   ([-10,-5,-5,-20,10,30],6,5),\n   ([0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,0],10,15),\n   ([1,5,5,9,11,12,12,13,13,14,16,18,26,26,28,28,30,31,32,37,37,38,40,43,44,45,47,47,55,58,60,62,63,64,69,78,83,84,92,96,96,99],26,33),\n   ([76,-78,92,-98,16,44,86,96,-8,2,-96,74,-28,12,54,-40,-64,-12,4,48,68,-82,8,0,-4,88,48,-54,90,62,-84,76,-48,62,-80,-94,38,-4,36],34,3),\n   ([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],39,10),\n   ([62,99,29,23,55,30,79,63,1,88,59,8,11,80,23,51,97,32,80,48,84,36,73,59,1,34,92,10],18,1),\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def minOps ( arr , n , k ) :\n    max1 = max ( arr )\n    res = 0\n    for i in range ( 0 , n ) :\n        if ( ( max1 - arr [ i ] ) % k != 0 ) :\n            return - 1\n        else :\n            res += ( max1 - arr [ i ] ) / k\n    return int ( res )\n"}
Disassembly of <code object minOps at 0x7f816a673a50, file "<dis>", line 25>:
26 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 0 )
4 BINARY_SUBSCR
6 STORE_FAST 2 ( max1 )

27 8 LOAD_FAST 0 ( arr )
10 LOAD_CONST 2 ( 1 )
12 BINARY_SUBSCR
14 STORE_FAST 3 ( max2 )

28 16 LOAD_FAST 0 ( arr )
18 LOAD_CONST 3 ( 1 )
20 BINARY_SUBSCR
22 STORE_FAST 4 ( max2 )

29 24 LOAD_FAST 0 ( arr )
26 LOAD_CONST 4 ( - 1 )
28 BINARY_SUBSCR
30 STORE_FAST 5 ( max2 )

30 32 LOAD_FAST 0 ( arr )
34 LOAD_CONST 5 ( - 1 )
36 BINARY_SUBSCR
38 STORE_FAST 6 ( max2 )

31 40 LOAD_FAST 0 ( arr )
42 LOAD_CONST 6 ( - 1 )
44 BINARY_SUBSCR
46 LOAD_FAST 6 ( max2 )
48 BINARY_SUBSCR
50 LOAD_CONST 7 ( '-' )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 60

32 56 LOAD_FAST 0 ( arr )
58 LOAD_CONST 8 ( - 1 )
60 BINARY_SUBSCR
62 STORE_FAST 7 ( max2 )

33 64 LOAD_FAST 0 ( arr )
66 LOAD_CONST 9 ( - 1 )
68 BINARY_SUBSCR
70 LOAD_CONST 10 ( - 1 )
72 BINARY_SUBSCR
74 LOAD_FAST 7 ( max2 )
76 BINARY_SUBSCR
78 LOAD_CONST 11 ( - 1 )
80 BINARY_SUBSCR
82 LOAD_FAST 7 ( max2 )
84 BINARY_SUBSCR
86 LOAD_CONST 12 ( - 1 )
88 BINARY_SUBSCR
90 LOAD_FAST 7 ( max2 )
92 BINARY_SUBSCR
94 LOAD_CONST 13 ( - 1 )
96 BINARY_SUBSCR
98 LOAD_FAST 7 ( max2 )
100 BINARY_SUBSCR
102 LOAD_CONST 14 ( - 1 )
104 BINARY_SUBSCR
106 LOAD_CONST 15 ( - 1 )
108 BINARY_SUBSCR
110 LOAD_CONST 16 ( - 1 )
112 BINARY_SUBSCR
114 LOAD_FAST 7 ( max2 )
116 LOAD_CONST 17 ( - 1 )
118 BINARY_SUBSCR
120 LOAD_CONST 18 ( - 1 )
122 BINARY_SUBSCR
124 LOAD_CONST 19 ( - 1 )
126 BINARY_SUBSCR
128 LOAD_CONST 20 ( - 1 )
130 BINARY_SUBSCR
132 LOAD_FAST 7 ( max2 )
134 LOAD_CONST 19 ( - 1 )
136 BINARY_SUBSCR
138 LOAD_CONST 20 ( - 1 )
140 BINARY_SUBSCR
142 LOAD_FAST 7 ( max2 )
144 LOAD_CONST 21 ( - 1 )
146 BINARY_SUBSCR
148 LOAD_CONST 20 ( - 1 )
150 BINARY_SUBSCR
152 LOAD_CONST 21 ( - 1 )
154 BINARY_SUBSCR
156 LOAD_CONST 22 ( - 1 )
158 LOAD_CONST 21 ( - 1 )
156 BUILD_SLICE 2