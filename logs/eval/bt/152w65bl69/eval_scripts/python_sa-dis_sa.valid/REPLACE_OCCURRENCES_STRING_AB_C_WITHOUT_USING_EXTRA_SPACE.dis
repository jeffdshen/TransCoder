{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( st ) :\n    for i in range ( 1 , len ( st ) ) :\n        if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :\n            st [ i - 1 ] = 'C'\n            for j in range ( i , len ( st ) - 1 ) :\n                st [ j ] = st [ j + 1 ]\n            st [ len ( st ) - 1 ] = ' '\n    return\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (['A', 'B', 'E', 'H', 'I', 'I', 'I', 'J', 'K', 'U', 'a', 'c', 'd', 'f', 'i', 'i', 'k', 'k', 'x', 'y', 'z', 'z'],),\n    (['1', '3', '7', '6', '1', '3', '8', '8', '7', '7', '3', '7', '5', '5', '4', '1', '3', '5', '3', '0', '7', '5', '2', '9', '1', '2', '9', '4', '4', '4', '5', '2', '6', '7', '0'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['A', 'y', 't', 's', 'A', 'B', 'r', 'L', 'm', 'B', 'Z', 'r', 'T', 'n', 'l', 'f', 'C', 'e', 'f', 'h', 't', ' ', 'u', 'M', 'n', 't'],),\n    (['0', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '7', '7', '7', '8', '8', '8', '8', '8', '9', '9', '9'],),\n    (['0', '1', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', '0'],),\n    ([' ', 'A', 'A', 'B', 'C', 'C', 'E', 'F', 'H', 'H', 'H', 'I', 'I', 'K', 'K', 'L', 'N', 'Q', 'S', 'S', 'V', 'W', 'X', 'X', 'Y', 'Z', 'c', 'f', 'f', 'g', 'i', 'j', 'j', 'm', 'q', 'q', 'r', 'v', 'w', 'x', 'y'],),\n    (['0', '1', '1'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['b', 't', 'X', 'F'],)\n        ]\n    filled_function_param = [\n    (['A', 'B', 'E', 'H', 'I', 'I', 'I', 'J', 'K', 'U', 'a', 'c', 'd', 'f', 'i', 'i', 'k', 'k', 'x', 'y', 'z', 'z'],),\n    (['1', '3', '7', '6', '1', '3', '8', '8', '7', '7', '3', '7', '5', '5', '4', '1', '3', '5', '3', '0', '7', '5', '2', '9', '1', '2', '9', '4', '4', '4', '5', '2', '6', '7', '0'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['A', 'y', 't', 's', 'A', 'B', 'r', 'L', 'm', 'B', 'Z', 'r', 'T', 'n', 'l', 'f', 'C', 'e', 'f', 'h', 't', ' ', 'u', 'M', 'n', 't'],),\n    (['0', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '7', '7', '7', '8', '8', '8', '8', '8', '9', '9', '9'],),\n    (['0', '1', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', '0'],),\n    ([' ', 'A', 'A', 'B', 'C', 'C', 'E', 'F', 'H', 'H', 'H', 'I', 'I', 'K', 'K', 'L', 'N', 'Q', 'S', 'S', 'V', 'W', 'X', 'X', 'Y', 'Z', 'c', 'f', 'f', 'g', 'i', 'j', 'j', 'm', 'q', 'q', 'r', 'v', 'w', 'x', 'y'],),\n    (['0', '1', '1'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['b', 't', 'X', 'F'],)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def translate ( st ) :\n    for i in range ( 1 , len ( st ) ) :\n        if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :\n            st [ i - 1 ] = 'C'\n            for j in range ( i , len ( st ) - 1 ) :\n                st [ j ] = st [ j + 1 ]\n            st [ len ( st ) - 1 ] = ' '\n    return\n"}
Disassembly of <code object translate at 0x7f816a6e4b70, file "<dis>", line 25>:
26 0 SETUP_LOOP 22 ( to 24 )
2 LOAD_GLOBAL 0 ( enumerate )
4 LOAD_FAST 0 ( st )
6 CALL_FUNCTION 1
8 GET_ITER
>> 10 FOR_ITER 14 ( to 22 )
12 STORE_FAST 1 ( i )

27 14 LOAD_FAST 1 ( i )
16 LOAD_CONST 1 ( 1 )
18 COMPARE_OP 2 ( == )
20 POP_JUMP_IF_FALSE 10

28 22 LOAD_FAST 1 ( i )
24 LOAD_CONST 2 ( 0 )
26 COMPARE_OP 2 ( == )
28 POP_JUMP_IF_FALSE 10

29 30 LOAD_FAST 1 ( i )
32 LOAD_CONST 3 ( 1 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 10

30 >> 38 LOAD_FAST 1 ( i )
40 LOAD_CONST 4 ( - 1 )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 10

31 46 LOAD_FAST 1 ( i )
48 LOAD_CONST 5 ( - 1 )
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 10

32 54 LOAD_FAST 1 ( i )
56 LOAD_CONST 6 ( - 1 )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 10

33 62 LOAD_FAST 1 ( i )
64 LOAD_CONST 7 ( - 1 )
66 COMPARE_OP 2 ( == )
68 POP_JUMP_IF_FALSE 10

34 70 LOAD_FAST 1 ( i )
72 LOAD_CONST 8 ( - 1 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 10

35 78 LOAD_FAST 1 ( i )
80 LOAD_CONST 9 ( - 1 )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 10

36 86 LOAD_FAST 1 ( i )
88 LOAD_CONST 10 ( - 1 )
90 COMPARE_OP 2 ( == )
92 POP_JUMP_IF_FALSE 10

37 94 LOAD_FAST 1 ( i )
96 LOAD_CONST 11 ( - 1 )
98 COMPARE_OP 2 ( == )
100 POP_JUMP_IF_FALSE 10

38 102 LOAD_FAST 1 ( i )
104 LOAD_CONST 12 ( - 1 )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 10

39 110 LOAD_FAST 1 ( i )
112 LOAD_CONST 12 ( - 1 )
114 COMPARE_OP 2 ( == )
116 POP_JUMP_IF_FALSE 10

40 118 LOAD_FAST 1 ( i )
120 LOAD_CONST 12 ( - 1 )
122 COMPARE_OP 2 ( == )
124 POP_JUMP_IF_FALSE 10

41 126 LOAD_FAST 1 ( i )
128 LOAD_CONST 13 ( - 1 )
130 COMPARE_OP 2 ( == )
132 POP_JUMP_IF_FALSE 10

42 134 LOAD_FAST 1 ( i )
136 LOAD_CONST 6 ( - 1 )
138 COMPARE_OP 2 ( == )
140 POP_JUMP_IF_FALSE 10

43 142 LOAD_FAST 1 ( i )