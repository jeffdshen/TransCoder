{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( n ) :\n    ans = 0\n    for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) :\n        height = length\n        while ( height * length <= n ) :\n            ans += 1\n            height += 1\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (34,),\n    (49,),\n    (41,),\n    (17,),\n    (67,),\n    (38,),\n    (59,),\n    (64,),\n    (61,),\n    (58,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countRect ( n ) :\n    ans = 0\n    for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) :\n        height = length\n        while ( height * length <= n ) :\n            ans += 1\n            height += 1\n    return ans\n"}
Disassembly of <code object countRect at 0x7f816a673a50, file "<dis>", line 64>:
65 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 4 ( > )
6 POP_JUMP_IF_FALSE 12

66 8 LOAD_CONST 2 ( 0 )
10 STORE_FAST 1 ( b )

67 12 LOAD_FAST 1 ( b )
14 LOAD_CONST 3 ( 1 )
16 COMPARE_OP 4 ( > )
18 POP_JUMP_IF_FALSE 28

68 20 LOAD_CONST 4 ( 0 )
22 STORE_FAST 1 ( b )

69 24 LOAD_FAST 1 ( b )
26 LOAD_CONST 1 ( 1 )
28 COMPARE_OP 4 ( > )
30 POP_JUMP_IF_FALSE 44

70 32 LOAD_CONST 5 ( 0 )
34 STORE_FAST 1 ( b )

71 36 LOAD_FAST 1 ( b )
38 LOAD_CONST 1 ( 1 )
40 COMPARE_OP 4 ( > )
42 POP_JUMP_IF_FALSE 44

72 44 LOAD_CONST 6 ( 0 )
46 STORE_FAST 1 ( b )

73 >> 48 LOAD_FAST 1 ( b )
50 LOAD_FAST 0 ( n )
52 LOAD_CONST 1 ( 1 )
54 COMPARE_OP 4 ( > )
56 POP_JUMP_IF_FALSE 44

74 58 LOAD_CONST 7 ( 0 )
60 STORE_FAST 1 ( b )

75 62 LOAD_FAST 1 ( b )
64 LOAD_FAST 0 ( n )
66 LOAD_CONST 1 ( 1 )
68 COMPARE_OP 4 ( > )
70 POP_JUMP_IF_FALSE 90

76 72 LOAD_CONST 8 ( 0 )
74 STORE_FAST 1 ( b )

77 >> 76 LOAD_FAST 1 ( b )
78 LOAD_FAST 0 ( n )
80 LOAD_CONST 1 ( 1 )
82 COMPARE_OP 4 ( > )
84 POP_JUMP_IF_FALSE 90

78 86 LOAD_CONST 9 ( 0 )
88 STORE_FAST 1 ( b )

80 >> 90 LOAD_FAST 1 ( b )
92 LOAD_FAST 0 ( n )
94 LOAD_CONST 1 ( 1 )
96 COMPARE_OP 4 ( > )
98 POP_JUMP_IF_FALSE 94

81 100 LOAD_FAST 1 ( b )
102 LOAD_FAST 0 ( n )
104 LOAD_CONST 1 ( 1 )
106 BINARY_ADD
108 LOAD_FAST 0 ( n )
110 LOAD_CONST 1 ( 1 )
112 BINARY_ADD
114 LOAD_FAST 0 ( n )
116 LOAD_CONST 1 ( 1 )
118 BINARY_ADD
120 BUILD_SLICE 2
122 BINARY_SUBSCR
124 BINARY_ADD
126 STORE_FAST 1 ( b )

82 >> 128 LOAD_FAST 1 ( b )
130 LOAD_CONST 1 ( 1 )
132 BINARY_ADD
134 LOAD_FAST 0 ( n )
136 LOAD_CONST 1 ( 1 )
138 BINARY_ADD
140 BINARY_ADD
142 LOAD_FAST 1 ( b )
144 LOAD_CONST 1 ( 1 )
146 BINARY_ADD
148 LOAD_FAST 1 ( b )