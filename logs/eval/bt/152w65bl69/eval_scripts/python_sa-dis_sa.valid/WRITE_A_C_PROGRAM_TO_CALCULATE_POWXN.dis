{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x , y ) :\n    if ( y == 0 ) : return 1\n    elif ( int ( y % 2 ) == 0 ) :\n        return ( f_gold ( x , int ( y / 2 ) ) * f_gold ( x , int ( y / 2 ) ) )\n    else :\n        return ( x * f_gold ( x , int ( y / 2 ) ) * f_gold ( x , int ( y / 2 ) ) )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (46,92,),\n    (99,87,),\n    (30,32,),\n    (1,86,),\n    (26,81,),\n    (1,49,),\n    (27,46,),\n    (10,52,),\n    (26,38,),\n    (29,80,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def power ( x , y ) :\n    if ( y == 0 ) : return 1\n    elif ( int ( y % 2 ) == 0 ) :\n        return ( power ( x , int ( y / 2 ) ) * power ( x , int ( y / 2 ) ) )\n    else :\n        return ( x * power ( x , int ( y / 2 ) ) * power ( x , int ( y / 2 ) ) )\n"}
Disassembly of <code object power at 0x7f816a6e4b70, file "<dis>", line 25>:
26 0 LOAD_FAST 0 ( x )
2 LOAD_CONST 1 ( 0 )
4 BINARY_SUBSCR
6 LOAD_CONST 2 ( 1 )
8 COMPARE_OP 2 ( == )
10 POP_JUMP_IF_FALSE 16

27 12 LOAD_FAST 0 ( x )
14 LOAD_CONST 1 ( 0 )
16 BINARY_SUBSCR
18 LOAD_CONST 3 ( 1 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

28 >> 24 LOAD_FAST 0 ( x )
26 LOAD_CONST 1 ( 0 )
28 BINARY_SUBSCR
30 LOAD_CONST 4 ( 1 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 38

29 36 LOAD_FAST 0 ( x )
38 LOAD_CONST 1 ( 0 )
40 BINARY_SUBSCR
42 LOAD_CONST 5 ( 1 )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 52

30 48 LOAD_FAST 0 ( x )
50 LOAD_CONST 1 ( 0 )
52 BINARY_SUBSCR
54 LOAD_CONST 6 ( 1 )
56 COMPARE_OP 2 ( == )
58 POP_JUMP_IF_FALSE 52

31 60 LOAD_FAST 0 ( x )
62 LOAD_CONST 1 ( 0 )
64 BINARY_SUBSCR
66 LOAD_CONST 7 ( 1 )
68 COMPARE_OP 2 ( == )
70 POP_JUMP_IF_FALSE 52

32 72 LOAD_FAST 0 ( x )
74 LOAD_CONST 1 ( 0 )
76 BINARY_SUBSCR
78 LOAD_CONST 8 ( 1 )
80 COMPARE_OP 2 ( == )
82 POP_JUMP_IF_FALSE 82

33 84 LOAD_FAST 0 ( x )
86 LOAD_CONST 1 ( 0 )
88 BINARY_SUBSCR
90 LOAD_CONST 9 ( 1 )
92 BINARY_SUBSCR
94 LOAD_CONST 10 ( 1 )
96 COMPARE_OP 2 ( == )
98 POP_JUMP_IF_FALSE 82

34 100 LOAD_FAST 0 ( x )
102 LOAD_CONST 1 ( 0 )
104 BINARY_SUBSCR
106 LOAD_CONST 11 ( 1 )
108 BINARY_SUBSCR
110 LOAD_CONST 12 ( 2 )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 116

35 116 LOAD_FAST 0 ( x )
118 LOAD_CONST 1 ( 0 )
120 BINARY_SUBSCR
122 LOAD_CONST 12 ( 2 )
124 COMPARE_OP 2 ( == )
126 POP_JUMP_IF_FALSE 126

36 128 LOAD_FAST 0 ( x )
130 LOAD_CONST 1 ( 0 )
132 BINARY_SUBSCR
134 LOAD_CONST 12 ( 2 )
136 COMPARE_OP 2 ( == )
138 POP_JUMP_IF_FALSE 126

37 140 LOAD_FAST 0 ( x )
142 LOAD_CONST 1 ( 0 )
144 BINARY_SUBSCR
146 LOAD_CONST 12 ( 2 )
148 COMPARE_OP 2 ( == )
150 POP_JUMP_IF_FALSE 126

38 >> 152 LOAD_FAST 0 ( x )
154 RETURN_VALUE

