{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    if n <= 1 :\n        return\n    f_gold ( arr , n - 1 )\n    last = arr [ n - 1 ]\n    j = n - 2\n    while ( j >= 0 and arr [ j ] > last ) :\n        arr [ j + 1 ] = arr [ j ]\n        j = j - 1\n    arr [ j + 1 ] = last\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 7, 8, 14, 25, 25, 25, 30, 31, 36, 36, 37, 42, 44, 45, 45, 47, 50, 50, 54, 60, 60, 61, 67, 68, 69, 79, 80, 82, 96],27,),\n    ([-6, -2, -94],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([76, 39, 64, 57, 63, 7, 86, 72, 87, 23, 76, 6, 58, 14, 28, 5, 68, 56, 25, 27, 60, 4, 29, 91, 7, 32, 20, 64, 43, 30],26,),\n    ([-98, -80, -64, -60, -58, -54, -46, -44, -38, -30, -26, -20, -14, -14, -12, -8, -8, 16, 18, 18, 24, 26, 26, 34, 46, 70, 76, 82, 98],27,),\n    ([0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1],10,),\n    ([3, 4, 4, 5, 7, 13, 21, 21, 21, 22, 24, 25, 25, 34, 34, 40, 40, 45, 48, 50, 51, 60, 61, 64, 68, 73, 74, 77, 79, 80, 85, 90, 91, 93],17,),\n    ([46, -22, -48, -64, 44, -70, -8, -56, -24, -8, -92, -58, 60, -8, 78, -54, -66, 92, 32, -98, 46, 80, -2, -30, 20, -88, -18, 46, 68, -2, -48, -32, 48, 88, -92, 96, -82, 38, -82, -50, -20, 34, -50, 2, -64, 18, 50],45,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([73, 53, 18, 19, 63],3,)\n        ]\n    filled_function_param = [\n    ([4, 7, 8, 14, 25, 25, 25, 30, 31, 36, 36, 37, 42, 44, 45, 45, 47, 50, 50, 54, 60, 60, 61, 67, 68, 69, 79, 80, 82, 96],27,),\n    ([-6, -2, -94],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([76, 39, 64, 57, 63, 7, 86, 72, 87, 23, 76, 6, 58, 14, 28, 5, 68, 56, 25, 27, 60, 4, 29, 91, 7, 32, 20, 64, 43, 30],26,),\n    ([-98, -80, -64, -60, -58, -54, -46, -44, -38, -30, -26, -20, -14, -14, -12, -8, -8, 16, 18, 18, 24, 26, 26, 34, 46, 70, 76, 82, 98],27,),\n    ([0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1],10,),\n    ([3, 4, 4, 5, 7, 13, 21, 21, 21, 22, 24, 25, 25, 34, 34, 40, 40, 45, 48, 50, 51, 60, 61, 64, 68, 73, 74, 77, 79, 80, 85, 90, 91, 93],17,),\n    ([46, -22, -48, -64, 44, -70, -8, -56, -24, -8, -92, -58, 60, -8, 78, -54, -66, 92, 32, -98, 46, 80, -2, -30, 20, -88, -18, 46, 68, -2, -48, -32, 48, 88, -92, 96, -82, 38, -82, -50, -20, 34, -50, 2, -64, 18, 50],45,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([73, 53, 18, 19, 63],3,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def insertionSortRecursive ( arr , n ) :\n    if n <= 1 :\n        return\n    insertionSortRecursive ( arr , n - 1 )\n    last = arr [ n - 1 ]\n    j = n - 2\n    while ( j >= 0 and arr [ j ] > last ) :\n        arr [ j + 1 ] = arr [ j ]\n        j = j - 1\n    arr [ j + 1 ] = last\n"}
Disassembly of <code object insertionSortsive at 0x7f816a673a50, file "<dis>", line 19>:
20 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 4 ( > )
6 POP_JUMP_IF_FALSE 12

21 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 2 ( 2 )
12 COMPARE_OP 4 ( > )
14 POP_JUMP_IF_FALSE 12

22 16 LOAD_FAST 1 ( n )
18 LOAD_CONST 3 ( 1 )
20 COMPARE_OP 4 ( > )
22 POP_JUMP_IF_FALSE 28

23 24 LOAD_FAST 1 ( n )
26 LOAD_CONST 4 ( 0 )
28 COMPARE_OP 4 ( > )
30 POP_JUMP_IF_FALSE 44

24 32 LOAD_FAST 1 ( n )
34 LOAD_CONST 5 ( 1 )
36 COMPARE_OP 4 ( > )
38 POP_JUMP_IF_FALSE 44

25 40 LOAD_FAST 1 ( n )
42 LOAD_CONST 6 ( 2 )
44 COMPARE_OP 4 ( > )
46 POP_JUMP_IF_FALSE 44

26 >> 48 LOAD_FAST 1 ( n )
50 LOAD_CONST 7 ( 2 )
52 COMPARE_OP 4 ( > )
54 POP_JUMP_IF_FALSE 58

27 56 LOAD_FAST 1 ( n )
58 LOAD_CONST 8 ( 2 )
60 COMPARE_OP 4 ( > )
62 POP_JUMP_IF_FALSE 58

28 64 LOAD_FAST 1 ( n )
66 LOAD_CONST 9 ( 2 )
68 COMPARE_OP 4 ( > )
70 POP_JUMP_IF_FALSE 58

29 72 LOAD_FAST 1 ( n )
74 LOAD_CONST 10 ( 2 )
76 COMPARE_OP 4 ( > )
78 POP_JUMP_IF_FALSE 58

30 80 LOAD_FAST 1 ( n )
82 LOAD_CONST 10 ( 2 )
84 COMPARE_OP 4 ( > )
86 POP_JUMP_IF_FALSE 58

31 88 LOAD_FAST 1 ( n )
90 LOAD_CONST 11 ( 2 )
92 COMPARE_OP 4 ( > )
94 POP_JUMP_IF_FALSE 58

32 96 LOAD_FAST 1 ( n )
98 LOAD_CONST 12 ( 2 )
100 COMPARE_OP 4 ( > )
102 POP_JUMP_IF_FALSE 58

33 104 LOAD_FAST 1 ( n )
106 LOAD_CONST 13 ( 1 )
108 INPLACE_ADD
110 STORE_FAST 1 ( n )

34 >> 112 LOAD_FAST 1 ( n )
114 LOAD_CONST 6 ( 2 )
116 COMPARE_OP 4 ( > )
118 POP_JUMP_IF_FALSE 130

35 120 LOAD_FAST 1 ( n )
122 LOAD_CONST 6 ( 2 )
124 INPLACE_ADD
126 STORE_FAST 1 ( n )
128 JUMP_FORWARD 4 ( to 130 )

35 >> 130 LOAD_FAST 1 ( n )
132 LOAD_CONST 6 ( 2 )
134 COMPARE_OP 4 ( > )
136 POP_JUMP_IF_FALSE 130

36 >> 138 LOAD_FAST 1 ( n )
140 RETURN_VALUE

