{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x , y ) :\n    if ( y == 0 ) : return 1\n    temp = f_gold ( x , int ( y / 2 ) )\n    if ( y % 2 == 0 ) :\n        return temp * temp\n    else :\n        if ( y > 0 ) : return x * temp * temp\n        else : return ( temp * temp ) / x\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (4922.762671782271,18,),\n    (-838.1149138859112,7,),\n    (8829.981827152698,18,),\n    (-7084.090587314416,11,),\n    (9213.145968063258,42,),\n    (-4743.690018081376,63,),\n    (3281.586891359318,30,),\n    (-4006.1025383282854,63,),\n    (7806.145296436601,52,),\n    (-7219.421835366018,31,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def power ( x , y ) :\n    if ( y == 0 ) : return 1\n    temp = power ( x , int ( y / 2 ) )\n    if ( y % 2 == 0 ) :\n        return temp * temp\n    else :\n        if ( y > 0 ) : return x * temp * temp\n        else : return ( temp * temp ) / x\n"}
Disassembly of <code object power at 0x7f816a6e4b70, file "<dis>", line 25>:
26 0 LOAD_FAST 0 ( x )
2 LOAD_CONST 1 ( 0 )
4 BINARY_SUBSCR
6 LOAD_CONST 2 ( 1 )
8 COMPARE_OP 2 ( == )
10 POP_JUMP_IF_FALSE 20

27 12 LOAD_FAST 0 ( x )
14 LOAD_CONST 3 ( 1 )
16 BINARY_SUBSCR
18 LOAD_CONST 4 ( - 1 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

28 >> 24 LOAD_FAST 0 ( x )
26 LOAD_CONST 5 ( - 1 )
28 BINARY_SUBSCR
30 LOAD_CONST 6 ( - 1 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 44

29 36 LOAD_FAST 0 ( x )
38 LOAD_CONST 7 ( - 1 )
40 BINARY_SUBSCR
42 LOAD_CONST 8 ( - 1 )
44 BINARY_SUBSCR
46 LOAD_CONST 9 ( - 1 )
48 BINARY_SUBSCR
50 LOAD_CONST 10 ( - 1 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 60

30 56 LOAD_FAST 0 ( x )
58 LOAD_CONST 5 ( - 1 )
60 BINARY_SUBSCR
62 LOAD_CONST 6 ( - 1 )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 60

31 68 LOAD_FAST 0 ( x )
70 LOAD_CONST 5 ( - 1 )
72 BINARY_SUBSCR
74 LOAD_CONST 6 ( - 1 )
76 BINARY_SUBSCR
78 LOAD_CONST 7 ( - 1 )
80 BINARY_SUBSCR
82 LOAD_CONST 8 ( - 1 )
84 BINARY_SUBSCR
86 LOAD_CONST 10 ( - 1 )
88 BINARY_SUBSCR
90 LOAD_CONST 11 ( - 1 )
92 BINARY_SUBSCR
94 LOAD_CONST 12 ( - 1 )
96 BINARY_SUBSCR
98 LOAD_CONST 13 ( - 1 )
100 BINARY_SUBSCR
102 LOAD_CONST 14 ( - 1 )
104 BINARY_SUBSCR
106 LOAD_CONST 15 ( - 1 )
108 BINARY_SUBSCR
110 LOAD_CONST 16 ( - 1 )
112 BINARY_SUBSCR
114 LOAD_CONST 17 ( - 1 )
116 BINARY_SUBSCR
118 LOAD_CONST 18 ( - 1 )
120 BINARY_SUBSCR
122 LOAD_CONST 19 ( - 1 )
124 BINARY_SUBSCR
126 LOAD_CONST 20 ( - 1 )
128 BINARY_SUBSCR
130 LOAD_CONST 21 ( - 1 )
132 BINARY_SUBSCR
134 LOAD_CONST 22 ( - 1 )
136 LOAD_CONST 21 ( - 1 )
138 BUILD_SLICE 2
140 BINARY_SUBSCR
142 LOAD_CONST 20 ( - 1 )
144 BUILD_SLICE 2
146 BINARY_SUBSCR
148 LOAD_CONST 21 ( - 1 )
150 BUILD_SLICE 2
152 BINARY_SUBSCR
154 LOAD_CONST 22 ( - 1 )
156 BUILD_SLICE 2
158 BINARY_SUBSCR
160 LOAD_FAST 0 ( x )
162 LOAD_CONST 21 ( - 1 )
164 BINARY_SUBSCR
166 LOAD_CONST 22 ( - 1 )
168 BUILD_SLICE 2
170 BINARY_SUBSCR
