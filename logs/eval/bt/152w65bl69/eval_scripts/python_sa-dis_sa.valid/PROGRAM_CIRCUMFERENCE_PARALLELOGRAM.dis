{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , b ) :\n    return ( ( 2 * a ) + ( 2 * b ) )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (801.0366882228715,456.71190645582783,),\n    (-7069.610056819919,-4226.483870778477,),\n    (7723.966966568705,5894.65405158763,),\n    (-7935.859205856963,-5333.225064296693,),\n    (6094.247432557289,1660.420120702062,),\n    (-7371.490363309265,-1095.4543576847332,),\n    (8368.473889617526,4735.838330834498,),\n    (-3761.921143166053,-5315.871691690649,),\n    (3139.1089185587884,6490.194159517967,),\n    (-5218.286665567171,-8265.153014320813,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def circumferenceparallelogram ( a , b ) :\n    return ( ( 2 * a ) + ( 2 * b ) )\n"}
Disassembly of <code object circumase_parallelogram at 0x7f816a673a50, file "<dis>", line 25>:
26 0 LOAD_CONST 1 ( 2 )
2 LOAD_CONST 2 ( 3 )
4 LOAD_CONST 3 ( 4 )
6 LOAD_CONST 4 ( 6 )
8 LOAD_CONST 5 ( ( 'a' , 'b' ) )
10 BUILD_CONST_KEY_MAP 2
12 LOAD_CONST 6 ( ( 'a' , 'b' ) )
14 BUILD_CONST_KEY_MAP 2
16 STORE_FAST 1 ( b )

27 18 LOAD_FAST 1 ( b )
20 LOAD_CONST 7 ( '' )
22 COMPARE_OP 2 ( == )
24 POP_JUMP_IF_FALSE 38

28 26 LOAD_CONST 8 ( '' )
28 STORE_FAST 1 ( b )

29 30 LOAD_FAST 1 ( b )
32 LOAD_FAST 0 ( a )
34 LOAD_CONST 8 ( '' )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 44

30 40 LOAD_CONST 9 ( '' )
42 STORE_FAST 1 ( b )

31 >> 44 LOAD_FAST 1 ( b )
46 LOAD_FAST 0 ( a )
48 LOAD_CONST 10 ( '' )
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 44

32 54 LOAD_CONST 11 ( '' )
56 STORE_FAST 1 ( b )

33 58 LOAD_FAST 1 ( b )
60 LOAD_FAST 0 ( a )
62 LOAD_CONST 12 ( '' )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 78

34 68 LOAD_CONST 13 ( '' )
70 STORE_FAST 1 ( b )

35 >> 72 LOAD_FAST 1 ( b )
74 LOAD_FAST 0 ( a )
76 LOAD_CONST 12 ( '' )
78 COMPARE_OP 2 ( == )
80 POP_JUMP_IF_FALSE 80

36 82 LOAD_CONST 14 ( '' )
84 STORE_FAST 1 ( b )

37 86 LOAD_FAST 1 ( b )
88 LOAD_FAST 0 ( a )
90 LOAD_CONST 12 ( '' )
92 COMPARE_OP 2 ( == )
94 POP_JUMP_IF_FALSE 80

38 96 LOAD_FAST 1 ( b )
98 98 LOAD_CONST 13 ( '' )
100 STORE_FAST 1 ( b )

39 102 LOAD_FAST 1 ( b )
104 LOAD_CONST 14 ( '' )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 80

40 110 LOAD_FAST 1 ( b )
112 LOAD_CONST 15 ( '' )
114 COMPARE_OP 2 ( == )
116 POP_JUMP_IF_FALSE 130

41 118 LOAD_FAST 1 ( b )
120 RETURN_VALUE

42 >> 122 LOAD_FAST 1 ( b )
124 RETURN_VALUE

