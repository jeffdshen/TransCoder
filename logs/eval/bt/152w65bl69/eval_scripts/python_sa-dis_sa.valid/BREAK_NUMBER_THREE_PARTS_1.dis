{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    count = 0\n    count = ( n + 1 ) * ( n + 2 ) // 2\n    return count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (71,),\n    (71,),\n    (36,),\n    (3,),\n    (97,),\n    (69,),\n    (15,),\n    (48,),\n    (77,),\n    (6,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def count_of_ways ( n ) :\n    count = 0\n    count = ( n + 1 ) * ( n + 2 ) // 2\n    return count\n"}
Disassembly of <code object count_of_ways at 0x7f816a681780, file "<dis>", line 100>:
101 0 LOAD_CONST 1 ( 0 )
2 LOAD_CONST 2 ( ( 1 , 2 ) )
4 LOAD_CONST 3 ( ( 'count' , ) )
6 CALL_FUNCTION_KW 1
8 STORE_FAST 1 ( count )

102 10 LOAD_FAST 0 ( n )
12 LOAD_CONST 4 ( ( 1 , 2 ) )
14 COMPARE_OP 2 ( == )
16 POP_JUMP_IF_FALSE 28

103 18 LOAD_FAST 0 ( n )
20 LOAD_CONST 5 ( 1 )
22 INPLACE_ADD
24 STORE_FAST 1 ( count )

104 >> 26 LOAD_FAST 1 ( count )
28 LOAD_CONST 6 ( 1 )
30 INPLACE_ADD
32 STORE_FAST 1 ( count )
34 JUMP_FORWARD 10 ( to 38 )

105 >> 36 LOAD_FAST 1 ( count )
38 LOAD_CONST 7 ( 1 )
40 INPLACE_ADD
42 STORE_FAST 1 ( count )

106 44 LOAD_FAST 1 ( count )
46 LOAD_CONST 8 ( 1 )
48 INPLACE_ADD
50 STORE_FAST 1 ( count )

107 >> 52 LOAD_FAST 1 ( count )
54 LOAD_CONST 9 ( 1 )
56 INPLACE_ADD
58 STORE_FAST 1 ( count )

108 60 LOAD_FAST 1 ( count )
62 LOAD_CONST 10 ( 1 )
64 INPLACE_ADD
66 STORE_FAST 1 ( count )
68 JUMP_FORWARD 4 ( to 38 )

109 >> 70 LOAD_FAST 1 ( count )
72 LOAD_CONST 11 ( 1 )
74 INPLACE_ADD
76 STORE_FAST 1 ( count )
78 JUMP_FORWARD 4 ( to 38 )

111 >> 80 LOAD_FAST 1 ( count )
82 LOAD_CONST 12 ( 1 )
84 INPLACE_ADD
86 STORE_FAST 1 ( count )

112 88 LOAD_FAST 1 ( count )
90 LOAD_CONST 13 ( 1 )
92 INPLACE_ADD
94 STORE_FAST 1 ( count )

113 >> 96 LOAD_FAST 1 ( count )
98 LOAD_CONST 14 ( 1 )
100 INPLACE_ADD
102 STORE_FAST 1 ( count )

114 104 LOAD_FAST 1 ( count )
106 LOAD_CONST 15 ( 1 )
108 INPLACE_ADD
110 STORE_FAST 1 ( count )
112 JUMP_FORWARD 4 ( to 38 )

116 >> 114 LOAD_FAST 1 ( count )
116 LOAD_CONST 16 ( 1 )
118 INPLACE_ADD
120 STORE_FAST 1 ( count )

117 122 LOAD_FAST 1 ( count )
124 LOAD_CONST 17 ( 1 )
126 INPLACE_ADD
128 STORE_FAST 1 ( count )

118 130 LOAD_FAST 1 ( count )
132 LOAD_CONST 18 ( 1 )
134 INPLACE_ADD
136 STORE_FAST 1 ( count )

119 >> 138 LOAD_FAST 1 ( count )
140 RETURN_VALUE

