{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( int ( i % 2 ) == 0 ) :\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n    return DP [ n ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (37,),\n    (24,),\n    (13,),\n    (56,),\n    (26,),\n    (67,),\n    (82,),\n    (60,),\n    (64,),\n    (65,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( int ( i % 2 ) == 0 ) :\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n    return DP [ n ]\n"}
Disassembly of <code object findSDSFunc at 0x7f816a673a50, file "<dis>", line 64>:
66 0 LOAD_CONST 1 ( 0 )
2 LOAD_CONST 2 ( ( 'n' , ) )
4 IMPORT_NAME 0 ( DP )
6 IMPORT_FROM 1 ( n )
8 STORE_FAST 1 ( n )
10 POP_TOP

67 12 LOAD_FAST 1 ( n )
14 LOAD_CONST 3 ( 0 )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 32

68 20 LOAD_FAST 1 ( n )
22 LOAD_CONST 4 ( 2 )
24 COMPARE_OP 2 ( == )
26 POP_JUMP_IF_FALSE 32

69 28 LOAD_FAST 1 ( n )
30 LOAD_CONST 5 ( 0 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 32

70 36 LOAD_FAST 1 ( n )
38 LOAD_CONST 6 ( 1 )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 48

71 44 LOAD_FAST 1 ( n )
46 LOAD_CONST 7 ( 1 )
48 INPLACE_ADD
50 STORE_FAST 1 ( n )
52 JUMP_FORWARD 2 ( to 48 )

72 >> 54 LOAD_FAST 1 ( n )
56 LOAD_CONST 8 ( 2 )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 66

73 62 LOAD_FAST 1 ( n )
64 LOAD_CONST 9 ( 2 )
66 COMPARE_OP 2 ( == )
68 POP_JUMP_IF_FALSE 80

74 70 LOAD_FAST 1 ( n )
72 LOAD_CONST 10 ( 2 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 80

75 78 LOAD_FAST 1 ( n )
80 LOAD_CONST 11 ( 2 )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 94

76 86 LOAD_FAST 1 ( n )
88 LOAD_CONST 12 ( 2 )
90 COMPARE_OP 2 ( == )
92 POP_JUMP_IF_FALSE 94

77 94 LOAD_FAST 1 ( n )
96 LOAD_CONST 12 ( 2 )
98 COMPARE_OP 2 ( == )
100 POP_JUMP_IF_FALSE 106

78 102 LOAD_FAST 1 ( n )
104 LOAD_CONST 13 ( 0 )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 106

79 110 LOAD_FAST 1 ( n )
112 LOAD_CONST 6 ( 1 )
114 INPLACE_ADD
116 STORE_FAST 1 ( n )

80 >> 118 LOAD_FAST 1 ( n )
120 LOAD_CONST 6 ( 1 )
122 INPLACE_ADD
124 STORE_FAST 1 ( n )
126 JUMP_FORWARD 2 ( to 108 )

81 >> 128 LOAD_FAST 1 ( n )
130 LOAD_CONST 6 ( 1 )
132 COMPARE_OP 2 ( == )
134 POP_JUMP_IF_FALSE 136

82 136 LOAD_FAST 1 ( n )
138 LOAD_CONST 7 ( 1 )
140 INPLACE_ADD
142 STORE_FAST 1 ( n )

83 >> 144 LOAD_FAST