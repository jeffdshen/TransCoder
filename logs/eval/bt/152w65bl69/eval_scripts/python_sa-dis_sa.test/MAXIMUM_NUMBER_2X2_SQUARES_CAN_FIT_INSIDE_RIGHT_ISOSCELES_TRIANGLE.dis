{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( base ) :\n    base = ( base - 2 )\n    base = base / 2\n    return base * ( base + 1 ) / 2\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (95,),\n    (49,),\n    (10,),\n    (73,),\n    (74,),\n    (40,),\n    (10,),\n    (94,),\n    (64,),\n    (16,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def numberOfSquares ( base ) :\n    base = ( base - 2 )\n    base = base / 2\n    return base * ( base + 1 ) / 2\n"}
Disassembly of <code object numberOfSquares at 0x7f816a6e4b70, file "<dis>", line 25>:
26 0 LOAD_CONST 1 ( - 2 )
2 LOAD_CONST 2 ( 2 )
4 LOAD_CONST 3 ( 3 )
6 LOAD_CONST 4 ( 4 )
8 LOAD_CONST 5 ( ( 'base' , 'num_num_num' ) )
10 BUILD_CONST_KEY_MAP 3
12 STORE_FAST 1 ( base )

27 14 LOAD_FAST 1 ( base )
16 LOAD_CONST 6 ( 'num_num_num' )
18 COMPARE_OP 2 ( == )
20 POP_JUMP_IF_FALSE 26
22 LOAD_FAST 1 ( base )
24 LOAD_CONST 7 ( 'num_num_num' )
26 COMPARE_OP 2 ( == )
28 POP_JUMP_IF_FALSE 28

28 30 LOAD_FAST 1 ( base )
32 LOAD_CONST 8 ( 'num_num_num' )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 42

29 38 LOAD_FAST 1 ( base )
40 LOAD_CONST 9 ( 'num_num_num' )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 42

30 >> 46 LOAD_FAST 1 ( base )
48 LOAD_CONST 10 ( 'num_num_num' )
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 58

31 54 LOAD_FAST 1 ( base )
56 LOAD_CONST 11 ( 'num_num_num_num' )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 60

32 62 LOAD_FAST 1 ( base )
64 LOAD_CONST 12 ( 'num_num_num_num_num' )
66 COMPARE_OP 2 ( == )
68 POP_JUMP_IF_FALSE 60

33 70 LOAD_FAST 1 ( base )
72 LOAD_CONST 13 ( 'num_num_num_num' )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 60

34 78 LOAD_FAST 1 ( base )
80 LOAD_CONST 12 ( 'num_num_num_num' )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 90

35 86 LOAD_FAST 1 ( base )
88 LOAD_CONST 13 ( 'num_num_num' )
90 COMPARE_OP 2 ( == )
92 POP_JUMP_IF_FALSE 94

36 94 LOAD_FAST 1 ( base )
96 LOAD_CONST 14 ( 'num_num_num_num' )
98 COMPARE_OP 2 ( == )
100 POP_JUMP_IF_FALSE 94

37 102 LOAD_FAST 1 ( base )
104 LOAD_CONST 15 ( 'num_num_num_num' )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 94

38 >> 110 LOAD_FAST 1 ( base )
112 RETURN_VALUE

