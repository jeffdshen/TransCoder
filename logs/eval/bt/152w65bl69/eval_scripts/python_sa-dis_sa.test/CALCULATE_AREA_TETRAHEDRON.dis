{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( side ) :\n    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )\n    return round ( volume , 2 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (58,),\n    (56,),\n    (35,),\n    (99,),\n    (13,),\n    (45,),\n    (40,),\n    (92,),\n    (7,),\n    (13,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def vol_tetra ( side ) :\n    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )\n    return round ( volume , 2 )\n"}
Disassembly of <code object vol_tetra at 0x7f816a6e4ae0, file "<dis>", line 30>:
31 0 LOAD_FAST 1 ( volume )
2 LOAD_CONST 1 ( 3 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

32 8 LOAD_GLOBAL 0 ( round )
10 LOAD_FAST 1 ( volume )
12 LOAD_CONST 2 ( 4 )
14 CALL_FUNCTION 2
16 LOAD_CONST 3 ( 1 )
18 COMPARE_OP 2 ( == )
20 POP_JUMP_IF_FALSE 28

33 22 LOAD_GLOBAL 1 ( round )
24 LOAD_FAST 1 ( volume )
26 LOAD_CONST 2 ( 4 )
28 CALL_FUNCTION 2
30 LOAD_CONST 4 ( 1 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 38

34 36 LOAD_GLOBAL 2 ( round )
38 LOAD_FAST 1 ( volume )
40 LOAD_CONST 2 ( 4 )
42 CALL_FUNCTION 2
44 LOAD_CONST 5 ( 1 )
46 COMPARE_OP 2 ( == )
48 POP_JUMP_IF_FALSE 52

35 50 LOAD_GLOBAL 3 ( round )
52 LOAD_FAST 1 ( volume )
54 LOAD_CONST 2 ( 4 )
56 CALL_FUNCTION 2
58 LOAD_CONST 6 ( 1 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 52

36 64 LOAD_GLOBAL 4 ( round )
66 LOAD_FAST 1 ( volume )
68 LOAD_CONST 2 ( 4 )
70 CALL_FUNCTION 2
72 LOAD_CONST 7 ( 1 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 80
78 LOAD_GLOBAL 5 ( round )
80 LOAD_FAST 1 ( volume )
82 CALL_FUNCTION 1
84 LOAD_CONST 8 ( 1 )
86 COMPARE_OP 2 ( == )
88 POP_JUMP_IF_FALSE 80

37 >> 90 LOAD_GLOBAL 6 ( round )
92 LOAD_FAST 1 ( volume )
94 LOAD_CONST 9 ( 2 )
96 CALL_FUNCTION 2
98 LOAD_CONST 10 ( 1 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 80

38 104 LOAD_GLOBAL 7 ( round )
106 LOAD_FAST 1 ( volume )
108 CALL_FUNCTION 1
110 LOAD_CONST 11 ( 1 )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 80

39 116 LOAD_GLOBAL 8 ( round )
118 LOAD_FAST 1 ( volume )
120 CALL_FUNCTION 1
122 LOAD_CONST 12 ( 1 )
124 COMPARE_OP 2 ( == )
126 POP_JUMP_IF_FALSE 128

40 128 LOAD_GLOBAL 9 ( round )
130 LOAD_FAST 1 ( volume )
132 LOAD_CONST 3 ( 1 )
134 CALL_FUNCTION 2
136 POP_TOP

41 >> 138 LOAD_GLOBAL 10 ( round )
140 LOAD_FAST 1 ( volume )
142 CALL_FUNCTION 1
144 LOAD_CONST 12 ( 1 )
146 COMPARE_OP 2 ( == )
148 POP_JUMP_IF_FALSE 154

42 150 LOAD_CONST 13 ( 1 )
152 RETURN_VALUE

