{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , idx ) :\n    result = 0\n    for i in range ( n ) :\n        if ( arr [ i ] < arr [ idx ] ) :\n            result += 1\n        if ( arr [ i ] == arr [ idx ] and i < idx ) :\n            result += 1\n    return result ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 8, 9, 12, 15, 16, 18, 28, 28, 31, 33, 36, 36, 37, 40, 41, 44, 44, 46, 50, 50, 50, 52, 52, 54, 55, 60, 61, 65, 68, 71, 75, 75, 78, 81, 84, 87, 89, 90, 92, 94, 97, 97, 98, 98, 99],37,32,),\n    ([-16, 86, 94, -86, -38, 64, 96, -64, 94, 10, -10, -62, -50, -46, -62, -32, -4, 72, 14, 36, 74, -66, 46, 82, -44, -22, -26, 16, -8, 0, -90, 94, -50, 22, -82, 8, 92, -84, -34, -36, -66],31,27,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],30,34,),\n    ([66, 8, 30, 84, 36, 96, 45, 63, 23, 23, 14, 34, 86, 51, 18, 97, 21, 39, 96, 70, 28, 96, 78, 68, 88, 66, 13, 24, 74, 94],26,21,),\n    ([-94, -90, -86, -86, -72, -72, -58, -50, -32, -22, -18, -10, -4, -2, -2, 0, 0, 6, 14, 22, 22, 36, 36, 40, 44, 58, 60, 70, 70, 76, 82, 82, 84, 88, 96],17,31,),\n    ([1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1],30,36,),\n    ([3, 5, 6, 7, 8, 10, 17, 20, 20, 26, 27, 27, 27, 32, 32, 38, 40, 44, 45, 45, 45, 45, 47, 50, 57, 57, 57, 58, 62, 63, 63, 67, 68, 73, 75, 76, 77, 79, 79, 80, 85, 88, 89, 89, 89, 94, 96, 98],42,35,),\n    ([98, -92, 18, -18, 44, -88, -90, -66, -38, 78, -22, -46, -20, 64, -10, 54],14,12,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,31,),\n    ([14, 17],1,1,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def getIndexInSortedArray ( arr , n , idx ) :\n    result = 0\n    for i in range ( n ) :\n        if ( arr [ i ] < arr [ idx ] ) :\n            result += 1\n        if ( arr [ i ] == arr [ idx ] and i < idx ) :\n            result += 1\n    return result ;\n"}
Disassembly of <code object getIndexInSortedArray at 0x7f816a6e4b70, file "<dis>", line 30>:
31 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 0 )
4 BINARY_SUBSCR
6 STORE_FAST 2 ( arr )

32 8 LOAD_FAST 0 ( arr )
10 LOAD_CONST 2 ( 1 )
12 BINARY_SUBSCR
14 STORE_FAST 3 ( arr )

33 16 LOAD_FAST 2 ( arr )
18 LOAD_CONST 3 ( 1 )
20 BINARY_SUBSCR
22 STORE_FAST 4 ( arr )

34 24 LOAD_FAST 3 ( arr )
26 LOAD_CONST 4 ( 1 )
28 BINARY_SUBSCR
30 LOAD_CONST 5 ( 1 )
32 BINARY_SUBSCR
34 STORE_FAST 5 ( arr )

35 36 LOAD_FAST 5 ( arr )
38 LOAD_CONST 6 ( 2 )
40 BINARY_SUBSCR
42 STORE_FAST 6 ( arr )

36 44 LOAD_FAST 4 ( arr )
46 LOAD_CONST 7 ( 1 )
48 BINARY_SUBSCR
50 STORE_FAST 7 ( arr )

37 52 LOAD_FAST 5 ( arr )
54 LOAD_FAST 6 ( arr )
56 LOAD_CONST 8 ( 2 )
58 BINARY_SUBSCR
60 LOAD_FAST 7 ( arr )
62 LOAD_CONST 9 ( 2 )
64 BINARY_SUBSCR
66 LOAD_FAST 6 ( arr )
68 LOAD_CONST 10 ( 3 )
70 BINARY_SUBSCR
72 LOAD_CONST 11 ( 1 )
74 BINARY_SUBSCR
76 LOAD_FAST 7 ( arr )
78 LOAD_CONST 12 ( 4 )
80 BINARY_SUBSCR
82 LOAD_FAST 7 ( arr )
84 LOAD_CONST 13 ( 1 )
86 BINARY_SUBSCR
88 LOAD_FAST 7 ( arr )
90 LOAD_CONST 14 ( 2 )
92 BINARY_SUBSCR
94 LOAD_CONST 15 ( 1 )
96 BINARY_SUBSCR
98 LOAD_FAST 7 ( arr )
100 LOAD_CONST 16 ( 3 )
102 BINARY_SUBSCR
104 LOAD_FAST 7 ( arr )
106 LOAD_CONST 17 ( 2 )
108 BINARY_SUBSCR
110 LOAD_CONST 18 ( 4 )
112 BINARY_SUBSCR
114 LOAD_FAST 7 ( arr )
116 LOAD_CONST 19 ( 1 )
118 BINARY_SUBSCR
120 LOAD_CONST 20 ( 3 )
122 BINARY_SUBSCR
124 BUILD_TUPLE 4
126 LOAD_FAST 7 ( arr )
128 LOAD_CONST 21 ( 1 )
130 BINARY_SUBSCR
132 LOAD_FAST 7 ( arr )
134 LOAD_CONST 22 ( 2 )
136 STORE_SUBSCR

37 138 LOAD_FAST 6 ( arr )
140 RETURN_VALUE

