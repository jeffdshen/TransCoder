{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([5, 6, 8, 15, 42, 47, 49, 52, 53, 54, 55, 58, 58, 60, 60, 68, 70, 86, 94, 96, 97, 99],18,),\n    ([-87, 14, 24, 6, 58, 47, 45, 20, -37, -81, -8, -42, 83, -10, 17, -38],14,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],4,),\n    ([1, 16, 61, 64, 63, 69, 22, 93, 67, 76, 26, 16, 51, 86, 57, 29, 78, 92, 69, 47, 94, 62, 69, 76, 16, 90, 90, 48, 85, 39, 33, 94, 23, 10, 69, 34, 52, 95, 10, 19],20,),\n    ([-98, -96, -84, -76, -20],2,),\n    ([1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],15,),\n    ([7, 8, 10, 12, 21, 23, 24, 24, 26, 29, 34, 36, 36, 36, 37, 49, 55, 58, 62, 64, 68, 73, 74, 75, 81, 82, 87, 89, 90, 90, 93, 96, 96, 99, 99],29,),\n    ([-1, 5, -70, -83, 13, -38, -16, 12, -14, 41, 87, -81, 77, 0, 40, 89, 47, -24, -91, 99, -72, 28, -48],13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,),\n    ([29, 37, 38, 83, 8],2,)\n        ]\n    filled_function_param = [\n    ([5, 6, 8, 15, 42, 47, 49, 52, 53, 54, 55, 58, 58, 60, 60, 68, 70, 86, 94, 96, 97, 99],18,),\n    ([-87, 14, 24, 6, 58, 47, 45, 20, -37, -81, -8, -42, 83, -10, 17, -38],14,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],4,),\n    ([1, 16, 61, 64, 63, 69, 22, 93, 67, 76, 26, 16, 51, 86, 57, 29, 78, 92, 69, 47, 94, 62, 69, 76, 16, 90, 90, 48, 85, 39, 33, 94, 23, 10, 69, 34, 52, 95, 10, 19],20,),\n    ([-98, -96, -84, -76, -20],2,),\n    ([1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],15,),\n    ([7, 8, 10, 12, 21, 23, 24, 24, 26, 29, 34, 36, 36, 36, 37, 49, 55, 58, 62, 64, 68, 73, 74, 75, 81, 82, 87, 89, 90, 90, 93, 96, 96, 99, 99],29,),\n    ([-1, 5, -70, -83, 13, -38, -16, 12, -14, 41, 87, -81, 77, 0, 40, 89, 47, -24, -91, 99, -72, 28, -48],13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,),\n    ([29, 37, 38, 83, 8],2,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sort012 ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1\n"}
Disassembly of <code object sort012 at 0x7f816a6e4b70, file "<dis>", line 20>:
21 0 LOAD_FAST 1 ( arr_size )
2 LOAD_CONST 1 ( - 1 )
4 BINARY_SUBSCR
6 STORE_FAST 2 ( a )

22 8 LOAD_FAST 2 ( a )
10 LOAD_FAST 0 ( a )
12 LOAD_FAST 1 ( arr_size )
14 LOAD_FAST 2 ( a )
16 LOAD_FAST 3 ( size )
18 LOAD_FAST 4 ( size )
20 LOAD_CONST 2 ( 1 )
22 BINARY_SUBTRACT
24 BINARY_MULTIPLY
26 LOAD_FAST 4 ( size )
28 LOAD_CONST 3 ( - 1 )
30 BINARY_SUBTRACT
32 BINARY_MULTIPLY
34 BINARY_ADD
36 LOAD_FAST 4 ( size )
38 LOAD_FAST 2 ( a )
40 LOAD_FAST 3 ( size )
42 BINARY_ADD
44 BINARY_ADD
46 LOAD_FAST 4 ( size )
48 LOAD_CONST 4 ( - 1 )
50 BINARY_SUBTRACT
52 BINARY_MULTIPLY
54 BINARY_ADD
56 LOAD_FAST 4 ( size )
58 LOAD_FAST 5 ( arr_size )
60 LOAD_FAST 6 ( a )
62 LOAD_FAST 7 ( arr_size )
64 BINARY_ADD
66 BINARY_MULTIPLY
68 BINARY_ADD
70 LOAD_FAST 4 ( size )
72 LOAD_FAST 5 ( arr_size )
74 BINARY_ADD
76 BINARY_MULTIPLY
78 BINARY_ADD
80 LOAD_FAST 4 ( size )
82 LOAD_FAST 5 ( arr_size )
84 BINARY_ADD
86 BINARY_ADD
88 LOAD_FAST 4 ( size )
90 LOAD_FAST 5 ( arr_size )
92 BINARY_ADD
94 BINARY_ADD
96 LOAD_FAST 4 ( size )
98 LOAD_CONST 5 ( - 1 )
100 BINARY_ADD
102 BINARY_MULTIPLY
104 BINARY_ADD
106 LOAD_FAST 4 ( size )
108 LOAD_CONST 6 ( - 1 )
110 BINARY_ADD
112 BINARY_MULTIPLY
114 BINARY_ADD
116 LOAD_FAST 4 ( size )
118 BINARY_ADD
120 BINARY_ADD
122 BINARY_ADD
124 LOAD_FAST 4 ( size )
126 BINARY_ADD
128 LOAD_FAST 4 ( size )
130 BINARY_ADD
132 BINARY_ADD
134 LOAD_FAST 4 ( size )
136 BINARY_ADD
138 BINARY_ADD
140 BINARY_ADD
142 LOAD_FAST 4 ( size )
144 BINARY_ADD
146 BINARY_ADD
148 RETURN_VALUE

