{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    if m < n :\n        return 0\n    arr1.sort ( )\n    arr2.sort ( )\n    while i < n and j < m :\n        if arr1 [ j ] < arr2 [ i ] :\n            j += 1\n        elif arr1 [ j ] == arr2 [ i ] :\n            j += 1\n            i += 1\n        elif arr1 [ j ] > arr2 [ i ] :\n            return 0\n    return False if i < n else True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([7, 10, 10, 10, 13, 17, 23, 24, 25, 28, 30, 33, 37, 49, 49, 50, 57, 60, 60, 63, 63, 64, 65, 65, 72, 81, 84, 85, 85, 94, 96],\n     [10,13,17,63],29,4,),\n    ([12, 30, -94, -92, -62, -18, -56, 44, -50, -92, 6, 2, 56, -90, 0, 0, 18, 86, -58, 58, -54, 62, -94, 94, 0, 8, 82, -68, -88, -18, 8, -80, -42, 18, 62, -8, 56, -76, -42, 56, 44, -2, -20, 62, -14, 74, -86, -76],\n     [12, -18, 44],46,3,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n     [0,0,0],34,3,),\n    ([94, 26, 32, 20, 46, 55, 9, 51, 57, 80, 45, 38, 68, 12, 90, 10, 80, 65, 12, 52, 51, 86, 64, 57, 93, 19, 30, 92, 85, 82, 24, 26, 36, 56],\n     [80,58,32,2],17,4,),\n    ([-98, -90, -86, -86, -84, -84, -82, -80, -78, -72, -70, -68, -66, -64, -52, -52, -50, -38, -28, -26, -24, -14, -8, 16, 26, 26, 28, 34, 36, 40, 42, 44, 44, 46, 50, 60, 68, 78, 80, 86, 90, 92, 98],\n     [-99,-90,-90,-86],23,4,),\n    ([1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1],\n     [0,0,1,1],10,4,),\n    ([6, 8, 11, 13, 14, 26, 26, 41, 48, 70, 82, 83, 84, 88, 96],\n     [1,9,12,16],10,4,),\n    ([-88, 80, 62, 76, 48, 92, 18, -94, -62, 98, -46, -50, 70, 32, 68, -54, 26, 16, 94, 0, -84, 2, -16, 88, 26, -38, 18, 64, 90, 80, 76, 2, 14, -90, 50, 4, 76, 30],\n     [-76,-54,4,78],27,4,),\n    ([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],\n     [0,1,0,1],10,4,),\n    ([54, 44, 97, 92, 13, 54, 27, 8, 43, 70, 77, 84, 55, 64, 5, 59, 27, 19, 65, 68, 66, 26, 33, 38, 7],\n     [93,5,9,13],19,4,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    if m < n :\n        return 0\n    arr1.sort ( )\n    arr2.sort ( )\n    while i < n and j < m :\n        if arr1 [ j ] < arr2 [ i ] :\n            j += 1\n        elif arr1 [ j ] == arr2 [ i ] :\n            j += 1\n            i += 1\n        elif arr1 [ j ] > arr2 [ i ] :\n            return 0\n    return False if i < n else True\n"}
Disassembly of <code object isSubset at 0x7f816a677930, file "<dis>", line 25>:
26 0 LOAD_FAST 1 ( arr2 )
2 LOAD_FAST 0 ( arr1 )
4 LOAD_FAST 2 ( arr2 )
6 LOAD_FAST 3 ( arr2 )
8 LOAD_FAST 4 ( arr2 )
10 LOAD_FAST 5 ( arr2 )
12 LOAD_FAST 6 ( arr2 )
14 LOAD_FAST 7 ( arr2 )
16 LOAD_FAST 8 ( arr2 )
18 LOAD_FAST 9 ( arr2 )
20 LOAD_FAST 10 ( arr2 )
22 LOAD_FAST 11 ( arr2 )
24 LOAD_FAST 12 ( arr2 )
26 LOAD_FAST 13 ( arr2 )
28 LOAD_FAST 14 ( arr2 )
30 LOAD_FAST 15 ( arr2 )
32 LOAD_FAST 8 ( arr2 )
34 LOAD_FAST 10 ( arr2 )
36 LOAD_FAST 12 ( arr2 )
38 LOAD_FAST 13 ( arr2 )
40 LOAD_FAST 14 ( arr2 )
42 LOAD_FAST 15 ( arr2 )
44 LOAD_FAST 16 ( arr2 )
46 LOAD_FAST 15 ( arr2 )
48 LOAD_FAST 16 ( arr2 )
50 LOAD_FAST 17 ( arr2 )
52 LOAD_FAST 16 ( arr2 )
54 LOAD_FAST 17 ( arr2 )
56 LOAD_FAST 18 ( arr2 )
58 LOAD_FAST 19 ( arr2 )
60 LOAD_FAST 20 ( arr2 )
62 LOAD_FAST 21 ( arr2 )
64 LOAD_FAST 22 ( arr2 )
66 LOAD_FAST 21 ( arr2 )
68 LOAD_FAST 22 ( arr2 )
70 LOAD_FAST 21 ( arr2 )
72 LOAD_FAST 22 ( arr2 )
74 LOAD_FAST 22 ( arr2 )
76 LOAD_FAST 21 ( arr2 )
78 LOAD_FAST 22 ( arr2 )
80 LOAD_FAST 22 ( arr2 )
82 LOAD_FAST 21 ( arr2 )
84 LOAD_FAST 22 ( arr2 )
86 LOAD_FAST 22 ( arr2 )
88 LOAD_FAST 23 ( arr2 )
90 LOAD_FAST 22 ( arr2 )
92 LOAD_FAST 21 ( arr2 )
94 LOAD_FAST 22 ( arr2 )
96 LOAD_FAST 22 ( arr2 )
98 LOAD_FAST 23 ( arr2 )
100 LOAD_FAST 22 ( arr2 )
102 LOAD_FAST 23 ( arr2 )
104 LOAD_FAST 22 ( arr2 )
106 LOAD_FAST 24 ( arr2 )
108 LOAD_FAST 23 ( arr2 )
110 LOAD_FAST 24 ( arr2 )
112 LOAD_FAST 23 ( arr2 )
114 LOAD_FAST 24 ( arr2 )
116 LOAD_FAST 23 ( arr2 )
118 LOAD_FAST 24 ( arr2 )
120 LOAD_FAST 23 ( arr2 )
122 LOAD_FAST 24 ( arr2 )
124 LOAD_FAST 25 ( arr2 )
126 LOAD_FAST 24 ( arr2 )
128 LOAD_FAST 23 ( arr2 )
130 LOAD_FAST 24 ( arr2 )
132 LOAD_FAST 26 ( arr2 )
134 LOAD_FAST 5 ( arr2 )
136 LOAD_FAST 6 ( arr2 )
138 LOAD_FAST 24 ( arr2 )
140 LOAD_FAST 5 ( arr2 )
