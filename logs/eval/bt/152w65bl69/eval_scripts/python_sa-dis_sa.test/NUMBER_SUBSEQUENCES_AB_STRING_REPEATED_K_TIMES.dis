{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n   ('abbc',96,),\n('abahk',7,),\n('hugbabab',5,),\n('abadbc',60,),\n('nkg9',8,),\n('jh7dab',41,),\n('abd',87,),\n('aabb8yk',4,),\n('1111',18,),\n('PFXAhr',8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2\n"}
Disassembly of <code object countOccurrences at 0x7f816a683a50, file "<dis>", line 116>:
117 0 LOAD_FAST 1 ( K )
2 LOAD_METHOD 0 ( count )
4 CALL_METHOD 0
6 STORE_FAST 2 ( s )

118 8 LOAD_FAST 0 ( s )
10 LOAD_METHOD 1 ( count )
12 CALL_METHOD 0
14 STORE_FAST 3 ( count )

119 16 LOAD_FAST 2 ( s )
18 LOAD_METHOD 2 ( count )
20 CALL_METHOD 0
22 STORE_FAST 4 ( count )

120 24 LOAD_FAST 0 ( s )
26 LOAD_METHOD 3 ( count )
28 CALL_METHOD 0
30 LOAD_CONST 1 ( 1 )
32 BINARY_SUBTRACT
34 STORE_FAST 5 ( count )

121 36 LOAD_FAST 0 ( s )
38 LOAD_METHOD 4 ( count )
40 CALL_METHOD 0
42 STORE_FAST 6 ( count )

122 44 LOAD_FAST 0 ( s )
46 LOAD_METHOD 5 ( count )
48 CALL_METHOD 0
50 STORE_FAST 7 ( count )

123 52 LOAD_FAST 0 ( s )
54 LOAD_METHOD 6 ( count )
56 CALL_METHOD 0
58 STORE_FAST 8 ( count )

124 60 LOAD_FAST 4 ( count )
62 LOAD_CONST 2 ( 0 )
64 BINARY_SUBSCR
66 LOAD_METHOD 7 ( count )
68 CALL_METHOD 0
70 LOAD_CONST 3 ( 1 )
72 COMPARE_OP 2 ( == )
74 POP_JUMP_IF_FALSE 80

125 76 LOAD_FAST 0 ( s )
78 LOAD_METHOD 8 ( count )
80 CALL_METHOD 0
82 LOAD_CONST 4 ( 1 )
84 COMPARE_OP 2 ( == )
86 POP_JUMP_IF_FALSE 80

126 88 LOAD_FAST 0 ( s )
90 LOAD_METHOD 9 ( count )
92 CALL_METHOD 0
94 LOAD_CONST 5 ( 1 )
96 COMPARE_OP 2 ( == )
98 POP_JUMP_IF_FALSE 80

127 100 LOAD_FAST 0 ( s )
102 LOAD_METHOD 10 ( count )
104 CALL_METHOD 0
106 LOAD_CONST 6 ( 1 )
108 INPLACE_ADD
110 STORE_FAST 7 ( count )

128 112 LOAD_FAST 0 ( s )
114 LOAD_METHOD 11 ( count )
116 CALL_METHOD 0
118 LOAD_CONST 7 ( 1 )
120 INPLACE_ADD
122 STORE_FAST 8 ( count )

129 124 LOAD_FAST 0 ( s )
126 LOAD_METHOD 12 ( count )
128 CALL_METHOD 0
130 STORE_FAST 9 ( count )

130 132 LOAD_FAST 9 ( count )
134 RETURN_VALUE

