{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    mx = \"\"\n    for i in range ( len ( str ) ) :\n        mx = max ( mx , str [ i : ] )\n    return mx\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('HCoAefoaan',),\n    ('80336005',),\n    ('01111111110',),\n    ('qIH',),\n    ('4210598472796',),\n    ('10101',),\n    ('imqmKdatcgXjs',),\n    ('950509666021',),\n    ('10111101101',),\n    ('wasqgYFvz',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def LexicographicalMaxString ( str ) :\n    mx = \"\"\n    for i in range ( len ( str ) ) :\n        mx = max ( mx , str [ i : ] )\n    return mx\n"}
Disassembly of <code object LexicographicalMaxString at 0x7f816a673a50, file "<dis>", line 25>:
26 0 LOAD_CONST 1 ( "mx" )
2 STORE_FAST 1 ( mx )

27 4 LOAD_GLOBAL 0 ( max )
6 LOAD_FAST 1 ( mx )
8 CALL_FUNCTION 1
10 STORE_FAST 2 ( mx )

28 12 LOAD_FAST 2 ( mx )
14 LOAD_CONST 2 ( 0 )
16 BINARY_SUBSCR
18 STORE_FAST 3 ( mx )

29 20 LOAD_FAST 3 ( mx )
22 LOAD_CONST 3 ( 0 )
24 BINARY_SUBSCR
26 STORE_FAST 4 ( mx )

30 28 LOAD_FAST 0 ( self )
30 LOAD_METHOD 1 ( _lexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlexlex