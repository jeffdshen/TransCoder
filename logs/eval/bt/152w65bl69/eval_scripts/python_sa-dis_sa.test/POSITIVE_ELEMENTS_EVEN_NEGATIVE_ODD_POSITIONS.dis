{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , size ) :\n    positive = 0\n    negative = 1\n    while ( True ) :\n        while ( positive < size and a [ positive ] >= 0 ) :\n            positive = positive + 2\n        while ( negative < size and a [ negative ] <= 0 ) :\n            negative = negative + 2\n        if ( positive < size and negative < size ) :\n            temp = a [ positive ]\n            a [ positive ] = a [ negative ]\n            a [ negative ] = temp\n        else :\n            break\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([8, 11, 18, 23, 24, 28, 28, 34, 35, 42, 44, 53, 57, 65, 71, 72, 76, 78, 82, 82, 85, 86, 92, 93],15,),\n    ([0, -95, -51, -2, -70, -28, 3, -37, 75, -74, 85, -63, -93, 27, 68, -8, 67, 90, 3, -47, 32, 8, 12, 53, -93, 56, 97],15,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],40,),\n    ([28, 85, 78, 33, 10, 83, 30, 22, 3, 82, 75, 48, 2, 76, 54, 6, 40, 93, 94],10,),\n    ([-98, -94, -7, -3, 1, 11, 11, 83, 88],7,),\n    ([0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0],35,),\n    ([8, 35, 37, 38, 39, 46, 49, 54],6,),\n    ([-60, -66, -4, -21, 27, -83, 61, 75, 10, -48, 18, -91, -67, 88, 13, 49, 86, -15, 97, -90, -94, 15, 21, 41, -35, -80, -43, -54],21,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1],5,),\n    ([62, 36, 39, 53, 90, 78, 56, 1, 56, 4, 30],8,)\n        ]\n    filled_function_param = [\n    ([8, 11, 18, 23, 24, 28, 28, 34, 35, 42, 44, 53, 57, 65, 71, 72, 76, 78, 82, 82, 85, 86, 92, 93],15,),\n    ([0, -95, -51, -2, -70, -28, 3, -37, 75, -74, 85, -63, -93, 27, 68, -8, 67, 90, 3, -47, 32, 8, 12, 53, -93, 56, 97],15,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],40,),\n    ([28, 85, 78, 33, 10, 83, 30, 22, 3, 82, 75, 48, 2, 76, 54, 6, 40, 93, 94],10,),\n    ([-98, -94, -7, -3, 1, 11, 11, 83, 88],7,),\n    ([0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0],35,),\n    ([8, 35, 37, 38, 39, 46, 49, 54],6,),\n    ([-60, -66, -4, -21, 27, -83, 61, 75, 10, -48, 18, -91, -67, 88, 13, 49, 86, -15, 97, -90, -94, 15, 21, 41, -35, -80, -43, -54],21,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1],5,),\n    ([62, 36, 39, 53, 90, 78, 56, 1, 56, 4, 30],8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def rearrange ( a , size ) :\n    positive = 0\n    negative = 1\n    while ( True ) :\n        while ( positive < size and a [ positive ] >= 0 ) :\n            positive = positive + 2\n        while ( negative < size and a [ negative ] <= 0 ) :\n            negative = negative + 2\n        if ( positive < size and negative < size ) :\n            temp = a [ positive ]\n            a [ positive ] = a [ negative ]\n            a [ negative ] = temp\n        else :\n            break\n"}
Disassembly of <code object rearrange at 0x7f816a6e4b70, file "<dis>", line 25>:
26 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( size )

27 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 2 ( a )

28 8 SETUP_LOOP 30 ( to 40 )
10 LOAD_FAST 0 ( a )
12 LOAD_CONST 2 ( 1 )
14 COMPARE_OP 4 ( > )
16 POP_JUMP_IF_FALSE 38

29 18 LOAD_FAST 1 ( size )
20 LOAD_FAST 2 ( a )
22 LOAD_CONST 3 ( 2 )
24 BINARY_MULTIPLY
26 STORE_FAST 1 ( size )

30 28 LOAD_FAST 1 ( size )
30 LOAD_CONST 4 ( - 1 )
32 COMPARE_OP 4 ( > )
34 POP_JUMP_IF_FALSE 38

31 36 LOAD_FAST 1 ( size )
38 LOAD_FAST 2 ( a )
40 LOAD_CONST 5 ( - 1 )
42 BINARY_MULTIPLY
44 LOAD_FAST 2 ( a )
46 LOAD_FAST 1 ( size )
48 LOAD_CONST 6 ( - 1 )
50 BINARY_MULTIPLY
52 BINARY_ADD
54 LOAD_FAST 2 ( a )
56 LOAD_CONST 7 ( - 1 )
58 BINARY_MULTIPLY
60 BINARY_ADD
62 LOAD_FAST 2 ( a )
64 LOAD_FAST 1 ( size )
66 BINARY_ADD
68 LOAD_CONST 8 ( - 1 )
70 BINARY_ADD
72 BINARY_ADD
74 LOAD_FAST 2 ( a )
76 LOAD_CONST 9 ( - 1 )
78 BINARY_ADD
80 BINARY_ADD
82 LOAD_FAST 2 ( a )
84 LOAD_CONST 10 ( - 1 )
86 BINARY_ADD
88 BINARY_ADD
90 LOAD_FAST 2 ( a )
92 BINARY_ADD
94 LOAD_CONST 11 ( - 1 )
96 BINARY_ADD
98 BINARY_ADD
100 LOAD_FAST 2 ( a )
102 LOAD_CONST 12 ( - 1 )
104 BINARY_ADD
106 BINARY_ADD
108 LOAD_FAST 2 ( a )
110 LOAD_CONST 13 ( - 1 )
112 BINARY_ADD
114 BINARY_ADD
116 BUILD_SLICE 2
118 BINARY_SUBSCR
120 BINARY_ADD
122 LOAD_FAST 2 ( a )
124 LOAD_CONST 14 ( - 1 )
126 BINARY_ADD
128 BINARY_ADD
130 LOAD_FAST 2 ( a )
132 BINARY_ADD
134 LOAD_FAST 2 ( a )
136 BINARY_ADD
138 BINARY_ADD
140 BINARY_ADD
142 LOAD_FAST 2 ( a )
144 BINARY_ADD
146 BINARY_ADD
148 LOAD_CONST 8 ( - 1 )
150 BINARY_ADD
152 BINARY_ADD
154 BINARY_ADD
156 RETURN_VALUE

