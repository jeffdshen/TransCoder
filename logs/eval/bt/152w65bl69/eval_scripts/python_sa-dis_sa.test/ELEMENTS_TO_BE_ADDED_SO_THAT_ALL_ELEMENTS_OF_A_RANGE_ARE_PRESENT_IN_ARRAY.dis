{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    count = 0\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) :\n            count += arr [ i + 1 ] - arr [ i ] - 1 ;\n    return count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 4, 5, 7, 7, 9, 13, 15, 18, 19, 25, 27, 27, 29, 32, 36, 48, 51, 53, 53, 55, 65, 66, 67, 72, 74, 74, 76, 77, 79, 80, 81, 82, 83, 83, 86, 87, 97, 98, 98, 99],30,),\n    ([34, 6, -16, -26, -80, -90, -74, 16, -84, 64, -8, 14, -52, -26, -90, -84, 94, 92, -88, -84, 72],17,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,),\n    ([25, 29, 12, 79, 23, 92, 54, 43, 26, 10, 43, 39, 32, 12, 62, 13, 13],14,),\n    ([-94, -86, -72, -64, -64, -58, -56, -56, -56, -56, -54, -54, -52, -42, -42, -40, -36, -32, -28, -22, -20, -18, -12, -8, -6, -4, 0, 2, 4, 10, 16, 30, 32, 48, 48, 60, 70, 74, 76, 84],35,),\n    ([1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0],29,),\n    ([4, 5, 8, 12, 16, 16, 17, 20, 20, 23, 26, 26, 27, 28, 32, 34, 40, 40, 41, 41, 44, 45, 47, 49, 51, 52, 54, 57, 60, 62, 63, 64, 66, 68, 69, 70, 71, 76, 77, 80, 80, 80, 90, 91, 92, 94, 96, 98, 99],42,),\n    ([66, -46, -92, -40, 76, 74, 10, 20, 56, -46, 88, -18, 48, 96, -48, -86, 38, -98, 50, 4, -52, -38, 14, -48, 96, 16, -74, -26, 80, 14, -92, -60, -78, -68, 96, -72, -44, -92, 2, 60, 4, 48, 84, -92],37,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],17,),\n    ([49, 84, 66],2,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countNum ( arr , n ) :\n    count = 0\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) :\n            count += arr [ i + 1 ] - arr [ i ] - 1 ;\n    return count\n"}
Disassembly of <code object countNum at 0x7f816a673a50, file "<dis>", line 16>:
17 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 STORE_FAST 1 ( n )

18 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 1 ( 1 )
12 COMPARE_OP 4 ( > )
14 POP_JUMP_IF_FALSE 28

19 16 LOAD_FAST 1 ( n )
18 LOAD_CONST 2 ( 0 )
20 COMPARE_OP 4 ( > )
22 POP_JUMP_IF_FALSE 28

20 24 LOAD_FAST 1 ( n )
26 LOAD_CONST 3 ( 1 )
28 INPLACE_ADD
30 STORE_FAST 1 ( n )

21 >> 32 LOAD_FAST 1 ( n )
34 LOAD_CONST 4 ( > )
36 COMPARE_OP 4 ( > )
38 POP_JUMP_IF_FALSE 44

22 40 LOAD_FAST 1 ( n )
42 LOAD_CONST 5 ( 1 )
44 INPLACE_ADD
46 STORE_FAST 1 ( n )
48 JUMP_FORWARD 4 ( to 44 )

23 >> 50 LOAD_FAST 1 ( n )
52 LOAD_CONST 6 ( - 1 )
54 INPLACE_ADD
56 STORE_FAST 1 ( n )

24 58 LOAD_FAST 1 ( n )
60 LOAD_CONST 7 ( - 1 )
62 INPLACE_ADD
64 STORE_FAST 1 ( n )

25 66 LOAD_FAST 1 ( n )
68 LOAD_CONST 8 ( - 1 )
70 INPLACE_ADD
72 STORE_FAST 1 ( n )
74 JUMP_FORWARD 4 ( to 44 )

26 >> 76 LOAD_FAST 1 ( n )
78 LOAD_CONST 9 ( - 1 )
80 INPLACE_ADD
82 STORE_FAST 1 ( n )

27 >> 84 LOAD_FAST 1 ( n )
86 LOAD_CONST 10 ( - 1 )
88 INPLACE_ADD
90 STORE_FAST 1 ( n )

28 92 LOAD_FAST 1 ( n )
94 LOAD_CONST 11 ( - 1 )
96 INPLACE_ADD
98 STORE_FAST 1 ( n )

29 100 LOAD_FAST 1 ( n )
102 LOAD_FAST 1 ( n )
104 LOAD_CONST 12 ( - 1 )
106 INPLACE_ADD
108 STORE_FAST 1 ( n )

30 110 LOAD_FAST 1 ( n )
112 LOAD_FAST 0 ( arr )
114 LOAD_CONST 13 ( - 1 )
116 INPLACE_ADD
118 STORE_FAST 1 ( n )

31 >> 120 LOAD_FAST 1 ( n )
122 LOAD_CONST 14 ( - 1 )
124 INPLACE_ADD
126 STORE_FAST 1 ( n )
128 LOAD_CONST 15 ( - 1 )
130 INPLACE_ADD
132 STORE_FAST 1 ( n )

32 134 LOAD_FAST 1 ( n )
136 LOAD_CONST 15 ( - 1 )
138 INPLACE_ADD
140 STORE_FAST 1 ( n )

33 142 LOAD_FAST 1 ( n )
144 RETURN_VALUE

