{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',1,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',4,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',100,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',0,),\n    ('0010',12,),\n    ('kjtdgmy',97,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum\n"}
Disassembly of <code object sumAtKthLevel at 0x7f816a673a50, file "<dis>", line 25>:
26 0 LOAD_CONST 1 ( - 1 )
2 STORE_FAST 1 ( k )

27 4 SETUP_LOOP 76 ( to 78 )
6 LOAD_GLOBAL 0 ( enumerate )
8 LOAD_FAST 1 ( k )
10 CALL_FUNCTION 1
12 GET_ITER
>> 14 FOR_ITER 76 ( to 76 )
16 STORE_FAST 2 ( i )

28 18 LOAD_FAST 2 ( i )
20 LOAD_CONST 2 ( 0 )
22 BINARY_SUBSCR
24 LOAD_FAST 1 ( k )
26 LOAD_CONST 3 ( 1 )
28 BINARY_SUBSCR
30 LOAD_CONST 4 ( - 1 )
32 BINARY_SUBSCR
34 LOAD_CONST 5 ( '' )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 14

29 40 LOAD_FAST 2 ( i )
42 LOAD_CONST 2 ( 0 )
44 BINARY_SUBSCR
46 LOAD_CONST 4 ( - 1 )
48 BINARY_SUBSCR
50 LOAD_CONST 6 ( '' )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 14

30 56 LOAD_FAST 2 ( i )
58 LOAD_CONST 2 ( 0 )
60 BINARY_SUBSCR
62 LOAD_CONST 4 ( - 1 )
64 BINARY_SUBSCR
66 LOAD_CONST 4 ( - 1 )
68 COMPARE_OP 2 ( == )
70 POP_JUMP_IF_FALSE 14

31 72 LOAD_FAST 2 ( i )
74 LOAD_CONST 2 ( 0 )
76 BINARY_SUBSCR
78 LOAD_CONST 4 ( - 1 )
80 BINARY_SUBSCR
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 14

32 86 LOAD_FAST 2 ( i )
88 LOAD_CONST 2 ( 0 )
90 BINARY_SUBSCR
92 LOAD_CONST 4 ( - 1 )
94 BINARY_SUBSCR
96 LOAD_CONST 5 ( '' )
98 COMPARE_OP 2 ( == )
100 POP_JUMP_IF_FALSE 14

33 102 LOAD_FAST 2 ( i )
104 LOAD_CONST 2 ( 0 )
106 BINARY_SUBSCR
108 LOAD_CONST 4 ( - 1 )
110 BINARY_SUBSCR
112 LOAD_CONST 4 ( - 1 )
114 BINARY_SUBSCR
116 LOAD_CONST 4 ( - 1 )
118 BINARY_SUBSCR
120 LOAD_CONST 4 ( - 1 )
122 BINARY_SUBSCR
124 LOAD_CONST 4 ( - 1 )
126 BINARY_SUBSCR
128 LOAD_CONST 4 ( - 1 )
130 BINARY_SUBSCR
132 LOAD_CONST 4 ( - 1 )
134 BUILD_SLICE 2
136 BINARY_SUBSCR
138 LOAD_CONST 4 ( - 1 )
140 BINARY_SUBSCR
142 LOAD_CONST 4 ( - 1 )
144 COMPARE_OP 2 ( == )
146 POP_JUMP_IF_FALSE 148
148 LOAD_FAST 2 ( i )
150 LOAD_CONST 2 ( 0 )
152 BINARY_SUBSCR
154 LOAD_CONST 4 ( - 1 )
156 BINARY_SUBSCR
158 LOAD_CONST 4 ( - 1 )
160 BUILD_SLICE 2
162 BINARY_SUBSCR
164 LOAD_CONST 4 ( -