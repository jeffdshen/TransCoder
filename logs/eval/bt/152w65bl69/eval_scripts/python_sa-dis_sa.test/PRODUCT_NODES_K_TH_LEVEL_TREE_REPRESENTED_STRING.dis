{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',1,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',2,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',4,),\n    ('(8(3(2()())(6(5()())()))(5(10()())(7(13()())())))',100,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',3,),\n    ('(0(5(6()())(4()(9()())))(7(1()())(3()())))',0,),\n    ('0010',12,),\n    ('kjtdgmy',97,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def productAtKthLevel ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product\n"}
Disassembly of <code object productAtKthLevel at 0x7f816a673a50, file "<dis>", line 25>:
26 0 LOAD_FAST 1 ( k )
2 LOAD_CONST 1 ( 1 )
4 BINARY_SUBSCR
6 STORE_FAST 2 ( new_nodes )

27 8 LOAD_FAST 2 ( new_nodes )
10 LOAD_CONST 2 ( 0 )
12 BINARY_SUBSCR
14 STORE_FAST 3 ( new_nodes )

28 16 LOAD_FAST 3 ( new_nodes )
18 LOAD_CONST 3 ( 2 )
20 BINARY_SUBSCR
22 STORE_FAST 4 ( new_nodes )

29 24 LOAD_FAST 0 ( tree )
26 LOAD_CONST 4 ( '' )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 44

30 32 LOAD_FAST 0 ( tree )
34 LOAD_CONST 5 ( '' )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 44

31 40 LOAD_FAST 0 ( tree )
42 LOAD_CONST 6 ( '' )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 44

32 48 LOAD_FAST 0 ( tree )
50 LOAD_CONST 7 ( '' )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 44

33 56 LOAD_FAST 0 ( tree )
58 LOAD_CONST 8 ( '' )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 44

34 64 LOAD_FAST 0 ( tree )
66 LOAD_CONST 9 ( '' )
68 COMPARE_OP 2 ( == )
70 POP_JUMP_IF_FALSE 44

35 72 LOAD_FAST 0 ( tree )
74 LOAD_METHOD 10 ( append )
76 LOAD_FAST 3 ( new_nodes )
78 CALL_METHOD 1
80 POP_TOP

36 >> 82 LOAD_FAST 0 ( tree )
84 LOAD_METHOD 11 ( append )
86 LOAD_FAST 3 ( new_nodes )
88 CALL_METHOD 1
90 POP_TOP

37 >> 92 LOAD_FAST 0 ( tree )
94 RETURN_VALUE

