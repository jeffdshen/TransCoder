{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , n ) :\n    zero = 0\n    two = 0\n    for i in range ( n ) :\n        if a [ i ] == 0 :\n            zero += 1\n        if a [ i ] == 2 :\n            two += 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([9, 10, 20, 26, 26, 28, 31, 34, 35, 36, 36, 37, 39, 43, 44, 44, 46, 49, 54, 57, 58, 63, 64, 64, 65, 67, 70, 70, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 95],31,),\n    ([0, -10, 10, 0, 68, 4, -6, -14, 74, -80, 56, -4, 36, 56, 10, -16, 90, 84, -38, -40, 40, -86, -36, -16, -48, -76, -72, -18, -14, -40, -82, 56, -60],19,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,),\n    ([88, 20, 53, 21, 29, 73, 62, 91, 72, 34, 47, 42, 98, 9, 79, 80, 94, 36, 7, 67, 96, 34, 99, 56, 37, 70, 55, 36, 10, 77, 41, 51, 5, 37, 57, 29, 56, 74, 97, 31, 96, 52, 13, 29, 87, 58, 28, 31],38,),\n    ([20],0,),\n    ([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1],21,),\n    ([2, 4, 9, 16, 22, 23, 25, 33, 33, 36, 39, 48, 49, 52, 53, 60, 67, 68, 76, 77, 79, 84, 84, 86, 89],24,),\n    ([-62, 42, -88, -44, 90, 30, 52, 54, 56, -72, -76, 90, 18, 42, 62, -84, 56, -80, 72],13,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],15,),\n    ([22, 15, 28, 29, 32, 16, 33, 83],7,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    for i in range ( n ) :\n        if a [ i ] == 0 :\n            zero += 1\n        if a [ i ] == 2 :\n            two += 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt\n"}
Disassembly of <code object sumEqualProduct at 0x7f816a673a50, file "<dis>", line 64>:
65 0 LOAD_CONST 1 ( 0 )
2 LOAD_CONST 2 ( ( 'n' , ) )
4 IMPORT_NAME 0 ( tf )
6 IMPORT_FROM 1 ( n )
8 STORE_FAST 1 ( n )
10 POP_TOP

66 12 LOAD_FAST 1 ( n )
14 LOAD_CONST 3 ( 1 )
16 LOAD_CONST 2 ( ( 'n' , ) )
18 IMPORT_NAME 2 ( tf )
20 IMPORT_FROM 3 ( tf )
22 STORE_FAST 2 ( tf )
24 POP_TOP

67 26 LOAD_FAST 1 ( n )
28 LOAD_FAST 2 ( tf )
30 LOAD_ATTR 4 ( shape )
32 LOAD_CONST 4 ( ( 'n' , ) )
34 CALL_FUNCTION_KW 1
36 STORE_FAST 3 ( tf )

68 38 LOAD_FAST 3 ( tf )
40 LOAD_METHOD 5 ( reshape )
42 LOAD_FAST 1 ( n )
44 LOAD_FAST 2 ( tf )
46 LOAD_ATTR 6 ( shape )
48 LOAD_CONST 5 ( ( 'n' , ) )
50 CALL_FUNCTION_KW 1
52 CALL_METHOD 1
54 STORE_FAST 4 ( shape )

69 56 LOAD_FAST 4 ( shape )
58 LOAD_FAST 3 ( tf )
60 LOAD_ATTR 7 ( shape )
62 LOAD_CONST 6 ( ( 'n' , ) )
64 CALL_FUNCTION_KW 1
66 STORE_FAST 5 ( shape )

70 68 LOAD_FAST 5 ( shape )
70 LOAD_FAST 4 ( shape )
72 LOAD_CONST 7 ( 1 )
74 BINARY_SUBSCR
76 LOAD_FAST 5 ( shape )
78 LOAD_CONST 8 ( ( 'n' , ) )
80 CALL_FUNCTION_KW 1
82 STORE_FAST 6 ( shape )

71 84 LOAD_FAST 6 ( shape )
86 LOAD_FAST 5 ( shape )
88 LOAD_CONST 9 ( ( 'shape' , ) )
90 CALL_FUNCTION_KW 1
92 STORE_FAST 7 ( shape )

72 94 LOAD_FAST 7 ( shape )
96 LOAD_FAST 6 ( shape )
98 LOAD_CONST 10 ( ( 'n' , ) )
100 CALL_FUNCTION_KW 1
102 STORE_FAST 8 ( shape )

73 104 LOAD_FAST 7 ( shape )
106 LOAD_FAST 8 ( shape )
108 LOAD_CONST 11 ( ( 'n' , ) )
110 CALL_FUNCTION_KW 1
112 STORE_FAST 9 ( shape )

74 114 LOAD_FAST 8 ( shape )
116 RETURN_VALUE

