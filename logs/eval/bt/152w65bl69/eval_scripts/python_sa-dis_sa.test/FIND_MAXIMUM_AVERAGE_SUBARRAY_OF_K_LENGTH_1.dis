{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , k ) :\n    if ( k > n ) :\n        return - 1\n    sum = arr [ 0 ]\n    for i in range ( 1 , k ) :\n        sum += arr [ i ]\n    max_sum = sum\n    max_end = k - 1\n    for i in range ( k , n ) :\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n    return max_end - k + 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 5, 11, 37, 41, 49, 49, 63, 98],8,7,),\n    ([84, -72, 12, 0, 86, -32, -18, 48, 60, 42, 8, -6, -10, -6, -52, -84, -98, 76, -10, -14, -94, -48, 94, -10, -20, 40, -52, 0, 94, -68, 44, -34, -26, -6, -94, 34, -80, -62, -40, 56, 52, -20, 74, -46, -88, -26, 22],34,43,),\n    ([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],11,18,),\n    ([94, 97, 74, 88, 14, 66, 65, 50, 76, 55, 70, 93, 53, 30, 2, 60, 65, 24, 80, 73, 84, 95, 49, 32, 55, 70, 17, 26, 96, 20, 36, 2, 89, 49, 83, 67, 42, 51, 71, 11, 61, 78, 17, 78, 94, 68],35,33,),\n    ([-98, -90, -60, -38, 38, 42],3,5,),\n    ([1, 0, 0, 1, 1, 1, 1],3,4,),\n    ([4, 9, 17, 17, 19, 32, 35, 36, 37, 40, 44, 45, 47, 48, 48, 56, 56, 60, 61, 65, 66, 79, 83, 91, 93, 99],22,24,),\n    ([78, 82, -92, -46, -16, -64, 28, 60, 64, 52, 54, -84, 70, 22, 24, 0, -14, 20, -90, 30, 0, 86, 12, 72, -64, -52, 86, 16, -42],25,27,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],25,20,),\n    ([81, 77, 6, 3, 72, 24, 75, 47, 17, 29, 69, 15, 15, 50, 30, 83, 11, 7, 59, 7, 12, 82, 45, 76, 9, 48, 98, 49, 29, 66, 3, 53, 37, 13, 72, 58, 37, 87, 55],34,23,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - 1\n    sum = arr [ 0 ]\n    for i in range ( 1 , k ) :\n        sum += arr [ i ]\n    max_sum = sum\n    max_end = k - 1\n    for i in range ( k , n ) :\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n    return max_end - k + 1\n"}
Disassembly of <code object findMaxAverage at 0x7f816a6e4b70, file "<dis>", line 25>:
26 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

27 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 2 ( 2 )
12 COMPARE_OP 2 ( == )
14 POP_JUMP_IF_FALSE 28

28 >> 16 LOAD_FAST 1 ( n )
18 LOAD_CONST 3 ( 1 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

29 24 LOAD_FAST 1 ( n )
26 LOAD_CONST 4 ( 2 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 28

30 32 LOAD_FAST 1 ( n )
34 LOAD_CONST 5 ( 1 )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 44

31 40 LOAD_FAST 1 ( n )
42 LOAD_CONST 6 ( 2 )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 44

32 48 LOAD_FAST 1 ( n )
50 LOAD_CONST 7 ( 2 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 44

33 56 LOAD_FAST 1 ( n )
58 LOAD_CONST 8 ( 2 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 44

34 64 LOAD_FAST 1 ( n )
66 LOAD_CONST 9 ( 2 )
68 COMPARE_OP 2 ( == )
70 POP_JUMP_IF_FALSE 80

35 72 LOAD_FAST 1 ( n )
74 LOAD_CONST 10 ( 2 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 80

36 80 LOAD_FAST 1 ( n )
82 LOAD_CONST 11 ( 2 )
84 COMPARE_OP 2 ( == )
86 POP_JUMP_IF_FALSE 80

37 88 LOAD_FAST 1 ( n )
90 LOAD_CONST 12 ( 2 )
92 COMPARE_OP 2 ( == )
94 POP_JUMP_IF_FALSE 80

38 >> 96 LOAD_FAST 1 ( n )
98 LOAD_CONST 12 ( 2 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 80

39 104 LOAD_FAST 1 ( n )
106 LOAD_CONST 13 ( 1 )
108 COMPARE_OP 2 ( == )
110 POP_JUMP_IF_FALSE 80

40 112 LOAD_FAST 1 ( n )
114 LOAD_CONST 6 ( 2 )
116 COMPARE_OP 2 ( == )
118 POP_JUMP_IF_FALSE 80

41 120 LOAD_FAST 1 ( n )
122 LOAD_CONST 6 ( 2 )
124 COMPARE_OP 2 ( == )
126 POP_JUMP_IF_FALSE 128

42 128 LOAD_FAST 1 ( n )
130 LOAD_CONST 6 ( 2 )
132 COMPARE_OP 2 ( == )
134 POP_JUMP_IF_FALSE 130

43 136 LOAD_FAST 1 ( n )
138 LOAD_CONST 6 ( 2 )
140 COMPARE_OP 2 ( == )
142 POP_JUMP_IF_FALSE 146

44 144 LOAD_FAST 1 ( n )
146 RETURN_VALUE