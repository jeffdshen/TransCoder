{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport itertools\n\ndef f_gold ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (37,),\n    (13,),\n    (51,),\n    (69,),\n    (76,),\n    (10,),\n    (97,),\n    (40,),\n    (69,),\n    (4,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findNth ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1\n"}
Disassembly of <code object findNth at 0x7f816a673a50, file "<dis>", line 55>:
56 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 0 )
4 BINARY_SUBSCR
6 STORE_FAST 1 ( count )

57 8 SETUP_LOOP 22 ( to 28 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_CONST 2 ( 10 )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 16 ( to 26 )
20 STORE_FAST 2 ( i )

58 22 LOAD_FAST 1 ( count )
24 LOAD_CONST 3 ( 1 )
26 COMPARE_OP 2 ( == )
28 POP_JUMP_IF_FALSE 18

59 30 LOAD_FAST 1 ( count )
32 LOAD_CONST 4 ( 1 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 18

60 38 LOAD_FAST 1 ( count )
40 LOAD_CONST 5 ( 1 )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 18

61 46 LOAD_FAST 1 ( count )
48 LOAD_CONST 6 ( 2 )
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 18

62 54 LOAD_FAST 1 ( count )
56 LOAD_CONST 7 ( 1 )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 18

63 62 LOAD_FAST 1 ( count )
64 LOAD_CONST 8 ( 2 )
66 COMPARE_OP 2 ( == )
68 POP_JUMP_IF_FALSE 18

64 70 LOAD_FAST 1 ( count )
72 LOAD_CONST 9 ( 1 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 18

65 78 LOAD_FAST 1 ( count )
80 LOAD_CONST 10 ( 2 )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 18

66 86 LOAD_FAST 1 ( count )
88 LOAD_CONST 11 ( 1 )
90 INPLACE_ADD
92 STORE_FAST 1 ( count )

67 >> 94 LOAD_FAST 1 ( count )
96 LOAD_CONST 12 ( 2 )
98 COMPARE_OP 2 ( == )
100 POP_JUMP_IF_FALSE 18

68 102 LOAD_FAST 1 ( count )
104 LOAD_CONST 13 ( 1 )
106 INPLACE_ADD
108 STORE_FAST 1 ( count )
110 JUMP_ABSOLUTE 18
>> 112 POP_BLOCK

69 >> 114 LOAD_FAST 1 ( count )
116 LOAD_CONST 12 ( 2 )
118 COMPARE_OP 2 ( == )
120 POP_JUMP_IF_FALSE 18

70 122 LOAD_FAST 1 ( count )
124 LOAD_CONST 12 ( 2 )
126 COMPARE_OP 2 ( == )
128 POP_JUMP_IF_FALSE 18

71 130 LOAD_FAST 1 ( count )
132 LOAD_CONST 13 ( 1 )
134 INPLACE_ADD
136 STORE_FAST 1 ( count )

72 >> 138 LOAD_FAST 1 ( count )
140 LOAD_CONST 14 ( 2 )
142 COMPARE_OP 2 ( == )
144 POP_JUMP_IF_FALSE 18

73 146 LOAD_FAST 1 ( count )
148 RETURN_VALUE
