{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    odd_count = 0\n    even_count = 0\n    if ( n < 0 ) :\n        n = - n\n    if ( n == 0 ) :\n        return 1\n    if ( n == 1 ) :\n        return 0\n    while ( n ) :\n        if ( n & 1 ) :\n            odd_count += 1\n        if ( n & 2 ) :\n            even_count += 1\n        n = n >> 2\n    return f_gold ( abs ( odd_count - even_count ) )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (94,),\n    (94,),\n    (79,),\n    (39,),\n    (16,),\n    (90,),\n    (64,),\n    (76,),\n    (83,),\n    (47,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isMultipleOf3 ( n ) :\n    odd_count = 0\n    even_count = 0\n    if ( n < 0 ) :\n        n = - n\n    if ( n == 0 ) :\n        return 1\n    if ( n == 1 ) :\n        return 0\n    while ( n ) :\n        if ( n & 1 ) :\n            odd_count += 1\n        if ( n & 2 ) :\n            even_count += 1\n        n = n >> 2\n    return isMultipleOf3 ( abs ( odd_count - even_count ) )\n"}
Disassembly of <code object isMultipleOf3 at 0x7f816a6e4b70, file "<dis>", line 25>:
26 0 LOAD_FAST 1 ( odd_count )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 4 ( > )
6 POP_JUMP_IF_FALSE 12

27 8 LOAD_FAST 1 ( odd_count )
10 LOAD_CONST 1 ( 0 )
12 BINARY_SUBSCR
14 STORE_FAST 1 ( odd_count )

28 >> 16 LOAD_FAST 1 ( odd_count )
18 LOAD_CONST 2 ( 1 )
20 COMPARE_OP 4 ( > )
22 POP_JUMP_IF_FALSE 28

29 24 LOAD_FAST 1 ( odd_count )
26 LOAD_CONST 3 ( 1 )
28 INPLACE_ADD
30 STORE_FAST 1 ( odd_count )

30 >> 32 LOAD_FAST 1 ( odd_count )
34 LOAD_CONST 4 ( 1 )
36 INPLACE_ADD
38 STORE_FAST 1 ( odd_count )

31 40 LOAD_FAST 1 ( odd_count )
42 LOAD_CONST 5 ( 1 )
44 INPLACE_ADD
46 STORE_FAST 1 ( odd_count )

32 48 LOAD_FAST 1 ( odd_count )
50 LOAD_CONST 6 ( 2 )
52 INPLACE_ADD
54 STORE_FAST 1 ( odd_count )

33 56 LOAD_FAST 1 ( odd_count )
58 LOAD_CONST 7 ( 1 )
60 INPLACE_ADD
62 STORE_FAST 1 ( odd_count )

34 64 LOAD_FAST 1 ( odd_count )
66 LOAD_CONST 8 ( 2 )
68 INPLACE_ADD
70 STORE_FAST 1 ( odd_count )

35 72 LOAD_FAST 1 ( odd_count )
74 LOAD_CONST 9 ( 2 )
76 INPLACE_ADD
78 STORE_FAST 1 ( odd_count )
80 JUMP_FORWARD 4 ( to 80 )

36 >> 82 LOAD_FAST 1 ( odd_count )
84 LOAD_CONST 10 ( 2 )
86 INPLACE_ADD
88 STORE_FAST 1 ( odd_count )

37 >> 90 LOAD_FAST 1 ( odd_count )
92 LOAD_CONST 11 ( 2 )
94 INPLACE_ADD
96 STORE_FAST 1 ( odd_count )

38 98 LOAD_FAST 1 ( odd_count )
100 LOAD_CONST 12 ( 2 )
102 INPLACE_ADD
104 STORE_FAST 1 ( odd_count )

39 106 LOAD_FAST 1 ( odd_count )
108 LOAD_CONST 13 ( 2 )
110 INPLACE_ADD
112 STORE_FAST 1 ( odd_count )

40 114 LOAD_FAST 1 ( odd_count )
116 LOAD_CONST 14 ( 2 )
118 INPLACE_ADD
120 STORE_FAST 1 ( odd_count )

41 122 LOAD_FAST 1 ( odd_count )
124 LOAD_FAST 1 ( odd_count )
126 LOAD_FAST 1 ( odd_count )
128 LOAD_FAST 1 ( odd_count )
130 LOAD_FAST 1 ( odd_count )
132 LOAD_CONST 15 ( 2 )
134 STORE_SUBSCR
136 LOAD_CONST 0 ( None )
138 RETURN_VALUE

