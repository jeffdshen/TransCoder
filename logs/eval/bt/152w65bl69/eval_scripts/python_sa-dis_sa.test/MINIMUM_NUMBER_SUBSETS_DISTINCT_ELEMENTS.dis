{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 2, 5, 8, 16, 21, 21, 22, 23, 26, 26, 27, 27, 29, 31, 33, 36, 37, 37, 38, 42, 45, 47, 50, 57, 58, 60, 60, 62, 63, 66, 66, 76, 84, 84, 88, 96, 99],25,),\n    ([-30, -60, 34, 4, 86, 80, -96, -94, 52, 46, 8, 82, -94, -96, 78, 82, -22, -36, 78, 50, -46, -36, 80, 24, -14, 94, -46, -38, 82, 4, -24, 2, 4, -82, -82, -18, -62, 12, 8, 92, 70, -10],35,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],34,),\n    ([38, 47, 84, 49, 48, 62, 48, 41, 38, 48, 92, 16, 99],6,),\n    ([-88, -64, -40, -38, -38, -16, 16, 20, 28, 40, 56, 58, 60, 68, 74, 92],12,),\n    ([1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],29,),\n    ([14, 24, 82, 87, 95],3,),\n    ([-34, 62, 40, -84, 52, -76, 2, -58, 94, 22, 2, -18, -88, 62, -14, 46, 50, -58, -80, 68, -64, 90, -58, 12, 76, -40, 40, -46, 8, -80, 4, -90, 14, -10, 64, -68],34,),\n    ([0, 1, 1, 1],3,),\n    ([43, 41, 90, 5, 6, 17, 68, 68, 86, 89],7,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def subset ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res\n"}
Disassembly of <code object subset at 0x7f816a673a50, file "<dis>", line 100>:
101 0 LOAD_FAST 0 ( ar )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 STORE_FAST 1 ( n )

102 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 1 ( 0 )
12 BINARY_SUBSCR
14 STORE_FAST 2 ( a )

103 16 LOAD_FAST 2 ( a )
18 LOAD_FAST 1 ( n )
20 LOAD_CONST 2 ( 1 )
22 BINARY_SUBSCR
24 LOAD_FAST 1 ( n )
26 LOAD_CONST 3 ( 2 )
28 BINARY_SUBSCR
30 LOAD_CONST 4 ( 3 )
32 BINARY_SUBSCR
34 LOAD_FAST 1 ( n )
36 LOAD_CONST 5 ( 1 )
38 BINARY_SUBSCR
40 BINARY_SUBTRACT
42 LOAD_FAST 1 ( n )
44 LOAD_CONST 6 ( 2 )
46 BINARY_SUBSCR
48 BINARY_ADD
50 LOAD_FAST 1 ( n )
52 LOAD_CONST 7 ( 3 )
54 BINARY_SUBSCR
56 LOAD_FAST 1 ( n )
58 LOAD_CONST 8 ( 2 )
60 BINARY_SUBSCR
62 BINARY_ADD
64 LOAD_FAST 1 ( n )
66 LOAD_CONST 9 ( 2 )
68 BINARY_SUBSCR
70 BINARY_ADD
72 LOAD_FAST 1 ( n )
74 LOAD_CONST 10 ( 3 )
76 BINARY_SUBSCR
78 BINARY_ADD
80 LOAD_FAST 1 ( n )
82 LOAD_CONST 11 ( 2 )
84 BINARY_SUBSCR
86 BINARY_ADD
88 LOAD_FAST 1 ( n )
90 LOAD_CONST 12 ( 3 )
92 STORE_SUBSCR
94 LOAD_CONST 0 ( None )
96 RETURN_VALUE

