{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( boxes , n ) :\n    boxes.sort ( )\n    ans = 1\n    prev_width = boxes [ 0 ]\n    prev_count = 1\n    curr_count = 0\n    curr_width = 0\n    for i in range ( 1 , n ) :\n        curr_width += boxes [ i ]\n        curr_count += 1\n        if ( curr_width > prev_width and curr_count > prev_count ) :\n            prev_width = curr_width\n            prev_count = curr_count\n            curr_count = 0\n            curr_width = 0\n            ans += 1\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([7, 8, 11, 11, 14, 19, 25, 27, 41, 42, 46, 52, 53, 54, 55, 58, 59, 62, 63, 66, 67, 69, 74, 75, 77, 81, 83, 84, 88, 88, 93, 93, 94],22,),\n    ([80, 72, 40, -78, -72, 20, -28, -18, -96, 14, 20, -60, -56, -92, 12, 86, 16, 76, 30, 76, 16],12,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],35,),\n    ([12, 85, 16, 78, 85, 48, 91, 1, 65, 22, 15, 84, 67, 14, 73, 19, 40, 98, 4, 33, 43, 37, 66, 27, 45, 81, 50, 95, 63, 6, 95, 67, 67, 97, 59, 13, 21, 64, 37, 80],35,),\n    ([-98, -92, -90, -88, -88, -74, -64, -64, -64, -62, -60, -52, -48, -46, -42, -42, -38, -34, -28, -26, -20, -20, -18, -4, 0, 2, 2, 6, 18, 18, 18, 20, 24, 24, 26, 32, 40, 46, 58, 66, 74, 78, 90, 96],30,),\n    ([1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0],21,),\n    ([8, 12, 13, 13, 13, 16, 16, 17, 19, 20, 22, 23, 26, 29, 29, 30, 31, 37, 38, 39, 39, 41, 45, 45, 46, 49, 49, 53, 56, 62, 62, 66, 67, 68, 68, 69, 69, 73, 77, 78, 82, 85, 85, 88, 88, 97],26,),\n    ([36, -30, -84, 4, -20, -28, -88, 72, 40, 46, -68, -8, 18, -24, 94, -64, -76, 8, 82, -6, -98, -70, 82, 60, -58, -98, 86, 34, -76, -44, -22, -26, 90, 20, -38, 16, 94, 94, -78, -42, 78, -74, 2, 8, -62],25,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],26,),\n    ([70, 54, 71, 85, 51, 28, 64, 85, 21, 88, 27, 27, 77, 50, 29, 39, 57, 92, 37, 93, 64, 48, 22, 30, 28, 23, 97, 4, 3, 61, 96],18,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxLevel ( boxes , n ) :\n    boxes.sort ( )\n    ans = 1\n    prev_width = boxes [ 0 ]\n    prev_count = 1\n    curr_count = 0\n    curr_width = 0\n    for i in range ( 1 , n ) :\n        curr_width += boxes [ i ]\n        curr_count += 1\n        if ( curr_width > prev_width and curr_count > prev_count ) :\n            prev_width = curr_width\n            prev_count = curr_count\n            curr_count = 0\n            curr_width = 0\n            ans += 1\n    return ans\n"}
Disassembly of <code object maxLevel at 0x7f816a673a50, file "<dis>", line 100>:
101 0 LOAD_FAST 0 ( boxes )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 STORE_FAST 1 ( n )

102 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 1 ( 1 )
12 INPLACE_ADD
14 STORE_FAST 1 ( n )

103 16 LOAD_FAST 1 ( n )
18 LOAD_CONST 2 ( 0 )
20 COMPARE_OP 4 ( > )
22 POP_JUMP_IF_FALSE 28

104 24 LOAD_FAST 1 ( n )
26 LOAD_CONST 3 ( 0 )
28 BINARY_SUBSCR
30 STORE_FAST 1 ( n )

105 32 LOAD_FAST 1 ( n )
34 LOAD_CONST 4 ( 0 )
36 COMPARE_OP 4 ( > )
38 POP_JUMP_IF_FALSE 44
40 LOAD_FAST 1 ( n )
42 LOAD_CONST 5 ( 1 )
44 INPLACE_ADD
46 STORE_FAST 1 ( n )
48 JUMP_FORWARD 4 ( to 44 )

106 >> 50 LOAD_FAST 1 ( n )
52 LOAD_CONST 6 ( 2 )
54 INPLACE_ADD
56 STORE_FAST 1 ( n )

107 58 LOAD_FAST 1 ( n )
60 LOAD_CONST 7 ( 2 )
62 INPLACE_ADD
64 STORE_FAST 1 ( n )

108 >> 66 LOAD_FAST 1 ( n )
68 LOAD_CONST 8 ( 2 )
70 INPLACE_ADD
72 STORE_FAST 1 ( n )
74 JUMP_FORWARD 4 ( to 44 )

109 >> 76 LOAD_FAST 1 ( n )
78 LOAD_CONST 9 ( 2 )
80 INPLACE_ADD
82 STORE_FAST 1 ( n )

110 >> 84 LOAD_FAST 1 ( n )
86 LOAD_CONST 10 ( 2 )
88 INPLACE_ADD
90 STORE_FAST 1 ( n )

111 92 LOAD_FAST 1 ( n )
94 LOAD_CONST 11 ( 2 )
96 INPLACE_ADD
98 STORE_FAST 1 ( n )

112 100 LOAD_FAST 1 ( n )
102 LOAD_CONST 12 ( 0 )
104 INPLACE_ADD
106 STORE_FAST 1 ( n )
108 JUMP_FORWARD 4 ( to 44 )

113 >> 110 LOAD_FAST 1 ( n )
112 LOAD_FAST 0 ( boxes )
114 LOAD_CONST 12 ( 0 )
116 BINARY_SUBSCR
118 LOAD_FAST 1 ( n )
120 LOAD_CONST 13 ( 1 )
122 INPLACE_ADD
124 STORE_FAST 1 ( n )

114 126 LOAD_FAST 1 ( n )
128 LOAD_CONST 14 ( 2 )
130 INPLACE_ADD
132 STORE_FAST 1 ( n )

115 134 LOAD_FAST 1 ( n )
136 LOAD_FAST 1 ( n )
138 LOAD_CONST 15 ( 2 )
140 STORE_SUBSCR
142 LOAD_CONST 16 ( None )
144 RETURN_VALUE

