{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    arr.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ] * i\n    return sum\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 3, 4, 6, 7, 8, 9, 11, 19, 23, 24, 30, 31, 31, 32, 41, 43, 43, 46, 47, 50, 50, 51, 53, 57, 63, 63, 69, 73, 74, 79, 80, 81, 81, 85, 86, 88, 92, 93, 95, 98, 99],22,),\n    ([90, 66, -98, -42, -10, 90, -6, 76, -80, -62, -40, 90, -34, -76, 90, -42, 80, -74, 10, -78, -16, 32, 52, -82, -98, -68, 12, 92, 72, -10, 98, 76, -52, -58, 62, 68, 20, -58],24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],13,),\n    ([79, 52, 45, 58, 44, 13, 14, 99, 8, 44, 42, 98, 47, 44],11,),\n    ([-90, -88, -68, -66, -46, -42, -40, -20, -16, 4, 8, 8, 8, 20, 28, 52, 84, 98],14,),\n    ([1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1],13,),\n    ([5, 6, 7, 9, 11, 13, 16, 19, 22, 25, 26, 27, 28, 29, 32, 32, 32, 33, 36, 40, 43, 43, 47, 49, 51, 51, 52, 53, 59, 61, 63, 65, 66, 66, 67, 72, 73, 73, 75, 76, 80, 86, 87, 89, 89, 91, 96, 98, 99],42,),\n    ([26, 34, -26, -14, 40, -20, 54, 48, -20, 28, 68, -78, -32, -96, -12, 70, -24, 92, -14, 64, 64, 40, -8, 88, -98, -4, -22, 52, 32, -52, 2, 6, -66, -38, -90, -48, -6, -30, 76, 32, 96, -34, -12],39,),\n    ([0, 0, 1, 1],3,),\n    ([84, 32, 75, 21, 62, 49, 88, 49, 47, 20, 49, 18, 71, 34, 88, 44, 84],8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxSum ( arr , n ) :\n    arr.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ] * i\n    return sum\n"}
Disassembly of <code object maxSum at 0x7f816a673a50, file "<dis>", line 16>:
17 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 STORE_FAST 1 ( n )

18 8 LOAD_FAST 1 ( n )
10 LOAD_CONST 1 ( 0 )
12 BINARY_SUBSCR
14 STORE_FAST 2 ( maxSum )

19 16 LOAD_FAST 2 ( maxSum )
18 LOAD_FAST 1 ( n )
20 LOAD_CONST 2 ( 1 )
22 BINARY_SUBSCR
24 LOAD_FAST 1 ( n )
26 LOAD_CONST 3 ( 1 )
28 BINARY_SUBSCR
30 LOAD_FAST 1 ( n )
32 LOAD_CONST 4 ( - 1 )
34 BINARY_SUBSCR
36 LOAD_FAST 1 ( n )
38 LOAD_CONST 5 ( - 1 )
40 BINARY_SUBSCR
42 LOAD_FAST 1 ( n )
44 LOAD_CONST 6 ( - 1 )
46 BINARY_SUBSCR
48 LOAD_FAST 1 ( n )
50 LOAD_CONST 7 ( - 1 )
52 BINARY_SUBSCR
54 LOAD_FAST 1 ( n )
56 LOAD_CONST 8 ( - 1 )
58 BINARY_SUBSCR
60 LOAD_FAST 1 ( n )
62 LOAD_CONST 9 ( - 1 )
64 BINARY_SUBSCR
66 LOAD_FAST 1 ( n )
68 LOAD_CONST 10 ( - 1 )
70 BINARY_SUBSCR
72 LOAD_FAST 1 ( n )
74 LOAD_CONST 11 ( - 1 )
76 BINARY_SUBSCR
78 LOAD_FAST 1 ( n )
80 LOAD_CONST 12 ( - 1 )
82 BINARY_SUBSCR
84 LOAD_FAST 1 ( n )
86 LOAD_CONST 13 ( - 1 )
88 BINARY_SUBSCR
90 LOAD_FAST 1 ( n )
92 LOAD_CONST 6 ( - 1 )
94 BINARY_SUBSCR
96 LOAD_FAST 1 ( n )
98 LOAD_CONST 6 ( - 1 )
100 BINARY_SUBSCR
102 LOAD_FAST 1 ( n )
104 LOAD_CONST 7 ( - 1 )
106 BINARY_SUBSCR
108 LOAD_FAST 1 ( n )
110 LOAD_CONST 6 ( - 1 )
112 BINARY_SUBSCR
114 LOAD_FAST 1 ( n )
116 LOAD_CONST 6 ( - 1 )
118 BINARY_SUBSCR
120 LOAD_FAST 1 ( n )
122 LOAD_CONST 6 ( - 1 )
124 BINARY_SUBSCR
126 LOAD_FAST 1 ( n )
128 LOAD_CONST 6 ( - 1 )
130 BINARY_SUBSCR
132 LOAD_FAST 1 ( n )
134 LOAD_CONST 6 ( - 1 )
136 BINARY_SUBSCR
138 LOAD_FAST 1 ( n )
140 LOAD_CONST 7 ( - 1 )
142 BINARY_SUBSCR
144 LOAD_FAST 1 ( n )
146 LOAD_CONST 6 ( - 1 )
148 BINARY_SUBSCR
150 BINARY_ADD
152 RETURN_VALUE

