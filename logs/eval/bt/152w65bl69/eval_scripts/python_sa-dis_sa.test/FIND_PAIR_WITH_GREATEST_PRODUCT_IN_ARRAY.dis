{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 78, 84],2,),\n    ([-54, 64, 60, 14, 18, -68, -54, -58, 38, -72, -84, 46, 74, 76, 28, -2, 54, 24, 18, -74, -78, 14, -38, -70, 26, -54, -36, -96, -12, 8, 62, -42, -84, 10, -6, 36, -72, 10, 10, -20, 16, 92, -64, -34, 74, -98, 18],26,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,),\n    ([39, 49, 94, 80, 48, 34, 63, 82, 47, 51, 60, 68, 79, 23, 97, 22, 54, 53, 40, 2, 25],10,),\n    ([-90, -52, -10, 12, 72],3,),\n    ([1, 0, 0],2,),\n    ([2, 9, 11, 14, 16, 17, 17, 18, 19, 21, 24, 25, 28, 29, 30, 33, 33, 39, 41, 41, 43, 46, 50, 51, 60, 62, 67, 80, 84, 86, 91, 92, 97],27,),\n    ([4],0,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],16,),\n    ([52, 8, 31, 92, 20, 18, 34, 5, 15, 8, 73, 20, 40, 61, 80, 51, 95, 73, 38, 30, 21, 69, 52, 38, 68, 77],22,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findGreatest ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result\n"}
Disassembly of <code object findGreatest at 0x7f816a673a50, file "<dis>", line 64>:
65 0 LOAD_CONST 1 ( - 1 )
2 STORE_FAST 1 ( n )

66 4 SETUP_LOOP 28 ( to 34 )
6 LOAD_FAST 0 ( arr )
8 LOAD_METHOD 0 ( append )
10 LOAD_FAST 1 ( n )
12 CALL_METHOD 1
14 GET_ITER
>> 16 FOR_ITER 14 ( to 32 )
18 STORE_FAST 2 ( i )

67 20 LOAD_FAST 0 ( arr )
22 LOAD_METHOD 1 ( append )
24 LOAD_FAST 2 ( i )
26 CALL_METHOD 1
28 POP_TOP
30 JUMP_ABSOLUTE 16
>> 32 POP_BLOCK
>> 34 LOAD_CONST 0 ( None )
36 RETURN_VALUE

