{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return f_gold ( msd ) * f_gold ( po - 1 ) + f_gold ( msd ) + f_gold ( n % po )\n    else :\n        return f_gold ( msd * po - 1 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (85,),\n    (86,),\n    (3,),\n    (35,),\n    (59,),\n    (38,),\n    (33,),\n    (15,),\n    (75,),\n    (74,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def count ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po )\n    else :\n        return count ( msd * po - 1 )\n"}
Disassembly of <code object count at 0x7f816a6e4b70, file "<dis>", line 21>:
22 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 3 )
4 COMPARE_OP 0 ( < )
6 POP_JUMP_IF_FALSE 12

23 8 LOAD_CONST 2 ( 1 )
10 STORE_FAST 1 ( count )

24 >> 12 LOAD_FAST 1 ( count )
14 LOAD_CONST 1 ( 3 )
16 COMPARE_OP 0 ( < )
18 POP_JUMP_IF_FALSE 28

25 20 LOAD_CONST 3 ( 1 )
22 STORE_FAST 1 ( count )
24 JUMP_FORWARD 4 ( to 28 )

26 >> 26 LOAD_FAST 1 ( count )
28 LOAD_CONST 1 ( 3 )
30 COMPARE_OP 0 ( < )
32 POP_JUMP_IF_FALSE 32

27 34 LOAD_CONST 4 ( 1 )
36 STORE_FAST 1 ( count )

28 >> 38 LOAD_FAST 1 ( count )
40 LOAD_CONST 1 ( 3 )
42 COMPARE_OP 0 ( < )
44 POP_JUMP_IF_FALSE 50

29 46 LOAD_CONST 5 ( 1 )
48 STORE_FAST 1 ( count )
50 JUMP_FORWARD 4 ( to 52 )

30 >> 52 LOAD_FAST 1 ( count )
54 LOAD_CONST 1 ( 3 )
56 COMPARE_OP 0 ( < )
58 POP_JUMP_IF_FALSE 60

31 60 LOAD_CONST 6 ( 1 )
62 STORE_FAST 1 ( count )

32 >> 64 LOAD_FAST 1 ( count )
66 LOAD_CONST 1 ( 3 )
68 COMPARE_OP 0 ( < )
70 POP_JUMP_IF_FALSE 60

33 72 LOAD_CONST 7 ( 1 )
74 STORE_FAST 1 ( count )

34 >> 76 LOAD_FAST 1 ( count )
78 LOAD_CONST 1 ( 3 )
80 COMPARE_OP 0 ( < )
82 POP_JUMP_IF_FALSE 90

35 84 LOAD_CONST 8 ( 1 )
86 STORE_FAST 1 ( count )

36 >> 88 LOAD_FAST 1 ( count )
90 LOAD_CONST 1 ( 3 )
92 COMPARE_OP 0 ( < )
94 POP_JUMP_IF_FALSE 106

37 96 LOAD_FAST 1 ( count )
98 LOAD_CONST 9 ( 1 )
100 INPLACE_ADD
102 STORE_FAST 1 ( count )

38 >> 104 LOAD_FAST 1 ( count )
106 LOAD_CONST 10 ( 1 )
108 INPLACE_ADD
110 STORE_FAST 1 ( count )
112 JUMP_FORWARD 4 ( to 108 )

39 >> 114 LOAD_FAST 1 ( count )
116 LOAD_CONST 10 ( 1 )
118 INPLACE_ADD
120 STORE_FAST 1 ( count )

40 >> 122 LOAD_FAST 1 ( count )
124 LOAD_CONST 11 ( 1 )
126 INPLACE_ADD
128 STORE_FAST 1 ( count )

42 >> 130 LOAD_FAST 1 ( count )
132 LOAD_FAST 1 ( count )
134 LOAD_CONST 1 ( 3 )
136 INPLACE_ADD
138 STORE_FAST 1 ( count )

