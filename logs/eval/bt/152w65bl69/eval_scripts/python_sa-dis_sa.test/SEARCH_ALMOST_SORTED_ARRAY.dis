{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , l , r , x ) :\n    if ( r >= l ) :\n        mid = int ( l + ( r - l ) / 2 )\n        if ( arr [ mid ] == x ) : return mid\n        if ( mid > l and arr [ mid - 1 ] == x ) :\n            return ( mid - 1 )\n        if ( mid < r and arr [ mid + 1 ] == x ) :\n            return ( mid + 1 )\n        if ( arr [ mid ] > x ) :\n            return f_gold ( arr , l , mid - 2 , x )\n        return f_gold ( arr , mid + 2 , r , x )\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([6,7,15,42,47,54,56,59,59,64,68,70,71,75,91,93], 0, 15, 71),\n([6,7,15,42,47,56,54,59,59,64,68,71,70, 75,91,93], 0, 15,    71),\n([-92,-96,-68,-40,70], 0, 4, ,    -96),\n([-92,-86,-68,-40,70], 0, 4,    20),\n([-3,-1,0,30,10,45,70,60], 0, 7,    0),\n([-3,-1,0,10,5,45,60,50], 0, 7,    12),\n([-3,-1,0,10,30,45,60,70], 0, 7,    18),\n([0,0,1], 0, 2,    20),\n([1,1,1], 0, 2,    17),\n([30,2,30,45], 0, 3,    28)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def binarySearch ( arr , l , r , x ) :\n    if ( r >= l ) :\n        mid = int ( l + ( r - l ) / 2 )\n        if ( arr [ mid ] == x ) : return mid\n        if ( mid > l and arr [ mid - 1 ] == x ) :\n            return ( mid - 1 )\n        if ( mid < r and arr [ mid + 1 ] == x ) :\n            return ( mid + 1 )\n        if ( arr [ mid ] > x ) :\n            return binarySearch ( arr , l , mid - 2 , x )\n        return binarySearch ( arr , mid + 2 , r , x )\n    return - 1\n"}
Disassembly of <code object binarySearch at 0x7f816a673a50, file "<dis>", line 68>:
69 0 LOAD_FAST 1 ( l )
2 LOAD_CONST 1 ( 0 )
4 BINARY_SUBSCR
6 LOAD_CONST 2 ( 1 )
8 COMPARE_OP 2 ( == )
10 POP_JUMP_IF_FALSE 20

70 12 LOAD_FAST 1 ( l )
14 LOAD_CONST 1 ( 0 )
16 BINARY_SUBSCR
18 LOAD_CONST 3 ( 1 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

71 24 LOAD_FAST 1 ( l )
26 LOAD_CONST 1 ( 0 )
28 BINARY_SUBSCR
30 LOAD_CONST 4 ( 1 )
32 COMPARE_OP 2 ( == )
34 POP_JUMP_IF_FALSE 44

72 36 LOAD_FAST 1 ( l )
38 LOAD_CONST 1 ( 0 )
40 BINARY_SUBSCR
42 LOAD_CONST 5 ( 1 )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 52

73 48 LOAD_FAST 1 ( l )
50 LOAD_CONST 1 ( 0 )
52 BINARY_SUBSCR
54 LOAD_CONST 6 ( 1 )
56 BINARY_SUBSCR
58 LOAD_CONST 7 ( 1 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 52

74 64 LOAD_FAST 1 ( l )
66 LOAD_CONST 1 ( 0 )
68 BINARY_SUBSCR
70 LOAD_CONST 8 ( 1 )
72 COMPARE_OP 2 ( == )
74 POP_JUMP_IF_FALSE 80

75 76 LOAD_FAST 1 ( l )
78 LOAD_CONST 1 ( 0 )
80 BINARY_SUBSCR
82 LOAD_CONST 9 ( 1 )
84 BINARY_SUBSCR
86 LOAD_CONST 10 ( 1 )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_FALSE 80

76 92 LOAD_FAST 1 ( l )
94 LOAD_CONST 1 ( 0 )
96 BINARY_SUBSCR
98 LOAD_CONST 11 ( 1 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 80

77 104 LOAD_FAST 1 ( l )
106 LOAD_CONST 1 ( 0 )
108 BINARY_SUBSCR
110 LOAD_CONST 12 ( 1 )
112 BINARY_SUBSCR
114 LOAD_CONST 13 ( 1 )
116 BINARY_SUBSCR
118 LOAD_CONST 14 ( 1 )
120 BINARY_SUBSCR
122 LOAD_CONST 15 ( 1 )
124 BINARY_SUBSCR
126 LOAD_CONST 16 ( 1 )
128 BINARY_SUBSCR
130 LOAD_CONST 17 ( 1 )
132 BINARY_SUBSCR
134 LOAD_CONST 18 ( 1 )
136 BINARY_SUBSCR
138 LOAD_CONST 19 ( 1 )
140 COMPARE_OP 2 ( == )
142 POP_JUMP_IF_FALSE 146

78 144 LOAD_FAST 1 ( l )
146 LOAD_CONST 16 ( 1 )
148 BINARY_SUBSCR
150 LOAD_CONST 17 ( 1 )
152 BINARY_SUBSCR
154 LOAD_CONST 18 ( 1 )
156 BINARY_SUBSCR
158 LOAD_CONST 19 ( 1 )
160 BINARY_SUBSCR
162 LOAD_CONST 20 ( 1 )
164 BINARY_SUBSCR
166 LOAD_CONST 21 ( 1 )
168 BINARY_SUBSCR
170 LOAD_CONST 21 ( 1 )
