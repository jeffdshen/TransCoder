{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x ) :\n    i = 1 ;\n    fact = 1 ;\n    for i in range ( 1 , x ) :\n        fact = fact * i\n        if ( fact % x == 0 ) :\n            break\n    return i\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (67,),\n    (47,),\n    (57,),\n    (89,),\n    (67,),\n    (40,),\n    (16,),\n    (83,),\n    (93,),\n    (43,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def firstFactorialDivisibleNumber ( x ) :\n    i = 1 ;\n    fact = 1 ;\n    for i in range ( 1 , x ) :\n        fact = fact * i\n        if ( fact % x == 0 ) :\n            break\n    return i\n"}
Disassembly of <code object firstFactFactDibleNumber at 0x7f816a673a50, file "<dis>", line 37>:
38 0 LOAD_CONST 1 ( 1 )
2 STORE_FAST 1 ( i )

39 4 LOAD_GLOBAL 0 ( fact )
6 LOAD_FAST 1 ( i )
8 COMPARE_OP 0 ( < )
10 POP_JUMP_IF_FALSE 24

40 12 LOAD_CONST 2 ( 1 )
14 STORE_FAST 1 ( i )

41 16 LOAD_CONST 3 ( 1 )
18 STORE_FAST 1 ( i )

42 20 LOAD_FAST 1 ( i )
22 LOAD_CONST 4 ( - 1 )
24 COMPARE_OP 2 ( == )
26 POP_JUMP_IF_FALSE 32

43 28 LOAD_CONST 5 ( 1 )
30 STORE_FAST 1 ( i )

44 >> 32 LOAD_FAST 1 ( i )
34 LOAD_CONST 4 ( - 1 )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 48

45 40 LOAD_CONST 6 ( 1 )
42 STORE_FAST 1 ( i )

46 44 LOAD_FAST 1 ( i )
46 LOAD_CONST 4 ( - 1 )
48 COMPARE_OP 2 ( == )
50 POP_JUMP_IF_FALSE 48

47 52 LOAD_CONST 7 ( 1 )
54 STORE_FAST 1 ( i )

48 56 LOAD_FAST 1 ( i )
58 LOAD_CONST 4 ( - 1 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 48

49 64 LOAD_CONST 8 ( 1 )
66 STORE_FAST 1 ( i )

50 >> 68 LOAD_FAST 1 ( i )
70 LOAD_CONST 4 ( - 1 )
72 COMPARE_OP 2 ( == )
74 POP_JUMP_IF_FALSE 80

51 76 LOAD_CONST 9 ( 1 )
78 STORE_FAST 1 ( i )

52 >> 80 LOAD_FAST 1 ( i )
82 LOAD_CONST 4 ( - 1 )
84 COMPARE_OP 2 ( == )
86 POP_JUMP_IF_FALSE 90

53 88 LOAD_CONST 10 ( 1 )
90 STORE_FAST 1 ( i )

54 >> 92 LOAD_FAST 1 ( i )
94 LOAD_CONST 4 ( - 1 )
96 COMPARE_OP 2 ( == )
98 POP_JUMP_IF_FALSE 106

55 100 LOAD_CONST 11 ( 1 )
102 STORE_FAST 1 ( i )

56 104 LOAD_FAST 1 ( i )
106 LOAD_CONST 4 ( - 1 )
108 COMPARE_OP 2 ( == )
110 POP_JUMP_IF_FALSE 112

57 112 LOAD_CONST 1 ( 1 )
114 STORE_FAST 1 ( i )

58 >> 116 LOAD_FAST 1 ( i )
118 LOAD_CONST 4 ( - 1 )
120 COMPARE_OP 2 ( == )
122 POP_JUMP_IF_FALSE 126

59 124 LOAD_CONST 1 ( 1 )
126 RETURN_VALUE

