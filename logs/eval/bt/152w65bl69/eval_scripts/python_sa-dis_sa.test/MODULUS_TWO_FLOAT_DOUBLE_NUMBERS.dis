{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , b ) :\n    if ( a < 0 ) :\n        a = - a\n    if ( b < 0 ) :\n        b = - b\n    mod = a\n    while ( mod >= b ) :\n        mod = mod - b\n    if ( a < 0 ) :\n        return - mod\n    return mod\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (3243.229719038493,5659.926861939672,),\n    (-4362.665881044217,-9196.507113304497,),\n    (7255.066257575837,2623.200060506935,),\n    (-6929.554320261099,-3009.0234530313287,),\n    (3569.942027998315,6920.809419868375,),\n    (-6513.849053096595,-70.95992406437102,),\n    (7333.183189243961,580.3500610971768,),\n    (-2856.1752826258803,-9625.97442825802,),\n    (9787.228111241662,2419.6844962423256,),\n    (-1722.873699288031,-8370.700544254058,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if abs(1 - (0.0000001 + abs(f_gold(*parameters_set))) / (abs(f_filled(*parameters_set)) + 0.0000001)) < 0.001:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findMod ( a , b ) :\n    if ( a < 0 ) :\n        a = - a\n    if ( b < 0 ) :\n        b = - b\n    mod = a\n    while ( mod >= b ) :\n        mod = mod - b\n    if ( a < 0 ) :\n        return - mod\n    return mod\n"}
Disassembly of <code object findMod at 0x7f816a677930, file "<dis>", line 25>:
26 0 LOAD_FAST 0 ( a )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

27 8 LOAD_FAST 0 ( a )
10 LOAD_CONST 1 ( 0 )
12 COMPARE_OP 2 ( == )
14 POP_JUMP_IF_FALSE 28

28 >> 16 LOAD_FAST 0 ( a )
18 LOAD_CONST 1 ( 0 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

29 24 LOAD_FAST 0 ( a )
26 LOAD_CONST 1 ( 0 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 28

30 32 LOAD_FAST 0 ( a )
34 LOAD_CONST 1 ( 0 )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 44

31 40 LOAD_FAST 0 ( a )
42 LOAD_CONST 1 ( 0 )
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 44

32 48 LOAD_FAST 0 ( a )
50 LOAD_CONST 1 ( 0 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 44

33 56 LOAD_FAST 0 ( a )
58 LOAD_CONST 1 ( 0 )
60 COMPARE_OP 2 ( == )
62 POP_JUMP_IF_FALSE 44

34 64 LOAD_FAST 0 ( a )
66 LOAD_CONST 1 ( 0 )
68 COMPARE_OP 2 ( == )
70 POP_JUMP_IF_FALSE 44

35 72 LOAD_FAST 0 ( a )
74 LOAD_CONST 1 ( 0 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 80

36 80 LOAD_FAST 0 ( a )
82 LOAD_CONST 1 ( 0 )
84 COMPARE_OP 2 ( == )
86 POP_JUMP_IF_FALSE 80

37 >> 88 LOAD_FAST 0 ( a )
90 LOAD_CONST 1 ( 0 )
92 COMPARE_OP 2 ( == )
94 POP_JUMP_IF_FALSE 80

38 96 LOAD_FAST 0 ( a )
98 LOAD_CONST 1 ( 0 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 80

39 104 LOAD_FAST 0 ( a )
106 LOAD_CONST 1 ( 0 )
108 COMPARE_OP 2 ( == )
110 POP_JUMP_IF_FALSE 80

40 112 LOAD_FAST 0 ( a )
114 LOAD_CONST 1 ( 0 )
116 COMPARE_OP 2 ( == )
118 POP_JUMP_IF_FALSE 80

41 120 LOAD_FAST 0 ( a )
122 LOAD_CONST 1 ( 0 )
124 COMPARE_OP 2 ( == )
126 POP_JUMP_IF_FALSE 128

42 128 LOAD_FAST 0 ( a )
130 LOAD_CONST 1 ( 0 )
132 COMPARE_OP 2 ( == )
134 POP_JUMP_IF_FALSE 130

43 136 LOAD_FAST 0 ( a )
138 LOAD_CONST 1 ( 0 )
140 COMPARE_OP 2 ( == )
142 POP_JUMP_IF_FALSE 146

44 144 LOAD_FAST 0 ( a )
146 RETURN_VALUE