{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( num ) :\n    series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ] ;\n    series_index = 0 ;\n    result = 0 ;\n    for i in range ( ( len ( num ) - 1 ) , - 1 , - 1 ) :\n        digit = ord ( num [ i ] ) - 48 ;\n        result += digit * series [ series_index ] ;\n        series_index = ( series_index + 1 ) % 6 ;\n        result %= 7 ;\n    if ( result < 0 ) :\n        result = ( result + 7 ) % 7 ;\n    return result ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('K',),\n    ('850076',),\n    ('00111',),\n    ('X',),\n    ('1',),\n    ('10010001100',),\n    (' pgPeLz',),\n    ('53212456821275',),\n    ('101',),\n    ('V',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def remainderWith7 ( num ) :\n    series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ] ;\n    series_index = 0 ;\n    result = 0 ;\n    for i in range ( ( len ( num ) - 1 ) , - 1 , - 1 ) :\n        digit = ord ( num [ i ] ) - 48 ;\n        result += digit * series [ series_index ] ;\n        series_index = ( series_index + 1 ) % 6 ;\n        result %= 7 ;\n    if ( result < 0 ) :\n        result = ( result + 7 ) % 7 ;\n    return result ;\n"}
Disassembly of <code object esearch_results at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 1 )
2 LOAD_CONST 2 ( ( '' , ) )
4 IMPORT_NAME 0 ( series )
6 IMPORT_FROM 1 ( '' )
8 STORE_FAST 0 ( num )
10 POP_TOP

3 12 LOAD_CONST 3 ( 0 )
14 LOAD_CONST 4 ( ( 'num_num' , ) )
16 IMPORT_NAME 2 ( series_index )
18 IMPORT_FROM 3 ( num )
20 STORE_FAST 1 ( num )
22 POP_TOP

4 24 LOAD_CONST 5 ( 0 )
26 LOAD_CONST 6 ( ( 'num_num' , ) )
28 IMPORT_NAME 4 ( math )
30 IMPORT_FROM 5 ( num )
32 STORE_FAST 2 ( math )
34 POP_TOP

5 36 LOAD_FAST 0 ( num )
38 LOAD_CONST 7 ( 2 )
40 LOAD_CONST 8 ( 3 )
42 LOAD_CONST 9 ( 4 )
44 LOAD_CONST 10 ( 6 )
46 LOAD_CONST 11 ( 4 )
48 LOAD_CONST 12 ( 5 )
50 LOAD_CONST 13 ( 6 )
52 LOAD_CONST 14 ( 8 )
54 LOAD_CONST 15 ( 10 )
56 LOAD_CONST 15 ( 9 )
58 LOAD_CONST 16 ( 10 )
60 LOAD_CONST 17 ( 11 )
62 LOAD_CONST 17 ( 11 )
64 LOAD_CONST 18 ( ( 'num_num' , ) )
66 CALL_FUNCTION_KW 5
68 POP_TOP

6 70 LOAD_FAST 0 ( num )
72 LOAD_CONST 18 ( 11 )
74 LOAD_CONST 19 ( 12 )
76 LOAD_CONST 19 ( 14 )
78 LOAD_CONST 20 ( 16 )
80 LOAD_CONST 19 ( 18 )
82 LOAD_CONST 20 ( 19 )
84 LOAD_CONST 21 ( 20 )
86 LOAD_CONST 22 ( 19 )
88 LOAD_CONST 23 ( 21 )
90 LOAD_CONST 22 ( ( 'num_num' , 'num_num' , 'num_num_num' , 'num_num_num_num_num' , 'num_num_num_num' , 'num_num_num_num_num_num' ) )
34 COMPARE_OP 6 ( in )
36 POP_JUMP_IF_FALSE 48

7 38 LOAD_CONST 5 ( 0 )
40 LOAD_CONST 4 ( ( 'num_num_num' , ) )
42 CALL_FUNCTION_KW 2
44 STORE_FAST 2 ( math )
46 JUMP_FORWARD 10 ( to 44 )

8 >> 48 LOAD_FAST 0 ( num )
50 LOAD_CONST 4 ( ( 'num_num_num' , ) )
52 CALL_FUNCTION_KW 1
54 STORE_FAST 2 ( math )

9 56 LOAD_FAST 2 ( math )
58 RETURN_VALUE
