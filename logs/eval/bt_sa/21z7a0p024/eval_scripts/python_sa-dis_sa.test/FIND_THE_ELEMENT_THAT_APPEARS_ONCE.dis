{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    ones = 0\n    twos = 0\n    for i in range ( n ) :\n        twos = twos | ( ones & arr [ i ] )\n        ones = ones ^ arr [ i ]\n        common_bit_mask = ~ ( ones & twos )\n        ones &= common_bit_mask\n        twos &= common_bit_mask\n    return ones\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([7, 26, 26, 48, 59, 62, 66, 70, 72, 75, 76, 81, 97, 98],7,),\n    ([-42, -48, -64, -74, 56, -34, 20, 16, 34, -84, 86, 38, 56, -86, 30, -74, -96, 96, 12, 10, -46, 10, -36, 38, 34, -46, -20, 14, 12, 62, -54, 20, -82, 24, 96],27,),\n    ([0, 0, 1, 1],3,),\n    ([68, 91, 61, 6, 32, 47, 76, 69, 44, 71, 29, 79, 74, 33, 44, 33, 45, 75, 43, 82, 83, 81, 95, 16, 86, 33, 69, 61, 73, 21, 54, 17, 98, 62, 14, 72, 80, 31, 56, 82, 14, 48, 76],38,),\n    ([-98, -96, -92, -62, -52, -42, -42, -26, 4, 10, 14, 38, 64, 66, 72, 74, 82],14,),\n    ([0, 1, 1, 1, 0, 0, 0, 1, 0, 1],5,),\n    ([53, 63, 63],2,),\n    ([-96, -38, -26, -46, 68, -36, 20, -18, -10, 52, 40, 94, -8, -64, 82, -22],15,),\n    ([0, 0, 0, 0, 0, 1, 1],3,),\n    ([99, 46, 48, 81, 27, 97, 26, 50, 77, 32, 45, 99, 46],12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def getSingle ( arr , n ) :\n    ones = 0\n    twos = 0\n    for i in range ( n ) :\n        twos = twos | ( ones & arr [ i ] )\n        ones = ones ^ arr [ i ]\n        common_bit_mask = ~ ( ones & twos )\n        ones &= common_bit_mask\n        twos &= common_bit_mask\n    return ones\n"}
Disassembly of <code object getSingle at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( twos )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 3 ( twos )

4 8 SETUP_LOOP 64 ( to 76 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_FAST 1 ( n )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 56 ( to 74 )
20 STORE_FAST 4 ( i )

5 22 LOAD_GLOBAL 1 ( twos )
24 LOAD_METHOD 2 ( remove )
26 LOAD_FAST 4 ( i )
28 LOAD_FAST 0 ( arr )
30 LOAD_FAST 4 ( i )
32 BINARY_SUBSCR
34 CALL_METHOD 1
36 POP_TOP

6 38 LOAD_FAST 2 ( twos )
40 LOAD_METHOD 3 ( remove )
42 LOAD_FAST 4 ( i )
44 CALL_METHOD 1
46 POP_TOP
48 JUMP_ABSOLUTE 18
>> 50 POP_BLOCK

7 >> 52 LOAD_FAST 2 ( twos )
54 LOAD_METHOD 4 ( remove )
56 LOAD_FAST 4 ( i )
58 CALL_METHOD 1
60 POP_TOP
62 JUMP_ABSOLUTE 18
>> 64 POP_BLOCK

8 >> 66 LOAD_FAST 2 ( twos )
68 LOAD_METHOD 5 ( remove )
70 LOAD_FAST 4 ( i )
72 CALL_METHOD 1
74 POP_TOP
76 LOAD_CONST 0 ( None )
78 RETURN_VALUE
