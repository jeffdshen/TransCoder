{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    result = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ] ;\n            for k in range ( 0 , n ) :\n                if ( arr [ k ] == product ) :\n                    result = result + 1 ;\n                    break ;\n    return result ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([3, 7, 26, 40, 46, 89, 99],5,),\n    ([98, 42, -24, -60, 74, 86, 6, 8, 72, -58, 38, -20, 6, -6, 8, 48, -34, 30, 60, 66, 38, -54, 8, -94, -8, 0, -64, -94, -94, -72, -84, -36, 88, -62, -88, 46, -4, 88],24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],44,),\n    ([37, 97, 57, 82, 29, 68, 94, 38, 81, 48, 13, 84, 57, 5, 27, 87, 11, 35, 82, 53, 67, 31, 15, 99, 6, 93, 91, 92, 3, 23, 90, 27, 6, 33, 78, 3, 19, 19, 27],36,),\n    ([-80, -74, -72, -72, -66, -66, -62, -50, -44, -44, -28, -24, -24, -22, -16, -10, -6, -4, -2, 2, 2, 4, 12, 16, 16, 28, 30, 32, 32, 38, 38, 72, 84, 86, 88, 90, 96],34,),\n    ([0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1],18,),\n    ([25, 67],1,),\n    ([82, 74, -82, 22, -28, -78, -22, -86, -74, 42, -6, 54, -88, -92, -14, -50, 68, 46, -50, 46, -18, 66, -76, -30, 36, 12, 66],14,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],32,),\n    ([50, 23, 56, 9],3,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countPairs ( arr , n ) :\n    result = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ] ;\n            for k in range ( 0 , n ) :\n                if ( arr [ k ] == product ) :\n                    result = result + 1 ;\n                    break ;\n    return result ;\n"}
Disassembly of <code object countPairs at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( result )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 3 ( result )

4 8 SETUP_LOOP 64 ( to 76 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_CONST 2 ( 0 )
14 LOAD_FAST 1 ( n )
16 CALL_FUNCTION 2
18 GET_ITER
>> 20 FOR_ITER 64 ( to 74 )
22 STORE_FAST 4 ( i )

5 24 SETUP_LOOP 48 ( to 72 )
26 LOAD_GLOBAL 0 ( range )
28 LOAD_CONST 2 ( 0 )
30 LOAD_FAST 1 ( n )
32 CALL_FUNCTION 2
34 GET_ITER
>> 36 FOR_ITER 40 ( to 70 )
38 STORE_FAST 5 ( j )

6 40 LOAD_FAST 2 ( result )
42 LOAD_FAST 5 ( j )
44 BINARY_SUBSCR
46 LOAD_FAST 5 ( j )
48 BINARY_SUBSCR
50 LOAD_FAST 5 ( j )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 36

7 56 LOAD_FAST 2 ( result )
58 LOAD_FAST 5 ( j )
60 BINARY_SUBSCR
62 LOAD_FAST 5 ( j )
64 BINARY_SUBSCR
66 LOAD_FAST 5 ( j )
68 BINARY_SUBSCR
70 LOAD_FAST 5 ( j )
72 BINARY_SUBSCR
74 LOAD_FAST 5 ( j )
76 BINARY_SUBSCR
78 LOAD_FAST 5 ( j )
80 BINARY_SUBSCR
82 LOAD_FAST 5 ( j )
84 STORE_SUBSCR

8 86 LOAD_FAST 2 ( result )
88 LOAD_FAST 3 ( result )
90 LOAD_FAST 3 ( result )
92 STORE_SUBSCR
94 JUMP_ABSOLUTE 36
>> 96 POP_BLOCK
>> 98 JUMP_ABSOLUTE 20
>> 100 POP_BLOCK

9 >> 102 LOAD_FAST 2 ( result )
104 RETURN_VALUE
