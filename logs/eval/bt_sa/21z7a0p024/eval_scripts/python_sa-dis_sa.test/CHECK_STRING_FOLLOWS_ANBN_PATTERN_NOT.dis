{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    n = len ( str )\n    for i in range ( n ) :\n        if ( str [ i ] != 'a' ) :\n            break\n    if ( i * 2 != n ) :\n        return False\n    for j in range ( i , n ) :\n        if ( str [ j ] != 'b' ) :\n            return False\n    return True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('ba',),\n    ('aabb',),\n    ('abab',),\n    ('aaabb',),\n    ('aabbb',),\n    ('abaabbaa',),\n    ('abaababb',),\n    ('bbaa',),\n    ('11001000',),\n    ('ZWXv te',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isAnBn ( str ) :\n    n = len ( str )\n    for i in range ( n ) :\n        if ( str [ i ] != 'a' ) :\n            break\n    if ( i * 2 != n ) :\n        return False\n    for j in range ( i , n ) :\n        if ( str [ j ] != 'b' ) :\n            return False\n    return True\n"}
Disassembly of <code object isAnBn at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( n )

3 8 SETUP_LOOP 64 ( to 76 )
10 LOAD_GLOBAL 1 ( range )
12 LOAD_FAST 1 ( n )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 64 ( to 74 )
20 STORE_FAST 2 ( i )

4 22 LOAD_FAST 2 ( i )
24 LOAD_CONST 1 ( 0 )
26 COMPARE_OP 3 ( != )
28 POP_JUMP_IF_FALSE 42

5 30 LOAD_FAST 0 ( str )
32 LOAD_FAST 2 ( i )
34 BINARY_SUBSCR
36 STORE_FAST 1 ( n )

6 38 LOAD_FAST 0 ( str )
40 LOAD_FAST 2 ( i )
42 BINARY_SUBSCR
44 LOAD_METHOD 2 ( strip )
46 CALL_METHOD 0
48 COMPARE_OP 6 ( in )
50 POP_JUMP_IF_FALSE 18

7 52 LOAD_FAST 0 ( str )
54 LOAD_FAST 2 ( i )
56 BINARY_SUBSCR
58 LOAD_METHOD 2 ( strip )
60 CALL_METHOD 0
62 STORE_FAST 1 ( n )

8 64 LOAD_FAST 0 ( str )
66 LOAD_FAST 2 ( i )
68 BINARY_SUBSCR
70 LOAD_METHOD 2 ( strip )
72 CALL_METHOD 0
74 LOAD_METHOD 2 ( strip )
76 CALL_METHOD 0
78 LOAD_METHOD 2 ( strip )
80 CALL_METHOD 0
82 LOAD_METHOD 2 ( strip )
84 CALL_METHOD 0
86 STORE_FAST 1 ( n )

9 88 LOAD_FAST 1 ( n )
90 LOAD_CONST 2 ( 1 )
92 COMPARE_OP 3 ( != )
94 POP_JUMP_IF_FALSE 18

10 96 LOAD_FAST 0 ( str )
98 LOAD_FAST 2 ( i )
100 BINARY_SUBSCR
102 LOAD_METHOD 2 ( strip )
104 CALL_METHOD 0
106 STORE_FAST 1 ( n )

11 >> 108 LOAD_FAST 1 ( n )
110 LOAD_CONST 2 ( 1 )
112 COMPARE_OP 3 ( != )
114 POP_JUMP_IF_FALSE 18

12 116 LOAD_FAST 0 ( str )
118 LOAD_FAST 2 ( i )
120 BINARY_SUBSCR
122 LOAD_METHOD 2 ( strip )
124 CALL_METHOD 0
126 LOAD_METHOD 2 ( strip )
128 CALL_METHOD 0
130 LOAD_METHOD 2 ( strip )
132 CALL_METHOD 0
134 STORE_FAST 1 ( n )

13 136 LOAD_FAST 1 ( n )
138 LOAD_FAST 1 ( n )
140 COMPARE_OP 3 ( != )
142 POP_JUMP_IF_FALSE 18

14 144 LOAD_FAST 0 ( str )
146 LOAD_FAST 2 ( i )
148 BINARY_SUBSCR
150 LOAD_METHOD 2 ( strip )
152 CALL_METHOD 0
154 LOAD_METHOD 2 ( strip )
156 CALL_METHOD 0
158 RETURN_VALUE
