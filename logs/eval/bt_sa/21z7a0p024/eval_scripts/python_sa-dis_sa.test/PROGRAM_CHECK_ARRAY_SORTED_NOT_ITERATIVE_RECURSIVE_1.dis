{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    if ( n == 0 or n == 1 ) :\n        return True\n    for i in range ( 1 , n ) :\n        if ( arr [ i - 1 ] > arr [ i ] ) :\n            return False\n    return True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([6, 8, 8, 16, 19, 19, 21, 23, 26, 33, 34, 36, 38, 39, 41, 41, 45, 47, 52, 52, 55, 57, 60, 60, 60, 61, 69, 69, 70, 70, 72, 73, 73, 75, 78, 81, 84, 84, 85, 88, 88, 89, 90, 91, 97],22,),\n    ([2, -90, 66, 24, -18, 70, 34, 18, 84, -62],9,),\n    ([1, 1],1,),\n    ([12, 88, 65, 82, 23, 39, 60, 27, 57, 44, 70, 28, 23, 34, 25, 11, 48, 65, 10, 73, 26, 10, 18, 60, 73, 45, 26, 9, 36, 15, 24, 40, 2, 4, 95, 20, 39, 45],23,),\n    ([-38, 38, 40, 72],2,),\n    ([1, 0, 0, 0, 1],3,),\n    ([11, 15, 16, 17, 17, 17, 22, 23, 23, 25, 27, 28, 28, 31, 33, 36, 38, 40, 42, 44, 46, 49, 51, 51, 52, 60, 62, 65, 67, 71, 74, 77, 77, 78, 78, 79, 83, 83, 86, 86, 87, 87, 87, 88, 91, 92, 97, 97, 97],44,),\n    ([-26, -90, -78, -76, -58, -64, -72, -34, -58, -48, 78, -50, -30, 26, -60, 26],9,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],23,),\n    ([56, 51, 63, 30, 10, 88, 23, 1, 48, 4, 28, 44],10,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def arraySortedOrNot ( arr , n ) :\n    if ( n == 0 or n == 1 ) :\n        return True\n    for i in range ( 1 , n ) :\n        if ( arr [ i - 1 ] > arr [ i ] ) :\n            return False\n    return True\n"}
Disassembly of <code object arraySortedOrNot at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( True )
10 RETURN_VALUE

4 >> 12 SETUP_LOOP 64 ( to 78 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_CONST 1 ( 0 )
18 LOAD_FAST 1 ( n )
20 CALL_FUNCTION 2
22 GET_ITER
>> 24 FOR_ITER 48 ( to 76 )
26 STORE_FAST 2 ( i )

5 28 LOAD_FAST 2 ( i )
30 LOAD_CONST 1 ( 0 )
32 BINARY_SUBSCR
34 LOAD_FAST 2 ( i )
36 COMPARE_OP 2 ( == )
38 POP_JUMP_IF_FALSE 48

6 40 LOAD_FAST 2 ( i )
42 LOAD_CONST 1 ( 0 )
44 BINARY_SUBSCR
46 LOAD_FAST 2 ( i )
48 LOAD_CONST 1 ( 0 )
50 BINARY_SUBSCR
52 LOAD_FAST 2 ( i )
54 BINARY_SUBSCR
56 LOAD_FAST 2 ( i )
58 BINARY_SUBSCR
60 LOAD_FAST 2 ( i )
62 BINARY_SUBSCR
64 LOAD_FAST 2 ( i )
66 BINARY_SUBSCR
68 LOAD_FAST 2 ( i )
70 BINARY_SUBSCR
72 LOAD_FAST 2 ( i )
74 BINARY_SUBSCR
76 LOAD_FAST 2 ( i )
78 BINARY_SUBSCR
80 LOAD_FAST 2 ( i )
82 BINARY_SUBSCR
84 LOAD_FAST 2 ( i )
86 STORE_SUBSCR
88 JUMP_ABSOLUTE 24
>> 90 POP_BLOCK

7 >> 92 LOAD_FAST 0 ( arr )
94 RETURN_VALUE
