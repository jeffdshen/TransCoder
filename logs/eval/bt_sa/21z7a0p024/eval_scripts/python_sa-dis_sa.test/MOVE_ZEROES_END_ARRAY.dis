{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] != 0 :\n            arr [ count ] = arr [ i ]\n            count += 1\n    while count < n :\n        arr [ count ] = 0\n        count += 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 5, 12, 13, 15, 16, 31, 34, 42, 42, 43, 44, 48, 52, 54, 56],16,),\n    ([70, 50, 10, 52],4,),\n    ([0, 0, -30, 0, 0, -10, 0, 0, 0, 12, 0, 0, 0, -5, 1],15,),\n    ([51, 16, 1, 47, 67, 3, 97, 16, 2, 30, 1, 1, 25, 96, 13, 64, 73],17,),\n    ([-78, -10, 62],3,),\n    ([1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1],12,),\n    ([4, 11, 18, 19, 24, 28, 30, 31, 36, 38, 44, 49, 50, 51, 63, 63, 68, 69, 70, 77, 78, 88, 92, 92],21,),\n    ([-72, 8, -86, -82, -90, 0, -94, -82, -62, -8, 52, -6, -6, 60, -94, 56, -20, -78, -58, 6, 52, 88],22,),\n    ([1, 1, -4, 0, -1, 1, 0, 1, 0, 1, -3, 1],12,),\n    ([69, 45, 44, 19, 56, 22, 7, 31, 19, 33, 71, 84, 55, 62, 6, 84, 36, 7, 40],15,)\n        ]\n    filled_function_param = [\n    ([2, 5, 12, 13, 15, 16, 31, 34, 42, 42, 43, 44, 48, 52, 54, 56],16,),\n    ([70, 50, 10, 52],4,),\n    ([0, 0, -30, 0, 0, -10, 0, 0, 0, 12, 0, 0, 0, -5, 1],15,),\n    ([51, 16, 1, 47, 67, 3, 97, 16, 2, 30, 1, 1, 25, 96, 13, 64, 73],17,),\n    ([-78, -10, 62],3,),\n    ([1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1],12,),\n    ([4, 11, 18, 19, 24, 28, 30, 31, 36, 38, 44, 49, 50, 51, 63, 63, 68, 69, 70, 77, 78, 88, 92, 92],21,),\n    ([-72, 8, -86, -82, -90, 0, -94, -82, -62, -8, 52, -6, -6, 60, -94, 56, -20, -78, -58, 6, 52, 88],22,),\n    ([1, 1, -4, 0, -1, 1, 0, 1, 0, 1, -3, 1],12,),\n    ([69, 45, 44, 19, 56, 22, 7, 31, 19, 33, 71, 84, 55, 62, 6, 84, 36, 7, 40],15,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def pushZerosToEnd ( arr , n ) :\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] != 0 :\n            arr [ count ] = arr [ i ]\n            count += 1\n    while count < n :\n        arr [ count ] = 0\n        count += 1\n"}
Disassembly of <code object pushticksToEnd at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( count )

3 4 SETUP_LOOP 64 ( to 66 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_FAST 1 ( n )
10 CALL_FUNCTION 1
12 GET_ITER
>> 14 FOR_ITER 64 ( to 64 )
16 STORE_FAST 3 ( i )

4 18 LOAD_FAST 0 ( arr )
20 LOAD_FAST 3 ( i )
22 BINARY_SUBSCR
24 LOAD_CONST 2 ( 1 )
26 COMPARE_OP 3 ( != )
28 POP_JUMP_IF_FALSE 14

5 30 LOAD_FAST 0 ( arr )
32 LOAD_FAST 3 ( i )
34 BINARY_SUBSCR
36 LOAD_CONST 3 ( ' ' )
38 BINARY_ADD
40 STORE_FAST 4 ( count )

6 42 LOAD_FAST 0 ( arr )
44 LOAD_FAST 3 ( i )
46 BINARY_SUBSCR
48 LOAD_CONST 4 ( ' ' )
50 BINARY_ADD
52 STORE_FAST 5 ( count )

7 54 LOAD_FAST 0 ( arr )
56 LOAD_FAST 3 ( i )
58 BINARY_SUBSCR
60 LOAD_CONST 5 ( ' ' )
62 BINARY_ADD
64 STORE_FAST 6 ( count )

8 66 LOAD_FAST 0 ( arr )
68 LOAD_FAST 3 ( i )
70 BINARY_SUBSCR
72 LOAD_CONST 6 ( ' ' )
74 BINARY_ADD
76 LOAD_FAST 1 ( n )
78 BINARY_ADD
80 LOAD_CONST 7 ( ' ' )
82 BINARY_ADD
84 INPLACE_ADD
86 STORE_FAST 0 ( arr )

9 88 LOAD_FAST 0 ( arr )
90 LOAD_FAST 3 ( i )
92 BINARY_SUBSCR
94 LOAD_CONST 8 ( ' ' )
96 BINARY_ADD
98 STORE_FAST 0 ( arr )

10 100 LOAD_FAST 0 ( arr )
102 LOAD_FAST 3 ( i )
104 BINARY_SUBSCR
106 LOAD_CONST 9 ( ' ' )
108 BINARY_ADD
110 STORE_FAST 2 ( count )

11 112 LOAD_FAST 0 ( arr )
114 LOAD_FAST 3 ( i )
116 BINARY_SUBSCR
118 LOAD_CONST 10 ( ' ' )
120 BINARY_ADD
122 STORE_FAST 0 ( arr )

12 124 LOAD_FAST 0 ( arr )
126 LOAD_FAST 3 ( i )
128 BINARY_SUBSCR
130 LOAD_CONST 11 ( ' ' )
132 BINARY_ADD
134 INPLACE_ADD
136 STORE_FAST 0 ( arr )

13 138 LOAD_FAST 0 ( arr )
140 LOAD_FAST 3 ( i )
142 STORE_SUBSCR
144 JUMP_ABSOLUTE 14
>> 146 POP_BLOCK

14 >> 148 LOAD_FAST 2 ( count )
150 RETURN_VALUE
