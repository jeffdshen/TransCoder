{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('KfcTJNP',),\n    ('05312505872',),\n    ('100111',),\n    ('tDEEhKxrQ',),\n    ('50824233019',),\n    ('10001110010',),\n    ('T SEZaNm MYQ',),\n    ('838415739',),\n    ('01110100',),\n    ('WYQiAey H',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count\n"}
Disassembly of <code object xorZero at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( one_count )

3 4 LOAD_GLOBAL 0 ( len )
6 LOAD_FAST 0 ( str )
8 CALL_FUNCTION 1
10 STORE_FAST 2 ( zero_count )

4 12 LOAD_GLOBAL 1 ( len )
14 LOAD_FAST 0 ( str )
16 CALL_FUNCTION 1
18 LOAD_CONST 2 ( 1 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 38

5 24 LOAD_GLOBAL 2 ( int )
26 LOAD_FAST 0 ( str )
28 CALL_FUNCTION 1
30 STORE_FAST 1 ( one_count )

6 32 LOAD_GLOBAL 1 ( len )
34 LOAD_FAST 0 ( str )
36 CALL_FUNCTION 1
38 LOAD_CONST 2 ( 1 )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 48

7 44 LOAD_GLOBAL 2 ( int )
46 LOAD_FAST 0 ( str )
48 CALL_FUNCTION 1
50 STORE_FAST 2 ( zero_count )

8 >> 52 LOAD_GLOBAL 3 ( numpy )
54 LOAD_METHOD 4 ( array )
56 LOAD_FAST 0 ( str )
58 LOAD_FAST 1 ( one_count )
60 CALL_FUNCTION 1
62 CALL_METHOD 1
64 STORE_FAST 3 ( zero_count )

9 66 LOAD_GLOBAL 5 ( numpy )
68 LOAD_METHOD 6 ( array )
70 LOAD_FAST 0 ( str )
72 LOAD_FAST 1 ( one_count )
74 CALL_FUNCTION 1
76 CALL_METHOD 1
78 STORE_FAST 4 ( zero_count )

10 80 LOAD_GLOBAL 7 ( numpy )
82 LOAD_METHOD 8 ( array )
84 LOAD_FAST 0 ( str )
86 LOAD_FAST 1 ( one_count )
88 CALL_METHOD 1
90 STORE_FAST 5 ( zero_count )

11 92 LOAD_GLOBAL 9 ( numpy )
94 LOAD_METHOD 10 ( array )
96 LOAD_FAST 0 ( str )
98 LOAD_FAST 1 ( one_count )
100 CALL_FUNCTION 1
102 CALL_METHOD 1
104 STORE_FAST 6 ( zero_count )

12 106 LOAD_GLOBAL 11 ( numpy )
108 LOAD_METHOD 12 ( array )
110 LOAD_FAST 0 ( str )
112 LOAD_FAST 1 ( one_count )
114 CALL_METHOD 2
116 STORE_FAST 7 ( zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_zero_