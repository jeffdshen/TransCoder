{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([17, 25, 27, 27, 73, 91],5,3,),\n    ([-86, -74, -88, 28, -32, 20, -34, 32],5,6,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],33,32,),\n    ([5, 11, 36, 27, 6, 24, 58, 44, 14, 68],7,5,),\n    ([-98, -98, -94, -92, -86, -86, -70, -66, -64, -64, -58, -52, -46, -44, -44, -38, -38, -28, -24, -12, -10, -4, -2, 2, 8, 10, 12, 20, 22, 26, 26, 36, 42, 52, 54, 60, 60, 68, 82, 82, 92, 98],27,27,),\n    ([0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1],27,20,),\n    ([3, 8, 9, 10, 10, 13, 14, 16, 18, 23, 24, 25, 27, 28, 30, 33, 36, 39, 42, 42, 44, 45, 45, 48, 52, 52, 55, 55, 59, 59, 59, 60, 61, 61, 66, 66, 67, 68, 71, 72, 75, 76, 79, 80, 94, 94],44,26,),\n    ([-12, 56, -48, 52, -96, -84, 32, -12, -6, 82, 70, 18, 66, -6, -22, -46, -54, 18, -14, -32, 68, 82, -44, -42, 10, 56, 8, -56, 24, 20, -38, 30, -52, -66, 82, -64, 68, -82, 52, -88, -34, -26, 94, 58, -4, -84, -60],37,46,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,21,),\n    ([1, 23, 75, 84, 28, 34, 15, 13, 51, 69, 94, 45, 38, 38],13,12,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def printKDistinct ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1\n"}
Disassembly of <code object printKDistinct at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 BUILD_MAP 0
2 STORE_FAST 2 ( dict )

3 4 BUILD_MAP 0
6 STORE_FAST 3 ( vect )

4 8 BUILD_LIST 0
10 STORE_FAST 4 ( vect )

5 12 SETUP_LOOP 76 ( to 92 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_FAST 1 ( size )
18 CALL_FUNCTION 1
20 GET_ITER
>> 22 FOR_ITER 76 ( to 90 )
24 STORE_FAST 5 ( i )

6 26 LOAD_FAST 0 ( arr )
28 LOAD_FAST 2 ( dict )
30 BINARY_SUBSCR
32 LOAD_FAST 5 ( i )
34 BINARY_SUBSCR
36 LOAD_FAST 1 ( size )
38 BINARY_SUBSCR
40 LOAD_FAST 2 ( dict )
42 BINARY_SUBSCR
44 LOAD_FAST 5 ( i )
46 BINARY_SUBSCR
48 LOAD_FAST 2 ( dict )
50 STORE_SUBSCR

7 52 LOAD_FAST 4 ( vect )
54 LOAD_METHOD 1 ( append )
56 LOAD_FAST 4 ( vect )
58 CALL_METHOD 1
60 POP_TOP

8 62 LOAD_FAST 4 ( vect )
64 LOAD_METHOD 2 ( append )
66 LOAD_FAST 5 ( i )
68 CALL_METHOD 1
70 POP_TOP

9 72 LOAD_FAST 4 ( vect )
74 LOAD_METHOD 3 ( append )
76 LOAD_FAST 5 ( i )
78 CALL_METHOD 1
80 POP_TOP

10 82 LOAD_FAST 4 ( vect )
84 LOAD_METHOD 4 ( transform )
86 LOAD_FAST 4 ( vect )
88 CALL_METHOD 1
90 POP_TOP
92 JUMP_ABSOLUTE 22
>> 94 POP_BLOCK
>> 96 LOAD_CONST 0 ( None )
98 RETURN_VALUE
