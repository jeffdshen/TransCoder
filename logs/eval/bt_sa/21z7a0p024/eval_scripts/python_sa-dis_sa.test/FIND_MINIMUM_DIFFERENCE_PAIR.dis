{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    diff = 10 ** 20\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n    return diff\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 1, 2, 3, 5, 8, 10, 11, 15, 15, 16, 20, 26, 28, 30, 30, 33, 33, 39, 50, 50, 50, 54, 62, 66, 68, 69, 69, 74, 74, 75, 75, 76, 78, 82, 83, 85, 86, 86, 89, 89, 91, 91, 92, 92, 92, 93, 94, 98],32,),\n    ([6, 6, -20, 88, -78, -18, 74, 72, 80, 76, -62, 38],11,),\n    ([0, 1, 1, 1, 1],3,),\n    ([75, 85, 49, 66, 44, 89, 80, 39, 64, 70, 25, 21, 81, 33, 90, 68, 51],16,),\n    ([-96, -10, 0, 4, 54, 64],3,),\n    ([1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0],41,),\n    ([3, 3, 5, 5, 7, 7, 9, 11, 11, 18, 18, 18, 20, 29, 29, 31, 31, 32, 37, 43, 44, 46, 48, 50, 52, 52, 53, 63, 63, 65, 69, 72, 76, 76, 81, 84, 85, 86, 87, 87, 90, 94, 97, 97],27,),\n    ([40, -46, 72, -28, 8, 90, 86, -90, 8, -66, -98, 6, 42, 86, 88, 42, -50, 74, -34, -16, -94, -56, -18, -18, 84, -44, 34, 80, 96, 42, -50, -92, 70, 80, 62, -38, -4, 68, 54, -14, 30, -18, -58],33,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],26,),\n    ([15, 41, 32, 19, 68, 36, 61, 59, 5, 91, 53, 95, 10, 64, 15, 32, 14, 64, 48, 70, 85, 19, 83, 2, 33, 58, 93, 88, 21, 88, 45, 45, 18, 8],24,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n    return diff\n"}
Disassembly of <code object findMinDiff at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 10 )
2 LOAD_CONST 2 ( 20 )
4 LOAD_CONST 3 ( 20 )
6 LOAD_CONST 4 ( ( 'n' , 'n' ) )
8 BUILD_CONST_KEY_MAP 2
10 STORE_FAST 2 ( diff )

3 12 SETUP_LOOP 64 ( to 78 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_FAST 1 ( n )
18 LOAD_CONST 5 ( 1 )
20 CALL_FUNCTION 2
22 GET_ITER
>> 24 FOR_ITER 48 ( to 76 )
26 STORE_FAST 3 ( j )

4 28 LOAD_FAST 2 ( diff )
30 LOAD_FAST 3 ( j )
32 BINARY_SUBSCR
34 LOAD_FAST 0 ( arr )
36 COMPARE_OP 4 ( > )
38 POP_JUMP_IF_FALSE 24

5 40 LOAD_FAST 2 ( diff )
42 LOAD_FAST 3 ( j )
44 BINARY_SUBSCR
46 LOAD_FAST 0 ( arr )
48 LOAD_FAST 3 ( j )
50 BINARY_SUBSCR
52 LOAD_FAST 0 ( arr )
54 LOAD_FAST 3 ( j )
56 STORE_SUBSCR

6 58 LOAD_FAST 2 ( diff )
60 LOAD_FAST 3 ( j )
62 BINARY_SUBSCR
64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 3 ( j )
68 STORE_SUBSCR

7 70 LOAD_FAST 2 ( diff )
72 LOAD_FAST 3 ( j )
74 BINARY_SUBSCR
76 LOAD_FAST 0 ( arr )
78 LOAD_FAST 3 ( j )
80 STORE_SUBSCR

8 82 LOAD_FAST 2 ( diff )
84 LOAD_FAST 3 ( j )
86 BINARY_SUBSCR
88 LOAD_FAST 0 ( arr )
90 LOAD_FAST 3 ( j )
92 STORE_SUBSCR

9 94 LOAD_FAST 2 ( diff )
96 LOAD_FAST 3 ( j )
98 STORE_SUBSCR

10 100 LOAD_FAST 2 ( diff )
102 LOAD_FAST 3 ( j )
104 STORE_SUBSCR

11 106 LOAD_FAST 2 ( diff )
108 LOAD_FAST 3 ( j )
110 STORE_SUBSCR
112 JUMP_ABSOLUTE 24
>> 114 POP_BLOCK
>> 116 JUMP_ABSOLUTE 24
>> 118 POP_BLOCK

12 >> 120 LOAD_FAST 2 ( diff )
122 RETURN_VALUE
