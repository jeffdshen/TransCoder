{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n , m ) :\n    count = [ ]\n    for i in range ( n + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( i > m ) :\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n    return count [ n ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (93,54,),\n    (17,4,),\n    (38,39,),\n    (33,64,),\n    (78,35,),\n    (40,61,),\n    (95,6,),\n    (12,8,),\n    (69,60,),\n    (78,21,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countWays ( n , m ) :\n    count = [ ]\n    for i in range ( n + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( i > m ) :\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n    return count [ n ]\n"}
Disassembly of <code object countWays at 0x7f2b01639660, file "<dis>", line 1>:
2 0 BUILD_LIST 0
2 STORE_FAST 2 ( count )

3 4 SETUP_LOOP 64 ( to 66 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_FAST 1 ( m )
10 LOAD_CONST 1 ( 2 )
12 BINARY_ADD
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 48 ( to 64 )
20 STORE_FAST 3 ( i )

4 22 LOAD_FAST 2 ( count )
24 LOAD_CONST 2 ( 0 )
26 COMPARE_OP 4 ( > )
28 POP_JUMP_IF_FALSE 42

5 30 LOAD_FAST 2 ( count )
32 LOAD_CONST 2 ( 0 )
34 COMPARE_OP 4 ( > )
36 POP_JUMP_IF_FALSE 42

6 38 LOAD_FAST 2 ( count )
40 LOAD_CONST 2 ( 0 )
42 COMPARE_OP 4 ( > )
44 POP_JUMP_IF_FALSE 18

7 46 BREAK_LOOP
48 JUMP_ABSOLUTE 18

8 >> 50 LOAD_FAST 2 ( count )
52 LOAD_CONST 2 ( 0 )
54 COMPARE_OP 4 ( > )
56 POP_JUMP_IF_FALSE 18

9 58 LOAD_FAST 2 ( count )
60 LOAD_CONST 2 ( 0 )
62 COMPARE_OP 4 ( > )
64 POP_JUMP_IF_FALSE 18

10 66 LOAD_FAST 2 ( count )
68 LOAD_CONST 2 ( 0 )
70 COMPARE_OP 4 ( > )
72 POP_JUMP_IF_FALSE 18

11 74 LOAD_FAST 2 ( count )
76 LOAD_CONST 2 ( 0 )
78 COMPARE_OP 4 ( > )
80 POP_JUMP_IF_FALSE 18

12 82 LOAD_FAST 2 ( count )
84 LOAD_CONST 2 ( 0 )
86 COMPARE_OP 4 ( > )
88 POP_JUMP_IF_FALSE 18

13 90 LOAD_FAST 2 ( count )
92 LOAD_CONST 2 ( 0 )
94 COMPARE_OP 4 ( > )
96 POP_JUMP_IF_FALSE 18

14 98 LOAD_FAST 2 ( count )
100 LOAD_CONST 2 ( 0 )
102 COMPARE_OP 4 ( > )
104 POP_JUMP_IF_FALSE 18

15 106 LOAD_FAST 2 ( count )
108 LOAD_CONST 2 ( 0 )
110 COMPARE_OP 4 ( > )
112 POP_JUMP_IF_FALSE 18

16 114 LOAD_FAST 2 ( count )
116 LOAD_CONST 2 ( 0 )
118 COMPARE_OP 4 ( > )
120 POP_JUMP_IF_FALSE 18

17 122 LOAD_FAST 2 ( count )
124 LOAD_CONST 2 ( 0 )
126 COMPARE_OP 4 ( > )
128 POP_JUMP_IF_FALSE 18

18 130 LOAD_FAST 2 ( count )
132 LOAD_CONST 2 ( 0 )
134 COMPARE_OP 4 ( > )
136 POP_JUMP_IF_FALSE 18

19 138 JUMP_ABSOLUTE 18
>> 140 POP_BLOCK
>> 142 JUMP_ABSOLUTE 18
>> 144 POP_BLOCK
>> 146 LOAD_CONST 0 ( None )
148 RETURN_VALUE
