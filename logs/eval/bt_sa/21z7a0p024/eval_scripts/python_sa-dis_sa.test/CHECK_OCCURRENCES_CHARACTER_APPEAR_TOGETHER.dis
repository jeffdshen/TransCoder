{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s , c ) :\n    oneSeen = False\n    i = 0\n    n = len ( s )\n    while ( i < n ) :\n        if ( s [ i ] == c ) :\n            if ( oneSeen == True ) :\n                return False\n            while ( i < n and s [ i ] == c ) :\n                i = i + 1\n            oneSeen = True\n        else :\n            i = i + 1\n    return True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('gILrzLimS','m',),\n    ('307471222','2',),\n    ('110','0',),\n    ('GcAB','v',),\n    ('113','3',),\n    ('011110010','0',),\n    ('wcwob','w',),\n    ('74571582216153','1',),\n    ('100000011','0',),\n    ('ryPErkzY','q',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def checkIfAllTogether ( s , c ) :\n    oneSeen = False\n    i = 0\n    n = len ( s )\n    while ( i < n ) :\n        if ( s [ i ] == c ) :\n            if ( oneSeen == True ) :\n                return False\n            while ( i < n and s [ i ] == c ) :\n                i = i + 1\n            oneSeen = True\n        else :\n            i = i + 1\n    return True\n"}
Disassembly of <code object checkIfAllToesearch_results at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( oneSeen )

3 4 LOAD_CONST 2 ( 1 )
6 STORE_FAST 3 ( i )

4 8 LOAD_GLOBAL 0 ( len )
10 LOAD_FAST 0 ( s )
12 CALL_FUNCTION 1
14 LOAD_CONST 3 ( 2 )
16 COMPARE_OP 0 ( < )
18 POP_JUMP_IF_FALSE 32

5 20 LOAD_GLOBAL 1 ( len )
22 LOAD_FAST 0 ( s )
24 CALL_FUNCTION 1
26 LOAD_CONST 4 ( 1 )
28 COMPARE_OP 0 ( < )
30 POP_JUMP_IF_FALSE 32

6 >> 32 LOAD_GLOBAL 2 ( print )
34 LOAD_CONST 5 ( '\n' )
36 CALL_FUNCTION 1
38 POP_TOP

7 40 LOAD_GLOBAL 1 ( len )
42 LOAD_FAST 0 ( s )
44 CALL_FUNCTION 1
46 LOAD_CONST 6 ( 2 )
48 COMPARE_OP 4 ( > )
50 POP_JUMP_IF_FALSE 60

8 52 LOAD_GLOBAL 1 ( len )
54 LOAD_FAST 0 ( s )
56 CALL_FUNCTION 1
58 LOAD_CONST 7 ( 2 )
60 COMPARE_OP 4 ( > )
62 POP_JUMP_IF_FALSE 78

9 64 LOAD_GLOBAL 1 ( len )
66 LOAD_FAST 0 ( s )
68 CALL_FUNCTION 1
70 LOAD_CONST 8 ( 4 )
72 COMPARE_OP 4 ( > )
74 POP_JUMP_IF_FALSE 78

10 76 LOAD_GLOBAL 1 ( len )
78 LOAD_FAST 0 ( s )
80 CALL_FUNCTION 1
82 LOAD_CONST 9 ( 4 )
84 COMPARE_OP 4 ( > )
86 POP_JUMP_IF_FALSE 78

11 88 LOAD_GLOBAL 1 ( len )
90 LOAD_FAST 0 ( s )
92 CALL_FUNCTION 1
94 LOAD_CONST 10 ( 4 )
96 COMPARE_OP 4 ( > )
98 POP_JUMP_IF_FALSE 104

12 100 LOAD_GLOBAL 1 ( len )
102 LOAD_FAST 0 ( s )
104 CALL_FUNCTION 1
106 LOAD_CONST 11 ( 2 )
108 COMPARE_OP 4 ( > )
110 POP_JUMP_IF_FALSE 120

13 112 LOAD_GLOBAL 1 ( len )
114 LOAD_FAST 0 ( s )
116 CALL_FUNCTION 1
118 LOAD_CONST 12 ( 4 )
120 COMPARE_OP 4 ( > )
122 POP_JUMP_IF_FALSE 120

14 124 LOAD_GLOBAL 1 ( len )
126 LOAD_FAST 0 ( s )
128 CALL_FUNCTION 1
130 LOAD_CONST 13 ( 4 )
132 COMPARE_OP 4 ( > )
134 POP_JUMP_IF_FALSE 120

15 136 LOAD_GLOBAL 1 ( len )
138 LOAD_FAST 0 ( s )
140 CALL_FUNCTION 1
142 LOAD_CONST 14 ( 4 )
144 COMPARE_OP 4 ( > )
146 POP_JUMP_IF_FALSE 120

16 148 LOAD_GLOBAL 1 ( len )
150 LOAD_FAST 0 ( s )
152 CALL_FUNCTION 1