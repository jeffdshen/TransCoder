{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , x , y ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += 1\n    return count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([9, 16, 19, 24, 36, 38, 42, 49, 51, 53, 53, 57, 57, 58, 71, 78, 78, 92, 92, 93],13,12,13,),\n    ([28, -74, -18, 10, 26, 28, -96, -80, 82, 94, 22, 50, 72, -90, 76, 50, 20, -44, -80],18,13,13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],30,21,31,),\n    ([25, 8, 66, 90, 50, 65, 76, 90, 27],4,8,5,),\n    ([-98, -96, -90, -82, -80, -78, -70, -66, -60, -60, -50, -48, -34, -26, -24, -16, -14, -8, -6, 4, 22, 24, 26, 30, 30, 48, 52, 56, 60, 62, 74, 76, 78, 86],32,24,24,),\n    ([1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0],15,16,12,),\n    ([4, 6, 17, 19, 24, 29, 30, 31, 32, 37, 37, 40, 43, 44, 44, 45, 57, 64, 69, 70, 73, 78, 86, 89, 91, 92, 94],17,21,15,),\n    ([32, -88, 70, -6, 28, -48],4,3,4,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],13,12,11,),\n    ([37, 84, 97, 74, 12, 26, 47, 10, 14, 33],5,9,8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += 1\n    return count\n"}
Disassembly of <code object countInRange at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( count )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 3 ( count )

4 8 SETUP_LOOP 64 ( to 76 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_FAST 1 ( n )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 48 ( to 74 )
20 STORE_FAST 4 ( i )

5 22 LOAD_FAST 0 ( arr )
24 LOAD_FAST 4 ( i )
26 BINARY_SUBSCR
28 LOAD_FAST 1 ( n )
30 COMPARE_OP 5 ( >= )
32 POP_JUMP_IF_FALSE 42

6 34 LOAD_FAST 2 ( count )
36 LOAD_CONST 2 ( 1 )
38 INPLACE_ADD
40 STORE_FAST 2 ( count )

7 >> 42 LOAD_FAST 2 ( count )
44 LOAD_CONST 3 ( 0 )
46 COMPARE_OP 4 ( > )
48 POP_JUMP_IF_FALSE 18

8 50 LOAD_FAST 2 ( count )
52 LOAD_CONST 3 ( 0 )
54 INPLACE_ADD
56 STORE_FAST 2 ( count )

9 58 LOAD_FAST 2 ( count )
60 LOAD_CONST 3 ( 0 )
62 COMPARE_OP 4 ( > )
64 POP_JUMP_IF_FALSE 18

10 66 LOAD_FAST 2 ( count )
68 LOAD_CONST 3 ( 0 )
70 COMPARE_OP 4 ( > )
72 POP_JUMP_IF_FALSE 18

11 74 LOAD_FAST 2 ( count )
76 LOAD_CONST 3 ( 0 )
78 COMPARE_OP 4 ( > )
80 POP_JUMP_IF_FALSE 18

12 82 LOAD_FAST 2 ( count )
84 LOAD_CONST 3 ( 0 )
86 COMPARE_OP 4 ( > )
88 POP_JUMP_IF_FALSE 18

13 90 LOAD_FAST 2 ( count )
92 LOAD_CONST 3 ( 0 )
94 COMPARE_OP 4 ( > )
96 POP_JUMP_IF_FALSE 18

14 98 LOAD_FAST 2 ( count )
100 LOAD_CONST 3 ( 0 )
102 COMPARE_OP 4 ( > )
104 POP_JUMP_IF_FALSE 18

15 106 LOAD_FAST 2 ( count )
108 LOAD_CONST 3 ( 0 )
110 COMPARE_OP 4 ( > )
112 POP_JUMP_IF_FALSE 18

16 114 LOAD_FAST 2 ( count )
116 LOAD_CONST 3 ( 0 )
118 COMPARE_OP 4 ( > )
120 POP_JUMP_IF_FALSE 18

17 122 LOAD_FAST 2 ( count )
124 LOAD_CONST 3 ( 0 )
126 COMPARE_OP 4 ( > )
128 POP_JUMP_IF_FALSE 18

18 130 LOAD_FAST 2 ( count )
132 LOAD_CONST 4 ( 1 )
134 INPLACE_ADD
136 STORE_FAST 2 ( count )
138 JUMP_ABSOLUTE 18
>> 140 POP_BLOCK
>> 142 JUMP_ABSOLUTE 18
>> 144 POP_BLOCK
>> 146 LOAD_CONST 0 ( None )
148 RETURN_VALUE
