{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    A = [ 0 ] * ( n + 1 )\n    B = [ 0 ] * ( n + 1 )\n    A [ 0 ] = 1\n    A [ 1 ] = 0\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]\n        B [ i ] = A [ i - 1 ] + B [ i - 2 ]\n    return A [ n ]\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (29,),\n    (13,),\n    (25,),\n    (65,),\n    (27,),\n    (42,),\n    (19,),\n    (50,),\n    (59,),\n    (13,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countWays ( n ) :\n    A = [ 0 ] * ( n + 1 )\n    B = [ 0 ] * ( n + 1 )\n    A [ 0 ] = 1\n    A [ 1 ] = 0\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]\n        B [ i ] = A [ i - 1 ] + B [ i - 2 ]\n    return A [ n ]\n"}
Disassembly of <code object countWays at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 LOAD_CONST 2 ( ( 'n' , ) )
4 IMPORT_NAME 0 ( A )
6 IMPORT_FROM 1 ( n )
8 STORE_FAST 1 ( n )
10 POP_TOP

3 12 LOAD_CONST 1 ( 0 )
14 LOAD_CONST 2 ( ( 'n' , ) )
16 IMPORT_NAME 2 ( numpy )
18 IMPORT_FROM 3 ( n )
20 STORE_FAST 2 ( numpy )
22 POP_TOP

4 24 LOAD_CONST 1 ( 0 )
26 LOAD_CONST 2 ( ( 'n' , ) )
28 IMPORT_NAME 4 ( numpy )
30 IMPORT_FROM 5 ( n )
32 STORE_FAST 3 ( n )
34 POP_TOP

5 36 LOAD_FAST 2 ( numpy )
38 LOAD_METHOD 6 ( isclose )
40 LOAD_FAST 0 ( n )
42 LOAD_FAST 1 ( n )
44 BINARY_MULTIPLY
46 CALL_METHOD 1
48 POP_JUMP_IF_TRUE 50

6 >> 50 LOAD_FAST 2 ( numpy )
52 LOAD_METHOD 7 ( isclose )
54 LOAD_FAST 0 ( n )
56 LOAD_FAST 1 ( n )
58 BINARY_MULTIPLY
60 CALL_METHOD 1
62 POP_JUMP_IF_TRUE 74

7 64 LOAD_FAST 2 ( numpy )
66 LOAD_METHOD 7 ( isclose )
68 LOAD_FAST 0 ( n )
70 LOAD_FAST 1 ( n )
72 BINARY_MULTIPLY
74 CALL_METHOD 1
76 POP_TOP

8 >> 78 LOAD_FAST 2 ( numpy )
80 LOAD_METHOD 8 ( isclose )
82 LOAD_FAST 0 ( n )
84 LOAD_FAST 1 ( n )
86 BINARY_MULTIPLY
88 CALL_METHOD 1
90 POP_JUMP_IF_TRUE 100

9 92 LOAD_FAST 2 ( numpy )
94 LOAD_METHOD 7 ( isclose )
96 LOAD_FAST 0 ( n )
98 LOAD_FAST 1 ( n )
100 BINARY_MULTIPLY
102 CALL_METHOD 1
104 POP_JUMP_IF_TRUE 100

10 >> 106 LOAD_FAST 2 ( numpy )
108 LOAD_METHOD 7 ( isclose )
110 LOAD_FAST 0 ( n )
112 LOAD_FAST 1 ( n )
114 BINARY_MULTIPLY
116 CALL_METHOD 1
118 POP_JUMP_IF_TRUE 128

11 120 LOAD_FAST 2 ( numpy )
122 LOAD_METHOD 7 ( isclose )
124 LOAD_FAST 0 ( n )
126 LOAD_FAST 1 ( n )
128 BINARY_MULTIPLY
130 CALL_METHOD 1
132 POP_JUMP_IF_TRUE 128
134 LOAD_FAST 2 ( numpy )
136 LOAD_METHOD 7 ( isclose )
138 LOAD_FAST 0 ( n )
140 LOAD_FAST 1 ( n )
142 BINARY_MULTIPLY
144 CALL_METHOD 1
146 POP_JUMP_IF_TRUE 128
148 LOAD_GLOBAL 8 ( AssertionError )
150 RAISE_VARARGS 1
>> 152 LOAD_CONST 0 ( None )
154 RETURN_VALUE
