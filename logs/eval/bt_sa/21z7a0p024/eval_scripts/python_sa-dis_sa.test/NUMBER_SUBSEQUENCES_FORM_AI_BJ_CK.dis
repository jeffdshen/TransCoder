{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('',),\n    ('abbc',),\n    ('abcabc',),\n    ('agsdbkfdc ',),\n    ('ababab',),\n    ('aaaaaaa',),\n    ('aabaaabcc',),\n    ('19',),\n    ('1001100',),\n    ('DtAnuQbU',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def countSubsequences ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount\n"}
Disassembly of <code object countSubsequences at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( aCount )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 2 ( bCount )

4 8 LOAD_CONST 2 ( 1 )
10 STORE_FAST 3 ( cCount )

5 12 SETUP_LOOP 64 ( to 76 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_FAST 0 ( s )
18 CALL_FUNCTION 1
20 GET_ITER
>> 22 FOR_ITER 48 ( to 74 )
24 STORE_FAST 4 ( i )

6 26 LOAD_FAST 0 ( s )
28 LOAD_FAST 4 ( i )
30 BINARY_SUBSCR
32 LOAD_CONST 3 ( 'a' )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 22

7 38 LOAD_FAST 1 ( sCount )
40 LOAD_FAST 4 ( i )
42 BINARY_SUBSCR
44 LOAD_CONST 4 ( 'a' )
46 COMPARE_OP 2 ( == )
48 POP_JUMP_IF_FALSE 22

8 50 LOAD_FAST 1 ( sCount )
52 LOAD_FAST 4 ( i )
54 BINARY_SUBSCR
56 LOAD_CONST 5 ( 'a' )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 22

9 62 LOAD_FAST 1 ( sCount )
64 LOAD_FAST 4 ( i )
66 BINARY_SUBSCR
68 LOAD_CONST 6 ( 'a' )
70 COMPARE_OP 2 ( == )
72 POP_JUMP_IF_FALSE 22

10 74 LOAD_FAST 1 ( sCount )
76 LOAD_FAST 4 ( i )
78 BINARY_SUBSCR
80 LOAD_CONST 7 ( 'a' )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 22

11 86 LOAD_FAST 1 ( sCount )
88 LOAD_FAST 4 ( i )
90 BINARY_SUBSCR
92 LOAD_CONST 8 ( 'b' )
94 COMPARE_OP 2 ( == )
96 POP_JUMP_IF_FALSE 22

12 98 LOAD_FAST 1 ( sCount )
100 LOAD_FAST 4 ( i )
102 BINARY_SUBSCR
104 LOAD_CONST 9 ( 'b' )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 22

13 110 LOAD_FAST 1 ( sCount )
112 LOAD_FAST 4 ( i )
114 BINARY_SUBSCR
116 LOAD_CONST 10 ( 'a' )
118 COMPARE_OP 2 ( == )
120 POP_JUMP_IF_FALSE 22

14 122 LOAD_FAST 1 ( sCount )
124 LOAD_FAST 4 ( i )
126 BINARY_SUBSCR
128 LOAD_CONST 11 ( 'b' )
130 COMPARE_OP 2 ( == )
132 POP_JUMP_IF_FALSE 22

15 134 LOAD_FAST 1 ( sCount )
136 LOAD_FAST 4 ( i )
138 BINARY_SUBSCR
140 RETURN_VALUE
>> 142 JUMP_ABSOLUTE 22
>> 144 POP_BLOCK
>> 146 LOAD_CONST 0 ( None )
148 RETURN_VALUE