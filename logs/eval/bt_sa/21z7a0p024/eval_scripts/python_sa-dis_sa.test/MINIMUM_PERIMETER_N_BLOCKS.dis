{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( n ) :\n    l = math.sqrt ( n )\n    sq = l * l\n    if ( sq == n ) :\n        return l * 4\n    else :\n        row = n / l\n        perimeter = 2 * ( l + row )\n        if ( n % l != 0 ) :\n            perimeter += 2\n        return perimeter\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (45,),\n    (80,),\n    (54,),\n    (48,),\n    (83,),\n    (68,),\n    (32,),\n    (20,),\n    (68,),\n    (66,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minPerimeter ( n ) :\n    l = math.sqrt ( n )\n    sq = l * l\n    if ( sq == n ) :\n        return l * 4\n    else :\n        row = n / l\n        perimeter = 2 * ( l + row )\n        if ( n % l != 0 ) :\n            perimeter += 2\n        return perimeter\n"}
Disassembly of <code object minPerimeter at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( math )
2 LOAD_METHOD 1 ( sqrt )
4 LOAD_FAST 0 ( n )
6 CALL_METHOD 1
8 STORE_FAST 1 ( l )

3 10 LOAD_FAST 1 ( l )
12 LOAD_FAST 2 ( l )
14 COMPARE_OP 2 ( == )
16 POP_JUMP_IF_FALSE 32

4 18 LOAD_FAST 1 ( l )
20 LOAD_FAST 2 ( l )
22 LOAD_CONST 1 ( 1 )
24 BINARY_ADD
26 COMPARE_OP 2 ( == )
28 POP_JUMP_IF_FALSE 32

5 30 LOAD_FAST 1 ( l )
32 LOAD_FAST 2 ( l )
34 LOAD_CONST 1 ( 1 )
36 BINARY_ADD
38 INPLACE_ADD
40 STORE_FAST 1 ( l )

6 >> 42 LOAD_FAST 1 ( l )
44 LOAD_FAST 2 ( l )
46 LOAD_CONST 1 ( 1 )
48 BINARY_ADD
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 84

7 54 LOAD_FAST 1 ( l )
56 LOAD_CONST 1 ( 1 )
58 BINARY_ADD
60 STORE_FAST 2 ( l )

8 62 LOAD_FAST 1 ( l )
64 LOAD_CONST 1 ( 1 )
66 BINARY_ADD
68 STORE_FAST 1 ( l )

9 70 LOAD_FAST 1 ( l )
72 LOAD_CONST 1 ( 1 )
74 BINARY_ADD
76 STORE_FAST 1 ( l )

10 78 LOAD_FAST 1 ( l )
80 LOAD_FAST 2 ( l )
82 LOAD_CONST 1 ( 1 )
84 BINARY_ADD
86 COMPARE_OP 2 ( == )
88 POP_JUMP_IF_FALSE 100

11 90 LOAD_FAST 1 ( l )
92 LOAD_FAST 2 ( l )
94 LOAD_CONST 1 ( 1 )
96 BINARY_ADD
98 INPLACE_ADD
100 STORE_FAST 1 ( l )

12 >> 102 LOAD_FAST 1 ( l )
104 LOAD_FAST 2 ( l )
106 LOAD_CONST 1 ( 1 )
108 BINARY_ADD
110 INPLACE_ADD
112 STORE_FAST 1 ( l )

13 >> 114 LOAD_FAST 1 ( l )
116 RETURN_VALUE
