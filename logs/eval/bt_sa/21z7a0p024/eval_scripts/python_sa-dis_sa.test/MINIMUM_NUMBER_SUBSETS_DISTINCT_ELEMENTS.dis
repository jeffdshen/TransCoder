{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 2, 5, 8, 16, 21, 21, 22, 23, 26, 26, 27, 27, 29, 31, 33, 36, 37, 37, 38, 42, 45, 47, 50, 57, 58, 60, 60, 62, 63, 66, 66, 76, 84, 84, 88, 96, 99],25,),\n    ([-30, -60, 34, 4, 86, 80, -96, -94, 52, 46, 8, 82, -94, -96, 78, 82, -22, -36, 78, 50, -46, -36, 80, 24, -14, 94, -46, -38, 82, 4, -24, 2, 4, -82, -82, -18, -62, 12, 8, 92, 70, -10],35,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],34,),\n    ([38, 47, 84, 49, 48, 62, 48, 41, 38, 48, 92, 16, 99],6,),\n    ([-88, -64, -40, -38, -38, -16, 16, 20, 28, 40, 56, 58, 60, 68, 74, 92],12,),\n    ([1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],29,),\n    ([14, 24, 82, 87, 95],3,),\n    ([-34, 62, 40, -84, 52, -76, 2, -58, 94, 22, 2, -18, -88, 62, -14, 46, 50, -58, -80, 68, -64, 90, -58, 12, 76, -40, 40, -46, 8, -80, 4, -90, 14, -10, 64, -68],34,),\n    ([0, 1, 1, 1],3,),\n    ([43, 41, 90, 5, 6, 17, 68, 68, 86, 89],7,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def subset ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res\n"}
Disassembly of <code object subset at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( res )

3 4 LOAD_FAST 2 ( res )
6 LOAD_METHOD 0 ( sort )
8 CALL_METHOD 0
10 STORE_FAST 3 ( res )

4 12 SETUP_LOOP 64 ( to 76 )
14 LOAD_GLOBAL 1 ( range )
16 LOAD_CONST 2 ( 0 )
18 LOAD_FAST 1 ( n )
20 CALL_FUNCTION 2
22 GET_ITER
>> 24 FOR_ITER 48 ( to 74 )
26 STORE_FAST 4 ( i )

5 28 LOAD_FAST 2 ( res )
30 LOAD_METHOD 0 ( sort )
32 CALL_METHOD 0
34 STORE_FAST 5 ( count )

6 36 LOAD_FAST 3 ( res )
38 LOAD_METHOD 0 ( sort )
40 LOAD_FAST 5 ( count )
42 CALL_METHOD 1
44 STORE_FAST 6 ( count )

7 46 LOAD_FAST 6 ( count )
48 LOAD_FAST 4 ( i )
50 BINARY_SUBSCR
52 STORE_FAST 7 ( count )

8 54 LOAD_FAST 6 ( count )
56 LOAD_FAST 4 ( i )
58 BINARY_SUBSCR
60 STORE_FAST 8 ( count )

9 62 LOAD_FAST 6 ( count )
64 LOAD_FAST 4 ( i )
66 BINARY_SUBSCR
68 STORE_FAST 9 ( count )

10 70 LOAD_FAST 6 ( count )
72 LOAD_FAST 5 ( count )
74 BINARY_SUBSCR
76 STORE_FAST 10 ( count )

11 78 LOAD_FAST 7 ( count )
80 LOAD_FAST 8 ( count )
82 LOAD_FAST 9 ( count )
84 STORE_SUBSCR

12 86 LOAD_FAST 6 ( count )
88 LOAD_FAST 4 ( i )
90 LOAD_FAST 9 ( count )
92 STORE_SUBSCR
94 JUMP_ABSOLUTE 24
>> 96 POP_BLOCK

13 >> 98 LOAD_FAST 2 ( res )
100 RETURN_VALUE
