{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    res = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] <= res :\n            res = res + arr [ i ]\n        else :\n            break\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([16, 23, 24, 41, 48, 58, 72, 75],4,),\n    ([-14, -82, 12, -14, -38, 12, 40, 12, -74, 42, -36, 64],8,),\n    ([0, 0, 1, 1, 1, 1],5,),\n    ([17, 89, 44],2,),\n    ([-94, -92, -84, -82, -72, -58, -56, -40, -34, -34, -24, -22, -8, -8, 12, 14, 16, 16, 22, 22, 34, 46, 54, 58, 68, 72, 74, 78, 88, 96],25,),\n    ([0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],8,),\n    ([2, 12, 13, 13, 13, 16, 28, 32, 34, 41, 41, 47, 49, 49, 50, 52, 58, 61, 63, 65, 67, 68, 68, 74, 80, 80, 84, 84, 89, 93, 94, 98, 99, 99],23,),\n    ([-54],0,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],33,),\n    ([42, 50, 76, 45, 6, 63, 46, 73, 65, 70, 87, 5, 41, 63, 96, 75, 38, 76, 27, 7, 71, 9, 65, 44, 76, 37, 94, 52, 55, 3, 38, 68, 45, 15, 35, 90, 36, 46, 13, 92, 32, 22, 49, 35, 83],35,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findSmallest ( arr , n ) :\n    res = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] <= res :\n            res = res + arr [ i ]\n        else :\n            break\n    return res\n"}
Disassembly of <code object findSmallest at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 1 )
2 STORE_FAST 2 ( res )

3 4 SETUP_LOOP 64 ( to 66 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_CONST 2 ( 0 )
10 LOAD_FAST 1 ( n )
12 CALL_FUNCTION 2
14 GET_ITER
>> 16 FOR_ITER 48 ( to 64 )
18 STORE_FAST 3 ( i )

4 20 LOAD_FAST 2 ( res )
22 LOAD_FAST 3 ( i )
24 BINARY_SUBSCR
26 LOAD_FAST 0 ( arr )
28 COMPARE_OP 1 ( <= )
30 POP_JUMP_IF_FALSE 40

5 32 LOAD_FAST 2 ( res )
34 LOAD_FAST 3 ( i )
36 BINARY_SUBSCR
38 LOAD_FAST 0 ( arr )
40 COMPARE_OP 1 ( <= )
42 POP_JUMP_IF_FALSE 16

6 44 LOAD_FAST 2 ( res )
46 LOAD_FAST 3 ( i )
48 BINARY_SUBSCR
50 LOAD_FAST 0 ( arr )
52 COMPARE_OP 1 ( <= )
54 POP_JUMP_IF_FALSE 16

7 56 LOAD_FAST 2 ( res )
58 LOAD_FAST 3 ( i )
60 BINARY_SUBSCR
62 LOAD_FAST 0 ( arr )
64 LOAD_FAST 3 ( i )
66 BINARY_SUBSCR
68 LOAD_FAST 0 ( arr )
70 LOAD_FAST 3 ( i )
72 BINARY_SUBSCR
74 BINARY_SUBTRACT
76 LOAD_FAST 0 ( arr )
78 LOAD_FAST 3 ( i )
80 BINARY_SUBSCR
82 BINARY_SUBTRACT
84 LOAD_FAST 0 ( arr )
86 LOAD_FAST 3 ( i )
88 BINARY_SUBSCR
90 BINARY_SUBTRACT
92 LOAD_FAST 0 ( arr )
94 LOAD_FAST 3 ( i )
96 BINARY_SUBSCR
98 BINARY_SUBTRACT
100 LOAD_FAST 0 ( arr )
102 LOAD_FAST 3 ( i )
104 BINARY_SUBSCR
106 BINARY_SUBTRACT
108 LOAD_FAST 0 ( arr )
110 LOAD_FAST 3 ( i )
112 STORE_SUBSCR

8 114 LOAD_FAST 2 ( res )
116 RETURN_VALUE
