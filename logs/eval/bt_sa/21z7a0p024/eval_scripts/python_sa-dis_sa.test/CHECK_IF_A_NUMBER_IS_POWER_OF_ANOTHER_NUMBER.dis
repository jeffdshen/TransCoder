{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x , y ) :\n    if ( x == 1 ) :\n        return ( y == 1 )\n    pow = 1\n    while ( pow < y ) :\n        pow = pow * x\n    return ( pow == y )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (57,1,),\n    (3,9,),\n    (10,101,),\n    (10,10000,),\n    (6,46656,),\n    (2,2048,),\n    (1,40,),\n    (20,79,),\n    (96,98,),\n    (25,5,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isPower ( x , y ) :\n    if ( x == 1 ) :\n        return ( y == 1 )\n    pow = 1\n    while ( pow < y ) :\n        pow = pow * x\n    return ( pow == y )\n"}
Disassembly of <code object isPower at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( x )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_FAST 0 ( x )
10 LOAD_CONST 2 ( 1 )
12 COMPARE_OP 2 ( == )
14 POP_JUMP_IF_FALSE 20

4 16 LOAD_FAST 0 ( x )
18 LOAD_CONST 1 ( 1 )
20 BINARY_SUBTRACT
22 STORE_FAST 1 ( y )

5 >> 24 LOAD_FAST 1 ( y )
26 LOAD_CONST 1 ( 1 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 36

6 32 LOAD_FAST 0 ( x )
34 LOAD_CONST 2 ( 1 )
36 BINARY_SUBTRACT
38 STORE_FAST 1 ( y )

7 40 LOAD_FAST 1 ( y )
42 LOAD_CONST 2 ( 1 )
44 BINARY_SUBTRACT
46 STORE_FAST 2 ( x )

8 48 LOAD_FAST 0 ( x )
50 LOAD_CONST 2 ( 1 )
52 BINARY_SUBTRACT
54 STORE_FAST 1 ( y )

9 56 LOAD_FAST 1 ( y )
58 LOAD_CONST 2 ( 1 )
60 BINARY_SUBTRACT
62 STORE_FAST 2 ( x )

10 64 LOAD_FAST 2 ( x )
66 LOAD_CONST 2 ( 1 )
68 BINARY_SUBTRACT
70 STORE_FAST 3 ( y )

11 72 LOAD_FAST 1 ( y )
74 LOAD_CONST 2 ( 1 )
76 BINARY_SUBTRACT
78 STORE_FAST 4 ( tmp )

12 80 LOAD_FAST 2 ( x )
82 LOAD_CONST 2 ( 1 )
84 BINARY_SUBTRACT
86 LOAD_FAST 1 ( y )
88 BINARY_SUBTRACT
90 LOAD_FAST 1 ( y )
92 BINARY_SUBTRACT
94 LOAD_FAST 2 ( x )
96 BINARY_SUBTRACT
98 LOAD_FAST 3 ( y )
100 BINARY_SUBTRACT
102 LOAD_FAST 4 ( tmp )
104 BINARY_SUBTRACT
106 LOAD_FAST 3 ( y )
108 BINARY_SUBTRACT
110 LOAD_FAST 4 ( tmp )
112 BINARY_SUBTRACT
114 BINARY_TRUE_DIVIDE
116 BINARY_ADD
118 STORE_FAST 5 ( tmp )

13 120 LOAD_FAST 5 ( tmp )
122 LOAD_FAST 4 ( tmp )
124 BINARY_SUBTRACT
126 RETURN_VALUE
