{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x ) :\n    even_bits = x & 0xAAAAAAAA\n    odd_bits = x & 0x55555555\n    even_bits >>= 1\n    odd_bits <<= 1\n    return ( even_bits | odd_bits )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (99,),\n    (94,),\n    (11,),\n    (3,),\n    (77,),\n    (57,),\n    (54,),\n    (66,),\n    (98,),\n    (36,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def swapBits ( x ) :\n    even_bits = x & 0xAAAAAAAA\n    odd_bits = x & 0x55555555\n    even_bits >>= 1\n    odd_bits <<= 1\n    return ( even_bits | odd_bits )\n"}
Disassembly of <code object swapBits at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( x )
2 LOAD_CONST 1 ( 0x255 )
4 BINARY_RSHIFT
6 LOAD_CONST 2 ( 0x255 )
8 BINARY_AND
10 STORE_FAST 1 ( even_bits )

3 12 LOAD_FAST 0 ( x )
14 LOAD_CONST 3 ( 0x255 )
16 BINARY_AND
18 LOAD_CONST 1 ( 1 )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 40

4 24 LOAD_FAST 1 ( even_bits )
26 LOAD_CONST 1 ( 1 )
28 INPLACE_ADD
30 STORE_FAST 1 ( even_bits )

5 32 LOAD_FAST 1 ( even_bits )
34 LOAD_CONST 1 ( 1 )
36 INPLACE_ADD
38 STORE_FAST 1 ( even_bits )

6 >> 40 LOAD_FAST 1 ( even_bits )
42 LOAD_CONST 1 ( 1 )
44 INPLACE_ADD
46 STORE_FAST 1 ( even_bits )

7 48 LOAD_FAST 1 ( even_bits )
50 LOAD_CONST 1 ( 1 )
52 INPLACE_ADD
54 STORE_FAST 1 ( even_bits )

8 56 LOAD_FAST 1 ( even_bits )
58 LOAD_CONST 1 ( 1 )
60 INPLACE_ADD
62 STORE_FAST 1 ( even_bits )

9 64 LOAD_FAST 1 ( even_bits )
66 LOAD_CONST 1 ( 1 )
68 INPLACE_ADD
70 STORE_FAST 1 ( even_bits )

10 72 LOAD_FAST 1 ( even_bits )
74 LOAD_CONST 1 ( 1 )
76 INPLACE_ADD
78 STORE_FAST 1 ( even_bits )

11 80 LOAD_FAST 1 ( even_bits )
82 LOAD_CONST 1 ( 1 )
84 INPLACE_ADD
86 STORE_FAST 1 ( even_bits )

12 88 LOAD_FAST 1 ( even_bits )
90 LOAD_CONST 1 ( 1 )
92 INPLACE_ADD
94 STORE_FAST 1 ( even_bits )

13 96 LOAD_FAST 1 ( even_bits )
98 LOAD_CONST 1 ( 1 )
100 INPLACE_ADD
102 STORE_FAST 1 ( even_bits )

14 104 LOAD_FAST 1 ( even_bits )
106 LOAD_CONST 1 ( 1 )
108 INPLACE_ADD
110 STORE_FAST 1 ( even_bits )

15 112 LOAD_FAST 1 ( even_bits )
114 LOAD_CONST 1 ( 1 )
116 INPLACE_ADD
118 STORE_FAST 1 ( even_bits )

16 120 LOAD_FAST 1 ( even_bits )
122 LOAD_CONST 1 ( 1 )
124 INPLACE_ADD
126 STORE_FAST 1 ( even_bits )

17 128 LOAD_FAST 1 ( even_bits )
130 LOAD_CONST 1 ( 1 )
132 INPLACE_ADD
134 STORE_FAST 1 ( even_bits )

