{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport itertools\n\ndef f_gold ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (37,),\n    (13,),\n    (51,),\n    (69,),\n    (76,),\n    (10,),\n    (97,),\n    (40,),\n    (69,),\n    (4,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findNth ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1\n"}
Disassembly of <code object findNth at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( count )

3 4 SETUP_LOOP 64 ( to 76 )
6 LOAD_GLOBAL 0 ( itertools )
8 LOAD_METHOD 1 ( count )
10 CALL_METHOD 0
12 GET_ITER
>> 14 FOR_ITER 64 ( to 74 )
16 STORE_FAST 2 ( curr )

4 18 LOAD_FAST 0 ( n )
20 LOAD_FAST 2 ( curr )
22 LOAD_CONST 2 ( 1 )
24 BINARY_ADD
26 COMPARE_OP 2 ( == )
28 POP_JUMP_IF_FALSE 14

5 30 LOAD_FAST 0 ( n )
32 LOAD_FAST 2 ( curr )
34 LOAD_CONST 2 ( 1 )
36 BINARY_ADD
38 BINARY_SUBSCR
40 STORE_FAST 0 ( n )

6 42 LOAD_FAST 0 ( n )
44 LOAD_FAST 2 ( curr )
46 LOAD_CONST 2 ( 1 )
48 BINARY_ADD
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 14

7 54 LOAD_FAST 0 ( n )
56 LOAD_FAST 2 ( curr )
58 LOAD_CONST 2 ( 1 )
60 BINARY_ADD
62 INPLACE_ADD
64 STORE_FAST 0 ( n )
66 JUMP_ABSOLUTE 14
>> 68 POP_BLOCK

8 >> 70 LOAD_FAST 1 ( count )
72 RETURN_VALUE
