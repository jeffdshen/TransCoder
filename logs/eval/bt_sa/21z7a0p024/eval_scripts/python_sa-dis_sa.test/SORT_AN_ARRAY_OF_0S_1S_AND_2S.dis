{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([5, 6, 8, 15, 42, 47, 49, 52, 53, 54, 55, 58, 58, 60, 60, 68, 70, 86, 94, 96, 97, 99],18,),\n    ([-87, 14, 24, 6, 58, 47, 45, 20, -37, -81, -8, -42, 83, -10, 17, -38],14,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],4,),\n    ([1, 16, 61, 64, 63, 69, 22, 93, 67, 76, 26, 16, 51, 86, 57, 29, 78, 92, 69, 47, 94, 62, 69, 76, 16, 90, 90, 48, 85, 39, 33, 94, 23, 10, 69, 34, 52, 95, 10, 19],20,),\n    ([-98, -96, -84, -76, -20],2,),\n    ([1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],15,),\n    ([7, 8, 10, 12, 21, 23, 24, 24, 26, 29, 34, 36, 36, 36, 37, 49, 55, 58, 62, 64, 68, 73, 74, 75, 81, 82, 87, 89, 90, 90, 93, 96, 96, 99, 99],29,),\n    ([-1, 5, -70, -83, 13, -38, -16, 12, -14, 41, 87, -81, 77, 0, 40, 89, 47, -24, -91, 99, -72, 28, -48],13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,),\n    ([29, 37, 38, 83, 8],2,)\n        ]\n    filled_function_param = [\n    ([5, 6, 8, 15, 42, 47, 49, 52, 53, 54, 55, 58, 58, 60, 60, 68, 70, 86, 94, 96, 97, 99],18,),\n    ([-87, 14, 24, 6, 58, 47, 45, 20, -37, -81, -8, -42, 83, -10, 17, -38],14,),\n    ([0, 0, 0, 0, 1, 1, 1, 1, 1],4,),\n    ([1, 16, 61, 64, 63, 69, 22, 93, 67, 76, 26, 16, 51, 86, 57, 29, 78, 92, 69, 47, 94, 62, 69, 76, 16, 90, 90, 48, 85, 39, 33, 94, 23, 10, 69, 34, 52, 95, 10, 19],20,),\n    ([-98, -96, -84, -76, -20],2,),\n    ([1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1],15,),\n    ([7, 8, 10, 12, 21, 23, 24, 24, 26, 29, 34, 36, 36, 36, 37, 49, 55, 58, 62, 64, 68, 73, 74, 75, 81, 82, 87, 89, 90, 90, 93, 96, 96, 99, 99],29,),\n    ([-1, 5, -70, -83, 13, -38, -16, 12, -14, 41, 87, -81, 77, 0, 40, 89, 47, -24, -91, 99, -72, 28, -48],13,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],24,),\n    ([29, 37, 38, 83, 8],2,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def sort012 ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1\n"}
Disassembly of <code object sort012 at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( lo )

3 4 LOAD_FAST 2 ( lo )
6 LOAD_CONST 2 ( 1 )
8 BINARY_SUBTRACT
10 STORE_FAST 3 ( mid )

4 12 LOAD_CONST 1 ( 0 )
14 STORE_FAST 4 ( mid )

5 16 SETUP_LOOP 64 ( to 76 )
>> 18 LOAD_FAST 1 ( arr_size )
20 LOAD_FAST 2 ( lo )
22 COMPARE_OP 1 ( <= )
24 POP_JUMP_IF_FALSE 74

6 26 LOAD_FAST 1 ( arr_size )
28 LOAD_FAST 2 ( lo )
30 COMPARE_OP 1 ( <= )
32 POP_JUMP_IF_FALSE 48

7 34 LOAD_FAST 1 ( arr_size )
36 LOAD_FAST 2 ( lo )
38 COMPARE_OP 1 ( <= )
40 POP_JUMP_IF_FALSE 48

8 42 LOAD_FAST 1 ( arr_size )
44 LOAD_FAST 2 ( lo )
46 BINARY_SUBSCR
48 STORE_FAST 5 ( a )
50 JUMP_FORWARD 4 ( to 58 )

10 >> 52 LOAD_FAST 1 ( arr_size )
54 LOAD_FAST 2 ( lo )
56 COMPARE_OP 1 ( <= )
58 POP_JUMP_IF_FALSE 70

11 60 LOAD_FAST 1 ( arr_size )
62 LOAD_FAST 2 ( lo )
64 BINARY_SUBSCR
66 LOAD_FAST 5 ( a )
68 BINARY_SUBSCR
70 LOAD_FAST 5 ( a )
72 BINARY_SUBSCR
74 LOAD_FAST 5 ( a )
76 BINARY_SUBSCR
78 LOAD_FAST 5 ( a )
80 BINARY_SUBSCR
82 LOAD_FAST 5 ( a )
84 BINARY_SUBSCR
86 LOAD_FAST 5 ( a )
88 BINARY_SUBSCR
90 LOAD_FAST 5 ( a )
92 BINARY_SUBSCR
94 LOAD_FAST 5 ( a )
96 BINARY_SUBSCR
98 LOAD_FAST 5 ( a )
100 STORE_SUBSCR

12 102 LOAD_FAST 1 ( arr_size )
104 LOAD_FAST 2 ( lo )
106 BINARY_SUBSCR
108 LOAD_FAST 5 ( a )
110 LOAD_FAST 2 ( lo )
112 BINARY_SUBSCR
114 LOAD_FAST 5 ( a )
116 STORE_SUBSCR

13 118 LOAD_FAST 1 ( arr_size )
120 LOAD_FAST 2 ( lo )
122 BINARY_SUBSCR
124 LOAD_FAST 5 ( a )
126 STORE_SUBSCR

14 128 LOAD_FAST 1 ( arr_size )
130 LOAD_FAST 2 ( lo )
132 BINARY_SUBSCR
134 LOAD_FAST 5 ( a )
136 STORE_SUBSCR

15 138 LOAD_FAST 1 ( arr_size )
140 LOAD_FAST 2 ( lo )
142 LOAD_FAST 3 ( mid )
144 BINARY_SUBSCR
146 LOAD_FAST 5 ( a )
148 STORE_SUBSCR

16 150 LOAD_FAST 1 ( arr_size )
152 LOAD_FAST 2 ( lo )
154 LOAD_FAST 3 ( mid )
156 STORE_SUBSCR

17 158