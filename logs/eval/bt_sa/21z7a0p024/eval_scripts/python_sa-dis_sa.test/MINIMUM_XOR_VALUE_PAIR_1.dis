{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport sys\n\ndef f_gold ( arr , n ) :\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        val = arr [ i ] ^ arr [ i + 1 ] ;\n        minXor = min ( minXor , val ) ;\n    return minXor\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([8, 11, 12, 27, 32, 32, 36, 56, 57, 66, 68, 70, 74, 78, 82, 83, 96],10,),\n    ([40, 48, 66, 4, -60, 42, -8, 38],7,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([98, 6, 82, 95, 87, 20, 11, 63, 78, 70, 37, 12, 57, 67, 10, 49, 38, 28, 86, 7, 61, 50, 32, 68, 91, 66, 57, 29, 2, 64, 65, 15, 16, 4, 7, 76, 44, 52, 81, 89, 3, 36, 57, 95, 48, 24],36,),\n    ([-88, -84, -76, -58, -40, -38, -28, -24, -20, -14, -12, 16, 20, 28, 28, 30, 40, 44, 56, 58, 60, 92, 92],13,),\n    ([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0],20,),\n    ([6, 6, 19, 31, 41, 45, 49, 56, 78, 96, 98],6,),\n    ([62, -90, 22, -84, -4],3,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([83, 13, 43, 99, 34, 74, 56, 20, 93, 65, 92, 58, 91, 72, 37, 10, 39, 7, 29, 69, 42, 28],14,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minXOR ( arr , n ) :\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        val = arr [ i ] ^ arr [ i + 1 ] ;\n        minXor = min ( minXor , val ) ;\n    return minXor\n"}
Disassembly of <code object minXOR at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 LOAD_GLOBAL 1 ( int )
10 LOAD_GLOBAL 2 ( sys )
12 LOAD_ATTR 3 ( float_info )
14 LOAD_METHOD 4 ( max )
16 CALL_METHOD 0
18 CALL_FUNCTION 1
20 STORE_FAST 1 ( val )

4 22 LOAD_CONST 1 ( 0 )
24 STORE_FAST 2 ( val )

5 26 SETUP_LOOP 54 ( to 86 )
28 LOAD_GLOBAL 5 ( range )
30 LOAD_CONST 2 ( 0 )
32 LOAD_FAST 1 ( val )
34 CALL_FUNCTION 2
36 GET_ITER
>> 38 FOR_ITER 46 ( to 84 )
40 STORE_FAST 3 ( i )

6 42 LOAD_FAST 0 ( arr )
44 LOAD_METHOD 6 ( append )
46 LOAD_FAST 3 ( i )
48 CALL_METHOD 1
50 POP_TOP

7 52 LOAD_FAST 0 ( arr )
54 LOAD_METHOD 7 ( append )
56 LOAD_FAST 1 ( val )
58 CALL_METHOD 1
60 POP_TOP

8 62 LOAD_FAST 0 ( arr )
64 LOAD_METHOD 8 ( append )
66 LOAD_FAST 3 ( i )
68 CALL_METHOD 1
70 POP_TOP

9 72 LOAD_FAST 0 ( arr )
74 RETURN_VALUE
