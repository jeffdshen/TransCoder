{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('ZNHGro','jAdbtDUYQu',3,),\n    ('382880806774','65565',10,),\n    ('0','00100010100',2,),\n    ('lxHTRFCTSQ','sViXYE',89,),\n    ('6399914758','780990121',9,),\n    ('01100011100000','0100',0,),\n    ('WkGqlob','NpQVdXzEtUZy',6,),\n    ('46974006151','74438',11,),\n    ('1001001','1000010',15,),\n    ('IJQ','nFOHAeYEAp',42,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isConvertible ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False\n"}
Disassembly of <code object isConvertible at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( str1 )
4 CALL_FUNCTION 1
6 LOAD_GLOBAL 0 ( len )
8 LOAD_FAST 0 ( str1 )
10 CALL_FUNCTION 1
12 COMPARE_OP 0 ( < )
14 POP_JUMP_IF_FALSE 20

3 16 LOAD_CONST 1 ( 0 )
18 RETURN_VALUE

4 >> 20 SETUP_LOOP 64 ( to 80 )
22 LOAD_GLOBAL 0 ( range )
24 LOAD_FAST 0 ( str1 )
26 CALL_FUNCTION 1
28 GET_ITER
>> 30 FOR_ITER 64 ( to 78 )
32 STORE_FAST 2 ( i )

5 34 LOAD_FAST 0 ( str1 )
36 LOAD_FAST 2 ( i )
38 BINARY_SUBSCR
40 LOAD_METHOD 1 ( lower )
42 CALL_METHOD 0
44 COMPARE_OP 2 ( == )
46 POP_JUMP_IF_FALSE 48

6 48 LOAD_CONST 1 ( 0 )
50 RETURN_VALUE

7 >> 52 LOAD_FAST 0 ( str1 )
54 LOAD_FAST 2 ( i )
56 BINARY_SUBSCR
58 LOAD_METHOD 1 ( lower )
60 CALL_METHOD 0
62 STORE_FAST 0 ( str1 )

8 64 LOAD_FAST 0 ( str1 )
66 LOAD_FAST 2 ( i )
68 BINARY_SUBSCR
70 LOAD_METHOD 1 ( lower )
72 CALL_METHOD 0
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 30

9 78 LOAD_CONST 1 ( 0 )
80 RETURN_VALUE

10 >> 82 LOAD_FAST 0 ( str1 )
84 LOAD_FAST 2 ( i )
86 BINARY_SUBSCR
88 LOAD_METHOD 1 ( lower )
90 CALL_METHOD 0
92 COMPARE_OP 2 ( == )
94 POP_JUMP_IF_FALSE 30

11 96 LOAD_CONST 1 ( 0 )
98 RETURN_VALUE

12 >> 100 LOAD_FAST 0 ( str1 )
102 LOAD_FAST 2 ( i )
104 BINARY_SUBSCR
106 LOAD_METHOD 1 ( lower )
108 CALL_METHOD 0
110 COMPARE_OP 2 ( == )
112 POP_JUMP_IF_FALSE 120

13 114 LOAD_CONST 1 ( 0 )
116 RETURN_VALUE

14 >> 118 LOAD_FAST 0 ( str1 )
120 LOAD_FAST 2 ( i )
122 BINARY_SUBSCR
124 LOAD_METHOD 1 ( lower )
126 CALL_METHOD 0
128 COMPARE_OP 2 ( == )
130 POP_JUMP_IF_FALSE 30

15 132 LOAD_CONST 1 ( 0 )
134 RETURN_VALUE

16 >> 136 LOAD_CONST 1 ( 0 )
138 RETURN_VALUE

17 >> 140 LOAD_CONST 2 ( 0 )
142 RETURN_VALUE
