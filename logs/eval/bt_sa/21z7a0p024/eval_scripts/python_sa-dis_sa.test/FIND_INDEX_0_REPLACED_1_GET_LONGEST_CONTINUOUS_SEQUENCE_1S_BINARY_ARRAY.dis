{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 8, 9, 13, 13, 19, 19, 21, 21, 24, 28, 28, 29, 29, 29, 32, 34, 38, 39, 43, 45, 46, 57, 59, 62, 63, 67, 67, 68, 69, 70, 70, 71, 72, 74, 74, 76, 78, 79, 81, 90, 90, 95, 96, 98],36,),\n    ([28, 92, -16, 0, 6, 12, -88, 42, -48, 72, 2, -38, 80, 82, 96, 32, -42, -38, 62, -76, 20, -10, 2, -48, 4, 88, -24, -72, 32, -42, -48, -62, 38],20,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],39,),\n    ([70, 83, 9, 51, 11, 81, 27, 26, 37, 46],7,),\n    ([50, 88],1,),\n    ([0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1],6,),\n    ([96],0,),\n    ([18, 78, 14, 60, -12, -86, 32, 74, 74, 96, 58, 28, -42, 28, -18, -58, -82, -58, 22, 6, 2, -6, -4, -98],21,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([58, 22, 15, 85, 8, 74, 93, 76, 44, 51, 43, 93, 20, 51, 52, 35, 17, 13, 96, 82, 23, 51, 44, 18, 45, 79, 66, 48, 16, 31, 62, 99, 46, 66, 53, 89, 87, 2, 87, 20, 30],24,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxOnesIndex ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index\n"}
Disassembly of <code object maxOnesIndex at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( max_count )

3 4 LOAD_CONST 2 ( 1 )
6 STORE_FAST 3 ( max_index )

4 8 LOAD_CONST 3 ( - 1 )
10 STORE_FAST 4 ( prev_one )

5 12 SETUP_LOOP 64 ( to 76 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_FAST 1 ( n )
18 CALL_FUNCTION 1
20 GET_ITER
>> 22 FOR_ITER 48 ( to 74 )
24 STORE_FAST 5 ( line )

6 26 LOAD_FAST 0 ( arr )
28 LOAD_FAST 5 ( line )
30 COMPARE_OP 2 ( == )
32 POP_JUMP_IF_FALSE 42

7 34 LOAD_FAST 2 ( max_count )
36 LOAD_CONST 4 ( 1 )
38 INPLACE_ADD
40 STORE_FAST 2 ( max_count )

8 >> 42 LOAD_FAST 0 ( arr )
44 LOAD_FAST 5 ( line )
46 COMPARE_OP 2 ( == )
48 POP_JUMP_IF_FALSE 22

9 50 LOAD_FAST 2 ( max_count )
52 LOAD_CONST 5 ( 1 )
54 INPLACE_ADD
56 STORE_FAST 2 ( max_count )
58 JUMP_ABSOLUTE 22
>> 60 POP_BLOCK

10 >> 62 LOAD_FAST 2 ( max_count )
64 LOAD_CONST 6 ( 2 )
66 INPLACE_ADD
68 STORE_FAST 2 ( max_count )
70 JUMP_ABSOLUTE 22
>> 72 POP_BLOCK

11 >> 74 LOAD_FAST 2 ( max_count )
76 RETURN_VALUE
