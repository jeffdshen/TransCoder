{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n   ('abbc',96,),\n('abahk',7,),\n('hugbabab',5,),\n('abadbc',60,),\n('nkg9',8,),\n('jh7dab',41,),\n('abd',87,),\n('aabb8yk',4,),\n('1111',18,),\n('PFXAhr',8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2\n"}
Disassembly of <code object countOccurrences at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 2 ( n )

3 8 LOAD_CONST 1 ( 0 )
10 STORE_FAST 3 ( c2 )

4 12 LOAD_CONST 2 ( 0 )
14 STORE_FAST 4 ( c1 )

5 16 SETUP_LOOP 64 ( to 76 )
>> 18 LOAD_FAST 1 ( n )
20 LOAD_FAST 2 ( n )
22 COMPARE_OP 0 ( < )
24 POP_JUMP_IF_FALSE 74

6 26 LOAD_FAST 1 ( n )
28 LOAD_FAST 2 ( n )
30 BINARY_SUBSCR
32 LOAD_CONST 3 ( 1 )
34 BINARY_SUBTRACT
36 INPLACE_ADD
38 STORE_FAST 1 ( n )

7 40 LOAD_FAST 1 ( n )
42 LOAD_FAST 2 ( n )
44 INPLACE_ADD
46 STORE_FAST 1 ( n )

8 48 LOAD_FAST 1 ( n )
50 LOAD_FAST 2 ( n )
52 INPLACE_ADD
54 STORE_FAST 1 ( n )

9 56 LOAD_FAST 2 ( n )
58 LOAD_FAST 3 ( c2 )
60 INPLACE_ADD
62 STORE_FAST 2 ( n )

10 64 LOAD_FAST 1 ( n )
66 LOAD_FAST 2 ( n )
68 INPLACE_ADD
70 STORE_FAST 2 ( n )
72 JUMP_ABSOLUTE 18
>> 74 POP_BLOCK

11 >> 76 LOAD_FAST 3 ( c2 )
78 RETURN_VALUE
