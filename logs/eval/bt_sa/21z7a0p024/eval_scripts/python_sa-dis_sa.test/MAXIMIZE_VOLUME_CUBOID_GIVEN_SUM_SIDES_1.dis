{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    length = int ( s / 3 )\n    s -= length\n    breadth = s / 2\n    height = s - breadth\n    return int ( length * breadth * height )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (8,),\n    (96,),\n    (96,),\n    (96,),\n    (12,),\n    (95,),\n    (72,),\n    (81,),\n    (42,),\n    (13,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxvolume ( s ) :\n    length = int ( s / 3 )\n    s -= length\n    breadth = s / 2\n    height = s - breadth\n    return int ( length * breadth * height )\n"}
Disassembly of <code object maxvolume at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( int )
2 LOAD_FAST 0 ( s )
4 LOAD_CONST 1 ( 3 )
6 LOAD_CONST 2 ( 3 )
8 CALL_FUNCTION 2
10 STORE_FAST 1 ( length )

3 12 LOAD_FAST 1 ( length )
14 LOAD_CONST 1 ( 3 )
16 BINARY_FLOOR_DIVIDE
18 STORE_FAST 2 ( length )

4 20 LOAD_FAST 1 ( length )
22 LOAD_CONST 1 ( 3 )
24 BINARY_FLOOR_DIVIDE
26 STORE_FAST 1 ( length )

5 28 LOAD_FAST 1 ( length )
30 LOAD_CONST 1 ( 3 )
32 BINARY_FLOOR_DIVIDE
34 STORE_FAST 1 ( length )

6 36 LOAD_FAST 1 ( length )
38 LOAD_CONST 1 ( 3 )
40 BINARY_FLOOR_DIVIDE
42 STORE_FAST 2 ( length )

7 44 LOAD_FAST 1 ( length )
46 LOAD_CONST 1 ( 3 )
48 BINARY_FLOOR_DIVIDE
50 STORE_FAST 1 ( length )

8 52 LOAD_FAST 1 ( length )
54 LOAD_CONST 1 ( 3 )
56 BINARY_FLOOR_DIVIDE
58 STORE_FAST 1 ( length )

9 60 LOAD_FAST 1 ( length )
62 LOAD_CONST 1 ( 3 )
64 BINARY_FLOOR_DIVIDE
66 STORE_FAST 2 ( length )

10 68 LOAD_FAST 2 ( length )
70 LOAD_FAST 1 ( length )
72 LOAD_CONST 1 ( 3 )
74 BINARY_FLOOR_DIVIDE
76 STORE_FAST 3 ( s )

11 78 LOAD_FAST 2 ( length )
80 LOAD_FAST 3 ( s )
82 LOAD_CONST 1 ( 3 )
84 BINARY_FLOOR_DIVIDE
86 STORE_FAST 2 ( length )

12 88 LOAD_FAST 1 ( length )
90 LOAD_FAST 3 ( s )
92 LOAD_CONST 1 ( 3 )
94 BINARY_FLOOR_DIVIDE
96 BINARY_ADD
98 STORE_FAST 4 ( s )

13 100 LOAD_FAST 2 ( length )
102 LOAD_FAST 3 ( s )
104 LOAD_CONST 1 ( 3 )
106 BINARY_FLOOR_DIVIDE
108 STORE_FAST 2 ( length )

14 110 LOAD_FAST 2 ( length )
112 LOAD_FAST 3 ( s )
114 LOAD_CONST 1 ( 3 )
116 BINARY_FLOOR_DIVIDE
118 BINARY_SUBTRACT
120 STORE_FAST 2 ( length )

15 122 LOAD_FAST 2 ( length )
124 LOAD_FAST 3 ( s )
126 LOAD_CONST 1 ( 3 )
128 BINARY_FLOOR_DIVIDE
130 BINARY_SUBTRACT
132 LOAD_FAST 2 ( length )
134 BINARY_ADD
136 LOAD_FAST 3 ( s )
138 BUILD_TUPLE 3
140 RETURN_VALUE
