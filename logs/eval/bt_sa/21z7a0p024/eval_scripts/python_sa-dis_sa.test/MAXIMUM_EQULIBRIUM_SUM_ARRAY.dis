{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport sys\n\ndef f_gold ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([3, 3, 9, 19, 22, 27, 32, 41, 45, 63, 66, 67, 81, 91],13,),\n    ([-64, -2, 68, -48, 22, -14, -98],4,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],19,),\n    ([86, 79, 23, 55, 4, 22, 37, 1, 72, 22, 82, 62, 96, 47],8,),\n    ([-96, -96, -96, -96, -92, -82, -72, -72, -62, -58, -52, -48, -44, -44, -40, -34, -28, -26, -26, 0, 0, 2, 4, 4, 12, 12, 18, 34, 36, 40, 48, 48, 54, 60, 66, 66, 72, 76, 78, 82, 82, 96, 98],33,),\n    ([0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0],38,),\n    ([2, 3, 7, 13, 20, 24, 39, 49, 53, 58, 72, 80, 90, 99],11,),\n    ([-48, 44, 60, -30, 8, 20, 70, -50, 80, -2, -28, -14],11,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],16,),\n    ([64, 13, 18, 3, 22, 29, 51, 45, 21, 13, 47, 15, 17, 34, 60, 99, 30, 54, 16, 47, 13, 49, 60, 66, 28, 57, 85, 66, 65, 7, 62, 29, 9],21,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findMaxSum ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res\n"}
Disassembly of <code object findMaxSum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( - sys . maxsize - 1 )
2 STORE_FAST 2 ( res )

3 4 LOAD_CONST 2 ( - 1 )
6 STORE_FAST 3 ( res )

4 8 SETUP_LOOP 64 ( to 74 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_FAST 1 ( n )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 48 ( to 72 )
20 STORE_FAST 4 ( i )

5 22 SETUP_LOOP 48 ( to 70 )
24 LOAD_GLOBAL 0 ( range )
26 LOAD_FAST 1 ( n )
28 CALL_FUNCTION 1
30 GET_ITER
>> 32 FOR_ITER 48 ( to 68 )
34 STORE_FAST 5 ( j )

6 36 LOAD_FAST 2 ( res )
38 LOAD_FAST 5 ( j )
40 COMPARE_OP 4 ( > )
42 POP_JUMP_IF_FALSE 32

7 44 LOAD_FAST 2 ( res )
46 LOAD_FAST 5 ( j )
48 BINARY_SUBSCR
50 STORE_FAST 6 ( j )

8 52 LOAD_FAST 2 ( res )
54 LOAD_FAST 5 ( j )
56 BINARY_SUBSCR
58 LOAD_FAST 6 ( j )
60 COMPARE_OP 4 ( > )
62 POP_JUMP_IF_FALSE 32

9 64 LOAD_FAST 2 ( res )
66 LOAD_FAST 5 ( j )
68 BINARY_SUBSCR
70 LOAD_FAST 6 ( j )
72 BINARY_SUBSCR
74 LOAD_FAST 6 ( j )
76 BINARY_SUBSCR
78 LOAD_FAST 6 ( j )
80 BINARY_SUBSCR
82 LOAD_FAST 6 ( j )
84 BINARY_SUBSCR
86 LOAD_FAST 6 ( j )
88 STORE_SUBSCR
90 JUMP_ABSOLUTE 32
>> 92 POP_BLOCK
>> 94 JUMP_ABSOLUTE 18
>> 96 POP_BLOCK

10 >> 98 LOAD_FAST 2 ( res )
100 RETURN_VALUE
