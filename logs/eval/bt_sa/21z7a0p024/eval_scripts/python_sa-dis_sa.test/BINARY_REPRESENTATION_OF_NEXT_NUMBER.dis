{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('DXh',),\n    ('48703586411816',),\n    ('0001',),\n    ('yWg WvjNKS',),\n    ('8408568459',),\n    ('01',),\n    ('DFECZ CWtN',),\n    ('37742236',),\n    ('001101',),\n    ('LDxERLmYn',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def nextGreater ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;\n"}
Disassembly of <code object nextGreater at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( num1 )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( l )

3 8 LOAD_GLOBAL 1 ( list )
10 LOAD_FAST 0 ( num1 )
12 CALL_FUNCTION 1
14 STORE_FAST 2 ( l )

4 16 LOAD_CONST 1 ( - 1 )
18 STORE_FAST 3 ( l )

5 20 SETUP_LOOP 64 ( to 94 )
22 LOAD_FAST 1 ( l )
24 GET_ITER
>> 26 FOR_ITER 64 ( to 92 )
28 STORE_FAST 4 ( i )

6 30 LOAD_FAST 2 ( l )
32 LOAD_CONST 2 ( 0 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 48

7 38 LOAD_FAST 2 ( l )
40 LOAD_CONST 2 ( 0 )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 26

8 46 LOAD_FAST 2 ( l )
48 LOAD_CONST 2 ( 0 )
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 26

9 54 LOAD_FAST 2 ( l )
56 LOAD_CONST 2 ( 0 )
58 BINARY_SUBSCR
60 LOAD_CONST 2 ( 0 )
62 COMPARE_OP 2 ( == )
64 POP_JUMP_IF_FALSE 26

10 66 LOAD_FAST 2 ( l )
68 LOAD_CONST 2 ( 0 )
70 BINARY_SUBSCR
72 LOAD_CONST 2 ( 0 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 26

11 78 LOAD_FAST 2 ( l )
80 LOAD_CONST 2 ( 0 )
82 BINARY_SUBSCR
84 LOAD_CONST 2 ( 0 )
86 COMPARE_OP 2 ( == )
88 POP_JUMP_IF_FALSE 26

12 90 LOAD_FAST 2 ( l )
92 LOAD_CONST 2 ( 0 )
94 BINARY_SUBSCR
96 LOAD_CONST 2 ( 0 )
98 COMPARE_OP 2 ( == )
100 POP_JUMP_IF_FALSE 26

13 102 LOAD_FAST 2 ( l )
104 LOAD_CONST 2 ( 0 )
106 BINARY_SUBSCR
108 LOAD_CONST 2 ( 0 )
110 COMPARE_OP 2 ( == )
112 POP_JUMP_IF_FALSE 26

14 114 LOAD_FAST 2 ( l )
116 LOAD_CONST 2 ( 0 )
118 BINARY_SUBSCR
120 LOAD_CONST 2 ( 0 )
122 COMPARE_OP 2 ( == )
124 POP_JUMP_IF_FALSE 26

15 126 LOAD_FAST 2 ( l )
128 LOAD_CONST 2 ( 0 )
130 COMPARE_OP 2 ( == )
132 POP_JUMP_IF_FALSE 26

16 134 LOAD_FAST 2 ( l )
136 LOAD_CONST 2 ( 0 )
138 BINARY_SUBSCR
140 STORE_FAST 2 ( l )
142 JUMP_ABSOLUTE 26
>> 144 POP_BLOCK

17 >> 146 LOAD_FAST 2 ( l )
148 RETURN_VALUE
