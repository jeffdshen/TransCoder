{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    result = 0\n    for i in range ( len ( str ) ) :\n        if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i == ord ( str [ i ] ) - ord ( 'A' ) ) ) :\n            result += 1\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('lLkhFeZGcb',),\n    ('ABcED',),\n    ('geeksforgeeks',),\n    ('Alphabetical',),\n    ('abababab',),\n    ('bcdefgxyz',),\n    ('cBzaqx L',),\n    (' bcd',),\n    ('11',),\n    ('MqqKY',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findCount ( str ) :\n    result = 0\n    for i in range ( len ( str ) ) :\n        if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i == ord ( str [ i ] ) - ord ( 'A' ) ) ) :\n            result += 1\n    return result\n"}
Disassembly of <code object findCount at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( result )

3 4 SETUP_LOOP 64 ( to 66 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_GLOBAL 1 ( len )
10 LOAD_FAST 0 ( str )
12 CALL_FUNCTION 1
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 48 ( to 64 )
20 STORE_FAST 2 ( i )

4 22 LOAD_GLOBAL 2 ( int )
24 LOAD_FAST 0 ( str )
26 LOAD_FAST 2 ( i )
28 BINARY_SUBSCR
30 CALL_FUNCTION 1
32 LOAD_CONST 2 ( 1 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 42

5 38 LOAD_FAST 1 ( result )
40 LOAD_METHOD 3 ( append )
42 LOAD_FAST 0 ( str )
44 CALL_METHOD 1
46 POP_TOP

6 48 LOAD_FAST 1 ( result )
50 LOAD_METHOD 4 ( append )
52 LOAD_FAST 0 ( str )
54 CALL_METHOD 1
56 POP_TOP

7 58 LOAD_FAST 1 ( result )
60 LOAD_METHOD 5 ( append )
62 LOAD_FAST 0 ( str )
64 LOAD_FAST 2 ( i )
66 BINARY_SUBSCR
68 CALL_METHOD 1
70 POP_TOP

8 72 LOAD_FAST 1 ( result )
74 LOAD_METHOD 6 ( append )
76 LOAD_FAST 0 ( str )
78 LOAD_FAST 2 ( i )
80 BINARY_SUBSCR
82 CALL_METHOD 1
84 POP_TOP
86 JUMP_ABSOLUTE 18
>> 88 POP_BLOCK
>> 90 LOAD_CONST 0 ( None )
92 RETURN_VALUE
