{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n , x ) :\n    i = 0\n    while ( i <= n - 1 ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i += abs ( arr [ i ] - x )\n    return - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([5, 4, 5, 6, 5, 4, 3, 2],29,6,),\n    ([5, 4, 5, 6, 5, 4, 3, 2],19,3,),\n    ([0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],37,1,),\n    ([50,51,52,51,50,49,48],17,49,),\n    ([-86,-68,-32,-6,6,10,30,34,58,92],6,6,),\n    ([1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,0],27,22,),\n    ([58],0,0,),\n    ([-64,78,58,36,48,80,-80,74,-98,46,-48,24,80,72,90,-46,14,68,38,58,-54,80,44,-62,34,-28,92,84,90,44,-26,88,18,22,-32,54,58,92],24,34,),\n    ([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],35,1,),\n    ([5],0,0,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def search ( arr , n , x ) :\n    i = 0\n    while ( i <= n - 1 ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i += abs ( arr [ i ] - x )\n    return - 1\n"}
Disassembly of <code object search at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( i )

3 4 SETUP_LOOP 26 ( to 32 )
6 LOAD_FAST 0 ( arr )
8 LOAD_CONST 2 ( 1 )
10 LOAD_CONST 0 ( None )
12 BUILD_SLICE 2
14 BINARY_SUBSCR
16 GET_ITER
>> 18 FOR_ITER 18 ( to 30 )
20 STORE_FAST 3 ( i )

4 22 LOAD_FAST 1 ( n )
24 LOAD_FAST 2 ( i )
26 BINARY_SUBSCR
28 LOAD_FAST 1 ( n )
30 COMPARE_OP 2 ( == )
32 POP_JUMP_IF_FALSE 18

5 34 LOAD_FAST 2 ( i )
36 LOAD_FAST 1 ( n )
38 BINARY_SUBSCR
40 LOAD_FAST 1 ( n )
42 COMPARE_OP 2 ( == )
44 POP_JUMP_IF_FALSE 18

6 46 LOAD_FAST 2 ( i )
48 LOAD_FAST 1 ( n )
50 BINARY_SUBSCR
52 LOAD_FAST 1 ( n )
54 COMPARE_OP 2 ( == )
56 POP_JUMP_IF_FALSE 18

7 58 LOAD_FAST 2 ( i )
60 RETURN_VALUE

8 >> 62 LOAD_FAST 2 ( i )
64 LOAD_CONST 3 ( 1 )
66 BINARY_SUBTRACT
68 LOAD_FAST 1 ( n )
70 COMPARE_OP 4 ( > )
72 POP_JUMP_IF_FALSE 18

9 74 LOAD_FAST 2 ( i )
76 RETURN_VALUE
78 JUMP_ABSOLUTE 18
>> 80 POP_BLOCK

10 >> 82 LOAD_FAST 2 ( i )
84 RETURN_VALUE
