{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    sum = 0\n    for i in range ( 1 , n + 1 ) :\n        sum += int ( n / i ) * i\n    return int ( sum )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (73,),\n    (41,),\n    (36,),\n    (28,),\n    (49,),\n    (24,),\n    (85,),\n    (59,),\n    (82,),\n    (40,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def divisorSum ( n ) :\n    sum = 0\n    for i in range ( 1 , n + 1 ) :\n        sum += int ( n / i ) * i\n    return int ( sum )\n"}
Disassembly of <code object divisorSum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( sum )

3 4 SETUP_LOOP 64 ( to 76 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_CONST 2 ( 1 )
10 LOAD_FAST 0 ( n )
12 LOAD_CONST 2 ( 1 )
14 BINARY_ADD
16 CALL_FUNCTION 2
18 GET_ITER
>> 20 FOR_ITER 48 ( to 74 )
22 STORE_FAST 2 ( i )

4 24 LOAD_GLOBAL 1 ( int )
26 LOAD_FAST 2 ( i )
28 LOAD_CONST 2 ( 1 )
30 BINARY_ADD
32 LOAD_FAST 1 ( sum )
34 LOAD_CONST 2 ( 1 )
36 BINARY_ADD
38 CALL_FUNCTION 2
40 STORE_FAST 1 ( sum )

5 42 LOAD_FAST 1 ( sum )
44 LOAD_FAST 1 ( sum )
46 LOAD_FAST 0 ( n )
48 BINARY_MULTIPLY
50 LOAD_FAST 1 ( sum )
52 LOAD_FAST 2 ( i )
54 BINARY_MULTIPLY
56 BINARY_SUBTRACT
58 BINARY_MULTIPLY
60 LOAD_FAST 1 ( sum )
62 LOAD_FAST 0 ( n )
64 BINARY_MULTIPLY
66 LOAD_FAST 1 ( sum )
68 LOAD_FAST 2 ( i )
70 BINARY_MULTIPLY
72 BINARY_SUBTRACT
74 LOAD_FAST 1 ( sum )
76 LOAD_FAST 2 ( i )
78 BINARY_MULTIPLY
80 BINARY_SUBTRACT
82 LOAD_FAST 1 ( sum )
84 LOAD_FAST 2 ( i )
86 BINARY_MULTIPLY
88 BINARY_SUBTRACT
90 LOAD_FAST 1 ( sum )
92 LOAD_FAST 2 ( i )
94 BINARY_MULTIPLY
96 BINARY_SUBTRACT
98 LOAD_FAST 1 ( sum )
100 LOAD_FAST 2 ( i )
102 BINARY_MULTIPLY
104 BINARY_SUBTRACT
106 LOAD_FAST 1 ( sum )
108 LOAD_FAST 2 ( i )
110 LOAD_FAST 2 ( i )
112 STORE_SUBSCR

6 114 LOAD_FAST 1 ( sum )
116 RETURN_VALUE
>> 118 JUMP_ABSOLUTE 20
>> 120 POP_BLOCK

7 >> 122 LOAD_FAST 1 ( sum )
124 RETURN_VALUE
