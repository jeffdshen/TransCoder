{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( A , B ) :\n    variable = 1\n    if ( A == B ) :\n        return 1\n    elif ( ( B - A ) >= 5 ) :\n        return 0\n    else :\n        for i in range ( A + 1 , B + 1 ) :\n            variable = ( variable * ( i % 10 ) ) % 10\n        return variable % 10\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (79,84,),\n    (61,29,),\n    (39,77,),\n    (39,65,),\n    (61,78,),\n    (86,73,),\n    (7,92,),\n    (86,50,),\n    (86,63,),\n    (11,2,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def computeLastDigit ( A , B ) :\n    variable = 1\n    if ( A == B ) :\n        return 1\n    elif ( ( B - A ) >= 5 ) :\n        return 0\n    else :\n        for i in range ( A + 1 , B + 1 ) :\n            variable = ( variable * ( i % 10 ) ) % 10\n        return variable % 10\n"}
Disassembly of <code object computeLastDigit at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 1 )
2 STORE_FAST 2 ( variable )

3 4 LOAD_FAST 0 ( A )
6 LOAD_FAST 2 ( variable )
8 COMPARE_OP 2 ( == )
10 POP_JUMP_IF_FALSE 20

4 12 LOAD_CONST 1 ( 1 )
14 RETURN_VALUE

5 >> 16 LOAD_FAST 0 ( A )
18 LOAD_FAST 2 ( variable )
20 COMPARE_OP 2 ( == )
22 POP_JUMP_IF_FALSE 28

6 24 LOAD_CONST 2 ( 0 )
26 RETURN_VALUE

6 >> 28 SETUP_LOOP 64 ( to 100 )
30 LOAD_GLOBAL 0 ( range )
32 LOAD_FAST 1 ( B )
34 LOAD_CONST 3 ( 10 )
36 CALL_FUNCTION 2
38 GET_ITER
>> 40 FOR_ITER 48 ( to 98 )
42 STORE_FAST 3 ( i )

7 44 LOAD_FAST 2 ( variable )
46 LOAD_FAST 3 ( i )
48 BINARY_SUBSCR
50 LOAD_FAST 0 ( A )
52 LOAD_FAST 3 ( i )
54 BINARY_SUBSCR
56 LOAD_FAST 0 ( A )
58 LOAD_FAST 3 ( i )
60 BINARY_SUBSCR
62 LOAD_FAST 0 ( A )
64 LOAD_FAST 3 ( i )
66 BINARY_SUBSCR
68 LOAD_FAST 0 ( A )
70 LOAD_FAST 3 ( i )
72 BINARY_SUBSCR
74 LOAD_FAST 0 ( A )
76 LOAD_FAST 3 ( i )
78 BINARY_SUBSCR
80 LOAD_FAST 0 ( A )
82 LOAD_FAST 3 ( i )
84 BINARY_SUBSCR
86 LOAD_FAST 0 ( A )
88 LOAD_FAST 3 ( i )
90 STORE_SUBSCR
92 JUMP_ABSOLUTE 40
>> 94 POP_BLOCK
>> 96 JUMP_ABSOLUTE 40
>> 98 POP_BLOCK

8 >> 100 LOAD_FAST 2 ( variable )
102 RETURN_VALUE
