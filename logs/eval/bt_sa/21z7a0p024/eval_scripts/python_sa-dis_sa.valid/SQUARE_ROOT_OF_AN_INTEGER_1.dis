{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( x ) :\n    if ( x == 0 or x == 1 ) :\n        return x\n    start = 1\n    end = x\n    while ( start <= end ) :\n        mid = ( start + end ) // 2\n        if ( mid * mid == x ) :\n            return mid\n        if ( mid * mid < x ) :\n            start = mid + 1\n            ans = mid\n        else :\n            end = mid - 1\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (40,),\n    (10,),\n    (46,),\n    (54,),\n    (1,),\n    (67,),\n    (64,),\n    (10,),\n    (75,),\n    (11,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def floorSqrt ( x ) :\n    if ( x == 0 or x == 1 ) :\n        return x\n    start = 1\n    end = x\n    while ( start <= end ) :\n        mid = ( start + end ) // 2\n        if ( mid * mid == x ) :\n            return mid\n        if ( mid * mid < x ) :\n            start = mid + 1\n            ans = mid\n        else :\n            end = mid - 1\n    return ans\n"}
Disassembly of <code object floorSqrt at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( x )
2 LOAD_CONST 1 ( 0 )
4 COMPARE_OP 2 ( == )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_FAST 0 ( x )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 0 ( x )
14 LOAD_CONST 2 ( 1 )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 24

5 20 LOAD_FAST 0 ( x )
22 RETURN_VALUE

6 >> 24 LOAD_FAST 0 ( x )
26 LOAD_CONST 3 ( 2 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 36

7 32 LOAD_FAST 0 ( x )
34 RETURN_VALUE

8 >> 36 LOAD_FAST 0 ( x )
38 LOAD_CONST 4 ( 3 )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 48

9 44 LOAD_FAST 0 ( x )
46 RETURN_VALUE

10 >> 48 LOAD_FAST 0 ( x )
50 LOAD_CONST 5 ( 4 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 64

11 56 LOAD_FAST 0 ( x )
58 RETURN_VALUE

12 >> 60 LOAD_FAST 0 ( x )
62 LOAD_CONST 6 ( 5 )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 74

13 68 LOAD_FAST 0 ( x )
70 RETURN_VALUE

14 >> 72 LOAD_FAST 0 ( x )
74 LOAD_CONST 7 ( 3 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 92

15 80 LOAD_FAST 0 ( x )
82 RETURN_VALUE

16 >> 84 LOAD_FAST 0 ( x )
86 LOAD_CONST 8 ( 6 )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_FALSE 92

17 92 LOAD_FAST 0 ( x )
94 RETURN_VALUE

18 >> 96 LOAD_FAST 0 ( x )
98 LOAD_CONST 9 ( 7 )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 120

19 104 LOAD_FAST 0 ( x )
106 RETURN_VALUE

19 >> 108 LOAD_FAST 0 ( x )
110 LOAD_CONST 10 ( 8 )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 120

20 116 LOAD_FAST 0 ( x )
118 RETURN_VALUE

22 >> 120 LOAD_FAST 0 ( x )
122 RETURN_VALUE

19 >> 124 LOAD_FAST 0 ( x )
126 LOAD_CONST 11 ( 8 )
128 COMPARE_OP 2 ( == )
130 POP_JUMP_IF_FALSE 132

20 132 LOAD_FAST 0 ( x )
134 RETURN_VALUE

21 >> 136 LOAD_FAST 0 ( x )
138 RETURN_VALUE

22 >> 140 LOAD_FAST 0 ( x )
142 RETURN_VALUE
144 LOAD_CONST 0 ( None )
146 RETURN_VALUE
