{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] & 1 ) :\n            arr [ i ] *= - 1\n    arr.sort ( )\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] & 1 ) :\n            arr [ i ] *= - 1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4],0,),\n    ([8, -74, 89, 65, 51, -15, 68, 51, 23, 44, 89],8,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],28,),\n    ([51, 74, 43, 15, 38, 15, 5, 93],6,),\n    ([-96, -75, -64, -20, -5, -2, 1, 40, 46, 64],7,),\n    ([0, 0, 1, 0, 0, 1, 0, 0, 0],5,),\n    ([1, 2, 4, 4, 17, 22, 23, 28, 35, 38, 39, 39, 41, 42, 42, 45, 46, 49, 49, 49, 50, 59, 62, 68, 69, 71, 73, 76, 78, 79, 80, 87, 88, 88, 90, 90, 91, 93, 95, 96, 98],34,),\n    ([11, 68, -52, -49, -57, -2, 83, 77, 24, -20, 85, 11, 43, -73, 96, 92, 58, 64, 95, 13, -14, 14, 24, -51, -24, -45, -44, 96, -5, -56, 59],24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],14,),\n    ([44, 7, 44, 68, 34, 66, 69, 55, 10, 96, 42, 41, 77, 69, 10, 10, 91, 60, 51],13,)\n        ]\n    filled_function_param = [\n    ([4],0,),\n    ([8, -74, 89, 65, 51, -15, 68, 51, 23, 44, 89],8,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],28,),\n    ([51, 74, 43, 15, 38, 15, 5, 93],6,),\n    ([-96, -75, -64, -20, -5, -2, 1, 40, 46, 64],7,),\n    ([0, 0, 1, 0, 0, 1, 0, 0, 0],5,),\n    ([1, 2, 4, 4, 17, 22, 23, 28, 35, 38, 39, 39, 41, 42, 42, 45, 46, 49, 49, 49, 50, 59, 62, 68, 69, 71, 73, 76, 78, 79, 80, 87, 88, 88, 90, 90, 91, 93, 95, 96, 98],34,),\n    ([11, 68, -52, -49, -57, -2, 83, 77, 24, -20, 85, 11, 43, -73, 96, 92, 58, 64, 95, 13, -14, 14, 24, -51, -24, -45, -44, 96, -5, -56, 59],24,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],14,),\n    ([44, 7, 44, 68, 34, 66, 69, 55, 10, 96, 42, 41, 77, 69, 10, 10, 91, 60, 51],13,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def twoWaySort ( arr , n ) :\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] & 1 ) :\n            arr [ i ] *= - 1\n    arr.sort ( )\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] & 1 ) :\n            arr [ i ] *= - 1\n"}
Disassembly of <code object twoWaySort at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 SETUP_LOOP 76 ( to 78 )
2 LOAD_GLOBAL 0 ( range )
4 LOAD_CONST 1 ( 0 )
6 LOAD_FAST 1 ( n )
8 CALL_FUNCTION 2
10 GET_ITER
>> 12 FOR_ITER 76 ( to 76 )
14 STORE_FAST 2 ( i )

3 16 LOAD_FAST 2 ( i )
18 LOAD_FAST 0 ( arr )
20 LOAD_FAST 2 ( i )
22 BINARY_SUBSCR
24 BINARY_SUBTRACT
26 LOAD_CONST 2 ( 1 )
28 BINARY_SUBTRACT
30 LOAD_FAST 0 ( arr )
32 BINARY_SUBTRACT
34 LOAD_CONST 2 ( 1 )
36 BINARY_SUBTRACT
38 BINARY_SUBTRACT
40 LOAD_CONST 2 ( 1 )
42 BINARY_SUBTRACT
44 BINARY_MULTIPLY
46 BINARY_ADD
48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 2 ( i )
52 BINARY_SUBSCR
54 BINARY_SUBTRACT
56 LOAD_CONST 2 ( 1 )
58 BINARY_SUBTRACT
60 LOAD_FAST 0 ( arr )
62 BINARY_SUBTRACT
64 LOAD_CONST 2 ( 1 )
66 BINARY_SUBTRACT
68 BINARY_SUBTRACT
70 LOAD_FAST 0 ( arr )
72 BINARY_SUBTRACT
74 LOAD_CONST 2 ( 1 )
76 BINARY_SUBTRACT
78 LOAD_FAST 0 ( arr )
80 BINARY_SUBTRACT
82 LOAD_CONST 2 ( 1 )
84 BINARY_SUBTRACT
86 LOAD_FAST 0 ( arr )
88 BINARY_SUBTRACT
90 LOAD_CONST 2 ( 1 )
92 BINARY_SUBTRACT
94 LOAD_FAST 0 ( arr )
96 BINARY_SUBTRACT
98 LOAD_CONST 2 ( 1 )
100 BINARY_SUBTRACT
102 BINARY_SUBTRACT
104 LOAD_CONST 2 ( 1 )
106 BINARY_SUBTRACT
108 LOAD_FAST 0 ( arr )
110 BINARY_SUBTRACT
112 LOAD_CONST 2 ( 1 )
114 BINARY_SUBTRACT
116 BINARY_MULTIPLY
118 BINARY_SUBTRACT
120 LOAD_CONST 2 ( 1 )
122 BINARY_SUBTRACT
124 LOAD_FAST 0 ( arr )
126 BINARY_SUBTRACT
128 LOAD_CONST 2 ( 1 )
130 BINARY_SUBTRACT
132 BINARY_MULTIPLY
134 BINARY_ADD
136 STORE_FAST 0 ( arr )

4 134 LOAD_FAST 0 ( arr )
136 LOAD_FAST 0 ( arr )
138 LOAD_FAST 1 ( n )
140 STORE_SUBSCR

5 142 LOAD_FAST 0 ( arr )
144 RETURN_VALUE
