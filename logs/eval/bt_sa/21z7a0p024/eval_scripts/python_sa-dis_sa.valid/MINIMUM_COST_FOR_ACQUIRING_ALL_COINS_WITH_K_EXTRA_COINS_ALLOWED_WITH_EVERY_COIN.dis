{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\nimport math\n\ndef f_gold ( coin , n , k ) :\n    coin.sort ( )\n    coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) ) ;\n    ans = 0\n    for i in range ( coins_needed - 1 + 1 ) :\n        ans += coin [ i ]\n    return ans\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 4, 5, 9, 10, 10, 11, 14, 15, 19, 21, 22, 29, 36, 36, 38, 39, 39, 39, 41, 41, 42, 45, 45, 48, 55, 56, 57, 64, 66, 66, 66, 66, 69, 74, 76, 80, 81, 82, 82, 85, 87, 95, 95],33,27,),\n    ([-6, -52, 20, -98, -10, 48, 36, 66, -88, 94, 68, 16],6,10,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],16,16,),\n    ([91, 62, 29, 49, 6, 11, 10, 43, 78, 35, 32, 5, 1, 48, 15, 24, 4, 71],13,17,),\n    ([-98, -92, -88, -84, -82, -78, -74, -74, -68, -62, -62, -56, -56, -50, -46, -44, -26, -18, -14, -8, -8, -6, 8, 16, 20, 20, 22, 26, 36, 42, 44, 44, 52, 60, 66, 68, 68, 70, 76, 84],25,34,),\n    ([1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0],32,32,),\n    ([5, 12, 38, 39, 52, 54, 62, 81, 87, 93],6,8,),\n    ([86, -18, -32, 70, 40, -76, -8, 8, -84, -10, 92, 94, -18, -12, -26, -40, -74, 60, 16, -70, 44, -32, 40, -24, 0, 4],25,20,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],37,29,),\n    ([86, 62, 98, 97, 61, 31, 23, 56, 63, 72, 44, 74, 58, 97],12,13,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minCost ( coin , n , k ) :\n    coin.sort ( )\n    coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) ) ;\n    ans = 0\n    for i in range ( coins_needed - 1 + 1 ) :\n        ans += coin [ i ]\n    return ans\n"}
Disassembly of <code object minCost at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( n )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 LOAD_GLOBAL 1 ( math )
10 LOAD_METHOD 2 ( ceil )
12 LOAD_CONST 1 ( 1.0 )
14 LOAD_FAST 0 ( coin )
16 LOAD_CONST 2 ( 1 )
18 BINARY_ADD
20 LOAD_CONST 3 ( 2 )
22 BINARY_ADD
24 CALL_METHOD 2
26 STORE_FAST 2 ( ans )

4 28 SETUP_LOOP 64 ( to 104 )
30 LOAD_GLOBAL 3 ( range )
32 LOAD_CONST 1 ( 1.0 )
34 LOAD_FAST 0 ( coin )
36 LOAD_CONST 2 ( 1 )
38 BINARY_ADD
40 CALL_FUNCTION 2
42 GET_ITER
>> 44 FOR_ITER 48 ( to 102 )
46 STORE_FAST 3 ( i )

5 48 LOAD_GLOBAL 4 ( int )
50 LOAD_FAST 3 ( i )
52 LOAD_CONST 2 ( 1 )
54 BINARY_ADD
56 CALL_FUNCTION 1
58 STORE_FAST 4 ( ans )

6 60 LOAD_FAST 4 ( ans )
62 LOAD_CONST 2 ( 1 )
64 BINARY_ADD
66 STORE_FAST 5 ( ans )

7 68 LOAD_FAST 4 ( ans )
70 LOAD_FAST 5 ( ans )
72 LOAD_CONST 2 ( 1 )
74 BINARY_ADD
76 INPLACE_ADD
78 STORE_FAST 4 ( ans )

8 80 LOAD_FAST 4 ( ans )
82 LOAD_CONST 2 ( 1 )
84 BINARY_SUBTRACT
86 LOAD_FAST 5 ( ans )
88 LOAD_CONST 2 ( 1 )
90 BINARY_SUBTRACT
92 LOAD_FAST 5 ( ans )
94 LOAD_CONST 2 ( 1 )
96 BINARY_SUBTRACT
98 LOAD_FAST 5 ( ans )
100 LOAD_CONST 2 ( 1 )
102 BINARY_SUBTRACT
104 LOAD_FAST 5 ( ans )
106 LOAD_CONST 2 ( 1 )
108 BINARY_SUBTRACT
110 LOAD_FAST 5 ( ans )
112 LOAD_CONST 2 ( 1 )
114 BINARY_SUBTRACT
116 LOAD_FAST 5 ( ans )
118 LOAD_CONST 2 ( 1 )
120 BINARY_SUBTRACT
122 LOAD_FAST 5 ( ans )
124 LOAD_CONST 3 ( 2 )
126 BINARY_SUBTRACT
128 BINARY_TRUE_DIVIDE
130 BINARY_ADD
132 LOAD_FAST 5 ( ans )
134 LOAD_CONST 2 ( 1 )
136 BINARY_SUBTRACT
138 LOAD_FAST 5 ( ans )
140 LOAD_CONST 2 ( 1 )
142 BINARY_SUBTRACT
144 BINARY_SUBTRACT
146 LOAD_FAST 5 ( ans )
148 LOAD_CONST 2 ( 1 )
150 BINARY_SUBTRACT
152 BINARY_SUBTRACT
154 LOAD_FAST 5 ( ans )
156 LOAD_CONST 2 ( 1 )
158 BINARY_SUBTRACT
160 BINARY_TRUE_DIVIDE
162 BINARY_SUBTRACT
164 STORE_FAST 5 ( ans )

9 166 LOAD_FAST 5 ( ans )
168 RETURN_VALUE
