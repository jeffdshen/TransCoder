{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( a , n ) :\n    count_odd = 0 ; count_even = 0 ;\n    for i in range ( n ) :\n        if ( a [ i ] & 1 ) :\n            count_odd += 1 ;\n        else :\n            count_even += 1 ;\n    if ( count_odd % 2 and count_even % 2 ) :\n        return False ;\n    else :\n        return True ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 1, 1, 7, 7, 8, 10, 10, 10, 14, 15, 18, 20, 23, 24, 24, 26, 30, 32, 32, 33, 36, 42, 43, 46, 48, 51, 51, 52, 53, 58, 58, 59, 59, 59, 60, 67, 71, 72, 74, 76, 77, 83, 84, 86, 90, 91],30,),\n    ([-90, -20, -60, -64, -24, 84, -2, -32, 28, -54, 44, -96, 52, 88, 20, -56, -2],12,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],36,),\n    ([98, 70, 24, 18, 7, 4, 78, 19, 70, 56, 99, 54, 69, 15, 88, 20, 40, 13, 19, 56, 62],19,),\n    ([-72, -66, -58, -20, 36, 80, 92],6,),\n    ([0, 1],1,),\n    ([6, 13, 14, 16, 21, 26, 26, 28, 29, 35, 38, 42, 47, 47, 62, 67, 77, 81, 81, 83, 84, 88, 90, 96, 97, 98],17,),\n    ([-48, -8, 20, 32, -90, -42, -6, -88, -72, 42, 66, -62, 82, -4, 8, 12, -22, 82, 56, 96, -54, 92, -42, 30, -18, 14, -6, -66, 34, 16, -84, -94, 48, -48, 52, -60, -92, -16],35,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],14,),\n    ([45, 86, 53, 80, 27, 45, 1, 85, 91, 93, 92, 43, 75, 86, 81, 48, 21, 34, 5, 10, 88, 42, 7, 15, 96, 85, 62, 86, 52, 37],29,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def flipsPossible ( a , n ) :\n    count_odd = 0 ; count_even = 0 ;\n    for i in range ( n ) :\n        if ( a [ i ] & 1 ) :\n            count_odd += 1 ;\n        else :\n            count_even += 1 ;\n    if ( count_odd % 2 and count_even % 2 ) :\n        return False ;\n    else :\n        return True ;\n"}
Disassembly of <code object flipsPossible at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( count_even )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 3 ( count_even )

4 8 SETUP_LOOP 64 ( to 76 )
10 LOAD_GLOBAL 0 ( range )
12 LOAD_FAST 1 ( n )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 64 ( to 74 )
20 STORE_FAST 4 ( i )

5 22 LOAD_FAST 2 ( count_even )
24 LOAD_FAST 4 ( i )
26 BINARY_SUBSCR
28 LOAD_FAST 0 ( a )
30 LOAD_FAST 4 ( i )
32 BINARY_SUBSCR
34 LOAD_FAST 0 ( a )
36 LOAD_FAST 4 ( i )
38 BINARY_SUBSCR
40 LOAD_FAST 0 ( a )
42 LOAD_FAST 4 ( i )
44 BINARY_SUBSCR
46 LOAD_FAST 0 ( a )
48 LOAD_FAST 4 ( i )
50 BINARY_SUBSCR
52 LOAD_FAST 0 ( a )
54 LOAD_FAST 4 ( i )
56 BINARY_SUBSCR
58 LOAD_FAST 0 ( a )
60 LOAD_FAST 4 ( i )
62 BINARY_SUBSCR
64 STORE_SUBSCR

6 66 LOAD_FAST 2 ( count_even )
68 LOAD_FAST 3 ( count_even )
70 LOAD_FAST 0 ( a )
72 LOAD_FAST 4 ( i )
74 BINARY_SUBSCR
76 LOAD_FAST 0 ( a )
78 LOAD_FAST 4 ( i )
80 BINARY_SUBSCR
82 LOAD_FAST 0 ( a )
84 LOAD_FAST 4 ( i )
86 STORE_SUBSCR
88 JUMP_ABSOLUTE 18
>> 90 POP_BLOCK
>> 92 JUMP_ABSOLUTE 18
>> 94 POP_BLOCK
>> 96 LOAD_CONST 0 ( None )
98 RETURN_VALUE
