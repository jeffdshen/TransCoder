{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    if n <= 1 :\n        return\n    f_gold ( arr , n - 1 )\n    last = arr [ n - 1 ]\n    j = n - 2\n    while ( j >= 0 and arr [ j ] > last ) :\n        arr [ j + 1 ] = arr [ j ]\n        j = j - 1\n    arr [ j + 1 ] = last\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 7, 8, 14, 25, 25, 25, 30, 31, 36, 36, 37, 42, 44, 45, 45, 47, 50, 50, 54, 60, 60, 61, 67, 68, 69, 79, 80, 82, 96],27,),\n    ([-6, -2, -94],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([76, 39, 64, 57, 63, 7, 86, 72, 87, 23, 76, 6, 58, 14, 28, 5, 68, 56, 25, 27, 60, 4, 29, 91, 7, 32, 20, 64, 43, 30],26,),\n    ([-98, -80, -64, -60, -58, -54, -46, -44, -38, -30, -26, -20, -14, -14, -12, -8, -8, 16, 18, 18, 24, 26, 26, 34, 46, 70, 76, 82, 98],27,),\n    ([0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1],10,),\n    ([3, 4, 4, 5, 7, 13, 21, 21, 21, 22, 24, 25, 25, 34, 34, 40, 40, 45, 48, 50, 51, 60, 61, 64, 68, 73, 74, 77, 79, 80, 85, 90, 91, 93],17,),\n    ([46, -22, -48, -64, 44, -70, -8, -56, -24, -8, -92, -58, 60, -8, 78, -54, -66, 92, 32, -98, 46, 80, -2, -30, 20, -88, -18, 46, 68, -2, -48, -32, 48, 88, -92, 96, -82, 38, -82, -50, -20, 34, -50, 2, -64, 18, 50],45,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([73, 53, 18, 19, 63],3,)\n        ]\n    filled_function_param = [\n    ([4, 7, 8, 14, 25, 25, 25, 30, 31, 36, 36, 37, 42, 44, 45, 45, 47, 50, 50, 54, 60, 60, 61, 67, 68, 69, 79, 80, 82, 96],27,),\n    ([-6, -2, -94],1,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([76, 39, 64, 57, 63, 7, 86, 72, 87, 23, 76, 6, 58, 14, 28, 5, 68, 56, 25, 27, 60, 4, 29, 91, 7, 32, 20, 64, 43, 30],26,),\n    ([-98, -80, -64, -60, -58, -54, -46, -44, -38, -30, -26, -20, -14, -14, -12, -8, -8, 16, 18, 18, 24, 26, 26, 34, 46, 70, 76, 82, 98],27,),\n    ([0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1],10,),\n    ([3, 4, 4, 5, 7, 13, 21, 21, 21, 22, 24, 25, 25, 34, 34, 40, 40, 45, 48, 50, 51, 60, 61, 64, 68, 73, 74, 77, 79, 80, 85, 90, 91, 93],17,),\n    ([46, -22, -48, -64, 44, -70, -8, -56, -24, -8, -92, -58, 60, -8, 78, -54, -66, 92, 32, -98, 46, 80, -2, -30, 20, -88, -18, 46, 68, -2, -48, -32, 48, 88, -92, 96, -82, 38, -82, -50, -20, 34, -50, 2, -64, 18, 50],45,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([73, 53, 18, 19, 63],3,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def insertionSortRecursive ( arr , n ) :\n    if n <= 1 :\n        return\n    insertionSortRecursive ( arr , n - 1 )\n    last = arr [ n - 1 ]\n    j = n - 2\n    while ( j >= 0 and arr [ j ] > last ) :\n        arr [ j + 1 ] = arr [ j ]\n        j = j - 1\n    arr [ j + 1 ] = last\n"}
Disassembly of <code object insertionSortortsive at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_FAST 1 ( n )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 1 ( <= )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( 0 )
10 RETURN_VALUE

4 >> 12 LOAD_GLOBAL 0 ( insertionSortortsive )
14 LOAD_FAST 0 ( arr )
16 LOAD_CONST 1 ( 1 )
18 BINARY_SUBTRACT
20 BINARY_SUBSCR
22 LOAD_FAST 1 ( n )
24 LOAD_CONST 1 ( 1 )
26 BINARY_SUBTRACT
28 BINARY_SUBSCR
30 LOAD_FAST 1 ( n )
32 LOAD_CONST 1 ( 1 )
34 BINARY_SUBTRACT
36 BINARY_SUBSCR
38 LOAD_FAST 1 ( n )
40 LOAD_CONST 1 ( 1 )
42 BINARY_SUBTRACT
44 BINARY_SUBSCR
46 LOAD_FAST 1 ( n )
48 LOAD_CONST 1 ( 1 )
50 BINARY_SUBTRACT
52 BINARY_SUBSCR
54 LOAD_FAST 1 ( n )
56 LOAD_CONST 1 ( 1 )
58 BINARY_SUBTRACT
60 BINARY_SUBSCR
62 BINARY_SUBTRACT
64 LOAD_FAST 1 ( n )
66 LOAD_CONST 1 ( 1 )
68 BINARY_SUBTRACT
70 BINARY_SUBSCR
72 BINARY_SUBTRACT
74 LOAD_FAST 1 ( n )
76 LOAD_CONST 1 ( 1 )
78 BINARY_SUBTRACT
80 BINARY_SUBSCR
82 BINARY_SUBTRACT
84 LOAD_FAST 1 ( n )
86 LOAD_CONST 1 ( 1 )
88 BINARY_SUBTRACT
90 BINARY_SUBSCR
92 BINARY_SUBTRACT
94 LOAD_FAST 1 ( n )
96 LOAD_CONST 1 ( 1 )
98 BINARY_SUBTRACT
100 BINARY_SUBSCR
102 BINARY_SUBTRACT
104 STORE_FAST 1 ( n )

5 106 LOAD_FAST 1 ( n )
108 LOAD_CONST 1 ( 1 )
110 BINARY_SUBTRACT
112 LOAD_FAST 1 ( n )
114 LOAD_CONST 1 ( 1 )
116 BINARY_SUBTRACT
118 BINARY_SUBSCR
120 LOAD_FAST 1 ( n )
122 LOAD_CONST 1 ( 1 )
124 BINARY_SUBTRACT
126 BINARY_SUBSCR
128 BINARY_SUBTRACT
130 LOAD_FAST 1 ( n )
132 LOAD_CONST 1 ( 1 )
134 BINARY_SUBTRACT
136 BINARY_SUBSCR
138 BINARY_SUBTRACT
140 LOAD_FAST 1 ( n )
142 LOAD_CONST 1 ( 1 )
144 BINARY_SUBTRACT
146 BINARY_SUBSCR
148 BINARY_SUBTRACT
150 LOAD_FAST 1 ( n )
152 LOAD_CONST 1 ( 1 )
154 BINARY_SUBTRACT
156 BINARY_SUBTRACT
158 LOAD_FAST 1 ( n )
160 LOAD_CONST 1 ( 1 )
162 BINARY_SUBTRACT
164 BINARY_SUBTRACT
166 LOAD_FAST 1 ( n )
168 LOAD_CONST 1 ( 1 )
170 BINARY_SUBTRACT
172 BINARY_SUBTRACT
174 LOAD_FAST 1 ( n )
176 LOAD_CONST 1 ( 1 )
178 BINARY_SUBTRACT
180 BINARY_TRUE_DIVIDE
182 BINARY_SUBTRACT
184 RETURN_VALUE
