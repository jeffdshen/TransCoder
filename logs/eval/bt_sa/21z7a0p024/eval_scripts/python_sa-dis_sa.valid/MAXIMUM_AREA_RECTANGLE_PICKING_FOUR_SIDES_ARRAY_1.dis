{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    s = [ ]\n    first = 0\n    second = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.append ( arr [ i ] )\n            continue\n        if ( arr [ i ] > first ) :\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            second = arr [ i ]\n    return ( first * second )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([4, 6, 7, 8, 12, 13, 14, 15, 18, 18, 19, 19, 26, 26, 32, 32, 33, 34, 34, 36, 41, 43, 47, 47, 51, 51, 52, 53, 55, 56, 57, 60, 61, 71, 74, 75, 76, 77, 79, 87, 87, 87, 90, 95, 98, 99],37,),\n    ([-64, -72, 6, -62, 54, 14, 28, 60, -96, 14, -32, -2, 80, 8, -56, 68, 86, 64, 86, -12, 82],12,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],27,),\n    ([99, 7, 14, 50, 94, 24, 79, 13, 19, 29, 22, 2, 77, 36, 38, 18, 51, 15, 99, 52, 17, 77, 22, 54],15,),\n    ([-96, -92, -86, -84, -84, -80, -70, -70, -68, -64, -64, -48, -46, -24, -22, -20, -8, -8, 0, 0, 4, 8, 8, 22, 28, 36, 46, 50, 52, 54, 60, 62, 66, 70, 80, 84, 86, 94, 96, 96],25,),\n    ([1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1],12,),\n    ([98],0,),\n    ([-88, -24, 8, 20, -46, 60, 24, 26, 98, 82, -30, 16, 22, -28, 84, 12, 34, 14, -18, -38, -94, -24, 6, 4, -52, -48, 84],21,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],21,),\n    ([6, 30, 47, 97, 20, 16, 68, 34, 1, 77, 48, 8, 22, 68],8,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findArea ( arr , n ) :\n    s = [ ]\n    first = 0\n    second = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.append ( arr [ i ] )\n            continue\n        if ( arr [ i ] > first ) :\n            second = first\n            first = arr [ i ]\n        elif ( arr [ i ] > second ) :\n            second = arr [ i ]\n    return ( first * second )\n"}
Disassembly of <code object findArea at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 BUILD_LIST 0
2 STORE_FAST 2 ( s )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 3 ( first )

4 8 LOAD_CONST 2 ( 1 )
10 STORE_FAST 4 ( first )

5 12 SETUP_LOOP 64 ( to 76 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_FAST 1 ( n )
18 CALL_FUNCTION 1
20 GET_ITER
>> 22 FOR_ITER 48 ( to 74 )
24 STORE_FAST 5 ( i )

6 26 LOAD_FAST 2 ( s )
28 LOAD_FAST 0 ( arr )
30 COMPARE_OP 7 ( not in )
32 POP_JUMP_IF_FALSE 42

7 34 LOAD_FAST 2 ( s )
36 LOAD_FAST 0 ( arr )
38 LOAD_FAST 5 ( i )
40 BINARY_SUBSCR
42 STORE_FAST 6 ( r )
44 JUMP_ABSOLUTE 22

8 >> 46 LOAD_FAST 2 ( s )
48 LOAD_FAST 0 ( arr )
50 LOAD_FAST 5 ( i )
52 BINARY_SUBSCR
54 STORE_FAST 7 ( r )

9 56 LOAD_FAST 2 ( s )
58 LOAD_FAST 3 ( first )
60 COMPARE_OP 7 ( not in )
62 POP_JUMP_IF_FALSE 22

10 64 LOAD_FAST 2 ( s )
66 LOAD_FAST 3 ( first )
68 COMPARE_OP 4 ( > )
70 POP_JUMP_IF_FALSE 22

11 72 LOAD_FAST 2 ( s )
74 LOAD_FAST 3 ( first )
76 LOAD_FAST 4 ( first )
78 BINARY_SUBSCR
80 LOAD_FAST 6 ( r )
82 LOAD_FAST 5 ( i )
84 BINARY_SUBSCR
86 LOAD_FAST 6 ( r )
88 LOAD_FAST 7 ( r )
90 STORE_SUBSCR

12 92 LOAD_FAST 2 ( s )
94 LOAD_FAST 3 ( first )
96 BINARY_SUBSCR
98 LOAD_FAST 6 ( r )
100 STORE_SUBSCR

13 102 LOAD_FAST 2 ( s )
104 LOAD_FAST 3 ( first )
106 STORE_SUBSCR

14 108 LOAD_FAST 2 ( s )
110 RETURN_VALUE
