{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    stack = [ ]\n    for i in range ( len ( str ) ) :\n        stack.append ( str [ i ] )\n    for i in range ( len ( str ) ) :\n        str [ i ] = stack.pop ( )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([' ', 'G', 'I', 'N', 'O', 'S', 'S', 'c', 'e', 'j', 'l', 'm', 'p'],),\n    (['6', '4', '7', '9', '9', '3', '1', '2', '7', '6', '1', '5', '8', '3', '8', '1', '1', '8', '6', '6', '0', '5', '6', '5', '5', '1'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['j', 'o', 'P', 'V', 'R', 'r', 'w', 'G', 'p', 'L', 'I', 'H', 'B', 'b', 'D', 'm', 'O', 'p', 'e', 'B', ' ', 'M', 'S', 't', 'x', 'A', 'D', 'S', 'A', 'z', 'g'],),\n    (['0', '0', '0', '0', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '6', '6', '6', '6', '7', '8', '8', '8', '9', '9', '9', '9'],),\n    (['1', '1'],),\n    (['E', 'E', 'J', 'K', 'L', 'Q', 'R', 'S', 'T', 'U', 'U', 'V', 'W', 'W', 'X', 'Z', 'a', 'b', 'c', 'c', 'e', 'e', 'f', 'h', 'j', 'j', 'l', 'm', 'o', 'p', 'p', 'p', 'u', 'u', 'u', 'z', 'z', 'z'],),\n    (['5', '9', '9', '5', '8', '7', '7', '0', '4', '6', '5', '4', '7', '2', '5', '4', '7', '3', '7', '9', '1', '8', '8', '9', '9', '5', '3'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['x', 'm', 'z', 'C', 'Y', 'W', 'Q', 'B', 'B', 'h', 'w', 'C', 'e', 'P', 'g', 'P', 'J', 'O', 'A', 'T', 'b', 'y', 'i', ' ', 'A', 'a', 'w'],)\n        ]\n    filled_function_param = [\n    ([' ', 'G', 'I', 'N', 'O', 'S', 'S', 'c', 'e', 'j', 'l', 'm', 'p'],),\n    (['6', '4', '7', '9', '9', '3', '1', '2', '7', '6', '1', '5', '8', '3', '8', '1', '1', '8', '6', '6', '0', '5', '6', '5', '5', '1'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['j', 'o', 'P', 'V', 'R', 'r', 'w', 'G', 'p', 'L', 'I', 'H', 'B', 'b', 'D', 'm', 'O', 'p', 'e', 'B', ' ', 'M', 'S', 't', 'x', 'A', 'D', 'S', 'A', 'z', 'g'],),\n    (['0', '0', '0', '0', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '6', '6', '6', '6', '7', '8', '8', '8', '9', '9', '9', '9'],),\n    (['1', '1'],),\n    (['E', 'E', 'J', 'K', 'L', 'Q', 'R', 'S', 'T', 'U', 'U', 'V', 'W', 'W', 'X', 'Z', 'a', 'b', 'c', 'c', 'e', 'e', 'f', 'h', 'j', 'j', 'l', 'm', 'o', 'p', 'p', 'p', 'u', 'u', 'u', 'z', 'z', 'z'],),\n    (['5', '9', '9', '5', '8', '7', '7', '0', '4', '6', '5', '4', '7', '2', '5', '4', '7', '3', '7', '9', '1', '8', '8', '9', '9', '5', '3'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['x', 'm', 'z', 'C', 'Y', 'W', 'Q', 'B', 'B', 'h', 'w', 'C', 'e', 'P', 'g', 'P', 'J', 'O', 'A', 'T', 'b', 'y', 'i', ' ', 'A', 'a', 'w'],)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def recursiveReverse ( str ) :\n    stack = [ ]\n    for i in range ( len ( str ) ) :\n        stack.append ( str [ i ] )\n    for i in range ( len ( str ) ) :\n        str [ i ] = stack.pop ( )\n"}
Disassembly of <code object recurAPPLICATION_Reverse at 0x7f2b01639660, file "<dis>", line 1>:
2 0 BUILD_LIST 0
2 STORE_FAST 1 ( stack )

3 4 SETUP_LOOP 64 ( to 66 )
6 LOAD_GLOBAL 0 ( range )
8 LOAD_GLOBAL 1 ( len )
10 LOAD_FAST 0 ( str )
12 CALL_FUNCTION 1
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 48 ( to 64 )
20 STORE_FAST 2 ( i )

4 22 LOAD_FAST 1 ( stack )
24 LOAD_METHOD 2 ( append )
26 LOAD_GLOBAL 3 ( str )
28 LOAD_FAST 2 ( i )
30 CALL_FUNCTION 1
32 CALL_METHOD 1
34 POP_TOP

5 36 SETUP_LOOP 40 ( to 62 )
38 LOAD_GLOBAL 0 ( range )
40 LOAD_GLOBAL 1 ( len )
42 LOAD_FAST 0 ( str )
44 CALL_FUNCTION 1
46 CALL_FUNCTION 1
48 GET_ITER
>> 50 FOR_ITER 24 ( to 60 )
52 STORE_FAST 3 ( i )

6 54 LOAD_FAST 1 ( stack )
56 LOAD_METHOD 2 ( append )
58 LOAD_GLOBAL 3 ( str )
60 LOAD_FAST 2 ( i )
62 CALL_FUNCTION 1
64 CALL_METHOD 1
66 POP_TOP

7 68 LOAD_FAST 1 ( stack )
70 LOAD_METHOD 2 ( append )
72 LOAD_GLOBAL 3 ( str )
74 LOAD_FAST 3 ( i )
76 CALL_FUNCTION 1
78 CALL_METHOD 1
80 POP_TOP

8 82 LOAD_FAST 1 ( stack )
84 LOAD_METHOD 2 ( append )
86 LOAD_GLOBAL 3 ( str )
88 LOAD_FAST 2 ( i )
90 CALL_FUNCTION 1
92 CALL_METHOD 1
94 POP_TOP

9 96 LOAD_FAST 1 ( stack )
98 LOAD_METHOD 2 ( append )
100 LOAD_GLOBAL 3 ( str )
102 LOAD_FAST 3 ( i )
104 CALL_FUNCTION 1
106 CALL_METHOD 1
108 POP_TOP
110 JUMP_ABSOLUTE 50
>> 112 POP_BLOCK
>> 114 JUMP_ABSOLUTE 18
>> 116 POP_BLOCK

10 >> 118 LOAD_FAST 1 ( stack )
120 RETURN_VALUE
