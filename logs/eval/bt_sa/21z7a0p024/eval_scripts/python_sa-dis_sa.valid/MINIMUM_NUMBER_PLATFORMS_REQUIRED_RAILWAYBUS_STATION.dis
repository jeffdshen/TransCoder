{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , dep , n ) :\n    arr.sort ( )\n    dep.sort ( )\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while ( i < n and j < n ) :\n        if ( arr [ i ] < dep [ j ] ) :\n            plat_needed += 1\n            i += 1\n            if ( plat_needed > result ) :\n                result = plat_needed\n        else :\n            plat_needed -= 1\n            j += 1\n    return result\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([8, 24, 28, 64, 75, 86, 93, 95],[19, 30, 41, 51, 62, 68, 85, 96],6,),\n    ([2, -30, -8, -78, 58, -42, -94, 84, -58, 14, 78, 34, 30, 6, -18, -92, 0, 94, -54, 58, 0, -86, 66, 86, 8, -26, 50, 16, -30, -68, 98, -28, -4, -6],[40, 22, -24, 80, -76, -4, -8, -34, 96, -98, 16, 28, 14, 52, 10, -10, -62, 64, -48, 10, -64, -90, -52, 46, 34, 50, 50, -84, 68, -12, -44, 28, -22, 78],18,),\n    ([0, 0, 0, 0, 0, 0, 1],[0, 0, 0, 0, 0, 1, 1],6,),\n    ([51, 5, 48, 61, 71, 2, 4, 35, 50, 76, 59, 64, 81, 5, 21, 95],[67, 84, 86, 43, 50, 90, 49, 8, 40, 67, 5, 51, 40, 28, 31, 47],8,),\n    ([-64, -52, 44, 52, 90],[-62, -16, 22, 26, 58],3,),\n    ([0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1],[0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],17,),\n    ([2, 15, 25, 55, 72, 96, 98],[3, 6, 11, 19, 26, 37, 39],6,),\n    ([-60, 30, -58, 52, 40, 74, 74, 76, -72, -48, 8, -56, -24, -40, -98, -76, -56, -20, 30, -30, -34, 4, -34],[-96, -40, -76, 52, -20, -28, -64, -72, 36, 56, 52, 34, 14, 8, -50, 6, -82, -98, -8, 18, -76, -66, -22],20,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],22,),\n    ([37, 84, 20, 34, 56, 1, 87, 72],[68, 62, 84, 54, 15, 29, 70, 96],6,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def findPlatform ( arr , dep , n ) :\n    arr.sort ( )\n    dep.sort ( )\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while ( i < n and j < n ) :\n        if ( arr [ i ] < dep [ j ] ) :\n            plat_needed += 1\n            i += 1\n            if ( plat_needed > result ) :\n                result = plat_needed\n        else :\n            plat_needed -= 1\n            j += 1\n    return result\n"}
Disassembly of <code object findPlatform at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 POP_TOP

3 8 LOAD_FAST 0 ( arr )
10 LOAD_METHOD 0 ( sort )
12 CALL_METHOD 0
14 POP_TOP

4 16 LOAD_CONST 1 ( 1 )
18 STORE_FAST 2 ( i )

5 20 LOAD_CONST 1 ( 1 )
22 STORE_FAST 3 ( i )

6 24 SETUP_LOOP 64 ( to 104 )
26 LOAD_FAST 0 ( arr )
28 GET_ITER
>> 30 FOR_ITER 64 ( to 102 )
32 STORE_FAST 4 ( i )

7 34 LOAD_FAST 4 ( i )
36 LOAD_CONST 2 ( 0 )
38 COMPARE_OP 4 ( > )
40 POP_JUMP_IF_FALSE 30

8 42 LOAD_FAST 1 ( dep )
44 LOAD_METHOD 0 ( sort )
46 CALL_METHOD 0
48 POP_TOP

9 50 LOAD_FAST 1 ( dep )
52 LOAD_METHOD 0 ( sort )
54 CALL_METHOD 0
56 POP_TOP

10 58 LOAD_FAST 1 ( dep )
60 LOAD_METHOD 0 ( sort )
62 CALL_METHOD 0
64 POP_TOP

11 66 LOAD_FAST 1 ( dep )
68 LOAD_METHOD 0 ( sort )
70 CALL_METHOD 0
72 POP_TOP

12 74 LOAD_FAST 1 ( dep )
76 LOAD_METHOD 0 ( sort )
78 CALL_METHOD 0
80 POP_TOP

13 82 LOAD_FAST 1 ( dep )
84 LOAD_METHOD 0 ( sort )
86 CALL_METHOD 0
88 POP_TOP

14 90 LOAD_FAST 1 ( dep )
92 LOAD_METHOD 0 ( sort )
94 CALL_METHOD 0
96 POP_TOP

15 98 LOAD_FAST 1 ( dep )
100 LOAD_METHOD 0 ( sort )
102 CALL_METHOD 0
104 POP_TOP

16 106 LOAD_FAST 1 ( dep )
108 LOAD_METHOD 0 ( sort )
110 CALL_METHOD 0
112 POP_TOP

17 114 LOAD_FAST 1 ( dep )
116 LOAD_METHOD 0 ( sort )
118 CALL_METHOD 0
120 POP_TOP

18 122 LOAD_FAST 1 ( dep )
124 LOAD_METHOD 0 ( sort )
126 CALL_METHOD 0
128 POP_TOP

19 130 LOAD_FAST 1 ( dep )
132 LOAD_METHOD 0 ( sort )
134 CALL_METHOD 0
136 POP_TOP
138 JUMP_ABSOLUTE 30
>> 140 POP_BLOCK
>> 142 JUMP_ABSOLUTE 30
>> 144 POP_BLOCK

20 >> 146 LOAD_FAST 2 ( i )
148 RETURN_VALUE
