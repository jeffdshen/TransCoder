{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    if ( n <= 1 ) :\n        return False\n    if ( n <= 3 ) :\n        return False\n    if ( n % 2 == 0 or n % 3 == 0 ) :\n        return True\n    i = 5\n    while ( i * i <= n ) :\n        if ( n % i == 0 or n % ( i + 2 ) == 0 ) :\n            return True\n        i = i + 6\n    return False\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (62,),\n    (13,),\n    (29,),\n    (72,),\n    (30,),\n    (20,),\n    (10,),\n    (47,),\n    (91,),\n    (52,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isComposite ( n ) :\n    if ( n <= 1 ) :\n        return False\n    if ( n <= 3 ) :\n        return False\n    if ( n % 2 == 0 or n % 3 == 0 ) :\n        return True\n    i = 5\n    while ( i * i <= n ) :\n        if ( n % i == 0 or n % ( i + 2 ) == 0 ) :\n            return True\n        i = i + 6\n    return False\n"}
Disassembly of <code object isComposite at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 1 )
4 COMPARE_OP 1 ( <= )
6 POP_JUMP_IF_FALSE 14

3 8 LOAD_CONST 2 ( False )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 0 ( n )
14 LOAD_CONST 1 ( 1 )
16 COMPARE_OP 1 ( <= )
18 POP_JUMP_IF_FALSE 24

5 20 LOAD_CONST 3 ( False )
22 RETURN_VALUE

6 >> 24 LOAD_FAST 0 ( n )
26 LOAD_CONST 1 ( 1 )
28 COMPARE_OP 1 ( <= )
30 POP_JUMP_IF_FALSE 40

7 32 LOAD_CONST 4 ( False )
34 RETURN_VALUE

8 >> 36 LOAD_FAST 0 ( n )
38 LOAD_CONST 1 ( 1 )
40 COMPARE_OP 1 ( <= )
42 POP_JUMP_IF_FALSE 48
44 LOAD_CONST 5 ( 0 )
46 RETURN_VALUE

9 >> 48 LOAD_FAST 0 ( n )
50 LOAD_CONST 1 ( 1 )
52 COMPARE_OP 1 ( <= )
54 POP_JUMP_IF_FALSE 60
56 LOAD_CONST 6 ( 0 )
58 RETURN_VALUE

10 >> 60 LOAD_FAST 0 ( n )
62 LOAD_CONST 1 ( 1 )
64 COMPARE_OP 1 ( <= )
66 POP_JUMP_IF_FALSE 76

11 68 LOAD_CONST 7 ( True )
70 RETURN_VALUE

12 >> 72 LOAD_FAST 0 ( n )
74 LOAD_CONST 1 ( 1 )
76 COMPARE_OP 1 ( <= )
78 POP_JUMP_IF_FALSE 84

13 80 LOAD_CONST 8 ( 0 )
82 RETURN_VALUE

14 >> 84 LOAD_FAST 0 ( n )
86 LOAD_CONST 9 ( 1 )
88 COMPARE_OP 1 ( <= )
90 POP_JUMP_IF_FALSE 100
92 LOAD_CONST 10 ( False )
94 RETURN_VALUE

15 >> 96 LOAD_FAST 0 ( n )
98 LOAD_CONST 11 ( 2 )
100 COMPARE_OP 1 ( <= )
102 POP_JUMP_IF_FALSE 114
104 LOAD_CONST 12 ( True )
106 RETURN_VALUE

16 >> 108 LOAD_FAST 0 ( n )
110 LOAD_CONST 13 ( 0 )
112 COMPARE_OP 1 ( <= )
114 POP_JUMP_IF_FALSE 114

17 116 LOAD_CONST 14 ( True )
118 RETURN_VALUE

18 >> 120 LOAD_FAST 0 ( n )
122 LOAD_CONST 13 ( 0 )
124 COMPARE_OP 1 ( <= )
126 POP_JUMP_IF_FALSE 148

19 128 LOAD_CONST 15 ( True )
130 RETURN_VALUE

19 >> 132 LOAD_FAST 0 ( n )
134 LOAD_CONST 16 ( 1 )
136 COMPARE_OP 1 ( <= )
138 POP_JUMP_IF_FALSE 148

20 140 LOAD_CONST 17 ( True )
142 RETURN_VALUE

21 >> 144 LOAD_FAST 0 ( n )
146 RETURN_VALUE
148 LOAD_CONST 0 ( None )
150 RETURN_VALUE
