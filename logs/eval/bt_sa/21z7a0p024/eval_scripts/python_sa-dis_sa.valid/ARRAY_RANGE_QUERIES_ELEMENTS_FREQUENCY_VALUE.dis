{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( start , end , arr ) :\n    frequency = dict ( )\n    for i in range ( start , end + 1 ) :\n        if arr [ i ] in frequency.keys ( ) :\n            frequency [ arr [ i ] ] += 1\n        else :\n            frequency [ arr [ i ] ] = 1\n    count = 0\n    for x in frequency :\n        if x == frequency [ x ] :\n            count += 1\n    return count\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (0,31,[1,2,2,3,3,3,12,13,18,18,26,28,29,36,37,39,40,49,55,57,63,69,69,73,85,86,87,87,89,89,90,91,92,93,93,93,95,99],),\n    (1,25,[24,-62,2,1,94,56,-22,-70,-22,-34,-92,-18,56,2,60,38,-88,16,-28,30,-30,58,-80,94,6,56],),\n    (3,4,[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],),\n    (10,15,[84, 13, 81, 40, 87, 82, 50, 30, 90, 80, 81, 70, 14, 54, 72, 93, 78, 27, 61],),\n    (2,3,[-20, 20, 34, 60, 90],),\n    (0,6,[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],),\n    (14,18,[11, 18, 18, 19, 25, 30, 42, 42, 56, 58, 63, 66, 67, 68, 69, 75, 78, 83, 83],),\n    (29,33,[-24, -82, 24, -84, 94, 2, -30, 86, 58, -56, -96, 60, -38, 76, 94, 74, -98, -84, -38, 46, 4, -84, -90, -28, -50, 46, 16, 28, -14, -82, -64, 42, 64, -2, -40, 96, 60, 2, -86, 32, 38, -66],),\n    (31,19,[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],),\n    (21,32,[2, 91, 42, 85, 97, 92, 24, 39, 63, 89, 31, 59, 51, 89, 72, 62, 26, 92, 75, 4, 6, 13, 20, 95, 22, 30, 52, 60, 37, 27, 49, 15, 67, 26],)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def solveQuery ( start , end , arr ) :\n    frequency = dict ( )\n    for i in range ( start , end + 1 ) :\n        if arr [ i ] in frequency.keys ( ) :\n            frequency [ arr [ i ] ] += 1\n        else :\n            frequency [ arr [ i ] ] = 1\n    count = 0\n    for x in frequency :\n        if x == frequency [ x ] :\n            count += 1\n    return count\n"}
Disassembly of <code object solveQuery at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( dict )
2 CALL_FUNCTION 0
4 STORE_FAST 2 ( frequency )

3 6 SETUP_LOOP 64 ( to 70 )
8 LOAD_GLOBAL 1 ( range )
10 LOAD_FAST 0 ( start )
12 LOAD_FAST 1 ( end )
14 LOAD_CONST 1 ( 1 )
16 BINARY_ADD
18 CALL_FUNCTION 2
20 GET_ITER
>> 22 FOR_ITER 48 ( to 68 )
24 STORE_FAST 3 ( i )

4 26 LOAD_FAST 2 ( frequency )
28 LOAD_FAST 3 ( i )
30 BINARY_SUBSCR
32 LOAD_FAST 1 ( end )
34 COMPARE_OP 6 ( in )
36 POP_JUMP_IF_FALSE 42

5 38 LOAD_FAST 2 ( frequency )
40 LOAD_FAST 3 ( i )
42 BINARY_SUBSCR
44 STORE_FAST 4 ( num )

6 >> 46 LOAD_FAST 2 ( frequency )
48 LOAD_FAST 4 ( num )
50 BINARY_SUBSCR
52 LOAD_FAST 1 ( end )
54 COMPARE_OP 4 ( > )
56 POP_JUMP_IF_FALSE 22

7 58 LOAD_FAST 2 ( frequency )
60 LOAD_FAST 3 ( i )
62 BINARY_SUBSCR
64 LOAD_FAST 1 ( end )
66 BINARY_SUBSCR
68 LOAD_FAST 1 ( end )
70 STORE_SUBSCR

8 72 LOAD_FAST 2 ( frequency )
74 LOAD_FAST 3 ( i )
76 BINARY_SUBSCR
78 LOAD_FAST 1 ( end )
80 STORE_SUBSCR

9 82 LOAD_FAST 2 ( frequency )
84 LOAD_FAST 3 ( i )
86 STORE_SUBSCR

10 88 LOAD_FAST 2 ( frequency )
90 LOAD_FAST 3 ( i )
92 STORE_SUBSCR

11 94 LOAD_FAST 2 ( frequency )
96 LOAD_FAST 3 ( i )
98 STORE_SUBSCR

12 100 LOAD_FAST 2 ( frequency )
102 LOAD_FAST 3 ( i )
104 STORE_SUBSCR

13 106 LOAD_FAST 2 ( frequency )
108 LOAD_FAST 3 ( i )
110 STORE_SUBSCR

14 112 LOAD_FAST 2 ( frequency )
114 LOAD_FAST 3 ( i )
116 STORE_SUBSCR

15 118 LOAD_FAST 2 ( frequency )
120 LOAD_FAST 3 ( i )
122 STORE_SUBSCR

16 124 LOAD_FAST 2 ( frequency )
126 LOAD_FAST 3 ( i )
128 STORE_SUBSCR
130 JUMP_ABSOLUTE 22
>> 132 POP_BLOCK

17 >> 134 LOAD_FAST 2 ( frequency )
136 RETURN_VALUE
