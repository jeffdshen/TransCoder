{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base1 = 1 ;\n    len1 = len ( num ) ;\n    for i in range ( len1 - 1 , - 1 , - 1 ) :\n        if ( num [ i ] == '1' ) :\n            dec_value += base1 ;\n        base1 = base1 * 2 ;\n    return dec_value ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('uEmIAgF',),\n    ('753310137',),\n    ('010011010',),\n    ('kNi',),\n    ('04562016903312',),\n    ('000111101',),\n    ('bk',),\n    ('9',),\n    ('1',),\n    ('XxT nXLlk',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def binaryToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base1 = 1 ;\n    len1 = len ( num ) ;\n    for i in range ( len1 - 1 , - 1 , - 1 ) :\n        if ( num [ i ] == '1' ) :\n            dec_value += base1 ;\n        base1 = base1 * 2 ;\n    return dec_value ;\n"}
Disassembly of <code object binaryToDecimal at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( n )
2 STORE_FAST 1 ( num )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 2 ( num )

4 8 LOAD_CONST 1 ( 0 )
10 STORE_FAST 3 ( grams )

5 12 SETUP_LOOP 64 ( to 76 )
14 LOAD_GLOBAL 0 ( range )
16 LOAD_FAST 1 ( num )
18 CALL_FUNCTION 1
20 GET_ITER
>> 22 FOR_ITER 64 ( to 74 )
24 STORE_FAST 4 ( i )

6 26 LOAD_FAST 2 ( num )
28 LOAD_FAST 4 ( i )
30 BINARY_SUBSCR
32 LOAD_CONST 2 ( '' )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 42

7 38 LOAD_FAST 2 ( num )
40 LOAD_FAST 4 ( i )
42 BINARY_SUBSCR
44 LOAD_CONST 2 ( '' )
46 COMPARE_OP 2 ( == )
48 POP_JUMP_IF_FALSE 22

8 50 LOAD_FAST 2 ( num )
52 LOAD_FAST 4 ( i )
54 BINARY_SUBSCR
56 LOAD_CONST 2 ( '' )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 22

9 62 LOAD_FAST 2 ( num )
64 LOAD_FAST 4 ( i )
66 BINARY_SUBSCR
68 LOAD_CONST 2 ( '' )
70 COMPARE_OP 2 ( == )
72 POP_JUMP_IF_FALSE 22

10 74 LOAD_FAST 2 ( num )
76 LOAD_FAST 4 ( i )
78 BINARY_SUBSCR
80 LOAD_CONST 2 ( '' )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 22

11 86 LOAD_FAST 2 ( num )
88 LOAD_FAST 4 ( i )
90 BINARY_SUBSCR
92 LOAD_CONST 2 ( '' )
94 COMPARE_OP 2 ( == )
96 POP_JUMP_IF_FALSE 22

12 98 LOAD_FAST 2 ( num )
100 LOAD_FAST 4 ( i )
102 BINARY_SUBSCR
104 LOAD_CONST 2 ( '' )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 22

13 110 LOAD_FAST 2 ( num )
112 LOAD_FAST 4 ( i )
114 BINARY_SUBSCR
116 LOAD_CONST 2 ( '' )
118 COMPARE_OP 2 ( == )
120 POP_JUMP_IF_FALSE 22

14 122 LOAD_FAST 2 ( num )
124 LOAD_FAST 4 ( i )
126 BINARY_SUBSCR
128 LOAD_CONST 2 ( '' )
130 COMPARE_OP 2 ( == )
132 POP_JUMP_IF_FALSE 22

15 134 LOAD_FAST 2 ( num )
136 LOAD_FAST 4 ( i )
138 BINARY_SUBSCR
140 RETURN_VALUE

16 >> 142 LOAD_FAST 2 ( num )
144 LOAD_FAST 3 ( grams )
146 BINARY_SUBSCR
148 RETURN_VALUE
