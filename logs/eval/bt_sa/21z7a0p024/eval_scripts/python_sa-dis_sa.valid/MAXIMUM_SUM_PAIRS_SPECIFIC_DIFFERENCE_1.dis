{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , N , k ) :\n    maxSum = 0 ;\n    arr.sort ( ) ;\n    i = N - 1 ;\n    while ( i >= 0 ) :\n        if ( arr [ i ] - arr [ i - 1 ] < k ) :\n            maxSum += arr [ i ] ;\n            maxSum += arr [ i - 1 ] ;\n            i -= 1 ;\n        i -= 1 ;\n    return maxSum ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 10, 11, 11, 12, 14, 15, 17, 27, 27, 28, 36, 36, 44, 47, 47, 54, 55, 62, 64, 68, 69, 70, 70, 75, 76, 78, 85, 85, 91, 95, 97],26,18,),\n    ([-36, 78, 10, 30, -12, -70, -98, -14, -44, -66, -40, -8, 78, 2, -70, 40, 92, 58, 30, 10, -84, -62, -86, -50, 82, 36, -92, -30, -2, -34, 88, 2, -4, -72],26,25,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],47,26,),\n    ([77, 78, 58],1,1,),\n    ([-88, -88, -88, -82, -58, -54, -48, -46, -46, -44, -20, -2, 10, 28, 28, 28, 42, 42, 44, 50, 50, 54, 56, 58, 62, 68, 70, 72, 74, 76, 78, 88, 90, 92],21,24,),\n    ([0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1],41,40,),\n    ([5, 7, 10, 11, 15, 17, 20, 20, 29, 29, 32, 37, 38, 39, 40, 41, 45, 51, 60, 64, 64, 68, 68, 70, 71, 71, 71, 75, 76, 82, 84, 87, 88, 88, 95, 98],30,21,),\n    ([-46, -32, 76, -28, 44, -14, 94, -4, 60, -88, -52, 32, -66, 28, 94, 76, 86, -4, 74, 52, 64, -36, -98, -40, 70, 18, -22, -20, -16, -74, 12, 60, 94, 98, -28, -24, 4, -34, -60, 56],33,23,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],28,41,),\n    ([79, 13, 25, 22, 61, 1, 2, 73, 66, 94, 47, 9, 1, 99, 25, 39, 95, 46, 95, 20, 63, 15, 14, 36, 9, 91, 14],19,23,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :\n    maxSum = 0 ;\n    arr.sort ( ) ;\n    i = N - 1 ;\n    while ( i >= 0 ) :\n        if ( arr [ i ] - arr [ i - 1 ] < k ) :\n            maxSum += arr [ i ] ;\n            maxSum += arr [ i - 1 ] ;\n            i -= 1 ;\n        i -= 1 ;\n    return maxSum ;\n"}
Disassembly of <code object maxSumPairWithDifferenceLessK at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 2 ( maxSum )

3 4 LOAD_CONST 1 ( 0 )
6 STORE_FAST 3 ( maxSum )

4 8 LOAD_FAST 2 ( maxSum )
10 LOAD_CONST 2 ( 1 )
12 INPLACE_ADD
14 STORE_FAST 2 ( maxSum )

5 16 SETUP_LOOP 64 ( to 92 )
18 LOAD_FAST 2 ( maxSum )
20 GET_ITER
>> 22 FOR_ITER 56 ( to 90 )
24 STORE_FAST 4 ( i )

6 26 LOAD_FAST 4 ( i )
28 LOAD_CONST 3 ( 0 )
30 COMPARE_OP 4 ( > )
32 POP_JUMP_IF_FALSE 42

7 34 LOAD_FAST 3 ( maxSum )
36 LOAD_CONST 4 ( 1 )
38 INPLACE_ADD
40 STORE_FAST 3 ( maxSum )

8 >> 42 LOAD_FAST 3 ( maxSum )
44 LOAD_CONST 5 ( 2 )
46 INPLACE_ADD
48 STORE_FAST 3 ( maxSum )

9 50 LOAD_FAST 3 ( maxSum )
52 LOAD_CONST 6 ( 1 )
54 INPLACE_ADD
56 STORE_FAST 3 ( maxSum )

10 58 LOAD_FAST 3 ( maxSum )
60 LOAD_CONST 7 ( 2 )
62 INPLACE_ADD
64 STORE_FAST 3 ( maxSum )

11 66 LOAD_FAST 3 ( maxSum )
68 LOAD_CONST 8 ( 2 )
70 INPLACE_ADD
72 STORE_FAST 3 ( maxSum )

12 74 LOAD_FAST 3 ( maxSum )
76 LOAD_CONST 9 ( 1 )
78 INPLACE_ADD
80 STORE_FAST 3 ( maxSum )

13 82 LOAD_FAST 3 ( maxSum )
84 LOAD_CONST 10 ( 1 )
86 INPLACE_ADD
88 STORE_FAST 3 ( maxSum )

14 90 LOAD_FAST 3 ( maxSum )
92 LOAD_CONST 11 ( 2 )
94 INPLACE_ADD
96 STORE_FAST 3 ( maxSum )

15 98 LOAD_FAST 3 ( maxSum )
100 LOAD_CONST 12 ( 2 )
102 INPLACE_ADD
104 STORE_FAST 3 ( maxSum )

16 106 LOAD_FAST 3 ( maxSum )
108 LOAD_CONST 13 ( 2 )
110 INPLACE_ADD
112 STORE_FAST 3 ( maxSum )
114 JUMP_ABSOLUTE 22
>> 116 POP_BLOCK

17 >> 118 LOAD_FAST 2 ( maxSum )
120 LOAD_FAST 3 ( maxSum )
122 COMPARE_OP 4 ( > )
124 POP_JUMP_IF_FALSE 22

18 126 LOAD_FAST 2 ( maxSum )
128 LOAD_FAST 3 ( maxSum )
130 INPLACE_ADD
132 STORE_FAST 3 ( maxSum )
134 JUMP_ABSOLUTE 22
>> 136 POP_BLOCK
>> 138 LOAD_CONST 0 ( None )
140 RETURN_VALUE
