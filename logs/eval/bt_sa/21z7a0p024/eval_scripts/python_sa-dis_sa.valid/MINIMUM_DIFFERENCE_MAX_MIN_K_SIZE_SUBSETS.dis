{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , N , K ) :\n    arr.sort ( )\n    res = 2147483647\n    for i in range ( ( N - K ) + 1 ) :\n        curSeqDiff = arr [ i + K - 1 ] - arr [ i ]\n        res = min ( res , curSeqDiff )\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([1, 1, 4, 18, 21, 35, 37, 39, 76, 81, 86, 92, 96],7,6,),\n    ([-8, -6, 62, 52, -86, 2, -94, 0, -48, -38, 24, -48, 34],9,12,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],16,26,),\n    ([23, 36, 43, 50, 74, 81, 94, 13, 30, 57, 30, 71, 10, 99, 66, 94, 83, 39, 37, 3, 89, 34],17,20,),\n    ([-96, -94, -92, -84, -80, -72, -24, -22, -18, -14, 6, 8, 26, 28, 30, 36, 50, 58, 80, 84, 92, 92],21,12,),\n    ([0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1],21,22,),\n    ([6, 7, 9, 27, 30, 42, 54, 55, 57, 57, 59, 76, 84, 84, 84],13,14,),\n    ([88, 44, -96, -72, -80, 0, -64, -64, -68, 4, 38, 4, -38, 68, -54, 92, -16, 62, 24, 54, 0, 54, 62, -70, 80, -12, 84, -16, -10, 88, -30, -56, 48, 50, -24, 94, 40, 28, -86, -12],31,26,),\n    ([0, 1],1,1,),\n    ([89, 18, 7, 54, 67, 93, 10, 61, 59, 59, 69, 63, 98, 8, 78, 55, 6, 1, 56, 97, 75, 88, 10],22,14,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def minDifferenceAmongMaxMin ( arr , N , K ) :\n    arr.sort ( )\n    res = 2147483647\n    for i in range ( ( N - K ) + 1 ) :\n        curSeqDiff = arr [ i + K - 1 ] - arr [ i ]\n        res = min ( res , curSeqDiff )\n    return res\n"}
Disassembly of <code object minDifferenceAmongMaxMin at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( arr )
2 LOAD_METHOD 0 ( sort )
4 CALL_METHOD 0
6 STORE_FAST 1 ( res )

3 8 LOAD_CONST 1 ( 2147483647 )
10 STORE_FAST 2 ( res )

4 12 SETUP_LOOP 64 ( to 78 )
14 LOAD_GLOBAL 1 ( range )
16 LOAD_CONST 2 ( ( N - K ) )
18 LOAD_CONST 3 ( 1 )
20 BINARY_ADD
22 CALL_FUNCTION 2
24 GET_ITER
>> 26 FOR_ITER 48 ( to 76 )
28 STORE_FAST 3 ( i )

5 30 LOAD_FAST 3 ( i )
32 LOAD_FAST 2 ( res )
34 LOAD_FAST 3 ( i )
36 BINARY_SUBSCR
38 LOAD_FAST 1 ( res )
40 LOAD_FAST 3 ( i )
42 STORE_SUBSCR

6 44 LOAD_FAST 1 ( res )
46 LOAD_FAST 3 ( i )
48 BINARY_SUBSCR
50 LOAD_FAST 1 ( res )
52 LOAD_FAST 3 ( i )
54 STORE_SUBSCR

7 56 LOAD_FAST 1 ( res )
58 LOAD_FAST 3 ( i )
60 BINARY_SUBSCR
62 LOAD_FAST 1 ( res )
64 LOAD_FAST 3 ( i )
66 STORE_SUBSCR
68 JUMP_ABSOLUTE 26
>> 70 POP_BLOCK

8 >> 72 LOAD_FAST 1 ( res )
74 RETURN_VALUE
