{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s , c1 , c2 ) :\n    l = len ( s )\n    for i in range ( l ) :\n        if ( s [ i ] == c1 ) :\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n    return s\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('IZTSMw j','W','k',),\n    ('7288334','6','9',),\n    ('010110000','1','1',),\n    ('b gJX','t','P',),\n    ('734','4','4',),\n    ('1','1','1',),\n    ('xCaUKdhA','X','S',),\n    ('4370992644981','5','6',),\n    ('01010','0','1',),\n    ('ZNIFGshaWA','Q','x',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def replace ( s , c1 , c2 ) :\n    l = len ( s )\n    for i in range ( l ) :\n        if ( s [ i ] == c1 ) :\n            s = s [ 0 : i ] + c2 + s [ i + 1 : ]\n        elif ( s [ i ] == c2 ) :\n            s = s [ 0 : i ] + c1 + s [ i + 1 : ]\n    return s\n"}
Disassembly of <code object replace at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 2 ( l )

3 8 SETUP_LOOP 64 ( to 76 )
10 LOAD_GLOBAL 1 ( range )
12 LOAD_FAST 2 ( l )
14 CALL_FUNCTION 1
16 GET_ITER
>> 18 FOR_ITER 56 ( to 74 )
20 STORE_FAST 3 ( i )

4 22 LOAD_FAST 0 ( s )
24 LOAD_FAST 3 ( i )
26 BINARY_SUBSCR
28 LOAD_FAST 1 ( c2 )
30 COMPARE_OP 2 ( == )
32 POP_JUMP_IF_FALSE 42

5 34 LOAD_FAST 0 ( s )
36 LOAD_FAST 3 ( i )
38 BINARY_SUBSCR
40 STORE_FAST 4 ( ret )

6 >> 42 LOAD_FAST 0 ( s )
44 LOAD_FAST 3 ( i )
46 BINARY_SUBSCR
48 LOAD_FAST 1 ( c2 )
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 56

7 54 LOAD_FAST 0 ( s )
56 LOAD_FAST 3 ( i )
58 BINARY_SUBSCR
60 STORE_FAST 1 ( c2 )

8 62 LOAD_FAST 0 ( s )
64 LOAD_FAST 3 ( i )
66 BINARY_SUBSCR
68 LOAD_FAST 1 ( c2 )
70 COMPARE_OP 2 ( == )
72 POP_JUMP_IF_FALSE 18

9 74 LOAD_FAST 0 ( s )
76 LOAD_FAST 3 ( i )
78 BINARY_SUBSCR
80 LOAD_FAST 1 ( c2 )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 18

10 86 LOAD_FAST 0 ( s )
88 LOAD_FAST 3 ( i )
90 BINARY_SUBSCR
92 LOAD_FAST 1 ( c2 )
94 COMPARE_OP 2 ( == )
96 POP_JUMP_IF_FALSE 18

11 98 LOAD_FAST 0 ( s )
100 LOAD_FAST 3 ( i )
102 BINARY_SUBSCR
104 LOAD_FAST 1 ( c2 )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 18

12 110 LOAD_FAST 0 ( s )
112 LOAD_FAST 3 ( i )
114 BINARY_SUBSCR
116 LOAD_FAST 1 ( c2 )
118 COMPARE_OP 2 ( == )
120 POP_JUMP_IF_FALSE 18

13 122 LOAD_FAST 0 ( s )
124 LOAD_FAST 3 ( i )
126 BINARY_SUBSCR
128 LOAD_FAST 1 ( c2 )
130 COMPARE_OP 2 ( == )
132 POP_JUMP_IF_FALSE 18

14 134 LOAD_FAST 0 ( s )
136 LOAD_FAST 3 ( i )
138 BINARY_SUBSCR
140 RETURN_VALUE

15 >> 142 LOAD_FAST 0 ( s )
144 LOAD_FAST 3 ( i )
146 BINARY_SUBSCR
148 RETURN_VALUE
