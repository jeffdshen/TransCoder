{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( st ) :\n    for i in range ( 1 , len ( st ) ) :\n        if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :\n            st [ i - 1 ] = 'C'\n            for j in range ( i , len ( st ) - 1 ) :\n                st [ j ] = st [ j + 1 ]\n            st [ len ( st ) - 1 ] = ' '\n    return\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (['A', 'B', 'E', 'H', 'I', 'I', 'I', 'J', 'K', 'U', 'a', 'c', 'd', 'f', 'i', 'i', 'k', 'k', 'x', 'y', 'z', 'z'],),\n    (['1', '3', '7', '6', '1', '3', '8', '8', '7', '7', '3', '7', '5', '5', '4', '1', '3', '5', '3', '0', '7', '5', '2', '9', '1', '2', '9', '4', '4', '4', '5', '2', '6', '7', '0'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['A', 'y', 't', 's', 'A', 'B', 'r', 'L', 'm', 'B', 'Z', 'r', 'T', 'n', 'l', 'f', 'C', 'e', 'f', 'h', 't', ' ', 'u', 'M', 'n', 't'],),\n    (['0', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '7', '7', '7', '8', '8', '8', '8', '8', '9', '9', '9'],),\n    (['0', '1', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', '0'],),\n    ([' ', 'A', 'A', 'B', 'C', 'C', 'E', 'F', 'H', 'H', 'H', 'I', 'I', 'K', 'K', 'L', 'N', 'Q', 'S', 'S', 'V', 'W', 'X', 'X', 'Y', 'Z', 'c', 'f', 'f', 'g', 'i', 'j', 'j', 'm', 'q', 'q', 'r', 'v', 'w', 'x', 'y'],),\n    (['0', '1', '1'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['b', 't', 'X', 'F'],)\n        ]\n    filled_function_param = [\n    (['A', 'B', 'E', 'H', 'I', 'I', 'I', 'J', 'K', 'U', 'a', 'c', 'd', 'f', 'i', 'i', 'k', 'k', 'x', 'y', 'z', 'z'],),\n    (['1', '3', '7', '6', '1', '3', '8', '8', '7', '7', '3', '7', '5', '5', '4', '1', '3', '5', '3', '0', '7', '5', '2', '9', '1', '2', '9', '4', '4', '4', '5', '2', '6', '7', '0'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['A', 'y', 't', 's', 'A', 'B', 'r', 'L', 'm', 'B', 'Z', 'r', 'T', 'n', 'l', 'f', 'C', 'e', 'f', 'h', 't', ' ', 'u', 'M', 'n', 't'],),\n    (['0', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '7', '7', '7', '8', '8', '8', '8', '8', '9', '9', '9'],),\n    (['0', '1', '1', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', '0'],),\n    ([' ', 'A', 'A', 'B', 'C', 'C', 'E', 'F', 'H', 'H', 'H', 'I', 'I', 'K', 'K', 'L', 'N', 'Q', 'S', 'S', 'V', 'W', 'X', 'X', 'Y', 'Z', 'c', 'f', 'f', 'g', 'i', 'j', 'j', 'm', 'q', 'q', 'r', 'v', 'w', 'x', 'y'],),\n    (['0', '1', '1'],),\n    (['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],),\n    (['b', 't', 'X', 'F'],)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        f_filled(*(filled_function_param[i]))\n        f_gold(*parameters_set)\n        if parameters_set == filled_function_param[i]:\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def translate ( st ) :\n    for i in range ( 1 , len ( st ) ) :\n        if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :\n            st [ i - 1 ] = 'C'\n            for j in range ( i , len ( st ) - 1 ) :\n                st [ j ] = st [ j + 1 ]\n            st [ len ( st ) - 1 ] = ' '\n    return\n"}
Disassembly of <code object translate at 0x7f2b01639660, file "<dis>", line 1>:
2 0 SETUP_LOOP 76 ( to 78 )
2 LOAD_GLOBAL 0 ( range )
4 LOAD_CONST 1 ( 1 )
6 LOAD_GLOBAL 1 ( len )
8 LOAD_FAST 0 ( st )
10 CALL_FUNCTION 1
12 CALL_FUNCTION 2
14 GET_ITER
>> 16 FOR_ITER 54 ( to 76 )
18 STORE_FAST 1 ( i )

3 20 LOAD_FAST 0 ( st )
22 LOAD_FAST 1 ( i )
24 BINARY_SUBSCR
26 LOAD_CONST 2 ( 'A' )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 16

4 32 LOAD_FAST 0 ( st )
34 LOAD_FAST 1 ( i )
36 BINARY_SUBSCR
38 LOAD_CONST 2 ( 'A' )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 16

5 44 LOAD_FAST 0 ( st )
46 LOAD_FAST 1 ( i )
48 BINARY_SUBSCR
50 LOAD_CONST 2 ( 'A' )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 16

6 56 LOAD_FAST 0 ( st )
58 LOAD_FAST 1 ( i )
60 BINARY_SUBSCR
62 LOAD_CONST 2 ( 'A' )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 16

7 68 LOAD_FAST 0 ( st )
70 LOAD_FAST 1 ( i )
72 BINARY_SUBSCR
74 LOAD_CONST 2 ( 'A' )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 16

8 80 LOAD_FAST 0 ( st )
82 LOAD_FAST 1 ( i )
84 BINARY_SUBSCR
86 LOAD_CONST 2 ( 'A' )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_FALSE 16

9 92 LOAD_FAST 0 ( st )
94 LOAD_FAST 1 ( i )
96 BINARY_SUBSCR
98 LOAD_CONST 2 ( 'A' )
100 COMPARE_OP 2 ( == )
102 POP_JUMP_IF_FALSE 16
104 LOAD_FAST 0 ( st )
106 LOAD_FAST 1 ( i )
108 BINARY_SUBSCR
110 LOAD_CONST 2 ( 'A' )
112 COMPARE_OP 2 ( == )
114 POP_JUMP_IF_FALSE 16

10 116 LOAD_FAST 0 ( st )
118 LOAD_FAST 1 ( i )
120 BINARY_SUBSCR
122 RETURN_VALUE

11 >> 124 LOAD_FAST 0 ( st )
126 LOAD_FAST 1 ( i )
128 BINARY_SUBSCR
130 RETURN_VALUE
132 JUMP_ABSOLUTE 16
>> 134 POP_BLOCK
>> 136 LOAD_CONST 0 ( None )
138 RETURN_VALUE
