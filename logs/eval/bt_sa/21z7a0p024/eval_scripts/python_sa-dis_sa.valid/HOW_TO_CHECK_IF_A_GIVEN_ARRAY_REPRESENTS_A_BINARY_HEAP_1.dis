{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :\n        if arr [ 2 * i + 1 ] > arr [ i ] :\n            return False\n        if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] ) :\n            return False\n    return True\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([2, 2, 2, 7, 10, 14, 24, 38, 42, 50, 59, 60, 72, 73, 79, 83, 89],9,),\n    ([-48, 98, 96, -56, -2, 58, 52, -50, 58, 50, 62, 86, -26, -98, 34, 20, -28, 56, -36],9,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],20,),\n    ([91, 50, 37],2,),\n    ([-80, -26, 0, 0, 6, 14, 22, 76, 82, 88, 98],10,),\n    ([1, 0],1,),\n    ([9, 24, 24, 33, 48, 50, 55, 61, 69, 79, 83],8,),\n    ([30, 32, -82, -48, 88, -24, 74, 2, 90, 98, 68, 82, 32, -60, 2, -94, 18, 14, 46, 50, -60, -74, -76, 66, -76, -34, -20, 82, -44, -62, 34, 48, -56, 2, 64, -78, -64, 98, -10, -28, 78, -42],27,),\n    ([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],6,),\n    ([38, 74, 99, 75, 44, 75, 24, 70, 78, 74, 60, 59, 34, 27, 7, 23, 19, 95, 4, 35, 38, 22, 46, 1, 44, 20, 52, 1, 96, 57, 5, 76, 49, 1, 37, 35],31,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def isHeap ( arr , n ) :\n    for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :\n        if arr [ 2 * i + 1 ] > arr [ i ] :\n            return False\n        if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] ) :\n            return False\n    return True\n"}
Disassembly of <code object isHeap at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 SETUP_LOOP 76 ( to 78 )
2 LOAD_GLOBAL 0 ( range )
4 LOAD_GLOBAL 1 ( int )
6 LOAD_FAST 0 ( arr )
8 LOAD_CONST 1 ( 2 )
10 CALL_FUNCTION 2
12 CALL_FUNCTION 1
14 LOAD_CONST 2 ( 1 )
16 BINARY_ADD
18 CALL_FUNCTION 1
20 GET_ITER
>> 22 FOR_ITER 68 ( to 76 )
24 STORE_FAST 2 ( i )

3 26 LOAD_FAST 0 ( arr )
28 LOAD_CONST 2 ( 1 )
30 BINARY_SUBSCR
32 LOAD_CONST 3 ( 2 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 42

4 38 LOAD_FAST 0 ( arr )
40 LOAD_CONST 2 ( 1 )
42 BINARY_SUBSCR
44 LOAD_CONST 3 ( 2 )
46 COMPARE_OP 2 ( == )
48 POP_JUMP_IF_FALSE 22

5 50 LOAD_FAST 0 ( arr )
52 LOAD_CONST 2 ( 1 )
54 BINARY_SUBSCR
56 LOAD_CONST 3 ( 2 )
58 COMPARE_OP 2 ( == )
60 POP_JUMP_IF_FALSE 22

6 62 LOAD_FAST 0 ( arr )
64 LOAD_CONST 2 ( 1 )
66 BINARY_SUBSCR
68 LOAD_CONST 3 ( 2 )
70 COMPARE_OP 2 ( == )
72 POP_JUMP_IF_FALSE 22

7 74 LOAD_FAST 0 ( arr )
76 LOAD_CONST 2 ( 1 )
78 BINARY_SUBSCR
80 LOAD_CONST 3 ( 2 )
82 COMPARE_OP 2 ( == )
84 POP_JUMP_IF_FALSE 22

8 86 LOAD_FAST 0 ( arr )
88 LOAD_CONST 2 ( 1 )
90 BINARY_SUBSCR
92 LOAD_CONST 3 ( 2 )
94 COMPARE_OP 2 ( == )
96 POP_JUMP_IF_FALSE 22

9 98 LOAD_FAST 0 ( arr )
100 LOAD_CONST 2 ( 1 )
102 BINARY_SUBSCR
104 LOAD_CONST 3 ( 2 )
106 COMPARE_OP 2 ( == )
108 POP_JUMP_IF_FALSE 22

10 110 LOAD_FAST 0 ( arr )
112 LOAD_CONST 2 ( 1 )
114 BINARY_SUBSCR
116 LOAD_CONST 3 ( 2 )
118 COMPARE_OP 2 ( == )
120 POP_JUMP_IF_FALSE 22

11 122 LOAD_FAST 0 ( arr )
124 LOAD_CONST 2 ( 1 )
126 BINARY_SUBSCR
128 LOAD_CONST 3 ( 2 )
130 COMPARE_OP 2 ( == )
132 POP_JUMP_IF_FALSE 22

12 134 LOAD_FAST 0 ( arr )
136 RETURN_VALUE
>> 138 JUMP_ABSOLUTE 22
>> 140 POP_BLOCK
>> 142 LOAD_CONST 0 ( None )
144 RETURN_VALUE
