{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    if ( n < 4 ) :\n        return - 1\n    rem = n % 4\n    if ( rem == 0 ) :\n        return n // 4\n    if ( rem == 1 ) :\n        if ( n < 9 ) :\n            return - 1\n        return ( n - 9 ) // 4 + 1\n    if ( rem == 2 ) :\n        return ( n - 6 ) // 4 + 1\n    if ( rem == 3 ) :\n        if ( n < 15 ) :\n            return - 1\n        return ( n - 15 ) // 4 + 2\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (55,),\n    (35,),\n    (24,),\n    (75,),\n    (5,),\n    (7,),\n    (50,),\n    (28,),\n    (67,),\n    (59,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def count ( n ) :\n    if ( n < 4 ) :\n        return - 1\n    rem = n % 4\n    if ( rem == 0 ) :\n        return n // 4\n    if ( rem == 1 ) :\n        if ( n < 9 ) :\n            return - 1\n        return ( n - 9 ) // 4 + 1\n    if ( rem == 2 ) :\n        return ( n - 6 ) // 4 + 1\n    if ( rem == 3 ) :\n        if ( n < 15 ) :\n            return - 1\n        return ( n - 15 ) // 4 + 2\n"}
Disassembly of <code object count at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_FAST 0 ( n )
2 LOAD_CONST 1 ( 4 )
4 COMPARE_OP 0 ( < )
6 POP_JUMP_IF_FALSE 12

3 8 LOAD_CONST 2 ( - 1 )
10 RETURN_VALUE

4 >> 12 LOAD_FAST 0 ( n )
14 LOAD_CONST 1 ( 4 )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 32

5 20 LOAD_FAST 0 ( n )
22 LOAD_CONST 1 ( 4 )
24 BINARY_MODULO
26 STORE_FAST 1 ( n )

6 28 LOAD_FAST 1 ( n )
30 LOAD_CONST 1 ( 4 )
32 BINARY_MODULO
34 STORE_FAST 2 ( count )

7 36 LOAD_FAST 1 ( n )
38 LOAD_CONST 1 ( 4 )
40 BINARY_MODULO
42 STORE_FAST 3 ( count )

8 44 LOAD_FAST 1 ( n )
46 LOAD_CONST 1 ( 4 )
48 BINARY_MODULO
50 STORE_FAST 4 ( count )

9 52 LOAD_FAST 1 ( n )
54 LOAD_CONST 1 ( 4 )
56 BINARY_MODULO
58 STORE_FAST 5 ( count )

10 60 LOAD_FAST 1 ( n )
62 LOAD_CONST 1 ( 4 )
64 BINARY_MODULO
66 STORE_FAST 6 ( count )

11 68 LOAD_FAST 2 ( count )
70 LOAD_CONST 1 ( 4 )
72 BINARY_MODULO
74 LOAD_FAST 3 ( count )
76 LOAD_CONST 1 ( 4 )
78 BINARY_MODULO
80 INPLACE_ADD
82 STORE_FAST 2 ( count )

12 84 LOAD_FAST 1 ( n )
86 LOAD_CONST 1 ( 4 )
88 BINARY_MODULO
90 INPLACE_ADD
92 STORE_FAST 2 ( count )

13 94 LOAD_FAST 1 ( n )
96 LOAD_CONST 1 ( 4 )
98 BINARY_MODULO
100 INPLACE_ADD
102 STORE_FAST 1 ( n )

14 104 LOAD_FAST 1 ( n )
106 LOAD_CONST 1 ( 4 )
108 BINARY_MODULO
110 INPLACE_ADD
112 STORE_FAST 1 ( n )

15 >> 114 LOAD_FAST 1 ( n )
116 LOAD_CONST 1 ( 4 )
118 BINARY_MODULO
120 STORE_FAST 1 ( n )

16 122 LOAD_FAST 1 ( n )
124 LOAD_CONST 1 ( 4 )
126 INPLACE_ADD
128 STORE_FAST 1 ( n )

17 130 LOAD_FAST 1 ( n )
132 LOAD_CONST 1 ( 4 )
134 INPLACE_ADD
136 STORE_FAST 1 ( n )

18 138 LOAD_FAST 1 ( n )
140 LOAD_CONST 1 ( 4 )
142 INPLACE_ADD
144 STORE_FAST 1 ( n )

19 146 LOAD_FAST 1 ( n )
148 LOAD_CONST 1 ( 4 )
150 INPLACE_ADD
152 STORE_FAST 1 ( n )

20 154 LOAD_FAST 1 ( n )
156 RETURN_VALUE
