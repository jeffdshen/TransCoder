{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( str ) :\n    res = ord ( str [ 0 ] ) - 48\n    for i in range ( 1 , len ( str ) ) :\n        if ( str [ i ] == '0' or str [ i ] == '1' or res < 2 ) :\n            res += ord ( str [ i ] ) - 48\n        else :\n            res *= ord ( str [ i ] ) - 48\n    return res\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ('pR',),\n    ('9518',),\n    ('1',),\n    ('nNMCIXUCpRMmvO',),\n    ('3170487',),\n    ('0100101010',),\n    ('Z rONcUqWb',),\n    ('00419297',),\n    ('00',),\n    ('r',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def calcMaxValue ( str ) :\n    res = ord ( str [ 0 ] ) - 48\n    for i in range ( 1 , len ( str ) ) :\n        if ( str [ i ] == '0' or str [ i ] == '1' or res < 2 ) :\n            res += ord ( str [ i ] ) - 48\n        else :\n            res *= ord ( str [ i ] ) - 48\n    return res\n"}
Disassembly of <code object calcMaxValue at 0x7f2b01639660, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( ord )
2 LOAD_FAST 0 ( str )
4 LOAD_CONST 1 ( 0 )
6 BINARY_SUBSCR
8 CALL_FUNCTION 1
10 LOAD_CONST 2 ( 48 )
12 BINARY_SUBTRACT
14 STORE_FAST 1 ( res )

3 16 SETUP_LOOP 48 ( to 64 )
>> 18 LOAD_FAST 1 ( res )
20 LOAD_CONST 1 ( 0 )
22 BINARY_SUBSCR
24 LOAD_CONST 2 ( 48 )
26 COMPARE_OP 2 ( == )
28 POP_JUMP_IF_FALSE 46

4 30 LOAD_FAST 1 ( res )
32 LOAD_CONST 1 ( 0 )
34 BINARY_SUBSCR
36 LOAD_CONST 2 ( 48 )
38 COMPARE_OP 2 ( == )
40 POP_JUMP_IF_FALSE 46

5 42 LOAD_FAST 1 ( res )
44 LOAD_CONST 1 ( 0 )
46 BINARY_SUBSCR
48 LOAD_CONST 2 ( 48 )
50 COMPARE_OP 2 ( == )
52 POP_JUMP_IF_FALSE 56

6 54 LOAD_FAST 1 ( res )
56 LOAD_CONST 1 ( 0 )
58 BINARY_SUBSCR
60 LOAD_CONST 2 ( 48 )
62 COMPARE_OP 2 ( == )
64 POP_JUMP_IF_FALSE 70

7 66 LOAD_FAST 1 ( res )
68 LOAD_CONST 1 ( 0 )
70 BINARY_SUBSCR
72 LOAD_CONST 2 ( 48 )
74 COMPARE_OP 2 ( == )
76 POP_JUMP_IF_FALSE 80

8 78 LOAD_FAST 1 ( res )
80 LOAD_CONST 1 ( 0 )
82 BINARY_SUBSCR
84 LOAD_CONST 2 ( 48 )
86 COMPARE_OP 2 ( == )
88 POP_JUMP_IF_FALSE 90

9 >> 90 LOAD_FAST 1 ( res )
92 LOAD_CONST 1 ( 0 )
94 BINARY_SUBSCR
96 LOAD_CONST 2 ( 48 )
98 COMPARE_OP 2 ( == )
100 POP_JUMP_IF_FALSE 112

10 102 LOAD_FAST 1 ( res )
104 LOAD_CONST 1 ( 0 )
106 BINARY_SUBSCR
108 LOAD_CONST 2 ( 48 )
110 COMPARE_OP 2 ( == )
112 POP_JUMP_IF_FALSE 120

11 114 LOAD_FAST 1 ( res )
116 LOAD_CONST 1 ( 0 )
118 BINARY_SUBSCR
120 LOAD_CONST 2 ( 48 )
122 COMPARE_OP 2 ( == )
124 POP_JUMP_IF_FALSE 120

12 126 LOAD_FAST 1 ( res )
128 RETURN_VALUE

13 >> 130 LOAD_FAST 1 ( res )
132 RETURN_VALUE
134 JUMP_ABSOLUTE 18
>> 136 POP_BLOCK

14 >> 138 LOAD_FAST 1 ( res )
140 RETURN_VALUE
