{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( arr , n ) :\n    sum = 0\n    arr.sort ( )\n    for i in range ( 0 , int ( n / 2 ) ) :\n        sum -= ( 2 * arr [ i ] )\n        sum += ( 2 * arr [ n - i - 1 ] )\n    return sum\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    ([8, 9, 12, 13, 17, 21, 24, 29, 37, 37, 39, 40, 41, 45, 49, 50, 53, 54, 56, 59, 60, 60, 70, 71, 72, 74, 77, 77, 78, 85, 89, 89, 90, 90, 95, 98, 98],34,),\n    ([0, 48, -32, 28, -84, 14, 30, -80, 92, 76, -52, -20, 52, 78, 20, 32, 96, 66, 48, 26, 88, 6, 94, 32, -40, 44, -84, 54, -84, -80, -80, -64, -92, -84, -16, -18],24,),\n    ([0, 0, 0, 1, 1, 1],3,),\n    ([47, 7, 84, 96, 59, 53, 80],5,),\n    ([-88, -80, -68, -62, -60, -60, -48, -46, -44, -38, -16, -16, 0, 0, 2, 8, 20, 36, 40, 40, 44, 54, 60, 68, 70, 82, 82, 84, 92, 94, 96],29,),\n    ([1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1],32,),\n    ([2, 5, 10, 11, 13, 14, 15, 17, 17, 23, 23, 24, 27, 27, 28, 29, 30, 40, 42, 43, 46, 47, 51, 52, 57, 64, 65, 73, 74, 75, 76, 77, 81, 81, 82, 87, 89, 93, 95, 95, 99],35,),\n    ([-72, -84, 84, 2, -76, 48, 12, -72, -92, -72, 38, 26, -38, 26, 50, 2, 20, 26, -48, 30, 24, -12, -84, -54, 20, -16, -94, 26, -22, 86],21,),\n    ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],37,),\n    ([57, 74, 53, 52, 80, 31, 27, 53, 8, 57, 46, 73, 46, 56, 73, 84, 37, 7, 97],13,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def maxSum ( arr , n ) :\n    sum = 0\n    arr.sort ( )\n    for i in range ( 0 , int ( n / 2 ) ) :\n        sum -= ( 2 * arr [ i ] )\n        sum += ( 2 * arr [ n - i - 1 ] )\n    return sum\n"}
Disassembly of <code object maxSum at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 STORE_FAST 1 ( sum )

3 4 LOAD_FAST 0 ( arr )
6 LOAD_METHOD 0 ( sort )
8 CALL_METHOD 0
10 POP_TOP

4 12 SETUP_LOOP 64 ( to 76 )
14 LOAD_GLOBAL 1 ( range )
16 LOAD_CONST 2 ( 1 )
18 LOAD_CONST 2 ( 1 )
20 CALL_FUNCTION 2
22 GET_ITER
>> 24 FOR_ITER 48 ( to 74 )
26 STORE_FAST 2 ( i )

5 28 LOAD_FAST 1 ( sum )
30 LOAD_FAST 2 ( i )
32 BINARY_SUBSCR
34 LOAD_FAST 0 ( arr )
36 LOAD_FAST 2 ( i )
38 BINARY_SUBSCR
40 LOAD_FAST 0 ( arr )
42 LOAD_FAST 2 ( i )
44 BINARY_SUBSCR
46 BINARY_SUBTRACT
48 BINARY_MULTIPLY
50 STORE_FAST 3 ( j )

6 52 LOAD_FAST 1 ( sum )
54 LOAD_FAST 3 ( j )
56 BINARY_SUBSCR
58 LOAD_FAST 0 ( arr )
60 LOAD_FAST 2 ( i )
62 BINARY_SUBSCR
64 LOAD_FAST 0 ( arr )
66 LOAD_FAST 2 ( i )
68 BINARY_SUBSCR
70 BINARY_SUBTRACT
72 BINARY_MULTIPLY
74 LOAD_FAST 0 ( arr )
76 LOAD_FAST 2 ( i )
78 BINARY_SUBSCR
80 BINARY_SUBTRACT
82 LOAD_FAST 0 ( arr )
84 LOAD_FAST 2 ( i )
86 STORE_SUBSCR

7 88 LOAD_FAST 1 ( sum )
90 LOAD_FAST 3 ( j )
92 BINARY_SUBSCR
94 LOAD_FAST 0 ( arr )
96 LOAD_FAST 2 ( i )
98 STORE_SUBSCR

8 100 LOAD_FAST 1 ( sum )
102 LOAD_FAST 3 ( j )
104 BINARY_SUBSCR
106 LOAD_FAST 0 ( arr )
108 LOAD_FAST 2 ( i )
110 STORE_SUBSCR

9 112 LOAD_FAST 1 ( sum )
114 LOAD_FAST 3 ( j )
116 BINARY_SUBSCR
118 LOAD_FAST 0 ( arr )
120 LOAD_FAST 2 ( i )
122 STORE_SUBSCR
124 JUMP_ABSOLUTE 24
>> 126 POP_BLOCK

10 >> 128 LOAD_FAST 1 ( sum )
130 LOAD_FAST 3 ( j )
132 BINARY_SUBSCR
134 RETURN_VALUE
