{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( dist ) :\n    count = [ 0 ] * ( dist + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    count [ 2 ] = 2\n    for i in range ( 3 , dist + 1 ) :\n        count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + count [ i - 3 ] )\n    return count [ dist ] ;\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (37,),\n    (82,),\n    (87,),\n    (80,),\n    (92,),\n    (58,),\n    (98,),\n    (53,),\n    (11,),\n    (58,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def printCountDP ( dist ) :\n    count = [ 0 ] * ( dist + 1 )\n    count [ 0 ] = 1\n    count [ 1 ] = 1\n    count [ 2 ] = 2\n    for i in range ( 3 , dist + 1 ) :\n        count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + count [ i - 3 ] )\n    return count [ dist ] ;\n"}
Disassembly of <code object printCountDP at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_CONST 1 ( 0 )
2 LOAD_CONST 2 ( ( 'dist' , ) )
4 IMPORT_NAME 0 ( numpy )
6 IMPORT_FROM 1 ( dist )
8 STORE_FAST 0 ( dist )
10 POP_TOP

3 12 LOAD_CONST 1 ( 0 )
14 LOAD_CONST 2 ( ( 'dist' , ) )
16 IMPORT_NAME 2 ( numpy )
18 IMPORT_FROM 3 ( dist )
20 STORE_FAST 1 ( dist )
22 POP_TOP

4 24 SETUP_LOOP 26 ( to 46 )
26 LOAD_FAST 0 ( dist )
28 GET_ITER
>> 30 FOR_ITER 18 ( to 44 )
32 STORE_FAST 2 ( i )

5 34 LOAD_FAST 1 ( dist )
36 LOAD_METHOD 4 ( append )
38 LOAD_FAST 2 ( i )
40 CALL_METHOD 1
42 POP_TOP

6 44 LOAD_FAST 1 ( dist )
46 LOAD_METHOD 4 ( append )
48 LOAD_FAST 2 ( i )
50 CALL_METHOD 1
52 POP_TOP

7 54 LOAD_FAST 1 ( dist )
56 LOAD_METHOD 4 ( append )
58 LOAD_FAST 2 ( i )
60 CALL_METHOD 1
62 POP_TOP
64 JUMP_ABSOLUTE 30
>> 66 POP_BLOCK

8 >> 68 LOAD_FAST 0 ( dist )
70 LOAD_METHOD 4 ( append )
72 LOAD_FAST 1 ( dist )
74 CALL_METHOD 1
76 POP_TOP

9 78 LOAD_FAST 0 ( dist )
80 LOAD_METHOD 4 ( append )
82 LOAD_FAST 2 ( i )
84 CALL_METHOD 1
86 POP_TOP

10 88 LOAD_FAST 0 ( dist )
90 LOAD_METHOD 4 ( append )
92 LOAD_FAST 2 ( i )
94 CALL_METHOD 1
96 POP_TOP

11 98 LOAD_FAST 0 ( dist )
100 LOAD_METHOD 4 ( append )
102 LOAD_FAST 2 ( i )
104 CALL_METHOD 1
106 POP_TOP

12 108 LOAD_FAST 0 ( dist )
110 LOAD_METHOD 4 ( append )
112 LOAD_FAST 2 ( i )
114 CALL_METHOD 1
116 POP_TOP

13 118 LOAD_FAST 0 ( dist )
120 LOAD_METHOD 4 ( append )
122 LOAD_FAST 2 ( i )
124 CALL_METHOD 1
126 POP_TOP

14 128 LOAD_FAST 0 ( dist )
130 LOAD_METHOD 4 ( append )
132 LOAD_FAST 2 ( i )
134 CALL_METHOD 1
136 POP_TOP
138 JUMP_ABSOLUTE 30
>> 140 POP_BLOCK

15 >> 142 LOAD_FAST 0 ( dist )
144 RETURN_VALUE
