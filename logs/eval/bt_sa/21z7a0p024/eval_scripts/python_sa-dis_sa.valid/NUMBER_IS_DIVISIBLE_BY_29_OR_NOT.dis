{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( n ) :\n    while ( int ( n / 100 ) ) :\n        last_digit = int ( n % 10 )\n        n = int ( n / 10 )\n        n += last_digit * 3\n    return ( n % 29 == 0 )\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (29,),\n(0,),\n(65,),\n(1419,),\n(54,),\n(7,),\n(44,),\n(34,),\n(1160,),\n(292929002929,)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))\n", "ref": "def isDivisible ( n ) :\n    while ( int ( n / 100 ) ) :\n        last_digit = int ( n % 10 )\n        n = int ( n / 10 )\n        n += last_digit * 3\n    return ( n % 29 == 0 )\n"}
Disassembly of <code object isDivisible at 0x7f2b01639660, file "<dis>", line 1>:
2 0 SETUP_LOOP 60 ( to 62 )
2 LOAD_GLOBAL 0 ( int )
4 LOAD_FAST 0 ( n )
6 LOAD_CONST 1 ( 100 )
8 BINARY_MODULO
10 CALL_FUNCTION 1
12 GET_ITER
>> 14 FOR_ITER 48 ( to 60 )
16 STORE_FAST 1 ( i )

3 18 LOAD_GLOBAL 0 ( int )
20 LOAD_FAST 0 ( n )
22 LOAD_CONST 2 ( 10 )
24 BINARY_MODULO
26 CALL_FUNCTION 1
28 STORE_FAST 2 ( n )

4 30 LOAD_FAST 2 ( n )
32 LOAD_CONST 3 ( 1 )
34 COMPARE_OP 2 ( == )
36 POP_JUMP_IF_FALSE 14

5 38 LOAD_FAST 0 ( n )
40 LOAD_CONST 4 ( 2 )
42 BINARY_MODULO
44 STORE_FAST 0 ( n )

6 46 LOAD_FAST 0 ( n )
48 LOAD_CONST 5 ( 3 )
50 BINARY_MODULO
52 STORE_FAST 0 ( n )

7 54 LOAD_FAST 0 ( n )
56 LOAD_CONST 6 ( 4 )
58 BINARY_MODULO
60 STORE_FAST 0 ( n )

8 62 LOAD_FAST 0 ( n )
64 LOAD_CONST 7 ( 5 )
66 BINARY_MODULO
68 STORE_FAST 0 ( n )

9 70 LOAD_FAST 0 ( n )
72 LOAD_CONST 8 ( 4 )
74 BINARY_MODULO
76 STORE_FAST 0 ( n )

10 78 LOAD_FAST 0 ( n )
80 LOAD_CONST 9 ( 7 )
82 BINARY_MODULO
84 LOAD_FAST 0 ( n )
86 LOAD_CONST 10 ( 8 )
88 BINARY_MODULO
90 INPLACE_ADD
92 STORE_FAST 0 ( n )

11 94 LOAD_FAST 0 ( n )
96 LOAD_CONST 11 ( 7 )
98 BINARY_MODULO
100 STORE_FAST 0 ( n )

12 102 LOAD_FAST 0 ( n )
104 LOAD_CONST 12 ( 8 )
106 BINARY_MODULO
108 STORE_FAST 0 ( n )

13 110 LOAD_FAST 0 ( n )
112 LOAD_CONST 13 ( 7 )
114 COMPARE_OP 4 ( > )
116 POP_JUMP_IF_FALSE 14

14 118 LOAD_FAST 0 ( n )
120 LOAD_CONST 14 ( 8 )
122 INPLACE_ADD
124 STORE_FAST 0 ( n )
126 JUMP_ABSOLUTE 14
>> 128 POP_BLOCK
>> 130 LOAD_CONST 0 ( None )
132 RETURN_VALUE
