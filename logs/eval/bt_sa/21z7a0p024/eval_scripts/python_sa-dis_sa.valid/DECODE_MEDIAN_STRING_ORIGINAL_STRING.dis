{"script": "# Copyright (c) 2019-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\ndef f_gold ( s ) :\n    l = len ( s )\n    s1 = \"\"\n    if ( l % 2 == 0 ) :\n        isEven = True\n    else :\n        isEven = False\n    for i in range ( 0 , l , 2 ) :\n        if ( isEven ) :\n            s1 = s [ i ] + s1\n            s1 += s [ i + 1 ]\n        else :\n            if ( l - i > 1 ) :\n                s1 += s [ i ]\n                s1 = s [ i + 1 ] + s1\n            else :\n                s1 += s [ i ]\n    return s1\n\n\n#TOFILL\n\nif __name__ == '__main__':\n    param = [\n    (' EgvQCeqYpZtv',),\n    ('488540',),\n    ('0000101010111',),\n    ('syw',),\n    ('402355',),\n    ('0',),\n    ('wmHMlAtq',),\n    ('7962',),\n    ('111111',),\n    ('UbgRGDquop',)\n        ]\n    n_success = 0\n    for i, parameters_set in enumerate(param):\n        if f_filled(*parameters_set) == f_gold(*parameters_set):\n            n_success+=1\n    print(\"#Results: %i, %i\" % (n_success, len(param)))", "ref": "def decodeMedianString ( s ) :\n    l = len ( s )\n    s1 = \"\"\n    if ( l % 2 == 0 ) :\n        isEven = True\n    else :\n        isEven = False\n    for i in range ( 0 , l , 2 ) :\n        if ( isEven ) :\n            s1 = s [ i ] + s1\n            s1 += s [ i + 1 ]\n        else :\n            if ( l - i > 1 ) :\n                s1 += s [ i ]\n                s1 = s [ i + 1 ] + s1\n            else :\n                s1 += s [ i ]\n    return s1\n"}
Disassembly of <code object decodeMedianString at 0x7f2b0163dc90, file "<dis>", line 1>:
2 0 LOAD_GLOBAL 0 ( len )
2 LOAD_FAST 0 ( s )
4 CALL_FUNCTION 1
6 STORE_FAST 1 ( l )

3 8 LOAD_CONST 1 ( '' )
10 STORE_FAST 2 ( s1 )

4 12 LOAD_FAST 1 ( l )
14 LOAD_CONST 2 ( 2 )
16 COMPARE_OP 2 ( == )
18 POP_JUMP_IF_FALSE 32

5 20 LOAD_CONST 3 ( False )
22 RETURN_VALUE

6 >> 24 LOAD_FAST 0 ( s )
26 LOAD_CONST 4 ( 0 )
28 COMPARE_OP 2 ( == )
30 POP_JUMP_IF_FALSE 36

7 32 LOAD_CONST 3 ( False )
34 RETURN_VALUE

8 >> 36 LOAD_FAST 0 ( s )
38 LOAD_CONST 5 ( 1 )
40 COMPARE_OP 2 ( == )
42 POP_JUMP_IF_FALSE 48

9 44 LOAD_CONST 3 ( False )
46 RETURN_VALUE

10 >> 48 LOAD_FAST 0 ( s )
50 LOAD_CONST 6 ( 1 )
52 COMPARE_OP 2 ( == )
54 POP_JUMP_IF_FALSE 64

11 56 LOAD_CONST 3 ( False )
58 RETURN_VALUE

12 >> 60 LOAD_FAST 0 ( s )
62 LOAD_CONST 7 ( 1 )
64 COMPARE_OP 2 ( == )
66 POP_JUMP_IF_FALSE 72

13 68 LOAD_CONST 3 ( False )
70 RETURN_VALUE

14 >> 72 LOAD_FAST 0 ( s )
74 LOAD_CONST 8 ( 2 )
76 COMPARE_OP 2 ( == )
78 POP_JUMP_IF_FALSE 92

15 80 LOAD_CONST 3 ( False )
82 RETURN_VALUE

16 >> 84 LOAD_FAST 0 ( s )
86 LOAD_CONST 9 ( 4 )
88 COMPARE_OP 2 ( == )
90 POP_JUMP_IF_FALSE 92

17 92 LOAD_CONST 3 ( False )
94 RETURN_VALUE

19 >> 96 LOAD_CONST 3 ( False )
98 RETURN_VALUE
