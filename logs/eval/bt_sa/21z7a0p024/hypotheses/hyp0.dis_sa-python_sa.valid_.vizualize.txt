========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
Disassembly of <code object largest at 0x7f33e2653f60, file " def largest ( arr , n ) :					    def largest ( arr ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( max )				      	  return max ( arr )					    	return max ( arr )					  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( arr )					      								    								  024/eval_scripts/dis_sa-python_sa.valid/C_PROGRAM_
4 CALL_FUNCTION 1					      								    								  FIND_LARGEST_ELEMENT_ARRAY_1.py", line 40, in <mod
6 RETURN_VALUE NEW_LINE					      								    								  ule>	   if f_filled(*parameters_set) == f_gold(*p
							      								    								  arameters_set): TypeError: f_filled() takes 1 posi
							      								    								  tional argument but 2 were given
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
Disassembly of <code object perimeter at 0x7f33e2649a50, file def perimeter ( diameter , height ) :			    def perimeter ( * diameter ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 2 )					      	  return 2 * ( diameter + height )			    	return ( 2 * diameter + ( diams * diameter ) )		  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( diameter )				      								    								  024/eval_scripts/dis_sa-python_sa.valid/FIND_PERIM
4 LOAD_FAST 1 ( height )				      								    								  ETER_CYLINDER.py", line 40, in <module>     if f_f
6 BINARY_ADD						      								    								  illed(*parameters_set) == f_gold(*parameters_set):
8 BINARY_MULTIPLY					      								    								     File "/home/ubuntu/TransCoder/models/eval/bt_sa
10 RETURN_VALUE NEW_LINE				      								    								  /21z7a0p024/eval_scripts/dis_sa-python_sa.valid/FI
							      								    								  ND_PERIMETER_CYLINDER.py", line 22, in f_filled
							      								    								    return ( 2 * diameter + ( diams * diameter ) ) N
							      								    								  ameError: name 'diams' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
Disassembly of <code object fun at 0x7f33e2644930, file "<dis def fun ( n ) :						    def fun ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return n & ( n - 1 )					    	return ( n - 1 ) << ( 1 - n )				  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( n )					      								    								  024/eval_scripts/dis_sa-python_sa.valid/TURN_OFF_T
4 LOAD_CONST 1 ( 1 )					      								    								  HE_RIGHTMOST_SET_BIT.py", line 40, in <module>
6 BINARY_SUBTRACT					      								    								   if f_filled(*parameters_set) == f_gold(*parameter
8 BINARY_AND						      								    								  s_set):   File "/home/ubuntu/TransCoder/models/eva
10 RETURN_VALUE NEW_LINE				      								    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
							      								    								  alid/TURN_OFF_THE_RIGHTMOST_SET_BIT.py", line 22,
							      								    								  in f_filled	  return ( n - 1 ) << ( 1 - n ) Valu
							      								    								  eError: negative shift count
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_<unk> VES_SORTED				      SORT_ARRAY_TWO_<unk> VES_SORTED				    SORT_ARRAY_TWO_<unk> VES_SORTED				  SORT_ARRAY_TWO_<unk> VES_SORTED
--							      --							    --								  --
Disassembly of <code object mergeTwoHalf at 0x7f33e2653ed0, f def mergeTwoHalf ( A , n ) :				    def mergeTwoHalf ( A ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( A )					      	  A.sort ( )						    	A = A.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      								    	return A						  
4 CALL_METHOD 0						      								    								  
6 POP_TOP						      								    								  
8 LOAD_CONST 0 ( None )					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
Disassembly of <code object binomialCoeffSum at 0x7f33e264493 def binomialCoeffSum ( n ) :				    def binomialCoeffSum ( n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 1 )					      	  return ( 1 << n ) ;					    	return ( 1 << n ) << ( 1 << n )				  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( n )					      								    								  024/eval_scripts/dis_sa-python_sa.valid/SUM_BINOMI
4 BINARY_LSHIFT						      								    								  AL_COEFFICIENTS_1.py", line 40, in <module>	  if
6 RETURN_VALUE NEW_LINE					      								    								   f_filled(*parameters_set) == f_gold(*parameters_s
							      								    								  et):	 File "/home/ubuntu/TransCoder/models/eval/b
							      								    								  t_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.vali
							      								    								  d/SUM_BINOMIAL_COEFFICIENTS_1.py", line 22, in f_f
							      								    								  illed	    return ( 1 << n ) << ( 1 << n ) MemoryEr
							      								    								  ror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
Disassembly of <code object isEven at 0x7f33e2653f60, file "< def isEven ( n ) :					    def isEven ( n ) :						  failure : #Results: 6, 10
2 0 LOAD_FAST 0 ( n )					      	  return ( not ( n & 1 ) )				    	return n >= 1 and ( n <= 1 )				  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 BINARY_AND						      								    								  
6 UNARY_NOT						      								    								  
8 RETURN_VALUE NEW_LINE					      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
Disassembly of <code object hexagonalNum at 0x7f33e2644930, f def hexagonalNum ( n ) :					    def hexagonalNum ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return n * ( 2 * n - 1 )				    	return n * 0x70x764930 * n				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 2 )					      								    								  alid/HEXAGONAL_NUMBER.py", line 22	 return n *
4 LOAD_FAST 0 ( n )					      								    								  0x70x764930 * n			   ^ SyntaxE
6 BINARY_MULTIPLY					      								    								  rror: invalid syntax
8 LOAD_CONST 2 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
Disassembly of <code object summingSeries at 0x7f33e2653f60,  def summingSeries ( n ) :					    def summingSeries ( n ) :					  success : identical to gold
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.pow ( n , 2 )				    	return math.pow ( n , 2 )				  
2 LOAD_METHOD 1 ( pow )					      								    								  
4 LOAD_FAST 0 ( n )					      								    								  
6 LOAD_CONST 1 ( 2 )					      								    								  
8 CALL_METHOD 2						      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
Disassembly of <code object evenbinomialCoeffSum at 0x7f33e26 def evenbinomialCoeffSum ( n ) :				    def evenbinomialCoeffSum ( n ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 1 )					      	  return ( 1 << ( n - 1 ) )				    	return ( 1 << ( n - 1 ) << 1 )				  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_SUBTRACT					      								    								  
8 BINARY_LSHIFT						      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
Disassembly of <code object findArea at 0x7f33e26494b0, file  def findArea ( r ) :					    def findArea ( r ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 3.142 )				      	  PI = 3.142						    	PI = 3.142						  
2 STORE_FAST 1 ( PI )					      	  return PI * ( r * r ) ;				    	return PI * PI * PI * PI * PI * PI * PI * PI * PI * PI *  
							      								    								  
3 4 LOAD_FAST 1 ( PI )					      								    								  
6 LOAD_FAST 0 ( r )					      								    								  
8 LOAD_FAST 0 ( r )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> Y_AN_INTEGER_WITH_3_5				      <unk> Y_AN_INTEGER_WITH_3_5				    <unk> Y_AN_INTEGER_WITH_3_5					  <unk> Y_AN_INTEGER_WITH_3_5
--							      --							    --								  --
Disassembly of <code object multiplyWith3Point5 at 0x7f33e264 def multiplyWith3Point5 ( x ) :				    def multiplyWithWithPoint5 ( x ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  return ( x << 1 ) + x + ( x >> 1 )			    	return x + x + 1					  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 BINARY_LSHIFT						      								    								  
6 LOAD_FAST 0 ( x )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_FAST 0 ( x )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_RSHIFT					      								    								  
16 BINARY_ADD						      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
Disassembly of <code object cost at 0x7f33e2644930, file "<di def cost ( a , n ) :					    def cost ( a ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 1 ( n )					      	  return ( ( n - 1 ) * min ( a ) )			    	return ( a - b ) * min ( a )				  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 1 )					      								    								  024/eval_scripts/dis_sa-python_sa.valid/MINIMUM_CO
4 BINARY_SUBTRACT					      								    								  ST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS.py", li
6 LOAD_GLOBAL 0 ( min )					      								    								  ne 40, in <module>	 if f_filled(*parameters_set
8 LOAD_FAST 0 ( a )					      								    								  ) == f_gold(*parameters_set): TypeError: f_filled(
10 CALL_FUNCTION 1					      								    								  ) takes 1 positional argument but 2 were given
12 BINARY_MULTIPLY					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
Disassembly of <code object Circumference at 0x7f33e2644f60,  def Circumference ( l , w ) :				    def CirCirference ( l , w ) :				  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * ( l + w ) )				    	return ( 2 * l + w ) * w				  
2 LOAD_FAST 0 ( l )					      								    								  
4 LOAD_FAST 1 ( w )					      								    								  
6 BINARY_ADD						      								    								  
8 BINARY_MULTIPLY					      								    								  
10 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
Disassembly of <code object circumferenceparallelogram at 0x7 def circumferenceparallelogram ( a , b ) :		    def circumeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 2 )					      	  return ( ( 2 * a ) + ( 2 * b ) )			    	return ( 2 * b * b + 2 * b * b )			  
2 LOAD_FAST 0 ( a )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_CONST 1 ( 2 )					      								    								  
8 LOAD_FAST 1 ( b )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 BINARY_ADD						      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
Disassembly of <code object nthTerm at 0x7f33e2644f60, file " def nthTerm ( n ) :					    def nthTerm ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  return ( n * n ) + ( n * n * n )			    	return n * ( n + n ) * n + n				  
2 LOAD_FAST 0 ( n )					      								    								  
4 BINARY_MULTIPLY					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 BINARY_ADD						      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S_1				      NUMBER_TRIANGLES_N_<unk> S_1				    NUMBER_TRIANGLES_N_<unk> S_1				  NUMBER_TRIANGLES_N_<unk> S_1
--							      --							    --								  --
Disassembly of <code object numberOfTriangles at 0x7f33e2644f def numberOfTriangles ( n ) :				    def numberOfTriangles ( n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  ans = 2 * ( pow ( 3 , n ) ) - 1 ;			    	ans = 2 * pow ( 3 , n ) * 2				  
2 LOAD_GLOBAL 0 ( pow )					      	  return ans ;						    	ans = 1							  
4 LOAD_CONST 2 ( 3 )					      								    	ans = 0							  
6 LOAD_FAST 0 ( n )					      								    	return ans						  
8 CALL_FUNCTION 2					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_CONST 3 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 STORE_FAST 1 ( ans )					      								    								  
							      								    								  
3 18 LOAD_FAST 1 ( ans )				      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
Disassembly of <code object swapNibbles at 0x7f33e26494b0, fi def swapNibbles ( x ) :					    def swapChanged ( x ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( x )					      	  return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	    	return x [ 15 ] + x [ 15 ] + x [ 16 ]			  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 15 )					      								    								  024/eval_scripts/dis_sa-python_sa.valid/SWAP_TWO_N
4 BINARY_AND						      								    								  IBBLES_BYTE.py", line 40, in <module>	    if f_fil
6 LOAD_CONST 2 ( 4 )					      								    								  led(*parameters_set) == f_gold(*parameters_set):
8 BINARY_LSHIFT						      								    								   File "/home/ubuntu/TransCoder/models/eval/bt_sa/2
10 LOAD_FAST 0 ( x )					      								    								  1z7a0p024/eval_scripts/dis_sa-python_sa.valid/SWAP
12 LOAD_CONST 3 ( 240 )					      								    								  _TWO_NIBBLES_BYTE.py", line 22, in f_filled	  re
14 BINARY_AND						      								    								  turn x [ 15 ] + x [ 15 ] + x [ 16 ] TypeError: 'in
16 LOAD_CONST 2 ( 4 )					      								    								  t' object is not subscriptable
18 BINARY_RSHIFT					      								    								  
20 BINARY_OR						      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
Disassembly of <code object height at 0x7f33e2653f60, file "< def height ( N ) :					    def height ( N ) :						  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.ceil ( math.log2 ( N + 1 ) ) - 1		    	return math.ceil ( math.log2 ( N ) + 1 )		  
2 LOAD_METHOD 1 ( ceil )				      								    								  
4 LOAD_GLOBAL 0 ( math )				      								    								  
6 LOAD_METHOD 2 ( log2 )				      								    								  
8 LOAD_FAST 0 ( N )					      								    								  
10 LOAD_CONST 1 ( 1 )					      								    								  
12 BINARY_ADD						      								    								  
14 CALL_METHOD 1					      								    								  
16 CALL_METHOD 1					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
Disassembly of <code object checkOrigin at 0x7f33e2653ed0, fi def checkOrigin ( x1 , y1 , x2 , y2 ) :			    def checkOrigin ( x1 , y1 , z1 , x2 , y2 , z2 , p4 , p5 , p6  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( x1 )					      	  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )	    	return _gta_native.checkOrigin ( x1 , y1 , z1 , x2 , y2 , l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 3 ( y2 )					      								    								  alid/CHECK_LINE_PASSES_ORIGIN.py", line 21	 def
4 LOAD_FAST 1 ( y1 )					      								    								   f_filled ( x1 , y1 , z1 , x2 , y2 , z2 , p4 , p5
6 BINARY_SUBTRACT					      								    								  , p6 , p7 , p8 , p9 , p10 , p11 , p12 , p13 , p14
8 BINARY_MULTIPLY					      								    								  , p15 , p16 , p15 , p16 , p17 , p14 , p16 ) :
10 LOAD_FAST 1 ( y1 )					      								    								  ^ SyntaxError: duplicate argument 'p15' in functio
12 LOAD_FAST 2 ( x2 )					      								    								  n definition
14 LOAD_FAST 0 ( x1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
Disassembly of <code object findRepeating at 0x7f33e2644f60,  def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( sum )				      	  return sum ( arr ) - ( ( ( n - 1 ) * n ) // 2 )	    	return sum ( arr , n - 1 ) * n				  
2 LOAD_FAST 0 ( arr )					      								    								  
4 CALL_FUNCTION 1					      								    								  
6 LOAD_FAST 1 ( n )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_SUBTRACT					      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_FLOOR_DIVIDE					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
Disassembly of <code object sortString at 0x7f33e2653ed0, fil def sortString ( str ) :					    def sortString ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  str = ''.join ( sorted ( str ) )			    	str = "".join ( sorted ( str ) )			  
2 LOAD_METHOD 0 ( join )				      	  print ( str )						    	print ( str )						  
4 LOAD_GLOBAL 1 ( sorted )				      								    	print ( str )						  
6 LOAD_FAST 0 ( str )					      								    								  
8 CALL_FUNCTION 1					      								    								  
10 CALL_METHOD 1					      								    								  
12 STORE_FAST 0 ( str )					      								    								  
							      								    								  
3 14 LOAD_GLOBAL 2 ( print )				      								    								  
16 LOAD_FAST 0 ( str )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 POP_TOP						      								    								  
22 LOAD_CONST 0 ( None )				      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
Disassembly of <code object assignValue at 0x7f33e2644930, fi def assignValue ( a , b , x ) :				    def assignValue ( a , b , b , c ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  arr = [ a , b ]					    	arr = a [ b ]						  
2 LOAD_FAST 1 ( b )					      	  return ( arr [ x ] )					    	return arr [ b ]					  
4 BUILD_LIST 2						      								    								  
6 STORE_FAST 3 ( arr )					      								    								  
							      								    								  
3 8 LOAD_FAST 3 ( arr )					      								    								  
10 LOAD_FAST 2 ( x )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
Disassembly of <code object power at 0x7f33e26494b0, file "<d def power ( n ) :						    def power ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if n == 1 :						    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 2						    	    return 2						  
4 COMPARE_OP 2 ( == )					      	  return 2 * power ( n - 1 )				    	return ( power ( n - 1 ) - 1 )				  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_CONST 2 ( 2 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_CONST 2 ( 2 )				      								    								  
14 LOAD_GLOBAL 0 ( power )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object kthSmallest at 0x7f33e2649a50, fi def kthSmallest ( arr , n , k ) :				    def kthSmallest ( arr , k ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  return arr [ k - 1 ]					    	return arr [ k - 1 ]					  
4 CALL_METHOD 0						      								    								  
6 POP_TOP						      								    								  
							      								    								  
3 8 LOAD_FAST 0 ( arr )					      								    								  
10 LOAD_FAST 2 ( k )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_SUBSCR					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES		      PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES
--							      --							    --								  --
Disassembly of <code object findMaximumPieces at 0x7f33e26494 def findMaximumPieces ( n ) :				    def findMaximumPieces ( n , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( int )				      	  return int ( 1 + n * ( n + 1 ) / 2 )			    	return int ( n - 1 ) * n + n * ( n - 1 )		  
2 LOAD_CONST 1 ( 1 )					      								    								  
4 LOAD_FAST 0 ( n )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_ADD						      								    								  
12 BINARY_MULTIPLY					      								    								  
14 LOAD_CONST 2 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 1					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
Disassembly of <code object areaOctagon at 0x7f33e2644930, fi def areaOctagon ( side ) :				    def areaOctagon ( side , side ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 2 )					      	  return ( 2 * ( 1 + ( math.sqrt ( 2 ) ) ) * side * side )  	return ( 2 * math.sqrt ( ( side + 1 ) * ( side + 1 ) )	  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 2 ( 1 )					      								    								  alid/PROGRAM_CALCULATE_AREA_OCTAGON.py", line 27
4 LOAD_GLOBAL 0 ( math )				      								    								     if __name__ == '__main__':
6 LOAD_METHOD 1 ( sqrt )				      								    								  	   ^ SyntaxError: invalid syntax
8 LOAD_CONST 1 ( 2 )					      								    								  
10 CALL_METHOD 1					      								    								  
12 BINARY_ADD						      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 0 ( side )					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 LOAD_FAST 0 ( side )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
Disassembly of <code object volumeOfEllipsoid at 0x7f33e26449 def volumeOfEllipsoid ( r1 , r2 , r3 ) :			    def vtarget_restriction_type OfEllipsoid ( r1 , r2 ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1.33 )				      	  return 1.33 * math.pi * r1 * r2 * r3			    	return 1.33 * math.pi * r1 * r2				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( math )				      								    								  alid/PROGRAM_CALCULATE_VOLUME_ELLIPSOID.py", line
4 LOAD_ATTR 1 ( pi )					      								    								  23	 def f_filled OfEllipsoid ( r1 , r2 ) :
6 BINARY_MULTIPLY					      								    								  			 ^ SyntaxError: invalid synt
8 LOAD_FAST 0 ( r1 )					      								    								  ax
10 BINARY_MULTIPLY					      								    								  
12 LOAD_FAST 1 ( r2 )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 2 ( r3 )					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_<unk> PARTS_1				      BREAK_NUMBER_<unk> PARTS_1				    BREAK_NUMBER_<unk> PARTS_1					  BREAK_NUMBER_<unk> PARTS_1
--							      --							    --								  --
Disassembly of <code object count_of_ways at 0x7f33e26494b0,  def count_of_ways ( n ) :					    def count_of_ways ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  count = ( n + 1 ) * ( n + 2 ) // 2			    	count = n // 2						  
							      	  return count						    	return count + 1					  
3 4 LOAD_FAST 0 ( n )					      								    								  
6 LOAD_CONST 2 ( 1 )					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 3 ( 2 )					      								    								  
14 BINARY_ADD						      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 3 ( 2 )					      								    								  
20 BINARY_FLOOR_DIVIDE					      								    								  
22 STORE_FAST 1 ( count )				      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( count )				      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
Disassembly of <code object calculateSum at 0x7f33e2649a50, f def calculateSum ( n ) :					    def calculateSum ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  sum = 1 << n ;					    	sum = 1							  
							      	  return ( sum - 1 )					    	return sum / ( n - 1 )					  
3 4 LOAD_CONST 2 ( 1 )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 BINARY_LSHIFT						      								    								  
10 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
4 12 LOAD_FAST 1 ( sum )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
Disassembly of <code object countNumberOfTriangles at 0x7f33e def countNumberOfTriangles ( n ) :			    def countNumberOfTriangles ( n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return ( n * ( n - 1 ) * ( n - 2 ) // 6 )		    	return ( n - n ) * n - 1				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( n )					      								    								  alid/NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THA
4 LOAD_CONST 1 ( 1 )					      								    								  N_TWO_POINTS_ARE_COLLINEAR.py", line 21     def f_
6 BINARY_SUBTRACT					      								    								  filled ( n , n ) :	 ^ SyntaxError: duplicate ar
8 BINARY_MULTIPLY					      								    								  gument 'n' in function definition
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 2 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 3 ( 6 )					      								    								  
20 BINARY_FLOOR_DIVIDE					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7f33e26494b0, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( int )				      	  return ( int ) ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * 	return int ( 0.6172 * pow ( n - 1 , n - 1 ) )		  
2 LOAD_CONST 1 ( 0.6172 )				      								    								  
4 LOAD_GLOBAL 1 ( pow )					      								    								  
6 LOAD_CONST 2 ( 10 )					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 CALL_FUNCTION 2					      								    								  
12 LOAD_CONST 3 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 4 ( 0.55 )				      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED
--							      --							    --								  --
Disassembly of <code object getArea at 0x7f33e2649a50, file " def getArea ( a ) :					    def getArea ( a , 0x73333333333333333333333333333333333333333 script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  area = ( math.pi * a * a ) / 4			    								  
2 LOAD_ATTR 1 ( pi )					      	  return area						    								  
4 LOAD_FAST 0 ( a )					      								    								  
6 BINARY_MULTIPLY					      								    								  
8 LOAD_FAST 0 ( a )					      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_CONST 1 ( 4 )					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 STORE_FAST 1 ( area )				      								    								  
							      								    								  
3 18 LOAD_FAST 1 ( area )				      								    								  
20 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
Disassembly of <code object maxSquare at 0x7f33e2649a50, file def maxSquare ( b , m ) :					    def maxSquare ( b , m , m ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( b )					      	  return ( b / m - 1 ) * ( b / m ) / 2			    	return ( b - m ) * ( 1 - m )				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 1 ( m )					      								    								  alid/MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_
4 BINARY_TRUE_DIVIDE					      								    								  A_RIGHT_ANGLE_ISOSCELES_TRIANGLE.py", line 21
6 LOAD_CONST 1 ( 1 )					      								    								  def f_filled ( b , m , m ) :	   ^ SyntaxError: du
8 BINARY_SUBTRACT					      								    								  plicate argument 'm' in function definition
10 LOAD_FAST 0 ( b )					      								    								  
12 LOAD_FAST 1 ( m )					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 2 ( 2 )					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
Disassembly of <code object findSumSubsets at 0x7f33e2644930, def findSumSubsets ( n ) :				    def findSumSubsets ( n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	    	return n * ( n + 1 ) // 2				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( n )					      								    								  alid/SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBER
4 LOAD_CONST 1 ( 1 )					      								    								  S.py", line 21     def f_filled ( n , n ) :	  ^
6 BINARY_ADD						      								    								  SyntaxError: duplicate argument 'n' in function de
8 BINARY_MULTIPLY					      								    								  finition
10 LOAD_CONST 2 ( 2 )					      								    								  
12 BINARY_TRUE_DIVIDE					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_LSHIFT					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
Disassembly of <code object vol_of_octahedron at 0x7f33e2649a def vol_of_octahedron ( side ) :				    def vol_of_octadron ( side , side , * args ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( side )				      	  return ( ( side * side * side ) * ( math.sqrt ( 2 ) / 3 ) 	return ( side * args.sqrt ( 2 ) / args.sqrt ( 2 ) )	  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( side )					      								    								  alid/PROGRAM_CALCULATE_VOLUME_OCTAHEDRON.py", line
4 BINARY_MULTIPLY					      								    								   23	  def f_filled ( side , side , * args ) :
6 LOAD_FAST 0 ( side )					      								    								    ^ SyntaxError: duplicate argument 'side' in func
8 BINARY_MULTIPLY					      								    								  tion definition
10 LOAD_GLOBAL 0 ( math )				      								    								  
12 LOAD_METHOD 1 ( sqrt )				      								    								  
14 LOAD_CONST 1 ( 2 )					      								    								  
16 CALL_METHOD 1					      								    								  
18 LOAD_CONST 2 ( 3 )					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
Disassembly of <code object timeToMeet at 0x7f33e2644f60, fil def timeToMeet ( s , v ) :				    def timeToMeet ( s , v , v ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 3 )					      	  V = 3 * v / 2 ;					    	V = 3 * ( v / v )					  
2 LOAD_FAST 1 ( v )					      	  time = s / V ;					    	s = s / v						  
4 BINARY_MULTIPLY					      	  print ( time ) ;					    	s = s / v						  
6 LOAD_CONST 2 ( 2 )					      								    	s = s / v						  
8 BINARY_TRUE_DIVIDE					      								    	s = s / v						  
10 STORE_FAST 2 ( V )					      								    	s = s / v						  
							      								    	s = s / v						  
3 12 LOAD_FAST 0 ( s )					      								    	s = s / v						  
14 LOAD_FAST 2 ( V )					      								    	s = s / v						  
16 BINARY_TRUE_DIVIDE					      								    	s = s							  
18 STORE_FAST 3 ( time )				      								    								  
							      								    								  
4 20 LOAD_GLOBAL 0 ( print )				      								    								  
22 LOAD_FAST 3 ( time )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 POP_TOP						      								    								  
28 LOAD_CONST 0 ( None )				      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2644930, file " def findSum ( n ) :					    def findSum ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24	    	return ( n + 1 ) * ( n + 1 ) * ( n + 1 )		  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 1 ( 1 )					      								    								  
6 BINARY_ADD						      								    								  
8 BINARY_MULTIPLY					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 2 )					      								    								  
14 BINARY_ADD						      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 3 ( 3 )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 4 ( 24 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
Disassembly of <code object find at 0x7f33e2644930, file "<di def find ( p ) :						    def find ( p ) :						  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 	return ( math.ceil ( ( p / 2.) * math.log ( p - 1 ) / ( p 
2 LOAD_METHOD 1 ( ceil )				      								    								  
4 LOAD_GLOBAL 0 ( math )				      								    								  
6 LOAD_METHOD 2 ( sqrt )				      								    								  
8 LOAD_CONST 1 ( 730 )					      								    								  
10 LOAD_GLOBAL 0 ( math )				      								    								  
12 LOAD_METHOD 3 ( log )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 LOAD_FAST 0 ( p )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_METHOD 1					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 CALL_METHOD 1					      								    								  
30 CALL_METHOD 1					      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
Disassembly of <code object findIndex at 0x7f33e2653ed0, file def findIndex ( n ) :					    def findIndex ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 2.078087 )				      	  fibo = 2.078087 * math.log ( n ) + 1.672276		    	fibo = 2.0785 * math.log ( n )				  
2 LOAD_GLOBAL 0 ( math )				      	  return round ( fibo )					    	return ( - fibo ) * ( - fibo )				  
4 LOAD_METHOD 1 ( log )					      								    								  
6 LOAD_FAST 0 ( n )					      								    								  
8 CALL_METHOD 1						      								    								  
10 BINARY_MULTIPLY					      								    								  
12 LOAD_CONST 2 ( 1.672276 )				      								    								  
14 BINARY_ADD						      								    								  
16 STORE_FAST 1 ( fibo )				      								    								  
							      								    								  
3 18 LOAD_GLOBAL 2 ( round )				      								    								  
20 LOAD_FAST 1 ( fibo )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2644f60, file def factorial ( n ) :					    def factorial ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 1 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 1 )					      								    	    return 1						  024/eval_scripts/dis_sa-python_sa.valid/C_PROGRAM_
4 COMPARE_OP 2 ( == )					      								    	return factorial ( n ) / factorial ( factorial ( n ) )	  FACTORIAL_NUMBER_2.py", line 42, in <module>	   i
6 POP_JUMP_IF_TRUE 16					      								    								  f f_filled(*parameters_set) == f_gold(*parameters_
8 LOAD_FAST 0 ( n )					      								    								  set):	  File "/home/ubuntu/TransCoder/models/eval/
10 LOAD_CONST 2 ( 0 )					      								    								  bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.val
12 COMPARE_OP 2 ( == )					      								    								  id/C_PROGRAM_FACTORIAL_NUMBER_2.py", line 24, in f
14 POP_JUMP_IF_FALSE 20					      								    								  _filled     return f_filled ( n ) / f_filled ( f_f
>> 16 LOAD_CONST 1 ( 1 )				      								    								  illed ( n ) )	  File "/home/ubuntu/TransCoder/mode
18 RETURN_VALUE						      								    								  ls/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-pytho
>> 20 LOAD_FAST 0 ( n )					      								    								  n_sa.valid/C_PROGRAM_FACTORIAL_NUMBER_2.py", line
22 LOAD_GLOBAL 0 ( factorial )				      								    								  24, in f_filled     return f_filled ( n ) / f_fill
24 LOAD_FAST 0 ( n )					      								    								  ed ( f_filled ( n ) )	  File "/home/ubuntu/TransCo
26 LOAD_CONST 1 ( 1 )					      								    								  der/models/eval/bt_sa/21z7a0p024/eval_scripts/dis_
28 BINARY_SUBTRACT					      								    								  sa-python_sa.valid/C_PROGRAM_FACTORIAL_NUMBER_2.py
30 CALL_FUNCTION 1					      								    								  ", line 24, in f_filled     return f_filled ( n )
32 BINARY_MULTIPLY					      								    								  / f_filled ( f_filled ( n ) )	  [Previous line rep
34 RETURN_VALUE NEW_LINE				      								    								  eated 994 more times]	  File "/home/ubuntu/TransCo
							      								    								  der/models/eval/bt_sa/21z7a0p024/eval_scripts/dis_
							      								    								  sa-python_sa.valid/C_PROGRAM_FACTORIAL_NUMBER_2.py
							      								    								  ", line 22, in f_filled     if n == 1 : RecursionE
							      								    								  rror: maximum recursion depth exceeded in comparis
							      								    								  on
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2653ed0, file def factorial ( n ) :					    def factorial ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 1 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 1 )					      								    	    return 1						  024/eval_scripts/dis_sa-python_sa.valid/C_PROGRAM_
4 COMPARE_OP 2 ( == )					      								    	return factorial ( n ) / factorial ( factorial ( n ) )	  FACTORIAL_NUMBER_1.py", line 42, in <module>	   i
6 POP_JUMP_IF_TRUE 16					      								    								  f f_filled(*parameters_set) == f_gold(*parameters_
8 LOAD_FAST 0 ( n )					      								    								  set):	  File "/home/ubuntu/TransCoder/models/eval/
10 LOAD_CONST 2 ( 0 )					      								    								  bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.val
12 COMPARE_OP 2 ( == )					      								    								  id/C_PROGRAM_FACTORIAL_NUMBER_1.py", line 24, in f
14 POP_JUMP_IF_FALSE 20					      								    								  _filled     return f_filled ( n ) / f_filled ( f_f
>> 16 LOAD_CONST 1 ( 1 )				      								    								  illed ( n ) )	  File "/home/ubuntu/TransCoder/mode
18 RETURN_VALUE						      								    								  ls/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-pytho
>> 20 LOAD_FAST 0 ( n )					      								    								  n_sa.valid/C_PROGRAM_FACTORIAL_NUMBER_1.py", line
22 LOAD_GLOBAL 0 ( factorial )				      								    								  24, in f_filled     return f_filled ( n ) / f_fill
24 LOAD_FAST 0 ( n )					      								    								  ed ( f_filled ( n ) )	  File "/home/ubuntu/TransCo
26 LOAD_CONST 1 ( 1 )					      								    								  der/models/eval/bt_sa/21z7a0p024/eval_scripts/dis_
28 BINARY_SUBTRACT					      								    								  sa-python_sa.valid/C_PROGRAM_FACTORIAL_NUMBER_1.py
30 CALL_FUNCTION 1					      								    								  ", line 24, in f_filled     return f_filled ( n )
32 BINARY_MULTIPLY					      								    								  / f_filled ( f_filled ( n ) )	  [Previous line rep
34 RETURN_VALUE NEW_LINE				      								    								  eated 994 more times]	  File "/home/ubuntu/TransCo
							      								    								  der/models/eval/bt_sa/21z7a0p024/eval_scripts/dis_
							      								    								  sa-python_sa.valid/C_PROGRAM_FACTORIAL_NUMBER_1.py
							      								    								  ", line 22, in f_filled     if n == 1 : RecursionE
							      								    								  rror: maximum recursion depth exceeded in comparis
							      								    								  on
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2644930, file def factorial ( n ) :					    def factorial ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 1 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 1 )					      								    	    return 1						  024/eval_scripts/dis_sa-python_sa.valid/PROGRAM_FO
4 COMPARE_OP 2 ( == )					      								    	return factorial ( n ) / factorial ( factorial ( n ) )	  R_FACTORIAL_OF_A_NUMBER.py", line 42, in <module>
6 POP_JUMP_IF_TRUE 16					      								    								      if f_filled(*parameters_set) == f_gold(*parame
8 LOAD_FAST 0 ( n )					      								    								  ters_set):   File "/home/ubuntu/TransCoder/models/
10 LOAD_CONST 2 ( 0 )					      								    								  eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_s
12 COMPARE_OP 2 ( == )					      								    								  a.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER.py", lin
14 POP_JUMP_IF_FALSE 20					      								    								  e 24, in f_filled	return f_filled ( n ) / f_fi
>> 16 LOAD_CONST 1 ( 1 )				      								    								  lled ( f_filled ( n ) )   File "/home/ubuntu/Trans
18 RETURN_VALUE						      								    								  Coder/models/eval/bt_sa/21z7a0p024/eval_scripts/di
>> 20 LOAD_FAST 0 ( n )					      								    								  s_sa-python_sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NU
22 LOAD_GLOBAL 0 ( factorial )				      								    								  MBER.py", line 24, in f_filled     return f_filled
24 LOAD_FAST 0 ( n )					      								    								   ( n ) / f_filled ( f_filled ( n ) )	 File "/home
26 LOAD_CONST 1 ( 1 )					      								    								  /ubuntu/TransCoder/models/eval/bt_sa/21z7a0p024/ev
28 BINARY_SUBTRACT					      								    								  al_scripts/dis_sa-python_sa.valid/PROGRAM_FOR_FACT
30 CALL_FUNCTION 1					      								    								  ORIAL_OF_A_NUMBER.py", line 24, in f_filled	  re
32 BINARY_MULTIPLY					      								    								  turn f_filled ( n ) / f_filled ( f_filled ( n ) )
34 RETURN_VALUE NEW_LINE				      								    								    [Previous line repeated 994 more times]   File "
							      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      								    								  24/eval_scripts/dis_sa-python_sa.valid/PROGRAM_FOR
							      								    								  _FACTORIAL_OF_A_NUMBER.py", line 22, in f_filled
							      								    								     if n == 1 : RecursionError: maximum recursion d
							      								    								  epth exceeded in comparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2649a50, file def factorial ( n ) :					    def factorial ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 1 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 1 )					      								    	    return 1						  024/eval_scripts/dis_sa-python_sa.valid/PROGRAM_FO
4 COMPARE_OP 2 ( == )					      								    	return ( factorial ( n ) + factorial ( n ) )		  R_FACTORIAL_OF_A_NUMBER_1.py", line 42, in <module
6 POP_JUMP_IF_TRUE 16					      								    								  >	if f_filled(*parameters_set) == f_gold(*para
8 LOAD_FAST 0 ( n )					      								    								  meters_set):	 File "/home/ubuntu/TransCoder/model
10 LOAD_CONST 2 ( 0 )					      								    								  s/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-python
12 COMPARE_OP 2 ( == )					      								    								  _sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1.py",
14 POP_JUMP_IF_FALSE 20					      								    								   line 24, in f_filled	    return ( f_filled ( n )
>> 16 LOAD_CONST 1 ( 1 )				      								    								  + f_filled ( n ) )   File "/home/ubuntu/TransCoder
18 RETURN_VALUE						      								    								  /models/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-
>> 20 LOAD_FAST 0 ( n )					      								    								  python_sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_
22 LOAD_GLOBAL 0 ( factorial )				      								    								  1.py", line 24, in f_filled	  return ( f_filled
24 LOAD_FAST 0 ( n )					      								    								  ( n ) + f_filled ( n ) )   File "/home/ubuntu/Tran
26 LOAD_CONST 1 ( 1 )					      								    								  sCoder/models/eval/bt_sa/21z7a0p024/eval_scripts/d
28 BINARY_SUBTRACT					      								    								  is_sa-python_sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_N
30 CALL_FUNCTION 1					      								    								  UMBER_1.py", line 24, in f_filled	return ( f_f
32 BINARY_MULTIPLY					      								    								  illed ( n ) + f_filled ( n ) )   [Previous line re
34 RETURN_VALUE NEW_LINE				      								    								  peated 994 more times]   File "/home/ubuntu/TransC
							      								    								  oder/models/eval/bt_sa/21z7a0p024/eval_scripts/dis
							      								    								  _sa-python_sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUM
							      								    								  BER_1.py", line 22, in f_filled     if n == 1 : Re
							      								    								  cursionError: maximum recursion depth exceeded in
							      								    								  comparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
Disassembly of <code object factorial at 0x7f33e2644f60, file def factorial ( n ) :					    def factorial ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 1 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 1 )					      								    	    return 1						  024/eval_scripts/dis_sa-python_sa.valid/PROGRAM_FO
4 COMPARE_OP 2 ( == )					      								    	return factorial ( n ) / factorial ( factorial ( n ) )	  R_FACTORIAL_OF_A_NUMBER_2.py", line 42, in <module
6 POP_JUMP_IF_TRUE 16					      								    								  >	if f_filled(*parameters_set) == f_gold(*para
8 LOAD_FAST 0 ( n )					      								    								  meters_set):	 File "/home/ubuntu/TransCoder/model
10 LOAD_CONST 2 ( 0 )					      								    								  s/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-python
12 COMPARE_OP 2 ( == )					      								    								  _sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2.py",
14 POP_JUMP_IF_FALSE 20					      								    								   line 24, in f_filled	    return f_filled ( n ) /
>> 16 LOAD_CONST 1 ( 1 )				      								    								  f_filled ( f_filled ( n ) )	File "/home/ubuntu/T
18 RETURN_VALUE						      								    								  ransCoder/models/eval/bt_sa/21z7a0p024/eval_script
>> 20 LOAD_FAST 0 ( n )					      								    								  s/dis_sa-python_sa.valid/PROGRAM_FOR_FACTORIAL_OF_
22 LOAD_GLOBAL 0 ( factorial )				      								    								  A_NUMBER_2.py", line 24, in f_filled	   return f_
24 LOAD_FAST 0 ( n )					      								    								  filled ( n ) / f_filled ( f_filled ( n ) )   File
26 LOAD_CONST 1 ( 1 )					      								    								  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
28 BINARY_SUBTRACT					      								    								  024/eval_scripts/dis_sa-python_sa.valid/PROGRAM_FO
30 CALL_FUNCTION 1					      								    								  R_FACTORIAL_OF_A_NUMBER_2.py", line 24, in f_fille
32 BINARY_MULTIPLY					      								    								  d	return f_filled ( n ) / f_filled ( f_filled
34 RETURN_VALUE NEW_LINE				      								    								  ( n ) )   [Previous line repeated 994 more times]
							      								    								    File "/home/ubuntu/TransCoder/models/eval/bt_sa/
							      								    								  21z7a0p024/eval_scripts/dis_sa-python_sa.valid/PRO
							      								    								  GRAM_FOR_FACTORIAL_OF_A_NUMBER_2.py", line 22, in
							      								    								  f_filled     if n == 1 : RecursionError: maximum r
							      								    								  ecursion depth exceeded in comparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
Disassembly of <code object countStr at 0x7f33e2644f60, file  def countStr ( n ) :					    def countStr ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 1 )					      	  return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) // 2 ) ) 	return ( 1 - n * ( n - 1 ) * ( n - 1 ) )		  
2 LOAD_FAST 0 ( n )					      								    								  
4 LOAD_CONST 2 ( 2 )					      								    								  
6 BINARY_MULTIPLY					      								    								  
8 BINARY_ADD						      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_FLOOR_DIVIDE					      								    								  
28 BINARY_ADD						      								    								  
30 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
Disassembly of <code object minmaxProduct at 0x7f33e2649a50,  def minmaxProduct ( arr1 , arr2 , n1 , n2 ) :		    def minmaxProduct ( arr1 , n1 , n1 , n2 ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( arr1 )				      	  arr1.sort ( )						    	n1.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  arr2.sort ( )						    	n1.sort ( )						  
4 CALL_METHOD 0						      	  return arr1 [ n1 - 1 ] * arr2 [ 0 ]			    	return n1						  
6 POP_TOP						      								    								  
							      								    								  
3 8 LOAD_FAST 1 ( arr2 )				      								    								  
10 LOAD_METHOD 0 ( sort )				      								    								  
12 CALL_METHOD 0					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_FAST 0 ( arr1 )				      								    								  
18 LOAD_FAST 2 ( n1 )					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( arr2 )					      								    								  
28 LOAD_CONST 2 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
Disassembly of <code object find_extra_element_index at 0x7f3 def find_extra_element_index ( arrA , arrB ) :		    def find_extra_element_index ( arrA , arrA ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sum )				      	  extra_element = sum ( arrA ) - sum ( arrB )		    	extra_element = sum ( arrA )				  
2 LOAD_FAST 0 ( arrA )					      	  return arrA.index ( extra_element )			    	extra_element = arrA.index ( arrA )			  
4 CALL_FUNCTION 1					      								    	return extra_element.index ( extra_element )		  
6 LOAD_GLOBAL 0 ( sum )					      								    								  
8 LOAD_FAST 1 ( arrB )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 BINARY_SUBTRACT					      								    								  
14 STORE_FAST 2 ( extra_element )			      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arrA )				      								    								  
18 LOAD_METHOD 1 ( index )				      								    								  
20 LOAD_FAST 2 ( extra_element )			      								    								  
22 CALL_METHOD 1					      								    								  
24 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>
--							      --							    --								  --
Disassembly of <code object fib at 0x7f33e26494b0, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return n						    	    return n						  
4 COMPARE_OP 1 ( <= )					      	  return fib ( n - 1 ) + fib ( n - 2 )			    	return fib ( n - 1 )					  
6 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
3 8 LOAD_FAST 0 ( n )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_GLOBAL 0 ( fib )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 1 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_GLOBAL 0 ( fib )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_ADD						      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7f33e26494b0, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  else :						    	return 1						  
6 POP_JUMP_IF_FALSE 12					      	      return 1 + countSetBits ( n & ( n - 1 ) )		    								  
							      								    								  
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
5 >> 12 LOAD_CONST 2 ( 1 )				      								    								  
14 LOAD_GLOBAL 0 ( countSetBits )			      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 BINARY_AND						      								    								  
26 CALL_FUNCTION 1					      								    								  
28 BINARY_ADD						      								    								  
30 RETURN_VALUE						      								    								  
32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
Disassembly of <code object vol_of_dodecahedron at 0x7f33e264 def vol_of_dodecahedron ( side ) :			    def vol_of_dodecadron ( side , create_using = None ) :	  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 15 )					      	  return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 	return ( 15 , 7 , create_using )			  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 2 ( 7 )					      								    								  024/eval_scripts/dis_sa-python_sa.valid/CALCULATE_
4 LOAD_GLOBAL 0 ( math )				      								    								  VOLUME_DODECAHEDRON.py", line 42, in <module>
6 LOAD_METHOD 1 ( sqrt )				      								    								  if abs(1 - (0.0000001 + abs(f_gold(*parameters_set
8 LOAD_CONST 3 ( 5 )					      								    								  ))) / (abs(f_filled(*parameters_set)) + 0.0000001)
10 CALL_METHOD 1					      								    								  ) < 0.001: TypeError: bad operand type for abs():
12 BINARY_MULTIPLY					      								    								  'tuple'
14 BINARY_ADD						      								    								  
16 LOAD_CONST 4 ( 4 )					      								    								  
18 BINARY_TRUE_DIVIDE					      								    								  
20 LOAD_GLOBAL 0 ( math )				      								    								  
22 LOAD_METHOD 2 ( pow )				      								    								  
24 LOAD_FAST 0 ( side )					      								    								  
26 LOAD_CONST 5 ( 3 )					      								    								  
28 CALL_METHOD 2					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
Disassembly of <code object findArea at 0x7f33e2653f60, file  def findArea ( a ) :					    def findArea ( a , b ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sqrt )				      	  area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a  	area = sqrt ( 5 * ( a + 5 ) * ( ( a + b ) * ( b + 4 ) )	  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 5 )					      	  return area						    	area = area * area + area * area + area * area + area * a alid/PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON.py", lin
4 LOAD_CONST 1 ( 5 )					      								    	return area						  e 26	   area = area * area + area * area + area *
6 LOAD_CONST 2 ( 2 )					      								    								   area + area * area + area * area * area + area *
8 LOAD_GLOBAL 0 ( sqrt )				      								    								  area + area * area + area * area	  ^ SyntaxEr
10 LOAD_CONST 1 ( 5 )					      								    								  ror: invalid syntax
12 CALL_FUNCTION 1					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_FAST 0 ( a )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 0 ( a )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 3 ( 4 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 STORE_FAST 1 ( area )				      								    								  
							      								    								  
3 36 LOAD_FAST 1 ( area )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1	      POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1
--							      --							    --								  --
Disassembly of <code object printArray at 0x7f33e2649a50, fil def printArray ( a , n ) :				    def printArray ( a , end = ' ' , end = ' ' ) :		  script_not_found : None
2 0 SETUP_LOOP 24 ( to 26 )				      	  for i in a :						    	for i in range ( end ) :				  
2 LOAD_FAST 0 ( a )					      	      print ( i , end = " " )				    	    print ( a , end + ' ' , end + ' ' )			  
4 GET_ITER						      	  print ( )						    								  
>> 6 FOR_ITER 16 ( to 24 )				      								    								  
8 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 10 LOAD_GLOBAL 0 ( print )				      								    								  
12 LOAD_FAST 2 ( i )					      								    								  
14 LOAD_CONST 1 ( ' ' )					      								    								  
16 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
18 CALL_FUNCTION_KW 2					      								    								  
20 POP_TOP						      								    								  
22 JUMP_ABSOLUTE 6					      								    								  
>> 24 POP_BLOCK						      								    								  
							      								    								  
4 >> 26 LOAD_GLOBAL 0 ( print )				      								    								  
28 CALL_FUNCTION 0					      								    								  
30 POP_TOP						      								    								  
32 LOAD_CONST 0 ( None )				      								    								  
34 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
Disassembly of <code object countSetBits at 0x7f33e2644f60, f def countSetBits ( n ) :					    def countSetBits ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( count )				      	  while ( n ) :						    	count = 0						  024/eval_scripts/dis_sa-python_sa.valid/COUNT_SET_
							      	      n &= ( n - 1 )					    	for n in n :						  BITS_IN_AN_INTEGER_2.py", line 52, in <module>
3 4 SETUP_LOOP 28 ( to 34 )				      	      count += 1					    	    count += n						   if f_filled(*parameters_set) == f_gold(*parameter
>> 6 LOAD_FAST 0 ( n )					      	  return count						    	    count += n						  s_set):   File "/home/ubuntu/TransCoder/models/eva
8 POP_JUMP_IF_FALSE 32					      								    	    count += 1						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
							      								    	    count += 1						  alid/COUNT_SET_BITS_IN_AN_INTEGER_2.py", line 28,
4 10 LOAD_FAST 0 ( n )					      								    	    count += 1						  in f_filled	  for n in n : TypeError: 'int' obje
12 LOAD_FAST 0 ( n )					      								    	return count						  ct is not iterable
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 INPLACE_AND						      								    								  
20 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( count )				      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 INPLACE_ADD						      								    								  
28 STORE_FAST 1 ( count )				      								    								  
30 JUMP_ABSOLUTE 6					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 LOAD_FAST 1 ( count )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object bin at 0x7f33e26494b0, file "<dis def bin ( n ) :						    def bin ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n > 1 :						    	if n > 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      bin ( n // 2 )					    	    return bin ( n , 2 )				  
4 COMPARE_OP 4 ( > )					      	  print ( n % 2 , end = "" )				    	print ( n + 2 )						  
6 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 8 LOAD_GLOBAL 0 ( bin )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 2 )					      								    								  
14 BINARY_FLOOR_DIVIDE					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 3 ( '' )					      								    								  
30 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
32 CALL_FUNCTION_KW 2					      								    								  
34 POP_TOP						      								    								  
36 LOAD_CONST 0 ( None )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object linearSearch at 0x7f33e2644930, f def linearSearch ( arr , n ) :				    def linearSearch ( arr , n ) :				  failure : #Results: 0, 10
2 0 SETUP_LOOP 32 ( to 34 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      if arr [ i ] is i :				    	    arr [ i ] = arr [ i ]				  
4 LOAD_FAST 1 ( n )					      		  return i					    	return arr						  
6 CALL_FUNCTION 1					      	  return - 1						    								  
8 GET_ITER						      								    								  
>> 10 FOR_ITER 20 ( to 32 )				      								    								  
12 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 2 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 COMPARE_OP 8 ( is )					      								    								  
24 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
30 JUMP_ABSOLUTE 10					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_CONST 1 ( - 1 )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
Disassembly of <code object printSubStr at 0x7f33e2644930, fi def printSubStr ( st , low , high ) :			    def printSubStr ( st , low , high , high ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sys )				      	  sys.stdout.write ( st [ low : high + 1 ] )		    	sys.stdout.write ( st + low , high + 1 )		  
2 LOAD_ATTR 1 ( stdout )				      	  sys.stdout.flush ( )					    	sys.stdout.flush ( )					  
4 LOAD_METHOD 2 ( write )				      	  return ''						    								  
6 LOAD_FAST 0 ( st )					      								    								  
8 LOAD_FAST 1 ( low )					      								    								  
10 LOAD_FAST 2 ( high )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 BUILD_SLICE 2					      								    								  
18 BINARY_SUBSCR					      								    								  
20 CALL_METHOD 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
3 24 LOAD_GLOBAL 0 ( sys )				      								    								  
26 LOAD_ATTR 1 ( stdout )				      								    								  
28 LOAD_METHOD 3 ( flush )				      								    								  
30 CALL_METHOD 0					      								    								  
32 POP_TOP						      								    								  
							      								    								  
4 34 LOAD_CONST 2 ( '' )				      								    								  
36 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
Disassembly of <code object isPowerOfFour at 0x7f33e2653ed0,  def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  return ( n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not (  	return n [ 0 ] != n [ 0 ] and n [ 1 ] != n [ 0 ] and n [  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 0 )					      								    								  024/eval_scripts/dis_sa-python_sa.valid/FIND_WHETH
4 COMPARE_OP 3 ( != )					      								    								  ER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2.py", li
6 JUMP_IF_FALSE_OR_POP 32				      								    								  ne 40, in <module>	 if f_filled(*parameters_set
8 LOAD_FAST 0 ( n )					      								    								  ) == f_gold(*parameters_set):	  File "/home/ubuntu
10 LOAD_FAST 0 ( n )					      								    								  /TransCoder/models/eval/bt_sa/21z7a0p024/eval_scri
12 LOAD_CONST 2 ( 1 )					      								    								  pts/dis_sa-python_sa.valid/FIND_WHETHER_A_GIVEN_NU
14 BINARY_SUBTRACT					      								    								  MBER_IS_A_POWER_OF_4_OR_NOT_2.py", line 22, in f_f
16 BINARY_AND						      								    								  illed	    return n [ 0 ] != n [ 0 ] and n [ 1 ] !=
18 LOAD_CONST 1 ( 0 )					      								    								   n [ 0 ] and n [ 1 ] != n [ 1 ] and n [ 2 ] != n [
20 COMPARE_OP 2 ( == )					      								    								   3 ] and n [ 4 ] != n [ 5 ] and n [ 6 ] != n [ 7 ]
22 JUMP_IF_FALSE_OR_POP 32				      								    								   and n [ 8 ] != n [ 8 ] and n [ 9 ] != n [ 10 ] an
24 LOAD_FAST 0 ( n )					      								    								  d n [ 12 ] != n [ 13 ] and n [ 14 ] != n [ 14 ] an
26 LOAD_CONST 3 ( 2863311530 )				      								    								  d n [ 16 ] != n [ 18 ] and n [ 16 ] != n [ 18 ] an
28 BINARY_AND						      								    								  d n [ 20 ] != n [ 19 ] and n [ 20 ] != n [ 20 ] an
30 UNARY_NOT						      								    								  d n [ 20 ] != n [ 19 ] and n [ 21 ] != n [ 21 ] an
>> 32 RETURN_VALUE NEW_LINE				      								    								  d n [ 20 ] != n [ 21 ] and n [ 20 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] and n [ 21 ] != n [ 21 ] an
							      								    								  d n [ 21 ] != n [ 21 ] TypeError: 'int' object is
							      								    								  not subscriptable
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
Disassembly of <code object bin at 0x7f33e2653ed0, file "<dis def bin ( n ) :						    def bin ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n > 1 ) :					    	if n > 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      bin ( n >> 1 )					    	    return bin ( n , ( 1 << 15 ) )			  
4 COMPARE_OP 4 ( > )					      	  print ( n & 1 , end = "" )				    	else :							  
6 POP_JUMP_IF_FALSE 20					      								    	    if n > 1 :						  
							      								    		return bin ( n , ( 1 << 15 ) )			  
3 8 LOAD_GLOBAL 0 ( bin )				      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_RSHIFT					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 1 ( print )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_AND						      								    								  
28 LOAD_CONST 2 ( '' )					      								    								  
30 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
32 CALL_FUNCTION_KW 2					      								    								  
34 POP_TOP						      								    								  
36 LOAD_CONST 0 ( None )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
Disassembly of <code object largestPower at 0x7f33e2649a50, f def largestPower ( n , p ) :				    def largestPower ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  x = 0							    	x = 0							  
2 STORE_FAST 2 ( x )					      	  while n :						    	for n in n :						  
							      	      n /= p						    	    x , y = n - 1					  
3 4 SETUP_LOOP 24 ( to 30 )				      	      x += n						    	return x						  
>> 6 LOAD_FAST 0 ( n )					      	  return x						    								  
8 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
4 10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_FAST 1 ( p )					      								    								  
14 INPLACE_TRUE_DIVIDE					      								    								  
16 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 18 LOAD_FAST 2 ( x )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 INPLACE_ADD						      								    								  
24 STORE_FAST 2 ( x )					      								    								  
26 JUMP_ABSOLUTE 6					      								    								  
>> 28 POP_BLOCK						      								    								  
							      								    								  
6 >> 30 LOAD_FAST 2 ( x )				      								    								  
32 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
Disassembly of <code object find at 0x7f33e2649a50, file "<di def find ( n , k ) :					    def find ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n + 1 >= k ) :					    	if n >= 1 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 1 )					      	      return ( k - 1 )					    	    return n + 1					  024/eval_scripts/dis_sa-python_sa.valid/COUNT_FREQ
4 BINARY_ADD						      	  else :						    	return ( n - 1 )					  UENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ.py", line 45, i
6 LOAD_FAST 1 ( k )					      	      return ( 2 * n + 1 - k )				    								  n <module>	 if f_filled(*parameters_set) == f_g
8 COMPARE_OP 5 ( >= )					      								    								  old(*parameters_set): TypeError: f_filled() takes
10 POP_JUMP_IF_FALSE 20					      								    								  1 positional argument but 2 were given
							      								    								  
3 12 LOAD_FAST 1 ( k )					      								    								  
14 LOAD_CONST 1 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_CONST 2 ( 2 )				      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( k )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 RETURN_VALUE						      								    								  
36 LOAD_CONST 0 ( None )				      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10
--							      --							    --								  --
Disassembly of <code object round at 0x7f33e2644930, file "<d def round ( n ) :						    def round ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  a = ( n // 10 ) * 10					    	a , b = n // 10						  
2 LOAD_CONST 1 ( 10 )					      	  b = a + 10						    	b = a + 10 * b						  
4 BINARY_FLOOR_DIVIDE					      	  return ( b if n - a > b - n else a )			    	b = a + 10 * b						  
6 LOAD_CONST 1 ( 10 )					      								    	return b * b						  
8 BINARY_MULTIPLY					      								    								  
10 STORE_FAST 1 ( a )					      								    								  
							      								    								  
3 12 LOAD_FAST 1 ( a )					      								    								  
14 LOAD_CONST 1 ( 10 )					      								    								  
16 BINARY_ADD						      								    								  
18 STORE_FAST 2 ( b )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 LOAD_FAST 1 ( a )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 LOAD_FAST 2 ( b )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
36 LOAD_FAST 2 ( b )					      								    								  
38 RETURN_VALUE						      								    								  
>> 40 LOAD_FAST 1 ( a )					      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
Disassembly of <code object sumDigits at 0x7f33e2644930, file def sumDigits ( no ) :					    def sumDigits ( no , x = 1 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( no )					      	  return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 	if no == 0 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 0 )					      								    	    return 0						  024/eval_scripts/dis_sa-python_sa.valid/HOW_CAN_WE
4 COMPARE_OP 2 ( == )					      								    	return int ( x [ 10 : 12 ] ) , int ( x [ 10 : 12 ] )	  _SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEM
6 POP_JUMP_IF_FALSE 12					      								    								  ENT_2.py", line 42, in <module>     if f_filled(*p
8 LOAD_CONST 1 ( 0 )					      								    								  arameters_set) == f_gold(*parameters_set):   File
10 RETURN_VALUE						      								    								  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
>> 12 LOAD_GLOBAL 0 ( int )				      								    								  024/eval_scripts/dis_sa-python_sa.valid/HOW_CAN_WE
14 LOAD_FAST 0 ( no )					      								    								  _SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEM
16 LOAD_CONST 2 ( 10 )					      								    								  ENT_2.py", line 24, in f_filled     return int ( x
18 BINARY_MODULO					      								    								   [ 10 : 12 ] ) , int ( x [ 10 : 12 ] ) TypeError:
20 CALL_FUNCTION 1					      								    								  'int' object is not subscriptable
22 LOAD_GLOBAL 1 ( sumDigits )				      								    								  
24 LOAD_GLOBAL 0 ( int )				      								    								  
26 LOAD_FAST 0 ( no )					      								    								  
28 LOAD_CONST 2 ( 10 )					      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 BINARY_ADD						      								    								  
38 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object addOne at 0x7f33e2649a50, file "< def addOne ( x ) :					    def addOne ( x , m , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  m = 1 ;						    	m = 1							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 1 ( m )					      	  while ( x & m ) :					    	for x in x :						  alid/ADD_1_TO_A_GIVEN_NUMBER.py", line 26	def
							      	      x = x ^ m						    	    if x == n :						  f_filled ( x , m , n , n ) :	   ^ SyntaxError: du
3 4 SETUP_LOOP 28 ( to 34 )				      	      m <<= 1						    		return x					  plicate argument 'n' in function definition
>> 6 LOAD_FAST 0 ( x )					      	  x = x ^ m						    	return m						  
8 LOAD_FAST 1 ( m )					      	  return x						    								  
10 BINARY_AND						      								    								  
12 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( x )					      								    								  
16 LOAD_FAST 1 ( m )					      								    								  
18 BINARY_XOR						      								    								  
20 STORE_FAST 0 ( x )					      								    								  
							      								    								  
5 22 LOAD_FAST 1 ( m )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 INPLACE_LSHIFT					      								    								  
28 STORE_FAST 1 ( m )					      								    								  
30 JUMP_ABSOLUTE 6					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 LOAD_FAST 0 ( x )				      								    								  
36 LOAD_FAST 1 ( m )					      								    								  
38 BINARY_XOR						      								    								  
40 STORE_FAST 0 ( x )					      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( x )					      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
Disassembly of <code object Add at 0x7f33e2653ed0, file "<dis def Add ( x , y ) :					    def Add ( x , y , z , radius ) :				  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 36 ( to 38 )				      	  while ( y != 0 ) :					    	for x in y :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
>> 2 LOAD_FAST 1 ( y )					      	      carry = x & y					    	    if x != y :						  024/eval_scripts/dis_sa-python_sa.valid/ADD_TWO_NU
4 LOAD_CONST 1 ( 0 )					      	      x = x ^ y						    		return x * y + z				  MBERS_WITHOUT_USING_ARITHMETIC_OPERATORS.py", line
6 COMPARE_OP 3 ( != )					      	      y = carry << 1					    	return x						   47, in <module>     if f_filled(*parameters_set)
8 POP_JUMP_IF_FALSE 36					      	  return x						    								  == f_gold(*parameters_set): TypeError: f_filled()
							      								    								  missing 2 required positional arguments: 'z' and '
3 10 LOAD_FAST 0 ( x )					      								    								  radius'
12 LOAD_FAST 1 ( y )					      								    								  
14 BINARY_AND						      								    								  
16 STORE_FAST 2 ( carry )				      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( x )					      								    								  
20 LOAD_FAST 1 ( y )					      								    								  
22 BINARY_XOR						      								    								  
24 STORE_FAST 0 ( x )					      								    								  
							      								    								  
5 26 LOAD_FAST 2 ( carry )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_LSHIFT					      								    								  
32 STORE_FAST 1 ( y )					      								    								  
34 JUMP_ABSOLUTE 2					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 0 ( x )				      								    								  
40 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2649a50, file " def findSum ( N , K ) :					    def findSum ( N , K ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	ans = 0							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( ans )					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  alid/FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER.py",
							      	      ans += ( i % K ) ;				    	    ans [ i ] += 1					   line 69     return ans     ^ SyntaxError: 'return
3 4 SETUP_LOOP 34 ( to 40 )				      	  return ans ;						    	ans [ i ] += 1						  ' outside function
6 LOAD_GLOBAL 0 ( range )				      								    	ans [ i ] += 1						  
8 LOAD_CONST 2 ( 1 )					      								    	ans [ i ] += 1						  
10 LOAD_FAST 0 ( N )					      								    	ans [ i ] += 1						  
12 LOAD_CONST 2 ( 1 )					      								    	ans [ i ] += 1						  
14 BINARY_ADD						      								    	ans [ i ] += 1						  
16 CALL_FUNCTION 2					      								    	ans [ i ] += 1						  
18 GET_ITER						      								    	ans [ i ] += 1						  
>> 20 FOR_ITER 16 ( to 38 )				      								    	ans [ i ] += 1						  
22 STORE_FAST 3 ( i )					      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
4 24 LOAD_FAST 2 ( ans )				      								    	ans [ i ] += 1						  
26 LOAD_FAST 3 ( i )					      								    	ans [ i ] += 1						  
28 LOAD_FAST 1 ( K )					      								    	ans [ i ] += 1						  
30 BINARY_MODULO					      								    	ans [ i ] += 1						  
32 INPLACE_ADD						      								    	ans [ i ] += 1						  
34 STORE_FAST 2 ( ans )					      								    	ans [ i ] += 1						  
36 JUMP_ABSOLUTE 20					      								    	ans [ i ] += 1						  
>> 38 POP_BLOCK						      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
5 >> 40 LOAD_FAST 2 ( ans )				      								    	ans [ i ] += 1						  
42 RETURN_VALUE NEW_LINE				      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    	ans [ i ] += 1						  
							      								    return ans							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
Disassembly of <code object leonardo at 0x7f33e2653f60, file  def leonardo ( n ) :					    def leonardo ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;  	return 0						  
6 POP_JUMP_IF_TRUE 16					      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( leonardo )			      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 LOAD_GLOBAL 0 ( leonardo )				      								    								  
32 LOAD_FAST 0 ( n )					      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2653f60, file " def findSum ( n ) :					    def findSum ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      sum += i * ( n - i )				    	    sum += 1						  
3 4 SETUP_LOOP 32 ( to 38 )				      	  return 2 * sum					    	return sum / ( n + 1 )					  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_FAST 0 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 20 ( to 36 )				      								    								  
16 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 1 ( sum )				      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( sum )					      								    								  
34 JUMP_ABSOLUTE 14					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
5 >> 38 LOAD_CONST 2 ( 2 )				      								    								  
40 LOAD_FAST 1 ( sum )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
Disassembly of <code object findLarger at 0x7f33e2649150, fil def findLarger ( arr , n ) :				    def findLarger ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sorted )				      	  x = sorted ( arr )					    	x = sorted ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  for i in range ( n / 2 , n ) :			    	for i in range ( n + 2 ) :				  
4 CALL_FUNCTION 1					      	      print ( x [ i ] ) ,				    	    print ( x [ i ] )					  
6 STORE_FAST 2 ( x )					      								    								  
							      								    								  
3 8 SETUP_LOOP 36 ( to 46 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 LOAD_CONST 1 ( 2 )					      								    								  
16 BINARY_TRUE_DIVIDE					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 18 ( to 44 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 28 LOAD_GLOBAL 2 ( print )				      								    								  
30 LOAD_FAST 2 ( x )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 BUILD_TUPLE 1					      								    								  
40 POP_TOP						      								    								  
42 JUMP_ABSOLUTE 24					      								    								  
>> 44 POP_BLOCK						      								    								  
>> 46 LOAD_CONST 0 ( None )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
Disassembly of <code object nswp at 0x7f33e2649a50, file "<di def nswp ( n ) :						    def nswp ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n == 0 or n == 1 :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		    	elif n == 0 :						  
6 POP_JUMP_IF_TRUE 16					      								    	    return 1						  
8 LOAD_FAST 0 ( n )					      								    	return 2						  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 3 ( 2 )				      								    								  
22 LOAD_GLOBAL 0 ( nswp )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_GLOBAL 0 ( nswp )				      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 3 ( 2 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object findExtra at 0x7f33e2644f60, file def findExtra ( arr1 , arr2 , n ) :			    def findExtra ( arr1 , arr2 , arr2 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 38 ( to 40 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , len ( arr1 ) ) :			  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr1 [ i ] != arr2 [ i ] ) :			    	    if arr2 [ i ] != arr2 [ i ] :			  alid/FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE
4 LOAD_CONST 1 ( 0 )					      		  return i					    		return arr2 [ i ]				  _SORTED_ARRAY.py", line 24	 def f_filled ( arr1
6 LOAD_FAST 2 ( n )					      	  return n						    	return arr1						   , arr2 , arr2 ) :	 ^ SyntaxError: duplicate ar
8 CALL_FUNCTION 2					      								    								  gument 'arr2' in function definition
10 GET_ITER						      								    								  
>> 12 FOR_ITER 24 ( to 38 )				      								    								  
14 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( arr1 )				      								    								  
18 LOAD_FAST 3 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_FAST 1 ( arr2 )					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 COMPARE_OP 3 ( != )					      								    								  
30 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 32 LOAD_FAST 3 ( i )					      								    								  
34 RETURN_VALUE						      								    								  
36 JUMP_ABSOLUTE 12					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 LOAD_FAST 2 ( n )				      								    								  
42 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
Disassembly of <code object pythagorean_quadruple at 0x7f33e2 def pythagorean_quadruple ( a , b , c , d ) :		    def pythagorean_quadruple ( a , b , c , c , c , c , c , c , c error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  sum = a * a + b * b + c * c ;				    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( a )					      	  if ( d * d == sum ) :					    								  alid/PYTHAGOREAN_QUADRUPLE.py", line 27     if __n
4 BINARY_MULTIPLY					      	      return True					    								  ame__ == '__main__':	    ^ SyntaxError: invalid s
6 LOAD_FAST 1 ( b )					      	  else :						    								  yntax
8 LOAD_FAST 1 ( b )					      	      return False					    								  
10 BINARY_MULTIPLY					      								    								  
12 BINARY_ADD						      								    								  
14 LOAD_FAST 2 ( c )					      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 BINARY_MULTIPLY					      								    								  
20 BINARY_ADD						      								    								  
22 STORE_FAST 4 ( sum )					      								    								  
							      								    								  
3 24 LOAD_FAST 3 ( d )					      								    								  
26 LOAD_FAST 3 ( d )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 4 ( sum )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
4 36 LOAD_CONST 1 ( True )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_CONST 2 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 LOAD_CONST 0 ( None )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS      PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
Disassembly of <code object isProduct at 0x7f33e26494b0, file def isProduct ( arr , n , x ) :				    def isProduct ( arr ) :					  script_not_found : None
2 0 SETUP_LOOP 42 ( to 44 )				      	  for i in arr :					    	for i in arr :						  
2 LOAD_FAST 0 ( arr )					      	      for j in arr :					    	    if i == 0 :						  
4 GET_ITER						      		  if i * j == x :				    		return True					  
>> 6 FOR_ITER 34 ( to 42 )				      		      return True				    	    for j in arr :					  
8 STORE_FAST 3 ( i )					      	  return False						    		if j == arr [ j ] :				  
							      								    		    return False				  
3 10 SETUP_LOOP 28 ( to 40 )				      								    	    return False					  
12 LOAD_FAST 0 ( arr )					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 20 ( to 38 )				      								    								  
18 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 20 LOAD_FAST 3 ( i )					      								    								  
22 LOAD_FAST 4 ( j )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 LOAD_CONST 1 ( True )				      								    								  
34 RETURN_VALUE						      								    								  
36 JUMP_ABSOLUTE 16					      								    								  
>> 38 POP_BLOCK						      								    								  
>> 40 JUMP_ABSOLUTE 6					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 LOAD_CONST 2 ( False )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
Disassembly of <code object first at 0x7f33e2644f60, file "<d def first ( str ) :					    def first ( ) :						  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 42 ( to 44 )				      	  for i in range ( 0 , len ( str ) ) :			    	for i in range ( 0 , len ( i ) ) :			  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_GLOBAL 0 ( range )				      	      if ( str [ i ].istitle ( ) ) :			    	    if i [ i ].istitle ( ) :				  024/eval_scripts/dis_sa-python_sa.valid/FIRST_UPPE
4 LOAD_CONST 1 ( 0 )					      		  return str [ i ]				    		return i [ i ]					  RCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE.p
6 LOAD_GLOBAL 1 ( len )					      	  return 0						    	return None						  y", line 46, in <module>     if f_filled(*paramete
8 LOAD_FAST 0 ( str )					      								    								  rs_set) == f_gold(*parameters_set): TypeError: f_f
10 CALL_FUNCTION 1					      								    								  illed() takes 0 positional arguments but 1 was giv
12 CALL_FUNCTION 2					      								    								  en
14 GET_ITER						      								    								  
>> 16 FOR_ITER 24 ( to 42 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( str )				      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_METHOD 2 ( istitle )				      								    								  
28 CALL_METHOD 0					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 32 LOAD_FAST 0 ( str )				      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 RETURN_VALUE						      								    								  
40 JUMP_ABSOLUTE 16					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 LOAD_CONST 1 ( 0 )				      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
Disassembly of <code object divisorSum at 0x7f33e26494b0, fil def divisorSum ( n ) :					    def divisorSum ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( sum )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  024/eval_scripts/dis_sa-python_sa.valid/SUM_DIVISO
							      	      sum += int ( n / i ) * i				    	    sum += ( n - 1 ) * ( ( n - 1 ) * ( n - 1 ) )	  RS_1_N_1.py", line 46, in <module>	 if f_filled
3 4 SETUP_LOOP 42 ( to 48 )				      	  return int ( sum )					    	return sum ( sum ( sum ( sum ) ) )			  (*parameters_set) == f_gold(*parameters_set):	  Fi
6 LOAD_GLOBAL 0 ( range )				      								    								  le "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7
8 LOAD_CONST 2 ( 1 )					      								    								  a0p024/eval_scripts/dis_sa-python_sa.valid/SUM_DIV
10 LOAD_FAST 0 ( n )					      								    								  ISORS_1_N_1.py", line 28, in f_filled	    return s
12 LOAD_CONST 2 ( 1 )					      								    								  um ( sum ( sum ( sum ) ) ) TypeError: 'int' object
14 BINARY_ADD						      								    								   is not callable
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( sum )				      								    								  
26 LOAD_GLOBAL 1 ( int )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 INPLACE_ADD						      								    								  
42 STORE_FAST 1 ( sum )					      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_FAST 1 ( sum )					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object myCopy at 0x7f33e2653f60, file "< def myCopy ( s1 , s2 , index ) :				    def myCopy ( s1 , s2 , s2 , s2 , s2 , threshold ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( s1 )					      	  s2 [ index ] = s1 [ index ] ;				    	if s1 [ s2 [ s2 ] == len ( s2 ) :			  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 2 ( index )					      	  if ( index == len ( s1 ) - 1 ) :			    	    return None						  alid/FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1.py
4 BINARY_SUBSCR						      	      return ;						    	if s1 [ s2 ] == len ( s2 ) :				  ", line 26	 return None	      ^ SyntaxError:
6 LOAD_FAST 1 ( s2 )					      	  myCopy ( s1 , s2 , index + 1 ) ;			    	    return None						   invalid syntax
8 LOAD_FAST 2 ( index )					      								    	if s1 [ s2 ] == len ( s2 ) :				  
10 STORE_SUBSCR						      								    	    return None						  
							      								    	return myCopy ( s1 , s2 , s2 , s2 , s2 , threshold )	  
3 12 LOAD_FAST 2 ( index )				      								    								  
14 LOAD_GLOBAL 0 ( len )				      								    								  
16 LOAD_FAST 0 ( s1 )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
4 28 LOAD_CONST 0 ( None )				      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
5 >> 32 LOAD_GLOBAL 1 ( myCopy )			      								    								  
34 LOAD_FAST 0 ( s1 )					      								    								  
36 LOAD_FAST 1 ( s2 )					      								    								  
38 LOAD_FAST 2 ( index )				      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 3					      								    								  
46 POP_TOP						      								    								  
48 LOAD_CONST 0 ( None )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
Disassembly of <code object allCharactersSame at 0x7f33e2653e def allCharactersSame ( s ) :				    def allCharactersSame ( s ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  for i in range ( 1 , n ) :				    	while n != len ( s ) :					  
4 CALL_FUNCTION 1					      	      if s [ i ] != s [ 0 ] :				    	    if s [ n ] != s [ n ] :				  
6 STORE_FAST 1 ( n )					      		  return False					    		n += 1						  
							      	  return True						    	return n						  
3 8 SETUP_LOOP 38 ( to 48 )				      								    								  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 24 ( to 46 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( s )					      								    								  
26 LOAD_FAST 2 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_CONST 3 ( False )				      								    								  
42 RETURN_VALUE						      								    								  
44 JUMP_ABSOLUTE 20					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
6 >> 48 LOAD_CONST 4 ( True )				      								    								  
50 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
Disassembly of <code object count at 0x7f33e2653ed0, file "<d def count ( s , c ) :					    def count ( s ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 2 ( res )					      	  for i in range ( len ( s ) ) :			    	for i in range ( len ( s ) ) :				  024/eval_scripts/dis_sa-python_sa.valid/PROGRAM_CO
							      	      if ( s [ i ] == c ) :				    	    if s [ i ] == s [ i ] :				  UNT_OCCURRENCE_GIVEN_CHARACTER_STRING.py", line 48
3 4 SETUP_LOOP 40 ( to 46 )				      		  res = res + 1					    		res [ i ] = s [ i ]				  , in <module>	    if f_filled(*parameters_set) ==
6 LOAD_GLOBAL 0 ( range )				      	  return res						    	return res						  f_gold(*parameters_set): TypeError: f_filled() tak
8 LOAD_GLOBAL 1 ( len )					      								    								  es 1 positional argument but 2 were given
10 LOAD_FAST 0 ( s )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 24 ( to 44 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 1 ( c )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 34 LOAD_FAST 2 ( res )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 2 ( res )					      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 2 ( res )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
Disassembly of <code object <<unk>> ways at 0x7f33e2644f60, f def <<unk>> ways ( n , k ) :				    def cy_ways ( n , k ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 1 )					      	  p = 1							    	p = 1							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 2 ( p )					      	  if ( k % 2 ) :					    	p = n // 2						  024/eval_scripts/dis_sa-python_sa.valid/NUMBER_WAY
							      	      p = - 1						    	p = p - 1						  S_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNEC
3 4 LOAD_FAST 1 ( k )					      	  return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	    	p = p - 1						  TED_GRAPH_N_NODES.py", line 124, in <module>	   i
6 LOAD_CONST 2 ( 2 )					      								    	p = pow ( p - 1 , p )					  f f_filled(*parameters_set) == f_gold(*parameters_
8 BINARY_MODULO						      								    	p = p - 1						  set):	  File "/home/ubuntu/TransCoder/models/eval/
10 POP_JUMP_IF_FALSE 16					      								    	p = pow ( p - 1 , p )					  bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.val
							      								    	p = p - 1						  id/NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_CO
4 12 LOAD_CONST 3 ( - 1 )				      								    	p = p - 1						  MPLETE_CONNECTED_GRAPH_N_NODES.py", line 31, in f_
14 STORE_FAST 2 ( p )					      								    	p = p - 1						  filled     p = pow ( p - 1 , p ) OverflowError: ma
							      								    	p = p - 1						  th range error
5 >> 16 LOAD_GLOBAL 0 ( pow )				      								    	p = p - 1						  
18 LOAD_FAST 0 ( n )					      								    	p = p - 1						  
20 LOAD_CONST 1 ( 1 )					      								    	p = p - 1						  
22 BINARY_SUBTRACT					      								    	p = p - 1						  
24 LOAD_FAST 1 ( k )					      								    	p = p - 1						  
26 CALL_FUNCTION 2					      								    	p = p - 1						  
28 LOAD_FAST 2 ( p )					      								    	p = p - 1						  
30 LOAD_FAST 0 ( n )					      								    	p = p - 1						  
32 LOAD_CONST 1 ( 1 )					      								    	p = p - 1						  
34 BINARY_SUBTRACT					      								    	p = p - 1						  
36 BINARY_MULTIPLY					      								    	p = p - 1						  
38 BINARY_ADD						      								    	p = p - 1						  
40 LOAD_FAST 0 ( n )					      								    	p = p - 1						  
42 BINARY_TRUE_DIVIDE					      								    	p = p - 1						  
44 RETURN_VALUE NEW_LINE				      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p							  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p - 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
							      								    	p = p + 1						  
-							      -								    	p-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
Disassembly of <code object reverse at 0x7f33e26494b0, file " def reverse ( string ) :					    def reverse ( string ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  if len ( string ) == 0 :				    	if len ( string ) == 0 :				  
2 LOAD_FAST 0 ( string )				      	      return						    	    temp = None						  
4 CALL_FUNCTION 1					      	  temp = string [ 0 ]					    	temp = string [ 0 ]					  
6 LOAD_CONST 1 ( 0 )					      	  reverse ( string [ 1 : ] )				    	temp = temp [ 1 ]					  
8 COMPARE_OP 2 ( == )					      	  print ( temp , end = '' )				    	temp = temp [ 1 ]					  
10 POP_JUMP_IF_FALSE 16					      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 0 ]					  
3 12 LOAD_CONST 0 ( None )				      								    	temp = temp [ 1 ]					  
14 RETURN_VALUE						      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
4 >> 16 LOAD_FAST 0 ( string )				      								    	temp = temp [ 2 ]					  
18 LOAD_CONST 1 ( 0 )					      								    	temp = temp [ 1 ]					  
20 BINARY_SUBSCR					      								    	temp = temp [ 1 ]					  
22 STORE_FAST 1 ( temp )				      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
5 24 LOAD_GLOBAL 1 ( reverse )				      								    	temp = temp [ 0 ]					  
26 LOAD_FAST 0 ( string )				      								    	temp = temp [ 1 ]					  
28 LOAD_CONST 2 ( 1 )					      								    	temp = temp [ 0 ]					  
30 LOAD_CONST 0 ( None )				      								    	temp = temp [ 1 ]					  
32 BUILD_SLICE 2					      								    	temp = temp [ 1 ]					  
34 BINARY_SUBSCR					      								    	temp = temp [ 0 ]					  
36 CALL_FUNCTION 1					      								    	temp = temp [ 1 ]					  
38 POP_TOP						      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
6 40 LOAD_GLOBAL 2 ( print )				      								    	temp = temp [ 1 ]					  
42 LOAD_FAST 1 ( temp )					      								    	temp = temp [ 2 ]					  
44 LOAD_CONST 3 ( '' )					      								    	temp = temp [ 1 ]					  
46 LOAD_CONST 4 ( ( 'end' , ) )				      								    	temp = temp [ 1 ]					  
48 CALL_FUNCTION_KW 2					      								    	temp = temp [ 2 ]					  
50 POP_TOP						      								    	temp = temp [ 1 ]					  
52 LOAD_CONST 0 ( None )				      								    	temp = temp [ 1 ]					  
54 RETURN_VALUE NEW_LINE				      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 2 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
							      								    	temp = temp [ 1 ]					  
-							      -								    	temp = temp [-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object kLargest at 0x7f33e2653f60, file  def kLargest ( arr , k ) :				    def kLargest ( arr , k ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( reverse = True )				    	arr.sort ( True , reverse = True )			  
2 LOAD_ATTR 0 ( sort )					      	  for i in range ( k ) :				    	for i in range ( k ) :					  
4 LOAD_CONST 1 ( True )					      	      print ( arr [ i ] , end = " " )			    	    for i in range ( k ) :				  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      								    		print ( " " , i )				  
8 CALL_FUNCTION_KW 1					      								    								  
10 POP_TOP						      								    								  
							      								    								  
3 12 SETUP_LOOP 32 ( to 46 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 1 ( k )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 20 ( to 44 )				      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 26 LOAD_GLOBAL 2 ( print )				      								    								  
28 LOAD_FAST 0 ( arr )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 3 ( ' ' )					      								    								  
36 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
38 CALL_FUNCTION_KW 2					      								    								  
40 POP_TOP						      								    								  
42 JUMP_ABSOLUTE 22					      								    								  
>> 44 POP_BLOCK						      								    								  
>> 46 LOAD_CONST 0 ( None )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
Disassembly of <code object mod at 0x7f33e2649a50, file "<dis def mod ( num , a ) :					    def mod ( num ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , len ( num ) ) :			    	for i in range ( 0 , len ( res ) ) :			  
							      	      res = ( res * 10 + int ( num [ i ] ) ) % a ;	    	    res [ i ] = ( num % 2 ) % ( num % 2 )		  
3 4 SETUP_LOOP 46 ( to 52 )				      	  return res						    	return res						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 1 ( 0 )					      								    								  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( num )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 28 ( to 50 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( res )				      								    								  
26 LOAD_CONST 2 ( 10 )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_GLOBAL 2 ( int )				      								    								  
32 LOAD_FAST 0 ( num )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( a )					      								    								  
44 BINARY_MODULO					      								    								  
46 STORE_FAST 2 ( res )					      								    								  
48 JUMP_ABSOLUTE 20					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_FAST 2 ( res )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
Disassembly of <code object findRoot at 0x7f33e2644930, file  def findRoot ( arr , n ) :				    def findRoot ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  root = 0						    	root = 0						  
2 STORE_FAST 2 ( root )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	    	    root [ i ] = root [ i ]				  
3 4 SETUP_LOOP 44 ( to 50 )				      	  return root						    	return root						  
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_FAST 1 ( n )					      								    								  
10 CALL_FUNCTION 1					      								    								  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 32 ( to 48 )				      								    								  
16 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 18 LOAD_FAST 2 ( root )				      								    								  
20 LOAD_FAST 0 ( arr )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 2 ( root )				      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
5 >> 50 LOAD_FAST 2 ( root )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
Disassembly of <code object countSetBitsRec at 0x7f33e2644f60 def countSetBitsRec ( num ) :				    def countSetBitsRec ( num ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  nibble = 0 ;						    	__INSTALLED_VCS_RUN = 0					  
2 STORE_FAST 1 ( nibble )				      	  if ( 0 == num ) :					    	__INSTALLED_VCS_RUN = num				  
							      	      return num_to_bits [ 0 ] ;			    	if __INSTALLED_VCS_RUN == None :			  
3 4 LOAD_CONST 1 ( 0 )					      	  nibble = num & 0xf ;					    	    __INSTALLED_VCS_RUN = 0				  
6 LOAD_FAST 0 ( num )					      	  return num_to_bits [ nibble ] + countSetBitsRec ( num >>  	return __INSTALLED_VCS_RUN				  
8 COMPARE_OP 2 ( == )					      								    								  
10 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
4 12 LOAD_GLOBAL 0 ( num_to_bits )			      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 BINARY_SUBSCR					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_FAST 0 ( num )				      								    								  
22 LOAD_CONST 2 ( 15 )					      								    								  
24 BINARY_AND						      								    								  
26 STORE_FAST 1 ( nibble )				      								    								  
							      								    								  
6 28 LOAD_GLOBAL 0 ( num_to_bits )			      								    								  
30 LOAD_FAST 1 ( nibble )				      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_GLOBAL 1 ( countSetBitsRec )			      								    								  
36 LOAD_FAST 0 ( num )					      								    								  
38 LOAD_CONST 3 ( 4 )					      								    								  
40 BINARY_RSHIFT					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
Disassembly of <code object calc_Expectation at 0x7f33e2649a5 def calc_Expectation ( a , n ) :				    def calc_Expectation ( a , n , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  prb = 1 / n						    	prb = 1 / n						  
2 LOAD_FAST 1 ( n )					      	  sum = 0						    	prb = 0							  
4 BINARY_TRUE_DIVIDE					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 2 ( prb )					      	      sum += ( a [ i ] * prb )				    	    prb = a [ i ]					  
							      	  return float ( sum )					    	    prb = a [ i ]					  
3 8 LOAD_CONST 2 ( 0 )					      								    	    prb = a [ i ]					  
10 STORE_FAST 3 ( sum )					      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
4 12 SETUP_LOOP 34 ( to 48 )				      								    	    prb = a [ i ]					  
14 LOAD_GLOBAL 0 ( range )				      								    	    prb = a [ i ]					  
16 LOAD_CONST 2 ( 0 )					      								    	    prb = a [ i ]					  
18 LOAD_FAST 1 ( n )					      								    	    prb = a [ i ]					  
20 CALL_FUNCTION 2					      								    	    prb = a [ i ]					  
22 GET_ITER						      								    	    prb = a [ i ]					  
>> 24 FOR_ITER 20 ( to 46 )				      								    	    prb = a [ i ]					  
26 STORE_FAST 4 ( i )					      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
5 28 LOAD_FAST 3 ( sum )				      								    	    prb = a [ i ]					  
30 LOAD_FAST 0 ( a )					      								    	    prb = a [ i ]					  
32 LOAD_FAST 4 ( i )					      								    	    prb = a [ i ]					  
34 BINARY_SUBSCR					      								    	    prb = a [ i ]					  
36 LOAD_FAST 2 ( prb )					      								    	    prb = a [ i ]					  
38 BINARY_MULTIPLY					      								    	    prb = a [ i ]					  
40 INPLACE_ADD						      								    	    prb = a [ i ]					  
42 STORE_FAST 3 ( sum )					      								    	    prb = a [ i ]					  
44 JUMP_ABSOLUTE 24					      								    	    prb = a [ i ]					  
>> 46 POP_BLOCK						      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
6 >> 48 LOAD_GLOBAL 1 ( float )				      								    	    prb = a [ i ]					  
50 LOAD_FAST 3 ( sum )					      								    	    prb = a [ i ]					  
52 CALL_FUNCTION 1					      								    	    prb = a [ i ]					  
54 RETURN_VALUE NEW_LINE				      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
							      								    	    prb = a [ i ]					  
-							      -								    	    prb = a [ i ]-					  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
Disassembly of <code object transpose at 0x7f33e2644930, file def transpose ( A , B ) :					    def transpose ( A , B , B , C , C , C , C , C , C , C , C , C script_not_found : None
2 0 SETUP_LOOP 54 ( to 56 )				      	  for i in range ( N ) :				    C = C.T							  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( N ) :				    C = C.T							  
4 LOAD_GLOBAL 1 ( N )					      		  B [ i ] [ j ] = A [ j ] [ i ]			    C = C.T							  
6 CALL_FUNCTION 1					      								    C = C.T							  
8 GET_ITER						      								    C = C.T							  
>> 10 FOR_ITER 42 ( to 54 )				      								    C = C.T							  
12 STORE_FAST 2 ( i )					      								    C = C.T							  
							      								    C = C.T							  
3 14 SETUP_LOOP 36 ( to 52 )				      								    C = C.T							  
16 LOAD_GLOBAL 0 ( range )				      								    C = C.T							  
18 LOAD_GLOBAL 1 ( N )					      								    C = C.T							  
20 CALL_FUNCTION 1					      								    C = C.T							  
22 GET_ITER						      								    C = C.T							  
>> 24 FOR_ITER 24 ( to 50 )				      								    C = C.T							  
26 STORE_FAST 3 ( j )					      								    C = C.T							  
							      								    C = C.T							  
4 28 LOAD_FAST 0 ( A )					      								    C = C.T							  
30 LOAD_FAST 3 ( j )					      								    C = C.T							  
32 BINARY_SUBSCR					      								    C = C.T							  
34 LOAD_FAST 2 ( i )					      								    C = C.T							  
36 BINARY_SUBSCR					      								    C = C.T							  
38 LOAD_FAST 1 ( B )					      								    C = C.T							  
40 LOAD_FAST 2 ( i )					      								    C = C.T							  
42 BINARY_SUBSCR					      								    C = C.T							  
44 LOAD_FAST 3 ( j )					      								    C = C.T							  
46 STORE_SUBSCR						      								    C = C.T							  
48 JUMP_ABSOLUTE 24					      								    C = C.T							  
>> 50 POP_BLOCK						      								    C = C.T							  
>> 52 JUMP_ABSOLUTE 10					      								    C = C.T							  
>> 54 POP_BLOCK						      								    C = C.T							  
>> 56 LOAD_CONST 0 ( None )				      								    C = C.T							  
58 RETURN_VALUE NEW_LINE				      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
							      								    C = C.T							  
-							      -								    return C-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
Disassembly of <code object numberOfWays at 0x7f33e2653ed0, f def numberOfWays ( x ) :					    def numberOfWays ( x ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  if x == 0 or x == 1 :					    	if x == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  else :						    	if x == 1 :						  
6 POP_JUMP_IF_TRUE 16					      	      return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	    return 1						  
8 LOAD_FAST 0 ( x )					      								    	return ( x - 1 ) / ( ( x - 1 )				  
10 LOAD_CONST 2 ( 1 )					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 2 ( 1 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
5 >> 20 LOAD_GLOBAL 0 ( numberOfWays )			      								    								  
22 LOAD_FAST 0 ( x )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 LOAD_FAST 0 ( x )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_GLOBAL 0 ( numberOfWays )			      								    								  
38 LOAD_FAST 0 ( x )					      								    								  
40 LOAD_CONST 3 ( 2 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 BINARY_ADD						      								    								  
50 RETURN_VALUE						      								    								  
52 LOAD_CONST 0 ( None )				      								    								  
54 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
Disassembly of <code object getMissingNo at 0x7f33e2644930, f def getMissingNo ( a , n ) :				    def getMissingNo ( a , size = 1 , size = 2 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( ( 0 , 1 ) )				      	  i , total = 0 , 1					    	i = ( ( 0 , 1 ) , size + 2 )				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 UNPACK_SEQUENCE 2					      	  for i in range ( 2 , n + 2 ) :			    	for i in range ( 2 , size + 1 ) :			  alid/FIND_THE_MISSING_NUMBER_1.py", line 25	  de
4 STORE_FAST 2 ( i )					      	      total += i					    	    if a == size :					  f f_filled ( a , size = 1 , size = 2 ) :     ^ Syn
6 STORE_FAST 3 ( total )				      	      total -= a [ i - 2 ]				    		i += 1						  taxError: duplicate argument 'size' in function de
							      	  return total						    return i							  finition
3 8 SETUP_LOOP 46 ( to 56 )				      								    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 2 ( 2 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 LOAD_CONST 2 ( 2 )					      								    								  
18 BINARY_ADD						      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 28 ( to 54 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 3 ( total )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 INPLACE_ADD						      								    								  
34 STORE_FAST 3 ( total )				      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( total )				      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 BINARY_SUBSCR					      								    								  
48 INPLACE_SUBTRACT					      								    								  
50 STORE_FAST 3 ( total )				      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
6 >> 56 LOAD_FAST 3 ( total )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
Disassembly of <code object seiresSum at 0x7f33e2653ed0, file def seiresSum ( n , a ) :					    def seiresSum ( n , a , b , a , b ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [  	return ( a , b [ 0 ] * a [ 1 ] + b [ 2 ] * a [ 1 ] + b [  
2 LOAD_FAST 1 ( a )					      								    								  
4 LOAD_CONST 1 ( 0 )					      								    								  
6 BINARY_SUBSCR						      								    								  
8 LOAD_FAST 1 ( a )					      								    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 LOAD_FAST 1 ( a )					      								    								  
18 LOAD_CONST 2 ( 2 )					      								    								  
20 LOAD_FAST 0 ( n )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 1 ( a )					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_CONST 2 ( 2 )					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7f33e2653ed0, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 1 )					      	  p = 1							    	p = 1							  
2 STORE_FAST 1 ( p )					      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	while n < n :						  
							      	      return n						    	    if n % 1 == n :					  
3 4 LOAD_FAST 0 ( n )					      	  while ( p < n ) :					    		return p					  
6 POP_JUMP_IF_FALSE 24					      	      p <<= 1						    	return p						  
8 LOAD_FAST 0 ( n )					      	  return p ;						    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 1 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 20 ( to 46 )				      								    								  
>> 26 LOAD_FAST 1 ( p )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 34 LOAD_FAST 1 ( p )					      								    								  
36 LOAD_CONST 1 ( 1 )					      								    								  
38 INPLACE_LSHIFT					      								    								  
40 STORE_FAST 1 ( p )					      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_FAST 1 ( p )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
Disassembly of <code object findNth at 0x7f33e2644f60, file " def findNth ( n ) :					    def findNth ( n , nnchars = 20 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 19 )					      	  nthElement = 19 + ( n - 1 ) * 9			    	nnElement = 19						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( n )					      	  outliersCount = int ( math.log10 ( nthElement ) ) - 1	    	nnElement = ( math.log10 ( nnchars ) )			  024/eval_scripts/dis_sa-python_sa.valid/N_TH_NUMBE
4 LOAD_CONST 2 ( 1 )					      	  nthElement += 9 * outliersCount			    	nnElement = nnElement ( nnchars )			  R_WHOSE_SUM_OF_DIGITS_IS_TEN_2.py", line 86, in <m
6 BINARY_SUBTRACT					      	  return nthElement					    	nnElement = nnElement ( nnchars )			  odule>     if f_filled(*parameters_set) == f_gold(
8 LOAD_CONST 3 ( 9 )					      								    	nnElement = nnElement ( nnchars )			  *parameters_set):   File "/home/ubuntu/TransCoder/
10 BINARY_MULTIPLY					      								    	nnElement = nnElement ( nnchars )			  models/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-p
12 BINARY_ADD						      								    	nnElement = nnElement ( nnchars )			  ython_sa.valid/N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_
14 STORE_FAST 1 ( nthElement )				      								    	nnElement = nnElement ( nnchars )			  TEN_2.py", line 29, in f_filled     nnElement = nn
							      								    	nnElement = nnElement ( nnchars )			  Element ( nnchars ) TypeError: 'float' object is n
3 16 LOAD_GLOBAL 0 ( int )				      								    	nnElement = nnElement ( nnchars )			  ot callable
18 LOAD_GLOBAL 1 ( math )				      								    	nnElement = nnElement ( nnchars )			  
20 LOAD_METHOD 2 ( log10 )				      								    	nnElement = nnElement ( nnchars )			  
22 LOAD_FAST 1 ( nthElement )				      								    	nnElement = nnElement ( nnchars )			  
24 CALL_METHOD 1					      								    	nnElement = nnElement ( nnchars )			  
26 CALL_FUNCTION 1					      								    	nnElement = nnElement ( nnElement )			  
28 LOAD_CONST 2 ( 1 )					      								    	nnElement = nnElement ( nnElement )			  
30 BINARY_SUBTRACT					      								    	nnElement = nnElement ( nnElement )			  
32 STORE_FAST 2 ( outliersCount )			      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
4 34 LOAD_FAST 1 ( nthElement )				      								    	nnElement = nnElement ( nnElement )			  
36 LOAD_CONST 3 ( 9 )					      								    	nnElement = nnElement ( nnElement )			  
38 LOAD_FAST 2 ( outliersCount )			      								    	nnElement = nnElement ( nnElement )			  
40 BINARY_MULTIPLY					      								    	nnElement = nnElement					  
42 INPLACE_ADD						      								    	nnElement = nnElement					  
44 STORE_FAST 1 ( nthElement )				      								    	nnElement = nnElement					  
							      								    	nnElement = nnElement					  
5 46 LOAD_FAST 1 ( nthElement )				      								    	nnElement = nnElement					  
48 RETURN_VALUE NEW_LINE				      								    	nnElement = nnElement					  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnnElement = nnElement					  
							      								    	nnElement = nnElement					  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnnElement = nnElement ( nnnElement )			  
							      								    	nnElement = nnElement ( nnElement )			  
							      								    	nnElement = nnElement					  
							      								    	nElement = nnElement					  
-							      -								    	n-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
Disassembly of <code object countDyckPaths at 0x7f33e2644930, def countDyckPaths ( n ) :				    def countDyckPaths ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1						    	res = 1							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( res )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  024/eval_scripts/dis_sa-python_sa.valid/DYCK_PATH.
							      	      res *= ( 2 * n - i )				    	    res += 1						  py", line 47, in <module>	if f_filled(*paramet
3 4 SETUP_LOOP 46 ( to 52 )				      	      res /= ( i + 1 )					    	return res [ i ]					  ers_set) == f_gold(*parameters_set):	 File "/home
6 LOAD_GLOBAL 0 ( range )				      	  return res / ( n + 1 )				    								  /ubuntu/TransCoder/models/eval/bt_sa/21z7a0p024/ev
8 LOAD_CONST 2 ( 0 )					      								    								  al_scripts/dis_sa-python_sa.valid/DYCK_PATH.py", l
10 LOAD_FAST 0 ( n )					      								    								  ine 29, in f_filled	  return res [ i ] TypeError
12 CALL_FUNCTION 2					      								    								  : 'int' object is not subscriptable
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 1 ( res )				      								    								  
22 LOAD_CONST 3 ( 2 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 INPLACE_MULTIPLY					      								    								  
34 STORE_FAST 1 ( res )					      								    								  
							      								    								  
5 36 LOAD_FAST 1 ( res )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 INPLACE_TRUE_DIVIDE					      								    								  
46 STORE_FAST 1 ( res )					      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
6 >> 52 LOAD_FAST 1 ( res )				      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
Disassembly of <code object sumOfSeries at 0x7f33e2653f60, fi def sumOfSeries ( n ) :					    def sumOfSeries ( n , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 1 ( sum )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( n + 1 , n + 1 ) :			  alid/SUM_SERIES_12_32_52_2N_12.py", line 24	  de
							      	      sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )		    	    sum += n * ( n - 1 )				  f f_filled ( n , n ) :     ^ SyntaxError: duplicat
3 4 SETUP_LOOP 50 ( to 56 )				      	  return sum						    	return sum						  e argument 'n' in function definition
6 LOAD_GLOBAL 0 ( range )				      								    								  
8 LOAD_CONST 2 ( 1 )					      								    								  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 32 ( to 54 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 1 ( sum )				      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 BINARY_MULTIPLY					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 1 ( sum )					      								    								  
52 JUMP_ABSOLUTE 20					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
5 >> 56 LOAD_FAST 1 ( sum )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
Disassembly of <code object lexSmallest at 0x7f33e2653ed0, fi def lexSmallest ( a , n ) :				    def lexSmallest ( a , n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( reverse = True )				    	answer = a.sort ( True , reverse = True )		  
2 LOAD_ATTR 0 ( sort )					      	  answer = ""						    	answer = ""						  
4 LOAD_CONST 1 ( True )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	      answer += a [ i ]					    	    answer = a [ i ]					  
8 CALL_FUNCTION_KW 1					      	  return answer						    	return answer						  
10 POP_TOP						      								    								  
							      								    								  
3 12 LOAD_CONST 3 ( '' )				      								    								  
14 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
4 16 SETUP_LOOP 28 ( to 46 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 16 ( to 44 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 2 ( answer )				      								    								  
32 LOAD_FAST 0 ( a )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( answer )				      								    								  
42 JUMP_ABSOLUTE 26					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 2 ( answer )				      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
Disassembly of <code object doublefactorial at 0x7f33e2644930 def doublefactorial ( n ) :				    def doublefactorial ( n , s ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 1 )					      	  res = 1 ;						    	res = 1							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( res )					      	  for i in range ( n , - 1 , - 2 ) :			    	for i in range ( n - 1 , s - 2 ) :			  024/eval_scripts/dis_sa-python_sa.valid/DOUBLE_FAC
							      	      if ( i == 0 or i == 1 ) :				    	    if s == 0 :						  TORIAL_1.py", line 49, in <module>	 if f_filled
3 4 SETUP_LOOP 48 ( to 54 )				      		  return res ;					    		res = i						  (*parameters_set) == f_gold(*parameters_set): Type
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	return res						  Error: f_filled() missing 1 required positional ar
8 LOAD_FAST 0 ( n )					      		  res *= i ;					    								  gument: 's'
10 LOAD_CONST 2 ( - 1 )					      								    								  
12 LOAD_CONST 3 ( - 2 )					      								    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 32 ( to 52 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_CONST 4 ( 0 )					      								    								  
26 COMPARE_OP 2 ( == )					      								    								  
28 POP_JUMP_IF_TRUE 38					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
5 >> 38 LOAD_FAST 1 ( res )				      								    								  
40 RETURN_VALUE						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 1 ( res )				      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 INPLACE_MULTIPLY					      								    								  
48 STORE_FAST 1 ( res )					      								    								  
50 JUMP_ABSOLUTE 18					      								    								  
>> 52 POP_BLOCK						      								    								  
>> 54 LOAD_CONST 0 ( None )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI
--							      --							    --								  --
Disassembly of <code object countObtuseAngles at 0x7f33e2644f def countObtuseAngles ( a , b , k ) :			    def countObtuseAngles ( a , b , a , b ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( b )					      	  c1 = ( b - a ) - 1					    	c1 = ( a - b ) - ( b - b )				  
2 LOAD_FAST 0 ( a )					      	  c2 = ( k - b ) + ( a - 1 )				    	c2 = c2 [ 0 ] - c2					  
4 BINARY_SUBTRACT					      	  if ( c1 == c2 ) :					    	c2 [ 1 ] = c2 [ 0 ] - c2 [ 1 ]				  
6 LOAD_CONST 1 ( 1 )					      	      return 0						    	c2 [ 1 ] = c2 [ 0 ] - c2 [ 0 ]				  
8 BINARY_SUBTRACT					      	  return min ( c1 , c2 )				    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
10 STORE_FAST 3 ( c1 )					      								    	c2 [ 1 ] = c2 [ 0 ] - c2 [ 0 ]				  
							      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
3 12 LOAD_FAST 2 ( k )					      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
14 LOAD_FAST 1 ( b )					      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
16 BINARY_SUBTRACT					      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ] - c2 [ 1 ]		  
18 LOAD_FAST 0 ( a )					      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
20 LOAD_CONST 1 ( 1 )					      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
22 BINARY_SUBTRACT					      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ] - c2 [ 1 ] - c2 [ 0 ] - c2 
24 BINARY_ADD						      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
26 STORE_FAST 4 ( c2 )					      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ] - c2 [ 1 ] - c2 [ 1 ] - c2 
							      								    	c2 [ 1 ] = c2 [ 1 ] - c2 [ 0 ]				  
4 28 LOAD_FAST 3 ( c1 )					      								    	return pu						  
30 LOAD_FAST 4 ( c2 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 36 LOAD_CONST 2 ( 0 )					      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_GLOBAL 0 ( min )				      								    								  
42 LOAD_FAST 3 ( c1 )					      								    								  
44 LOAD_FAST 4 ( c2 )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
Disassembly of <code object breakSum at 0x7f33e2649150, file  def breakSum ( n ) :					    def breakSum ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or n == 1 ) :				    	if n == 0 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 0 )					      	      return n						    	    return 0						  024/eval_scripts/dis_sa-python_sa.valid/RECURSIVEL
4 COMPARE_OP 2 ( == )					      	  return max ( ( breakSum ( n // 2 ) + breakSum ( n // 3 )  	if n == 1 :						  Y_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM.py", line 4
6 POP_JUMP_IF_TRUE 16					      								    	    return 0						  6, in <module>     if f_filled(*parameters_set) ==
8 LOAD_FAST 0 ( n )					      								    	return max ( breakSum ( n , n - 1 ) )			   f_gold(*parameters_set):   File "/home/ubuntu/Tra
10 LOAD_CONST 2 ( 1 )					      								    								  nsCoder/models/eval/bt_sa/21z7a0p024/eval_scripts/
12 COMPARE_OP 2 ( == )					      								    								  dis_sa-python_sa.valid/RECURSIVELY_BREAK_NUMBER_3_
14 POP_JUMP_IF_FALSE 20					      								    								  PARTS_GET_MAXIMUM_SUM.py", line 28, in f_filled
							      								    								    return max ( f_filled ( n , n - 1 ) ) TypeError:
3 >> 16 LOAD_FAST 0 ( n )				      								    								   f_filled() takes 1 positional argument but 2 were
18 RETURN_VALUE						      								    								   given
							      								    								  
4 >> 20 LOAD_GLOBAL 0 ( max )				      								    								  
22 LOAD_GLOBAL 1 ( breakSum )				      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 2 )					      								    								  
28 BINARY_FLOOR_DIVIDE					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 LOAD_GLOBAL 1 ( breakSum )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 4 ( 3 )					      								    								  
38 BINARY_FLOOR_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_GLOBAL 1 ( breakSum )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 5 ( 4 )					      								    								  
50 BINARY_FLOOR_DIVIDE					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 0 ( n )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
Disassembly of <code object smallest at 0x7f33e2644f60, file  def smallest ( x , y , z ) :				    def smallest ( x , 0x70x76464f60 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  c = 0							    	c = 0							  
2 STORE_FAST 3 ( c )					      	  while ( x and y and z ) :				    	while c < 0 :						  
							      	      x = x - 1						    	    c = x - 1						  
3 4 SETUP_LOOP 48 ( to 54 )				      	      y = y - 1						    	    while c > x :					  
>> 6 LOAD_FAST 0 ( x )					      	      z = z - 1						    		c += 1						  
8 POP_JUMP_IF_FALSE 52					      	      c = c + 1						    		c += 1						  
10 LOAD_FAST 1 ( y )					      	  return c						    	    c += 1						  
12 POP_JUMP_IF_FALSE 52					      								    	return c						  
14 LOAD_FAST 2 ( z )					      								    								  
16 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
4 18 LOAD_FAST 0 ( x )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_SUBTRACT					      								    								  
24 STORE_FAST 0 ( x )					      								    								  
							      								    								  
5 26 LOAD_FAST 1 ( y )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 STORE_FAST 1 ( y )					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( z )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 STORE_FAST 2 ( z )					      								    								  
							      								    								  
7 42 LOAD_FAST 3 ( c )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 3 ( c )					      								    								  
50 JUMP_ABSOLUTE 6					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
8 >> 54 LOAD_FAST 3 ( c )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T<
--							      --							    --								  --
Disassembly of <code object isPowerOfTwo at 0x7f33e2653ed0, f def isPowerOfTwo ( n ) :					    def isPowerOfTwo ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 2 ( == )					      	  while ( n != 1 ) :					    	for n in n [ 1 : ] :					  
6 POP_JUMP_IF_FALSE 12					      	      if ( n % 2 != 0 ) :				    	    if n != n [ n + 1 :					  
							      		  return False					    		return False					  
3 8 LOAD_CONST 2 ( False )				      	      n = n // 2					    	return True						  
10 RETURN_VALUE						      	  return True						    								  
							      								    								  
4 >> 12 SETUP_LOOP 36 ( to 50 )				      								    								  
>> 14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 3 ( 1 )					      								    								  
18 COMPARE_OP 3 ( != )					      								    								  
20 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 4 ( 2 )					      								    								  
26 BINARY_MODULO					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
6 34 LOAD_CONST 2 ( False )				      								    								  
36 RETURN_VALUE						      								    								  
							      								    								  
7 >> 38 LOAD_FAST 0 ( n )				      								    								  
40 LOAD_CONST 4 ( 2 )					      								    								  
42 BINARY_FLOOR_DIVIDE					      								    								  
44 STORE_FAST 0 ( n )					      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
>> 48 POP_BLOCK						      								    								  
							      								    								  
8 >> 50 LOAD_CONST 5 ( True )				      								    								  
52 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRING_BINARY_SEQUENCE				      CONVERT_STRING_BINARY_SEQUENCE				    CONVERT_STRING_BINARY_SEQUENCE				  CONVERT_STRING_BINARY_SEQUENCE
--							      --							    --								  --
Disassembly of <code object strToBinary at 0x7f33e2649a50, fi def strToBinary ( s ) :					    def strToBinary ( s ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  bin_conv = [ ]					    	bin_conv = [ ]						  
2 STORE_FAST 1 ( bin_conv )				      	  for c in s :						    	for c in s :						  
							      	      ascii_val = ord ( c )				    	    if ord ( c ) == ord ( c ) :				  
3 4 SETUP_LOOP 46 ( to 52 )				      	      binary_val = bin ( ascii_val )			    		return ( ( ord ( c ) - 1 ) - ord ( c ) - ord ( c  
6 LOAD_FAST 0 ( s )					      	      bin_conv.append ( binary_val [ 2 : ] )		    	return ( bin_conv [ 0 ] - bin_conv [ 1 ] )		  
8 GET_ITER						      	  return ( ' '.join ( bin_conv ) )			    								  
>> 10 FOR_ITER 38 ( to 50 )				      								    								  
12 STORE_FAST 2 ( c )					      								    								  
							      								    								  
4 14 LOAD_GLOBAL 0 ( ord )				      								    								  
16 LOAD_FAST 2 ( c )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 STORE_FAST 3 ( ascii_val )				      								    								  
							      								    								  
5 22 LOAD_GLOBAL 1 ( bin )				      								    								  
24 LOAD_FAST 3 ( ascii_val )				      								    								  
26 CALL_FUNCTION 1					      								    								  
28 STORE_FAST 4 ( binary_val )				      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( bin_conv )				      								    								  
32 LOAD_METHOD 2 ( append )				      								    								  
34 LOAD_FAST 4 ( binary_val )				      								    								  
36 LOAD_CONST 1 ( 2 )					      								    								  
38 LOAD_CONST 0 ( None )				      								    								  
40 BUILD_SLICE 2					      								    								  
42 BINARY_SUBSCR					      								    								  
44 CALL_METHOD 1					      								    								  
46 POP_TOP						      								    								  
48 JUMP_ABSOLUTE 10					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
7 >> 52 LOAD_CONST 2 ( ' ' )				      								    								  
54 LOAD_METHOD 3 ( join )				      								    								  
56 LOAD_FAST 1 ( bin_conv )				      								    								  
58 CALL_METHOD 1					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
Disassembly of <code object isDivisible at 0x7f33e2644930, fi def isDivisible ( n ) :					    def isDivisible ( n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 52 ( to 54 )				      	  while ( int ( n / 100 ) ) :				    	for n in int ( n % 100 ) :				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
>> 2 LOAD_GLOBAL 0 ( int )				      	      last_digit = int ( n % 10 )			    	    if n % ( n % 100 ) % ( n % 100 ) % ( n % 100 ) % ( n  alid/NUMBER_IS_DIVISIBLE_BY_29_OR_NOT.py", line 27
4 LOAD_FAST 0 ( n )					      	      n = int ( n / 10 )				    return n							       if n % ( n % 100 ) % ( n % 100 ) % ( n % 100
6 LOAD_CONST 1 ( 100 )					      	      n += last_digit * 3				    								  ) % ( n % 100 )
8 BINARY_TRUE_DIVIDE					      	  return ( n % 29 == 0 )				    								  			       ^ SyntaxError: invali
10 CALL_FUNCTION 1					      								    								  d syntax
12 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
3 14 LOAD_GLOBAL 0 ( int )				      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 2 ( 10 )					      								    								  
20 BINARY_MODULO					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 STORE_FAST 1 ( last_digit )				      								    								  
							      								    								  
4 26 LOAD_GLOBAL 0 ( int )				      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 LOAD_CONST 2 ( 10 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 STORE_FAST 0 ( n )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_FAST 1 ( last_digit )				      								    								  
42 LOAD_CONST 3 ( 3 )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 0 ( n )					      								    								  
50 JUMP_ABSOLUTE 2					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
6 >> 54 LOAD_FAST 0 ( n )				      								    								  
56 LOAD_CONST 4 ( 29 )					      								    								  
58 BINARY_MODULO					      								    								  
60 LOAD_CONST 5 ( 0 )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
Disassembly of <code object zigzag at 0x7f33e2644f60, file "< def zigzag ( n , k ) :					    def zigzag ( n , k ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 and k == 0 ) :				    	if k == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( k == 0 ) :					    	elif k == 0 :						  
6 POP_JUMP_IF_FALSE 20					      	      return 0						    	    return 1						  
8 LOAD_FAST 1 ( k )					      	  return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;  	elif k == 0 :						  
10 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	elif k == 0 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return 0						  
							      								    	else :							  
3 16 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( k )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_CONST 1 ( 0 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( zigzag )			      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 1 ( k )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 LOAD_GLOBAL 0 ( zigzag )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_FAST 1 ( k )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_ADD						      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2653ed0, file " def findSum ( n ) :					    def findSum ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  sm = 0						    	sm = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( sm )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  024/eval_scripts/dis_sa-python_sa.valid/SUM_PAIRWI
							      	      for j in range ( i , n + 1 ) :			    	    sm [ i ] = n					  SE_PRODUCTS.py", line 47, in <module>	    if f_fil
3 4 SETUP_LOOP 58 ( to 64 )				      		  sm = sm + i * j				    	return sm						  led(*parameters_set) == f_gold(*parameters_set):
6 LOAD_GLOBAL 0 ( range )				      	  return sm						    								   File "/home/ubuntu/TransCoder/models/eval/bt_sa/2
8 LOAD_CONST 2 ( 1 )					      								    								  1z7a0p024/eval_scripts/dis_sa-python_sa.valid/SUM_
10 LOAD_FAST 0 ( n )					      								    								  PAIRWISE_PRODUCTS.py", line 28, in f_filled	  sm
12 LOAD_CONST 2 ( 1 )					      								    								   [ i ] = n TypeError: 'int' object does not suppor
14 BINARY_ADD						      								    								  t item assignment
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 40 ( to 62 )				      								    								  
22 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 34 ( to 60 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 16 ( to 58 )				      								    								  
42 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 44 LOAD_FAST 1 ( sm )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 1 ( sm )					      								    								  
56 JUMP_ABSOLUTE 40					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 JUMP_ABSOLUTE 20					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 1 ( sm )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
Disassembly of <code object rotate at 0x7f33e26494b0, file "< def rotate ( arr , n ) :					    def rotate ( arr , n , n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  x = arr [ n - 1 ]					    	x , y = arr [ n - 1 ]					  
2 LOAD_FAST 1 ( n )					      	  for i in range ( n - 1 , 0 , - 1 ) :			    	for i in range ( n - 1 , n - 1 ) :			  
4 LOAD_CONST 1 ( 1 )					      	      arr [ i ] = arr [ i - 1 ] ;			    	    if ( i % 2 == n ) :					  
6 BINARY_SUBTRACT					      	  arr [ 0 ] = x ;					    		return ( i % 2 , n - 1 )			  
8 BINARY_SUBSCR						      								    return arr							  
10 STORE_FAST 2 ( x )					      								    								  
							      								    								  
3 12 SETUP_LOOP 40 ( to 54 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 0 )					      								    								  
24 LOAD_CONST 3 ( - 1 )					      								    								  
26 CALL_FUNCTION 3					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 20 ( to 52 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 STORE_SUBSCR						      								    								  
50 JUMP_ABSOLUTE 30					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
5 >> 54 LOAD_FAST 2 ( x )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_CONST 2 ( 0 )					      								    								  
60 STORE_SUBSCR						      								    								  
62 LOAD_CONST 0 ( None )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
Disassembly of <code object findMinZero at 0x7f33e2644930, fi def findMinZero ( p ) :					    def findMinZero ( p , 0x7333333930 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  first = 1						    	first = 1						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 1 ( first )				      	  second = 1						    	second = 2						  alid/FIBONACCI_MODULO_P.py", line 30	   def f_fil
							      	  number = 2						    	second = 2						  led ( p , 0x7333333930 ) :
3 4 LOAD_CONST 1 ( 1 )					      	  next = 1						    	while first < 0 :					  	     ^ SyntaxError: invalid syntax
6 STORE_FAST 2 ( second )				      	  while ( next ) :					    	    first = 0						  
							      	      next = ( first + second ) % p			    	    while first < 0 :					  
4 8 LOAD_CONST 2 ( 2 )					      	      first = second					    		first = 0					  
10 STORE_FAST 3 ( number )				      	      second = next					    		first = 0					  
							      	      number = number + 1				    		first = 0					  
5 12 LOAD_CONST 1 ( 1 )					      	  return number						    		while first < 0 :				  
14 STORE_FAST 4 ( next )				      								    		    first = 0					  
							      								    		    first = 0					  
6 16 SETUP_LOOP 36 ( to 54 )				      								    		    first = 0					  
>> 18 LOAD_FAST 4 ( next )				      								    		    first = 0					  
20 POP_JUMP_IF_FALSE 52					      								    		    first = 0					  
							      								    		    first = 0					  
7 22 LOAD_FAST 1 ( first )				      								    		    first = 0					  
24 LOAD_FAST 2 ( second )				      								    		    first = 0					  
26 BINARY_ADD						      								    		    first = 0					  
28 LOAD_FAST 0 ( p )					      								    		    first = 0					  
30 BINARY_MODULO					      								    		    first = 0					  
32 STORE_FAST 4 ( next )				      								    		    first = 0					  
							      								    		    first = 0					  
8 34 LOAD_FAST 2 ( second )				      								    		    last = 0					  
36 STORE_FAST 1 ( first )				      								    		    last = 0					  
							      								    		    last = 0					  
9 38 LOAD_FAST 4 ( next )				      								    		    last = 0					  
40 STORE_FAST 2 ( second )				      								    		    last = 0					  
							      								    		    last = 0					  
10 42 LOAD_FAST 3 ( number )				      								    		    last = 0					  
44 LOAD_CONST 1 ( 1 )					      								    		    last = 0					  
46 BINARY_ADD						      								    		    last = 0					  
48 STORE_FAST 3 ( number )				      								    		    last = 0					  
50 JUMP_ABSOLUTE 18					      								    		    last = last - 1				  
>> 52 POP_BLOCK						      								    		    last = last - 1				  
							      								    		    last = last - 1				  
11 >> 54 LOAD_FAST 3 ( number )				      								    		    first = last - 1				  
56 RETURN_VALUE NEW_LINE				      								    		    first = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    first = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last last = last - 1			  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last last = last - 1			  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last = last - 1				  
							      								    		    last last					  
-							      -								    		    -						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
Disassembly of <code object printSeries at 0x7f33e2653ed0, fi def printSeries ( n ) :					    def printSeries ( n , n ) :					  script_not_found : None
2 0 SETUP_LOOP 58 ( to 60 )				      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      num = i * ( i + 1 ) * ( i + 2 ) // 6		    	    if n % n == n :					  
4 LOAD_CONST 1 ( 1 )					      	      print ( num , end = ' ' )				    		print ( '' , n + ' ' + n + ' ' + n )		  
6 LOAD_FAST 0 ( n )					      								    								  
8 LOAD_CONST 1 ( 1 )					      								    								  
10 BINARY_ADD						      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 40 ( to 58 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 1 ( i )					      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 1 ( i )					      								    								  
32 LOAD_CONST 2 ( 2 )					      								    								  
34 BINARY_ADD						      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 3 ( 6 )					      								    								  
40 BINARY_FLOOR_DIVIDE					      								    								  
42 STORE_FAST 2 ( num )					      								    								  
							      								    								  
4 44 LOAD_GLOBAL 1 ( print )				      								    								  
46 LOAD_FAST 2 ( num )					      								    								  
48 LOAD_CONST 4 ( ' ' )					      								    								  
50 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
52 CALL_FUNCTION_KW 2					      								    								  
54 POP_TOP						      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
>> 60 LOAD_CONST 0 ( None )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
Disassembly of <code object remainder at 0x7f33e26494b0, file def remainder ( st ) :					    def remainder ( st , ln = 0 , ln = 1 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  ln = len ( st )					    	ln = len ( ln )						  
2 LOAD_FAST 0 ( st )					      	  rem = 0						    	rem = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , ln ) :				    	for i in range ( 0 , ln ) :				  
6 STORE_FAST 1 ( ln )					      	      num = rem * 10 + ( int ) ( st [ i ] )		    	    if ln [ i ] == ln [ i ] :				  
							      	      rem = num % 11					    		ln += 1						  
3 8 LOAD_CONST 1 ( 0 )					      	  return rem						    	return ln						  
10 STORE_FAST 2 ( rem )					      								    								  
							      								    								  
4 12 SETUP_LOOP 46 ( to 60 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( ln )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 32 ( to 58 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 2 ( rem )				      								    								  
30 LOAD_CONST 2 ( 10 )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 LOAD_GLOBAL 2 ( int )				      								    								  
36 LOAD_FAST 0 ( st )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 BINARY_ADD						      								    								  
46 STORE_FAST 4 ( num )					      								    								  
							      								    								  
6 48 LOAD_FAST 4 ( num )				      								    								  
50 LOAD_CONST 3 ( 11 )					      								    								  
52 BINARY_MODULO					      								    								  
54 STORE_FAST 2 ( rem )					      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
7 >> 60 LOAD_FAST 2 ( rem )				      								    								  
62 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
Disassembly of <code object fib at 0x7f33e2653f60, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n < 6 :						    	if n < 6 :						  
2 LOAD_CONST 1 ( 6 )					      	      return f [ n ]					    	    return f ( n )					  
4 COMPARE_OP 0 ( < )					      	  t = 5							    	else :							  
6 POP_JUMP_IF_FALSE 16					      	  fn = 5						    	    f = ( n - 1 )					  
							      	  while t < n :						    	return f						  
3 8 LOAD_GLOBAL 0 ( f )					      	      fn = round ( fn * PHI )				    								  
10 LOAD_FAST 0 ( n )					      	      t += 1						    								  
12 BINARY_SUBSCR					      	  return fn						    								  
14 RETURN_VALUE						      								    								  
							      								    								  
4 >> 16 LOAD_CONST 2 ( 5 )				      								    								  
18 STORE_FAST 1 ( t )					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 5 )					      								    								  
22 STORE_FAST 2 ( fn )					      								    								  
							      								    								  
6 24 SETUP_LOOP 32 ( to 58 )				      								    								  
>> 26 LOAD_FAST 1 ( t )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 34 LOAD_GLOBAL 1 ( round )				      								    								  
36 LOAD_FAST 2 ( fn )					      								    								  
38 LOAD_GLOBAL 2 ( PHI )				      								    								  
40 BINARY_MULTIPLY					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 STORE_FAST 2 ( fn )					      								    								  
							      								    								  
8 46 LOAD_FAST 1 ( t )					      								    								  
48 LOAD_CONST 3 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( t )					      								    								  
54 JUMP_ABSOLUTE 26					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
9 >> 58 LOAD_FAST 2 ( fn )				      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	      CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	    CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION		  CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION
--							      --							    --								  --
Disassembly of <code object stirlingFactorial at 0x7f33e26491 def stirlingFactorial ( n ) :				    def stirlingFactorial ( n ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 1 ) :					    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1 ;					    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  e = 2.71 ;						    	s = 2.71						  
6 POP_JUMP_IF_FALSE 12					      	  z = ( math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , 	s = math.sqrt ( ( 6.71 * s ) )				  
							      	  return math.floor ( z ) ;				    	s = math.sqrt ( ( 6.71 * s ) )				  
3 8 LOAD_CONST 1 ( 1 )					      								    	s = s / ( 6.71 * s )					  
10 RETURN_VALUE						      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
4 >> 12 LOAD_CONST 2 ( 2.71 )				      								    	s = s / ( 6.71 * s )					  
14 STORE_FAST 1 ( e )					      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
5 16 LOAD_GLOBAL 0 ( math )				      								    	s = s / ( 6.71 * s )					  
18 LOAD_METHOD 1 ( sqrt )				      								    	s = s / ( 6.71 * s )					  
20 LOAD_CONST 3 ( 6.28 )				      								    	s = s / ( 6.71 * s )					  
22 LOAD_FAST 0 ( n )					      								    	s = s / ( 6.71 * s )					  
24 BINARY_MULTIPLY					      								    	s = s / ( 6.71 * s )					  
26 CALL_METHOD 1					      								    	s = s / ( 6.71 * s )					  
28 LOAD_GLOBAL 0 ( math )				      								    	s = s / ( 6.71 * s )					  
30 LOAD_METHOD 2 ( pow )				      								    	s = s / ( 6.71 * s )					  
32 LOAD_FAST 0 ( n )					      								    	s = s / ( 6.71 * s )					  
34 LOAD_FAST 1 ( e )					      								    	s = s / ( 6.71 * s )					  
36 BINARY_TRUE_DIVIDE					      								    	s = s / ( 6.71 * s )					  
38 LOAD_FAST 0 ( n )					      								    	s = s / ( 6.71 * s )					  
40 CALL_METHOD 2					      								    	s = s / ( 6.71 * s )					  
42 BINARY_MULTIPLY					      								    	s = s / ( 6.71 * s )					  
44 STORE_FAST 2 ( z )					      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
6 46 LOAD_GLOBAL 0 ( math )				      								    	s = s / ( 6.71 * s )					  
48 LOAD_METHOD 3 ( floor )				      								    	s = s / ( 6.71 * s )					  
50 LOAD_FAST 2 ( z )					      								    	s = s / ( 6.71 * s )					  
52 CALL_METHOD 1					      								    	s = s / ( 6.71 * s )					  
54 RETURN_VALUE NEW_LINE				      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s = s / ( 6.71 * s )					  
							      								    	s += s							  
							      								    	s += s							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI
--							      --							    --								  --
Disassembly of <code object findMaximum at 0x7f33e26494b0, fi def findMaximum ( arr , low , high ) :			    def findMaximum ( arr , low , high , high ) :		  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  max = arr [ low ]					    	i = arr [ i ]						  
2 LOAD_FAST 1 ( low )					      	  i = low						    	if i < high :						  
4 BINARY_SUBSCR						      	  for i in range ( high + 1 ) :				    	    return i						  
6 STORE_FAST 3 ( max )					      	      if arr [ i ] > max :				    	for i in range ( low , high ) :				  
							      		  max = arr [ i ]				    	    if i > high :					  
3 8 LOAD_FAST 1 ( low )					      	  return max						    		return i					  
10 STORE_FAST 4 ( i )					      								    	return i						  
							      								    								  
4 12 SETUP_LOOP 40 ( to 54 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_FAST 2 ( high )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 24 ( to 52 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 3 ( max )					      								    								  
38 COMPARE_OP 4 ( > )					      								    								  
40 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 STORE_FAST 3 ( max )					      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_FAST 3 ( max )				      								    								  
56 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
Disassembly of <code object MaximumHeight at 0x7f33e2649a50,  def MaximumHeight ( a , n ) :				    def MaximumHeight ( num , n ) :				  failure : #Results: 1, 10
2 0 LOAD_CONST 1 ( 1 )					      	  result = 1						    	result = 1						  
2 STORE_FAST 2 ( result )				      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
							      	      y = ( i * ( i + 1 ) ) / 2				    	    result += i * ( n - 1 )				  
3 4 SETUP_LOOP 50 ( to 56 )				      	      if ( y < n ) :					    	return result						  
6 LOAD_GLOBAL 0 ( range )				      		  result = i					    								  
8 LOAD_CONST 1 ( 1 )					      	      else :						    								  
10 LOAD_FAST 1 ( n )					      		  break						    								  
12 CALL_FUNCTION 2					      	  return result						    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 36 ( to 54 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 3 ( i )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_CONST 2 ( 2 )					      								    								  
32 BINARY_TRUE_DIVIDE					      								    								  
34 STORE_FAST 4 ( y )					      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( y )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
6 44 LOAD_FAST 3 ( i )					      								    								  
46 STORE_FAST 2 ( result )				      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
8 >> 50 BREAK_LOOP					      								    								  
52 JUMP_ABSOLUTE 16					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
9 >> 56 LOAD_FAST 2 ( result )				      								    								  
58 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
Disassembly of <code object floorSqrt at 0x7f33e2644f60, file def floorSqrt ( x ) :					    def floorSqrt ( x ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( x )					      	  if ( x == 0 or x == 1 ) :				    	if x == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return x						    	    return x						  
4 COMPARE_OP 2 ( == )					      	  i = 1 ; result = 1					    	elif x == 1 :						  
6 POP_JUMP_IF_TRUE 16					      	  while ( result <= x ) :				    	    return x						  
8 LOAD_FAST 0 ( x )					      	      i += 1						    	else :							  
10 LOAD_CONST 2 ( 1 )					      	      result = i * i					    	    return x						  
12 COMPARE_OP 2 ( == )					      	  return i - 1						    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_FAST 0 ( x )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_CONST 2 ( 1 )				      								    								  
22 STORE_FAST 1 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 2 ( result )				      								    								  
							      								    								  
5 28 SETUP_LOOP 28 ( to 58 )				      								    								  
>> 30 LOAD_FAST 2 ( result )				      								    								  
32 LOAD_FAST 0 ( x )					      								    								  
34 COMPARE_OP 1 ( <= )					      								    								  
36 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 38 LOAD_FAST 1 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 INPLACE_ADD						      								    								  
44 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 46 LOAD_FAST 1 ( i )					      								    								  
48 LOAD_FAST 1 ( i )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 STORE_FAST 2 ( result )				      								    								  
54 JUMP_ABSOLUTE 30					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 1 ( i )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
Disassembly of <code object nextPowerOf2 at 0x7f33e26494b0, f def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  failure : #Results: 1, 10
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0 ;						    	count = 0						  
2 STORE_FAST 1 ( count )				      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	while n <= n :						  
							      	      return n						    	    if n <= n :						  
3 4 LOAD_FAST 0 ( n )					      	  while ( n != 0 ) :					    		return n					  
6 POP_JUMP_IF_FALSE 24					      	      n >>= 1						    	return count						  
8 LOAD_FAST 0 ( n )					      	      count += 1					    								  
10 LOAD_FAST 0 ( n )					      	  return 1 << count ;					    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_SUBTRACT					      								    								  
16 BINARY_AND						      								    								  
18 POP_JUMP_IF_TRUE 24					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( n )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 SETUP_LOOP 28 ( to 54 )				      								    								  
>> 26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_RSHIFT					      								    								  
40 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 42 LOAD_FAST 1 ( count )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 1 ( count )				      								    								  
50 JUMP_ABSOLUTE 26					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
8 >> 54 LOAD_CONST 2 ( 1 )				      								    								  
56 LOAD_FAST 1 ( count )				      								    								  
58 BINARY_LSHIFT					      								    								  
60 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
Disassembly of <code object isTriangular at 0x7f33e2649a50, f def isTriangular ( num ) :				    def isTriangular ( num ) :					  failure : #Results: 1, 10
2 0 LOAD_FAST 0 ( num )					      	  if ( num < 0 ) :					    	if num < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 0 ( < )					      	  sum , n = 0 , 1					    	else :							  
6 POP_JUMP_IF_FALSE 12					      	  while ( sum <= num ) :				    	    return True						  
							      	      sum = sum + n					    								  
3 8 LOAD_CONST 2 ( False )				      	      if ( sum == num ) :				    								  
10 RETURN_VALUE						      		  return True					    								  
							      	      n += 1						    								  
4 >> 12 LOAD_CONST 3 ( ( 0 , 1 ) )			      	  return False						    								  
14 UNPACK_SEQUENCE 2					      								    								  
16 STORE_FAST 1 ( sum )					      								    								  
18 STORE_FAST 2 ( n )					      								    								  
							      								    								  
5 20 SETUP_LOOP 40 ( to 62 )				      								    								  
>> 22 LOAD_FAST 1 ( sum )				      								    								  
24 LOAD_FAST 0 ( num )					      								    								  
26 COMPARE_OP 1 ( <= )					      								    								  
28 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 30 LOAD_FAST 1 ( sum )				      								    								  
32 LOAD_FAST 2 ( n )					      								    								  
34 BINARY_ADD						      								    								  
36 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( sum )				      								    								  
40 LOAD_FAST 0 ( num )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
8 46 LOAD_CONST 4 ( True )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
9 >> 50 LOAD_FAST 2 ( n )				      								    								  
52 LOAD_CONST 5 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 2 ( n )					      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
10 >> 62 LOAD_CONST 2 ( False )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e26494b0, file " def findSum ( n ) :					    def findSum ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  n -= 1						    	n = n // 1						  
2 LOAD_CONST 1 ( 1 )					      	  sum = 0						    	n = n // 2						  
4 INPLACE_SUBTRACT					      	  sum += ( n * ( n + 1 ) ) / 2				    	return n / 2						  
6 STORE_FAST 0 ( n )					      	  sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6		    								  
							      	  return int ( sum )					    								  
3 8 LOAD_CONST 2 ( 0 )					      								    								  
10 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
4 12 LOAD_FAST 1 ( sum )				      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_CONST 3 ( 2 )					      								    								  
26 BINARY_TRUE_DIVIDE					      								    								  
28 INPLACE_ADD						      								    								  
30 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
5 32 LOAD_FAST 1 ( sum )				      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 BINARY_MULTIPLY					      								    								  
44 LOAD_CONST 3 ( 2 )					      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_CONST 4 ( 6 )					      								    								  
58 BINARY_TRUE_DIVIDE					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( sum )					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 0 ( int )				      								    								  
66 LOAD_FAST 1 ( sum )					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
Disassembly of <code object isDivisible at 0x7f33e2644930, fi def isDivisible ( str , k ) :				    def isDivisible ( str ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  c = 0							    	n = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , k ) :				    	while n < n :						  
6 STORE_FAST 2 ( n )					      	      if ( str [ n - i - 1 ] == '0' ) :			    	    c = 0						  
							      		  c += 1					    	    n += 1						  
3 8 LOAD_CONST 1 ( 0 )					      	  return ( c == k )					    	    n += 1						  
10 STORE_FAST 3 ( c )					      								    	return n						  
							      								    								  
4 12 SETUP_LOOP 46 ( to 60 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 1 ( k )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 32 ( to 58 )				      								    								  
26 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 2 ( n )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 3 ( '0' )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
6 48 LOAD_FAST 3 ( c )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 3 ( c )					      								    								  
56 JUMP_ABSOLUTE 24					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
7 >> 60 LOAD_FAST 3 ( c )				      								    								  
62 LOAD_FAST 1 ( k )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED     MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
Disassembly of <code object minValue at 0x7f33e2653ed0, file  def minValue ( A , B , n ) :				    def minValue ( A , B , B , B , B , B , B , B , B , B , B , B  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sorted )				      	  sorted ( A )						    								  
2 LOAD_FAST 0 ( A )					      	  sorted ( B )						    								  
4 CALL_FUNCTION 1					      	  result = 0						    								  
6 POP_TOP						      	  for i in range ( n ) :				    								  
							      	      result += ( A [ i ] * B [ n - i - 1 ] )		    								  
3 8 LOAD_GLOBAL 0 ( sorted )				      	  return result						    								  
10 LOAD_FAST 1 ( B )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 POP_TOP						      								    								  
							      								    								  
4 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( result )				      								    								  
							      								    								  
5 20 SETUP_LOOP 44 ( to 66 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 32 ( to 64 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 3 ( result )				      								    								  
36 LOAD_FAST 0 ( A )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 1 ( B )					      								    								  
44 LOAD_FAST 2 ( n )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 3 ( result )				      								    								  
62 JUMP_ABSOLUTE 30					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
7 >> 66 LOAD_FAST 3 ( result )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
Disassembly of <code object isReversible at 0x7f33e2644930, f def isReversible ( str ) :				    def isReversible ( str ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0 ; j = len ( str ) - 1 ;				    	i = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( i )					      	  while ( i < j ) :					    	j = 0							  024/eval_scripts/dis_sa-python_sa.valid/PERFECT_RE
4 LOAD_GLOBAL 0 ( len )					      	      if ( str [ i ] != str [ j ] ) :			    	while len ( i ) < j :					  VERSIBLE_STRING.py", line 55, in <module>	if f
6 LOAD_FAST 0 ( str )					      		  return False ;				    	    j = i						  _filled(*parameters_set) == f_gold(*parameters_set
8 CALL_FUNCTION 1					      	      i += 1 ;						    	    j = i						  ):   File "/home/ubuntu/TransCoder/models/eval/bt_
10 LOAD_CONST 2 ( 1 )					      	      j -= 1 ;						    	    j = j						  sa/21z7a0p024/eval_scripts/dis_sa-python_sa.valid/
12 BINARY_SUBTRACT					      	  return True ;						    	    j += 1						  PERFECT_REVERSIBLE_STRING.py", line 30, in f_fille
14 STORE_FAST 2 ( j )					      								    	    j += 1						  d	while len ( i ) < j : TypeError: object of t
							      								    	    j += 1						  ype 'int' has no len()
3 16 SETUP_LOOP 48 ( to 66 )				      								    	return j						  
>> 18 LOAD_FAST 1 ( i )					      								    								  
20 LOAD_FAST 2 ( j )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( str )				      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 0 ( str )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 3 ( != )					      								    								  
40 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
5 42 LOAD_CONST 3 ( False )				      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
6 >> 46 LOAD_FAST 1 ( i )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_ADD						      								    								  
52 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( j )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 INPLACE_SUBTRACT					      								    								  
60 STORE_FAST 2 ( j )					      								    								  
62 JUMP_ABSOLUTE 18					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
8 >> 66 LOAD_CONST 4 ( True )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
Disassembly of <code object decToBinary at 0x7f33e2649a50, fi def decToBinary ( n ) :					    def decToBinary ( n ) :					  script_not_found : None
2 0 SETUP_LOOP 62 ( to 64 )				      	  for i in range ( 31 , - 1 , - 1 ) :			    	for i in range ( 1 , - 1 , - 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      k = n >> i ;					    	    if n % 2 == 0 :					  
4 LOAD_CONST 1 ( 31 )					      	      if ( k & 1 ) :					    		if n % 2 == 0 :					  
6 LOAD_CONST 2 ( - 1 )					      		  print ( "1" , end = "" ) ;			    		    if n % 2 == 0 :				  
8 LOAD_CONST 2 ( - 1 )					      	      else :						    			break					  
10 CALL_FUNCTION 3					      		  print ( "0" , end = "" ) ;			    	return n						  
12 GET_ITER						      								    								  
>> 14 FOR_ITER 46 ( to 62 )				      								    								  
16 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 18 LOAD_FAST 0 ( n )					      								    								  
20 LOAD_FAST 1 ( i )					      								    								  
22 BINARY_RSHIFT					      								    								  
24 STORE_FAST 2 ( k )					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( k )					      								    								  
28 LOAD_CONST 3 ( 1 )					      								    								  
30 BINARY_AND						      								    								  
32 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 34 LOAD_GLOBAL 1 ( print )				      								    								  
36 LOAD_CONST 4 ( '1' )					      								    								  
38 LOAD_CONST 5 ( '' )					      								    								  
40 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
42 CALL_FUNCTION_KW 2					      								    								  
44 POP_TOP						      								    								  
46 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
7 >> 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 7 ( '0' )					      								    								  
52 LOAD_CONST 5 ( '' )					      								    								  
54 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
56 CALL_FUNCTION_KW 2					      								    								  
58 POP_TOP						      								    								  
60 JUMP_ABSOLUTE 14					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 LOAD_CONST 0 ( None )				      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object recSearch at 0x7f33e2653f60, file def recSearch ( arr , l , r , x ) :			    def recSearch ( arr , l , l , l , l ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( r )					      	  if r < l :						    	if l < l :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 1 ( l )					      	      return - 1					    	    return - 1						  alid/RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_G
4 COMPARE_OP 0 ( < )					      	  if arr [ l ] == x :					    	elif l == l :						  IVEN_ARRAY.py", line 27     def f_filled ( arr , l
6 POP_JUMP_IF_FALSE 12					      	      return l						    	    return l						   , l , l , l ) :     ^ SyntaxError: duplicate argu
							      	  if arr [ r ] == x :					    	elif l == l :						  ment 'l' in function definition
3 8 LOAD_CONST 1 ( - 1 )				      	      return r						    	    return l						  
10 RETURN_VALUE						      	  return recSearch ( arr , l + 1 , r - 1 , x )		    	elif l == l :						  
							      								    	    return l						  
4 >> 12 LOAD_FAST 0 ( arr )				      								    	elif l == l :						  
14 LOAD_FAST 1 ( l )					      								    	    return l						  
16 BINARY_SUBSCR					      								    	elif l == l :						  
18 LOAD_FAST 3 ( x )					      								    	    return l						  
20 COMPARE_OP 2 ( == )					      								    	else :							  
22 POP_JUMP_IF_FALSE 28					      								    	    return l						  
							      								    								  
5 24 LOAD_FAST 1 ( l )					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 2 ( r )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 3 ( x )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
7 40 LOAD_FAST 2 ( r )					      								    								  
42 RETURN_VALUE						      								    								  
							      								    								  
8 >> 44 LOAD_GLOBAL 0 ( recSearch )			      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 1 ( l )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( r )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_FAST 3 ( x )					      								    								  
62 CALL_FUNCTION 4					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
Disassembly of <code object findStep at 0x7f33e2653f60, file  def findStep ( n ) :					    def findStep ( n ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 1 or n == 0 ) :				    	if n == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  elif ( n == 2 ) :					    	elif n == 2 :						  
6 POP_JUMP_IF_TRUE 16					      	      return 2						    	    return 1						  
8 LOAD_FAST 0 ( n )					      	  else :						    	elif n == 3 :						  
10 LOAD_CONST 2 ( 0 )					      	      return findStep ( n - 3 ) + findStep ( n - 2 ) + find 	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	elif n == 4 :						  
14 POP_JUMP_IF_FALSE 20					      								    	    return 0						  
							      								    	elif n == 1 :						  
3 >> 16 LOAD_CONST 1 ( 1 )				      								    	    return 0						  
18 RETURN_VALUE						      								    	elif n == 4 :						  
							      								    	    return 0						  
4 >> 20 LOAD_FAST 0 ( n )				      								    	elif n == 4 :						  
22 LOAD_CONST 3 ( 2 )					      								    	    return 0						  
24 COMPARE_OP 2 ( == )					      								    	elif n == 5 :						  
26 POP_JUMP_IF_FALSE 32					      								    	    return 0						  
							      								    	elif n == 6 :						  
5 28 LOAD_CONST 3 ( 2 )					      								    	    return 0						  
30 RETURN_VALUE						      								    	elif n == 4 :						  
							      								    	    return 0						  
7 >> 32 LOAD_GLOBAL 0 ( findStep )			      								    	elif n == 6 :						  
34 LOAD_FAST 0 ( n )					      								    	    return 0						  
36 LOAD_CONST 4 ( 3 )					      								    	elif n == 4 :						  
38 BINARY_SUBTRACT					      								    	    return 0						  
40 CALL_FUNCTION 1					      								    	elif n == 7 :						  
42 LOAD_GLOBAL 0 ( findStep )				      								    	    return 0						  
44 LOAD_FAST 0 ( n )					      								    	elif n == 6 :						  
46 LOAD_CONST 3 ( 2 )					      								    	    return 0						  
48 BINARY_SUBTRACT					      								    	elif n == 6 :						  
50 CALL_FUNCTION 1					      								    	    return 0						  
52 BINARY_ADD						      								    	elif n == 6 :						  
54 LOAD_GLOBAL 0 ( findStep )				      								    	    return 0						  
56 LOAD_FAST 0 ( n )					      								    	elif n == 6 :						  
58 LOAD_CONST 1 ( 1 )					      								    	    return 0						  
60 BINARY_SUBTRACT					      								    	elif n == 6 :						  
62 CALL_FUNCTION 1					      								    	    return 0						  
64 BINARY_ADD						      								    	elif n == 7 :						  
66 RETURN_VALUE						      								    	    return 0						  
68 LOAD_CONST 0 ( None )				      								    	elif n == 6 :						  
70 RETURN_VALUE NEW_LINE				      								    	    return 0						  
							      								    	elif n == 7 :						  
							      								    	    return 0						  
							      								    	elif n == 7 :						  
							      								    	    return 0						  
							      								    	elif n == 8 :						  
							      								    	    return 0						  
							      								    	elif n == 8 :						  
							      								    	    return 0						  
							      								    	elif n == 6 :						  
							      								    	    return 0						  
							      								    	elif n == 6 :						  
							      								    	    return 0						  
							      								    	elif n == 8 :						  
							      								    	    return 0						  
							      								    	elif n == 6 :						  
							      								    	    return 0						  
							      								    	elif n == 6 :						  
							      								    	    return 0						  
							      								    	elif n == 7 :						  
							      								    	    return 0						  
							      								    	elif n == 6 :						  
							      								    	    return 0						  
							      								    	elif n == 7 :						  
							      								    	    return 0						  
							      								    	elif n == 8 :						  
							      								    	    return 0						  
							      								    elif n == 7 :						  
							      								    	return 0						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
Disassembly of <code object maxProd at 0x7f33e2649a50, file " def maxProd ( n ) :					    def maxProd ( n ) :						  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 2 or n == 3 ) :				    	if n == 2 :						  
2 LOAD_CONST 1 ( 2 )					      	      return ( n - 1 )					    	    if n == 3 :						  
4 COMPARE_OP 2 ( == )					      	  res = 1						    		return n					  
6 POP_JUMP_IF_TRUE 16					      	  while ( n > 4 ) :					    	    else :						  
8 LOAD_FAST 0 ( n )					      	      n -= 3 ;						    		return n					  
10 LOAD_CONST 2 ( 3 )					      	      res *= 3 ;					    								  
12 COMPARE_OP 2 ( == )					      	  return ( n * res )					    								  
14 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
3 >> 16 LOAD_FAST 0 ( n )				      								    								  
18 LOAD_CONST 3 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_CONST 3 ( 1 )				      								    								  
26 STORE_FAST 1 ( res )					      								    								  
							      								    								  
5 28 SETUP_LOOP 28 ( to 58 )				      								    								  
>> 30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_CONST 4 ( 4 )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 3 )					      								    								  
42 INPLACE_SUBTRACT					      								    								  
44 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 46 LOAD_FAST 1 ( res )				      								    								  
48 LOAD_CONST 2 ( 3 )					      								    								  
50 INPLACE_MULTIPLY					      								    								  
52 STORE_FAST 1 ( res )					      								    								  
54 JUMP_ABSOLUTE 30					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
8 >> 58 LOAD_FAST 0 ( n )				      								    								  
60 LOAD_FAST 1 ( res )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING	      CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		    CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		  CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING
--							      --							    --								  --
Disassembly of <code object findSum at 0x7f33e2644f60, file " def findSum ( str1 ) :					    def findSum ( str1 , str2 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  temp = ""						    	temp = ""						  
2 STORE_FAST 1 ( temp )					      	  Sum = 0						    	temp = 0						  
							      	  for ch in str1 :					    	while temp < str2 :					  
3 4 LOAD_CONST 2 ( 0 )					      	      if ( ch.isdigit ( ) ) :				    	    temp = str1 + str2					  
6 STORE_FAST 2 ( Sum )					      		  temp += ch					    	    if temp.isdigit ( ) :				  
							      	      else :						    		temp = temp + str2				  
4 8 SETUP_LOOP 46 ( to 56 )				      		  Sum += int ( temp )				    	return temp						  
10 LOAD_FAST 0 ( str1 )					      		  temp = "0"					    								  
12 GET_ITER						      	  return Sum + int ( temp )				    								  
>> 14 FOR_ITER 38 ( to 54 )				      								    								  
16 STORE_FAST 3 ( ch )					      								    								  
							      								    								  
5 18 LOAD_FAST 3 ( ch )					      								    								  
20 LOAD_METHOD 0 ( isdigit )				      								    								  
22 CALL_METHOD 0					      								    								  
24 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 26 LOAD_FAST 1 ( temp )				      								    								  
28 LOAD_FAST 3 ( ch )					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( temp )				      								    								  
34 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
8 >> 36 LOAD_FAST 2 ( Sum )				      								    								  
38 LOAD_GLOBAL 1 ( int )				      								    								  
40 LOAD_FAST 1 ( temp )					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 INPLACE_ADD						      								    								  
46 STORE_FAST 2 ( Sum )					      								    								  
							      								    								  
9 48 LOAD_CONST 3 ( '0' )				      								    								  
50 STORE_FAST 1 ( temp )				      								    								  
52 JUMP_ABSOLUTE 14					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
10 >> 56 LOAD_FAST 2 ( Sum )				      								    								  
58 LOAD_GLOBAL 1 ( int )				      								    								  
60 LOAD_FAST 1 ( temp )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_ADD						      								    								  
66 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
Disassembly of <code object count at 0x7f33e2644f60, file "<d def count ( n , x ) :					    def count ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  cnt = 0						    	cnt = 0							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( cnt )					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  alid/COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX.
							      	      if i <= x :					    	    cnt += i						  py", line 32	   return cnt	  ^ SyntaxError: 're
3 4 SETUP_LOOP 62 ( to 68 )				      		  if x // i <= n and x % i == 0 :		    	cnt += 1						  turn' outside function
6 LOAD_GLOBAL 0 ( range )				      		      cnt += 1					    	cnt += 1						  
8 LOAD_CONST 2 ( 1 )					      	  return cnt						    return cnt							  
10 LOAD_FAST 0 ( n )					      								    								  
12 LOAD_CONST 2 ( 1 )					      								    								  
14 BINARY_ADD						      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 44 ( to 66 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_FAST 1 ( x )					      								    								  
28 COMPARE_OP 1 ( <= )					      								    								  
30 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 32 LOAD_FAST 1 ( x )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_FLOOR_DIVIDE					      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 COMPARE_OP 1 ( <= )					      								    								  
42 POP_JUMP_IF_FALSE 20					      								    								  
44 LOAD_FAST 1 ( x )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_MODULO					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( cnt )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( cnt )					      								    								  
64 JUMP_ABSOLUTE 20					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 2 ( cnt )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
Disassembly of <code object maxTasks at 0x7f33e26494b0, file  def maxTasks ( high , low , n ) :				    def maxTasks ( low , high , high , high ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( n )					      	  if ( n <= 0 ) :					    	if low <= 0 :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  alid/DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT
4 COMPARE_OP 1 ( <= )					      	  return max ( high [ n - 1 ] + maxTasks ( high , low , ( n 	low = max ( low , high - 1 )				  _TASKS_PROBLEM.py", line 23	  def f_filled ( low
6 POP_JUMP_IF_FALSE 12					      								    	high -= 1						   , high , high , high ) :	^ SyntaxError: dupli
							      								    	return max ( low , high - 1 )				  cate argument 'high' in function definition
3 8 LOAD_CONST 1 ( 0 )					      								    								  
10 RETURN_VALUE						      								    								  
							      								    								  
4 >> 12 LOAD_GLOBAL 0 ( max )				      								    								  
14 LOAD_FAST 0 ( high )					      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_GLOBAL 1 ( maxTasks )				      								    								  
26 LOAD_FAST 0 ( high )					      								    								  
28 LOAD_FAST 1 ( low )					      								    								  
30 LOAD_FAST 2 ( n )					      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 3					      								    								  
38 BINARY_ADD						      								    								  
40 LOAD_FAST 1 ( low )					      								    								  
42 LOAD_FAST 2 ( n )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_GLOBAL 1 ( maxTasks )				      								    								  
52 LOAD_FAST 0 ( high )					      								    								  
54 LOAD_FAST 1 ( low )					      								    								  
56 LOAD_FAST 2 ( n )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 2					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
Disassembly of <code object findS at 0x7f33e2653f60, file "<d def findS ( s ) :						    def findS ( s ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  _sum = 0						    	_sum = 0						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( _sum )					      	  n = 1							    	n = 0							  024/eval_scripts/dis_sa-python_sa.valid/SQUARED_TR
							      	  while ( _sum < s ) :					    	while n < len ( s ) :					  IANGULAR_NUMBER_SUM_CUBES.py", line 54, in <module
3 4 LOAD_CONST 2 ( 1 )					      	      _sum += n * n * n					    	    if s [ n ] < len ( s ) :				  >	if f_filled(*parameters_set) == f_gold(*para
6 STORE_FAST 2 ( n )					      	      n += 1						    		n += 1						  meters_set):	 File "/home/ubuntu/TransCoder/model
							      	  n -= 1						    	    return n						  s/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-python
4 8 SETUP_LOOP 36 ( to 46 )				      	  if _sum == s :					    	return n						  _sa.valid/SQUARED_TRIANGULAR_NUMBER_SUM_CUBES.py",
>> 10 LOAD_FAST 1 ( _sum )				      	      return n						    								   line 32, in f_filled	    while n < len ( s ) : Ty
12 LOAD_FAST 0 ( s )					      	  return - 1						    								  peError: object of type 'int' has no len()
14 COMPARE_OP 0 ( < )					      								    								  
16 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
5 18 LOAD_FAST 1 ( _sum )				      								    								  
20 LOAD_FAST 2 ( n )					      								    								  
22 LOAD_FAST 2 ( n )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 1 ( _sum )				      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( n )					      								    								  
42 JUMP_ABSOLUTE 10					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
7 >> 46 LOAD_FAST 2 ( n )				      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 INPLACE_SUBTRACT					      								    								  
52 STORE_FAST 2 ( n )					      								    								  
							      								    								  
8 54 LOAD_FAST 1 ( _sum )				      								    								  
56 LOAD_FAST 0 ( s )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
9 62 LOAD_FAST 2 ( n )					      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
10 >> 66 LOAD_CONST 3 ( - 1 )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
Disassembly of <code object isOneFlip at 0x7f33e2649150, file def isOneFlip ( str ) :					    def isOneFlip ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  
2 STORE_FAST 1 ( sum )					      	  n = len ( str )					    	n = 0							  
							      	  for i in range ( 0 , n ) :				    	while ( len ( sum ) - 1 ) :				  
3 4 LOAD_GLOBAL 0 ( len )				      	      sum += int ( str [ i ] ) - int ( '0' )		    	    n = sum ( 0 , ( len ( sum ) - 1 ) )			  
6 LOAD_FAST 0 ( str )					      	  return ( sum == n - 1 or sum == 1 )			    	    if n == 0 :						  
8 CALL_FUNCTION 1					      								    		return 1					  
10 STORE_FAST 2 ( n )					      								    	return n						  
							      								    								  
4 12 SETUP_LOOP 42 ( to 56 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 28 ( to 54 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( sum )				      								    								  
30 LOAD_GLOBAL 2 ( int )				      								    								  
32 LOAD_FAST 0 ( str )					      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 LOAD_GLOBAL 2 ( int )				      								    								  
42 LOAD_CONST 2 ( '0' )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 1 ( sum )					      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
6 >> 56 LOAD_FAST 1 ( sum )				      								    								  
58 LOAD_FAST 2 ( n )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 JUMP_IF_TRUE_OR_POP 74				      								    								  
68 LOAD_FAST 1 ( sum )					      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
>> 74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			      FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			    FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			  FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
Disassembly of <code object subArrayExists at 0x7f33e2644930, def subArrayExists ( arr , n ) :				    def subArrayExists ( arr , 0x73333E930 , 0x930 , 0x930 , 0x93 script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    								  
2 CALL_FUNCTION 0					      	  sum = 0						    								  
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    								  
							      	      sum += arr [ i ]					    								  
3 6 LOAD_CONST 1 ( 0 )					      	      if sum == 0 or sum in s :				    								  
8 STORE_FAST 3 ( sum )					      		  return True					    								  
							      	      s.add ( sum )					    								  
4 10 SETUP_LOOP 58 ( to 70 )				      	  return False						    								  
12 LOAD_GLOBAL 1 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 46 ( to 68 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 3 ( sum )				      								    								  
26 LOAD_FAST 0 ( arr )					      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 INPLACE_ADD						      								    								  
34 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( sum )				      								    								  
38 LOAD_CONST 1 ( 0 )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_TRUE 52					      								    								  
44 LOAD_FAST 3 ( sum )					      								    								  
46 LOAD_FAST 2 ( s )					      								    								  
48 COMPARE_OP 6 ( in )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
7 >> 52 LOAD_CONST 2 ( True )				      								    								  
54 RETURN_VALUE						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( s )				      								    								  
58 LOAD_METHOD 2 ( add )				      								    								  
60 LOAD_FAST 3 ( sum )					      								    								  
62 CALL_METHOD 1					      								    								  
64 POP_TOP						      								    								  
66 JUMP_ABSOLUTE 20					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
9 >> 70 LOAD_CONST 3 ( False )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
Disassembly of <code object maxPrefix at 0x7f33e2644f60, file def maxPrefix ( s , t ) :					    def maxPrefix ( s ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  for i in range ( 0 , len ( t ) ) :			    	count = 0						  
							      	      if ( count == len ( s ) ) :			    	for i in range ( 0 , len ( s ) ) :			  
3 4 SETUP_LOOP 60 ( to 66 )				      		  break						    	    if count == len ( s ) : count += 1			  
6 LOAD_GLOBAL 0 ( range )				      	      if ( t [ i ] == s [ count ] ) :			    	    count += 1						  
8 LOAD_CONST 1 ( 0 )					      		  count = count + 1				    	    count += 1						  
10 LOAD_GLOBAL 1 ( len )				      	  return count						    	    count += 1						  
12 LOAD_FAST 1 ( t )					      								    return count						  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 42 ( to 64 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( count )				      								    								  
26 LOAD_GLOBAL 1 ( len )				      								    								  
28 LOAD_FAST 0 ( s )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
5 36 BREAK_LOOP						      								    								  
							      								    								  
6 >> 38 LOAD_FAST 1 ( t )				      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( s )					      								    								  
46 LOAD_FAST 2 ( count )				      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
7 54 LOAD_FAST 2 ( count )				      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 2 ( count )				      								    								  
62 JUMP_ABSOLUTE 20					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
8 >> 66 LOAD_FAST 2 ( count )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
Disassembly of <code object kthdigit at 0x7f33e2644f60, file  def kthdigit ( a , b , k ) :				    def kthdigit ( a , b , b , c ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  p = a ** b						    	p = a * b						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 1 ( b )					      	  count = 0						    	p = 0							  alid/K_TH_DIGIT_RAISED_POWER_B.py", line 28	  de
4 BINARY_POWER						      	  while ( p > 0 and count < k ) :			    	while p < 0 :						  f f_filled ( a , b , b , c ) :     ^ SyntaxError:
6 STORE_FAST 3 ( p )					      	      rem = p % 10					    	    if a > 0 :						  duplicate argument 'b' in function definition
							      	      count = count + 1					    		p = a						  
3 8 LOAD_CONST 1 ( 0 )					      	      if ( count == k ) :				    	return p						  
10 STORE_FAST 4 ( count )				      		  return rem					    								  
							      	      p = p / 10 ;					    								  
4 12 SETUP_LOOP 56 ( to 70 )				      								    								  
>> 14 LOAD_FAST 3 ( p )					      								    								  
16 LOAD_CONST 1 ( 0 )					      								    								  
18 COMPARE_OP 4 ( > )					      								    								  
20 POP_JUMP_IF_FALSE 68					      								    								  
22 LOAD_FAST 4 ( count )				      								    								  
24 LOAD_FAST 2 ( k )					      								    								  
26 COMPARE_OP 0 ( < )					      								    								  
28 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 30 LOAD_FAST 3 ( p )					      								    								  
32 LOAD_CONST 2 ( 10 )					      								    								  
34 BINARY_MODULO					      								    								  
36 STORE_FAST 5 ( rem )					      								    								  
							      								    								  
6 38 LOAD_FAST 4 ( count )				      								    								  
40 LOAD_CONST 3 ( 1 )					      								    								  
42 BINARY_ADD						      								    								  
44 STORE_FAST 4 ( count )				      								    								  
							      								    								  
7 46 LOAD_FAST 4 ( count )				      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
8 54 LOAD_FAST 5 ( rem )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
9 >> 58 LOAD_FAST 3 ( p )				      								    								  
60 LOAD_CONST 2 ( 10 )					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 STORE_FAST 3 ( p )					      								    								  
66 JUMP_ABSOLUTE 14					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 LOAD_CONST 0 ( None )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE			  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
Disassembly of <code object recursiveReverse at 0x7f33e2644f6 def recursiveReverse ( str ) :				    def recurcedDbms Reverse ( str ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_LIST 0					      	  stack = [ ]						    	stack = [ ]						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 1 ( stack )				      	  for i in range ( len ( str ) ) :			    	for i in range ( len ( stack ) ) :			  alid/PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE.py
							      	      stack.append ( str [ i ] )			    	    stack.append ( i )					  ", line 25	 def f_filled Reverse ( str ) :
3 4 SETUP_LOOP 34 ( to 40 )				      	  for i in range ( len ( str ) ) :			    	    stack.append ( i )					  		     ^ SyntaxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      	      str [ i ] = stack.pop ( )				    	    stack.append ( i )					  
8 LOAD_GLOBAL 1 ( len )					      								    	    stack.append ( i )					  
10 LOAD_FAST 0 ( str )					      								    	    stack.append ( i )					  
12 CALL_FUNCTION 1					      								    	    stack.append ( i )					  
14 CALL_FUNCTION 1					      								    	    stack.append ( i )					  
16 GET_ITER						      								    	    stack.append ( i )					  
>> 18 FOR_ITER 18 ( to 38 )				      								    	    stack.append ( i )					  
20 STORE_FAST 2 ( i )					      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
4 22 LOAD_FAST 1 ( stack )				      								    	    stack.append ( i )					  
24 LOAD_METHOD 2 ( append )				      								    	    stack.append ( i )					  
26 LOAD_FAST 0 ( str )					      								    	    stack.append ( i )					  
28 LOAD_FAST 2 ( i )					      								    	    stack.append ( i )					  
30 BINARY_SUBSCR					      								    	    stack.append ( i )					  
32 CALL_METHOD 1					      								    	    stack.append ( i )					  
34 POP_TOP						      								    	    stack.append ( i )					  
36 JUMP_ABSOLUTE 18					      								    	    stack.append ( i )					  
>> 38 POP_BLOCK						      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
5 >> 40 SETUP_LOOP 32 ( to 74 )				      								    	    stack.append ( i )					  
42 LOAD_GLOBAL 0 ( range )				      								    	    stack.append ( i )					  
44 LOAD_GLOBAL 1 ( len )				      								    	    stack.append ( i )					  
46 LOAD_FAST 0 ( str )					      								    	    stack.append ( i )					  
48 CALL_FUNCTION 1					      								    	    stack.append ( i )					  
50 CALL_FUNCTION 1					      								    	    stack.append ( i )					  
52 GET_ITER						      								    	    stack.append ( i )					  
>> 54 FOR_ITER 16 ( to 72 )				      								    	    stack.append ( i )					  
56 STORE_FAST 2 ( i )					      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
6 58 LOAD_FAST 1 ( stack )				      								    	    stack.append ( i )					  
60 LOAD_METHOD 3 ( pop )				      								    	    stack.append ( i )					  
62 CALL_METHOD 0					      								    	    stack.append ( i )					  
64 LOAD_FAST 0 ( str )					      								    	    stack.append ( i )					  
66 LOAD_FAST 2 ( i )					      								    	    stack.append ( i )					  
68 STORE_SUBSCR						      								    	    stack.append ( i )					  
70 JUMP_ABSOLUTE 54					      								    	    stack.append ( i )					  
>> 72 POP_BLOCK						      								    	    stack.append ( i )					  
>> 74 LOAD_CONST 0 ( None )				      								    	    stack.append ( i )					  
76 RETURN_VALUE NEW_LINE				      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
							      								    	    stack.append ( i )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S				      NUMBER_TRIANGLES_N_<unk> S				    NUMBER_TRIANGLES_N_<unk> S					  NUMBER_TRIANGLES_N_<unk> S
--							      --							    --								  --
Disassembly of <code object numberOfTriangles at 0x7f33e2653e def numberOfTriangles ( n ) :				    def numberOfTriangles ( n , num333333333333333333333333333333 script_not_found : None
2 0 LOAD_CONST 0 ( None )				      	  answer = [ None ] * ( n + 1 ) ;			    								  
2 BUILD_LIST 1						      	  answer [ 0 ] = 1 ;					    								  
4 LOAD_FAST 0 ( n )					      	  i = 1							    								  
6 LOAD_CONST 1 ( 1 )					      	  while i <= n :					    								  
8 BINARY_ADD						      	      answer [ i ] = answer [ i - 1 ] * 3 + 2 ;		    								  
10 BINARY_MULTIPLY					      	      i = i + 1						    								  
12 STORE_FAST 1 ( answer )				      	  return answer [ n ] ;					    								  
							      								    								  
3 14 LOAD_CONST 1 ( 1 )					      								    								  
16 LOAD_FAST 1 ( answer )				      								    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 1 ( 1 )					      								    								  
24 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 26 SETUP_LOOP 44 ( to 72 )				      								    								  
>> 28 LOAD_FAST 2 ( i )					      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 COMPARE_OP 1 ( <= )					      								    								  
34 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
6 36 LOAD_FAST 1 ( answer )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_CONST 3 ( 3 )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_CONST 4 ( 2 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( answer )				      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
7 60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 2 ( i )					      								    								  
68 JUMP_ABSOLUTE 28					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
8 >> 72 LOAD_FAST 1 ( answer )				      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7f33e2653ed0, fil def countPairs ( arr , n ) :				    def countPairs ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 2 ( ans )					      	  for i in range ( 0 , n ) :				    	ans = 0							  024/eval_scripts/dis_sa-python_sa.valid/COUNT_INDE
							      	      for j in range ( i + 1 , n ) :			    	for i in range ( 0 , n ) :				  X_PAIRS_EQUAL_ELEMENTS_ARRAY.py", line 52, in <mod
3 4 SETUP_LOOP 66 ( to 72 )				      		  if ( arr [ i ] == arr [ j ] ) :		    	    ans [ i ] = int ( ans [ i ] )			  ule>	   if f_filled(*parameters_set) == f_gold(*p
6 LOAD_GLOBAL 0 ( range )				      		      ans += 1					    	    ans [ i ] = int ( ans [ i ] )			  arameters_set):   File "/home/ubuntu/TransCoder/mo
8 LOAD_CONST 1 ( 0 )					      	  return ans						    	    ans [ i ] = int ( ans [ i ] )			  dels/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-pyt
10 LOAD_FAST 1 ( n )					      								    	    ans [ i ] = int ( ans [ i ] )			  hon_sa.valid/COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRA
12 CALL_FUNCTION 2					      								    	return ans						  Y.py", line 30, in f_filled	  ans [ i ] = int (
14 GET_ITER						      								    								  ans [ i ] ) TypeError: 'int' object is not subscri
>> 16 FOR_ITER 52 ( to 70 )				      								    								  ptable
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 46 ( to 68 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 28 ( to 66 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( ans )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( ans )					      								    								  
64 JUMP_ABSOLUTE 36					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 JUMP_ABSOLUTE 16					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 2 ( ans )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
Disassembly of <code object interchangeFirstLast at 0x7f33e26 def interchangeFirstLast ( mat , n , m ) :		    def interchangeFirstLast ( mat , n , n , n , rows ) :	  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  rows = n						    	rows , cols = n						  
2 STORE_FAST 3 ( rows )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      t = mat [ 0 ] [ i ]				    	    rows [ i ] = n					  
3 4 SETUP_LOOP 68 ( to 74 )				      	      mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]		    	rows [ i ] = rows					  
6 LOAD_GLOBAL 0 ( range )				      	      mat [ rows - 1 ] [ i ] = t			    	rows [ i ] = rows					  
8 LOAD_FAST 1 ( n )					      								    	rows [ i ] = rows					  
10 CALL_FUNCTION 1					      								    	rows [ i ] = rows					  
12 GET_ITER						      								    	rows [ i ] = rows					  
>> 14 FOR_ITER 56 ( to 72 )				      								    	rows [ i ] = rows					  
16 STORE_FAST 4 ( i )					      								    	rows [ i ] = rows					  
							      								    return rows							  
4 18 LOAD_FAST 0 ( mat )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 STORE_FAST 5 ( t )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( mat )				      								    								  
32 LOAD_FAST 3 ( rows )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( mat )					      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 STORE_SUBSCR						      								    								  
							      								    								  
6 54 LOAD_FAST 5 ( t )					      								    								  
56 LOAD_FAST 0 ( mat )					      								    								  
58 LOAD_FAST 3 ( rows )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 14					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 LOAD_CONST 0 ( None )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_BITS_IN_A_GIVEN_NUMBER				      SWAP_BITS_IN_A_GIVEN_NUMBER				    SWAP_BITS_IN_A_GIVEN_NUMBER					  SWAP_BITS_IN_A_GIVEN_NUMBER
--							      --							    --								  --
Disassembly of <code object swapBits at 0x7f33e26494b0, file  def swapBits ( x , p1 , p2 , n ) :			    def swapBits ( x , p1 , p2 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( x )					      	  set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 )		    	if x >= 0 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 1 ( p1 )					      	  set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 )		    	    x = x // p1						  024/eval_scripts/dis_sa-python_sa.valid/SWAP_BITS_
4 BINARY_RSHIFT						      	  xor = ( set1 ^ set2 )					    	if x >= 0 :						  IN_A_GIVEN_NUMBER.py", line 55, in <module>	  if
6 LOAD_CONST 1 ( 1 )					      	  xor = ( xor << p1 ) | ( xor << p2 )			    	    x = x // p1						   f_filled(*parameters_set) == f_gold(*parameters_s
8 LOAD_FAST 3 ( n )					      	  result = x ^ xor					    	if x >= 1 :						  et): TypeError: f_filled() takes 3 positional argu
10 BINARY_LSHIFT					      	  return result						    	    return x						  ments but 4 were given
12 LOAD_CONST 1 ( 1 )					      								    	if x >= 0 :						  
14 BINARY_SUBTRACT					      								    	    return x						  
16 BINARY_AND						      								    	if x >= 0 :						  
18 STORE_FAST 4 ( set1 )				      								    	    return x						  
							      								    	return x						  
3 20 LOAD_FAST 0 ( x )					      								    								  
22 LOAD_FAST 2 ( p2 )					      								    								  
24 BINARY_RSHIFT					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 LOAD_FAST 3 ( n )					      								    								  
30 BINARY_LSHIFT					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_AND						      								    								  
38 STORE_FAST 5 ( set2 )				      								    								  
							      								    								  
4 40 LOAD_FAST 4 ( set1 )				      								    								  
42 LOAD_FAST 5 ( set2 )					      								    								  
44 BINARY_XOR						      								    								  
46 STORE_FAST 6 ( xor )					      								    								  
							      								    								  
5 48 LOAD_FAST 6 ( xor )				      								    								  
50 LOAD_FAST 1 ( p1 )					      								    								  
52 BINARY_LSHIFT					      								    								  
54 LOAD_FAST 6 ( xor )					      								    								  
56 LOAD_FAST 2 ( p2 )					      								    								  
58 BINARY_LSHIFT					      								    								  
60 BINARY_OR						      								    								  
62 STORE_FAST 6 ( xor )					      								    								  
							      								    								  
6 64 LOAD_FAST 0 ( x )					      								    								  
66 LOAD_FAST 6 ( xor )					      								    								  
68 BINARY_XOR						      								    								  
70 STORE_FAST 7 ( result )				      								    								  
							      								    								  
7 72 LOAD_FAST 7 ( result )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE
--							      --							    --								  --
Disassembly of <code object search at 0x7f33e2653ed0, file "< def search ( arr , n , x ) :				    def search ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 3 ( i )					      	  while ( i < n ) :					    	while n < n :						  alid/SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENC
							      	      if ( arr [ i ] == x ) :				    	    if n < n :						  E_BETWEEN_ADJACENT_ELEMENTS_IS_1.py", line 27
3 4 SETUP_LOOP 48 ( to 54 )				      		  return i					    		arr [ n ] = arr [ n ]				  def f_filled ( arr , n , n ) :     ^ SyntaxError:
>> 6 LOAD_FAST 3 ( i )					      	      i = i + abs ( arr [ i ] - x )			    	    i += 1						  duplicate argument 'n' in function definition
8 LOAD_FAST 1 ( n )					      	  print ( "number is not present!" )			    	return arr						  
10 COMPARE_OP 0 ( < )					      	  return - 1						    								  
12 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 3 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( x )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 26 LOAD_FAST 3 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
6 >> 30 LOAD_FAST 3 ( i )				      								    								  
32 LOAD_GLOBAL 0 ( abs )				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( x )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 BINARY_ADD						      								    								  
48 STORE_FAST 3 ( i )					      								    								  
50 JUMP_ABSOLUTE 6					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( print )				      								    								  
56 LOAD_CONST 2 ( 'number is not present!' )		      								    								  
58 CALL_FUNCTION 1					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_CONST 3 ( - 1 )				      								    								  
64 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
Disassembly of <code object minimumflip at 0x7f33e2653ed0, fi def minimumflip ( mat , n ) :				    def minimumflip ( mat , n , axis = None ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  flip = 0						    	flip = 0						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 2 ( flip )					      	  for i in range ( n ) :				    	for i in range ( n ) :					  024/eval_scripts/dis_sa-python_sa.valid/MINIMUM_FL
							      	      for j in range ( i ) :				    	    for j in range ( n ) :				  IP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1.py", li
3 4 SETUP_LOOP 66 ( to 72 )				      		  if mat [ i ] [ j ] != mat [ j ] [ i ] :	    		if j != n :					  ne 49, in <module>	 if f_filled(*parameters_set
6 LOAD_GLOBAL 0 ( range )				      		      flip += 1					    		    flip ( mat , n )				  ) == f_gold(*parameters_set):	  File "/home/ubuntu
8 LOAD_FAST 1 ( n )					      	  return flip						    								  /TransCoder/models/eval/bt_sa/21z7a0p024/eval_scri
10 CALL_FUNCTION 1					      								    								  pts/dis_sa-python_sa.valid/MINIMUM_FLIP_REQUIRED_M
12 GET_ITER						      								    								  AKE_BINARY_MATRIX_SYMMETRIC_1.py", line 31, in f_f
>> 14 FOR_ITER 54 ( to 70 )				      								    								  illed	    flip ( mat , n ) TypeError: 'int' object
16 STORE_FAST 3 ( i )					      								    								   is not callable
							      								    								  
4 18 SETUP_LOOP 48 ( to 68 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 36 ( to 66 )				      								    								  
30 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( mat )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 4 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( mat )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
6 56 LOAD_FAST 2 ( flip )				      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 2 ( flip )				      								    								  
64 JUMP_ABSOLUTE 28					      								    								  
>> 66 POP_BLOCK						      								    								  
>> 68 JUMP_ABSOLUTE 14					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 2 ( flip )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7f33e2653f60, fil def countPairs ( a , n ) :				    def countPairs ( a , n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  
2 STORE_FAST 2 ( count )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    count += 1						  
3 4 SETUP_LOOP 70 ( to 76 )				      		  if ( a [ i ] & a [ j ] ) == 0 :		    	for i in range ( n - 1 , n - 1 ) :			  
6 LOAD_GLOBAL 0 ( range )				      		      count += 2				    	    count += 1						  
8 LOAD_CONST 1 ( 0 )					      	  return count						    	return count						  
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 56 ( to 74 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 50 ( to 72 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 32 ( to 70 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_AND						      								    								  
54 LOAD_CONST 1 ( 0 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 60 LOAD_FAST 2 ( count )				      								    								  
62 LOAD_CONST 3 ( 2 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 2 ( count )				      								    								  
68 JUMP_ABSOLUTE 36					      								    								  
>> 70 POP_BLOCK						      								    								  
>> 72 JUMP_ABSOLUTE 16					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
7 >> 76 LOAD_FAST 2 ( count )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			      CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			    CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			  CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT
--							      --							    --								  --
Disassembly of <code object areEqual at 0x7f33e2644f60, file  def areEqual ( arr1 , arr2 , n , m ) :			    def areEqual ( arr1 , arr2 , m = - 2.333333f60 ) :		  script_not_found : None
2 0 LOAD_FAST 2 ( n )					      	  if ( n != m ) :					    	if ( arr2 != 0 ) :					  
2 LOAD_FAST 3 ( m )					      	      return False ;					    	    return False					  
4 COMPARE_OP 3 ( != )					      	  arr1.sort ( ) ;					    	if ( arr2 != 0 ) :					  
6 POP_JUMP_IF_FALSE 12					      	  arr2.sort ( ) ;					    	    return True						  
							      	  for i in range ( 0 , n - 1 ) :			    	if ( ( arr2 + 1 ) != 0 and ( arr2 [ 1 ] != arr2 ) and ( ( 
3 8 LOAD_CONST 1 ( False )				      	      if ( arr1 [ i ] != arr2 [ i ] ) :			    								  
10 RETURN_VALUE						      		  return False ;				    								  
							      	  return True ;						    								  
4 >> 12 LOAD_FAST 0 ( arr1 )				      								    								  
14 LOAD_METHOD 0 ( sort )				      								    								  
16 CALL_METHOD 0					      								    								  
18 POP_TOP						      								    								  
							      								    								  
5 20 LOAD_FAST 1 ( arr2 )				      								    								  
22 LOAD_METHOD 0 ( sort )				      								    								  
24 CALL_METHOD 0					      								    								  
26 POP_TOP						      								    								  
							      								    								  
6 28 SETUP_LOOP 42 ( to 72 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 24 ( to 70 )				      								    								  
46 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr1 )				      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 1 ( arr2 )					      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 64 LOAD_CONST 1 ( False )				      								    								  
66 RETURN_VALUE						      								    								  
68 JUMP_ABSOLUTE 44					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
9 >> 72 LOAD_CONST 4 ( True )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X	  COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X
--							      --							    --								  --
Disassembly of <code object countPairs at 0x7f33e26499c0, fil def countPairs ( arr1 , arr2 , m , n , x ) :		    def countPairs ( arr1 , arr2 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 5 ( count )				      	  for i in range ( m ) :				    	for i in range ( len ( arr1 ) ) :			  024/eval_scripts/dis_sa-python_sa.valid/COUNT_PAIR
							      	      for j in range ( n ) :				    	    for j in range ( i ) :				  S_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X.
3 4 SETUP_LOOP 62 ( to 68 )				      		  if arr1 [ i ] + arr2 [ j ] == x :		    		count += 1					  py", line 49, in <module>	if f_filled(*paramet
6 LOAD_GLOBAL 0 ( range )				      		      count = count + 1				    	return count						  ers_set) == f_gold(*parameters_set): TypeError: f_
8 LOAD_FAST 2 ( m )					      	  return count						    								  filled() takes 2 positional arguments but 5 were g
10 CALL_FUNCTION 1					      								    								  iven
12 GET_ITER						      								    								  
>> 14 FOR_ITER 50 ( to 66 )				      								    								  
16 STORE_FAST 6 ( i )					      								    								  
							      								    								  
4 18 SETUP_LOOP 44 ( to 64 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 7 ( j )					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr1 )				      								    								  
34 LOAD_FAST 6 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 1 ( arr2 )					      								    								  
40 LOAD_FAST 7 ( j )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 4 ( x )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
6 52 LOAD_FAST 5 ( count )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 STORE_FAST 5 ( count )				      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 14					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_FAST 5 ( count )				      								    								  
70 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
Disassembly of <code object findMinDiff at 0x7f33e2653ed0, fi def findMinDiff ( arr , n ) :				    def findMinDiff ( arr , n ) :				  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( sorted )				      	  arr = sorted ( arr )					    	arr = sorted ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  diff = 10 ** 20					    	border = 1000000000000					  
4 CALL_FUNCTION 1					      	  for i in range ( n - 1 ) :				    	diff = 1000000000000					  
6 STORE_FAST 0 ( arr )					      	      if arr [ i + 1 ] - arr [ i ] < diff :		    	for i in range ( n - 1 , n - 1 ) :			  
							      		  diff = arr [ i + 1 ] - arr [ i ]		    	    diff [ i ] = min ( diff [ i ] - diff [ i ] )	  
3 8 LOAD_CONST 1 ( 100000000000000000000 )		      	  return diff						    	return diff						  
10 STORE_FAST 2 ( diff )				      								    								  
							      								    								  
4 12 SETUP_LOOP 64 ( to 78 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 48 ( to 76 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 2 ( diff )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 3 ( i )					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 BINARY_ADD						      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 STORE_FAST 2 ( diff )				      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
7 >> 78 LOAD_FAST 2 ( diff )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
Disassembly of <code object swap at 0x7f33e26499c0, file "<di def swap ( xp , yp ) :					    def swap ( xp , xp , xp , xp , xp , xp , xp , xp , xp , xp ,  script_not_found : None
2 0 LOAD_FAST 0 ( xp )					      	  if ( xp [ 0 ] == yp [ 0 ] ) :				    								  
2 LOAD_CONST 1 ( 0 )					      	      return						    								  
4 BINARY_SUBSCR						      	  xp [ 0 ] = xp [ 0 ] + yp [ 0 ]			    								  
6 LOAD_FAST 1 ( yp )					      	  yp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    								  
8 LOAD_CONST 1 ( 0 )					      	  xp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    								  
10 BINARY_SUBSCR					      								    								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 16 LOAD_CONST 0 ( None )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( xp )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 1 ( yp )					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 0 ( xp )					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 STORE_SUBSCR						      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( xp )					      								    								  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 1 ( yp )					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 1 ( yp )					      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
6 60 LOAD_FAST 0 ( xp )					      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( yp )					      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 0 ( xp )					      								    								  
76 LOAD_CONST 1 ( 0 )					      								    								  
78 STORE_SUBSCR						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
Disassembly of <code object reverseStr at 0x7f33e26494b0, fil def reverseStr ( str ) :					    def reverseStr ( str ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  i , j = 0 , n - 1					    	n = 0							  
4 CALL_FUNCTION 1					      	  while i < j :						    	while n < n :						  
6 STORE_FAST 1 ( n )					      	      str [ i ] , str [ j ] = str [ j ] , str [ i ]	    	    n += 1						  
							      	      i += 1						    	    while n < n :					  
3 8 LOAD_CONST 1 ( 0 )					      	      j -= 1						    		n += 1						  
10 LOAD_FAST 1 ( n )					      								    		n += 1						  
12 LOAD_CONST 2 ( 1 )					      								    		n += 1						  
14 BINARY_SUBTRACT					      								    	    n += 1						  
16 ROT_TWO						      								    	return n						  
18 STORE_FAST 2 ( i )					      								    								  
20 STORE_FAST 3 ( j )					      								    								  
							      								    								  
4 22 SETUP_LOOP 54 ( to 78 )				      								    								  
>> 24 LOAD_FAST 2 ( i )					      								    								  
26 LOAD_FAST 3 ( j )					      								    								  
28 COMPARE_OP 0 ( < )					      								    								  
30 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( str )				      								    								  
34 LOAD_FAST 3 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( str )					      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 ROT_TWO						      								    								  
46 LOAD_FAST 0 ( str )					      								    								  
48 LOAD_FAST 2 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
52 LOAD_FAST 0 ( str )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 STORE_SUBSCR						      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 66 LOAD_FAST 3 ( j )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 INPLACE_SUBTRACT					      								    								  
72 STORE_FAST 3 ( j )					      								    								  
74 JUMP_ABSOLUTE 24					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS		      MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			    MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			  MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS
--							      --							    --								  --
Disassembly of <code object minDifferenceAmongMaxMin at 0x7f3 def minDifferenceAmongMaxMin ( arr , N , K ) :		    def minDifferenceAmongMaxMaxMin ( arr ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	res = arr.sort ( )					  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_METHOD 0 ( sort )				      	  res = 2147483647					    	while res < 0 :						  024/eval_scripts/dis_sa-python_sa.valid/MINIMUM_DI
4 CALL_METHOD 0						      	  for i in range ( ( N - K ) + 1 ) :			    	    res = res - 1					  FFERENCE_MAX_MIN_K_SIZE_SUBSETS.py", line 112, in
6 POP_TOP						      	      curSeqDiff = arr [ i + K - 1 ] - arr [ i ]	    	    for i in range ( res , res ) :			  <module>     if f_filled(*parameters_set) == f_gol
							      	      res = min ( res , curSeqDiff )			    		res = res - 1					  d(*parameters_set): TypeError: f_filled() takes 1
3 8 LOAD_CONST 1 ( 2147483647 )				      	  return res						    		res = res - 1					  positional argument but 3 were given
10 STORE_FAST 3 ( res )					      								    		res = res - 1					  
							      								    		res = res - 1					  
4 12 SETUP_LOOP 58 ( to 72 )				      								    		res = res - 1					  
14 LOAD_GLOBAL 1 ( range )				      								    		res = res - 1					  
16 LOAD_FAST 1 ( N )					      								    		res = res - 1					  
18 LOAD_FAST 2 ( K )					      								    		res = res - 1					  
20 BINARY_SUBTRACT					      								    		res = res - 1					  
22 LOAD_CONST 2 ( 1 )					      								    		res = res - 1					  
24 BINARY_ADD						      								    		res = res - 1					  
26 CALL_FUNCTION 1					      								    		res = res + 1					  
28 GET_ITER						      								    		res = res - 1					  
>> 30 FOR_ITER 38 ( to 70 )				      								    		res = res - 1					  
32 STORE_FAST 4 ( i )					      								    		res = res - 1					  
							      								    		res = res					  
5 34 LOAD_FAST 0 ( arr )				      								    		res = res + 1					  
36 LOAD_FAST 4 ( i )					      								    		res = res + 1					  
38 LOAD_FAST 2 ( K )					      								    		res = res + 1					  
40 BINARY_ADD						      								    		res = res + 1					  
42 LOAD_CONST 2 ( 1 )					      								    		res = res + 1					  
44 BINARY_SUBTRACT					      								    		res = res + 1					  
46 BINARY_SUBSCR					      								    		res = res + 1					  
48 LOAD_FAST 0 ( arr )					      								    		res = res + 1					  
50 LOAD_FAST 4 ( i )					      								    		res = res + 1					  
52 BINARY_SUBSCR					      								    		res = res + 1					  
54 BINARY_SUBTRACT					      								    		res = res + 1					  
56 STORE_FAST 5 ( curSeqDiff )				      								    		res = res + 1					  
							      								    		res = res + 1					  
6 58 LOAD_GLOBAL 2 ( min )				      								    		res = res + 1					  
60 LOAD_FAST 3 ( res )					      								    		res = res + 1					  
62 LOAD_FAST 5 ( curSeqDiff )				      								    		res = res + 1					  
64 CALL_FUNCTION 2					      								    		res = res + 1					  
66 STORE_FAST 3 ( res )					      								    		res = res + 1					  
68 JUMP_ABSOLUTE 30					      								    		res [ res ] = res + 1				  
>> 70 POP_BLOCK						      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
7 >> 72 LOAD_FAST 3 ( res )				      								    		res [ res ] = res + 1				  
74 RETURN_VALUE NEW_LINE				      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res + 1				  
							      								    		res [ res ] = res				  
							      								    		res [ res ] = res				  
							      								    		res [ res ] = res				  
							      								    		res [ res ] = res				  
							      								    		res [ res ]					  
							      								    		return res					  
-							      -								    	    -							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
Disassembly of <code object countRect at 0x7f33e26494b0, file def countRect ( n ) :					    def countRect ( n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0						    	ans = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( ans )					      	  for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 	ans = 0							  024/eval_scripts/dis_sa-python_sa.valid/NUMBER_UNI
							      	      height = length					    	for i in range ( n ) :					  QUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES.py", li
3 4 SETUP_LOOP 70 ( to 76 )				      	      while ( height * length <= n ) :			    	    ans [ i ] = 1					  ne 119, in <module>	  if f_filled(*parameters_se
6 LOAD_GLOBAL 0 ( range )				      		  ans += 1					    	    ans [ i ] = 1					  t) == f_gold(*parameters_set):   File "/home/ubunt
8 LOAD_CONST 2 ( 1 )					      		  height += 1					    	    ans [ i ] = 1					  u/TransCoder/models/eval/bt_sa/21z7a0p024/eval_scr
10 LOAD_GLOBAL 1 ( int )				      	  return ans						    	    ans [ i ] = 1					  ipts/dis_sa-python_sa.valid/NUMBER_UNIQUE_RECTANGL
12 LOAD_GLOBAL 2 ( math )				      								    	    ans [ i ] = 1					  ES_FORMED_USING_N_UNIT_SQUARES.py", line 33, in f_
14 LOAD_METHOD 3 ( sqrt )				      								    	    ans [ i ] = 1					  filled     ans [ i ] = 1 TypeError: 'int' object d
16 LOAD_FAST 0 ( n )					      								    	    ans [ i ] = 1					  oes not support item assignment
18 CALL_METHOD 1					      								    	    ans [ i ] = 1					  
20 CALL_FUNCTION 1					      								    	    ans [ i ] = 1					  
22 LOAD_CONST 2 ( 1 )					      								    	    ans [ i ] = 1					  
24 BINARY_ADD						      								    	    ans [ i ] = 1					  
26 CALL_FUNCTION 2					      								    	    ans [ i ] = 1					  
28 GET_ITER						      								    	    ans [ i ] = 1					  
>> 30 FOR_ITER 42 ( to 74 )				      								    	    ans [ i ] = 1					  
32 STORE_FAST 2 ( length )				      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
4 34 LOAD_FAST 2 ( length )				      								    	    ans [ i ] = 1					  
36 STORE_FAST 3 ( height )				      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
5 38 SETUP_LOOP 32 ( to 72 )				      								    	    ans [ i ] = 1					  
>> 40 LOAD_FAST 3 ( height )				      								    	    ans [ i ] = 1					  
42 LOAD_FAST 2 ( length )				      								    	    ans [ i ] = 1					  
44 BINARY_MULTIPLY					      								    	    ans [ i ] = 1					  
46 LOAD_FAST 0 ( n )					      								    	    ans [ i ] = 1					  
48 COMPARE_OP 1 ( <= )					      								    	    ans [ i ] = 1					  
50 POP_JUMP_IF_FALSE 70					      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
6 52 LOAD_FAST 1 ( ans )				      								    	    ans [ i ] = 1					  
54 LOAD_CONST 2 ( 1 )					      								    	    ans [ i ] = 1					  
56 INPLACE_ADD						      								    	    ans [ i ] = 1					  
58 STORE_FAST 1 ( ans )					      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
7 60 LOAD_FAST 3 ( height )				      								    	    ans [ i ] = 1					  
62 LOAD_CONST 2 ( 1 )					      								    	    ans [ i ] = 1					  
64 INPLACE_ADD						      								    	    ans [ i ] = 1					  
66 STORE_FAST 3 ( height )				      								    	    ans [ i ] = 1					  
68 JUMP_ABSOLUTE 40					      								    	    ans [ i ] = 1					  
>> 70 POP_BLOCK						      								    	    ans [ i ] = 1					  
>> 72 JUMP_ABSOLUTE 30					      								    	    ans [ i ] = 1					  
>> 74 POP_BLOCK						      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
8 >> 76 LOAD_FAST 1 ( ans )				      								    	    ans [ i ] = 1					  
78 RETURN_VALUE NEW_LINE				      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
							      								    	    ans [ i ] = 1					  
-							      -								    	    -							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
Disassembly of <code object isLucky at 0x7f33e2644930, file " def isLucky ( n ) :					    def isLucky ( n ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  next_position = n					    	sig = n							  
2 STORE_FAST 1 ( next_position )			      	  if isLucky.counter > n :				    	if isLucky.counter ( sig ) > 0 :			  
							      	      return 1						    	    return 1						  
3 4 LOAD_GLOBAL 0 ( isLucky )				      	  if n % isLucky.counter == 0 :				    	if ( not isLucky.counter ) and ( not isLucky.counter ( si 
6 LOAD_ATTR 1 ( counter )				      	      return 0						    	    return 1						  
8 LOAD_FAST 0 ( n )					      	  next_position = next_position - next_position / isLucky.c 	return 0						  
10 COMPARE_OP 4 ( > )					      	  isLucky.counter = isLucky.counter + 1			    								  
12 POP_JUMP_IF_FALSE 18					      	  return isLucky ( next_position )			    								  
							      								    								  
4 14 LOAD_CONST 1 ( 1 )					      								    								  
16 RETURN_VALUE						      								    								  
							      								    								  
5 >> 18 LOAD_FAST 0 ( n )				      								    								  
20 LOAD_GLOBAL 0 ( isLucky )				      								    								  
22 LOAD_ATTR 1 ( counter )				      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 32 LOAD_CONST 2 ( 0 )					      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
7 >> 36 LOAD_FAST 1 ( next_position )			      								    								  
38 LOAD_FAST 1 ( next_position )			      								    								  
40 LOAD_GLOBAL 0 ( isLucky )				      								    								  
42 LOAD_ATTR 1 ( counter )				      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 1 ( next_position )			      								    								  
							      								    								  
8 50 LOAD_GLOBAL 0 ( isLucky )				      								    								  
52 LOAD_ATTR 1 ( counter )				      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_GLOBAL 0 ( isLucky )				      								    								  
60 STORE_ATTR 1 ( counter )				      								    								  
							      								    								  
9 62 LOAD_GLOBAL 0 ( isLucky )				      								    								  
64 LOAD_FAST 1 ( next_position )			      								    								  
66 CALL_FUNCTION 1					      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING_1			      GENERATE_ROTATIONS_GIVEN_STRING_1				    GENERATE_ROTATIONS_GIVEN_STRING_1				  GENERATE_ROTATIONS_GIVEN_STRING_1
--							      --							    --								  --
Disassembly of <code object printRotatedString at 0x7f33e2644 def printRotatedString ( string ) :			    def printRotatedString ( string ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( string )					    	n = len ( string )					  
2 LOAD_FAST 0 ( string )				      	  temp = string + string				    	while n < n :						  
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	    temp = string [ n + 1 : ]				  
6 STORE_FAST 1 ( n )					      	      for j in range ( n ) :				    	    for i in range ( n ) :				  
							      		  print ( temp [ i + j ] , end = "" )		    		temp = temp [ i + 1 : ]				  
3 8 LOAD_FAST 0 ( string )				      	      print ( )						    		temp = temp [ i + 1 : ]				  
10 LOAD_FAST 0 ( string )				      								    		temp += temp					  
12 BINARY_ADD						      								    	return temp						  
14 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
4 16 SETUP_LOOP 60 ( to 78 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 48 ( to 76 )				      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 SETUP_LOOP 36 ( to 68 )				      								    								  
32 LOAD_GLOBAL 1 ( range )				      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 24 ( to 66 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 2 ( print )				      								    								  
46 LOAD_FAST 2 ( temp )					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 1 ( '' )					      								    								  
58 LOAD_CONST 2 ( ( 'end' , ) )				      								    								  
60 CALL_FUNCTION_KW 2					      								    								  
62 POP_TOP						      								    								  
64 JUMP_ABSOLUTE 40					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 2 ( print )				      								    								  
70 CALL_FUNCTION 0					      								    								  
72 POP_TOP						      								    								  
74 JUMP_ABSOLUTE 26					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7f33e2649a50,  def printDistinct ( arr , n ) :				    def printDistinct ( arr , n , n , dtype = None ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  s = dict ( ) ;					    	s = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
4 STORE_FAST 2 ( s )					      	      if ( arr [ i ] not in s.keys ( ) ) :		    	    if n not in arr [ i ] :				  
							      		  s [ arr [ i ] ] = arr [ i ] ;			    		s [ i ] = arr [ i ]				  
3 6 SETUP_LOOP 64 ( to 72 )				      		  print ( arr [ i ] , end = " " ) ;		    	    s [ i ] = arr [ i ]					  
8 LOAD_GLOBAL 1 ( range )				      								    	    s [ i ] = arr [ i ]					  
10 LOAD_FAST 1 ( n )					      								    	s [ i ] = arr [ i ]					  
12 CALL_FUNCTION 1					      								    	s [ i ] = arr [ i ]					  
14 GET_ITER						      								    	s [ i ] = arr [ i ]					  
>> 16 FOR_ITER 52 ( to 70 )				      								    	s [ i ] = arr [ i ]					  
18 STORE_FAST 3 ( i )					      								    	s [ i ] = arr [ i ]					  
							      								    	s [ i ] = arr [ i ]					  
4 20 LOAD_FAST 0 ( arr )				      								    	s [ i ] = arr [ i ]					  
22 LOAD_FAST 3 ( i )					      								    	s [ i ] = arr [ i ]					  
24 BINARY_SUBSCR					      								    	s [ i ] = s [ i ]					  
26 LOAD_FAST 2 ( s )					      								    	s [ i ] = s [ i ]					  
28 LOAD_METHOD 2 ( keys )				      								    	s [ i ] = s [ i ]					  
30 CALL_METHOD 0					      								    	s [ i ] = s [ i ]					  
32 COMPARE_OP 7 ( not in )				      								    	s [ i ] = s [ i ]					  
34 POP_JUMP_IF_FALSE 16					      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
5 36 LOAD_FAST 0 ( arr )				      								    	s [ i ] = s [ i ]					  
38 LOAD_FAST 3 ( i )					      								    	s [ i ] = s [ i ]					  
40 BINARY_SUBSCR					      								    	s [ i ] = s [ i ]					  
42 LOAD_FAST 2 ( s )					      								    	s [ i ] = s [ i ]					  
44 LOAD_FAST 0 ( arr )					      								    	s [ i ] = s [ i ]					  
46 LOAD_FAST 3 ( i )					      								    	s [ i ] = s [ i ]					  
48 BINARY_SUBSCR					      								    	s [ i ] = s [ i ]					  
50 STORE_SUBSCR						      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
6 52 LOAD_GLOBAL 3 ( print )				      								    	s [ i ] = s [ i ]					  
54 LOAD_FAST 0 ( arr )					      								    	s [ i ] = s [ i ]					  
56 LOAD_FAST 3 ( i )					      								    	s [ i ] = s [ i ]					  
58 BINARY_SUBSCR					      								    	s [ i ] = s [ i ]					  
60 LOAD_CONST 1 ( ' ' )					      								    	s [ i ] = s [ i ]					  
62 LOAD_CONST 2 ( ( 'end' , ) )				      								    	s [ i ] = s [ i ]					  
64 CALL_FUNCTION_KW 2					      								    	s [ i ] = s [ i ]					  
66 POP_TOP						      								    	s [ i ] = s [ i ]					  
68 JUMP_ABSOLUTE 16					      								    	s [ i ] = s [ i ]					  
>> 70 POP_BLOCK						      								    	s [ i ] = s [ i ]					  
>> 72 LOAD_CONST 0 ( None )				      								    	s [ i ] = s [ i ]					  
74 RETURN_VALUE NEW_LINE				      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
							      								    	s [ i ] = s [ i ]					  
-							      -								    	s [ i-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
Disassembly of <code object ispalindrome at 0x7f33e2644f60, f def ispalindrome ( s ) :					    def ispalindrome ( s ) :					  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s )						    	l = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  i = 0							    	while l < l :						  
4 CALL_FUNCTION 1					      	  j = l - 1						    	    l = l [ l ]						  
6 STORE_FAST 1 ( l )					      	  while i <= j :					    	    while l < l :					  
							      	      if ( s [ i ] != s [ j ] ) :			    		l += 1						  
3 8 LOAD_CONST 1 ( 0 )					      		  return False					    		l += 1						  
10 STORE_FAST 2 ( i )					      	      i += 1						    	    l += 1						  
							      	      j -= 1						    	return l						  
4 12 LOAD_FAST 1 ( l )					      	  return True						    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBTRACT					      								    								  
18 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 20 SETUP_LOOP 48 ( to 70 )				      								    								  
>> 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_FAST 3 ( j )					      								    								  
26 COMPARE_OP 1 ( <= )					      								    								  
28 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( s )					      								    								  
38 LOAD_FAST 3 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 COMPARE_OP 3 ( != )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_CONST 3 ( False )				      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 2 ( i )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 INPLACE_ADD						      								    								  
56 STORE_FAST 2 ( i )					      								    								  
							      								    								  
9 58 LOAD_FAST 3 ( j )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 INPLACE_SUBTRACT					      								    								  
64 STORE_FAST 3 ( j )					      								    								  
66 JUMP_ABSOLUTE 22					      								    								  
>> 68 POP_BLOCK						      								    								  
							      								    								  
10 >> 70 LOAD_CONST 4 ( True )				      								    								  
72 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
Disassembly of <code object getMissingNo at 0x7f33e2649150, f def getMissingNo ( a , n ) :				    def getMissingNo ( a , 0x733333333333333333333333333333333333 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( a )					      	  x1 = a [ 0 ]						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 0 )					      	  x2 = 1						    								  alid/FIND_THE_MISSING_NUMBER_2.py", line 27	  de
4 BINARY_SUBSCR						      	  for i in range ( 1 , n ) :				    								  f f_filled ( a , 0x7333333333333333333333333333333
6 STORE_FAST 2 ( x1 )					      	      x1 = x1 ^ a [ i ]					    								  33333333333333333333333333333333333333333333333333
							      	  for i in range ( 2 , n + 2 ) :			    								  33333333333333333333333333333333333333333333333333
3 8 LOAD_CONST 2 ( 1 )					      	      x2 = x2 ^ i					    								  33333333333333333333333333333333333333333333333333
10 STORE_FAST 3 ( x2 )					      	  return x1 ^ x2					    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
4 12 SETUP_LOOP 30 ( to 44 )				      								    								  33333333333333333333333333333333333333333333333333
14 LOAD_GLOBAL 0 ( range )				      								    								  33333333333333333333333333333333333333333333333333
16 LOAD_CONST 2 ( 1 )					      								    								  33333333333333333333333333333333333333333333333333
18 LOAD_FAST 1 ( n )					      								    								  33333333333333333333333333333333333333333333333333
20 CALL_FUNCTION 2					      								    								  33333333333333333333333333333333333333333333333333
22 GET_ITER						      								    								  33333333333333333333333333333333333333333333333333
>> 24 FOR_ITER 16 ( to 42 )				      								    								  33333333333333333333333333333333333333333333333333
26 STORE_FAST 4 ( i )					      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
5 28 LOAD_FAST 2 ( x1 )					      								    								  33333333333333333333333333333333333333333333333333
30 LOAD_FAST 0 ( a )					      								    								  33333333333333333333333333333333333333333333333333
32 LOAD_FAST 4 ( i )					      								    								  33333333333333333333333333333333333333333333333333
34 BINARY_SUBSCR					      								    								  33333333333333333333333333333333333333333333333333
36 BINARY_XOR						      								    								  33333333333333333333333333333333333333333333333333
38 STORE_FAST 2 ( x1 )					      								    								  333333333333333333333333
40 JUMP_ABSOLUTE 24					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
6 >> 44 SETUP_LOOP 30 ( to 76 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 3 ( 2 )					      								    								  
50 LOAD_FAST 1 ( n )					      								    								  
52 LOAD_CONST 3 ( 2 )					      								    								  
54 BINARY_ADD						      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 12 ( to 74 )				      								    								  
62 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 64 LOAD_FAST 3 ( x2 )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_XOR						      								    								  
70 STORE_FAST 3 ( x2 )					      								    								  
72 JUMP_ABSOLUTE 60					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								      ^ SyntaxError: invalid syntax
8 >> 76 LOAD_FAST 2 ( x1 )				      								    								  
78 LOAD_FAST 3 ( x2 )					      								    								  
80 BINARY_XOR						      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
Disassembly of <code object recursiveReverse at 0x7f33e2653ed def recursiveReverse ( str , i = 0 ) :			    def recurcedDbms Reverse ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  
2 LOAD_FAST 0 ( str )					      	  if i == n // 2 :					    	if n == 2 :						  
4 CALL_FUNCTION 1					      	      return						    	    return None						  
6 STORE_FAST 2 ( n )					      	  str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] , str [ 	if n == 2 :						  
							      	  recursiveReverse ( str , i + 1 )			    	    return None						  
3 8 LOAD_FAST 1 ( i )					      								    	if n == 3 :						  
10 LOAD_FAST 2 ( n )					      								    	    return None						  
12 LOAD_CONST 1 ( 2 )					      								    	if n == 4 :						  
14 BINARY_FLOOR_DIVIDE					      								    	    return None						  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
4 20 LOAD_CONST 0 ( None )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
5 >> 24 LOAD_FAST 0 ( str )				      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_FAST 0 ( str )					      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 ROT_TWO						      								    								  
46 LOAD_FAST 0 ( str )					      								    								  
48 LOAD_FAST 1 ( i )					      								    								  
50 STORE_SUBSCR						      								    								  
52 LOAD_FAST 0 ( str )					      								    								  
54 LOAD_FAST 2 ( n )					      								    								  
56 LOAD_FAST 1 ( i )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 STORE_SUBSCR						      								    								  
							      								    								  
6 66 LOAD_GLOBAL 1 ( recursiveReverse )			      								    								  
68 LOAD_FAST 0 ( str )					      								    								  
70 LOAD_FAST 1 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 CALL_FUNCTION 2					      								    								  
78 POP_TOP						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I
--							      --							    --								  --
Disassembly of <code object squareRoot at 0x7f33e2644f60, fil def squareRoot ( n , p ) :				    def squareRoot ( n , p , p , p ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  n = n % p						    	n = p // p						  
2 LOAD_FAST 1 ( p )					      	  for x in range ( 2 , p ) :				    	for x in range ( p // 2 , p ) :				  
4 BINARY_MODULO						      	      if ( ( x * x ) % p == n ) :			    	    if p % p == p :					  
6 STORE_FAST 0 ( n )					      		  print ( "Square root is " , x )		    		n += 1						  
							      		  return					    return n							  
3 8 SETUP_LOOP 48 ( to 58 )				      	  print ( "Square root doesn't exist" )			    								  
10 LOAD_GLOBAL 0 ( range )				      								    								  
12 LOAD_CONST 1 ( 2 )					      								    								  
14 LOAD_FAST 1 ( p )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 34 ( to 56 )				      								    								  
22 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( x )					      								    								  
26 LOAD_FAST 2 ( x )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 LOAD_FAST 1 ( p )					      								    								  
32 BINARY_MODULO					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
5 40 LOAD_GLOBAL 1 ( print )				      								    								  
42 LOAD_CONST 2 ( 'Square root is ' )			      								    								  
44 LOAD_FAST 2 ( x )					      								    								  
46 CALL_FUNCTION 2					      								    								  
48 POP_TOP						      								    								  
							      								    								  
6 50 LOAD_CONST 0 ( None )				      								    								  
52 RETURN_VALUE						      								    								  
54 JUMP_ABSOLUTE 20					      								    								  
>> 56 POP_BLOCK						      								    								  
							      								    								  
7 >> 58 LOAD_GLOBAL 1 ( print )				      								    								  
60 LOAD_CONST 3 ( "Square root doesn't exist" )		      								    								  
62 CALL_FUNCTION 1					      								    								  
64 POP_TOP						      								    								  
66 LOAD_CONST 0 ( None )				      								    								  
68 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
Disassembly of <code object findDigits at 0x7f33e2644f60, fil def findDigits ( n ) :					    def findDigits ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 0 ) :					    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 1 ;					    	    return 1						  
							      	  x = ( ( n * math.log10 ( n / math.e ) + math.log10 ( 2 *  	if n <= 1 :						  
3 8 LOAD_CONST 1 ( 0 )					      	  return math.floor ( x ) + 1 ;				    	    return 0						  
10 RETURN_VALUE						      								    	return n - 1						  
							      								    								  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 COMPARE_OP 1 ( <= )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_GLOBAL 0 ( math )				      								    								  
28 LOAD_METHOD 1 ( log10 )				      								    								  
30 LOAD_FAST 0 ( n )					      								    								  
32 LOAD_GLOBAL 0 ( math )				      								    								  
34 LOAD_ATTR 2 ( e )					      								    								  
36 BINARY_TRUE_DIVIDE					      								    								  
38 CALL_METHOD 1					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_GLOBAL 0 ( math )				      								    								  
44 LOAD_METHOD 1 ( log10 )				      								    								  
46 LOAD_CONST 3 ( 2 )					      								    								  
48 LOAD_GLOBAL 0 ( math )				      								    								  
50 LOAD_ATTR 3 ( pi )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 CALL_METHOD 1					      								    								  
60 LOAD_CONST 4 ( 2.0 )					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 1 ( x )					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 0 ( math )				      								    								  
70 LOAD_METHOD 4 ( floor )				      								    								  
72 LOAD_FAST 1 ( x )					      								    								  
74 CALL_METHOD 1					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7f33e2649150, file "< def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	sum = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 2 ( sum )					      	  arr.sort ( )						    	sum = arr.sort ( )					  024/eval_scripts/dis_sa-python_sa.valid/MAXIMIZE_S
							      	  for i in range ( 0 , int ( n / 2 ) ) :		    	for i in range ( 0 , n + 1 ) :				  UM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY.py", lin
3 4 LOAD_FAST 0 ( arr )					      	      sum -= ( 2 * arr [ i ] )				    	    sum += 1						  e 49, in <module>	if f_filled(*parameters_set)
6 LOAD_METHOD 0 ( sort )				      	      sum += ( 2 * arr [ n - i - 1 ] )			    	return sum						   == f_gold(*parameters_set):	 File "/home/ubuntu/
8 CALL_METHOD 0						      	  return sum						    								  TransCoder/models/eval/bt_sa/21z7a0p024/eval_scrip
10 POP_TOP						      								    								  ts/dis_sa-python_sa.valid/MAXIMIZE_SUM_CONSECUTIVE
							      								    								  _DIFFERENCES_CIRCULAR_ARRAY.py", line 30, in f_fil
4 12 SETUP_LOOP 66 ( to 80 )				      								    								  led	  sum += 1 TypeError: unsupported operand ty
14 LOAD_GLOBAL 1 ( range )				      								    								  pe(s) for +=: 'NoneType' and 'int'
16 LOAD_CONST 1 ( 0 )					      								    								  
18 LOAD_GLOBAL 2 ( int )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_TRUE_DIVIDE					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 44 ( to 78 )				      								    								  
34 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( sum )				      								    								  
38 LOAD_CONST 2 ( 2 )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 INPLACE_SUBTRACT					      								    								  
50 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
6 52 LOAD_FAST 2 ( sum )				      								    								  
54 LOAD_CONST 2 ( 2 )					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 2 ( sum )					      								    								  
76 JUMP_ABSOLUTE 32					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
7 >> 80 LOAD_FAST 2 ( sum )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
Disassembly of <code object findDigits at 0x7f33e26494b0, fil def findDigits ( n ) :					    def findDigits ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 0 ) :					    	if n < 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0 ;					    	    return 0						  
4 COMPARE_OP 0 ( < )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 1 ;					    	    return 0						  
							      	  digits = 0 ;						    	if n <= 0 :						  
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( 2 , n + 1 ) :			    	    return 1						  
10 RETURN_VALUE						      	      digits += math.log10 ( i ) ;			    	else :							  
							      	  return math.floor ( digits ) + 1 ;			    	    return 0						  
4 >> 12 LOAD_FAST 0 ( n )				      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 COMPARE_OP 1 ( <= )					      								    								  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
6 >> 24 LOAD_CONST 1 ( 0 )				      								    								  
26 STORE_FAST 1 ( digits )				      								    								  
							      								    								  
7 28 SETUP_LOOP 36 ( to 66 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 18 ( to 64 )				      								    								  
46 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 48 LOAD_FAST 1 ( digits )				      								    								  
50 LOAD_GLOBAL 1 ( math )				      								    								  
52 LOAD_METHOD 2 ( log10 )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 CALL_METHOD 1					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 1 ( digits )				      								    								  
62 JUMP_ABSOLUTE 44					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
9 >> 66 LOAD_GLOBAL 1 ( math )				      								    								  
68 LOAD_METHOD 3 ( floor )				      								    								  
70 LOAD_FAST 1 ( digits )				      								    								  
72 CALL_METHOD 1					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7f33e2653ed0, file " def isPrime ( p ) :					    def isPrime ( p , * args , ** kwargs ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 2 )					      	  checkNumber = 2 ** p - 1				    	if ( p % 2 == p ) :					  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( p )					      	  nextval = 4 % checkNumber				    	    return 4						  024/eval_scripts/dis_sa-python_sa.valid/PRIMALITY_
4 BINARY_POWER						      	  for i in range ( 1 , p - 1 ) :			    	nextval = p [ 0 ]					  TEST_SET_5USING_LUCAS_LEHMER_SERIES.py", line 119,
6 LOAD_CONST 2 ( 1 )					      	      nextval = ( nextval * nextval - 2 ) % checkNumber	    	nextval = p [ 1 ]					   in <module>	   if f_filled(*parameters_set) == f
8 BINARY_SUBTRACT					      	  if ( nextval == 0 ) : return True			    	nextval = p [ 1 ]					  _gold(*parameters_set):   File "/home/ubuntu/Trans
10 STORE_FAST 1 ( checkNumber )				      	  else : return False					    	nextval = p [ 2 ]					  Coder/models/eval/bt_sa/21z7a0p024/eval_scripts/di
							      								    	nextval = p [ 1 ]					  s_sa-python_sa.valid/PRIMALITY_TEST_SET_5USING_LUC
3 12 LOAD_CONST 3 ( 4 )					      								    	nextval = p [ 1 ]					  AS_LEHMER_SERIES.py", line 29, in f_filled	 nex
14 LOAD_FAST 1 ( checkNumber )				      								    	nextval = p [ 2 ]					  tval = p [ 0 ] TypeError: 'int' object is not subs
16 BINARY_MODULO					      								    	nextval = nextval					  criptable
18 STORE_FAST 2 ( nextval )				      								    	nextval = nextval					  
							      								    	nextval = nextval					  
4 20 SETUP_LOOP 38 ( to 60 )				      								    	nextval = nextval					  
22 LOAD_GLOBAL 0 ( range )				      								    	nextval = nextval					  
24 LOAD_CONST 2 ( 1 )					      								    	nextval = nextval					  
26 LOAD_FAST 0 ( p )					      								    	nextval = nextval					  
28 LOAD_CONST 2 ( 1 )					      								    	nextval = nextval					  
30 BINARY_SUBTRACT					      								    	nextval = nextval					  
32 CALL_FUNCTION 2					      								    	nextval = nextval					  
34 GET_ITER						      								    	nextval = nextval					  
>> 36 FOR_ITER 20 ( to 58 )				      								    	nextval = nextval					  
38 STORE_FAST 3 ( i )					      								    	nextval = nextval					  
							      								    	nextval = nextval					  
5 40 LOAD_FAST 2 ( nextval )				      								    	nextval = nextval					  
42 LOAD_FAST 2 ( nextval )				      								    	nextval = nextval					  
44 BINARY_MULTIPLY					      								    	nextval = nextval					  
46 LOAD_CONST 1 ( 2 )					      								    	nextval = nextval					  
48 BINARY_SUBTRACT					      								    	nextval = nextval					  
50 LOAD_FAST 1 ( checkNumber )				      								    	nextval = nextval					  
52 BINARY_MODULO					      								    	nextval = nextval					  
54 STORE_FAST 2 ( nextval )				      								    	nextval = nextval					  
56 JUMP_ABSOLUTE 36					      								    	nextval = nextval					  
>> 58 POP_BLOCK						      								    	nextval = nextval					  
							      								    	nextval = nextval					  
6 >> 60 LOAD_FAST 2 ( nextval )				      								    	nextval = nextval					  
62 LOAD_CONST 4 ( 0 )					      								    	nextval = nextval					  
64 COMPARE_OP 2 ( == )					      								    	nextval = nextval					  
66 POP_JUMP_IF_FALSE 72					      								    	nextval = nextval					  
68 LOAD_CONST 5 ( True )				      								    	nextval = nextval					  
70 RETURN_VALUE						      								    	nextval = nextval					  
							      								    	nextval = nextval					  
7 >> 72 LOAD_CONST 6 ( False )				      								    	nextval = nextval					  
74 RETURN_VALUE						      								    	nextval = nextval					  
76 LOAD_CONST 0 ( None )				      								    	nextval = nextval					  
78 RETURN_VALUE NEW_LINE				      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	nextval = nextval					  
							      								    	return nextval						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW
--							      --							    --								  --
Disassembly of <code object minCost at 0x7f33e26494b0, file " def minCost ( coin , n , k ) :				    def minCost ( coin , n , n , maxmaxmaxmaxmaxmaxmaxmaxmaxmaxma error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( coin )				      	  coin.sort ( )						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_METHOD 0 ( sort )				      	  coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) ) ;	    								  alid/MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_E
4 CALL_METHOD 0						      	  ans = 0						    								  XTRA_COINS_ALLOWED_WITH_EVERY_COIN.py", line 30
6 POP_TOP						      	  for i in range ( coins_needed - 1 + 1 ) :		    								    if __name__ == '__main__':	    ^ SyntaxError: i
							      	      ans += coin [ i ]					    								  nvalid syntax
3 8 LOAD_GLOBAL 1 ( math )				      	  return ans						    								  
10 LOAD_METHOD 2 ( ceil )				      								    								  
12 LOAD_CONST 1 ( 1.0 )					      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 LOAD_FAST 2 ( k )					      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 BINARY_FLOOR_DIVIDE					      								    								  
26 CALL_METHOD 1					      								    								  
28 STORE_FAST 3 ( coins_needed )			      								    								  
							      								    								  
4 30 LOAD_CONST 3 ( 0 )					      								    								  
32 STORE_FAST 4 ( ans )					      								    								  
							      								    								  
5 34 SETUP_LOOP 36 ( to 72 )				      								    								  
36 LOAD_GLOBAL 3 ( range )				      								    								  
38 LOAD_FAST 3 ( coins_needed )				      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 16 ( to 70 )				      								    								  
54 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 56 LOAD_FAST 4 ( ans )				      								    								  
58 LOAD_FAST 0 ( coin )					      								    								  
60 LOAD_FAST 5 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 4 ( ans )					      								    								  
68 JUMP_ABSOLUTE 52					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_FAST 4 ( ans )				      								    								  
74 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_ARRAY_ADJACENT_DIFFER_K			      SEARCHING_ARRAY_ADJACENT_DIFFER_K				    SEARCHING_ARRAY_ADJACENT_DIFFER_K				  SEARCHING_ARRAY_ADJACENT_DIFFER_K
--							      --							    --								  --
Disassembly of <code object search at 0x7f33e2644f60, file "< def search ( arr , n , x , k ) :				    def search ( arr , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 4 ( i )					      	  while ( i < n ) :					    	while n < n :						  alid/SEARCHING_ARRAY_ADJACENT_DIFFER_K.py", line 2
							      	      if ( arr [ i ] == x ) :				    	    if n < n :						  7	def f_filled ( arr , n , n ) :	   ^ SyntaxE
3 4 SETUP_LOOP 62 ( to 68 )				      		  return i					    		i = arr [ n ]					  rror: duplicate argument 'n' in function definitio
>> 6 LOAD_FAST 4 ( i )					      	      i = i + max ( 1 , int ( abs ( arr [ i ] - x ) / k ) ) 		i += 1						  n
8 LOAD_FAST 1 ( n )					      	  print ( "number is not present!" )			    	    i += 1						  
10 COMPARE_OP 0 ( < )					      	  return - 1						    	return i						  
12 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
4 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_FAST 4 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_FAST 2 ( x )					      								    								  
22 COMPARE_OP 2 ( == )					      								    								  
24 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 26 LOAD_FAST 4 ( i )					      								    								  
28 RETURN_VALUE						      								    								  
							      								    								  
6 >> 30 LOAD_FAST 4 ( i )				      								    								  
32 LOAD_GLOBAL 0 ( max )				      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 LOAD_GLOBAL 1 ( int )				      								    								  
38 LOAD_GLOBAL 2 ( abs )				      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( x )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 LOAD_FAST 3 ( k )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 4 ( i )					      								    								  
64 JUMP_ABSOLUTE 6					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
7 >> 68 LOAD_GLOBAL 3 ( print )				      								    								  
70 LOAD_CONST 3 ( 'number is not present!' )		      								    								  
72 CALL_FUNCTION 1					      								    								  
74 POP_TOP						      								    								  
							      								    								  
8 76 LOAD_CONST 4 ( - 1 )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	      FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	    FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	  FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE
--							      --							    --								  --
Disassembly of <code object minRadius at 0x7f33e2644930, file def minRadius ( k , x , y , n ) :				    def minRadius ( x , y , n , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dis = [ 0 ] * n					    	dis = [ 0 ] * n						  
2 BUILD_LIST 1						      	  for i in range ( 0 , n ) :				    	for i in range ( n , n ) :				  
4 LOAD_FAST 3 ( n )					      	      dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]	    	    if ( n [ i ] * n [ i ] ) ) :			  
6 BINARY_MULTIPLY					      	  dis.sort ( )						    		dis [ i ] = ( n [ i ] * n [ i ] )		  
8 STORE_FAST 4 ( dis )					      	  return dis [ k - 1 ]					    return dis							  
							      								    								  
3 10 SETUP_LOOP 54 ( to 66 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_CONST 1 ( 0 )					      								    								  
16 LOAD_FAST 3 ( n )					      								    								  
18 CALL_FUNCTION 2					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 40 ( to 64 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 1 ( x )					      								    								  
28 LOAD_FAST 5 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( x )					      								    								  
34 LOAD_FAST 5 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 BINARY_MULTIPLY					      								    								  
40 LOAD_FAST 2 ( y )					      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( y )					      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 4 ( dis )					      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 22					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
5 >> 66 LOAD_FAST 4 ( dis )				      								    								  
68 LOAD_METHOD 1 ( sort )				      								    								  
70 CALL_METHOD 0					      								    								  
72 POP_TOP						      								    								  
							      								    								  
6 74 LOAD_FAST 4 ( dis )				      								    								  
76 LOAD_FAST 0 ( k )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 BINARY_SUBSCR					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
Disassembly of <code object countSubstringWithEqualEnds at 0x def countSubstringWithEqualEnds ( s ) :			    def countSubstringWithEqualds ( s ) :			  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  n = len ( s ) ;					    	while len ( s ) < len ( s ) :				  
							      	  for i in range ( n ) :				    	    for i in range ( len ( s ) ) :			  
3 4 LOAD_GLOBAL 0 ( len )				      	      for j in range ( i , n ) :			    		result [ i ] = s [ i ]				  
6 LOAD_FAST 0 ( s )					      		  if ( s [ i ] == s [ j ] ) :			    	return result						  
8 CALL_FUNCTION 1					      		      result = result + 1			    								  
10 STORE_FAST 2 ( n )					      	  return result						    								  
							      								    								  
4 12 SETUP_LOOP 60 ( to 74 )				      								    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_FAST 2 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 48 ( to 72 )				      								    								  
24 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 26 SETUP_LOOP 42 ( to 70 )				      								    								  
28 LOAD_GLOBAL 1 ( range )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 LOAD_FAST 2 ( n )					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 28 ( to 68 )				      								    								  
40 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( s )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 0 ( s )					      								    								  
50 LOAD_FAST 4 ( j )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 38					      								    								  
							      								    								  
7 58 LOAD_FAST 1 ( result )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 1 ( result )				      								    								  
66 JUMP_ABSOLUTE 38					      								    								  
>> 68 POP_BLOCK						      								    								  
>> 70 JUMP_ABSOLUTE 22					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
8 >> 74 LOAD_FAST 1 ( result )				      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION	  SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION
--							      --							    --								  --
Disassembly of <code object printSorted at 0x7f33e2644f60, fi def printSorted ( a , b , c ) :				    def printSorted ( a , b , c , c ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  get_max = max ( a , max ( b , c ) )			    	if max ( a , b ) < 0 :					  
2 LOAD_FAST 0 ( a )					      	  get_min = - max ( - a , max ( - b , - c ) )		    	    return max ( a , b , c )				  
4 LOAD_GLOBAL 0 ( max )					      	  get_mid = ( a + b + c ) - ( get_max + get_min )	    	if len ( c ) > 0 :					  
6 LOAD_FAST 1 ( b )					      	  print ( get_min , " " , get_mid , " " , get_max )	    	    return 0						  
8 LOAD_FAST 2 ( c )					      								    	if c [ 0 ] == c [ 1 ] :					  
10 CALL_FUNCTION 2					      								    	    return 0						  
12 CALL_FUNCTION 2					      								    	else :							  
14 STORE_FAST 3 ( get_max )				      								    	    return 0						  
							      								    								  
3 16 LOAD_GLOBAL 0 ( max )				      								    								  
18 LOAD_FAST 0 ( a )					      								    								  
20 UNARY_NEGATIVE					      								    								  
22 LOAD_GLOBAL 0 ( max )				      								    								  
24 LOAD_FAST 1 ( b )					      								    								  
26 UNARY_NEGATIVE					      								    								  
28 LOAD_FAST 2 ( c )					      								    								  
30 UNARY_NEGATIVE					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 CALL_FUNCTION 2					      								    								  
36 UNARY_NEGATIVE					      								    								  
38 STORE_FAST 4 ( get_min )				      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 BINARY_ADD						      								    								  
46 LOAD_FAST 2 ( c )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 3 ( get_max )				      								    								  
52 LOAD_FAST 4 ( get_min )				      								    								  
54 BINARY_ADD						      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_FAST 5 ( get_mid )				      								    								  
							      								    								  
5 60 LOAD_GLOBAL 1 ( print )				      								    								  
62 LOAD_FAST 4 ( get_min )				      								    								  
64 LOAD_CONST 1 ( ' ' )					      								    								  
66 LOAD_FAST 5 ( get_mid )				      								    								  
68 LOAD_CONST 1 ( ' ' )					      								    								  
70 LOAD_FAST 3 ( get_max )				      								    								  
72 CALL_FUNCTION 5					      								    								  
74 POP_TOP						      								    								  
76 LOAD_CONST 0 ( None )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
Disassembly of <code object seiresSum at 0x7f33e2653ed0, file def seiresSum ( n , a ) :					    def seiresSum ( n , x , y , l ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , 2 * n ) :			    	for i in range ( 0 , n * l ) :				  
							      	      if ( i % 2 == 0 ) :				    	    if l == l :						  
3 4 SETUP_LOOP 76 ( to 82 )				      		  res += a [ i ] * a [ i ]			    		res [ i ] = l [ i ]				  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	return res						  
8 LOAD_CONST 1 ( 0 )					      		  res -= a [ i ] * a [ i ]			    								  
10 LOAD_CONST 2 ( 2 )					      	  return res						    								  
12 LOAD_FAST 0 ( n )					      								    								  
14 BINARY_MULTIPLY					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 58 ( to 80 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 36 LOAD_FAST 2 ( res )				      								    								  
38 LOAD_FAST 1 ( a )					      								    								  
40 LOAD_FAST 3 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 1 ( a )					      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 2 ( res )					      								    								  
56 JUMP_ABSOLUTE 20					      								    								  
							      								    								  
7 >> 58 LOAD_FAST 2 ( res )				      								    								  
60 LOAD_FAST 1 ( a )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( a )					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 INPLACE_SUBTRACT					      								    								  
76 STORE_FAST 2 ( res )					      								    								  
78 JUMP_ABSOLUTE 20					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
8 >> 82 LOAD_FAST 2 ( res )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
Disassembly of <code object checkMarkov at 0x7f33e2653ed0, fi def checkMarkov ( m ) :					    def checkMarkov ( m , l , l , l , l , l , l , l , l , l , l , error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 82 ( to 84 )				      	  for i in range ( 0 , len ( m ) ) :			    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( range )				      	      sm = 0						    								  alid/MARKOV_MATRIX.py", line 29     if __name__ ==
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , len ( m [ i ] ) ) :		    								   '__main__':	    ^ SyntaxError: invalid syntax
6 LOAD_GLOBAL 1 ( len )					      		  sm = sm + m [ i ] [ j ]			    								  
8 LOAD_FAST 0 ( m )					      	      if ( sm != 1 ) :					    								  
10 CALL_FUNCTION 1					      		  return False					    								  
12 CALL_FUNCTION 2					      	  return True						    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 64 ( to 82 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 2 ( sm )					      								    								  
							      								    								  
4 24 SETUP_LOOP 42 ( to 68 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 LOAD_GLOBAL 1 ( len )				      								    								  
32 LOAD_FAST 0 ( m )					      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 20 ( to 66 )				      								    								  
46 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 48 LOAD_FAST 2 ( sm )					      								    								  
50 LOAD_FAST 0 ( m )					      								    								  
52 LOAD_FAST 1 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 3 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 2 ( sm )					      								    								  
64 JUMP_ABSOLUTE 44					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 2 ( sm )				      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
7 76 LOAD_CONST 3 ( False )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 16					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
8 >> 84 LOAD_CONST 4 ( True )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object sequence at 0x7f33e2644930, file  def sequence ( n ) :					    def sequence ( n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( array )				      	  f = array.array ( 'i' , [ 0 , 1 , 1 ] )		    	f = array ( array ( [ i ] , [ 0 , 1 ] ) )		  
2 LOAD_METHOD 0 ( array )				      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 ) :					  
4 LOAD_CONST 1 ( 'i' )					      	      r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]	    	    f.write ( "i" , n + 1 )				  
6 LOAD_CONST 2 ( 0 )					      	      f.append ( r ) ;					    	f.write ( "i" , n + 1 )					  
8 LOAD_CONST 3 ( 1 )					      	  return r						    f.close ( )							  
10 LOAD_CONST 3 ( 1 )					      								    return f							  
12 BUILD_LIST 3						      								    								  
14 CALL_METHOD 2					      								    								  
16 STORE_FAST 1 ( f )					      								    								  
							      								    								  
3 18 SETUP_LOOP 68 ( to 88 )				      								    								  
20 LOAD_GLOBAL 1 ( range )				      								    								  
22 LOAD_CONST 4 ( 3 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 50 ( to 86 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 38 LOAD_FAST 1 ( f )					      								    								  
40 LOAD_FAST 1 ( f )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_CONST 3 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 1 ( f )					      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 LOAD_FAST 1 ( f )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_ADD						      								    								  
72 STORE_FAST 3 ( r )					      								    								  
							      								    								  
5 74 LOAD_FAST 1 ( f )					      								    								  
76 LOAD_METHOD 2 ( append )				      								    								  
78 LOAD_FAST 3 ( r )					      								    								  
80 CALL_METHOD 1					      								    								  
82 POP_TOP						      								    								  
84 JUMP_ABSOLUTE 34					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
6 >> 88 LOAD_FAST 3 ( r )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
Disassembly of <code object countWays at 0x7f33e2653f60, file def countWays ( n , k ) :					    def countWays ( n , k , l ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( k )					      	  total = k						    	total = n						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( total )				      	  mod = 1000000007					    	1000000007 = 1000000007					  alid/PAINTING_FENCE_ALGORITHM.py", line 31	 100
							      	  same , diff = 0 , k					    	while n <= 0 :						  0000007 = 1000000007	   ^ SyntaxError: can't assi
3 4 LOAD_CONST 1 ( 1000000007 )				      	  for i in range ( 2 , n + 1 ) :			    	    same = 0						  gn to literal
6 STORE_FAST 3 ( mod )					      	      same = diff					    	    n -= 1						  
							      	      diff = total * ( k - 1 )				    	n >>= 8							  
4 8 LOAD_CONST 2 ( 0 )					      	      diff = diff % mod					    	n = 0							  
10 LOAD_FAST 1 ( k )					      	      total = ( same + diff ) % mod			    	while n <= 1 :						  
12 ROT_TWO						      	  return total						    	    n >>= 8						  
14 STORE_FAST 4 ( same )				      								    	    n >>= 8						  
16 STORE_FAST 5 ( diff )				      								    	    n >>= 8						  
							      								    	    n >>= 8						  
5 18 SETUP_LOOP 58 ( to 78 )				      								    	return n						  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_CONST 3 ( 2 )					      								    								  
24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 4 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 40 ( to 76 )				      								    								  
36 STORE_FAST 6 ( i )					      								    								  
							      								    								  
6 38 LOAD_FAST 5 ( diff )				      								    								  
40 STORE_FAST 4 ( same )				      								    								  
							      								    								  
7 42 LOAD_FAST 2 ( total )				      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 LOAD_CONST 4 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
8 54 LOAD_FAST 5 ( diff )				      								    								  
56 LOAD_FAST 3 ( mod )					      								    								  
58 BINARY_MODULO					      								    								  
60 STORE_FAST 5 ( diff )				      								    								  
							      								    								  
9 62 LOAD_FAST 4 ( same )				      								    								  
64 LOAD_FAST 5 ( diff )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 3 ( mod )					      								    								  
70 BINARY_MODULO					      								    								  
72 STORE_FAST 2 ( total )				      								    								  
74 JUMP_ABSOLUTE 34					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
10 >> 78 LOAD_FAST 2 ( total )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
Disassembly of <code object countP at 0x7f33e2644f60, file "< def countP ( n , k ) :					    def countP ( n , k ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n == 0 or k == 0 or k > n ) :			    	if k == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( k == 1 or k == n ) :				    	if k == 0 :						  
6 POP_JUMP_IF_TRUE 24					      	      return 1						    	    return 0						  
8 LOAD_FAST 1 ( k )					      	  return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k -  	if k > 0 :						  
10 LOAD_CONST 1 ( 0 )					      								    	    return 0						  
12 COMPARE_OP 2 ( == )					      								    	return 0						  
14 POP_JUMP_IF_TRUE 24					      								    								  
16 LOAD_FAST 1 ( k )					      								    								  
18 LOAD_FAST 0 ( n )					      								    								  
20 COMPARE_OP 4 ( > )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 >> 24 LOAD_CONST 1 ( 0 )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
4 >> 28 LOAD_FAST 1 ( k )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_TRUE 44					      								    								  
36 LOAD_FAST 1 ( k )					      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 >> 44 LOAD_CONST 2 ( 1 )				      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
6 >> 48 LOAD_FAST 1 ( k )				      								    								  
50 LOAD_GLOBAL 0 ( countP )				      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 1 ( k )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_GLOBAL 0 ( countP )				      								    								  
66 LOAD_FAST 0 ( n )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_FAST 1 ( k )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 CALL_FUNCTION 2					      								    								  
80 BINARY_ADD						      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
Disassembly of <code object power at 0x7f33e2653f60, file "<d def power ( x , y ) :					    def power ( x , y , y , z ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( y )					      	  if ( y == 0 ) : return 1				    	if y == 0 :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 0 )					      	  temp = power ( x , int ( y / 2 ) )			    	    return 1						  alid/WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1.py", l
4 COMPARE_OP 2 ( == )					      	  if ( y % 2 == 0 ) :					    	power = power ( x , y , z )				  ine 27     def f_filled ( x , y , y , z ) :	  ^
6 POP_JUMP_IF_FALSE 12					      	      return temp * temp				    	if power > 1 :						  SyntaxError: duplicate argument 'y' in function de
8 LOAD_CONST 2 ( 1 )					      	  else :						    	    return 1						  finition
10 RETURN_VALUE						      	      if ( y > 0 ) : return x * temp * temp		    	x = power ( x , y )					  
							      	      else : return ( temp * temp ) / x			    	y = power ( x , y )					  
3 >> 12 LOAD_GLOBAL 0 ( power )				      								    	z = ( x - y ) * ( x - y )				  
14 LOAD_FAST 0 ( x )					      								    	return ( x - y ) * ( y - z )				  
16 LOAD_GLOBAL 1 ( int )				      								    								  
18 LOAD_FAST 1 ( y )					      								    								  
20 LOAD_CONST 3 ( 2 )					      								    								  
22 BINARY_TRUE_DIVIDE					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
4 30 LOAD_FAST 1 ( y )					      								    								  
32 LOAD_CONST 3 ( 2 )					      								    								  
34 BINARY_MODULO					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
5 42 LOAD_FAST 2 ( temp )				      								    								  
44 LOAD_FAST 2 ( temp )					      								    								  
46 BINARY_MULTIPLY					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
7 >> 50 LOAD_FAST 1 ( y )				      								    								  
52 LOAD_CONST 1 ( 0 )					      								    								  
54 COMPARE_OP 4 ( > )					      								    								  
56 POP_JUMP_IF_FALSE 70					      								    								  
58 LOAD_FAST 0 ( x )					      								    								  
60 LOAD_FAST 2 ( temp )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_FAST 2 ( temp )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
8 >> 70 LOAD_FAST 2 ( temp )				      								    								  
72 LOAD_FAST 2 ( temp )					      								    								  
74 BINARY_MULTIPLY					      								    								  
76 LOAD_FAST 0 ( x )					      								    								  
78 BINARY_TRUE_DIVIDE					      								    								  
80 RETURN_VALUE						      								    								  
82 LOAD_CONST 0 ( None )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
Disassembly of <code object minimumSquare at 0x7f33e2649a50,  def minimumSquare ( a , b ) :				    def minimumSquare ( a , b , a , b , theta ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( result )				      	  rem = 0						    	rem = 0							  alid/PAPER_CUT_MINIMUM_NUMBER_SQUARES.py", line 30
							      	  if ( a < b ) :					    	while a < b :						       def f_filled ( a , b , a , b , theta ) :
3 4 LOAD_CONST 1 ( 0 )					      	      a , b = b , a					    	    if a < b :						  ^ SyntaxError: duplicate argument 'a' in function
6 STORE_FAST 3 ( rem )					      	  while ( b > 0 ) :					    		result = a [ b ]				  definition
							      	      result += int ( a / b )				    	    a = b [ a ]						  
4 8 LOAD_FAST 0 ( a )					      	      rem = int ( a % b )				    	    b = a [ b ]						  
10 LOAD_FAST 1 ( b )					      	      a = b						    	    a = b [ b ]						  
12 COMPARE_OP 0 ( < )					      	      b = rem						    	    b = a [ b ]						  
14 POP_JUMP_IF_FALSE 26					      	  return result						    	    a = b [ b ]						  
							      								    	    b = a [ b ]						  
5 16 LOAD_FAST 1 ( b )					      								    	    a = b [ b ]						  
18 LOAD_FAST 0 ( a )					      								    	    b = b [ b ]						  
20 ROT_TWO						      								    	    a = b [ b ]						  
22 STORE_FAST 0 ( a )					      								    	    b = b [ b ]						  
24 STORE_FAST 1 ( b )					      								    	    a = b [ b ]						  
							      								    	    b [ b ] = b [ b ]					  
6 >> 26 SETUP_LOOP 48 ( to 76 )				      								    	    a [ b ] = b [ b ]					  
>> 28 LOAD_FAST 1 ( b )					      								    	    b [ b ] = b [ b ]					  
30 LOAD_CONST 1 ( 0 )					      								    	    a [ b ] = b [ b ]					  
32 COMPARE_OP 4 ( > )					      								    	    b [ b ] = b [ b ]					  
34 POP_JUMP_IF_FALSE 74					      								    	    b [ b ] = b [ b ]					  
							      								    	return b						  
7 36 LOAD_FAST 2 ( result )				      								    								  
38 LOAD_GLOBAL 0 ( int )				      								    								  
40 LOAD_FAST 0 ( a )					      								    								  
42 LOAD_FAST 1 ( b )					      								    								  
44 BINARY_TRUE_DIVIDE					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 2 ( result )				      								    								  
							      								    								  
8 52 LOAD_GLOBAL 0 ( int )				      								    								  
54 LOAD_FAST 0 ( a )					      								    								  
56 LOAD_FAST 1 ( b )					      								    								  
58 BINARY_MODULO					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 STORE_FAST 3 ( rem )					      								    								  
							      								    								  
9 64 LOAD_FAST 1 ( b )					      								    								  
66 STORE_FAST 0 ( a )					      								    								  
							      								    								  
10 68 LOAD_FAST 3 ( rem )				      								    								  
70 STORE_FAST 1 ( b )					      								    								  
72 JUMP_ABSOLUTE 28					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
11 >> 76 LOAD_FAST 2 ( result )				      								    								  
78 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
Disassembly of <code object countSubStr at 0x7f33e2649a50, fi def countSubStr ( st , n ) :				    def countSubStr ( st , n , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
							      	      if ( st [ i ] == '1' ) :				    	    if n [ i ] == n :					  
3 4 SETUP_LOOP 74 ( to 80 )				      		  for j in range ( i + 1 , n ) :		    		res [ i ] = 1					  
6 LOAD_GLOBAL 0 ( range )				      		      if ( st [ j ] == '1' ) :			    	return res						  
8 LOAD_CONST 1 ( 0 )					      			  res = res + 1				    								  
10 LOAD_FAST 1 ( n )					      	  return res						    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 60 ( to 78 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( st )					      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 2 ( '1' )					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
5 32 SETUP_LOOP 42 ( to 76 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 3 ( i )					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( n )					      								    								  
44 CALL_FUNCTION 2					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 24 ( to 74 )				      								    								  
50 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 52 LOAD_FAST 0 ( st )					      								    								  
54 LOAD_FAST 4 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 2 ( '1' )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( res )				      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 2 ( res )					      								    								  
72 JUMP_ABSOLUTE 48					      								    								  
>> 74 POP_BLOCK						      								    								  
>> 76 JUMP_ABSOLUTE 16					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
8 >> 80 LOAD_FAST 2 ( res )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	      MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	    MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL		  MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL
--							      --							    --								  --
Disassembly of <code object minOps at 0x7f33e2644930, file "< def minOps ( arr , n , k ) :				    def minOps ( arr , n ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  max1 = max ( arr )					    	max1 = max ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  res = 0						    	max1 = 0						  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  
6 STORE_FAST 3 ( max1 )					      	      if ( ( max1 - arr [ i ] ) % k != 0 ) :		    	    if max1 [ i ] != max1 [ i ] :			  
							      		  return - 1					    		max1 = max1 [ i ]				  
3 8 LOAD_CONST 1 ( 0 )					      	      else :						    		if max1 [ i ] != max1 [ i ] :			  
10 STORE_FAST 4 ( res )					      		  res += ( max1 - arr [ i ] ) / k		    		    max1 = max1 [ i ] + max1 [ i ]		  
							      	  return int ( res )					    		if max1 [ i ] != max1 :				  
4 12 SETUP_LOOP 62 ( to 76 )				      								    		    max1 = max1 [ i ] + max1 [ i ]		  
14 LOAD_GLOBAL 1 ( range )				      								    		    if max1 < max1 :				  
16 LOAD_CONST 1 ( 0 )					      								    			max1 = max1 [ i ] + max1 [ i + 1 ]	  
18 LOAD_FAST 1 ( n )					      								    		    if max1 < max1 :				  
20 CALL_FUNCTION 2					      								    			max1 = max1 [ i + 1 ]			  
22 GET_ITER						      								    		    if max1 < max1 :				  
>> 24 FOR_ITER 48 ( to 74 )				      								    			max1 = max1 [ i + 1 ]			  
26 STORE_FAST 5 ( i )					      								    		    if max1 < max1 :				  
							      								    			max1 = max1 [ i + 1 ]			  
5 28 LOAD_FAST 3 ( max1 )				      								    		    if max1 < max1 :				  
30 LOAD_FAST 0 ( arr )					      								    			max1 = max1 [ i + 1 ]			  
32 LOAD_FAST 5 ( i )					      								    		    if max1 < max1 :				  
34 BINARY_SUBSCR					      								    			max1 = max1 + 1				  
36 BINARY_SUBTRACT					      								    		    if max1 < max1 :				  
38 LOAD_FAST 2 ( k )					      								    			max1 = max1 + 1				  
40 BINARY_MODULO					      								    		return max1					  
42 LOAD_CONST 1 ( 0 )					      								    								  
44 COMPARE_OP 3 ( != )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
6 48 LOAD_CONST 2 ( - 1 )				      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_FAST 4 ( res )				      								    								  
54 LOAD_FAST 3 ( max1 )					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 LOAD_FAST 2 ( k )					      								    								  
66 BINARY_TRUE_DIVIDE					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 4 ( res )					      								    								  
72 JUMP_ABSOLUTE 24					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_GLOBAL 2 ( int )				      								    								  
78 LOAD_FAST 4 ( res )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		      AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		    AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		  AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES
--							      --							    --								  --
Disassembly of <code object polygonArea at 0x7f33e2653f60, fi def polygonArea ( X , Y , n ) :				    def polygonArea ( X , Y , Y , Y , Z , scale = - 1 ) :	  script_not_found : None
2 0 LOAD_CONST 1 ( 0.0 )				      	  area = 0.0						    	j = 0.0							  
2 STORE_FAST 3 ( area )					      	  j = n - 1						    	for i in range ( 0 , Y - 1 ) :				  
							      	  for i in range ( 0 , n ) :				    	    j = i * ( Y - 1 )					  
3 4 LOAD_FAST 2 ( n )					      	      area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) 	    j -= 1						  
6 LOAD_CONST 2 ( 1 )					      	      j = i						    	return j						  
8 BINARY_SUBTRACT					      	  return int ( abs ( area / 2.0 ) )			    								  
10 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 12 SETUP_LOOP 58 ( to 72 )				      								    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_CONST 3 ( 0 )					      								    								  
18 LOAD_FAST 2 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 44 ( to 70 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 3 ( area )				      								    								  
30 LOAD_FAST 0 ( X )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( X )					      								    								  
38 LOAD_FAST 5 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_FAST 1 ( Y )					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_FAST 1 ( Y )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( area )				      								    								  
							      								    								  
6 64 LOAD_FAST 5 ( i )					      								    								  
66 STORE_FAST 4 ( j )					      								    								  
68 JUMP_ABSOLUTE 24					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 LOAD_GLOBAL 1 ( int )				      								    								  
74 LOAD_GLOBAL 2 ( abs )				      								    								  
76 LOAD_FAST 3 ( area )					      								    								  
78 LOAD_CONST 4 ( 2.0 )					      								    								  
80 BINARY_TRUE_DIVIDE					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE
--							      --							    --								  --
Disassembly of <code object findMinRooms at 0x7f33e2653ed0, f def findMinRooms ( slots , n , m ) :			    def findMinRooms ( slots , n , n , s , s , s , s , s , s , s  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  counts = [ 0 ] * m ;					    								  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    								  
4 LOAD_FAST 2 ( m )					      	      for j in range ( m ) :				    								  
6 BINARY_MULTIPLY					      		  if ( slots [ i ] [ j ] == '1' ) :		    								  
8 STORE_FAST 3 ( counts )				      		      counts [ j ] += 1 ;			    								  
							      	  return max ( counts ) ;				    								  
3 10 SETUP_LOOP 66 ( to 78 )				      								    								  
12 LOAD_GLOBAL 0 ( range )				      								    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 54 ( to 76 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 24 SETUP_LOOP 48 ( to 74 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 2 ( m )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 36 ( to 72 )				      								    								  
36 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( slots )				      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 5 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 2 ( '1' )					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 34					      								    								  
							      								    								  
6 54 LOAD_FAST 3 ( counts )				      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 DUP_TOP_TWO						      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_CONST 3 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 ROT_THREE						      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 34					      								    								  
>> 72 POP_BLOCK						      								    								  
>> 74 JUMP_ABSOLUTE 20					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
7 >> 78 LOAD_GLOBAL 1 ( max )				      								    								  
80 LOAD_FAST 3 ( counts )				      								    								  
82 CALL_FUNCTION 1					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
Disassembly of <code object canMakeAllSame at 0x7f33e2649a50, def canMakeAllSame ( str ) :				    def canMakeAllSame ( str ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  zeros = 0						    	zeros = 0						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( zeros )				      	  ones = 0						    	zeros = 0						  024/eval_scripts/dis_sa-python_sa.valid/CHANGE_BIT
							      	  for i in range ( 0 , len ( str ) ) :			    	for i in range ( 0 , len ( str ) ) :			  S_CAN_MADE_ONE_FLIP.py", line 53, in <module>
3 4 LOAD_CONST 1 ( 0 )					      	      ch = str [ i ] ;					    	    if i == len ( str ) :				  if f_filled(*parameters_set) == f_gold(*parameters
6 STORE_FAST 2 ( ones )					      	      if ( ch == '0' ) :				    		zeros = len ( str )				  _set):   File "/home/ubuntu/TransCoder/models/eval
							      		  zeros = zeros + 1				    	return zeros [ n ]					  /bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.va
4 8 SETUP_LOOP 56 ( to 66 )				      	      else :						    								  lid/CHANGE_BITS_CAN_MADE_ONE_FLIP.py", line 35, in
10 LOAD_GLOBAL 0 ( range )				      		  ones = ones + 1				    								   f_filled	return zeros [ n ] NameError: name '
12 LOAD_CONST 1 ( 0 )					      	  return ( zeros == 1 or ones == 1 ) ;			    								  n' is not defined
14 LOAD_GLOBAL 1 ( len )				      								    								  
16 LOAD_FAST 0 ( str )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 38 ( to 64 )				      								    								  
26 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 4 ( ch )					      								    								  
							      								    								  
6 36 LOAD_FAST 4 ( ch )					      								    								  
38 LOAD_CONST 2 ( '0' )					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
7 44 LOAD_FAST 1 ( zeros )				      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 STORE_FAST 1 ( zeros )				      								    								  
52 JUMP_ABSOLUTE 24					      								    								  
							      								    								  
9 >> 54 LOAD_FAST 2 ( ones )				      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 STORE_FAST 2 ( ones )				      								    								  
62 JUMP_ABSOLUTE 24					      								    								  
>> 64 POP_BLOCK						      								    								  
							      								    								  
10 >> 66 LOAD_FAST 1 ( zeros )				      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 JUMP_IF_TRUE_OR_POP 80				      								    								  
74 LOAD_FAST 2 ( ones )					      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
>> 80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			      SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			    SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			  SORTING_ARRAY_REVERSE_AROUND_<unk> DLE
--							      --							    --								  --
Disassembly of <code object ifPossible at 0x7f33e2653f60, fil def ifPossible ( arr , n ) :				    def ifPossible ( arr , n , n , n , n , n , n , n , n , n , n  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  cp = [ 0 ] * n					    	cp = arr [ n ]						  
2 BUILD_LIST 1						      	  cp = arr						    	cp = n							  
4 LOAD_FAST 1 ( n )					      	  cp.sort ( )						    	cp = n - n						  
6 BINARY_MULTIPLY					      	  for i in range ( 0 , n ) :				    	cp = n - n						  
8 STORE_FAST 2 ( cp )					      	      if ( not ( arr [ i ] == cp [ i ] ) and not ( arr [ n  	cp = n - n						  
							      		  return False					    	cp = n - n						  
3 10 LOAD_FAST 0 ( arr )				      	  return True						    	cp = n - n						  
12 STORE_FAST 2 ( cp )					      								    	cp = n - n						  
							      								    	cp = n - n						  
4 14 LOAD_FAST 2 ( cp )					      								    	cp = n - n						  
16 LOAD_METHOD 0 ( sort )				      								    	cp = n - n						  
18 CALL_METHOD 0					      								    	cp = n - n						  
20 POP_TOP						      								    	cp = n - n						  
							      								    	cp = n - n						  
5 22 SETUP_LOOP 62 ( to 86 )				      								    	cp = n - n						  
24 LOAD_GLOBAL 1 ( range )				      								    	cp = n - n						  
26 LOAD_CONST 1 ( 0 )					      								    	cp = n - n						  
28 LOAD_FAST 1 ( n )					      								    	cp = n - n						  
30 CALL_FUNCTION 2					      								    	cp = n - n						  
32 GET_ITER						      								    	cp = n - n						  
>> 34 FOR_ITER 48 ( to 84 )				      								    	cp = n - n						  
36 STORE_FAST 3 ( i )					      								    	cp = n - n						  
							      								    	cp = n - n						  
6 38 LOAD_FAST 0 ( arr )				      								    	cp = n - n						  
40 LOAD_FAST 3 ( i )					      								    	cp = n - n						  
42 BINARY_SUBSCR					      								    	cp = n - n						  
44 LOAD_FAST 2 ( cp )					      								    	cp = n - n						  
46 LOAD_FAST 3 ( i )					      								    	cp = n - n						  
48 BINARY_SUBSCR					      								    	cp = n - n						  
50 COMPARE_OP 2 ( == )					      								    	cp = n - n						  
52 POP_JUMP_IF_TRUE 34					      								    	cp = n - n						  
54 LOAD_FAST 0 ( arr )					      								    	cp = n - n						  
56 LOAD_FAST 1 ( n )					      								    	cp = n - n						  
58 LOAD_CONST 2 ( 1 )					      								    	cp = n - n						  
60 BINARY_SUBTRACT					      								    	cp = n - n						  
62 LOAD_FAST 3 ( i )					      								    	cp = n - n						  
64 BINARY_SUBTRACT					      								    	cp = n - n						  
66 BINARY_SUBSCR					      								    	cp = n - n						  
68 LOAD_FAST 2 ( cp )					      								    	cp = n - n						  
70 LOAD_FAST 3 ( i )					      								    	cp = n - n						  
72 BINARY_SUBSCR					      								    	cp = n - n						  
74 COMPARE_OP 2 ( == )					      								    	cp = n - n						  
76 POP_JUMP_IF_TRUE 34					      								    	cp = n - n						  
							      								    	cp = n - n						  
7 78 LOAD_CONST 3 ( False )				      								    	cp = n - n						  
80 RETURN_VALUE						      								    	cp = n - n						  
82 JUMP_ABSOLUTE 34					      								    	cp = n - n						  
>> 84 POP_BLOCK						      								    	cp = n - n						  
							      								    	cp = cp - n						  
8 >> 86 LOAD_CONST 4 ( True )				      								    	cp = cp - n						  
88 RETURN_VALUE NEW_LINE				      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp - cp							  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
							      								    	cp = cp - cp						  
-							      -								    	cp - cp-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
Disassembly of <code object binaryToDecimal at 0x7f33e2653ed0 def binaryToDecimal ( n ) :				    def binaryToDecimal ( n , 0x70x70x70x70x70x70x70x70x70x70x70x error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  num = n ;						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 1 ( num )					      	  dec_value = 0 ;					    								  alid/PROGRAM_BINARY_DECIMAL_CONVERSION_1.py", line
							      	  base1 = 1 ;						    								   29	  def f_filled ( n , 0x70x70x70x70x70x70x70x
3 4 LOAD_CONST 1 ( 0 )					      	  len1 = len ( num ) ;					    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
6 STORE_FAST 2 ( dec_value )				      	  for i in range ( len1 - 1 , - 1 , - 1 ) :		    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
							      	      if ( num [ i ] == '1' ) :				    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
4 8 LOAD_CONST 2 ( 1 )					      		  dec_value += base1 ;				    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
10 STORE_FAST 3 ( base1 )				      	      base1 = base1 * 2 ;				    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
							      	  return dec_value ;					    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
5 12 LOAD_GLOBAL 0 ( len )				      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
14 LOAD_FAST 1 ( num )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
16 CALL_FUNCTION 1					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
18 STORE_FAST 4 ( len1 )				      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
							      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
6 20 SETUP_LOOP 52 ( to 74 )				      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
22 LOAD_GLOBAL 1 ( range )				      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
24 LOAD_FAST 4 ( len1 )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
26 LOAD_CONST 2 ( 1 )					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
28 BINARY_SUBTRACT					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
30 LOAD_CONST 3 ( - 1 )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
32 LOAD_CONST 3 ( - 1 )					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
34 CALL_FUNCTION 3					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
36 GET_ITER						      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
>> 38 FOR_ITER 32 ( to 72 )				      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
40 STORE_FAST 5 ( i )					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
							      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
7 42 LOAD_FAST 1 ( num )				      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
44 LOAD_FAST 5 ( i )					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
46 BINARY_SUBSCR					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
48 LOAD_CONST 4 ( '1' )					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
50 COMPARE_OP 2 ( == )					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
52 POP_JUMP_IF_FALSE 62					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
							      								    								  0x70x70x70x70x70x70x70x70x70x70x70x7
8 54 LOAD_FAST 2 ( dec_value )				      								    								  	       ^ SyntaxError: invalid syntax
56 LOAD_FAST 3 ( base1 )				      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( dec_value )				      								    								  
							      								    								  
9 >> 62 LOAD_FAST 3 ( base1 )				      								    								  
64 LOAD_CONST 5 ( 2 )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 STORE_FAST 3 ( base1 )				      								    								  
70 JUMP_ABSOLUTE 38					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_FAST 2 ( dec_value )			      								    								  
76 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
Disassembly of <code object sortString at 0x7f33e2644f60, fil def sortString ( str , n ) :				    def sortString ( s ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  new_str = ""						    	new_str = ""						  
2 STORE_FAST 2 ( new_str )				      	  for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	    	for i in range ( len ( s ) ) :				  
							      	      for j in range ( n ) :				    	    if ( ( s [ "z" ] + ( ( s [ "z" ] + ( s [ "z" ] ) ) )  
3 4 SETUP_LOOP 76 ( to 82 )				      		  if ( str [ j ] == chr ( i ) ) :		    		new_str = ""					  
6 LOAD_GLOBAL 0 ( range )				      		      new_str += str [ j ]			    	return new_str						  
8 LOAD_GLOBAL 1 ( ord )					      	  return new_str					    								  
10 LOAD_CONST 2 ( 'a' )					      								    								  
12 CALL_FUNCTION 1					      								    								  
14 LOAD_GLOBAL 1 ( ord )				      								    								  
16 LOAD_CONST 3 ( 'z' )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 LOAD_CONST 4 ( 1 )					      								    								  
22 BINARY_ADD						      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 50 ( to 80 )				      								    								  
30 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 32 SETUP_LOOP 44 ( to 78 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 1 ( n )					      								    								  
38 CALL_FUNCTION 1					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 32 ( to 76 )				      								    								  
44 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( str )				      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_GLOBAL 2 ( chr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 62 LOAD_FAST 2 ( new_str )				      								    								  
64 LOAD_FAST 0 ( str )					      								    								  
66 LOAD_FAST 4 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 2 ( new_str )				      								    								  
74 JUMP_ABSOLUTE 42					      								    								  
>> 76 POP_BLOCK						      								    								  
>> 78 JUMP_ABSOLUTE 28					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
7 >> 82 LOAD_FAST 2 ( new_str )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object countFact at 0x7f33e2649a50, file def countFact ( low , high ) :				    def countFact ( low , high ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 1 )					      	  fact = 1						    	fact = 1						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 2 ( fact )					      	  x = 1							    	x = 1							  024/eval_scripts/dis_sa-python_sa.valid/COUNT_FACT
							      	  while ( fact < low ) :				    	for n in low :						  ORIAL_NUMBERS_IN_A_GIVEN_RANGE.py", line 57, in <m
3 4 LOAD_CONST 1 ( 1 )					      	      fact = fact * x					    	    if low >= high :					  odule>     if f_filled(*parameters_set) == f_gold(
6 STORE_FAST 3 ( x )					      	      x += 1						    		fact = n - 1					  *parameters_set):   File "/home/ubuntu/TransCoder/
							      	  res = 0						    	    else :						  models/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-p
4 8 SETUP_LOOP 28 ( to 38 )				      	  while ( fact <= high ) :				    		fact = n - 1					  ython_sa.valid/COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_
>> 10 LOAD_FAST 2 ( fact )				      	      res += 1						    	return fact						  RANGE.py", line 34, in f_filled     for n in low :
12 LOAD_FAST 0 ( low )					      	      fact = fact * x					    								   TypeError: 'int' object is not iterable
14 COMPARE_OP 0 ( < )					      	      x += 1						    								  
16 POP_JUMP_IF_FALSE 36					      	  return res						    								  
							      								    								  
5 18 LOAD_FAST 2 ( fact )				      								    								  
20 LOAD_FAST 3 ( x )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 STORE_FAST 2 ( fact )				      								    								  
							      								    								  
6 26 LOAD_FAST 3 ( x )					      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 INPLACE_ADD						      								    								  
32 STORE_FAST 3 ( x )					      								    								  
34 JUMP_ABSOLUTE 10					      								    								  
>> 36 POP_BLOCK						      								    								  
							      								    								  
7 >> 38 LOAD_CONST 2 ( 0 )				      								    								  
40 STORE_FAST 4 ( res )					      								    								  
							      								    								  
8 42 SETUP_LOOP 36 ( to 80 )				      								    								  
>> 44 LOAD_FAST 2 ( fact )				      								    								  
46 LOAD_FAST 1 ( high )					      								    								  
48 COMPARE_OP 1 ( <= )					      								    								  
50 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
9 52 LOAD_FAST 4 ( res )				      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 4 ( res )					      								    								  
							      								    								  
10 60 LOAD_FAST 2 ( fact )				      								    								  
62 LOAD_FAST 3 ( x )					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 STORE_FAST 2 ( fact )				      								    								  
							      								    								  
11 68 LOAD_FAST 3 ( x )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 3 ( x )					      								    								  
76 JUMP_ABSOLUTE 44					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
12 >> 80 LOAD_FAST 4 ( res )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION
--							      --							    --								  --
Disassembly of <code object findMinX at 0x7f33e2653f60, file  def findMinX ( num , rem , k ) :				    def findMinX ( num , num = 15 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  x = 1 ;						    	x = 1							  
2 STORE_FAST 3 ( x )					      	  while ( True ) :					    	while num < num :					  
							      	      j = 0 ;						    	    x = num						  
3 4 SETUP_LOOP 72 ( to 78 )				      	      while ( j < k ) :					    	    y = num [ num ]					  
							      		  if ( x % num [ j ] != rem [ j ] ) :		    	    if num < num :					  
4 >> 6 LOAD_CONST 2 ( 0 )				      		      break ;					    		x = num						  
8 STORE_FAST 4 ( j )					      		  j += 1 ;					    	    x = num [ num ]					  
							      	      if ( j == k ) :					    	    y = x [ num ]					  
5 10 SETUP_LOOP 42 ( to 54 )				      		  return x ;					    	    if x < num :					  
>> 12 LOAD_FAST 4 ( j )					      	      x += 1 ;						    		x = num [ num ]					  
14 LOAD_FAST 2 ( k )					      								    		y = x [ num ]					  
16 COMPARE_OP 0 ( < )					      								    	    else :						  
18 POP_JUMP_IF_FALSE 52					      								    		x = num [ num ]					  
							      								    		y = x [ num ]					  
6 20 LOAD_FAST 3 ( x )					      								    	return x						  
22 LOAD_FAST 0 ( num )					      								    								  
24 LOAD_FAST 4 ( j )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_FAST 1 ( rem )					      								    								  
32 LOAD_FAST 4 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
7 40 BREAK_LOOP						      								    								  
							      								    								  
8 >> 42 LOAD_FAST 4 ( j )				      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( j )					      								    								  
50 JUMP_ABSOLUTE 12					      								    								  
>> 52 POP_BLOCK						      								    								  
							      								    								  
9 >> 54 LOAD_FAST 4 ( j )				      								    								  
56 LOAD_FAST 2 ( k )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
10 62 LOAD_FAST 3 ( x )					      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
11 >> 66 LOAD_FAST 3 ( x )				      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 3 ( x )					      								    								  
74 JUMP_ABSOLUTE 6					      								    								  
76 POP_BLOCK						      								    								  
>> 78 LOAD_CONST 0 ( None )				      								    								  
80 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2
--							      --							    --								  --
Disassembly of <code object minSum at 0x7f33e2644f60, file "< def minSum ( a , n ) :					    def minSum ( a , x , y , z ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sorted )				      	  a = sorted ( a )					    	( a , x ) = sorted ( a , 0 )				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( a )					      	  num1 , num2 = 0 , 0					    	num2 = ( 0 , 0 , 0 , 0 )				  alid/MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2
4 CALL_FUNCTION 1					      	  for i in range ( n ) :				    	num2 = ( 0 , 0 , 0 )					  .py", line 67	    num2 = ( 1 , 0 ) )
6 STORE_FAST 0 ( a )					      	      if i % 2 == 0 :					    	num2 = ( 1 , 0 )					  	  ^ SyntaxError: invalid syntax
							      		  num1 = num1 * 10 + a [ i ]			    	num2 = ( 1 , 0 )					  
3 8 LOAD_CONST 1 ( ( 0 , 0 ) )				      	      else :						    	num2 = ( 1 , 0 )					  
10 UNPACK_SEQUENCE 2					      		  num2 = num2 * 10 + a [ i ]			    	num2 = ( 1 , 0 )					  
12 STORE_FAST 2 ( num1 )				      	  return num2 + num1					    	num2 = ( 1 , 0 )					  
14 STORE_FAST 3 ( num2 )				      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
4 16 SETUP_LOOP 62 ( to 80 )				      								    	num2 = ( 1 , 0 )					  
18 LOAD_GLOBAL 1 ( range )				      								    	num2 = ( 1 , 0 )					  
20 LOAD_FAST 1 ( n )					      								    	num2 = ( 1 , 0 )					  
22 CALL_FUNCTION 1					      								    	num2 = ( 1 , 0 )					  
24 GET_ITER						      								    	num2 = ( 1 , 0 )					  
>> 26 FOR_ITER 50 ( to 78 )				      								    	num2 = ( 1 , 0 )					  
28 STORE_FAST 4 ( i )					      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
5 30 LOAD_FAST 4 ( i )					      								    	num2 = ( 1 , 0 )					  
32 LOAD_CONST 2 ( 2 )					      								    	num2 = ( 1 , 0 )					  
34 BINARY_MODULO					      								    	num2 = ( 1 , 0 )					  
36 LOAD_CONST 3 ( 0 )					      								    	num2 = ( 1 , 0 )					  
38 COMPARE_OP 2 ( == )					      								    	num2 = ( 1 , 0 )					  
40 POP_JUMP_IF_FALSE 60					      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
6 42 LOAD_FAST 2 ( num1 )				      								    	num2 = ( 1 , 0 )					  
44 LOAD_CONST 4 ( 10 )					      								    	num2 = ( 1 , 0 )					  
46 BINARY_MULTIPLY					      								    	num2 = ( 1 , 0 )					  
48 LOAD_FAST 0 ( a )					      								    	num2 = ( 1 , 0 )					  
50 LOAD_FAST 4 ( i )					      								    	num2 = ( 1 , 0 )					  
52 BINARY_SUBSCR					      								    	num2 = ( 1 , 0 )					  
54 BINARY_ADD						      								    	num2 = ( 1 , 0 )					  
56 STORE_FAST 2 ( num1 )				      								    	num2 = ( 1 , 0 )					  
58 JUMP_ABSOLUTE 26					      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
8 >> 60 LOAD_FAST 3 ( num2 )				      								    	num2 = ( 1 , 0 )					  
62 LOAD_CONST 4 ( 10 )					      								    	num2 = ( 1 , 0 )					  
64 BINARY_MULTIPLY					      								    	num2 = ( 1 , 0 )					  
66 LOAD_FAST 0 ( a )					      								    	num2 = ( 1 , 0 ) )					  
68 LOAD_FAST 4 ( i )					      								    	num2 = ( 1 , 0 )					  
70 BINARY_SUBSCR					      								    	num2 = ( 1 , 0 )					  
72 BINARY_ADD						      								    	num2 = ( 1 , 0 )					  
74 STORE_FAST 3 ( num2 )				      								    	num2 = ( 1 , 0 )					  
76 JUMP_ABSOLUTE 26					      								    	num2 = ( 1 , 0 )					  
>> 78 POP_BLOCK						      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
9 >> 80 LOAD_FAST 3 ( num2 )				      								    	num2 = ( 1 , 0 )					  
82 LOAD_FAST 2 ( num1 )					      								    	num2 = ( 1 , 0 )					  
84 BINARY_ADD						      								    	num2 = ( 1 , 0 )					  
86 RETURN_VALUE NEW_LINE				      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	num2 = ( 1 , 0 )					  
							      								    	return num2						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7f33e2649a50, f def binarySearch ( arr , low , high ) :			    def binarySearch ( arr , low , high , high , high ) :	  script_not_found : None
2 0 LOAD_FAST 2 ( high )				      	  if high >= low :					    	if low >= high :					  
2 LOAD_FAST 1 ( low )					      	      mid = ( low + high ) // 2				    	    return low + high					  
4 COMPARE_OP 5 ( >= )					      	  if mid is arr [ mid ] :				    	elif low >= high :					  
6 POP_JUMP_IF_FALSE 20					      	      return mid					    	    return						  
							      	  if mid > arr [ mid ] :				    	elif low >= high :					  
3 8 LOAD_FAST 1 ( low )					      	      return binarySearch ( arr , ( mid + 1 ) , high )	    	    return						  
10 LOAD_FAST 2 ( high )					      	  else :						    	elif low >= high :					  
12 BINARY_ADD						      	      return binarySearch ( arr , low , ( mid - 1 ) )	    	    return						  
14 LOAD_CONST 1 ( 2 )					      	  return - 1						    	elif low >= high :					  
16 BINARY_FLOOR_DIVIDE					      								    	    return						  
18 STORE_FAST 3 ( mid )					      								    	elif low >= high :					  
							      								    	    return						  
4 >> 20 LOAD_FAST 3 ( mid )				      								    	else :							  
22 LOAD_FAST 0 ( arr )					      								    	    return						  
24 LOAD_FAST 3 ( mid )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 COMPARE_OP 8 ( is )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
5 32 LOAD_FAST 3 ( mid )				      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
6 >> 36 LOAD_FAST 3 ( mid )				      								    								  
38 LOAD_FAST 0 ( arr )					      								    								  
40 LOAD_FAST 3 ( mid )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 3 ( mid )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 2 ( high )					      								    								  
60 CALL_FUNCTION 3					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
9 >> 64 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 1 ( low )					      								    								  
70 LOAD_FAST 3 ( mid )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 CALL_FUNCTION 3					      								    								  
78 RETURN_VALUE						      								    								  
							      								    								  
10 80 LOAD_CONST 3 ( - 1 )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
Disassembly of <code object check at 0x7f33e2653ed0, file "<d def check ( st ) :					    def check ( st , size = 1024 ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( st )					    	n = len ( st )						  
2 LOAD_FAST 0 ( st )					      	  if ( ( ( int ) ( st [ n - 1 ] ) % 2 ) != 0 ) :	    	if n != n :						  
4 CALL_FUNCTION 1					      	      return False					    	    n = int ( st [ n ] )				  
6 STORE_FAST 1 ( n )					      	  digitSum = 0						    	else :							  
							      	  for i in range ( 0 , n ) :				    	    n = 0						  
3 8 LOAD_GLOBAL 1 ( int )				      	      digitSum = digitSum + ( int ) ( st [ i ] )	    	if n != n :						  
10 LOAD_FAST 0 ( st )					      	  return ( digitSum % 3 == 0 )				    	    n = 0						  
12 LOAD_FAST 1 ( n )					      								    	if n != n :						  
14 LOAD_CONST 1 ( 1 )					      								    	    n = 0						  
16 BINARY_SUBTRACT					      								    	return n						  
18 BINARY_SUBSCR					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_CONST 2 ( 2 )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 3 ( 0 )					      								    								  
28 COMPARE_OP 3 ( != )					      								    								  
30 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
4 32 LOAD_CONST 4 ( False )				      								    								  
34 RETURN_VALUE						      								    								  
							      								    								  
5 >> 36 LOAD_CONST 3 ( 0 )				      								    								  
38 STORE_FAST 2 ( digitSum )				      								    								  
							      								    								  
6 40 SETUP_LOOP 34 ( to 76 )				      								    								  
42 LOAD_GLOBAL 2 ( range )				      								    								  
44 LOAD_CONST 3 ( 0 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 20 ( to 74 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 56 LOAD_FAST 2 ( digitSum )				      								    								  
58 LOAD_GLOBAL 1 ( int )				      								    								  
60 LOAD_FAST 0 ( st )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 2 ( digitSum )				      								    								  
72 JUMP_ABSOLUTE 52					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
8 >> 76 LOAD_FAST 2 ( digitSum )			      								    								  
78 LOAD_CONST 5 ( 3 )					      								    								  
80 BINARY_MODULO					      								    								  
82 LOAD_CONST 3 ( 0 )					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND
--							      --							    --								  --
Disassembly of <code object isSubSequence at 0x7f33e26494b0,  def isSubSequence ( string1 , string2 , m , n ) :		    def isSubSequence ( string1 , string2 , count ) :		  script_not_found : None
2 0 LOAD_FAST 2 ( m )					      	  if m == 0 : return True				    	if string2 == 0 :					  
2 LOAD_CONST 1 ( 0 )					      	  if n == 0 : return False				    	    return True						  
4 COMPARE_OP 2 ( == )					      	  if string1 [ m - 1 ] == string2 [ n - 1 ] :		    	if string2 == 0 :					  
6 POP_JUMP_IF_FALSE 12					      	      return isSubSequence ( string1 , string2 , m - 1 , n  	    return False					  
8 LOAD_CONST 2 ( True )					      	  return isSubSequence ( string1 , string2 , m , n - 1 )    	if count == 0 :						  
10 RETURN_VALUE						      								    	    return False					  
							      								    	if string2 [ count ] == 1 :				  
3 >> 12 LOAD_FAST 3 ( n )				      								    	    return False					  
14 LOAD_CONST 1 ( 0 )					      								    	if count == 0 :						  
16 COMPARE_OP 2 ( == )					      								    	    return True						  
18 POP_JUMP_IF_FALSE 24					      								    	return False						  
20 LOAD_CONST 3 ( False )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( string1 )				      								    								  
26 LOAD_FAST 2 ( m )					      								    								  
28 LOAD_CONST 4 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 1 ( string2 )				      								    								  
36 LOAD_FAST 3 ( n )					      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 BINARY_SUBTRACT					      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
5 48 LOAD_GLOBAL 0 ( isSubSequence )			      								    								  
50 LOAD_FAST 0 ( string1 )				      								    								  
52 LOAD_FAST 1 ( string2 )				      								    								  
54 LOAD_FAST 2 ( m )					      								    								  
56 LOAD_CONST 4 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 LOAD_FAST 3 ( n )					      								    								  
62 LOAD_CONST 4 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 CALL_FUNCTION 4					      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
6 >> 70 LOAD_GLOBAL 0 ( isSubSequence )			      								    								  
72 LOAD_FAST 0 ( string1 )				      								    								  
74 LOAD_FAST 1 ( string2 )				      								    								  
76 LOAD_FAST 2 ( m )					      								    								  
78 LOAD_FAST 3 ( n )					      								    								  
80 LOAD_CONST 4 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 4					      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
Disassembly of <code object countLattice at 0x7f33e2653f60, f def countLattice ( r ) :					    def countLattice ( r , 0x33333333f60 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( r )					      	  if ( r <= 0 ) :					    	if r <= 0 :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 0 )					      	      return 0						    	    return 0						  alid/CIRCLE_LATTICE_POINTS.py", line 31     def f_
4 COMPARE_OP 1 ( <= )					      	  result = 4						    	result = [ ]						  filled ( r , 0x33333333f60 ) :
6 POP_JUMP_IF_FALSE 12					      	  for x in range ( 1 , r ) :				    	for x in range ( 1 , r ) :				  		  ^ SyntaxError: invalid syntax
							      	      ySquare = r * r - x * x				    	    result = [ ]					  
3 8 LOAD_CONST 1 ( 0 )					      	      y = int ( math.sqrt ( ySquare ) )			    	    for x in range ( 1 , r ) :				  
10 RETURN_VALUE						      	      if ( y * y == ySquare ) :				    		result.append ( x [ x ] )			  
							      		  result += 4					    	return result						  
4 >> 12 LOAD_CONST 2 ( 4 )				      	  return result						    								  
14 STORE_FAST 1 ( result )				      								    								  
							      								    								  
5 16 SETUP_LOOP 68 ( to 86 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 3 ( 1 )					      								    								  
22 LOAD_FAST 0 ( r )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 54 ( to 84 )				      								    								  
30 STORE_FAST 2 ( x )					      								    								  
							      								    								  
6 32 LOAD_FAST 0 ( r )					      								    								  
34 LOAD_FAST 0 ( r )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_FAST 2 ( x )					      								    								  
40 LOAD_FAST 2 ( x )					      								    								  
42 BINARY_MULTIPLY					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 STORE_FAST 3 ( ySquare )				      								    								  
							      								    								  
7 48 LOAD_GLOBAL 1 ( int )				      								    								  
50 LOAD_GLOBAL 2 ( math )				      								    								  
52 LOAD_METHOD 3 ( sqrt )				      								    								  
54 LOAD_FAST 3 ( ySquare )				      								    								  
56 CALL_METHOD 1					      								    								  
58 CALL_FUNCTION 1					      								    								  
60 STORE_FAST 4 ( y )					      								    								  
							      								    								  
8 62 LOAD_FAST 4 ( y )					      								    								  
64 LOAD_FAST 4 ( y )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_FAST 3 ( ySquare )				      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
9 74 LOAD_FAST 1 ( result )				      								    								  
76 LOAD_CONST 2 ( 4 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 1 ( result )				      								    								  
82 JUMP_ABSOLUTE 28					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 LOAD_FAST 1 ( result )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1
--							      --							    --								  --
Disassembly of <code object getOddOccurrence at 0x7f33e2644f6 def getOddOccurrence ( arr , size ) :			    def getOddOcOcOcOc6464f60 ( arr , size ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( dict )				      	  Hash = dict ( )					    	Hash = dict ( )						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 CALL_FUNCTION 0					      	  for i in range ( size ) :				    	for i in range ( size ) :				  024/eval_scripts/dis_sa-python_sa.valid/FIND_THE_N
4 STORE_FAST 2 ( Hash )					      	      Hash [ arr [ i ] ] = Hash.get ( arr [ i ] , 0 ) + 1 ; 	    Hash = i.get ( i )					  UMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1.py", line 53
							      	  for i in Hash :					    	    if Hash == Hash :					  , in <module>	    if f_filled(*parameters_set) ==
3 6 SETUP_LOOP 44 ( to 52 )				      	      if ( Hash [ i ] % 2 != 0 ) :			    		Hash = i.get ( i )				  f_gold(*parameters_set):   File "/home/ubuntu/Tran
8 LOAD_GLOBAL 1 ( range )				      		  return i					    	    if Hash == Hash :					  sCoder/models/eval/bt_sa/21z7a0p024/eval_scripts/d
10 LOAD_FAST 1 ( size )					      	  return - 1						    		Hash = i.get ( i )				  is_sa-python_sa.valid/FIND_THE_NUMBER_OCCURRING_OD
12 CALL_FUNCTION 1					      								    	    return Hash						  D_NUMBER_OF_TIMES_1.py", line 30, in f_filled
14 GET_ITER						      								    								  Hash = i.get ( i ) AttributeError: 'int' object ha
>> 16 FOR_ITER 32 ( to 50 )				      								    								  s no attribute 'get'
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( Hash )				      								    								  
22 LOAD_METHOD 2 ( get )				      								    								  
24 LOAD_FAST 0 ( arr )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 CALL_METHOD 2					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( Hash )					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 SETUP_LOOP 32 ( to 86 )				      								    								  
54 LOAD_FAST 2 ( Hash )					      								    								  
56 GET_ITER						      								    								  
>> 58 FOR_ITER 24 ( to 84 )				      								    								  
60 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 62 LOAD_FAST 2 ( Hash )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 3 ( 2 )					      								    								  
70 BINARY_MODULO					      								    								  
72 LOAD_CONST 1 ( 0 )					      								    								  
74 COMPARE_OP 3 ( != )					      								    								  
76 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
7 78 LOAD_FAST 3 ( i )					      								    								  
80 RETURN_VALUE						      								    								  
82 JUMP_ABSOLUTE 58					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
8 >> 86 LOAD_CONST 4 ( - 1 )				      								    								  
88 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		      FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		    FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		  FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B
--							      --							    --								  --
Disassembly of <code object computeLastDigit at 0x7f33e26494b def computeLastDigit ( A , B ) :				    def computeLastDigit ( A , B , B , B , B , B , B , B , B , B  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 1 )					      	  variable = 1						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( variable )				      	  if ( A == B ) :					    								  alid/FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B
							      	      return 1						    								  .py", line 31	    if __name__ == '__main__':
3 4 LOAD_FAST 0 ( A )					      	  elif ( ( B - A ) >= 5 ) :				    								  ^ SyntaxError: invalid syntax
6 LOAD_FAST 1 ( B )					      	      return 0						    								  
8 COMPARE_OP 2 ( == )					      	  else :						    								  
10 POP_JUMP_IF_FALSE 16					      	      for i in range ( A + 1 , B + 1 ) :		    								  
							      		  variable = ( variable * ( i % 10 ) ) % 10	    								  
4 12 LOAD_CONST 1 ( 1 )					      	      return variable % 10				    								  
14 RETURN_VALUE						      								    								  
							      								    								  
5 >> 16 LOAD_FAST 1 ( B )				      								    								  
18 LOAD_FAST 0 ( A )					      								    								  
20 BINARY_SUBTRACT					      								    								  
22 LOAD_CONST 2 ( 5 )					      								    								  
24 COMPARE_OP 5 ( >= )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 28 LOAD_CONST 3 ( 0 )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
8 >> 32 SETUP_LOOP 42 ( to 76 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_FAST 0 ( A )					      								    								  
38 LOAD_CONST 1 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( B )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 20 ( to 74 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 56 LOAD_FAST 2 ( variable )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 LOAD_CONST 4 ( 10 )					      								    								  
62 BINARY_MODULO					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_CONST 4 ( 10 )					      								    								  
68 BINARY_MODULO					      								    								  
70 STORE_FAST 2 ( variable )				      								    								  
72 JUMP_ABSOLUTE 52					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
10 >> 76 LOAD_FAST 2 ( variable )			      								    								  
78 LOAD_CONST 4 ( 10 )					      								    								  
80 BINARY_MODULO					      								    								  
82 RETURN_VALUE						      								    								  
84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
Disassembly of <code object lexNext at 0x7f33e2653f60, file " def lexNext ( s , n ) :					    def lexNext ( s , n , s , s , s , s , s , s , s , s , s , s , script_not_found : None
2 0 SETUP_LOOP 82 ( to 84 )				      	  for i in range ( n - 1 , - 1 , - 1 ) :		    								  
2 LOAD_GLOBAL 0 ( range )				      	      if s [ i ] != 'z' :				    								  
4 LOAD_FAST 1 ( n )					      		  k = ord ( s [ i ] )				    								  
6 LOAD_CONST 1 ( 1 )					      		  s [ i ] = chr ( k + 1 )			    								  
8 BINARY_SUBTRACT					      		  return ''.join ( s )				    								  
10 LOAD_CONST 2 ( - 1 )					      	      s [ i ] = 'a'					    								  
12 LOAD_CONST 2 ( - 1 )					      								    								  
14 CALL_FUNCTION 3					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 62 ( to 82 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 3 ( 'z' )					      								    								  
30 COMPARE_OP 3 ( != )					      								    								  
32 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
4 34 LOAD_GLOBAL 1 ( ord )				      								    								  
36 LOAD_FAST 0 ( s )					      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 STORE_FAST 3 ( k )					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 2 ( chr )				      								    								  
48 LOAD_FAST 3 ( k )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 CALL_FUNCTION 1					      								    								  
56 LOAD_FAST 0 ( s )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 STORE_SUBSCR						      								    								  
							      								    								  
6 62 LOAD_CONST 4 ( '' )				      								    								  
64 LOAD_METHOD 3 ( join )				      								    								  
66 LOAD_FAST 0 ( s )					      								    								  
68 CALL_METHOD 1					      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
7 >> 72 LOAD_CONST 5 ( 'a' )				      								    								  
74 LOAD_FAST 0 ( s )					      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 STORE_SUBSCR						      								    								  
80 JUMP_ABSOLUTE 18					      								    								  
>> 82 POP_BLOCK						      								    								  
>> 84 LOAD_CONST 0 ( None )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
Disassembly of <code object printPascal at 0x7f33e2653f60, fi def printPascal ( n ) :					    def printPascal ( n , line ) :				  script_not_found : None
2 0 SETUP_LOOP 90 ( to 92 )				      	  for line in range ( 1 , n + 1 ) :			    	for line in range ( 1 , line + 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      C = 1 ;						    	    if line [ 0 ] == ' ' :				  
4 LOAD_CONST 1 ( 1 )					      	      for i in range ( 1 , line + 1 ) :			    		yield line					  
6 LOAD_FAST 0 ( n )					      		  print ( C , end = "" ) ;			    								  
8 LOAD_CONST 1 ( 1 )					      		  C = int ( C * ( line - i ) / i ) ;		    								  
10 BINARY_ADD						      	      print ( "" ) ;					    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 72 ( to 90 )				      								    								  
18 STORE_FAST 1 ( line )				      								    								  
							      								    								  
3 20 LOAD_CONST 1 ( 1 )					      								    								  
22 STORE_FAST 2 ( C )					      								    								  
							      								    								  
4 24 SETUP_LOOP 54 ( to 80 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 1 ( 1 )					      								    								  
30 LOAD_FAST 1 ( line )					      								    								  
32 LOAD_CONST 1 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 36 ( to 78 )				      								    								  
42 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 1 ( print )				      								    								  
46 LOAD_FAST 2 ( C )					      								    								  
48 LOAD_CONST 2 ( '' )					      								    								  
50 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
52 CALL_FUNCTION_KW 2					      								    								  
54 POP_TOP						      								    								  
							      								    								  
6 56 LOAD_GLOBAL 2 ( int )				      								    								  
58 LOAD_FAST 2 ( C )					      								    								  
60 LOAD_FAST 1 ( line )					      								    								  
62 LOAD_FAST 3 ( i )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 LOAD_FAST 3 ( i )					      								    								  
70 BINARY_TRUE_DIVIDE					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 STORE_FAST 2 ( C )					      								    								  
76 JUMP_ABSOLUTE 40					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
7 >> 80 LOAD_GLOBAL 1 ( print )				      								    								  
82 LOAD_CONST 2 ( '' )					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 POP_TOP						      								    								  
88 JUMP_ABSOLUTE 16					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 LOAD_CONST 0 ( None )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	      WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	    WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	  WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS
--							      --							    --								  --
Disassembly of <code object CountWays at 0x7f33e2644930, file def CountWays ( n ) :					    def CountWays ( n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  table = [ 0 ] * ( n + 1 )				    	table = [ 0 ] * ( table [ 1 ] + 1 )			  
2 BUILD_LIST 1						      	  table [ 0 ] = 1					    	for i in range ( n - 1 ) :				  
4 LOAD_FAST 0 ( n )					      	  for i in range ( 1 , n ) :				    	    table [ i ] = ( table [ 0 ] + 1 ) * ( table [ 1 ] + 1 
6 LOAD_CONST 2 ( 1 )					      	      for j in range ( i , n + 1 ) :			    	return table						  
8 BINARY_ADD						      		  table [ j ] += table [ j - i ]		    								  
10 BINARY_MULTIPLY					      	  return table [ n ]					    								  
12 STORE_FAST 1 ( table )				      								    								  
							      								    								  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 LOAD_FAST 1 ( table )				      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 SETUP_LOOP 66 ( to 90 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 LOAD_FAST 0 ( n )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 52 ( to 88 )				      								    								  
36 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 38 SETUP_LOOP 46 ( to 86 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 28 ( to 84 )				      								    								  
56 STORE_FAST 3 ( j )					      								    								  
							      								    								  
6 58 LOAD_FAST 1 ( table )				      								    								  
60 LOAD_FAST 3 ( j )					      								    								  
62 DUP_TOP_TWO						      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( table )				      								    								  
68 LOAD_FAST 3 ( j )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 BINARY_SUBSCR					      								    								  
76 INPLACE_ADD						      								    								  
78 ROT_THREE						      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 54					      								    								  
>> 84 POP_BLOCK						      								    								  
>> 86 JUMP_ABSOLUTE 34					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
7 >> 90 LOAD_FAST 1 ( table )				      								    								  
92 LOAD_FAST 0 ( n )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N
--							      --							    --								  --
Disassembly of <code object getMinSquares at 0x7f33e2653f60,  def getMinSquares ( n ) :					    def getMinSquSquSquE26606060606060606060606060606060606060606 script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if n <= 3 :						    								  
2 LOAD_CONST 1 ( 3 )					      	      return n ;					    								  
4 COMPARE_OP 1 ( <= )					      	  res = n						    								  
6 POP_JUMP_IF_FALSE 12					      	  for x in range ( 1 , n + 1 ) :			    								  
							      	      temp = x * x ;					    								  
3 8 LOAD_FAST 0 ( n )					      	      if temp > n :					    								  
10 RETURN_VALUE						      		  break						    								  
							      	      else :						    								  
4 >> 12 LOAD_FAST 0 ( n )				      		  res = min ( res , 1 + getMinSquares ( n - temp )  								  
14 STORE_FAST 1 ( res )					      	  return res ;						    								  
							      								    								  
5 16 SETUP_LOOP 64 ( to 82 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 46 ( to 80 )				      								    								  
34 STORE_FAST 2 ( x )					      								    								  
							      								    								  
6 36 LOAD_FAST 2 ( x )					      								    								  
38 LOAD_FAST 2 ( x )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 STORE_FAST 3 ( temp )				      								    								  
							      								    								  
7 44 LOAD_FAST 3 ( temp )				      								    								  
46 LOAD_FAST 0 ( n )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
8 52 BREAK_LOOP						      								    								  
54 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
10 >> 56 LOAD_GLOBAL 1 ( min )				      								    								  
58 LOAD_FAST 1 ( res )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 LOAD_GLOBAL 2 ( getMinSquares )			      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 LOAD_FAST 3 ( temp )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 BINARY_ADD						      								    								  
74 CALL_FUNCTION 2					      								    								  
76 STORE_FAST 1 ( res )					      								    								  
78 JUMP_ABSOLUTE 32					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
11 >> 82 LOAD_FAST 1 ( res )				      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_EXTRA_CHARACTER_STRING_1			      FIND_ONE_EXTRA_CHARACTER_STRING_1				    FIND_ONE_EXTRA_CHARACTER_STRING_1				  FIND_ONE_EXTRA_CHARACTER_STRING_1
--							      --							    --								  --
Disassembly of <code object findExtraCharcter at 0x7f33e2649a def findExtraCharcter ( strA , strB ) :			    def findExtraCharcter ( strA , strA , strA , strA , strA , st error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( res )					      	  for i in range ( 0 , len ( strA ) ) :			    								  alid/FIND_ONE_EXTRA_CHARACTER_STRING_1.py", line 2
							      	      res = res ^ ( ord ) ( strA [ i ] )		    								  8	if __name__ == '__main__':	^ SyntaxErro
3 4 SETUP_LOOP 38 ( to 44 )				      	  for i in range ( 0 , len ( strB ) ) :			    								  r: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      	      res = res ^ ( ord ) ( strB [ i ] )		    								  
8 LOAD_CONST 1 ( 0 )					      	  return ( ( chr ) ( res ) ) ;				    								  
10 LOAD_GLOBAL 1 ( len )				      								    								  
12 LOAD_FAST 0 ( strA )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 20 ( to 42 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 2 ( res )				      								    								  
26 LOAD_GLOBAL 2 ( ord )				      								    								  
28 LOAD_FAST 0 ( strA )					      								    								  
30 LOAD_FAST 3 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 CALL_FUNCTION 1					      								    								  
36 BINARY_XOR						      								    								  
38 STORE_FAST 2 ( res )					      								    								  
40 JUMP_ABSOLUTE 20					      								    								  
>> 42 POP_BLOCK						      								    								  
							      								    								  
5 >> 44 SETUP_LOOP 38 ( to 84 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 LOAD_GLOBAL 1 ( len )				      								    								  
52 LOAD_FAST 1 ( strB )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 20 ( to 82 )				      								    								  
62 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 64 LOAD_FAST 2 ( res )				      								    								  
66 LOAD_GLOBAL 2 ( ord )				      								    								  
68 LOAD_FAST 1 ( strB )					      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_XOR						      								    								  
78 STORE_FAST 2 ( res )					      								    								  
80 JUMP_ABSOLUTE 60					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
7 >> 84 LOAD_GLOBAL 3 ( chr )				      								    								  
86 LOAD_FAST 2 ( res )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUM_CONTIGUOUS_SUBARRAY			      SMALLEST_SUM_CONTIGUOUS_SUBARRAY				    SMALLEST_SUM_CONTIGUOUS_SUBARRAY				  SMALLEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
Disassembly of <code object <<unk>> stSumSubarr at 0x7f33e264 def <<unk>> stSumSubarr ( arr , n ) :			    def esearch_results stSumSubarr ( arr , n , width , height ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( sys )				      	  min_ending_here = sys.maxsize				    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_ATTR 1 ( maxsize )				      	  min_so_far = sys.maxsize				    								  alid/SMALLEST_SUM_CONTIGUOUS_SUBARRAY.py", line 31
4 STORE_FAST 2 ( min_ending_here )			      	  for i in range ( n ) :				    								       def f_filled stSumSubarr ( arr , n , width ,
							      	      if ( min_ending_here > 0 ) :			    								  height , width , height , width , height , width ,
3 6 LOAD_GLOBAL 0 ( sys )				      		  min_ending_here = arr [ i ]			    								   height , width , height , height , width , height
8 LOAD_ATTR 1 ( maxsize )				      	      else :						    								   , height , height , height , height , height , he
10 STORE_FAST 3 ( min_so_far )				      		  min_ending_here += arr [ i ]			    								  ight , height , height , height , height , height
							      	      min_so_far = min ( min_so_far , min_ending_here )	    								  , height , height , height , height , height , hei
4 12 SETUP_LOOP 56 ( to 70 )				      	  return min_so_far					    								  ght , height , height , height , height , height ,
14 LOAD_GLOBAL 2 ( range )				      								    								   height , height , height , height , height , heig
16 LOAD_FAST 1 ( n )					      								    								  ht , height , height , height , height , height ,
18 CALL_FUNCTION 1					      								    								  height , height , height , height , height , heigh
20 GET_ITER						      								    								  t , height , height , height , height , height , h
>> 22 FOR_ITER 44 ( to 68 )				      								    								  eight , height , height , height , height , height
24 STORE_FAST 4 ( i )					      								    								   , height , height , height , height , height , he
							      								    								  ight , height , height , height , height , height
5 26 LOAD_FAST 2 ( min_ending_here )			      								    								  , height , height , height , height , height , hei
28 LOAD_CONST 1 ( 0 )					      								    								  ght , height , height , height , height , height ,
30 COMPARE_OP 4 ( > )					      								    								   height , height , height , height , height , heig
32 POP_JUMP_IF_FALSE 44					      								    								  ht , height , height , height , height , height ,
							      								    								  height , height , height , height , height , heigh
6 34 LOAD_FAST 0 ( arr )				      								    								  t , height , height , height , height , height , h
36 LOAD_FAST 4 ( i )					      								    								  eight , height , height , height , height , height
38 BINARY_SUBSCR					      								    								   , height , height , height , height , height , he
40 STORE_FAST 2 ( min_ending_here )			      								    								  ight , height , height , height , height , height
42 JUMP_FORWARD 12 ( to 56 )				      								    								  , height , height , height , height , height , hei
							      								    								  ght , height , height , height , height , height ,
8 >> 44 LOAD_FAST 2 ( min_ending_here )			      								    								   height , height , height , height , height , heig
46 LOAD_FAST 0 ( arr )					      								    								  ht , height , height , height , height , height ,
48 LOAD_FAST 4 ( i )					      								    								  height , height , height , height , height , heigh
50 BINARY_SUBSCR					      								    								  t , height , height , height , height , height , h
52 INPLACE_ADD						      								    								  eight , height , height , height , height , height
54 STORE_FAST 2 ( min_ending_here )			      								    								   , height , height , height , height , height , he
							      								    								  ight , height , height , height , height , height
9 >> 56 LOAD_GLOBAL 3 ( min )				      								    								  , height , height , height , height , height , hei
58 LOAD_FAST 3 ( min_so_far )				      								    								  ght , height , height , height , height , height ,
60 LOAD_FAST 2 ( min_ending_here )			      								    								   height , height , height , height , height , heig
62 CALL_FUNCTION 2					      								    								  ht , height , height , height , height , height ,
64 STORE_FAST 3 ( min_so_far )				      								    								  height , height , height , height , height , heigh
66 JUMP_ABSOLUTE 22					      								    								  t , height , height , height , height , height , h
>> 68 POP_BLOCK						      								    								  eight , height , height , height , height , height
							      								    								   , height , height , height , height , height , he
10 >> 70 LOAD_FAST 3 ( min_so_far )			      								    								  ight , height , height , height , height , height
72 RETURN_VALUE NEW_LINE				      								    								  , height , height , height , height , height , hei
							      								    								  ght , height , height , height , height , height ,
							      								    								   height , height , height , height , height , heig
							      								    								  ht , height , height , height , height , height ,
							      								    								  height , height , height , height
							      								    								  	     ^ SyntaxError: invalid syntax
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
Disassembly of <code object ceilSearch at 0x7f33e2644f60, fil def ceilSearch ( arr , low , high , x ) :			    def ceilSearch ( arr , low , high , high ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 3 ( x )					      	  if x <= arr [ low ] :					    	if low >= high :					  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( arr )					      	      return low					    	    return low						  alid/CEILING_IN_A_SORTED_ARRAY.py", line 29	  de
4 LOAD_FAST 1 ( low )					      	  i = low						    	low = low >= high					  f f_filled ( arr , low , high , high ) :     ^ Syn
6 BINARY_SUBSCR						      	  for i in range ( high ) :				    	for i in range ( low ) :				  taxError: duplicate argument 'high' in function de
8 COMPARE_OP 1 ( <= )					      	      if arr [ i ] == x :				    	    if low >= high :					  finition
10 POP_JUMP_IF_FALSE 16					      		  return i					    		return low					  
							      	      if arr [ i ] < x and arr [ i + 1 ] >= x :		    	return arr [ low ]					  
3 12 LOAD_FAST 1 ( low )				      		  return i + 1					    								  
14 RETURN_VALUE						      	  return - 1						    								  
							      								    								  
4 >> 16 LOAD_FAST 1 ( low )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 20 SETUP_LOOP 68 ( to 90 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 2 ( high )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 56 ( to 88 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 3 ( x )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 50					      								    								  
							      								    								  
7 46 LOAD_FAST 4 ( i )					      								    								  
48 RETURN_VALUE						      								    								  
							      								    								  
8 >> 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 3 ( x )					      								    								  
58 COMPARE_OP 0 ( < )					      								    								  
60 POP_JUMP_IF_FALSE 30					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 3 ( x )					      								    								  
74 COMPARE_OP 5 ( >= )					      								    								  
76 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
9 78 LOAD_FAST 4 ( i )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 RETURN_VALUE						      								    								  
86 JUMP_ABSOLUTE 30					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
10 >> 90 LOAD_CONST 2 ( - 1 )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	      CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	    CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER		  CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER
--							      --							    --								  --
Disassembly of <code object areAnagram at 0x7f33e2653f60, fil def areAnagram ( str1 , str2 ) :				    def areAnagram ( str1 , str2 , str2 , str2 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n1 = len ( str1 )					    	n1 = len ( str1 )					  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( str1 )					      	  n2 = len ( str2 )					    	n2 = len ( str1 )					  alid/CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH
4 CALL_FUNCTION 1					      	  if n1 != n2 :						    	if n1 != 0 :						  _OTHER.py", line 30	  def f_filled ( str1 , str2
6 STORE_FAST 2 ( n1 )					      	      return 0						    	    return 0						   , str2 , str2 ) :	 ^ SyntaxError: duplicate ar
							      	  str1 = sorted ( str1 )				    	if n1 != 0 :						  gument 'str2' in function definition
3 8 LOAD_GLOBAL 0 ( len )				      	  str2 = sorted ( str2 )				    	    return 0						  
10 LOAD_FAST 1 ( str2 )					      	  for i in range ( 0 , n1 ) :				    	if n1 != 0 :						  
12 CALL_FUNCTION 1					      	      if str1 [ i ] != str2 [ i ] :			    	    return 0						  
14 STORE_FAST 3 ( n2 )					      		  return 0					    	else :							  
							      	  return 1						    	    return 0						  
4 16 LOAD_FAST 2 ( n1 )					      								    								  
18 LOAD_FAST 3 ( n2 )					      								    								  
20 COMPARE_OP 3 ( != )					      								    								  
22 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_GLOBAL 1 ( sorted )			      								    								  
30 LOAD_FAST 0 ( str1 )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 STORE_FAST 0 ( str1 )				      								    								  
							      								    								  
7 36 LOAD_GLOBAL 1 ( sorted )				      								    								  
38 LOAD_FAST 1 ( str2 )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 STORE_FAST 1 ( str2 )				      								    								  
							      								    								  
8 44 SETUP_LOOP 38 ( to 84 )				      								    								  
46 LOAD_GLOBAL 2 ( range )				      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 LOAD_FAST 2 ( n1 )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 24 ( to 82 )				      								    								  
58 STORE_FAST 4 ( i )					      								    								  
							      								    								  
9 60 LOAD_FAST 0 ( str1 )				      								    								  
62 LOAD_FAST 4 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( str2 )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
10 76 LOAD_CONST 1 ( 0 )				      								    								  
78 RETURN_VALUE						      								    								  
80 JUMP_ABSOLUTE 56					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
11 >> 84 LOAD_CONST 2 ( 1 )				      								    								  
86 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
--							      --							    --								  --
Disassembly of <code object getOddOccurrence at 0x7f33e26494b def getOddOccurrence ( arr , arr_size ) :			    def getOddOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcO error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 86 ( to 88 )				      	  for i in range ( 0 , arr_size ) :			    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    								  alid/FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , arr_size ) :			    								  .py", line 28	    def f_filled		^ Sy
6 LOAD_FAST 1 ( arr_size )				      		  if arr [ i ] == arr [ j ] :			    								  ntaxError: invalid syntax
8 CALL_FUNCTION 2					      		      count += 1				    								  
10 GET_ITER						      	      if ( count % 2 != 0 ) :				    								  
>> 12 FOR_ITER 72 ( to 86 )				      		  return arr [ i ]				    								  
14 STORE_FAST 2 ( i )					      	  return - 1						    								  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 20 SETUP_LOOP 42 ( to 64 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( arr_size )				      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 28 ( to 62 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 4 ( j )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
6 52 LOAD_FAST 3 ( count )				      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( count )				      								    								  
60 JUMP_ABSOLUTE 32					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
7 >> 64 LOAD_FAST 3 ( count )				      								    								  
66 LOAD_CONST 3 ( 2 )					      								    								  
68 BINARY_MODULO					      								    								  
70 LOAD_CONST 1 ( 0 )					      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 12					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_CONST 4 ( - 1 )				      								    								  
90 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_<unk> CATION			      CHECK_INTEGER_OVERFLOW_<unk> CATION			    CHECK_INTEGER_OVERFLOW_<unk> CATION				  CHECK_INTEGER_OVERFLOW_<unk> CATION
--							      --							    --								  --
Disassembly of <code object isOverflow at 0x7f33e26494b0, fil def isOverflow ( a , b ) :				    def isOverflow ( a , b ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  if ( a == 0 or b == 0 ) :				    	if b == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return False					    	    return False					  
4 COMPARE_OP 2 ( == )					      	  result = a * b					    	if b == 0 :						  
6 POP_JUMP_IF_TRUE 16					      	  if ( result >= 9223372036854775807 or result <= - 9223372 	    return False					  
8 LOAD_FAST 1 ( b )					      	      result = 0					    	if b == 0 :						  
10 LOAD_CONST 1 ( 0 )					      	  if ( a == ( result // b ) ) :				    	    return False					  
12 COMPARE_OP 2 ( == )					      	      print ( result // b )				    	if b == 1 :						  
14 POP_JUMP_IF_FALSE 20					      	      return False					    	    return False					  
							      	  else :						    	if b == - 1 :						  
3 >> 16 LOAD_CONST 2 ( False )				      	      return True					    	    return False					  
18 RETURN_VALUE						      								    	if b == - 1 :						  
							      								    	    return False					  
4 >> 20 LOAD_FAST 0 ( a )				      								    	if b == - 1 :						  
22 LOAD_FAST 1 ( b )					      								    	    return False					  
24 BINARY_MULTIPLY					      								    	if b == - 1 :						  
26 STORE_FAST 2 ( result )				      								    	    return False					  
							      								    	if b == - 1 :						  
5 28 LOAD_FAST 2 ( result )				      								    	    return False					  
30 LOAD_CONST 3 ( 9223372036854775807 )			      								    	if b == - 1 :						  
32 COMPARE_OP 5 ( >= )					      								    	    return False					  
34 POP_JUMP_IF_TRUE 44					      								    	if b == - 1 :						  
36 LOAD_FAST 2 ( result )				      								    	    return False					  
38 LOAD_CONST 4 ( - 9223372036854775808 )		      								    	if b == - 1 :						  
40 COMPARE_OP 1 ( <= )					      								    	    return False					  
42 POP_JUMP_IF_FALSE 48					      								    	if b == - 1 :						  
							      								    	    return False					  
6 >> 44 LOAD_CONST 1 ( 0 )				      								    	if b == - 1 :						  
46 STORE_FAST 2 ( result )				      								    	    return False					  
							      								    	if b == - 1 :						  
7 >> 48 LOAD_FAST 0 ( a )				      								    	    return False					  
50 LOAD_FAST 2 ( result )				      								    return True							  
52 LOAD_FAST 1 ( b )					      								    								  
54 BINARY_FLOOR_DIVIDE					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
8 60 LOAD_GLOBAL 0 ( print )				      								    								  
62 LOAD_FAST 2 ( result )				      								    								  
64 LOAD_FAST 1 ( b )					      								    								  
66 BINARY_FLOOR_DIVIDE					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 POP_TOP						      								    								  
							      								    								  
9 72 LOAD_CONST 2 ( False )				      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
11 >> 76 LOAD_CONST 5 ( True )				      								    								  
78 RETURN_VALUE						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
Disassembly of <code object findElements at 0x7f33e26494b0, f def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
2 0 SETUP_LOOP 88 ( to 90 )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
2 LOAD_GLOBAL 0 ( range )				      	      count = 0						    	    count = 0						  
4 LOAD_FAST 1 ( n )					      	      for j in range ( 0 , n ) :			    	    count += 1						  
6 CALL_FUNCTION 1					      		  if arr [ j ] > arr [ i ] :			    	    count += 1						  
8 GET_ITER						      		      count = count + 1				    	return count						  
>> 10 FOR_ITER 76 ( to 88 )				      	      if count >= 2 :					    								  
12 STORE_FAST 2 ( i )					      		  print ( arr [ i ] , end = " " )		    								  
							      								    								  
3 14 LOAD_CONST 1 ( 0 )					      								    								  
16 STORE_FAST 3 ( count )				      								    								  
							      								    								  
4 18 SETUP_LOOP 42 ( to 62 )				      								    								  
20 LOAD_GLOBAL 0 ( range )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 28 ( to 60 )				      								    								  
32 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 4 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 4 ( > )					      								    								  
48 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
6 50 LOAD_FAST 3 ( count )				      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( count )				      								    								  
58 JUMP_ABSOLUTE 30					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
7 >> 62 LOAD_FAST 3 ( count )				      								    								  
64 LOAD_CONST 3 ( 2 )					      								    								  
66 COMPARE_OP 5 ( >= )					      								    								  
68 POP_JUMP_IF_FALSE 10					      								    								  
							      								    								  
8 70 LOAD_GLOBAL 1 ( print )				      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( ' ' )					      								    								  
80 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
82 CALL_FUNCTION_KW 2					      								    								  
84 POP_TOP						      								    								  
86 JUMP_ABSOLUTE 10					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER					      SUM_FACTORS_NUMBER					    SUM_FACTORS_NUMBER						  SUM_FACTORS_NUMBER
--							      --							    --								  --
Disassembly of <code object divSum at 0x7f33e2653ed0, file "< def divSum ( n ) :					    def divSum ( n ) :						  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0						    	result = 0						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 1 ( result )				      	  for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :  	while n < len ( n ) :					  024/eval_scripts/dis_sa-python_sa.valid/SUM_FACTOR
							      	      if ( n % i == 0 ) :				    	    result = n // 2					  S_NUMBER.py", line 55, in <module>	 if f_filled
3 4 SETUP_LOOP 82 ( to 88 )				      		  if ( i == ( n / i ) ) :			    	    n += 1						  (*parameters_set) == f_gold(*parameters_set):	  Fi
6 LOAD_GLOBAL 0 ( range )				      		      result = result + i			    	    for i in range ( n ) :				  le "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7
8 LOAD_CONST 2 ( 2 )					      		  else :					    		result += n					  a0p024/eval_scripts/dis_sa-python_sa.valid/SUM_FAC
10 LOAD_GLOBAL 1 ( int )				      		      result = result + ( i + n // i )		    	return result						  TORS_NUMBER.py", line 32, in f_filled	    while n
12 LOAD_GLOBAL 2 ( math )				      	  return ( result + n + 1 )				    								  < len ( n ) : TypeError: object of type 'int' has
14 LOAD_METHOD 3 ( sqrt )				      								    								  no len()
16 LOAD_FAST 0 ( n )					      								    								  
18 CALL_METHOD 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 LOAD_CONST 3 ( 1 )					      								    								  
24 BINARY_ADD						      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 54 ( to 86 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 34 LOAD_FAST 0 ( n )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_MODULO					      								    								  
40 LOAD_CONST 1 ( 0 )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
5 46 LOAD_FAST 2 ( i )					      								    								  
48 LOAD_FAST 0 ( n )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_TRUE_DIVIDE					      								    								  
54 COMPARE_OP 2 ( == )					      								    								  
56 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 58 LOAD_FAST 1 ( result )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 1 ( result )				      								    								  
66 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
8 >> 68 LOAD_FAST 1 ( result )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_FAST 0 ( n )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_FLOOR_DIVIDE					      								    								  
78 BINARY_ADD						      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 1 ( result )				      								    								  
84 JUMP_ABSOLUTE 30					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 1 ( result )				      								    								  
90 LOAD_FAST 0 ( n )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_CONST 3 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH						      BINARY_SEARCH						    BINARY_SEARCH						  BINARY_SEARCH
--							      --							    --								  --
Disassembly of <code object binarySearch at 0x7f33e26494b0, f def binarySearch ( arr , l , r , x ) :			    def binarySearch ( arr , l , l , l , l , l , l , l , l , l ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( r )					      	  if r >= l :						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 1 ( l )					      	      mid = l + ( r - l ) // 2				    								  alid/BINARY_SEARCH.py", line 32     if __name__ ==
4 COMPARE_OP 5 ( >= )					      	      if arr [ mid ] == x :				    								   '__main__':	    ^ SyntaxError: invalid syntax
6 POP_JUMP_IF_FALSE 90					      		  return mid					    								  
							      	      elif arr [ mid ] > x :				    								  
3 8 LOAD_FAST 1 ( l )					      		  return binarySearch ( arr , l , mid - 1 , x )	    								  
10 LOAD_FAST 2 ( r )					      	      else :						    								  
12 LOAD_FAST 1 ( l )					      		  return binarySearch ( arr , mid + 1 , r , x )	    								  
14 BINARY_SUBTRACT					      	  else :						    								  
16 LOAD_CONST 1 ( 2 )					      	      return - 1					    								  
18 BINARY_FLOOR_DIVIDE					      								    								  
20 BINARY_ADD						      								    								  
22 STORE_FAST 4 ( mid )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 4 ( mid )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 3 ( x )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
5 36 LOAD_FAST 4 ( mid )				      								    								  
38 RETURN_VALUE						      								    								  
							      								    								  
6 >> 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( mid )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 3 ( x )					      								    								  
48 COMPARE_OP 4 ( > )					      								    								  
50 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 52 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 1 ( l )					      								    								  
58 LOAD_FAST 4 ( mid )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 CALL_FUNCTION 4					      								    								  
68 RETURN_VALUE						      								    								  
							      								    								  
9 >> 70 LOAD_GLOBAL 0 ( binarySearch )			      								    								  
72 LOAD_FAST 0 ( arr )					      								    								  
74 LOAD_FAST 4 ( mid )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 LOAD_FAST 2 ( r )					      								    								  
82 LOAD_FAST 3 ( x )					      								    								  
84 CALL_FUNCTION 4					      								    								  
86 RETURN_VALUE						      								    								  
88 JUMP_FORWARD 4 ( to 94 )				      								    								  
							      								    								  
11 >> 90 LOAD_CONST 3 ( - 1 )				      								    								  
92 RETURN_VALUE						      								    								  
>> 94 LOAD_CONST 0 ( None )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findExtra at 0x7f33e2649a50, file def findExtra ( arr1 , arr2 , n ) :			    def findExtra ( arr1 , arr2 , arr2 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 2 ( n )					      	  index = n						    	index = 0						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 3 ( index )				      	  left = 0						    	left = 0						  alid/FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE
							      	  right = n - 1						    	left = left - 1						  _SORTED_ARRAY_1.py", line 116	    right =
3 4 LOAD_CONST 1 ( 0 )					      	  while ( left <= right ) :				    	right = left - 1					    ^ SyntaxError: invalid syntax
6 STORE_FAST 4 ( left )					      	      mid = ( int ) ( ( left + right ) / 2 )		    	left = left - 1						  
							      	      if ( arr2 [ mid ] == arr1 [ mid ] ) :		    	right = left - 1					  
4 8 LOAD_FAST 2 ( n )					      		  left = mid + 1				    	right = left - 1					  
10 LOAD_CONST 2 ( 1 )					      	      else :						    	right = left - 1					  
12 BINARY_SUBTRACT					      		  index = mid					    	right = left - 1					  
14 STORE_FAST 5 ( right )				      		  right = mid - 1				    	right = left - 1					  
							      	  return index						    	right = left - 1					  
5 16 SETUP_LOOP 66 ( to 84 )				      								    	right = left - 1					  
>> 18 LOAD_FAST 4 ( left )				      								    	right = left - 1					  
20 LOAD_FAST 5 ( right )				      								    	right = right - 1					  
22 COMPARE_OP 1 ( <= )					      								    	right = right - 1					  
24 POP_JUMP_IF_FALSE 82					      								    	right = right - 1					  
							      								    	right = right - 1					  
6 26 LOAD_GLOBAL 0 ( int )				      								    	right = right - 1					  
28 LOAD_FAST 4 ( left )					      								    	right = right - 1					  
30 LOAD_FAST 5 ( right )				      								    	right = right - 1					  
32 BINARY_ADD						      								    	right = right - 1					  
34 LOAD_CONST 3 ( 2 )					      								    	right = right - 1					  
36 BINARY_TRUE_DIVIDE					      								    	right = right - 1					  
38 CALL_FUNCTION 1					      								    	right = right - 1					  
40 STORE_FAST 6 ( mid )					      								    	right = right - 1					  
							      								    	right = right - 1					  
7 42 LOAD_FAST 1 ( arr2 )				      								    	right = right - 1					  
44 LOAD_FAST 6 ( mid )					      								    	right = right - 1					  
46 BINARY_SUBSCR					      								    	right = right - 1					  
48 LOAD_FAST 0 ( arr1 )					      								    	right = right - 1					  
50 LOAD_FAST 6 ( mid )					      								    	right = right - 1					  
52 BINARY_SUBSCR					      								    	right = right - 1					  
54 COMPARE_OP 2 ( == )					      								    	right = right - 1					  
56 POP_JUMP_IF_FALSE 68					      								    	right = right - 1					  
							      								    	right = right - 1					  
8 58 LOAD_FAST 6 ( mid )				      								    	right = right - 1					  
60 LOAD_CONST 2 ( 1 )					      								    	right = right - 1					  
62 BINARY_ADD						      								    	right = right - 1					  
64 STORE_FAST 4 ( left )				      								    	right = right - 1					  
66 JUMP_ABSOLUTE 18					      								    	right = right - 1					  
							      								    	right = right - 1					  
10 >> 68 LOAD_FAST 6 ( mid )				      								    	right = right - 1					  
70 STORE_FAST 3 ( index )				      								    	right = right - 1					  
							      								    	right = right - 1					  
11 72 LOAD_FAST 6 ( mid )				      								    	right = right - 1					  
74 LOAD_CONST 2 ( 1 )					      								    	right = right - 1					  
76 BINARY_SUBTRACT					      								    	right = right - 1					  
78 STORE_FAST 5 ( right )				      								    	right = right - 1					  
80 JUMP_ABSOLUTE 18					      								    	right = right - 1					  
>> 82 POP_BLOCK						      								    	right = right - 1					  
							      								    	right = right - 1					  
12 >> 84 LOAD_FAST 3 ( index )				      								    	right = right - 1					  
86 RETURN_VALUE NEW_LINE				      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right						  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right						  
							      								    	right = right - 1					  
							      								    	right = right - 1					  
							      								    	right = right						  
							      								    	right = right - 1					  
-							      -								    	right =-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV
--							      --							    --								  --
Disassembly of <code object minTime at 0x7f33e2644f60, file " def minTime ( arr , n ) :					    def minTime ( arr , n , n ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n <= 0 ) : return 0				    	if n <= 0 :						  
2 LOAD_CONST 1 ( 0 )					      	  incl = arr [ 0 ]					    	    return 0						  
4 COMPARE_OP 1 ( <= )					      	  excl = 0						    	elif n > 0 :						  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 1 , n ) :				    	    return 0						  
8 LOAD_CONST 1 ( 0 )					      	      incl_new = arr [ i ] + min ( excl , incl )	    	elif n > 0 :						  
10 RETURN_VALUE						      	      excl_new = incl					    	    return 0						  
							      	      incl = incl_new					    	elif n > n :						  
3 >> 12 LOAD_FAST 0 ( arr )				      	      excl = excl_new					    	    return 0						  
14 LOAD_CONST 1 ( 0 )					      	  return min ( incl , excl )				    	elif n > n :						  
16 BINARY_SUBSCR					      								    	    return 0						  
18 STORE_FAST 2 ( incl )				      								    	elif n > 0 :						  
							      								    	    return 0						  
4 20 LOAD_CONST 1 ( 0 )					      								    	else :							  
22 STORE_FAST 3 ( excl )				      								    	    return 0						  
							      								    								  
5 24 SETUP_LOOP 48 ( to 74 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 34 ( to 72 )				      								    								  
38 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_GLOBAL 1 ( min )				      								    								  
48 LOAD_FAST 3 ( excl )					      								    								  
50 LOAD_FAST 2 ( incl )					      								    								  
52 CALL_FUNCTION 2					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 5 ( incl_new )				      								    								  
							      								    								  
7 58 LOAD_FAST 2 ( incl )				      								    								  
60 STORE_FAST 6 ( excl_new )				      								    								  
							      								    								  
8 62 LOAD_FAST 5 ( incl_new )				      								    								  
64 STORE_FAST 2 ( incl )				      								    								  
							      								    								  
9 66 LOAD_FAST 6 ( excl_new )				      								    								  
68 STORE_FAST 3 ( excl )				      								    								  
70 JUMP_ABSOLUTE 36					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
10 >> 74 LOAD_GLOBAL 1 ( min )				      								    								  
76 LOAD_FAST 2 ( incl )					      								    								  
78 LOAD_FAST 3 ( excl )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS	      COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		    COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		  COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS
--							      --							    --								  --
Disassembly of <code object countWords at 0x7f33e2644930, fil def countWords ( stri , n ) :				    def countWords ( stri , stri , stri , stri , stri , stri , st error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  m = dict ( )						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    								  alid/COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WO
4 STORE_FAST 2 ( m )					      	      m [ stri [ i ] ] = m.get ( stri [ i ] , 0 ) + 1	    								  RDS.py", line 30     if __name__ == '__main__':
							      	  res = 0						    								     ^ SyntaxError: invalid syntax
3 6 SETUP_LOOP 44 ( to 52 )				      	  for i in m.values ( ) :				    								  
8 LOAD_GLOBAL 1 ( range )				      	      if i == 2 :					    								  
10 LOAD_FAST 1 ( n )					      		  res += 1					    								  
12 CALL_FUNCTION 1					      	  return res						    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 32 ( to 50 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 2 ( m )					      								    								  
22 LOAD_METHOD 2 ( get )				      								    								  
24 LOAD_FAST 0 ( stri )					      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 CALL_METHOD 2					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 LOAD_FAST 2 ( m )					      								    								  
40 LOAD_FAST 0 ( stri )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_SUBSCR						      								    								  
48 JUMP_ABSOLUTE 16					      								    								  
>> 50 POP_BLOCK						      								    								  
							      								    								  
5 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 4 ( res )					      								    								  
							      								    								  
6 56 SETUP_LOOP 32 ( to 90 )				      								    								  
58 LOAD_FAST 2 ( m )					      								    								  
60 LOAD_METHOD 3 ( values )				      								    								  
62 CALL_METHOD 0					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 20 ( to 88 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_FAST 3 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 COMPARE_OP 2 ( == )					      								    								  
76 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 78 LOAD_FAST 4 ( res )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 4 ( res )					      								    								  
86 JUMP_ABSOLUTE 66					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
9 >> 90 LOAD_FAST 4 ( res )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
Disassembly of <code object countPairsWithDiffK at 0x7f33e264 def countPairsWithDiffK ( arr , n , k ) :			    def countPairsWithDiffK ( arr , n ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  count = 0						    	count = 0						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 3 ( count )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  024/eval_scripts/dis_sa-python_sa.valid/COUNT_PAIR
							      	      for j in range ( i + 1 , n ) :			    	    count += 1						  S_DIFFERENCE_EQUAL_K.py", line 50, in <module>
3 4 SETUP_LOOP 90 ( to 96 )				      		  if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  	for j in range ( 0 , n ) :				   if f_filled(*parameters_set) == f_gold(*parameter
6 LOAD_GLOBAL 0 ( range )				      		      count += 1				    	    count += 1						  s_set): TypeError: f_filled() takes 2 positional a
8 LOAD_CONST 1 ( 0 )					      	  return count						    	return count						  rguments but 3 were given
10 LOAD_FAST 1 ( n )					      								    								  
12 CALL_FUNCTION 2					      								    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 76 ( to 94 )				      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 70 ( to 92 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 52 ( to 90 )				      								    								  
38 STORE_FAST 5 ( j )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 5 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 LOAD_FAST 2 ( k )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_TRUE 80					      								    								  
60 LOAD_FAST 0 ( arr )					      								    								  
62 LOAD_FAST 5 ( j )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 0 ( arr )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 2 ( k )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
6 >> 80 LOAD_FAST 3 ( count )				      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 3 ( count )				      								    								  
88 JUMP_ABSOLUTE 36					      								    								  
>> 90 POP_BLOCK						      								    								  
>> 92 JUMP_ABSOLUTE 16					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
7 >> 96 LOAD_FAST 3 ( count )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVEN_FIBONACCI_NUMBERS_SUM				      EVEN_FIBONACCI_NUMBERS_SUM				    EVEN_FIBONACCI_NUMBERS_SUM					  EVEN_FIBONACCI_NUMBERS_SUM
--							      --							    --								  --
Disassembly of <code object evenFibSum at 0x7f33e2649a50, fil def evenFibSum ( limit ) :				    def evenFibSum ( limit ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( limit )				      	  if ( limit < 2 ) :					    	if limit < 2 :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 2 )					      	      return 0						    	    return 0						  alid/EVEN_FIBONACCI_NUMBERS_SUM.py", line 128
4 COMPARE_OP 0 ( < )					      	  ef1 = 0						    	ef1 = 0							  f1 f1 = f1	     ^ SyntaxError: invalid syntax
6 POP_JUMP_IF_FALSE 12					      	  ef2 = 2						    	ef1 = 2							  
							      	  sm = ef1 + ef2					    	ef1 = 1							  
3 8 LOAD_CONST 2 ( 0 )					      	  while ( ef2 <= limit ) :				    	ef1 = 1							  
10 RETURN_VALUE						      	      ef3 = 4 * ef2 + ef1				    	ef1 = 1							  
							      	      if ( ef3 > limit ) :				    	ef1 = 1							  
4 >> 12 LOAD_CONST 2 ( 0 )				      		  break						    	ef1 = 1							  
14 STORE_FAST 1 ( ef1 )					      	      ef1 = ef2						    	ef1 = 1							  
							      	      ef2 = ef3						    	ef1 = 1							  
5 16 LOAD_CONST 1 ( 2 )					      	      sm = sm + ef2					    	ef1 = 1							  
18 STORE_FAST 2 ( ef2 )					      	  return sm						    	ef1 = 1							  
							      								    	ef1 = 1							  
6 20 LOAD_FAST 1 ( ef1 )				      								    	ef1 = 1							  
22 LOAD_FAST 2 ( ef2 )					      								    	ef1 = 1							  
24 BINARY_ADD						      								    	ef1 = 0							  
26 STORE_FAST 3 ( sm )					      								    	ef1 = 0							  
							      								    	ef1 = 0							  
7 28 SETUP_LOOP 50 ( to 80 )				      								    	ef1 = 1							  
>> 30 LOAD_FAST 2 ( ef2 )				      								    	ef1 = 1							  
32 LOAD_FAST 0 ( limit )				      								    	ef1 = 0							  
34 COMPARE_OP 1 ( <= )					      								    	ef1 = 1							  
36 POP_JUMP_IF_FALSE 78					      								    	ef1 = 1							  
							      								    	ef1 = 1							  
8 38 LOAD_CONST 3 ( 4 )					      								    	ef1 = 1							  
40 LOAD_FAST 2 ( ef2 )					      								    	ef1 = 1							  
42 BINARY_MULTIPLY					      								    	ef1 = 1							  
44 LOAD_FAST 1 ( ef1 )					      								    	ef1 = 1							  
46 BINARY_ADD						      								    	ef1 = 1							  
48 STORE_FAST 4 ( ef3 )					      								    	ef1 = 1							  
							      								    	ef1 = 1							  
9 50 LOAD_FAST 4 ( ef3 )				      								    	ef1 = 1							  
52 LOAD_FAST 0 ( limit )				      								    	ef1 = 1							  
54 COMPARE_OP 4 ( > )					      								    	ef1 = 1							  
56 POP_JUMP_IF_FALSE 60					      								    	ef1 = 1							  
							      								    	ef1 = 1							  
10 58 BREAK_LOOP					      								    	ef1 = 1							  
							      								    	ef1 = 1							  
11 >> 60 LOAD_FAST 2 ( ef2 )				      								    	ef1 = 1							  
62 STORE_FAST 1 ( ef1 )					      								    	ef1 = 1							  
							      								    	ef1 = 1							  
12 64 LOAD_FAST 4 ( ef3 )				      								    	ef1 = 1							  
66 STORE_FAST 2 ( ef2 )					      								    	ef1 = 1							  
							      								    	ef1 = 1							  
13 68 LOAD_FAST 3 ( sm )				      								    	ef1 = 1							  
70 LOAD_FAST 2 ( ef2 )					      								    	ef1 = 1							  
72 BINARY_ADD						      								    	ef1 = 1							  
74 STORE_FAST 3 ( sm )					      								    	ef1 = 1							  
76 JUMP_ABSOLUTE 30					      								    	ef1 = 1							  
>> 78 POP_BLOCK						      								    	ef1 = 1							  
							      								    	ef1 = 1							  
14 >> 80 LOAD_FAST 3 ( sm )				      								    	ef1 = 1							  
82 RETURN_VALUE NEW_LINE				      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 0							  
							      								    	ef1 = 0							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = 1							  
							      								    	ef1 = f1						  
							      								    	ef1 = f1						  
							      								    	f1 = f1							  
							      								    	f1 f1 = f1						  
							      								    	f1 f1 f1 = f1						  
							      								    	f1 = f1							  
							      								    	f1 f1 = f1						  
							      								    	f1 f1 = f1 % f1						  
-							      -								    	f1 f1-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER
--							      --							    --								  --
Disassembly of <code object flipsPossible at 0x7f33e2644930,  def flipsPossible ( a , n ) :				    def flipsPossible ( a , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count_odd = 0 ; count_even = 0 ;			    	count_odd = 0						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( count_odd )				      	  for i in range ( n ) :				    	count_odd = 0						  alid/CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME
4 LOAD_CONST 1 ( 0 )					      	      if ( a [ i ] & 1 ) :				    	for i in range ( n ) :					  _PARITY_BY_INVERTING_ADJACENT_ELEMENTS.py", line 3
6 STORE_FAST 3 ( count_even )				      		  count_odd += 1 ;				    	    if a [ i ] == 1 :					  0	def f_filled ( a , n , n ) :	 ^ SyntaxErr
							      	      else :						    		if a [ i ] == 1 :				  or: duplicate argument 'n' in function definition
3 8 SETUP_LOOP 46 ( to 56 )				      		  count_even += 1 ;				    		    return a [ i ]				  
10 LOAD_GLOBAL 0 ( range )				      	  if ( count_odd % 2 and count_even % 2 ) :		    	return sum ( count_odd )				  
12 LOAD_FAST 1 ( n )					      	      return False ;					    								  
14 CALL_FUNCTION 1					      	  else :						    								  
16 GET_ITER						      	      return True ;					    								  
>> 18 FOR_ITER 34 ( to 54 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( a )					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_AND						      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
5 34 LOAD_FAST 2 ( count_odd )				      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( count_odd )				      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
7 >> 44 LOAD_FAST 3 ( count_even )			      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 INPLACE_ADD						      								    								  
50 STORE_FAST 3 ( count_even )				      								    								  
52 JUMP_ABSOLUTE 18					      								    								  
>> 54 POP_BLOCK						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( count_odd )			      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_MODULO					      								    								  
62 POP_JUMP_IF_FALSE 76					      								    								  
64 LOAD_FAST 3 ( count_even )				      								    								  
66 LOAD_CONST 3 ( 2 )					      								    								  
68 BINARY_MODULO					      								    								  
70 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
9 72 LOAD_CONST 4 ( False )				      								    								  
74 RETURN_VALUE						      								    								  
							      								    								  
11 >> 76 LOAD_CONST 5 ( True )				      								    								  
78 RETURN_VALUE						      								    								  
80 LOAD_CONST 0 ( None )				      								    								  
82 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_ELEMENT_ROW_MATRIX				      FIND_MAXIMUM_ELEMENT_ROW_MATRIX				    FIND_MAXIMUM_ELEMENT_ROW_MATRIX				  FIND_MAXIMUM_ELEMENT_ROW_MATRIX
--							      --							    --								  --
Disassembly of <code object maxelement at 0x7f33e2653f60, fil def maxelement ( arr ) :					    def maxelement ( arr , size = 1024 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  no_of_rows = len ( arr )				    	no_of_rows = len ( arr )				  
2 LOAD_FAST 0 ( arr )					      	  no_of_column = len ( arr [ 0 ] )			    	if not ( no_of_rows ) :					  
4 CALL_FUNCTION 1					      	  for i in range ( no_of_rows ) :			    	    no_of_rows = arr [ 0 ]				  
6 STORE_FAST 1 ( no_of_rows )				      	      max1 = 0						    	for j in range ( num_of_rows ) :			  
							      	      for j in range ( no_of_column ) :			    	    if not ( num_of_rows ) :				  
3 8 LOAD_GLOBAL 0 ( len )				      		  if arr [ i ] [ j ] > max1 :			    		return						  
10 LOAD_FAST 0 ( arr )					      		      max1 = arr [ i ] [ j ]			    	    for j in range ( num_of_rows ) :			  
12 LOAD_CONST 1 ( 0 )					      	      print ( max1 )					    		if not ( num_of_rows ) :			  
14 BINARY_SUBSCR					      								    		    return					  
16 CALL_FUNCTION 1					      								    	return arr						  
18 STORE_FAST 2 ( no_of_column )			      								    								  
							      								    								  
4 20 SETUP_LOOP 74 ( to 96 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_FAST 1 ( no_of_rows )				      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 62 ( to 94 )				      								    								  
32 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 34 LOAD_CONST 1 ( 0 )					      								    								  
36 STORE_FAST 4 ( max1 )				      								    								  
							      								    								  
6 38 SETUP_LOOP 44 ( to 84 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 2 ( no_of_column )				      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 32 ( to 82 )				      								    								  
50 STORE_FAST 5 ( j )					      								    								  
							      								    								  
7 52 LOAD_FAST 0 ( arr )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 5 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 4 ( max1 )					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 5 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 STORE_FAST 4 ( max1 )				      								    								  
80 JUMP_ABSOLUTE 48					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
9 >> 84 LOAD_GLOBAL 2 ( print )				      								    								  
86 LOAD_FAST 4 ( max1 )					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 POP_TOP						      								    								  
92 JUMP_ABSOLUTE 30					      								    								  
>> 94 POP_BLOCK						      								    								  
>> 96 LOAD_CONST 0 ( None )				      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT						      BUBBLE_SORT						    BUBBLE_SORT							  BUBBLE_SORT
--							      --							    --								  --
Disassembly of <code object bubbleSort at 0x7f33e2644930, fil def bubbleSort ( arr ) :					    def bubbleSort ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  for i in range ( n ) :				    	while n < n :						  
4 CALL_FUNCTION 1					      	      for j in range ( 0 , n - i - 1 ) :		    	    for i in range ( n ) :				  
6 STORE_FAST 1 ( n )					      		  if arr [ j ] > arr [ j + 1 ] :		    		n += 1						  
							      		      arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 	    n += n						  
3 8 SETUP_LOOP 98 ( to 108 )				      								    	return n						  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 86 ( to 106 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 SETUP_LOOP 80 ( to 104 )				      								    								  
24 LOAD_GLOBAL 1 ( range )				      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 CALL_FUNCTION 2					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 58 ( to 102 )				      								    								  
44 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_FAST 3 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 4 ( > )					      								    								  
64 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 66 LOAD_FAST 0 ( arr )				      								    								  
68 LOAD_FAST 3 ( j )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 BINARY_ADD						      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 3 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 ROT_TWO						      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 3 ( j )					      								    								  
88 STORE_SUBSCR						      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 3 ( j )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 42					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 JUMP_ABSOLUTE 18					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS		      FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			    FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			  FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS
--							      --							    --								  --
Disassembly of <code object findElement at 0x7f33e26494b0, fi def findElement ( arr , ranges , rotations , index ) :	    def findElement ( rotations , rotations , rotations , rotatio script_not_found : None
2 0 SETUP_LOOP 86 ( to 88 )				      	  for i in range ( rotations - 1 , - 1 , - 1 ) :	    								  
2 LOAD_GLOBAL 0 ( range )				      	      left = ranges [ i ] [ 0 ]				    								  
4 LOAD_FAST 2 ( rotations )				      	      right = ranges [ i ] [ 1 ]			    								  
6 LOAD_CONST 1 ( 1 )					      	      if ( left <= index and right >= index ) :		    								  
8 BINARY_SUBTRACT					      		  if ( index == left ) :			    								  
10 LOAD_CONST 2 ( - 1 )					      		      index = right				    								  
12 LOAD_CONST 2 ( - 1 )					      		  else :					    								  
14 CALL_FUNCTION 3					      		      index = index - 1				    								  
16 GET_ITER						      	  return arr [ index ]					    								  
>> 18 FOR_ITER 66 ( to 86 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
3 22 LOAD_FAST 1 ( ranges )				      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 3 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 STORE_FAST 5 ( left )				      								    								  
							      								    								  
4 34 LOAD_FAST 1 ( ranges )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 STORE_FAST 6 ( right )				      								    								  
							      								    								  
5 46 LOAD_FAST 5 ( left )				      								    								  
48 LOAD_FAST 3 ( index )				      								    								  
50 COMPARE_OP 1 ( <= )					      								    								  
52 POP_JUMP_IF_FALSE 18					      								    								  
54 LOAD_FAST 6 ( right )				      								    								  
56 LOAD_FAST 3 ( index )				      								    								  
58 COMPARE_OP 5 ( >= )					      								    								  
60 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
6 62 LOAD_FAST 3 ( index )				      								    								  
64 LOAD_FAST 5 ( left )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
7 70 LOAD_FAST 6 ( right )				      								    								  
72 STORE_FAST 3 ( index )				      								    								  
74 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
9 >> 76 LOAD_FAST 3 ( index )				      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 STORE_FAST 3 ( index )				      								    								  
84 JUMP_ABSOLUTE 18					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
10 >> 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 3 ( index )				      								    								  
92 BINARY_SUBSCR					      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T
--							      --							    --								  --
Disassembly of <code object printSubsequences at 0x7f33e2649a def printSubsequences ( arr , n ) :			    def printSubsequences ( arr , n , n ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  opsize = math.pow ( 2 , n )				    	opsize = math.pow ( 2 , n )				  
2 LOAD_METHOD 1 ( pow )					      	  for counter in range ( 1 , ( int ) ( opsize ) ) :	    	for i in range ( n - 1 , n ) :				  
4 LOAD_CONST 1 ( 2 )					      	      for j in range ( 0 , n ) :			    	    if n == n :						  
6 LOAD_FAST 1 ( n )					      		  if ( counter & ( 1 << j ) ) :			    		return n					  
8 CALL_METHOD 2						      		      print ( arr [ j ] , end = " " )		    								  
10 STORE_FAST 2 ( opsize )				      	      print ( )						    								  
							      								    								  
3 12 SETUP_LOOP 76 ( to 90 )				      								    								  
14 LOAD_GLOBAL 2 ( range )				      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 LOAD_GLOBAL 3 ( int )				      								    								  
20 LOAD_FAST 2 ( opsize )				      								    								  
22 CALL_FUNCTION 1					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 58 ( to 88 )				      								    								  
30 STORE_FAST 3 ( counter )				      								    								  
							      								    								  
4 32 SETUP_LOOP 46 ( to 80 )				      								    								  
34 LOAD_GLOBAL 2 ( range )				      								    								  
36 LOAD_CONST 3 ( 0 )					      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 32 ( to 78 )				      								    								  
46 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 48 LOAD_FAST 3 ( counter )				      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 LOAD_FAST 4 ( j )					      								    								  
54 BINARY_LSHIFT					      								    								  
56 BINARY_AND						      								    								  
58 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 4 ( print )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_CONST 4 ( ' ' )					      								    								  
70 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
72 CALL_FUNCTION_KW 2					      								    								  
74 POP_TOP						      								    								  
76 JUMP_ABSOLUTE 44					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
7 >> 80 LOAD_GLOBAL 4 ( print )				      								    								  
82 CALL_FUNCTION 0					      								    								  
84 POP_TOP						      								    								  
86 JUMP_ABSOLUTE 28					      								    								  
>> 88 POP_BLOCK						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_ROOT_NUMBER					      N_TH_ROOT_NUMBER						    N_TH_ROOT_NUMBER						  N_TH_ROOT_NUMBER
--							      --							    --								  --
Disassembly of <code object nthRoot at 0x7f33e2644f60, file " def nthRoot ( A , N ) :					    def nthRoot ( A , N , N , N , N , N , N , N , N , N , N , N , script_not_found : None
2 0 LOAD_GLOBAL 0 ( random )				      	  x<<unk>> = random.randint ( 1 , 101 ) % 10		    								  
2 LOAD_METHOD 1 ( randint )				      	  eps = 0.001						    								  
4 LOAD_CONST 1 ( 1 )					      	  delX = 2147483647					    								  
6 LOAD_CONST 2 ( 101 )					      	  xK = 0.0						    								  
8 CALL_METHOD 2						      	  while ( delX > eps ) :				    								  
10 LOAD_CONST 3 ( 10 )					      	      xK = ( ( N - 1.0 ) * x<<unk>> + A / pow ( x<<unk>> ,  								  
12 BINARY_MODULO					      	      delX = abs ( xK - x<<unk>> )			    								  
14 STORE_FAST 2 ( x<<unk>> )				      	      x<<unk>> = xK ;					    								  
							      	  return xK						    								  
3 16 LOAD_CONST 4 ( 0.001 )				      								    								  
18 STORE_FAST 3 ( eps )					      								    								  
							      								    								  
4 20 LOAD_CONST 5 ( 2147483647 )			      								    								  
22 STORE_FAST 4 ( delX )				      								    								  
							      								    								  
5 24 LOAD_CONST 6 ( 0.0 )				      								    								  
26 STORE_FAST 5 ( xK )					      								    								  
							      								    								  
6 28 SETUP_LOOP 62 ( to 92 )				      								    								  
>> 30 LOAD_FAST 4 ( delX )				      								    								  
32 LOAD_FAST 3 ( eps )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( N )					      								    								  
40 LOAD_CONST 7 ( 1.0 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 LOAD_FAST 2 ( x<<unk>> )				      								    								  
46 BINARY_MULTIPLY					      								    								  
48 LOAD_FAST 0 ( A )					      								    								  
50 LOAD_GLOBAL 2 ( pow )				      								    								  
52 LOAD_FAST 2 ( x<<unk>> )				      								    								  
54 LOAD_FAST 1 ( N )					      								    								  
56 LOAD_CONST 1 ( 1 )					      								    								  
58 BINARY_SUBTRACT					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 BINARY_TRUE_DIVIDE					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_FAST 1 ( N )					      								    								  
68 BINARY_TRUE_DIVIDE					      								    								  
70 STORE_FAST 5 ( xK )					      								    								  
							      								    								  
8 72 LOAD_GLOBAL 3 ( abs )				      								    								  
74 LOAD_FAST 5 ( xK )					      								    								  
76 LOAD_FAST 2 ( x<<unk>> )				      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_FAST 4 ( delX )				      								    								  
							      								    								  
9 84 LOAD_FAST 5 ( xK )					      								    								  
86 STORE_FAST 2 ( x<<unk>> )				      								    								  
88 JUMP_ABSOLUTE 30					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
10 >> 92 LOAD_FAST 5 ( xK )				      								    								  
94 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_CONSECUTIVE_DUPLICATES_STRING			      REMOVE_CONSECUTIVE_DUPLICATES_STRING			    REMOVE_CONSECUTIVE_DUPLICATES_STRING			  REMOVE_CONSECUTIVE_DUPLICATES_STRING
--							      --							    --								  --
Disassembly of <code object removeDuplicates at 0x7f33e2649a5 def removeDuplicates ( S ) :				    def removeDuplicates ( S , 0x70x70x70x70x70x70x70x70x70x70x70 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( S )						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( S )					      	  if ( n < 2 ) :					    								  alid/REMOVE_CONSECUTIVE_DUPLICATES_STRING.py", lin
4 CALL_FUNCTION 1					      	      return						    								  e 31	   def f_filled ( S , 0x70x70x70x70x70x70x70
6 STORE_FAST 1 ( n )					      	  j = 0							    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
							      	  for i in range ( n ) :				    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
3 8 LOAD_FAST 1 ( n )					      	      if ( S [ j ] != S [ i ] ) :			    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
10 LOAD_CONST 1 ( 2 )					      		  j += 1					    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
12 COMPARE_OP 0 ( < )					      		  S [ j ] = S [ i ]				    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
14 POP_JUMP_IF_FALSE 20					      	  j += 1						    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
							      	  S = S [ : j ]						    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
4 16 LOAD_CONST 0 ( None )				      	  return S						    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
18 RETURN_VALUE						      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
							      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
5 >> 20 LOAD_CONST 2 ( 0 )				      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
22 STORE_FAST 2 ( j )					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
							      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
6 24 SETUP_LOOP 52 ( to 78 )				      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
26 LOAD_GLOBAL 1 ( range )				      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
28 LOAD_FAST 1 ( n )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
30 CALL_FUNCTION 1					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
32 GET_ITER						      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
>> 34 FOR_ITER 40 ( to 76 )				      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
36 STORE_FAST 3 ( i )					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
							      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
7 38 LOAD_FAST 0 ( S )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
40 LOAD_FAST 2 ( j )					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
42 BINARY_SUBSCR					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
44 LOAD_FAST 0 ( S )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
46 LOAD_FAST 3 ( i )					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
48 BINARY_SUBSCR					      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70
50 COMPARE_OP 3 ( != )					      								    								  x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x7
52 POP_JUMP_IF_FALSE 34					      								    								  0x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x70x
							      								    								  70x70x70x70x70x70x70x70x70x70x70x70x70x7
8 54 LOAD_FAST 2 ( j )					      								    								  		   ^ SyntaxError: invalid syntax
56 LOAD_CONST 3 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 STORE_FAST 2 ( j )					      								    								  
							      								    								  
9 62 LOAD_FAST 0 ( S )					      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 0 ( S )					      								    								  
70 LOAD_FAST 2 ( j )					      								    								  
72 STORE_SUBSCR						      								    								  
74 JUMP_ABSOLUTE 34					      								    								  
>> 76 POP_BLOCK						      								    								  
							      								    								  
10 >> 78 LOAD_FAST 2 ( j )				      								    								  
80 LOAD_CONST 3 ( 1 )					      								    								  
82 INPLACE_ADD						      								    								  
84 STORE_FAST 2 ( j )					      								    								  
							      								    								  
11 86 LOAD_FAST 0 ( S )					      								    								  
88 LOAD_CONST 0 ( None )				      								    								  
90 LOAD_FAST 2 ( j )					      								    								  
92 BUILD_SLICE 2					      								    								  
94 BINARY_SUBSCR					      								    								  
96 STORE_FAST 0 ( S )					      								    								  
							      								    								  
12 98 LOAD_FAST 0 ( S )					      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		      EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		    EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		  EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION
--							      --							    --								  --
Disassembly of <code object exponentiation at 0x7f33e2644930, def exponentiation ( bas , exp ) :			    def exponentiation ( bas ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( exp )					      	  if ( exp == 0 ) :					    	if bas as f :						  
2 LOAD_CONST 1 ( 0 )					      	      return 1 ;					    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( exp == 1 ) :					    	if bas as f :						  
6 POP_JUMP_IF_FALSE 12					      	      return bas % N ;					    	    return - 1						  
							      	  t = exponentiation ( bas , int ( exp / 2 ) ) ;	    	if bas as f :						  
3 8 LOAD_CONST 2 ( 1 )					      	  t = ( t * t ) % N ;					    	    return - 1						  
10 RETURN_VALUE						      	  if ( exp % 2 == 0 ) :					    	return - 1						  
							      	      return t ;					    else :							  
4 >> 12 LOAD_FAST 1 ( exp )				      	  else :						    	return - 1						  
14 LOAD_CONST 2 ( 1 )					      	      return ( ( bas % N ) * t ) % N ;			    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 20 LOAD_FAST 0 ( bas )				      								    								  
22 LOAD_GLOBAL 0 ( N )					      								    								  
24 BINARY_MODULO					      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
6 >> 28 LOAD_GLOBAL 1 ( exponentiation )		      								    								  
30 LOAD_FAST 0 ( bas )					      								    								  
32 LOAD_GLOBAL 2 ( int )				      								    								  
34 LOAD_FAST 1 ( exp )					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 STORE_FAST 2 ( t )					      								    								  
							      								    								  
7 46 LOAD_FAST 2 ( t )					      								    								  
48 LOAD_FAST 2 ( t )					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 LOAD_GLOBAL 0 ( N )					      								    								  
54 BINARY_MODULO					      								    								  
56 STORE_FAST 2 ( t )					      								    								  
							      								    								  
8 58 LOAD_FAST 1 ( exp )				      								    								  
60 LOAD_CONST 3 ( 2 )					      								    								  
62 BINARY_MODULO					      								    								  
64 LOAD_CONST 1 ( 0 )					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
9 70 LOAD_FAST 2 ( t )					      								    								  
72 RETURN_VALUE						      								    								  
							      								    								  
11 >> 74 LOAD_FAST 0 ( bas )				      								    								  
76 LOAD_GLOBAL 0 ( N )					      								    								  
78 BINARY_MODULO					      								    								  
80 LOAD_FAST 2 ( t )					      								    								  
82 BINARY_MULTIPLY					      								    								  
84 LOAD_GLOBAL 0 ( N )					      								    								  
86 BINARY_MODULO					      								    								  
88 RETURN_VALUE						      								    								  
90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object maxSum at 0x7f33e2653ed0, file "< def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( sys )				      	  res = - sys.maxsize					    	res = sys.maxsize ( )					  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_ATTR 1 ( maxsize )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  024/eval_scripts/dis_sa-python_sa.valid/MAXIMUM_SU
4 UNARY_NEGATIVE					      	      curr_sum = 0					    	    if i < n :						  M_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY.py", line 53,
6 STORE_FAST 2 ( res )					      	      for j in range ( 0 , n ) :			    		res [ i ] = 0					  in <module>	  if f_filled(*parameters_set) == f_
							      		  index = int ( ( i + j ) % n )			    	return res						  gold(*parameters_set):   File "/home/ubuntu/TransC
3 8 SETUP_LOOP 84 ( to 94 )				      		  curr_sum += j * arr [ index ]			    								  oder/models/eval/bt_sa/21z7a0p024/eval_scripts/dis
10 LOAD_GLOBAL 2 ( range )				      	      res = max ( res , curr_sum )			    								  _sa-python_sa.valid/MAXIMUM_SUM_IARRI_AMONG_ROTATI
12 LOAD_CONST 1 ( 0 )					      	  return res						    								  ONS_GIVEN_ARRAY.py", line 31, in f_filled	res
14 LOAD_FAST 1 ( n )					      								    								  = sys.maxsize ( ) TypeError: 'int' object is not c
16 CALL_FUNCTION 2					      								    								  allable
18 GET_ITER						      								    								  
>> 20 FOR_ITER 70 ( to 92 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 4 ( curr_sum )				      								    								  
							      								    								  
5 28 SETUP_LOOP 50 ( to 80 )				      								    								  
30 LOAD_GLOBAL 2 ( range )				      								    								  
32 LOAD_CONST 1 ( 0 )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 36 ( to 78 )				      								    								  
42 STORE_FAST 5 ( j )					      								    								  
							      								    								  
6 44 LOAD_GLOBAL 3 ( int )				      								    								  
46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_FAST 5 ( j )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 BINARY_MODULO					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 STORE_FAST 6 ( index )				      								    								  
							      								    								  
7 60 LOAD_FAST 4 ( curr_sum )				      								    								  
62 LOAD_FAST 5 ( j )					      								    								  
64 LOAD_FAST 0 ( arr )					      								    								  
66 LOAD_FAST 6 ( index )				      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 4 ( curr_sum )				      								    								  
76 JUMP_ABSOLUTE 40					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
8 >> 80 LOAD_GLOBAL 4 ( max )				      								    								  
82 LOAD_FAST 2 ( res )					      								    								  
84 LOAD_FAST 4 ( curr_sum )				      								    								  
86 CALL_FUNCTION 2					      								    								  
88 STORE_FAST 2 ( res )					      								    								  
90 JUMP_ABSOLUTE 20					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
9 >> 94 LOAD_FAST 2 ( res )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN
--							      --							    --								  --
Disassembly of <code object power at 0x7f33e2644f60, file "<d def power ( x , y ) :					    def power ( x , y , x = 0 , y = 0 , copy = False ) :	  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( y )					      	  if ( y == 0 ) : return 1				    	if x == 0 :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 0 )					      	  elif ( int ( y % 2 ) == 0 ) :				    	    return 1						  alid/WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN.py", lin
4 COMPARE_OP 2 ( == )					      	      return ( power ( x , int ( y / 2 ) ) * power ( x , in 	power = ( x - y ) * ( x - 1 )				  e 32	   f_filled = ( x - y ) * ( x - y )
6 POP_JUMP_IF_FALSE 12					      	  else :						    	power = ( x - y ) * ( x - y )				     ^ SyntaxError: invalid syntax
8 LOAD_CONST 2 ( 1 )					      	      return ( x * power ( x , int ( y / 2 ) ) * power ( x  	power = ( x - y ) * ( ( x - y ) * ( x - y ) )		  
10 RETURN_VALUE						      								    	power = ( x - y ) * ( ( x - y )				  
							      								    	power = ( x - y ) * ( x - y )				  
3 >> 12 LOAD_GLOBAL 0 ( int )				      								    	power = ( x - y ) * ( ( x - y )				  
14 LOAD_FAST 1 ( y )					      								    	power = ( x - y ) * ( ( x - y ) * ( x - y ) )		  
16 LOAD_CONST 3 ( 2 )					      								    	power = ( x - y ) * ( ( x - y ) * ( x - y ) )		  
18 BINARY_MODULO					      								    	power = ( x - y ) * ( power - power )			  
20 CALL_FUNCTION 1					      								    	power = ( power - power ) * power			  
22 LOAD_CONST 1 ( 0 )					      								    	power = ( power - power ) * power			  
24 COMPARE_OP 2 ( == )					      								    	power = ( power - power ) * ( power - power )		  
26 POP_JUMP_IF_FALSE 64					      								    	power = ( power - power ) * power			  
							      								    	power = ( power - power ) * power			  
4 28 LOAD_GLOBAL 1 ( power )				      								    	return power						  
30 LOAD_FAST 0 ( x )					      								    								  
32 LOAD_GLOBAL 0 ( int )				      								    								  
34 LOAD_FAST 1 ( y )					      								    								  
36 LOAD_CONST 3 ( 2 )					      								    								  
38 BINARY_TRUE_DIVIDE					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 CALL_FUNCTION 2					      								    								  
44 LOAD_GLOBAL 1 ( power )				      								    								  
46 LOAD_FAST 0 ( x )					      								    								  
48 LOAD_GLOBAL 0 ( int )				      								    								  
50 LOAD_FAST 1 ( y )					      								    								  
52 LOAD_CONST 3 ( 2 )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
6 >> 64 LOAD_FAST 0 ( x )				      								    								  
66 LOAD_GLOBAL 1 ( power )				      								    								  
68 LOAD_FAST 0 ( x )					      								    								  
70 LOAD_GLOBAL 0 ( int )				      								    								  
72 LOAD_FAST 1 ( y )					      								    								  
74 LOAD_CONST 3 ( 2 )					      								    								  
76 BINARY_TRUE_DIVIDE					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 BINARY_MULTIPLY					      								    								  
84 LOAD_GLOBAL 1 ( power )				      								    								  
86 LOAD_FAST 0 ( x )					      								    								  
88 LOAD_GLOBAL 0 ( int )				      								    								  
90 LOAD_FAST 1 ( y )					      								    								  
92 LOAD_CONST 3 ( 2 )					      								    								  
94 BINARY_TRUE_DIVIDE					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 CALL_FUNCTION 2					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 RETURN_VALUE					      								    								  
104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1
--							      --							    --								  --
Disassembly of <code object printCountDP at 0x7f33e26494b0, f def printCountDP ( dist ) :				    def printCountDP ( dist , 0x733333333333333333333333333333333 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * ( dist + 1 )				    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 BUILD_LIST 1						      	  count [ 0 ] = 1					    								  alid/COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1.py
4 LOAD_FAST 0 ( dist )					      	  count [ 1 ] = 1					    								  ", line 27	 def f_filled ( dist , 0x73333333333
6 LOAD_CONST 2 ( 1 )					      	  count [ 2 ] = 2					    								  33333333333333333333333333333333333333333333333333
8 BINARY_ADD						      	  for i in range ( 3 , dist + 1 ) :			    								  33333333333333333333333333333333333333333333333333
10 BINARY_MULTIPLY					      	      count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + c 								  33333333333333333333333333333333333333333333333333
12 STORE_FAST 1 ( count )				      	  return count [ dist ] ;				    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
3 14 LOAD_CONST 2 ( 1 )					      								    								  33333333333333333333333333333333333333333333333333
16 LOAD_FAST 1 ( count )				      								    								  33333333333333333333333333333333333333333333333333
18 LOAD_CONST 1 ( 0 )					      								    								  33333333333333333333333333333333333333333333333333
20 STORE_SUBSCR						      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
4 22 LOAD_CONST 2 ( 1 )					      								    								  33333333333333333333333333333333333333333333333333
24 LOAD_FAST 1 ( count )				      								    								  33333333333333333333333333333333333333333333333333
26 LOAD_CONST 2 ( 1 )					      								    								  33333333333333333333333333333333333333333333333333
28 STORE_SUBSCR						      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
5 30 LOAD_CONST 3 ( 2 )					      								    								  33333333333333333333333333333333333333333333333333
32 LOAD_FAST 1 ( count )				      								    								  33333333333333333333333333333333333333333333333333
34 LOAD_CONST 3 ( 2 )					      								    								  33333333333333333333333333333333333333333333333333
36 STORE_SUBSCR						      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333
6 38 SETUP_LOOP 62 ( to 102 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_CONST 4 ( 3 )					      								    								  
44 LOAD_FAST 0 ( dist )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 44 ( to 100 )				      								    								  
56 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 58 LOAD_FAST 1 ( count )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 1 ( count )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 3 ( 2 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  			     ^ SyntaxError: invalid
78 BINARY_ADD						      								    								  syntax
80 LOAD_FAST 1 ( count )				      								    								  
82 LOAD_FAST 2 ( i )					      								    								  
84 LOAD_CONST 4 ( 3 )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 1 ( count )				      								    								  
94 LOAD_FAST 2 ( i )					      								    								  
96 STORE_SUBSCR						      								    								  
98 JUMP_ABSOLUTE 54					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
8 >> 102 LOAD_FAST 1 ( count )				      								    								  
104 LOAD_FAST 0 ( dist )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			      CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			    CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT				  CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT
--							      --							    --								  --
Disassembly of <code object checkJumbled at 0x7f33e2644930, f def checkJumbled ( num ) :				    def checkJumbled ( num ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_FAST 0 ( num )					      	  if ( num / 10 == 0 ) :				    	if num == 10 :						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_CONST 1 ( 10 )					      	      return True					    	    return True						  024/eval_scripts/dis_sa-python_sa.valid/CHECK_IF_A
4 BINARY_TRUE_DIVIDE					      	  while ( num != 0 ) :					    	if num == 10 :						  _NUMBER_IS_JUMBLED_OR_NOT.py", line 57, in <module
6 LOAD_CONST 2 ( 0 )					      	      if ( num / 10 == 0 ) :				    	    return True						  >	if f_filled(*parameters_set) == f_gold(*para
8 COMPARE_OP 2 ( == )					      		  return True					    	for start in range ( num ) :				  meters_set):	 File "/home/ubuntu/TransCoder/model
10 POP_JUMP_IF_FALSE 16					      	      digit1 = num % 10					    	    if start != end :					  s/eval/bt_sa/21z7a0p024/eval_scripts/dis_sa-python
							      	      digit2 = ( num / 10 ) % 10			    		return False					  _sa.valid/CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT.py",
3 12 LOAD_CONST 3 ( True )				      	      if ( abs ( digit2 - digit1 ) > 1 ) :		    	return True						   line 37, in f_filled	    if start != end : NameEr
14 RETURN_VALUE						      		  return False					    								  ror: name 'end' is not defined
							      	      num = num / 10					    								  
4 >> 16 SETUP_LOOP 76 ( to 94 )				      	  return True						    								  
>> 18 LOAD_FAST 0 ( num )				      								    								  
20 LOAD_CONST 2 ( 0 )					      								    								  
22 COMPARE_OP 3 ( != )					      								    								  
24 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
5 26 LOAD_FAST 0 ( num )				      								    								  
28 LOAD_CONST 1 ( 10 )					      								    								  
30 BINARY_TRUE_DIVIDE					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 COMPARE_OP 2 ( == )					      								    								  
36 POP_JUMP_IF_FALSE 42					      								    								  
							      								    								  
6 38 LOAD_CONST 3 ( True )				      								    								  
40 RETURN_VALUE						      								    								  
							      								    								  
7 >> 42 LOAD_FAST 0 ( num )				      								    								  
44 LOAD_CONST 1 ( 10 )					      								    								  
46 BINARY_MODULO					      								    								  
48 STORE_FAST 1 ( digit1 )				      								    								  
							      								    								  
8 50 LOAD_FAST 0 ( num )				      								    								  
52 LOAD_CONST 1 ( 10 )					      								    								  
54 BINARY_TRUE_DIVIDE					      								    								  
56 LOAD_CONST 1 ( 10 )					      								    								  
58 BINARY_MODULO					      								    								  
60 STORE_FAST 2 ( digit2 )				      								    								  
							      								    								  
9 62 LOAD_GLOBAL 0 ( abs )				      								    								  
64 LOAD_FAST 2 ( digit2 )				      								    								  
66 LOAD_FAST 1 ( digit1 )				      								    								  
68 BINARY_SUBTRACT					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 LOAD_CONST 4 ( 1 )					      								    								  
74 COMPARE_OP 4 ( > )					      								    								  
76 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 78 LOAD_CONST 5 ( False )				      								    								  
80 RETURN_VALUE						      								    								  
							      								    								  
11 >> 82 LOAD_FAST 0 ( num )				      								    								  
84 LOAD_CONST 1 ( 10 )					      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 STORE_FAST 0 ( num )					      								    								  
90 JUMP_ABSOLUTE 18					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
12 >> 94 LOAD_CONST 3 ( True )				      								    								  
96 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CAESAR_CIPHER						      CAESAR_CIPHER						    CAESAR_CIPHER						  CAESAR_CIPHER
--							      --							    --								  --
Disassembly of <code object encrypt at 0x7f33e2644f60, file " def encrypt ( text , s ) :				    def encrypt ( text , 0x70x70x74f60 ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( '' )					      	  result = ""						    	result = ""						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( result )				      	  for i in range ( len ( text ) ) :			    	while ( ( length >> 16 ) & 0x70x70x74f60 ) :		  alid/CAESAR_CIPHER.py", line 28     def f_filled (
							      	      char = text [ i ]					    	    result = ( ( length >> 16 ) & 0x70x70x74f60 )	   text , 0x70x70x74f60 ) :
3 4 SETUP_LOOP 102 ( to 108 )				      	      if ( char.isupper ( ) ) :				    	    if result == 0x0x0x0x4f60 :				       ^ SyntaxError: invalid syntax
6 LOAD_GLOBAL 0 ( range )				      		  result += chr ( ( ord ( char ) + s - 65 ) % 26 +  		result = ( ( length >> 16 ) & 0x70x70x70x74f60 )  
8 LOAD_GLOBAL 1 ( len )					      	      else :						    	return result						  
10 LOAD_FAST 0 ( text )					      		  result += chr ( ( ord ( char ) + s - 97 ) % 26 +  								  
12 CALL_FUNCTION 1					      	  return result						    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 86 ( to 106 )				      								    								  
20 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( text )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 STORE_FAST 4 ( char )				      								    								  
							      								    								  
5 30 LOAD_FAST 4 ( char )				      								    								  
32 LOAD_METHOD 2 ( isupper )				      								    								  
34 CALL_METHOD 0					      								    								  
36 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 38 LOAD_FAST 2 ( result )				      								    								  
40 LOAD_GLOBAL 3 ( chr )				      								    								  
42 LOAD_GLOBAL 4 ( ord )				      								    								  
44 LOAD_FAST 4 ( char )					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_FAST 1 ( s )					      								    								  
50 BINARY_ADD						      								    								  
52 LOAD_CONST 2 ( 65 )					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 LOAD_CONST 3 ( 26 )					      								    								  
58 BINARY_MODULO					      								    								  
60 LOAD_CONST 2 ( 65 )					      								    								  
62 BINARY_ADD						      								    								  
64 CALL_FUNCTION 1					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 2 ( result )				      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 72 LOAD_FAST 2 ( result )				      								    								  
74 LOAD_GLOBAL 3 ( chr )				      								    								  
76 LOAD_GLOBAL 4 ( ord )				      								    								  
78 LOAD_FAST 4 ( char )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 LOAD_FAST 1 ( s )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_CONST 4 ( 97 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 3 ( 26 )					      								    								  
92 BINARY_MODULO					      								    								  
94 LOAD_CONST 4 ( 97 )					      								    								  
96 BINARY_ADD						      								    								  
98 CALL_FUNCTION 1					      								    								  
100 INPLACE_ADD						      								    								  
102 STORE_FAST 2 ( result )				      								    								  
104 JUMP_ABSOLUTE 18					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
9 >> 108 LOAD_FAST 2 ( result )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING
--							      --							    --								  --
Disassembly of <code object twoWaySort at 0x7f33e2653f60, fil def twoWaySort ( arr , n ) :				    def twoWaySort ( arr , n ) :				  error : Traceback (most recent call last):   File
2 0 SETUP_LOOP 46 ( to 48 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] & 1 ) :				    	    if n [ i ] == n :					  024/eval_scripts/dis_sa-python_sa.valid/SORT_EVEN_
4 LOAD_CONST 1 ( 0 )					      		  arr [ i ] *= - 1				    		arr [ i ] = n					  NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDIN
6 LOAD_FAST 1 ( n )					      	  arr.sort ( )						    	return arr						  G_ORDER_1.py", line 61, in <module>	  f_filled(*
8 CALL_FUNCTION 2					      	  for i in range ( 0 , n ) :				    								  (filled_function_param[i]))	File "/home/ubuntu/T
10 GET_ITER						      	      if ( arr [ i ] & 1 ) :				    								  ransCoder/models/eval/bt_sa/21z7a0p024/eval_script
>> 12 FOR_ITER 32 ( to 46 )				      		  arr [ i ] *= - 1				    								  s/dis_sa-python_sa.valid/SORT_EVEN_NUMBERS_ASCENDI
14 STORE_FAST 2 ( i )					      								    								  NG_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1.py",
							      								    								  line 29, in f_filled	   if n [ i ] == n : TypeErr
3 16 LOAD_FAST 0 ( arr )				      								    								  or: 'int' object is not subscriptable
18 LOAD_FAST 2 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_CONST 2 ( 1 )					      								    								  
24 BINARY_AND						      								    								  
26 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 DUP_TOP_TWO						      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( - 1 )					      								    								  
38 INPLACE_MULTIPLY					      								    								  
40 ROT_THREE						      								    								  
42 STORE_SUBSCR						      								    								  
44 JUMP_ABSOLUTE 12					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_METHOD 1 ( sort )				      								    								  
52 CALL_METHOD 0					      								    								  
54 POP_TOP						      								    								  
							      								    								  
6 56 SETUP_LOOP 46 ( to 104 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_CONST 1 ( 0 )					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 CALL_FUNCTION 2					      								    								  
66 GET_ITER						      								    								  
>> 68 FOR_ITER 32 ( to 102 )				      								    								  
70 STORE_FAST 2 ( i )					      								    								  
							      								    								  
7 72 LOAD_FAST 0 ( arr )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_AND						      								    								  
82 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
8 84 LOAD_FAST 0 ( arr )				      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 DUP_TOP_TWO						      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 3 ( - 1 )					      								    								  
94 INPLACE_MULTIPLY					      								    								  
96 ROT_THREE						      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 68					      								    								  
>> 102 POP_BLOCK					      								    								  
>> 104 LOAD_CONST 0 ( None )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1
--							      --							    --								  --
Disassembly of <code object isHeap at 0x7f33e2644f60, file "< def isHeap ( arr , n ) :					    def isHeap ( arr , n ) :					  failure : #Results: 0, 10
2 0 SETUP_LOOP 104 ( to 106 )				      	  for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :	    	for i in range ( n , n + 2 ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if arr [ 2 * i + 1 ] > arr [ i ] :		    	    if n > n :						  
4 LOAD_GLOBAL 1 ( int )					      		  return False					    		return i					  
6 LOAD_FAST 1 ( n )					      	      if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ]  	return arr [ n ]					  
8 LOAD_CONST 1 ( 2 )					      		  return False					    								  
10 BINARY_SUBTRACT					      	  return True						    								  
12 LOAD_CONST 1 ( 2 )					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 LOAD_CONST 2 ( 1 )					      								    								  
20 BINARY_ADD						      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 76 ( to 104 )				      								    								  
28 STORE_FAST 2 ( i )					      								    								  
							      								    								  
3 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_CONST 1 ( 2 )					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 0 ( arr )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 4 ( > )					      								    								  
52 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
4 54 LOAD_CONST 3 ( False )				      								    								  
56 RETURN_VALUE						      								    								  
							      								    								  
5 >> 58 LOAD_CONST 1 ( 2 )				      								    								  
60 LOAD_FAST 2 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_CONST 1 ( 2 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 COMPARE_OP 0 ( < )					      								    								  
72 POP_JUMP_IF_FALSE 26					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_CONST 1 ( 2 )					      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_CONST 1 ( 2 )					      								    								  
84 BINARY_ADD						      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
6 98 LOAD_CONST 3 ( False )				      								    								  
100 RETURN_VALUE					      								    								  
102 JUMP_ABSOLUTE 26					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
7 >> 106 LOAD_CONST 4 ( True )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S
--							      --							    --								  --
Disassembly of <code object find at 0x7f33e2653f60, file "<di def find ( a , b , k , n1 , n2 ) :			    def find ( l , l , l , l ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n2 ) :				    	for i in range ( l ) :					  
4 STORE_FAST 5 ( s )					      	      s.add ( b [ i ] )					    	    s.add ( l [ i ] )					  
							      	  missing = 0						    	    l.add ( l [ i ] )					  
3 6 SETUP_LOOP 30 ( to 38 )				      	  for i in range ( n1 ) :				    	    l.add ( l [ i ] )					  
8 LOAD_GLOBAL 1 ( range )				      	      if a [ i ] not in s :				    	    l.add ( l [ i ] )					  
10 LOAD_FAST 4 ( n2 )					      		  missing += 1					    	    l.add ( l [ i ] )					  
12 CALL_FUNCTION 1					      	      if missing == k :					    	    l.add ( l [ i ] )					  
14 GET_ITER						      		  return a [ i ]				    	    l.add ( l [ i ] )					  
>> 16 FOR_ITER 18 ( to 36 )				      	  return - 1						    	    l.add ( l )						  
18 STORE_FAST 6 ( i )					      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
4 20 LOAD_FAST 5 ( s )					      								    	    l.add ( l )						  
22 LOAD_METHOD 2 ( add )				      								    	    l.add ( l )						  
24 LOAD_FAST 1 ( b )					      								    	    l.add ( l )						  
26 LOAD_FAST 6 ( i )					      								    	    l.add ( l )						  
28 BINARY_SUBSCR					      								    	    l.add ( l )						  
30 CALL_METHOD 1					      								    	    l.add ( l )						  
32 POP_TOP						      								    	    l.add ( l )						  
34 JUMP_ABSOLUTE 16					      								    	    l.add ( l )						  
>> 36 POP_BLOCK						      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
5 >> 38 LOAD_CONST 1 ( 0 )				      								    	    l.add ( l )						  
40 STORE_FAST 7 ( missing )				      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
6 42 SETUP_LOOP 52 ( to 96 )				      								    	    l.add ( l )						  
44 LOAD_GLOBAL 1 ( range )				      								    	    l.add ( l )						  
46 LOAD_FAST 3 ( n1 )					      								    	    l.add ( l )						  
48 CALL_FUNCTION 1					      								    	    l.add ( l )						  
50 GET_ITER						      								    	    l.add ( l )						  
>> 52 FOR_ITER 40 ( to 94 )				      								    	    l.add ( l )						  
54 STORE_FAST 6 ( i )					      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
7 56 LOAD_FAST 0 ( a )					      								    	    l.add ( l )						  
58 LOAD_FAST 6 ( i )					      								    	    l.add ( l )						  
60 BINARY_SUBSCR					      								    	    l.add ( l )						  
62 LOAD_FAST 5 ( s )					      								    	    l.add ( l )						  
64 COMPARE_OP 7 ( not in )				      								    	    l.add ( l )						  
66 POP_JUMP_IF_FALSE 76					      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
8 68 LOAD_FAST 7 ( missing )				      								    	    l.add ( l )						  
70 LOAD_CONST 2 ( 1 )					      								    	    l.add ( l )						  
72 INPLACE_ADD						      								    	    l.add ( l )						  
74 STORE_FAST 7 ( missing )				      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
9 >> 76 LOAD_FAST 7 ( missing )				      								    	    l.add ( l )						  
78 LOAD_FAST 2 ( k )					      								    	    l.add ( l )						  
80 COMPARE_OP 2 ( == )					      								    	    l.add ( l )						  
82 POP_JUMP_IF_FALSE 52					      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
10 84 LOAD_FAST 0 ( a )					      								    	    l.add ( l )						  
86 LOAD_FAST 6 ( i )					      								    	    l.add ( l )						  
88 BINARY_SUBSCR					      								    	    l.add ( l )						  
90 RETURN_VALUE						      								    	    l.add ( l )						  
92 JUMP_ABSOLUTE 52					      								    	    l.add ( l )						  
>> 94 POP_BLOCK						      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
11 >> 96 LOAD_CONST 3 ( - 1 )				      								    	    l.add ( l )						  
98 RETURN_VALUE NEW_LINE				      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
							      								    	    l.add ( l )						  
-							      -								    	    l.add (-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	      COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	    COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	  COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE
--							      --							    --								  --
Disassembly of <code object findCountOfSolutions at 0x7f33e26 def findCountOfSolutions ( n , p ) :			    def findCountOfSolutions ( n , p ) :			  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  ans = 0 ;						    	ans = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 2 ( ans )					      	  for x in range ( 1 , p ) :				    	ans = 0							  024/eval_scripts/dis_sa-python_sa.valid/COUNT_NUMB
							      	      if ( ( x * x ) % p == 1 ) :			    	for x in range ( 1 , p ) :				  ER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE.py",
3 4 SETUP_LOOP 86 ( to 92 )				      		  last = x + p * ( n / p ) ;			    	    ans [ x ] = ans [ x ]				  line 98, in <module>	   if f_filled(*parameters_s
6 LOAD_GLOBAL 0 ( range )				      		  if ( last > n ) :				    	    ans [ x ] = ans [ x ]				  et) == f_gold(*parameters_set):   File "/home/ubun
8 LOAD_CONST 2 ( 1 )					      		      last -= p ;				    	    ans [ x ] = ans [ x ]				  tu/TransCoder/models/eval/bt_sa/21z7a0p024/eval_sc
10 LOAD_FAST 1 ( p )					      		  ans += ( ( last - x ) / p + 1 ) ;		    	    ans [ x ] = ans [ x ]				  ripts/dis_sa-python_sa.valid/COUNT_NUMBER_OF_SOLUT
12 CALL_FUNCTION 2					      	  return int ( ans ) ;					    	    ans [ x ] = ans					  IONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE.py", line 32, in
14 GET_ITER						      								    	    ans [ x ] = ans					   f_filled	ans [ x ] = ans [ x ] TypeError: 'in
>> 16 FOR_ITER 72 ( to 90 )				      								    	    ans [ x ] = ans [ x ]				  t' object is not subscriptable
18 STORE_FAST 3 ( x )					      								    	    ans [ x ] = ans [ x ]				  
							      								    	    ans [ x ] = ans [ x ]				  
4 20 LOAD_FAST 3 ( x )					      								    	    ans [ x ] = ans [ x ]				  
22 LOAD_FAST 3 ( x )					      								    	    ans [ x ] = ans [ x ]				  
24 BINARY_MULTIPLY					      								    	    ans [ x ] = ans					  
26 LOAD_FAST 1 ( p )					      								    	    ans [ x ] = ans [ x ]				  
28 BINARY_MODULO					      								    	    ans [ x ] = ans [ x ]				  
30 LOAD_CONST 2 ( 1 )					      								    	    ans [ x ] = ans [ x ]				  
32 COMPARE_OP 2 ( == )					      								    	    ans [ x ] = ans [ x ]				  
34 POP_JUMP_IF_FALSE 16					      								    	    ans [ x ] = ans [ x ]				  
							      								    	    ans [ x ] = ans [ x ]				  
5 36 LOAD_FAST 3 ( x )					      								    	    ans [ x ] = ans [ x ]				  
38 LOAD_FAST 1 ( p )					      								    	    ans [ x ] = ans [ x ]				  
40 LOAD_FAST 0 ( n )					      								    	    ans [ x ] = ans [ x ]				  
42 LOAD_FAST 1 ( p )					      								    	    ans [ x ] = ans [ x ]				  
44 BINARY_TRUE_DIVIDE					      								    	    ans [ x ] = ans [ x ]				  
46 BINARY_MULTIPLY					      								    	    ans [ x ] = ans [ x ]				  
48 BINARY_ADD						      								    	    ans [ x ] = ans [ x ]				  
50 STORE_FAST 4 ( last )				      								    	    ans [ x ] = ans [ x ]				  
							      								    	    ans [ x ] = ans [ x ]				  
6 52 LOAD_FAST 4 ( last )				      								    	    ans [ x ] = ans [ x ]				  
54 LOAD_FAST 0 ( n )					      								    	    ans [ x ] = ans [ x ]				  
56 COMPARE_OP 4 ( > )					      								    	    ans [ x ] = ans [ x ]				  
58 POP_JUMP_IF_FALSE 68					      								    	    ans [ x ] = ans [ x ]				  
							      								    	    ans [ x ] = ans [ x ]				  
7 60 LOAD_FAST 4 ( last )				      								    	    ans [ x ] = ans [ x ]				  
62 LOAD_FAST 1 ( p )					      								    	    ans [ x ] = ans [ x ]				  
64 INPLACE_SUBTRACT					      								    	    ans [ x ] = ans [ x ]				  
66 STORE_FAST 4 ( last )				      								    	    ans [ x ] = ans [ x ]				  
							      								    	    ans [ x ] = ans [ x ]				  
8 >> 68 LOAD_FAST 2 ( ans )				      								    	    ans [ x ] = ans [ x ]				  
70 LOAD_FAST 4 ( last )					      								    	    ans [ x ] = ans [ x ]				  
72 LOAD_FAST 3 ( x )					      								    	    ans [ x ] = ans [ x ]				  
74 BINARY_SUBTRACT					      								    	    ans [ x ] = ans [ x ]				  
76 LOAD_FAST 1 ( p )					      								    	    ans [ x ] = ans [ x ]				  
78 BINARY_TRUE_DIVIDE					      								    	    ans [ x ] = ans [ x ]				  
80 LOAD_CONST 2 ( 1 )					      								    	    ans [ x ] = ans [ x ]				  
82 BINARY_ADD						      								    	    ans [ x ] = ans [ x ]				  
84 INPLACE_ADD						      								    	    ans [ x ] = ans [ x ]				  
86 STORE_FAST 2 ( ans )					      								    	    ans [ x ] = ans [ x ]				  
88 JUMP_ABSOLUTE 16					      								    	    ans [ x ] = ans					  
>> 90 POP_BLOCK						      								    	return ans						  
							      								    								  
9 >> 92 LOAD_GLOBAL 1 ( int )				      								    								  
94 LOAD_FAST 2 ( ans )					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
Disassembly of <code object to_upper at 0x7f33e26494b0, file  def to_upper ( string ) :					    def to_upper ( string ) :					  script_not_found : None
2 0 SETUP_LOOP 108 ( to 110 )				      	  for i in range ( len ( string ) ) :			    	for i in range ( len ( string ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if ( 'a' <= string [ i ] <= 'z' ) :		    	    if 'a' in string :					  
4 LOAD_GLOBAL 1 ( len )					      		  string = ( string [ 0 : i ] + chr ( ord ( string  		return 'a' in string [ i ]			  
6 LOAD_FAST 0 ( string )				      	  return string ;					    	    if 'a' in string :					  
8 CALL_FUNCTION 1					      								    		return 'a'					  
10 CALL_FUNCTION 1					      								    	    if 'b' in string :					  
12 GET_ITER						      								    		return 'a' in string [ i ]			  
>> 14 FOR_ITER 92 ( to 108 )				      								    	return string						  
16 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 18 LOAD_CONST 1 ( 'a' )				      								    								  
20 LOAD_FAST 0 ( string )				      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 DUP_TOP						      								    								  
28 ROT_THREE						      								    								  
30 COMPARE_OP 1 ( <= )					      								    								  
32 POP_JUMP_IF_FALSE 42					      								    								  
34 LOAD_CONST 2 ( 'z' )					      								    								  
36 COMPARE_OP 1 ( <= )					      								    								  
38 POP_JUMP_IF_FALSE 14					      								    								  
40 JUMP_FORWARD 4 ( to 46 )				      								    								  
>> 42 POP_TOP						      								    								  
44 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
4 >> 46 LOAD_FAST 0 ( string )				      								    								  
48 LOAD_CONST 3 ( 0 )					      								    								  
50 LOAD_FAST 1 ( i )					      								    								  
52 BUILD_SLICE 2					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_GLOBAL 2 ( chr )				      								    								  
58 LOAD_GLOBAL 3 ( ord )				      								    								  
60 LOAD_FAST 0 ( string )				      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 BINARY_SUBSCR					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_GLOBAL 3 ( ord )				      								    								  
70 LOAD_CONST 1 ( 'a' )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_GLOBAL 3 ( ord )				      								    								  
78 LOAD_CONST 4 ( 'A' )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 BINARY_ADD						      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_ADD						      								    								  
88 LOAD_FAST 0 ( string )				      								    								  
90 LOAD_FAST 1 ( i )					      								    								  
92 LOAD_CONST 5 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_CONST 0 ( None )				      								    								  
98 BUILD_SLICE 2					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 0 ( string )				      								    								  
106 JUMP_ABSOLUTE 14					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
5 >> 110 LOAD_FAST 0 ( string )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PANGRAM_CHECKING					      PANGRAM_CHECKING						    PANGRAM_CHECKING						  PANGRAM_CHECKING
--							      --							    --								  --
Disassembly of <code object checkPangram at 0x7f33e2653f60, f def checkPangram ( s ) :					    def checkPangram ( s ) :					  script_not_found : None
2 0 BUILD_LIST 0					      	  List = [ ]						    	List = [ ]						  
2 STORE_FAST 1 ( List )					      	  for i in range ( 26 ) :				    	for i in range ( 26 ) :					  
							      	      List.append ( False )				    	    List.append ( i )					  
3 4 SETUP_LOOP 26 ( to 32 )				      	  for c in s.lower ( ) :				    	    List.append ( i )					  
6 LOAD_GLOBAL 0 ( range )				      	      if not c == " " :					    	    List.append ( i )					  
8 LOAD_CONST 1 ( 26 )					      		  List [ ord ( c ) - ord ( 'a' ) ] = True	    	    List.append ( i )					  
10 CALL_FUNCTION 1					      	  for ch in List :					    	    List.append ( i )					  
12 GET_ITER						      	      if ch == False :					    	    List.append ( i )					  
>> 14 FOR_ITER 14 ( to 30 )				      		  return False					    	    List.append ( i )					  
16 STORE_FAST 2 ( i )					      	  return True						    	    List.append ( i )					  
							      								    	    List.append ( i )					  
4 18 LOAD_FAST 1 ( List )				      								    	    List.append ( i )					  
20 LOAD_METHOD 1 ( append )				      								    	    List.append ( i )					  
22 LOAD_CONST 2 ( False )				      								    	    List.append ( i )					  
24 CALL_METHOD 1					      								    	    List.append ( i )					  
26 POP_TOP						      								    	    List.append ( i )					  
28 JUMP_ABSOLUTE 14					      								    	    List.append ( i )					  
>> 30 POP_BLOCK						      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
5 >> 32 SETUP_LOOP 44 ( to 78 )				      								    	    List.append ( i )					  
34 LOAD_FAST 0 ( s )					      								    	    List.append ( i )					  
36 LOAD_METHOD 2 ( lower )				      								    	    List.append ( i )					  
38 CALL_METHOD 0					      								    	    List.append ( i )					  
40 GET_ITER						      								    	    List.append ( i )					  
>> 42 FOR_ITER 32 ( to 76 )				      								    	    List.append ( i )					  
44 STORE_FAST 3 ( c )					      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
6 46 LOAD_FAST 3 ( c )					      								    	    List.append ( i )					  
48 LOAD_CONST 3 ( ' ' )					      								    	    List.append ( i )					  
50 COMPARE_OP 2 ( == )					      								    	    List.append ( i )					  
52 POP_JUMP_IF_TRUE 42					      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
7 54 LOAD_CONST 4 ( True )				      								    	    List.append ( i )					  
56 LOAD_FAST 1 ( List )					      								    	    List.append ( i )					  
58 LOAD_GLOBAL 3 ( ord )				      								    	    List.append ( i )					  
60 LOAD_FAST 3 ( c )					      								    	    List.append ( i )					  
62 CALL_FUNCTION 1					      								    	    List.append ( i )					  
64 LOAD_GLOBAL 3 ( ord )				      								    	    List.append ( i )					  
66 LOAD_CONST 5 ( 'a' )					      								    	    List.append ( i )					  
68 CALL_FUNCTION 1					      								    	    List.append ( i )					  
70 BINARY_SUBTRACT					      								    	    List.append ( i )					  
72 STORE_SUBSCR						      								    	    List.append ( i )					  
74 JUMP_ABSOLUTE 42					      								    	    List.append ( i )					  
>> 76 POP_BLOCK						      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
8 >> 78 SETUP_LOOP 24 ( to 104 )			      								    	    List.append ( i )					  
80 LOAD_FAST 1 ( List )					      								    	    List.append ( i )					  
82 GET_ITER						      								    	    List.append ( i )					  
>> 84 FOR_ITER 16 ( to 102 )				      								    	    List.append ( i )					  
86 STORE_FAST 4 ( ch )					      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
9 88 LOAD_FAST 4 ( ch )					      								    	    List.append ( i )					  
90 LOAD_CONST 2 ( False )				      								    	    List.append ( i )					  
92 COMPARE_OP 2 ( == )					      								    	    List.append ( i )					  
94 POP_JUMP_IF_FALSE 84					      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
10 96 LOAD_CONST 2 ( False )				      								    	    List.append ( i )					  
98 RETURN_VALUE						      								    	    List.append ( i )					  
100 JUMP_ABSOLUTE 84					      								    	    List.append ( i )					  
>> 102 POP_BLOCK					      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
11 >> 104 LOAD_CONST 4 ( True )				      								    	    List.append ( i )					  
106 RETURN_VALUE NEW_LINE				      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
							      								    	    List List.append ( i )				  
							      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
							      								    	    List.append ( i )					  
-							      -								    	    -							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>	      MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		    MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		  MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>
--							      --							    --								  --
Disassembly of <code object calculate at 0x7f33e26494b0, file def calculate ( a , n ) :					    def calculate ( a , x = None , y = None , n = None ) :	  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( ) ;						    	s = a.sort ( )						  
2 LOAD_METHOD 0 ( sort )				      	  s = [ ] ;						    	i = n - 1						  
4 CALL_METHOD 0						      	  i = 0 ;						    	while n < n :						  
6 POP_TOP						      	  j = n - 1 ;						    	    s = s [ n ]						  
							      	  while ( i < j ) :					    	    n += 1						  
3 8 BUILD_LIST 0					      	      s.append ( ( a [ i ] + a [ j ] ) ) ;		    	s = s [ n ]						  
10 STORE_FAST 2 ( s )					      	      i += 1 ;						    	s = s [ n ]						  
							      	      j -= 1 ;						    	s = s [ n ]						  
4 12 LOAD_CONST 1 ( 0 )					      	  mini = min ( s ) ;					    	s = s [ n ]						  
14 STORE_FAST 3 ( i )					      	  maxi = max ( s ) ;					    	s = s [ n ]						  
							      	  return abs ( maxi - mini ) ;				    	s = s [ n ]						  
5 16 LOAD_FAST 1 ( n )					      								    	s = s [ n ]						  
18 LOAD_CONST 2 ( 1 )					      								    	s = s [ n ]						  
20 BINARY_SUBTRACT					      								    	s = s [ n ]						  
22 STORE_FAST 4 ( j )					      								    	s = s [ n ]						  
							      								    	s = s [ n ]						  
6 24 SETUP_LOOP 50 ( to 76 )				      								    	s = s [ n ]						  
>> 26 LOAD_FAST 3 ( i )					      								    	s = s [ n ]						  
28 LOAD_FAST 4 ( j )					      								    	s = s [ n ]						  
30 COMPARE_OP 0 ( < )					      								    	s = s [ n ]						  
32 POP_JUMP_IF_FALSE 74					      								    	s = s [ n ]						  
							      								    	s = s [ n ]						  
7 34 LOAD_FAST 2 ( s )					      								    	s = s [ n ]						  
36 LOAD_METHOD 1 ( append )				      								    	s = s [ n ]						  
38 LOAD_FAST 0 ( a )					      								    	s = s [ n ]						  
40 LOAD_FAST 3 ( i )					      								    	s = s [ n ]						  
42 BINARY_SUBSCR					      								    	s [ n ] = s [ n ]					  
44 LOAD_FAST 0 ( a )					      								    	s [ n ] = s [ n ]					  
46 LOAD_FAST 4 ( j )					      								    	s [ n ] = s [ n ]					  
48 BINARY_SUBSCR					      								    	s [ n ] = s [ n ]					  
50 BINARY_ADD						      								    	s [ n ] = s [ n ]					  
52 CALL_METHOD 1					      								    	s [ n ] = s [ n ]					  
54 POP_TOP						      								    	s [ n ] = s						  
							      								    	s [ n ] = s [ n ]					  
8 56 LOAD_FAST 3 ( i )					      								    	s [ n ] = s [ n ]					  
58 LOAD_CONST 2 ( 1 )					      								    	s [ n ] = s [ n ]					  
60 INPLACE_ADD						      								    	s [ n ] = s [ n ]					  
62 STORE_FAST 3 ( i )					      								    	s [ n ] = s [ n ]					  
							      								    	s [ n ] = s [ n ]					  
9 64 LOAD_FAST 4 ( j )					      								    	s [ n ] = s [ n ]					  
66 LOAD_CONST 2 ( 1 )					      								    	s [ n ] = s [ n ]					  
68 INPLACE_SUBTRACT					      								    	s [ n ] = s						  
70 STORE_FAST 4 ( j )					      								    	s [ n ] = s [ n ]					  
72 JUMP_ABSOLUTE 26					      								    	s [ n ] = s [ n ]					  
>> 74 POP_BLOCK						      								    	s [ n ] = s [ n ]					  
							      								    	s [ n ] = s [ n ]					  
10 >> 76 LOAD_GLOBAL 2 ( min )				      								    	s [ n ] = s [ n ]					  
78 LOAD_FAST 2 ( s )					      								    	s [ n ] = s [ n ]					  
80 CALL_FUNCTION 1					      								    	s [ n ] = s [ n ]					  
82 STORE_FAST 5 ( mini )				      								    	s [ n ] = s [ n ]					  
							      								    	s [ n ] = s [ n ]					  
11 84 LOAD_GLOBAL 3 ( max )				      								    	s [ n ] = s [ n ]					  
86 LOAD_FAST 2 ( s )					      								    	s [ n ] = s [ n ]					  
88 CALL_FUNCTION 1					      								    	s [ n ] = s [ n ]					  
90 STORE_FAST 6 ( maxi )				      								    	s [ n ] = s						  
							      								    return s							  
12 92 LOAD_GLOBAL 4 ( abs )				      								    								  
94 LOAD_FAST 6 ( maxi )					      								    								  
96 LOAD_FAST 5 ( mini )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	      GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	    GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1		  GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1
--							      --							    --								  --
Disassembly of <code object findPairs at 0x7f33e2644930, file def findPairs ( arr1 , arr2 , n , m , x ) :		    def findPairs ( arr1 , arr2 , order = True ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  s = set ( )						    	s = set ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , len ( s ) ) :			  
4 STORE_FAST 5 ( s )					      	      s.add ( arr1 [ i ] )				    	    s.add ( s [ i ] )					  
							      	  for j in range ( 0 , m ) :				    	s.add ( s [ i ] )					  
3 6 SETUP_LOOP 32 ( to 40 )				      	      if ( ( x - arr2 [ j ] ) in s ) :			    return s							  
8 LOAD_GLOBAL 1 ( range )				      		  print ( ( x - arr2 [ j ] ) , '' , arr2 [ j ] )    								  
10 LOAD_CONST 1 ( 0 )					      								    								  
12 LOAD_FAST 2 ( n )					      								    								  
14 CALL_FUNCTION 2					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 18 ( to 38 )				      								    								  
20 STORE_FAST 6 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 5 ( s )					      								    								  
24 LOAD_METHOD 2 ( add )				      								    								  
26 LOAD_FAST 0 ( arr1 )					      								    								  
28 LOAD_FAST 6 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 CALL_METHOD 1					      								    								  
34 POP_TOP						      								    								  
36 JUMP_ABSOLUTE 18					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 58 ( to 100 )			      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_CONST 1 ( 0 )					      								    								  
46 LOAD_FAST 3 ( m )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 44 ( to 98 )				      								    								  
54 STORE_FAST 7 ( j )					      								    								  
							      								    								  
6 56 LOAD_FAST 4 ( x )					      								    								  
58 LOAD_FAST 1 ( arr2 )					      								    								  
60 LOAD_FAST 7 ( j )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 BINARY_SUBTRACT					      								    								  
66 LOAD_FAST 5 ( s )					      								    								  
68 COMPARE_OP 6 ( in )					      								    								  
70 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 72 LOAD_GLOBAL 3 ( print )				      								    								  
74 LOAD_FAST 4 ( x )					      								    								  
76 LOAD_FAST 1 ( arr2 )					      								    								  
78 LOAD_FAST 7 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_CONST 2 ( '' )					      								    								  
86 LOAD_FAST 1 ( arr2 )					      								    								  
88 LOAD_FAST 7 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 3					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 52					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	    COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	  COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
Disassembly of <code object countZeroes at 0x7f33e2644930, fi def countZeroes ( mat ) :					    def countnbr_friends es ( mat , N , N ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 5 )					      	  N = 5 ;						    	N = 5							  
2 STORE_FAST 1 ( N )					      	  row = N - 1 ;						    	N = 5							  
							      	  col = 0 ;						    	while N < N :						  
3 4 LOAD_FAST 1 ( N )					      	  count = 0 ;						    	    N = N						  
6 LOAD_CONST 2 ( 1 )					      	  while ( col < N ) :					    	    N = N - N						  
8 BINARY_SUBTRACT					      	      while ( mat [ row ] [ col ] ) :			    	    N = N - N						  
10 STORE_FAST 2 ( row )					      		  if ( row < 0 ) :				    	    N = N - N						  
							      		      return count ;				    	    N = N - N						  
4 12 LOAD_CONST 3 ( 0 )					      		  row = row - 1 ;				    	    N = N - N						  
14 STORE_FAST 3 ( col )					      	      count = count + ( row + 1 ) ;			    	    N = N - N						  
							      	      col = col + 1 ;					    	    N = N - N						  
5 16 LOAD_CONST 3 ( 0 )					      	  return count ;					    	    N = N - N						  
18 STORE_FAST 4 ( count )				      								    	    N = N - N						  
							      								    	    N = N - N						  
6 20 SETUP_LOOP 70 ( to 92 )				      								    	    N = N - N						  
>> 22 LOAD_FAST 3 ( col )				      								    	    N = N - N						  
24 LOAD_FAST 1 ( N )					      								    	    N = N - N						  
26 COMPARE_OP 0 ( < )					      								    	    N = N - N						  
28 POP_JUMP_IF_FALSE 90					      								    	    N = N - N						  
							      								    	    N = N - N						  
7 30 SETUP_LOOP 36 ( to 68 )				      								    	    N = N - N						  
>> 32 LOAD_FAST 0 ( mat )				      								    	    N = N - N						  
34 LOAD_FAST 2 ( row )					      								    	    N = N - N						  
36 BINARY_SUBSCR					      								    	    N = N - N						  
38 LOAD_FAST 3 ( col )					      								    	    N = N - N						  
40 BINARY_SUBSCR					      								    	    N = N - N						  
42 POP_JUMP_IF_FALSE 66					      								    	    N = N * N						  
							      								    	    N = N - N						  
8 44 LOAD_FAST 2 ( row )				      								    	    N = N - N						  
46 LOAD_CONST 3 ( 0 )					      								    	    N = N - N						  
48 COMPARE_OP 0 ( < )					      								    	    N = N - N						  
50 POP_JUMP_IF_FALSE 56					      								    	    N = N - N						  
							      								    	    N = N - N						  
9 52 LOAD_FAST 4 ( count )				      								    	    N = N - N						  
54 RETURN_VALUE						      								    	    N = N - N						  
							      								    	    N = N - N						  
10 >> 56 LOAD_FAST 2 ( row )				      								    	    N = N - N						  
58 LOAD_CONST 2 ( 1 )					      								    	    N = N - N						  
60 BINARY_SUBTRACT					      								    	    N = N - N						  
62 STORE_FAST 2 ( row )					      								    	    N = N - N						  
64 JUMP_ABSOLUTE 32					      								    	    N = N - N						  
>> 66 POP_BLOCK						      								    	    N = N - N						  
							      								    	    N = N - N						  
11 >> 68 LOAD_FAST 4 ( count )				      								    	    N = N - N						  
70 LOAD_FAST 2 ( row )					      								    	    N - N						  
72 LOAD_CONST 2 ( 1 )					      								    	    N = N - N						  
74 BINARY_ADD						      								    	    N = N - N						  
76 BINARY_ADD						      								    	    N = N - N						  
78 STORE_FAST 4 ( count )				      								    	    N = N - N						  
							      								    	    N = N - N						  
12 80 LOAD_FAST 3 ( col )				      								    	    N = N - N						  
82 LOAD_CONST 2 ( 1 )					      								    	    N = N - N						  
84 BINARY_ADD						      								    	    N - N						  
86 STORE_FAST 3 ( col )					      								    	    N = N - N						  
88 JUMP_ABSOLUTE 22					      								    	    N = N - N						  
>> 90 POP_BLOCK						      								    	    N = N - N						  
							      								    	    N = N - N						  
13 >> 92 LOAD_FAST 4 ( count )				      								    	    N = N - N						  
94 RETURN_VALUE NEW_LINE				      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N						  
							      								    	    N = N - N						  
							      								    	    N = N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N - N						  
							      								    	    N = N						  
							      								    	    N = N - N						  
							      								    	    N = N						  
							      								    	    N = N						  
							      								    	    N = N						  
-							      -								    	    N = N-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
Disassembly of <code object decToBinary at 0x7f33e2653f60, fi def decToBinary ( n ) :					    def decToBinary ( n , binaryNum ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  binaryNum = [ 0 ] * n ;				    	binaryNum = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 
2 BUILD_LIST 1						      	  i = 0 ;						    								  
4 LOAD_FAST 0 ( n )					      	  while ( n > 0 ) :					    								  
6 BINARY_MULTIPLY					      	      binaryNum [ i ] = n % 2 ;				    								  
8 STORE_FAST 1 ( binaryNum )				      	      n = int ( n / 2 ) ;				    								  
							      	      i += 1 ;						    								  
3 10 LOAD_CONST 1 ( 0 )					      	  for j in range ( i - 1 , - 1 , - 1 ) :		    								  
12 STORE_FAST 2 ( i )					      	      print ( binaryNum [ j ] , end = "" ) ;		    								  
							      								    								  
4 14 SETUP_LOOP 44 ( to 60 )				      								    								  
>> 16 LOAD_FAST 0 ( n )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 4 ( > )					      								    								  
22 POP_JUMP_IF_FALSE 58					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( n )					      								    								  
26 LOAD_CONST 2 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_FAST 1 ( binaryNum )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
							      								    								  
6 36 LOAD_GLOBAL 0 ( int )				      								    								  
38 LOAD_FAST 0 ( n )					      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 0 ( n )					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( i )					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 2 ( i )					      								    								  
56 JUMP_ABSOLUTE 16					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
8 >> 60 SETUP_LOOP 40 ( to 102 )			      								    								  
62 LOAD_GLOBAL 1 ( range )				      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_CONST 3 ( 1 )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 LOAD_CONST 4 ( - 1 )					      								    								  
72 LOAD_CONST 4 ( - 1 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 20 ( to 100 )				      								    								  
80 STORE_FAST 3 ( j )					      								    								  
							      								    								  
9 82 LOAD_GLOBAL 2 ( print )				      								    								  
84 LOAD_FAST 1 ( binaryNum )				      								    								  
86 LOAD_FAST 3 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 5 ( '' )					      								    								  
92 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
94 CALL_FUNCTION_KW 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 78					      								    								  
>> 100 POP_BLOCK					      								    								  
>> 102 LOAD_CONST 0 ( None )				      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER
--							      --							    --								  --
Disassembly of <code object overflow at 0x7f33e2644f60, file  def overflow ( H , r , h , N , R ) :			    def overflow ( bytes , r = 0.1 , alpha = 0.1 , beta = 0.1 , a script_not_found : None
2 0 LOAD_CONST 1 ( 3.14 )				      	  tank_cap = 3.14 * r * r * H				    	tank_cap = 3.14 * ( r + r )				  
2 LOAD_FAST 1 ( r )					      	  water_vol = 3.14 * r * r * h				    	if ( ( 1 - alpha ) < ( 1 - alpha ) ) :			  
4 BINARY_MULTIPLY					      	  balls_vol = N * ( 4 / 3 ) * 3.14 * R * R * R		    	    return ( - 1 )					  
6 LOAD_FAST 1 ( r )					      	  vol = water_vol + balls_vol				    	if ( ( 1 - alpha ) < ( 1 - alpha ) ) :			  
8 BINARY_MULTIPLY					      	  if vol > tank_cap :					    	    return ( - 1 )					  
10 LOAD_FAST 0 ( H )					      	      print ( "Overflow" )				    	else :							  
12 BINARY_MULTIPLY					      	  else :						    	    return ( - 1 )					  
14 STORE_FAST 5 ( tank_cap )				      	      print ( "Not in overflow state" )			    								  
							      								    								  
3 16 LOAD_CONST 1 ( 3.14 )				      								    								  
18 LOAD_FAST 1 ( r )					      								    								  
20 BINARY_MULTIPLY					      								    								  
22 LOAD_FAST 1 ( r )					      								    								  
24 BINARY_MULTIPLY					      								    								  
26 LOAD_FAST 2 ( h )					      								    								  
28 BINARY_MULTIPLY					      								    								  
30 STORE_FAST 6 ( water_vol )				      								    								  
							      								    								  
4 32 LOAD_FAST 3 ( N )					      								    								  
34 LOAD_CONST 2 ( 1.3333333333333333 )			      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 1 ( 3.14 )				      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 4 ( R )					      								    								  
44 BINARY_MULTIPLY					      								    								  
46 LOAD_FAST 4 ( R )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 LOAD_FAST 4 ( R )					      								    								  
52 BINARY_MULTIPLY					      								    								  
54 STORE_FAST 7 ( balls_vol )				      								    								  
							      								    								  
5 56 LOAD_FAST 6 ( water_vol )				      								    								  
58 LOAD_FAST 7 ( balls_vol )				      								    								  
60 BINARY_ADD						      								    								  
62 STORE_FAST 8 ( vol )					      								    								  
							      								    								  
6 64 LOAD_FAST 8 ( vol )				      								    								  
66 LOAD_FAST 5 ( tank_cap )				      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
7 72 LOAD_GLOBAL 0 ( print )				      								    								  
74 LOAD_CONST 3 ( 'Overflow' )				      								    								  
76 CALL_FUNCTION 1					      								    								  
78 POP_TOP						      								    								  
80 JUMP_FORWARD 8 ( to 90 )				      								    								  
							      								    								  
9 >> 82 LOAD_GLOBAL 0 ( print )				      								    								  
84 LOAD_CONST 4 ( 'Not in overflow state' )		      								    								  
86 CALL_FUNCTION 1					      								    								  
88 POP_TOP						      								    								  
>> 90 LOAD_CONST 0 ( None )				      								    								  
92 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIAGONALLY_DOMINANT_MATRIX				      DIAGONALLY_DOMINANT_MATRIX				    DIAGONALLY_DOMINANT_MATRIX					  DIAGONALLY_DOMINANT_MATRIX
--							      --							    --								  --
Disassembly of <code object isDDM at 0x7f33e2644f60, file "<d def isDDM ( m , n ) :					    def isDDM ( f , n , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 106 ( to 108 )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , n ) :				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( range )				      	      sum = 0						    	    if n % n == 0 :					  alid/DIAGONALLY_DOMINANT_MATRIX.py", line 28	   d
4 LOAD_CONST 1 ( 0 )					      	      for j in range ( 0 , n ) :			    		return 0					  ef f_filled ( f , n , n ) :	  ^ SyntaxError: dup
6 LOAD_FAST 1 ( n )					      		  sum = sum + abs ( m [ i ] [ j ] )		    	return 0						  licate argument 'n' in function definition
8 CALL_FUNCTION 2					      	      sum = sum - abs ( m [ i ] [ i ] )			    								  
10 GET_ITER						      	      if ( abs ( m [ i ] [ i ] ) < sum ) :		    								  
>> 12 FOR_ITER 92 ( to 106 )				      		  return False					    								  
14 STORE_FAST 2 ( i )					      	  return True						    								  
							      								    								  
3 16 LOAD_CONST 1 ( 0 )					      								    								  
18 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
4 20 SETUP_LOOP 38 ( to 60 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 24 ( to 58 )				      								    								  
34 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 36 LOAD_FAST 3 ( sum )				      								    								  
38 LOAD_GLOBAL 1 ( abs )				      								    								  
40 LOAD_FAST 0 ( m )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 4 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 3 ( sum )					      								    								  
56 JUMP_ABSOLUTE 32					      								    								  
>> 58 POP_BLOCK						      								    								  
							      								    								  
6 >> 60 LOAD_FAST 3 ( sum )				      								    								  
62 LOAD_GLOBAL 1 ( abs )				      								    								  
64 LOAD_FAST 0 ( m )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 CALL_FUNCTION 1					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
7 80 LOAD_GLOBAL 1 ( abs )				      								    								  
82 LOAD_FAST 0 ( m )					      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 2 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 LOAD_FAST 3 ( sum )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
8 100 LOAD_CONST 2 ( False )				      								    								  
102 RETURN_VALUE					      								    								  
104 JUMP_ABSOLUTE 12					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
9 >> 108 LOAD_CONST 3 ( True )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT		      FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			    FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			  FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT
--							      --							    --								  --
Disassembly of <code object findDuplicateparenthesis at 0x7f3 def findDuplicateparenthesis ( string ) :			    def findDuplicatepdding ( string ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_LIST 0					      	  Stack = [ ]						    	Stack = [ ]						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 1 ( Stack )				      	  for ch in string :					    	for ch in string :					  alid/FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT.py"
							      	      if ch == ')' :					    	    if ch == "" :					  , line 70	Stack [ ch ] = [ ch ]	      ^ Synt
3 4 SETUP_LOOP 86 ( to 92 )				      		  top = Stack.pop ( )				    		Stack = [ ch ]					  axError: invalid syntax
6 LOAD_FAST 0 ( string )				      		  elementsInside = 0				    		Stack = [ ch ]					  
8 GET_ITER						      		  while top != '(' :				    		Stack = [ ch ]					  
>> 10 FOR_ITER 78 ( to 90 )				      		      elementsInside += 1			    		Stack = [ ch ]					  
12 STORE_FAST 2 ( ch )					      		      top = Stack.pop ( )			    		Stack [ ch ] = [ ch ]				  
							      		  if elementsInside < 1 :			    		Stack [ ch ] = [ ch ]				  
4 14 LOAD_FAST 2 ( ch )					      		      return True				    		Stack [ ch ] = [ ch ]				  
16 LOAD_CONST 1 ( ')' )					      	      else :						    		Stack [ ch ] = [ ch ]				  
18 COMPARE_OP 2 ( == )					      		  Stack.append ( ch )				    		Stack [ ch ] = [ ch ]				  
20 POP_JUMP_IF_FALSE 78					      	  return False						    		Stack [ ch ] = [ ch ]				  
							      								    		Stack [ ch ] = [ ch ]				  
5 22 LOAD_FAST 1 ( Stack )				      								    		Stack [ ch ] = [ ch ]				  
24 LOAD_METHOD 0 ( pop )				      								    		Stack [ ch ] = [ ch ]				  
26 CALL_METHOD 0					      								    		Stack [ ch ] = [ ch ]				  
28 STORE_FAST 3 ( top )					      								    		Stack [ ch ] = [ ch ]				  
							      								    		Stack [ ch ] = [ ch ]				  
6 30 LOAD_CONST 2 ( 0 )					      								    		Stack [ ch ] = [ ch ]				  
32 STORE_FAST 4 ( elementsInside )			      								    		Stack [ ch ] = [ ch ]				  
							      								    		Stack [ ch ] = [ ch ]				  
7 34 SETUP_LOOP 28 ( to 64 )				      								    		Stack [ ch ] = [ ch ]				  
>> 36 LOAD_FAST 3 ( top )				      								    		Stack [ ch ] = [ ch ]				  
38 LOAD_CONST 3 ( '(' )					      								    		Stack [ ch ] = [ ch ]				  
40 COMPARE_OP 3 ( != )					      								    		Stack [ ch ] = [ ch ]				  
42 POP_JUMP_IF_FALSE 62					      								    		Stack [ ch ] = [ ch ]				  
							      								    		Stack [ ch ] = [ ch ]				  
8 44 LOAD_FAST 4 ( elementsInside )			      								    		Stack [ ch ] = [ ch ]				  
46 LOAD_CONST 4 ( 1 )					      								    		Stack [ ch ] = [ ch ]				  
48 INPLACE_ADD						      								    		Stack [ ch ] = [ ch ]				  
50 STORE_FAST 4 ( elementsInside )			      								    		Stack [ ch ] = [ ch ]				  
							      								    		Stack [ ch ] = [ ch ]				  
9 52 LOAD_FAST 1 ( Stack )				      								    		Stack [ ch ] = [ ch ]				  
54 LOAD_METHOD 0 ( pop )				      								    		Stack [ ch ] = [ ch ]				  
56 CALL_METHOD 0					      								    		Stack [ ch ] = [ ch				  
58 STORE_FAST 3 ( top )					      								    		Stack [ ch ] = [ ch ]				  
60 JUMP_ABSOLUTE 36					      								    		Stack [ ch ] = [ ch ]				  
>> 62 POP_BLOCK						      								    		Stack [ ch ] = [ ch ]				  
							      								    		Stack [ ch ] = [ ch ]				  
10 >> 64 LOAD_FAST 4 ( elementsInside )			      								    		Stack [ ch ] = [ ch				  
66 LOAD_CONST 4 ( 1 )					      								    		Stack [ ch ] = [ ch				  
68 COMPARE_OP 0 ( < )					      								    		Stack [ ch ] = Stack [ ch ]			  
70 POP_JUMP_IF_FALSE 88					      								    		Stack [ ch ] = Stack [ ch ]			  
							      								    		Stack [ ch ] = Stack [ ch ]			  
11 72 LOAD_CONST 5 ( True )				      								    		Stack [ ch ] = Stack				  
74 RETURN_VALUE						      								    		Stack [ ch ] = Stack				  
76 JUMP_ABSOLUTE 10					      								    		Stack [ ch ] = Stack				  
							      								    		Stack [ ch ] = Stack				  
13 >> 78 LOAD_FAST 1 ( Stack )				      								    		Stack [ ch ] = Stack [ ch ]			  
80 LOAD_METHOD 1 ( append )				      								    		Stack [ ch ] = Stack				  
82 LOAD_FAST 2 ( ch )					      								    		Stack [ ch ] = Stack				  
84 CALL_METHOD 1					      								    		Stack [ ch ] = Stack				  
86 POP_TOP						      								    		Stack [ ch ] = Stack				  
>> 88 JUMP_ABSOLUTE 10					      								    		Stack [ ch ] = Stack [ ch ]			  
>> 90 POP_BLOCK						      								    		Stack [ ch ] = Stack				  
							      								    		Stack [ ch ] = Stack				  
14 >> 92 LOAD_CONST 6 ( False )				      								    		Stack [ ch ] = Stack				  
94 RETURN_VALUE NEW_LINE				      								    	return Stack						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		      FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		    FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N			  FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N
--							      --							    --								  --
Disassembly of <code object findRepeatingElement at 0x7f33e26 def findRepeatingElement ( arr , low , high ) :		    def findRepeatingElement ( arr , low , high , high ) :	  script_not_found : None
2 0 LOAD_FAST 1 ( low )					      	  if low > high :					    	if low > high :						  
2 LOAD_FAST 2 ( high )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 4 ( > )					      	  mid = ( low + high ) / 2				    	mid = ( low - high ) * ( ( low - high ) * ( low - high )  
6 POP_JUMP_IF_FALSE 12					      	  if ( arr [ mid ] != mid + 1 ) :			    	mid = ( low - high ) * ( ( low - high ) * ( high - high ) 
							      	      if ( mid > 0 and arr [ mid ] == arr [ mid - 1 ] ) :   	mid = ( low - high ) * ( ( low - high ) * ( low - high )  
3 8 LOAD_CONST 1 ( - 1 )				      		  return mid					    	mid = ( low - high ) * ( ( low - high ) * ( high - high ) 
10 RETURN_VALUE						      	      return findRepeatingElement ( arr , low , mid - 1 )   	mid = ( low - high ) * ( ( low - high ) * ( high - high ) 
							      	  return findRepeatingElement ( arr , mid + 1 , high )	    	return ( mid - low ) * ( mid - low )			  
4 >> 12 LOAD_FAST 1 ( low )				      								    								  
14 LOAD_FAST 2 ( high )					      								    								  
16 BINARY_ADD						      								    								  
18 LOAD_CONST 2 ( 2 )					      								    								  
20 BINARY_TRUE_DIVIDE					      								    								  
22 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 3 ( mid )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 3 ( mid )					      								    								  
32 LOAD_CONST 3 ( 1 )					      								    								  
34 BINARY_ADD						      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( mid )				      								    								  
42 LOAD_CONST 4 ( 0 )					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 72					      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 3 ( mid )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 3 ( mid )					      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 68 LOAD_FAST 3 ( mid )				      								    								  
70 RETURN_VALUE						      								    								  
							      								    								  
8 >> 72 LOAD_GLOBAL 0 ( findRepeatingElement )		      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 1 ( low )					      								    								  
78 LOAD_FAST 3 ( mid )					      								    								  
80 LOAD_CONST 3 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 CALL_FUNCTION 3					      								    								  
86 RETURN_VALUE						      								    								  
							      								    								  
9 >> 88 LOAD_GLOBAL 0 ( findRepeatingElement )		      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 3 ( mid )					      								    								  
94 LOAD_CONST 3 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 2 ( high )					      								    								  
100 CALL_FUNCTION 3					      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			      MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			    MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			  MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK
--							      --							    --								  --
Disassembly of <code object minRotation at 0x7f33e2644f60, fi def minRotation ( input , unlock_code ) :			    def minRotation ( input , unlock_code ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  rotation = 0 ;					    	rotation = 0						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( rotation )				      	  while ( input > 0 or unlock_code > 0 ) :		    	for ( value in input [ 0 ] ) :				  alid/MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK.py", l
							      	      input_digit = input % 10 ;			    	    if ( value > 0 ) and ( value > 0 ) :		  ine 30     for ( value in input [ 0 ] ) :
3 4 SETUP_LOOP 94 ( to 100 )				      	      code_digit = unlock_code % 10 ;			    		rotation = ( value - 1 )			  			   ^ SyntaxError: invalid sy
>> 6 LOAD_FAST 0 ( input )				      	      rotation += min ( abs ( input_digit - code_digit ) ,  	    elif ( value > 0 ) :				  ntax
8 LOAD_CONST 1 ( 0 )					      	      input = int ( input / 10 ) ;			    		rotation = ( value - 1 )			  
10 COMPARE_OP 4 ( > )					      	      unlock_code = int ( unlock_code / 10 ) ;		    	    elif ( value > 0 ) :				  
12 POP_JUMP_IF_TRUE 22					      	  return rotation ;					    		rotation = ( value - 1 )			  
14 LOAD_FAST 1 ( unlock_code )				      								    	    elif ( value > 0 ) :				  
16 LOAD_CONST 1 ( 0 )					      								    		rotation = ( value - 1 )			  
18 COMPARE_OP 4 ( > )					      								    	    elif ( value > 0 ) :				  
20 POP_JUMP_IF_FALSE 98					      								    		rotation = ( value - 1 )			  
							      								    	    elif ( value > 0 ) :				  
4 >> 22 LOAD_FAST 0 ( input )				      								    		rotation = ( value - 1 )			  
24 LOAD_CONST 2 ( 10 )					      								    	    elif ( value > 0 ) :				  
26 BINARY_MODULO					      								    		rotation = ( value - 1 )			  
28 STORE_FAST 3 ( input_digit )				      								    	    elif ( value > 0 ) :				  
							      								    		rotation = ( value - 1 )			  
5 30 LOAD_FAST 1 ( unlock_code )			      								    	    elif ( value > 0 ) :				  
32 LOAD_CONST 2 ( 10 )					      								    		rotation = ( value - 1 )			  
34 BINARY_MODULO					      								    	    elif ( value > 0 ) :				  
36 STORE_FAST 4 ( code_digit )				      								    		rotation = ( value - 1 )			  
							      								    	    elif ( value > 0 ) :				  
6 38 LOAD_FAST 2 ( rotation )				      								    		rotation = ( value - 1 )			  
40 LOAD_GLOBAL 0 ( min )				      								    	    elif ( value > 0 ) :				  
42 LOAD_GLOBAL 1 ( abs )				      								    		rotation = ( value - 1 ) * ( value - 1 )	  
44 LOAD_FAST 3 ( input_digit )				      								    	    elif ( value > 0 ) :				  
46 LOAD_FAST 4 ( code_digit )				      								    		rotation = ( value - 1 ) * ( value - 1 )	  
48 BINARY_SUBTRACT					      								    	    elif ( value > 0 ) :				  
50 CALL_FUNCTION 1					      								    		rotation = ( value - 1 ) * ( value - 1 )	  
52 LOAD_CONST 2 ( 10 )					      								    	    elif ( value > 0 ) :				  
54 LOAD_GLOBAL 1 ( abs )				      								    		rotation = ( value - 1 ) * ( value - 1 )	  
56 LOAD_FAST 3 ( input_digit )				      								    	    elif ( value > 0 ) :				  
58 LOAD_FAST 4 ( code_digit )				      								    		rotation = ( value - 1 ) * ( value - 1 )	  
60 BINARY_SUBTRACT					      								    	    elif ( value > 0 ) :				  
62 CALL_FUNCTION 1					      								    		rotation = ( value - 1 ) * ( value - 1 )	  
64 BINARY_SUBTRACT					      								    	    elif ( value > 0 ) :				  
66 CALL_FUNCTION 2					      								    		rotation = ( value - 1 ) * ( value - 1 )	  
68 INPLACE_ADD						      								    return rotation						  
70 STORE_FAST 2 ( rotation )				      								    								  
							      								    								  
7 72 LOAD_GLOBAL 2 ( int )				      								    								  
74 LOAD_FAST 0 ( input )				      								    								  
76 LOAD_CONST 2 ( 10 )					      								    								  
78 BINARY_TRUE_DIVIDE					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 STORE_FAST 0 ( input )				      								    								  
							      								    								  
8 84 LOAD_GLOBAL 2 ( int )				      								    								  
86 LOAD_FAST 1 ( unlock_code )				      								    								  
88 LOAD_CONST 2 ( 10 )					      								    								  
90 BINARY_TRUE_DIVIDE					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 STORE_FAST 1 ( unlock_code )				      								    								  
96 JUMP_ABSOLUTE 6					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
9 >> 100 LOAD_FAST 2 ( rotation )			      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW
--							      --							    --								  --
Disassembly of <code object checkForSorting at 0x7f33e26494b0 def checkForSorting ( arr , n ) :				    def checkForSorting ( arr , n , n , n , n , n , n , n , n , n error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 106 ( to 108 )				      	  for i in range ( 0 , n - 1 ) :			    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( range )				      	      if ( arr [ i ] > arr [ i + 1 ] ) :		    								  alid/CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPIN
4 LOAD_CONST 1 ( 0 )					      		  if ( arr [ i ] - arr [ i + 1 ] == 1 ) :	    								  G_ADJACENT_ALLOWED.py", line 27     def f_filled (
6 LOAD_FAST 1 ( n )					      		      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 								   arr , n , n , n , n , n , n , n , n , n , n , n ,
8 LOAD_CONST 2 ( 1 )					      		  else :					    								   n , n , n , n , n , n , n , n , n , n , n , n , n
10 BINARY_SUBTRACT					      		      return False				    								   , n n , n , n , n , n , n , n , n , n , n , n , n
12 CALL_FUNCTION 2					      	  return True						    								   , n , n n , n , n n , n n , n , n , n , n , n , n
14 GET_ITER						      								    								   , n , n , n , n , n , n , n , n , n , n n , n , n
>> 16 FOR_ITER 88 ( to 106 )				      								    								   , n , n , n , n , n , n , n , n , n , n , n , n ,
18 STORE_FAST 2 ( i )					      								    								   n , n , n , n , n , n , n , n , n , n , n , n , n
							      								    								   , n , n , n , n , n , n , n , n , n , n , n , n ,
3 20 LOAD_FAST 0 ( arr )				      								    								   n , n , n , n , n , n , n , n , n , n , n , n , n
22 LOAD_FAST 2 ( i )					      								    								   , n , n , n , n , n , n , n , n , n , n , n , n ,
24 BINARY_SUBSCR					      								    								   n , n , n , n , n , n , n , n , n , n , n , n , n
26 LOAD_FAST 0 ( arr )					      								    								   , n , n , n , n , n , n , n , n , n , n , n , n ,
28 LOAD_FAST 2 ( i )					      								    								   n , n , n , n , n , n , n , n , n , n , n , n , n
30 LOAD_CONST 2 ( 1 )					      								    								   , n , n , n , n , n , n , n , n , n , n , n , n ,
32 BINARY_ADD						      								    								   n , n , n , n , n , n , n , n , n , n , n , n , n
34 BINARY_SUBSCR					      								    								   , n , n , n , n , n , n , n , n , n , n , n , n ,
36 COMPARE_OP 4 ( > )					      								    								   n , n , n , n , n , n , n , n , n , n , n , n , n
38 POP_JUMP_IF_FALSE 16					      								    								   , n , n n , n , n , n , n , n , n , n , n , n , n
							      								    								   , n , n n , n , n , n n , n , n , n n , n n , n ,
4 40 LOAD_FAST 0 ( arr )				      								    								   n n , n , n , n n , n , n , n , n , n , n , n , n
42 LOAD_FAST 2 ( i )					      								    								   , n , n
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  				  ^ SyntaxError: inv
48 LOAD_FAST 2 ( i )					      								    								  alid syntax
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_CONST 2 ( 1 )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
5 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 ROT_TWO						      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 2 ( i )					      								    								  
86 STORE_SUBSCR						      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_SUBSCR						      								    								  
98 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
7 >> 100 LOAD_CONST 3 ( False )				      								    								  
102 RETURN_VALUE					      								    								  
104 JUMP_ABSOLUTE 16					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
8 >> 108 LOAD_CONST 4 ( True )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
Disassembly of <code object insertionSortRecursive at 0x7f33e def insertionSortRecursive ( arr , n ) :			    def insertionSortortsive ( arr , n , n ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( n )					      	  if n <= 1 :						    	if n <= 1 :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 1 )					      	      return						    	    return None						  alid/RECURSIVE_INSERTION_SORT.py", line 29	 def
4 COMPARE_OP 1 ( <= )					      	  insertionSortRecursive ( arr , n - 1 )		    	insertionortortsive ( arr , n , n , n , n )		   f_filled ( arr , n , n ) :	  ^ SyntaxError: dup
6 POP_JUMP_IF_FALSE 12					      	  last = arr [ n - 1 ]					    	if len ( arr ) >= n :					  licate argument 'n' in function definition
							      	  j = n - 2						    	    return None						  
3 8 LOAD_CONST 0 ( None )				      	  while ( j >= 0 and arr [ j ] > last ) :		    	if n >= n :						  
10 RETURN_VALUE						      	      arr [ j + 1 ] = arr [ j ]				    	    return None						  
							      	      j = j - 1						    	if n <= n :						  
4 >> 12 LOAD_GLOBAL 0 ( insertionSortRecursive )	      	  arr [ j + 1 ] = last					    	    return None						  
14 LOAD_FAST 0 ( arr )					      								    	if n <= n <= n :					  
16 LOAD_FAST 1 ( n )					      								    	    return None						  
18 LOAD_CONST 1 ( 1 )					      								    	if n <= n <= n :					  
20 BINARY_SUBTRACT					      								    	    return None						  
22 CALL_FUNCTION 2					      								    	if n <= n <= n <= n :					  
24 POP_TOP						      								    	    return None						  
							      								    	if n <= n <= n :					  
5 26 LOAD_FAST 0 ( arr )				      								    	    return None						  
28 LOAD_FAST 1 ( n )					      								    	else :							  
30 LOAD_CONST 1 ( 1 )					      								    	    return None						  
32 BINARY_SUBTRACT					      								    								  
34 BINARY_SUBSCR					      								    								  
36 STORE_FAST 2 ( last )				      								    								  
							      								    								  
6 38 LOAD_FAST 1 ( n )					      								    								  
40 LOAD_CONST 2 ( 2 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 STORE_FAST 3 ( j )					      								    								  
							      								    								  
7 46 SETUP_LOOP 48 ( to 96 )				      								    								  
>> 48 LOAD_FAST 3 ( j )					      								    								  
50 LOAD_CONST 3 ( 0 )					      								    								  
52 COMPARE_OP 5 ( >= )					      								    								  
54 POP_JUMP_IF_FALSE 94					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 3 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 2 ( last )					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
8 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 3 ( j )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
9 84 LOAD_FAST 3 ( j )					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 STORE_FAST 3 ( j )					      								    								  
92 JUMP_ABSOLUTE 48					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 2 ( last )				      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 3 ( j )					      								    								  
102 LOAD_CONST 1 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_SUBSCR					      								    								  
108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSTRING_1				      LONGEST_COMMON_SUBSTRING_1				    LONGEST_COMMON_SUBSTRING_1					  LONGEST_COMMON_SUBSTRING_1
--							      --							    --								  --
Disassembly of <code object lcs at 0x7f33e2649a50, file "<dis def lcs ( i , j , count ) :				    def lcs ( i ) :						  script_not_found : None
2 0 LOAD_FAST 0 ( i )					      	  if ( i == 0 or j == 0 ) :				    	if i == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return count					    	    if i == 0 :						  
4 COMPARE_OP 2 ( == )					      	  if ( X [ i - 1 ] == Y [ j - 1 ] ) :			    		return i					  
6 POP_JUMP_IF_TRUE 16					      	      count = lcs ( i - 1 , j - 1 , count + 1 )		    	    if i == 0 :						  
8 LOAD_FAST 1 ( j )					      	  count = max ( count , max ( lcs ( i , j - 1 , 0 ) , lcs ( 		return i					  
10 LOAD_CONST 1 ( 0 )					      	  return count						    	    if i == 0 :						  
12 COMPARE_OP 2 ( == )					      								    		return i					  
14 POP_JUMP_IF_FALSE 20					      								    	    if i == 1 :						  
							      								    		return i					  
3 >> 16 LOAD_FAST 2 ( count )				      								    	    i += 1						  
18 RETURN_VALUE						      								    	if i == 0 :						  
							      								    	    return i						  
4 >> 20 LOAD_GLOBAL 0 ( X )				      								    	i += 1							  
22 LOAD_FAST 0 ( i )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_GLOBAL 1 ( Y )					      								    								  
32 LOAD_FAST 1 ( j )					      								    								  
34 LOAD_CONST 2 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 BINARY_SUBSCR					      								    								  
40 COMPARE_OP 2 ( == )					      								    								  
42 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 2 ( lcs )				      								    								  
46 LOAD_FAST 0 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 LOAD_FAST 1 ( j )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 2 ( count )				      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 CALL_FUNCTION 3					      								    								  
66 STORE_FAST 2 ( count )				      								    								  
							      								    								  
6 >> 68 LOAD_GLOBAL 3 ( max )				      								    								  
70 LOAD_FAST 2 ( count )				      								    								  
72 LOAD_GLOBAL 3 ( max )				      								    								  
74 LOAD_GLOBAL 2 ( lcs )				      								    								  
76 LOAD_FAST 0 ( i )					      								    								  
78 LOAD_FAST 1 ( j )					      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 LOAD_CONST 1 ( 0 )					      								    								  
86 CALL_FUNCTION 3					      								    								  
88 LOAD_GLOBAL 2 ( lcs )				      								    								  
90 LOAD_FAST 0 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_FAST 1 ( j )					      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 CALL_FUNCTION 3					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 STORE_FAST 2 ( count )				      								    								  
							      								    								  
7 108 LOAD_FAST 2 ( count )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			      CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			    CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX				  CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX
--							      --							    --								  --
Disassembly of <code object areSumSame at 0x7f33e2644930, fil def areSumSame ( a , n , m ) :				    def areSumSame ( a , n , n , n ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  sum1 = 0						    	sum1 = 0						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 3 ( sum1 )					      	  sum2 = 0						    	sum2 = 0						  alid/CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX.py", line
							      	  for i in range ( 0 , n ) :				    	sum2 = 0						  31	 def f_filled ( a , n , n , n ) :     ^ Synt
3 4 LOAD_CONST 1 ( 0 )					      	      sum1 = 0						    	for i in range ( 0 , n ) :				  axError: duplicate argument 'n' in function defini
6 STORE_FAST 4 ( sum2 )					      	      sum2 = 0						    	    sum1 = n - n					  tion
							      	      for j in range ( 0 , m ) :			    	    sum2 = n - n					  
4 8 SETUP_LOOP 90 ( to 100 )				      		  sum1 += a [ i ] [ j ]				    	    sum2 = sum1 / sum2					  
10 LOAD_GLOBAL 0 ( range )				      		  sum2 += a [ j ] [ i ]				    	    sum2 = sum1 / sum2					  
12 LOAD_CONST 1 ( 0 )					      	      if ( sum1 == sum2 ) :				    	    sum2 = sum2 * sum2 * sum2 * sum2 * sum2 * sum2 * sum2 
14 LOAD_FAST 1 ( n )					      		  return 1					    								  
16 CALL_FUNCTION 2					      	  return 0						    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 76 ( to 98 )				      								    								  
22 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 3 ( sum1 )				      								    								  
							      								    								  
6 28 LOAD_CONST 1 ( 0 )					      								    								  
30 STORE_FAST 4 ( sum2 )				      								    								  
							      								    								  
7 32 SETUP_LOOP 50 ( to 84 )				      								    								  
34 LOAD_GLOBAL 0 ( range )				      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 2 ( m )					      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 36 ( to 82 )				      								    								  
46 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 48 LOAD_FAST 3 ( sum1 )				      								    								  
50 LOAD_FAST 0 ( a )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 6 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( sum1 )				      								    								  
							      								    								  
9 64 LOAD_FAST 4 ( sum2 )				      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 6 ( j )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 5 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 INPLACE_ADD						      								    								  
78 STORE_FAST 4 ( sum2 )				      								    								  
80 JUMP_ABSOLUTE 44					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
10 >> 84 LOAD_FAST 3 ( sum1 )				      								    								  
86 LOAD_FAST 4 ( sum2 )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
11 92 LOAD_CONST 2 ( 1 )				      								    								  
94 RETURN_VALUE						      								    								  
96 JUMP_ABSOLUTE 20					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
12 >> 100 LOAD_CONST 1 ( 0 )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			  LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1
--							      --							    --								  --
Disassembly of <code object maxLength at 0x7f33e2644f60, file def maxLength ( s , n ) :					    def maxLength ( s ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  invalidOpenBraces = 0 ;				    	invalidvalides = 0					  
2 STORE_FAST 2 ( invalidOpenBraces )			      	  invalidCloseBraces = 0 ;				    	invalidvalides = 0					  
							      	  for i in range ( n ) :				    	for i in range ( len ( s ) ) :				  
3 4 LOAD_CONST 1 ( 0 )					      	      if ( s [ i ] == '(' ) :				    	    if s [ i ] == 't' :					  
6 STORE_FAST 3 ( invalidCloseBraces )			      		  invalidOpenBraces += 1			    		return s [ i ]					  
							      	      else :						    	return s						  
4 8 SETUP_LOOP 64 ( to 74 )				      		  if ( invalidOpenBraces == 0 ) :		    								  
10 LOAD_GLOBAL 0 ( range )				      		      invalidCloseBraces += 1			    								  
12 LOAD_FAST 1 ( n )					      		  else :					    								  
14 CALL_FUNCTION 1					      		      invalidOpenBraces -= 1			    								  
16 GET_ITER						      	  return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) 								  
>> 18 FOR_ITER 52 ( to 72 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 2 ( '(' )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
6 34 LOAD_FAST 2 ( invalidOpenBraces )			      								    								  
36 LOAD_CONST 3 ( 1 )					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 2 ( invalidOpenBraces )			      								    								  
42 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 44 LOAD_FAST 2 ( invalidOpenBraces )		      								    								  
46 LOAD_CONST 1 ( 0 )					      								    								  
48 COMPARE_OP 2 ( == )					      								    								  
50 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
9 52 LOAD_FAST 3 ( invalidCloseBraces )			      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( invalidCloseBraces )			      								    								  
60 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
11 >> 62 LOAD_FAST 2 ( invalidOpenBraces )		      								    								  
64 LOAD_CONST 3 ( 1 )					      								    								  
66 INPLACE_SUBTRACT					      								    								  
68 STORE_FAST 2 ( invalidOpenBraces )			      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
12 >> 74 LOAD_FAST 1 ( n )				      								    								  
76 LOAD_FAST 2 ( invalidOpenBraces )			      								    								  
78 LOAD_FAST 3 ( invalidCloseBraces )			      								    								  
80 BINARY_ADD						      								    								  
82 BINARY_SUBTRACT					      								    								  
84 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	      GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	    GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	  GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT
--							      --							    --								  --
Disassembly of <code object findSymPairs at 0x7f33e2644f60, f def findSymPairs ( arr , row ) :				    def findSymPairs ( arr , 0x70x76464f60 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  hM = dict ( )						    	hM = dict ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( row ) :				    	for i in range ( 4 ) :					  
4 STORE_FAST 2 ( hM )					      	      first = arr [ i ] [ 0 ]				    	    if arr [ i ] == 0 :					  
							      	      sec = arr [ i ] [ 1 ]				    		return arr [ i ]				  
3 6 SETUP_LOOP 90 ( to 98 )				      	      if ( sec in hM.keys ( ) and hM [ sec ] == first ) :   	return arr						  
8 LOAD_GLOBAL 1 ( range )				      		  print ( "(" , sec , "," , first , ")" )	    								  
10 LOAD_FAST 1 ( row )					      	      else :						    								  
12 CALL_FUNCTION 1					      		  hM [ first ] = sec				    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 78 ( to 96 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 LOAD_FAST 0 ( arr )				      								    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 STORE_FAST 4 ( first )				      								    								  
							      								    								  
5 32 LOAD_FAST 0 ( arr )				      								    								  
34 LOAD_FAST 3 ( i )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 STORE_FAST 5 ( sec )					      								    								  
							      								    								  
6 44 LOAD_FAST 5 ( sec )				      								    								  
46 LOAD_FAST 2 ( hM )					      								    								  
48 LOAD_METHOD 2 ( keys )				      								    								  
50 CALL_METHOD 0					      								    								  
52 COMPARE_OP 6 ( in )					      								    								  
54 POP_JUMP_IF_FALSE 86					      								    								  
56 LOAD_FAST 2 ( hM )					      								    								  
58 LOAD_FAST 5 ( sec )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 4 ( first )				      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 3 ( print )				      								    								  
70 LOAD_CONST 3 ( '(' )					      								    								  
72 LOAD_FAST 5 ( sec )					      								    								  
74 LOAD_CONST 4 ( ',' )					      								    								  
76 LOAD_FAST 4 ( first )				      								    								  
78 LOAD_CONST 5 ( ')' )					      								    								  
80 CALL_FUNCTION 5					      								    								  
82 POP_TOP						      								    								  
84 JUMP_ABSOLUTE 16					      								    								  
							      								    								  
9 >> 86 LOAD_FAST 5 ( sec )				      								    								  
88 LOAD_FAST 2 ( hM )					      								    								  
90 LOAD_FAST 4 ( first )				      								    								  
92 STORE_SUBSCR						      								    								  
94 JUMP_ABSOLUTE 16					      								    								  
>> 96 POP_BLOCK						      								    								  
>> 98 LOAD_CONST 0 ( None )				      								    								  
100 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PAIRS_ARRAY_XOR_0				      FIND_NUMBER_PAIRS_ARRAY_XOR_0				    FIND_NUMBER_PAIRS_ARRAY_XOR_0				  FIND_NUMBER_PAIRS_ARRAY_XOR_0
--							      --							    --								  --
Disassembly of <code object calculate at 0x7f33e26499c0, file def calculate ( a ) :					    def calculate ( a , 0x70x70x70x7FFF ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( )						    	answer = a.sort ( )					  
2 LOAD_METHOD 0 ( sort )				      	  count = 1						    	answer = 0						  
4 CALL_METHOD 0						      	  answer = 0						    	while ( 1 <= b ) :					  
6 POP_TOP						      	  for i in range ( 1 , len ( a ) ) :			    	    answer = 0						  
							      	      if a [ i ] == a [ i - 1 ] :			    	    while ( 1 <= b ) :					  
3 8 LOAD_CONST 1 ( 1 )					      		  count += 1					    		answer = 0					  
10 STORE_FAST 1 ( count )				      	      else :						    		while ( ( 1 << b ) - 1 ) <= ( 1 << b ) :	  
							      		  answer = answer + count * ( count - 1 ) // 2	    		    answer = 0					  
4 12 LOAD_CONST 2 ( 0 )					      		  count = 1					    	    return answer					  
14 STORE_FAST 2 ( answer )				      	  answer = answer + count * ( count - 1 ) // 2		    								  
							      	  return answer						    								  
5 16 SETUP_LOOP 76 ( to 94 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 1 ( 1 )					      								    								  
22 LOAD_GLOBAL 2 ( len )				      								    								  
24 LOAD_FAST 0 ( a )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 58 ( to 92 )				      								    								  
34 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 0 ( a )					      								    								  
38 LOAD_FAST 3 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( a )					      								    								  
44 LOAD_FAST 3 ( i )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
7 56 LOAD_FAST 1 ( count )				      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( count )				      								    								  
64 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
9 >> 66 LOAD_FAST 2 ( answer )				      								    								  
68 LOAD_FAST 1 ( count )				      								    								  
70 LOAD_FAST 1 ( count )				      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_CONST 3 ( 2 )					      								    								  
80 BINARY_FLOOR_DIVIDE					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
10 86 LOAD_CONST 1 ( 1 )				      								    								  
88 STORE_FAST 1 ( count )				      								    								  
90 JUMP_ABSOLUTE 32					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 LOAD_FAST 2 ( answer )				      								    								  
96 LOAD_FAST 1 ( count )				      								    								  
98 LOAD_FAST 1 ( count )				      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_CONST 3 ( 2 )					      								    								  
108 BINARY_FLOOR_DIVIDE					      								    								  
110 BINARY_ADD						      								    								  
112 STORE_FAST 2 ( answer )				      								    								  
							      								    								  
12 114 LOAD_FAST 2 ( answer )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1
--							      --							    --								  --
Disassembly of <code object breakSum at 0x7f33e2644930, file  def breakSum ( n ) :					    def breakSum ( n , n ) :					  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( n + 1 )				    	dp = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 BUILD_LIST 1						      	  dp [ 0 ] = 0						    								  alid/RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_
4 LOAD_FAST 0 ( n )					      	  dp [ 1 ] = 1						    								  SUM_1.py", line 29	 if __name__ == '__main__':
6 LOAD_CONST 2 ( 1 )					      	  for i in range ( 2 , n + 1 ) :			    								       ^ SyntaxError: invalid syntax
8 BINARY_ADD						      	      dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i  								  
10 BINARY_MULTIPLY					      	  return dp [ n ]					    								  
12 STORE_FAST 1 ( dp )					      								    								  
							      								    								  
3 14 LOAD_CONST 1 ( 0 )					      								    								  
16 LOAD_FAST 1 ( dp )					      								    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 LOAD_CONST 2 ( 1 )					      								    								  
24 LOAD_FAST 1 ( dp )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 SETUP_LOOP 80 ( to 112 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 62 ( to 110 )				      								    								  
48 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 50 LOAD_GLOBAL 1 ( max )				      								    								  
52 LOAD_FAST 1 ( dp )					      								    								  
54 LOAD_GLOBAL 2 ( int )				      								    								  
56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_CONST 3 ( 2 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_FAST 1 ( dp )					      								    								  
68 LOAD_GLOBAL 2 ( int )				      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 LOAD_CONST 4 ( 3 )					      								    								  
74 BINARY_TRUE_DIVIDE					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 1 ( dp )					      								    								  
84 LOAD_GLOBAL 2 ( int )				      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_CONST 5 ( 4 )					      								    								  
90 BINARY_TRUE_DIVIDE					      								    								  
92 CALL_FUNCTION 1					      								    								  
94 BINARY_SUBSCR					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 CALL_FUNCTION 2					      								    								  
102 LOAD_FAST 1 ( dp )					      								    								  
104 LOAD_FAST 2 ( i )					      								    								  
106 STORE_SUBSCR					      								    								  
108 JUMP_ABSOLUTE 46					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
7 >> 112 LOAD_FAST 1 ( dp )				      								    								  
114 LOAD_FAST 0 ( n )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM
--							      --							    --								  --
Disassembly of <code object isSubsetSum at 0x7f33e26494b0, fi def isSubsetSum ( set , n , sum ) :			    def isSubsetSum ( set , n ) :				  script_not_found : None
2 0 LOAD_FAST 2 ( sum )					      	  if ( sum == 0 ) :					    	if n == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return True					    	    return True						  
4 COMPARE_OP 2 ( == )					      	  if ( n == 0 and sum != 0 ) :				    	if n == 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return False					    	    return False					  
							      	  if ( set [ n - 1 ] > sum ) :				    	if n == 0 :						  
3 8 LOAD_CONST 2 ( True )				      	      return isSubsetSum ( set , n - 1 , sum ) ;	    	    return False					  
10 RETURN_VALUE						      	  return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( 	if n == 0 :						  
							      								    	    return False					  
4 >> 12 LOAD_FAST 1 ( n )				      								    	if n == 0 :						  
14 LOAD_CONST 1 ( 0 )					      								    	    return False					  
16 COMPARE_OP 2 ( == )					      								    	if n == 1 :						  
18 POP_JUMP_IF_FALSE 32					      								    	    return False					  
20 LOAD_FAST 2 ( sum )					      								    	if n == 0 :						  
22 LOAD_CONST 1 ( 0 )					      								    	    return False					  
24 COMPARE_OP 3 ( != )					      								    	if n == 0 :						  
26 POP_JUMP_IF_FALSE 32					      								    	    return False					  
							      								    	if n == 1 :						  
5 28 LOAD_CONST 3 ( False )				      								    	    return False					  
30 RETURN_VALUE						      								    	if n == 0 :						  
							      								    	    return False					  
6 >> 32 LOAD_FAST 0 ( set )				      								    	return True						  
34 LOAD_FAST 1 ( n )					      								    								  
36 LOAD_CONST 4 ( 1 )					      								    								  
38 BINARY_SUBTRACT					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 2 ( sum )					      								    								  
44 COMPARE_OP 4 ( > )					      								    								  
46 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 48 LOAD_GLOBAL 0 ( isSubsetSum )			      								    								  
50 LOAD_FAST 0 ( set )					      								    								  
52 LOAD_FAST 1 ( n )					      								    								  
54 LOAD_CONST 4 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 2 ( sum )					      								    								  
60 CALL_FUNCTION 3					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
8 >> 64 LOAD_GLOBAL 0 ( isSubsetSum )			      								    								  
66 LOAD_FAST 0 ( set )					      								    								  
68 LOAD_FAST 1 ( n )					      								    								  
70 LOAD_CONST 4 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 LOAD_FAST 2 ( sum )					      								    								  
76 CALL_FUNCTION 3					      								    								  
78 JUMP_IF_TRUE_OR_POP 106				      								    								  
80 LOAD_GLOBAL 0 ( isSubsetSum )			      								    								  
82 LOAD_FAST 0 ( set )					      								    								  
84 LOAD_FAST 1 ( n )					      								    								  
86 LOAD_CONST 4 ( 1 )					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_FAST 2 ( sum )					      								    								  
92 LOAD_FAST 0 ( set )					      								    								  
94 LOAD_FAST 1 ( n )					      								    								  
96 LOAD_CONST 4 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 3					      								    								  
>> 106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1
--							      --							    --								  --
Disassembly of <code object maxSumPairWithDifferenceLessThanK def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :	    def maxSumPairWithDifferenceLessLessLessLessLessLessLessLessL error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  maxSum = 0 ;						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 3 ( maxSum )				      	  arr.sort ( ) ;					    								  alid/MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1.py",
							      	  i = N - 1 ;						    								  line 30     def f_filled		  ^ SyntaxEr
3 4 LOAD_FAST 0 ( arr )					      	  while ( i >= 0 ) :					    								  ror: invalid syntax
6 LOAD_METHOD 0 ( sort )				      	      if ( arr [ i ] - arr [ i - 1 ] < k ) :		    								  
8 CALL_METHOD 0						      		  maxSum += arr [ i ] ;				    								  
10 POP_TOP						      		  maxSum += arr [ i - 1 ] ;			    								  
							      		  i -= 1 ;					    								  
4 12 LOAD_FAST 1 ( N )					      	      i -= 1 ;						    								  
14 LOAD_CONST 2 ( 1 )					      	  return maxSum ;					    								  
16 BINARY_SUBTRACT					      								    								  
18 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 20 SETUP_LOOP 80 ( to 102 )				      								    								  
>> 22 LOAD_FAST 4 ( i )					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 5 ( >= )					      								    								  
28 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( arr )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 LOAD_CONST 2 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 BINARY_SUBSCR					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 2 ( k )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
7 54 LOAD_FAST 3 ( maxSum )				      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 4 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 3 ( maxSum )				      								    								  
							      								    								  
8 66 LOAD_FAST 3 ( maxSum )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 BINARY_SUBSCR					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 3 ( maxSum )				      								    								  
							      								    								  
9 82 LOAD_FAST 4 ( i )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 INPLACE_SUBTRACT					      								    								  
88 STORE_FAST 4 ( i )					      								    								  
							      								    								  
10 >> 90 LOAD_FAST 4 ( i )				      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_SUBTRACT					      								    								  
96 STORE_FAST 4 ( i )					      								    								  
98 JUMP_ABSOLUTE 22					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_FAST 3 ( maxSum )			      								    								  
104 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			      REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			    REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			  REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S
--							      --							    --								  --
Disassembly of <code object replace at 0x7f33e2649a50, file " def replace ( s , c1 , c2 ) :				    def replace ( s , 0x7333333ljust = 0 , c2 = None , c2 = None  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s )						    	l = len ( s )						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( s )					      	  for i in range ( l ) :				    	while l < len ( s ) :					  alid/REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S.py", l
4 CALL_FUNCTION 1					      	      if ( s [ i ] == c1 ) :				    	    l = s [ l ]						  ine 27     def f_filled ( s , 0x7333333ljust = 0 ,
6 STORE_FAST 3 ( l )					      		  s = s [ 0 : i ] + c2 + s [ i + 1 : ]		    	    l = l [ l ]						   c2 = None , c2 = None ) :
							      	      elif ( s [ i ] == c2 ) :				    	    l = l [ l ]						  	  ^ SyntaxError: invalid syntax
3 8 SETUP_LOOP 106 ( to 116 )				      		  s = s [ 0 : i ] + c1 + s [ i + 1 : ]		    	    l = l [ l ]						  
10 LOAD_GLOBAL 1 ( range )				      	  return s						    	    l += l [ l ]					  
12 LOAD_FAST 3 ( l )					      								    	    l += l						  
14 CALL_FUNCTION 1					      								    	l += l							  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 94 ( to 114 )				      								    								  
20 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( s )					      								    								  
24 LOAD_FAST 4 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_FAST 1 ( c1 )					      								    								  
30 COMPARE_OP 2 ( == )					      								    								  
32 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( s )					      								    								  
36 LOAD_CONST 1 ( 0 )					      								    								  
38 LOAD_FAST 4 ( i )					      								    								  
40 BUILD_SLICE 2					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_FAST 2 ( c2 )					      								    								  
46 BINARY_ADD						      								    								  
48 LOAD_FAST 0 ( s )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_CONST 0 ( None )				      								    								  
58 BUILD_SLICE 2					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_ADD						      								    								  
64 STORE_FAST 0 ( s )					      								    								  
66 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
6 >> 68 LOAD_FAST 0 ( s )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 2 ( c2 )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
7 80 LOAD_FAST 0 ( s )					      								    								  
82 LOAD_CONST 1 ( 0 )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BUILD_SLICE 2					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 1 ( c1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_FAST 0 ( s )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 LOAD_CONST 2 ( 1 )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_CONST 0 ( None )				      								    								  
104 BUILD_SLICE 2					      								    								  
106 BINARY_SUBSCR					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 0 ( s )					      								    								  
112 JUMP_ABSOLUTE 18					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
8 >> 116 LOAD_FAST 0 ( s )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER_1				      SQUARE_ROOT_OF_AN_INTEGER_1				    SQUARE_ROOT_OF_AN_INTEGER_1					  SQUARE_ROOT_OF_AN_INTEGER_1
--							      --							    --								  --
Disassembly of <code object floorSqrt at 0x7f33e2649a50, file def floorSqrt ( x ) :					    def floorSqrt ( x , start = 0 , end = None ) :		  failure : #Results: 1, 10
2 0 LOAD_FAST 0 ( x )					      	  if ( x == 0 or x == 1 ) :				    	if start == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return x						    	    return x						  
4 COMPARE_OP 2 ( == )					      	  start = 1						    	start = start						  
6 POP_JUMP_IF_TRUE 16					      	  end = x						    	end = start						  
8 LOAD_FAST 0 ( x )					      	  while ( start <= end ) :				    	end = start						  
10 LOAD_CONST 2 ( 1 )					      	      mid = ( start + end ) // 2			    	end = end + 1						  
12 COMPARE_OP 2 ( == )					      	      if ( mid * mid == x ) :				    	start = end + 1						  
14 POP_JUMP_IF_FALSE 20					      		  return mid					    	end = end + 1						  
							      	      if ( mid * mid < x ) :				    	end = end + 1						  
3 >> 16 LOAD_FAST 0 ( x )				      		  start = mid + 1				    								  
18 RETURN_VALUE						      		  ans = mid					    								  
							      	      else :						    								  
4 >> 20 LOAD_CONST 2 ( 1 )				      		  end = mid - 1					    								  
22 STORE_FAST 1 ( start )				      	  return ans						    								  
							      								    								  
5 24 LOAD_FAST 0 ( x )					      								    								  
26 STORE_FAST 2 ( end )					      								    								  
							      								    								  
6 28 SETUP_LOOP 74 ( to 104 )				      								    								  
>> 30 LOAD_FAST 1 ( start )				      								    								  
32 LOAD_FAST 2 ( end )					      								    								  
34 COMPARE_OP 1 ( <= )					      								    								  
36 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
7 38 LOAD_FAST 1 ( start )				      								    								  
40 LOAD_FAST 2 ( end )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_CONST 3 ( 2 )					      								    								  
46 BINARY_FLOOR_DIVIDE					      								    								  
48 STORE_FAST 3 ( mid )					      								    								  
							      								    								  
8 50 LOAD_FAST 3 ( mid )				      								    								  
52 LOAD_FAST 3 ( mid )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_FAST 0 ( x )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
9 62 LOAD_FAST 3 ( mid )				      								    								  
64 RETURN_VALUE						      								    								  
							      								    								  
10 >> 66 LOAD_FAST 3 ( mid )				      								    								  
68 LOAD_FAST 3 ( mid )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 LOAD_FAST 0 ( x )					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
11 78 LOAD_FAST 3 ( mid )				      								    								  
80 LOAD_CONST 2 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 1 ( start )				      								    								  
							      								    								  
12 86 LOAD_FAST 3 ( mid )				      								    								  
88 STORE_FAST 4 ( ans )					      								    								  
90 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
14 >> 92 LOAD_FAST 3 ( mid )				      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 STORE_FAST 2 ( end )					      								    								  
100 JUMP_ABSOLUTE 30					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
15 >> 104 LOAD_FAST 4 ( ans )				      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	      CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	    CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	  CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING
--							      --							    --								  --
Disassembly of <code object calcMaxValue at 0x7f33e2644930, f def calcMaxValue ( str ) :				    def calcMaxValue ( str ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( ord )				      	  res = ord ( str [ 0 ] ) - 48				    	res = ord ( str [ 0 ] ) - ( 48 * res [ 1 ] )		  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( str )					      	  for i in range ( 1 , len ( str ) ) :			    	for i in range ( len ( res ) ) :			  024/eval_scripts/dis_sa-python_sa.valid/CALCULATE_
4 LOAD_CONST 1 ( 0 )					      	      if ( str [ i ] == '0' or str [ i ] == '1' or res < 2  	    if res [ i ] == '-' :				  MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING.py", l
6 BINARY_SUBSCR						      		  res += ord ( str [ i ] ) - 48			    		res [ i ] = res [ i ]				  ine 50, in <module>	  if f_filled(*parameters_se
8 CALL_FUNCTION 1					      	      else :						    	return res						  t) == f_gold(*parameters_set):   File "/home/ubunt
10 LOAD_CONST 2 ( 48 )					      		  res *= ord ( str [ i ] ) - 48			    								  u/TransCoder/models/eval/bt_sa/21z7a0p024/eval_scr
12 BINARY_SUBTRACT					      	  return res						    								  ipts/dis_sa-python_sa.valid/CALCULATE_MAXIMUM_VALU
14 STORE_FAST 1 ( res )					      								    								  E_USING_SIGN_TWO_NUMBERS_STRING.py", line 28, in f
							      								    								  _filled     res = ord ( str [ 0 ] ) - ( 48 * res [
3 16 SETUP_LOOP 96 ( to 114 )				      								    								   1 ] ) UnboundLocalError: local variable 'res' ref
18 LOAD_GLOBAL 1 ( range )				      								    								  erenced before assignment
20 LOAD_CONST 3 ( 1 )					      								    								  
22 LOAD_GLOBAL 2 ( len )				      								    								  
24 LOAD_FAST 0 ( str )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 78 ( to 112 )				      								    								  
34 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 36 LOAD_FAST 0 ( str )				      								    								  
38 LOAD_FAST 2 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 4 ( '0' )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_TRUE 68					      								    								  
48 LOAD_FAST 0 ( str )					      								    								  
50 LOAD_FAST 2 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 5 ( '1' )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_TRUE 68					      								    								  
60 LOAD_FAST 1 ( res )					      								    								  
62 LOAD_CONST 6 ( 2 )					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
5 >> 68 LOAD_FAST 1 ( res )				      								    								  
70 LOAD_GLOBAL 0 ( ord )				      								    								  
72 LOAD_FAST 0 ( str )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 LOAD_CONST 2 ( 48 )					      								    								  
82 BINARY_SUBTRACT					      								    								  
84 INPLACE_ADD						      								    								  
86 STORE_FAST 1 ( res )					      								    								  
88 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
7 >> 90 LOAD_FAST 1 ( res )				      								    								  
92 LOAD_GLOBAL 0 ( ord )				      								    								  
94 LOAD_FAST 0 ( str )					      								    								  
96 LOAD_FAST 2 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 CALL_FUNCTION 1					      								    								  
102 LOAD_CONST 2 ( 48 )					      								    								  
104 BINARY_SUBTRACT					      								    								  
106 INPLACE_MULTIPLY					      								    								  
108 STORE_FAST 1 ( res )				      								    								  
110 JUMP_ABSOLUTE 32					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
8 >> 114 LOAD_FAST 1 ( res )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP
--							      --							    --								  --
Disassembly of <code object isHeap at 0x7f33e26494b0, file "< def isHeap ( arr , i , n ) :				    def isHeap ( arr , i , i , size ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( i )					      	  if i > int ( ( n - 2 ) / 2 ) :			    	if size > ( i + 2 ) / 2 == ( i + 2 ) ) :		  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( int )					      	      return True					    	    return True						  alid/HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BI
4 LOAD_FAST 2 ( n )					      	  if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr  	if size >= ( i + 1 ) :					  NARY_HEAP.py", line 26     if size > ( i + 2 ) / 2
6 LOAD_CONST 1 ( 2 )					      	      return True					    	    return False					   == ( i + 2 ) ) :
8 BINARY_SUBTRACT					      	  return False						    	if size >= ( i + 1 ) :					  	   ^ SyntaxError: invalid syntax
10 LOAD_CONST 1 ( 2 )					      								    	    return True						  
12 BINARY_TRUE_DIVIDE					      								    	if size >= ( i + 1 ) :					  
14 CALL_FUNCTION 1					      								    	    return False					  
16 COMPARE_OP 4 ( > )					      								    	return True						  
18 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
3 20 LOAD_CONST 2 ( True )				      								    								  
22 RETURN_VALUE						      								    								  
							      								    								  
4 >> 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 1 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( arr )					      								    								  
32 LOAD_CONST 1 ( 2 )					      								    								  
34 LOAD_FAST 1 ( i )					      								    								  
36 BINARY_MULTIPLY					      								    								  
38 LOAD_CONST 3 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 BINARY_SUBSCR					      								    								  
44 COMPARE_OP 5 ( >= )					      								    								  
46 POP_JUMP_IF_FALSE 116				      								    								  
48 LOAD_FAST 0 ( arr )					      								    								  
50 LOAD_FAST 1 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_CONST 1 ( 2 )					      								    								  
58 LOAD_FAST 1 ( i )					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 LOAD_CONST 1 ( 2 )					      								    								  
64 BINARY_ADD						      								    								  
66 BINARY_SUBSCR					      								    								  
68 COMPARE_OP 5 ( >= )					      								    								  
70 POP_JUMP_IF_FALSE 116				      								    								  
72 LOAD_GLOBAL 1 ( isHeap )				      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_CONST 1 ( 2 )					      								    								  
78 LOAD_FAST 1 ( i )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_CONST 3 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( n )					      								    								  
88 CALL_FUNCTION 3					      								    								  
90 POP_JUMP_IF_FALSE 116				      								    								  
92 LOAD_GLOBAL 1 ( isHeap )				      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_CONST 1 ( 2 )					      								    								  
98 LOAD_FAST 1 ( i )					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_CONST 1 ( 2 )					      								    								  
104 BINARY_ADD						      								    								  
106 LOAD_FAST 2 ( n )					      								    								  
108 CALL_FUNCTION 3					      								    								  
110 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
5 112 LOAD_CONST 2 ( True )				      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
6 >> 116 LOAD_CONST 4 ( False )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE
--							      --							    --								  --
Disassembly of <code object minCoins at 0x7f33e2644930, file  def minCoins ( coins , m , V ) :				    def minCoins ( coins , m , n , n , n , n , n , n , n , n , n  script_not_found : None
2 0 LOAD_FAST 2 ( V )					      	  if ( V == 0 ) :					    								  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    								  
4 COMPARE_OP 2 ( == )					      	  res = sys.maxsize					    								  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 0 , m ) :				    								  
							      	      if ( coins [ i ] <= V ) :				    								  
3 8 LOAD_CONST 1 ( 0 )					      		  sub_res = minCoins ( coins , m , V - coins [ i ]  								  
10 RETURN_VALUE						      		  if ( sub_res != sys.maxsize and sub_res + 1 < res 								  
							      		      res = sub_res + 1				    								  
4 >> 12 LOAD_GLOBAL 0 ( sys )				      	  return res						    								  
14 LOAD_ATTR 1 ( maxsize )				      								    								  
16 STORE_FAST 3 ( res )					      								    								  
							      								    								  
5 18 SETUP_LOOP 80 ( to 100 )				      								    								  
20 LOAD_GLOBAL 2 ( range )				      								    								  
22 LOAD_CONST 1 ( 0 )					      								    								  
24 LOAD_FAST 1 ( m )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 66 ( to 98 )				      								    								  
32 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 34 LOAD_FAST 0 ( coins )				      								    								  
36 LOAD_FAST 4 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( V )					      								    								  
42 COMPARE_OP 1 ( <= )					      								    								  
44 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
7 46 LOAD_GLOBAL 3 ( minCoins )				      								    								  
48 LOAD_FAST 0 ( coins )				      								    								  
50 LOAD_FAST 1 ( m )					      								    								  
52 LOAD_FAST 2 ( V )					      								    								  
54 LOAD_FAST 0 ( coins )				      								    								  
56 LOAD_FAST 4 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 3					      								    								  
64 STORE_FAST 5 ( sub_res )				      								    								  
							      								    								  
8 66 LOAD_FAST 5 ( sub_res )				      								    								  
68 LOAD_GLOBAL 0 ( sys )				      								    								  
70 LOAD_ATTR 1 ( maxsize )				      								    								  
72 COMPARE_OP 3 ( != )					      								    								  
74 POP_JUMP_IF_FALSE 30					      								    								  
76 LOAD_FAST 5 ( sub_res )				      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_FAST 3 ( res )					      								    								  
84 COMPARE_OP 0 ( < )					      								    								  
86 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
9 88 LOAD_FAST 5 ( sub_res )				      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 STORE_FAST 3 ( res )					      								    								  
96 JUMP_ABSOLUTE 30					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
10 >> 100 LOAD_FAST 3 ( res )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		      UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		    UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		  UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1
--							      --							    --								  --
Disassembly of <code object printIntersection at 0x7f33e2649a def printIntersection ( arr1 , arr2 , m , n ) :		    def printIntersection ( arr1 , arr2 , arr2 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				      	  i , j = 0 , 0						    	j = ( ( 0 , 0 ) )					  
2 UNPACK_SEQUENCE 2					      	  while i < m and j < n :				    	for i in range ( arr2 ) :				  
4 STORE_FAST 4 ( i )					      	      if arr1 [ i ] < arr2 [ j ] :			    	    if ( arr2 < arr2 ) : j = ( arr2 - arr2 ) * ( arr2 - a 
6 STORE_FAST 5 ( j )					      		  i += 1					    	    j = ( arr2 - arr2 ) * ( arr2 - arr2 )		  
							      	      elif arr2 [ j ] < arr1 [ i ] :			    	else :							  
3 8 SETUP_LOOP 100 ( to 110 )				      		  j += 1					    	    j = ( arr2 - arr2 ) * ( arr2 - arr2 )		  
>> 10 LOAD_FAST 4 ( i )					      	      else :						    	return j						  
12 LOAD_FAST 2 ( m )					      		  print ( arr2 [ j ] )				    								  
14 COMPARE_OP 0 ( < )					      		  j += 1					    								  
16 POP_JUMP_IF_FALSE 108				      		  i += 1					    								  
18 LOAD_FAST 5 ( j )					      								    								  
20 LOAD_FAST 3 ( n )					      								    								  
22 COMPARE_OP 0 ( < )					      								    								  
24 POP_JUMP_IF_FALSE 108				      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( arr1 )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 1 ( arr2 )					      								    								  
34 LOAD_FAST 5 ( j )					      								    								  
36 BINARY_SUBSCR					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 INPLACE_ADD						      								    								  
48 STORE_FAST 4 ( i )					      								    								  
50 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
6 >> 52 LOAD_FAST 1 ( arr2 )				      								    								  
54 LOAD_FAST 5 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_FAST 0 ( arr1 )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
7 68 LOAD_FAST 5 ( j )					      								    								  
70 LOAD_CONST 2 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 5 ( j )					      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
9 >> 78 LOAD_GLOBAL 0 ( print )				      								    								  
80 LOAD_FAST 1 ( arr2 )					      								    								  
82 LOAD_FAST 5 ( j )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 CALL_FUNCTION 1					      								    								  
88 POP_TOP						      								    								  
							      								    								  
10 90 LOAD_FAST 5 ( j )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 98 LOAD_FAST 4 ( i )					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 4 ( i )					      								    								  
106 JUMP_ABSOLUTE 10					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 LOAD_CONST 0 ( None )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> CATIVE_INVERSE_UNDER_MODULO_M_1			      <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			    <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			  <unk> CATIVE_INVERSE_UNDER_MODULO_M_1
--							      --							    --								  --
Disassembly of <code object modInverse at 0x7f33e26494b0, fil def modInverse ( a , m ) :				    def modInverse ( a , m , b , c ) :				  script_not_found : None
2 0 LOAD_FAST 1 ( m )					      	  m0 = m						    	m0 = a							  
2 STORE_FAST 2 ( m0 )					      	  y = 0							    	m = 0							  
							      	  x = 1							    	while m == 1 :						  
3 4 LOAD_CONST 1 ( 0 )					      	  if ( m == 1 ) :					    	    if a == 0 :						  
6 STORE_FAST 3 ( y )					      	      return 0						    		return 0					  
							      	  while ( a > 1 ) :					    	    if a == 0 :						  
4 8 LOAD_CONST 2 ( 1 )					      	      q = a // m					    		return 0					  
10 STORE_FAST 4 ( x )					      	      t = m						    	    a = [ ]						  
							      	      m = a % m						    	    b = [ ]						  
5 12 LOAD_FAST 1 ( m )					      	      a = t						    	    a = [ ]						  
14 LOAD_CONST 2 ( 1 )					      	      t = y						    	    b = [ ]						  
16 COMPARE_OP 2 ( == )					      	      y = x - q * y					    	    a = [ ]						  
18 POP_JUMP_IF_FALSE 24					      	      x = t						    	    b = [ ]						  
							      	  if ( x < 0 ) :					    	    a = [ ]						  
6 20 LOAD_CONST 1 ( 0 )					      	      x = x + m0					    	    b = [ ]						  
22 RETURN_VALUE						      	  return x						    	    a = [ ]						  
							      								    	    b = [ ]						  
7 >> 24 SETUP_LOOP 56 ( to 82 )				      								    	    a = [ ]						  
>> 26 LOAD_FAST 0 ( a )					      								    	    b = [ ]						  
28 LOAD_CONST 2 ( 1 )					      								    	    a = [ ]						  
30 COMPARE_OP 4 ( > )					      								    	    b = [ ]						  
32 POP_JUMP_IF_FALSE 80					      								    	    a = [ ]						  
							      								    	    b = [ ]						  
8 34 LOAD_FAST 0 ( a )					      								    	    a = [ ]						  
36 LOAD_FAST 1 ( m )					      								    	    b = [ ]						  
38 BINARY_FLOOR_DIVIDE					      								    	    a = [ ]						  
40 STORE_FAST 5 ( q )					      								    	    b = [ ]						  
							      								    	    a = [ ]						  
9 42 LOAD_FAST 1 ( m )					      								    	    b = [ ]						  
44 STORE_FAST 6 ( t )					      								    	    a = [ ]						  
							      								    	    b = [ ]						  
10 46 LOAD_FAST 0 ( a )					      								    	    b = [ ]						  
48 LOAD_FAST 1 ( m )					      								    	    a = [ ]						  
50 BINARY_MODULO					      								    	    b = [ ]						  
52 STORE_FAST 1 ( m )					      								    	    a = [ ]						  
							      								    	    b = [ ]						  
11 54 LOAD_FAST 6 ( t )					      								    	    a = [ ]						  
56 STORE_FAST 0 ( a )					      								    	    b = [ ]						  
							      								    	    b = [ ]						  
12 58 LOAD_FAST 3 ( y )					      								    	    a = [ ]						  
60 STORE_FAST 6 ( t )					      								    	    b = [ ]						  
							      								    	    a = [ ]						  
13 62 LOAD_FAST 4 ( x )					      								    	    b = [ ]						  
64 LOAD_FAST 5 ( q )					      								    	    a = [ ]						  
66 LOAD_FAST 3 ( y )					      								    	    b = [ ]						  
68 BINARY_MULTIPLY					      								    	    a = [ ]						  
70 BINARY_SUBTRACT					      								    	    b = [ ]						  
72 STORE_FAST 3 ( y )					      								    	    a = [ ]						  
							      								    	    b = [ ]						  
14 74 LOAD_FAST 6 ( t )					      								    	    a = [ ]						  
76 STORE_FAST 4 ( x )					      								    	    b = [ ]						  
78 JUMP_ABSOLUTE 26					      								    	    a = [ ]						  
>> 80 POP_BLOCK						      								    	    b = [ ]						  
							      								    	    a = [ ]						  
15 >> 82 LOAD_FAST 4 ( x )				      								    	    b = [ ]						  
84 LOAD_CONST 1 ( 0 )					      								    	    a = [ ]						  
86 COMPARE_OP 0 ( < )					      								    	    b = [ ]						  
88 POP_JUMP_IF_FALSE 98					      								    	    a = [ ]						  
							      								    	    b = [ ]						  
16 90 LOAD_FAST 4 ( x )					      								    	    b = [ ]						  
92 LOAD_FAST 2 ( m0 )					      								    	    a = [ ]						  
94 BINARY_ADD						      								    	    b = [ ]						  
96 STORE_FAST 4 ( x )					      								    	    a = [ ]						  
							      								    	    b = [ ]						  
17 >> 98 LOAD_FAST 4 ( x )				      								    	    a = [ ]						  
100 RETURN_VALUE NEW_LINE				      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    a = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    b = [ ]						  
							      								    	    return b						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES			  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES
--							      --							    --								  --
Disassembly of <code object fib at 0x7f33e2653f60, file "<dis def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = 0							    	a = 0							  
2 STORE_FAST 1 ( a )					      	  b = 1							    	b = 0							  
							      	  if ( n >= 0 ) :					    	while b < 0 :						  
3 4 LOAD_CONST 2 ( 1 )					      	      print ( a , end = ' ' )				    	    if a >= 0 :						  
6 STORE_FAST 2 ( b )					      	  if ( n >= 1 ) :					    		b = b						  
							      	      print ( b , end = ' ' )				    	    if b >= 1 :						  
4 8 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    		b = b						  
10 LOAD_CONST 1 ( 0 )					      	      c = a + b						    	    a = b						  
12 COMPARE_OP 5 ( >= )					      	      print ( c , end = ' ' )				    	    b = b						  
14 POP_JUMP_IF_FALSE 28					      	      a = b						    	return a						  
							      	      b = c						    								  
5 16 LOAD_GLOBAL 0 ( print )				      								    								  
18 LOAD_FAST 1 ( a )					      								    								  
20 LOAD_CONST 3 ( ' ' )					      								    								  
22 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
24 CALL_FUNCTION_KW 2					      								    								  
26 POP_TOP						      								    								  
							      								    								  
6 >> 28 LOAD_FAST 0 ( n )				      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 COMPARE_OP 5 ( >= )					      								    								  
34 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 2 ( b )					      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
8 >> 48 SETUP_LOOP 50 ( to 100 )			      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 5 ( 2 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 2 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 32 ( to 98 )				      								    								  
66 STORE_FAST 3 ( i )					      								    								  
							      								    								  
9 68 LOAD_FAST 1 ( a )					      								    								  
70 LOAD_FAST 2 ( b )					      								    								  
72 BINARY_ADD						      								    								  
74 STORE_FAST 4 ( c )					      								    								  
							      								    								  
10 76 LOAD_GLOBAL 0 ( print )				      								    								  
78 LOAD_FAST 4 ( c )					      								    								  
80 LOAD_CONST 3 ( ' ' )					      								    								  
82 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( b )					      								    								  
90 STORE_FAST 1 ( a )					      								    								  
							      								    								  
12 92 LOAD_FAST 4 ( c )					      								    								  
94 STORE_FAST 2 ( b )					      								    								  
96 JUMP_ABSOLUTE 64					      								    								  
>> 98 POP_BLOCK						      								    								  
>> 100 LOAD_CONST 0 ( None )				      								    								  
102 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		      FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		    FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY			  FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object find3largest at 0x7f33e2649a50, f def find3largest ( arr , n ) :				    def find3largest ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sorted )				      	  arr = sorted ( arr )					    	arr = sorted ( arr )					  
2 LOAD_FAST 0 ( arr )					      	  check = 0						    	count = 0						  
4 CALL_FUNCTION 1					      	  count = 1						    	count = 0						  
6 STORE_FAST 0 ( arr )					      	  for i in range ( 1 , n + 1 ) :			    	count = 0						  
							      	      if ( count < 4 ) :				    	while count < count :					  
3 8 LOAD_CONST 1 ( 0 )					      		  if ( check != arr [ n - i ] ) :		    	    count += 1						  
10 STORE_FAST 2 ( check )				      		      print ( arr [ n - i ] , end = " " )	    	    count += 1						  
							      		      check = arr [ n - i ]			    	    count += 1						  
4 12 LOAD_CONST 2 ( 1 )					      		      count += 1				    	    count += 1						  
14 STORE_FAST 3 ( count )				      	      else :						    	    count += 1						  
							      		  break						    	count += 1						  
5 16 SETUP_LOOP 90 ( to 108 )				      								    								  
18 LOAD_GLOBAL 1 ( range )				      								    								  
20 LOAD_CONST 2 ( 1 )					      								    								  
22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 72 ( to 106 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( count )				      								    								  
38 LOAD_CONST 3 ( 4 )					      								    								  
40 COMPARE_OP 0 ( < )					      								    								  
42 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
7 44 LOAD_FAST 2 ( check )				      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 1 ( n )					      								    								  
50 LOAD_FAST 4 ( i )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 3 ( != )					      								    								  
58 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
8 60 LOAD_GLOBAL 2 ( print )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 1 ( n )					      								    								  
66 LOAD_FAST 4 ( i )					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_CONST 4 ( ' ' )					      								    								  
74 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
76 CALL_FUNCTION_KW 2					      								    								  
78 POP_TOP						      								    								  
							      								    								  
9 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 1 ( n )					      								    								  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 BINARY_SUBSCR					      								    								  
90 STORE_FAST 2 ( check )				      								    								  
							      								    								  
10 92 LOAD_FAST 3 ( count )				      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 3 ( count )				      								    								  
100 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
12 >> 102 BREAK_LOOP					      								    								  
>> 104 JUMP_ABSOLUTE 32					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPOSITE_NUMBER					      COMPOSITE_NUMBER						    COMPOSITE_NUMBER						  COMPOSITE_NUMBER
--							      --							    --								  --
Disassembly of <code object isComposite at 0x7f33e26494b0, fi def isComposite ( n ) :					    def isComposite ( n ) :					  failure : #Results: 3, 10
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return False					    	    return False					  
4 COMPARE_OP 1 ( <= )					      	  if ( n <= 3 ) :					    	elif n <= 3 :						  
6 POP_JUMP_IF_FALSE 12					      	      return False					    	    return False					  
							      	  if ( n % 2 == 0 or n % 3 == 0 ) :			    	elif n <= 3 :						  
3 8 LOAD_CONST 2 ( False )				      	      return True					    	    return False					  
10 RETURN_VALUE						      	  i = 5							    	elif n <= 3 :						  
							      	  while ( i * i <= n ) :				    	    return False					  
4 >> 12 LOAD_FAST 0 ( n )				      	      if ( n % i == 0 or n % ( i + 2 ) == 0 ) :		    	elif n <= 3 :						  
14 LOAD_CONST 3 ( 3 )					      		  return True					    	    return False					  
16 COMPARE_OP 1 ( <= )					      	      i = i + 6						    	elif n <= 4 :						  
18 POP_JUMP_IF_FALSE 24					      	  return False						    	    return False					  
							      								    	elif n <= 1 :						  
5 20 LOAD_CONST 2 ( False )				      								    	    return False					  
22 RETURN_VALUE						      								    	else :							  
							      								    	    return False					  
6 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_CONST 4 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 5 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_TRUE 48					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 3 ( 3 )					      								    								  
40 BINARY_MODULO					      								    								  
42 LOAD_CONST 5 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 >> 48 LOAD_CONST 6 ( True )				      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_CONST 7 ( 5 )				      								    								  
54 STORE_FAST 1 ( i )					      								    								  
							      								    								  
9 56 SETUP_LOOP 56 ( to 114 )				      								    								  
>> 58 LOAD_FAST 1 ( i )					      								    								  
60 LOAD_FAST 1 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 COMPARE_OP 1 ( <= )					      								    								  
68 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 70 LOAD_FAST 0 ( n )					      								    								  
72 LOAD_FAST 1 ( i )					      								    								  
74 BINARY_MODULO					      								    								  
76 LOAD_CONST 5 ( 0 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_TRUE 98					      								    								  
82 LOAD_FAST 0 ( n )					      								    								  
84 LOAD_FAST 1 ( i )					      								    								  
86 LOAD_CONST 4 ( 2 )					      								    								  
88 BINARY_ADD						      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 5 ( 0 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
11 >> 98 LOAD_CONST 6 ( True )				      								    								  
100 RETURN_VALUE					      								    								  
							      								    								  
12 >> 102 LOAD_FAST 1 ( i )				      								    								  
104 LOAD_CONST 8 ( 6 )					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 1 ( i )					      								    								  
110 JUMP_ABSOLUTE 58					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
13 >> 114 LOAD_CONST 2 ( False )			      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SUM_COSX_SERIES					      PROGRAM_SUM_COSX_SERIES					    PROGRAM_SUM_COSX_SERIES					  PROGRAM_SUM_COSX_SERIES
--							      --							    --								  --
Disassembly of <code object cosXSertiesSum at 0x7f33e2653ed0, def cosXSertiesSum ( x , n ) :				    def cosXSertiesSum ( x , y , z , l , l , l , l , l , l , l ,  script_not_found : None
2 0 LOAD_FAST 0 ( x )					      	  x = x * ( PI / 180.0 ) ;				    								  
2 LOAD_GLOBAL 0 ( PI )					      	  res = 1 ;						    								  
4 LOAD_CONST 1 ( 180.0 )				      	  sign = 1 ;						    								  
6 BINARY_TRUE_DIVIDE					      	  fact = 1 ;						    								  
8 BINARY_MULTIPLY					      	  pow = 1 ;						    								  
10 STORE_FAST 0 ( x )					      	  for i in range ( 1 , 5 ) :				    								  
							      	      sign = sign * - 1 ;				    								  
3 12 LOAD_CONST 2 ( 1 )					      	      fact = fact * ( 2 * i - 1 ) * ( 2 * i ) ;		    								  
14 STORE_FAST 2 ( res )					      	      pow = pow * x * x ;				    								  
							      	      res = res + sign * pow / fact ;			    								  
4 16 LOAD_CONST 2 ( 1 )					      	  return res ;						    								  
18 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 STORE_FAST 4 ( fact )				      								    								  
							      								    								  
6 24 LOAD_CONST 2 ( 1 )					      								    								  
26 STORE_FAST 5 ( pow )					      								    								  
							      								    								  
7 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 2 ( 1 )					      								    								  
34 LOAD_CONST 3 ( 5 )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 64 ( to 106 )				      								    								  
42 STORE_FAST 6 ( i )					      								    								  
							      								    								  
8 44 LOAD_FAST 3 ( sign )				      								    								  
46 LOAD_CONST 4 ( - 1 )					      								    								  
48 BINARY_MULTIPLY					      								    								  
50 STORE_FAST 3 ( sign )				      								    								  
							      								    								  
9 52 LOAD_FAST 4 ( fact )				      								    								  
54 LOAD_CONST 5 ( 2 )					      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_MULTIPLY					      								    								  
66 LOAD_CONST 5 ( 2 )					      								    								  
68 LOAD_FAST 6 ( i )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 STORE_FAST 4 ( fact )				      								    								  
							      								    								  
10 76 LOAD_FAST 5 ( pow )				      								    								  
78 LOAD_FAST 0 ( x )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_FAST 0 ( x )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 STORE_FAST 5 ( pow )					      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( res )				      								    								  
90 LOAD_FAST 3 ( sign )					      								    								  
92 LOAD_FAST 5 ( pow )					      								    								  
94 BINARY_MULTIPLY					      								    								  
96 LOAD_FAST 4 ( fact )					      								    								  
98 BINARY_TRUE_DIVIDE					      								    								  
100 BINARY_ADD						      								    								  
102 STORE_FAST 2 ( res )				      								    								  
104 JUMP_ABSOLUTE 40					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
12 >> 108 LOAD_FAST 2 ( res )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	      DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	    DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION		  DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION
--							      --							    --								  --
Disassembly of <code object MatrixChainOrder at 0x7f33e26494b def MatrixChainOrder ( p , i , j ) :			    def MatrixChainOrder ( p , i , j , j , j , p ) :		  script_not_found : None
2 0 LOAD_FAST 1 ( i )					      	  if i == j :						    	if j == j :						  
2 LOAD_FAST 2 ( j )					      	      return 0						    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  _min = sys.maxsize					    	_min = sys.maxsize					  
6 POP_JUMP_IF_FALSE 12					      	  for k in range ( i , j ) :				    	_min = [ ]						  
							      	      count = ( MatrixChainOrder ( p , i , k ) + MatrixChai 	for _min in range ( j ) :				  
3 8 LOAD_CONST 1 ( 0 )					      	      if count < _min :					    	    _min = _min [ i ]					  
10 RETURN_VALUE						      		  _min = count ;				    	_min = _min [ i ]					  
							      	  return _min ;						    	if _min > 0 :						  
4 >> 12 LOAD_GLOBAL 0 ( sys )				      								    	    _min = _min [ i ]					  
14 LOAD_ATTR 1 ( maxsize )				      								    	else :							  
16 STORE_FAST 3 ( _min )				      								    	    _min = _min [ i ]					  
							      								    return _min							  
5 18 SETUP_LOOP 86 ( to 106 )				      								    								  
20 LOAD_GLOBAL 2 ( range )				      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 LOAD_FAST 2 ( j )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 72 ( to 104 )				      								    								  
32 STORE_FAST 4 ( k )					      								    								  
							      								    								  
6 34 LOAD_GLOBAL 3 ( MatrixChainOrder )			      								    								  
36 LOAD_FAST 0 ( p )					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 LOAD_FAST 4 ( k )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 LOAD_GLOBAL 3 ( MatrixChainOrder )			      								    								  
46 LOAD_FAST 0 ( p )					      								    								  
48 LOAD_FAST 4 ( k )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 2 ( j )					      								    								  
56 CALL_FUNCTION 3					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_FAST 0 ( p )					      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( p )					      								    								  
72 LOAD_FAST 4 ( k )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_FAST 0 ( p )					      								    								  
80 LOAD_FAST 2 ( j )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 BINARY_ADD						      								    								  
88 STORE_FAST 5 ( count )				      								    								  
							      								    								  
7 90 LOAD_FAST 5 ( count )				      								    								  
92 LOAD_FAST 3 ( _min )					      								    								  
94 COMPARE_OP 0 ( < )					      								    								  
96 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
8 98 LOAD_FAST 5 ( count )				      								    								  
100 STORE_FAST 3 ( _min )				      								    								  
102 JUMP_ABSOLUTE 30					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
9 >> 106 LOAD_FAST 3 ( _min )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			      FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			    FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			  FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX
--							      --							    --								  --
Disassembly of <code object freq at 0x7f33e2649a50, file "<di def freq ( ar , m , n ) :					    def freq ( ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  even = 0						    	odd = 0							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 3 ( even )					      	  odd = 0						    	odd = 0							  alid/FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX.py", l
							      	  for i in range ( m ) :				    	odd = 0							  ine 35     for ( i in range ( odd ) :
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( n ) :				    	odd = 0							  		   ^ SyntaxError: invalid syntax
6 STORE_FAST 4 ( odd )					      		  if ( ( ar [ i ] [ j ] % 2 ) == 0 ) :		    	for ( i in range ( odd ) :				  
							      		      even += 1					    	    odd = odd [ i ]					  
4 8 SETUP_LOOP 72 ( to 82 )				      		  else :					    	    odd = odd [ 1 ]					  
10 LOAD_GLOBAL 0 ( range )				      		      odd += 1					    	    odd = odd [ i ]					  
12 LOAD_FAST 1 ( m )					      	  print ( " Frequency of odd number =" , odd )		    	    odd = odd [ i ]					  
14 CALL_FUNCTION 1					      	  print ( " Frequency of even number =" , even )	    	    odd = odd [ i ]					  
16 GET_ITER						      								    	    odd = odd [ i ]					  
>> 18 FOR_ITER 60 ( to 80 )				      								    	    odd = odd [ i ]					  
20 STORE_FAST 5 ( i )					      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
5 22 SETUP_LOOP 54 ( to 78 )				      								    	    odd = odd [ odd ]					  
24 LOAD_GLOBAL 0 ( range )				      								    	    odd = odd [ odd ]					  
26 LOAD_FAST 2 ( n )					      								    	    odd = odd [ odd ]					  
28 CALL_FUNCTION 1					      								    	    odd = odd [ odd ]					  
30 GET_ITER						      								    	    odd = odd [ odd ]					  
>> 32 FOR_ITER 42 ( to 76 )				      								    	    odd = odd [ odd ]					  
34 STORE_FAST 6 ( j )					      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
6 36 LOAD_FAST 0 ( ar )					      								    	    odd = odd [ odd ]					  
38 LOAD_FAST 5 ( i )					      								    	    odd = odd [ odd ]					  
40 BINARY_SUBSCR					      								    	    odd = odd [ odd ]					  
42 LOAD_FAST 6 ( j )					      								    	    odd = odd [ odd ]					  
44 BINARY_SUBSCR					      								    	    odd = odd [ odd ]					  
46 LOAD_CONST 2 ( 2 )					      								    	    odd = odd [ odd ]					  
48 BINARY_MODULO					      								    	    odd = odd [ odd ]					  
50 LOAD_CONST 1 ( 0 )					      								    	    odd = odd [ odd ]					  
52 COMPARE_OP 2 ( == )					      								    	    odd = odd [ odd ]					  
54 POP_JUMP_IF_FALSE 66					      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
7 56 LOAD_FAST 3 ( even )				      								    	    odd = odd [ odd ]					  
58 LOAD_CONST 3 ( 1 )					      								    	    odd = odd [ odd ]					  
60 INPLACE_ADD						      								    	    odd = odd [ odd ]					  
62 STORE_FAST 3 ( even )				      								    	    odd = odd [ odd ]					  
64 JUMP_ABSOLUTE 32					      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
9 >> 66 LOAD_FAST 4 ( odd )				      								    	    odd = odd [ odd ]					  
68 LOAD_CONST 3 ( 1 )					      								    	    odd = odd [ odd ]					  
70 INPLACE_ADD						      								    	    odd = odd [ odd ]					  
72 STORE_FAST 4 ( odd )					      								    	    odd = odd [ odd ]					  
74 JUMP_ABSOLUTE 32					      								    	    odd = odd [ odd ]					  
>> 76 POP_BLOCK						      								    	    odd = odd [ odd ]					  
>> 78 JUMP_ABSOLUTE 18					      								    	    odd = odd [ odd ]					  
>> 80 POP_BLOCK						      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
10 >> 82 LOAD_GLOBAL 1 ( print )			      								    	    odd = odd [ odd ]					  
84 LOAD_CONST 4 ( ' Frequency of odd number =' )	      								    	    odd = odd [ odd ]					  
86 LOAD_FAST 4 ( odd )					      								    	    odd = odd [ odd ]					  
88 CALL_FUNCTION 2					      								    	    odd = odd [ odd ]					  
90 POP_TOP						      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
11 92 LOAD_GLOBAL 1 ( print )				      								    	    odd = odd [ odd ]					  
94 LOAD_CONST 5 ( ' Frequency of even number =' )	      								    	    odd = odd [ odd ]					  
96 LOAD_FAST 3 ( even )					      								    	    odd = odd [ odd ]					  
98 CALL_FUNCTION 2					      								    	    odd = odd [ odd ]					  
100 POP_TOP						      								    	    odd = odd [ odd ]					  
102 LOAD_CONST 0 ( None )				      								    	    odd = odd [ odd ]					  
104 RETURN_VALUE NEW_LINE				      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd.odd					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd [ odd ]					  
							      								    	    odd = odd.odd ( odd )				  
							      								    	    return odd						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR
--							      --							    --								  --
Disassembly of <code object findDiff at 0x7f33e26494b0, file  def findDiff ( arr , n ) :				    def findDiff ( arr , 0x70x70x78 ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	count = arr.sort ( )					  
2 LOAD_METHOD 0 ( sort )				      	  count = 0 ; max_count = 0 ; min_count = n		    	count = 0						  
4 CALL_METHOD 0						      	  for i in range ( 0 , ( n - 1 ) ) :			    	while count < 0 :					  
6 POP_TOP						      	      if arr [ i ] == arr [ i + 1 ] :			    	    count += 1						  
							      		  count += 1					    	    count += 1						  
3 8 LOAD_CONST 1 ( 0 )					      		  continue					    	count += 1						  
10 STORE_FAST 2 ( count )				      	      else :						    	while count < 0 :					  
12 LOAD_CONST 1 ( 0 )					      		  max_count = max ( max_count , count )		    	    count += 1						  
14 STORE_FAST 3 ( max_count )				      		  min_count = min ( min_count , count )		    	    count += 1						  
16 LOAD_FAST 1 ( n )					      		  count = 0					    	return count						  
18 STORE_FAST 4 ( min_count )				      	  return max_count - min_count				    								  
							      								    								  
4 20 SETUP_LOOP 78 ( to 100 )				      								    								  
22 LOAD_GLOBAL 1 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 60 ( to 98 )				      								    								  
38 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 5 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 5 ( i )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
6 60 LOAD_FAST 2 ( count )				      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 INPLACE_ADD						      								    								  
66 STORE_FAST 2 ( count )				      								    								  
							      								    								  
7 68 JUMP_ABSOLUTE 36					      								    								  
70 JUMP_ABSOLUTE 36					      								    								  
							      								    								  
9 >> 72 LOAD_GLOBAL 2 ( max )				      								    								  
74 LOAD_FAST 3 ( max_count )				      								    								  
76 LOAD_FAST 2 ( count )				      								    								  
78 CALL_FUNCTION 2					      								    								  
80 STORE_FAST 3 ( max_count )				      								    								  
							      								    								  
10 82 LOAD_GLOBAL 3 ( min )				      								    								  
84 LOAD_FAST 4 ( min_count )				      								    								  
86 LOAD_FAST 2 ( count )				      								    								  
88 CALL_FUNCTION 2					      								    								  
90 STORE_FAST 4 ( min_count )				      								    								  
							      								    								  
11 92 LOAD_CONST 1 ( 0 )				      								    								  
94 STORE_FAST 2 ( count )				      								    								  
96 JUMP_ABSOLUTE 36					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
12 >> 100 LOAD_FAST 3 ( max_count )			      								    								  
102 LOAD_FAST 4 ( min_count )				      								    								  
104 BINARY_SUBTRACT					      								    								  
106 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			      FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			    FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			  FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE
--							      --							    --								  --
Disassembly of <code object findDimen at 0x7f33e2653f60, file def findDimen ( H , A ) :					    def findDimen ( H , A , B , C , C , C , C , C , C , C , C , C script_not_found : None
2 0 LOAD_FAST 0 ( H )					      	  if H * H < 4 * A :					    								  
2 LOAD_FAST 0 ( H )					      	      print ( "Not Possible" )				    								  
4 BINARY_MULTIPLY					      	      return						    								  
6 LOAD_CONST 1 ( 4 )					      	  apb = sqrt ( H * H + 4 * A )				    								  
8 LOAD_FAST 1 ( A )					      	  asb = sqrt ( H * H - 4 * A )				    								  
10 BINARY_MULTIPLY					      	  print ( "P = " , "%.2f" % ( ( apb - asb ) / 2.0 ) )	    								  
12 COMPARE_OP 0 ( < )					      	  print ( "B = " , "%.2f" % ( ( apb + asb ) / 2.0 ) )	    								  
14 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
3 16 LOAD_GLOBAL 0 ( print )				      								    								  
18 LOAD_CONST 2 ( 'Not Possible' )			      								    								  
20 CALL_FUNCTION 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
4 24 LOAD_CONST 0 ( None )				      								    								  
26 RETURN_VALUE						      								    								  
							      								    								  
5 >> 28 LOAD_GLOBAL 1 ( sqrt )				      								    								  
30 LOAD_FAST 0 ( H )					      								    								  
32 LOAD_FAST 0 ( H )					      								    								  
34 BINARY_MULTIPLY					      								    								  
36 LOAD_CONST 1 ( 4 )					      								    								  
38 LOAD_FAST 1 ( A )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 BINARY_ADD						      								    								  
44 CALL_FUNCTION 1					      								    								  
46 STORE_FAST 2 ( apb )					      								    								  
							      								    								  
6 48 LOAD_GLOBAL 1 ( sqrt )				      								    								  
50 LOAD_FAST 0 ( H )					      								    								  
52 LOAD_FAST 0 ( H )					      								    								  
54 BINARY_MULTIPLY					      								    								  
56 LOAD_CONST 1 ( 4 )					      								    								  
58 LOAD_FAST 1 ( A )					      								    								  
60 BINARY_MULTIPLY					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 STORE_FAST 3 ( asb )					      								    								  
							      								    								  
7 68 LOAD_GLOBAL 0 ( print )				      								    								  
70 LOAD_CONST 3 ( 'P = ' )				      								    								  
72 LOAD_CONST 4 ( '%.2f' )				      								    								  
74 LOAD_FAST 2 ( apb )					      								    								  
76 LOAD_FAST 3 ( asb )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 5 ( 2.0 )					      								    								  
82 BINARY_TRUE_DIVIDE					      								    								  
84 BINARY_MODULO					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 POP_TOP						      								    								  
							      								    								  
8 90 LOAD_GLOBAL 0 ( print )				      								    								  
92 LOAD_CONST 6 ( 'B = ' )				      								    								  
94 LOAD_CONST 4 ( '%.2f' )				      								    								  
96 LOAD_FAST 2 ( apb )					      								    								  
98 LOAD_FAST 3 ( asb )					      								    								  
100 BINARY_ADD						      								    								  
102 LOAD_CONST 5 ( 2.0 )				      								    								  
104 BINARY_TRUE_DIVIDE					      								    								  
106 BINARY_MODULO					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 POP_TOP						      								    								  
112 LOAD_CONST 0 ( None )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			      KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			    KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			  KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT
--							      --							    --								  --
Disassembly of <code object printkthnode at 0x7f33e2644f60, f def printkthnode ( adj , wt , n , k ) :			    def printkthnode ( adj , size , size , size , size , size , s script_not_found : None
2 0 SETUP_LOOP 28 ( to 30 )				      	  for i in range ( n ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      adj [ i ].sort ( )				    								  
4 LOAD_FAST 2 ( n )					      	  for i in range ( n ) :				    								  
6 CALL_FUNCTION 1					      	      if ( len ( adj [ i ] ) >= k ) :			    								  
8 GET_ITER						      		  print ( adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] 								  
>> 10 FOR_ITER 16 ( to 28 )				      	      else :						    								  
12 STORE_FAST 4 ( i )					      		  print ( "-1" , end = " " )			    								  
							      								    								  
3 14 LOAD_FAST 0 ( adj )				      								    								  
16 LOAD_FAST 4 ( i )					      								    								  
18 BINARY_SUBSCR					      								    								  
20 LOAD_METHOD 1 ( sort )				      								    								  
22 CALL_METHOD 0					      								    								  
24 POP_TOP						      								    								  
26 JUMP_ABSOLUTE 10					      								    								  
>> 28 POP_BLOCK						      								    								  
							      								    								  
4 >> 30 SETUP_LOOP 82 ( to 114 )			      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 70 ( to 112 )				      								    								  
42 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 44 LOAD_GLOBAL 2 ( len )				      								    								  
46 LOAD_FAST 0 ( adj )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 LOAD_FAST 3 ( k )					      								    								  
56 COMPARE_OP 5 ( >= )					      								    								  
58 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
6 60 LOAD_GLOBAL 3 ( print )				      								    								  
62 LOAD_FAST 0 ( adj )					      								    								  
64 LOAD_FAST 4 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_GLOBAL 2 ( len )				      								    								  
70 LOAD_FAST 0 ( adj )					      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_FAST 3 ( k )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_CONST 1 ( 1 )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 2 ( ' ' )					      								    								  
90 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
92 CALL_FUNCTION_KW 2					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 40					      								    								  
							      								    								  
8 >> 98 LOAD_GLOBAL 3 ( print )				      								    								  
100 LOAD_CONST 4 ( '-1' )				      								    								  
102 LOAD_CONST 2 ( ' ' )				      								    								  
104 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 40					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SERIES_REVERSE_ORDER			      PRINT_FIBONACCI_SERIES_REVERSE_ORDER			    PRINT_FIBONACCI_SERIES_REVERSE_ORDER			  PRINT_FIBONACCI_SERIES_REVERSE_ORDER
--							      --							    --								  --
Disassembly of <code object reverseFibonacci at 0x7f33e2653ed def reverseFibonacci ( n ) :				    def reverseFibonacci ( n , a , b , a , b ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * n						    	a = 0							  
2 BUILD_LIST 1						      	  a [ 0 ] = 0						    	a = 0							  
4 LOAD_FAST 0 ( n )					      	  a [ 1 ] = 1						    	b = 0							  
6 BINARY_MULTIPLY					      	  for i in range ( 2 , n ) :				    	a = 0							  
8 STORE_FAST 1 ( a )					      	      a [ i ] = a [ i - 2 ] + a [ i - 1 ]		    	b = 0							  
							      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	a = b [ 0 ]						  
3 10 LOAD_CONST 1 ( 0 )					      	      print ( a [ i ] , end = " " )			    	b = a [ 1 ]						  
12 LOAD_FAST 1 ( a )					      								    	a = b [ 0 ]						  
14 LOAD_CONST 1 ( 0 )					      								    	b = a [ 1 ]						  
16 STORE_SUBSCR						      								    	a = b [ 0 ]						  
							      								    	b = a [ 1 ]						  
4 18 LOAD_CONST 2 ( 1 )					      								    	a = b [ 0 ]						  
20 LOAD_FAST 1 ( a )					      								    	b = a [ 1 ]						  
22 LOAD_CONST 2 ( 1 )					      								    	a = b [ 0 ]						  
24 STORE_SUBSCR						      								    	b = a [ 1 ]						  
							      								    	a = b [ 2 ]						  
5 26 SETUP_LOOP 46 ( to 74 )				      								    	b = a [ 0 ]						  
28 LOAD_GLOBAL 0 ( range )				      								    	a = b [ 1 ]						  
30 LOAD_CONST 3 ( 2 )					      								    	b = b [ 1 ]						  
32 LOAD_FAST 0 ( n )					      								    	a = b [ 1 ]						  
34 CALL_FUNCTION 2					      								    	b = b [ 2 ]						  
36 GET_ITER						      								    	a = b [ 1 ]						  
>> 38 FOR_ITER 32 ( to 72 )				      								    	b = b [ 2 ]						  
40 STORE_FAST 2 ( i )					      								    	a = b [ 1 ]						  
							      								    	b [ 1 ] = b [ 2 ]					  
6 42 LOAD_FAST 1 ( a )					      								    	b [ 1 ] = b [ 2 ]					  
44 LOAD_FAST 2 ( i )					      								    	a [ 1 ] = b [ 2 ]					  
46 LOAD_CONST 3 ( 2 )					      								    	b [ 1 ] = b [ 2 ]					  
48 BINARY_SUBTRACT					      								    	a [ 1 ] = b [ 2 ]					  
50 BINARY_SUBSCR					      								    	b [ 2 ] = b [ 2 ]					  
52 LOAD_FAST 1 ( a )					      								    	a [ 1 ] = b [ 2 ]					  
54 LOAD_FAST 2 ( i )					      								    	b [ 2 ] = b [ 2 ]					  
56 LOAD_CONST 2 ( 1 )					      								    	a [ 3 ] = b [ 1 ]					  
58 BINARY_SUBTRACT					      								    	b [ 2 ] = b [ 2 ]					  
60 BINARY_SUBSCR					      								    	a [ 2 ] = b [ 2 ]					  
62 BINARY_ADD						      								    	b [ 2 ] = b [ 2 ]					  
64 LOAD_FAST 1 ( a )					      								    	a [ 2 ] = b [ 2 ]					  
66 LOAD_FAST 2 ( i )					      								    	b [ 2 ] = b [ 3 ]					  
68 STORE_SUBSCR						      								    	a [ 2 ] = b [ 2 ]					  
70 JUMP_ABSOLUTE 38					      								    	b [ 2 ] = b [ 3 ]					  
>> 72 POP_BLOCK						      								    	b [ 2 ] = b [ 4 ]					  
							      								    	b [ 2 ] = b [ 4 ]					  
7 >> 74 SETUP_LOOP 40 ( to 116 )			      								    	b [ 2 ] = b [ 1 ]					  
76 LOAD_GLOBAL 0 ( range )				      								    	b [ 2 ] = b [ 1 ]					  
78 LOAD_FAST 0 ( n )					      								    	b [ 2 ] = b [ 2 ]					  
80 LOAD_CONST 2 ( 1 )					      								    	b [ 2 ] = b [ 2 ]					  
82 BINARY_SUBTRACT					      								    	b [ 2 ] = b [ 3 ]					  
84 LOAD_CONST 4 ( - 1 )					      								    	b [ 2 ] = b [ 4 ]					  
86 LOAD_CONST 4 ( - 1 )					      								    	b [ 2 ] = b [ 4 ]					  
88 CALL_FUNCTION 3					      								    	b [ 2 ] = b [ 4 ]					  
90 GET_ITER						      								    	b [ 2 ] = b [ 5 ]					  
>> 92 FOR_ITER 20 ( to 114 )				      								    	b [ 2 ] = b [ 6 ]					  
94 STORE_FAST 2 ( i )					      								    	b [ 2 ] = b [ 6 ]					  
							      								    	b [ 2 ] = b [ 4 ]					  
8 96 LOAD_GLOBAL 1 ( print )				      								    	b [ 2 ] = b [ 6 ]					  
98 LOAD_FAST 1 ( a )					      								    	b [ 2 ] = b [ 6 ]					  
100 LOAD_FAST 2 ( i )					      								    	b [ 2 ] = b [ 6 ]					  
102 BINARY_SUBSCR					      								    	return b						  
104 LOAD_CONST 5 ( ' ' )				      								    								  
106 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
108 CALL_FUNCTION_KW 2					      								    								  
110 POP_TOP						      								    								  
112 JUMP_ABSOLUTE 92					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM					      KNAPSACK_PROBLEM						    KNAPSACK_PROBLEM						  KNAPSACK_PROBLEM
--							      --							    --								  --
Disassembly of <code object knapSack at 0x7f33e2649a50, file  def knapSack ( W , wt , val , n ) :			    def set_global_apSack ( W , W , W , W , W , W , W , W , W , W script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if n == 0 or W == 0 :					    								  
2 LOAD_CONST 1 ( 0 )					      	      return 0						    								  
4 COMPARE_OP 2 ( == )					      	  if ( wt [ n - 1 ] > W ) :				    								  
6 POP_JUMP_IF_TRUE 16					      	      return knapSack ( W , wt , val , n - 1 )		    								  
8 LOAD_FAST 0 ( W )					      	  else :						    								  
10 LOAD_CONST 1 ( 0 )					      	      return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  								  
12 COMPARE_OP 2 ( == )					      								    								  
14 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
3 >> 16 LOAD_CONST 1 ( 0 )				      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 1 ( wt )				      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 0 ( W )					      								    								  
32 COMPARE_OP 4 ( > )					      								    								  
34 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
5 36 LOAD_GLOBAL 0 ( knapSack )				      								    								  
38 LOAD_FAST 0 ( W )					      								    								  
40 LOAD_FAST 1 ( wt )					      								    								  
42 LOAD_FAST 2 ( val )					      								    								  
44 LOAD_FAST 3 ( n )					      								    								  
46 LOAD_CONST 2 ( 1 )					      								    								  
48 BINARY_SUBTRACT					      								    								  
50 CALL_FUNCTION 4					      								    								  
52 RETURN_VALUE						      								    								  
							      								    								  
7 >> 54 LOAD_GLOBAL 1 ( max )				      								    								  
56 LOAD_FAST 2 ( val )					      								    								  
58 LOAD_FAST 3 ( n )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 BINARY_SUBSCR					      								    								  
66 LOAD_GLOBAL 0 ( knapSack )				      								    								  
68 LOAD_FAST 0 ( W )					      								    								  
70 LOAD_FAST 1 ( wt )					      								    								  
72 LOAD_FAST 3 ( n )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_SUBTRACT					      								    								  
78 BINARY_SUBSCR					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 1 ( wt )					      								    								  
84 LOAD_FAST 2 ( val )					      								    								  
86 LOAD_FAST 3 ( n )					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 CALL_FUNCTION 4					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_GLOBAL 0 ( knapSack )				      								    								  
98 LOAD_FAST 0 ( W )					      								    								  
100 LOAD_FAST 1 ( wt )					      								    								  
102 LOAD_FAST 2 ( val )					      								    								  
104 LOAD_FAST 3 ( n )					      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 BINARY_SUBTRACT					      								    								  
110 CALL_FUNCTION 4					      								    								  
112 CALL_FUNCTION 2					      								    								  
114 RETURN_VALUE					      								    								  
116 LOAD_CONST 0 ( None )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1	      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1
--							      --							    --								  --
Disassembly of <code object findArea at 0x7f33e2653f60, file  def findArea ( arr , n ) :				    def findArea ( arr , 0x73333333333333333333333333333333333333 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 BUILD_LIST 0					      	  s = [ ]						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( s )					      	  first = 0						    								  alid/MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARR
							      	  second = 0						    								  AY_1.py", line 33	def f_filled ( arr , 0x73333
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    								  33333333333333333333333333333333333333333333333333
6 STORE_FAST 3 ( first )				      	      if arr [ i ] not in s :				    								  33333333333333333333333333333333333333333333333333
							      		  s.append ( arr [ i ] )			    								  33333333333333333333333333333333333333333333333333
4 8 LOAD_CONST 1 ( 0 )					      		  continue					    								  33333333333333333333333333333333333333333333333333
10 STORE_FAST 4 ( second )				      	      if ( arr [ i ] > first ) :			    								  33333333333333333333333333333333333333333333333333
							      		  second = first				    								  33333333333333333333333333333333333333333333333333
5 12 SETUP_LOOP 90 ( to 104 )				      		  first = arr [ i ]				    								  33333333333333333333333333333333333333333333333333
14 LOAD_GLOBAL 0 ( range )				      	      elif ( arr [ i ] > second ) :			    								  33333333333333333333333333333333333333333333333333
16 LOAD_FAST 1 ( n )					      		  second = arr [ i ]				    								  33333333333333333333333333333333333333333333333333
18 CALL_FUNCTION 1					      	  return ( first * second )				    								  33333333333333333333333333333333333333333333333333
20 GET_ITER						      								    								  33333333333333333333333333333333333333333333333333
>> 22 FOR_ITER 78 ( to 102 )				      								    								  33333333333333333333333333333333333333333333333333
24 STORE_FAST 5 ( i )					      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33333333333333333333333333333333333333333333333333
6 26 LOAD_FAST 0 ( arr )				      								    								  33333333333333333333333333333333333333333333333333
28 LOAD_FAST 5 ( i )					      								    								  33333333333333333333333333333333333333333333333333
30 BINARY_SUBSCR					      								    								  33333333333333333333333333333333333333333333333333
32 LOAD_FAST 2 ( s )					      								    								  33333333333333333333333333333333333333333333333333
34 COMPARE_OP 7 ( not in )				      								    								  33333333333333333333333333333333333333333333333333
36 POP_JUMP_IF_FALSE 54					      								    								  33333333333333333333333333333333333333333333333333
							      								    								  33
7 38 LOAD_FAST 2 ( s )					      								    								  
40 LOAD_METHOD 1 ( append )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 5 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 CALL_METHOD 1					      								    								  
50 POP_TOP						      								    								  
							      								    								  
8 52 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
9 >> 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 5 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 3 ( first )				      								    								  
62 COMPARE_OP 4 ( > )					      								    								  
64 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
10 66 LOAD_FAST 3 ( first )				      								    								  
68 STORE_FAST 4 ( second )				      								    								  
							      								    								  				      ^ SyntaxError:
11 70 LOAD_FAST 0 ( arr )				      								    								   invalid syntax
72 LOAD_FAST 5 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 3 ( first )				      								    								  
78 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
12 >> 80 LOAD_FAST 0 ( arr )				      								    								  
82 LOAD_FAST 5 ( i )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_FAST 4 ( second )				      								    								  
88 COMPARE_OP 4 ( > )					      								    								  
90 POP_JUMP_IF_FALSE 22					      								    								  
							      								    								  
13 92 LOAD_FAST 0 ( arr )				      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 STORE_FAST 4 ( second )				      								    								  
100 JUMP_ABSOLUTE 22					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
14 >> 104 LOAD_FAST 3 ( first )				      								    								  
106 LOAD_FAST 4 ( second )				      								    								  
108 BINARY_MULTIPLY					      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		      ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		    ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		  ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE
--							      --							    --								  --
Disassembly of <code object solveQuery at 0x7f33e2644f60, fil def solveQuery ( start , end , arr ) :			    def solveQuery ( start , end , end ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  frequency = dict ( )					    	frequency = dict ( )					  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 CALL_FUNCTION 0					      	  for i in range ( start , end + 1 ) :			    	for i in range ( start , end + 1 ) :			  alid/ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE.
4 STORE_FAST 3 ( frequency )				      	      if arr [ i ] in frequency.keys ( ) :		    	    frequency = start [ i ]				  py", line 31	   def f_filled ( start , end , end
							      		  frequency [ arr [ i ] ] += 1			    	    frequency = frequency [ i ]				  ) :	  ^ SyntaxError: duplicate argument 'end' in
3 6 SETUP_LOOP 72 ( to 80 )				      	      else :						    	    frequency [ i ] = frequency [ i ]			   function definition
8 LOAD_GLOBAL 1 ( range )				      		  frequency [ arr [ i ] ] = 1			    	    frequency [ i ] = frequency [ i ]			  
10 LOAD_FAST 0 ( start )				      	  count = 0						    	    frequency [ i ] = frequency [ i ]			  
12 LOAD_FAST 1 ( end )					      	  for x in frequency :					    	    frequency [ i ] = frequency [ i ]			  
14 LOAD_CONST 1 ( 1 )					      	      if x == frequency [ x ] :				    	    frequency [ i ] = frequency [ i ]			  
16 BINARY_ADD						      		  count += 1					    	return frequency					  
18 CALL_FUNCTION 2					      	  return count						    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 54 ( to 78 )				      								    								  
24 STORE_FAST 4 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 2 ( arr )				      								    								  
28 LOAD_FAST 4 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 3 ( frequency )				      								    								  
34 LOAD_METHOD 2 ( keys )				      								    								  
36 CALL_METHOD 0					      								    								  
38 COMPARE_OP 6 ( in )					      								    								  
40 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
5 42 LOAD_FAST 3 ( frequency )				      								    								  
44 LOAD_FAST 2 ( arr )					      								    								  
46 LOAD_FAST 4 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 DUP_TOP_TWO						      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 INPLACE_ADD						      								    								  
58 ROT_THREE						      								    								  
60 STORE_SUBSCR						      								    								  
62 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
7 >> 64 LOAD_CONST 1 ( 1 )				      								    								  
66 LOAD_FAST 3 ( frequency )				      								    								  
68 LOAD_FAST 2 ( arr )					      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 22					      								    								  
>> 78 POP_BLOCK						      								    								  
							      								    								  
8 >> 80 LOAD_CONST 2 ( 0 )				      								    								  
82 STORE_FAST 5 ( count )				      								    								  
							      								    								  
9 84 SETUP_LOOP 32 ( to 118 )				      								    								  
86 LOAD_FAST 3 ( frequency )				      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 24 ( to 116 )				      								    								  
92 STORE_FAST 6 ( x )					      								    								  
							      								    								  
10 94 LOAD_FAST 6 ( x )					      								    								  
96 LOAD_FAST 3 ( frequency )				      								    								  
98 LOAD_FAST 6 ( x )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
11 106 LOAD_FAST 5 ( count )				      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 5 ( count )				      								    								  
114 JUMP_ABSOLUTE 90					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 5 ( count )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_BONACCI_NUMBERS					      N_BONACCI_NUMBERS						    N_BONACCI_NUMBERS						  N_BONACCI_NUMBERS
--							      --							    --								  --
Disassembly of <code object bonacciseries at 0x7f33e2644f60,  def bonacciseries ( n , m ) :				    def bonaccisin_csv ( n , m , m , area , area , area , area ,  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  a = [ 0 ] * m						    								  
2 BUILD_LIST 1						      	  a [ n - 1 ] = 1					    								  
4 LOAD_FAST 1 ( m )					      	  for i in range ( n , m ) :				    								  
6 BINARY_MULTIPLY					      	      for j in range ( i - n , i ) :			    								  
8 STORE_FAST 2 ( a )					      		  a [ i ] = a [ i ] + a [ j ]			    								  
							      	  for i in range ( 0 , m ) :				    								  
3 10 LOAD_CONST 2 ( 1 )					      	      print ( a [ i ] , end = " " )			    								  
12 LOAD_FAST 2 ( a )					      								    								  
14 LOAD_FAST 0 ( n )					      								    								  
16 LOAD_CONST 2 ( 1 )					      								    								  
18 BINARY_SUBTRACT					      								    								  
20 STORE_SUBSCR						      								    								  
							      								    								  
4 22 SETUP_LOOP 62 ( to 86 )				      								    								  
24 LOAD_GLOBAL 0 ( range )				      								    								  
26 LOAD_FAST 0 ( n )					      								    								  
28 LOAD_FAST 1 ( m )					      								    								  
30 CALL_FUNCTION 2					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 48 ( to 84 )				      								    								  
36 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 38 SETUP_LOOP 42 ( to 82 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 LOAD_FAST 0 ( n )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 24 ( to 80 )				      								    								  
56 STORE_FAST 4 ( j )					      								    								  
							      								    								  
6 58 LOAD_FAST 2 ( a )					      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 2 ( a )					      								    								  
66 LOAD_FAST 4 ( j )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 BINARY_ADD						      								    								  
72 LOAD_FAST 2 ( a )					      								    								  
74 LOAD_FAST 3 ( i )					      								    								  
76 STORE_SUBSCR						      								    								  
78 JUMP_ABSOLUTE 54					      								    								  
>> 80 POP_BLOCK						      								    								  
>> 82 JUMP_ABSOLUTE 34					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
7 >> 86 SETUP_LOOP 34 ( to 122 )			      								    								  
88 LOAD_GLOBAL 0 ( range )				      								    								  
90 LOAD_CONST 1 ( 0 )					      								    								  
92 LOAD_FAST 1 ( m )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 20 ( to 120 )				      								    								  
100 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 102 LOAD_GLOBAL 1 ( print )				      								    								  
104 LOAD_FAST 2 ( a )					      								    								  
106 LOAD_FAST 3 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 3 ( ' ' )				      								    								  
112 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
114 CALL_FUNCTION_KW 2					      								    								  
116 POP_TOP						      								    								  
118 JUMP_ABSOLUTE 98					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
Disassembly of <code object nobleInteger at 0x7f33e2644f60, f def nobleInteger ( arr ) :				    def nobleInteger ( arr , n , n , n , n , n , n , n , n , n ,  script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    								  
2 LOAD_METHOD 0 ( sort )				      	  n = len ( arr )					    								  
4 CALL_METHOD 0						      	  for i in range ( n - 1 ) :				    								  
6 POP_TOP						      	      if arr [ i ] == arr [ i + 1 ] :			    								  
							      		  continue					    								  
3 8 LOAD_GLOBAL 1 ( len )				      	      if arr [ i ] == n - i - 1 :			    								  
10 LOAD_FAST 0 ( arr )					      		  return arr [ i ]				    								  
12 CALL_FUNCTION 1					      	  if arr [ n - 1 ] == 0 :				    								  
14 STORE_FAST 1 ( n )					      	      return arr [ n - 1 ]				    								  
							      	  return - 1						    								  
4 16 SETUP_LOOP 70 ( to 88 )				      								    								  
18 LOAD_GLOBAL 2 ( range )				      								    								  
20 LOAD_FAST 1 ( n )					      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 BINARY_SUBTRACT					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 GET_ITER						      								    								  
>> 30 FOR_ITER 54 ( to 86 )				      								    								  
32 STORE_FAST 2 ( i )					      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
6 54 JUMP_ABSOLUTE 30					      								    								  
							      								    								  
7 >> 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 1 ( n )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 COMPARE_OP 2 ( == )					      								    								  
74 POP_JUMP_IF_FALSE 30					      								    								  
							      								    								  
8 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_FAST 2 ( i )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 RETURN_VALUE						      								    								  
84 JUMP_ABSOLUTE 30					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
9 >> 88 LOAD_FAST 0 ( arr )				      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_CONST 2 ( 0 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
10 104 LOAD_FAST 0 ( arr )				      								    								  
106 LOAD_FAST 1 ( n )					      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 BINARY_SUBTRACT					      								    								  
112 BINARY_SUBSCR					      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
11 >> 116 LOAD_CONST 3 ( - 1 )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PATTERNS_101_GIVEN_STRING				      FIND_PATTERNS_101_GIVEN_STRING				    FIND_PATTERNS_101_GIVEN_STRING				  FIND_PATTERNS_101_GIVEN_STRING
--							      --							    --								  --
Disassembly of <code object patternCount at 0x7f33e2644f60, f def patternCount ( str ) :				    def patternCount ( str ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( str )					      	  last = str [ 0 ]					    	last = str [ 0 ]					  
2 LOAD_CONST 1 ( 0 )					      	  i = 1 ; counter = 0					    	last = last [ 1 ]					  
4 BINARY_SUBSCR						      	  while ( i < len ( str ) ) :				    	while last < last :					  
6 STORE_FAST 1 ( last )					      	      if ( str [ i ] == '0' and last == '1' ) :		    	    if last [ 0 ] == '' :				  
							      		  while ( str [ i ] == '0' ) :			    		break						  
3 8 LOAD_CONST 2 ( 1 )					      		      i += 1					    	    if last [ 0 ] == '' :				  
10 STORE_FAST 2 ( i )					      		      if ( str [ i ] == '1' ) :			    		break						  
12 LOAD_CONST 1 ( 0 )					      			  counter += 1				    	    if last [ 1 ] == '' :				  
14 STORE_FAST 3 ( counter )				      	      last = str [ i ]					    		break						  
							      	      i += 1						    	    if last [ 1 ] == '' :				  
4 16 SETUP_LOOP 98 ( to 116 )				      	  return counter					    		break						  
>> 18 LOAD_FAST 2 ( i )					      								    	    if last [ 1 ] == '' :				  
20 LOAD_GLOBAL 0 ( len )				      								    		break						  
22 LOAD_FAST 0 ( str )					      								    	if last [ 0 ] == '' :					  
24 CALL_FUNCTION 1					      								    	    break						  
26 COMPARE_OP 0 ( < )					      								    return last							  
28 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( str )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( '0' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 96					      								    								  
42 LOAD_FAST 1 ( last )					      								    								  
44 LOAD_CONST 4 ( '1' )					      								    								  
46 COMPARE_OP 2 ( == )					      								    								  
48 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
6 50 SETUP_LOOP 44 ( to 96 )				      								    								  
>> 52 LOAD_FAST 0 ( str )				      								    								  
54 LOAD_FAST 2 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 LOAD_CONST 3 ( '0' )					      								    								  
60 COMPARE_OP 2 ( == )					      								    								  
62 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( i )					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 INPLACE_ADD						      								    								  
70 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 72 LOAD_FAST 0 ( str )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( '1' )					      								    								  
80 COMPARE_OP 2 ( == )					      								    								  
82 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
9 84 LOAD_FAST 3 ( counter )				      								    								  
86 LOAD_CONST 2 ( 1 )					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 3 ( counter )				      								    								  
92 JUMP_ABSOLUTE 52					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 0 ( str )				      								    								  
98 LOAD_FAST 2 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 STORE_FAST 1 ( last )				      								    								  
							      								    								  
11 104 LOAD_FAST 2 ( i )				      								    								  
106 LOAD_CONST 2 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 2 ( i )					      								    								  
112 JUMP_ABSOLUTE 18					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
12 >> 116 LOAD_FAST 3 ( counter )			      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YS_DISTINCT_ELEMENTS				      SUB<unk> YS_DISTINCT_ELEMENTS				    SUB<unk> YS_DISTINCT_ELEMENTS				  SUB<unk> YS_DISTINCT_ELEMENTS
--							      --							    --								  --
Disassembly of <code object sumoflength at 0x7f33e2644930, fi def sumoflength ( arr , n ) :				    def sumoflength ( arr , 0x70x70x70x74930 ) :		  script_not_found : None
2 0 BUILD_LIST 0					      	  s = [ ]						    	s = [ ]							  
2 STORE_FAST 2 ( s )					      	  j = 0							    	while s < 0 :						  
							      	  ans = 0						    	    s = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	    while s < 0 :					  
6 STORE_FAST 3 ( j )					      	      while ( j < n and ( arr [ j ] not in s ) ) :	    		s += 1						  
							      		  s.append ( arr [ j ] )			    		s += 1						  
4 8 LOAD_CONST 1 ( 0 )					      		  j += 1					    		s += 1						  
10 STORE_FAST 4 ( ans )					      	      ans += ( ( j - i ) * ( j - i + 1 ) ) // 2		    	    s += s						  
							      	      s.remove ( arr [ i ] )				    	s += s							  
5 12 SETUP_LOOP 106 ( to 120 )				      	  return ans						    								  
14 LOAD_GLOBAL 0 ( range )				      								    								  
16 LOAD_FAST 1 ( n )					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 94 ( to 118 )				      								    								  
24 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 26 SETUP_LOOP 46 ( to 74 )				      								    								  
>> 28 LOAD_FAST 3 ( j )					      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 COMPARE_OP 0 ( < )					      								    								  
34 POP_JUMP_IF_FALSE 72					      								    								  
36 LOAD_FAST 0 ( arr )					      								    								  
38 LOAD_FAST 3 ( j )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 2 ( s )					      								    								  
44 COMPARE_OP 7 ( not in )				      								    								  
46 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
7 48 LOAD_FAST 2 ( s )					      								    								  
50 LOAD_METHOD 1 ( append )				      								    								  
52 LOAD_FAST 0 ( arr )					      								    								  
54 LOAD_FAST 3 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 CALL_METHOD 1					      								    								  
60 POP_TOP						      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( j )					      								    								  
64 LOAD_CONST 2 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( j )					      								    								  
70 JUMP_ABSOLUTE 28					      								    								  
>> 72 POP_BLOCK						      								    								  
							      								    								  
9 >> 74 LOAD_FAST 4 ( ans )				      								    								  
76 LOAD_FAST 3 ( j )					      								    								  
78 LOAD_FAST 5 ( i )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 LOAD_FAST 3 ( j )					      								    								  
84 LOAD_FAST 5 ( i )					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 LOAD_CONST 2 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_MULTIPLY					      								    								  
94 LOAD_CONST 3 ( 2 )					      								    								  
96 BINARY_FLOOR_DIVIDE					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 4 ( ans )				      								    								  
							      								    								  
10 102 LOAD_FAST 2 ( s )				      								    								  
104 LOAD_METHOD 2 ( remove )				      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 5 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 CALL_METHOD 1					      								    								  
114 POP_TOP						      								    								  
116 JUMP_ABSOLUTE 22					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
11 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_<unk> CATIVE_INVERSE_1_N			      MODULAR_<unk> CATIVE_INVERSE_1_N				    MODULAR_<unk> CATIVE_INVERSE_1_N				  MODULAR_<unk> CATIVE_INVERSE_1_N
--							      --							    --								  --
Disassembly of <code object modularInverse at 0x7f33e26494b0, def modularInverse ( n , prime ) :			    def modularInverse ( n , n = 1 , n = 0 , n = 1 , n = 0 , n =  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  dp = [ 0 ] * ( n + 1 )				    								  
2 BUILD_LIST 1						      	  dp [ 0 ] = dp [ 1 ] = 1				    								  
4 LOAD_FAST 0 ( n )					      	  for i in range ( 2 , n + 1 ) :			    								  
6 LOAD_CONST 2 ( 1 )					      	      dp [ i ] = dp [ prime % i ] * ( prime - prime // i )  								  
8 BINARY_ADD						      	  for i in range ( 1 , n + 1 ) :			    								  
10 BINARY_MULTIPLY					      	      print ( dp [ i ] , end = " " )			    								  
12 STORE_FAST 2 ( dp )					      								    								  
							      								    								  
3 14 LOAD_CONST 2 ( 1 )					      								    								  
16 DUP_TOP						      								    								  
18 LOAD_FAST 2 ( dp )					      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_SUBSCR						      								    								  
24 LOAD_FAST 2 ( dp )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
4 30 SETUP_LOOP 54 ( to 86 )				      								    								  
32 LOAD_GLOBAL 0 ( range )				      								    								  
34 LOAD_CONST 3 ( 2 )					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 2 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 CALL_FUNCTION 2					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 36 ( to 84 )				      								    								  
48 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 50 LOAD_FAST 2 ( dp )					      								    								  
52 LOAD_FAST 1 ( prime )				      								    								  
54 LOAD_FAST 3 ( i )					      								    								  
56 BINARY_MODULO					      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_FAST 1 ( prime )				      								    								  
62 LOAD_FAST 1 ( prime )				      								    								  
64 LOAD_FAST 3 ( i )					      								    								  
66 BINARY_FLOOR_DIVIDE					      								    								  
68 BINARY_SUBTRACT					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 LOAD_FAST 1 ( prime )				      								    								  
74 BINARY_MODULO					      								    								  
76 LOAD_FAST 2 ( dp )					      								    								  
78 LOAD_FAST 3 ( i )					      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 46					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
6 >> 86 SETUP_LOOP 38 ( to 126 )			      								    								  
88 LOAD_GLOBAL 0 ( range )				      								    								  
90 LOAD_CONST 2 ( 1 )					      								    								  
92 LOAD_FAST 0 ( n )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 CALL_FUNCTION 2					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 20 ( to 124 )				      								    								  
104 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 106 LOAD_GLOBAL 1 ( print )				      								    								  
108 LOAD_FAST 2 ( dp )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 4 ( ' ' )				      								    								  
116 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
118 CALL_FUNCTION_KW 2					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 102					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1	      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1
--							      --							    --								  --
Disassembly of <code object maxRepeating at 0x7f33e2644930, f def maxRepeating ( str ) :				    def maxRepeating ( str ) :					  error : Traceback (most recent call last):   File
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( str )					    	n = len ( str )						  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 LOAD_FAST 0 ( str )					      	  count = 0						    	count = 0						  024/eval_scripts/dis_sa-python_sa.valid/MAXIMUM_CO
4 CALL_FUNCTION 1					      	  res = str [ 0 ]					    	count = 0						  NSECUTIVE_REPEATING_CHARACTER_STRING_1.py", line 5
6 STORE_FAST 1 ( n )					      	  cur_count = 1						    	while count < n :					  8, in <module>     if f_filled(*parameters_set) ==
							      	  for i in range ( n ) :				    	    if count [ count ] == 0 :				   f_gold(*parameters_set):   File "/home/ubuntu/Tra
3 8 LOAD_CONST 1 ( 0 )					      	      if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) :	    		count += 1					  nsCoder/models/eval/bt_sa/21z7a0p024/eval_scripts/
10 STORE_FAST 2 ( count )				      		  cur_count += 1				    	return count						  dis_sa-python_sa.valid/MAXIMUM_CONSECUTIVE_REPEATI
							      	      else :						    								  NG_CHARACTER_STRING_1.py", line 38, in f_filled
4 12 LOAD_FAST 0 ( str )				      		  if cur_count > count :			    								    if count [ count ] == 0 : TypeError: 'int' objec
14 LOAD_CONST 1 ( 0 )					      		      count = cur_count				    								  t is not subscriptable
16 BINARY_SUBSCR					      		      res = str [ i ]				    								  
18 STORE_FAST 3 ( res )					      		  cur_count = 1					    								  
							      	  return res						    								  
5 20 LOAD_CONST 2 ( 1 )					      								    								  
22 STORE_FAST 4 ( cur_count )				      								    								  
							      								    								  
6 24 SETUP_LOOP 82 ( to 108 )				      								    								  
26 LOAD_GLOBAL 1 ( range )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 CALL_FUNCTION 1					      								    								  
32 GET_ITER						      								    								  
>> 34 FOR_ITER 70 ( to 106 )				      								    								  
36 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 38 LOAD_FAST 5 ( i )					      								    								  
40 LOAD_FAST 1 ( n )					      								    								  
42 LOAD_CONST 2 ( 1 )					      								    								  
44 BINARY_SUBTRACT					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 80					      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( str )					      								    								  
58 LOAD_FAST 5 ( i )					      								    								  
60 LOAD_CONST 2 ( 1 )					      								    								  
62 BINARY_ADD						      								    								  
64 BINARY_SUBSCR					      								    								  
66 COMPARE_OP 2 ( == )					      								    								  
68 POP_JUMP_IF_FALSE 80					      								    								  
							      								    								  
8 70 LOAD_FAST 4 ( cur_count )				      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 INPLACE_ADD						      								    								  
76 STORE_FAST 4 ( cur_count )				      								    								  
78 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
10 >> 80 LOAD_FAST 4 ( cur_count )			      								    								  
82 LOAD_FAST 2 ( count )				      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
11 88 LOAD_FAST 4 ( cur_count )				      								    								  
90 STORE_FAST 2 ( count )				      								    								  
							      								    								  
12 92 LOAD_FAST 0 ( str )				      								    								  
94 LOAD_FAST 5 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 STORE_FAST 3 ( res )					      								    								  
							      								    								  
13 >> 100 LOAD_CONST 2 ( 1 )				      								    								  
102 STORE_FAST 4 ( cur_count )				      								    								  
104 JUMP_ABSOLUTE 34					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
14 >> 108 LOAD_FAST 3 ( res )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1
--							      --							    --								  --
Disassembly of <code object countSubstringWithEqualEnds at 0x def countSubstringWithEqualEnds ( s ) :			    def countSubstringWithEqualds ( s ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  result = 0 ;						    	result = 0						  
2 STORE_FAST 1 ( result )				      	  n = len ( s ) ;					    	while len ( s ) < MAX_CHAR :				  
							      	  count = [ 0 ] * MAX_CHAR ;				    	    result = s [ 0 ]					  
3 4 LOAD_GLOBAL 0 ( len )				      	  for i in range ( n ) :				    	    if ( len ( s ) > MAX_CHAR ) :			  
6 LOAD_FAST 0 ( s )					      	      count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1 ;	    		result += 1					  
8 CALL_FUNCTION 1					      	  for i in range ( MAX_CHAR ) :				    	return result						  
10 STORE_FAST 2 ( n )					      	      result += ( count [ i ] * ( count [ i ] + 1 ) / 2 ) ; 								  
							      	  return result ;					    								  
4 12 LOAD_CONST 1 ( 0 )					      								    								  
14 BUILD_LIST 1						      								    								  
16 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
18 BINARY_MULTIPLY					      								    								  
20 STORE_FAST 3 ( count )				      								    								  
							      								    								  
5 22 SETUP_LOOP 48 ( to 72 )				      								    								  
24 LOAD_GLOBAL 2 ( range )				      								    								  
26 LOAD_FAST 2 ( n )					      								    								  
28 CALL_FUNCTION 1					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 36 ( to 70 )				      								    								  
34 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 36 LOAD_FAST 3 ( count )				      								    								  
38 LOAD_GLOBAL 3 ( ord )				      								    								  
40 LOAD_FAST 0 ( s )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 CALL_FUNCTION 1					      								    								  
48 LOAD_GLOBAL 3 ( ord )				      								    								  
50 LOAD_CONST 2 ( 'a' )					      								    								  
52 CALL_FUNCTION 1					      								    								  
54 BINARY_SUBTRACT					      								    								  
56 DUP_TOP_TWO						      								    								  
58 BINARY_SUBSCR					      								    								  
60 LOAD_CONST 3 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 ROT_THREE						      								    								  
66 STORE_SUBSCR						      								    								  
68 JUMP_ABSOLUTE 32					      								    								  
>> 70 POP_BLOCK						      								    								  
							      								    								  
7 >> 72 SETUP_LOOP 44 ( to 118 )			      								    								  
74 LOAD_GLOBAL 2 ( range )				      								    								  
76 LOAD_GLOBAL 1 ( MAX_CHAR )				      								    								  
78 CALL_FUNCTION 1					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 32 ( to 116 )				      								    								  
84 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 86 LOAD_FAST 1 ( result )				      								    								  
88 LOAD_FAST 3 ( count )				      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 3 ( count )				      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 3 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_CONST 4 ( 2 )					      								    								  
108 BINARY_TRUE_DIVIDE					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 1 ( result )				      								    								  
114 JUMP_ABSOLUTE 82					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
9 >> 118 LOAD_FAST 1 ( result )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_BRACKET_NUMBER					      PRINT_BRACKET_NUMBER					    PRINT_BRACKET_NUMBER					  PRINT_BRACKET_NUMBER
--							      --							    --								  --
Disassembly of <code object printBracketNumber at 0x7f33e2649 def printBracketNumber ( exp , n ) :			    def printBracketNumber ( exp , 0x70x70x70x70x70x70x70x70x70x7 script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  left_bnum = 1						    								  
2 STORE_FAST 2 ( left_bnum )				      	  right_bnum = list ( )					    								  
							      	  for i in range ( n ) :				    								  
3 4 LOAD_GLOBAL 0 ( list )				      	      if exp [ i ] == '(' :				    								  
6 CALL_FUNCTION 0					      		  print ( left_bnum , end = " " )		    								  
8 STORE_FAST 3 ( right_bnum )				      		  right_bnum.append ( left_bnum )		    								  
							      		  left_bnum += 1				    								  
4 10 SETUP_LOOP 96 ( to 108 )				      	      elif exp [ i ] == ')' :				    								  
12 LOAD_GLOBAL 1 ( range )				      		  print ( right_bnum [ - 1 ] , end = " " )	    								  
14 LOAD_FAST 1 ( n )					      		  right_bnum.pop ( )				    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 84 ( to 106 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_FAST 0 ( exp )				      								    								  
26 LOAD_FAST 4 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( '(' )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
6 36 LOAD_GLOBAL 2 ( print )				      								    								  
38 LOAD_FAST 2 ( left_bnum )				      								    								  
40 LOAD_CONST 3 ( ' ' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( right_bnum )				      								    								  
50 LOAD_METHOD 3 ( append )				      								    								  
52 LOAD_FAST 2 ( left_bnum )				      								    								  
54 CALL_METHOD 1					      								    								  
56 POP_TOP						      								    								  
							      								    								  
8 58 LOAD_FAST 2 ( left_bnum )				      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 INPLACE_ADD						      								    								  
64 STORE_FAST 2 ( left_bnum )				      								    								  
66 JUMP_ABSOLUTE 20					      								    								  
							      								    								  
9 >> 68 LOAD_FAST 0 ( exp )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 5 ( ')' )					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 20					      								    								  
							      								    								  
10 80 LOAD_GLOBAL 2 ( print )				      								    								  
82 LOAD_FAST 3 ( right_bnum )				      								    								  
84 LOAD_CONST 6 ( - 1 )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_CONST 3 ( ' ' )					      								    								  
90 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
92 CALL_FUNCTION_KW 2					      								    								  
94 POP_TOP						      								    								  
							      								    								  
11 96 LOAD_FAST 3 ( right_bnum )			      								    								  
98 LOAD_METHOD 4 ( pop )				      								    								  
100 CALL_METHOD 0					      								    								  
102 POP_TOP						      								    								  
104 JUMP_ABSOLUTE 20					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_CONSECUTIVE_SUBSEQUENCE				      LONGEST_CONSECUTIVE_SUBSEQUENCE				    LONGEST_CONSECUTIVE_SUBSEQUENCE				  LONGEST_CONSECUTIVE_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object findLongestConseqSubseq at 0x7f33 def findLongestConseqSubseq ( arr , n ) :			    def findword_list ( arr ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( Set )				      	  s = Set ( )						    	s = Set ( )						  
2 CALL_FUNCTION 0					      	  ans = 0						    	s = 0							  
4 STORE_FAST 2 ( s )					      	  for ele in arr :					    	ans = 0							  
							      	      s.add ( ele )					    	ans = 0							  
3 6 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    	for element in arr :					  
8 STORE_FAST 3 ( ans )					      	      if ( arr [ i ] - 1 ) not in s :			    	    if element.name not in s :				  
							      		  j = arr [ i ]					    		ans.append ( element )				  
4 10 SETUP_LOOP 22 ( to 34 )				      		  while ( j in s ) :				    		ans.append ( element )				  
12 LOAD_FAST 0 ( arr )					      		      j += 1					    		ans.append ( element )				  
14 GET_ITER						      		  ans = max ( ans , j - arr [ i ] )		    		ans.append ( element )				  
>> 16 FOR_ITER 14 ( to 32 )				      	  return ans						    		ans.append ( element )				  
18 STORE_FAST 4 ( ele )					      								    		ans.append ( element )				  
							      								    		ans.append ( element )				  
5 20 LOAD_FAST 2 ( s )					      								    		ans.append ( element )				  
22 LOAD_METHOD 1 ( add )				      								    		ans.append ( element )				  
24 LOAD_FAST 4 ( ele )					      								    		ans.append ( ans )				  
26 CALL_METHOD 1					      								    		ans.append ( ans )				  
28 POP_TOP						      								    	return ans						  
30 JUMP_ABSOLUTE 16					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
6 >> 34 SETUP_LOOP 80 ( to 116 )			      								    								  
36 LOAD_GLOBAL 2 ( range )				      								    								  
38 LOAD_FAST 1 ( n )					      								    								  
40 CALL_FUNCTION 1					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 68 ( to 114 )				      								    								  
46 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 48 LOAD_FAST 0 ( arr )				      								    								  
50 LOAD_FAST 5 ( i )					      								    								  
52 BINARY_SUBSCR					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 LOAD_FAST 2 ( s )					      								    								  
60 COMPARE_OP 7 ( not in )				      								    								  
62 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
8 64 LOAD_FAST 0 ( arr )				      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 STORE_FAST 6 ( j )					      								    								  
							      								    								  
9 72 SETUP_LOOP 20 ( to 94 )				      								    								  
>> 74 LOAD_FAST 6 ( j )					      								    								  
76 LOAD_FAST 2 ( s )					      								    								  
78 COMPARE_OP 6 ( in )					      								    								  
80 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
10 82 LOAD_FAST 6 ( j )					      								    								  
84 LOAD_CONST 2 ( 1 )					      								    								  
86 INPLACE_ADD						      								    								  
88 STORE_FAST 6 ( j )					      								    								  
90 JUMP_ABSOLUTE 74					      								    								  
>> 92 POP_BLOCK						      								    								  
							      								    								  
11 >> 94 LOAD_GLOBAL 3 ( max )				      								    								  
96 LOAD_FAST 3 ( ans )					      								    								  
98 LOAD_FAST 6 ( j )					      								    								  
100 LOAD_FAST 0 ( arr )					      								    								  
102 LOAD_FAST 5 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 STORE_FAST 3 ( ans )				      								    								  
112 JUMP_ABSOLUTE 44					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
12 >> 116 LOAD_FAST 3 ( ans )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1      PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	    PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	  PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1
--							      --							    --								  --
Disassembly of <code object isPrime at 0x7f33e2653ed0, file " def isPrime ( n ) :					    def isPrime ( n , high ) :					  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return False					    	    return False					  
4 COMPARE_OP 1 ( <= )					      	  if ( n <= 3 ) :					    	if n <= 3 :						  
6 POP_JUMP_IF_FALSE 12					      	      return True					    	    return True						  
							      	  if ( n % 2 == 0 or n % 3 == 0 ) :			    	if n <= 3 :						  
3 8 LOAD_CONST 2 ( False )				      	      return False					    	    return False					  
10 RETURN_VALUE						      	  i = 5							    	if n <= 4 :						  
							      	  while ( i * i <= n ) :				    	    return False					  
4 >> 12 LOAD_FAST 0 ( n )				      	      if ( n % i == 0 or n % ( i + 2 ) == 0 ) :		    	n = 0							  
14 LOAD_CONST 3 ( 3 )					      		  return False					    	while n < 3 :						  
16 COMPARE_OP 1 ( <= )					      	      i = i + 6						    	    n -= 1						  
18 POP_JUMP_IF_FALSE 24					      	  return True						    	    if n <= 3 :						  
							      								    		return False					  
5 20 LOAD_CONST 4 ( True )				      								    	    n -= 1						  
22 RETURN_VALUE						      								    	else :							  
							      								    	    n -= 1						  
6 >> 24 LOAD_FAST 0 ( n )				      								    								  
26 LOAD_CONST 5 ( 2 )					      								    								  
28 BINARY_MODULO					      								    								  
30 LOAD_CONST 6 ( 0 )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_TRUE 48					      								    								  
36 LOAD_FAST 0 ( n )					      								    								  
38 LOAD_CONST 3 ( 3 )					      								    								  
40 BINARY_MODULO					      								    								  
42 LOAD_CONST 6 ( 0 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 >> 48 LOAD_CONST 2 ( False )				      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
8 >> 52 LOAD_CONST 7 ( 5 )				      								    								  
54 STORE_FAST 1 ( i )					      								    								  
							      								    								  
9 56 SETUP_LOOP 56 ( to 114 )				      								    								  
>> 58 LOAD_FAST 1 ( i )					      								    								  
60 LOAD_FAST 1 ( i )					      								    								  
62 BINARY_MULTIPLY					      								    								  
64 LOAD_FAST 0 ( n )					      								    								  
66 COMPARE_OP 1 ( <= )					      								    								  
68 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
10 70 LOAD_FAST 0 ( n )					      								    								  
72 LOAD_FAST 1 ( i )					      								    								  
74 BINARY_MODULO					      								    								  
76 LOAD_CONST 6 ( 0 )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_TRUE 98					      								    								  
82 LOAD_FAST 0 ( n )					      								    								  
84 LOAD_FAST 1 ( i )					      								    								  
86 LOAD_CONST 5 ( 2 )					      								    								  
88 BINARY_ADD						      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 6 ( 0 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
11 >> 98 LOAD_CONST 2 ( False )				      								    								  
100 RETURN_VALUE					      								    								  
							      								    								  
12 >> 102 LOAD_FAST 1 ( i )				      								    								  
104 LOAD_CONST 8 ( 6 )					      								    								  
106 BINARY_ADD						      								    								  
108 STORE_FAST 1 ( i )					      								    								  
110 JUMP_ABSOLUTE 58					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
13 >> 114 LOAD_CONST 4 ( True )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7f33e26494b0,  def printDistinct ( arr , n ) :				    def printDistinct ( arr , n , n , n , n , n , n , n , n , n , script_not_found : None
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( ) ;					    								  
2 LOAD_METHOD 0 ( sort )				      	  for i in range ( n ) :				    								  
4 CALL_METHOD 0						      	      if ( i < n - 1 and arr [ i ] == arr [ i + 1 ] ) :	    								  
6 POP_TOP						      		  while ( i < n - 1 and ( arr [ i ] == arr [ i + 1  								  
							      		      i += 1 ;					    								  
3 8 SETUP_LOOP 112 ( to 122 )				      	      else :						    								  
10 LOAD_GLOBAL 1 ( range )				      		  print ( arr [ i ] , end = " " ) ;		    								  
12 LOAD_FAST 1 ( n )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 100 ( to 120 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 2 ( i )					      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 COMPARE_OP 0 ( < )					      								    								  
32 POP_JUMP_IF_FALSE 102				      								    								  
34 LOAD_FAST 0 ( arr )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 BINARY_SUBSCR					      								    								  
50 COMPARE_OP 2 ( == )					      								    								  
52 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
5 54 SETUP_LOOP 62 ( to 118 )				      								    								  
>> 56 LOAD_FAST 2 ( i )					      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 LOAD_CONST 1 ( 1 )					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 COMPARE_OP 0 ( < )					      								    								  
66 POP_JUMP_IF_FALSE 98					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 2 ( i )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( arr )					      								    								  
76 LOAD_FAST 2 ( i )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 BINARY_SUBSCR					      								    								  
84 COMPARE_OP 2 ( == )					      								    								  
86 POP_JUMP_IF_FALSE 98					      								    								  
							      								    								  
6 88 LOAD_FAST 2 ( i )					      								    								  
90 LOAD_CONST 1 ( 1 )					      								    								  
92 INPLACE_ADD						      								    								  
94 STORE_FAST 2 ( i )					      								    								  
96 JUMP_ABSOLUTE 56					      								    								  
>> 98 POP_BLOCK						      								    								  
100 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
8 >> 102 LOAD_GLOBAL 2 ( print )			      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 2 ( i )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 2 ( ' ' )				      								    								  
112 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
114 CALL_FUNCTION_KW 2					      								    								  
116 POP_TOP						      								    								  
>> 118 JUMP_ABSOLUTE 18					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY		      FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			    FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			  FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object findSubarraySum at 0x7f33e2644f60 def findSubarraySum ( arr , n ) :				    def findSubarraySum ( arr , 0x70x70x744f60 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_CONST 1 ( 0 )					      	  res = 0						    	res = 0							  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 STORE_FAST 2 ( res )					      	  m = dict ( )						    	while res <= arr :					  alid/FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY.py"
							      	  for i in range ( n ) :				    	    if res <= 0 :					  , line 31	def f_filled ( arr , 0x70x70x744f60
3 4 LOAD_GLOBAL 0 ( dict )				      	      Sum = 0						    		res = 0						  ) :				  ^ SyntaxError: inv
6 CALL_FUNCTION 0					      	      for j in range ( i , n ) :			    	    else :						  alid syntax
8 STORE_FAST 3 ( m )					      		  Sum += arr [ j ]				    		res = 0						  
							      		  m [ Sum ] = m.get ( Sum , 0 ) + 1		    	return res						  
4 10 SETUP_LOOP 72 ( to 84 )				      	  for x in m :						    								  
12 LOAD_GLOBAL 1 ( range )				      	      if m [ x ] == 1 :					    								  
14 LOAD_FAST 1 ( n )					      		  res += x					    								  
16 CALL_FUNCTION 1					      	  return res						    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 60 ( to 82 )				      								    								  
22 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 24 LOAD_CONST 1 ( 0 )					      								    								  
26 STORE_FAST 5 ( Sum )					      								    								  
							      								    								  
6 28 SETUP_LOOP 50 ( to 80 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 LOAD_FAST 1 ( n )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 36 ( to 78 )				      								    								  
42 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 44 LOAD_FAST 5 ( Sum )				      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 INPLACE_ADD						      								    								  
54 STORE_FAST 5 ( Sum )					      								    								  
							      								    								  
8 56 LOAD_FAST 3 ( m )					      								    								  
58 LOAD_METHOD 2 ( get )				      								    								  
60 LOAD_FAST 5 ( Sum )					      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 CALL_METHOD 2					      								    								  
66 LOAD_CONST 2 ( 1 )					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 3 ( m )					      								    								  
72 LOAD_FAST 5 ( Sum )					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 40					      								    								  
>> 78 POP_BLOCK						      								    								  
>> 80 JUMP_ABSOLUTE 20					      								    								  
>> 82 POP_BLOCK						      								    								  
							      								    								  
9 >> 84 SETUP_LOOP 32 ( to 118 )			      								    								  
86 LOAD_FAST 3 ( m )					      								    								  
88 GET_ITER						      								    								  
>> 90 FOR_ITER 24 ( to 116 )				      								    								  
92 STORE_FAST 7 ( x )					      								    								  
							      								    								  
10 94 LOAD_FAST 3 ( m )					      								    								  
96 LOAD_FAST 7 ( x )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 2 ( 1 )					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 90				      								    								  
							      								    								  
11 106 LOAD_FAST 2 ( res )				      								    								  
108 LOAD_FAST 7 ( x )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 2 ( res )				      								    								  
114 JUMP_ABSOLUTE 90					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
12 >> 118 LOAD_FAST 2 ( res )				      								    								  
120 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_PRIME_FACTOR_NUMBER			      FIND_LARGEST_PRIME_FACTOR_NUMBER				    FIND_LARGEST_PRIME_FACTOR_NUMBER				  FIND_LARGEST_PRIME_FACTOR_NUMBER
--							      --							    --								  --
Disassembly of <code object maxPrimeFactors at 0x7f33e26494b0 def maxPrimeFactors ( n ) :				    def maxPrimesition ( n ) :					  failure : #Results: 0, 10
2 0 LOAD_CONST 1 ( - 1 )				      	  maxPrime = - 1					    	maxPrime = - 1						  
2 STORE_FAST 1 ( maxPrime )				      	  while n % 2 == 0 :					    	for i in range ( n // 2 ) :				  
							      	      maxPrime = 2					    	    maxPrime = n - 1					  
3 4 SETUP_LOOP 28 ( to 34 )				      	      n >>= 1						    	    maxPrime = n - 1					  
>> 6 LOAD_FAST 0 ( n )					      	  for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :  	    maxPrime = n - 1					  
8 LOAD_CONST 2 ( 2 )					      	      while n % i == 0 :				    	    maxPrime = n - 1					  
10 BINARY_MODULO					      		  maxPrime = i					    	    maxPrime = n - 1					  
12 LOAD_CONST 3 ( 0 )					      		  n = n / i					    	    maxPrime = n - 1					  
14 COMPARE_OP 2 ( == )					      	  if n > 2 :						    	    maxPrime = n - 1					  
16 POP_JUMP_IF_FALSE 32					      	      maxPrime = n					    	    maxPrime = n - 1					  
							      	  return int ( maxPrime )				    	    maxPrime = n - 1					  
4 18 LOAD_CONST 2 ( 2 )					      								    	    maxPrime = n - 1					  
20 STORE_FAST 1 ( maxPrime )				      								    	    maxPrime = n - 1					  
							      								    	    maxPrime = n - 1					  
5 22 LOAD_FAST 0 ( n )					      								    	    maxPrime = n - 1					  
24 LOAD_CONST 4 ( 1 )					      								    	    maxPrime = 0					  
26 INPLACE_RSHIFT					      								    	    maxPrime = 0					  
28 STORE_FAST 0 ( n )					      								    	    maxPrime = 0					  
30 JUMP_ABSOLUTE 6					      								    	    maxPrime = 0					  
>> 32 POP_BLOCK						      								    	    maxPrime = maxPrime					  
							      								    	    maxPrime = maxPrime					  
6 >> 34 SETUP_LOOP 64 ( to 100 )			      								    	    maxPrime = maxPrime - 1				  
36 LOAD_GLOBAL 0 ( range )				      								    	    maxPrime = maxPrime - 1				  
38 LOAD_CONST 5 ( 3 )					      								    	    maxPrime = maxPrime - 1				  
40 LOAD_GLOBAL 1 ( int )				      								    	    maxPrime = maxPrime - 1				  
42 LOAD_GLOBAL 2 ( math )				      								    	    maxPrime = maxPrime - 1				  
44 LOAD_METHOD 3 ( sqrt )				      								    	    maxPrime = maxPrime - 1				  
46 LOAD_FAST 0 ( n )					      								    	    maxPrime = maxPrime - 1				  
48 CALL_METHOD 1					      								    	    maxPrime = maxPrime - 1				  
50 CALL_FUNCTION 1					      								    	    maxPrime = maxPrime - 1				  
52 LOAD_CONST 4 ( 1 )					      								    	    maxPrime = maxPrime - 1				  
54 BINARY_ADD						      								    	    maxPrime = maxPrime - 1				  
56 LOAD_CONST 2 ( 2 )					      								    	    maxPrime = maxPrime - 1				  
58 CALL_FUNCTION 3					      								    	    maxPrime = maxPrime - 1				  
60 GET_ITER						      								    	    maxPrime = maxPrime - 1				  
>> 62 FOR_ITER 34 ( to 98 )				      								    	    maxPrime = maxPrime - 1				  
64 STORE_FAST 2 ( i )					      								    	    maxPrime = maxPrime - 1				  
							      								    	    maxPrime = maxPrime - 1				  
7 66 SETUP_LOOP 28 ( to 96 )				      								    	    maxPrime = maxPrime - 1				  
>> 68 LOAD_FAST 0 ( n )					      								    	    maxPrime = maxPrime - 1				  
70 LOAD_FAST 2 ( i )					      								    	    maxPrime = maxPrime - 1				  
72 BINARY_MODULO					      								    	    maxPrime = maxPrime - 1				  
74 LOAD_CONST 3 ( 0 )					      								    	    maxPrime = maxPrime - 1				  
76 COMPARE_OP 2 ( == )					      								    	    maxPrime = maxPrime - 1				  
78 POP_JUMP_IF_FALSE 94					      								    	    maxPrime = maxPrime - 1				  
							      								    	    maxPrime = maxPrime - 1				  
8 80 LOAD_FAST 2 ( i )					      								    	    maxPrime - 1					  
82 STORE_FAST 1 ( maxPrime )				      								    	    maxPrime = maxPrime - 1				  
							      								    	    maxPrime = maxPrime - 1				  
9 84 LOAD_FAST 0 ( n )					      								    	    maxPrime = maxPrime - 1				  
86 LOAD_FAST 2 ( i )					      								    	    maxPrime = maxPrime - 1				  
88 BINARY_TRUE_DIVIDE					      								    	    maxPrime = maxPrime - 1				  
90 STORE_FAST 0 ( n )					      								    	    maxPrime = maxPrime - 1				  
92 JUMP_ABSOLUTE 68					      								    	    maxPrime = maxPrime - 1				  
>> 94 POP_BLOCK						      								    	    maxPrime = maxPrime - 1				  
>> 96 JUMP_ABSOLUTE 62					      								    	    maxPrime = maxPrime - 1				  
>> 98 POP_BLOCK						      								    	    maxPrime = maxPrime - 1				  
							      								    	    maxPrime = maxPrime - 1				  
10 >> 100 LOAD_FAST 0 ( n )				      								    	    maxPrime = maxPrime - 1				  
102 LOAD_CONST 2 ( 2 )					      								    	    maxPrime = maxPrime - 1				  
104 COMPARE_OP 4 ( > )					      								    	    maxPrime = maxPrime - 1				  
106 POP_JUMP_IF_FALSE 112				      								    	    maxPrime = 0					  
							      								    	    maxPrime = 0					  
11 108 LOAD_FAST 0 ( n )				      								    	    maxPrime = maxPrime - 1				  
110 STORE_FAST 1 ( maxPrime )				      								    	    maxPrime = maxPrime - 1				  
							      								    	    return maxPrime					  
12 >> 112 LOAD_GLOBAL 1 ( int )				      								    								  
114 LOAD_FAST 1 ( maxPrime )				      								    								  
116 CALL_FUNCTION 1					      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		    SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		  SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
Disassembly of <code object search at 0x7f33e2653ed0, file "< def search ( mat , n , x ) :				    def search ( mat , size = 15 ) :				  error : Traceback (most recent call last):   File
2 0 LOAD_CONST 1 ( 0 )					      	  i = 0							    	i = 0							  "/home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p
2 STORE_FAST 3 ( i )					      	  j = n - 1						    	while i < size :					  024/eval_scripts/dis_sa-python_sa.valid/SEARCH_IN_
							      	  while ( i < n and j >= 0 ) :				    	    j = i - 1						  ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX.py", line 6
3 4 LOAD_FAST 1 ( n )					      	      if ( mat [ i ] [ j ] == x ) :			    	    i += 1						  1, in <module>     if f_filled(*parameters_set) ==
6 LOAD_CONST 2 ( 1 )					      		  print ( "n Found at " , i , ", " , j )	    	    while j >= size :					   f_gold(*parameters_set): TypeError: f_filled() ta
8 BINARY_SUBTRACT					      		  return 1					    		j += 1						  kes from 1 to 2 positional arguments but 3 were gi
10 STORE_FAST 4 ( j )					      	      if ( mat [ i ] [ j ] > x ) :			    		i += 1						  ven
							      		  j -= 1					    		i += 1						  
4 12 SETUP_LOOP 88 ( to 102 )				      	      else :						    		i += 1						  
>> 14 LOAD_FAST 3 ( i )					      		  i += 1					    	    i += 1						  
16 LOAD_FAST 1 ( n )					      	  print ( "Element not found" )				    	return i						  
18 COMPARE_OP 0 ( < )					      	  return 0						    								  
20 POP_JUMP_IF_FALSE 100				      								    								  
22 LOAD_FAST 4 ( j )					      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 COMPARE_OP 5 ( >= )					      								    								  
28 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
5 30 LOAD_FAST 0 ( mat )				      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 4 ( j )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 2 ( x )					      								    								  
42 COMPARE_OP 2 ( == )					      								    								  
44 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
6 46 LOAD_GLOBAL 0 ( print )				      								    								  
48 LOAD_CONST 3 ( 'n Found at ' )			      								    								  
50 LOAD_FAST 3 ( i )					      								    								  
52 LOAD_CONST 4 ( ', ' )				      								    								  
54 LOAD_FAST 4 ( j )					      								    								  
56 CALL_FUNCTION 4					      								    								  
58 POP_TOP						      								    								  
							      								    								  
7 60 LOAD_CONST 2 ( 1 )					      								    								  
62 RETURN_VALUE						      								    								  
							      								    								  
8 >> 64 LOAD_FAST 0 ( mat )				      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 4 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 2 ( x )					      								    								  
76 COMPARE_OP 4 ( > )					      								    								  
78 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
9 80 LOAD_FAST 4 ( j )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 INPLACE_SUBTRACT					      								    								  
86 STORE_FAST 4 ( j )					      								    								  
88 JUMP_ABSOLUTE 14					      								    								  
							      								    								  
11 >> 90 LOAD_FAST 3 ( i )				      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 INPLACE_ADD						      								    								  
96 STORE_FAST 3 ( i )					      								    								  
98 JUMP_ABSOLUTE 14					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
12 >> 102 LOAD_GLOBAL 0 ( print )			      								    								  
104 LOAD_CONST 5 ( 'Element not found' )		      								    								  
106 CALL_FUNCTION 1					      								    								  
108 POP_TOP						      								    								  
							      								    								  
13 110 LOAD_CONST 1 ( 0 )				      								    								  
112 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	      SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	    SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M		  SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M
--							      --							    --								  --
Disassembly of <code object coutSubSeq at 0x7f33e2649a50, fil def coutSubSeq ( A , N , M ) :				    def coutSubSeq ( 0x733333333333333333333333333333333333333333 script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  sum = 0						    								  
2 STORE_FAST 3 ( sum )					      	  ans = 0						    								  
							      	  for i in range ( 0 , N ) :				    								  
3 4 LOAD_CONST 1 ( 0 )					      	      for j in range ( i + 1 , N ) :			    								  
6 STORE_FAST 4 ( ans )					      		  for k in range ( j + 1 , N ) :		    								  
							      		      sum = A [ i ] + A [ j ] + A [ k ]		    								  
4 8 SETUP_LOOP 110 ( to 120 )				      		      if ( sum % M == 0 ) :			    								  
10 LOAD_GLOBAL 0 ( range )				      			  ans = ans + 1				    								  
12 LOAD_CONST 1 ( 0 )					      	  return ans						    								  
14 LOAD_FAST 1 ( N )					      								    								  
16 CALL_FUNCTION 2					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 96 ( to 118 )				      								    								  
22 STORE_FAST 5 ( i )					      								    								  
							      								    								  
5 24 SETUP_LOOP 90 ( to 116 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 5 ( i )					      								    								  
30 LOAD_CONST 2 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 LOAD_FAST 1 ( N )					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 72 ( to 114 )				      								    								  
42 STORE_FAST 6 ( j )					      								    								  
							      								    								  
6 44 SETUP_LOOP 66 ( to 112 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 LOAD_CONST 2 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( N )					      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 48 ( to 110 )				      								    								  
62 STORE_FAST 7 ( k )					      								    								  
							      								    								  
7 64 LOAD_FAST 0 ( A )					      								    								  
66 LOAD_FAST 5 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( A )					      								    								  
72 LOAD_FAST 6 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 0 ( A )					      								    								  
80 LOAD_FAST 7 ( k )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 3 ( sum )					      								    								  
							      								    								  
8 88 LOAD_FAST 3 ( sum )				      								    								  
90 LOAD_FAST 2 ( M )					      								    								  
92 BINARY_MODULO					      								    								  
94 LOAD_CONST 1 ( 0 )					      								    								  
96 COMPARE_OP 2 ( == )					      								    								  
98 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
9 100 LOAD_FAST 4 ( ans )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 STORE_FAST 4 ( ans )				      								    								  
108 JUMP_ABSOLUTE 60					      								    								  
>> 110 POP_BLOCK					      								    								  
>> 112 JUMP_ABSOLUTE 40					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 20					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
10 >> 120 LOAD_FAST 4 ( ans )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		      CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		    CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		  CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE
--							      --							    --								  --
Disassembly of <code object convertOpposite at 0x7f33e2644930 def convertOpposite ( str ) :				    def convertOpposite ( str ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  ln = len ( str )					    	ln = len ( str )					  
2 LOAD_FAST 0 ( str )					      	  for i in range ( ln ) :				    	ln = len ( ln )						  
4 CALL_FUNCTION 1					      	      if str [ i ] >= 'a' and str [ i ] <= 'z' :	    	for i in range ( ln ) :					  
6 STORE_FAST 1 ( ln )					      		  str [ i ] = chr ( ord ( str [ i ] ) - 32 )	    	    if ln [ i ] >= 0 and ln [ i ] >= 0 :		  
							      	      elif str [ i ] >= 'A' and str [ i ] <= 'Z' :	    		ln [ i ] = ln [ i ]				  
3 8 SETUP_LOOP 114 ( to 124 )				      		  str [ i ] = chr ( ord ( str [ i ] ) + 32 )	    	return ln						  
10 LOAD_GLOBAL 1 ( range )				      								    								  
12 LOAD_FAST 1 ( ln )					      								    								  
14 CALL_FUNCTION 1					      								    								  
16 GET_ITER						      								    								  
>> 18 FOR_ITER 102 ( to 122 )				      								    								  
20 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 22 LOAD_FAST 0 ( str )				      								    								  
24 LOAD_FAST 2 ( i )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 LOAD_CONST 1 ( 'a' )					      								    								  
30 COMPARE_OP 5 ( >= )					      								    								  
32 POP_JUMP_IF_FALSE 72					      								    								  
34 LOAD_FAST 0 ( str )					      								    								  
36 LOAD_FAST 2 ( i )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 2 ( 'z' )					      								    								  
42 COMPARE_OP 1 ( <= )					      								    								  
44 POP_JUMP_IF_FALSE 72					      								    								  
							      								    								  
5 46 LOAD_GLOBAL 2 ( chr )				      								    								  
48 LOAD_GLOBAL 3 ( ord )				      								    								  
50 LOAD_FAST 0 ( str )					      								    								  
52 LOAD_FAST 2 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 CALL_FUNCTION 1					      								    								  
58 LOAD_CONST 3 ( 32 )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_FAST 0 ( str )					      								    								  
66 LOAD_FAST 2 ( i )					      								    								  
68 STORE_SUBSCR						      								    								  
70 JUMP_ABSOLUTE 18					      								    								  
							      								    								  
6 >> 72 LOAD_FAST 0 ( str )				      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 4 ( 'A' )					      								    								  
80 COMPARE_OP 5 ( >= )					      								    								  
82 POP_JUMP_IF_FALSE 18					      								    								  
84 LOAD_FAST 0 ( str )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_CONST 5 ( 'Z' )					      								    								  
92 COMPARE_OP 1 ( <= )					      								    								  
94 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
7 96 LOAD_GLOBAL 2 ( chr )				      								    								  
98 LOAD_GLOBAL 3 ( ord )				      								    								  
100 LOAD_FAST 0 ( str )					      								    								  
102 LOAD_FAST 2 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 LOAD_CONST 3 ( 32 )					      								    								  
110 BINARY_ADD						      								    								  
112 CALL_FUNCTION 1					      								    								  
114 LOAD_FAST 0 ( str )					      								    								  
116 LOAD_FAST 2 ( i )					      								    								  
118 STORE_SUBSCR					      								    								  
120 JUMP_ABSOLUTE 18					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			      SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			    SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			  SMALLEST_SUBSET_SUM_GREATER_ELEMENTS
--							      --							    --								  --
Disassembly of <code object minElements at 0x7f33e2644930, fi def minElements ( arr , n ) :				    def minElements ( arr , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  halfSum = 0						    	rt = 0							  
2 STORE_FAST 2 ( halfSum )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      halfSum = halfSum + arr [ i ]			    	    rt [ i ] = ( n - 1 )				  
3 4 SETUP_LOOP 28 ( to 34 )				      	  halfSum = int ( halfSum / 2 )				    	    rt [ i ] = ( n - 1 ) * ( n - 1 )			  
6 LOAD_GLOBAL 0 ( range )				      	  arr.sort ( reverse = True )				    	    rt [ i ] = ( n - 1 ) * ( n - 1 )			  
8 LOAD_FAST 1 ( n )					      	  res = 0						    	return rt						  
10 CALL_FUNCTION 1					      	  curr_sum = 0						    								  
12 GET_ITER						      	  for i in range ( n ) :				    								  
>> 14 FOR_ITER 16 ( to 32 )				      	      curr_sum += arr [ i ]				    								  
16 STORE_FAST 3 ( i )					      	      res += 1						    								  
							      	      if curr_sum > halfSum :				    								  
4 18 LOAD_FAST 2 ( halfSum )				      		  return res					    								  
20 LOAD_FAST 0 ( arr )					      	  return res						    								  
22 LOAD_FAST 3 ( i )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 BINARY_ADD						      								    								  
28 STORE_FAST 2 ( halfSum )				      								    								  
30 JUMP_ABSOLUTE 14					      								    								  
>> 32 POP_BLOCK						      								    								  
							      								    								  
5 >> 34 LOAD_GLOBAL 1 ( int )				      								    								  
36 LOAD_FAST 2 ( halfSum )				      								    								  
38 LOAD_CONST 2 ( 2 )					      								    								  
40 BINARY_TRUE_DIVIDE					      								    								  
42 CALL_FUNCTION 1					      								    								  
44 STORE_FAST 2 ( halfSum )				      								    								  
							      								    								  
6 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_ATTR 2 ( sort )					      								    								  
50 LOAD_CONST 3 ( True )				      								    								  
52 LOAD_CONST 4 ( ( 'reverse' , ) )			      								    								  
54 CALL_FUNCTION_KW 1					      								    								  
56 POP_TOP						      								    								  
							      								    								  
7 58 LOAD_CONST 1 ( 0 )					      								    								  
60 STORE_FAST 4 ( res )					      								    								  
							      								    								  
8 62 LOAD_CONST 1 ( 0 )					      								    								  
64 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
9 66 SETUP_LOOP 48 ( to 116 )				      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_FAST 1 ( n )					      								    								  
72 CALL_FUNCTION 1					      								    								  
74 GET_ITER						      								    								  
>> 76 FOR_ITER 36 ( to 114 )				      								    								  
78 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 80 LOAD_FAST 5 ( curr_sum )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 INPLACE_ADD						      								    								  
90 STORE_FAST 5 ( curr_sum )				      								    								  
							      								    								  
11 92 LOAD_FAST 4 ( res )				      								    								  
94 LOAD_CONST 5 ( 1 )					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 4 ( res )					      								    								  
							      								    								  
12 100 LOAD_FAST 5 ( curr_sum )				      								    								  
102 LOAD_FAST 2 ( halfSum )				      								    								  
104 COMPARE_OP 4 ( > )					      								    								  
106 POP_JUMP_IF_FALSE 76				      								    								  
							      								    								  
13 108 LOAD_FAST 4 ( res )				      								    								  
110 RETURN_VALUE					      								    								  
112 JUMP_ABSOLUTE 76					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
14 >> 116 LOAD_FAST 4 ( res )				      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			      PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			    PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			  PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
Disassembly of <code object sequence at 0x7f33e2653f60, file  def sequence ( n ) :					    def sequence ( sequence , l = 1 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  f = [ 0 , 1 , 1 ]					    	f = 0							  
2 LOAD_CONST 2 ( 1 )					      	  print ( f [ 1 ] , end = " " ) ,			    	while l :						  
4 LOAD_CONST 2 ( 1 )					      	  print ( f [ 2 ] , end = " " ) ,			    	    f = l [ 1 : ]					  
6 BUILD_LIST 3						      	  for i in range ( 3 , n + 1 ) :			    	    if l [ l ] == l :					  
8 STORE_FAST 1 ( f )					      	      f.append ( f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  		f += 1						  
							      	      print ( f [ i ] , end = " " ) ,			    	return f						  
3 10 LOAD_GLOBAL 0 ( print )				      								    								  
12 LOAD_FAST 1 ( f )					      								    								  
14 LOAD_CONST 2 ( 1 )					      								    								  
16 BINARY_SUBSCR					      								    								  
18 LOAD_CONST 3 ( ' ' )					      								    								  
20 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
22 CALL_FUNCTION_KW 2					      								    								  
24 BUILD_TUPLE 1					      								    								  
26 POP_TOP						      								    								  
							      								    								  
4 28 LOAD_GLOBAL 0 ( print )				      								    								  
30 LOAD_FAST 1 ( f )					      								    								  
32 LOAD_CONST 5 ( 2 )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( ' ' )					      								    								  
38 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
40 CALL_FUNCTION_KW 2					      								    								  
42 BUILD_TUPLE 1					      								    								  
44 POP_TOP						      								    								  
							      								    								  
5 46 SETUP_LOOP 82 ( to 130 )				      								    								  
48 LOAD_GLOBAL 1 ( range )				      								    								  
50 LOAD_CONST 6 ( 3 )					      								    								  
52 LOAD_FAST 0 ( n )					      								    								  
54 LOAD_CONST 2 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 64 ( to 128 )				      								    								  
64 STORE_FAST 2 ( i )					      								    								  
							      								    								  
6 66 LOAD_FAST 1 ( f )					      								    								  
68 LOAD_METHOD 2 ( append )				      								    								  
70 LOAD_FAST 1 ( f )					      								    								  
72 LOAD_FAST 1 ( f )					      								    								  
74 LOAD_FAST 2 ( i )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 BINARY_SUBSCR					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 1 ( f )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 LOAD_FAST 1 ( f )					      								    								  
90 LOAD_FAST 2 ( i )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 BINARY_SUBSCR					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_ADD						      								    								  
104 CALL_METHOD 1					      								    								  
106 POP_TOP						      								    								  
							      								    								  
7 108 LOAD_GLOBAL 0 ( print )				      								    								  
110 LOAD_FAST 1 ( f )					      								    								  
112 LOAD_FAST 2 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_CONST 3 ( ' ' )				      								    								  
118 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 BUILD_TUPLE 1					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 62					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE
--							      --							    --								  --
Disassembly of <code object eggDrop at 0x7f33e2653f60, file " def eggDrop ( n , k ) :					    def eggDrop ( n , k , m , k = 0 , k = 1 , k = 0 , k = 0 , k = script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k == 1 or k == 0 ) :				    								  
2 LOAD_CONST 1 ( 1 )					      	      return k						    								  
4 COMPARE_OP 2 ( == )					      	  if ( n == 1 ) :					    								  
6 POP_JUMP_IF_TRUE 16					      	      return k						    								  
8 LOAD_FAST 1 ( k )					      	  min = sys.maxsize					    								  
10 LOAD_CONST 2 ( 0 )					      	  for x in range ( 1 , k + 1 ) :			    								  
12 COMPARE_OP 2 ( == )					      	      res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , 								  
14 POP_JUMP_IF_FALSE 20					      	      if ( res < min ) :				    								  
							      		  min = res					    								  
3 >> 16 LOAD_FAST 1 ( k )				      	  return min + 1					    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( n )				      								    								  
22 LOAD_CONST 1 ( 1 )					      								    								  
24 COMPARE_OP 2 ( == )					      								    								  
26 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 28 LOAD_FAST 1 ( k )					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( sys )				      								    								  
34 LOAD_ATTR 1 ( maxsize )				      								    								  
36 STORE_FAST 2 ( min )					      								    								  
							      								    								  
7 38 SETUP_LOOP 68 ( to 108 )				      								    								  
40 LOAD_GLOBAL 2 ( range )				      								    								  
42 LOAD_CONST 1 ( 1 )					      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 CALL_FUNCTION 2					      								    								  
52 GET_ITER						      								    								  
>> 54 FOR_ITER 50 ( to 106 )				      								    								  
56 STORE_FAST 3 ( x )					      								    								  
							      								    								  
8 58 LOAD_GLOBAL 3 ( max )				      								    								  
60 LOAD_GLOBAL 4 ( eggDrop )				      								    								  
62 LOAD_FAST 0 ( n )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_SUBTRACT					      								    								  
68 LOAD_FAST 3 ( x )					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 CALL_FUNCTION 2					      								    								  
76 LOAD_GLOBAL 4 ( eggDrop )				      								    								  
78 LOAD_FAST 0 ( n )					      								    								  
80 LOAD_FAST 1 ( k )					      								    								  
82 LOAD_FAST 3 ( x )					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 CALL_FUNCTION 2					      								    								  
88 CALL_FUNCTION 2					      								    								  
90 STORE_FAST 4 ( res )					      								    								  
							      								    								  
9 92 LOAD_FAST 4 ( res )				      								    								  
94 LOAD_FAST 2 ( min )					      								    								  
96 COMPARE_OP 0 ( < )					      								    								  
98 POP_JUMP_IF_FALSE 54					      								    								  
							      								    								  
10 100 LOAD_FAST 4 ( res )				      								    								  
102 STORE_FAST 2 ( min )				      								    								  
104 JUMP_ABSOLUTE 54					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
11 >> 108 LOAD_FAST 2 ( min )				      								    								  
110 LOAD_CONST 1 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS     RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	    RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	  RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS
--							      --							    --								  --
Disassembly of <code object countSubstrs at 0x7f33e2644f60, f def countSubstrs ( str , i , j , n ) :			    def countSubstrs ( str , i ) :				  script_not_found : None
2 0 LOAD_FAST 3 ( n )					      	  if ( n == 1 ) :					    	if i == 1 :						  
2 LOAD_CONST 1 ( 1 )					      	      return 1						    	    return 1						  
4 COMPARE_OP 2 ( == )					      	  if ( n <= 0 ) :					    	if i <= 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return 0						    	    return 0						  
							      	  res = ( countSubstrs ( str , i + 1 , j , n - 1 ) + countS 	if i <= 0 :						  
3 8 LOAD_CONST 1 ( 1 )					      	  if ( str [ i ] == str [ j ] ) :			    	    return 0						  
10 RETURN_VALUE						      	      res += 1						    	if i <= 0 :						  
							      	  return res						    	    return 0						  
4 >> 12 LOAD_FAST 3 ( n )				      								    	if i <= 0 :						  
14 LOAD_CONST 2 ( 0 )					      								    	    return 0						  
16 COMPARE_OP 1 ( <= )					      								    	i = len ( str ( str ) )					  
18 POP_JUMP_IF_FALSE 24					      								    	j = len ( str )						  
							      								    	j = len ( str )						  
5 20 LOAD_CONST 2 ( 0 )					      								    	j = len ( str )						  
22 RETURN_VALUE						      								    	j = len ( str )						  
							      								    	j = len ( str )						  
6 >> 24 LOAD_GLOBAL 0 ( countSubstrs )			      								    	j = len ( str )						  
26 LOAD_FAST 0 ( str )					      								    	j = len ( str )						  
28 LOAD_FAST 1 ( i )					      								    	j = len ( str )						  
30 LOAD_CONST 1 ( 1 )					      								    	j = len ( str )						  
32 BINARY_ADD						      								    	j = len ( str )						  
34 LOAD_FAST 2 ( j )					      								    	j = len ( str )						  
36 LOAD_FAST 3 ( n )					      								    	j = len ( str )						  
38 LOAD_CONST 1 ( 1 )					      								    	j = len ( str )						  
40 BINARY_SUBTRACT					      								    	j = len ( str )						  
42 CALL_FUNCTION 4					      								    	j = len ( str )						  
44 LOAD_GLOBAL 0 ( countSubstrs )			      								    	j = len ( str )						  
46 LOAD_FAST 0 ( str )					      								    	j = len ( str )						  
48 LOAD_FAST 1 ( i )					      								    	j = len ( str )						  
50 LOAD_FAST 2 ( j )					      								    	j = len ( str )						  
52 LOAD_CONST 1 ( 1 )					      								    	j = len ( str )						  
54 BINARY_SUBTRACT					      								    	j = len ( str )						  
56 LOAD_FAST 3 ( n )					      								    	j = len ( str )						  
58 LOAD_CONST 1 ( 1 )					      								    	j = len ( str )						  
60 BINARY_SUBTRACT					      								    	j = len ( str )						  
62 CALL_FUNCTION 4					      								    	j = len ( str )						  
64 BINARY_ADD						      								    	j = len ( str )						  
66 LOAD_GLOBAL 0 ( countSubstrs )			      								    	j = len ( j )						  
68 LOAD_FAST 0 ( str )					      								    	j = len ( str )						  
70 LOAD_FAST 1 ( i )					      								    	j = len ( str )						  
72 LOAD_CONST 1 ( 1 )					      								    	j = len ( str )						  
74 BINARY_ADD						      								    	j = len ( str )						  
76 LOAD_FAST 2 ( j )					      								    	j = len ( str )						  
78 LOAD_CONST 1 ( 1 )					      								    	j = len ( str )						  
80 BINARY_SUBTRACT					      								    	j = len ( str )						  
82 LOAD_FAST 3 ( n )					      								    	j = len ( str )						  
84 LOAD_CONST 3 ( 2 )					      								    	j = len ( str )						  
86 BINARY_SUBTRACT					      								    	j = len ( str )						  
88 CALL_FUNCTION 4					      								    	j = len ( str )						  
90 BINARY_SUBTRACT					      								    	j = len ( str )						  
92 STORE_FAST 4 ( res )					      								    	j = len ( str )						  
							      								    	j = len ( str )						  
7 94 LOAD_FAST 0 ( str )				      								    	j = len ( str )						  
96 LOAD_FAST 1 ( i )					      								    	j = len ( str )						  
98 BINARY_SUBSCR					      								    	j = len ( str )						  
100 LOAD_FAST 0 ( str )					      								    	j = len ( str )						  
102 LOAD_FAST 2 ( j )					      								    	j = len ( str )						  
104 BINARY_SUBSCR					      								    	j = len ( str )						  
106 COMPARE_OP 2 ( == )					      								    	j = len ( str )						  
108 POP_JUMP_IF_FALSE 118				      								    	j = len ( str ( str ) )					  
							      								    	j = len ( str ) )					  
8 110 LOAD_FAST 4 ( res )				      								    	j = len ( str )						  
112 LOAD_CONST 1 ( 1 )					      								    	j = len ( str )						  
114 INPLACE_ADD						      								    	j = len ( str )						  
116 STORE_FAST 4 ( res )				      								    	j = len ( str ( str ) )					  
							      								    	j = len ( j )						  
9 >> 118 LOAD_FAST 4 ( res )				      								    	j = len ( str ( str ( i ) ) )				  
120 RETURN_VALUE NEW_LINE				      								    	j = len ( j )						  
							      								    	j = len ( j )						  
							      								    	return j						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	      COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	    COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		  COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES
--							      --							    --								  --
Disassembly of <code object countarray at 0x7f33e2653f60, fil def countarray ( n , k , x ) :				    def countarray ( n , l , l , l , l ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  dp = list ( )						    	dp = list ( )						  
2 CALL_FUNCTION 0					      	  dp.append ( 0 )					    	dp.append ( l )						  
4 STORE_FAST 3 ( dp )					      	  dp.append ( 1 )					    	l.append ( l )						  
							      	  i = 2							    	l.append ( l )						  
3 6 LOAD_FAST 3 ( dp )					      	  while i < n :						    	l.append ( l )						  
8 LOAD_METHOD 1 ( append )				      	      dp.append ( ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp 	l.append ( l )						  
10 LOAD_CONST 1 ( 0 )					      	      i = i + 1						    	l.append ( l )						  
12 CALL_METHOD 1					      	  return ( ( k - 1 ) * dp [ n - 2 ] if x == 1 else dp [ n - 	l.append ( l )						  
14 POP_TOP						      								    	l.append ( l )						  
							      								    	l.append ( l )						  
4 16 LOAD_FAST 3 ( dp )					      								    	l.append ( l )						  
18 LOAD_METHOD 1 ( append )				      								    	l.append ( l )						  
20 LOAD_CONST 2 ( 1 )					      								    	l.append ( l )						  
22 CALL_METHOD 1					      								    	l.append ( l )						  
24 POP_TOP						      								    	l.append ( l )						  
							      								    	l.append ( l )						  
5 26 LOAD_CONST 3 ( 2 )					      								    	l.append ( l )						  
28 STORE_FAST 4 ( i )					      								    	l.append ( l )						  
							      								    	l.append ( l )						  
6 30 SETUP_LOOP 66 ( to 98 )				      								    	l.append ( l )						  
>> 32 LOAD_FAST 4 ( i )					      								    	l.append ( l )						  
34 LOAD_FAST 0 ( n )					      								    	l.append ( l )						  
36 COMPARE_OP 0 ( < )					      								    	l.append ( l )						  
38 POP_JUMP_IF_FALSE 96					      								    	l.append ( l )						  
							      								    	l.append ( l )						  
7 40 LOAD_FAST 3 ( dp )					      								    	l.append ( l )						  
42 LOAD_METHOD 1 ( append )				      								    	l.append ( l )						  
44 LOAD_FAST 1 ( k )					      								    	l.append ( l )						  
46 LOAD_CONST 3 ( 2 )					      								    	l.append ( l )						  
48 BINARY_SUBTRACT					      								    	l.append ( l )						  
50 LOAD_FAST 3 ( dp )					      								    	l.append ( l )						  
52 LOAD_FAST 4 ( i )					      								    	l.append ( l )						  
54 LOAD_CONST 2 ( 1 )					      								    	l.append ( l )						  
56 BINARY_SUBTRACT					      								    	l.append ( l )						  
58 BINARY_SUBSCR					      								    	l.append ( l )						  
60 BINARY_MULTIPLY					      								    	l.append ( l )						  
62 LOAD_FAST 1 ( k )					      								    	l.append ( l )						  
64 LOAD_CONST 2 ( 1 )					      								    	l.append ( l )						  
66 BINARY_SUBTRACT					      								    	l.append ( l )						  
68 LOAD_FAST 3 ( dp )					      								    	l.append ( l )						  
70 LOAD_FAST 4 ( i )					      								    	l.append ( l )						  
72 LOAD_CONST 3 ( 2 )					      								    	l.append ( l )						  
74 BINARY_SUBTRACT					      								    	l.append ( l )						  
76 BINARY_SUBSCR					      								    	l.append ( l )						  
78 BINARY_MULTIPLY					      								    	l.append ( l )						  
80 BINARY_ADD						      								    	l.append ( l )						  
82 CALL_METHOD 1					      								    	l.append ( l )						  
84 POP_TOP						      								    	l.append ( l )						  
							      								    	l.append ( l )						  
8 86 LOAD_FAST 4 ( i )					      								    	l.append ( l )						  
88 LOAD_CONST 2 ( 1 )					      								    	l.append ( l )						  
90 BINARY_ADD						      								    	l.append ( l )						  
92 STORE_FAST 4 ( i )					      								    	l.append ( l )						  
94 JUMP_ABSOLUTE 32					      								    	l.append ( l )						  
>> 96 POP_BLOCK						      								    	l.append ( l )						  
							      								    	l.append ( l )						  
9 >> 98 LOAD_FAST 2 ( x )				      								    	l.append ( l )						  
100 LOAD_CONST 2 ( 1 )					      								    	l.append ( l )						  
102 COMPARE_OP 2 ( == )					      								    	l.append ( l )						  
104 POP_JUMP_IF_FALSE 126				      								    	l.append ( l )						  
106 LOAD_FAST 1 ( k )					      								    	l.append ( l )						  
108 LOAD_CONST 2 ( 1 )					      								    	l.append ( l )						  
110 BINARY_SUBTRACT					      								    	l.append ( l )						  
112 LOAD_FAST 3 ( dp )					      								    	l.append ( l )						  
114 LOAD_FAST 0 ( n )					      								    	l.append ( l )						  
116 LOAD_CONST 3 ( 2 )					      								    	l.append ( l )						  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_SUBSCR					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 RETURN_VALUE					      								    								  
>> 126 LOAD_FAST 3 ( dp )				      								    								  
128 LOAD_FAST 0 ( n )					      								    								  
130 LOAD_CONST 2 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 BINARY_SUBSCR					      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1
--							      --							    --								  --
Disassembly of <code object isScalarMatrix at 0x7f33e2644f60, def isScalarMatrix ( mat ) :				    def isScalarMatrix ( mat , size ) :				  script_not_found : None
2 0 SETUP_LOOP 66 ( to 68 )				      	  for i in range ( 0 , N ) :				    	for i in range ( 0 , N ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( 0 , N ) :			    	    for j in range ( N ) :				  
4 LOAD_CONST 1 ( 0 )					      		  if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  		if i != size :					  
6 LOAD_GLOBAL 1 ( N )					      		      return False				    		    break					  
8 CALL_FUNCTION 2					      	  for i in range ( 0 , N - 1 ) :			    	return mat						  
10 GET_ITER						      	      if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) :   								  
>> 12 FOR_ITER 52 ( to 66 )				      		  return False					    								  
14 STORE_FAST 1 ( i )					      	  return True						    								  
							      								    								  
3 16 SETUP_LOOP 46 ( to 64 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 1 ( 0 )					      								    								  
22 LOAD_GLOBAL 1 ( N )					      								    								  
24 CALL_FUNCTION 2					      								    								  
26 GET_ITER						      								    								  
>> 28 FOR_ITER 32 ( to 62 )				      								    								  
30 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 32 LOAD_FAST 1 ( i )					      								    								  
34 LOAD_FAST 2 ( j )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 28					      								    								  
40 LOAD_FAST 0 ( mat )					      								    								  
42 LOAD_FAST 1 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 2 ( j )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 LOAD_CONST 1 ( 0 )					      								    								  
52 COMPARE_OP 3 ( != )					      								    								  
54 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
5 56 LOAD_CONST 2 ( False )				      								    								  
58 RETURN_VALUE						      								    								  
60 JUMP_ABSOLUTE 28					      								    								  
>> 62 POP_BLOCK						      								    								  
>> 64 JUMP_ABSOLUTE 12					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 SETUP_LOOP 58 ( to 128 )			      								    								  
70 LOAD_GLOBAL 0 ( range )				      								    								  
72 LOAD_CONST 1 ( 0 )					      								    								  
74 LOAD_GLOBAL 1 ( N )					      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 40 ( to 126 )				      								    								  
86 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 88 LOAD_FAST 0 ( mat )				      								    								  
90 LOAD_FAST 1 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 1 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( mat )					      								    								  
100 LOAD_FAST 1 ( i )					      								    								  
102 LOAD_CONST 3 ( 1 )					      								    								  
104 BINARY_ADD						      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 1 ( i )					      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 BINARY_SUBSCR					      								    								  
116 COMPARE_OP 3 ( != )					      								    								  
118 POP_JUMP_IF_FALSE 84				      								    								  
							      								    								  
8 120 LOAD_CONST 2 ( False )				      								    								  
122 RETURN_VALUE					      								    								  
124 JUMP_ABSOLUTE 84					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
9 >> 128 LOAD_CONST 4 ( True )				      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE     REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	    REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	  REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE
--							      --							    --								  --
Disassembly of <code object translate at 0x7f33e2653ed0, file def translate ( st ) :					    def translate ( st , size = 0 , size = None , size = None ) : error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 122 ( to 124 )				      	  for i in range ( 1 , len ( st ) ) :			    	for i in range ( size ) :				  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( range )				      	      if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :	    	    if size [ i ] == size :				  alid/REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING
4 LOAD_CONST 1 ( 1 )					      		  st [ i - 1 ] = 'C'				    		return size					  _EXTRA_SPACE.py", line 27	def f_filled ( st ,
6 LOAD_GLOBAL 1 ( len )					      		  for j in range ( i , len ( st ) - 1 ) :	    	return ''.join ( [ 'A' , 'B' , 'B' , size ] )		  size = 0 , size = None , size = None ) :     ^ Syn
8 LOAD_FAST 0 ( st )					      		      st [ j ] = st [ j + 1 ]			    								  taxError: duplicate argument 'size' in function de
10 CALL_FUNCTION 1					      		  st [ len ( st ) - 1 ] = ' '			    								  finition
12 CALL_FUNCTION 2					      	  return						    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 104 ( to 122 )				      								    								  
18 STORE_FAST 1 ( i )					      								    								  
							      								    								  
3 20 LOAD_FAST 0 ( st )					      								    								  
22 LOAD_FAST 1 ( i )					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 2 ( 'A' )					      								    								  
32 COMPARE_OP 2 ( == )					      								    								  
34 POP_JUMP_IF_FALSE 16					      								    								  
36 LOAD_FAST 0 ( st )					      								    								  
38 LOAD_FAST 1 ( i )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_CONST 3 ( 'B' )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
4 48 LOAD_CONST 4 ( 'C' )				      								    								  
50 LOAD_FAST 0 ( st )					      								    								  
52 LOAD_FAST 1 ( i )					      								    								  
54 LOAD_CONST 1 ( 1 )					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_SUBSCR						      								    								  
							      								    								  
5 60 SETUP_LOOP 42 ( to 104 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_FAST 1 ( i )					      								    								  
66 LOAD_GLOBAL 1 ( len )				      								    								  
68 LOAD_FAST 0 ( st )					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 CALL_FUNCTION 2					      								    								  
78 GET_ITER						      								    								  
>> 80 FOR_ITER 20 ( to 102 )				      								    								  
82 STORE_FAST 2 ( j )					      								    								  
							      								    								  
6 84 LOAD_FAST 0 ( st )					      								    								  
86 LOAD_FAST 2 ( j )					      								    								  
88 LOAD_CONST 1 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 0 ( st )					      								    								  
96 LOAD_FAST 2 ( j )					      								    								  
98 STORE_SUBSCR						      								    								  
100 JUMP_ABSOLUTE 80					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
7 >> 104 LOAD_CONST 5 ( ' ' )				      								    								  
106 LOAD_FAST 0 ( st )					      								    								  
108 LOAD_GLOBAL 1 ( len )				      								    								  
110 LOAD_FAST 0 ( st )					      								    								  
112 CALL_FUNCTION 1					      								    								  
114 LOAD_CONST 1 ( 1 )					      								    								  
116 BINARY_SUBTRACT					      								    								  
118 STORE_SUBSCR					      								    								  
120 JUMP_ABSOLUTE 16					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
8 >> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			      NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			    NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			  NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS
--							      --							    --								  --
Disassembly of <code object numberOfPermWithKInversion at 0x7 def numberOfPermWithKInversion ( N , K ) :		    def numberOfPermWithKInInInversion ( N ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( N )					      	  if ( N == 0 ) : return 0				    	if N == 0 :						  
2 LOAD_CONST 1 ( 0 )					      	  if ( K == 0 ) : return 1				    	    return 0						  
4 COMPARE_OP 2 ( == )					      	  if ( memo [ N ] [ K ] != 0 ) :			    	if N == 0 :						  
6 POP_JUMP_IF_FALSE 12					      	      return memo [ N ] [ K ]				    	    return 0						  
8 LOAD_CONST 1 ( 0 )					      	  sum = 0						    	if N == 0 :						  
10 RETURN_VALUE						      	  for i in range ( K + 1 ) :				    	    return 0						  
							      	      if ( i <= N - 1 ) :				    	if N == 1 :						  
3 >> 12 LOAD_FAST 1 ( K )				      		  sum += numberOfPermWithKInversion ( N - 1 , K - i 	    return 0						  
14 LOAD_CONST 1 ( 0 )					      	  memo [ N ] [ K ] = sum				    	if N == 1 :						  
16 COMPARE_OP 2 ( == )					      	  return sum						    	    return 0						  
18 POP_JUMP_IF_FALSE 24					      								    	if N == 1 :						  
20 LOAD_CONST 2 ( 1 )					      								    	    return 0						  
22 RETURN_VALUE						      								    	if N == 1 :						  
							      								    	    return 0						  
4 >> 24 LOAD_GLOBAL 0 ( memo )				      								    	if N == 1 :						  
26 LOAD_FAST 0 ( N )					      								    	    return 0						  
28 BINARY_SUBSCR					      								    	else :							  
30 LOAD_FAST 1 ( K )					      								    	    return 0						  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 40 LOAD_GLOBAL 0 ( memo )				      								    								  
42 LOAD_FAST 0 ( N )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 1 ( K )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 RETURN_VALUE						      								    								  
							      								    								  
6 >> 52 LOAD_CONST 1 ( 0 )				      								    								  
54 STORE_FAST 2 ( sum )					      								    								  
							      								    								  
7 56 SETUP_LOOP 54 ( to 112 )				      								    								  
58 LOAD_GLOBAL 1 ( range )				      								    								  
60 LOAD_FAST 1 ( K )					      								    								  
62 LOAD_CONST 2 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 1					      								    								  
68 GET_ITER						      								    								  
>> 70 FOR_ITER 38 ( to 110 )				      								    								  
72 STORE_FAST 3 ( i )					      								    								  
							      								    								  
8 74 LOAD_FAST 3 ( i )					      								    								  
76 LOAD_FAST 0 ( N )					      								    								  
78 LOAD_CONST 2 ( 1 )					      								    								  
80 BINARY_SUBTRACT					      								    								  
82 COMPARE_OP 1 ( <= )					      								    								  
84 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
9 86 LOAD_FAST 2 ( sum )				      								    								  
88 LOAD_GLOBAL 2 ( numberOfPermWithKInversion )		      								    								  
90 LOAD_FAST 0 ( N )					      								    								  
92 LOAD_CONST 2 ( 1 )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 LOAD_FAST 1 ( K )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 CALL_FUNCTION 2					      								    								  
104 INPLACE_ADD						      								    								  
106 STORE_FAST 2 ( sum )				      								    								  
108 JUMP_ABSOLUTE 70					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
10 >> 112 LOAD_FAST 2 ( sum )				      								    								  
114 LOAD_GLOBAL 0 ( memo )				      								    								  
116 LOAD_FAST 0 ( N )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 1 ( K )					      								    								  
122 STORE_SUBSCR					      								    								  
							      								    								  
11 124 LOAD_FAST 2 ( sum )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS
--							      --							    --								  --
Disassembly of <code object printDistinct at 0x7f33e2649a50,  def printDistinct ( str ) :				    def printDistinct ( str ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * NO_OF_CHARS				    	count = 0						  
2 BUILD_LIST 1						      	  for i in range ( len ( str ) ) :			    	count = 0						  
4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				      	      if ( str [ i ] != ' ' ) :				    	count += 1						  
6 BINARY_MULTIPLY					      		  count [ ord ( str [ i ] ) ] += 1		    	for i in range ( len ( str ) ) :			  
8 STORE_FAST 1 ( count )				      	  n = i							    	    count += 1						  
							      	  for i in range ( n ) :				    	    count += 1						  
3 10 SETUP_LOOP 56 ( to 68 )				      	      if ( count [ ord ( str [ i ] ) ] == 1 ) :		    	    count += 1						  
12 LOAD_GLOBAL 1 ( range )				      		  print ( str [ i ] , end = "" )		    	    count += 1						  
14 LOAD_GLOBAL 2 ( len )				      								    	count += 1						  
16 LOAD_FAST 0 ( str )					      								    return count						  
18 CALL_FUNCTION 1					      								    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 40 ( to 66 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 LOAD_FAST 0 ( str )				      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 2 ( ' ' )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
5 40 LOAD_FAST 1 ( count )				      								    								  
42 LOAD_GLOBAL 3 ( ord )				      								    								  
44 LOAD_FAST 0 ( str )					      								    								  
46 LOAD_FAST 2 ( i )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 CALL_FUNCTION 1					      								    								  
52 DUP_TOP_TWO						      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 INPLACE_ADD						      								    								  
60 ROT_THREE						      								    								  
62 STORE_SUBSCR						      								    								  
64 JUMP_ABSOLUTE 24					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
6 >> 68 LOAD_FAST 2 ( i )				      								    								  
70 STORE_FAST 3 ( n )					      								    								  
							      								    								  
7 72 SETUP_LOOP 52 ( to 126 )				      								    								  
74 LOAD_GLOBAL 1 ( range )				      								    								  
76 LOAD_FAST 3 ( n )					      								    								  
78 CALL_FUNCTION 1					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 40 ( to 124 )				      								    								  
84 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 86 LOAD_FAST 1 ( count )				      								    								  
88 LOAD_GLOBAL 3 ( ord )				      								    								  
90 LOAD_FAST 0 ( str )					      								    								  
92 LOAD_FAST 2 ( i )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 3 ( 1 )					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 82				      								    								  
							      								    								  
9 106 LOAD_GLOBAL 4 ( print )				      								    								  
108 LOAD_FAST 0 ( str )					      								    								  
110 LOAD_FAST 2 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_CONST 4 ( '' )					      								    								  
116 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
118 CALL_FUNCTION_KW 2					      								    								  
120 POP_TOP						      								    								  
122 JUMP_ABSOLUTE 82					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 LOAD_CONST 0 ( None )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BRESENHAMS_LINE_GENERATION_ALGORITHM			      BRESENHAMS_LINE_GENERATION_ALGORITHM			    BRESENHAMS_LINE_GENERATION_ALGORITHM			  BRESENHAMS_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
Disassembly of <code object bresenham at 0x7f33e26494b0, file def bresenham ( x1 , y1 , x2 , y2 ) :			    def bresenham ( x1 , y1 , z1 , x2 , y2 , z2 ) :		  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  m_new = 2 * ( y2 - y1 )				    	m_new = ( 2 * x1 - y1 , z1 - x2 , y2 - z2 )		  
2 LOAD_FAST 3 ( y2 )					      	  slope_error_new = m_new - ( x2 - x1 )			    	m_new = ( - 1 * x1 - y1 , z1 - x2 - y2 , z2 - 1 )	  
4 LOAD_FAST 1 ( y1 )					      	  y = y1						    	m_new = ( - 1 * x1 - y1 , z1 - x2 - y2 , z2 - 1 )	  
6 BINARY_SUBTRACT					      	  for x in range ( x1 , x2 + 1 ) :			    	m_new = ( - 1 * x1 - y1 - z1 , y2 - x2 - y2 )		  
8 BINARY_MULTIPLY					      	      print ( "(" , x , "," , y , ")\n" )		    	m_new = ( - 1 * x1 - y1 , y2 - x2 - y2 , y2 - y2 , z2 - 1 
10 STORE_FAST 4 ( m_new )				      	      slope_error_new = slope_error_new + m_new		    	m_new = ( - 1 * x1 - y1 - z1 , y2 - x2 - y2 , y2 - z2 , y 
							      	      if ( slope_error_new >= 0 ) :			    	m_new = ( - 1 * x1 + y1 - y2 , y2 - x2 - y2 , y2 - z2 , y 
3 12 LOAD_FAST 4 ( m_new )				      		  y = y + 1					    	m_new = ( - 1 * x1 + y1 - y2 , y2 - z2 )		  
14 LOAD_FAST 2 ( x2 )					      		  slope_error_new = slope_error_new - 2 * ( x2 - x1 	m_new = ( - 1 * x1 + y1 - y2 , y2 - y2 - y2 , y2 - z2 )	  
16 LOAD_FAST 0 ( x1 )					      								    	m_new = ( - 1 * x1 + y1 - y2 , y2 - y2 - y2 , y2 - z2 )	  
18 BINARY_SUBTRACT					      								    	m_new = ( - 1 * x1 + y1 - y2 , y2 - y2 - y2 , y2 - z2 )	  
20 BINARY_SUBTRACT					      								    	m_new = ( - 1 * x1 - y1 , y2 - y2 , y2 - z2 , y2 - z2 , y 
22 STORE_FAST 5 ( slope_error_new )			      								    	m_new = ( - 1 * x1 - y1 , y2 - y2 , y2 - z2 , y2 - z2 , y 
							      								    								  
4 24 LOAD_FAST 1 ( y1 )					      								    								  
26 STORE_FAST 6 ( y )					      								    								  
							      								    								  
5 28 SETUP_LOOP 78 ( to 108 )				      								    								  
30 LOAD_GLOBAL 0 ( range )				      								    								  
32 LOAD_FAST 0 ( x1 )					      								    								  
34 LOAD_FAST 2 ( x2 )					      								    								  
36 LOAD_CONST 2 ( 1 )					      								    								  
38 BINARY_ADD						      								    								  
40 CALL_FUNCTION 2					      								    								  
42 GET_ITER						      								    								  
>> 44 FOR_ITER 60 ( to 106 )				      								    								  
46 STORE_FAST 7 ( x )					      								    								  
							      								    								  
6 48 LOAD_GLOBAL 1 ( print )				      								    								  
50 LOAD_CONST 3 ( '(' )					      								    								  
52 LOAD_FAST 7 ( x )					      								    								  
54 LOAD_CONST 4 ( ',' )					      								    								  
56 LOAD_FAST 6 ( y )					      								    								  
58 LOAD_CONST 5 ( ')\n' )				      								    								  
60 CALL_FUNCTION 5					      								    								  
62 POP_TOP						      								    								  
							      								    								  
7 64 LOAD_FAST 5 ( slope_error_new )			      								    								  
66 LOAD_FAST 4 ( m_new )				      								    								  
68 BINARY_ADD						      								    								  
70 STORE_FAST 5 ( slope_error_new )			      								    								  
							      								    								  
8 72 LOAD_FAST 5 ( slope_error_new )			      								    								  
74 LOAD_CONST 6 ( 0 )					      								    								  
76 COMPARE_OP 5 ( >= )					      								    								  
78 POP_JUMP_IF_FALSE 44					      								    								  
							      								    								  
9 80 LOAD_FAST 6 ( y )					      								    								  
82 LOAD_CONST 2 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 6 ( y )					      								    								  
							      								    								  
10 88 LOAD_FAST 5 ( slope_error_new )			      								    								  
90 LOAD_CONST 1 ( 2 )					      								    								  
92 LOAD_FAST 2 ( x2 )					      								    								  
94 LOAD_FAST 0 ( x1 )					      								    								  
96 BINARY_SUBTRACT					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 STORE_FAST 5 ( slope_error_new )			      								    								  
104 JUMP_ABSOLUTE 44					      								    								  
>> 106 POP_BLOCK					      								    								  
>> 108 LOAD_CONST 0 ( None )				      								    								  
110 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		      FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		    FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		  FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object maxProduct at 0x7f33e2649a50, fil def maxProduct ( arr , n ) :				    def maxProduct ( arr , n , n , n , n ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if n < 3 :						    	if n < 3 :						  
2 LOAD_CONST 1 ( 3 )					      	      return - 1					    	    return - 1						  
4 COMPARE_OP 0 ( < )					      	  max_product = - ( sys.maxsize - 1 )			    	max_product = ( n - n ) * n				  
6 POP_JUMP_IF_FALSE 12					      	  for i in range ( 0 , n - 2 ) :			    	max_product = ( n - 1 ) * n				  
							      	      for j in range ( i + 1 , n - 1 ) :		    	max_product = ( n - 1 ) * n				  
3 8 LOAD_CONST 2 ( - 1 )				      		  for k in range ( j + 1 , n ) :		    	max_product = ( n - 1 ) * n				  
10 RETURN_VALUE						      		      max_product = max ( max_product , arr [ i ] * 	max_product = ( n - 1 ) * n				  
							      	  return max_product					    	max_product = ( n - 1 ) * n				  
4 >> 12 LOAD_GLOBAL 0 ( sys )				      								    	max_product = ( n - 1 ) * n				  
14 LOAD_ATTR 1 ( maxsize )				      								    	max_product = ( n - 1 ) * n				  
16 LOAD_CONST 3 ( 1 )					      								    	max_product = ( n - 1 ) * n				  
18 BINARY_SUBTRACT					      								    	max_product = ( n - 1 ) * n				  
20 UNARY_NEGATIVE					      								    	max_product = ( n - 1 ) * n				  
22 STORE_FAST 2 ( max_product )				      								    	max_product = ( n - 1 ) * n				  
							      								    	max_product = ( n - 1 ) * n				  
5 24 SETUP_LOOP 104 ( to 130 )				      								    	max_product = ( n - 1 ) * n				  
26 LOAD_GLOBAL 2 ( range )				      								    	max_product = ( n - 1 ) * n - max_product		  
28 LOAD_CONST 4 ( 0 )					      								    	max_product = ( n - 1 ) * n				  
30 LOAD_FAST 1 ( n )					      								    	max_product = ( n - 1 ) * n				  
32 LOAD_CONST 5 ( 2 )					      								    	max_product = ( n - 1 ) * n				  
34 BINARY_SUBTRACT					      								    	max_product = max_product				  
36 CALL_FUNCTION 2					      								    	max_product = max_product				  
38 GET_ITER						      								    	max_product = max_product / max_product			  
>> 40 FOR_ITER 86 ( to 128 )				      								    	max_product = max_product / max_product			  
42 STORE_FAST 3 ( i )					      								    	max_product = max_product / max_product			  
							      								    	max_product = max_product / max_product			  
6 44 SETUP_LOOP 80 ( to 126 )				      								    	max_product = max_product / max_product			  
46 LOAD_GLOBAL 2 ( range )				      								    	max_product = max_product / max_product			  
48 LOAD_FAST 3 ( i )					      								    	max_product = max_product / max_product			  
50 LOAD_CONST 3 ( 1 )					      								    	max_product = max_product / max_product			  
52 BINARY_ADD						      								    	max_product = max_product / max_product			  
54 LOAD_FAST 1 ( n )					      								    	max_product = max_product / max_product / max_product	  
56 LOAD_CONST 3 ( 1 )					      								    	max_product = max_product / max_product			  
58 BINARY_SUBTRACT					      								    	max_product = max_product / max_product			  
60 CALL_FUNCTION 2					      								    	max_product = max_product / max_product			  
62 GET_ITER						      								    	max_product = max_product / max_product			  
>> 64 FOR_ITER 58 ( to 124 )				      								    	max_product = max_product / max_product			  
66 STORE_FAST 4 ( j )					      								    	max_product = max_product / max_product / max_product	  
							      								    	max_product = max_product / max_product			  
7 68 SETUP_LOOP 52 ( to 122 )				      								    	max_product = max_product / max_product			  
70 LOAD_GLOBAL 2 ( range )				      								    	max_product = max_product / max_product			  
72 LOAD_FAST 4 ( j )					      								    	max_product = max_product / max_product			  
74 LOAD_CONST 3 ( 1 )					      								    	max_product = max_product / max_product			  
76 BINARY_ADD						      								    	max_product = max_product / max_product			  
78 LOAD_FAST 1 ( n )					      								    	max_product = max_product / max_product			  
80 CALL_FUNCTION 2					      								    	max_product = max_product / max_product			  
82 GET_ITER						      								    	max_product = max_product / max_product			  
>> 84 FOR_ITER 34 ( to 120 )				      								    	max_product = max_product / max_product			  
86 STORE_FAST 5 ( k )					      								    	max_product = max_product / max_product			  
							      								    	max_product = max_product / max_product			  
8 88 LOAD_GLOBAL 3 ( max )				      								    	max_product = max_product / max_product			  
90 LOAD_FAST 2 ( max_product )				      								    	max_							  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 3 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 4 ( j )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 5 ( k )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 BINARY_MULTIPLY					      								    								  
114 CALL_FUNCTION 2					      								    								  
116 STORE_FAST 2 ( max_product )			      								    								  
118 JUMP_ABSOLUTE 84					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 64					      								    								  
>> 124 POP_BLOCK					      								    								  
>> 126 JUMP_ABSOLUTE 40					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
9 >> 130 LOAD_FAST 2 ( max_product )			      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GOOGLE_CASE_GIVEN_SENTENCE				      GOOGLE_CASE_GIVEN_SENTENCE				    GOOGLE_CASE_GIVEN_SENTENCE					  GOOGLE_CASE_GIVEN_SENTENCE
--							      --							    --								  --
Disassembly of <code object convert at 0x7f33e2649a50, file " def convert ( s ) :					    def convert ( s ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( s )						    	n = len ( s )						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( s )					      	  s1 = ""						    	s1 = ''							  alid/GOOGLE_CASE_GIVEN_SENTENCE.py", line 77	   r
4 CALL_FUNCTION 1					      	  s1 = s1 + s [ 0 ].lower ( )				    	s1 = s1 [ 0 ].lower ( )					  eturn s1     ^ SyntaxError: 'return' outside funct
6 STORE_FAST 1 ( n )					      	  i = 1							    	s1 [ 1 ] = s1 [ 0 ].lower ( )				  ion
							      	  while i < n :						    	s1 [ 1 ] = s1 [ 0 ].lower ( )				  
3 8 LOAD_CONST 1 ( '' )					      	      if ( s [ i ] == ' ' and i <= n ) :		    	s1 [ 1 ] = s1 [ 1 ]					  
10 STORE_FAST 2 ( s1 )					      		  s1 = s1 + " " + ( s [ i + 1 ] ).lower ( )	    	s1 [ 2 ] = s1 [ 1 ]					  
							      		  i = i + 1					    	s1 [ 2 ] = s1 [ 1 ]					  
4 12 LOAD_FAST 2 ( s1 )					      	      else :						    	s1 [ 2 ] = s1 [ 2 ]					  
14 LOAD_FAST 0 ( s )					      		  s1 = s1 + ( s [ i ] ).upper ( )		    	s1 [ 2 ] = s1 [ 3 ]					  
16 LOAD_CONST 2 ( 0 )					      	      i = i + 1						    	s1 [ 2 ] = s1 [ 4 ]					  
18 BINARY_SUBSCR					      	  return s1						    	s1 [ 2 ] = s1 [ 4 ]					  
20 LOAD_METHOD 1 ( lower )				      								    	s1 [ 2 ] = s1 [ 4 ]					  
22 CALL_METHOD 0					      								    	s1 [ 2 ] = s1 [ 4 ]					  
24 BINARY_ADD						      								    	s1 [ 2 ] = s1 [ 4 ]					  
26 STORE_FAST 2 ( s1 )					      								    	s1 [ 2 ] = s1 [ 5 ]					  
							      								    	s1 [ 2 ] = s1 [ 4 ]					  
5 28 LOAD_CONST 3 ( 1 )					      								    	s1 [ 2 ] = s1 [ 4 ]					  
30 STORE_FAST 3 ( i )					      								    	s1 [ 2 ] = s1 [ 4 ]					  
							      								    	s1 [ 2 ] = s1 [ 4 ]					  
6 32 SETUP_LOOP 90 ( to 124 )				      								    	s1 [ 2 ] = s1 [ 5 ]					  
>> 34 LOAD_FAST 3 ( i )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
36 LOAD_FAST 1 ( n )					      								    	s1 [ 2 ] = s1 [ 7 ]					  
38 COMPARE_OP 0 ( < )					      								    	s1 [ 2 ] = s1 [ 4 ]					  
40 POP_JUMP_IF_FALSE 122				      								    	s1 [ 2 ] = s1 [ 6 ]					  
							      								    	s1 [ 2 ] = s1 [ 7 ]					  
7 42 LOAD_FAST 0 ( s )					      								    	s1 [ 2 ] = s1 [ 8 ]					  
44 LOAD_FAST 3 ( i )					      								    	s1 [ 2 ] = s1 [ 4 ]					  
46 BINARY_SUBSCR					      								    	s1 [ 2 ] = s1 [ 5 ]					  
48 LOAD_CONST 4 ( ' ' )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
50 COMPARE_OP 2 ( == )					      								    	s1 [ 2 ] = s1 [ 7 ]					  
52 POP_JUMP_IF_FALSE 96					      								    	s1 [ 2 ] = s1 [ 6 ]					  
54 LOAD_FAST 3 ( i )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
56 LOAD_FAST 1 ( n )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
58 COMPARE_OP 1 ( <= )					      								    	s1 [ 2 ] = s1 [ 7 ]					  
60 POP_JUMP_IF_FALSE 96					      								    	s1 [ 2 ] = s1 [ 6 ]					  
							      								    	s1 [ 2 ] = s1 [ 6 ]					  
8 62 LOAD_FAST 2 ( s1 )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
64 LOAD_CONST 4 ( ' ' )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
66 BINARY_ADD						      								    	s1 [ 2 ] = s1 [ 7 ]					  
68 LOAD_FAST 0 ( s )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
70 LOAD_FAST 3 ( i )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
72 LOAD_CONST 3 ( 1 )					      								    	s1 [ 2 ] = s1 [ 6 ]					  
74 BINARY_ADD						      								    	s1 [ 2 ] = s1 [ 6 ]					  
76 BINARY_SUBSCR					      								    return s1							  
78 LOAD_METHOD 1 ( lower )				      								    								  
80 CALL_METHOD 0					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
9 86 LOAD_FAST 3 ( i )					      								    								  
88 LOAD_CONST 3 ( 1 )					      								    								  
90 BINARY_ADD						      								    								  
92 STORE_FAST 3 ( i )					      								    								  
94 JUMP_FORWARD 16 ( to 112 )				      								    								  
							      								    								  
11 >> 96 LOAD_FAST 2 ( s1 )				      								    								  
98 LOAD_FAST 0 ( s )					      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_METHOD 2 ( upper )				      								    								  
106 CALL_METHOD 0					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
12 >> 112 LOAD_FAST 3 ( i )				      								    								  
114 LOAD_CONST 3 ( 1 )					      								    								  
116 BINARY_ADD						      								    								  
118 STORE_FAST 3 ( i )					      								    								  
120 JUMP_ABSOLUTE 34					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_FAST 2 ( s1 )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY				      EQUILIBRIUM_INDEX_OF_AN_ARRAY				    EQUILIBRIUM_INDEX_OF_AN_ARRAY				  EQUILIBRIUM_INDEX_OF_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object equilibrium at 0x7f33e2653ed0, fi def equilibrium ( arr ) :					    def equilibrium ( arr , leftfff535353535353535353535353535353 script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  leftsum = 0						    								  
2 STORE_FAST 1 ( leftsum )				      	  rightsum = 0						    								  
							      	  n = len ( arr )					    								  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( n ) :				    								  
6 STORE_FAST 2 ( rightsum )				      	      leftsum = 0					    								  
							      	      rightsum = 0					    								  
4 8 LOAD_GLOBAL 0 ( len )				      	      for j in range ( i ) :				    								  
10 LOAD_FAST 0 ( arr )					      		  leftsum += arr [ j ]				    								  
12 CALL_FUNCTION 1					      	      for j in range ( i + 1 , n ) :			    								  
14 STORE_FAST 3 ( n )					      		  rightsum += arr [ j ]				    								  
							      	      if leftsum == rightsum :				    								  
5 16 SETUP_LOOP 102 ( to 120 )				      		  return i					    								  
18 LOAD_GLOBAL 1 ( range )				      	  return - 1						    								  
20 LOAD_FAST 3 ( n )					      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 90 ( to 118 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_CONST 1 ( 0 )					      								    								  
32 STORE_FAST 1 ( leftsum )				      								    								  
							      								    								  
7 34 LOAD_CONST 1 ( 0 )					      								    								  
36 STORE_FAST 2 ( rightsum )				      								    								  
							      								    								  
8 38 SETUP_LOOP 28 ( to 68 )				      								    								  
40 LOAD_GLOBAL 1 ( range )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 CALL_FUNCTION 1					      								    								  
46 GET_ITER						      								    								  
>> 48 FOR_ITER 16 ( to 66 )				      								    								  
50 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 52 LOAD_FAST 1 ( leftsum )				      								    								  
54 LOAD_FAST 0 ( arr )					      								    								  
56 LOAD_FAST 5 ( j )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 1 ( leftsum )				      								    								  
64 JUMP_ABSOLUTE 48					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
10 >> 68 SETUP_LOOP 34 ( to 104 )			      								    								  
70 LOAD_GLOBAL 1 ( range )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 LOAD_CONST 2 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 3 ( n )					      								    								  
80 CALL_FUNCTION 2					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 16 ( to 102 )				      								    								  
86 STORE_FAST 5 ( j )					      								    								  
							      								    								  
11 88 LOAD_FAST 2 ( rightsum )				      								    								  
90 LOAD_FAST 0 ( arr )					      								    								  
92 LOAD_FAST 5 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 2 ( rightsum )				      								    								  
100 JUMP_ABSOLUTE 84					      								    								  
>> 102 POP_BLOCK					      								    								  
							      								    								  
12 >> 104 LOAD_FAST 1 ( leftsum )			      								    								  
106 LOAD_FAST 2 ( rightsum )				      								    								  
108 COMPARE_OP 2 ( == )					      								    								  
110 POP_JUMP_IF_FALSE 26				      								    								  
							      								    								  
13 112 LOAD_FAST 4 ( i )				      								    								  
114 RETURN_VALUE					      								    								  
116 JUMP_ABSOLUTE 26					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
14 >> 120 LOAD_CONST 3 ( - 1 )				      								    								  
122 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PALINDROME_K_DIGITS					      NTH_PALINDROME_K_DIGITS					    NTH_PALINDROME_K_DIGITS					  NTH_PALINDROME_K_DIGITS
--							      --							    --								  --
Disassembly of <code object nthPalindrome at 0x7f33e2653f60,  def nthPalindrome ( n , k ) :				    def nthPalindrome ( n , k , n , n , n , n , n , n , n , n , n script_not_found : None
2 0 LOAD_FAST 1 ( k )					      	  if ( k & 1 ) :					    								  
2 LOAD_CONST 1 ( 1 )					      	      temp = k // 2					    								  
4 BINARY_AND						      	  else :						    								  
6 POP_JUMP_IF_FALSE 18					      	      temp = k // 2 - 1					    								  
							      	  palindrome = 10 ** temp				    								  
3 8 LOAD_FAST 1 ( k )					      	  palindrome = palindrome + n - 1			    								  
10 LOAD_CONST 2 ( 2 )					      	  print ( palindrome , end = "" )			    								  
12 BINARY_FLOOR_DIVIDE					      	  if ( k & 1 ) :					    								  
14 STORE_FAST 2 ( temp )				      	      palindrome = palindrome // 10			    								  
16 JUMP_FORWARD 12 ( to 30 )				      	  while ( palindrome ) :				    								  
							      	      print ( palindrome % 10 , end = "" )		    								  
5 >> 18 LOAD_FAST 1 ( k )				      	      palindrome = palindrome // 10			    								  
20 LOAD_CONST 2 ( 2 )					      								    								  
22 BINARY_FLOOR_DIVIDE					      								    								  
24 LOAD_CONST 1 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 2 ( temp )				      								    								  
							      								    								  
6 >> 30 LOAD_CONST 3 ( 10 )				      								    								  
32 LOAD_FAST 2 ( temp )					      								    								  
34 BINARY_POWER						      								    								  
36 STORE_FAST 3 ( palindrome )				      								    								  
							      								    								  
7 38 LOAD_FAST 3 ( palindrome )				      								    								  
40 LOAD_FAST 0 ( n )					      								    								  
42 BINARY_ADD						      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_SUBTRACT					      								    								  
48 STORE_FAST 3 ( palindrome )				      								    								  
							      								    								  
8 50 LOAD_GLOBAL 0 ( print )				      								    								  
52 LOAD_FAST 3 ( palindrome )				      								    								  
54 LOAD_CONST 4 ( '' )					      								    								  
56 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
58 CALL_FUNCTION_KW 2					      								    								  
60 POP_TOP						      								    								  
							      								    								  
9 62 LOAD_FAST 1 ( k )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_AND						      								    								  
68 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
10 70 LOAD_FAST 3 ( palindrome )			      								    								  
72 LOAD_CONST 3 ( 10 )					      								    								  
74 BINARY_FLOOR_DIVIDE					      								    								  
76 STORE_FAST 3 ( palindrome )				      								    								  
							      								    								  
11 >> 78 SETUP_LOOP 32 ( to 112 )			      								    								  
>> 80 LOAD_FAST 3 ( palindrome )			      								    								  
82 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
12 84 LOAD_GLOBAL 0 ( print )				      								    								  
86 LOAD_FAST 3 ( palindrome )				      								    								  
88 LOAD_CONST 3 ( 10 )					      								    								  
90 BINARY_MODULO					      								    								  
92 LOAD_CONST 4 ( '' )					      								    								  
94 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
96 CALL_FUNCTION_KW 2					      								    								  
98 POP_TOP						      								    								  
							      								    								  
13 100 LOAD_FAST 3 ( palindrome )			      								    								  
102 LOAD_CONST 3 ( 10 )					      								    								  
104 BINARY_FLOOR_DIVIDE					      								    								  
106 STORE_FAST 3 ( palindrome )				      								    								  
108 JUMP_ABSOLUTE 80					      								    								  
>> 110 POP_BLOCK					      								    								  
>> 112 LOAD_CONST 0 ( None )				      								    								  
114 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			      CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			    CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			  CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND
--							      --							    --								  --
Disassembly of <code object calcAngle at 0x7f33e2644930, file def calcAngle ( h , m ) :					    def calcAngle ( h , f3333333333333333333333333333333333333333 error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( h )					      	  if ( h < 0 or m < 0 or h > 12 or m > 60 ) :		    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 0 )					      	      print ( 'Wrong input' )				    								  alid/CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND.py", li
4 COMPARE_OP 0 ( < )					      	  if ( h == 12 ) :					    								  ne 33	    if __name__ == '__main__':	    ^ Syntax
6 POP_JUMP_IF_TRUE 32					      	      h = 0						    								  Error: invalid syntax
8 LOAD_FAST 1 ( m )					      	  if ( m == 60 ) :					    								  
10 LOAD_CONST 1 ( 0 )					      	      m = 0						    								  
12 COMPARE_OP 0 ( < )					      	  hour_angle = 0.5 * ( h * 60 + m )			    								  
14 POP_JUMP_IF_TRUE 32					      	  minute_angle = 6 * m					    								  
16 LOAD_FAST 0 ( h )					      	  angle = abs ( hour_angle - minute_angle )		    								  
18 LOAD_CONST 2 ( 12 )					      	  angle = min ( 360 - angle , angle )			    								  
20 COMPARE_OP 4 ( > )					      	  return angle						    								  
22 POP_JUMP_IF_TRUE 32					      								    								  
24 LOAD_FAST 1 ( m )					      								    								  
26 LOAD_CONST 3 ( 60 )					      								    								  
28 COMPARE_OP 4 ( > )					      								    								  
30 POP_JUMP_IF_FALSE 40					      								    								  
							      								    								  
3 >> 32 LOAD_GLOBAL 0 ( print )				      								    								  
34 LOAD_CONST 4 ( 'Wrong input' )			      								    								  
36 CALL_FUNCTION 1					      								    								  
38 POP_TOP						      								    								  
							      								    								  
4 >> 40 LOAD_FAST 0 ( h )				      								    								  
42 LOAD_CONST 2 ( 12 )					      								    								  
44 COMPARE_OP 2 ( == )					      								    								  
46 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
5 48 LOAD_CONST 1 ( 0 )					      								    								  
50 STORE_FAST 0 ( h )					      								    								  
							      								    								  
6 >> 52 LOAD_FAST 1 ( m )				      								    								  
54 LOAD_CONST 3 ( 60 )					      								    								  
56 COMPARE_OP 2 ( == )					      								    								  
58 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 60 LOAD_CONST 1 ( 0 )					      								    								  
62 STORE_FAST 1 ( m )					      								    								  
							      								    								  
8 >> 64 LOAD_CONST 5 ( 0.5 )				      								    								  
66 LOAD_FAST 0 ( h )					      								    								  
68 LOAD_CONST 3 ( 60 )					      								    								  
70 BINARY_MULTIPLY					      								    								  
72 LOAD_FAST 1 ( m )					      								    								  
74 BINARY_ADD						      								    								  
76 BINARY_MULTIPLY					      								    								  
78 STORE_FAST 2 ( hour_angle )				      								    								  
							      								    								  
9 80 LOAD_CONST 6 ( 6 )					      								    								  
82 LOAD_FAST 1 ( m )					      								    								  
84 BINARY_MULTIPLY					      								    								  
86 STORE_FAST 3 ( minute_angle )			      								    								  
							      								    								  
10 88 LOAD_GLOBAL 1 ( abs )				      								    								  
90 LOAD_FAST 2 ( hour_angle )				      								    								  
92 LOAD_FAST 3 ( minute_angle )				      								    								  
94 BINARY_SUBTRACT					      								    								  
96 CALL_FUNCTION 1					      								    								  
98 STORE_FAST 4 ( angle )				      								    								  
							      								    								  
11 100 LOAD_GLOBAL 2 ( min )				      								    								  
102 LOAD_CONST 7 ( 360 )				      								    								  
104 LOAD_FAST 4 ( angle )				      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_FAST 4 ( angle )				      								    								  
110 CALL_FUNCTION 2					      								    								  
112 STORE_FAST 4 ( angle )				      								    								  
							      								    								  
12 114 LOAD_FAST 4 ( angle )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION			      SORTING_USING_TRIVIAL_HASH_FUNCTION			    SORTING_USING_TRIVIAL_HASH_FUNCTION				  SORTING_USING_TRIVIAL_HASH_FUNCTION
--							      --							    --								  --
Disassembly of <code object sortUsingHash at 0x7f33e2653f60,  def sortUsingHash ( a , n ) :				    def sortUsingHash ( a , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( max )				      	  Max = max ( a )					    	Max = max ( a )						  
2 LOAD_FAST 0 ( a )					      	  Hash = [ 0 ] * ( Max + 1 )				    	Max = 0							  
4 CALL_FUNCTION 1					      	  for i in range ( 0 , n ) :				    	Max = 0							  
6 STORE_FAST 2 ( Max )					      	      Hash [ a [ i ] ] += 1				    	Max = 0							  
							      	  for i in range ( 0 , Max + 1 ) :			    	Max = 0							  
3 8 LOAD_CONST 1 ( 0 )					      	      if Hash [ i ] != 0 :				    	for i in range ( n ) :					  
10 BUILD_LIST 1						      		  for j in range ( 0 , Hash [ i ] ) :		    	    Max = int ( a [ i ] )				  
12 LOAD_FAST 2 ( Max )					      		      print ( i , end = " " )			    	    Max = int ( a [ i ] )				  
14 LOAD_CONST 2 ( 1 )					      								    	    Max = int ( a [ i ] )				  
16 BINARY_ADD						      								    	    Max = int ( a [ i ] )				  
18 BINARY_MULTIPLY					      								    	    Max = int ( a [ i ] )				  
20 STORE_FAST 3 ( Hash )				      								    	    Max = int ( a [ i ] )				  
							      								    	    Max = int ( a [ i ] )				  
4 22 SETUP_LOOP 38 ( to 62 )				      								    	    Max = int ( a [ i ] )				  
24 LOAD_GLOBAL 1 ( range )				      								    	    Max = int ( a [ i ] )				  
26 LOAD_CONST 1 ( 0 )					      								    	    Max = int ( a [ i ] )				  
28 LOAD_FAST 1 ( n )					      								    	    Max = int ( a [ i ] )				  
30 CALL_FUNCTION 2					      								    	    Max = int ( a [ i ] )				  
32 GET_ITER						      								    	    Max = int ( a [ i ] )				  
>> 34 FOR_ITER 24 ( to 60 )				      								    	    Max = int ( a [ i ] )				  
36 STORE_FAST 4 ( i )					      								    	    Max = int ( a [ i ] )				  
							      								    	    Max = int ( a [ i ] )				  
5 38 LOAD_FAST 3 ( Hash )				      								    	    Max = int ( a [ i ] )				  
40 LOAD_FAST 0 ( a )					      								    	    Max = int ( a [ i ] )				  
42 LOAD_FAST 4 ( i )					      								    	    Max = int ( a [ i ] )				  
44 BINARY_SUBSCR					      								    	    Max = int ( a [ i ] )				  
46 DUP_TOP_TWO						      								    	    Max = int ( a [ i ] )				  
48 BINARY_SUBSCR					      								    	    Max = int ( a [ i ] )				  
50 LOAD_CONST 2 ( 1 )					      								    	    Max = int ( a [ i ] )				  
52 INPLACE_ADD						      								    	    Max = int ( a [ i ] )				  
54 ROT_THREE						      								    	    Max = int ( a [ i ] )				  
56 STORE_SUBSCR						      								    	    Max = int ( a [ i ] )				  
58 JUMP_ABSOLUTE 34					      								    	    Max = int ( a [ i ] )				  
>> 60 POP_BLOCK						      								    	    Max = int ( a [ i ] )				  
							      								    	    Max = int ( a [ i ] )				  
6 >> 62 SETUP_LOOP 70 ( to 134 )			      								    	    Max = int ( a [ i ] )				  
64 LOAD_GLOBAL 1 ( range )				      								    	    Max = int ( a [ i ] )				  
66 LOAD_CONST 1 ( 0 )					      								    	    Max = int ( a [ i ] )				  
68 LOAD_FAST 2 ( Max )					      								    	    Max = int ( a [ i ] )				  
70 LOAD_CONST 2 ( 1 )					      								    	    Max = int ( a [ i ] )				  
72 BINARY_ADD						      								    	    Max = int ( a [ i ] )				  
74 CALL_FUNCTION 2					      								    	    Max = int ( a [ i ] )				  
76 GET_ITER						      								    	    Max = int ( a [ i ] )				  
>> 78 FOR_ITER 52 ( to 132 )				      								    	    Max = int ( a [ i ] )				  
80 STORE_FAST 4 ( i )					      								    	    Max = int ( a [ i ] )				  
							      								    	    Max = int ( a [ i ] )				  
7 82 LOAD_FAST 3 ( Hash )				      								    	    Max = int ( a [ i ] )				  
84 LOAD_FAST 4 ( i )					      								    	    Max = int ( a [ i ] )				  
86 BINARY_SUBSCR					      								    	    Max = int ( a [ i ] )				  
88 LOAD_CONST 1 ( 0 )					      								    	    Max = int ( a [ i ] )				  
90 COMPARE_OP 3 ( != )					      								    	    Max = int ( a [ i ] )				  
92 POP_JUMP_IF_FALSE 78					      								    	    Max = int ( a [ i ] )				  
							      								    	    return Max						  
8 94 SETUP_LOOP 34 ( to 130 )				      								    								  
96 LOAD_GLOBAL 1 ( range )				      								    								  
98 LOAD_CONST 1 ( 0 )					      								    								  
100 LOAD_FAST 3 ( Hash )				      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 2					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 16 ( to 128 )				      								    								  
112 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 114 LOAD_GLOBAL 2 ( print )				      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 LOAD_CONST 3 ( ' ' )				      								    								  
120 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
122 CALL_FUNCTION_KW 2					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 110					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 JUMP_ABSOLUTE 78					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			      FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			    FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT				  FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT
--							      --							    --								  --
Disassembly of <code object possibleOrNot at 0x7f33e2644f60,  def possibleOrNot ( a1 , a2 , b1 , b2 , c1 , c2 ) :	    def possibleOrNot ( a1 , a2 , a2 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( pow )				      	  dis1 = ( pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 ) )	    	a2 = pow ( a1 , a2 - a2 )				  
2 LOAD_FAST 2 ( b1 )					      	  dis2 = ( pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 ) )	    	a2 = pow ( a1 , a2 - a2 )				  
4 LOAD_FAST 0 ( a1 )					      	  if ( dis1 != dis2 ) :					    	a2 = pow ( a1 , a2 - a2 )				  
6 BINARY_SUBTRACT					      	      print ( "No" )					    	a2 = pow ( a1 , a2 - a2 )				  
8 LOAD_CONST 1 ( 2 )					      	  elif ( b1 == ( ( a1 + c1 ) // 2.0 ) and b2 == ( ( a2 + c2 	a2 = pow ( a1 , a2 - a2 )				  
10 CALL_FUNCTION 2					      	      print ( "No" )					    	a2 = pow ( a1 , a2 - a2 )				  
12 LOAD_GLOBAL 0 ( pow )				      	  else :						    	a2 = pow ( a1 , a2 - a2 )				  
14 LOAD_FAST 3 ( b2 )					      	      print ( "Yes" )					    	a2 = pow ( a1 , a2 - a2 )				  
16 LOAD_FAST 1 ( a2 )					      								    	a2 = pow ( a1 , a2 - a2 )				  
18 BINARY_SUBTRACT					      								    	a2 = pow ( a1 , a2 - a2 )				  
20 LOAD_CONST 1 ( 2 )					      								    	a2 = pow ( a1 , a2 - a2 )				  
22 CALL_FUNCTION 2					      								    	a2 = pow ( a1 , a2 - a2 )				  
24 BINARY_ADD						      								    	a2 = pow ( a1 , a2 - a2 )				  
26 STORE_FAST 6 ( dis1 )				      								    	a2 = pow ( a1 , a2 - a2 )				  
							      								    	a2 = pow ( a1 , a2 - a2 )				  
3 28 LOAD_GLOBAL 0 ( pow )				      								    	a2 = pow ( a1 , a2 - a2 )				  
30 LOAD_FAST 4 ( c1 )					      								    	a2 = pow ( a1 , a2 - a2 )				  
32 LOAD_FAST 2 ( b1 )					      								    	a2 = pow ( a1 , a2 - a2 )				  
34 BINARY_SUBTRACT					      								    	a2 = pow ( a1 , a2 - a2 )				  
36 LOAD_CONST 1 ( 2 )					      								    	a2 = pow ( a2 , a2 - a2 )				  
38 CALL_FUNCTION 2					      								    	a2 = a2							  
40 LOAD_GLOBAL 0 ( pow )				      								    	a2 = a2							  
42 LOAD_FAST 5 ( c2 )					      								    	a2 = a2							  
44 LOAD_FAST 3 ( b2 )					      								    	a2 = a2							  
46 BINARY_SUBTRACT					      								    	a2 = a2							  
48 LOAD_CONST 1 ( 2 )					      								    	a2 = a2							  
50 CALL_FUNCTION 2					      								    	a2 = a2							  
52 BINARY_ADD						      								    	a2 = a2							  
54 STORE_FAST 7 ( dis2 )				      								    	a2 = a2							  
							      								    	a2 = a2							  
4 56 LOAD_FAST 6 ( dis1 )				      								    	a2 = a2							  
58 LOAD_FAST 7 ( dis2 )					      								    	a2 = a2							  
60 COMPARE_OP 3 ( != )					      								    	a2 = a2							  
62 POP_JUMP_IF_FALSE 74					      								    	a2 = a2							  
							      								    	a2 = a2							  
5 64 LOAD_GLOBAL 1 ( print )				      								    	a2 = a2							  
66 LOAD_CONST 2 ( 'No' )				      								    	a2 = a2							  
68 CALL_FUNCTION 1					      								    	a2 = a2							  
70 POP_TOP						      								    	a2 = a2							  
72 JUMP_FORWARD 50 ( to 124 )				      								    	a2 = a2							  
							      								    								  
6 >> 74 LOAD_FAST 2 ( b1 )				      								    								  
76 LOAD_FAST 0 ( a1 )					      								    								  
78 LOAD_FAST 4 ( c1 )					      								    								  
80 BINARY_ADD						      								    								  
82 LOAD_CONST 3 ( 2.0 )					      								    								  
84 BINARY_FLOOR_DIVIDE					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 116				      								    								  
90 LOAD_FAST 3 ( b2 )					      								    								  
92 LOAD_FAST 1 ( a2 )					      								    								  
94 LOAD_FAST 5 ( c2 )					      								    								  
96 BINARY_ADD						      								    								  
98 LOAD_CONST 3 ( 2.0 )					      								    								  
100 BINARY_FLOOR_DIVIDE					      								    								  
102 COMPARE_OP 2 ( == )					      								    								  
104 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
7 106 LOAD_GLOBAL 1 ( print )				      								    								  
108 LOAD_CONST 2 ( 'No' )				      								    								  
110 CALL_FUNCTION 1					      								    								  
112 POP_TOP						      								    								  
114 JUMP_FORWARD 8 ( to 124 )				      								    								  
							      								    								  
9 >> 116 LOAD_GLOBAL 1 ( print )			      								    								  
118 LOAD_CONST 4 ( 'Yes' )				      								    								  
120 CALL_FUNCTION 1					      								    								  
122 POP_TOP						      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	      MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	    MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	  MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION
--							      --							    --								  --
Disassembly of <code object findPlatform at 0x7f33e26494b0, f def findPlatform ( arr , dep , n ) :			    def findPlatform ( arr , 0x70x70x7FFF ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    	arr.sort ( )						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_METHOD 0 ( sort )				      	  dep.sort ( )						    	arr.sort ( )						  alid/MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_
4 CALL_METHOD 0						      	  plat_needed = 1					    	if ( arr [ 0 ] == ' platplatplatplatplatplatplatplatplatp STATION.py", line 36	   def f_filled ( arr , 0x70
6 POP_TOP						      	  result = 1						    								  x70x7FFF ) :				   ^ SyntaxE
							      	  i = 1							    								  rror: invalid syntax
3 8 LOAD_FAST 1 ( dep )					      	  j = 0							    								  
10 LOAD_METHOD 0 ( sort )				      	  while ( i < n and j < n ) :				    								  
12 CALL_METHOD 0					      	      if ( arr [ i ] < dep [ j ] ) :			    								  
14 POP_TOP						      		  plat_needed += 1				    								  
							      		  i += 1					    								  
4 16 LOAD_CONST 1 ( 1 )					      		  if ( plat_needed > result ) :			    								  
18 STORE_FAST 3 ( plat_needed )				      		      result = plat_needed			    								  
							      	      else :						    								  
5 20 LOAD_CONST 1 ( 1 )					      		  plat_needed -= 1				    								  
22 STORE_FAST 4 ( result )				      		  j += 1					    								  
							      	  return result						    								  
6 24 LOAD_CONST 1 ( 1 )					      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
7 28 LOAD_CONST 2 ( 0 )					      								    								  
30 STORE_FAST 6 ( j )					      								    								  
							      								    								  
8 32 SETUP_LOOP 82 ( to 116 )				      								    								  
>> 34 LOAD_FAST 5 ( i )					      								    								  
36 LOAD_FAST 2 ( n )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 114				      								    								  
42 LOAD_FAST 6 ( j )					      								    								  
44 LOAD_FAST 2 ( n )					      								    								  
46 COMPARE_OP 0 ( < )					      								    								  
48 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
9 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 1 ( dep )					      								    								  
58 LOAD_FAST 6 ( j )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
10 66 LOAD_FAST 3 ( plat_needed )			      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 INPLACE_ADD						      								    								  
72 STORE_FAST 3 ( plat_needed )				      								    								  
							      								    								  
11 74 LOAD_FAST 5 ( i )					      								    								  
76 LOAD_CONST 1 ( 1 )					      								    								  
78 INPLACE_ADD						      								    								  
80 STORE_FAST 5 ( i )					      								    								  
							      								    								  
12 82 LOAD_FAST 3 ( plat_needed )			      								    								  
84 LOAD_FAST 4 ( result )				      								    								  
86 COMPARE_OP 4 ( > )					      								    								  
88 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
13 90 LOAD_FAST 3 ( plat_needed )			      								    								  
92 STORE_FAST 4 ( result )				      								    								  
94 JUMP_ABSOLUTE 34					      								    								  
							      								    								  
15 >> 96 LOAD_FAST 3 ( plat_needed )			      								    								  
98 LOAD_CONST 1 ( 1 )					      								    								  
100 INPLACE_SUBTRACT					      								    								  
102 STORE_FAST 3 ( plat_needed )			      								    								  
							      								    								  
16 104 LOAD_FAST 6 ( j )				      								    								  
106 LOAD_CONST 1 ( 1 )					      								    								  
108 INPLACE_ADD						      								    								  
110 STORE_FAST 6 ( j )					      								    								  
>> 112 JUMP_ABSOLUTE 34					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
17 >> 116 LOAD_FAST 4 ( result )			      								    								  
118 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY     FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	    FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY
--							      --							    --								  --
Disassembly of <code object printPrevSmaller at 0x7f33e264493 def printPrevSmaller ( arr , n ) :			    def printPrevSmaller ( arr , n , n , n , n , n , n , n , n ,  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "_, " , end = "" )				    								  
2 LOAD_CONST 1 ( '_, ' )				      	  for i in range ( 1 , n ) :				    								  
4 LOAD_CONST 2 ( '' )					      	      for j in range ( i - 1 , - 2 , - 1 ) :		    								  
6 LOAD_CONST 3 ( ( 'end' , ) )				      		  if ( arr [ j ] < arr [ i ] ) :		    								  
8 CALL_FUNCTION_KW 2					      		      print ( arr [ j ] , ", " , end = "" )	    								  
10 POP_TOP						      		      break					    								  
							      	      if ( j == - 1 ) :					    								  
3 12 SETUP_LOOP 100 ( to 114 )				      		  print ( "_, " , end = "" )			    								  
14 LOAD_GLOBAL 1 ( range )				      								    								  
16 LOAD_CONST 4 ( 1 )					      								    								  
18 LOAD_FAST 1 ( n )					      								    								  
20 CALL_FUNCTION 2					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 86 ( to 112 )				      								    								  
26 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 28 SETUP_LOOP 60 ( to 90 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_FAST 2 ( i )					      								    								  
34 LOAD_CONST 4 ( 1 )					      								    								  
36 BINARY_SUBTRACT					      								    								  
38 LOAD_CONST 5 ( - 2 )					      								    								  
40 LOAD_CONST 6 ( - 1 )					      								    								  
42 CALL_FUNCTION 3					      								    								  
44 GET_ITER						      								    								  
>> 46 FOR_ITER 40 ( to 88 )				      								    								  
48 STORE_FAST 3 ( j )					      								    								  
							      								    								  
5 50 LOAD_FAST 0 ( arr )				      								    								  
52 LOAD_FAST 3 ( j )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 0 ( arr )					      								    								  
58 LOAD_FAST 2 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 COMPARE_OP 0 ( < )					      								    								  
64 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 66 LOAD_GLOBAL 0 ( print )				      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 3 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 7 ( ', ' )				      								    								  
76 LOAD_CONST 2 ( '' )					      								    								  
78 LOAD_CONST 3 ( ( 'end' , ) )				      								    								  
80 CALL_FUNCTION_KW 3					      								    								  
82 POP_TOP						      								    								  
							      								    								  
7 84 BREAK_LOOP						      								    								  
86 JUMP_ABSOLUTE 46					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
8 >> 90 LOAD_FAST 3 ( j )				      								    								  
92 LOAD_CONST 6 ( - 1 )					      								    								  
94 COMPARE_OP 2 ( == )					      								    								  
96 POP_JUMP_IF_FALSE 24					      								    								  
							      								    								  
9 98 LOAD_GLOBAL 0 ( print )				      								    								  
100 LOAD_CONST 1 ( '_, ' )				      								    								  
102 LOAD_CONST 2 ( '' )					      								    								  
104 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 24					      								    								  
>> 112 POP_BLOCK					      								    								  
>> 114 LOAD_CONST 0 ( None )				      								    								  
116 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ARRI					      REARRANGE_ARRAY_ARRI					    REARRANGE_ARRAY_ARRI					  REARRANGE_ARRAY_ARRI
--							      --							    --								  --
Disassembly of <code object fix at 0x7f33e2653f60, file "<dis def fix ( A , len ) :					    def fix ( A , len , len ) :					  script_not_found : None
2 0 SETUP_LOOP 128 ( to 130 )				      	  for i in range ( 0 , len ) :				    	for i in range ( 0 , len ( A ) ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      if ( A [ i ] != - 1 and A [ i ] != i ) :		    	    if A [ i ] != A [ i ] and A [ i ] != A [ i ] and A [  
4 LOAD_CONST 1 ( 0 )					      		  x = A [ i ] ;					    								  
6 LOAD_FAST 1 ( len )					      		  while ( A [ x ] != - 1 and A [ x ] != x ) :	    								  
8 CALL_FUNCTION 2					      		      y = A [ x ]				    								  
10 GET_ITER						      		      A [ x ] = x				    								  
>> 12 FOR_ITER 114 ( to 128 )				      		      x = y					    								  
14 STORE_FAST 2 ( i )					      		  A [ x ] = x ;					    								  
							      		  if ( A [ i ] != i ) :				    								  
3 16 LOAD_FAST 0 ( A )					      		      A [ i ] = - 1 ;				    								  
18 LOAD_FAST 2 ( i )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_CONST 2 ( - 1 )					      								    								  
24 COMPARE_OP 3 ( != )					      								    								  
26 POP_JUMP_IF_FALSE 12					      								    								  
28 LOAD_FAST 0 ( A )					      								    								  
30 LOAD_FAST 2 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_FAST 2 ( i )					      								    								  
36 COMPARE_OP 3 ( != )					      								    								  
38 POP_JUMP_IF_FALSE 12					      								    								  
							      								    								  
4 40 LOAD_FAST 0 ( A )					      								    								  
42 LOAD_FAST 2 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 STORE_FAST 3 ( x )					      								    								  
							      								    								  
5 48 SETUP_LOOP 48 ( to 98 )				      								    								  
>> 50 LOAD_FAST 0 ( A )					      								    								  
52 LOAD_FAST 3 ( x )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 2 ( - 1 )					      								    								  
58 COMPARE_OP 3 ( != )					      								    								  
60 POP_JUMP_IF_FALSE 96					      								    								  
62 LOAD_FAST 0 ( A )					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 3 ( x )					      								    								  
70 COMPARE_OP 3 ( != )					      								    								  
72 POP_JUMP_IF_FALSE 96					      								    								  
							      								    								  
6 74 LOAD_FAST 0 ( A )					      								    								  
76 LOAD_FAST 3 ( x )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 4 ( y )					      								    								  
							      								    								  
7 82 LOAD_FAST 3 ( x )					      								    								  
84 LOAD_FAST 0 ( A )					      								    								  
86 LOAD_FAST 3 ( x )					      								    								  
88 STORE_SUBSCR						      								    								  
							      								    								  
8 90 LOAD_FAST 4 ( y )					      								    								  
92 STORE_FAST 3 ( x )					      								    								  
94 JUMP_ABSOLUTE 50					      								    								  
>> 96 POP_BLOCK						      								    								  
							      								    								  
9 >> 98 LOAD_FAST 3 ( x )				      								    								  
100 LOAD_FAST 0 ( A )					      								    								  
102 LOAD_FAST 3 ( x )					      								    								  
104 STORE_SUBSCR					      								    								  
							      								    								  
10 106 LOAD_FAST 0 ( A )				      								    								  
108 LOAD_FAST 2 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_FAST 2 ( i )					      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 12				      								    								  
							      								    								  
11 118 LOAD_CONST 2 ( - 1 )				      								    								  
120 LOAD_FAST 0 ( A )					      								    								  
122 LOAD_FAST 2 ( i )					      								    								  
124 STORE_SUBSCR					      								    								  
126 JUMP_ABSOLUTE 12					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT	      REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		    REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		  REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT
--							      --							    --								  --
Disassembly of <code object solve at 0x7f33e2644f60, file "<d def solve ( dp , a , low , high , turn ) :		    def solve ( dp , low , high , high , high ) :		  script_not_found : None
2 0 LOAD_FAST 2 ( low )					      	  if ( low == high ) :					    	if low == high :					  
2 LOAD_FAST 3 ( high )					      	      return a [ low ] * turn				    	    return low [ low ] * low				  
4 COMPARE_OP 2 ( == )					      	  if ( dp [ low ] [ high ] != 0 ) :			    	else :							  
6 POP_JUMP_IF_FALSE 20					      	      return dp [ low ] [ high ]			    	    return ( - low ) * ( ( - low ) * low )		  
							      	  dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp 								  
3 8 LOAD_FAST 1 ( a )					      	  return dp [ low ] [ high ]				    								  
10 LOAD_FAST 2 ( low )					      								    								  
12 BINARY_SUBSCR					      								    								  
14 LOAD_FAST 4 ( turn )					      								    								  
16 BINARY_MULTIPLY					      								    								  
18 RETURN_VALUE						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( dp )				      								    								  
22 LOAD_FAST 2 ( low )					      								    								  
24 BINARY_SUBSCR					      								    								  
26 LOAD_FAST 3 ( high )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 COMPARE_OP 3 ( != )					      								    								  
34 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 36 LOAD_FAST 0 ( dp )					      								    								  
38 LOAD_FAST 2 ( low )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 3 ( high )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 RETURN_VALUE						      								    								  
							      								    								  
6 >> 48 LOAD_GLOBAL 0 ( max )				      								    								  
50 LOAD_FAST 1 ( a )					      								    								  
52 LOAD_FAST 2 ( low )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 4 ( turn )					      								    								  
58 BINARY_MULTIPLY					      								    								  
60 LOAD_GLOBAL 1 ( solve )				      								    								  
62 LOAD_FAST 0 ( dp )					      								    								  
64 LOAD_FAST 1 ( a )					      								    								  
66 LOAD_FAST 2 ( low )					      								    								  
68 LOAD_CONST 2 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 LOAD_FAST 3 ( high )					      								    								  
74 LOAD_FAST 4 ( turn )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 CALL_FUNCTION 5					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_FAST 1 ( a )					      								    								  
86 LOAD_FAST 3 ( high )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 4 ( turn )					      								    								  
92 BINARY_MULTIPLY					      								    								  
94 LOAD_GLOBAL 1 ( solve )				      								    								  
96 LOAD_FAST 0 ( dp )					      								    								  
98 LOAD_FAST 1 ( a )					      								    								  
100 LOAD_FAST 2 ( low )					      								    								  
102 LOAD_FAST 3 ( high )				      								    								  
104 LOAD_CONST 2 ( 1 )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_FAST 4 ( turn )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 CALL_FUNCTION 5					      								    								  
116 BINARY_ADD						      								    								  
118 CALL_FUNCTION 2					      								    								  
120 LOAD_FAST 0 ( dp )					      								    								  
122 LOAD_FAST 2 ( low )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 3 ( high )				      								    								  
128 STORE_SUBSCR					      								    								  
							      								    								  
7 130 LOAD_FAST 0 ( dp )				      								    								  
132 LOAD_FAST 2 ( low )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 LOAD_FAST 3 ( high )				      								    								  
138 BINARY_SUBSCR					      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY
--							      --							    --								  --
Disassembly of <code object findPair at 0x7f33e2644930, file  def findPair ( arr , n ) :				    def findPair ( s , 0x70x70x74930 ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( False )				      	  found = False						    	found = False						  
2 STORE_FAST 2 ( found )				      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , s ) :				  
							      	      for j in range ( i + 1 , n ) :			    	    if s == 0x0x70x74930 :				  
3 4 SETUP_LOOP 108 ( to 114 )				      		  for k in range ( 0 , n ) :			    		found = True					  
6 LOAD_GLOBAL 0 ( range )				      		      if ( arr [ i ] + arr [ j ] == arr [ k ] ) :   		break						  
8 LOAD_CONST 2 ( 0 )					      			  print ( arr [ i ] , arr [ j ] )	    	found = True						  
10 LOAD_FAST 1 ( n )					      			  found = True				    	for i in range ( 0 , s ) :				  
12 CALL_FUNCTION 2					      	  if ( found == False ) :				    	    found = True					  
14 GET_ITER						      	      print ( "Not exist" )				    	    if s == 0x0x70x74930 :				  
>> 16 FOR_ITER 94 ( to 112 )				      								    		found = True					  
18 STORE_FAST 3 ( i )					      								    		break						  
							      								    	found = True						  
4 20 SETUP_LOOP 88 ( to 110 )				      								    	break							  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 70 ( to 108 )				      								    								  
38 STORE_FAST 4 ( j )					      								    								  
							      								    								  
5 40 SETUP_LOOP 64 ( to 106 )				      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_CONST 2 ( 0 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 50 ( to 104 )				      								    								  
54 STORE_FAST 5 ( k )					      								    								  
							      								    								  
6 56 LOAD_FAST 0 ( arr )				      								    								  
58 LOAD_FAST 3 ( i )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 4 ( j )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 BINARY_ADD						      								    								  
70 LOAD_FAST 0 ( arr )					      								    								  
72 LOAD_FAST 5 ( k )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 COMPARE_OP 2 ( == )					      								    								  
78 POP_JUMP_IF_FALSE 52					      								    								  
							      								    								  
7 80 LOAD_GLOBAL 1 ( print )				      								    								  
82 LOAD_FAST 0 ( arr )					      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 0 ( arr )					      								    								  
90 LOAD_FAST 4 ( j )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 POP_TOP						      								    								  
							      								    								  
8 98 LOAD_CONST 4 ( True )				      								    								  
100 STORE_FAST 2 ( found )				      								    								  
102 JUMP_ABSOLUTE 52					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 36					      								    								  
>> 108 POP_BLOCK					      								    								  
>> 110 JUMP_ABSOLUTE 16					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
9 >> 114 LOAD_FAST 2 ( found )				      								    								  
116 LOAD_CONST 1 ( False )				      								    								  
118 COMPARE_OP 2 ( == )					      								    								  
120 POP_JUMP_IF_FALSE 130				      								    								  
							      								    								  
10 122 LOAD_GLOBAL 1 ( print )				      								    								  
124 LOAD_CONST 5 ( 'Not exist' )			      								    								  
126 CALL_FUNCTION 1					      								    								  
128 POP_TOP						      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT					      MAJORITY_ELEMENT						    MAJORITY_ELEMENT						  MAJORITY_ELEMENT
--							      --							    --								  --
Disassembly of <code object findMajority at 0x7f33e26494b0, f def findMajority ( arr , n ) :				    def findMajens ( arr , 0x70x70x70x70x70x70x70x70x70x70x70x70x script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  maxCount = 0 ;					    								  
2 STORE_FAST 2 ( maxCount )				      	  index = - 1						    								  
							      	  for i in range ( n ) :				    								  
3 4 LOAD_CONST 2 ( - 1 )				      	      count = 0						    								  
6 STORE_FAST 3 ( index )				      	      for j in range ( n ) :				    								  
							      		  if ( arr [ i ] == arr [ j ] ) :		    								  
4 8 SETUP_LOOP 78 ( to 88 )				      		      count += 1				    								  
10 LOAD_GLOBAL 0 ( range )				      	      if ( count > maxCount ) :				    								  
12 LOAD_FAST 1 ( n )					      		  maxCount = count				    								  
14 CALL_FUNCTION 1					      		  index = i					    								  
16 GET_ITER						      	  if ( maxCount > n // 2 ) :				    								  
>> 18 FOR_ITER 66 ( to 86 )				      	      print ( arr [ index ] )				    								  
20 STORE_FAST 4 ( i )					      	  else :						    								  
							      	      print ( "No Majority Element" )			    								  
5 22 LOAD_CONST 1 ( 0 )					      								    								  
24 STORE_FAST 5 ( count )				      								    								  
							      								    								  
6 26 SETUP_LOOP 40 ( to 68 )				      								    								  
28 LOAD_GLOBAL 0 ( range )				      								    								  
30 LOAD_FAST 1 ( n )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 28 ( to 66 )				      								    								  
38 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 6 ( j )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 COMPARE_OP 2 ( == )					      								    								  
54 POP_JUMP_IF_FALSE 36					      								    								  
							      								    								  
8 56 LOAD_FAST 5 ( count )				      								    								  
58 LOAD_CONST 3 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 5 ( count )				      								    								  
64 JUMP_ABSOLUTE 36					      								    								  
>> 66 POP_BLOCK						      								    								  
							      								    								  
9 >> 68 LOAD_FAST 5 ( count )				      								    								  
70 LOAD_FAST 2 ( maxCount )				      								    								  
72 COMPARE_OP 4 ( > )					      								    								  
74 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
10 76 LOAD_FAST 5 ( count )				      								    								  
78 STORE_FAST 2 ( maxCount )				      								    								  
							      								    								  
11 80 LOAD_FAST 4 ( i )					      								    								  
82 STORE_FAST 3 ( index )				      								    								  
84 JUMP_ABSOLUTE 18					      								    								  
>> 86 POP_BLOCK						      								    								  
							      								    								  
12 >> 88 LOAD_FAST 2 ( maxCount )			      								    								  
90 LOAD_FAST 1 ( n )					      								    								  
92 LOAD_CONST 4 ( 2 )					      								    								  
94 BINARY_FLOOR_DIVIDE					      								    								  
96 COMPARE_OP 4 ( > )					      								    								  
98 POP_JUMP_IF_FALSE 114				      								    								  
							      								    								  
13 100 LOAD_GLOBAL 1 ( print )				      								    								  
102 LOAD_FAST 0 ( arr )					      								    								  
104 LOAD_FAST 3 ( index )				      								    								  
106 BINARY_SUBSCR					      								    								  
108 CALL_FUNCTION 1					      								    								  
110 POP_TOP						      								    								  
112 JUMP_FORWARD 8 ( to 122 )				      								    								  
							      								    								  
15 >> 114 LOAD_GLOBAL 1 ( print )			      								    								  
116 LOAD_CONST 5 ( 'No Majority Element' )		      								    								  
118 CALL_FUNCTION 1					      								    								  
120 POP_TOP						      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS	  COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS
--							      --							    --								  --
Disassembly of <code object chordCnt at 0x7f33e2653ed0, file  def chordCnt ( A ) :					    def chordCnt ( A , B , C , C , C , C , C , C , C , C , C , C  script_not_found : None
2 0 LOAD_CONST 1 ( 2 )					      	  n = 2 * A						    								  
2 LOAD_FAST 0 ( A )					      	  dpArray = [ 0 ] * ( n + 1 )				    								  
4 BINARY_MULTIPLY					      	  dpArray [ 0 ] = 1					    								  
6 STORE_FAST 1 ( n )					      	  dpArray [ 2 ] = 1					    								  
							      	  for i in range ( 4 , n + 1 , 2 ) :			    								  
3 8 LOAD_CONST 2 ( 0 )					      	      for j in range ( 0 , i - 1 , 2 ) :		    								  
10 BUILD_LIST 1						      		  dpArray [ i ] += ( dpArray [ j ] * dpArray [ i -  								  
12 LOAD_FAST 1 ( n )					      	  return int ( dpArray [ n ] )				    								  
14 LOAD_CONST 3 ( 1 )					      								    								  
16 BINARY_ADD						      								    								  
18 BINARY_MULTIPLY					      								    								  
20 STORE_FAST 2 ( dpArray )				      								    								  
							      								    								  
4 22 LOAD_CONST 3 ( 1 )					      								    								  
24 LOAD_FAST 2 ( dpArray )				      								    								  
26 LOAD_CONST 2 ( 0 )					      								    								  
28 STORE_SUBSCR						      								    								  
							      								    								  
5 30 LOAD_CONST 3 ( 1 )					      								    								  
32 LOAD_FAST 2 ( dpArray )				      								    								  
34 LOAD_CONST 1 ( 2 )					      								    								  
36 STORE_SUBSCR						      								    								  
							      								    								  
6 38 SETUP_LOOP 86 ( to 126 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_CONST 4 ( 4 )					      								    								  
44 LOAD_FAST 1 ( n )					      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_CONST 1 ( 2 )					      								    								  
52 CALL_FUNCTION 3					      								    								  
54 GET_ITER						      								    								  
>> 56 FOR_ITER 66 ( to 124 )				      								    								  
58 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 60 SETUP_LOOP 60 ( to 122 )				      								    								  
62 LOAD_GLOBAL 0 ( range )				      								    								  
64 LOAD_CONST 2 ( 0 )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 LOAD_CONST 3 ( 1 )					      								    								  
70 BINARY_SUBTRACT					      								    								  
72 LOAD_CONST 1 ( 2 )					      								    								  
74 CALL_FUNCTION 3					      								    								  
76 GET_ITER						      								    								  
>> 78 FOR_ITER 40 ( to 120 )				      								    								  
80 STORE_FAST 4 ( j )					      								    								  
							      								    								  
8 82 LOAD_FAST 2 ( dpArray )				      								    								  
84 LOAD_FAST 3 ( i )					      								    								  
86 DUP_TOP_TWO						      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 2 ( dpArray )				      								    								  
92 LOAD_FAST 4 ( j )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_FAST 2 ( dpArray )				      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 LOAD_CONST 1 ( 2 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 LOAD_FAST 4 ( j )					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 BINARY_SUBSCR					      								    								  
110 BINARY_MULTIPLY					      								    								  
112 INPLACE_ADD						      								    								  
114 ROT_THREE						      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 78					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 56					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
9 >> 126 LOAD_GLOBAL 1 ( int )				      								    								  
128 LOAD_FAST 2 ( dpArray )				      								    								  
130 LOAD_FAST 1 ( n )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 CALL_FUNCTION 1					      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED	  CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED
--							      --							    --								  --
Disassembly of <code object areElementsContiguous at 0x7f33e2 def areElementsContiguous ( arr , n ) :			    def aressContititititif60 f60 ( arr , start = 0 ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( max )				      	  max1 = max ( arr )					    	max1 = max ( start )					  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( arr )					      	  min1 = min ( arr )					    	if max1 < start :					  alid/CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPL
4 CALL_FUNCTION 1					      	  m = max1 - min1 + 1					    	    max1 = max1 [ 0 ]					  ICATES_ALLOWED.py", line 32	  def f_filled f60 (
6 STORE_FAST 2 ( max1 )					      	  if ( m > n ) :					    	if max1 < start :					   arr , start = 0 ) :			  ^ SyntaxEr
							      	      return False					    	    max1 = max1 [ 0 ]					  ror: invalid syntax
3 8 LOAD_GLOBAL 1 ( min )				      	  visited = [ 0 ] * m					    	if max1 < start :					  
10 LOAD_FAST 0 ( arr )					      	  for i in range ( 0 , n ) :				    	    max1 = max1 [ 0 ]					  
12 CALL_FUNCTION 1					      	      visited [ arr [ i ] - min1 ] = True		    	if max1 < start :					  
14 STORE_FAST 3 ( min1 )				      	  for i in range ( 0 , m ) :				    	    max1 = max1 [ 0 ]					  
							      	      if ( visited [ i ] == False ) :			    	if max1 < max1 :					  
4 16 LOAD_FAST 2 ( max1 )				      		  return False					    	    max1 = max1 [ 0 ] + max1 [ 0 ]			  
18 LOAD_FAST 3 ( min1 )					      	  return True						    	if max1 < start :					  
20 BINARY_SUBTRACT					      								    	    max1 = max1 [ 0 ] + max1 [ 0 ]			  
22 LOAD_CONST 1 ( 1 )					      								    	if max1 < start :					  
24 BINARY_ADD						      								    	    max1 = max1 [ 0 ] + max1 [ 0 ]			  
26 STORE_FAST 4 ( m )					      								    	if max1 < start :					  
							      								    	    max1 = max1 [ 0 ] + max1 [ 0 ]			  
5 28 LOAD_FAST 4 ( m )					      								    	if max1 < start :					  
30 LOAD_FAST 1 ( n )					      								    	    max1 = max1 [ 0 ] + max1 [ 0 ]			  
32 COMPARE_OP 4 ( > )					      								    	if max1 < start :					  
34 POP_JUMP_IF_FALSE 40					      								    	    max1 = max1 + max1					  
							      								    	if max1 < start :					  
6 36 LOAD_CONST 2 ( False )				      								    	    max1 = max1 + max1					  
38 RETURN_VALUE						      								    	if max1 < start :					  
							      								    	    max1 = max1 + max1					  
7 >> 40 LOAD_CONST 3 ( 0 )				      								    	if max1 < start :					  
42 BUILD_LIST 1						      								    	    max1 = max1 + max1					  
44 LOAD_FAST 4 ( m )					      								    	if max1 < start :					  
46 BINARY_MULTIPLY					      								    	    max1 = max1 + max1					  
48 STORE_FAST 5 ( visited )				      								    	if max1 < start :					  
							      								    	    max1 = max1 + max1					  
8 50 SETUP_LOOP 34 ( to 86 )				      								    	if max1 < start :					  
52 LOAD_GLOBAL 2 ( range )				      								    	    max1 = max1 + max1					  
54 LOAD_CONST 3 ( 0 )					      								    	if max1 < start :					  
56 LOAD_FAST 1 ( n )					      								    	    max1 = max1 + max1					  
58 CALL_FUNCTION 2					      								    	if max1 < start :					  
60 GET_ITER						      								    	    max1 = max1 + max1					  
>> 62 FOR_ITER 20 ( to 84 )				      								    	if max1 > max1 :					  
64 STORE_FAST 6 ( i )					      								    	    max1 = max1 [ 0 ] + max1 [ 0 ] + max1 [ 0 ]		  
							      								    	else :							  
9 66 LOAD_CONST 4 ( True )				      								    	    max1 = max1 + max1					  
68 LOAD_FAST 5 ( visited )				      								    	if max1 < start :					  
70 LOAD_FAST 0 ( arr )					      								    	    max1 = max1 [ 0 ] + max1 [ 0 ]			  
72 LOAD_FAST 6 ( i )					      								    	if max1 < start :					  
74 BINARY_SUBSCR					      								    	    max1 = max1 [ 0 ] + max1 [ 1 ] + max1 [ 0 ] + max1 [  
76 LOAD_FAST 3 ( min1 )					      								    	return max1						  
78 BINARY_SUBTRACT					      								    								  
80 STORE_SUBSCR						      								    								  
82 JUMP_ABSOLUTE 62					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 SETUP_LOOP 34 ( to 122 )			      								    								  
88 LOAD_GLOBAL 2 ( range )				      								    								  
90 LOAD_CONST 3 ( 0 )					      								    								  
92 LOAD_FAST 4 ( m )					      								    								  
94 CALL_FUNCTION 2					      								    								  
96 GET_ITER						      								    								  
>> 98 FOR_ITER 20 ( to 120 )				      								    								  
100 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 102 LOAD_FAST 5 ( visited )				      								    								  
104 LOAD_FAST 6 ( i )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_CONST 2 ( False )				      								    								  
110 COMPARE_OP 2 ( == )					      								    								  
112 POP_JUMP_IF_FALSE 98				      								    								  
							      								    								  
12 114 LOAD_CONST 2 ( False )				      								    								  
116 RETURN_VALUE					      								    								  
118 JUMP_ABSOLUTE 98					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
13 >> 122 LOAD_CONST 4 ( True )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1
--							      --							    --								  --
Disassembly of <code object maxLen at 0x7f33e2653ed0, file "< def maxLen ( arr ) :					    def maxLen ( arr , size = None , dtype = '' ) :		  script_not_found : None
2 0 BUILD_MAP 0						      	  hash_map = { }					    	hash_map = { }						  
2 STORE_FAST 1 ( hash_map )				      	  max_len = 0						    	max_len = 0						  
							      	  curr_sum = 0						    	max_len = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  for i in range ( len ( arr ) ) :			    	max_len = 0						  
6 STORE_FAST 2 ( max_len )				      	      curr_sum += arr [ i ]				    	max_len = 0						  
							      	      if arr [ i ] is 0 and max_len is 0 :		    	max_len = 0						  
4 8 LOAD_CONST 1 ( 0 )					      		  max_len = 1					    	max_len = 0						  
10 STORE_FAST 3 ( curr_sum )				      	      if curr_sum is 0 :				    	max_len = max_len					  
							      		  max_len = i + 1				    	max_len = max_len					  
5 12 SETUP_LOOP 108 ( to 122 )				      	      if curr_sum in hash_map :				    	max_len = max_len					  
14 LOAD_GLOBAL 0 ( range )				      		  max_len = max ( max_len , i - hash_map [ curr_sum 	max_len = max_len					  
16 LOAD_GLOBAL 1 ( len )				      	      else :						    	max_len = max_len					  
18 LOAD_FAST 0 ( arr )					      		  hash_map [ curr_sum ] = i			    	max_len = max_len					  
20 CALL_FUNCTION 1					      	  return max_len					    	if max_len is not None :				  
22 CALL_FUNCTION 1					      								    	    max_len = max_len					  
24 GET_ITER						      								    	max_len = max_len					  
>> 26 FOR_ITER 92 ( to 120 )				      								    	max_len = max_len					  
28 STORE_FAST 4 ( i )					      								    if max_len is not None :					  
							      								    	max_len = max_len					  
6 30 LOAD_FAST 3 ( curr_sum )				      								    max_len = max_len						  
32 LOAD_FAST 0 ( arr )					      								    max_len = max_len						  
34 LOAD_FAST 4 ( i )					      								    max_len = max_len						  
36 BINARY_SUBSCR					      								    								  
38 INPLACE_ADD						      								    								  
40 STORE_FAST 3 ( curr_sum )				      								    								  
							      								    								  
7 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 4 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_CONST 1 ( 0 )					      								    								  
50 COMPARE_OP 8 ( is )					      								    								  
52 POP_JUMP_IF_FALSE 66					      								    								  
54 LOAD_FAST 2 ( max_len )				      								    								  
56 LOAD_CONST 1 ( 0 )					      								    								  
58 COMPARE_OP 8 ( is )					      								    								  
60 POP_JUMP_IF_FALSE 66					      								    								  
							      								    								  
8 62 LOAD_CONST 2 ( 1 )					      								    								  
64 STORE_FAST 2 ( max_len )				      								    								  
							      								    								  
9 >> 66 LOAD_FAST 3 ( curr_sum )			      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 8 ( is )					      								    								  
72 POP_JUMP_IF_FALSE 82					      								    								  
							      								    								  
10 74 LOAD_FAST 4 ( i )					      								    								  
76 LOAD_CONST 2 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 STORE_FAST 2 ( max_len )				      								    								  
							      								    								  
11 >> 82 LOAD_FAST 3 ( curr_sum )			      								    								  
84 LOAD_FAST 1 ( hash_map )				      								    								  
86 COMPARE_OP 6 ( in )					      								    								  
88 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
12 90 LOAD_GLOBAL 2 ( max )				      								    								  
92 LOAD_FAST 2 ( max_len )				      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 LOAD_FAST 1 ( hash_map )				      								    								  
98 LOAD_FAST 3 ( curr_sum )				      								    								  
100 BINARY_SUBSCR					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 2					      								    								  
106 STORE_FAST 2 ( max_len )				      								    								  
108 JUMP_ABSOLUTE 26					      								    								  
							      								    								  
14 >> 110 LOAD_FAST 4 ( i )				      								    								  
112 LOAD_FAST 1 ( hash_map )				      								    								  
114 LOAD_FAST 3 ( curr_sum )				      								    								  
116 STORE_SUBSCR					      								    								  
118 JUMP_ABSOLUTE 26					      								    								  
>> 120 POP_BLOCK					      								    								  
							      								    								  
15 >> 122 LOAD_FAST 2 ( max_len )			      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1
--							      --							    --								  --
Disassembly of <code object printPrevSmaller at 0x7f33e264493 def printPrevSmaller ( arr , n ) :			    def printPrevSmaller ( arr ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  S = list ( )						    	S = list ( )						  
2 CALL_FUNCTION 0					      	  for i in range ( n ) :				    	for i in range ( len ( arr ) ) :			  
4 STORE_FAST 2 ( S )					      	      while ( len ( S ) > 0 and S [ - 1 ] >= arr [ i ] ) :  	    for i in range ( len ( arr ) ) :			  
							      		  S.pop ( )					    		if i >= 0 :					  
3 6 SETUP_LOOP 114 ( to 122 )				      	      if ( len ( S ) == 0 ) :				    		    S [ i ] = i					  
8 LOAD_GLOBAL 1 ( range )				      		  print ( "_, " , end = "" )			    								  
10 LOAD_FAST 1 ( n )					      	      else :						    								  
12 CALL_FUNCTION 1					      		  print ( S [ - 1 ] , end = ", " )		    								  
14 GET_ITER						      	      S.append ( arr [ i ] )				    								  
>> 16 FOR_ITER 102 ( to 120 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 20 SETUP_LOOP 40 ( to 62 )				      								    								  
>> 22 LOAD_GLOBAL 2 ( len )				      								    								  
24 LOAD_FAST 2 ( S )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_CONST 1 ( 0 )					      								    								  
30 COMPARE_OP 4 ( > )					      								    								  
32 POP_JUMP_IF_FALSE 60					      								    								  
34 LOAD_FAST 2 ( S )					      								    								  
36 LOAD_CONST 2 ( - 1 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_FAST 0 ( arr )					      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 COMPARE_OP 5 ( >= )					      								    								  
48 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
5 50 LOAD_FAST 2 ( S )					      								    								  
52 LOAD_METHOD 3 ( pop )				      								    								  
54 CALL_METHOD 0					      								    								  
56 POP_TOP						      								    								  
58 JUMP_ABSOLUTE 22					      								    								  
>> 60 POP_BLOCK						      								    								  
							      								    								  
6 >> 62 LOAD_GLOBAL 2 ( len )				      								    								  
64 LOAD_FAST 2 ( S )					      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_CONST 1 ( 0 )					      								    								  
70 COMPARE_OP 2 ( == )					      								    								  
72 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
7 74 LOAD_GLOBAL 4 ( print )				      								    								  
76 LOAD_CONST 3 ( '_, ' )				      								    								  
78 LOAD_CONST 4 ( '' )					      								    								  
80 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
82 CALL_FUNCTION_KW 2					      								    								  
84 POP_TOP						      								    								  
86 JUMP_FORWARD 16 ( to 104 )				      								    								  
							      								    								  
9 >> 88 LOAD_GLOBAL 4 ( print )				      								    								  
90 LOAD_FAST 2 ( S )					      								    								  
92 LOAD_CONST 2 ( - 1 )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 LOAD_CONST 6 ( ', ' )				      								    								  
98 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
100 CALL_FUNCTION_KW 2					      								    								  
102 POP_TOP						      								    								  
							      								    								  
10 >> 104 LOAD_FAST 2 ( S )				      								    								  
106 LOAD_METHOD 5 ( append )				      								    								  
108 LOAD_FAST 0 ( arr )					      								    								  
110 LOAD_FAST 3 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 CALL_METHOD 1					      								    								  
116 POP_TOP						      								    								  
118 JUMP_ABSOLUTE 16					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 LOAD_CONST 0 ( None )				      								    								  
124 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1
--							      --							    --								  --
Disassembly of <code object areElementsContiguous at 0x7f33e2 def areElementsContiguous ( arr ) :			    def aressContitititif60 ( arr ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( set )				      	  us = set ( )						    	us = set ( )						  
2 CALL_FUNCTION 0					      	  for i in arr : us.add ( i )				    	for i in range ( 0 , arr.shape [ 1 ] ) :		  
4 STORE_FAST 1 ( us )					      	  count = 1						    	    if us.add ( us ) :					  
							      	  curr_ele = arr [ 0 ] - 1				    		return us					  
3 6 SETUP_LOOP 22 ( to 30 )				      	  while curr_ele in us :				    	return us						  
8 LOAD_FAST 0 ( arr )					      	      count += 1					    								  
10 GET_ITER						      	      curr_ele -= 1					    								  
>> 12 FOR_ITER 14 ( to 28 )				      	  curr_ele = arr [ 0 ] + 1				    								  
14 STORE_FAST 2 ( i )					      	  while curr_ele in us :				    								  
16 LOAD_FAST 1 ( us )					      	      count += 1					    								  
18 LOAD_METHOD 1 ( add )				      	      curr_ele += 1					    								  
20 LOAD_FAST 2 ( i )					      	  return ( count == len ( us ) )			    								  
22 CALL_METHOD 1					      								    								  
24 POP_TOP						      								    								  
26 JUMP_ABSOLUTE 12					      								    								  
>> 28 POP_BLOCK						      								    								  
							      								    								  
4 >> 30 LOAD_CONST 1 ( 1 )				      								    								  
32 STORE_FAST 3 ( count )				      								    								  
							      								    								  
5 34 LOAD_FAST 0 ( arr )				      								    								  
36 LOAD_CONST 2 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 LOAD_CONST 1 ( 1 )					      								    								  
42 BINARY_SUBTRACT					      								    								  
44 STORE_FAST 4 ( curr_ele )				      								    								  
							      								    								  
6 46 SETUP_LOOP 28 ( to 76 )				      								    								  
>> 48 LOAD_FAST 4 ( curr_ele )				      								    								  
50 LOAD_FAST 1 ( us )					      								    								  
52 COMPARE_OP 6 ( in )					      								    								  
54 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
7 56 LOAD_FAST 3 ( count )				      								    								  
58 LOAD_CONST 1 ( 1 )					      								    								  
60 INPLACE_ADD						      								    								  
62 STORE_FAST 3 ( count )				      								    								  
							      								    								  
8 64 LOAD_FAST 4 ( curr_ele )				      								    								  
66 LOAD_CONST 1 ( 1 )					      								    								  
68 INPLACE_SUBTRACT					      								    								  
70 STORE_FAST 4 ( curr_ele )				      								    								  
72 JUMP_ABSOLUTE 48					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 LOAD_FAST 0 ( arr )				      								    								  
78 LOAD_CONST 2 ( 0 )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 LOAD_CONST 1 ( 1 )					      								    								  
84 BINARY_ADD						      								    								  
86 STORE_FAST 4 ( curr_ele )				      								    								  
							      								    								  
10 88 SETUP_LOOP 28 ( to 118 )				      								    								  
>> 90 LOAD_FAST 4 ( curr_ele )				      								    								  
92 LOAD_FAST 1 ( us )					      								    								  
94 COMPARE_OP 6 ( in )					      								    								  
96 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
11 98 LOAD_FAST 3 ( count )				      								    								  
100 LOAD_CONST 1 ( 1 )					      								    								  
102 INPLACE_ADD						      								    								  
104 STORE_FAST 3 ( count )				      								    								  
							      								    								  
12 106 LOAD_FAST 4 ( curr_ele )				      								    								  
108 LOAD_CONST 1 ( 1 )					      								    								  
110 INPLACE_ADD						      								    								  
112 STORE_FAST 4 ( curr_ele )				      								    								  
114 JUMP_ABSOLUTE 90					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
13 >> 118 LOAD_FAST 3 ( count )				      								    								  
120 LOAD_GLOBAL 2 ( len )				      								    								  
122 LOAD_FAST 1 ( us )					      								    								  
124 CALL_FUNCTION 1					      								    								  
126 COMPARE_OP 2 ( == )					      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS			      SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				    SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				  SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS
--							      --							    --								  --
Disassembly of <code object count at 0x7f33e2644f60, file "<d def count ( n ) :						    def count ( n ) :						  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( n )					      	  if ( n < 4 ) :					    	if n < 4 :						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_CONST 1 ( 4 )					      	      return - 1					    	    return - 1						  alid/SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS.py", line 5
4 COMPARE_OP 0 ( < )					      	  rem = n % 4						    	rem = [ ]						  3	rem = rem [ : - 1 ] - q = q	     ^ Synta
6 POP_JUMP_IF_FALSE 12					      	  if ( rem == 0 ) :					    	rem = [ ]						  xError: can't assign to operator
							      	      return n // 4					    	rem = [ ]						  
3 8 LOAD_CONST 2 ( - 1 )				      	  if ( rem == 1 ) :					    	rem = [ ]						  
10 RETURN_VALUE						      	      if ( n < 9 ) :					    	rem = [ ]						  
							      		  return - 1					    	rem = [ ]						  
4 >> 12 LOAD_FAST 0 ( n )				      	      return ( n - 9 ) // 4 + 1				    	rem = [ ]						  
14 LOAD_CONST 1 ( 4 )					      	  if ( rem == 2 ) :					    	rem = [ ]						  
16 BINARY_MODULO					      	      return ( n - 6 ) // 4 + 1				    	rem = [ ]						  
18 STORE_FAST 1 ( rem )					      	  if ( rem == 3 ) :					    	rem = [ ]						  
							      	      if ( n < 15 ) :					    	rem = [ ]						  
5 20 LOAD_FAST 1 ( rem )				      		  return - 1					    	rem = rem [ : - 1 ]					  
22 LOAD_CONST 3 ( 0 )					      	      return ( n - 15 ) // 4 + 2			    	rem = [ ]						  
24 COMPARE_OP 2 ( == )					      								    	rem = rem [ : - 1 ]					  
26 POP_JUMP_IF_FALSE 36					      								    	rem = rem [ : - 1 ]					  
							      								    	rem = rem [ : - 1 ] - q = q				  
6 28 LOAD_FAST 0 ( n )					      								    	rem = rem [ : - 1 ]					  
30 LOAD_CONST 1 ( 4 )					      								    	rem = rem [ : - 1 ]					  
32 BINARY_FLOOR_DIVIDE					      								    	rem = rem [ : - 1 ]					  
34 RETURN_VALUE						      								    	rem = rem [ : - 1 ]					  
							      								    	rem = rem [ : - 1 ]					  
7 >> 36 LOAD_FAST 1 ( rem )				      								    	rem = rem [ : - 1 ]					  
38 LOAD_CONST 4 ( 1 )					      								    	rem = rem [ : - 1 ]					  
40 COMPARE_OP 2 ( == )					      								    	rem = rem [ : - 1 ]					  
42 POP_JUMP_IF_FALSE 72					      								    	rem = rem [ : - 1 ]					  
							      								    	rem = rem [ : - 1 ]					  
8 44 LOAD_FAST 0 ( n )					      								    	rem = rem [ : - 1 ]					  
46 LOAD_CONST 5 ( 9 )					      								    	rem = rem [ : - 1 ]					  
48 COMPARE_OP 0 ( < )					      								    	rem = rem [ : - 1 ]					  
50 POP_JUMP_IF_FALSE 56					      								    	rem = rem [ : - 1 ]					  
							      								    	rem = rem [ : - 1 ]					  
9 52 LOAD_CONST 2 ( - 1 )				      								    	rem = rem [ : - 1 ]					  
54 RETURN_VALUE						      								    	rem = rem [ : - 1 ]					  
							      								    	rem = rem [ : - 1 ]					  
10 >> 56 LOAD_FAST 0 ( n )				      								    	rem = rem [ : - 1 ]					  
58 LOAD_CONST 5 ( 9 )					      								    	rem = rem [ : - 1 ]					  
60 BINARY_SUBTRACT					      								    	rem = rem [ : - 1 ]					  
62 LOAD_CONST 1 ( 4 )					      								    	rem = rem [ : - 1 ]					  
64 BINARY_FLOOR_DIVIDE					      								    	rem = rem [ : - 1 ]					  
66 LOAD_CONST 4 ( 1 )					      								    	rem = rem [ : - 1 ]					  
68 BINARY_ADD						      								    	for i in range ( n - 1 ) :				  
70 RETURN_VALUE						      								    	    q = rem [ : - 1 ]					  
							      								    	    rem [ i - 1 ] += q					  
11 >> 72 LOAD_FAST 1 ( rem )				      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
74 LOAD_CONST 6 ( 2 )					      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
76 COMPARE_OP 2 ( == )					      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
78 POP_JUMP_IF_FALSE 96					      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
							      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
12 80 LOAD_FAST 0 ( n )					      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
82 LOAD_CONST 7 ( 6 )					      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
84 BINARY_SUBTRACT					      								    	    rem [ : - 1 ] += q [ : - 1 ]			  
86 LOAD_CONST 1 ( 4 )					      								    	    rem = rem [ : - 1 ]					  
88 BINARY_FLOOR_DIVIDE					      								    	    rem = rem [ : - 1 ]					  
90 LOAD_CONST 4 ( 1 )					      								    	    return rem , rem					  
92 BINARY_ADD						      								    								  
94 RETURN_VALUE						      								    								  
							      								    								  
13 >> 96 LOAD_FAST 1 ( rem )				      								    								  
98 LOAD_CONST 8 ( 3 )					      								    								  
100 COMPARE_OP 2 ( == )					      								    								  
102 POP_JUMP_IF_FALSE 132				      								    								  
							      								    								  
14 104 LOAD_FAST 0 ( n )				      								    								  
106 LOAD_CONST 9 ( 15 )					      								    								  
108 COMPARE_OP 0 ( < )					      								    								  
110 POP_JUMP_IF_FALSE 116				      								    								  
							      								    								  
15 112 LOAD_CONST 2 ( - 1 )				      								    								  
114 RETURN_VALUE					      								    								  
							      								    								  
16 >> 116 LOAD_FAST 0 ( n )				      								    								  
118 LOAD_CONST 9 ( 15 )					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 LOAD_CONST 1 ( 4 )					      								    								  
124 BINARY_FLOOR_DIVIDE					      								    								  
126 LOAD_CONST 6 ( 2 )					      								    								  
128 BINARY_ADD						      								    								  
130 RETURN_VALUE					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE_1					      RECAMANS_SEQUENCE_1					    RECAMANS_SEQUENCE_1						  RECAMANS_SEQUENCE_1
--							      --							    --								  --
Disassembly of <code object recaman at 0x7f33e26494b0, file " def recaman ( n ) :					    def recaman ( n , s , n , l ) :				  script_not_found : None
2 0 LOAD_FAST 0 ( n )					      	  if ( n <= 0 ) :					    	if n <= 0 :						  
2 LOAD_CONST 1 ( 0 )					      	      return						    	    return None						  
4 COMPARE_OP 1 ( <= )					      	  print ( 0 , "," , end = '' )				    	if l <= n :						  
6 POP_JUMP_IF_FALSE 12					      	  s = set ( [ ] )					    	    l = l						  
							      	  s.add ( 0 )						    	elif l <= n :						  
3 8 LOAD_CONST 0 ( None )				      	  prev = 0						    	    l = l						  
10 RETURN_VALUE						      	  for i in range ( 1 , n ) :				    	elif l <= n :						  
							      	      curr = prev - i					    	    l = l						  
4 >> 12 LOAD_GLOBAL 0 ( print )				      	      if ( curr < 0 or curr in s ) :			    	elif l <= n :						  
14 LOAD_CONST 1 ( 0 )					      		  curr = prev + i				    	    l = l						  
16 LOAD_CONST 2 ( ',' )					      	      s.add ( curr )					    	elif l <= n :						  
18 LOAD_CONST 3 ( '' )					      	      print ( curr , "," , end = '' )			    	    l = l						  
20 LOAD_CONST 4 ( ( 'end' , ) )				      	      prev = curr					    	elif l <= n :						  
22 CALL_FUNCTION_KW 3					      								    	    l = l						  
24 POP_TOP						      								    	elif l <= n :						  
							      								    	    l = l						  
5 26 LOAD_GLOBAL 1 ( set )				      								    	elif l <= n :						  
28 BUILD_LIST 0						      								    	    l = l						  
30 CALL_FUNCTION 1					      								    	elif l <= n :						  
32 STORE_FAST 1 ( s )					      								    	    l = l						  
							      								    	elif l <= n :						  
6 34 LOAD_FAST 1 ( s )					      								    	    l = l						  
36 LOAD_METHOD 2 ( add )				      								    	elif l <= n :						  
38 LOAD_CONST 1 ( 0 )					      								    	    l = l						  
40 CALL_METHOD 1					      								    	elif l <= n :						  
42 POP_TOP						      								    	    l = l						  
							      								    	elif l <= n :						  
7 44 LOAD_CONST 1 ( 0 )					      								    	    l = l						  
46 STORE_FAST 2 ( prev )				      								    	elif l <= n :						  
							      								    	    l = l						  
8 48 SETUP_LOOP 78 ( to 128 )				      								    	elif l <= n :						  
50 LOAD_GLOBAL 3 ( range )				      								    	    l = l						  
52 LOAD_CONST 5 ( 1 )					      								    	elif l <= n :						  
54 LOAD_FAST 0 ( n )					      								    	    l = l						  
56 CALL_FUNCTION 2					      								    	elif l <= n :						  
58 GET_ITER						      								    	    l = l						  
>> 60 FOR_ITER 64 ( to 126 )				      								    	elif l <= n :						  
62 STORE_FAST 3 ( i )					      								    	    l = l						  
							      								    	elif l <= n :						  
9 64 LOAD_FAST 2 ( prev )				      								    	    l -= 1						  
66 LOAD_FAST 3 ( i )					      								    	elif l <= n :						  
68 BINARY_SUBTRACT					      								    	    l -= 1						  
70 STORE_FAST 4 ( curr )				      								    	elif l <= n :						  
							      								    	    l -= 1						  
10 72 LOAD_FAST 4 ( curr )				      								    	elif l <= n :						  
74 LOAD_CONST 1 ( 0 )					      								    	    l -= 1						  
76 COMPARE_OP 0 ( < )					      								    	elif l <= n :						  
78 POP_JUMP_IF_TRUE 88					      								    	    l -= 1						  
80 LOAD_FAST 4 ( curr )					      								    	elif l <= n :						  
82 LOAD_FAST 1 ( s )					      								    	    l -= 1						  
84 COMPARE_OP 6 ( in )					      								    	elif l <= n :						  
86 POP_JUMP_IF_FALSE 96					      								    	    l -= 1						  
							      								    	elif l <= n :						  
11 >> 88 LOAD_FAST 2 ( prev )				      								    	    l -= 1						  
90 LOAD_FAST 3 ( i )					      								    	elif l <= n :						  
92 BINARY_ADD						      								    	    l -= 1						  
94 STORE_FAST 4 ( curr )				      								    	elif l <= n :						  
							      								    	    l -= 1						  
12 >> 96 LOAD_FAST 1 ( s )				      								    	elif l <= n :						  
98 LOAD_METHOD 2 ( add )				      								    	    l -= 1						  
100 LOAD_FAST 4 ( curr )				      								    	elif l <= n :						  
102 CALL_METHOD 1					      								    	    l -= 1						  
104 POP_TOP						      								    	elif l <= n :						  
							      								    	    l -= 1						  
13 106 LOAD_GLOBAL 0 ( print )				      								    	elif l <= n :						  
108 LOAD_FAST 4 ( curr )				      								    	    l -= 1						  
110 LOAD_CONST 2 ( ',' )				      								    	elif l <= n :						  
112 LOAD_CONST 3 ( '' )					      								    	    l -= 1						  
114 LOAD_CONST 4 ( ( 'end' , ) )			      								    	elif l <= n :						  
116 CALL_FUNCTION_KW 3					      								    	    l -= 1						  
118 POP_TOP						      								    	elif l <= n :						  
							      								    	    l -= 1						  
14 120 LOAD_FAST 4 ( curr )				      								    	elif l <= n :						  
122 STORE_FAST 2 ( prev )				      								    	    l -= 1						  
124 JUMP_ABSOLUTE 60					      								    	elif l <= n :						  
>> 126 POP_BLOCK					      								    	    l -= 1						  
>> 128 LOAD_CONST 0 ( None )				      								    	elif l <= n :						  
130 RETURN_VALUE NEW_LINE				      								    	    l -= 1						  
							      								    	l -= 1							  
							      								    return l							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUPER_PRIME						      SUPER_PRIME						    SUPER_PRIME							  SUPER_PRIME
--							      --							    --								  --
Disassembly of <code object SieveOfEratosthenes at 0x7f33e264 def SieveOfEratosthenes ( n , isPrime ) :			    def batcheveOfOfatoececececececececececececececececececececec script_not_found : None
2 0 LOAD_CONST 1 ( False )				      	  isPrime [ 0 ] = isPrime [ 1 ] = False			    								  
2 DUP_TOP						      	  for i in range ( 2 , n + 1 ) :			    								  
4 LOAD_FAST 1 ( isPrime )				      	      isPrime [ i ] = True				    								  
6 LOAD_CONST 2 ( 0 )					      	  for p in range ( 2 , n + 1 ) :			    								  
8 STORE_SUBSCR						      	      if ( p * p <= n and isPrime [ p ] == True ) :	    								  
10 LOAD_FAST 1 ( isPrime )				      		  for i in range ( p * 2 , n + 1 , p ) :	    								  
12 LOAD_CONST 3 ( 1 )					      		      isPrime [ i ] = False			    								  
14 STORE_SUBSCR						      		      p += 1					    								  
							      								    								  
3 16 SETUP_LOOP 30 ( to 48 )				      								    								  
18 LOAD_GLOBAL 0 ( range )				      								    								  
20 LOAD_CONST 4 ( 2 )					      								    								  
22 LOAD_FAST 0 ( n )					      								    								  
24 LOAD_CONST 3 ( 1 )					      								    								  
26 BINARY_ADD						      								    								  
28 CALL_FUNCTION 2					      								    								  
30 GET_ITER						      								    								  
>> 32 FOR_ITER 12 ( to 46 )				      								    								  
34 STORE_FAST 2 ( i )					      								    								  
							      								    								  
4 36 LOAD_CONST 5 ( True )				      								    								  
38 LOAD_FAST 1 ( isPrime )				      								    								  
40 LOAD_FAST 2 ( i )					      								    								  
42 STORE_SUBSCR						      								    								  
44 JUMP_ABSOLUTE 32					      								    								  
>> 46 POP_BLOCK						      								    								  
							      								    								  
5 >> 48 SETUP_LOOP 92 ( to 142 )			      								    								  
50 LOAD_GLOBAL 0 ( range )				      								    								  
52 LOAD_CONST 4 ( 2 )					      								    								  
54 LOAD_FAST 0 ( n )					      								    								  
56 LOAD_CONST 3 ( 1 )					      								    								  
58 BINARY_ADD						      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 74 ( to 140 )				      								    								  
66 STORE_FAST 3 ( p )					      								    								  
							      								    								  
6 68 LOAD_FAST 3 ( p )					      								    								  
70 LOAD_FAST 3 ( p )					      								    								  
72 BINARY_MULTIPLY					      								    								  
74 LOAD_FAST 0 ( n )					      								    								  
76 COMPARE_OP 1 ( <= )					      								    								  
78 POP_JUMP_IF_FALSE 64					      								    								  
80 LOAD_FAST 1 ( isPrime )				      								    								  
82 LOAD_FAST 3 ( p )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 LOAD_CONST 5 ( True )				      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
7 92 SETUP_LOOP 44 ( to 138 )				      								    								  
94 LOAD_GLOBAL 0 ( range )				      								    								  
96 LOAD_FAST 3 ( p )					      								    								  
98 LOAD_CONST 4 ( 2 )					      								    								  
100 BINARY_MULTIPLY					      								    								  
102 LOAD_FAST 0 ( n )					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 BINARY_ADD						      								    								  
108 LOAD_FAST 3 ( p )					      								    								  
110 CALL_FUNCTION 3					      								    								  
112 GET_ITER						      								    								  
>> 114 FOR_ITER 20 ( to 136 )				      								    								  
116 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 118 LOAD_CONST 1 ( False )				      								    								  
120 LOAD_FAST 1 ( isPrime )				      								    								  
122 LOAD_FAST 2 ( i )					      								    								  
124 STORE_SUBSCR					      								    								  
							      								    								  
9 126 LOAD_FAST 3 ( p )					      								    								  
128 LOAD_CONST 3 ( 1 )					      								    								  
130 INPLACE_ADD						      								    								  
132 STORE_FAST 3 ( p )					      								    								  
134 JUMP_ABSOLUTE 114					      								    								  
>> 136 POP_BLOCK					      								    								  
>> 138 JUMP_ABSOLUTE 64					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 LOAD_CONST 0 ( None )				      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			      PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			    PROGRAM_BINOMIAL_COEFFICIENTS_TABLE				  PROGRAM_BINOMIAL_COEFFICIENTS_TABLE
--							      --							    --								  --
Disassembly of <code object printbinomial at 0x7f33e2649a50,  def printbinomial ( max ) :				    def printbinset_names ( max , n , n , n , n , n , n , n , n , script_not_found : None
2 0 SETUP_LOOP 126 ( to 128 )				      	  for m in range ( max + 1 ) :				    								  
2 LOAD_GLOBAL 0 ( range )				      	      print ( '% 2d' % m , end = '' )			    								  
4 LOAD_FAST 0 ( max )					      	      binom = 1						    								  
6 LOAD_CONST 1 ( 1 )					      	      for x in range ( m + 1 ) :			    								  
8 BINARY_ADD						      		  if m != 0 and x != 0 :			    								  
10 CALL_FUNCTION 1					      		      binom = binom * ( m - x + 1 ) / x		    								  
12 GET_ITER						      		  print ( '% 4d' % binom , end = '' )		    								  
>> 14 FOR_ITER 110 ( to 126 )				      	      print ( "\n" , end = '' )				    								  
16 STORE_FAST 1 ( m )					      								    								  
							      								    								  
3 18 LOAD_GLOBAL 1 ( print )				      								    								  
20 LOAD_CONST 2 ( '% 2d' )				      								    								  
22 LOAD_FAST 1 ( m )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 3 ( '' )					      								    								  
28 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
30 CALL_FUNCTION_KW 2					      								    								  
32 POP_TOP						      								    								  
							      								    								  
4 34 LOAD_CONST 1 ( 1 )					      								    								  
36 STORE_FAST 2 ( binom )				      								    								  
							      								    								  
5 38 SETUP_LOOP 72 ( to 112 )				      								    								  
40 LOAD_GLOBAL 0 ( range )				      								    								  
42 LOAD_FAST 1 ( m )					      								    								  
44 LOAD_CONST 1 ( 1 )					      								    								  
46 BINARY_ADD						      								    								  
48 CALL_FUNCTION 1					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 56 ( to 110 )				      								    								  
54 STORE_FAST 3 ( x )					      								    								  
							      								    								  
6 56 LOAD_FAST 1 ( m )					      								    								  
58 LOAD_CONST 5 ( 0 )					      								    								  
60 COMPARE_OP 3 ( != )					      								    								  
62 POP_JUMP_IF_FALSE 92					      								    								  
64 LOAD_FAST 3 ( x )					      								    								  
66 LOAD_CONST 5 ( 0 )					      								    								  
68 COMPARE_OP 3 ( != )					      								    								  
70 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
7 72 LOAD_FAST 2 ( binom )				      								    								  
74 LOAD_FAST 1 ( m )					      								    								  
76 LOAD_FAST 3 ( x )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 BINARY_MULTIPLY					      								    								  
86 LOAD_FAST 3 ( x )					      								    								  
88 BINARY_TRUE_DIVIDE					      								    								  
90 STORE_FAST 2 ( binom )				      								    								  
							      								    								  
8 >> 92 LOAD_GLOBAL 1 ( print )				      								    								  
94 LOAD_CONST 6 ( '% 4d' )				      								    								  
96 LOAD_FAST 2 ( binom )				      								    								  
98 BINARY_MODULO					      								    								  
100 LOAD_CONST 3 ( '' )					      								    								  
102 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
104 CALL_FUNCTION_KW 2					      								    								  
106 POP_TOP						      								    								  
108 JUMP_ABSOLUTE 52					      								    								  
>> 110 POP_BLOCK					      								    								  
							      								    								  
9 >> 112 LOAD_GLOBAL 1 ( print )			      								    								  
114 LOAD_CONST 7 ( '\n' )				      								    								  
116 LOAD_CONST 3 ( '' )					      								    								  
118 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 POP_TOP						      								    								  
124 JUMP_ABSOLUTE 14					      								    								  
>> 126 POP_BLOCK					      								    								  
>> 128 LOAD_CONST 0 ( None )				      								    								  
130 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			      COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			    COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			  COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1
--							      --							    --								  --
Disassembly of <code object countSubarrWithEqualZeroAndOne at def countSubarrWithEqualZeroAndOne ( arr , n ) :		    def countSubarrWithEqualqualAndAndf60 ( arr , n = 0 , n = 0 , script_not_found : None
2 0 LOAD_GLOBAL 0 ( dict )				      	  mp = dict ( )						    								  
2 CALL_FUNCTION 0					      	  Sum = 0						    								  
4 STORE_FAST 2 ( mp )					      	  count = 0						    								  
							      	  for i in range ( n ) :				    								  
3 6 LOAD_CONST 1 ( 0 )					      	      if ( arr [ i ] == 0 ) :				    								  
8 STORE_FAST 3 ( Sum )					      		  arr [ i ] = - 1				    								  
							      	      Sum += arr [ i ]					    								  
4 10 LOAD_CONST 1 ( 0 )					      	      if ( Sum == 0 ) :					    								  
12 STORE_FAST 4 ( count )				      		  count += 1					    								  
							      	      if ( Sum in mp.keys ( ) ) :			    								  
5 14 SETUP_LOOP 108 ( to 124 )				      		  count += mp [ Sum ]				    								  
16 LOAD_GLOBAL 1 ( range )				      	      mp [ Sum ] = mp.get ( Sum , 0 ) + 1		    								  
18 LOAD_FAST 1 ( n )					      	  return count						    								  
20 CALL_FUNCTION 1					      								    								  
22 GET_ITER						      								    								  
>> 24 FOR_ITER 96 ( to 122 )				      								    								  
26 STORE_FAST 5 ( i )					      								    								  
							      								    								  
6 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 5 ( i )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 LOAD_CONST 1 ( 0 )					      								    								  
36 COMPARE_OP 2 ( == )					      								    								  
38 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
7 40 LOAD_CONST 2 ( - 1 )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 5 ( i )					      								    								  
46 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 48 LOAD_FAST 3 ( Sum )				      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 5 ( i )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( Sum )					      								    								  
							      								    								  
9 60 LOAD_FAST 3 ( Sum )				      								    								  
62 LOAD_CONST 1 ( 0 )					      								    								  
64 COMPARE_OP 2 ( == )					      								    								  
66 POP_JUMP_IF_FALSE 76					      								    								  
							      								    								  
10 68 LOAD_FAST 4 ( count )				      								    								  
70 LOAD_CONST 3 ( 1 )					      								    								  
72 INPLACE_ADD						      								    								  
74 STORE_FAST 4 ( count )				      								    								  
							      								    								  
11 >> 76 LOAD_FAST 3 ( Sum )				      								    								  
78 LOAD_FAST 2 ( mp )					      								    								  
80 LOAD_METHOD 2 ( keys )				      								    								  
82 CALL_METHOD 0					      								    								  
84 COMPARE_OP 6 ( in )					      								    								  
86 POP_JUMP_IF_FALSE 100				      								    								  
							      								    								  
12 88 LOAD_FAST 4 ( count )				      								    								  
90 LOAD_FAST 2 ( mp )					      								    								  
92 LOAD_FAST 3 ( Sum )					      								    								  
94 BINARY_SUBSCR					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 4 ( count )				      								    								  
							      								    								  
13 >> 100 LOAD_FAST 2 ( mp )				      								    								  
102 LOAD_METHOD 3 ( get )				      								    								  
104 LOAD_FAST 3 ( Sum )					      								    								  
106 LOAD_CONST 1 ( 0 )					      								    								  
108 CALL_METHOD 2					      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 2 ( mp )					      								    								  
116 LOAD_FAST 3 ( Sum )					      								    								  
118 STORE_SUBSCR					      								    								  
120 JUMP_ABSOLUTE 24					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
14 >> 124 LOAD_FAST 4 ( count )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	      WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	    WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	  WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER
--							      --							    --								  --
Disassembly of <code object countWays at 0x7f33e2649a50, file def countWays ( s ) :					    def countWays ( s ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  count = [ 0 ] * 26 ;					    	count = 0						  
2 BUILD_LIST 1						      	  for x in s :						    	count = 0						  
4 LOAD_CONST 2 ( 26 )					      	      count [ ord ( x ) - ord ( 'a' ) ] = ( count [ ord ( x 	while count < 10 :					  
6 BINARY_MULTIPLY					      	  count [ ord ( s [ 0 ] ) - ord ( 'a' ) ] = 1 ;		    	    for x in s :					  
8 STORE_FAST 1 ( count )				      	  ans = 1 ;						    		if x == ord ( x ) :				  
							      	  for i in range ( 26 ) :				    		    count += 1					  
3 10 SETUP_LOOP 52 ( to 64 )				      	      if ( count [ i ] != 0 ) :				    	return count						  
12 LOAD_FAST 0 ( s )					      		  ans *= count [ i ] ;				    								  
14 GET_ITER						      	  return ans ;						    								  
>> 16 FOR_ITER 44 ( to 62 )				      								    								  
18 STORE_FAST 2 ( x )					      								    								  
							      								    								  
4 20 LOAD_FAST 1 ( count )				      								    								  
22 LOAD_GLOBAL 0 ( ord )				      								    								  
24 LOAD_FAST 2 ( x )					      								    								  
26 CALL_FUNCTION 1					      								    								  
28 LOAD_GLOBAL 0 ( ord )				      								    								  
30 LOAD_CONST 3 ( 'a' )					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 BINARY_SUBSCR					      								    								  
38 LOAD_CONST 4 ( 1 )					      								    								  
40 BINARY_ADD						      								    								  
42 LOAD_FAST 1 ( count )				      								    								  
44 LOAD_GLOBAL 0 ( ord )				      								    								  
46 LOAD_FAST 2 ( x )					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_GLOBAL 0 ( ord )				      								    								  
52 LOAD_CONST 3 ( 'a' )					      								    								  
54 CALL_FUNCTION 1					      								    								  
56 BINARY_SUBTRACT					      								    								  
58 STORE_SUBSCR						      								    								  
60 JUMP_ABSOLUTE 16					      								    								  
>> 62 POP_BLOCK						      								    								  
							      								    								  
5 >> 64 LOAD_CONST 4 ( 1 )				      								    								  
66 LOAD_FAST 1 ( count )				      								    								  
68 LOAD_GLOBAL 0 ( ord )				      								    								  
70 LOAD_FAST 0 ( s )					      								    								  
72 LOAD_CONST 1 ( 0 )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 CALL_FUNCTION 1					      								    								  
78 LOAD_GLOBAL 0 ( ord )				      								    								  
80 LOAD_CONST 3 ( 'a' )					      								    								  
82 CALL_FUNCTION 1					      								    								  
84 BINARY_SUBTRACT					      								    								  
86 STORE_SUBSCR						      								    								  
							      								    								  
6 88 LOAD_CONST 4 ( 1 )					      								    								  
90 STORE_FAST 3 ( ans )					      								    								  
							      								    								  
7 92 SETUP_LOOP 40 ( to 134 )				      								    								  
94 LOAD_GLOBAL 1 ( range )				      								    								  
96 LOAD_CONST 2 ( 26 )					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 28 ( to 132 )				      								    								  
104 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 106 LOAD_FAST 1 ( count )				      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 1 ( 0 )					      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
9 118 LOAD_FAST 3 ( ans )				      								    								  
120 LOAD_FAST 1 ( count )				      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 INPLACE_MULTIPLY					      								    								  
128 STORE_FAST 3 ( ans )				      								    								  
130 JUMP_ABSOLUTE 102					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
10 >> 134 LOAD_FAST 3 ( ans )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT<
--							      --							    --								  --
Disassembly of <code object MinOperation at 0x7f33e2644930, f def MinOperation ( a , b , n ) :				    def MinOperation ( a , b , a , b ) :			  script_not_found : None
2 0 LOAD_FAST 0 ( a )					      	  a.sort ( reverse = False )				    	b.sort ( False , reverse = False )			  
2 LOAD_ATTR 0 ( sort )					      	  b.sort ( reverse = False )				    	b.sort ( reverse = False )				  
4 LOAD_CONST 1 ( False )				      	  result = 0						    	a.sort ( reverse = False )				  
6 LOAD_CONST 2 ( ( 'reverse' , ) )			      	  for i in range ( 0 , n , 1 ) :			    	b.sort ( reverse = False )				  
8 CALL_FUNCTION_KW 1					      	      if ( a [ i ] > b [ i ] ) :			    	for i in range ( b ) :					  
10 POP_TOP						      		  result = result + abs ( a [ i ] - b [ i ] )	    	    if a [ i ] == b [ i ] :				  
							      	      elif ( a [ i ] < b [ i ] ) :			    		b [ i ] = b [ i ]				  
3 12 LOAD_FAST 1 ( b )					      		  result = result + abs ( a [ i ] - b [ i ] )	    	return b						  
14 LOAD_ATTR 0 ( sort )					      	  return result						    								  
16 LOAD_CONST 1 ( False )				      								    								  
18 LOAD_CONST 2 ( ( 'reverse' , ) )			      								    								  
20 CALL_FUNCTION_KW 1					      								    								  
22 POP_TOP						      								    								  
							      								    								  
4 24 LOAD_CONST 3 ( 0 )					      								    								  
26 STORE_FAST 3 ( result )				      								    								  
							      								    								  
5 28 SETUP_LOOP 102 ( to 132 )				      								    								  
30 LOAD_GLOBAL 1 ( range )				      								    								  
32 LOAD_CONST 3 ( 0 )					      								    								  
34 LOAD_FAST 2 ( n )					      								    								  
36 LOAD_CONST 4 ( 1 )					      								    								  
38 CALL_FUNCTION 3					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 86 ( to 130 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 46 LOAD_FAST 0 ( a )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 1 ( b )					      								    								  
54 LOAD_FAST 4 ( i )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 COMPARE_OP 4 ( > )					      								    								  
60 POP_JUMP_IF_FALSE 88					      								    								  
							      								    								  
7 62 LOAD_FAST 3 ( result )				      								    								  
64 LOAD_GLOBAL 2 ( abs )				      								    								  
66 LOAD_FAST 0 ( a )					      								    								  
68 LOAD_FAST 4 ( i )					      								    								  
70 BINARY_SUBSCR					      								    								  
72 LOAD_FAST 1 ( b )					      								    								  
74 LOAD_FAST 4 ( i )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 BINARY_ADD						      								    								  
84 STORE_FAST 3 ( result )				      								    								  
86 JUMP_ABSOLUTE 42					      								    								  
							      								    								  
8 >> 88 LOAD_FAST 0 ( a )				      								    								  
90 LOAD_FAST 4 ( i )					      								    								  
92 BINARY_SUBSCR					      								    								  
94 LOAD_FAST 1 ( b )					      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 COMPARE_OP 0 ( < )					      								    								  
102 POP_JUMP_IF_FALSE 42				      								    								  
							      								    								  
9 104 LOAD_FAST 3 ( result )				      								    								  
106 LOAD_GLOBAL 2 ( abs )				      								    								  
108 LOAD_FAST 0 ( a )					      								    								  
110 LOAD_FAST 4 ( i )					      								    								  
112 BINARY_SUBSCR					      								    								  
114 LOAD_FAST 1 ( b )					      								    								  
116 LOAD_FAST 4 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 BINARY_SUBTRACT					      								    								  
122 CALL_FUNCTION 1					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 3 ( result )				      								    								  
128 JUMP_ABSOLUTE 42					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
10 >> 132 LOAD_FAST 3 ( result )			      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
Disassembly of <code object solve at 0x7f33e2644f60, file "<d def solve ( i , par , a , n , k , current_ans ) :		    def solve ( i , par , par , par , par , par , par , par , par script_not_found : None
2 0 LOAD_FAST 1 ( par )					      	  if ( par > k ) :					    								  
2 LOAD_FAST 4 ( k )					      	      return 0						    								  
4 COMPARE_OP 4 ( > )					      	  global ans						    								  
6 POP_JUMP_IF_FALSE 12					      	  if ( par == k and i == n - 1 ) :			    								  
							      	      ans = min ( ans , current_ans )			    								  
3 8 LOAD_CONST 1 ( 0 )					      	      return 0						    								  
10 RETURN_VALUE						      	  for j in range ( i + 1 , n ) :			    								  
							      	      solve ( j , par + 1 , a , n , k , current_ans + ( a [ 								  
5 >> 12 LOAD_FAST 1 ( par )				      								    								  
14 LOAD_FAST 4 ( k )					      								    								  
16 COMPARE_OP 2 ( == )					      								    								  
18 POP_JUMP_IF_FALSE 46					      								    								  
20 LOAD_FAST 0 ( i )					      								    								  
22 LOAD_FAST 3 ( n )					      								    								  
24 LOAD_CONST 2 ( 1 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 COMPARE_OP 2 ( == )					      								    								  
30 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
6 32 LOAD_GLOBAL 0 ( min )				      								    								  
34 LOAD_GLOBAL 1 ( ans )				      								    								  
36 LOAD_FAST 5 ( current_ans )				      								    								  
38 CALL_FUNCTION 2					      								    								  
40 STORE_GLOBAL 1 ( ans )				      								    								  
							      								    								  
7 42 LOAD_CONST 1 ( 0 )					      								    								  
44 RETURN_VALUE						      								    								  
							      								    								  
8 >> 46 SETUP_LOOP 84 ( to 132 )			      								    								  
48 LOAD_GLOBAL 2 ( range )				      								    								  
50 LOAD_FAST 0 ( i )					      								    								  
52 LOAD_CONST 2 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 LOAD_FAST 3 ( n )					      								    								  
58 CALL_FUNCTION 2					      								    								  
60 GET_ITER						      								    								  
>> 62 FOR_ITER 66 ( to 130 )				      								    								  
64 STORE_FAST 6 ( j )					      								    								  
							      								    								  
9 66 LOAD_GLOBAL 3 ( solve )				      								    								  
68 LOAD_FAST 6 ( j )					      								    								  
70 LOAD_FAST 1 ( par )					      								    								  
72 LOAD_CONST 2 ( 1 )					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_FAST 2 ( a )					      								    								  
78 LOAD_FAST 3 ( n )					      								    								  
80 LOAD_FAST 4 ( k )					      								    								  
82 LOAD_FAST 5 ( current_ans )				      								    								  
84 LOAD_FAST 2 ( a )					      								    								  
86 LOAD_FAST 6 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 LOAD_FAST 2 ( a )					      								    								  
92 LOAD_FAST 0 ( i )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 BINARY_SUBSCR					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 LOAD_FAST 2 ( a )					      								    								  
104 LOAD_FAST 6 ( j )					      								    								  
106 BINARY_SUBSCR					      								    								  
108 LOAD_FAST 2 ( a )					      								    								  
110 LOAD_FAST 0 ( i )					      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 BINARY_ADD						      								    								  
116 BINARY_SUBSCR					      								    								  
118 BINARY_SUBTRACT					      								    								  
120 BINARY_MULTIPLY					      								    								  
122 BINARY_ADD						      								    								  
124 CALL_FUNCTION 6					      								    								  
126 POP_TOP						      								    								  
128 JUMP_ABSOLUTE 62					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2
--							      --							    --								  --
Disassembly of <code object findElements at 0x7f33e2644f60, f def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( sys )				      	  first = - sys.maxsize					    	first = ( sys.maxsize - 1 ) * 2				  
2 LOAD_ATTR 1 ( maxsize )				      	  second = - sys.maxsize				    	second = ( sys.maxsize - 1 ) * 2			  
4 UNARY_NEGATIVE					      	  for i in range ( 0 , n ) :				    	second = ( ( 0 , 0 ) * 2 ) * 2				  
6 STORE_FAST 2 ( first )				      	      if ( arr [ i ] > first ) :			    	second = ( ( 0 , 0 ) * 2 ) * 2				  
							      		  second = first				    	second = ( ( 0 , 0 ) * 2 * ( ( 0 , 0 ) ) * 2 )		  
3 8 LOAD_GLOBAL 0 ( sys )				      		  first = arr [ i ]				    	second = ( ( 0 , 0 ) * 2 ) * 2				  
10 LOAD_ATTR 1 ( maxsize )				      	      elif ( arr [ i ] > second ) :			    	second = ( ( 0 , 0 ) * 2 ) * 2				  
12 UNARY_NEGATIVE					      		  second = arr [ i ]				    	second = ( ( 0 , 0 ) * 2 * ( ( 0 , 0 ) * 2 ) )		  
14 STORE_FAST 3 ( second )				      	  for i in range ( 0 , n ) :				    	second = ( ( 0 , 0 ) * 2 )				  
							      	      if ( arr [ i ] < second ) :			    	second = ( ( 0 , 0 ) * 2 )				  
4 16 SETUP_LOOP 64 ( to 82 )				      		  print ( arr [ i ] , end = " " )		    	second = ( ( 0 , 0 ) * 2 )				  
18 LOAD_GLOBAL 2 ( range )				      								    	second = ( ( 0 , 0 ) * 2 )				  
20 LOAD_CONST 1 ( 0 )					      								    	second = ( ( 0 , 0 ) * 2 )				  
22 LOAD_FAST 1 ( n )					      								    	second = ( ( 0 , 0 ) * 2 )				  
24 CALL_FUNCTION 2					      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
26 GET_ITER						      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
>> 28 FOR_ITER 50 ( to 80 )				      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
30 STORE_FAST 4 ( i )					      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
							      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
5 32 LOAD_FAST 0 ( arr )				      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
34 LOAD_FAST 4 ( i )					      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
36 BINARY_SUBSCR					      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
38 LOAD_FAST 2 ( first )				      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
40 COMPARE_OP 4 ( > )					      								    	second = ( 0 , 0 ) * 2					  
42 POP_JUMP_IF_FALSE 58					      								    	second = ( ( 0 , 0 ) * 2 ) * 2				  
							      								    	second = ( ( 0 , 0 ) * 2 ) * 2 )			  
6 44 LOAD_FAST 2 ( first )				      								    	second = ( ( 0 , 0 ) * 2 * ( second - 1 ) * 2 )		  
46 STORE_FAST 3 ( second )				      								    	second = ( 0 , 0 ) * 2 * ( second - 1 ) * 2 )		  
							      								    	second = ( ( 0 , 0 ) * 2 * ( second - 1 ) ) * 2		  
7 48 LOAD_FAST 0 ( arr )				      								    	second = ( 0 , 0 ) * 2 * ( second - 1 ) )		  
50 LOAD_FAST 4 ( i )					      								    	second = ( 0 , 0 ) * 2 * ( second - 1 ) ) * 2		  
52 BINARY_SUBSCR					      								    	second = ( 0 , 0 ) * 2 * ( second - 1 )			  
54 STORE_FAST 2 ( first )				      								    	second = ( 0 , 0 ) * 2 * ( second - 1 )			  
56 JUMP_ABSOLUTE 28					      								    	second = ( 0 , 0 ) * 2					  
							      								    	second							  
8 >> 58 LOAD_FAST 0 ( arr )				      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 LOAD_FAST 3 ( second )				      								    								  
66 COMPARE_OP 4 ( > )					      								    								  
68 POP_JUMP_IF_FALSE 28					      								    								  
							      								    								  
9 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 STORE_FAST 3 ( second )				      								    								  
78 JUMP_ABSOLUTE 28					      								    								  
>> 80 POP_BLOCK						      								    								  
							      								    								  
10 >> 82 SETUP_LOOP 46 ( to 130 )			      								    								  
84 LOAD_GLOBAL 2 ( range )				      								    								  
86 LOAD_CONST 1 ( 0 )					      								    								  
88 LOAD_FAST 1 ( n )					      								    								  
90 CALL_FUNCTION 2					      								    								  
92 GET_ITER						      								    								  
>> 94 FOR_ITER 32 ( to 128 )				      								    								  
96 STORE_FAST 4 ( i )					      								    								  
							      								    								  
11 98 LOAD_FAST 0 ( arr )				      								    								  
100 LOAD_FAST 4 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 LOAD_FAST 3 ( second )				      								    								  
106 COMPARE_OP 0 ( < )					      								    								  
108 POP_JUMP_IF_FALSE 94				      								    								  
							      								    								  
12 110 LOAD_GLOBAL 3 ( print )				      								    								  
112 LOAD_FAST 0 ( arr )					      								    								  
114 LOAD_FAST 4 ( i )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 LOAD_CONST 2 ( ' ' )				      								    								  
120 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
122 CALL_FUNCTION_KW 2					      								    								  
124 POP_TOP						      								    								  
126 JUMP_ABSOLUTE 94					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 LOAD_CONST 0 ( None )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	      SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	    SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS		  SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS
--							      --							    --								  --
Disassembly of <code object findSmallestDifference at 0x7f33e def findSmallestDifference ( A , B , m , n ) :		    def findSmallestDifference ( A , B , B , C , C , C , C , C ,  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 0 ( A )					      	  A.sort ( )						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_METHOD 0 ( sort )				      	  B.sort ( )						    								  alid/SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_
4 CALL_METHOD 0						      	  a = 0							    								  ARRAYS.py", line 37	  if __name__ == '__main__':
6 POP_TOP						      	  b = 0							    								  	^ SyntaxError: invalid syntax
							      	  result = sys.maxsize					    								  
3 8 LOAD_FAST 1 ( B )					      	  while ( a < m and b < n ) :				    								  
10 LOAD_METHOD 0 ( sort )				      	      if ( abs ( A [ a ] - B [ b ] ) < result ) :	    								  
12 CALL_METHOD 0					      		  result = abs ( A [ a ] - B [ b ] )		    								  
14 POP_TOP						      	      if ( A [ a ] < B [ b ] ) :			    								  
							      		  a += 1					    								  
4 16 LOAD_CONST 1 ( 0 )					      	      else :						    								  
18 STORE_FAST 4 ( a )					      		  b += 1					    								  
							      	  return result						    								  
5 20 LOAD_CONST 1 ( 0 )					      								    								  
22 STORE_FAST 5 ( b )					      								    								  
							      								    								  
6 24 LOAD_GLOBAL 1 ( sys )				      								    								  
26 LOAD_ATTR 2 ( maxsize )				      								    								  
28 STORE_FAST 6 ( result )				      								    								  
							      								    								  
7 30 SETUP_LOOP 98 ( to 130 )				      								    								  
>> 32 LOAD_FAST 4 ( a )					      								    								  
34 LOAD_FAST 2 ( m )					      								    								  
36 COMPARE_OP 0 ( < )					      								    								  
38 POP_JUMP_IF_FALSE 128				      								    								  
40 LOAD_FAST 5 ( b )					      								    								  
42 LOAD_FAST 3 ( n )					      								    								  
44 COMPARE_OP 0 ( < )					      								    								  
46 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
8 48 LOAD_GLOBAL 3 ( abs )				      								    								  
50 LOAD_FAST 0 ( A )					      								    								  
52 LOAD_FAST 4 ( a )					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_FAST 1 ( B )					      								    								  
58 LOAD_FAST 5 ( b )					      								    								  
60 BINARY_SUBSCR					      								    								  
62 BINARY_SUBTRACT					      								    								  
64 CALL_FUNCTION 1					      								    								  
66 LOAD_FAST 6 ( result )				      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 92					      								    								  
							      								    								  
9 72 LOAD_GLOBAL 3 ( abs )				      								    								  
74 LOAD_FAST 0 ( A )					      								    								  
76 LOAD_FAST 4 ( a )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 LOAD_FAST 1 ( B )					      								    								  
82 LOAD_FAST 5 ( b )					      								    								  
84 BINARY_SUBSCR					      								    								  
86 BINARY_SUBTRACT					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 STORE_FAST 6 ( result )				      								    								  
							      								    								  
10 >> 92 LOAD_FAST 0 ( A )				      								    								  
94 LOAD_FAST 4 ( a )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 1 ( B )					      								    								  
100 LOAD_FAST 5 ( b )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 COMPARE_OP 0 ( < )					      								    								  
106 POP_JUMP_IF_FALSE 118				      								    								  
							      								    								  
11 108 LOAD_FAST 4 ( a )				      								    								  
110 LOAD_CONST 2 ( 1 )					      								    								  
112 INPLACE_ADD						      								    								  
114 STORE_FAST 4 ( a )					      								    								  
116 JUMP_ABSOLUTE 32					      								    								  
							      								    								  
13 >> 118 LOAD_FAST 5 ( b )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 5 ( b )					      								    								  
126 JUMP_ABSOLUTE 32					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
14 >> 130 LOAD_FAST 6 ( result )			      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		      CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		    CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		  CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT
--							      --							    --								  --
Disassembly of <code object checkPoint at 0x7f33e2644f60, fil def checkPoint ( radius , x , y , percent , startAngle ) :    def checkPoint ( x , x , y , z , radius ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 360 )				      	  endAngle = 360 / percent + startAngle			    	endAngle = 360 * ( x + y )				  
2 LOAD_FAST 3 ( percent )				      	  polarradius = math.sqrt ( x * x + y * y )		    	endAngle = math.sqrt ( ( x + x ) * ( y + y ) )		  
4 BINARY_TRUE_DIVIDE					      	  Angle = math.atan ( y / x )				    	endAngle = ( x + y ) * ( y + z )			  
6 LOAD_FAST 4 ( startAngle )				      	  if ( Angle >= startAngle and Angle <= endAngle and polarr 	endAngle = ( x + y ) * ( y + z )			  
8 BINARY_ADD						      	      print ( "Point (" , x , "," , y , ") " "exist in the  	endAngle = ( x + y ) * ( y + z )			  
10 STORE_FAST 5 ( endAngle )				      	  else :						    	endAngle = ( x + y ) * ( x + y )			  
							      	      print ( "Point (" , x , "," , y , ") " "does not exis 	endAngle = ( x + y ) * ( y + z )			  
3 12 LOAD_GLOBAL 0 ( math )				      								    	endAngle = ( x + y ) * ( y + z )			  
14 LOAD_METHOD 1 ( sqrt )				      								    	endAngle = ( x + y ) * ( x + z )			  
16 LOAD_FAST 1 ( x )					      								    	endAngle = ( x + y ) * ( y + z )			  
18 LOAD_FAST 1 ( x )					      								    	endAngle = ( x + y ) * ( y + z )			  
20 BINARY_MULTIPLY					      								    	endAngle = ( y + z ) * ( y + z )			  
22 LOAD_FAST 2 ( y )					      								    	endAngle = ( y + z ) * ( y + z )			  
24 LOAD_FAST 2 ( y )					      								    	endAngle = ( y + z ) * ( y + z )			  
26 BINARY_MULTIPLY					      								    	endAngle = ( y + z ) * ( y + z )			  
28 BINARY_ADD						      								    	endAngle = ( y + z ) * ( y + z )			  
30 CALL_METHOD 1					      								    	endAngle = ( y + z ) * ( y + z )			  
32 STORE_FAST 6 ( polarradius )				      								    	endAngle = ( y + z ) * ( y + z )			  
							      								    	endAngle = ( y + z ) * ( y + z ) * ( y + z ) * ( y + z )  
4 34 LOAD_GLOBAL 0 ( math )				      								    	endAngle = ( y + z ) * ( y + z )			  
36 LOAD_METHOD 2 ( atan )				      								    	endAngle = ( y + z ) * ( y + z )			  
38 LOAD_FAST 2 ( y )					      								    	endAngle = ( y + z ) * ( y + z )			  
40 LOAD_FAST 1 ( x )					      								    	endAngle = ( y + z ) * ( y + z )			  
42 BINARY_TRUE_DIVIDE					      								    	endAngle = ( y + z ) * ( y + z )			  
44 CALL_METHOD 1					      								    	endAngle = ( y + z ) * ( y + z )			  
46 STORE_FAST 7 ( Angle )				      								    	endAngle = ( y + z ) * ( y + z )			  
							      								    	endAngle = ( y + z ) * ( y + z )			  
5 48 LOAD_FAST 7 ( Angle )				      								    	endAngle = ( y + z ) * ( y + z )			  
50 LOAD_FAST 4 ( startAngle )				      								    	endAngle = ( y + z ) * ( y + z )			  
52 COMPARE_OP 5 ( >= )					      								    	endAngle = ( y + z ) * ( y + z )			  
54 POP_JUMP_IF_FALSE 90					      								    	endAngle = ( y + z ) * ( y + z )			  
56 LOAD_FAST 7 ( Angle )				      								    	endAngle = ( y + z ) * ( y + z ) *			  
58 LOAD_FAST 5 ( endAngle )				      								    								  
60 COMPARE_OP 1 ( <= )					      								    								  
62 POP_JUMP_IF_FALSE 90					      								    								  
64 LOAD_FAST 6 ( polarradius )				      								    								  
66 LOAD_FAST 0 ( radius )				      								    								  
68 COMPARE_OP 0 ( < )					      								    								  
70 POP_JUMP_IF_FALSE 90					      								    								  
							      								    								  
6 72 LOAD_GLOBAL 3 ( print )				      								    								  
74 LOAD_CONST 2 ( 'Point (' )				      								    								  
76 LOAD_FAST 1 ( x )					      								    								  
78 LOAD_CONST 3 ( ',' )					      								    								  
80 LOAD_FAST 2 ( y )					      								    								  
82 LOAD_CONST 4 ( ') exist in the circle sector' )	      								    								  
84 CALL_FUNCTION 5					      								    								  
86 POP_TOP						      								    								  
88 JUMP_FORWARD 16 ( to 106 )				      								    								  
							      								    								  
8 >> 90 LOAD_GLOBAL 3 ( print )				      								    								  
92 LOAD_CONST 2 ( 'Point (' )				      								    								  
94 LOAD_FAST 1 ( x )					      								    								  
96 LOAD_CONST 3 ( ',' )					      								    								  
98 LOAD_FAST 2 ( y )					      								    								  
100 LOAD_CONST 5 ( ') does not exist in the circle sector' )  								    								  
102 CALL_FUNCTION 5					      								    								  
104 POP_TOP						      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT_1					      MAJORITY_ELEMENT_1					    MAJORITY_ELEMENT_1						  MAJORITY_ELEMENT_1
--							      --							    --								  --
Disassembly of <code object findMajority at 0x7f33e2653ed0, f def findMajority ( arr , size ) :				    def findMajens ( arr , size , size ) :			  script_not_found : None
2 0 BUILD_MAP 0						      	  m = { }						    	m = { }							  
2 STORE_FAST 2 ( m )					      	  for i in range ( size ) :				    	for i in range ( size ) :				  
							      	      if arr [ i ] in m :				    	    m [ i ] = arr [ i ]					  
3 4 SETUP_LOOP 62 ( to 68 )				      		  m [ arr [ i ] ] += 1				    	    m [ i ] = arr [ i ]					  
6 LOAD_GLOBAL 0 ( range )				      	      else :						    	    m [ i ] = arr [ i ]					  
8 LOAD_FAST 1 ( size )					      		  m [ arr [ i ] ] = 1				    	    m [ i ] = arr [ i ]					  
10 CALL_FUNCTION 1					      	  count = 0						    	    m [ i ] = arr [ i ]					  
12 GET_ITER						      	  for key in m :					    	    m [ i ] = arr [ i ]					  
>> 14 FOR_ITER 50 ( to 66 )				      	      if m [ key ] > size / 2 :				    	    m [ i ] = arr [ i ]					  
16 STORE_FAST 3 ( i )					      		  count = 1					    	    m [ i ] = arr [ i ]					  
							      		  print ( "Majority found :-" , key )		    	    m [ i ] = arr [ i ]					  
4 18 LOAD_FAST 0 ( arr )				      		  break						    	    m [ i ] = arr [ i ]					  
20 LOAD_FAST 3 ( i )					      	  if ( count == 0 ) :					    	    m [ i ] = arr [ i ]					  
22 BINARY_SUBSCR					      	      print ( "No Majority element" )			    	    m [ i ] = arr [ i ]					  
24 LOAD_FAST 2 ( m )					      								    	    m [ i ] = arr [ i ]					  
26 COMPARE_OP 6 ( in )					      								    	    m [ i ] = arr [ i ]					  
28 POP_JUMP_IF_FALSE 52					      								    	    m [ i ] = arr [ i ]					  
							      								    	    m [ i ] = arr [ i ]					  
5 30 LOAD_FAST 2 ( m )					      								    	    m [ i ] = arr [ i ]					  
32 LOAD_FAST 0 ( arr )					      								    	    m [ i ] = arr [ i ]					  
34 LOAD_FAST 3 ( i )					      								    	    m [ i ] = arr [ i ]					  
36 BINARY_SUBSCR					      								    	    m [ i ] = arr [ i ]					  
38 DUP_TOP_TWO						      								    	    m [ i ] = arr [ i ]					  
40 BINARY_SUBSCR					      								    	    m [ i ] = arr [ i ]					  
42 LOAD_CONST 1 ( 1 )					      								    	    m [ i ] = arr [ i ]					  
44 INPLACE_ADD						      								    	    m [ i ] = m [ i ]					  
46 ROT_THREE						      								    	    m [ i ] = arr [ i ]					  
48 STORE_SUBSCR						      								    	    m [ i ] = m [ i ]					  
50 JUMP_ABSOLUTE 14					      								    	    m [ i ] = m [ i ]					  
							      								    	    m [ i ] = m [ i ]					  
7 >> 52 LOAD_CONST 1 ( 1 )				      								    	    m [ i ] = m [ i ]					  
54 LOAD_FAST 2 ( m )					      								    	    m [ i ] = m [ i ]					  
56 LOAD_FAST 0 ( arr )					      								    	    m [ i ] = m [ i ]					  
58 LOAD_FAST 3 ( i )					      								    	    m [ i ] = m [ i ]					  
60 BINARY_SUBSCR					      								    	    m [ i ] = m [ i ]					  
62 STORE_SUBSCR						      								    	    m [ i ] = m [ i ]					  
64 JUMP_ABSOLUTE 14					      								    	    m [ i ] = m [ i ]					  
>> 66 POP_BLOCK						      								    	    m [ i ] = m [ i ]					  
							      								    	    m [ i ] = m [ i ]					  
8 >> 68 LOAD_CONST 2 ( 0 )				      								    	    m [ i ] = m [ i ]					  
70 STORE_FAST 4 ( count )				      								    	    m [ i ] = m [ i ]					  
							      								    	    m [ i ] = m [ i ]					  
9 72 SETUP_LOOP 44 ( to 118 )				      								    	    m [ i ] = m [ i ]					  
74 LOAD_FAST 2 ( m )					      								    	    m [ i ] = m [ i ]					  
76 GET_ITER						      								    	    m [ i ] = m [ i ]					  
>> 78 FOR_ITER 36 ( to 116 )				      								    	    m [ i ] = m [ i ]					  
80 STORE_FAST 5 ( key )					      								    	    m [ i ] = m [ i ]					  
							      								    	    m [ i ] = m [ i ]					  
10 82 LOAD_FAST 2 ( m )					      								    	    m [ i ] = m						  
84 LOAD_FAST 5 ( key )					      								    	return m						  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 1 ( size )					      								    								  
90 LOAD_CONST 3 ( 2 )					      								    								  
92 BINARY_TRUE_DIVIDE					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
11 98 LOAD_CONST 1 ( 1 )				      								    								  
100 STORE_FAST 4 ( count )				      								    								  
							      								    								  
12 102 LOAD_GLOBAL 1 ( print )				      								    								  
104 LOAD_CONST 4 ( 'Majority found :-' )		      								    								  
106 LOAD_FAST 5 ( key )					      								    								  
108 CALL_FUNCTION 2					      								    								  
110 POP_TOP						      								    								  
							      								    								  
13 112 BREAK_LOOP					      								    								  
114 JUMP_ABSOLUTE 78					      								    								  
>> 116 POP_BLOCK					      								    								  
							      								    								  
14 >> 118 LOAD_FAST 4 ( count )				      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 COMPARE_OP 2 ( == )					      								    								  
124 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
15 126 LOAD_GLOBAL 1 ( print )				      								    								  
128 LOAD_CONST 5 ( 'No Majority element' )		      								    								  
130 CALL_FUNCTION 1					      								    								  
132 POP_TOP						      								    								  
>> 134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS		      PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			    PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			  PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS
--							      --							    --								  --
Disassembly of <code object amendSentence at 0x7f33e26494b0,  def amendSentence ( string ) :				    def amendSentence ( string ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( list )				      	  string = list ( string )				    	string = list ( string )				  
2 LOAD_FAST 0 ( string )				      	  for i in range ( len ( string ) ) :			    	for i in range ( len ( string ) ) :			  
4 CALL_FUNCTION 1					      	      if string [ i ] >= 'A' and string [ i ] <= 'Z' :	    	    if string [ i ] >= string [ i ] :			  
6 STORE_FAST 0 ( string )				      		  string [ i ] = chr ( ord ( string [ i ] ) + 32 )  		string [ i ] = string [ i ]			  
							      		  if i != 0 :					    	    else :						  
3 8 SETUP_LOOP 122 ( to 132 )				      		      print ( "" , end = "" )			    		string [ i ] = string [ i ]			  
10 LOAD_GLOBAL 1 ( range )				      		  print ( string [ i ] , end = "" )		    	return string						  
12 LOAD_GLOBAL 2 ( len )				      	      else :						    								  
14 LOAD_FAST 0 ( string )				      		  print ( string [ i ] , end = "" )		    								  
16 CALL_FUNCTION 1					      								    								  
18 CALL_FUNCTION 1					      								    								  
20 GET_ITER						      								    								  
>> 22 FOR_ITER 106 ( to 130 )				      								    								  
24 STORE_FAST 1 ( i )					      								    								  
							      								    								  
4 26 LOAD_FAST 0 ( string )				      								    								  
28 LOAD_FAST 1 ( i )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 1 ( 'A' )					      								    								  
34 COMPARE_OP 5 ( >= )					      								    								  
36 POP_JUMP_IF_FALSE 112				      								    								  
38 LOAD_FAST 0 ( string )				      								    								  
40 LOAD_FAST 1 ( i )					      								    								  
42 BINARY_SUBSCR					      								    								  
44 LOAD_CONST 2 ( 'Z' )					      								    								  
46 COMPARE_OP 1 ( <= )					      								    								  
48 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
5 50 LOAD_GLOBAL 3 ( chr )				      								    								  
52 LOAD_GLOBAL 4 ( ord )				      								    								  
54 LOAD_FAST 0 ( string )				      								    								  
56 LOAD_FAST 1 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 LOAD_CONST 3 ( 32 )					      								    								  
64 BINARY_ADD						      								    								  
66 CALL_FUNCTION 1					      								    								  
68 LOAD_FAST 0 ( string )				      								    								  
70 LOAD_FAST 1 ( i )					      								    								  
72 STORE_SUBSCR						      								    								  
							      								    								  
6 74 LOAD_FAST 1 ( i )					      								    								  
76 LOAD_CONST 4 ( 0 )					      								    								  
78 COMPARE_OP 3 ( != )					      								    								  
80 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
7 82 LOAD_GLOBAL 5 ( print )				      								    								  
84 LOAD_CONST 5 ( '' )					      								    								  
86 LOAD_CONST 5 ( '' )					      								    								  
88 LOAD_CONST 6 ( ( 'end' , ) )				      								    								  
90 CALL_FUNCTION_KW 2					      								    								  
92 POP_TOP						      								    								  
							      								    								  
8 >> 94 LOAD_GLOBAL 5 ( print )				      								    								  
96 LOAD_FAST 0 ( string )				      								    								  
98 LOAD_FAST 1 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 5 ( '' )					      								    								  
104 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
106 CALL_FUNCTION_KW 2					      								    								  
108 POP_TOP						      								    								  
110 JUMP_ABSOLUTE 22					      								    								  
							      								    								  
10 >> 112 LOAD_GLOBAL 5 ( print )			      								    								  
114 LOAD_FAST 0 ( string )				      								    								  
116 LOAD_FAST 1 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_CONST 5 ( '' )					      								    								  
122 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
124 CALL_FUNCTION_KW 2					      								    								  
126 POP_TOP						      								    								  
128 JUMP_ABSOLUTE 22					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		      MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		    MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE			  MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE
--							      --							    --								  --
Disassembly of <code object lis at 0x7f33e2644f60, file "<dis def lis ( arr , n ) :					    def lis ( arr , n ) :					  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  mpis = [ 0 ] * ( n )					    	mpis = [ ]						  
2 BUILD_LIST 1						      	  for i in range ( n ) :				    	mpis = [ ]						  
4 LOAD_FAST 1 ( n )					      	      mpis [ i ] = arr [ i ]				    	for i in range ( n ) :					  
6 BINARY_MULTIPLY					      	  for i in range ( 1 , n ) :				    	    if a [ i ] == 1 :					  
8 STORE_FAST 2 ( mpis )					      	      for j in range ( i ) :				    		mpis = [ ]					  
							      		  if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpi 								  
3 10 SETUP_LOOP 28 ( to 40 )				      		      mpis [ i ] = mpis [ j ] * arr [ i ]	    								  
12 LOAD_GLOBAL 0 ( range )				      	  return max ( mpis )					    								  
14 LOAD_FAST 1 ( n )					      								    								  
16 CALL_FUNCTION 1					      								    								  
18 GET_ITER						      								    								  
>> 20 FOR_ITER 16 ( to 38 )				      								    								  
22 STORE_FAST 3 ( i )					      								    								  
							      								    								  
4 24 LOAD_FAST 0 ( arr )				      								    								  
26 LOAD_FAST 3 ( i )					      								    								  
28 BINARY_SUBSCR					      								    								  
30 LOAD_FAST 2 ( mpis )					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 STORE_SUBSCR						      								    								  
36 JUMP_ABSOLUTE 20					      								    								  
>> 38 POP_BLOCK						      								    								  
							      								    								  
5 >> 40 SETUP_LOOP 96 ( to 138 )			      								    								  
42 LOAD_GLOBAL 0 ( range )				      								    								  
44 LOAD_CONST 2 ( 1 )					      								    								  
46 LOAD_FAST 1 ( n )					      								    								  
48 CALL_FUNCTION 2					      								    								  
50 GET_ITER						      								    								  
>> 52 FOR_ITER 82 ( to 136 )				      								    								  
54 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 56 SETUP_LOOP 76 ( to 134 )				      								    								  
58 LOAD_GLOBAL 0 ( range )				      								    								  
60 LOAD_FAST 3 ( i )					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 64 ( to 132 )				      								    								  
68 STORE_FAST 4 ( j )					      								    								  
							      								    								  
7 70 LOAD_FAST 0 ( arr )				      								    								  
72 LOAD_FAST 3 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_FAST 0 ( arr )					      								    								  
78 LOAD_FAST 4 ( j )					      								    								  
80 BINARY_SUBSCR					      								    								  
82 COMPARE_OP 4 ( > )					      								    								  
84 POP_JUMP_IF_FALSE 66					      								    								  
86 LOAD_FAST 2 ( mpis )					      								    								  
88 LOAD_FAST 3 ( i )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_FAST 2 ( mpis )					      								    								  
94 LOAD_FAST 4 ( j )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 LOAD_FAST 0 ( arr )					      								    								  
100 LOAD_FAST 3 ( i )					      								    								  
102 BINARY_SUBSCR					      								    								  
104 BINARY_MULTIPLY					      								    								  
106 COMPARE_OP 0 ( < )					      								    								  
108 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
8 110 LOAD_FAST 2 ( mpis )				      								    								  
112 LOAD_FAST 4 ( j )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 LOAD_FAST 0 ( arr )					      								    								  
118 LOAD_FAST 3 ( i )					      								    								  
120 BINARY_SUBSCR					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 LOAD_FAST 2 ( mpis )				      								    								  
126 LOAD_FAST 3 ( i )					      								    								  
128 STORE_SUBSCR					      								    								  
130 JUMP_ABSOLUTE 66					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 JUMP_ABSOLUTE 52					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
9 >> 138 LOAD_GLOBAL 1 ( max )				      								    								  
140 LOAD_FAST 2 ( mpis )				      								    								  
142 CALL_FUNCTION 1					      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_LINE_PASSING_2_POINTS			      PROGRAM_FIND_LINE_PASSING_2_POINTS			    PROGRAM_FIND_LINE_PASSING_2_POINTS				  PROGRAM_FIND_LINE_PASSING_2_POINTS
--							      --							    --								  --
Disassembly of <code object lineFromPoints at 0x7f33e2653ed0, def lineFromPoints ( P , Q ) :				    def lineFromPoints ( P , Q , Q , Q , Q , Q , Q , Q , Q , Q ,  script_not_found : None
2 0 LOAD_FAST 1 ( Q )					      	  a = Q [ 1 ] - P [ 1 ]					    								  
2 LOAD_CONST 1 ( 1 )					      	  b = P [ 0 ] - Q [ 0 ]					    								  
4 BINARY_SUBSCR						      	  c = a * ( P [ 0 ] ) + b * ( P [ 1 ] )			    								  
6 LOAD_FAST 0 ( P )					      	  if ( b < 0 ) :					    								  
8 LOAD_CONST 1 ( 1 )					      	      print ( "The line passing through points P and Q is:" 								  
10 BINARY_SUBSCR					      	  else :						    								  
12 BINARY_SUBTRACT					      	      print ( "The line passing through points P and Q is:  								  
14 STORE_FAST 2 ( a )					      								    								  
							      								    								  
3 16 LOAD_FAST 0 ( P )					      								    								  
18 LOAD_CONST 2 ( 0 )					      								    								  
20 BINARY_SUBSCR					      								    								  
22 LOAD_FAST 1 ( Q )					      								    								  
24 LOAD_CONST 2 ( 0 )					      								    								  
26 BINARY_SUBSCR					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 STORE_FAST 3 ( b )					      								    								  
							      								    								  
4 32 LOAD_FAST 2 ( a )					      								    								  
34 LOAD_FAST 0 ( P )					      								    								  
36 LOAD_CONST 2 ( 0 )					      								    								  
38 BINARY_SUBSCR					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 LOAD_FAST 3 ( b )					      								    								  
44 LOAD_FAST 0 ( P )					      								    								  
46 LOAD_CONST 1 ( 1 )					      								    								  
48 BINARY_SUBSCR					      								    								  
50 BINARY_MULTIPLY					      								    								  
52 BINARY_ADD						      								    								  
54 STORE_FAST 4 ( c )					      								    								  
							      								    								  
5 56 LOAD_FAST 3 ( b )					      								    								  
58 LOAD_CONST 2 ( 0 )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
6 64 LOAD_GLOBAL 0 ( print )				      								    								  
66 LOAD_CONST 3 ( 'The line passing through points P and Q is 								    								  
68 LOAD_FAST 2 ( a )					      								    								  
70 LOAD_CONST 4 ( 'x ' )				      								    								  
72 LOAD_FAST 3 ( b )					      								    								  
74 LOAD_CONST 5 ( 'y = ' )				      								    								  
76 LOAD_FAST 4 ( c )					      								    								  
78 LOAD_CONST 6 ( '\n' )				      								    								  
80 CALL_FUNCTION 7					      								    								  
82 POP_TOP						      								    								  
84 JUMP_FORWARD 20 ( to 106 )				      								    								  
							      								    								  
8 >> 86 LOAD_GLOBAL 0 ( print )				      								    								  
88 LOAD_CONST 7 ( 'The line passing through points P and Q is 								    								  
90 LOAD_FAST 2 ( a )					      								    								  
92 LOAD_CONST 8 ( 'x + ' )				      								    								  
94 LOAD_FAST 3 ( b )					      								    								  
96 LOAD_CONST 5 ( 'y = ' )				      								    								  
98 LOAD_FAST 4 ( c )					      								    								  
100 LOAD_CONST 6 ( '\n' )				      								    								  
102 CALL_FUNCTION 7					      								    								  
104 POP_TOP						      								    								  
>> 106 LOAD_CONST 0 ( None )				      								    								  
108 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MID_POINT_LINE_GENERATION_ALGORITHM			      MID_POINT_LINE_GENERATION_ALGORITHM			    MID_POINT_LINE_GENERATION_ALGORITHM				  MID_POINT_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
Disassembly of <code object midPoint at 0x7f33e2653ed0, file  def midPoint ( X1 , Y1 , X2 , Y2 ) :			    def midPoint ( X1 , X1 , X1 , X1 , X2 , X2 , X2 , X2 , X2 , X script_not_found : None
2 0 LOAD_FAST 2 ( X2 )					      	  dx = X2 - X1						    								  
2 LOAD_FAST 0 ( X1 )					      	  dy = Y2 - Y1						    								  
4 BINARY_SUBTRACT					      	  d = dy - ( dx / 2 )					    								  
6 STORE_FAST 4 ( dx )					      	  x = X1						    								  
							      	  y = Y1						    								  
3 8 LOAD_FAST 3 ( Y2 )					      	  print ( x , "," , y , "\n" )				    								  
10 LOAD_FAST 1 ( Y1 )					      	  while ( x < X2 ) :					    								  
12 BINARY_SUBTRACT					      	      x = x + 1						    								  
14 STORE_FAST 5 ( dy )					      	      if ( d < 0 ) :					    								  
							      		  d = d + dy					    								  
4 16 LOAD_FAST 5 ( dy )					      	      else :						    								  
18 LOAD_FAST 4 ( dx )					      		  d = d + ( dy - dx )				    								  
20 LOAD_CONST 1 ( 2 )					      		  y = y + 1					    								  
22 BINARY_TRUE_DIVIDE					      	      print ( x , "," , y , "\n" )			    								  
24 BINARY_SUBTRACT					      								    								  
26 STORE_FAST 6 ( d )					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( X1 )					      								    								  
30 STORE_FAST 7 ( x )					      								    								  
							      								    								  
6 32 LOAD_FAST 1 ( Y1 )					      								    								  
34 STORE_FAST 8 ( y )					      								    								  
							      								    								  
7 36 LOAD_GLOBAL 0 ( print )				      								    								  
38 LOAD_FAST 7 ( x )					      								    								  
40 LOAD_CONST 2 ( ',' )					      								    								  
42 LOAD_FAST 8 ( y )					      								    								  
44 LOAD_CONST 3 ( '\n' )				      								    								  
46 CALL_FUNCTION 4					      								    								  
48 POP_TOP						      								    								  
							      								    								  
8 50 SETUP_LOOP 72 ( to 124 )				      								    								  
>> 52 LOAD_FAST 7 ( x )					      								    								  
54 LOAD_FAST 2 ( X2 )					      								    								  
56 COMPARE_OP 0 ( < )					      								    								  
58 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
9 60 LOAD_FAST 7 ( x )					      								    								  
62 LOAD_CONST 4 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 STORE_FAST 7 ( x )					      								    								  
							      								    								  
10 68 LOAD_FAST 6 ( d )					      								    								  
70 LOAD_CONST 5 ( 0 )					      								    								  
72 COMPARE_OP 0 ( < )					      								    								  
74 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
11 76 LOAD_FAST 6 ( d )					      								    								  
78 LOAD_FAST 5 ( dy )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_FAST 6 ( d )					      								    								  
84 JUMP_FORWARD 20 ( to 106 )				      								    								  
							      								    								  
13 >> 86 LOAD_FAST 6 ( d )				      								    								  
88 LOAD_FAST 5 ( dy )					      								    								  
90 LOAD_FAST 4 ( dx )					      								    								  
92 BINARY_SUBTRACT					      								    								  
94 BINARY_ADD						      								    								  
96 STORE_FAST 6 ( d )					      								    								  
							      								    								  
14 98 LOAD_FAST 8 ( y )					      								    								  
100 LOAD_CONST 4 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 STORE_FAST 8 ( y )					      								    								  
							      								    								  
15 >> 106 LOAD_GLOBAL 0 ( print )			      								    								  
108 LOAD_FAST 7 ( x )					      								    								  
110 LOAD_CONST 2 ( ',' )				      								    								  
112 LOAD_FAST 8 ( y )					      								    								  
114 LOAD_CONST 3 ( '\n' )				      								    								  
116 CALL_FUNCTION 4					      								    								  
118 POP_TOP						      								    								  
120 JUMP_ABSOLUTE 52					      								    								  
>> 122 POP_BLOCK					      								    								  
>> 124 LOAD_CONST 0 ( None )				      								    								  
126 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING	      COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		    COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		  COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING
--							      --							    --								  --
Disassembly of <code object countPattern at 0x7f33e2649a50, f def countPattern ( s ) :					    def countPattern ( s ) :					  failure : #Results: 0, 10
2 0 LOAD_GLOBAL 0 ( len )				      	  length = len ( s )					    	length = len ( s )					  
2 LOAD_FAST 0 ( s )					      	  oneSeen = False					    	length = 0						  
4 CALL_FUNCTION 1					      	  count = 0						    	while length < length :					  
6 STORE_FAST 1 ( length )				      	  for i in range ( length ) :				    	    length = 0						  
							      	      if ( s [ i ] == '1' and oneSeen ) :		    	    while length < length :				  
3 8 LOAD_CONST 1 ( False )				      		  if ( s [ i - 1 ] == '0' ) :			    		length += 1					  
10 STORE_FAST 2 ( oneSeen )				      		      count += 1				    		if length > length :				  
							      	      if ( s [ i ] == '1' and oneSeen == 0 ) :		    		    length += 1					  
4 12 LOAD_CONST 2 ( 0 )					      		  oneSeen = True				    		if length > length :				  
14 STORE_FAST 3 ( count )				      	      if ( s [ i ] != '0' and s [ i ] != '1' ) :	    		    length += 1					  
							      		  oneSeen = False				    		else :						  
5 16 SETUP_LOOP 108 ( to 126 )				      	  return count						    		    length += 1					  
18 LOAD_GLOBAL 1 ( range )				      								    	    return length					  
20 LOAD_FAST 1 ( length )				      								    								  
22 CALL_FUNCTION 1					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 96 ( to 124 )				      								    								  
28 STORE_FAST 4 ( i )					      								    								  
							      								    								  
6 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 4 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( '1' )					      								    								  
38 COMPARE_OP 2 ( == )					      								    								  
40 POP_JUMP_IF_FALSE 70					      								    								  
42 LOAD_FAST 2 ( oneSeen )				      								    								  
44 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
7 46 LOAD_FAST 0 ( s )					      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 LOAD_CONST 4 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 LOAD_CONST 5 ( '0' )					      								    								  
58 COMPARE_OP 2 ( == )					      								    								  
60 POP_JUMP_IF_FALSE 70					      								    								  
							      								    								  
8 62 LOAD_FAST 3 ( count )				      								    								  
64 LOAD_CONST 4 ( 1 )					      								    								  
66 INPLACE_ADD						      								    								  
68 STORE_FAST 3 ( count )				      								    								  
							      								    								  
9 >> 70 LOAD_FAST 0 ( s )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 LOAD_CONST 3 ( '1' )					      								    								  
78 COMPARE_OP 2 ( == )					      								    								  
80 POP_JUMP_IF_FALSE 94					      								    								  
82 LOAD_FAST 2 ( oneSeen )				      								    								  
84 LOAD_CONST 2 ( 0 )					      								    								  
86 COMPARE_OP 2 ( == )					      								    								  
88 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
10 90 LOAD_CONST 6 ( True )				      								    								  
92 STORE_FAST 2 ( oneSeen )				      								    								  
							      								    								  
11 >> 94 LOAD_FAST 0 ( s )				      								    								  
96 LOAD_FAST 4 ( i )					      								    								  
98 BINARY_SUBSCR					      								    								  
100 LOAD_CONST 5 ( '0' )				      								    								  
102 COMPARE_OP 3 ( != )					      								    								  
104 POP_JUMP_IF_FALSE 26				      								    								  
106 LOAD_FAST 0 ( s )					      								    								  
108 LOAD_FAST 4 ( i )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 LOAD_CONST 3 ( '1' )				      								    								  
114 COMPARE_OP 3 ( != )					      								    								  
116 POP_JUMP_IF_FALSE 26				      								    								  
							      								    								  
12 118 LOAD_CONST 1 ( False )				      								    								  
120 STORE_FAST 2 ( oneSeen )				      								    								  
122 JUMP_ABSOLUTE 26					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
13 >> 126 LOAD_FAST 3 ( count )				      								    								  
128 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		      SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		    SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N			  SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N
--							      --							    --								  --
Disassembly of <code object digitsNum at 0x7f33e2653ed0, file def digitsNum ( N ) :					    def digitsNum ( N , N , N , N , N , N , N , N , N , N , N , N script_not_found : None
2 0 LOAD_FAST 0 ( N )					      	  if ( N == 0 ) :					    								  
2 LOAD_CONST 1 ( 0 )					      	      print ( "0" , end = "" )				    								  
4 COMPARE_OP 2 ( == )					      	  if ( N % 9 != 0 ) :					    								  
6 POP_JUMP_IF_FALSE 20					      	      print ( N % 9 , end = "" )			    								  
							      	  for i in range ( 1 , int ( N / 9 ) + 1 ) :		    								  
3 8 LOAD_GLOBAL 0 ( print )				      	      print ( "9" , end = "" )				    								  
10 LOAD_CONST 2 ( '0' )					      	  for i in range ( 1 , N + 1 ) :			    								  
12 LOAD_CONST 3 ( '' )					      	      print ( "0" , end = "" )				    								  
14 LOAD_CONST 4 ( ( 'end' , ) )				      	  print ( )						    								  
16 CALL_FUNCTION_KW 2					      								    								  
18 POP_TOP						      								    								  
							      								    								  
4 >> 20 LOAD_FAST 0 ( N )				      								    								  
22 LOAD_CONST 5 ( 9 )					      								    								  
24 BINARY_MODULO					      								    								  
26 LOAD_CONST 1 ( 0 )					      								    								  
28 COMPARE_OP 3 ( != )					      								    								  
30 POP_JUMP_IF_FALSE 48					      								    								  
							      								    								  
5 32 LOAD_GLOBAL 0 ( print )				      								    								  
34 LOAD_FAST 0 ( N )					      								    								  
36 LOAD_CONST 5 ( 9 )					      								    								  
38 BINARY_MODULO					      								    								  
40 LOAD_CONST 3 ( '' )					      								    								  
42 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
44 CALL_FUNCTION_KW 2					      								    								  
46 POP_TOP						      								    								  
							      								    								  
6 >> 48 SETUP_LOOP 42 ( to 92 )				      								    								  
50 LOAD_GLOBAL 1 ( range )				      								    								  
52 LOAD_CONST 6 ( 1 )					      								    								  
54 LOAD_GLOBAL 2 ( int )				      								    								  
56 LOAD_FAST 0 ( N )					      								    								  
58 LOAD_CONST 5 ( 9 )					      								    								  
60 BINARY_TRUE_DIVIDE					      								    								  
62 CALL_FUNCTION 1					      								    								  
64 LOAD_CONST 6 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 CALL_FUNCTION 2					      								    								  
70 GET_ITER						      								    								  
>> 72 FOR_ITER 16 ( to 90 )				      								    								  
74 STORE_FAST 1 ( i )					      								    								  
							      								    								  
7 76 LOAD_GLOBAL 0 ( print )				      								    								  
78 LOAD_CONST 7 ( '9' )					      								    								  
80 LOAD_CONST 3 ( '' )					      								    								  
82 LOAD_CONST 4 ( ( 'end' , ) )				      								    								  
84 CALL_FUNCTION_KW 2					      								    								  
86 POP_TOP						      								    								  
88 JUMP_ABSOLUTE 72					      								    								  
>> 90 POP_BLOCK						      								    								  
							      								    								  
8 >> 92 SETUP_LOOP 34 ( to 128 )			      								    								  
94 LOAD_GLOBAL 1 ( range )				      								    								  
96 LOAD_CONST 6 ( 1 )					      								    								  
98 LOAD_FAST 0 ( N )					      								    								  
100 LOAD_CONST 6 ( 1 )					      								    								  
102 BINARY_ADD						      								    								  
104 CALL_FUNCTION 2					      								    								  
106 GET_ITER						      								    								  
>> 108 FOR_ITER 16 ( to 126 )				      								    								  
110 STORE_FAST 1 ( i )					      								    								  
							      								    								  
9 112 LOAD_GLOBAL 0 ( print )				      								    								  
114 LOAD_CONST 2 ( '0' )				      								    								  
116 LOAD_CONST 3 ( '' )					      								    								  
118 LOAD_CONST 4 ( ( 'end' , ) )			      								    								  
120 CALL_FUNCTION_KW 2					      								    								  
122 POP_TOP						      								    								  
124 JUMP_ABSOLUTE 108					      								    								  
>> 126 POP_BLOCK					      								    								  
							      								    								  
10 >> 128 LOAD_GLOBAL 0 ( print )			      								    								  
130 CALL_FUNCTION 0					      								    								  
132 POP_TOP						      								    								  
134 LOAD_CONST 0 ( None )				      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE				    FIND_NUMBER_OF_TRIANGLES_POSSIBLE				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE
--							      --							    --								  --
Disassembly of <code object findnumberofTriangles at 0x7f33e2 def findnumberofTriangles ( arr ) :			    def findnumberofTriangles ( arr , 0x70x70x70x70x70x70x70x70x7 script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    								  
2 LOAD_FAST 0 ( arr )					      	  arr.sort ( )						    								  
4 CALL_FUNCTION 1					      	  count = 0						    								  
6 STORE_FAST 1 ( n )					      	  for i in range ( 0 , n - 2 ) :			    								  
							      	      k = i + 2						    								  
3 8 LOAD_FAST 0 ( arr )					      	      for j in range ( i + 1 , n ) :			    								  
10 LOAD_METHOD 1 ( sort )				      		  while ( k < n and arr [ i ] + arr [ j ] > arr [ k 								  
12 CALL_METHOD 0					      		      k += 1					    								  
14 POP_TOP						      		  if ( k > j ) :				    								  
							      		      count += k - j - 1			    								  
4 16 LOAD_CONST 1 ( 0 )					      	  return count						    								  
18 STORE_FAST 2 ( count )				      								    								  
							      								    								  
5 20 SETUP_LOOP 124 ( to 146 )				      								    								  
22 LOAD_GLOBAL 2 ( range )				      								    								  
24 LOAD_CONST 1 ( 0 )					      								    								  
26 LOAD_FAST 1 ( n )					      								    								  
28 LOAD_CONST 2 ( 2 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 2					      								    								  
34 GET_ITER						      								    								  
>> 36 FOR_ITER 106 ( to 144 )				      								    								  
38 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 40 LOAD_FAST 3 ( i )					      								    								  
42 LOAD_CONST 2 ( 2 )					      								    								  
44 BINARY_ADD						      								    								  
46 STORE_FAST 4 ( k )					      								    								  
							      								    								  
7 48 SETUP_LOOP 92 ( to 142 )				      								    								  
50 LOAD_GLOBAL 2 ( range )				      								    								  
52 LOAD_FAST 3 ( i )					      								    								  
54 LOAD_CONST 3 ( 1 )					      								    								  
56 BINARY_ADD						      								    								  
58 LOAD_FAST 1 ( n )					      								    								  
60 CALL_FUNCTION 2					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 74 ( to 140 )				      								    								  
66 STORE_FAST 5 ( j )					      								    								  
							      								    								  
8 68 SETUP_LOOP 44 ( to 114 )				      								    								  
>> 70 LOAD_FAST 4 ( k )					      								    								  
72 LOAD_FAST 1 ( n )					      								    								  
74 COMPARE_OP 0 ( < )					      								    								  
76 POP_JUMP_IF_FALSE 112				      								    								  
78 LOAD_FAST 0 ( arr )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 5 ( j )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 BINARY_ADD						      								    								  
92 LOAD_FAST 0 ( arr )					      								    								  
94 LOAD_FAST 4 ( k )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 COMPARE_OP 4 ( > )					      								    								  
100 POP_JUMP_IF_FALSE 112				      								    								  
							      								    								  
9 102 LOAD_FAST 4 ( k )					      								    								  
104 LOAD_CONST 3 ( 1 )					      								    								  
106 INPLACE_ADD						      								    								  
108 STORE_FAST 4 ( k )					      								    								  
110 JUMP_ABSOLUTE 70					      								    								  
>> 112 POP_BLOCK					      								    								  
							      								    								  
10 >> 114 LOAD_FAST 4 ( k )				      								    								  
116 LOAD_FAST 5 ( j )					      								    								  
118 COMPARE_OP 4 ( > )					      								    								  
120 POP_JUMP_IF_FALSE 64				      								    								  
							      								    								  
11 122 LOAD_FAST 2 ( count )				      								    								  
124 LOAD_FAST 4 ( k )					      								    								  
126 LOAD_FAST 5 ( j )					      								    								  
128 BINARY_SUBTRACT					      								    								  
130 LOAD_CONST 3 ( 1 )					      								    								  
132 BINARY_SUBTRACT					      								    								  
134 INPLACE_ADD						      								    								  
136 STORE_FAST 2 ( count )				      								    								  
138 JUMP_ABSOLUTE 64					      								    								  
>> 140 POP_BLOCK					      								    								  
>> 142 JUMP_ABSOLUTE 36					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
12 >> 146 LOAD_FAST 2 ( count )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL		      MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			    MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			  MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL
--							      --							    --								  --
Disassembly of <code object moveSpaceInFront at 0x7f33e2653ed def moveSpaceInFront ( s ) :				    def moveSpaceInFront ( s ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  i = len ( s ) - 1 ;					    	i = len ( s ) - 1					  
2 LOAD_FAST 0 ( s )					      	  for j in range ( i , - 1 , - 1 ) :			    	while i < len ( s ) - 1 :				  
4 CALL_FUNCTION 1					      	      if ( s [ j ] != ' ' ) :				    	    for j in range ( i ) :				  
6 LOAD_CONST 1 ( 1 )					      		  s = s [ : i ] + s [ j ] + s [ i + 1 : ]	    		if j == 0 :					  
8 BINARY_SUBTRACT					      		  i -= 1 ;					    		    break					  
10 STORE_FAST 1 ( i )					      	  while ( i >= 0 ) :					    	return s						  
							      	      s = s [ : i ] + ' ' + s [ i + 1 : ]		    								  
3 12 SETUP_LOOP 76 ( to 90 )				      	      i -= 1						    								  
14 LOAD_GLOBAL 1 ( range )				      	  return s ;						    								  
16 LOAD_FAST 1 ( i )					      								    								  
18 LOAD_CONST 2 ( - 1 )					      								    								  
20 LOAD_CONST 2 ( - 1 )					      								    								  
22 CALL_FUNCTION 3					      								    								  
24 GET_ITER						      								    								  
>> 26 FOR_ITER 60 ( to 88 )				      								    								  
28 STORE_FAST 2 ( j )					      								    								  
							      								    								  
4 30 LOAD_FAST 0 ( s )					      								    								  
32 LOAD_FAST 2 ( j )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_CONST 3 ( ' ' )					      								    								  
38 COMPARE_OP 3 ( != )					      								    								  
40 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
5 42 LOAD_FAST 0 ( s )					      								    								  
44 LOAD_CONST 0 ( None )				      								    								  
46 LOAD_FAST 1 ( i )					      								    								  
48 BUILD_SLICE 2					      								    								  
50 BINARY_SUBSCR					      								    								  
52 LOAD_FAST 0 ( s )					      								    								  
54 LOAD_FAST 2 ( j )					      								    								  
56 BINARY_SUBSCR					      								    								  
58 BINARY_ADD						      								    								  
60 LOAD_FAST 0 ( s )					      								    								  
62 LOAD_FAST 1 ( i )					      								    								  
64 LOAD_CONST 1 ( 1 )					      								    								  
66 BINARY_ADD						      								    								  
68 LOAD_CONST 0 ( None )				      								    								  
70 BUILD_SLICE 2					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 STORE_FAST 0 ( s )					      								    								  
							      								    								  
6 78 LOAD_FAST 1 ( i )					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 INPLACE_SUBTRACT					      								    								  
84 STORE_FAST 1 ( i )					      								    								  
86 JUMP_ABSOLUTE 26					      								    								  
>> 88 POP_BLOCK						      								    								  
							      								    								  
7 >> 90 SETUP_LOOP 52 ( to 144 )			      								    								  
>> 92 LOAD_FAST 1 ( i )					      								    								  
94 LOAD_CONST 4 ( 0 )					      								    								  
96 COMPARE_OP 5 ( >= )					      								    								  
98 POP_JUMP_IF_FALSE 142				      								    								  
							      								    								  
8 100 LOAD_FAST 0 ( s )					      								    								  
102 LOAD_CONST 0 ( None )				      								    								  
104 LOAD_FAST 1 ( i )					      								    								  
106 BUILD_SLICE 2					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 3 ( ' ' )				      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 0 ( s )					      								    								  
116 LOAD_FAST 1 ( i )					      								    								  
118 LOAD_CONST 1 ( 1 )					      								    								  
120 BINARY_ADD						      								    								  
122 LOAD_CONST 0 ( None )				      								    								  
124 BUILD_SLICE 2					      								    								  
126 BINARY_SUBSCR					      								    								  
128 BINARY_ADD						      								    								  
130 STORE_FAST 0 ( s )					      								    								  
							      								    								  
9 132 LOAD_FAST 1 ( i )					      								    								  
134 LOAD_CONST 1 ( 1 )					      								    								  
136 INPLACE_SUBTRACT					      								    								  
138 STORE_FAST 1 ( i )					      								    								  
140 JUMP_ABSOLUTE 92					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
10 >> 144 LOAD_FAST 0 ( s )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE
--							      --							    --								  --
Disassembly of <code object find3Numbers at 0x7f33e2649a50, f def find3Numbers ( A , arr_size , sum ) :			    def find3Numbers ( A , arr_size , arr_size , arr_size , arr_s error :   File "/home/ubuntu/TransCoder/models/eva
2 0 SETUP_LOOP 136 ( to 138 )				      	  for i in range ( 0 , arr_size - 2 ) :			    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_GLOBAL 0 ( range )				      	      for j in range ( i + 1 , arr_size - 1 ) :		    								  alid/FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE.py",
4 LOAD_CONST 1 ( 0 )					      		  for k in range ( j + 1 , arr_size ) :		    								   line 29     if __name__ == '__main__':      ^ Syn
6 LOAD_FAST 1 ( arr_size )				      		      if A [ i ] + A [ j ] + A [ k ] == sum :	    								  taxError: invalid syntax
8 LOAD_CONST 2 ( 2 )					      			  print ( "Triplet is" , A [ i ] , ", " , A 								  
10 BINARY_SUBTRACT					      			  return True				    								  
12 CALL_FUNCTION 2					      	  return False						    								  
14 GET_ITER						      								    								  
>> 16 FOR_ITER 118 ( to 136 )				      								    								  
18 STORE_FAST 3 ( i )					      								    								  
							      								    								  
3 20 SETUP_LOOP 112 ( to 134 )				      								    								  
22 LOAD_GLOBAL 0 ( range )				      								    								  
24 LOAD_FAST 3 ( i )					      								    								  
26 LOAD_CONST 3 ( 1 )					      								    								  
28 BINARY_ADD						      								    								  
30 LOAD_FAST 1 ( arr_size )				      								    								  
32 LOAD_CONST 3 ( 1 )					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 CALL_FUNCTION 2					      								    								  
38 GET_ITER						      								    								  
>> 40 FOR_ITER 90 ( to 132 )				      								    								  
42 STORE_FAST 4 ( j )					      								    								  
							      								    								  
4 44 SETUP_LOOP 84 ( to 130 )				      								    								  
46 LOAD_GLOBAL 0 ( range )				      								    								  
48 LOAD_FAST 4 ( j )					      								    								  
50 LOAD_CONST 3 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 LOAD_FAST 1 ( arr_size )				      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 66 ( to 128 )				      								    								  
62 STORE_FAST 5 ( k )					      								    								  
							      								    								  
5 64 LOAD_FAST 0 ( A )					      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( A )					      								    								  
72 LOAD_FAST 4 ( j )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 0 ( A )					      								    								  
80 LOAD_FAST 5 ( k )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 BINARY_ADD						      								    								  
86 LOAD_FAST 2 ( sum )					      								    								  
88 COMPARE_OP 2 ( == )					      								    								  
90 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
6 92 LOAD_GLOBAL 1 ( print )				      								    								  
94 LOAD_CONST 4 ( 'Triplet is' )			      								    								  
96 LOAD_FAST 0 ( A )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_CONST 5 ( ', ' )				      								    								  
104 LOAD_FAST 0 ( A )					      								    								  
106 LOAD_FAST 4 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 LOAD_CONST 5 ( ', ' )				      								    								  
112 LOAD_FAST 0 ( A )					      								    								  
114 LOAD_FAST 5 ( k )					      								    								  
116 BINARY_SUBSCR					      								    								  
118 CALL_FUNCTION 6					      								    								  
120 POP_TOP						      								    								  
							      								    								  
7 122 LOAD_CONST 6 ( True )				      								    								  
124 RETURN_VALUE					      								    								  
126 JUMP_ABSOLUTE 60					      								    								  
>> 128 POP_BLOCK					      								    								  
>> 130 JUMP_ABSOLUTE 40					      								    								  
>> 132 POP_BLOCK					      								    								  
>> 134 JUMP_ABSOLUTE 16					      								    								  
>> 136 POP_BLOCK					      								    								  
							      								    								  
8 >> 138 LOAD_CONST 7 ( False )				      								    								  
140 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STOOGE_SORT						      STOOGE_SORT						    STOOGE_SORT							  STOOGE_SORT
--							      --							    --								  --
Disassembly of <code object stoogesort at 0x7f33e2653f60, fil def stoogesort ( arr , l , h ) :				    def stoogesort ( arr , l , l , l , l , l , l , l , l , l , l  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( l )					      	  if l >= h :						    								  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 2 ( h )					      	      return						    								  alid/STOOGE_SORT.py", line 33	    if __name__ == '
4 COMPARE_OP 5 ( >= )					      	  if arr [ l ] > arr [ h ] :				    								  __main__':	  ^ SyntaxError: invalid syntax
6 POP_JUMP_IF_FALSE 12					      	      t = arr [ l ]					    								  
							      	      arr [ l ] = arr [ h ]				    								  
3 8 LOAD_CONST 0 ( None )				      	      arr [ h ] = t					    								  
10 RETURN_VALUE						      	  if h - l + 1 > 2 :					    								  
							      	      t = ( int ) ( ( h - l + 1 ) / 3 )			    								  
4 >> 12 LOAD_FAST 0 ( arr )				      	      stoogesort ( arr , l , ( h - t ) )		    								  
14 LOAD_FAST 1 ( l )					      	      stoogesort ( arr , l + t , ( h ) )		    								  
16 BINARY_SUBSCR					      	      stoogesort ( arr , l , ( h - t ) )		    								  
18 LOAD_FAST 0 ( arr )					      								    								  
20 LOAD_FAST 2 ( h )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 COMPARE_OP 4 ( > )					      								    								  
26 POP_JUMP_IF_FALSE 56					      								    								  
							      								    								  
5 28 LOAD_FAST 0 ( arr )				      								    								  
30 LOAD_FAST 1 ( l )					      								    								  
32 BINARY_SUBSCR					      								    								  
34 STORE_FAST 3 ( t )					      								    								  
							      								    								  
6 36 LOAD_FAST 0 ( arr )				      								    								  
38 LOAD_FAST 2 ( h )					      								    								  
40 BINARY_SUBSCR					      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 1 ( l )					      								    								  
46 STORE_SUBSCR						      								    								  
							      								    								  
7 48 LOAD_FAST 3 ( t )					      								    								  
50 LOAD_FAST 0 ( arr )					      								    								  
52 LOAD_FAST 2 ( h )					      								    								  
54 STORE_SUBSCR						      								    								  
							      								    								  
8 >> 56 LOAD_FAST 2 ( h )				      								    								  
58 LOAD_FAST 1 ( l )					      								    								  
60 BINARY_SUBTRACT					      								    								  
62 LOAD_CONST 1 ( 1 )					      								    								  
64 BINARY_ADD						      								    								  
66 LOAD_CONST 2 ( 2 )					      								    								  
68 COMPARE_OP 4 ( > )					      								    								  
70 POP_JUMP_IF_FALSE 140				      								    								  
							      								    								  
9 72 LOAD_GLOBAL 0 ( int )				      								    								  
74 LOAD_FAST 2 ( h )					      								    								  
76 LOAD_FAST 1 ( l )					      								    								  
78 BINARY_SUBTRACT					      								    								  
80 LOAD_CONST 1 ( 1 )					      								    								  
82 BINARY_ADD						      								    								  
84 LOAD_CONST 3 ( 3 )					      								    								  
86 BINARY_TRUE_DIVIDE					      								    								  
88 CALL_FUNCTION 1					      								    								  
90 STORE_FAST 3 ( t )					      								    								  
							      								    								  
10 92 LOAD_GLOBAL 1 ( stoogesort )			      								    								  
94 LOAD_FAST 0 ( arr )					      								    								  
96 LOAD_FAST 1 ( l )					      								    								  
98 LOAD_FAST 2 ( h )					      								    								  
100 LOAD_FAST 3 ( t )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 CALL_FUNCTION 3					      								    								  
106 POP_TOP						      								    								  
							      								    								  
11 108 LOAD_GLOBAL 1 ( stoogesort )			      								    								  
110 LOAD_FAST 0 ( arr )					      								    								  
112 LOAD_FAST 1 ( l )					      								    								  
114 LOAD_FAST 3 ( t )					      								    								  
116 BINARY_ADD						      								    								  
118 LOAD_FAST 2 ( h )					      								    								  
120 CALL_FUNCTION 3					      								    								  
122 POP_TOP						      								    								  
							      								    								  
12 124 LOAD_GLOBAL 1 ( stoogesort )			      								    								  
126 LOAD_FAST 0 ( arr )					      								    								  
128 LOAD_FAST 1 ( l )					      								    								  
130 LOAD_FAST 2 ( h )					      								    								  
132 LOAD_FAST 3 ( t )					      								    								  
134 BINARY_SUBTRACT					      								    								  
136 CALL_FUNCTION 3					      								    								  
138 POP_TOP						      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			    FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1
--							      --							    --								  --
Disassembly of <code object CountTriangles at 0x7f33e2653ed0, def CountTriangles ( A ) :				    def CountTriangles ( A , 0x70x71 ) :			  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( A ) ;					    	n = len ( A )						  
2 LOAD_FAST 0 ( A )					      	  A.sort ( ) ;						    	n = 0							  
4 CALL_FUNCTION 1					      	  count = 0 ;						    	while n < 0 :						  
6 STORE_FAST 1 ( n )					      	  for i in range ( n - 1 , 0 , - 1 ) :			    	    n = 0						  
							      	      l = 0 ;						    	    while n < n :					  
3 8 LOAD_FAST 0 ( A )					      	      r = i - 1 ;					    		n += 1						  
10 LOAD_METHOD 1 ( sort )				      	      while ( l < r ) :					    		n += 1						  
12 CALL_METHOD 0					      		  if ( A [ l ] + A [ r ] > A [ i ] ) :		    		n += 1						  
14 POP_TOP						      		      count += r - l ;				    	    n += 1						  
							      		      r -= 1 ;					    	n >>= 1							  
4 16 LOAD_CONST 1 ( 0 )					      		  else :					    	n >>= 1							  
18 STORE_FAST 2 ( count )				      		      l += 1 ;					    	n >>= 1							  
							      	  print ( "No of possible solutions: " , count ) ;	    	n >>= 1							  
5 20 SETUP_LOOP 104 ( to 126 )				      								    return n							  
22 LOAD_GLOBAL 2 ( range )				      								    								  
24 LOAD_FAST 1 ( n )					      								    								  
26 LOAD_CONST 2 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 LOAD_CONST 1 ( 0 )					      								    								  
32 LOAD_CONST 3 ( - 1 )					      								    								  
34 CALL_FUNCTION 3					      								    								  
36 GET_ITER						      								    								  
>> 38 FOR_ITER 84 ( to 124 )				      								    								  
40 STORE_FAST 3 ( i )					      								    								  
							      								    								  
6 42 LOAD_CONST 1 ( 0 )					      								    								  
44 STORE_FAST 4 ( l )					      								    								  
							      								    								  
7 46 LOAD_FAST 3 ( i )					      								    								  
48 LOAD_CONST 2 ( 1 )					      								    								  
50 BINARY_SUBTRACT					      								    								  
52 STORE_FAST 5 ( r )					      								    								  
							      								    								  
8 54 SETUP_LOOP 66 ( to 122 )				      								    								  
>> 56 LOAD_FAST 4 ( l )					      								    								  
58 LOAD_FAST 5 ( r )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 120				      								    								  
							      								    								  
9 64 LOAD_FAST 0 ( A )					      								    								  
66 LOAD_FAST 4 ( l )					      								    								  
68 BINARY_SUBSCR					      								    								  
70 LOAD_FAST 0 ( A )					      								    								  
72 LOAD_FAST 5 ( r )					      								    								  
74 BINARY_SUBSCR					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 0 ( A )					      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 BINARY_SUBSCR					      								    								  
84 COMPARE_OP 4 ( > )					      								    								  
86 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
10 88 LOAD_FAST 2 ( count )				      								    								  
90 LOAD_FAST 5 ( r )					      								    								  
92 LOAD_FAST 4 ( l )					      								    								  
94 BINARY_SUBTRACT					      								    								  
96 INPLACE_ADD						      								    								  
98 STORE_FAST 2 ( count )				      								    								  
							      								    								  
11 100 LOAD_FAST 5 ( r )				      								    								  
102 LOAD_CONST 2 ( 1 )					      								    								  
104 INPLACE_SUBTRACT					      								    								  
106 STORE_FAST 5 ( r )					      								    								  
108 JUMP_ABSOLUTE 56					      								    								  
							      								    								  
13 >> 110 LOAD_FAST 4 ( l )				      								    								  
112 LOAD_CONST 2 ( 1 )					      								    								  
114 INPLACE_ADD						      								    								  
116 STORE_FAST 4 ( l )					      								    								  
118 JUMP_ABSOLUTE 56					      								    								  
>> 120 POP_BLOCK					      								    								  
>> 122 JUMP_ABSOLUTE 38					      								    								  
>> 124 POP_BLOCK					      								    								  
							      								    								  
14 >> 126 LOAD_GLOBAL 3 ( print )			      								    								  
128 LOAD_CONST 4 ( 'No of possible solutions: ' )	      								    								  
130 LOAD_FAST 2 ( count )				      								    								  
132 CALL_FUNCTION 2					      								    								  
134 POP_TOP						      								    								  
136 LOAD_CONST 0 ( None )				      								    								  
138 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_REPEATING_AND_A_MISSING_NUMBER			      FIND_A_REPEATING_AND_A_MISSING_NUMBER			    FIND_A_REPEATING_AND_A_MISSING_NUMBER			  FIND_A_REPEATING_AND_A_MISSING_NUMBER
--							      --							    --								  --
Disassembly of <code object printTwoElements at 0x7f33e26494b def printTwoElements ( arr , size ) :			    def printTwoElements ( arr , size , size , size ) :		  script_not_found : None
2 0 SETUP_LOOP 98 ( to 100 )				      	  for i in range ( size ) :				    	for i in range ( size ) :				  
2 LOAD_GLOBAL 0 ( range )				      	      if arr [ abs ( arr [ i ] ) - 1 ] > 0 :		    	    if size < size :					  
4 LOAD_FAST 1 ( size )					      		  arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr 		arr [ i ] = abs ( size [ i ] )			  
6 CALL_FUNCTION 1					      	      else :						    	return arr						  
8 GET_ITER						      		  print ( "The repeating element is" , abs ( arr [  								  
>> 10 FOR_ITER 86 ( to 98 )				      	  for i in range ( size ) :				    								  
12 STORE_FAST 2 ( i )					      	      if arr [ i ] > 0 :				    								  
							      		  print ( "and the missing element is" , i + 1 )    								  
3 14 LOAD_FAST 0 ( arr )				      								    								  
16 LOAD_GLOBAL 1 ( abs )				      								    								  
18 LOAD_FAST 0 ( arr )					      								    								  
20 LOAD_FAST 2 ( i )					      								    								  
22 BINARY_SUBSCR					      								    								  
24 CALL_FUNCTION 1					      								    								  
26 LOAD_CONST 1 ( 1 )					      								    								  
28 BINARY_SUBTRACT					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_CONST 2 ( 0 )					      								    								  
34 COMPARE_OP 4 ( > )					      								    								  
36 POP_JUMP_IF_FALSE 78					      								    								  
							      								    								  
4 38 LOAD_FAST 0 ( arr )				      								    								  
40 LOAD_GLOBAL 1 ( abs )				      								    								  
42 LOAD_FAST 0 ( arr )					      								    								  
44 LOAD_FAST 2 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 CALL_FUNCTION 1					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_SUBTRACT					      								    								  
54 BINARY_SUBSCR					      								    								  
56 UNARY_NEGATIVE					      								    								  
58 LOAD_FAST 0 ( arr )					      								    								  
60 LOAD_GLOBAL 1 ( abs )				      								    								  
62 LOAD_FAST 0 ( arr )					      								    								  
64 LOAD_FAST 2 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 CALL_FUNCTION 1					      								    								  
70 LOAD_CONST 1 ( 1 )					      								    								  
72 BINARY_SUBTRACT					      								    								  
74 STORE_SUBSCR						      								    								  
76 JUMP_ABSOLUTE 10					      								    								  
							      								    								  
6 >> 78 LOAD_GLOBAL 2 ( print )				      								    								  
80 LOAD_CONST 3 ( 'The repeating element is' )		      								    								  
82 LOAD_GLOBAL 1 ( abs )				      								    								  
84 LOAD_FAST 0 ( arr )					      								    								  
86 LOAD_FAST 2 ( i )					      								    								  
88 BINARY_SUBSCR					      								    								  
90 CALL_FUNCTION 1					      								    								  
92 CALL_FUNCTION 2					      								    								  
94 POP_TOP						      								    								  
96 JUMP_ABSOLUTE 10					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
7 >> 100 SETUP_LOOP 42 ( to 144 )			      								    								  
102 LOAD_GLOBAL 0 ( range )				      								    								  
104 LOAD_FAST 1 ( size )				      								    								  
106 CALL_FUNCTION 1					      								    								  
108 GET_ITER						      								    								  
>> 110 FOR_ITER 30 ( to 142 )				      								    								  
112 STORE_FAST 2 ( i )					      								    								  
							      								    								  
8 114 LOAD_FAST 0 ( arr )				      								    								  
116 LOAD_FAST 2 ( i )					      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_CONST 2 ( 0 )					      								    								  
122 COMPARE_OP 4 ( > )					      								    								  
124 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
9 126 LOAD_GLOBAL 2 ( print )				      								    								  
128 LOAD_CONST 4 ( 'and the missing element is' )	      								    								  
130 LOAD_FAST 2 ( i )					      								    								  
132 LOAD_CONST 1 ( 1 )					      								    								  
134 BINARY_ADD						      								    								  
136 CALL_FUNCTION 2					      								    								  
138 POP_TOP						      								    								  
140 JUMP_ABSOLUTE 110					      								    								  
>> 142 POP_BLOCK					      								    								  
>> 144 LOAD_CONST 0 ( None )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
JUMP_SEARCH						      JUMP_SEARCH						    JUMP_SEARCH							  JUMP_SEARCH
--							      --							    --								  --
Disassembly of <code object jumpSearch at 0x7f33e2644930, fil def jumpSearch ( arr , x , n ) :				    def jumpSearch ( arr , x , y , x , y , z ) :		  script_not_found : None
2 0 LOAD_GLOBAL 0 ( math )				      	  step = math.sqrt ( n )				    	step = math.sqrt ( ( x - y ) )				  
2 LOAD_METHOD 1 ( sqrt )				      	  prev = 0						    	while step < 0 :					  
4 LOAD_FAST 2 ( n )					      	  while arr [ int ( min ( step , n ) - 1 ) ] < x :	    	    if x < y :						  
6 CALL_METHOD 1						      	      prev = step					    		step += 1					  
8 STORE_FAST 3 ( step )					      	      step += math.sqrt ( n )				    	    if x < y :						  
							      	      if prev >= n :					    		step += 1					  
3 10 LOAD_CONST 1 ( 0 )					      		  return - 1					    	    else :						  
12 STORE_FAST 4 ( prev )				      	  while arr [ int ( prev ) ] < x :			    		step += 1					  
							      	      prev += 1						    	if x < y :						  
4 14 SETUP_LOOP 60 ( to 76 )				      	      if prev == min ( step , n ) :			    	    step += 1						  
>> 16 LOAD_FAST 0 ( arr )				      		  return - 1					    	else :							  
18 LOAD_GLOBAL 2 ( int )				      	  if arr [ int ( prev ) ] == x :			    	    step += 1						  
20 LOAD_GLOBAL 3 ( min )				      	      return prev					    return step							  
22 LOAD_FAST 3 ( step )					      	  return - 1						    								  
24 LOAD_FAST 2 ( n )					      								    								  
26 CALL_FUNCTION 2					      								    								  
28 LOAD_CONST 2 ( 1 )					      								    								  
30 BINARY_SUBTRACT					      								    								  
32 CALL_FUNCTION 1					      								    								  
34 BINARY_SUBSCR					      								    								  
36 LOAD_FAST 1 ( x )					      								    								  
38 COMPARE_OP 0 ( < )					      								    								  
40 POP_JUMP_IF_FALSE 74					      								    								  
							      								    								  
5 42 LOAD_FAST 3 ( step )				      								    								  
44 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
6 46 LOAD_FAST 3 ( step )				      								    								  
48 LOAD_GLOBAL 0 ( math )				      								    								  
50 LOAD_METHOD 1 ( sqrt )				      								    								  
52 LOAD_FAST 2 ( n )					      								    								  
54 CALL_METHOD 1					      								    								  
56 INPLACE_ADD						      								    								  
58 STORE_FAST 3 ( step )				      								    								  
							      								    								  
7 60 LOAD_FAST 4 ( prev )				      								    								  
62 LOAD_FAST 2 ( n )					      								    								  
64 COMPARE_OP 5 ( >= )					      								    								  
66 POP_JUMP_IF_FALSE 16					      								    								  
							      								    								  
8 68 LOAD_CONST 3 ( - 1 )				      								    								  
70 RETURN_VALUE						      								    								  
72 JUMP_ABSOLUTE 16					      								    								  
>> 74 POP_BLOCK						      								    								  
							      								    								  
9 >> 76 SETUP_LOOP 46 ( to 124 )			      								    								  
>> 78 LOAD_FAST 0 ( arr )				      								    								  
80 LOAD_GLOBAL 2 ( int )				      								    								  
82 LOAD_FAST 4 ( prev )					      								    								  
84 CALL_FUNCTION 1					      								    								  
86 BINARY_SUBSCR					      								    								  
88 LOAD_FAST 1 ( x )					      								    								  
90 COMPARE_OP 0 ( < )					      								    								  
92 POP_JUMP_IF_FALSE 122				      								    								  
							      								    								  
10 94 LOAD_FAST 4 ( prev )				      								    								  
96 LOAD_CONST 2 ( 1 )					      								    								  
98 INPLACE_ADD						      								    								  
100 STORE_FAST 4 ( prev )				      								    								  
							      								    								  
11 102 LOAD_FAST 4 ( prev )				      								    								  
104 LOAD_GLOBAL 3 ( min )				      								    								  
106 LOAD_FAST 3 ( step )				      								    								  
108 LOAD_FAST 2 ( n )					      								    								  
110 CALL_FUNCTION 2					      								    								  
112 COMPARE_OP 2 ( == )					      								    								  
114 POP_JUMP_IF_FALSE 78				      								    								  
							      								    								  
12 116 LOAD_CONST 3 ( - 1 )				      								    								  
118 RETURN_VALUE					      								    								  
120 JUMP_ABSOLUTE 78					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
13 >> 124 LOAD_FAST 0 ( arr )				      								    								  
126 LOAD_GLOBAL 2 ( int )				      								    								  
128 LOAD_FAST 4 ( prev )				      								    								  
130 CALL_FUNCTION 1					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_FAST 1 ( x )					      								    								  
136 COMPARE_OP 2 ( == )					      								    								  
138 POP_JUMP_IF_FALSE 144				      								    								  
							      								    								  
14 140 LOAD_FAST 4 ( prev )				      								    								  
142 RETURN_VALUE					      								    								  
							      								    								  
15 >> 144 LOAD_CONST 3 ( - 1 )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			      CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			    CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			  CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS
--							      --							    --								  --
Disassembly of <code object isPermutedMatrix at 0x7f33e2644f6 def isPermutedMatrix ( mat , n ) :			    def isPermutedMatrix ( mat , n ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( '' )					      	  str_cat = ""						    	str_cat = ""						  
2 STORE_FAST 2 ( str_cat )				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
							      	      str_cat = str_cat + "-" + str ( mat [ 0 ] [ i ] )	    	    if n == n :						  
3 4 SETUP_LOOP 40 ( to 46 )				      	  str_cat = str_cat + str_cat				    		return "-"					  
6 LOAD_GLOBAL 0 ( range )				      	  for i in range ( 1 , n ) :				    	    if n == n :						  
8 LOAD_FAST 1 ( n )					      	      curr_str = ""					    		return "-"					  
10 CALL_FUNCTION 1					      	      for j in range ( n ) :				    	    if n == n :						  
12 GET_ITER						      		  curr_str = curr_str + "-" + str ( mat [ i ] [ j ] 		return "-"					  
>> 14 FOR_ITER 28 ( to 44 )				      	      if ( str_cat.find ( curr_str ) ) :		    	    if n == n :						  
16 STORE_FAST 3 ( i )					      		  return True					    		return "-"					  
							      	  return False						    	    if n == n :						  
4 18 LOAD_FAST 2 ( str_cat )				      								    		return "-"					  
20 LOAD_CONST 2 ( '-' )					      								    	    return "-"						  
22 BINARY_ADD						      								    	return "-"						  
24 LOAD_GLOBAL 1 ( str )				      								    								  
26 LOAD_FAST 0 ( mat )					      								    								  
28 LOAD_CONST 3 ( 0 )					      								    								  
30 BINARY_SUBSCR					      								    								  
32 LOAD_FAST 3 ( i )					      								    								  
34 BINARY_SUBSCR					      								    								  
36 CALL_FUNCTION 1					      								    								  
38 BINARY_ADD						      								    								  
40 STORE_FAST 2 ( str_cat )				      								    								  
42 JUMP_ABSOLUTE 14					      								    								  
>> 44 POP_BLOCK						      								    								  
							      								    								  
5 >> 46 LOAD_FAST 2 ( str_cat )				      								    								  
48 LOAD_FAST 2 ( str_cat )				      								    								  
50 BINARY_ADD						      								    								  
52 STORE_FAST 2 ( str_cat )				      								    								  
							      								    								  
6 54 SETUP_LOOP 78 ( to 134 )				      								    								  
56 LOAD_GLOBAL 0 ( range )				      								    								  
58 LOAD_CONST 4 ( 1 )					      								    								  
60 LOAD_FAST 1 ( n )					      								    								  
62 CALL_FUNCTION 2					      								    								  
64 GET_ITER						      								    								  
>> 66 FOR_ITER 64 ( to 132 )				      								    								  
68 STORE_FAST 3 ( i )					      								    								  
							      								    								  
7 70 LOAD_CONST 1 ( '' )				      								    								  
72 STORE_FAST 4 ( curr_str )				      								    								  
							      								    								  
8 74 SETUP_LOOP 40 ( to 116 )				      								    								  
76 LOAD_GLOBAL 0 ( range )				      								    								  
78 LOAD_FAST 1 ( n )					      								    								  
80 CALL_FUNCTION 1					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 28 ( to 114 )				      								    								  
86 STORE_FAST 5 ( j )					      								    								  
							      								    								  
9 88 LOAD_FAST 4 ( curr_str )				      								    								  
90 LOAD_CONST 2 ( '-' )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_GLOBAL 1 ( str )				      								    								  
96 LOAD_FAST 0 ( mat )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 LOAD_FAST 5 ( j )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 CALL_FUNCTION 1					      								    								  
108 BINARY_ADD						      								    								  
110 STORE_FAST 4 ( curr_str )				      								    								  
112 JUMP_ABSOLUTE 84					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
10 >> 116 LOAD_FAST 2 ( str_cat )			      								    								  
118 LOAD_METHOD 2 ( find )				      								    								  
120 LOAD_FAST 4 ( curr_str )				      								    								  
122 CALL_METHOD 1					      								    								  
124 POP_JUMP_IF_FALSE 66				      								    								  
							      								    								  
11 126 LOAD_CONST 5 ( True )				      								    								  
128 RETURN_VALUE					      								    								  
130 JUMP_ABSOLUTE 66					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
12 >> 134 LOAD_CONST 6 ( False )			      								    								  
136 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FITTING_SHELVES_PROBLEM					      FITTING_SHELVES_PROBLEM					    FITTING_SHELVES_PROBLEM					  FITTING_SHELVES_PROBLEM
--							      --							    --								  --
Disassembly of <code object minSpacePreferLarge at 0x7f33e264 def minSpacePreferLarge ( w , m , n ) :			    def minSpacePreferLarge ( w , n , n , n ) :			  script_not_found : None
2 0 LOAD_CONST 1 ( 0 )					      	  num_m = 0						    	num_n = 0						  
2 STORE_FAST 3 ( num_m )				      	  num_n = 0						    	while n >= 0 :						  
							      	  rem = w						    	    q = 0						  
3 4 LOAD_CONST 1 ( 0 )					      	  p = 0							    	    q = 0						  
6 STORE_FAST 4 ( num_n )				      	  q = 0							    	    q = 0						  
							      	  r = 0							    	    q = 0						  
4 8 LOAD_FAST 0 ( w )					      	  while ( w >= n ) :					    	    q = 0						  
10 STORE_FAST 5 ( rem )					      	      p = w / m						    	    q = 0						  
							      	      r = w % m						    	    q = 0						  
5 12 LOAD_CONST 1 ( 0 )					      	      if ( r <= rem ) :					    	    q = 0						  
14 STORE_FAST 6 ( p )					      		  num_m = p					    	    q = 0						  
							      		  num_n = q					    	    q = 0						  
6 16 LOAD_CONST 1 ( 0 )					      		  rem = r					    	    q = 0						  
18 STORE_FAST 7 ( q )					      	      q += 1						    	    q = q - q						  
							      	      w -= n						    	    q = q - q						  
7 20 LOAD_CONST 1 ( 0 )					      	  print ( str ( int ( num_m ) ) + " " + str ( num_n ) + " " 	    q = q						  
22 STORE_FAST 8 ( r )					      								    	    q = q - q						  
							      								    	    q = q - q						  
8 24 SETUP_LOOP 64 ( to 90 )				      								    	    q = q - q						  
>> 26 LOAD_FAST 0 ( w )					      								    	    q = q - q						  
28 LOAD_FAST 2 ( n )					      								    	    q = q - q						  
30 COMPARE_OP 5 ( >= )					      								    	    q = q - q						  
32 POP_JUMP_IF_FALSE 88					      								    	    q = q - q						  
							      								    	    q = q - q						  
9 34 LOAD_FAST 0 ( w )					      								    	    q = q - q						  
36 LOAD_FAST 1 ( m )					      								    	    q = q - q						  
38 BINARY_TRUE_DIVIDE					      								    	    q = q - q						  
40 STORE_FAST 6 ( p )					      								    	    q = q - q						  
							      								    	    q = q - q						  
10 42 LOAD_FAST 0 ( w )					      								    	    q = q - q						  
44 LOAD_FAST 1 ( m )					      								    	    q = q - q						  
46 BINARY_MODULO					      								    	    q = q - q						  
48 STORE_FAST 8 ( r )					      								    	    q = q - q						  
							      								    	    q = q - q						  
11 50 LOAD_FAST 8 ( r )					      								    	    q = q - q						  
52 LOAD_FAST 5 ( rem )					      								    	    q = q - q						  
54 COMPARE_OP 1 ( <= )					      								    	    q = q - q						  
56 POP_JUMP_IF_FALSE 70					      								    	    q = q - q						  
							      								    	    q = q - q						  
12 58 LOAD_FAST 6 ( p )					      								    	    q = q - q						  
60 STORE_FAST 3 ( num_m )				      								    	    q = q - q						  
							      								    	    q = q - q						  
13 62 LOAD_FAST 7 ( q )					      								    	    q = q - q						  
64 STORE_FAST 4 ( num_n )				      								    	    q = q - q						  
							      								    	    q = q - q						  
14 66 LOAD_FAST 8 ( r )					      								    	    q = q - q						  
68 STORE_FAST 5 ( rem )					      								    	    q = q - q						  
							      								    	    q = q - q						  
15 >> 70 LOAD_FAST 7 ( q )				      								    	    q = q - q						  
72 LOAD_CONST 2 ( 1 )					      								    	    q = q - q						  
74 INPLACE_ADD						      								    	    q = q - q						  
76 STORE_FAST 7 ( q )					      								    	    q = q - q						  
							      								    	    q = q - q						  
16 78 LOAD_FAST 0 ( w )					      								    	    q = q - q						  
80 LOAD_FAST 2 ( n )					      								    	    q = q - q						  
82 INPLACE_SUBTRACT					      								    	    q = q - q						  
84 STORE_FAST 0 ( w )					      								    	    q = q - q						  
86 JUMP_ABSOLUTE 26					      								    	    q = q - q						  
>> 88 POP_BLOCK						      								    	    q = q - q						  
							      								    	    q = q - q						  
17 >> 90 LOAD_GLOBAL 0 ( print )			      								    	    q = q - q						  
92 LOAD_GLOBAL 1 ( str )				      								    	    q = q - q						  
94 LOAD_GLOBAL 2 ( int )				      								    	    q = q - q						  
96 LOAD_FAST 3 ( num_m )				      								    	    q = q - q						  
98 CALL_FUNCTION 1					      								    	    q = q - q						  
100 CALL_FUNCTION 1					      								    	    q = q - q						  
102 LOAD_CONST 3 ( ' ' )				      								    	    q = q - q						  
104 BINARY_ADD						      								    	    q = q - q						  
106 LOAD_GLOBAL 1 ( str )				      								    	    q = q - q						  
108 LOAD_FAST 4 ( num_n )				      								    	    q = q - q						  
110 CALL_FUNCTION 1					      								    	    q = q - q						  
112 BINARY_ADD						      								    	    q = q - q						  
114 LOAD_CONST 3 ( ' ' )				      								    	    q = q - q						  
116 BINARY_ADD						      								    	    q = q - q						  
118 LOAD_GLOBAL 1 ( str )				      								    	    q = q - q						  
120 LOAD_FAST 5 ( rem )					      								    	    q += q						  
122 CALL_FUNCTION 1					      								    	    q += q						  
124 BINARY_ADD						      								    	    q += q						  
126 CALL_FUNCTION 1					      								    	    q += q						  
128 POP_TOP						      								    	    q += q						  
130 LOAD_CONST 0 ( None )				      								    	    q += q						  
132 RETURN_VALUE NEW_LINE				      								    	    q += q						  
							      								    	    q += q						  
							      								    	    q += q						  
							      								    	    q += q						  
							      								    	    q += q						  
							      								    	    q += q						  
							      								    	return q						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN
--							      --							    --								  --
Disassembly of <code object printMaxOfMin at 0x7f33e2653ed0,  def printMaxOfMin ( arr , n ) :				    def printMaxOfMin ( arr , n , n , width ) :			  script_not_found : None
2 0 SETUP_LOOP 130 ( to 132 )				      	  for k in range ( 1 , n + 1 ) :			    	for k in range ( n + 1 , n + 1 ) :			  
2 LOAD_GLOBAL 0 ( range )				      	      maxOfMin = INT_MIN ;				    	    k = math.floor ( ( n - n ) * n + 1 )		  
4 LOAD_CONST 1 ( 1 )					      	      for i in range ( n - k + 1 ) :			    	    if k == 0 :						  
6 LOAD_FAST 1 ( n )					      		  min = arr [ i ]				    		k = 0						  
8 LOAD_CONST 1 ( 1 )					      		  for j in range ( k ) :			    	    else :						  
10 BINARY_ADD						      		      if ( arr [ i + j ] < min ) :		    		k = 0						  
12 CALL_FUNCTION 2					      			  min = arr [ i + j ]			    	return k						  
14 GET_ITER						      		  if ( min > maxOfMin ) :			    								  
>> 16 FOR_ITER 112 ( to 130 )				      		      maxOfMin = min				    								  
18 STORE_FAST 2 ( k )					      	      print ( maxOfMin , end = " " )			    								  
							      								    								  
3 20 LOAD_GLOBAL 1 ( INT_MIN )				      								    								  
22 STORE_FAST 3 ( maxOfMin )				      								    								  
							      								    								  
4 24 SETUP_LOOP 90 ( to 116 )				      								    								  
26 LOAD_GLOBAL 0 ( range )				      								    								  
28 LOAD_FAST 1 ( n )					      								    								  
30 LOAD_FAST 2 ( k )					      								    								  
32 BINARY_SUBTRACT					      								    								  
34 LOAD_CONST 1 ( 1 )					      								    								  
36 BINARY_ADD						      								    								  
38 CALL_FUNCTION 1					      								    								  
40 GET_ITER						      								    								  
>> 42 FOR_ITER 70 ( to 114 )				      								    								  
44 STORE_FAST 4 ( i )					      								    								  
							      								    								  
5 46 LOAD_FAST 0 ( arr )				      								    								  
48 LOAD_FAST 4 ( i )					      								    								  
50 BINARY_SUBSCR					      								    								  
52 STORE_FAST 5 ( min )					      								    								  
							      								    								  
6 54 SETUP_LOOP 44 ( to 100 )				      								    								  
56 LOAD_GLOBAL 0 ( range )				      								    								  
58 LOAD_FAST 2 ( k )					      								    								  
60 CALL_FUNCTION 1					      								    								  
62 GET_ITER						      								    								  
>> 64 FOR_ITER 32 ( to 98 )				      								    								  
66 STORE_FAST 6 ( j )					      								    								  
							      								    								  
7 68 LOAD_FAST 0 ( arr )				      								    								  
70 LOAD_FAST 4 ( i )					      								    								  
72 LOAD_FAST 6 ( j )					      								    								  
74 BINARY_ADD						      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_FAST 5 ( min )					      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 64					      								    								  
							      								    								  
8 84 LOAD_FAST 0 ( arr )				      								    								  
86 LOAD_FAST 4 ( i )					      								    								  
88 LOAD_FAST 6 ( j )					      								    								  
90 BINARY_ADD						      								    								  
92 BINARY_SUBSCR					      								    								  
94 STORE_FAST 5 ( min )					      								    								  
96 JUMP_ABSOLUTE 64					      								    								  
>> 98 POP_BLOCK						      								    								  
							      								    								  
9 >> 100 LOAD_FAST 5 ( min )				      								    								  
102 LOAD_FAST 3 ( maxOfMin )				      								    								  
104 COMPARE_OP 4 ( > )					      								    								  
106 POP_JUMP_IF_FALSE 42				      								    								  
							      								    								  
10 108 LOAD_FAST 5 ( min )				      								    								  
110 STORE_FAST 3 ( maxOfMin )				      								    								  
112 JUMP_ABSOLUTE 42					      								    								  
>> 114 POP_BLOCK					      								    								  
							      								    								  
11 >> 116 LOAD_GLOBAL 2 ( print )			      								    								  
118 LOAD_FAST 3 ( maxOfMin )				      								    								  
120 LOAD_CONST 2 ( ' ' )				      								    								  
122 LOAD_CONST 3 ( ( 'end' , ) )			      								    								  
124 CALL_FUNCTION_KW 2					      								    								  
126 POP_TOP						      								    								  
128 JUMP_ABSOLUTE 16					      								    								  
>> 130 POP_BLOCK					      								    								  
>> 132 LOAD_CONST 0 ( None )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY
--							      --							    --								  --
Disassembly of <code object minJumps at 0x7f33e2653ed0, file  def minJumps ( arr , l , h ) :				    def minJumps ( arr , l , l , l , l , l , l , l , l , l , l ,  script_not_found : None
2 0 LOAD_FAST 2 ( h )					      	  if ( h == l ) :					    								  
2 LOAD_FAST 1 ( l )					      	      return 0						    								  
4 COMPARE_OP 2 ( == )					      	  if ( arr [ l ] == 0 ) :				    								  
6 POP_JUMP_IF_FALSE 12					      	      return float ( 'inf' )				    								  
							      	  min = float ( 'inf' )					    								  
3 8 LOAD_CONST 1 ( 0 )					      	  for i in range ( l + 1 , h + 1 ) :			    								  
10 RETURN_VALUE						      	      if ( i < l + arr [ l ] + 1 ) :			    								  
							      		  jumps = minJumps ( arr , i , h )		    								  
4 >> 12 LOAD_FAST 0 ( arr )				      		  if ( jumps != float ( 'inf' ) and jumps + 1 < min 								  
14 LOAD_FAST 1 ( l )					      		      min = jumps + 1				    								  
16 BINARY_SUBSCR					      	  return min						    								  
18 LOAD_CONST 1 ( 0 )					      								    								  
20 COMPARE_OP 2 ( == )					      								    								  
22 POP_JUMP_IF_FALSE 32					      								    								  
							      								    								  
5 24 LOAD_GLOBAL 0 ( float )				      								    								  
26 LOAD_CONST 2 ( 'inf' )				      								    								  
28 CALL_FUNCTION 1					      								    								  
30 RETURN_VALUE						      								    								  
							      								    								  
6 >> 32 LOAD_GLOBAL 0 ( float )				      								    								  
34 LOAD_CONST 2 ( 'inf' )				      								    								  
36 CALL_FUNCTION 1					      								    								  
38 STORE_FAST 3 ( min )					      								    								  
							      								    								  
7 40 SETUP_LOOP 90 ( to 132 )				      								    								  
42 LOAD_GLOBAL 1 ( range )				      								    								  
44 LOAD_FAST 1 ( l )					      								    								  
46 LOAD_CONST 3 ( 1 )					      								    								  
48 BINARY_ADD						      								    								  
50 LOAD_FAST 2 ( h )					      								    								  
52 LOAD_CONST 3 ( 1 )					      								    								  
54 BINARY_ADD						      								    								  
56 CALL_FUNCTION 2					      								    								  
58 GET_ITER						      								    								  
>> 60 FOR_ITER 68 ( to 130 )				      								    								  
62 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 64 LOAD_FAST 4 ( i )					      								    								  
66 LOAD_FAST 1 ( l )					      								    								  
68 LOAD_FAST 0 ( arr )					      								    								  
70 LOAD_FAST 1 ( l )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 BINARY_ADD						      								    								  
76 LOAD_CONST 3 ( 1 )					      								    								  
78 BINARY_ADD						      								    								  
80 COMPARE_OP 0 ( < )					      								    								  
82 POP_JUMP_IF_FALSE 60					      								    								  
							      								    								  
9 84 LOAD_GLOBAL 2 ( minJumps )				      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 LOAD_FAST 2 ( h )					      								    								  
92 CALL_FUNCTION 3					      								    								  
94 STORE_FAST 5 ( jumps )				      								    								  
							      								    								  
10 96 LOAD_FAST 5 ( jumps )				      								    								  
98 LOAD_GLOBAL 0 ( float )				      								    								  
100 LOAD_CONST 2 ( 'inf' )				      								    								  
102 CALL_FUNCTION 1					      								    								  
104 COMPARE_OP 3 ( != )					      								    								  
106 POP_JUMP_IF_FALSE 60				      								    								  
108 LOAD_FAST 5 ( jumps )				      								    								  
110 LOAD_CONST 3 ( 1 )					      								    								  
112 BINARY_ADD						      								    								  
114 LOAD_FAST 3 ( min )					      								    								  
116 COMPARE_OP 0 ( < )					      								    								  
118 POP_JUMP_IF_FALSE 60				      								    								  
							      								    								  
11 120 LOAD_FAST 5 ( jumps )				      								    								  
122 LOAD_CONST 3 ( 1 )					      								    								  
124 BINARY_ADD						      								    								  
126 STORE_FAST 3 ( min )				      								    								  
128 JUMP_ABSOLUTE 60					      								    								  
>> 130 POP_BLOCK					      								    								  
							      								    								  
12 >> 132 LOAD_FAST 3 ( min )				      								    								  
134 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		      PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		    PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		  PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N
--							      --							    --								  --
Disassembly of <code object findConsecutive at 0x7f33e2649a50 def findConsecutive ( N ) :				    def findConsecutive ( N , N , N ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  start = 1						    	start = 1						  
2 STORE_FAST 1 ( start )				      	  end = ( N + 1 ) // 2					    	end = N + N						  
							      	  while ( start < end ) :				    	while N < N :						  
3 4 LOAD_FAST 0 ( N )					      	      Sum = 0						    	    end = N + N						  
6 LOAD_CONST 1 ( 1 )					      	      for i in range ( start , end + 1 ) :		    	    while N < N :					  
8 BINARY_ADD						      		  Sum = Sum + i					    		end = N + N					  
10 LOAD_CONST 2 ( 2 )					      		  if ( Sum == N ) :				    		if N < N :					  
12 BINARY_FLOOR_DIVIDE					      		      for j in range ( start , i + 1 ) :	    		    end = N + N					  
14 STORE_FAST 2 ( end )					      			  print ( j , end = " " )		    		end = N + N					  
							      		      print ( )					    		while N < N :					  
4 16 SETUP_LOOP 122 ( to 140 )				      		      break					    		    end = N + N					  
>> 18 LOAD_FAST 1 ( start )				      		  if ( Sum > N ) :				    		    if N < N :					  
20 LOAD_FAST 2 ( end )					      		      break					    			end = N + N				  
22 COMPARE_OP 0 ( < )					      	      Sum = 0						    		end = N + N					  
24 POP_JUMP_IF_FALSE 138				      	      start += 1					    		while N < N :					  
							      								    		    if N < N :					  
5 26 LOAD_CONST 3 ( 0 )					      								    			end = N + N				  
28 STORE_FAST 3 ( Sum )					      								    		    if N > N :					  
							      								    			end = N					  
6 30 SETUP_LOOP 92 ( to 124 )				      								    		    if N > N :					  
32 LOAD_GLOBAL 0 ( range )				      								    			end = N + N				  
34 LOAD_FAST 1 ( start )				      								    		    if N > N :					  
36 LOAD_FAST 2 ( end )					      								    			end = N					  
38 LOAD_CONST 1 ( 1 )					      								    		    if N > N :					  
40 BINARY_ADD						      								    			end = N					  
42 CALL_FUNCTION 2					      								    		    if N > N :					  
44 GET_ITER						      								    			end = N					  
>> 46 FOR_ITER 74 ( to 122 )				      								    		return end					  
48 STORE_FAST 4 ( i )					      								    								  
							      								    								  
7 50 LOAD_FAST 3 ( Sum )				      								    								  
52 LOAD_FAST 4 ( i )					      								    								  
54 BINARY_ADD						      								    								  
56 STORE_FAST 3 ( Sum )					      								    								  
							      								    								  
8 58 LOAD_FAST 3 ( Sum )				      								    								  
60 LOAD_FAST 0 ( N )					      								    								  
62 COMPARE_OP 2 ( == )					      								    								  
64 POP_JUMP_IF_FALSE 110				      								    								  
							      								    								  
9 66 SETUP_LOOP 34 ( to 102 )				      								    								  
68 LOAD_GLOBAL 0 ( range )				      								    								  
70 LOAD_FAST 1 ( start )				      								    								  
72 LOAD_FAST 4 ( i )					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 CALL_FUNCTION 2					      								    								  
80 GET_ITER						      								    								  
>> 82 FOR_ITER 16 ( to 100 )				      								    								  
84 STORE_FAST 5 ( j )					      								    								  
							      								    								  
10 86 LOAD_GLOBAL 1 ( print )				      								    								  
88 LOAD_FAST 5 ( j )					      								    								  
90 LOAD_CONST 4 ( ' ' )					      								    								  
92 LOAD_CONST 5 ( ( 'end' , ) )				      								    								  
94 CALL_FUNCTION_KW 2					      								    								  
96 POP_TOP						      								    								  
98 JUMP_ABSOLUTE 82					      								    								  
>> 100 POP_BLOCK					      								    								  
							      								    								  
11 >> 102 LOAD_GLOBAL 1 ( print )			      								    								  
104 CALL_FUNCTION 0					      								    								  
106 POP_TOP						      								    								  
							      								    								  
12 108 BREAK_LOOP					      								    								  
							      								    								  
13 >> 110 LOAD_FAST 3 ( Sum )				      								    								  
112 LOAD_FAST 0 ( N )					      								    								  
114 COMPARE_OP 4 ( > )					      								    								  
116 POP_JUMP_IF_FALSE 46				      								    								  
							      								    								  
14 118 BREAK_LOOP					      								    								  
120 JUMP_ABSOLUTE 46					      								    								  
>> 122 POP_BLOCK					      								    								  
							      								    								  
15 >> 124 LOAD_CONST 3 ( 0 )				      								    								  
126 STORE_FAST 3 ( Sum )				      								    								  
							      								    								  
16 128 LOAD_FAST 1 ( start )				      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 INPLACE_ADD						      								    								  
134 STORE_FAST 1 ( start )				      								    								  
136 JUMP_ABSOLUTE 18					      								    								  
>> 138 POP_BLOCK					      								    								  
>> 140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1
--							      --							    --								  --
Disassembly of <code object lis at 0x7f33e2644f60, file "<dis def lis ( arr ) :						    def lis ( arr , x ) :					  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  n = len ( arr )					    	n = len ( arr )						  
2 LOAD_FAST 0 ( arr )					      	  lis = [ 1 ] * n					    	lis = [ ]						  
4 CALL_FUNCTION 1					      	  for i in range ( 1 , n ) :				    	lis = [ ]						  
6 STORE_FAST 1 ( n )					      	      for j in range ( 0 , i ) :			    	for i in range ( 1 , n ) :				  
							      		  if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  	    lis = [ ]						  
3 8 LOAD_CONST 1 ( 1 )					      		      lis [ i ] = lis [ j ] + 1			    	    lis [ i ] = [ ]					  
10 BUILD_LIST 1						      	  maximum = 0						    	    lis [ i ] = [ ]					  
12 LOAD_FAST 1 ( n )					      	  for i in range ( n ) :				    	    lis [ i ] = [ ]					  
14 BINARY_MULTIPLY					      	      maximum = max ( maximum , lis [ i ] )		    	    lis [ i ] = [ ]					  
16 STORE_FAST 2 ( lis )					      	  return maximum					    	    lis [ i ] = [ ]					  
							      								    	    lis [ i ] = [ ]					  
4 18 SETUP_LOOP 90 ( to 110 )				      								    	    lis [ i ] = [ ]					  
20 LOAD_GLOBAL 1 ( range )				      								    	    lis [ i ] = [ ]					  
22 LOAD_CONST 1 ( 1 )					      								    	    lis [ i ] = [ ]					  
24 LOAD_FAST 1 ( n )					      								    	    lis [ i ] = [ ]					  
26 CALL_FUNCTION 2					      								    	    lis [ i ] = [ ]					  
28 GET_ITER						      								    	    lis [ i ] = [ ]					  
>> 30 FOR_ITER 76 ( to 108 )				      								    	    lis [ i ] = [ ]					  
32 STORE_FAST 3 ( i )					      								    	    lis [ i ] = [ ]					  
							      								    	    lis [ i ] = [ ]					  
5 34 SETUP_LOOP 70 ( to 106 )				      								    	    lis [ i ] = [ ]					  
36 LOAD_GLOBAL 1 ( range )				      								    	    lis [ i ] = [ ]					  
38 LOAD_CONST 2 ( 0 )					      								    	    lis [ i ] = [ ]					  
40 LOAD_FAST 3 ( i )					      								    	    lis [ i ] = [ ]					  
42 CALL_FUNCTION 2					      								    	    lis [ i ] = [ ]					  
44 GET_ITER						      								    	    lis [ i ] = [ ]					  
>> 46 FOR_ITER 56 ( to 104 )				      								    	    lis [ i ] = [ ]					  
48 STORE_FAST 4 ( j )					      								    	    lis [ i ] = [ ]					  
							      								    	    lis [ i ] = [ ]					  
6 50 LOAD_FAST 0 ( arr )				      								    	    lis [ i ] = [ ]					  
52 LOAD_FAST 3 ( i )					      								    	    lis [ i ] = [ ]					  
54 BINARY_SUBSCR					      								    	    lis [ i ] = [ ]					  
56 LOAD_FAST 0 ( arr )					      								    	    lis [ lis ] = [ ]					  
58 LOAD_FAST 4 ( j )					      								    	    lis [ lis ] = [ ]					  
60 BINARY_SUBSCR					      								    	    lis [ lis ] = [ ]					  
62 COMPARE_OP 4 ( > )					      								    	    lis [ lis ] = [ ]					  
64 POP_JUMP_IF_FALSE 46					      								    	    lis [ lis ] = [ ]					  
66 LOAD_FAST 2 ( lis )					      								    	    lis [ lis ] = [ ]					  
68 LOAD_FAST 3 ( i )					      								    	    lis [ lis [ lis ] = [ ]				  
70 BINARY_SUBSCR					      								    	    lis [ lis ] = [ ]					  
72 LOAD_FAST 2 ( lis )					      								    	return lis						  
74 LOAD_FAST 4 ( j )					      								    								  
76 BINARY_SUBSCR					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 COMPARE_OP 0 ( < )					      								    								  
84 POP_JUMP_IF_FALSE 46					      								    								  
							      								    								  
7 86 LOAD_FAST 2 ( lis )				      								    								  
88 LOAD_FAST 4 ( j )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 LOAD_CONST 1 ( 1 )					      								    								  
94 BINARY_ADD						      								    								  
96 LOAD_FAST 2 ( lis )					      								    								  
98 LOAD_FAST 3 ( i )					      								    								  
100 STORE_SUBSCR					      								    								  
102 JUMP_ABSOLUTE 46					      								    								  
>> 104 POP_BLOCK					      								    								  
>> 106 JUMP_ABSOLUTE 30					      								    								  
>> 108 POP_BLOCK					      								    								  
							      								    								  
8 >> 110 LOAD_CONST 2 ( 0 )				      								    								  
112 STORE_FAST 5 ( maximum )				      								    								  
							      								    								  
9 114 SETUP_LOOP 30 ( to 146 )				      								    								  
116 LOAD_GLOBAL 1 ( range )				      								    								  
118 LOAD_FAST 1 ( n )					      								    								  
120 CALL_FUNCTION 1					      								    								  
122 GET_ITER						      								    								  
>> 124 FOR_ITER 18 ( to 144 )				      								    								  
126 STORE_FAST 3 ( i )					      								    								  
							      								    								  
10 128 LOAD_GLOBAL 2 ( max )				      								    								  
130 LOAD_FAST 5 ( maximum )				      								    								  
132 LOAD_FAST 2 ( lis )					      								    								  
134 LOAD_FAST 3 ( i )					      								    								  
136 BINARY_SUBSCR					      								    								  
138 CALL_FUNCTION 2					      								    								  
140 STORE_FAST 5 ( maximum )				      								    								  
142 JUMP_ABSOLUTE 124					      								    								  
>> 144 POP_BLOCK					      								    								  
							      								    								  
11 >> 146 LOAD_FAST 5 ( maximum )			      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A
--							      --							    --								  --
Disassembly of <code object findmin at 0x7f33e2644f60, file " def findmin ( p , n ) :					    def findmin ( p , 0x70x76464f60 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 , 0 ) )			      	  a , b , c , d = 0 , 0 , 0 , 0				    	a , b , b = ( 0 , 0 , 0 , 0 , 0 )			  
2 UNPACK_SEQUENCE 4					      	  for i in range ( n ) :				    	for i in range ( 1 , 8 ) :				  
4 STORE_FAST 2 ( a )					      	      if ( p [ i ] [ 0 ] <= 0 ) :			    	    a , b = ( 0 , 0 , 0 )				  
6 STORE_FAST 3 ( b )					      		  a += 1					    	    b = ( a - b ) * b					  
8 STORE_FAST 4 ( c )					      	      elif ( p [ i ] [ 0 ] >= 0 ) :			    	    a = b - b						  
10 STORE_FAST 5 ( d )					      		  b += 1					    	    b = b - b						  
							      	      if ( p [ i ] [ 1 ] >= 0 ) :			    	    a = b - b						  
3 12 SETUP_LOOP 116 ( to 130 )				      		  c += 1					    	    b = b - b						  
14 LOAD_GLOBAL 0 ( range )				      	      elif ( p [ i ] [ 1 ] <= 0 ) :			    	    a = b - b						  
16 LOAD_FAST 1 ( n )					      		  d += 1					    	    b = b - b						  
18 CALL_FUNCTION 1					      	  return min ( [ a , b , c , d ] )			    	    a = b - b						  
20 GET_ITER						      								    	    b = b - b						  
>> 22 FOR_ITER 104 ( to 128 )				      								    	    b = b - b						  
24 STORE_FAST 6 ( i )					      								    	    a = b - b						  
							      								    	    b = b - b						  
4 26 LOAD_FAST 0 ( p )					      								    	    b = b - b						  
28 LOAD_FAST 6 ( i )					      								    	    a = b - b						  
30 BINARY_SUBSCR					      								    	    b = b - b						  
32 LOAD_CONST 2 ( 0 )					      								    	    b = b - b						  
34 BINARY_SUBSCR					      								    	    b = b - b						  
36 LOAD_CONST 2 ( 0 )					      								    	    b = b - b						  
38 COMPARE_OP 1 ( <= )					      								    	    b = b - b						  
40 POP_JUMP_IF_FALSE 52					      								    	    b = b - b						  
							      								    	    b = b - b						  
5 42 LOAD_FAST 2 ( a )					      								    	    b = b - b						  
44 LOAD_CONST 3 ( 1 )					      								    	    b = b - b						  
46 INPLACE_ADD						      								    	    b = b - b						  
48 STORE_FAST 2 ( a )					      								    	    b = b - b						  
50 JUMP_FORWARD 24 ( to 76 )				      								    	    b = b - b						  
							      								    	    b = b - b						  
6 >> 52 LOAD_FAST 0 ( p )				      								    	    b = b - b						  
54 LOAD_FAST 6 ( i )					      								    	    b = b - b						  
56 BINARY_SUBSCR					      								    	    b = b - b						  
58 LOAD_CONST 2 ( 0 )					      								    	    b = b - b						  
60 BINARY_SUBSCR					      								    	    b = b - b						  
62 LOAD_CONST 2 ( 0 )					      								    	    b = b - b						  
64 COMPARE_OP 5 ( >= )					      								    	    b = b - b						  
66 POP_JUMP_IF_FALSE 76					      								    	    b = b - b						  
							      								    	    b = b - b						  
7 68 LOAD_FAST 3 ( b )					      								    	    b = b - b						  
70 LOAD_CONST 3 ( 1 )					      								    	    b = b - b						  
72 INPLACE_ADD						      								    	    b = b - b						  
74 STORE_FAST 3 ( b )					      								    	    b = b - b						  
							      								    	    b = b - b						  
8 >> 76 LOAD_FAST 0 ( p )				      								    	    b = b - b						  
78 LOAD_FAST 6 ( i )					      								    	    b = b - b						  
80 BINARY_SUBSCR					      								    	    b = b - b						  
82 LOAD_CONST 3 ( 1 )					      								    	    b = b - b						  
84 BINARY_SUBSCR					      								    	    b = b - b						  
86 LOAD_CONST 2 ( 0 )					      								    	    b = b - b						  
88 COMPARE_OP 5 ( >= )					      								    	    b = b - b						  
90 POP_JUMP_IF_FALSE 102				      								    	    b = b - b						  
							      								    	    b = b - b						  
9 92 LOAD_FAST 4 ( c )					      								    	    b = b - b						  
94 LOAD_CONST 3 ( 1 )					      								    	    b = b - b						  
96 INPLACE_ADD						      								    	    b = b - b						  
98 STORE_FAST 4 ( c )					      								    	    b = b - b						  
100 JUMP_ABSOLUTE 22					      								    	    b = b - b						  
							      								    	    b = b - b						  
10 >> 102 LOAD_FAST 0 ( p )				      								    	    b = b - b						  
104 LOAD_FAST 6 ( i )					      								    	    b = b - b						  
106 BINARY_SUBSCR					      								    	    b = b - b						  
108 LOAD_CONST 3 ( 1 )					      								    	    b = b - b						  
110 BINARY_SUBSCR					      								    	    b = b - b						  
112 LOAD_CONST 2 ( 0 )					      								    	    b = b - b						  
114 COMPARE_OP 1 ( <= )					      								    	    b = b - b						  
116 POP_JUMP_IF_FALSE 22				      								    	    b = b - b						  
							      								    	    b = b - b						  
11 118 LOAD_FAST 5 ( d )				      								    	    b = b - b						  
120 LOAD_CONST 3 ( 1 )					      								    	    b = b - b						  
122 INPLACE_ADD						      								    	    b = b						  
124 STORE_FAST 5 ( d )					      								    	    b = b - b						  
126 JUMP_ABSOLUTE 22					      								    	    b = b						  
>> 128 POP_BLOCK					      								    	    b = b - b						  
							      								    	    return b						  
12 >> 130 LOAD_GLOBAL 1 ( min )				      								    								  
132 LOAD_FAST 2 ( a )					      								    								  
134 LOAD_FAST 3 ( b )					      								    								  
136 LOAD_FAST 4 ( c )					      								    								  
138 LOAD_FAST 5 ( d )					      								    								  
140 BUILD_LIST 4					      								    								  
142 CALL_FUNCTION 1					      								    								  
144 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
Disassembly of <code object countNum at 0x7f33e26494b0, file  def countNum ( arr , n ) :				    def countNum ( arr , 0x70x70x7FFF ) :			  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( dict )				      	  s = dict ( )						    	s = dict ( )						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 CALL_FUNCTION 0					      	  count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9		    	s = 0							  alid/ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_
4 STORE_FAST 2 ( s )					      	  for i in range ( n ) :				    	while s < 0 :						  A_RANGE_ARE_PRESENT_IN_ARRAY_1.py", line 32	  de
							      	      s [ arr [ i ] ] = 1				    	    s = s						  f f_filled ( arr , 0x70x70x7FFF ) :
3 6 LOAD_CONST 1 ( ( 0 , - 1000000000 , 1000000000 ) )	      	      if ( arr [ i ] < minm ) :				    	    s += 1						  		^ SyntaxError: invalid syntax
8 UNPACK_SEQUENCE 3					      		  minm = arr [ i ]				    	    s += 1						  
10 STORE_FAST 3 ( count )				      	      if ( arr [ i ] > maxm ) :				    	    s += 1						  
12 STORE_FAST 4 ( maxm )				      		  maxm = arr [ i ]				    	    s += 1						  
14 STORE_FAST 5 ( minm )				      	  for i in range ( minm , maxm + 1 ) :			    	    s += 1						  
							      	      if i not in s.keys ( ) :				    	    s += 1						  
4 16 SETUP_LOOP 68 ( to 86 )				      		  count += 1					    	    s += 1						  
18 LOAD_GLOBAL 1 ( range )				      	  return count						    	    s += 1						  
20 LOAD_FAST 1 ( n )					      								    	    s += 1						  
22 CALL_FUNCTION 1					      								    	    s += 1						  
24 GET_ITER						      								    	    s += 1						  
>> 26 FOR_ITER 56 ( to 84 )				      								    	    s += 1						  
28 STORE_FAST 6 ( i )					      								    	    s += 1						  
							      								    	    s += 1						  
5 30 LOAD_CONST 2 ( 1 )					      								    	    s += 1						  
32 LOAD_FAST 2 ( s )					      								    	    s += 1						  
34 LOAD_FAST 0 ( arr )					      								    	    s += 1						  
36 LOAD_FAST 6 ( i )					      								    	s += 1							  
38 BINARY_SUBSCR					      								    	s += 1							  
40 STORE_SUBSCR						      								    								  
							      								    								  
6 42 LOAD_FAST 0 ( arr )				      								    								  
44 LOAD_FAST 6 ( i )					      								    								  
46 BINARY_SUBSCR					      								    								  
48 LOAD_FAST 5 ( minm )					      								    								  
50 COMPARE_OP 0 ( < )					      								    								  
52 POP_JUMP_IF_FALSE 62					      								    								  
							      								    								  
7 54 LOAD_FAST 0 ( arr )				      								    								  
56 LOAD_FAST 6 ( i )					      								    								  
58 BINARY_SUBSCR					      								    								  
60 STORE_FAST 5 ( minm )				      								    								  
							      								    								  
8 >> 62 LOAD_FAST 0 ( arr )				      								    								  
64 LOAD_FAST 6 ( i )					      								    								  
66 BINARY_SUBSCR					      								    								  
68 LOAD_FAST 4 ( maxm )					      								    								  
70 COMPARE_OP 4 ( > )					      								    								  
72 POP_JUMP_IF_FALSE 26					      								    								  
							      								    								  
9 74 LOAD_FAST 0 ( arr )				      								    								  
76 LOAD_FAST 6 ( i )					      								    								  
78 BINARY_SUBSCR					      								    								  
80 STORE_FAST 4 ( maxm )				      								    								  
82 JUMP_ABSOLUTE 26					      								    								  
>> 84 POP_BLOCK						      								    								  
							      								    								  
10 >> 86 SETUP_LOOP 42 ( to 130 )			      								    								  
88 LOAD_GLOBAL 1 ( range )				      								    								  
90 LOAD_FAST 5 ( minm )					      								    								  
92 LOAD_FAST 4 ( maxm )					      								    								  
94 LOAD_CONST 2 ( 1 )					      								    								  
96 BINARY_ADD						      								    								  
98 CALL_FUNCTION 2					      								    								  
100 GET_ITER						      								    								  
>> 102 FOR_ITER 24 ( to 128 )				      								    								  
104 STORE_FAST 6 ( i )					      								    								  
							      								    								  
11 106 LOAD_FAST 6 ( i )				      								    								  
108 LOAD_FAST 2 ( s )					      								    								  
110 LOAD_METHOD 2 ( keys )				      								    								  
112 CALL_METHOD 0					      								    								  
114 COMPARE_OP 7 ( not in )				      								    								  
116 POP_JUMP_IF_FALSE 102				      								    								  
							      								    								  
12 118 LOAD_FAST 3 ( count )				      								    								  
120 LOAD_CONST 2 ( 1 )					      								    								  
122 INPLACE_ADD						      								    								  
124 STORE_FAST 3 ( count )				      								    								  
126 JUMP_ABSOLUTE 102					      								    								  
>> 128 POP_BLOCK					      								    								  
							      								    								  
13 >> 130 LOAD_FAST 3 ( count )				      								    								  
132 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS	      GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		    GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		  GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS
--							      --							    --								  --
Disassembly of <code object findMin at 0x7f33e2644f60, file " def findMin ( V ) :					    def findMin ( V , 6.646464f60 ) :				  script_not_found : None
2 0 LOAD_CONST 1 ( 1 )					      	  deno = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ]    	deno = 1						  
2 LOAD_CONST 2 ( 2 )					      	  n = len ( deno )					    	deno = 1						  
4 LOAD_CONST 3 ( 5 )					      	  ans = [ ]						    	deno = 1 / ( ( 1 - deno ) )				  
6 LOAD_CONST 4 ( 10 )					      	  i = n - 1						    	deno = 1 / ( ( 1 - deno ) )				  
8 LOAD_CONST 5 ( 20 )					      	  while ( i >= 0 ) :					    	deno = 1 / ( ( 1 - deno ) )				  
10 LOAD_CONST 6 ( 50 )					      	      while ( V >= deno [ i ] ) :			    	deno = 1 / ( 1 - deno )					  
12 LOAD_CONST 7 ( 100 )					      		  V -= deno [ i ]				    	deno = 1 / ( ( 1 - deno ) )				  
14 LOAD_CONST 8 ( 500 )					      		  ans.append ( deno [ i ] )			    	deno = 1 / ( 1 - deno )					  
16 LOAD_CONST 9 ( 1000 )				      	      i -= 1						    	deno = 1 / ( 1 - deno )					  
18 BUILD_LIST 9						      	  for i in range ( len ( ans ) ) :			    	deno = 1 / ( 1 - deno )					  
20 STORE_FAST 1 ( deno )				      	      print ( ans [ i ] , end = " " )			    	deno = 1 / ( ( 1 - deno ) )				  
							      								    	deno = 1 / ( 1 - deno )					  
3 22 LOAD_GLOBAL 0 ( len )				      								    	deno = 1 / ( 1 - deno )					  
24 LOAD_FAST 1 ( deno )					      								    	deno = 1 / ( 1 - deno )					  
26 CALL_FUNCTION 1					      								    	deno = 1 / ( 1 - deno )					  
28 STORE_FAST 2 ( n )					      								    	deno = 1 / ( 1 - deno )					  
							      								    	deno = 1 / ( 1 - deno )					  
4 30 BUILD_LIST 0					      								    	deno = 1 / ( 1 - deno )					  
32 STORE_FAST 3 ( ans )					      								    	deno = 1 / ( 1 - deno )					  
							      								    	deno = 1 / ( 1 - deno )					  
5 34 LOAD_FAST 2 ( n )					      								    	deno = 1 / ( 1 - deno )					  
36 LOAD_CONST 1 ( 1 )					      								    	deno = 1 / ( 1 - deno )					  
38 BINARY_SUBTRACT					      								    	deno = 1 / ( 1 - deno )					  
40 STORE_FAST 4 ( i )					      								    	deno = 1						  
							      								    	deno = 1 / ( 1 - deno )					  
6 42 SETUP_LOOP 64 ( to 108 )				      								    	deno = 1 / ( 1 - deno )					  
>> 44 LOAD_FAST 4 ( i )					      								    	deno = 1 / ( 1 - deno )					  
46 LOAD_CONST 10 ( 0 )					      								    	deno = 1 / ( 1 - deno )					  
48 COMPARE_OP 5 ( >= )					      								    	deno = 1 / ( 1 - deno )					  
50 POP_JUMP_IF_FALSE 106				      								    	deno = 1 / ( 1 - deno )					  
							      								    	deno = 1 / ( 1 - deno )					  
7 52 SETUP_LOOP 42 ( to 96 )				      								    	deno = 1 / ( 1 - deno )					  
>> 54 LOAD_FAST 0 ( V )					      								    	deno = 1 / ( ( 1 - deno ) )				  
56 LOAD_FAST 1 ( deno )					      								    	deno = 1 / ( 1 - deno )					  
58 LOAD_FAST 4 ( i )					      								    	deno = 1 / ( 1 - deno )					  
60 BINARY_SUBSCR					      								    	deno = 1 / ( 1 - deno )					  
62 COMPARE_OP 5 ( >= )					      								    	deno = 1 / ( 1 - deno )					  
64 POP_JUMP_IF_FALSE 94					      								    	deno = 1 / ( ( 1 - deno )				  
							      								    	deno = 1 / ( 1 - deno )					  
8 66 LOAD_FAST 0 ( V )					      								    	deno = 1 / ( ( 1 - deno ) )				  
68 LOAD_FAST 1 ( deno )					      								    	deno = 1 / ( ( 1 - deno ) )				  
70 LOAD_FAST 4 ( i )					      								    	deno = 1 / ( ( 1 - deno )				  
72 BINARY_SUBSCR					      								    	deno = 1 / ( ( 1 - deno ) )				  
74 INPLACE_SUBTRACT					      								    	deno = 1 / ( ( 1 - deno ) )				  
76 STORE_FAST 0 ( V )					      								    	deno = 1 / ( 1 - deno )					  
							      								    	deno = 1 / ( 1 - deno )					  
9 78 LOAD_FAST 3 ( ans )				      								    	deno = 1 / ( 1 - deno )					  
80 LOAD_METHOD 1 ( append )				      								    	deno = 1 / ( 1 - deno ) )				  
82 LOAD_FAST 1 ( deno )					      								    	return deno						  
84 LOAD_FAST 4 ( i )					      								    								  
86 BINARY_SUBSCR					      								    								  
88 CALL_METHOD 1					      								    								  
90 POP_TOP						      								    								  
92 JUMP_ABSOLUTE 54					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
10 >> 96 LOAD_FAST 4 ( i )				      								    								  
98 LOAD_CONST 1 ( 1 )					      								    								  
100 INPLACE_SUBTRACT					      								    								  
102 STORE_FAST 4 ( i )					      								    								  
104 JUMP_ABSOLUTE 44					      								    								  
>> 106 POP_BLOCK					      								    								  
							      								    								  
11 >> 108 SETUP_LOOP 36 ( to 146 )			      								    								  
110 LOAD_GLOBAL 2 ( range )				      								    								  
112 LOAD_GLOBAL 0 ( len )				      								    								  
114 LOAD_FAST 3 ( ans )					      								    								  
116 CALL_FUNCTION 1					      								    								  
118 CALL_FUNCTION 1					      								    								  
120 GET_ITER						      								    								  
>> 122 FOR_ITER 20 ( to 144 )				      								    								  
124 STORE_FAST 4 ( i )					      								    								  
							      								    								  
12 126 LOAD_GLOBAL 3 ( print )				      								    								  
128 LOAD_FAST 3 ( ans )					      								    								  
130 LOAD_FAST 4 ( i )					      								    								  
132 BINARY_SUBSCR					      								    								  
134 LOAD_CONST 11 ( ' ' )				      								    								  
136 LOAD_CONST 12 ( ( 'end' , ) )			      								    								  
138 CALL_FUNCTION_KW 2					      								    								  
140 POP_TOP						      								    								  
142 JUMP_ABSOLUTE 122					      								    								  
>> 144 POP_BLOCK					      								    								  
>> 146 LOAD_CONST 0 ( None )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECODE_MEDIAN_STRING_ORIGINAL_STRING			      DECODE_MEDIAN_STRING_ORIGINAL_STRING			    DECODE_MEDIAN_STRING_ORIGINAL_STRING			  DECODE_MEDIAN_STRING_ORIGINAL_STRING
--							      --							    --								  --
Disassembly of <code object decodeMedianString at 0x7f33e2649 def decodeMedianString ( s ) :				    def decodeMedianString ( s ) :				  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s )						    	l = len ( s )						  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 0 ( s )					      	  s1 = ""						    	s = ''							  alid/DECODE_MEDIAN_STRING_ORIGINAL_STRING.py", lin
4 CALL_FUNCTION 1					      	  if ( l % 2 == 0 ) :					    	if s == 2 :						  e 81	   s += s [ 18 : 16 ] += s [ 18 : 16 ]
6 STORE_FAST 1 ( l )					      	      isEven = True					    	    s = s [ 2 : ]					  		     ^ SyntaxError: invalid syntax
							      	  else :						    	s = s [ 4 : ]						  
3 8 LOAD_CONST 1 ( '' )					      	      isEven = False					    	s = s [ 5 : ]						  
10 STORE_FAST 2 ( s1 )					      	  for i in range ( 0 , l , 2 ) :			    	s = s [ 6 : 8 ]						  
							      	      if ( isEven ) :					    	s = s [ 8 : 8 ]						  
4 12 LOAD_FAST 1 ( l )					      		  s1 = s [ i ] + s1				    	s = s [ 10 : 8 ]					  
14 LOAD_CONST 2 ( 2 )					      		  s1 += s [ i + 1 ]				    	s = s [ 10 : 8 ]					  
16 BINARY_MODULO					      	      else :						    	s = s [ 10 : 8 ]					  
18 LOAD_CONST 3 ( 0 )					      		  if ( l - i > 1 ) :				    	s = s [ 12 : 8 ]					  
20 COMPARE_OP 2 ( == )					      		      s1 += s [ i ]				    	s = s [ 14 : 16 ]					  
22 POP_JUMP_IF_FALSE 30					      		      s1 = s [ i + 1 ] + s1			    	s = s [ 14 : 16 ]					  
							      		  else :					    	s = s [ 14 : 16 ]					  
5 24 LOAD_CONST 4 ( True )				      		      s1 += s [ i ]				    	s = s [ 18 : 16 ]					  
26 STORE_FAST 3 ( isEven )				      	  return s1						    	s = s [ 18 : 16 ]					  
28 JUMP_FORWARD 4 ( to 34 )				      								    	s = s [ 18 : 16 ]					  
							      								    	s = s [ 18 : 16 ]					  
7 >> 30 LOAD_CONST 5 ( False )				      								    	s = s [ 18 : 16 ]					  
32 STORE_FAST 3 ( isEven )				      								    	s = s [ 18 : 16 ]					  
							      								    	s = s [ 18 : 16 ]					  
8 >> 34 SETUP_LOOP 108 ( to 144 )			      								    	s = s [ 18 : 16 ]					  
36 LOAD_GLOBAL 1 ( range )				      								    	s = s [ 18 : 16 ]					  
38 LOAD_CONST 3 ( 0 )					      								    	s = s [ 18 : 16 ]					  
40 LOAD_FAST 1 ( l )					      								    	s = s [ 18 : 16 ]					  
42 LOAD_CONST 2 ( 2 )					      								    	s = s [ 18 : 16 ]					  
44 CALL_FUNCTION 3					      								    	s = s [ 18 : 16 ]					  
46 GET_ITER						      								    	s = s [ 18 : 16 ]					  
>> 48 FOR_ITER 92 ( to 142 )				      								    	s += s [ 18 : 16 ]					  
50 STORE_FAST 4 ( i )					      								    	s += s [ 18 : 16 ]					  
							      								    	s += s [ 18 : 16 ]					  
9 52 LOAD_FAST 3 ( isEven )				      								    	s += s [ 18 : 16 ]					  
54 POP_JUMP_IF_FALSE 86					      								    	s += s [ 18 : 16 ]					  
							      								    	s += s [ 18 : 16 ]					  
10 56 LOAD_FAST 0 ( s )					      								    	s += s [ 18 : 16 ]					  
58 LOAD_FAST 4 ( i )					      								    	s += s [ 18 : 16 ]					  
60 BINARY_SUBSCR					      								    	s += s [ 18 : 16 ]					  
62 LOAD_FAST 2 ( s1 )					      								    	s += s [ 18 : 16 ]					  
64 BINARY_ADD						      								    	s += s [ 18 : 16 ]					  
66 STORE_FAST 2 ( s1 )					      								    	s += s [ 18 : 16 ]					  
							      								    	s += s [ 18 : 16 ]					  
11 68 LOAD_FAST 2 ( s1 )				      								    	s += s [ 18 : 16 ]					  
70 LOAD_FAST 0 ( s )					      								    	s += s [ 18 : 16 ] += s [ 18 : 16 ]			  
72 LOAD_FAST 4 ( i )					      								    	s += s [ 18 : 16 ]					  
74 LOAD_CONST 6 ( 1 )					      								    	s += s [ 18 : 16 ]					  
76 BINARY_ADD						      								    	s += s [ 18 : 16 ]					  
78 BINARY_SUBSCR					      								    	s += s [ 18 : 16 ]					  
80 INPLACE_ADD						      								    	s += s [ 18 : 16 ]					  
82 STORE_FAST 2 ( s1 )					      								    	s += 1							  
84 JUMP_ABSOLUTE 48					      								    return s							  
							      								    								  
13 >> 86 LOAD_FAST 1 ( l )				      								    								  
88 LOAD_FAST 4 ( i )					      								    								  
90 BINARY_SUBTRACT					      								    								  
92 LOAD_CONST 6 ( 1 )					      								    								  
94 COMPARE_OP 4 ( > )					      								    								  
96 POP_JUMP_IF_FALSE 128				      								    								  
							      								    								  
14 98 LOAD_FAST 2 ( s1 )				      								    								  
100 LOAD_FAST 0 ( s )					      								    								  
102 LOAD_FAST 4 ( i )					      								    								  
104 BINARY_SUBSCR					      								    								  
106 INPLACE_ADD						      								    								  
108 STORE_FAST 2 ( s1 )					      								    								  
							      								    								  
15 110 LOAD_FAST 0 ( s )				      								    								  
112 LOAD_FAST 4 ( i )					      								    								  
114 LOAD_CONST 6 ( 1 )					      								    								  
116 BINARY_ADD						      								    								  
118 BINARY_SUBSCR					      								    								  
120 LOAD_FAST 2 ( s1 )					      								    								  
122 BINARY_ADD						      								    								  
124 STORE_FAST 2 ( s1 )					      								    								  
126 JUMP_ABSOLUTE 48					      								    								  
							      								    								  
17 >> 128 LOAD_FAST 2 ( s1 )				      								    								  
130 LOAD_FAST 0 ( s )					      								    								  
132 LOAD_FAST 4 ( i )					      								    								  
134 BINARY_SUBSCR					      								    								  
136 INPLACE_ADD						      								    								  
138 STORE_FAST 2 ( s1 )					      								    								  
140 JUMP_ABSOLUTE 48					      								    								  
>> 142 POP_BLOCK					      								    								  
							      								    								  
18 >> 144 LOAD_FAST 2 ( s1 )				      								    								  
146 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			      MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			    MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			  MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE
--							      --							    --								  --
Disassembly of <code object merge at 0x7f33e2653ed0, file "<d def merge ( ar1 , ar2 , m , n ) :				    def merge ( l , l , l , l ) :				  script_not_found : None
2 0 SETUP_LOOP 146 ( to 148 )				      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( l [ 1 : ] , l [ i - 1 : ] ) :		  
2 LOAD_GLOBAL 0 ( range )				      	      last = ar1 [ m - 1 ]				    	    if l [ i - 1 ] == l :				  
4 LOAD_FAST 3 ( n )					      	      j = m - 2						    		l [ i - 1 : ] = l [ i - 1 : ]			  
6 LOAD_CONST 1 ( 1 )					      	      while ( j >= 0 and ar1 [ j ] > ar2 [ i ] ) :	    		l [ i - 1 : ] = l [ i - 1 : ]			  
8 BINARY_SUBTRACT					      		  ar1 [ j + 1 ] = ar1 [ j ]			    		l [ i - 1 : ] = l [ i - 1 : ]			  
10 LOAD_CONST 2 ( - 1 )					      		  j -= 1					    		l [ i - 1 : ] = l [ i - 1 : ]			  
12 LOAD_CONST 2 ( - 1 )					      	      if ( j != m - 2 or last > ar2 [ i ] ) :		    		l [ i - 1 : ] = l [ i - 1 : ]			  
14 CALL_FUNCTION 3					      		  ar1 [ j + 1 ] = ar2 [ i ]			    		l [ i - 1 : ] = l [ i - 1 : ]			  
16 GET_ITER						      		  ar2 [ i ] = last				    		l [ i - 1 : ] = l [ i - 1 : ]			  
>> 18 FOR_ITER 126 ( to 146 )				      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
20 STORE_FAST 4 ( i )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
							      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
3 22 LOAD_FAST 0 ( ar1 )				      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
24 LOAD_FAST 2 ( m )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
26 LOAD_CONST 1 ( 1 )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
28 BINARY_SUBTRACT					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
30 BINARY_SUBSCR					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
32 STORE_FAST 5 ( last )				      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
							      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
4 34 LOAD_FAST 2 ( m )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
36 LOAD_CONST 3 ( 2 )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
38 BINARY_SUBTRACT					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
40 STORE_FAST 6 ( j )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
							      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
5 42 SETUP_LOOP 52 ( to 96 )				      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
>> 44 LOAD_FAST 6 ( j )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
46 LOAD_CONST 4 ( 0 )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
48 COMPARE_OP 5 ( >= )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
50 POP_JUMP_IF_FALSE 94					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
52 LOAD_FAST 0 ( ar1 )					      								    		l [ i - 1 : ] = l [ i - 1 : ]			  
54 LOAD_FAST 6 ( j )					      								    		l [ i - 1 : ] = l				  
56 BINARY_SUBSCR					      								    		l [ i -						  
58 LOAD_FAST 1 ( ar2 )					      								    								  
60 LOAD_FAST 4 ( i )					      								    								  
62 BINARY_SUBSCR					      								    								  
64 COMPARE_OP 4 ( > )					      								    								  
66 POP_JUMP_IF_FALSE 94					      								    								  
							      								    								  
6 68 LOAD_FAST 0 ( ar1 )				      								    								  
70 LOAD_FAST 6 ( j )					      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_FAST 0 ( ar1 )					      								    								  
76 LOAD_FAST 6 ( j )					      								    								  
78 LOAD_CONST 1 ( 1 )					      								    								  
80 BINARY_ADD						      								    								  
82 STORE_SUBSCR						      								    								  
							      								    								  
7 84 LOAD_FAST 6 ( j )					      								    								  
86 LOAD_CONST 1 ( 1 )					      								    								  
88 INPLACE_SUBTRACT					      								    								  
90 STORE_FAST 6 ( j )					      								    								  
92 JUMP_ABSOLUTE 44					      								    								  
>> 94 POP_BLOCK						      								    								  
							      								    								  
8 >> 96 LOAD_FAST 6 ( j )				      								    								  
98 LOAD_FAST 2 ( m )					      								    								  
100 LOAD_CONST 3 ( 2 )					      								    								  
102 BINARY_SUBTRACT					      								    								  
104 COMPARE_OP 3 ( != )					      								    								  
106 POP_JUMP_IF_TRUE 120				      								    								  
108 LOAD_FAST 5 ( last )				      								    								  
110 LOAD_FAST 1 ( ar2 )					      								    								  
112 LOAD_FAST 4 ( i )					      								    								  
114 BINARY_SUBSCR					      								    								  
116 COMPARE_OP 4 ( > )					      								    								  
118 POP_JUMP_IF_FALSE 18				      								    								  
							      								    								  
9 >> 120 LOAD_FAST 1 ( ar2 )				      								    								  
122 LOAD_FAST 4 ( i )					      								    								  
124 BINARY_SUBSCR					      								    								  
126 LOAD_FAST 0 ( ar1 )					      								    								  
128 LOAD_FAST 6 ( j )					      								    								  
130 LOAD_CONST 1 ( 1 )					      								    								  
132 BINARY_ADD						      								    								  
134 STORE_SUBSCR					      								    								  
							      								    								  
10 136 LOAD_FAST 5 ( last )				      								    								  
138 LOAD_FAST 1 ( ar2 )					      								    								  
140 LOAD_FAST 4 ( i )					      								    								  
142 STORE_SUBSCR					      								    								  
144 JUMP_ABSOLUTE 18					      								    								  
>> 146 POP_BLOCK					      								    								  
>> 148 LOAD_CONST 0 ( None )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY_1				      FLOOR_IN_A_SORTED_ARRAY_1					    FLOOR_IN_A_SORTED_ARRAY_1					  FLOOR_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
Disassembly of <code object floorSearch at 0x7f33e2644f60, fi def floorSearch ( arr , low , high , x ) :		    def floorSearch ( arr , low , high , high ) :		  error :   File "/home/ubuntu/TransCoder/models/eva
2 0 LOAD_FAST 1 ( low )					      	  if ( low > high ) :					    	if low >= high :					  l/bt_sa/21z7a0p024/eval_scripts/dis_sa-python_sa.v
2 LOAD_FAST 2 ( high )					      	      return - 1					    	    return - 1						  alid/FLOOR_IN_A_SORTED_ARRAY_1.py", line 57	  el
4 COMPARE_OP 4 ( > )					      	  if ( x >= arr [ high ] ) :				    	elif low >= high :					  if low >= high :	  ^ SyntaxError: invalid syn
6 POP_JUMP_IF_FALSE 12					      	      return high					    	    return - 1						  tax
							      	  mid = int ( ( low + high ) / 2 )			    	elif low >= high :					  
3 8 LOAD_CONST 1 ( - 1 )				      	  if ( arr [ mid ] == x ) :				    	    return - 1						  
10 RETURN_VALUE						      	      return mid					    	elif low >= high :					  
							      	  if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 	    return - 1						  
4 >> 12 LOAD_FAST 3 ( x )				      	      return mid - 1					    	elif low >= high :					  
14 LOAD_FAST 0 ( arr )					      	  if ( x < arr [ mid ] ) :				    	    return - 1						  
16 LOAD_FAST 2 ( high )					      	      return floorSearch ( arr , low , mid - 1 , x )	    	elif low >= high :					  
18 BINARY_SUBSCR					      	  return floorSearch ( arr , mid + 1 , high , x )	    	    return - 1						  
20 COMPARE_OP 5 ( >= )					      								    	elif low >= high :					  
22 POP_JUMP_IF_FALSE 28					      								    	    return - 1						  
							      								    	elif low >= high :					  
5 24 LOAD_FAST 2 ( high )				      								    	    return - 1						  
26 RETURN_VALUE						      								    	elif low >= high :					  
							      								    	    return - 1						  
6 >> 28 LOAD_GLOBAL 0 ( int )				      								    	elif low >= high :					  
30 LOAD_FAST 1 ( low )					      								    	    return - 1						  
32 LOAD_FAST 2 ( high )					      								    	elif low >= high :					  
34 BINARY_ADD						      								    	    return - 1						  
36 LOAD_CONST 2 ( 2 )					      								    	elif low >= high :					  
38 BINARY_TRUE_DIVIDE					      								    	    return - 1						  
40 CALL_FUNCTION 1					      								    elif low >= high :						  
42 STORE_FAST 4 ( mid )					      								    	return - 1						  
							      								    elif low >= high :						  
7 44 LOAD_FAST 0 ( arr )				      								    	return - 1						  
46 LOAD_FAST 4 ( mid )					      								    elif low >= high :						  
48 BINARY_SUBSCR					      								    	return - 1						  
50 LOAD_FAST 3 ( x )					      								    elif low >= high :						  
52 COMPARE_OP 2 ( == )					      								    	return - 1						  
54 POP_JUMP_IF_FALSE 60					      								    elif low >= high :						  
							      								    	return - 1						  
8 56 LOAD_FAST 4 ( mid )				      								    elif low >= high :						  
58 RETURN_VALUE						      								    	return - 1						  
							      								    elif low >= high :						  
9 >> 60 LOAD_FAST 4 ( mid )				      								    	return - 1						  
62 LOAD_CONST 3 ( 0 )					      								    elif low >= high :						  
64 COMPARE_OP 4 ( > )					      								    	return - 1						  
66 POP_JUMP_IF_FALSE 104				      								    elif low >= high :						  
68 LOAD_FAST 0 ( arr )					      								    	return - 1						  
70 LOAD_FAST 4 ( mid )					      								    elif low >= high :						  
72 LOAD_CONST 4 ( 1 )					      								    	return - 1						  
74 BINARY_SUBTRACT					      								    elif low >= high :						  
76 BINARY_SUBSCR					      								    	return - 1						  
78 LOAD_FAST 3 ( x )					      								    elif low >= high :						  
80 COMPARE_OP 1 ( <= )					      								    	return - 1						  
82 POP_JUMP_IF_FALSE 104				      								    return - 1							  
84 LOAD_FAST 3 ( x )					      								    								  
86 LOAD_FAST 0 ( arr )					      								    								  
88 LOAD_FAST 4 ( mid )					      								    								  
90 BINARY_SUBSCR					      								    								  
92 COMPARE_OP 0 ( < )					      								    								  
94 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
10 96 LOAD_FAST 4 ( mid )				      								    								  
98 LOAD_CONST 4 ( 1 )					      								    								  
100 BINARY_SUBTRACT					      								    								  
102 RETURN_VALUE					      								    								  
							      								    								  
11 >> 104 LOAD_FAST 3 ( x )				      								    								  
106 LOAD_FAST 0 ( arr )					      								    								  
108 LOAD_FAST 4 ( mid )					      								    								  
110 BINARY_SUBSCR					      								    								  
112 COMPARE_OP 0 ( < )					      								    								  
114 POP_JUMP_IF_FALSE 134				      								    								  
							      								    								  
12 116 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
118 LOAD_FAST 0 ( arr )					      								    								  
120 LOAD_FAST 1 ( low )					      								    								  
122 LOAD_FAST 4 ( mid )					      								    								  
124 LOAD_CONST 4 ( 1 )					      								    								  
126 BINARY_SUBTRACT					      								    								  
128 LOAD_FAST 3 ( x )					      								    								  
130 CALL_FUNCTION 4					      								    								  
132 RETURN_VALUE					      								    								  
							      								    								  
13 >> 134 LOAD_GLOBAL 1 ( floorSearch )			      								    								  
136 LOAD_FAST 0 ( arr )					      								    								  
138 LOAD_FAST 4 ( mid )					      								    								  
140 LOAD_CONST 4 ( 1 )					      								    								  
142 BINARY_ADD						      								    								  
144 LOAD_FAST 2 ( high )				      								    								  
146 LOAD_FAST 3 ( x )					      								    								  
148 CALL_FUNCTION 4					      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL			  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL
--							      --							    --								  --
Disassembly of <code object substringConversions at 0x7f33e26 def substringConversions ( s , k , b ) :			    def substringConversions ( s ) :				  script_not_found : None
2 0 LOAD_GLOBAL 0 ( len )				      	  l = len ( s ) ;					    	l = len ( s )						  
2 LOAD_FAST 0 ( s )					      	  for i in range ( l ) :				    	while l < len ( s ) :					  
4 CALL_FUNCTION 1					      	      if ( ( i + k ) < l + 1 ) :			    	    l = s [ l ]						  
6 STORE_FAST 3 ( l )					      		  sub = s [ i : i + k ] ;			    	    l = l [ l + 1 ]					  
							      		  sum , counter = 0 , 0 ;			    	    l = l [ l + 1 ]					  
3 8 SETUP_LOOP 140 ( to 150 )				      		  for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :  	    l = l [ l + 1 ]					  
10 LOAD_GLOBAL 1 ( range )				      		      sum = sum + ( ( ord ( sub [ i ] ) - ord ( '0' 	    l = l [ l + 1 ]					  
12 LOAD_FAST 3 ( l )					      		      counter += 1 ;				    	    l = l [ l + 1 ]					  
14 CALL_FUNCTION 1					      		  print ( sum , end = " " ) ;			    	    l = l [ l + 1 ]					  
16 GET_ITER						      								    	    l += 1						  
>> 18 FOR_ITER 128 ( to 148 )				      								    	l += l [ l ]						  
20 STORE_FAST 4 ( i )					      								    	l += 1							  
							      								    								  
4 22 LOAD_FAST 4 ( i )					      								    								  
24 LOAD_FAST 1 ( k )					      								    								  
26 BINARY_ADD						      								    								  
28 LOAD_FAST 3 ( l )					      								    								  
30 LOAD_CONST 1 ( 1 )					      								    								  
32 BINARY_ADD						      								    								  
34 COMPARE_OP 0 ( < )					      								    								  
36 POP_JUMP_IF_FALSE 18					      								    								  
							      								    								  
5 38 LOAD_FAST 0 ( s )					      								    								  
40 LOAD_FAST 4 ( i )					      								    								  
42 LOAD_FAST 4 ( i )					      								    								  
44 LOAD_FAST 1 ( k )					      								    								  
46 BINARY_ADD						      								    								  
48 BUILD_SLICE 2					      								    								  
50 BINARY_SUBSCR					      								    								  
52 STORE_FAST 5 ( sub )					      								    								  
							      								    								  
6 54 LOAD_CONST 2 ( ( 0 , 0 ) )				      								    								  
56 UNPACK_SEQUENCE 2					      								    								  
58 STORE_FAST 6 ( sum )					      								    								  
60 STORE_FAST 7 ( counter )				      								    								  
							      								    								  
7 62 SETUP_LOOP 70 ( to 134 )				      								    								  
64 LOAD_GLOBAL 1 ( range )				      								    								  
66 LOAD_GLOBAL 0 ( len )				      								    								  
68 LOAD_FAST 5 ( sub )					      								    								  
70 CALL_FUNCTION 1					      								    								  
72 LOAD_CONST 1 ( 1 )					      								    								  
74 BINARY_SUBTRACT					      								    								  
76 LOAD_CONST 3 ( - 1 )					      								    								  
78 LOAD_CONST 3 ( - 1 )					      								    								  
80 CALL_FUNCTION 3					      								    								  
82 GET_ITER						      								    								  
>> 84 FOR_ITER 46 ( to 132 )				      								    								  
86 STORE_FAST 4 ( i )					      								    								  
							      								    								  
8 88 LOAD_FAST 6 ( sum )				      								    								  
90 LOAD_GLOBAL 2 ( ord )				      								    								  
92 LOAD_FAST 5 ( sub )					      								    								  
94 LOAD_FAST 4 ( i )					      								    								  
96 BINARY_SUBSCR					      								    								  
98 CALL_FUNCTION 1					      								    								  
100 LOAD_GLOBAL 2 ( ord )				      								    								  
102 LOAD_CONST 4 ( '0' )				      								    								  
104 CALL_FUNCTION 1					      								    								  
106 BINARY_SUBTRACT					      								    								  
108 LOAD_GLOBAL 3 ( pow )				      								    								  
110 LOAD_FAST 2 ( b )					      								    								  
112 LOAD_FAST 7 ( counter )				      								    								  
114 CALL_FUNCTION 2					      								    								  
116 BINARY_MULTIPLY					      								    								  
118 BINARY_ADD						      								    								  
120 STORE_FAST 6 ( sum )				      								    								  
							      								    								  
9 122 LOAD_FAST 7 ( counter )				      								    								  
124 LOAD_CONST 1 ( 1 )					      								    								  
126 INPLACE_ADD						      								    								  
128 STORE_FAST 7 ( counter )				      								    								  
130 JUMP_ABSOLUTE 84					      								    								  
>> 132 POP_BLOCK					      								    								  
							      								    								  
10 >> 134 LOAD_GLOBAL 4 ( print )			      								    								  
136 LOAD_FAST 6 ( sum )					      								    								  
138 LOAD_CONST 5 ( ' ' )				      								    								  
140 LOAD_CONST 6 ( ( 'end' , ) )			      								    								  
142 CALL_FUNCTION_KW 2					      								    								  
144 POP_TOP						      								    								  
146 JUMP_ABSOLUTE 18					      								    								  
>> 148 POP_BLOCK					      								    								  
>> 150 LOAD_CONST 0 ( None )				      								    								  
152 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS	  RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS
--							      --							    --								  --
Disassembly of <code object maxProduct at 0x7f33e2649a50, fil def maxProduct ( arr , n ) :				    def maxProduct ( arr , n , n , n , n ) :			  script_not_found : None
2 0 LOAD_FAST 1 ( n )					      	  if ( n < 2 ) :					    	if n < 2 :						  
2 LOAD_CONST 1 ( 2 )					      	      print ( "No pairs exists" )			    	    print ( "No pairs exists" )				  
4 COMPARE_OP 0 ( < )					      	      return						    	    return						  
6 POP_JUMP_IF_FALSE 20					      	  a = arr [ 0 ] ; b = arr [ 1 ]				    	a = arr [ n ]						  
							      	  for i in range ( 0 , n ) :				    	b = arr [ n ]						  
3 8 LOAD_GLOBAL 0 ( print )				      	      for j in range ( i + 1 , n ) :			    	a = b [ n ]						  
10 LOAD_CONST 2 ( 'No pairs exists' )			      		  if ( arr [ i ] * arr [ j ] > a * b ) :	    	b = a [ n ]						  
12 CALL_FUNCTION 1					      		      a = arr [ i ] ; b = arr [ j ]		    	a = b [ n ]						  
14 POP_TOP						      	  print ( "Max product pair is {" , a , "," , b , "}" , sep 	b = b [ n ]						  
							      								    	a = b [ n ]						  
4 16 LOAD_CONST 0 ( None )				      								    	b = b [ n ]						  
18 RETURN_VALUE						      								    	a = b [ n ]						  
							      								    	b = b [ n ]						  
5 >> 20 LOAD_FAST 0 ( arr )				      								    	a = b [ n ]						  
22 LOAD_CONST 3 ( 0 )					      								    	b [ n ] = b [ n ]					  
24 BINARY_SUBSCR					      								    	a [ n ] = b [ n ]					  
26 STORE_FAST 2 ( a )					      								    	b [ n ] = b [ n ]					  
28 LOAD_FAST 0 ( arr )					      								    	b [ n ] = b [ n ]					  
30 LOAD_CONST 4 ( 1 )					      								    	a [ n ] = b [ n ]					  
32 BINARY_SUBSCR					      								    	b [ n ] = b [ n ]					  
34 STORE_FAST 3 ( b )					      								    	b [ n ] = b [ n ]					  
							      								    	b [ n ] = b [ n ]					  
6 36 SETUP_LOOP 82 ( to 120 )				      								    	b [ n ] = b [ n ]					  
38 LOAD_GLOBAL 1 ( range )				      								    	b [ n ] = b [ n ]					  
40 LOAD_CONST 3 ( 0 )					      								    	b [ n ] = b [ n ]					  
42 LOAD_FAST 1 ( n )					      								    	b [ n ] = b [ n ]					  
44 CALL_FUNCTION 2					      								    	b [ n ] = b [ n ]					  
46 GET_ITER						      								    	b [ n ] = b [ n ]					  
>> 48 FOR_ITER 68 ( to 118 )				      								    	b [ n ] = b [ n ]					  
50 STORE_FAST 4 ( i )					      								    	b [ n ] = b [ n ]					  
							      								    	b [ n ] = b [ n ]					  
7 52 SETUP_LOOP 62 ( to 116 )				      								    	b [ n ] = b [ n ]					  
54 LOAD_GLOBAL 1 ( range )				      								    	b [ n ] = b [ n ]					  
56 LOAD_FAST 4 ( i )					      								    	b [ n ] = b [ n ]					  
58 LOAD_CONST 4 ( 1 )					      								    	b [ n ] = b [ n ]					  
60 BINARY_ADD						      								    	b [ n ] = b [ n ]					  
62 LOAD_FAST 1 ( n )					      								    	b [ n ] = b [ n ]					  
64 CALL_FUNCTION 2					      								    	b [ n ] = b [ n ]					  
66 GET_ITER						      								    	b [ n ] = b [ n ]					  
>> 68 FOR_ITER 44 ( to 114 )				      								    	b [ n ] = b [ n ]					  
70 STORE_FAST 5 ( j )					      								    	b [ n ] = b [ n ]					  
							      								    	b [ n ] = b [ n ]					  
8 72 LOAD_FAST 0 ( arr )				      								    	b [ n ] = b [ n ]					  
74 LOAD_FAST 4 ( i )					      								    	b [ n ] = b [ n ]					  
76 BINARY_SUBSCR					      								    	b [ n ] = b [ n ]					  
78 LOAD_FAST 0 ( arr )					      								    	b [ n ] = b [ n ]					  
80 LOAD_FAST 5 ( j )					      								    	b [ n ] = b [ n ]					  
82 BINARY_SUBSCR					      								    	b [ n ] = b [ n ]					  
84 BINARY_MULTIPLY					      								    	b [ n ] = b [ n ]					  
86 LOAD_FAST 2 ( a )					      								    	b [ n ] = b [ n ]					  
88 LOAD_FAST 3 ( b )					      								    	b [ n ] = b [ n ]					  
90 BINARY_MULTIPLY					      								    	b [ n ] = b [ n ]					  
92 COMPARE_OP 4 ( > )					      								    	return b						  
94 POP_JUMP_IF_FALSE 68					      								    								  
							      								    								  
9 96 LOAD_FAST 0 ( arr )				      								    								  
98 LOAD_FAST 4 ( i )					      								    								  
100 BINARY_SUBSCR					      								    								  
102 STORE_FAST 2 ( a )					      								    								  
104 LOAD_FAST 0 ( arr )					      								    								  
106 LOAD_FAST 5 ( j )					      								    								  
108 BINARY_SUBSCR					      								    								  
110 STORE_FAST 3 ( b )					      								    								  
112 JUMP_ABSOLUTE 68					      								    								  
>> 114 POP_BLOCK					      								    								  
>> 116 JUMP_ABSOLUTE 48					      								    								  
>> 118 POP_BLOCK					      								    								  
							      								    								  
10 >> 120 LOAD_GLOBAL 0 ( print )			      								    								  
122 LOAD_CONST 5 ( 'Max product pair is {' )		      								    								  
124 LOAD_FAST 2 ( a )					      								    								  
126 LOAD_CONST 6 ( ',' )				      								    								  
128 LOAD_FAST 3 ( b )					      								    								  
130 LOAD_CONST 7 ( '}' )				      								    								  
132 LOAD_CONST 8 ( '' )					      								    								  
134 LOAD_CONST 9 ( ( 'sep' , ) )			      								    								  
136 CALL_FUNCTION_KW 6					      								    								  
138 POP_TOP						      								    								  
140 LOAD_CONST 0 ( None )				      								    								  
142 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE
--							      --							    --								  --
Disassembly of <code object longestAlternating at 0x7f33e2644 def longestAlternating ( arr , n ) :			    def longestAlternating ( arr , n , n , n ) :		  script_not_found : None
2 0 LOAD_CONST 0 ( None )				      	  count = [ None ] * n					    	count = ( None , n )					  
2 BUILD_LIST 1						      	  count [ n - 1 ] = 1					    	count = n - 1						  
4 LOAD_FAST 1 ( n )					      	  i = n - 2						    	while n <= n :						  
6 BINARY_MULTIPLY					      	  while i >= 0 :					    	    count += 1						  
8 STORE_FAST 2 ( count )				      	      if ( arr [ i ] * arr [ i + 1 ] < 0 ) :		    	    count += n						  
							      		  count [ i ] = count [ i + 1 ] + 1		    	    count += 1						  
3 10 LOAD_CONST 1 ( 1 )					      	      else :						    	    count += 1						  
12 LOAD_FAST 2 ( count )				      		  count [ i ] = 1 ;				    	while count >= n :					  
14 LOAD_FAST 1 ( n )					      	      i = i - 1						    	    count += 1						  
16 LOAD_CONST 1 ( 1 )					      	  i = 0							    	    count += 1						  
18 BINARY_SUBTRACT					      	  while i < n :						    	    count += 1						  
20 STORE_SUBSCR						      	      print ( count [ i ] , end = " " )			    	return count						  
							      	      i = i + 1						    								  
4 22 LOAD_FAST 1 ( n )					      								    								  
24 LOAD_CONST 2 ( 2 )					      								    								  
26 BINARY_SUBTRACT					      								    								  
28 STORE_FAST 3 ( i )					      								    								  
							      								    								  
5 30 SETUP_LOOP 74 ( to 106 )				      								    								  
>> 32 LOAD_FAST 3 ( i )					      								    								  
34 LOAD_CONST 3 ( 0 )					      								    								  
36 COMPARE_OP 5 ( >= )					      								    								  
38 POP_JUMP_IF_FALSE 104				      								    								  
							      								    								  
6 40 LOAD_FAST 0 ( arr )				      								    								  
42 LOAD_FAST 3 ( i )					      								    								  
44 BINARY_SUBSCR					      								    								  
46 LOAD_FAST 0 ( arr )					      								    								  
48 LOAD_FAST 3 ( i )					      								    								  
50 LOAD_CONST 1 ( 1 )					      								    								  
52 BINARY_ADD						      								    								  
54 BINARY_SUBSCR					      								    								  
56 BINARY_MULTIPLY					      								    								  
58 LOAD_CONST 3 ( 0 )					      								    								  
60 COMPARE_OP 0 ( < )					      								    								  
62 POP_JUMP_IF_FALSE 86					      								    								  
							      								    								  
7 64 LOAD_FAST 2 ( count )				      								    								  
66 LOAD_FAST 3 ( i )					      								    								  
68 LOAD_CONST 1 ( 1 )					      								    								  
70 BINARY_ADD						      								    								  
72 BINARY_SUBSCR					      								    								  
74 LOAD_CONST 1 ( 1 )					      								    								  
76 BINARY_ADD						      								    								  
78 LOAD_FAST 2 ( count )				      								    								  
80 LOAD_FAST 3 ( i )					      								    								  
82 STORE_SUBSCR						      								    								  
84 JUMP_FORWARD 8 ( to 94 )				      								    								  
							      								    								  
9 >> 86 LOAD_CONST 1 ( 1 )				      								    								  
88 LOAD_FAST 2 ( count )				      								    								  
90 LOAD_FAST 3 ( i )					      								    								  
92 STORE_SUBSCR						      								    								  
							      								    								  
10 >> 94 LOAD_FAST 3 ( i )				      								    								  
96 LOAD_CONST 1 ( 1 )					      								    								  
98 BINARY_SUBTRACT					      								    								  
100 STORE_FAST 3 ( i )					      								    								  
102 JUMP_ABSOLUTE 32					      								    								  
>> 104 POP_BLOCK					      								    								  
							      								    								  
11 >> 106 LOAD_CONST 3 ( 0 )				      								    								  
108 STORE_FAST 3 ( i )					      								    								  
							      								    								  
12 110 SETUP_LOOP 36 ( to 148 )				      								    								  
>> 112 LOAD_FAST 3 ( i )				      								    								  
114 LOAD_FAST 1 ( n )					      								    								  
116 COMPARE_OP 0 ( < )					      								    								  
118 POP_JUMP_IF_FALSE 146				      								    								  
							      								    								  
13 120 LOAD_GLOBAL 0 ( print )				      								    								  
122 LOAD_FAST 2 ( count )				      								    								  
124 LOAD_FAST 3 ( i )					      								    								  
126 BINARY_SUBSCR					      								    								  
128 LOAD_CONST 4 ( ' ' )				      								    								  
130 LOAD_CONST 5 ( ( 'end' , ) )			      								    								  
132 CALL_FUNCTION_KW 2					      								    								  
134 POP_TOP						      								    								  
							      								    								  
14 136 LOAD_FAST 3 ( i )				      								    								  
138 LOAD_CONST 1 ( 1 )					      								    								  
140 BINARY_ADD						      								    								  
142 STORE_FAST 3 ( i )					      								    								  
144 JUMP_ABSOLUTE 112					      								    								  
>> 146 POP_BLOCK					      								    								  
>> 148 LOAD_CONST 0 ( None )				      								    								  
150 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			      FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			    FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			  FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA
--							      --							    --								  --
Disassembly of <code object parabola at 0x7f33e2653f60, file  def parabola ( a , b , c ) :				    def parabola ( a , b , c , c , c , c , c , c , c , c , c , c  script_not_found : None
2 0 LOAD_GLOBAL 0 ( print )				      	  print ( "Vertex: (" , ( - b / ( 2 * a ) ) , ", " , ( ( (  								  
2 LOAD_CONST 1 ( 'Vertex: (' )				      	  print ( "Focus: (" , ( - b / ( 2 * a ) ) , ", " , ( ( ( 4 								  
4 LOAD_FAST 1 ( b )					      	  print ( "Directrix: y=" , c - ( ( b * b ) + 1 ) * 4 * a , 								  
6 UNARY_NEGATIVE					      								    								  
8 LOAD_CONST 2 ( 2 )					      								    								  
10 LOAD_FAST 0 ( a )					      								    								  
12 BINARY_MULTIPLY					      								    								  
14 BINARY_TRUE_DIVIDE					      								    								  
16 LOAD_CONST 3 ( ', ' )				      								    								  
18 LOAD_CONST 4 ( 4 )					      								    								  
20 LOAD_FAST 0 ( a )					      								    								  
22 BINARY_MULTIPLY					      								    								  
24 LOAD_FAST 2 ( c )					      								    								  
26 BINARY_MULTIPLY					      								    								  
28 LOAD_FAST 1 ( b )					      								    								  
30 LOAD_FAST 1 ( b )					      								    								  
32 BINARY_MULTIPLY					      								    								  
34 BINARY_SUBTRACT					      								    								  
36 LOAD_CONST 4 ( 4 )					      								    								  
38 LOAD_FAST 0 ( a )					      								    								  
40 BINARY_MULTIPLY					      								    								  
42 BINARY_TRUE_DIVIDE					      								    								  
44 LOAD_CONST 5 ( ')' )					      								    								  
46 LOAD_CONST 6 ( '' )					      								    								  
48 LOAD_CONST 7 ( ( 'sep' , ) )				      								    								  
50 CALL_FUNCTION_KW 6					      								    								  
52 POP_TOP						      								    								  
							      								    								  
3 54 LOAD_GLOBAL 0 ( print )				      								    								  
56 LOAD_CONST 8 ( 'Focus: (' )				      								    								  
58 LOAD_FAST 1 ( b )					      								    								  
60 UNARY_NEGATIVE					      								    								  
62 LOAD_CONST 2 ( 2 )					      								    								  
64 LOAD_FAST 0 ( a )					      								    								  
66 BINARY_MULTIPLY					      								    								  
68 BINARY_TRUE_DIVIDE					      								    								  
70 LOAD_CONST 3 ( ', ' )				      								    								  
72 LOAD_CONST 4 ( 4 )					      								    								  
74 LOAD_FAST 0 ( a )					      								    								  
76 BINARY_MULTIPLY					      								    								  
78 LOAD_FAST 2 ( c )					      								    								  
80 BINARY_MULTIPLY					      								    								  
82 LOAD_FAST 1 ( b )					      								    								  
84 LOAD_FAST 1 ( b )					      								    								  
86 BINARY_MULTIPLY					      								    								  
88 BINARY_SUBTRACT					      								    								  
90 LOAD_CONST 9 ( 1 )					      								    								  
92 BINARY_ADD						      								    								  
94 LOAD_CONST 4 ( 4 )					      								    								  
96 LOAD_FAST 0 ( a )					      								    								  
98 BINARY_MULTIPLY					      								    								  
100 BINARY_TRUE_DIVIDE					      								    								  
102 LOAD_CONST 5 ( ')' )				      								    								  
104 LOAD_CONST 6 ( '' )					      								    								  
106 LOAD_CONST 7 ( ( 'sep' , ) )			      								    								  
108 CALL_FUNCTION_KW 6					      								    								  
110 POP_TOP						      								    								  
							      								    								  
4 112 LOAD_GLOBAL 0 ( print )				      								    								  
114 LOAD_CONST 10 ( 'Directrix: y=' )			      								    								  
116 LOAD_FAST 2 ( c )					      								    								  
118 LOAD_FAST 1 ( b )					      								    								  
120 LOAD_FAST 1 ( b )					      								    								  
122 BINARY_MULTIPLY					      								    								  
124 LOAD_CONST 9 ( 1 )					      								    								  
126 BINARY_ADD						      								    								  
128 LOAD_CONST 4 ( 4 )					      								    								  
130 BINARY_MULTIPLY					      								    								  
132 LOAD_FAST 0 ( a )					      								    								  
134 BINARY_MULTIPLY					      								    								  
136 BINARY_SUBTRACT					      								    								  
138 LOAD_CONST 6 ( '' )					      								    								  
140 LOAD_CONST 7 ( ( 'sep' , ) )			      								    								  
142 CALL_FUNCTION_KW 3					      								    								  
144 POP_TOP						      								    								  
146 LOAD_CONST 0 ( None )				      								    								  
148 RETURN_VALUE NEW_LINE				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
