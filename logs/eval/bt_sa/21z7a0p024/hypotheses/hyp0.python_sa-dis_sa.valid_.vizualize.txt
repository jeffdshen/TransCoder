========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
def largest ( arr , n ) :				      Disassembly of <code object largest at 0x7f33e2653f60, file " Disassembly of <code object largest at 0x7f2b0163dc90, file " success : identical to gold
    return max ( arr )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
							      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
							      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
							      6 RETURN_VALUE NEW_LINE					    6 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
def perimeter ( diameter , height ) :			      Disassembly of <code object perimeter at 0x7f33e2649a50, file Disassembly of <code object perimeter at 0x7f2b01639660, file failure : #Results: 0, 10
    return 2 * ( diameter + height )			      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
							      2 LOAD_FAST 0 ( diameter )				    2 LOAD_FAST 0 ( diameter )					  
							      4 LOAD_FAST 1 ( height )					    4 BINARY_ADD						  
							      6 BINARY_ADD						    6 LOAD_FAST 1 ( height )					  
							      8 BINARY_MULTIPLY						    8 BINARY_ADD						  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
def fun ( n ) :						      Disassembly of <code object fun at 0x7f33e2644930, file "<dis Disassembly of <code object fun at 0x7f2b0164d4b0, file "<dis error : /bin/bash: line 1: 11374 Segmentation faul
    return n & ( n - 1 )				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_FAST 0 ( n )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 2 ( - 1 )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  24/eval_scripts/python_sa-dis_sa.valid/TURN_OFF_TH
							      8 BINARY_AND						    8 BINARY_MODULO						  E_RIGHTMOST_SET_BIT.dis
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_<unk> VES_SORTED				      SORT_ARRAY_TWO_<unk> VES_SORTED				    SORT_ARRAY_TWO_<unk> VES_SORTED				  SORT_ARRAY_TWO_<unk> VES_SORTED
--							      --							    --								  --
def mergeTwoHalf ( A , n ) :				      Disassembly of <code object mergeTwoHalf at 0x7f33e2653ed0, f Disassembly of <code object mergeTwoHalf at 0x7f2b0163dc90, f script_not_found : None
    A.sort ( )						      2 0 LOAD_FAST 0 ( A )					    2 0 LOAD_FAST 0 ( A )					  
							      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
							      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
							      6 POP_TOP							    6 POP_TOP							  
							      8 LOAD_CONST 0 ( None )					    8 LOAD_CONST 0 ( None )					  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def binomialCoeffSum ( n ) :				      Disassembly of <code object binomialCoeffSum at 0x7f33e264493 Disassembly of <code object binomialCoeffSum at 0x7f2b0163966 success : identical to gold
    return ( 1 << n ) ;					      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  
							      4 BINARY_LSHIFT						    4 BINARY_LSHIFT						  
							      6 RETURN_VALUE NEW_LINE					    6 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
def isEven ( n ) :					      Disassembly of <code object isEven at 0x7f33e2653f60, file "< Disassembly of <code object isEven at 0x7f2b0164d4b0, file "< error : Traceback (most recent call last):   File
    return ( not ( n & 1 ) )				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_GLOBAL 0 ( ( not )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_FAST 0 ( n )						  (item)   File "main.py", line 28, in <module>	  Fi
							      4 BINARY_AND						    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in isEven NameError: name '( n
							      6 UNARY_NOT						    6 BINARY_SUBTRACT						  ot' is not defined
							      8 RETURN_VALUE NEW_LINE					    8 CALL_FUNCTION 1						  
							      								    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
def hexagonalNum ( n ) :				      Disassembly of <code object hexagonalNum at 0x7f33e2644930, f Disassembly of <code object hexagonalNum at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    return n * ( 2 * n - 1 )				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 1 ( n )						  le "<dis>", line 2, in hexagonalNum UnboundLocalEr
							      6 BINARY_MULTIPLY						    6 BINARY_SUBTRACT						  ror: local variable 'n' referenced before assignme
							      8 LOAD_CONST 2 ( 1 )					    8 BINARY_MULTIPLY						  nt
							      10 BINARY_SUBTRACT					    10 RETURN_VALUE NEW_LINE					  
							      12 BINARY_MULTIPLY					    								  
							      14 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
def summingSeries ( n ) :				      Disassembly of <code object summingSeries at 0x7f33e2653f60,  Disassembly of <code object summingSeries at 0x7f2b0163dc90,  success : identical to gold
    return math.pow ( n , 2 )				      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
							      2 LOAD_METHOD 1 ( pow )					    2 LOAD_METHOD 1 ( pow )					  
							      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  
							      6 LOAD_CONST 1 ( 2 )					    6 LOAD_CONST 1 ( 2 )					  
							      8 CALL_METHOD 2						    8 CALL_METHOD 2						  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def evenbinomialCoeffSum ( n ) :			      Disassembly of <code object evenbinomialCoeffSum at 0x7f33e26 Disassembly of <code object evenbinomialCoeffSum at 0x7f2b016 error : /bin/bash: line 1: 11406 Segmentation faul
    return ( 1 << ( n - 1 ) )				      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_CONST 1 ( 1 )					    4 BINARY_SUBTRACT						  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      6 BINARY_SUBTRACT						    6 LOAD_CONST 2 ( 2 )					  24/eval_scripts/python_sa-dis_sa.valid/FIND_SUM_EV
							      8 BINARY_LSHIFT						    8 BINARY_SUBTRACT						  EN_INDEX_BINOMIAL_COEFFICIENTS_1.dis
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
def findArea ( r ) :					      Disassembly of <code object findArea at 0x7f33e26494b0, file  Disassembly of <code object findArea at 0x7f2b01639660, file  error : Traceback (most recent call last):   File
    PI = 3.142						      2 0 LOAD_CONST 1 ( 3.142 )				    2 0 LOAD_CONST 1 ( 3.142 )					  "XLM/dis_script.py", line 60, in <module>	exec
    return PI * ( r * r ) ;				      2 STORE_FAST 1 ( PI )					    2 LOAD_FAST 0 ( r )						  (item)   File "main.py", line 29, in <module>	  Fi
							      								    4 BINARY_MULTIPLY						  le "<dis>", line 2, in findArea UnboundLocalError:
							      3 4 LOAD_FAST 1 ( PI )					    6 LOAD_FAST 1 ( p )						   local variable 'p' referenced before assignment
							      6 LOAD_FAST 0 ( r )					    8 LOAD_FAST 2 ( r )						  
							      8 LOAD_FAST 0 ( r )					    10 BINARY_MULTIPLY						  
							      10 BINARY_MULTIPLY					    12 BINARY_ADD						  
							      12 BINARY_MULTIPLY					    14 RETURN_VALUE NEW_LINE					  
							      14 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> Y_AN_INTEGER_WITH_3_5				      <unk> Y_AN_INTEGER_WITH_3_5				    <unk> Y_AN_INTEGER_WITH_3_5					  <unk> Y_AN_INTEGER_WITH_3_5
--							      --							    --								  --
def multiplyWith3Point5 ( x ) :				      Disassembly of <code object multiplyWith3Point5 at 0x7f33e264 Disassembly of <code object multiplyWithPointPoint5 at 0x7f2b script_not_found : None
    return ( x << 1 ) + x + ( x >> 1 )			      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
							      4 BINARY_LSHIFT						    4 BINARY_ADD						  
							      6 LOAD_FAST 0 ( x )					    6 LOAD_FAST 1 ( y )						  
							      8 BINARY_ADD						    8 BINARY_ADD						  
							      10 LOAD_FAST 0 ( x )					    10 LOAD_FAST 2 ( x )					  
							      12 LOAD_CONST 1 ( 1 )					    12 BINARY_ADD						  
							      14 BINARY_RSHIFT						    14 RETURN_VALUE NEW_LINE					  
							      16 BINARY_ADD						    								  
							      18 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
def cost ( a , n ) :					      Disassembly of <code object cost at 0x7f33e2644930, file "<di Disassembly of <code object cost at 0x7f2b0164d4b0, file "<di error : Traceback (most recent call last):   File
    return ( ( n - 1 ) * min ( a ) )			      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_SUBTRACT						    4 BINARY_SUBTRACT						  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_GLOBAL 0 ( min )					    6 LOAD_FAST 0 ( a )						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 0 ( a )					    8 LOAD_CONST 2 ( 1 )					  assembler.py", line 81, in to_co     co_consts.app
							      10 CALL_FUNCTION 1					    10 BINARY_SUBTRACT						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_MULTIPLY					    12 BINARY_MULTIPLY						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 RETURN_VALUE NEW_LINE					    14 BINARY_SUBTRACT						  co	 self.co_cellvars, ValueError: code: varname
							      								    16 RETURN_VALUE NEW_LINE					  s is too small
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
def Circumference ( l , w ) :				      Disassembly of <code object Circumference at 0x7f33e2644f60,  Disassembly of <code object CirCirference at 0x7f2b01639660,  success : None
    return ( 2 * ( l + w ) )				      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
							      2 LOAD_FAST 0 ( l )					    2 LOAD_FAST 0 ( l )						  
							      4 LOAD_FAST 1 ( w )					    4 LOAD_FAST 1 ( w )						  
							      6 BINARY_ADD						    6 BINARY_ADD						  
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 RETURN_VALUE NEW_LINE					    10 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
def circumferenceparallelogram ( a , b ) :		      Disassembly of <code object circumferenceparallelogram at 0x7 Disassembly of <code object circumeeeeeeeeeeeeeeeeeeeeeeeeeee error : /bin/bash: line 1: 11433 Segmentation faul
    return ( ( 2 * a ) + ( 2 * b ) )			      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  ataset/bin/python XLM/dis_script.py --script_path
							      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      6 LOAD_CONST 1 ( 2 )					    6 LOAD_CONST 2 ( 2 )					  24/eval_scripts/python_sa-dis_sa.valid/PROGRAM_CIR
							      8 LOAD_FAST 1 ( b )					    8 BINARY_POWER						  CUMFERENCE_PARALLELOGRAM.dis
							      10 BINARY_MULTIPLY					    10 LOAD_FAST 1 ( b )					  
							      12 BINARY_ADD						    12 BINARY_MULTIPLY						  
							      14 RETURN_VALUE NEW_LINE					    14 BINARY_ADD						  
							      								    16 LOAD_CONST 3 ( 2 )					  
							      								    18 BINARY_POWER						  
							      								    20 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
def nthTerm ( n ) :					      Disassembly of <code object nthTerm at 0x7f33e2644f60, file " Disassembly of <code object nthTerm at 0x7f2b01639660, file " error : Traceback (most recent call last):   File
    return ( n * n ) + ( n * n * n )			      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 28, in <module>	  Fi
							      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  le "<dis>", line 2, in nthTerm UnboundLocalError:
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 1 ( n )						  
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 LOAD_FAST 0 ( n )					    12 BINARY_SUBTRACT						  
							      14 BINARY_MULTIPLY					    14 RETURN_VALUE NEW_LINE					  
							      16 BINARY_ADD						    								  
							      18 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S_1				      NUMBER_TRIANGLES_N_<unk> S_1				    NUMBER_TRIANGLES_N_<unk> S_1				  NUMBER_TRIANGLES_N_<unk> S_1
--							      --							    --								  --
def numberOfTriangles ( n ) :				      Disassembly of <code object numberOfTriangles at 0x7f33e2644f Disassembly of <code object numberOfTriangles at 0x7f2b016396 script_not_found : None
    ans = 2 * ( pow ( 3 , n ) ) - 1 ;			      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
    return ans ;					      2 LOAD_GLOBAL 0 ( pow )					    2 LOAD_GLOBAL 0 ( pow )					  
							      4 LOAD_CONST 2 ( 3 )					    4 LOAD_CONST 2 ( 3 )					  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
							      10 BINARY_MULTIPLY					    10 LOAD_CONST 1 ( 2 )					  
							      12 LOAD_CONST 3 ( 1 )					    12 BINARY_SUBTRACT						  
							      14 BINARY_SUBTRACT					    14 LOAD_CONST 1 ( 2 )					  
							      16 STORE_FAST 1 ( ans )					    16 BINARY_SUBTRACT						  
							      								    18 CALL_FUNCTION 2						  
							      3 18 LOAD_FAST 1 ( ans )					    20 STORE_FAST 1 ( ans )					  
							      20 RETURN_VALUE NEW_LINE					    								  
							      								    3 22 LOAD_FAST 1 ( ans )					  
							      								    24 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
def swapNibbles ( x ) :					      Disassembly of <code object swapNibbles at 0x7f33e26494b0, fi Disassembly of <code object swapeeeeeeeeeeeeeeeeeeeeeeeeeeeee failure : #Results: 0, 10
    return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
							      2 LOAD_CONST 1 ( 15 )					    2 LOAD_CONST 1 ( 2 )					  
							      4 BINARY_AND						    4 COMPARE_OP 2 ( == )					  
							      6 LOAD_CONST 2 ( 4 )					    6 POP_JUMP_IF_FALSE 16					  
							      8 BINARY_LSHIFT						    8 LOAD_FAST 0 ( x )						  
							      10 LOAD_FAST 0 ( x )					    10 LOAD_CONST 2 ( 0xF0 )					  
							      12 LOAD_CONST 3 ( 240 )					    12 COMPARE_OP 2 ( == )					  
							      14 BINARY_AND						    14 RETURN_VALUE						  
							      16 LOAD_CONST 2 ( 4 )					    								  
							      18 BINARY_RSHIFT						    3 >> 16 LOAD_FAST 0 ( x )					  
							      20 BINARY_OR						    18 LOAD_CONST 3 ( 0xF0 )					  
							      22 RETURN_VALUE NEW_LINE					    20 COMPARE_OP 2 ( == )					  
							      								    22 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
def height ( N ) :					      Disassembly of <code object height at 0x7f33e2653f60, file "< Disassembly of <code object height at 0x7f2b01639660, file "< error : Traceback (most recent call last):   File
    return math.ceil ( math.log2 ( N + 1 ) ) - 1	      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_METHOD 1 ( ceil )					    2 LOAD_METHOD 1 ( ceil )					  (item)   File "main.py", line 30, in <module>	  Fi
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_GLOBAL 0 ( math )					  le "<dis>", line 2, in height TypeError: log2() ta
							      6 LOAD_METHOD 2 ( log2 )					    6 LOAD_METHOD 2 ( log2 )					  kes exactly one argument (2 given)
							      8 LOAD_FAST 0 ( N )					    8 LOAD_FAST 0 ( N )						  
							      10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( 1 )					  
							      12 BINARY_ADD						    12 CALL_METHOD 2						  
							      14 CALL_METHOD 1						    14 CALL_METHOD 1						  
							      16 CALL_METHOD 1						    16 RETURN_VALUE NEW_LINE					  
							      18 LOAD_CONST 1 ( 1 )					    								  
							      20 BINARY_SUBTRACT					    								  
							      22 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
def checkOrigin ( x1 , y1 , x2 , y2 ) :			      Disassembly of <code object checkOrigin at 0x7f33e2653ed0, fi Disassembly of <code object checkOrigin at 0x7f2b01639660, fi error : Traceback (most recent call last):   File
    return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )	      2 0 LOAD_FAST 0 ( x1 )					    2 0 LOAD_FAST 0 ( x1 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 3 ( y2 )					    2 LOAD_FAST 1 ( x2 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_FAST 1 ( y1 )					    4 LOAD_FAST 2 ( y2 )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 BINARY_SUBTRACT						    6 BUILD_TUPLE 2						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 BINARY_MULTIPLY						    8 COMPARE_OP 2 ( == )					  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_FAST 1 ( y1 )					    10 POP_JUMP_IF_FALSE 20					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 LOAD_FAST 2 ( x2 )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 LOAD_FAST 0 ( x1 )					    3 12 LOAD_FAST 0 ( x1 )					  co	 self.co_cellvars, ValueError: code: varname
							      16 BINARY_SUBTRACT					    14 LOAD_FAST 1 ( x2 )					  s is too small
							      18 BINARY_MULTIPLY					    16 LOAD_FAST 2 ( y2 )					  
							      20 COMPARE_OP 2 ( == )					    18 BUILD_TUPLE 2						  
							      22 RETURN_VALUE NEW_LINE					    >> 20 RETURN_VALUE						  
							      								    22 LOAD_CONST 0 ( None )					  
							      								    24 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
def findRepeating ( arr , n ) :				      Disassembly of <code object findRepeating at 0x7f33e2644f60,  Disassembly of <code object findRepeating at 0x7f2b0163dc90,  error : Traceback (most recent call last):   File
    return sum ( arr ) - ( ( ( n - 1 ) * n ) // 2 )	      2 0 LOAD_GLOBAL 0 ( sum )					    2 0 LOAD_GLOBAL 0 ( sum )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 CALL_FUNCTION 1						    4 LOAD_CONST 1 ( 1 )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_FAST 1 ( n )					    6 BINARY_SUBTRACT						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 2 ( 2 )					  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_SUBTRACT					    10 BINARY_POWER						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 LOAD_FAST 1 ( n )					    12 CALL_FUNCTION 1						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_MULTIPLY					    14 LOAD_CONST 2 ( 2 )					  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_CONST 2 ( 2 )					    16 BINARY_POWER						  s is too small
							      18 BINARY_FLOOR_DIVIDE					    18 RETURN_VALUE NEW_LINE					  
							      20 BINARY_SUBTRACT					    								  
							      22 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
def sortString ( str ) :				      Disassembly of <code object sortString at 0x7f33e2653ed0, fil Disassembly of <code object sortString at 0x7f2b01639660, fil script_not_found : None
    str = ''.join ( sorted ( str ) )			      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    print ( str )					      2 LOAD_METHOD 0 ( join )					    2 LOAD_METHOD 0 ( join )					  
							      4 LOAD_GLOBAL 1 ( sorted )				    4 LOAD_GLOBAL 1 ( sorted )					  
							      6 LOAD_FAST 0 ( str )					    6 LOAD_FAST 0 ( str )					  
							      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
							      10 CALL_METHOD 1						    10 CALL_METHOD 1						  
							      12 STORE_FAST 0 ( str )					    12 STORE_FAST 1 ( str )					  
							      								    								  
							      3 14 LOAD_GLOBAL 2 ( print )				    3 14 LOAD_GLOBAL 2 ( print )				  
							      16 LOAD_FAST 0 ( str )					    16 LOAD_FAST 1 ( str )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 POP_TOP						    20 POP_TOP							  
							      22 LOAD_CONST 0 ( None )					    22 LOAD_CONST 0 ( None )					  
							      24 RETURN_VALUE NEW_LINE					    24 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
def assignValue ( a , b , x ) :				      Disassembly of <code object assignValue at 0x7f33e2644930, fi Disassembly of <code object assignValue at 0x7f2b0164d4b0, fi script_not_found : None
    arr = [ a , b ]					      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    return ( arr [ x ] )				      2 LOAD_FAST 1 ( b )					    2 LOAD_FAST 1 ( b )						  
							      4 BUILD_LIST 2						    4 LOAD_FAST 2 ( x )						  
							      6 STORE_FAST 3 ( arr )					    6 LOAD_FAST 3 ( y )						  
							      								    8 BUILD_TUPLE 3						  
							      3 8 LOAD_FAST 3 ( arr )					    10 RETURN_VALUE NEW_LINE					  
							      10 LOAD_FAST 2 ( x )					    								  
							      12 BINARY_SUBSCR						    								  
							      14 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
def power ( n ) :					      Disassembly of <code object power at 0x7f33e26494b0, file "<d Disassembly of <code object power at 0x7f2b01639660, file "<d error : Traceback (most recent call last):   File
    if n == 1 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 2					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 30, in <module>	  Fi
    return 2 * power ( n - 1 )				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in power UnboundLocalError: lo
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  cal variable 'power' referenced before assignment
							      								    								  
							      3 8 LOAD_CONST 2 ( 2 )					    3 8 LOAD_CONST 2 ( 2 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_CONST 2 ( 2 )				    4 >> 12 LOAD_FAST 2 ( power )				  
							      14 LOAD_GLOBAL 0 ( power )				    14 LOAD_CONST 1 ( 1 )					  
							      16 LOAD_FAST 0 ( n )					    16 BINARY_SUBTRACT						  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_FAST 0 ( n )					  
							      20 BINARY_SUBTRACT					    20 LOAD_CONST 1 ( 1 )					  
							      22 CALL_FUNCTION 1					    22 BINARY_SUBTRACT						  
							      24 BINARY_MULTIPLY					    24 BINARY_MULTIPLY						  
							      26 RETURN_VALUE NEW_LINE					    26 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
def kthSmallest ( arr , n , k ) :			      Disassembly of <code object kthSmallest at 0x7f33e2649a50, fi Disassembly of <code object kthSmallest at 0x7f2b0163dc90, fi script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    return arr [ k - 1 ]				      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
							      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
							      6 POP_TOP							    6 POP_TOP							  
							      								    								  
							      3 8 LOAD_FAST 0 ( arr )					    3 8 LOAD_FAST 0 ( arr )					  
							      10 LOAD_FAST 2 ( k )					    10 LOAD_FAST 1 ( n )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( - 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBSCR						  
							      16 BINARY_SUBSCR						    16 BINARY_SUBTRACT						  
							      18 RETURN_VALUE NEW_LINE					    18 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES		      PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIR<unk> DIVISION_LINES
--							      --							    --								  --
def findMaximumPieces ( n ) :				      Disassembly of <code object findMaximumPieces at 0x7f33e26494 Disassembly of <code object findMaximumPieces at 0x7f2b0163dc script_not_found : None
    return int ( 1 + n * ( n + 1 ) / 2 )		      2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_FAST 0 ( n )						  
							      4 LOAD_FAST 0 ( n )					    4 LOAD_CONST 1 ( 1 )					  
							      6 LOAD_FAST 0 ( n )					    6 BINARY_ADD						  
							      8 LOAD_CONST 1 ( 1 )					    8 LOAD_FAST 1 ( n )						  
							      10 BINARY_ADD						    10 LOAD_CONST 2 ( 2 )					  
							      12 BINARY_MULTIPLY					    12 BINARY_ADD						  
							      14 LOAD_CONST 2 ( 2 )					    14 CALL_FUNCTION 2						  
							      16 BINARY_TRUE_DIVIDE					    16 RETURN_VALUE NEW_LINE					  
							      18 BINARY_ADD						    								  
							      20 CALL_FUNCTION 1					    								  
							      22 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
def areaOctagon ( side ) :				      Disassembly of <code object areaOctagon at 0x7f33e2644930, fi Disassembly of <code object areaOctagon at 0x7f2b01639660, fi error : Traceback (most recent call last):   File
    return ( 2 * ( 1 + ( math.sqrt ( 2 ) ) ) * side * side )  2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 2 ( 1 )					    2 LOAD_GLOBAL 0 ( math )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_METHOD 1 ( sqrt )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_METHOD 1 ( sqrt )					    6 LOAD_CONST 2 ( 2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_CONST 1 ( 2 )					    8 LOAD_GLOBAL 0 ( math )					  assembler.py", line 81, in to_co     co_consts.app
							      10 CALL_METHOD 1						    10 LOAD_METHOD 1 ( sqrt )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_ADD						    12 LOAD_CONST 2 ( 2 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_MULTIPLY					    14 CALL_METHOD 1						  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_FAST 0 ( side )					    16 CALL_METHOD 1						  s is too small
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 LOAD_FAST 0 ( side )					    20 LOAD_GLOBAL 0 ( math )					  
							      22 BINARY_MULTIPLY					    22 LOAD_METHOD 1 ( sqrt )					  
							      24 RETURN_VALUE NEW_LINE					    24 LOAD_CONST 2 ( 2 )					  
							      								    26 CALL_METHOD 1						  
							      								    28 BINARY_MULTIPLY						  
							      								    30 BINARY_SUBTRACT						  
							      								    32 LOAD_GLOBAL 0 ( math )					  
							      								    34 LOAD_METHOD 1 ( sqrt )					  
							      								    36 LOAD_CONST 2 ( 2 )					  
							      								    38 CALL_METHOD 1						  
							      								    40 BINARY_MULTIPLY						  
							      								    42 BINARY_SUBTRACT						  
							      								    44 BINARY_MULTIPLY						  
							      								    46 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
def volumeOfEllipsoid ( r1 , r2 , r3 ) :		      Disassembly of <code object volumeOfEllipsoid at 0x7f33e26449 Disassembly of <code object vtarget_restriction_type OfEllips error : Traceback (most recent call last):   File
    return 1.33 * math.pi * r1 * r2 * r3		      2 0 LOAD_CONST 1 ( 1.33 )					    2 0 LOAD_CONST 1 ( 1.33 )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_GLOBAL 0 ( math )					    2 LOAD_GLOBAL 0 ( math )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_ATTR 1 ( pi )					    4 LOAD_ATTR 1 ( pi )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 0 ( r1 )					    8 LOAD_GLOBAL 0 ( math )					  assembler.py", line 81, in to_co     co_consts.app
							      10 BINARY_MULTIPLY					    10 LOAD_ATTR 1 ( pi )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 LOAD_FAST 1 ( r2 )					    12 BINARY_MULTIPLY						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_MULTIPLY					    14 LOAD_GLOBAL 0 ( math )					  co	 self.co_cellvars, ValueError: code: varname
							      16 LOAD_FAST 2 ( r3 )					    16 LOAD_ATTR 1 ( pi )					  s is too small
							      18 BINARY_MULTIPLY					    18 BINARY_MULTIPLY						  
							      20 RETURN_VALUE NEW_LINE					    20 LOAD_GLOBAL 0 ( math )					  
							      								    22 LOAD_METHOD 2 ( log )					  
							      								    24 LOAD_FAST 0 ( r1 )					  
							      								    26 LOAD_FAST 1 ( r2 )					  
							      								    28 CALL_METHOD 2						  
							      								    30 BINARY_MULTIPLY						  
							      								    32 BINARY_SUBTRACT						  
							      								    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_<unk> PARTS_1				      BREAK_NUMBER_<unk> PARTS_1				    BREAK_NUMBER_<unk> PARTS_1					  BREAK_NUMBER_<unk> PARTS_1
--							      --							    --								  --
def count_of_ways ( n ) :				      Disassembly of <code object count_of_ways at 0x7f33e26494b0,  Disassembly of <code object count_of_ways at 0x7f2b01639660,  script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    count = ( n + 1 ) * ( n + 2 ) // 2			      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  
    return count					      								    								  
							      3 4 LOAD_FAST 0 ( n )					    3 4 LOAD_CONST 2 ( 1 )					  
							      6 LOAD_CONST 2 ( 1 )					    6 LOAD_FAST 0 ( n )						  
							      8 BINARY_ADD						    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 BINARY_ADD						  
							      12 LOAD_CONST 3 ( 2 )					    12 LOAD_FAST 1 ( count )					  
							      14 BINARY_ADD						    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_MULTIPLY					    16 BINARY_ADD						  
							      18 LOAD_CONST 3 ( 2 )					    18 BINARY_MULTIPLY						  
							      20 BINARY_FLOOR_DIVIDE					    20 LOAD_FAST 1 ( count )					  
							      22 STORE_FAST 1 ( count )					    22 LOAD_CONST 2 ( 1 )					  
							      								    24 BINARY_ADD						  
							      4 24 LOAD_FAST 1 ( count )				    26 LOAD_FAST 1 ( count )					  
							      26 RETURN_VALUE NEW_LINE					    28 BINARY_ADD						  
							      								    30 BINARY_MULTIPLY						  
							      								    32 BINARY_ADD						  
							      								    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
def calculateSum ( n ) :				      Disassembly of <code object calculateSum at 0x7f33e2649a50, f Disassembly of <code object calculateSum at 0x7f2b01639660, f error : /bin/bash: line 1: 11516 Segmentation faul
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    sum = 1 << n ;					      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  ataset/bin/python XLM/dis_script.py --script_path
    return ( sum - 1 )					      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      3 4 LOAD_CONST 2 ( 1 )					    3 4 LOAD_CONST 1 ( 1 )					  24/eval_scripts/python_sa-dis_sa.valid/SUM_OF_ALL_
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1.dis
							      8 BINARY_LSHIFT						    8 BINARY_SUBTRACT						  
							      10 STORE_FAST 1 ( sum )					    10 STORE_FAST 2 ( sum )					  
							      								    								  
							      4 12 LOAD_FAST 1 ( sum )					    4 12 LOAD_FAST 1 ( sum )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBTRACT						  
							      18 RETURN_VALUE NEW_LINE					    18 LOAD_FAST 2 ( sum )					  
							      								    20 BINARY_SUBTRACT						  
							      								    22 LOAD_FAST 1 ( sum )					  
							      								    24 BINARY_SUBTRACT						  
							      								    26 LOAD_FAST 2 ( sum )					  
							      								    28 BINARY_SUBTRACT						  
							      								    30 LOAD_FAST 1 ( sum )					  
							      								    32 BINARY_SUBTRACT						  
							      								    34 BINARY_TRUE_DIVIDE					  
							      								    36 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
def countNumberOfTriangles ( n ) :			      Disassembly of <code object countNumberOfTriangles at 0x7f33e Disassembly of <code object countNumberOfTriangles at 0x7f2b0 error : Traceback (most recent call last):   File
    return ( n * ( n - 1 ) * ( n - 2 ) // 6 )		      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 28, in <module>	  Fi
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in countNumberOfTriangles Unbo
							      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  undLocalError: local variable 'n' referenced befor
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  e assignment
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 2 ( 2 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 3 ( 6 )					    18 LOAD_FAST 0 ( n )					  
							      20 BINARY_FLOOR_DIVIDE					    20 LOAD_CONST 2 ( 2 )					  
							      22 RETURN_VALUE NEW_LINE					    22 BINARY_SUBTRACT						  
							      								    24 BINARY_MULTIPLY						  
							      								    26 BINARY_SUBTRACT						  
							      								    28 LOAD_FAST 0 ( n )					  
							      								    30 LOAD_CONST 2 ( 2 )					  
							      								    32 BINARY_SUBTRACT						  
							      								    34 BINARY_MULTIPLY						  
							      								    36 BINARY_SUBTRACT						  
							      								    38 LOAD_FAST 0 ( n )					  
							      								    40 LOAD_CONST 2 ( 2 )					  
							      								    42 BINARY_SUBTRACT						  
							      								    44 BINARY_MULTIPLY						  
							      								    46 BINARY_SUBTRACT						  
							      								    48 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
def sumOfSeries ( n ) :					      Disassembly of <code object sumOfSeries at 0x7f33e26494b0, fi Disassembly of <code object sumOfSeries at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    return ( int ) ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * 2 0 LOAD_GLOBAL 0 ( int )					    2 0 LOAD_GLOBAL 0 ( int )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 0.6172 )					    2 LOAD_GLOBAL 1 ( round )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 LOAD_GLOBAL 1 ( pow )					    4 LOAD_CONST 1 ( 10 )					  le "<dis>", line 2, in sumOfSeries TypeError: 'int
							      6 LOAD_CONST 2 ( 10 )					    6 LOAD_FAST 0 ( n )						  ' object is not callable
							      8 LOAD_FAST 0 ( n )					    8 LOAD_CONST 2 ( - 1 )					  
							      10 CALL_FUNCTION 2					    10 BINARY_SUBTRACT						  
							      12 LOAD_CONST 3 ( 1 )					    12 CALL_FUNCTION 2						  
							      14 BINARY_SUBTRACT					    14 CALL_FUNCTION 1						  
							      16 BINARY_MULTIPLY					    16 LOAD_CONST 3 ( - 0.5 )					  
							      18 LOAD_CONST 4 ( 0.55 )					    18 LOAD_FAST 0 ( n )					  
							      20 LOAD_FAST 0 ( n )					    20 LOAD_CONST 2 ( - 1 )					  
							      22 BINARY_MULTIPLY					    22 BINARY_SUBTRACT						  
							      24 BINARY_SUBTRACT					    24 BINARY_MULTIPLY						  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 RETURN_VALUE NEW_LINE					    28 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIR<unk> INSCRIBED
--							      --							    --								  --
def getArea ( a ) :					      Disassembly of <code object getArea at 0x7f33e2649a50, file " Disassembly of <code object getArea at 0x7f2b01639660, file " script_not_found : None
    area = ( math.pi * a * a ) / 4			      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
    return area						      2 LOAD_ATTR 1 ( pi )					    2 LOAD_ATTR 1 ( pi )					  
							      4 LOAD_FAST 0 ( a )					    4 LOAD_GLOBAL 0 ( math )					  
							      6 BINARY_MULTIPLY						    6 LOAD_ATTR 1 ( pi )					  
							      8 LOAD_FAST 0 ( a )					    8 BINARY_MULTIPLY						  
							      10 BINARY_MULTIPLY					    10 LOAD_CONST 1 ( 4 )					  
							      12 LOAD_CONST 1 ( 4 )					    12 BINARY_TRUE_DIVIDE					  
							      14 BINARY_TRUE_DIVIDE					    14 BINARY_ADD						  
							      16 STORE_FAST 1 ( area )					    16 STORE_FAST 0 ( a )					  
							      								    								  
							      3 18 LOAD_FAST 1 ( area )					    3 18 LOAD_FAST 0 ( a )					  
							      20 RETURN_VALUE NEW_LINE					    20 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
def maxSquare ( b , m ) :				      Disassembly of <code object maxSquare at 0x7f33e2649a50, file Disassembly of <code object maxSquare at 0x7f2b0163dc90, file error : Traceback (most recent call last):   File
    return ( b / m - 1 ) * ( b / m ) / 2		      2 0 LOAD_FAST 0 ( b )					    2 0 LOAD_FAST 0 ( b )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 1 ( m )					    2 LOAD_CONST 1 ( ( 'a' , 1 ) )				  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_TRUE_DIVIDE					    4 COMPARE_OP 2 ( == )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_CONST 1 ( 1 )					    6 POP_JUMP_IF_FALSE 20					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 BINARY_SUBTRACT						    								  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_FAST 0 ( b )					    3 8 LOAD_FAST 0 ( b )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 LOAD_FAST 1 ( m )					    10 LOAD_CONST 2 ( 1 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_TRUE_DIVIDE					    12 BINARY_SUBTRACT						  co	 self.co_cellvars, ValueError: code: varname
							      16 BINARY_MULTIPLY					    14 LOAD_CONST 2 ( 2 )					  s is too small
							      18 LOAD_CONST 2 ( 2 )					    16 BINARY_TRUE_DIVIDE					  
							      20 BINARY_TRUE_DIVIDE					    18 RETURN_VALUE						  
							      22 RETURN_VALUE NEW_LINE					    								  
							      								    4 >> 20 LOAD_FAST 0 ( b )					  
							      								    22 LOAD_CONST 1 ( 2 )					  
							      								    24 BINARY_TRUE_DIVIDE					  
							      								    26 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
def findSumSubsets ( n ) :				      Disassembly of <code object findSumSubsets at 0x7f33e2644930, Disassembly of <code object findSumSubsets at 0x7f2b0163dc90, error : Traceback (most recent call last):   File
    return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 28, in <module>	  Fi
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in findSumSubsets UnboundLocal
							      6 BINARY_ADD						    6 BINARY_SUBTRACT						  Error: local variable 'n' referenced before assign
							      8 BINARY_MULTIPLY						    8 LOAD_CONST 2 ( 2 )					  ment
							      10 LOAD_CONST 2 ( 2 )					    10 BINARY_TRUE_DIVIDE					  
							      12 BINARY_TRUE_DIVIDE					    12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 1 )					  
							      16 LOAD_FAST 0 ( n )					    16 BINARY_SUBTRACT						  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 2 ( 2 )					  
							      20 BINARY_SUBTRACT					    20 BINARY_TRUE_DIVIDE					  
							      22 BINARY_LSHIFT						    22 BINARY_SUBTRACT						  
							      24 BINARY_MULTIPLY					    24 LOAD_FAST 0 ( n )					  
							      26 RETURN_VALUE NEW_LINE					    26 LOAD_CONST 1 ( 1 )					  
							      								    28 BINARY_SUBTRACT						  
							      								    30 BINARY_TRUE_DIVIDE					  
							      								    32 BINARY_SUBTRACT						  
							      								    34 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
def vol_of_octahedron ( side ) :			      Disassembly of <code object vol_of_octahedron at 0x7f33e2649a Disassembly of <code object vol_of_octahedron at 0x7f2b016396 error : Traceback (most recent call last):   File
    return ( ( side * side * side ) * ( math.sqrt ( 2 ) / 3 ) 2 0 LOAD_FAST 0 ( side )					    2 0 LOAD_GLOBAL 0 ( ( ( side ) * 60 LOAD_FAST 0 ( side )	  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_FAST 0 ( side )					    62 CALL_FUNCTION 1						  item in run_dis_script():   File "XLM/dis_script.p
							      4 BINARY_MULTIPLY						    64 LOAD_GLOBAL 0 ( math )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 LOAD_FAST 0 ( side )					    66 LOAD_METHOD 1 ( sqrt )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 BINARY_MULTIPLY						    68 LOAD_CONST 1 ( 2 )					  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_GLOBAL 0 ( math )					    70 CALL_METHOD 1						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 LOAD_METHOD 1 ( sqrt )					    72 LOAD_CONST 2 ( 3 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 LOAD_CONST 1 ( 2 )					    74 BINARY_TRUE_DIVIDE					  co	 self.co_cellvars, ValueError: code: varname
							      16 CALL_METHOD 1						    76 CALL_FUNCTION 1						  s is too small
							      18 LOAD_CONST 2 ( 3 )					    78 LOAD_GLOBAL 0 ( math )					  
							      20 BINARY_TRUE_DIVIDE					    80 LOAD_METHOD 1 ( sqrt )					  
							      22 BINARY_MULTIPLY					    82 LOAD_CONST 1 ( 2 )					  
							      24 RETURN_VALUE NEW_LINE					    84 CALL_METHOD 1						  
							      								    86 BINARY_TRUE_DIVIDE					  
							      								    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
def timeToMeet ( s , v ) :				      Disassembly of <code object timeToMeet at 0x7f33e2644f60, fil Disassembly of <code object timeToMeet at 0x7f2b01639660, fil script_not_found : None
    V = 3 * v / 2 ;					      2 0 LOAD_CONST 1 ( 3 )					    2 0 LOAD_CONST 1 ( 3 )					  
    time = s / V ;					      2 LOAD_FAST 1 ( v )					    2 LOAD_FAST 0 ( s )						  
    print ( time ) ;					      4 BINARY_MULTIPLY						    4 LOAD_CONST 2 ( 2 )					  
							      6 LOAD_CONST 2 ( 2 )					    6 BINARY_POWER						  
							      8 BINARY_TRUE_DIVIDE					    8 LOAD_CONST 3 ( 2 )					  
							      10 STORE_FAST 2 ( V )					    10 BINARY_POWER						  
							      								    12 LOAD_CONST 4 ( 3 )					  
							      3 12 LOAD_FAST 0 ( s )					    14 BINARY_POWER						  
							      14 LOAD_FAST 2 ( V )					    16 LOAD_CONST 5 ( 4 )					  
							      16 BINARY_TRUE_DIVIDE					    18 BINARY_POWER						  
							      18 STORE_FAST 3 ( time )					    20 LOAD_CONST 6 ( 5 )					  
							      								    22 BINARY_POWER						  
							      4 20 LOAD_GLOBAL 0 ( print )				    24 LOAD_CONST 7 ( 6 )					  
							      22 LOAD_FAST 3 ( time )					    26 BINARY_POWER						  
							      24 CALL_FUNCTION 1					    28 LOAD_CONST 8 ( 7 )					  
							      26 POP_TOP						    30 BINARY_POWER						  
							      28 LOAD_CONST 0 ( None )					    32 LOAD_CONST 9 ( 3 )					  
							      30 RETURN_VALUE NEW_LINE					    34 BINARY_POWER						  
							      								    36 LOAD_CONST 10 ( 6 )					  
							      								    38 BINARY_POWER						  
							      								    40 LOAD_CONST 11 ( 6 )					  
							      								    42 BINARY_POWER						  
							      								    44 LOAD_CONST 12 ( 7 )					  
							      								    46 BINARY_POWER						  
							      								    48 LOAD_CONST 13 ( 6 )					  
							      								    50 BINARY_POWER						  
							      								    52 LOAD_CONST 14 ( 8 )					  
							      								    54 BINARY_POWER						  
							      								    56 LOAD_CONST 15 ( 6 )					  
							      								    58 BINARY_POWER						  
							      								    60 LOAD_CONST 16 ( 7 )					  
							      								    62 BINARY_POWER						  
							      								    64 LOAD_CONST 17 ( 7 )					  
							      								    66 BINARY_POWER						  
							      								    68 LOAD_CONST 17 ( 7 )					  
							      								    70 BINARY_POWER						  
							      								    72 LOAD_CONST 17 ( 7 )					  
							      								    74 BINARY_POWER						  
							      								    76 LOAD_CONST 17 ( 7 )					  
							      								    78 BINARY_POWER						  
							      								    80 LOAD_CONST 18 ( 8 )					  
							      								    82 BINARY_POWER						  
							      								    84 LOAD_CONST 19 ( 6 )					  
							      								    86 BINARY_POWER						  
							      								    88 LOAD_CONST 19 ( 8 )					  
							      								    90 BINARY_POWER						  
							      								    92 LOAD_CONST 19 ( 9 )					  
							      								    94 BINARY_POWER						  
							      								    96 LOAD_CONST 20 ( 9 )					  
							      								    98 BINARY_POWER						  
							      								    100 LOAD_CONST 19 ( 8 )					  
							      								    102 BINARY_POWER						  
							      								    104 LOAD_CONST 19 ( 10 )					  
							      								    106 BINARY_POWER						  
							      								    108 LOAD_CONST 20 ( 11 )					  
							      								    110 BINARY_POWER						  
							      								    112 LOAD_CONST 20 ( 11 )					  
							      								    114 BINARY_POWER						  
							      								    116 LOAD_CONST 20 ( 10 )					  
							      								    118 BINARY_POWER						  
							      								    120 LOAD_CONST 19 ( 10 )					  
							      								    122 BINARY_POWER						  
							      								    124 LOAD_CONST 20 ( 11 )					  
							      								    126 BINARY_POWER						  
							      								    128 LOAD_CONST 20 ( 10 )					  
							      								    130 BINARY_POWER						  
							      								    132 LOAD_CONST 21 ( 10 )					  
							      								    134 BINARY_POWER						  
							      								    136 LOAD_CONST 21 ( 11 )					  
							      								    138 BINARY_POWER						  
							      								    140 LOAD_CONST 21 ( 12 )					  
							      								    142 BINARY_POWER						  
							      								    144 LOAD_CONST 21 ( 12 )					  
							      								    146 BINARY_POWER						  
							      								    148 LOAD_CONST 21 ( 10 )					  
							      								    150 BINARY_POWER						  
							      								    152 LOAD_CONST 20 ( 11 )					  
							      								    154 BINARY_POWER						  
							      								    156 LOAD_CONST 21 ( 12 )					  
							      								    158 BINARY_POWER						  
							      								    160 LOAD_CONST 22 ( 13 )					  
							      								    162 BINARY_POWER						  
							      								    164 LOAD_CONST 21 ( 10 )					  
							      								    166 BINARY_POWER						  
							      								    168 LOAD_CONST 22 ( 11 )					  
							      								    170 BINARY_POWER						  
							      								    172 LOAD_CONST 21 ( 12 )					  
							      								    174 BINARY_POWER						  
							      								    176 LOAD_CONST 21 ( 10 )					  
							      								    178 BINARY_POWER						  
							      								    180 LOAD_CONST 21 ( 12 )					  
							      								    >> 182 BINARY_POWER						  
							      								    184 LOAD_CONST 21 ( 10 )					  
							      								    186 BINARY_POWER						  
							      								    188 LOAD_CONST 22 ( 11 )					  
							      								    190 LOAD_FAST 3 ( r )					  
							      								    192 CALL_FUNCTION 3						  
							      								    194 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e2644930, file " Disassembly of <code object findSum at 0x7f2b01639660, file " error : Traceback (most recent call last):   File
    return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24     2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 1 ( n )						  (item)   File "main.py", line 28, in <module>	  Fi
							      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  le "<dis>", line 2, in findSum UnboundLocalError:
							      6 BINARY_ADD						    6 BINARY_ADD						  local variable 'n' referenced before assignment
							      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 1 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 BINARY_MULTIPLY					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 3 ( 3 )					    18 LOAD_FAST 0 ( n )					  
							      20 LOAD_FAST 0 ( n )					    20 LOAD_CONST 1 ( 1 )					  
							      22 BINARY_MULTIPLY					    22 BINARY_ADD						  
							      24 LOAD_CONST 1 ( 1 )					    24 BINARY_MULTIPLY						  
							      26 BINARY_ADD						    26 LOAD_FAST 0 ( n )					  
							      28 BINARY_MULTIPLY					    28 LOAD_CONST 1 ( 1 )					  
							      30 LOAD_CONST 4 ( 24 )					    30 BINARY_ADD						  
							      32 BINARY_TRUE_DIVIDE					    32 BINARY_MULTIPLY						  
							      34 RETURN_VALUE NEW_LINE					    34 BINARY_SUBTRACT						  
							      								    36 LOAD_FAST 0 ( n )					  
							      								    38 LOAD_CONST 1 ( 1 )					  
							      								    40 BINARY_ADD						  
							      								    42 BINARY_MULTIPLY						  
							      								    44 BINARY_SUBTRACT						  
							      								    46 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
def find ( p ) :					      Disassembly of <code object find at 0x7f33e2644930, file "<di Disassembly of <code object find at 0x7f2b01639660, file "<di script_not_found : None
    return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
							      2 LOAD_METHOD 1 ( ceil )					    2 LOAD_METHOD 1 ( ceil )					  
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_GLOBAL 0 ( math )					  
							      6 LOAD_METHOD 2 ( sqrt )					    6 LOAD_METHOD 2 ( sqrt )					  
							      8 LOAD_CONST 1 ( 730 )					    8 LOAD_CONST 1 ( 2 )					  
							      10 LOAD_GLOBAL 0 ( math )					    10 LOAD_FAST 0 ( p )					  
							      12 LOAD_METHOD 3 ( log )					    12 LOAD_CONST 2 ( 1 )					  
							      14 LOAD_CONST 2 ( 1 )					    14 BINARY_SUBTRACT						  
							      16 LOAD_CONST 2 ( 1 )					    16 CALL_METHOD 1						  
							      18 LOAD_FAST 0 ( p )					    18 CALL_METHOD 1						  
							      20 BINARY_SUBTRACT					    20 CALL_METHOD 1						  
							      22 BINARY_TRUE_DIVIDE					    22 RETURN_VALUE NEW_LINE					  
							      24 CALL_METHOD 1						    								  
							      26 BINARY_MULTIPLY					    								  
							      28 CALL_METHOD 1						    								  
							      30 CALL_METHOD 1						    								  
							      32 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
def findIndex ( n ) :					      Disassembly of <code object findIndex at 0x7f33e2653ed0, file Disassembly of <code object findIndex at 0x7f2b01639660, file error : /bin/bash: line 1: 11577 Segmentation faul
    fibo = 2.078087 * math.log ( n ) + 1.672276		      2 0 LOAD_CONST 1 ( 2.078087 )				    2 0 LOAD_CONST 1 ( 2.078087 )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    return round ( fibo )				      2 LOAD_GLOBAL 0 ( math )					    2 LOAD_GLOBAL 0 ( math )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_METHOD 1 ( log )					    4 LOAD_METHOD 1 ( log )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  24/eval_scripts/python_sa-dis_sa.valid/FIND_INDEX_
							      8 CALL_METHOD 1						    8 CALL_METHOD 1						  GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1.dis
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 LOAD_CONST 2 ( 1.672276 )				    12 BINARY_SUBTRACT						  
							      14 BINARY_ADD						    14 STORE_FAST 1 ( fibo )					  
							      16 STORE_FAST 1 ( fibo )					    								  
							      								    3 16 LOAD_GLOBAL 2 ( round )				  
							      3 18 LOAD_GLOBAL 2 ( round )				    18 LOAD_FAST 1 ( fibo )					  
							      20 LOAD_FAST 1 ( fibo )					    20 CALL_FUNCTION 1						  
							      22 CALL_FUNCTION 1					    22 RETURN_VALUE NEW_LINE					  
							      24 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2644f60, file Disassembly of <code object factorial at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in factorial UnboundLocalError
							      6 POP_JUMP_IF_TRUE 16					    6 JUMP_IF_TRUE_OR_POP 12					  : local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 1 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    >> 12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 JUMP_IF_TRUE_OR_POP 28					  
							      >> 16 LOAD_CONST 1 ( 1 )					    16 LOAD_FAST 0 ( n )					  
							      18 RETURN_VALUE						    18 LOAD_CONST 1 ( 1 )					  
							      >> 20 LOAD_FAST 0 ( n )					    >> 20 BINARY_SUBTRACT					  
							      22 LOAD_GLOBAL 0 ( factorial )				    22 COMPARE_OP 2 ( == )					  
							      24 LOAD_FAST 0 ( n )					    24 RETURN_VALUE NEW_LINE					  
							      26 LOAD_CONST 1 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 CALL_FUNCTION 1					    								  
							      32 BINARY_MULTIPLY					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2653ed0, file Disassembly of <code object factorial at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in factorial UnboundLocalError
							      6 POP_JUMP_IF_TRUE 16					    6 JUMP_IF_TRUE_OR_POP 12					  : local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 1 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    >> 12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 RETURN_VALUE NEW_LINE					  
							      >> 16 LOAD_CONST 1 ( 1 )					    								  
							      18 RETURN_VALUE						    								  
							      >> 20 LOAD_FAST 0 ( n )					    								  
							      22 LOAD_GLOBAL 0 ( factorial )				    								  
							      24 LOAD_FAST 0 ( n )					    								  
							      26 LOAD_CONST 1 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 CALL_FUNCTION 1					    								  
							      32 BINARY_MULTIPLY					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2644930, file Disassembly of <code object factorial at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in factorial UnboundLocalError
							      6 POP_JUMP_IF_TRUE 16					    6 JUMP_IF_TRUE_OR_POP 12					  : local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 1 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    >> 12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 RETURN_VALUE NEW_LINE					  
							      >> 16 LOAD_CONST 1 ( 1 )					    								  
							      18 RETURN_VALUE						    								  
							      >> 20 LOAD_FAST 0 ( n )					    								  
							      22 LOAD_GLOBAL 0 ( factorial )				    								  
							      24 LOAD_FAST 0 ( n )					    								  
							      26 LOAD_CONST 1 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 CALL_FUNCTION 1					    								  
							      32 BINARY_MULTIPLY					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2649a50, file Disassembly of <code object factorial at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in factorial UnboundLocalError
							      6 POP_JUMP_IF_TRUE 16					    6 JUMP_IF_TRUE_OR_POP 12					  : local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 1 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    >> 12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 RETURN_VALUE NEW_LINE					  
							      >> 16 LOAD_CONST 1 ( 1 )					    								  
							      18 RETURN_VALUE						    								  
							      >> 20 LOAD_FAST 0 ( n )					    								  
							      22 LOAD_GLOBAL 0 ( factorial )				    								  
							      24 LOAD_FAST 0 ( n )					    								  
							      26 LOAD_CONST 1 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 CALL_FUNCTION 1					    								  
							      32 BINARY_MULTIPLY					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
def factorial ( n ) :					      Disassembly of <code object factorial at 0x7f33e2644f60, file Disassembly of <code object factorial at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
							      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 28, in <module>	  Fi
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in factorial UnboundLocalError
							      6 POP_JUMP_IF_TRUE 16					    6 JUMP_IF_TRUE_OR_POP 12					  : local variable 'n' referenced before assignment
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( 0 )					    10 LOAD_CONST 1 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    >> 12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 JUMP_IF_TRUE_OR_POP 28					  
							      >> 16 LOAD_CONST 1 ( 1 )					    16 LOAD_FAST 0 ( n )					  
							      18 RETURN_VALUE						    18 LOAD_CONST 1 ( 1 )					  
							      >> 20 LOAD_FAST 0 ( n )					    >> 20 BINARY_SUBTRACT					  
							      22 LOAD_GLOBAL 0 ( factorial )				    22 COMPARE_OP 2 ( == )					  
							      24 LOAD_FAST 0 ( n )					    24 RETURN_VALUE NEW_LINE					  
							      26 LOAD_CONST 1 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    								  
							      30 CALL_FUNCTION 1					    								  
							      32 BINARY_MULTIPLY					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
def countStr ( n ) :					      Disassembly of <code object countStr at 0x7f33e2644f60, file  Disassembly of <code object countStr at 0x7f2b01639660, file  error : /bin/bash: line 1: 11629 Segmentation faul
    return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) // 2 ) ) 2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  ataset/bin/python XLM/dis_script.py --script_path
							      4 LOAD_CONST 2 ( 2 )					    4 LOAD_CONST 2 ( 2 )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      6 BINARY_MULTIPLY						    6 BINARY_MULTIPLY						  24/eval_scripts/python_sa-dis_sa.valid/COUNT_STRIN
							      8 BINARY_ADD						    8 BINARY_ADD						  GS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1.dis
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_FAST 0 ( n )					    12 LOAD_CONST 2 ( 2 )					  
							      14 LOAD_FAST 0 ( n )					    14 BINARY_SUBTRACT						  
							      16 BINARY_MULTIPLY					    16 LOAD_CONST 2 ( 2 )					  
							      18 LOAD_CONST 1 ( 1 )					    18 BINARY_FLOOR_DIVIDE					  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBTRACT						  
							      22 BINARY_MULTIPLY					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 2 ( 2 )					    24 LOAD_CONST 2 ( 2 )					  
							      26 BINARY_FLOOR_DIVIDE					    26 BINARY_SUBTRACT						  
							      28 BINARY_ADD						    28 BINARY_MULTIPLY						  
							      30 RETURN_VALUE NEW_LINE					    30 BINARY_SUBTRACT						  
							      								    32 LOAD_FAST 0 ( n )					  
							      								    34 LOAD_CONST 2 ( 2 )					  
							      								    36 BINARY_SUBTRACT						  
							      								    38 BINARY_MULTIPLY						  
							      								    40 BINARY_ADD						  
							      								    42 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
def minmaxProduct ( arr1 , arr2 , n1 , n2 ) :		      Disassembly of <code object minmaxProduct at 0x7f33e2649a50,  Disassembly of <code object minmaxProduct at 0x7f2b0163dc90,  script_not_found : None
    arr1.sort ( )					      2 0 LOAD_FAST 0 ( arr1 )					    2 0 LOAD_FAST 0 ( arr1 )					  
    arr2.sort ( )					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    return arr1 [ n1 - 1 ] * arr2 [ 0 ]			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
							      6 POP_TOP							    6 POP_TOP							  
							      								    								  
							      3 8 LOAD_FAST 1 ( arr2 )					    3 8 LOAD_FAST 0 ( arr1 )					  
							      10 LOAD_METHOD 0 ( sort )					    10 LOAD_FAST 1 ( arr2 )					  
							      12 CALL_METHOD 0						    12 BINARY_SUBTRACT						  
							      14 POP_TOP						    14 LOAD_CONST 1 ( 1 )					  
							      								    16 BINARY_SUBTRACT						  
							      4 16 LOAD_FAST 0 ( arr1 )					    18 LOAD_FAST 2 ( arr2 )					  
							      18 LOAD_FAST 2 ( n1 )					    20 BINARY_SUBTRACT						  
							      20 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 1 ( 1 )					  
							      22 BINARY_SUBTRACT					    24 BINARY_SUBTRACT						  
							      24 BINARY_SUBSCR						    26 BINARY_MULTIPLY						  
							      26 LOAD_FAST 1 ( arr2 )					    28 BINARY_SUBTRACT						  
							      28 LOAD_CONST 2 ( 0 )					    30 RETURN_VALUE NEW_LINE					  
							      30 BINARY_SUBSCR						    								  
							      32 BINARY_MULTIPLY					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
def find_extra_element_index ( arrA , arrB ) :		      Disassembly of <code object find_extra_element_index at 0x7f3 Disassembly of <code object find_extra_element_index at 0x7f2 script_not_found : None
    extra_element = sum ( arrA ) - sum ( arrB )		      2 0 LOAD_GLOBAL 0 ( sum )					    2 0 LOAD_GLOBAL 0 ( sum )					  
    return arrA.index ( extra_element )			      2 LOAD_FAST 0 ( arrA )					    2 LOAD_FAST 0 ( arrA )					  
							      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
							      6 LOAD_GLOBAL 0 ( sum )					    6 STORE_FAST 1 ( extra_element )				  
							      8 LOAD_FAST 1 ( arrB )					    								  
							      10 CALL_FUNCTION 1					    3 8 LOAD_GLOBAL 1 ( sum )					  
							      12 BINARY_SUBTRACT					    10 LOAD_FAST 1 ( extra_element )				  
							      14 STORE_FAST 2 ( extra_element )				    12 CALL_FUNCTION 1						  
							      								    14 LOAD_FAST 1 ( extra_element )				  
							      3 16 LOAD_FAST 0 ( arrA )					    16 BINARY_SUBTRACT						  
							      18 LOAD_METHOD 1 ( index )				    18 STORE_FAST 2 ( extra_element )				  
							      20 LOAD_FAST 2 ( extra_element )				    								  
							      22 CALL_METHOD 1						    4 20 LOAD_FAST 0 ( arrA )					  
							      24 RETURN_VALUE NEW_LINE					    22 LOAD_METHOD 2 ( index )					  
							      								    24 LOAD_FAST 2 ( extra_element )				  
							      								    26 CALL_METHOD 1						  
							      								    28 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURR<unk>
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7f33e26494b0, file "<dis Disassembly of <code object fib at 0x7f2b01639660, file "<dis script_not_found : None
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return n					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    return fib ( n - 1 ) + fib ( n - 2 )		      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      3 8 LOAD_FAST 0 ( n )					    3 8 LOAD_FAST 0 ( n )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_GLOBAL 0 ( fib )				    4 >> 12 LOAD_GLOBAL 0 ( fib )				  
							      14 LOAD_FAST 0 ( n )					    14 LOAD_FAST 0 ( n )					  
							      16 LOAD_CONST 1 ( 1 )					    16 LOAD_CONST 2 ( 2 )					  
							      18 BINARY_SUBTRACT					    18 CALL_FUNCTION 2						  
							      20 CALL_FUNCTION 1					    20 LOAD_GLOBAL 0 ( fib )					  
							      22 LOAD_GLOBAL 0 ( fib )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_CONST 2 ( 2 )					  
							      26 LOAD_CONST 2 ( 2 )					    26 CALL_FUNCTION 2						  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 1						  
							      32 BINARY_ADD						    32 LOAD_CONST 3 ( '' )					  
							      34 RETURN_VALUE NEW_LINE					    34 BINARY_ADD						  
							      								    36 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
def countSetBits ( n ) :				      Disassembly of <code object countSetBits at 0x7f33e26494b0, f Disassembly of <code object countSetBits at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 31, in <module>	  Fi
    else :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in countSetBits UnboundLocalEr
	return 1 + countSetBits ( n & ( n - 1 ) )	      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  ror: local variable 'n' referenced before assignme
							      								    								  nt
							      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 2 ( 1 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      5 >> 12 LOAD_CONST 2 ( 1 )				    4 >> 12 LOAD_FAST 1 ( n )					  
							      14 LOAD_GLOBAL 0 ( countSetBits )				    14 LOAD_CONST 1 ( 0 )					  
							      16 LOAD_FAST 0 ( n )					    16 COMPARE_OP 2 ( == )					  
							      18 LOAD_FAST 0 ( n )					    18 POP_JUMP_IF_FALSE 24					  
							      20 LOAD_CONST 2 ( 1 )					    								  
							      22 BINARY_SUBTRACT					    5 20 LOAD_CONST 3 ( 1 )					  
							      24 BINARY_AND						    22 RETURN_VALUE						  
							      26 CALL_FUNCTION 1					    								  
							      28 BINARY_ADD						    6 >> 24 LOAD_FAST 0 ( n )					  
							      30 RETURN_VALUE						    26 LOAD_CONST 1 ( 0 )					  
							      32 LOAD_CONST 0 ( None )					    28 COMPARE_OP 2 ( == )					  
							      34 RETURN_VALUE NEW_LINE					    30 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      								    7 32 LOAD_CONST 4 ( 2 )					  
							      								    34 RETURN_VALUE						  
							      								    								  
							      								    8 >> 36 LOAD_FAST 0 ( n )					  
							      								    38 LOAD_CONST 1 ( 0 )					  
							      								    40 COMPARE_OP 2 ( == )					  
							      								    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    9 44 LOAD_CONST 5 ( 1 )					  
							      								    46 RETURN_VALUE						  
							      								    								  
							      								    10 >> 48 LOAD_CONST 6 ( 2 )					  
							      								    50 RETURN_VALUE						  
							      								    								  
							      								    11 >> 52 LOAD_CONST 7 ( 2 )					  
							      								    54 RETURN_VALUE						  
							      								    56 LOAD_CONST 0 ( None )					  
							      								    58 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
def vol_of_dodecahedron ( side ) :			      Disassembly of <code object vol_of_dodecahedron at 0x7f33e264 Disassembly of <code object vol_of_dodecadron at 0x7f2b016396 error : Traceback (most recent call last):   File
    return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 2 0 LOAD_CONST 1 ( 15 )					    2 0 LOAD_GLOBAL 0 ( ( ( 15 ) + ( 7 ) )			  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 2 ( 7 )					    2 LOAD_CONST 1 ( ( 15 + 7 ) )				  item in run_dis_script():   File "XLM/dis_script.p
							      4 LOAD_GLOBAL 0 ( math )					    4 LOAD_CONST 2 ( 4 )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 LOAD_METHOD 1 ( sqrt )					    6 LOAD_CONST 3 ( 4 )					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_CONST 3 ( 5 )					    8 LOAD_CONST 4 ( 5 )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 CALL_METHOD 1						    10 LOAD_CONST 5 ( 7 )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 BINARY_MULTIPLY					    12 LOAD_CONST 6 ( 8 )					  n parse     constants[arg] = ast.literal_eval(argr
							      14 BINARY_ADD						    14 LOAD_CONST 7 ( 10 )					  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      16 LOAD_CONST 4 ( 4 )					    16 LOAD_CONST 8 ( 9 )					  ib/python3.7/ast.py", line 91, in literal_eval
							      18 BINARY_TRUE_DIVIDE					    18 LOAD_CONST 9 ( 10 )					   return _convert(node_or_string)   File "/home/ubu
							      20 LOAD_GLOBAL 0 ( math )					    20 LOAD_CONST 10 ( 11 )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      22 LOAD_METHOD 2 ( pow )					    22 LOAD_CONST 11 ( 12 )					  line 90, in _convert	   return _convert_signed_nu
							      24 LOAD_FAST 0 ( side )					    24 LOAD_CONST 12 ( 13 )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      26 LOAD_CONST 5 ( 3 )					    26 LOAD_CONST 13 ( 14 )					  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      28 CALL_METHOD 2						    28 LOAD_CONST 14 ( 16 )					  ed_num     return _convert_num(node)	 File "/home
							      30 BINARY_MULTIPLY					    30 LOAD_CONST 15 ( 18 )					  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      32 RETURN_VALUE NEW_LINE					    32 LOAD_CONST 16 ( 20 )					  y", line 55, in _convert_num	   raise ValueError(
							      								    34 LOAD_CONST 17 ( 22 )					  'malformed node or string: ' + repr(node)) ValueEr
							      								    36 LOAD_CONST 18 ( 24 )					  ror: malformed node or string: <_ast.BinOp object
							      								    38 LOAD_CONST 19 ( 26 )					  at 0x7f13fc992410>
							      								    40 LOAD_CONST 19 ( 28 )					  
							      								    42 LOAD_CONST 20 ( 30 )					  
							      								    44 LOAD_CONST 19 ( 28 )					  
							      								    46 LOAD_CONST 19 ( 30 )					  
							      								    48 LOAD_CONST 20 ( 31 )					  
							      								    50 LOAD_CONST 21 ( 28 )					  
							      								    52 LOAD_CONST 22 ( 30 )					  
							      								    54 LOAD_CONST 23 ( 31 )					  
							      								    56 LOAD_CONST 23 ( 31 )					  
							      								    58 LOAD_CONST 23 ( 31 )					  
							      								    60 LOAD_CONST 23 ( 31 )					  
							      								    62 LOAD_CONST 23 ( 31 )					  
							      								    64 LOAD_CONST 23 ( 31 )					  
							      								    66 LOAD_CONST 23 ( 31 )					  
							      								    68 LOAD_CONST 23 ( 31 )					  
							      								    70 LOAD_CONST 23 ( 31 )					  
							      								    72 LOAD_CONST 22 ( 31 )					  
							      								    74 LOAD_CONST 23 ( 31 )					  
							      								    76 LOAD_CONST 23 ( 31 )					  
							      								    78 LOAD_CONST 23 ( 31 )					  
							      								    80 LOAD_CONST 23 ( 31 )					  
							      								    82 LOAD_CONST 23 ( 31 )					  
							      								    84 LOAD_CONST 23 ( 31 )					  
							      								    86 LOAD_CONST 23 ( 31 )					  
							      								    88 LOAD_CONST 23 ( 31 )					  
							      								    90 LOAD_CONST 24 ( 31 )					  
							      								    92 LOAD_CONST 23 ( 31 )					  
							      								    94 LOAD_CONST 23 ( 31 )					  
							      								    96 LOAD_CONST 23 ( 31 )					  
							      								    98 LOAD_CONST 23 ( 31 )					  
							      								    100 LOAD_CONST 23 ( 31 )					  
							      								    102 LOAD_CONST 23 ( 31 )					  
							      								    104 LOAD_CONST 22 ( 31 )					  
							      								    106 LOAD_CONST 23 ( 31 )					  
							      								    108 LOAD_CONST 23 ( 31 )					  
							      								    110 LOAD_CONST 23 ( 31 )					  
							      								    112 LOAD_CONST 23 ( 31 )					  
							      								    114 LOAD_CONST 23 ( 31 )					  
							      								    116 LOAD_CONST 23 ( 31 )					  
							      								    118 LOAD_CONST 23 ( 31 )					  
							      								    120 LOAD_CONST 23 ( 31 )					  
							      								    122 LOAD_CONST 24 ( ( '31' , '31' , '31' ) )		  
							      								    124 CALL_FUNCTION_KW 5					  
							      								    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
def findArea ( a ) :					      Disassembly of <code object findArea at 0x7f33e2653f60, file  Disassembly of <code object findArea at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a  2 0 LOAD_GLOBAL 0 ( sqrt )				    2 0 LOAD_GLOBAL 0 ( sqrt )					  "XLM/dis_script.py", line 60, in <module>	exec
    return area						      2 LOAD_CONST 1 ( 5 )					    2 LOAD_GLOBAL 1 ( 5 )					  (item)   File "main.py", line 31, in <module>	  Fi
							      4 LOAD_CONST 1 ( 5 )					    4 LOAD_CONST 1 ( 5 )					  le "<dis>", line 2, in findArea NameError: name '5
							      6 LOAD_CONST 2 ( 2 )					    6 LOAD_CONST 2 ( 5 )					  ' is not defined
							      8 LOAD_GLOBAL 0 ( sqrt )					    8 CALL_FUNCTION 2						  
							      10 LOAD_CONST 1 ( 5 )					    10 LOAD_GLOBAL 1 ( 5 )					  
							      12 CALL_FUNCTION 1					    12 LOAD_CONST 1 ( 5 )					  
							      14 BINARY_MULTIPLY					    14 CALL_FUNCTION 2						  
							      16 BINARY_ADD						    16 BINARY_MULTIPLY						  
							      18 BINARY_MULTIPLY					    18 CALL_FUNCTION 1						  
							      20 CALL_FUNCTION 1					    20 BINARY_TRUE_DIVIDE					  
							      22 LOAD_FAST 0 ( a )					    22 STORE_FAST 0 ( area )					  
							      24 BINARY_MULTIPLY					    								  
							      26 LOAD_FAST 0 ( a )					    3 24 LOAD_FAST 0 ( area )					  
							      28 BINARY_MULTIPLY					    26 RETURN_VALUE NEW_LINE					  
							      30 LOAD_CONST 3 ( 4 )					    								  
							      32 BINARY_TRUE_DIVIDE					    								  
							      34 STORE_FAST 1 ( area )					    								  
							      								    								  
							      3 36 LOAD_FAST 1 ( area )					    								  
							      38 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1	      POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_<unk> TIVE_ODD_POSITIONS_1
--							      --							    --								  --
def printArray ( a , n ) :				      Disassembly of <code object printArray at 0x7f33e2649a50, fil Disassembly of <code object printArray at 0x7f2b0163dc90, fil script_not_found : None
    for i in a :					      2 0 SETUP_LOOP 24 ( to 26 )				    2 0 SETUP_LOOP 26 ( to 28 )					  
	print ( i , end = " " )				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
    print ( )						      4 GET_ITER						    4 GET_ITER							  
							      >> 6 FOR_ITER 16 ( to 24 )				    >> 6 FOR_ITER 18 ( to 26 )					  
							      8 STORE_FAST 2 ( i )					    8 STORE_FAST 2 ( i )					  
							      								    								  
							      3 10 LOAD_GLOBAL 0 ( print )				    3 10 LOAD_GLOBAL 0 ( print )				  
							      12 LOAD_FAST 2 ( i )					    12 LOAD_FAST 2 ( i )					  
							      14 LOAD_CONST 1 ( ' ' )					    14 LOAD_CONST 1 ( ' ' )					  
							      16 LOAD_CONST 2 ( ( 'end' , ) )				    16 CALL_FUNCTION 2						  
							      18 CALL_FUNCTION_KW 2					    18 POP_TOP							  
							      20 POP_TOP						    20 JUMP_ABSOLUTE 6						  
							      22 JUMP_ABSOLUTE 6					    >> 22 POP_BLOCK						  
							      >> 24 POP_BLOCK						    >> 24 LOAD_CONST 0 ( None )					  
							      								    26 RETURN_VALUE NEW_LINE					  
							      4 >> 26 LOAD_GLOBAL 0 ( print )				    								  
							      28 CALL_FUNCTION 0					    								  
							      30 POP_TOP						    								  
							      32 LOAD_CONST 0 ( None )					    								  
							      34 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
def countSetBits ( n ) :				      Disassembly of <code object countSetBits at 0x7f33e2644f60, f Disassembly of <code object countSetBits at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( n ) :					      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  (item)   File "main.py", line 32, in <module>	  Fi
	n &= ( n - 1 )					      								    								  le "<dis>", line 2, in countSetBits TypeError: 'in
	count += 1					      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 SETUP_LOOP 26 ( to 32 )					  t' object is not iterable
    return count					      >> 6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 POP_JUMP_IF_FALSE 32					    8 GET_ITER							  
							      								    >> 10 FOR_ITER 18 ( to 30 )					  
							      4 10 LOAD_FAST 0 ( n )					    12 STORE_FAST 2 ( n )					  
							      12 LOAD_FAST 0 ( n )					    								  
							      14 LOAD_CONST 2 ( 1 )					    4 14 LOAD_FAST 1 ( count )					  
							      16 BINARY_SUBTRACT					    16 LOAD_CONST 2 ( 1 )					  
							      18 INPLACE_AND						    18 INPLACE_ADD						  
							      20 STORE_FAST 0 ( n )					    20 STORE_FAST 1 ( count )					  
							      								    								  
							      5 22 LOAD_FAST 1 ( count )				    5 22 LOAD_FAST 1 ( count )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_FAST 2 ( n )					  
							      26 INPLACE_ADD						    26 INPLACE_ADD						  
							      28 STORE_FAST 1 ( count )					    28 STORE_FAST 1 ( count )					  
							      30 JUMP_ABSOLUTE 6					    								  
							      >> 32 POP_BLOCK						    6 30 LOAD_FAST 1 ( count )					  
							      								    32 LOAD_FAST 2 ( n )					  
							      6 >> 34 LOAD_FAST 1 ( count )				    34 INPLACE_ADD						  
							      36 RETURN_VALUE NEW_LINE					    36 STORE_FAST 1 ( count )					  
							      								    								  
							      								    7 38 LOAD_FAST 1 ( count )					  
							      								    40 LOAD_FAST 2 ( n )					  
							      								    42 INPLACE_ADD						  
							      								    44 STORE_FAST 1 ( count )					  
							      								    46 JUMP_ABSOLUTE 10						  
							      								    >> 48 POP_BLOCK						  
							      								    								  
							      								    8 >> 50 LOAD_FAST 1 ( count )				  
							      								    52 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
def bin ( n ) :						      Disassembly of <code object bin at 0x7f33e26494b0, file "<dis Disassembly of <code object bin at 0x7f2b01639660, file "<dis script_not_found : None
    if n > 1 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	bin ( n // 2 )					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    print ( n % 2 , end = "" )				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
							      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 8 LOAD_GLOBAL 0 ( bin )					    3 8 LOAD_GLOBAL 0 ( bin )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 2 )					    12 LOAD_CONST 2 ( 2 )					  
							      14 BINARY_FLOOR_DIVIDE					    14 BINARY_FLOOR_DIVIDE					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 POP_TOP						    18 POP_TOP							  
							      								    								  
							      4 >> 20 LOAD_GLOBAL 1 ( print )				    4 >> 20 LOAD_GLOBAL 0 ( bin )				  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 2 ( 2 )					    24 LOAD_CONST 3 ( 2 )					  
							      26 BINARY_MODULO						    26 BINARY_FLOOR_DIVIDE					  
							      28 LOAD_CONST 3 ( '' )					    28 CALL_FUNCTION 1						  
							      30 LOAD_CONST 4 ( ( 'end' , ) )				    30 POP_TOP							  
							      32 CALL_FUNCTION_KW 2					    								  
							      34 POP_TOP						    5 32 LOAD_GLOBAL 0 ( bin )					  
							      36 LOAD_CONST 0 ( None )					    34 LOAD_FAST 0 ( n )					  
							      38 RETURN_VALUE NEW_LINE					    36 LOAD_CONST 3 ( 2 )					  
							      								    38 BINARY_FLOOR_DIVIDE					  
							      								    40 CALL_FUNCTION 1						  
							      								    42 POP_TOP							  
							      								    								  
							      								    6 44 LOAD_GLOBAL 0 ( bin )					  
							      								    46 LOAD_FAST 0 ( n )					  
							      								    48 LOAD_CONST 3 ( 2 )					  
							      								    50 BINARY_FLOOR_DIVIDE					  
							      								    52 CALL_FUNCTION 1						  
							      								    54 POP_TOP							  
							      								    56 JUMP_FORWARD 28 ( to 94 )				  
							      								    								  
							      								    8 >> 58 LOAD_GLOBAL 0 ( bin )				  
							      								    60 LOAD_FAST 0 ( n )					  
							      								    62 LOAD_CONST 3 ( 2 )					  
							      								    64 BINARY_FLOOR_DIVIDE					  
							      								    66 CALL_FUNCTION 1						  
							      								    68 POP_TOP							  
							      								    								  
							      								    9 70 LOAD_GLOBAL 0 ( bin )					  
							      								    72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 3 ( 2 )					  
							      								    76 BINARY_FLOOR_DIVIDE					  
							      								    78 STORE_FAST 0 ( n )					  
							      								    								  
							      								    10 80 LOAD_GLOBAL 0 ( bin )					  
							      								    82 LOAD_FAST 0 ( n )					  
							      								    84 LOAD_CONST 3 ( 2 )					  
							      								    86 BINARY_FLOOR_DIVIDE					  
							      								    88 CALL_FUNCTION 1						  
							      								    90 POP_TOP							  
							      								    92 JUMP_FORWARD 28 ( to 94 )				  
							      								    								  
							      								    13 >> 94 LOAD_GLOBAL 0 ( bin )				  
							      								    96 LOAD_FAST 0 ( n )					  
							      								    98 LOAD_CONST 3 ( 2 )					  
							      								    100 BINARY_FLOOR_DIVIDE					  
							      								    102 CALL_FUNCTION 1						  
							      								    104 POP_TOP							  
							      								    >> 106 LOAD_CONST 0 ( None )				  
							      								    108 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
def linearSearch ( arr , n ) :				      Disassembly of <code object linearSearch at 0x7f33e2644930, f Disassembly of <code object linearSearch at 0x7f2b0163dc90, f error : XXX lineno: 2, opcode: 0 Traceback (most r
    for i in range ( n ) :				      2 0 SETUP_LOOP 32 ( to 34 )				    2 0 SETUP_LOOP 76 ( to 78 )					  ecent call last):   File "XLM/dis_script.py", line
	if arr [ i ] is i :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					   60, in <module>     exec(item)   File "main.py",
	    return i					      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  line 31, in <module>	 File "<dis>", line 2, in li
    return - 1						      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  nearSearch SystemError: unknown opcode
							      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 20 ( to 32 )				    >> 10 FOR_ITER 68 ( to 76 )					  
							      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 LOAD_FAST 0 ( arr )					    3 14 LOAD_FAST 2 ( i )					  
							      16 LOAD_FAST 2 ( i )					    16 LOAD_FAST 0 ( arr )					  
							      18 BINARY_SUBSCR						    18 COMPARE_OP 8 ( is )					  
							      20 LOAD_FAST 2 ( i )					    20 POP_JUMP_IF_FALSE 10					  
							      22 COMPARE_OP 8 ( is )					    								  
							      24 POP_JUMP_IF_FALSE 10					    4 22 LOAD_FAST 2 ( i )					  
							      								    24 LOAD_FAST 0 ( arr )					  
							      4 26 LOAD_FAST 2 ( i )					    26 COMPARE_OP 8 ( is )					  
							      28 RETURN_VALUE						    28 POP_JUMP_IF_FALSE 10					  
							      30 JUMP_ABSOLUTE 10					    								  
							      >> 32 POP_BLOCK						    5 30 LOAD_FAST 2 ( i )					  
							      								    32 LOAD_FAST 0 ( arr )					  
							      5 >> 34 LOAD_CONST 1 ( - 1 )				    34 COMPARE_OP 8 ( is )					  
							      36 RETURN_VALUE NEW_LINE					    36 POP_JUMP_IF_FALSE 10					  
							      								    								  
							      								    6 38 LOAD_FAST 2 ( i )					  
							      								    40 LOAD_FAST 0 ( arr )					  
							      								    42 LOAD_FAST 1 ( n )					  
							      								    44 STORE_SUBSCR						  
							      								    46 JUMP_ABSOLUTE 10						  
							      								    >> 48 POP_BLOCK						  
							      								    								  
							      								    7 >> 50 LOAD_FAST 2 ( i )					  
							      								    52 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
def printSubStr ( st , low , high ) :			      Disassembly of <code object printSubStr at 0x7f33e2644930, fi Disassembly of <code object printSubStr at 0x7f2b0163dc90, fi script_not_found : None
    sys.stdout.write ( st [ low : high + 1 ] )		      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_GLOBAL 0 ( sys )					  
    sys.stdout.flush ( )				      2 LOAD_ATTR 1 ( stdout )					    2 LOAD_ATTR 1 ( stdout )					  
    return ''						      4 LOAD_METHOD 2 ( write )					    4 LOAD_METHOD 2 ( write )					  
							      6 LOAD_FAST 0 ( st )					    6 LOAD_FAST 0 ( st )					  
							      8 LOAD_FAST 1 ( low )					    8 LOAD_FAST 1 ( low )					  
							      10 LOAD_FAST 2 ( high )					    10 LOAD_CONST 1 ( 1 )					  
							      12 LOAD_CONST 1 ( 1 )					    12 BINARY_ADD						  
							      14 BINARY_ADD						    14 CALL_METHOD 2						  
							      16 BUILD_SLICE 2						    16 POP_TOP							  
							      18 BINARY_SUBSCR						    								  
							      20 CALL_METHOD 1						    3 18 LOAD_GLOBAL 0 ( sys )					  
							      22 POP_TOP						    20 LOAD_ATTR 1 ( stdout )					  
							      								    22 LOAD_METHOD 2 ( write )					  
							      3 24 LOAD_GLOBAL 0 ( sys )				    24 LOAD_FAST 0 ( st )					  
							      26 LOAD_ATTR 1 ( stdout )					    26 LOAD_FAST 1 ( low )					  
							      28 LOAD_METHOD 3 ( flush )				    28 LOAD_CONST 2 ( 2 )					  
							      30 CALL_METHOD 0						    30 BINARY_ADD						  
							      32 POP_TOP						    32 CALL_METHOD 2						  
							      								    34 POP_TOP							  
							      4 34 LOAD_CONST 2 ( '' )					    								  
							      36 RETURN_VALUE NEW_LINE					    4 36 LOAD_CONST 3 ( '' )					  
							      								    38 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
def isPowerOfFour ( n ) :				      Disassembly of <code object isPowerOfFour at 0x7f33e2653ed0,  Disassembly of <code object isPowerOfFour at 0x7f2b0163dc90,  error : Traceback (most recent call last):   File
    return ( n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not (  2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
							      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
							      4 COMPARE_OP 3 ( != )					    4 COMPARE_OP 3 ( != )					  y", line 47, in run_dis_script     co_code, co_nlo
							      6 JUMP_IF_FALSE_OR_POP 32					    6 POP_JUMP_IF_FALSE 22					  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_FAST 0 ( n )					    8 LOAD_GLOBAL 0 ( ( n )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  pack non-iterable NoneType object
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_SUBTRACT					    14 BINARY_SUBTRACT						  
							      16 BINARY_AND						    16 COMPARE_OP 3 ( != )					  
							      18 LOAD_CONST 1 ( 0 )					    18 POP_JUMP_IF_FALSE 22					  
							      20 COMPARE_OP 2 ( == )					    20 LOAD_GLOBAL 0 ( n )					  
							      22 JUMP_IF_FALSE_OR_POP 32				    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_CONST 2 ( 1 )					  
							      26 LOAD_CONST 3 ( 2863311530 )				    26 BINARY_SUBTRACT						  
							      28 BINARY_AND						    28 COMPARE_OP 3 ( != )					  
							      30 UNARY_NOT						    30 POP_JUMP_IF_FALSE 36					  
							      >> 32 RETURN_VALUE NEW_LINE				    								  
							      								    3 >> 32 LOAD_GLOBAL 1 ( RuntimeError )			  
							      								    34 LOAD_CONST 3 ( 'Unknown PSBSBSBSBSBSBSBSBSBSBSBSBSBSBSBSBS 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
def bin ( n ) :						      Disassembly of <code object bin at 0x7f33e2653ed0, file "<dis Disassembly of <code object bin at 0x7f2b01639660, file "<dis script_not_found : None
    if ( n > 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	bin ( n >> 1 )					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    print ( n & 1 , end = "" )				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
							      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      3 8 LOAD_GLOBAL 0 ( bin )					    3 8 LOAD_GLOBAL 0 ( bin )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_RSHIFT						    14 BINARY_SUBTRACT						  
							      16 CALL_FUNCTION 1					    16 BINARY_SUBSCR						  
							      18 POP_TOP						    18 STORE_FAST 1 ( bin )					  
							      								    								  
							      4 >> 20 LOAD_GLOBAL 1 ( print )				    4 20 LOAD_GLOBAL 1 ( print )				  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 3 ( '' )					  
							      26 BINARY_AND						    26 CALL_FUNCTION 2						  
							      28 LOAD_CONST 2 ( '' )					    28 POP_TOP							  
							      30 LOAD_CONST 3 ( ( 'end' , ) )				    30 JUMP_FORWARD 12 ( to 38 )				  
							      32 CALL_FUNCTION_KW 2					    								  
							      34 POP_TOP						    6 >> 32 LOAD_GLOBAL 2 ( print )				  
							      36 LOAD_CONST 0 ( None )					    34 LOAD_FAST 0 ( n )					  
							      38 RETURN_VALUE NEW_LINE					    36 LOAD_CONST 3 ( '' )					  
							      								    >> 38 CALL_FUNCTION 2					  
							      								    40 POP_TOP							  
							      								    >> 42 LOAD_CONST 0 ( None )					  
							      								    44 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
def largestPower ( n , p ) :				      Disassembly of <code object largestPower at 0x7f33e2649a50, f Disassembly of <code object largestPower at 0x7f2b0163dc90, f script_not_found : None
    x = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    while n :						      2 STORE_FAST 2 ( x )					    2 STORE_FAST 1 ( x )					  
	n /= p						      								    								  
	x += n						      3 4 SETUP_LOOP 24 ( to 30 )				    3 4 LOAD_FAST 1 ( x )					  
    return x						      >> 6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 POP_JUMP_IF_FALSE 28					    8 BINARY_SUBTRACT						  
							      								    10 STORE_FAST 2 ( n )					  
							      4 10 LOAD_FAST 0 ( n )					    								  
							      12 LOAD_FAST 1 ( p )					    4 12 LOAD_FAST 1 ( x )					  
							      14 INPLACE_TRUE_DIVIDE					    14 LOAD_FAST 2 ( n )					  
							      16 STORE_FAST 0 ( n )					    16 BINARY_SUBTRACT						  
							      								    18 LOAD_FAST 1 ( x )					  
							      5 18 LOAD_FAST 2 ( x )					    20 BINARY_SUBTRACT						  
							      20 LOAD_FAST 0 ( n )					    22 LOAD_FAST 2 ( n )					  
							      22 INPLACE_ADD						    24 BINARY_SUBTRACT						  
							      24 STORE_FAST 2 ( x )					    26 LOAD_FAST 1 ( x )					  
							      26 JUMP_ABSOLUTE 6					    28 BINARY_SUBTRACT						  
							      >> 28 POP_BLOCK						    30 LOAD_FAST 2 ( n )					  
							      								    32 BINARY_SUBTRACT						  
							      6 >> 30 LOAD_FAST 2 ( x )					    34 BINARY_TRUE_DIVIDE					  
							      32 RETURN_VALUE NEW_LINE					    36 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
def find ( n , k ) :					      Disassembly of <code object find at 0x7f33e2649a50, file "<di Disassembly of <code object find at 0x7f2b01639660, file "<di error : Traceback (most recent call last):   File
    if ( n + 1 >= k ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 59, in <module>	for
	return ( k - 1 )				      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  item in run_dis_script():   File "XLM/dis_script.p
    else :						      4 BINARY_ADD						    4 COMPARE_OP 5 ( >= )					  y", line 54, in run_dis_script     hyp_co = mco.to
	return ( 2 * n + 1 - k )			      6 LOAD_FAST 1 ( k )					    6 POP_JUMP_IF_FALSE 22					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 COMPARE_OP 5 ( >= )					    								  assembler.py", line 81, in to_co     co_consts.app
							      10 POP_JUMP_IF_FALSE 20					    3 8 LOAD_FAST 0 ( n )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      								    10 LOAD_CONST 2 ( - 1 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      3 12 LOAD_FAST 1 ( k )					    12 COMPARE_OP 5 ( >= )					  co	 self.co_cellvars, ValueError: code: varname
							      14 LOAD_CONST 1 ( 1 )					    14 POP_JUMP_IF_FALSE 22					  s is too small
							      16 BINARY_SUBTRACT					    								  
							      18 RETURN_VALUE						    4 16 LOAD_FAST 0 ( n )					  
							      								    18 LOAD_CONST 1 ( 1 )					  
							      5 >> 20 LOAD_CONST 2 ( 2 )				    20 BINARY_SUBTRACT						  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 BINARY_MULTIPLY					    24 LOAD_CONST 2 ( - 1 )					  
							      26 LOAD_CONST 1 ( 1 )					    26 BINARY_SUBTRACT						  
							      28 BINARY_ADD						    28 BINARY_SUBTRACT						  
							      30 LOAD_FAST 1 ( k )					    30 LOAD_FAST 0 ( n )					  
							      32 BINARY_SUBTRACT					    32 LOAD_CONST 2 ( - 1 )					  
							      34 RETURN_VALUE						    34 BINARY_SUBTRACT						  
							      36 LOAD_CONST 0 ( None )					    36 BINARY_SUBTRACT						  
							      38 RETURN_VALUE NEW_LINE					    38 LOAD_FAST 0 ( n )					  
							      								    40 LOAD_CONST 2 ( - 1 )					  
							      								    42 BINARY_SUBTRACT						  
							      								    44 BINARY_SUBTRACT						  
							      								    46 LOAD_FAST 0 ( n )					  
							      								    48 LOAD_CONST 2 ( - 1 )					  
							      								    50 BINARY_SUBTRACT						  
							      								    52 BINARY_SUBTRACT						  
							      								    54 LOAD_FAST 0 ( n )					  
							      								    56 LOAD_CONST 2 ( - 1 )					  
							      								    58 BINARY_SUBTRACT						  
							      								    60 BINARY_SUBTRACT						  
							      								    62 LOAD_FAST 0 ( n )					  
							      								    64 LOAD_CONST 2 ( - 1 )					  
							      								    66 BINARY_SUBTRACT						  
							      								    68 BINARY_SUBTRACT						  
							      								    70 BINARY_SUBTRACT						  
							      								    72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 2 ( - 1 )					  
							      								    76 BINARY_SUBTRACT						  
							      								    78 BINARY_SUBTRACT						  
							      								    80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 2 ( - 1 )					  
							      								    84 BINARY_SUBTRACT						  
							      								    86 BINARY_SUBTRACT						  
							      								    88 BINARY_SUBTRACT						  
							      								    90 LOAD_FAST 0 ( n )					  
							      								    92 LOAD_CONST 2 ( - 1 )					  
							      								    94 BINARY_SUBTRACT						  
							      								    96 BINARY_SUBTRACT						  
							      								    98 LOAD_FAST 0 ( n )					  
							      								    100 LOAD_CONST 2 ( - 1 )					  
							      								    102 BINARY_SUBTRACT						  
							      								    104 BINARY_SUBTRACT						  
							      								    106 LOAD_FAST 0 ( n )					  
							      								    108 LOAD_CONST 2 ( - 1 )					  
							      								    110 BINARY_SUBTRACT						  
							      								    112 BINARY_SUBTRACT						  
							      								    114 LOAD_FAST 0 ( n )					  
							      								    116 LOAD_CONST 2 ( - 1 )					  
							      								    118 BINARY_SUBTRACT						  
							      								    120 BINARY_SUBTRACT						  
							      								    122 LOAD_FAST 0 ( n )					  
							      								    124 LOAD_CONST 2 ( - 1 )					  
							      								    126 BINARY_SUBTRACT						  
							      								    128 BINARY_SUBTRACT						  
							      								    130 BINARY_SUBTRACT						  
							      								    132 LOAD_FAST 0 ( n )					  
							      								    134 LOAD_CONST 2 ( - 1 )					  
							      								    136 BINARY_SUBTRACT						  
							      								    138 BINARY_SUBTRACT						  
							      								    140 LOAD_FAST 0 ( n )					  
							      								    142 LOAD_CONST 2 ( - 1 )					  
							      								    144 BINARY_SUBTRACT						  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 0 ( n )					  
							      								    150 LOAD_CONST 2 ( - 1 )					  
							      								    152 BINARY_SUBTRACT						  
							      								    154 BINARY_SUBTRACT						  
							      								    156 BINARY_SUBTRACT						  
							      								    158 LOAD_FAST 0 ( n )					  
							      								    160 LOAD_CONST 2 ( - 1 )					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 BINARY_SUBTRACT						  
							      								    166 LOAD_FAST 0 ( n )					  
							      								    168 LOAD_CONST 2 ( - 1 )					  
							      								    170 BINARY_SUBTRACT						  
							      								    172 BINARY_SUBTRACT						  
							      								    174 LOAD_FAST 0 ( n )					  
							      								    176 LOAD_CONST 2 ( - 1 )					  
							      								    178 BINARY_SUBTRACT						  
							      								    180 BINARY_SUBTRACT						  
							      								    182 BINARY_SUBTRACT						  
							      								    184 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_<unk> E_OF_10
--							      --							    --								  --
def round ( n ) :					      Disassembly of <code object round at 0x7f33e2644930, file "<d Disassembly of <code object round at 0x7f2b0164d4b0, file "<d script_not_found : None
    a = ( n // 10 ) * 10				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
    b = a + 10						      2 LOAD_CONST 1 ( 10 )					    2 LOAD_CONST 1 ( 10 )					  
    return ( b if n - a > b - n else a )		      4 BINARY_FLOOR_DIVIDE					    4 BINARY_FLOOR_DIVIDE					  
							      6 LOAD_CONST 1 ( 10 )					    6 LOAD_CONST 2 ( 10 )					  
							      8 BINARY_MULTIPLY						    8 BINARY_FLOOR_DIVIDE					  
							      10 STORE_FAST 1 ( a )					    10 STORE_FAST 1 ( a )					  
							      								    								  
							      3 12 LOAD_FAST 1 ( a )					    3 12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 1 ( 10 )					    14 LOAD_CONST 1 ( 10 )					  
							      16 BINARY_ADD						    16 COMPARE_OP 4 ( > )					  
							      18 STORE_FAST 2 ( b )					    18 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      4 20 LOAD_FAST 0 ( n )					    4 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_FAST 1 ( a )					    22 LOAD_CONST 1 ( 10 )					  
							      24 BINARY_SUBTRACT					    24 BINARY_MODULO						  
							      26 LOAD_FAST 2 ( b )					    26 LOAD_FAST 1 ( a )					  
							      28 LOAD_FAST 0 ( n )					    28 BINARY_SUBTRACT						  
							      30 BINARY_SUBTRACT					    30 RETURN_VALUE						  
							      32 COMPARE_OP 4 ( > )					    								  
							      34 POP_JUMP_IF_FALSE 40					    5 >> 32 LOAD_FAST 0 ( n )					  
							      36 LOAD_FAST 2 ( b )					    34 LOAD_CONST 1 ( 10 )					  
							      38 RETURN_VALUE						    36 COMPARE_OP 4 ( > )					  
							      >> 40 LOAD_FAST 1 ( a )					    38 POP_JUMP_IF_FALSE 48					  
							      42 RETURN_VALUE NEW_LINE					    								  
							      								    6 40 LOAD_FAST 0 ( n )					  
							      								    42 LOAD_CONST 1 ( 10 )					  
							      								    44 BINARY_MODULO						  
							      								    46 RETURN_VALUE						  
							      								    								  
							      								    7 >> 48 LOAD_FAST 0 ( n )					  
							      								    50 LOAD_CONST 1 ( 10 )					  
							      								    52 BINARY_MODULO						  
							      								    54 RETURN_VALUE						  
							      								    56 LOAD_CONST 0 ( None )					  
							      								    58 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def sumDigits ( no ) :					      Disassembly of <code object sumDigits at 0x7f33e2644930, file Disassembly of <code object sumDigits at 0x7f2b0163dc90, file error : /bin/bash: line 1: 11713 Segmentation faul
    return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 2 0 LOAD_FAST 0 ( no )					    2 0 LOAD_FAST 0 ( no )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
							      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
							      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 18					  24/eval_scripts/python_sa-dis_sa.valid/HOW_CAN_WE_
							      8 LOAD_CONST 1 ( 0 )					    8 LOAD_GLOBAL 0 ( int )					  SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
							      10 RETURN_VALUE						    10 LOAD_FAST 0 ( no )					  NT_2.dis
							      >> 12 LOAD_GLOBAL 0 ( int )				    12 LOAD_CONST 2 ( 10 )					  
							      14 LOAD_FAST 0 ( no )					    14 CALL_FUNCTION 2						  
							      16 LOAD_CONST 2 ( 10 )					    16 LOAD_GLOBAL 0 ( int )					  
							      18 BINARY_MODULO						    18 LOAD_FAST 0 ( no )					  
							      20 CALL_FUNCTION 1					    20 LOAD_CONST 3 ( 10 )					  
							      22 LOAD_GLOBAL 1 ( sumDigits )				    22 CALL_FUNCTION 2						  
							      24 LOAD_GLOBAL 0 ( int )					    24 CALL_FUNCTION 1						  
							      26 LOAD_FAST 0 ( no )					    26 LOAD_GLOBAL 0 ( int )					  
							      28 LOAD_CONST 2 ( 10 )					    28 LOAD_FAST 0 ( no )					  
							      30 BINARY_TRUE_DIVIDE					    30 LOAD_CONST 4 ( 10 )					  
							      32 CALL_FUNCTION 1					    32 CALL_FUNCTION 2						  
							      34 CALL_FUNCTION 1					    34 BINARY_MULTIPLY						  
							      36 BINARY_ADD						    36 BINARY_SUBTRACT						  
							      38 RETURN_VALUE NEW_LINE					    38 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
def addOne ( x ) :					      Disassembly of <code object addOne at 0x7f33e2649a50, file "< Disassembly of <code object addOne at 0x7f2b01639660, file "< error : /bin/bash: line 1: 11714 Segmentation faul
    m = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    while ( x & m ) :					      2 STORE_FAST 1 ( m )					    2 STORE_FAST 1 ( m )					  ataset/bin/python XLM/dis_script.py --script_path
	x = x ^ m					      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	m <<= 1						      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 SETUP_LOOP 26 ( to 32 )					  24/eval_scripts/python_sa-dis_sa.valid/ADD_1_TO_A_
    x = x ^ m						      >> 6 LOAD_FAST 0 ( x )					    6 LOAD_FAST 0 ( x )						  GIVEN_NUMBER.dis
    return x						      8 LOAD_FAST 1 ( m )					    8 LOAD_CONST 2 ( 0 )					  
							      10 BINARY_AND						    10 COMPARE_OP 1 ( <= )					  
							      12 POP_JUMP_IF_FALSE 32					    12 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      4 14 LOAD_FAST 0 ( x )					    4 14 LOAD_FAST 1 ( m )					  
							      16 LOAD_FAST 1 ( m )					    16 LOAD_GLOBAL 0 ( x )					  
							      18 BINARY_XOR						    18 COMPARE_OP 1 ( <= )					  
							      20 STORE_FAST 0 ( x )					    20 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      5 22 LOAD_FAST 1 ( m )					    5 22 LOAD_FAST 1 ( m )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_GLOBAL 1 ( m )					  
							      26 INPLACE_LSHIFT						    26 COMPARE_OP 1 ( <= )					  
							      28 STORE_FAST 1 ( m )					    28 POP_JUMP_IF_FALSE 30					  
							      30 JUMP_ABSOLUTE 6					    								  
							      >> 32 POP_BLOCK						    6 >> 30 LOAD_FAST 1 ( m )					  
							      								    32 LOAD_GLOBAL 0 ( x )					  
							      6 >> 34 LOAD_FAST 0 ( x )					    34 COMPARE_OP 1 ( <= )					  
							      36 LOAD_FAST 1 ( m )					    36 POP_JUMP_IF_FALSE 48					  
							      38 BINARY_XOR						    								  
							      40 STORE_FAST 0 ( x )					    7 38 LOAD_FAST 1 ( m )					  
							      								    40 LOAD_GLOBAL 0 ( x )					  
							      7 42 LOAD_FAST 0 ( x )					    42 COMPARE_OP 1 ( <= )					  
							      44 RETURN_VALUE NEW_LINE					    44 POP_JUMP_IF_FALSE 48					  
							      								    46 JUMP_FORWARD 2 ( to 50 )					  
							      								    >> 48 LOAD_FAST 1 ( m )					  
							      								    >> 50 LOAD_GLOBAL 0 ( x )					  
							      								    52 COMPARE_OP 1 ( <= )					  
							      								    54 POP_JUMP_IF_FALSE 60					  
							      								    								  
							      								    8 56 LOAD_FAST 1 ( m )					  
							      								    58 LOAD_GLOBAL 0 ( x )					  
							      								    60 COMPARE_OP 1 ( <= )					  
							      								    62 POP_JUMP_IF_FALSE 68					  
							      								    								  
							      								    9 64 LOAD_FAST 1 ( m )					  
							      								    66 LOAD_GLOBAL 0 ( x )					  
							      								    68 COMPARE_OP 1 ( <= )					  
							      								    70 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      								    10 72 LOAD_FAST 1 ( m )					  
							      								    74 LOAD_GLOBAL 0 ( x )					  
							      								    76 COMPARE_OP 1 ( <= )					  
							      								    78 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      								    11 80 LOAD_FAST 1 ( m )					  
							      								    82 LOAD_GLOBAL 0 ( x )					  
							      								    84 COMPARE_OP 1 ( <= )					  
							      								    86 POP_JUMP_IF_FALSE 98					  
							      								    								  
							      								    12 88 LOAD_FAST 1 ( m )					  
							      								    90 LOAD_GLOBAL 0 ( x )					  
							      								    92 COMPARE_OP 1 ( <= )					  
							      								    94 POP_JUMP_IF_FALSE 98					  
							      								    								  
							      								    13 96 LOAD_FAST 1 ( m )					  
							      								    98 LOAD_GLOBAL 0 ( x )					  
							      								    100 COMPARE_OP 1 ( <= )					  
							      								    102 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    14 104 LOAD_FAST 1 ( m )					  
							      								    106 LOAD_GLOBAL 0 ( x )					  
							      								    108 COMPARE_OP 1 ( <= )					  
							      								    110 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    15 112 LOAD_FAST 1 ( m )					  
							      								    114 LOAD_GLOBAL 0 ( x )					  
							      								    116 COMPARE_OP 1 ( <= )					  
							      								    118 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    16 120 LOAD_FAST 1 ( m )					  
							      								    122 LOAD_GLOBAL 0 ( x )					  
							      								    124 COMPARE_OP 1 ( <= )					  
							      								    126 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    17 128 LOAD_FAST 1 ( m )					  
							      								    130 LOAD_GLOBAL 0 ( x )					  
							      								    132 LOAD_FAST 1 ( m )					  
							      								    134 BINARY_SUBTRACT						  
							      								    136 COMPARE_OP 1 ( <= )					  
							      								    138 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    20 140 LOAD_FAST 1 ( m )					  
							      								    142 RETURN_VALUE						  
							      								    >> 144 LOAD_CONST 0 ( None )				  
							      								    146 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
def Add ( x , y ) :					      Disassembly of <code object Add at 0x7f33e2653ed0, file "<dis Disassembly of <code object Add at 0x7f2b01639660, file "<dis failure : #Results: 0, 10
    while ( y != 0 ) :					      2 0 SETUP_LOOP 36 ( to 38 )				    2 0 SETUP_LOOP 26 ( to 28 )					  
	carry = x & y					      >> 2 LOAD_FAST 1 ( y )					    2 LOAD_FAST 0 ( x )						  
	x = x ^ y					      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
	y = carry << 1					      6 COMPARE_OP 3 ( != )					    6 COMPARE_OP 3 ( != )					  
    return x						      8 POP_JUMP_IF_FALSE 36					    8 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      3 10 LOAD_FAST 0 ( x )					    3 10 LOAD_FAST 0 ( x )					  
							      12 LOAD_FAST 1 ( y )					    12 LOAD_FAST 1 ( y )					  
							      14 BINARY_AND						    14 BINARY_MODULO						  
							      16 STORE_FAST 2 ( carry )					    16 STORE_FAST 2 ( carry )					  
							      								    								  
							      4 18 LOAD_FAST 0 ( x )					    4 18 LOAD_FAST 2 ( carry )					  
							      20 LOAD_FAST 1 ( y )					    20 LOAD_FAST 1 ( y )					  
							      22 BINARY_XOR						    22 BINARY_SUBTRACT						  
							      24 STORE_FAST 0 ( x )					    24 STORE_FAST 2 ( carry )					  
							      								    								  
							      5 26 LOAD_FAST 2 ( carry )				    5 >> 26 LOAD_FAST 2 ( carry )				  
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_FAST 1 ( y )					  
							      30 BINARY_LSHIFT						    30 BINARY_SUBTRACT						  
							      32 STORE_FAST 1 ( y )					    32 LOAD_FAST 2 ( carry )					  
							      34 JUMP_ABSOLUTE 2					    34 BINARY_SUBTRACT						  
							      >> 36 POP_BLOCK						    36 RETURN_VALUE NEW_LINE					  
							      								    								  
							      6 >> 38 LOAD_FAST 0 ( x )					    								  
							      40 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
def findSum ( N , K ) :					      Disassembly of <code object findSum at 0x7f33e2649a50, file " Disassembly of <code object findSum at 0x7f2b01639660, file " error : Traceback (most recent call last):   File
    ans = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 1 , N + 1 ) :			      2 STORE_FAST 2 ( ans )					    2 STORE_FAST 2 ( ans )					  (item)   File "main.py", line 31, in <module>	  Fi
	ans += ( i % K ) ;				      								    								  le "<dis>", line 2, in findSum TypeError: 'int' ob
    return ans ;					      3 4 SETUP_LOOP 34 ( to 40 )				    3 4 SETUP_LOOP 64 ( to 66 )					  ject is not subscriptable
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( N )					    10 LOAD_FAST 0 ( N )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 16 ( to 38 )				    >> 20 FOR_ITER 48 ( to 64 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( ans )					    4 24 LOAD_FAST 2 ( ans )					  
							      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 3 ( i )					  
							      28 LOAD_FAST 1 ( K )					    28 BINARY_SUBSCR						  
							      30 BINARY_MODULO						    30 LOAD_FAST 1 ( K )					  
							      32 INPLACE_ADD						    32 BINARY_SUBTRACT						  
							      34 STORE_FAST 2 ( ans )					    34 LOAD_FAST 1 ( K )					  
							      36 JUMP_ABSOLUTE 20					    36 BINARY_SUBTRACT						  
							      >> 38 POP_BLOCK						    38 LOAD_FAST 2 ( ans )					  
							      								    40 BINARY_SUBTRACT						  
							      5 >> 40 LOAD_FAST 2 ( ans )				    42 BINARY_SUBSCR						  
							      42 RETURN_VALUE NEW_LINE					    44 LOAD_FAST 2 ( ans )					  
							      								    46 LOAD_FAST 3 ( i )					  
							      								    48 BINARY_SUBSCR						  
							      								    50 BINARY_SUBTRACT						  
							      								    52 LOAD_FAST 2 ( ans )					  
							      								    54 LOAD_FAST 3 ( i )					  
							      								    56 BINARY_SUBSCR						  
							      								    58 BINARY_SUBTRACT						  
							      								    60 LOAD_FAST 2 ( ans )					  
							      								    62 BINARY_SUBTRACT						  
							      								    64 LOAD_FAST 2 ( ans )					  
							      								    66 BINARY_SUBTRACT						  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 2 ( ans )					  
							      								    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 3 ( i )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 BINARY_SUBTRACT						  
							      								    80 LOAD_FAST 2 ( ans )					  
							      								    82 BINARY_SUBTRACT						  
							      								    84 STORE_SUBSCR						  
							      								    								  
							      								    5 86 LOAD_FAST 2 ( ans )					  
							      								    88 RETURN_VALUE						  
							      								    >> 90 POP_BLOCK						  
							      								    92 JUMP_ABSOLUTE 20						  
							      								    >> 94 POP_BLOCK						  
							      								    								  
							      								    6 >> 96 LOAD_FAST 2 ( ans )					  
							      								    98 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
def leonardo ( n ) :					      Disassembly of <code object leonardo at 0x7f33e2653f60, file  Disassembly of <code object leonardo at 0x7f2b0163dc90, file  script_not_found : None
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;  4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_FAST 0 ( n )					    								  
							      10 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_GLOBAL 0 ( leonardo )				  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    14 LOAD_FAST 0 ( n )					  
							      18 RETURN_VALUE						    16 LOAD_CONST 2 ( 1 )					  
							      								    18 BINARY_SUBTRACT						  
							      4 >> 20 LOAD_GLOBAL 0 ( leonardo )			    20 CALL_FUNCTION 1						  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 1 ( onondo )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBTRACT						  
							      28 CALL_FUNCTION 1					    28 BINARY_SUBTRACT						  
							      30 LOAD_GLOBAL 0 ( leonardo )				    30 LOAD_FAST 1 ( onondo )					  
							      32 LOAD_FAST 0 ( n )					    32 LOAD_CONST 3 ( ( 'endenddo_do_do_do_do_do_do_do_do_do_do_d 
							      34 LOAD_CONST 3 ( 2 )					    36COMPARE_OP6( in )						  
							      36 BINARY_SUBTRACT					    38 POP_JUMP_IF_FALSE 48					  
							      38 CALL_FUNCTION 1					    40 LOAD_FAST 0 ( n )					  
							      40 BINARY_ADD						    42 LOAD_CONST 1 ( 0 )					  
							      42 LOAD_CONST 2 ( 1 )					    44 BINARY_SUBSCR						  
							      44 BINARY_ADD						    46 LOAD_FAST 1 ( onondo )					  
							      46 RETURN_VALUE NEW_LINE					    48 LOAD_CONST 2 ( 1 )					  
							      								    50 BINARY_SUBTRACT						  
							      								    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 1 ( onondo )					  
							      								    56 LOAD_CONST 2 ( 1 )					  
							      								    58 BINARY_SUBTRACT						  
							      								    60 BINARY_SUBSCR						  
							      								    62 BINARY_SUBTRACT						  
							      								    64 LOAD_FAST 1 ( onondo )					  
							      								    66 LOAD_CONST 2 ( 1 )					  
							      								    68 BINARY_SUBTRACT						  
							      								    70 BINARY_SUBSCR						  
							      								    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 1 ( onondo )					  
							      								    76 LOAD_CONST 2 ( 1 )					  
							      								    78 BINARY_SUBTRACT						  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 1 ( onondo )					  
							      								    84 LOAD_CONST 2 ( 1 )					  
							      								    86 BINARY_SUBTRACT						  
							      								    88 BINARY_SUBSCR						  
							      								    90 BINARY_SUBTRACT						  
							      								    92 LOAD_FAST 1 ( onondo )					  
							      								    94 LOAD_CONST 2 ( 1 )					  
							      								    96 BINARY_SUBTRACT						  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 1 ( onondo )					  
							      								    102 LOAD_CONST 2 ( 1 )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 BINARY_SUBSCR						  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_FAST 1 ( onondo )					  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 BINARY_SUBTRACT						  
							      								    116 BINARY_SUBSCR						  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_FAST 1 ( onondo )					  
							      								    122 LOAD_CONST 2 ( 1 )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 COMPARE_OP 4 ( > )					  
							      								    128 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    5 130 LOAD_FAST 1 ( onondo )				  
							      								    132 RETURN_VALUE						  
							      								    								  
							      								    6 >> 134 LOAD_FAST 1 ( onondo )				  
							      								    136 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e2653f60, file " Disassembly of <code object findSum at 0x7f2b01639660, file " script_not_found : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  
	sum += i * ( n - i )				      								    								  
    return 2 * sum					      3 4 SETUP_LOOP 32 ( to 38 )				    3 4 SETUP_LOOP 26 ( to 32 )					  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 20 ( to 36 )				    >> 14 FOR_ITER 18 ( to 30 )					  
							      16 STORE_FAST 2 ( i )					    16 STORE_FAST 2 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 1 ( sum )					    4 18 LOAD_FAST 1 ( sum )					  
							      20 LOAD_FAST 2 ( i )					    20 LOAD_FAST 2 ( i )					  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_FAST 2 ( i )					    24 BINARY_SUBTRACT						  
							      26 BINARY_SUBTRACT					    26 BINARY_MULTIPLY						  
							      28 BINARY_MULTIPLY					    28 LOAD_FAST 1 ( sum )					  
							      30 INPLACE_ADD						    30 BINARY_SUBTRACT						  
							      32 STORE_FAST 1 ( sum )					    32 LOAD_FAST 2 ( i )					  
							      34 JUMP_ABSOLUTE 14					    34 BINARY_SUBTRACT						  
							      >> 36 POP_BLOCK						    36 BINARY_MULTIPLY						  
							      								    38 LOAD_FAST 1 ( sum )					  
							      5 >> 38 LOAD_CONST 2 ( 2 )				    40 BINARY_SUBTRACT						  
							      40 LOAD_FAST 1 ( sum )					    42 LOAD_FAST 1 ( sum )					  
							      42 BINARY_MULTIPLY					    44 BINARY_SUBTRACT						  
							      44 RETURN_VALUE NEW_LINE					    46 LOAD_FAST 1 ( sum )					  
							      								    48 BINARY_SUBTRACT						  
							      								    50 BINARY_MULTIPLY						  
							      								    52 LOAD_FAST 1 ( sum )					  
							      								    54 BINARY_SUBTRACT						  
							      								    56 LOAD_FAST 1 ( sum )					  
							      								    58 BINARY_SUBTRACT						  
							      								    60 LOAD_FAST 1 ( sum )					  
							      								    62 BINARY_SUBTRACT						  
							      								    64 BINARY_MULTIPLY						  
							      								    66 BINARY_SUBTRACT						  
							      								    68 LOAD_FAST 1 ( sum )					  
							      								    70 BINARY_SUBTRACT						  
							      								    72 LOAD_FAST 1 ( sum )					  
							      								    74 BINARY_SUBTRACT						  
							      								    76 LOAD_FAST 1 ( sum )					  
							      								    78 BINARY_SUBTRACT						  
							      								    80 LOAD_FAST 1 ( sum )					  
							      								    82 BINARY_SUBTRACT						  
							      								    84 BINARY_TRUE_DIVIDE					  
							      								    86 LOAD_FAST 1 ( sum )					  
							      								    88 BINARY_SUBTRACT						  
							      								    90 LOAD_FAST 1 ( sum )					  
							      								    92 BINARY_SUBTRACT						  
							      								    94 LOAD_FAST 1 ( sum )					  
							      								    96 BINARY_SUBTRACT						  
							      								    98 BINARY_MULTIPLY						  
							      								    100 LOAD_FAST 1 ( sum )					  
							      								    102 BINARY_SUBTRACT						  
							      								    104 LOAD_FAST 1 ( sum )					  
							      								    106 BINARY_SUBTRACT						  
							      								    108 LOAD_FAST 1 ( sum )					  
							      								    110 BINARY_SUBTRACT						  
							      								    112 LOAD_FAST 1 ( sum )					  
							      								    114 BINARY_SUBTRACT						  
							      								    116 LOAD_FAST 1 ( sum )					  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_FAST 1 ( sum )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 BINARY_TRUE_DIVIDE					  
							      								    126 BINARY_SUBTRACT						  
							      								    128 LOAD_FAST 1 ( sum )					  
							      								    130 BINARY_SUBTRACT						  
							      								    132 LOAD_FAST 1 ( sum )					  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 1 ( sum )					  
							      								    138 BINARY_SUBTRACT						  
							      								    140 LOAD_FAST 1 ( sum )					  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 1 ( sum )					  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 1 ( sum )					  
							      								    150 BINARY_SUBTRACT						  
							      								    152 BINARY_TRUE_DIVIDE					  
							      								    154 BINARY_SUBTRACT						  
							      								    156 LOAD_FAST 1 ( sum )					  
							      								    158 BINARY_SUBTRACT						  
							      								    160 BINARY_TRUE_DIVIDE					  
							      								    162 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
def findLarger ( arr , n ) :				      Disassembly of <code object findLarger at 0x7f33e2649150, fil Disassembly of <code object findLarger at 0x7f2b0163dc90, fil script_not_found : None
    x = sorted ( arr )					      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  
    for i in range ( n / 2 , n ) :			      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
	print ( x [ i ] ) ,				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
							      6 STORE_FAST 2 ( x )					    6 STORE_FAST 2 ( x )					  
							      								    								  
							      3 8 SETUP_LOOP 36 ( to 46 )				    3 8 SETUP_LOOP 40 ( to 46 )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_CONST 1 ( 2 )					  
							      14 LOAD_CONST 1 ( 2 )					    14 LOAD_CONST 2 ( 2 )					  
							      16 BINARY_TRUE_DIVIDE					    16 LOAD_CONST 3 ( 1 )					  
							      18 LOAD_FAST 1 ( n )					    18 CALL_FUNCTION 3						  
							      20 CALL_FUNCTION 2					    20 GET_ITER							  
							      22 GET_ITER						    >> 22 FOR_ITER 24 ( to 44 )					  
							      >> 24 FOR_ITER 18 ( to 44 )				    24 STORE_FAST 3 ( i )					  
							      26 STORE_FAST 3 ( i )					    								  
							      								    4 26 LOAD_FAST 2 ( x )					  
							      4 28 LOAD_GLOBAL 2 ( print )				    28 LOAD_FAST 3 ( i )					  
							      30 LOAD_FAST 2 ( x )					    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 1 ( n )					  
							      34 BINARY_SUBSCR						    34 COMPARE_OP 2 ( == )					  
							      36 CALL_FUNCTION 1					    36 POP_JUMP_IF_FALSE 22					  
							      38 BUILD_TUPLE 1						    								  
							      40 POP_TOP						    5 38 LOAD_FAST 2 ( x )					  
							      42 JUMP_ABSOLUTE 24					    40 LOAD_FAST 3 ( i )					  
							      >> 44 POP_BLOCK						    42 BINARY_SUBSCR						  
							      >> 46 LOAD_CONST 0 ( None )				    44 LOAD_FAST 1 ( n )					  
							      48 RETURN_VALUE NEW_LINE					    46 BINARY_SUBSCR						  
							      								    48 LOAD_FAST 1 ( n )					  
							      								    50 BINARY_SUBSCR						  
							      								    52 LOAD_FAST 1 ( n )					  
							      								    54 BINARY_SUBSCR						  
							      								    56 LOAD_FAST 1 ( n )					  
							      								    58 BINARY_SUBSCR						  
							      								    60 LOAD_FAST 1 ( n )					  
							      								    62 BINARY_SUBSCR						  
							      								    64 LOAD_FAST 1 ( n )					  
							      								    66 BINARY_SUBSCR						  
							      								    68 LOAD_FAST 1 ( n )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 LOAD_FAST 1 ( n )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 1 ( n )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 1 ( n )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 1 ( n )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 1 ( n )					  
							      								    90 STORE_SUBSCR						  
							      								    								  
							      								    6 92 LOAD_FAST 2 ( x )					  
							      								    94 LOAD_FAST 3 ( i )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 2 ( x )					  
							      								    100 LOAD_FAST 3 ( i )					  
							      								    102 STORE_SUBSCR						  
							      								    104 JUMP_ABSOLUTE 22					  
							      								    >> 106 POP_BLOCK						  
							      								    >> 108 JUMP_ABSOLUTE 22					  
							      								    >> 110 POP_BLOCK						  
							      								    								  
							      								    7 >> 112 LOAD_FAST 2 ( x )					  
							      								    114 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
def nswp ( n ) :					      Disassembly of <code object nswp at 0x7f33e2649a50, file "<di Disassembly of <code object nswp at 0x7f2b01639660, file "<di script_not_found : None
    if n == 0 or n == 1 :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_FAST 0 ( n )					    								  
							      10 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_FAST 0 ( n )					  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    14 LOAD_CONST 1 ( 0 )					  
							      18 RETURN_VALUE						    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 24					  
							      4 >> 20 LOAD_CONST 3 ( 2 )				    								  
							      22 LOAD_GLOBAL 0 ( nswp )					    5 20 LOAD_CONST 2 ( 1 )					  
							      24 LOAD_FAST 0 ( n )					    22 RETURN_VALUE						  
							      26 LOAD_CONST 2 ( 1 )					    								  
							      28 BINARY_SUBTRACT					    6 >> 24 LOAD_FAST 0 ( n )					  
							      30 CALL_FUNCTION 1					    26 LOAD_CONST 1 ( 0 )					  
							      32 BINARY_MULTIPLY					    28 COMPARE_OP 2 ( == )					  
							      34 LOAD_GLOBAL 0 ( nswp )					    30 POP_JUMP_IF_FALSE 36					  
							      36 LOAD_FAST 0 ( n )					    								  
							      38 LOAD_CONST 3 ( 2 )					    7 32 LOAD_CONST 2 ( 1 )					  
							      40 BINARY_SUBTRACT					    34 RETURN_VALUE						  
							      42 CALL_FUNCTION 1					    								  
							      44 BINARY_ADD						    8 >> 36 LOAD_FAST 0 ( n )					  
							      46 RETURN_VALUE NEW_LINE					    38 LOAD_CONST 1 ( 0 )					  
							      								    40 COMPARE_OP 2 ( == )					  
							      								    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      								    9 44 LOAD_CONST 2 ( 1 )					  
							      								    46 RETURN_VALUE						  
							      								    								  
							      								    10 >> 48 LOAD_FAST 0 ( n )					  
							      								    50 LOAD_CONST 1 ( 0 )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      								    54 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      								    11 56 LOAD_CONST 2 ( 1 )					  
							      								    58 RETURN_VALUE						  
							      								    								  
							      								    12 >> 60 LOAD_FAST 0 ( n )					  
							      								    62 LOAD_CONST 1 ( 0 )					  
							      								    64 COMPARE_OP 2 ( == )					  
							      								    66 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      								    13 68 LOAD_CONST 2 ( 1 )					  
							      								    70 RETURN_VALUE						  
							      								    72 LOAD_CONST 0 ( None )					  
							      								    >> 74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
def findExtra ( arr1 , arr2 , n ) :			      Disassembly of <code object findExtra at 0x7f33e2644f60, file Disassembly of <code object findExtra at 0x7f2b0163dc90, file error : Traceback (most recent call last):   File
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 38 ( to 40 )				    2 0 SETUP_LOOP 64 ( to 66 )					  "XLM/dis_script.py", line 60, in <module>	exec
	if ( arr1 [ i ] != arr2 [ i ] ) :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  (item)   File "main.py", line 31, in <module>	  Fi
	    return i					      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in findExtra TypeError: 'list'
    return n						      6 LOAD_FAST 2 ( n )					    6 LOAD_FAST 1 ( arr2 )					   object cannot be interpreted as an integer
							      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
							      10 GET_ITER						    10 GET_ITER							  
							      >> 12 FOR_ITER 24 ( to 38 )				    >> 12 FOR_ITER 48 ( to 64 )					  
							      14 STORE_FAST 3 ( i )					    14 STORE_FAST 2 ( i )					  
							      								    								  
							      3 16 LOAD_FAST 0 ( arr1 )					    3 16 LOAD_FAST 2 ( i )					  
							      18 LOAD_FAST 3 ( i )					    18 LOAD_FAST 0 ( arr1 )					  
							      20 BINARY_SUBSCR						    20 LOAD_FAST 2 ( i )					  
							      22 LOAD_FAST 1 ( arr2 )					    22 BINARY_SUBSCR						  
							      24 LOAD_FAST 3 ( i )					    24 COMPARE_OP 3 ( != )					  
							      26 BINARY_SUBSCR						    26 POP_JUMP_IF_FALSE 12					  
							      28 COMPARE_OP 3 ( != )					    								  
							      30 POP_JUMP_IF_FALSE 12					    4 28 LOAD_FAST 2 ( i )					  
							      								    30 LOAD_FAST 0 ( arr1 )					  
							      4 32 LOAD_FAST 3 ( i )					    32 LOAD_FAST 2 ( i )					  
							      34 RETURN_VALUE						    34 BINARY_SUBSCR						  
							      36 JUMP_ABSOLUTE 12					    36 BINARY_ADD						  
							      >> 38 POP_BLOCK						    38 STORE_FAST 2 ( i )					  
							      								    								  
							      5 >> 40 LOAD_FAST 2 ( n )					    5 40 LOAD_FAST 2 ( i )					  
							      42 RETURN_VALUE NEW_LINE					    42 LOAD_FAST 0 ( arr1 )					  
							      								    44 LOAD_FAST 2 ( i )					  
							      								    46 BINARY_SUBSCR						  
							      								    48 BINARY_ADD						  
							      								    50 STORE_FAST 3 ( n )					  
							      								    								  
							      								    6 52 LOAD_FAST 2 ( i )					  
							      								    54 LOAD_FAST 0 ( arr1 )					  
							      								    56 LOAD_FAST 3 ( n )					  
							      								    58 STORE_SUBSCR						  
							      								    								  
							      								    7 60 LOAD_FAST 2 ( i )					  
							      								    62 LOAD_FAST 0 ( arr1 )					  
							      								    64 LOAD_FAST 3 ( n )					  
							      								    66 STORE_SUBSCR						  
							      								    								  
							      								    8 68 LOAD_FAST 2 ( i )					  
							      								    70 LOAD_FAST 0 ( arr1 )					  
							      								    72 LOAD_FAST 3 ( n )					  
							      								    74 STORE_SUBSCR						  
							      								    76 JUMP_ABSOLUTE 12						  
							      								    >> 78 POP_BLOCK						  
							      								    >> 80 LOAD_CONST 0 ( None )					  
							      								    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
def pythagorean_quadruple ( a , b , c , d ) :		      Disassembly of <code object pythagorean_quadruple at 0x7f33e2 Disassembly of <code object pythagorean_quadruple at 0x7f2b01 error : Traceback (most recent call last):   File
    sum = a * a + b * b + c * c ;			      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 60, in <module>	exec
    if ( d * d == sum ) :				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 1 ( b )						  (item)   File "main.py", line 32, in <module>	  Fi
	return True					      4 BINARY_MULTIPLY						    4 LOAD_FAST 2 ( c )						  le "<dis>", line 2, in pythagorean_quadruple Unbou
    else :						      6 LOAD_FAST 1 ( b )					    6 BINARY_MULTIPLY						  ndLocalError: local variable 'c' referenced before
	return False					      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 3 ( d )						   assignment
							      10 BINARY_MULTIPLY					    10 BINARY_MULTIPLY						  
							      12 BINARY_ADD						    12 LOAD_FAST 4 ( c )					  
							      14 LOAD_FAST 2 ( c )					    14 BINARY_MULTIPLY						  
							      16 LOAD_FAST 2 ( c )					    16 BINARY_ADD						  
							      18 BINARY_MULTIPLY					    18 STORE_FAST 5 ( a )					  
							      20 BINARY_ADD						    								  
							      22 STORE_FAST 4 ( sum )					    3 20 LOAD_FAST 5 ( a )					  
							      								    22 LOAD_FAST 1 ( b )					  
							      3 24 LOAD_FAST 3 ( d )					    24 BINARY_MULTIPLY						  
							      26 LOAD_FAST 3 ( d )					    26 LOAD_FAST 2 ( c )					  
							      28 BINARY_MULTIPLY					    28 BINARY_MULTIPLY						  
							      30 LOAD_FAST 4 ( sum )					    30 LOAD_FAST 4 ( c )					  
							      32 COMPARE_OP 2 ( == )					    32 BINARY_MULTIPLY						  
							      34 POP_JUMP_IF_FALSE 40					    34 BINARY_ADD						  
							      								    36 STORE_FAST 6 ( b )					  
							      4 36 LOAD_CONST 1 ( True )				    								  
							      38 RETURN_VALUE						    4 38 LOAD_FAST 6 ( b )					  
							      								    40 LOAD_FAST 5 ( a )					  
							      6 >> 40 LOAD_CONST 2 ( False )				    42 BINARY_MULTIPLY						  
							      42 RETURN_VALUE						    44 LOAD_FAST 6 ( b )					  
							      44 LOAD_CONST 0 ( None )					    46 LOAD_FAST 2 ( c )					  
							      46 RETURN_VALUE NEW_LINE					    48 BINARY_MULTIPLY						  
							      								    50 LOAD_FAST 4 ( c )					  
							      								    52 BINARY_MULTIPLY						  
							      								    54 BINARY_ADD						  
							      								    56 LOAD_FAST 6 ( b )					  
							      								    58 BINARY_MULTIPLY						  
							      								    60 LOAD_FAST 6 ( b )					  
							      								    62 BINARY_MULTIPLY						  
							      								    64 BINARY_ADD						  
							      								    66 LOAD_FAST 5 ( a )					  
							      								    68 LOAD_FAST 6 ( b )					  
							      								    70 BINARY_MULTIPLY						  
							      								    72 BINARY_ADD						  
							      								    74 LOAD_FAST 6 ( b )					  
							      								    76 BINARY_MULTIPLY						  
							      								    78 BINARY_ADD						  
							      								    80 LOAD_FAST 5 ( a )					  
							      								    82 LOAD_FAST 6 ( b )					  
							      								    84 BINARY_MULTIPLY						  
							      								    86 BINARY_ADD						  
							      								    88 LOAD_FAST 7 ( c )					  
							      								    90 BINARY_MULTIPLY						  
							      								    92 BINARY_ADD						  
							      								    94 LOAD_FAST 6 ( b )					  
							      								    96 BINARY_MULTIPLY						  
							      								    98 BINARY_ADD						  
							      								    100 STORE_FAST 7 ( c )					  
							      								    								  
							      								    5 102 LOAD_FAST 7 ( c )					  
							      								    104 LOAD_FAST 7 ( c )					  
							      								    106 LOAD_FAST 7 ( c )					  
							      								    108 BINARY_MULTIPLY						  
							      								    110 BINARY_ADD						  
							      								    112 LOAD_FAST 7 ( c )					  
							      								    114 LOAD_FAST 7 ( c )					  
							      								    116 BINARY_MULTIPLY						  
							      								    118 BINARY_ADD						  
							      								    120 LOAD_FAST 6 ( b )					  
							      								    122 LOAD_FAST 7 ( c )					  
							      								    124 BINARY_MULTIPLY						  
							      								    126 BINARY_ADD						  
							      								    128 LOAD_FAST 6 ( b )					  
							      								    130 BINARY_ADD						  
							      								    132 LOAD_FAST 7 ( c )					  
							      								    134 BINARY_ADD						  
							      								    136 LOAD_FAST 6 ( b )					  
							      								    138 BINARY_ADD						  
							      								    140 LOAD_FAST 7 ( c )					  
							      								    142 BINARY_ADD						  
							      								    144 LOAD_FAST 6 ( b )					  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_FAST 7 ( c )					  
							      								    150 BINARY_ADD						  
							      								    152 LOAD_FAST 6 ( b )					  
							      								    154 BINARY_ADD						  
							      								    156 LOAD_FAST 7 ( c )					  
							      								    158 BINARY_ADD						  
							      								    160 LOAD_CONST 1 ( ( 'a' , 'b' ) )				  
							      								    158 BUILD_CONST_KEY_MAP 3					  
							      								    160 BINARY_ADD						  
							      								    162 STORE_FAST 8 ( c )					  
							      								    								  
							      								    6 164 LOAD_FAST 8 ( c )					  
							      								    166 LOAD_FAST 8 ( c )					  
							      								    168 LOAD_FAST 8 ( c )					  
							      								    170 BINARY_ADD						  
							      								    172 LOAD_FAST 8 ( c )					  
							      								    174 BINARY_ADD						  
							      								    176 BUILD_TUPLE 2						  
							      								    178 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS      PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PR<unk> CT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
def isProduct ( arr , n , x ) :				      Disassembly of <code object isProduct at 0x7f33e26494b0, file Disassembly of <code object isProduct at 0x7f2b0163dc90, file script_not_found : None
    for i in arr :					      2 0 SETUP_LOOP 42 ( to 44 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	for j in arr :					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
	    if i * j == x :				      4 GET_ITER						    4 GET_ITER							  
		return True				      >> 6 FOR_ITER 34 ( to 42 )				    >> 6 FOR_ITER 56 ( to 64 )					  
    return False					      8 STORE_FAST 3 ( i )					    8 STORE_FAST 2 ( i )					  
							      								    								  
							      3 10 SETUP_LOOP 28 ( to 40 )				    3 10 SETUP_LOOP 48 ( to 62 )				  
							      12 LOAD_FAST 0 ( arr )					    12 LOAD_FAST 1 ( n )					  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 20 ( to 38 )				    >> 16 FOR_ITER 40 ( to 60 )					  
							      18 STORE_FAST 4 ( j )					    18 STORE_FAST 3 ( j )					  
							      								    								  
							      4 20 LOAD_FAST 3 ( i )					    4 20 LOAD_FAST 2 ( i )					  
							      22 LOAD_FAST 4 ( j )					    22 LOAD_FAST 3 ( j )					  
							      24 BINARY_MULTIPLY					    24 COMPARE_OP 2 ( == )					  
							      26 LOAD_FAST 2 ( x )					    26 POP_JUMP_IF_FALSE 40					  
							      28 COMPARE_OP 2 ( == )					    								  
							      30 POP_JUMP_IF_FALSE 16					    5 28 JUMP_ABSOLUTE 16					  
							      								    								  
							      5 32 LOAD_CONST 1 ( True )				    6 >> 30 LOAD_FAST 2 ( i )					  
							      34 RETURN_VALUE						    32 LOAD_FAST 3 ( j )					  
							      36 JUMP_ABSOLUTE 16					    34 COMPARE_OP 2 ( == )					  
							      >> 38 POP_BLOCK						    36 POP_JUMP_IF_FALSE 16					  
							      >> 40 JUMP_ABSOLUTE 6					    								  
							      >> 42 POP_BLOCK						    7 38 JUMP_ABSOLUTE 16					  
							      								    								  
							      6 >> 44 LOAD_CONST 2 ( False )				    8 >> 40 LOAD_FAST 2 ( i )					  
							      46 RETURN_VALUE NEW_LINE					    42 LOAD_FAST 3 ( j )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      								    46 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    9 48 LOAD_CONST 1 ( True )					  
							      								    50 RETURN_VALUE						  
							      								    								  
							      								    10 >> 52 LOAD_CONST 2 ( False )				  
							      								    54 RETURN_VALUE						  
							      								    56 JUMP_ABSOLUTE 16						  
							      								    >> 58 POP_BLOCK						  
							      								    								  
							      								    11 60 LOAD_CONST 2 ( False )				  
							      								    62 RETURN_VALUE						  
							      								    >> 64 LOAD_CONST 0 ( None )					  
							      								    66 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
def first ( str ) :					      Disassembly of <code object first at 0x7f33e2644f60, file "<d Disassembly of <code object first at 0x7f2b0163dc90, file "<d error : Traceback (most recent call last):   File
    for i in range ( 0 , len ( str ) ) :		      2 0 SETUP_LOOP 42 ( to 44 )				    2 0 SETUP_LOOP 76 ( to 78 )					  "XLM/dis_script.py", line 60, in <module>	exec
	if ( str [ i ].istitle ( ) ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  (item)   File "main.py", line 31, in <module>	  Fi
	    return str [ i ]				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in first TypeError: 'range_ite
    return 0						      6 LOAD_GLOBAL 1 ( len )					    6 LOAD_GLOBAL 1 ( len )					  rator' object is not callable
							      8 LOAD_FAST 0 ( str )					    8 LOAD_FAST 0 ( str )					  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 24 ( to 42 )				    >> 16 FOR_ITER 54 ( to 76 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 1 ( i )					  
							      								    								  
							      3 20 LOAD_FAST 0 ( str )					    3 20 LOAD_GLOBAL 2 ( str )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 0 ( str )					  
							      24 BINARY_SUBSCR						    24 CALL_FUNCTION 1						  
							      26 LOAD_METHOD 2 ( istitle )				    26 LOAD_METHOD 3 ( istitle )				  
							      28 CALL_METHOD 0						    28 CALL_METHOD 0						  
							      30 POP_JUMP_IF_FALSE 16					    30 CALL_FUNCTION 1						  
							      								    32 STORE_FAST 2 ( i )					  
							      4 32 LOAD_FAST 0 ( str )					    								  
							      34 LOAD_FAST 1 ( i )					    4 34 LOAD_FAST 0 ( str )					  
							      36 BINARY_SUBSCR						    36 LOAD_FAST 1 ( i )					  
							      38 RETURN_VALUE						    38 BINARY_SUBSCR						  
							      40 JUMP_ABSOLUTE 16					    40 LOAD_METHOD 4 ( strip )					  
							      >> 42 POP_BLOCK						    42 CALL_METHOD 0						  
							      								    44 COMPARE_OP 6 ( in )					  
							      5 >> 44 LOAD_CONST 1 ( 0 )				    46 POP_JUMP_IF_FALSE 16					  
							      46 RETURN_VALUE NEW_LINE					    								  
							      								    5 48 LOAD_FAST 0 ( str )					  
							      								    50 LOAD_FAST 1 ( i )					  
							      								    52 BINARY_SUBSCR						  
							      								    54 LOAD_METHOD 5 ( strip )					  
							      								    56 CALL_METHOD 0						  
							      								    58 STORE_FAST 1 ( i )					  
							      								    60 JUMP_ABSOLUTE 16						  
							      								    >> 62 POP_BLOCK						  
							      								    								  
							      								    6 >> 64 LOAD_CONST 2 ( '' )					  
							      								    66 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
def divisorSum ( n ) :					      Disassembly of <code object divisorSum at 0x7f33e26494b0, fil Disassembly of <code object divisorSum at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  (item)   File "main.py", line 31, in <module>	  Fi
	sum += int ( n / i ) * i			      								    								  le "<dis>", line 2, in divisorSum ValueError: int(
    return int ( sum )					      3 4 SETUP_LOOP 42 ( to 48 )				    3 4 SETUP_LOOP 64 ( to 76 )					  ) base must be >= 2 and <= 36, or 0
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 24 ( to 46 )				    >> 20 FOR_ITER 48 ( to 74 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 1 ( sum )					    4 24 LOAD_GLOBAL 1 ( int )					  
							      26 LOAD_GLOBAL 1 ( int )					    26 LOAD_FAST 2 ( i )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_FAST 2 ( i )					    30 BINARY_ADD						  
							      32 BINARY_TRUE_DIVIDE					    32 LOAD_FAST 1 ( sum )					  
							      34 CALL_FUNCTION 1					    34 LOAD_CONST 2 ( 1 )					  
							      36 LOAD_FAST 2 ( i )					    36 BINARY_ADD						  
							      38 BINARY_MULTIPLY					    38 CALL_FUNCTION 2						  
							      40 INPLACE_ADD						    40 STORE_FAST 1 ( sum )					  
							      42 STORE_FAST 1 ( sum )					    								  
							      44 JUMP_ABSOLUTE 20					    5 42 LOAD_FAST 1 ( sum )					  
							      >> 46 POP_BLOCK						    44 LOAD_FAST 1 ( sum )					  
							      								    46 LOAD_FAST 0 ( n )					  
							      5 >> 48 LOAD_GLOBAL 1 ( int )				    48 BINARY_MULTIPLY						  
							      50 LOAD_FAST 1 ( sum )					    50 LOAD_FAST 1 ( sum )					  
							      52 CALL_FUNCTION 1					    52 LOAD_FAST 2 ( i )					  
							      54 RETURN_VALUE NEW_LINE					    54 BINARY_MULTIPLY						  
							      								    56 BINARY_SUBTRACT						  
							      								    58 BINARY_MULTIPLY						  
							      								    60 LOAD_FAST 1 ( sum )					  
							      								    62 LOAD_FAST 0 ( n )					  
							      								    64 BINARY_MULTIPLY						  
							      								    66 LOAD_FAST 1 ( sum )					  
							      								    68 LOAD_FAST 2 ( i )					  
							      								    70 BINARY_MULTIPLY						  
							      								    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 1 ( sum )					  
							      								    76 LOAD_FAST 2 ( i )					  
							      								    78 BINARY_MULTIPLY						  
							      								    80 BINARY_SUBTRACT						  
							      								    82 LOAD_FAST 1 ( sum )					  
							      								    84 LOAD_FAST 2 ( i )					  
							      								    86 BINARY_MULTIPLY						  
							      								    88 BINARY_SUBTRACT						  
							      								    90 LOAD_FAST 1 ( sum )					  
							      								    92 LOAD_FAST 2 ( i )					  
							      								    94 BINARY_MULTIPLY						  
							      								    96 BINARY_SUBTRACT						  
							      								    98 LOAD_FAST 1 ( sum )					  
							      								    100 LOAD_FAST 2 ( i )					  
							      								    102 BINARY_MULTIPLY						  
							      								    104 BINARY_SUBTRACT						  
							      								    106 LOAD_FAST 1 ( sum )					  
							      								    108 LOAD_FAST 2 ( i )					  
							      								    110 LOAD_FAST 2 ( i )					  
							      								    112 STORE_SUBSCR						  
							      								    								  
							      								    6 114 LOAD_FAST 1 ( sum )					  
							      								    116 RETURN_VALUE						  
							      								    >> 118 JUMP_ABSOLUTE 20					  
							      								    >> 120 POP_BLOCK						  
							      								    								  
							      								    7 >> 122 LOAD_FAST 1 ( sum )				  
							      								    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def myCopy ( s1 , s2 , index ) :			      Disassembly of <code object myCopy at 0x7f33e2653f60, file "< Disassembly of <code object myCopy at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    s2 [ index ] = s1 [ index ] ;			      2 0 LOAD_FAST 0 ( s1 )					    2 0 LOAD_FAST 0 ( s1 )					  "XLM/dis_script.py", line 59, in <module>	for
    if ( index == len ( s1 ) - 1 ) :			      2 LOAD_FAST 2 ( index )					    2 LOAD_FAST 1 ( s2 )					  item in run_dis_script():   File "XLM/dis_script.p
	return ;					      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  y", line 54, in run_dis_script     hyp_co = mco.to
    myCopy ( s1 , s2 , index + 1 ) ;			      6 LOAD_FAST 1 ( s2 )					    6 LOAD_CONST 1 ( 1 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      8 LOAD_FAST 2 ( index )					    8 BINARY_SUBSCR						  assembler.py", line 81, in to_co     co_consts.app
							      10 STORE_SUBSCR						    10 LOAD_CONST 2 ( 0 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      								    12 COMPARE_OP 2 ( == )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      3 12 LOAD_FAST 2 ( index )				    14 POP_JUMP_IF_FALSE 20					  co	 self.co_cellvars, ValueError: code: varname
							      14 LOAD_GLOBAL 0 ( len )					    								  s is too small
							      16 LOAD_FAST 0 ( s1 )					    3 16 LOAD_FAST 1 ( s2 )					  
							      18 CALL_FUNCTION 1					    18 LOAD_CONST 3 ( 1 )					  
							      20 LOAD_CONST 1 ( 1 )					    20 BINARY_SUBSCR						  
							      22 BINARY_SUBTRACT					    22 LOAD_CONST 2 ( 0 )					  
							      24 COMPARE_OP 2 ( == )					    24 COMPARE_OP 2 ( == )					  
							      26 POP_JUMP_IF_FALSE 32					    26 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      4 28 LOAD_CONST 0 ( None )				    4 28 LOAD_CONST 4 ( 0 )					  
							      30 RETURN_VALUE						    30 RETURN_VALUE						  
							      								    								  
							      5 >> 32 LOAD_GLOBAL 1 ( myCopy )				    5 >> 32 LOAD_GLOBAL 0 ( myCopy )				  
							      34 LOAD_FAST 0 ( s1 )					    34 LOAD_FAST 1 ( s2 )					  
							      36 LOAD_FAST 1 ( s2 )					    36 LOAD_FAST 1 ( s2 )					  
							      38 LOAD_FAST 2 ( index )					    38 BINARY_SUBSCR						  
							      40 LOAD_CONST 1 ( 1 )					    40 LOAD_CONST 2 ( 0 )					  
							      42 BINARY_ADD						    42 BINARY_SUBSCR						  
							      44 CALL_FUNCTION 3					    44 LOAD_CONST 2 ( 0 )					  
							      46 POP_TOP						    46 BINARY_SUBSCR						  
							      48 LOAD_CONST 0 ( None )					    48 LOAD_CONST 2 ( 0 )					  
							      50 RETURN_VALUE NEW_LINE					    50 COMPARE_OP 2 ( == )					  
							      								    52 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      								    6 54 LOAD_CONST 4 ( 0 )					  
							      								    56 RETURN_VALUE						  
							      								    								  
							      								    7 >> 58 LOAD_GLOBAL 1 ( print )				  
							      								    60 LOAD_FAST 1 ( s2 )					  
							      								    62 CALL_FUNCTION 1						  
							      								    64 POP_TOP							  
							      								    								  
							      								    8 66 LOAD_CONST 5 ( '' )					  
							      								    68 RETURN_VALUE						  
							      								    								  
							      								    10 >> 70 LOAD_GLOBAL 2 ( time )				  
							      								    72 LOAD_METHOD 3 ( sleep )					  
							      								    74 LOAD_CONST 6 ( 1 )					  
							      								    76 CALL_METHOD 1						  
							      								    78 POP_TOP							  
							      								    								  
							      								    11 80 LOAD_CONST 7 ( 0 )					  
							      								    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
def allCharactersSame ( s ) :				      Disassembly of <code object allCharactersSame at 0x7f33e2653e Disassembly of <code object allCharactersSame at 0x7f2b0163dc error : XXX lineno: 2, opcode: 237 Traceback (most
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					   recent call last):	File "XLM/dis_script.py", li
    for i in range ( 1 , n ) :				      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ne 60, in <module>	 exec(item)   File "main.py"
	if s [ i ] != s [ 0 ] :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  , line 32, in <module>   File "<dis>", line 2, in
	    return False				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  allCharactersSame SystemError: unknown opcode
    return True						      								    								  
							      3 8 SETUP_LOOP 38 ( to 48 )				    3 8 SETUP_LOOP 64 ( to 76 )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_CONST 1 ( 1 )					    12 LOAD_CONST 1 ( 1 )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 1 ( n )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 24 ( to 46 )				    >> 20 FOR_ITER 58 ( to 74 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 0 ( s )					    4 24 LOAD_FAST 0 ( s )					  
							      26 LOAD_FAST 2 ( i )					    26 LOAD_FAST 2 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 0 ( s )					    30 LOAD_FAST 0 ( s )					  
							      32 LOAD_CONST 2 ( 0 )					    32 COMPARE_OP 3 ( != )					  
							      34 BINARY_SUBSCR						    34 POP_JUMP_IF_FALSE 20					  
							      36 COMPARE_OP 3 ( != )					    								  
							      38 POP_JUMP_IF_FALSE 20					    5 36 LOAD_CONST 2 ( False )					  
							      								    38 RETURN_VALUE						  
							      5 40 LOAD_CONST 3 ( False )				    								  
							      42 RETURN_VALUE						    6 >> 40 LOAD_CONST 3 ( True )				  
							      44 JUMP_ABSOLUTE 20					    42 RETURN_VALUE						  
							      >> 46 POP_BLOCK						    44 JUMP_ABSOLUTE 20						  
							      								    >> 46 POP_BLOCK						  
							      6 >> 48 LOAD_CONST 4 ( True )				    								  
							      50 RETURN_VALUE NEW_LINE					    7 >> 48 LOAD_CONST 4 ( False )				  
							      								    50 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
def count ( s , c ) :					      Disassembly of <code object count at 0x7f33e2653ed0, file "<d Disassembly of <code object count at 0x7f2b0163dc90, file "<d error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( len ( s ) ) :			      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  (item)   File "main.py", line 32, in <module>	  Fi
	if ( s [ i ] == c ) :				      								    								  le "<dis>", line 2, in count TypeError: 'int' obje
	    res = res + 1				      3 4 SETUP_LOOP 40 ( to 46 )				    3 4 SETUP_LOOP 64 ( to 66 )					  ct is not subscriptable
    return res						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_GLOBAL 1 ( len )					  
							      10 LOAD_FAST 0 ( s )					    10 LOAD_FAST 0 ( s )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 24 ( to 44 )				    >> 18 FOR_ITER 48 ( to 64 )					  
							      20 STORE_FAST 3 ( i )					    20 STORE_FAST 3 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( s )					    4 22 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_FAST 1 ( c )					    28 LOAD_FAST 1 ( c )					  
							      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 18					    32 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      5 34 LOAD_FAST 2 ( res )					    5 34 LOAD_FAST 2 ( res )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 BINARY_ADD						    38 BINARY_SUBSCR						  
							      40 STORE_FAST 2 ( res )					    40 STORE_FAST 2 ( res )					  
							      42 JUMP_ABSOLUTE 18					    								  
							      >> 44 POP_BLOCK						    6 >> 42 LOAD_FAST 2 ( res )					  
							      								    44 LOAD_CONST 2 ( 1 )					  
							      6 >> 46 LOAD_FAST 2 ( res )				    46 BINARY_SUBSCR						  
							      48 RETURN_VALUE NEW_LINE					    48 LOAD_FAST 1 ( c )					  
							      								    50 COMPARE_OP 2 ( == )					  
							      								    52 POP_JUMP_IF_FALSE 56					  
							      								    								  
							      								    7 54 LOAD_FAST 2 ( res )					  
							      								    56 LOAD_CONST 2 ( 1 )					  
							      								    58 BINARY_SUBSCR						  
							      								    60 STORE_FAST 2 ( res )					  
							      								    62 JUMP_ABSOLUTE 18						  
							      								    								  
							      								    8 >> 64 LOAD_FAST 2 ( res )					  
							      								    66 LOAD_CONST 3 ( 2 )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 1 ( c )					  
							      								    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    9 76 LOAD_FAST 2 ( res )					  
							      								    78 LOAD_CONST 4 ( 1 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 1 ( c )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    10 88 LOAD_FAST 2 ( res )					  
							      								    90 LOAD_CONST 5 ( '' )					  
							      								    92 INPLACE_ADD						  
							      								    94 STORE_FAST 2 ( res )					  
							      								    								  
							      								    11 96 LOAD_FAST 2 ( res )					  
							      								    98 LOAD_CONST 6 ( '' )					  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 2 ( res )					  
							      								    								  
							      								    12 104 LOAD_FAST 2 ( res )					  
							      								    106 LOAD_CONST 7 ( '' )					  
							      								    108 INPLACE_ADD						  
							      								    110 STORE_FAST 2 ( res )					  
							      								    								  
							      								    13 112 LOAD_FAST 2 ( res )					  
							      								    114 LOAD_CONST 8 ( '' )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 2 ( res )					  
							      								    								  
							      								    14 120 LOAD_FAST 2 ( res )					  
							      								    122 LOAD_CONST 9 ( 0 )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 2 ( res )					  
							      								    128 JUMP_ABSOLUTE 18					  
							      								    >> 130 POP_BLOCK						  
							      								    								  
							      								    15 >> 132 LOAD_FAST 2 ( res )				  
							      								    134 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
def <<unk>> ways ( n , k ) :				      Disassembly of <code object <<unk>> ways at 0x7f33e2644f60, f Disassembly of <code object esearch_results at 0x7f2b01639660 error : Traceback (most recent call last):   File
    p = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    if ( k % 2 ) :					      2 STORE_FAST 2 ( p )					    2 STORE_FAST 2 ( p )					  (item)   File "main.py", line 31, in <module>	  Fi
	p = - 1						      								    								  le "<dis>", line 2, in numOfways TypeError: 'int'
    return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	      3 4 LOAD_FAST 1 ( k )					    3 4 LOAD_FAST 0 ( n )					  object is not subscriptable
							      6 LOAD_CONST 2 ( 2 )					    6 LOAD_CONST 2 ( 2 )					  
							      8 BINARY_MODULO						    8 BINARY_MODULO						  
							      10 POP_JUMP_IF_FALSE 16					    10 STORE_FAST 3 ( p )					  
							      								    								  
							      4 12 LOAD_CONST 3 ( - 1 )					    4 12 LOAD_FAST 1 ( k )					  
							      14 STORE_FAST 2 ( p )					    14 LOAD_CONST 3 ( - 1 )					  
							      								    16 BINARY_SUBSCR						  
							      5 >> 16 LOAD_GLOBAL 0 ( pow )				    18 STORE_FAST 4 ( p )					  
							      18 LOAD_FAST 0 ( n )					    								  
							      20 LOAD_CONST 1 ( 1 )					    5 20 LOAD_GLOBAL 0 ( pow )					  
							      22 BINARY_SUBTRACT					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_FAST 1 ( k )					    24 LOAD_CONST 4 ( 2 )					  
							      26 CALL_FUNCTION 2					    26 LOAD_FAST 1 ( k )					  
							      28 LOAD_FAST 2 ( p )					    28 BINARY_ADD						  
							      30 LOAD_FAST 0 ( n )					    30 CALL_FUNCTION 2						  
							      32 LOAD_CONST 1 ( 1 )					    32 LOAD_FAST 2 ( p )					  
							      34 BINARY_SUBTRACT					    34 LOAD_FAST 3 ( p )					  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 BINARY_ADD						    38 BINARY_ADD						  
							      40 LOAD_FAST 0 ( n )					    40 LOAD_FAST 4 ( p )					  
							      42 BINARY_TRUE_DIVIDE					    42 LOAD_FAST 3 ( p )					  
							      44 RETURN_VALUE NEW_LINE					    44 BINARY_MULTIPLY						  
							      								    46 BINARY_ADD						  
							      								    48 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
def reverse ( string ) :				      Disassembly of <code object reverse at 0x7f33e26494b0, file " Disassembly of <code object reverse at 0x7f2b0163dc90, file " script_not_found : None
    if len ( string ) == 0 :				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
	return						      2 LOAD_FAST 0 ( string )					    2 LOAD_FAST 0 ( string )					  
    temp = string [ 0 ]					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    reverse ( string [ 1 : ] )				      6 LOAD_CONST 1 ( 0 )					    6 LOAD_CONST 1 ( 0 )					  
    print ( temp , end = '' )				      8 COMPARE_OP 2 ( == )					    8 COMPARE_OP 2 ( == )					  
							      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      3 12 LOAD_CONST 0 ( None )				    3 12 LOAD_FAST 0 ( string )					  
							      14 RETURN_VALUE						    14 LOAD_CONST 2 ( 1 )					  
							      								    16 BINARY_SUBSCR						  
							      4 >> 16 LOAD_FAST 0 ( string )				    18 RETURN_VALUE						  
							      18 LOAD_CONST 1 ( 0 )					    								  
							      20 BINARY_SUBSCR						    4 >> 20 LOAD_GLOBAL 1 ( reverse )				  
							      22 STORE_FAST 1 ( temp )					    22 LOAD_FAST 0 ( string )					  
							      								    24 LOAD_CONST 1 ( 0 )					  
							      5 24 LOAD_GLOBAL 1 ( reverse )				    26 BINARY_SUBSCR						  
							      26 LOAD_FAST 0 ( string )					    28 CALL_FUNCTION 1						  
							      28 LOAD_CONST 2 ( 1 )					    30 RETURN_VALUE NEW_LINE					  
							      30 LOAD_CONST 0 ( None )					    								  
							      32 BUILD_SLICE 2						    								  
							      34 BINARY_SUBSCR						    								  
							      36 CALL_FUNCTION 1					    								  
							      38 POP_TOP						    								  
							      								    								  
							      6 40 LOAD_GLOBAL 2 ( print )				    								  
							      42 LOAD_FAST 1 ( temp )					    								  
							      44 LOAD_CONST 3 ( '' )					    								  
							      46 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      48 CALL_FUNCTION_KW 2					    								  
							      50 POP_TOP						    								  
							      52 LOAD_CONST 0 ( None )					    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
def kLargest ( arr , k ) :				      Disassembly of <code object kLargest at 0x7f33e2653f60, file  Disassembly of <code object kLargest at 0x7f2b0163dc90, file  script_not_found : None
    arr.sort ( reverse = True )				      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    for i in range ( k ) :				      2 LOAD_ATTR 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
	print ( arr [ i ] , end = " " )			      4 LOAD_CONST 1 ( True )					    4 LOAD_CONST 1 ( True )					  
							      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 CALL_METHOD 1						  
							      8 CALL_FUNCTION_KW 1					    8 POP_TOP							  
							      10 POP_TOP						    								  
							      								    3 10 SETUP_LOOP 64 ( to 76 )				  
							      3 12 SETUP_LOOP 32 ( to 46 )				    12 LOAD_GLOBAL 1 ( range )					  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_FAST 1 ( k )					  
							      16 LOAD_FAST 1 ( k )					    16 CALL_FUNCTION 1						  
							      18 CALL_FUNCTION 1					    18 GET_ITER							  
							      20 GET_ITER						    >> 20 FOR_ITER 48 ( to 74 )					  
							      >> 22 FOR_ITER 20 ( to 44 )				    22 STORE_FAST 2 ( i )					  
							      24 STORE_FAST 2 ( i )					    								  
							      								    4 24 LOAD_GLOBAL 2 ( print )				  
							      4 26 LOAD_GLOBAL 2 ( print )				    26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 0 ( arr )					    28 LOAD_FAST 2 ( i )					  
							      30 LOAD_FAST 2 ( i )					    30 BINARY_SUBSCR						  
							      32 BINARY_SUBSCR						    32 CALL_FUNCTION 1						  
							      34 LOAD_CONST 3 ( ' ' )					    34 POP_TOP							  
							      36 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      38 CALL_FUNCTION_KW 2					    5 36 LOAD_GLOBAL 2 ( print )				  
							      40 POP_TOP						    38 LOAD_FAST 0 ( arr )					  
							      42 JUMP_ABSOLUTE 22					    40 LOAD_FAST 2 ( i )					  
							      >> 44 POP_BLOCK						    42 BINARY_SUBSCR						  
							      >> 46 LOAD_CONST 0 ( None )				    44 CALL_FUNCTION 1						  
							      48 RETURN_VALUE NEW_LINE					    46 POP_TOP							  
							      								    48 JUMP_ABSOLUTE 20						  
							      								    >> 50 POP_BLOCK						  
							      								    >> 52 JUMP_ABSOLUTE 20					  
							      								    >> 54 POP_BLOCK						  
							      								    								  
							      								    6 >> 56 LOAD_FAST 0 ( arr )					  
							      								    58 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
def mod ( num , a ) :					      Disassembly of <code object mod at 0x7f33e2649a50, file "<dis Disassembly of <code object mod at 0x7f2b0163dc90, file "<dis script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , len ( num ) ) :		      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  
	res = ( res * 10 + int ( num [ i ] ) ) % a ;	      								    								  
    return res						      3 4 SETUP_LOOP 46 ( to 52 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
							      10 LOAD_GLOBAL 1 ( len )					    10 LOAD_GLOBAL 1 ( len )					  
							      12 LOAD_FAST 0 ( num )					    12 LOAD_FAST 0 ( num )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 28 ( to 50 )				    >> 20 FOR_ITER 48 ( to 64 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( res )					    4 24 LOAD_FAST 2 ( res )					  
							      26 LOAD_CONST 2 ( 10 )					    26 LOAD_CONST 3 ( 1 )					  
							      28 BINARY_MULTIPLY					    28 BINARY_SUBSCR						  
							      30 LOAD_GLOBAL 2 ( int )					    30 LOAD_FAST 1 ( a )					  
							      32 LOAD_FAST 0 ( num )					    32 LOAD_FAST 3 ( i )					  
							      34 LOAD_FAST 3 ( i )					    34 BINARY_SUBSCR						  
							      36 BINARY_SUBSCR						    36 LOAD_FAST 1 ( a )					  
							      38 CALL_FUNCTION 1					    38 LOAD_FAST 3 ( i )					  
							      40 BINARY_ADD						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 1 ( a )					    42 BUILD_TUPLE 3						  
							      44 BINARY_MODULO						    44 BINARY_MODULO						  
							      46 STORE_FAST 2 ( res )					    46 STORE_FAST 4 ( res )					  
							      48 JUMP_ABSOLUTE 20					    								  
							      >> 50 POP_BLOCK						    5 48 LOAD_FAST 2 ( res )					  
							      								    50 LOAD_CONST 4 ( 2 )					  
							      5 >> 52 LOAD_FAST 2 ( res )				    52 BINARY_SUBSCR						  
							      54 RETURN_VALUE NEW_LINE					    54 LOAD_FAST 1 ( a )					  
							      								    56 LOAD_FAST 3 ( i )					  
							      								    58 BINARY_SUBSCR						  
							      								    60 LOAD_FAST 1 ( a )					  
							      								    62 LOAD_FAST 3 ( i )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 BUILD_TUPLE 3						  
							      								    68 RETURN_VALUE						  
							      								    								  
							      								    6 >> 70 LOAD_FAST 2 ( res )					  
							      								    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
def findRoot ( arr , n ) :				      Disassembly of <code object findRoot at 0x7f33e2644930, file  Disassembly of <code object findRoot at 0x7f2b0163dc90, file  script_not_found : None
    root = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( root )					    2 STORE_FAST 2 ( root )					  
	root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	      								    								  
    return root						      3 4 SETUP_LOOP 44 ( to 50 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 32 ( to 48 )				    >> 14 FOR_ITER 48 ( to 64 )					  
							      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 2 ( root )					    4 18 LOAD_FAST 2 ( root )					  
							      20 LOAD_FAST 0 ( arr )					    20 LOAD_FAST 3 ( i )					  
							      22 LOAD_FAST 3 ( i )					    22 BINARY_SUBSCR						  
							      24 BINARY_SUBSCR						    24 LOAD_CONST 2 ( 1 )					  
							      26 LOAD_CONST 1 ( 0 )					    26 BINARY_SUBSCR						  
							      28 BINARY_SUBSCR						    28 LOAD_FAST 3 ( i )					  
							      30 LOAD_FAST 0 ( arr )					    30 LOAD_CONST 2 ( 1 )					  
							      32 LOAD_FAST 3 ( i )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 LOAD_CONST 2 ( 1 )					  
							      36 LOAD_CONST 2 ( 1 )					    36 BINARY_SUBSCR						  
							      38 BINARY_SUBSCR						    38 LOAD_FAST 3 ( i )					  
							      40 BINARY_SUBTRACT					    40 LOAD_CONST 2 ( 1 )					  
							      42 INPLACE_ADD						    42 BINARY_SUBSCR						  
							      44 STORE_FAST 2 ( root )					    44 LOAD_CONST 2 ( 1 )					  
							      46 JUMP_ABSOLUTE 14					    46 BINARY_SUBSCR						  
							      >> 48 POP_BLOCK						    48 LOAD_FAST 3 ( i )					  
							      								    50 LOAD_CONST 2 ( 1 )					  
							      5 >> 50 LOAD_FAST 2 ( root )				    52 BINARY_SUBSCR						  
							      52 RETURN_VALUE NEW_LINE					    54 LOAD_FAST 3 ( i )					  
							      								    56 LOAD_CONST 2 ( 1 )					  
							      								    58 BINARY_SUBSCR						  
							      								    60 LOAD_FAST 3 ( i )					  
							      								    62 LOAD_CONST 2 ( 1 )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 3 ( i )					  
							      								    68 LOAD_CONST 2 ( 1 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 LOAD_FAST 3 ( i )					  
							      								    74 LOAD_CONST 2 ( 1 )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 3 ( i )					  
							      								    80 LOAD_CONST 2 ( 1 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 3 ( i )					  
							      								    86 LOAD_CONST 2 ( 1 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 3 ( i )					  
							      								    92 LOAD_CONST 2 ( 1 )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 3 ( i )					  
							      								    98 LOAD_CONST 2 ( 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 3 ( i )					  
							      								    104 LOAD_CONST 2 ( 1 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 3 ( i )					  
							      								    110 LOAD_CONST 2 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 3 ( i )					  
							      								    116 LOAD_CONST 2 ( 1 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_FAST 3 ( i )					  
							      								    122 LOAD_CONST 2 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_FAST 3 ( i )					  
							      								    128 LOAD_CONST 2 ( 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_FAST 3 ( i )					  
							      								    134 LOAD_CONST 2 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 3 ( i )					  
							      								    140 LOAD_CONST 2 ( 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_FAST 3 ( i )					  
							      								    146 LOAD_CONST 2 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_FAST 3 ( i )					  
							      								    152 LOAD_CONST 2 ( 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 LOAD_FAST 3 ( i )					  
							      								    158 LOAD_CONST 2 ( 1 )					  
							      								    160 STORE_SUBSCR						  
							      								    								  
							      								    4 162 LOAD_FAST 2 ( root )					  
							      								    164 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
def countSetBitsRec ( num ) :				      Disassembly of <code object countSetBitsRec at 0x7f33e2644f60 Disassembly of <code object countSetBitsRec at 0x7f2b01639660 script_not_found : None
    nibble = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    if ( 0 == num ) :					      2 STORE_FAST 1 ( nibble )					    2 STORE_FAST 1 ( unwinding unwinding depth )		  
	return num_to_bits [ 0 ] ;			      								    								  
    nibble = num & 0xf ;				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_FAST 0 ( num )					  
    return num_to_bits [ nibble ] + countSetBitsRec ( num >>  6 LOAD_FAST 0 ( num )					    6 LOAD_CONST 2 ( 0 )					  
							      8 COMPARE_OP 2 ( == )					    8 COMPARE_OP 2 ( == )					  
							      10 POP_JUMP_IF_FALSE 20					    10 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      4 12 LOAD_GLOBAL 0 ( num_to_bits )			    4 12 LOAD_FAST 0 ( num )					  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 3 ( 0x0xf )					  
							      16 BINARY_SUBSCR						    16 BINARY_MODULO						  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      5 >> 20 LOAD_FAST 0 ( num )				    5 >> 20 LOAD_FAST 0 ( num )					  
							      22 LOAD_CONST 2 ( 15 )					    22 LOAD_CONST 4 ( 0x0xf )					  
							      24 BINARY_AND						    24 BINARY_MODULO						  
							      26 STORE_FAST 1 ( nibble )				    26 RETURN_VALUE						  
							      								    28 LOAD_CONST 0 ( None )					  
							      6 28 LOAD_GLOBAL 0 ( num_to_bits )			    30 RETURN_VALUE NEW_LINE					  
							      30 LOAD_FAST 1 ( nibble )					    								  
							      32 BINARY_SUBSCR						    								  
							      34 LOAD_GLOBAL 1 ( countSetBitsRec )			    								  
							      36 LOAD_FAST 0 ( num )					    								  
							      38 LOAD_CONST 3 ( 4 )					    								  
							      40 BINARY_RSHIFT						    								  
							      42 CALL_FUNCTION 1					    								  
							      44 BINARY_ADD						    								  
							      46 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
def calc_Expectation ( a , n ) :			      Disassembly of <code object calc_Expectation at 0x7f33e2649a5 Disassembly of <code object calc_Expectation at 0x7f2b0163dc9 script_not_found : None
    prb = 1 / n						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    sum = 0						      2 LOAD_FAST 1 ( n )					    2 LOAD_FAST 0 ( a )						  
    for i in range ( 0 , n ) :				      4 BINARY_TRUE_DIVIDE					    4 BINARY_MULTIPLY						  
	sum += ( a [ i ] * prb )			      6 STORE_FAST 2 ( prb )					    6 STORE_FAST 1 ( prb )					  
    return float ( sum )				      								    								  
							      3 8 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 1 ( 1 )					  
							      10 STORE_FAST 3 ( sum )					    10 STORE_FAST 2 ( sum )					  
							      								    								  
							      4 12 SETUP_LOOP 34 ( to 48 )				    4 12 SETUP_LOOP 40 ( to 48 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_CONST 2 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( prb )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 20 ( to 46 )				    >> 24 FOR_ITER 28 ( to 46 )					  
							      26 STORE_FAST 4 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 3 ( sum )					    5 28 LOAD_FAST 2 ( sum )					  
							      30 LOAD_FAST 0 ( a )					    30 LOAD_FAST 0 ( a )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 3 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 2 ( prb )					    36 LOAD_FAST 1 ( prb )					  
							      38 BINARY_MULTIPLY					    38 LOAD_FAST 3 ( i )					  
							      40 INPLACE_ADD						    40 BINARY_SUBSCR						  
							      42 STORE_FAST 3 ( sum )					    42 LOAD_FAST 1 ( prb )					  
							      44 JUMP_ABSOLUTE 24					    44 LOAD_FAST 3 ( i )					  
							      >> 46 POP_BLOCK						    46 BINARY_SUBSCR						  
							      								    48 LOAD_FAST 1 ( prb )					  
							      6 >> 48 LOAD_GLOBAL 1 ( float )				    50 LOAD_FAST 3 ( i )					  
							      50 LOAD_FAST 3 ( sum )					    52 BINARY_SUBSCR						  
							      52 CALL_FUNCTION 1					    54 BINARY_SUBTRACT						  
							      54 RETURN_VALUE NEW_LINE					    56 LOAD_FAST 1 ( prb )					  
							      								    58 LOAD_FAST 3 ( i )					  
							      								    60 BINARY_SUBSCR						  
							      								    62 BINARY_SUBTRACT						  
							      								    64 LOAD_FAST 1 ( prb )					  
							      								    66 LOAD_FAST 3 ( i )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 BINARY_SUBTRACT						  
							      								    72 LOAD_FAST 1 ( prb )					  
							      								    74 LOAD_FAST 3 ( i )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 BINARY_SUBTRACT						  
							      								    80 LOAD_FAST 1 ( prb )					  
							      								    82 LOAD_FAST 3 ( i )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 BINARY_SUBTRACT						  
							      								    88 LOAD_FAST 1 ( prb )					  
							      								    90 LOAD_FAST 3 ( i )					  
							      								    92 STORE_SUBSCR						  
							      								    								  
							      								    6 94 LOAD_FAST 2 ( sum )					  
							      								    96 LOAD_FAST 0 ( a )					  
							      								    98 LOAD_FAST 3 ( i )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    7 102 LOAD_FAST 2 ( sum )					  
							      								    104 LOAD_FAST 0 ( a )					  
							      								    106 LOAD_FAST 3 ( i )					  
							      								    108 BINARY_SUBSCR						  
							      								    110 LOAD_FAST 1 ( prb )					  
							      								    112 LOAD_FAST 3 ( i )					  
							      								    114 STORE_SUBSCR						  
							      								    116 JUMP_ABSOLUTE 24					  
							      								    >> 118 POP_BLOCK						  
							      								    								  
							      								    8 >> 120 LOAD_FAST 2 ( sum )				  
							      								    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
def transpose ( A , B ) :				      Disassembly of <code object transpose at 0x7f33e2644930, file Disassembly of <code object transpose at 0x7f2b01639660, file script_not_found : None
    for i in range ( N ) :				      2 0 SETUP_LOOP 54 ( to 56 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	for j in range ( N ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    B [ i ] [ j ] = A [ j ] [ i ]		      4 LOAD_GLOBAL 1 ( N )					    4 LOAD_FAST 0 ( A )						  
							      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
							      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 42 ( to 54 )				    >> 10 FOR_ITER 66 ( to 76 )					  
							      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 SETUP_LOOP 36 ( to 52 )				    3 14 SETUP_LOOP 48 ( to 74 )				  
							      16 LOAD_GLOBAL 0 ( range )				    16 LOAD_GLOBAL 1 ( range )					  
							      18 LOAD_GLOBAL 1 ( N )					    18 LOAD_FAST 0 ( A )					  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 24 ( to 50 )				    >> 24 FOR_ITER 40 ( to 72 )					  
							      26 STORE_FAST 3 ( j )					    26 STORE_FAST 3 ( j )					  
							      								    								  
							      4 28 LOAD_FAST 0 ( A )					    4 28 LOAD_FAST 0 ( A )					  
							      30 LOAD_FAST 3 ( j )					    30 LOAD_FAST 3 ( j )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 2 ( i )					    34 LOAD_FAST 1 ( B )					  
							      36 BINARY_SUBSCR						    36 LOAD_FAST 2 ( i )					  
							      38 LOAD_FAST 1 ( B )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 2 ( i )					    40 LOAD_FAST 1 ( B )					  
							      42 BINARY_SUBSCR						    42 LOAD_FAST 2 ( i )					  
							      44 LOAD_FAST 3 ( j )					    44 BINARY_SUBSCR						  
							      46 STORE_SUBSCR						    46 LOAD_FAST 1 ( B )					  
							      48 JUMP_ABSOLUTE 24					    48 LOAD_FAST 2 ( i )					  
							      >> 50 POP_BLOCK						    50 BINARY_SUBSCR						  
							      >> 52 JUMP_ABSOLUTE 10					    52 LOAD_FAST 1 ( B )					  
							      >> 54 POP_BLOCK						    54 LOAD_FAST 2 ( i )					  
							      >> 56 LOAD_CONST 0 ( None )				    56 BINARY_SUBSCR						  
							      58 RETURN_VALUE NEW_LINE					    58 LOAD_FAST 1 ( B )					  
							      								    60 LOAD_FAST 2 ( i )					  
							      								    62 BINARY_SUBSCR						  
							      								    64 LOAD_FAST 1 ( B )					  
							      								    66 LOAD_FAST 2 ( i )					  
							      								    68 STORE_SUBSCR						  
							      								    70 JUMP_ABSOLUTE 24						  
							      								    >> 72 POP_BLOCK						  
							      								    >> 74 JUMP_ABSOLUTE 10					  
							      								    >> 76 POP_BLOCK						  
							      								    >> 78 LOAD_CONST 0 ( None )					  
							      								    80 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
def numberOfWays ( x ) :				      Disassembly of <code object numberOfWays at 0x7f33e2653ed0, f Disassembly of <code object numberOfWays at 0x7f2b01639660, f script_not_found : None
    if x == 0 or x == 1 :				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    else :						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
							      8 LOAD_FAST 0 ( x )					    								  
							      10 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_GLOBAL 0 ( numberOfys )			  
							      3 >> 16 LOAD_CONST 2 ( 1 )				    14 LOAD_FAST 0 ( x )					  
							      18 RETURN_VALUE						    16 LOAD_CONST 1 ( 0 )					  
							      								    18 BINARY_SUBSCR						  
							      5 >> 20 LOAD_GLOBAL 0 ( numberOfWays )			    20 LOAD_CONST 3 ( 'x' )					  
							      22 LOAD_FAST 0 ( x )					    22 BINARY_SUBSCR						  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 4 ( 'y' )					  
							      26 BINARY_SUBTRACT					    26 BINARY_SUBSCR						  
							      28 CALL_FUNCTION 1					    28 LOAD_CONST 5 ( 'x' )					  
							      30 LOAD_FAST 0 ( x )					    30 BINARY_SUBSCR						  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 6 ( 'y' )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBSCR						  
							      36 LOAD_GLOBAL 0 ( numberOfWays )				    36 LOAD_CONST 7 ( 'y' )					  
							      38 LOAD_FAST 0 ( x )					    38 BINARY_SUBSCR						  
							      40 LOAD_CONST 3 ( 2 )					    40 LOAD_CONST 8 ( 'y' )					  
							      42 BINARY_SUBTRACT					    42 BINARY_SUBSCR						  
							      44 CALL_FUNCTION 1					    44 LOAD_CONST 9 ( 'x' )					  
							      46 BINARY_MULTIPLY					    46 BINARY_SUBSCR						  
							      48 BINARY_ADD						    48 LOAD_CONST 10 ( 'y' )					  
							      50 RETURN_VALUE						    50 COMPARE_OP 2 ( == )					  
							      52 LOAD_CONST 0 ( None )					    52 POP_JUMP_IF_FALSE 84					  
							      54 RETURN_VALUE NEW_LINE					    								  
							      								    5 54 LOAD_CONST 2 ( 1 )					  
							      								    56 RETURN_VALUE						  
							      								    								  
							      								    7 >> 58 LOAD_CONST 2 ( 1 )					  
							      								    60 RETURN_VALUE						  
							      								    62 LOAD_CONST 0 ( None )					  
							      								    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
def getMissingNo ( a , n ) :				      Disassembly of <code object getMissingNo at 0x7f33e2644930, f Disassembly of <code object getMissingNo at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    i , total = 0 , 1					      2 0 LOAD_CONST 1 ( ( 0 , 1 ) )				    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( 2 , n + 2 ) :			      2 UNPACK_SEQUENCE 2					    2 LOAD_CONST 2 ( ( '' , ) )					  item in run_dis_script():   File "XLM/dis_script.p
	total += i					      4 STORE_FAST 2 ( i )					    4 IMPORT_NAME 0 ( numpy )					  y", line 47, in run_dis_script     co_code, co_nlo
	total -= a [ i - 2 ]				      6 STORE_FAST 3 ( total )					    6 IMPORT_FROM 1 ( MissingNo )				  cals, co_varnames, co_names, co_consts, co_linesta
    return total					      								    8 STORE_FAST 2 ( array )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      3 8 SETUP_LOOP 46 ( to 56 )				    10 POP_TOP							  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      10 LOAD_GLOBAL 0 ( range )				    								  n parse     constants[arg] = ast.literal_eval(argr
							      12 LOAD_CONST 2 ( 2 )					    3 12 SETUP_LOOP 26 ( to 36 )				  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      14 LOAD_FAST 1 ( n )					    14 LOAD_GLOBAL 2 ( range )					  ib/python3.7/ast.py", line 91, in literal_eval
							      16 LOAD_CONST 2 ( 2 )					    16 LOAD_CONST 3 ( 2 )					   return _convert(node_or_string)   File "/home/ubu
							      18 BINARY_ADD						    18 LOAD_CONST 4 ( 2 )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      20 CALL_FUNCTION 2					    20 LOAD_CONST 5 ( 3 )					  line 90, in _convert	   return _convert_signed_nu
							      22 GET_ITER						    22 LOAD_CONST 6 ( 4 )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      >> 24 FOR_ITER 28 ( to 54 )				    24 LOAD_CONST 7 ( 5 )					  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      26 STORE_FAST 2 ( i )					    26 LOAD_CONST 8 ( 6 )					  ed_num     return _convert_num(node)	 File "/home
							      								    28 LOAD_CONST 9 ( 8 )					  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      4 28 LOAD_FAST 3 ( total )				    30 LOAD_CONST 10 ( 10 )					  y", line 55, in _convert_num	   raise ValueError(
							      30 LOAD_FAST 2 ( i )					    32 LOAD_CONST 11 ( 12 )					  'malformed node or string: ' + repr(node)) ValueEr
							      32 INPLACE_ADD						    34 LOAD_CONST 12 ( 14 )					  ror: malformed node or string: None
							      34 STORE_FAST 3 ( total )					    36 LOAD_CONST 13 ( 16 )					  
							      								    38 LOAD_CONST 14 ( 18 )					  
							      5 36 LOAD_FAST 3 ( total )				    40 LOAD_CONST 15 ( 20 )					  
							      38 LOAD_FAST 0 ( a )					    42 LOAD_CONST 16 ( 22 )					  
							      40 LOAD_FAST 2 ( i )					    44 LOAD_CONST 17 ( 24 )					  
							      42 LOAD_CONST 2 ( 2 )					    46 LOAD_CONST 17 ( 22 )					  
							      44 BINARY_SUBTRACT					    48 LOAD_CONST 18 ( 23 )					  
							      46 BINARY_SUBSCR						    50 LOAD_CONST 18 ( 23 )					  
							      48 INPLACE_SUBTRACT					    52 LOAD_CONST 19 ( 24 )					  
							      50 STORE_FAST 3 ( total )					    54 LOAD_CONST 20 ( 22 )					  
							      52 JUMP_ABSOLUTE 24					    56 LOAD_CONST 19 ( 24 )					  
							      >> 54 POP_BLOCK						    58 LOAD_CONST 19 ( 23 )					  
							      								    60 LOAD_CONST 19 ( 24 )					  
							      6 >> 56 LOAD_FAST 3 ( total )				    62 LOAD_CONST 20 ( 23 )					  
							      58 RETURN_VALUE NEW_LINE					    64 LOAD_CONST 19 ( 24 )					  
							      								    66 LOAD_CONST 20 ( 22 )					  
							      								    68 LOAD_CONST 19 ( 24 )					  
							      								    70 LOAD_CONST 20 ( 23 )					  
							      								    72 LOAD_CONST 22 ( 23 )					  
							      								    74 LOAD_CONST 21 ( 24 )					  
							      								    76 LOAD_CONST 22 ( 23 )					  
							      								    78 LOAD_CONST 23 ( 24 )					  
							      								    80 LOAD_CONST 23 ( 23 )					  
							      								    82 LOAD_CONST 23 ( 24 )					  
							      								    84 LOAD_CONST 23 ( 23 )					  
							      								    86 LOAD_CONST 22 ( 23 )					  
							      								    88 LOAD_CONST 23 ( 24 )					  
							      								    90 LOAD_CONST 23 ( 24 )					  
							      								    92 LOAD_CONST 23 ( 23 )					  
							      								    94 LOAD_CONST 23 ( 24 )					  
							      								    96 LOAD_CONST 23 ( 23 )					  
							      								    98 LOAD_CONST 23 ( 24 )					  
							      								    100 LOAD_CONST 23 ( 24 )					  
							      								    102 LOAD_CONST 23 ( 23 )					  
							      								    104 LOAD_CONST 24 ( 23 )					  
							      								    106 LOAD_CONST 23 ( 24 )					  
							      								    108 LOAD_CONST 23 ( 23 )					  
							      								    110 LOAD_CONST 22 ( 23 )					  
							      								    112 LOAD_CONST 23 ( 24 )					  
							      								    114 LOAD_CONST 23 ( 23 )					  
							      								    116 LOAD_CONST 23 ( 24 )					  
							      								    118 LOAD_CONST 23 ( 23 )					  
							      								    120 LOAD_CONST 24 ( 24 )					  
							      								    122 LOAD_CONST 23 ( 23 )					  
							      								    124 LOAD_CONST 23 ( 23 )					  
							      								    126 LOAD_CONST 23 ( 23 )					  
							      								    128 LOAD_CONST 24 ( 23 )					  
							      								    130 LOAD_CONST 23 ( 24 )					  
							      								    132 LOAD_CONST 22 ( 23 )					  
							      								    134 LOAD_CONST 23 ( 24 )					  
							      								    136 LOAD_CONST 23 ( 23 )					  
							      								    138 LOAD_CONST 23 ( 23 )					  
							      								    140 LOAD_CONST 24						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
def seiresSum ( n , a ) :				      Disassembly of <code object seiresSum at 0x7f33e2653ed0, file Disassembly of <code object seiresSum at 0x7f2b01639660, file script_not_found : None
    return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [  2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
							      2 LOAD_FAST 1 ( a )					    2 LOAD_FAST 1 ( a )						  
							      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
							      6 BINARY_SUBSCR						    6 BINARY_SUBSCR						  
							      8 LOAD_FAST 1 ( a )					    8 LOAD_FAST 1 ( a )						  
							      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
							      12 BINARY_SUBSCR						    12 BINARY_SUBSCR						  
							      14 BINARY_MULTIPLY					    14 BINARY_SUBTRACT						  
							      16 LOAD_FAST 1 ( a )					    16 BINARY_MULTIPLY						  
							      18 LOAD_CONST 2 ( 2 )					    18 LOAD_FAST 0 ( n )					  
							      20 LOAD_FAST 0 ( n )					    20 LOAD_CONST 1 ( 0 )					  
							      22 BINARY_MULTIPLY					    22 BINARY_SUBSCR						  
							      24 LOAD_CONST 3 ( 1 )					    24 LOAD_FAST 1 ( a )					  
							      26 BINARY_SUBTRACT					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 1 ( a )					    30 BINARY_SUBTRACT						  
							      32 LOAD_CONST 2 ( 2 )					    32 BINARY_MULTIPLY						  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_FAST 0 ( n )					  
							      36 BINARY_MULTIPLY					    36 LOAD_CONST 1 ( 0 )					  
							      38 LOAD_CONST 3 ( 1 )					    38 BINARY_SUBSCR						  
							      40 BINARY_SUBTRACT					    40 BINARY_MULTIPLY						  
							      42 BINARY_SUBSCR						    42 BINARY_SUBTRACT						  
							      44 BINARY_MULTIPLY					    44 LOAD_FAST 0 ( n )					  
							      46 BINARY_SUBTRACT					    46 LOAD_CONST 1 ( 0 )					  
							      48 BINARY_MULTIPLY					    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 2 ( 2 )					    50 BINARY_SUBTRACT						  
							      52 LOAD_FAST 0 ( n )					    52 BINARY_MULTIPLY						  
							      54 BINARY_MULTIPLY					    54 LOAD_FAST 0 ( n )					  
							      56 LOAD_CONST 3 ( 1 )					    56 LOAD_CONST 1 ( 0 )					  
							      58 BINARY_SUBTRACT					    58 BINARY_SUBSCR						  
							      60 BINARY_TRUE_DIVIDE					    60 BINARY_SUBTRACT						  
							      62 RETURN_VALUE NEW_LINE					    62 BINARY_MULTIPLY						  
							      								    64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 1 ( 0 )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 BINARY_SUBTRACT						  
							      								    72 BINARY_MULTIPLY						  
							      								    74 LOAD_FAST 0 ( n )					  
							      								    76 LOAD_CONST 1 ( 0 )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 BINARY_MULTIPLY						  
							      								    82 BINARY_SUBTRACT						  
							      								    84 LOAD_FAST 0 ( n )					  
							      								    86 LOAD_CONST 1 ( 0 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 BINARY_SUBTRACT						  
							      								    92 LOAD_FAST 0 ( n )					  
							      								    94 LOAD_CONST 1 ( 0 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 BINARY_SUBTRACT						  
							      								    100 BINARY_MULTIPLY						  
							      								    102 LOAD_FAST 0 ( n )					  
							      								    104 LOAD_CONST 1 ( 0 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 1 ( a )					  
							      								    110 LOAD_CONST 2 ( 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 BINARY_SUBTRACT						  
							      								    116 BINARY_MULTIPLY						  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 BINARY_SUBTRACT						  
							      								    128 BINARY_MULTIPLY						  
							      								    130 BINARY_SUBTRACT						  
							      								    132 LOAD_FAST 0 ( n )					  
							      								    134 LOAD_CONST 1 ( 0 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 BINARY_SUBTRACT						  
							      								    140 BINARY_MULTIPLY						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 0 ( n )					  
							      								    146 LOAD_CONST 1 ( 0 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 0 ( n )					  
							      								    154 LOAD_CONST 1 ( 0 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 BINARY_SUBTRACT						  
							      								    160 BINARY_MULTIPLY						  
							      								    162 BINARY_SUBTRACT						  
							      								    164 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7f33e2653ed0, f Disassembly of <code object nextPowerOf2 at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    p = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    if ( n and not ( n & ( n - 1 ) ) ) :		      2 STORE_FAST 1 ( p )					    2 STORE_FAST 1 ( p )					  (item)   File "main.py", line 33, in <module>	  Fi
	return n					      								    								  le "<dis>", line 2, in nextPowerOf2 NameError: nam
    while ( p < n ) :					      3 4 LOAD_FAST 0 ( n )					    3 4 LOAD_GLOBAL 0 ( ( ( n )					  e '( ( n' is not defined
	p <<= 1						      6 POP_JUMP_IF_FALSE 24					    6 LOAD_FAST 0 ( n )						  
    return p ;						      8 LOAD_FAST 0 ( n )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 BINARY_SUBTRACT						  
							      12 LOAD_CONST 1 ( 1 )					    12 COMPARE_OP 3 ( != )					  
							      14 BINARY_SUBTRACT					    14 POP_JUMP_IF_FALSE 26					  
							      16 BINARY_AND						    								  
							      18 POP_JUMP_IF_TRUE 24					    4 16 LOAD_FAST 1 ( p )					  
							      								    18 LOAD_CONST 2 ( 1 )					  
							      4 20 LOAD_FAST 0 ( n )					    20 BINARY_SUBTRACT						  
							      22 RETURN_VALUE						    22 STORE_FAST 1 ( p )					  
							      								    24 JUMP_FORWARD 4 ( to 30 )					  
							      5 >> 24 SETUP_LOOP 20 ( to 46 )				    								  
							      >> 26 LOAD_FAST 1 ( p )					    5 >> 26 LOAD_FAST 1 ( p )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_CONST 2 ( 1 )					  
							      30 COMPARE_OP 0 ( < )					    >> 30 BINARY_SUBTRACT					  
							      32 POP_JUMP_IF_FALSE 44					    32 STORE_FAST 1 ( p )					  
							      								    								  
							      6 34 LOAD_FAST 1 ( p )					    6 34 LOAD_FAST 1 ( p )					  
							      36 LOAD_CONST 1 ( 1 )					    36 LOAD_CONST 3 ( 2 )					  
							      38 INPLACE_LSHIFT						    38 BINARY_SUBTRACT						  
							      40 STORE_FAST 1 ( p )					    40 STORE_FAST 1 ( p )					  
							      42 JUMP_ABSOLUTE 26					    								  
							      >> 44 POP_BLOCK						    7 42 LOAD_FAST 1 ( p )					  
							      								    44 LOAD_CONST 4 ( 3 )					  
							      7 >> 46 LOAD_FAST 1 ( p )					    46 BINARY_SUBTRACT						  
							      48 RETURN_VALUE NEW_LINE					    48 STORE_FAST 2 ( p )					  
							      								    								  
							      								    8 50 LOAD_FAST 1 ( p )					  
							      								    52 LOAD_CONST 5 ( 4 )					  
							      								    54 BINARY_SUBTRACT						  
							      								    56 STORE_FAST 3 ( p )					  
							      								    								  
							      								    9 58 LOAD_FAST 2 ( p )					  
							      								    60 LOAD_CONST 6 ( 5 )					  
							      								    62 COMPARE_OP 0 ( < )					  
							      								    64 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      								    10 66 LOAD_FAST 2 ( p )					  
							      								    68 LOAD_CONST 7 ( 3 )					  
							      								    70 INPLACE_ADD						  
							      								    72 STORE_FAST 2 ( p )					  
							      								    								  
							      								    11 >> 74 LOAD_FAST 1 ( p )					  
							      								    76 LOAD_CONST 8 ( 6 )					  
							      								    78 INPLACE_ADD						  
							      								    80 STORE_FAST 1 ( p )					  
							      								    								  
							      								    12 82 LOAD_FAST 1 ( p )					  
							      								    84 LOAD_CONST 9 ( 6 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 1 ( p )					  
							      								    								  
							      								    13 90 LOAD_FAST 2 ( p )					  
							      								    92 LOAD_CONST 10 ( 7 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 1 ( p )					  
							      								    								  
							      								    14 98 LOAD_FAST 1 ( p )					  
							      								    100 LOAD_CONST 11 ( 6 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( p )					  
							      								    								  
							      								    15 106 LOAD_FAST 1 ( p )					  
							      								    108 LOAD_CONST 12 ( 6 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( p )					  
							      								    								  
							      								    16 114 LOAD_FAST 1 ( p )					  
							      								    116 LOAD_CONST 13 ( 7 )					  
							      								    118 INPLACE_ADD						  
							      								    120 STORE_FAST 1 ( p )					  
							      								    								  
							      								    17 122 LOAD_FAST 1 ( p )					  
							      								    124 LOAD_CONST 14 ( 8 )					  
							      								    126 INPLACE_ADD						  
							      								    128 STORE_FAST 1 ( p )					  
							      								    								  
							      								    18 130 LOAD_FAST 1 ( p )					  
							      								    132 LOAD_CONST 15 ( 6 )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 1 ( p )					  
							      								    								  
							      								    18 138 LOAD_FAST 1 ( p )					  
							      								    140 LOAD_CONST 16 ( 6 )					  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( p )					  
							      								    								  
							      								    19 146 LOAD_FAST 1 ( p )					  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
def findNth ( n ) :					      Disassembly of <code object findNth at 0x7f33e2644f60, file " Disassembly of <code object findNth at 0x7f2b0163dc90, file " error : Traceback (most recent call last):   File
    nthElement = 19 + ( n - 1 ) * 9			      2 0 LOAD_CONST 1 ( 19 )					    2 0 LOAD_CONST 1 ( 19 )					  "XLM/dis_script.py", line 59, in <module>	for
    outliersCount = int ( math.log10 ( nthElement ) ) - 1     2 LOAD_FAST 0 ( n )					    2 LOAD_FAST 0 ( n )						  item in run_dis_script():   File "XLM/dis_script.p
    nthElement += 9 * outliersCount			      4 LOAD_CONST 2 ( 1 )					    4 LOAD_CONST 2 ( 1 )					  y", line 47, in run_dis_script     co_code, co_nlo
    return nthElement					      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  cals, co_varnames, co_names, co_consts, co_linesta
							      8 LOAD_CONST 3 ( 9 )					    8 BINARY_MULTIPLY						  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
							      10 BINARY_MULTIPLY					    10 LOAD_CONST 3 ( 9 )					  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      12 BINARY_ADD						    12 BINARY_SUBTRACT						  n parse     constants[arg] = ast.literal_eval(argr
							      14 STORE_FAST 1 ( nthElement )				    14 BINARY_MULTIPLY						  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      								    16 STORE_FAST 1 ( nnCount )					  ib/python3.7/ast.py", line 91, in literal_eval
							      3 16 LOAD_GLOBAL 0 ( int )				    								   return _convert(node_or_string)   File "/home/ubu
							      18 LOAD_GLOBAL 1 ( math )					    3 18 LOAD_GLOBAL 0 ( int )					  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      20 LOAD_METHOD 2 ( log10 )				    20 LOAD_GLOBAL 1 ( math )					  line 90, in _convert	   return _convert_signed_nu
							      22 LOAD_FAST 1 ( nthElement )				    22 LOAD_METHOD 2 ( log10 )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      24 CALL_METHOD 1						    24 LOAD_FAST 1 ( nnCount )					  t/lib/python3.7/ast.py", line 63, in _convert_sign
							      26 CALL_FUNCTION 1					    26 CALL_METHOD 1						  ed_num     return _convert_num(node)	 File "/home
							      28 LOAD_CONST 2 ( 1 )					    28 LOAD_CONST 4 ( 10 )					  /ubuntu/anaconda3/envs/dataset/lib/python3.7/ast.p
							      30 BINARY_SUBTRACT					    30 BINARY_SUBTRACT						  y", line 55, in _convert_num	   raise ValueError(
							      32 STORE_FAST 2 ( outliersCount )				    32 CALL_FUNCTION 1						  'malformed node or string: ' + repr(node)) ValueEr
							      								    34 STORE_FAST 2 ( nnCount )					  ror: malformed node or string: None
							      4 34 LOAD_FAST 1 ( nthElement )				    								  
							      36 LOAD_CONST 3 ( 9 )					    4 36 LOAD_FAST 2 ( nnCount )				  
							      38 LOAD_FAST 2 ( outliersCount )				    38 LOAD_CONST 5 ( 0 )					  
							      40 BINARY_MULTIPLY					    40 BINARY_SUBSCR						  
							      42 INPLACE_ADD						    42 STORE_FAST 3 ( nnCount )					  
							      44 STORE_FAST 1 ( nthElement )				    								  
							      								    5 44 LOAD_FAST 2 ( nnCount )				  
							      5 46 LOAD_FAST 1 ( nthElement )				    46 LOAD_CONST 6 ( 1 )					  
							      48 RETURN_VALUE NEW_LINE					    48 BINARY_SUBSCR						  
							      								    50 LOAD_FAST 3 ( nnCount )					  
							      								    52 LOAD_CONST 7 ( 10 )					  
							      								    54 BINARY_SUBTRACT						  
							      								    56 BINARY_MULTIPLY						  
							      								    58 LOAD_FAST 2 ( nnCount )					  
							      								    60 LOAD_CONST 8 ( 11 )					  
							      								    62 BINARY_SUBTRACT						  
							      								    64 LOAD_FAST 2 ( nnCount )					  
							      								    66 LOAD_CONST 9 ( 12 )					  
							      								    68 BINARY_SUBTRACT						  
							      								    70 LOAD_FAST 3 ( nnCount )					  
							      								    72 LOAD_CONST 10 ( 12 )					  
							      								    74 BINARY_SUBTRACT						  
							      								    76 LOAD_FAST 3 ( nnCount )					  
							      								    78 LOAD_CONST 11 ( 12 )					  
							      								    80 BINARY_SUBTRACT						  
							      								    82 LOAD_FAST 3 ( nnCount )					  
							      								    84 LOAD_CONST 12 ( 13 )					  
							      								    86 BINARY_SUBTRACT						  
							      								    88 LOAD_FAST 3 ( nnCount )					  
							      								    90 LOAD_CONST 13 ( 14 )					  
							      								    92 BINARY_SUBTRACT						  
							      								    94 LOAD_FAST 3 ( nnCount )					  
							      								    96 LOAD_CONST 14 ( 15 )					  
							      								    98 BINARY_SUBTRACT						  
							      								    100 LOAD_FAST 3 ( nnCount )					  
							      								    102 LOAD_CONST 15 ( 16 )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 LOAD_FAST 3 ( nnCount )					  
							      								    108 LOAD_CONST 16 ( 19 )					  
							      								    110 BINARY_SUBTRACT						  
							      								    112 LOAD_FAST 3 ( nnCount )					  
							      								    114 LOAD_CONST 15 ( 20 )					  
							      								    116 BINARY_SUBTRACT						  
							      								    118 LOAD_FAST 3 ( nnCount )					  
							      								    120 LOAD_CONST 16 ( 19 )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 LOAD_FAST 3 ( nnCount )					  
							      								    126 LOAD_CONST 17 ( 20 )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 LOAD_FAST 3 ( nnCount )					  
							      								    132 LOAD_CONST 17 ( 20 )					  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 3 ( nnCount )					  
							      								    138 LOAD_CONST 17 ( 20 )					  
							      								    140 BINARY_SUBTRACT						  
							      								    142 LOAD_FAST 3 ( nnCount )					  
							      								    144 LOAD_CONST 18 ( 21 )					  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 3 ( nnCount )					  
							      								    150 LOAD_CONST 19 ( 20 )					  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 3 ( nnCount )					  
							      								    156 LOAD_CONST 19						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
def countDyckPaths ( n ) :				      Disassembly of <code object countDyckPaths at 0x7f33e2644930, Disassembly of <code object countDyckPaths at 0x7f2b01639660, error : Traceback (most recent call last):   File
    res = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n ) :				      2 STORE_FAST 1 ( res )					    2 STORE_FAST 1 ( res )					  (item)   File "main.py", line 32, in <module>	  Fi
	res *= ( 2 * n - i )				      								    								  le "<dis>", line 2, in countDyckPaths TypeError: '
	res /= ( i + 1 )				      3 4 SETUP_LOOP 46 ( to 52 )				    3 4 SETUP_LOOP 64 ( to 70 )					  int' object is not subscriptable
    return res / ( n + 1 )				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 2 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 32 ( to 50 )				    >> 16 FOR_ITER 48 ( to 68 )					  
							      18 STORE_FAST 2 ( i )					    18 STORE_FAST 2 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 1 ( res )					    4 20 LOAD_FAST 1 ( res )					  
							      22 LOAD_CONST 3 ( 2 )					    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 0 ( n )					    24 BINARY_SUBSCR						  
							      26 BINARY_MULTIPLY					    26 LOAD_FAST 1 ( res )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 BINARY_SUBTRACT					    30 STORE_SUBSCR						  
							      32 INPLACE_MULTIPLY					    								  
							      34 STORE_FAST 1 ( res )					    5 32 LOAD_FAST 1 ( res )					  
							      								    34 LOAD_FAST 2 ( i )					  
							      5 36 LOAD_FAST 1 ( res )					    36 STORE_SUBSCR						  
							      38 LOAD_FAST 2 ( i )					    								  
							      40 LOAD_CONST 1 ( 1 )					    6 38 LOAD_FAST 1 ( res )					  
							      42 BINARY_ADD						    40 LOAD_FAST 2 ( i )					  
							      44 INPLACE_TRUE_DIVIDE					    42 BINARY_SUBSCR						  
							      46 STORE_FAST 1 ( res )					    44 LOAD_FAST 1 ( res )					  
							      48 JUMP_ABSOLUTE 16					    46 LOAD_FAST 2 ( i )					  
							      >> 50 POP_BLOCK						    48 STORE_SUBSCR						  
							      								    								  
							      6 >> 52 LOAD_FAST 1 ( res )				    7 50 LOAD_FAST 1 ( res )					  
							      54 LOAD_FAST 0 ( n )					    52 RETURN_VALUE NEW_LINE					  
							      56 LOAD_CONST 1 ( 1 )					    								  
							      58 BINARY_ADD						    								  
							      60 BINARY_TRUE_DIVIDE					    								  
							      62 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
def sumOfSeries ( n ) :					      Disassembly of <code object sumOfSeries at 0x7f33e2653f60, fi Disassembly of <code object sumOfSeries at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  item in run_dis_script():   File "XLM/dis_script.p
	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )	      								    								  y", line 47, in run_dis_script     co_code, co_nlo
    return sum						      3 4 SETUP_LOOP 50 ( to 56 )				    3 4 SETUP_LOOP 64 ( to 76 )					  cals, co_varnames, co_names, co_consts, co_linesta
							      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  pack non-iterable NoneType object
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 32 ( to 54 )				    >> 20 FOR_ITER 48 ( to 74 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 1 ( sum )					    4 24 LOAD_FAST 1 ( sum )					  
							      26 LOAD_CONST 3 ( 2 )					    26 LOAD_FAST 2 ( i )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 BINARY_MULTIPLY					    30 BINARY_MULTIPLY						  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_FAST 1 ( sum )					  
							      34 BINARY_SUBTRACT					    34 LOAD_FAST 2 ( i )					  
							      36 LOAD_CONST 3 ( 2 )					    36 BINARY_MULTIPLY						  
							      38 LOAD_FAST 2 ( i )					    38 BINARY_SUBTRACT						  
							      40 BINARY_MULTIPLY					    40 LOAD_FAST 1 ( sum )					  
							      42 LOAD_CONST 2 ( 1 )					    42 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBTRACT					    44 BINARY_MULTIPLY						  
							      46 BINARY_MULTIPLY					    46 BINARY_SUBTRACT						  
							      48 BINARY_ADD						    48 LOAD_FAST 1 ( sum )					  
							      50 STORE_FAST 1 ( sum )					    50 LOAD_FAST 2 ( i )					  
							      52 JUMP_ABSOLUTE 20					    52 BINARY_MULTIPLY						  
							      >> 54 POP_BLOCK						    54 BINARY_SUBTRACT						  
							      								    56 LOAD_FAST 1 ( sum )					  
							      5 >> 56 LOAD_FAST 1 ( sum )				    58 LOAD_FAST 2 ( i )					  
							      58 RETURN_VALUE NEW_LINE					    60 BINARY_MULTIPLY						  
							      								    62 BINARY_SUBTRACT						  
							      								    64 BINARY_MULTIPLY						  
							      								    66 LOAD_FAST 1 ( sum )					  
							      								    68 LOAD_FAST 2 ( i )					  
							      								    70 BINARY_MULTIPLY						  
							      								    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 1 ( sum )					  
							      								    76 LOAD_FAST 2 ( i )					  
							      								    78 BINARY_MULTIPLY						  
							      								    80 BINARY_SUBTRACT						  
							      								    82 LOAD_FAST 1 ( sum )					  
							      								    84 LOAD_FAST 2 ( i )					  
							      								    86 BINARY_MULTIPLY						  
							      								    88 BINARY_SUBTRACT						  
							      								    90 BINARY_MULTIPLY						  
							      								    92 LOAD_FAST 1 ( sum )					  
							      								    94 LOAD_FAST 2 ( i )					  
							      								    96 BINARY_MULTIPLY						  
							      								    98 BINARY_SUBTRACT						  
							      								    100 LOAD_FAST 1 ( sum )					  
							      								    102 LOAD_FAST 2 ( i )					  
							      								    104 BINARY_MULTIPLY						  
							      								    106 BINARY_SUBTRACT						  
							      								    108 LOAD_FAST 1 ( sum )					  
							      								    110 LOAD_FAST 2 ( i )					  
							      								    112 BINARY_MULTIPLY						  
							      								    114 BINARY_SUBTRACT						  
							      								    116 LOAD_FAST 1 ( sum )					  
							      								    118 LOAD_FAST 2 ( i )					  
							      								    120 BINARY_MULTIPLY						  
							      								    122 BINARY_SUBTRACT						  
							      								    124 LOAD_FAST 1 ( sum )					  
							      								    126 LOAD_FAST 2 ( i )					  
							      								    128 BINARY_MULTIPLY						  
							      								    130 BINARY_SUBTRACT						  
							      								    132 BINARY_MULTIPLY						  
							      								    134 LOAD_FAST 1 ( sum )					  
							      								    136 LOAD_FAST 2 ( i )					  
							      								    138 BINARY_MULTIPLY						  
							      								    140 BINARY_SUBTRACT						  
							      								    142 LOAD_FAST 1 ( sum )					  
							      								    144 LOAD_FAST 2 ( i )					  
							      								    146 BINARY_MULTIPLY						  
							      								    148 BINARY_SUBTRACT						  
							      								    150 BINARY_MULTIPLY						  
							      								    152 LOAD_FAST 1 ( sum )					  
							      								    154 LOAD_FAST 2 ( i )					  
							      								    156 BINARY_MULTIPLY						  
							      								    158 BINARY_SUBTRACT						  
							      								    160 LOAD_FAST 1 ( sum )					  
							      								    162 LOAD_FAST 2 ( i )					  
							      								    164 BINARY_MULTIPLY						  
							      								    166 BINARY_SUBTRACT						  
							      								    168 LOAD_FAST 1 ( sum )					  
							      								    170 LOAD_FAST 2 ( i )					  
							      								    172 BINARY_MULTIPLY						  
							      								    174 BINARY_SUBTRACT						  
							      								    176 LOAD_FAST 1 ( sum )					  
							      								    178 LOAD_FAST 2 ( i )					  
							      								    180 BINARY_MULTIPLY						  
							      								    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 1 ( sum )					  
							      								    76 LOAD_FAST 2 ( i )					  
							      								    78 BINARY_SUBTRACT						  
							      								    80 BINARY_MULTIPLY						  
							      								    82								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
def lexSmallest ( a , n ) :				      Disassembly of <code object lexSmallest at 0x7f33e2653ed0, fi Disassembly of <code object lexSmallest at 0x7f2b0163dc90, fi script_not_found : None
    a.sort ( reverse = True )				      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    answer = ""						      2 LOAD_ATTR 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( n ) :				      4 LOAD_CONST 1 ( True )					    4 LOAD_CONST 1 ( True )					  
	answer += a [ i ]				      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 CALL_METHOD 1						  
    return answer					      8 CALL_FUNCTION_KW 1					    8 POP_TOP							  
							      10 POP_TOP						    								  
							      								    3 10 LOAD_CONST 2 ( '' )					  
							      3 12 LOAD_CONST 3 ( '' )					    12 STORE_FAST 2 ( answer )					  
							      14 STORE_FAST 2 ( answer )				    								  
							      								    4 14 SETUP_LOOP 64 ( to 80 )				  
							      4 16 SETUP_LOOP 28 ( to 46 )				    >> 16 LOAD_FAST 2 ( answer )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_FAST 1 ( n )					  
							      20 LOAD_FAST 1 ( n )					    20 COMPARE_OP 0 ( < )					  
							      22 CALL_FUNCTION 1					    22 POP_JUMP_IF_FALSE 78					  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 16 ( to 44 )				    5 24 LOAD_FAST 2 ( answer )					  
							      28 STORE_FAST 3 ( i )					    26 LOAD_FAST 1 ( n )					  
							      								    28 BINARY_SUBSCR						  
							      5 30 LOAD_FAST 2 ( answer )				    30 STORE_FAST 3 ( st )					  
							      32 LOAD_FAST 0 ( a )					    								  
							      34 LOAD_FAST 3 ( i )					    6 32 LOAD_FAST 2 ( answer )					  
							      36 BINARY_SUBSCR						    34 LOAD_FAST 3 ( st )					  
							      38 INPLACE_ADD						    36 BINARY_SUBSCR						  
							      40 STORE_FAST 2 ( answer )				    38 STORE_FAST 4 ( st )					  
							      42 JUMP_ABSOLUTE 26					    								  
							      >> 44 POP_BLOCK						    7 40 LOAD_FAST 2 ( answer )					  
							      								    42 LOAD_FAST 3 ( st )					  
							      6 >> 46 LOAD_FAST 2 ( answer )				    44 BINARY_SUBSCR						  
							      48 RETURN_VALUE NEW_LINE					    46 LOAD_FAST 4 ( st )					  
							      								    48 BINARY_SUBSCR						  
							      								    50 LOAD_FAST 4 ( st )					  
							      								    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 4 ( st )					  
							      								    56 BINARY_SUBSCR						  
							      								    58 LOAD_FAST 4 ( st )					  
							      								    60 BINARY_SUBSCR						  
							      								    62 LOAD_FAST 4 ( st )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 4 ( st )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 4 ( st )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_FAST 4 ( st )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 4 ( st )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 4 ( st )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 4 ( st )					  
							      								    88 STORE_SUBSCR						  
							      								    								  
							      								    8 90 LOAD_FAST 2 ( answer )					  
							      								    92 LOAD_FAST 3 ( st )					  
							      								    94 LOAD_FAST 4 ( st )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 4 ( st )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    9 102 LOAD_FAST 2 ( answer )				  
							      								    104 LOAD_FAST 3 ( st )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 4 ( st )					  
							      								    110 STORE_SUBSCR						  
							      								    								  
							      								    10 >> 112 LOAD_FAST 2 ( answer )				  
							      								    114 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
def doublefactorial ( n ) :				      Disassembly of <code object doublefactorial at 0x7f33e2644930 Disassembly of <code object doublefactorial at 0x7f2b0163dc90 error : Traceback (most recent call last):   File
    res = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n , - 1 , - 2 ) :			      2 STORE_FAST 1 ( res )					    2 STORE_FAST 1 ( res )					  (item)   File "main.py", line 33, in <module>	  Fi
	if ( i == 0 or i == 1 ) :			      								    								  le "<dis>", line 2, in doublefactorial TypeError:
	    return res ;				      3 4 SETUP_LOOP 48 ( to 54 )				    3 4 SETUP_LOOP 26 ( to 32 )					  'int' object is not callable
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    res *= i ;					      8 LOAD_FAST 0 ( n )					    8 LOAD_FAST 0 ( n )						  
							      10 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 2 ( - 1 )					  
							      12 LOAD_CONST 3 ( - 2 )					    12 LOAD_CONST 3 ( - 2 )					  
							      14 CALL_FUNCTION 3					    14 CALL_FUNCTION 2						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 32 ( to 52 )				    >> 18 FOR_ITER 18 ( to 30 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 2 ( i )					    4 22 LOAD_FAST 1 ( res )					  
							      24 LOAD_CONST 4 ( 0 )					    24 LOAD_CONST 4 ( 0 )					  
							      26 COMPARE_OP 2 ( == )					    26 COMPARE_OP 2 ( == )					  
							      28 POP_JUMP_IF_TRUE 38					    28 POP_JUMP_IF_FALSE 18					  
							      30 LOAD_FAST 2 ( i )					    								  
							      32 LOAD_CONST 1 ( 1 )					    5 30 LOAD_FAST 1 ( res )					  
							      34 COMPARE_OP 2 ( == )					    32 LOAD_CONST 5 ( 1 )					  
							      36 POP_JUMP_IF_FALSE 42					    34 INPLACE_ADD						  
							      								    36 STORE_FAST 1 ( res )					  
							      5 >> 38 LOAD_FAST 1 ( res )				    								  
							      40 RETURN_VALUE						    6 38 LOAD_FAST 1 ( res )					  
							      								    40 LOAD_CONST 6 ( 2 )					  
							      7 >> 42 LOAD_FAST 1 ( res )				    42 INPLACE_ADD						  
							      44 LOAD_FAST 2 ( i )					    44 STORE_FAST 1 ( res )					  
							      46 INPLACE_MULTIPLY					    46 JUMP_ABSOLUTE 18						  
							      48 STORE_FAST 1 ( res )					    >> 48 POP_BLOCK						  
							      50 JUMP_ABSOLUTE 18					    								  
							      >> 52 POP_BLOCK						    7 >> 50 LOAD_FAST 1 ( res )					  
							      >> 54 LOAD_CONST 0 ( None )				    52 RETURN_VALUE NEW_LINE					  
							      56 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI COUNT_OBTUSE_ANGLES_CIR<unk> K_EQUIDISTANT_POINTS_2_GIVEN_POI
--							      --							    --								  --
def countObtuseAngles ( a , b , k ) :			      Disassembly of <code object countObtuseAngles at 0x7f33e2644f Disassembly of <code object countObtuseAngles at 0x7f2b016396 script_not_found : None
    c1 = ( b - a ) - 1					      2 0 LOAD_FAST 1 ( b )					    2 0 LOAD_FAST 0 ( a )					  
    c2 = ( k - b ) + ( a - 1 )				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 1 ( b )						  
    if ( c1 == c2 ) :					      4 BINARY_SUBTRACT						    4 BINARY_SUBTRACT						  
	return 0					      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
    return min ( c1 , c2 )				      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
							      10 STORE_FAST 3 ( c1 )					    10 STORE_FAST 2 ( c2 )					  
							      								    								  
							      3 12 LOAD_FAST 2 ( k )					    3 12 LOAD_FAST 2 ( c2 )					  
							      14 LOAD_FAST 1 ( b )					    14 LOAD_CONST 2 ( - 1 )					  
							      16 BINARY_SUBTRACT					    16 BINARY_SUBSCR						  
							      18 LOAD_FAST 0 ( a )					    18 LOAD_FAST 2 ( c2 )					  
							      20 LOAD_CONST 1 ( 1 )					    20 BINARY_SUBTRACT						  
							      22 BINARY_SUBTRACT					    22 LOAD_CONST 1 ( 1 )					  
							      24 BINARY_ADD						    24 BINARY_SUBTRACT						  
							      26 STORE_FAST 4 ( c2 )					    26 COMPARE_OP 0 ( < )					  
							      								    28 POP_JUMP_IF_FALSE 36					  
							      4 28 LOAD_FAST 3 ( c1 )					    								  
							      30 LOAD_FAST 4 ( c2 )					    4 30 LOAD_FAST 2 ( c2 )					  
							      32 COMPARE_OP 2 ( == )					    32 LOAD_CONST 2 ( - 1 )					  
							      34 POP_JUMP_IF_FALSE 40					    34 BINARY_SUBSCR						  
							      								    36 STORE_FAST 2 ( c2 )					  
							      5 36 LOAD_CONST 2 ( 0 )					    								  
							      38 RETURN_VALUE						    5 38 LOAD_FAST 2 ( c2 )					  
							      								    40 LOAD_CONST 2 ( - 1 )					  
							      6 >> 40 LOAD_GLOBAL 0 ( min )				    42 BINARY_SUBSCR						  
							      42 LOAD_FAST 3 ( c1 )					    44 LOAD_FAST 2 ( c2 )					  
							      44 LOAD_FAST 4 ( c2 )					    46 LOAD_CONST 2 ( - 1 )					  
							      46 CALL_FUNCTION 2					    48 BINARY_SUBSCR						  
							      48 RETURN_VALUE NEW_LINE					    50 BINARY_SUBTRACT						  
							      								    52 STORE_FAST 3 ( c2 )					  
							      								    								  
							      								    6 54 LOAD_FAST 3 ( c2 )					  
							      								    56 LOAD_CONST 2 ( - 1 )					  
							      								    58 BINARY_SUBSCR						  
							      								    60 LOAD_FAST 2 ( c2 )					  
							      								    62 LOAD_CONST 2 ( - 1 )					  
							      								    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 2 ( c2 )					  
							      								    68 LOAD_CONST 2 ( - 1 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 BINARY_SUBTRACT						  
							      								    74 STORE_FAST 2 ( c2 )					  
							      								    								  
							      								    7 76 LOAD_FAST 2 ( c2 )					  
							      								    78 LOAD_CONST 2 ( - 1 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 2 ( c2 )					  
							      								    84 LOAD_CONST 2 ( - 1 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 BINARY_SUBTRACT						  
							      								    90 STORE_FAST 2 ( c2 )					  
							      								    								  
							      								    8 92 LOAD_FAST 2 ( c2 )					  
							      								    94 LOAD_CONST 2 ( - 1 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 2 ( c2 )					  
							      								    100 LOAD_CONST 2 ( - 1 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 BINARY_SUBTRACT						  
							      								    106 STORE_FAST 2 ( c2 )					  
							      								    								  
							      								    9 108 LOAD_FAST 2 ( c2 )					  
							      								    110 LOAD_CONST 2 ( - 1 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 2 ( c2 )					  
							      								    116 LOAD_CONST 2 ( - 1 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_FAST 2 ( c2 )					  
							      								    122 LOAD_CONST 2 ( - 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 BINARY_SUBTRACT						  
							      								    128 LOAD_FAST 2 ( c2 )					  
							      								    130 LOAD_CONST 2 ( - 1 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 2 ( c2 )					  
							      								    138 LOAD_CONST 2 ( - 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 2 ( c2 )					  
							      								    146 LOAD_CONST 2 ( - 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 2 ( c2 )					  
							      								    154 LOAD_CONST 2 ( - 1 )					  
							      								    156 STORE_SUBSCR						  
							      								    								  
							      								    10 158 LOAD_FAST 2 ( c2 )					  
							      								    160 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
def breakSum ( n ) :					      Disassembly of <code object breakSum at 0x7f33e2649150, file  Disassembly of <code object breakSum at 0x7f2b01639660, file  error : Traceback (most recent call last):   File
    if ( n == 0 or n == 1 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return n					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 30, in <module>	  Fi
    return max ( ( breakSum ( n // 2 ) + breakSum ( n // 3 )  4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in breakSum TypeError: 'int' o
							      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  bject is not callable
							      8 LOAD_FAST 0 ( n )					    								  
							      10 LOAD_CONST 2 ( 1 )					    3 8 LOAD_FAST 0 ( n )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_GLOBAL 0 ( max )				  
							      3 >> 16 LOAD_FAST 0 ( n )					    14 LOAD_FAST 0 ( n )					  
							      18 RETURN_VALUE						    16 LOAD_CONST 2 ( 1 )					  
							      								    18 LOAD_CONST 3 ( 2 )					  
							      4 >> 20 LOAD_GLOBAL 0 ( max )				    20 BINARY_FLOOR_DIVIDE					  
							      22 LOAD_GLOBAL 1 ( breakSum )				    22 CALL_FUNCTION 2						  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 3 ( 2 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_FLOOR_DIVIDE					    28 BINARY_SUBTRACT						  
							      30 CALL_FUNCTION 1					    30 CALL_FUNCTION 2						  
							      32 LOAD_GLOBAL 1 ( breakSum )				    32 LOAD_FAST 0 ( n )					  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_CONST 2 ( 1 )					  
							      36 LOAD_CONST 4 ( 3 )					    36 BINARY_SUBTRACT						  
							      38 BINARY_FLOOR_DIVIDE					    38 BINARY_SUBTRACT						  
							      40 CALL_FUNCTION 1					    40 LOAD_FAST 0 ( n )					  
							      42 BINARY_ADD						    42 LOAD_CONST 2 ( 1 )					  
							      44 LOAD_GLOBAL 1 ( breakSum )				    44 BINARY_SUBTRACT						  
							      46 LOAD_FAST 0 ( n )					    46 BINARY_SUBTRACT						  
							      48 LOAD_CONST 5 ( 4 )					    48 LOAD_FAST 0 ( n )					  
							      50 BINARY_FLOOR_DIVIDE					    50 LOAD_CONST 2 ( 1 )					  
							      52 CALL_FUNCTION 1					    52 BINARY_SUBTRACT						  
							      54 BINARY_ADD						    54 BINARY_SUBTRACT						  
							      56 LOAD_FAST 0 ( n )					    56 LOAD_FAST 0 ( n )					  
							      58 CALL_FUNCTION 2					    58 LOAD_CONST 2 ( 1 )					  
							      60 RETURN_VALUE NEW_LINE					    60 BINARY_SUBTRACT						  
							      								    62 BINARY_SUBTRACT						  
							      								    64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 2 ( 1 )					  
							      								    68 BINARY_SUBTRACT						  
							      								    70 BINARY_SUBTRACT						  
							      								    72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 2 ( 1 )					  
							      								    76 BINARY_SUBTRACT						  
							      								    78 BINARY_SUBTRACT						  
							      								    80 LOAD_FAST 0 ( n )					  
							      								    82 LOAD_CONST 2 ( 1 )					  
							      								    84 BINARY_SUBTRACT						  
							      								    86 LOAD_FAST 0 ( n )					  
							      								    88 LOAD_CONST 2 ( 1 )					  
							      								    90 BINARY_SUBTRACT						  
							      								    92 BINARY_SUBTRACT						  
							      								    94 LOAD_FAST 0 ( n )					  
							      								    96 LOAD_CONST 2 ( 1 )					  
							      								    98 BINARY_SUBTRACT						  
							      								    100 LOAD_FAST 0 ( n )					  
							      								    102 LOAD_CONST 2 ( 1 )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 LOAD_FAST 0 ( n )					  
							      								    108 LOAD_CONST 2 ( 1 )					  
							      								    110 BINARY_SUBTRACT						  
							      								    112 BINARY_SUBTRACT						  
							      								    114 BINARY_SUBTRACT						  
							      								    116 LOAD_FAST 0 ( n )					  
							      								    118 LOAD_CONST 2 ( 1 )					  
							      								    120 BINARY_SUBTRACT						  
							      								    122 BINARY_SUBTRACT						  
							      								    124 BINARY_SUBTRACT						  
							      								    126 LOAD_FAST 0 ( n )					  
							      								    128 LOAD_CONST 2 ( 1 )					  
							      								    130 BINARY_SUBTRACT						  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 0 ( n )					  
							      								    136 LOAD_CONST 2 ( 1 )					  
							      								    138 BINARY_SUBTRACT						  
							      								    140 LOAD_FAST 0 ( n )					  
							      								    142 LOAD_CONST 2 ( 1 )					  
							      								    144 BINARY_SUBTRACT						  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 0 ( n )					  
							      								    150 LOAD_CONST 3 ( 2 )					  
							      								    152 BINARY_SUBTRACT						  
							      								    154 BINARY_SUBTRACT						  
							      								    156 LOAD_FAST 0 ( n )					  
							      								    158 LOAD_CONST 2 ( 1 )					  
							      								    160 BINARY_SUBTRACT						  
							      								    162 BINARY_SUBTRACT						  
							      								    164 BINARY_SUBTRACT						  
							      								    166 LOAD_FAST 0 ( n )					  
							      								    168 LOAD_CONST 2 ( 1 )					  
							      								    170 BINARY_SUBTRACT						  
							      								    172 BINARY_SUBTRACT						  
							      								    174 LOAD_FAST 0 ( n )					  
							      								    176 LOAD_CONST 2 ( 1 )					  
							      								    178 BINARY_SUBTRACT						  
							      								    180 BUILD_TUPLE 3						  
							      								    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_<unk> INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
def smallest ( x , y , z ) :				      Disassembly of <code object smallest at 0x7f33e2644f60, file  Disassembly of <code object smallest at 0x7f2b01639660, file  script_not_found : None
    c = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    while ( x and y and z ) :				      2 STORE_FAST 3 ( c )					    2 STORE_FAST 2 ( c )					  
	x = x - 1					      								    								  
	y = y - 1					      3 4 SETUP_LOOP 48 ( to 54 )				    3 4 SETUP_LOOP 74 ( to 80 )					  
	z = z - 1					      >> 6 LOAD_FAST 0 ( x )					    6 LOAD_FAST 0 ( x )						  
	c = c + 1					      8 POP_JUMP_IF_FALSE 52					    8 LOAD_FAST 1 ( y )						  
    return c						      10 LOAD_FAST 1 ( y )					    10 COMPARE_OP 2 ( == )					  
							      12 POP_JUMP_IF_FALSE 52					    12 POP_JUMP_IF_FALSE 78					  
							      14 LOAD_FAST 2 ( z )					    								  
							      16 POP_JUMP_IF_FALSE 52					    4 14 LOAD_FAST 2 ( c )					  
							      								    16 LOAD_CONST 2 ( 1 )					  
							      4 18 LOAD_FAST 0 ( x )					    18 BINARY_SUBTRACT						  
							      20 LOAD_CONST 2 ( 1 )					    20 STORE_FAST 2 ( c )					  
							      22 BINARY_SUBTRACT					    								  
							      24 STORE_FAST 0 ( x )					    5 22 LOAD_FAST 2 ( c )					  
							      								    24 LOAD_CONST 2 ( 1 )					  
							      5 26 LOAD_FAST 1 ( y )					    26 BINARY_SUBTRACT						  
							      28 LOAD_CONST 2 ( 1 )					    28 STORE_FAST 2 ( c )					  
							      30 BINARY_SUBTRACT					    								  
							      32 STORE_FAST 1 ( y )					    6 30 LOAD_FAST 2 ( c )					  
							      								    32 LOAD_CONST 2 ( 1 )					  
							      6 34 LOAD_FAST 2 ( z )					    34 BINARY_SUBTRACT						  
							      36 LOAD_CONST 2 ( 1 )					    36 STORE_FAST 2 ( c )					  
							      38 BINARY_SUBTRACT					    								  
							      40 STORE_FAST 2 ( z )					    7 38 LOAD_FAST 2 ( c )					  
							      								    40 LOAD_CONST 2 ( 1 )					  
							      7 42 LOAD_FAST 3 ( c )					    42 BINARY_SUBTRACT						  
							      44 LOAD_CONST 2 ( 1 )					    44 STORE_FAST 2 ( c )					  
							      46 BINARY_ADD						    								  
							      48 STORE_FAST 3 ( c )					    8 46 LOAD_FAST 2 ( c )					  
							      50 JUMP_ABSOLUTE 6					    48 LOAD_CONST 2 ( 1 )					  
							      >> 52 POP_BLOCK						    50 BINARY_SUBTRACT						  
							      								    52 STORE_FAST 2 ( c )					  
							      8 >> 54 LOAD_FAST 3 ( c )					    								  
							      56 RETURN_VALUE NEW_LINE					    9 54 LOAD_FAST 2 ( c )					  
							      								    56 LOAD_CONST 2 ( 1 )					  
							      								    58 BINARY_SUBTRACT						  
							      								    60 STORE_FAST 2 ( c )					  
							      								    								  
							      								    10 62 LOAD_FAST 2 ( c )					  
							      								    64 LOAD_CONST 2 ( 1 )					  
							      								    66 BINARY_SUBTRACT						  
							      								    68 STORE_FAST 2 ( c )					  
							      								    								  
							      								    11 70 LOAD_FAST 2 ( c )					  
							      								    72 LOAD_CONST 2 ( 1 )					  
							      								    74 BINARY_SUBTRACT						  
							      								    76 STORE_FAST 2 ( c )					  
							      								    								  
							      								    12 78 LOAD_FAST 2 ( c )					  
							      								    80 LOAD_CONST 2 ( 1 )					  
							      								    82 BINARY_SUBTRACT						  
							      								    84 STORE_FAST 2 ( c )					  
							      								    								  
							      								    13 >> 86 LOAD_FAST 2 ( c )					  
							      								    88 LOAD_CONST 2 ( 1 )					  
							      								    90 BINARY_SUBTRACT						  
							      								    92 STORE_FAST 2 ( c )					  
							      								    								  
							      								    14 94 LOAD_FAST 2 ( c )					  
							      								    96 LOAD_CONST 2 ( 1 )					  
							      								    98 BINARY_SUBTRACT						  
							      								    100 STORE_FAST 2 ( c )					  
							      								    								  
							      								    15 102 LOAD_FAST 2 ( c )					  
							      								    104 LOAD_CONST 2 ( 1 )					  
							      								    106 BINARY_SUBTRACT						  
							      								    108 STORE_FAST 2 ( c )					  
							      								    								  
							      								    16 110 LOAD_FAST 2 ( c )					  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 BINARY_SUBTRACT						  
							      								    116 STORE_FAST 2 ( c )					  
							      								    								  
							      								    17 118 LOAD_FAST 2 ( c )					  
							      								    120 LOAD_FAST 1 ( y )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 STORE_FAST 2 ( c )					  
							      								    								  
							      								    18 126 LOAD_FAST 2 ( c )					  
							      								    128 LOAD_FAST 2 ( c )					  
							      								    130 BINARY_SUBTRACT						  
							      								    132 LOAD_FAST 2 ( c )					  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 2 ( c )					  
							      								    138 BINARY_SUBTRACT						  
							      								    140 LOAD_FAST 2 ( c )					  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 2 ( c )					  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 2 ( c )					  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 2 ( c )					  
							      								    154 BINARY_SUBTRACT						  
							      								    156 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T< WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_T<
--							      --							    --								  --
def isPowerOfTwo ( n ) :				      Disassembly of <code object isPowerOfTwo at 0x7f33e2653ed0, f Disassembly of <code object isPowerOfTwo at 0x7f2b01639660, f script_not_found : None
    if ( n == 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    while ( n != 1 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	if ( n % 2 != 0 ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	    return False				      								    								  
	n = n // 2					      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
    return True						      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 SETUP_LOOP 36 ( to 50 )				    4 >> 12 SETUP_LOOP 32 ( to 48 )				  
							      >> 14 LOAD_FAST 0 ( n )					    14 LOAD_FAST 0 ( n )					  
							      16 LOAD_CONST 3 ( 1 )					    16 LOAD_CONST 3 ( 1 )					  
							      18 COMPARE_OP 3 ( != )					    18 COMPARE_OP 3 ( != )					  
							      20 POP_JUMP_IF_FALSE 48					    20 POP_JUMP_IF_FALSE 46					  
							      								    								  
							      5 22 LOAD_FAST 0 ( n )					    5 22 LOAD_CONST 4 ( False )					  
							      24 LOAD_CONST 4 ( 2 )					    24 RETURN_VALUE						  
							      26 BINARY_MODULO						    								  
							      28 LOAD_CONST 1 ( 0 )					    6 >> 26 LOAD_CONST 5 ( True )				  
							      30 COMPARE_OP 3 ( != )					    28 RETURN_VALUE						  
							      32 POP_JUMP_IF_FALSE 38					    								  
							      								    7 >> 30 LOAD_CONST 6 ( False )				  
							      6 34 LOAD_CONST 2 ( False )				    32 RETURN_VALUE						  
							      36 RETURN_VALUE						    34 LOAD_CONST 0 ( None )					  
							      								    36 RETURN_VALUE NEW_LINE					  
							      7 >> 38 LOAD_FAST 0 ( n )					    								  
							      40 LOAD_CONST 4 ( 2 )					    								  
							      42 BINARY_FLOOR_DIVIDE					    								  
							      44 STORE_FAST 0 ( n )					    								  
							      46 JUMP_ABSOLUTE 14					    								  
							      >> 48 POP_BLOCK						    								  
							      								    								  
							      8 >> 50 LOAD_CONST 5 ( True )				    								  
							      52 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRING_BINARY_SEQUENCE				      CONVERT_STRING_BINARY_SEQUENCE				    CONVERT_STRING_BINARY_SEQUENCE				  CONVERT_STRING_BINARY_SEQUENCE
--							      --							    --								  --
def strToBinary ( s ) :					      Disassembly of <code object strToBinary at 0x7f33e2649a50, fi Disassembly of <code object strToBinary at 0x7f2b01639660, fi script_not_found : None
    bin_conv = [ ]					      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    for c in s :					      2 STORE_FAST 1 ( bin_conv )				    2 STORE_FAST 1 ( bin_conv )					  
	ascii_val = ord ( c )				      								    								  
	binary_val = bin ( ascii_val )			      3 4 SETUP_LOOP 46 ( to 52 )				    3 4 SETUP_LOOP 64 ( to 70 )					  
	bin_conv.append ( binary_val [ 2 : ] )		      6 LOAD_FAST 0 ( s )					    6 LOAD_FAST 0 ( s )						  
    return ( ' '.join ( bin_conv ) )			      8 GET_ITER						    8 GET_ITER							  
							      >> 10 FOR_ITER 38 ( to 50 )				    >> 10 FOR_ITER 56 ( to 68 )					  
							      12 STORE_FAST 2 ( c )					    12 STORE_FAST 2 ( c )					  
							      								    								  
							      4 14 LOAD_GLOBAL 0 ( ord )				    4 14 LOAD_GLOBAL 0 ( bin )					  
							      16 LOAD_FAST 2 ( c )					    16 LOAD_FAST 2 ( c )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 STORE_FAST 3 ( ascii_val )				    20 STORE_FAST 3 ( s )					  
							      								    								  
							      5 22 LOAD_GLOBAL 1 ( bin )				    5 22 LOAD_GLOBAL 1 ( bin )					  
							      24 LOAD_FAST 3 ( ascii_val )				    24 LOAD_FAST 3 ( s )					  
							      26 CALL_FUNCTION 1					    26 LOAD_CONST 1 ( 2 )					  
							      28 STORE_FAST 4 ( binary_val )				    28 BINARY_SUBSCR						  
							      								    30 LOAD_FAST 1 ( bin_conv )					  
							      6 30 LOAD_FAST 1 ( bin_conv )				    32 LOAD_CONST 2 ( 1 )					  
							      32 LOAD_METHOD 2 ( append )				    34 BINARY_SUBSCR						  
							      34 LOAD_FAST 4 ( binary_val )				    36 LOAD_FAST 1 ( bin_conv )					  
							      36 LOAD_CONST 1 ( 2 )					    38 LOAD_CONST 3 ( ( 'n' , 'n' , 'n' , 'n' , 'n' , 'n' , 'n' , 
							      38 LOAD_CONST 0 ( None )					    								  
							      40 BUILD_SLICE 2						    								  
							      42 BINARY_SUBSCR						    								  
							      44 CALL_METHOD 1						    								  
							      46 POP_TOP						    								  
							      48 JUMP_ABSOLUTE 10					    								  
							      >> 50 POP_BLOCK						    								  
							      								    								  
							      7 >> 52 LOAD_CONST 2 ( ' ' )				    								  
							      54 LOAD_METHOD 3 ( join )					    								  
							      56 LOAD_FAST 1 ( bin_conv )				    								  
							      58 CALL_METHOD 1						    								  
							      60 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
def isDivisible ( n ) :					      Disassembly of <code object isDivisible at 0x7f33e2644930, fi Disassembly of <code object isDivisible at 0x7f2b01639660, fi error : Traceback (most recent call last):   File
    while ( int ( n / 100 ) ) :				      2 0 SETUP_LOOP 52 ( to 54 )				    2 0 SETUP_LOOP 60 ( to 62 )					  "XLM/dis_script.py", line 60, in <module>	exec
	last_digit = int ( n % 10 )			      >> 2 LOAD_GLOBAL 0 ( int )				    2 LOAD_GLOBAL 0 ( int )					  (item)   File "main.py", line 32, in <module>	  Fi
	n = int ( n / 10 )				      4 LOAD_FAST 0 ( n )					    4 LOAD_FAST 0 ( n )						  le "<dis>", line 2, in isDivisible TypeError: 'int
	n += last_digit * 3				      6 LOAD_CONST 1 ( 100 )					    6 LOAD_CONST 1 ( 100 )					  ' object is not iterable
    return ( n % 29 == 0 )				      8 BINARY_TRUE_DIVIDE					    8 BINARY_MODULO						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 POP_JUMP_IF_FALSE 52					    12 GET_ITER							  
							      								    >> 14 FOR_ITER 48 ( to 60 )					  
							      3 14 LOAD_GLOBAL 0 ( int )				    16 STORE_FAST 1 ( i )					  
							      16 LOAD_FAST 0 ( n )					    								  
							      18 LOAD_CONST 2 ( 10 )					    3 18 LOAD_GLOBAL 0 ( int )					  
							      20 BINARY_MODULO						    20 LOAD_FAST 0 ( n )					  
							      22 CALL_FUNCTION 1					    22 LOAD_CONST 2 ( 10 )					  
							      24 STORE_FAST 1 ( last_digit )				    24 BINARY_MODULO						  
							      								    26 CALL_FUNCTION 1						  
							      4 26 LOAD_GLOBAL 0 ( int )				    28 STORE_FAST 2 ( n )					  
							      28 LOAD_FAST 0 ( n )					    								  
							      30 LOAD_CONST 2 ( 10 )					    4 30 LOAD_FAST 2 ( n )					  
							      32 BINARY_TRUE_DIVIDE					    32 LOAD_CONST 3 ( 1 )					  
							      34 CALL_FUNCTION 1					    34 COMPARE_OP 2 ( == )					  
							      36 STORE_FAST 0 ( n )					    36 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      5 38 LOAD_FAST 0 ( n )					    5 38 LOAD_FAST 0 ( n )					  
							      40 LOAD_FAST 1 ( last_digit )				    40 LOAD_CONST 4 ( 2 )					  
							      42 LOAD_CONST 3 ( 3 )					    42 BINARY_MODULO						  
							      44 BINARY_MULTIPLY					    44 STORE_FAST 0 ( n )					  
							      46 INPLACE_ADD						    								  
							      48 STORE_FAST 0 ( n )					    6 46 LOAD_FAST 0 ( n )					  
							      50 JUMP_ABSOLUTE 2					    48 LOAD_CONST 5 ( 3 )					  
							      >> 52 POP_BLOCK						    50 BINARY_MODULO						  
							      								    52 STORE_FAST 0 ( n )					  
							      6 >> 54 LOAD_FAST 0 ( n )					    								  
							      56 LOAD_CONST 4 ( 29 )					    7 54 LOAD_FAST 0 ( n )					  
							      58 BINARY_MODULO						    56 LOAD_CONST 6 ( 4 )					  
							      60 LOAD_CONST 5 ( 0 )					    58 BINARY_MODULO						  
							      62 COMPARE_OP 2 ( == )					    60 STORE_FAST 0 ( n )					  
							      64 RETURN_VALUE NEW_LINE					    								  
							      								    8 62 LOAD_FAST 0 ( n )					  
							      								    64 LOAD_CONST 7 ( 5 )					  
							      								    66 BINARY_MODULO						  
							      								    68 STORE_FAST 0 ( n )					  
							      								    								  
							      								    9 70 LOAD_FAST 0 ( n )					  
							      								    72 LOAD_CONST 8 ( 4 )					  
							      								    74 BINARY_MODULO						  
							      								    76 STORE_FAST 0 ( n )					  
							      								    								  
							      								    10 78 LOAD_FAST 0 ( n )					  
							      								    80 LOAD_CONST 9 ( 7 )					  
							      								    82 BINARY_MODULO						  
							      								    84 LOAD_FAST 0 ( n )					  
							      								    86 LOAD_CONST 10 ( 8 )					  
							      								    88 BINARY_MODULO						  
							      								    90 INPLACE_ADD						  
							      								    92 STORE_FAST 0 ( n )					  
							      								    								  
							      								    11 94 LOAD_FAST 0 ( n )					  
							      								    96 LOAD_CONST 11 ( 7 )					  
							      								    98 BINARY_MODULO						  
							      								    100 STORE_FAST 0 ( n )					  
							      								    								  
							      								    12 102 LOAD_FAST 0 ( n )					  
							      								    104 LOAD_CONST 12 ( 8 )					  
							      								    106 BINARY_MODULO						  
							      								    108 STORE_FAST 0 ( n )					  
							      								    								  
							      								    13 110 LOAD_FAST 0 ( n )					  
							      								    112 LOAD_CONST 13 ( 7 )					  
							      								    114 COMPARE_OP 4 ( > )					  
							      								    116 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    14 118 LOAD_FAST 0 ( n )					  
							      								    120 LOAD_CONST 14 ( 8 )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 0 ( n )					  
							      								    126 JUMP_ABSOLUTE 14					  
							      								    >> 128 POP_BLOCK						  
							      								    >> 130 LOAD_CONST 0 ( None )				  
							      								    132 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
def zigzag ( n , k ) :					      Disassembly of <code object zigzag at 0x7f33e2644f60, file "< Disassembly of <code object zigzag at 0x7f2b0163dc90, file "< script_not_found : None
    if ( n == 0 and k == 0 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( k == 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 0					      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 12					  
    return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;  8 LOAD_FAST 1 ( k )					    								  
							      10 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_FAST 0 ( n )					  
							      3 16 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 0 )					  
							      18 RETURN_VALUE						    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 24					  
							      4 >> 20 LOAD_FAST 1 ( k )					    								  
							      22 LOAD_CONST 1 ( 0 )					    5 20 LOAD_CONST 1 ( 1 )					  
							      24 COMPARE_OP 2 ( == )					    22 RETURN_VALUE						  
							      26 POP_JUMP_IF_FALSE 32					    								  
							      								    6 >> 24 LOAD_FAST 0 ( n )					  
							      5 28 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 2 ( 0 )					  
							      30 RETURN_VALUE						    28 COMPARE_OP 2 ( == )					  
							      								    30 POP_JUMP_IF_FALSE 36					  
							      6 >> 32 LOAD_GLOBAL 0 ( zigzag )				    								  
							      34 LOAD_FAST 0 ( n )					    7 32 LOAD_CONST 1 ( 1 )					  
							      36 LOAD_FAST 1 ( k )					    34 RETURN_VALUE						  
							      38 LOAD_CONST 2 ( 1 )					    								  
							      40 BINARY_SUBTRACT					    8 >> 36 LOAD_FAST 0 ( n )					  
							      42 CALL_FUNCTION 2					    38 LOAD_CONST 2 ( 0 )					  
							      44 LOAD_GLOBAL 0 ( zigzag )				    40 COMPARE_OP 2 ( == )					  
							      46 LOAD_FAST 0 ( n )					    42 POP_JUMP_IF_FALSE 48					  
							      48 LOAD_CONST 2 ( 1 )					    								  
							      50 BINARY_SUBTRACT					    9 44 LOAD_CONST 1 ( 1 )					  
							      52 LOAD_FAST 0 ( n )					    46 RETURN_VALUE						  
							      54 LOAD_FAST 1 ( k )					    								  
							      56 BINARY_SUBTRACT					    10 >> 48 LOAD_CONST 1 ( 1 )					  
							      58 CALL_FUNCTION 2					    50 RETURN_VALUE						  
							      60 BINARY_ADD						    52 LOAD_CONST 0 ( None )					  
							      62 RETURN_VALUE NEW_LINE					    54 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e2653ed0, file " Disassembly of <code object findSum at 0x7f2b01639660, file " error : Traceback (most recent call last):   File
    sm = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 1 ( sm )					    2 STORE_FAST 1 ( sm )					  (item)   File "main.py", line 32, in <module>	  Fi
	for j in range ( i , n + 1 ) :			      								    								  le "<dis>", line 2, in findSum TypeError: 'int' ob
	    sm = sm + i * j				      3 4 SETUP_LOOP 58 ( to 64 )				    3 4 SETUP_LOOP 64 ( to 66 )					  ject does not support item assignment
    return sm						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 40 ( to 62 )				    >> 20 FOR_ITER 48 ( to 64 )					  
							      22 STORE_FAST 2 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 SETUP_LOOP 34 ( to 60 )				    4 24 SETUP_LOOP 40 ( to 62 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_FAST 0 ( n )					    30 LOAD_FAST 0 ( n )					  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 CALL_FUNCTION 2					    36 CALL_FUNCTION 2						  
							      38 GET_ITER						    38 GET_ITER							  
							      >> 40 FOR_ITER 16 ( to 58 )				    >> 40 FOR_ITER 24 ( to 60 )					  
							      42 STORE_FAST 3 ( j )					    42 STORE_FAST 3 ( j )					  
							      								    								  
							      5 44 LOAD_FAST 1 ( sm )					    5 44 LOAD_FAST 0 ( n )					  
							      46 LOAD_FAST 2 ( i )					    46 LOAD_FAST 3 ( j )					  
							      48 LOAD_FAST 3 ( j )					    48 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_MULTIPLY					    50 BINARY_ADD						  
							      52 BINARY_ADD						    52 LOAD_FAST 1 ( sm )					  
							      54 STORE_FAST 1 ( sm )					    54 LOAD_FAST 3 ( j )					  
							      56 JUMP_ABSOLUTE 40					    56 LOAD_CONST 2 ( 1 )					  
							      >> 58 POP_BLOCK						    58 BINARY_ADD						  
							      >> 60 JUMP_ABSOLUTE 20					    60 STORE_SUBSCR						  
							      >> 62 POP_BLOCK						    62 JUMP_ABSOLUTE 40						  
							      								    >> 64 POP_BLOCK						  
							      6 >> 64 LOAD_FAST 1 ( sm )				    >> 66 JUMP_ABSOLUTE 20					  
							      66 RETURN_VALUE NEW_LINE					    >> 68 POP_BLOCK						  
							      								    								  
							      								    6 >> 70 LOAD_FAST 1 ( sm )					  
							      								    72 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
def rotate ( arr , n ) :				      Disassembly of <code object rotate at 0x7f33e26494b0, file "< Disassembly of <code object rotate at 0x7f2b0163dc90, file "< script_not_found : None
    x = arr [ n - 1 ]					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    for i in range ( n - 1 , 0 , - 1 ) :		      2 LOAD_FAST 1 ( n )					    2 LOAD_FAST 1 ( n )						  
	arr [ i ] = arr [ i - 1 ] ;			      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
    arr [ 0 ] = x ;					      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
							      8 BINARY_SUBSCR						    8 BINARY_SUBSCR						  
							      10 STORE_FAST 2 ( x )					    10 STORE_FAST 2 ( x )					  
							      								    								  
							      3 12 SETUP_LOOP 40 ( to 54 )				    3 12 SETUP_LOOP 48 ( to 56 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_CONST 2 ( 0 )					  
							      18 LOAD_CONST 1 ( 1 )					    18 LOAD_CONST 1 ( 1 )					  
							      20 BINARY_SUBTRACT					    20 LOAD_CONST 1 ( 1 )					  
							      22 LOAD_CONST 2 ( 0 )					    22 BINARY_SUBTRACT						  
							      24 LOAD_CONST 3 ( - 1 )					    24 CALL_FUNCTION 2						  
							      26 CALL_FUNCTION 3					    26 GET_ITER							  
							      28 GET_ITER						    >> 28 FOR_ITER 40 ( to 54 )					  
							      >> 30 FOR_ITER 20 ( to 52 )				    30 STORE_FAST 3 ( i )					  
							      32 STORE_FAST 3 ( i )					    								  
							      								    4 32 LOAD_FAST 0 ( arr )					  
							      4 34 LOAD_FAST 0 ( arr )					    34 LOAD_FAST 3 ( i )					  
							      36 LOAD_FAST 3 ( i )					    36 BINARY_SUBSCR						  
							      38 LOAD_CONST 1 ( 1 )					    38 LOAD_FAST 2 ( x )					  
							      40 BINARY_SUBTRACT					    40 BINARY_SUBSCR						  
							      42 BINARY_SUBSCR						    42 LOAD_FAST 3 ( i )					  
							      44 LOAD_FAST 0 ( arr )					    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 3 ( i )					    46 LOAD_FAST 3 ( i )					  
							      48 STORE_SUBSCR						    48 BINARY_SUBSCR						  
							      50 JUMP_ABSOLUTE 30					    50 LOAD_FAST 3 ( i )					  
							      >> 52 POP_BLOCK						    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 3 ( i )					  
							      5 >> 54 LOAD_FAST 2 ( x )					    56 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( arr )					    58 LOAD_FAST 2 ( x )					  
							      58 LOAD_CONST 2 ( 0 )					    60 BINARY_SUBSCR						  
							      60 STORE_SUBSCR						    62 LOAD_FAST 3 ( i )					  
							      62 LOAD_CONST 0 ( None )					    64 BINARY_SUBSCR						  
							      64 RETURN_VALUE NEW_LINE					    66 LOAD_FAST 3 ( i )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 3 ( i )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_FAST 3 ( i )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 3 ( i )					  
							      								    80 STORE_SUBSCR						  
							      								    								  
							      								    5 82 LOAD_FAST 0 ( arr )					  
							      								    84 LOAD_FAST 3 ( i )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 3 ( i )					  
							      								    90 STORE_SUBSCR						  
							      								    								  
							      								    6 92 LOAD_FAST 0 ( arr )					  
							      								    94 LOAD_FAST 3 ( i )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 1 ( n )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    7 102 LOAD_FAST 0 ( arr )					  
							      								    104 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
def findMinZero ( p ) :					      Disassembly of <code object findMinZero at 0x7f33e2644930, fi Disassembly of <code object findMinZero at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    first = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    second = 1						      2 STORE_FAST 1 ( first )					    2 STORE_FAST 1 ( first )					  (item)   File "main.py", line 37, in <module>	  Fi
    number = 2						      								    								  le "<dis>", line 2, in findMinZero TypeError: 'int
    next = 1						      3 4 LOAD_CONST 1 ( 1 )					    3 4 LOAD_CONST 1 ( 1 )					  ' object is not iterable
    while ( next ) :					      6 STORE_FAST 2 ( second )					    6 STORE_FAST 2 ( first )					  
	next = ( first + second ) % p			      								    								  
	first = second					      4 8 LOAD_CONST 2 ( 2 )					    4 8 LOAD_CONST 2 ( 2 )					  
	second = next					      10 STORE_FAST 3 ( number )				    10 STORE_FAST 3 ( number )					  
	number = number + 1				      								    								  
    return number					      5 12 LOAD_CONST 1 ( 1 )					    5 12 SETUP_LOOP 64 ( to 78 )				  
							      14 STORE_FAST 4 ( next )					    14 LOAD_FAST 0 ( p )					  
							      								    16 GET_ITER							  
							      6 16 SETUP_LOOP 36 ( to 54 )				    >> 18 FOR_ITER 64 ( to 76 )					  
							      >> 18 LOAD_FAST 4 ( next )				    20 STORE_FAST 4 ( i )					  
							      20 POP_JUMP_IF_FALSE 52					    								  
							      								    6 22 LOAD_FAST 1 ( first )					  
							      7 22 LOAD_FAST 1 ( first )				    24 LOAD_FAST 2 ( first )					  
							      24 LOAD_FAST 2 ( second )					    26 COMPARE_OP 0 ( < )					  
							      26 BINARY_ADD						    28 POP_JUMP_IF_FALSE 42					  
							      28 LOAD_FAST 0 ( p )					    								  
							      30 BINARY_MODULO						    7 30 LOAD_FAST 1 ( first )					  
							      32 STORE_FAST 4 ( next )					    32 LOAD_FAST 2 ( first )					  
							      								    34 LOAD_FAST 3 ( number )					  
							      8 34 LOAD_FAST 2 ( second )				    36 STORE_SUBSCR						  
							      36 STORE_FAST 1 ( first )					    								  
							      								    8 38 LOAD_FAST 1 ( first )					  
							      9 38 LOAD_FAST 4 ( next )					    40 LOAD_FAST 2 ( first )					  
							      40 STORE_FAST 2 ( second )				    42 COMPARE_OP 4 ( > )					  
							      								    44 POP_JUMP_IF_FALSE 18					  
							      10 42 LOAD_FAST 3 ( number )				    								  
							      44 LOAD_CONST 1 ( 1 )					    9 46 LOAD_FAST 1 ( first )					  
							      46 BINARY_ADD						    48 LOAD_FAST 2 ( first )					  
							      48 STORE_FAST 3 ( number )				    50 LOAD_FAST 3 ( number )					  
							      50 JUMP_ABSOLUTE 18					    52 STORE_SUBSCR						  
							      >> 52 POP_BLOCK						    54 JUMP_ABSOLUTE 18						  
							      								    >> 56 POP_BLOCK						  
							      11 >> 54 LOAD_FAST 3 ( number )				    								  
							      56 RETURN_VALUE NEW_LINE					    10 >> 58 LOAD_FAST 1 ( first )				  
							      								    60 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
def printSeries ( n ) :					      Disassembly of <code object printSeries at 0x7f33e2653ed0, fi Disassembly of <code object printSeries at 0x7f2b0163dc90, fi script_not_found : None
    for i in range ( 1 , n + 1 ) :			      2 0 SETUP_LOOP 58 ( to 60 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	num = i * ( i + 1 ) * ( i + 2 ) // 6		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	print ( num , end = ' ' )			      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
							      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
							      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
							      10 BINARY_ADD						    10 BINARY_ADD						  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 40 ( to 58 )				    >> 16 FOR_ITER 68 ( to 76 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 1 ( i )					  
							      								    								  
							      3 20 LOAD_FAST 1 ( i )					    3 20 LOAD_FAST 1 ( i )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 0 ( n )					  
							      24 LOAD_CONST 1 ( 1 )					    24 LOAD_CONST 2 ( 1 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 BINARY_MULTIPLY					    28 BINARY_SUBSCR						  
							      30 LOAD_FAST 1 ( i )					    30 LOAD_FAST 1 ( i )					  
							      32 LOAD_CONST 2 ( 2 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_ADD						    34 BINARY_ADD						  
							      36 BINARY_MULTIPLY					    36 BINARY_SUBSCR						  
							      38 LOAD_CONST 3 ( 6 )					    38 LOAD_FAST 1 ( i )					  
							      40 BINARY_FLOOR_DIVIDE					    40 LOAD_CONST 2 ( 1 )					  
							      42 STORE_FAST 2 ( num )					    42 BINARY_ADD						  
							      								    44 BINARY_SUBSCR						  
							      4 44 LOAD_GLOBAL 1 ( print )				    46 LOAD_FAST 1 ( i )					  
							      46 LOAD_FAST 2 ( num )					    48 LOAD_CONST 2 ( 1 )					  
							      48 LOAD_CONST 4 ( ' ' )					    50 BINARY_ADD						  
							      50 LOAD_CONST 5 ( ( 'end' , ) )				    52 BINARY_SUBSCR						  
							      52 CALL_FUNCTION_KW 2					    54 LOAD_FAST 1 ( i )					  
							      54 POP_TOP						    56 LOAD_CONST 2 ( 1 )					  
							      56 JUMP_ABSOLUTE 16					    58 BINARY_ADD						  
							      >> 58 POP_BLOCK						    60 BINARY_SUBSCR						  
							      >> 60 LOAD_CONST 0 ( None )				    62 LOAD_FAST 1 ( i )					  
							      62 RETURN_VALUE NEW_LINE					    64 LOAD_CONST 2 ( 1 )					  
							      								    66 BINARY_ADD						  
							      								    68 BINARY_SUBSCR						  
							      								    70 BINARY_ADD						  
							      								    72 LOAD_FAST 1 ( i )					  
							      								    74 LOAD_CONST 2 ( 1 )					  
							      								    76 BINARY_ADD						  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 1 ( i )					  
							      								    82 LOAD_CONST 2 ( 1 )					  
							      								    84 BINARY_ADD						  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 1 ( i )					  
							      								    90 LOAD_CONST 2 ( 1 )					  
							      								    92 BINARY_ADD						  
							      								    94 BINARY_SUBSCR						  
							      								    96 BINARY_ADD						  
							      								    98 LOAD_FAST 1 ( i )					  
							      								    100 LOAD_CONST 2 ( 1 )					  
							      								    102 BINARY_ADD						  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_FAST 1 ( i )					  
							      								    108 LOAD_CONST 2 ( 1 )					  
							      								    110 BINARY_ADD						  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 1 ( i )					  
							      								    116 LOAD_CONST 2 ( 1 )					  
							      								    118 BINARY_ADD						  
							      								    120 STORE_SUBSCR						  
							      								    								  
							      								    4 122 LOAD_FAST 1 ( i )					  
							      								    124 RETURN_VALUE						  
							      								    >> 126 JUMP_ABSOLUTE 16					  
							      								    >> 128 POP_BLOCK						  
							      								    >> 130 LOAD_CONST 0 ( None )				  
							      								    132 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
def remainder ( st ) :					      Disassembly of <code object remainder at 0x7f33e26494b0, file Disassembly of <code object remainder at 0x7f2b0163dc90, file script_not_found : None
    ln = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    rem = 0						      2 LOAD_FAST 0 ( st )					    2 LOAD_FAST 0 ( st )					  
    for i in range ( 0 , ln ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	num = rem * 10 + ( int ) ( st [ i ] )		      6 STORE_FAST 1 ( ln )					    6 STORE_FAST 1 ( ln )					  
	rem = num % 11					      								    								  
    return rem						      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 STORE_FAST 2 ( rem )					    10 STORE_FAST 2 ( rem )					  
							      								    								  
							      4 12 SETUP_LOOP 46 ( to 60 )				    4 12 SETUP_LOOP 64 ( to 76 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_FAST 1 ( ln )					    18 LOAD_FAST 1 ( ln )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 32 ( to 58 )				    >> 24 FOR_ITER 48 ( to 74 )					  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 2 ( rem )					    5 28 LOAD_FAST 3 ( i )					  
							      30 LOAD_CONST 2 ( 10 )					    30 LOAD_CONST 3 ( 10 )					  
							      32 BINARY_MULTIPLY					    32 BINARY_MODULO						  
							      34 LOAD_GLOBAL 2 ( int )					    34 STORE_FAST 4 ( l )					  
							      36 LOAD_FAST 0 ( st )					    								  
							      38 LOAD_FAST 3 ( i )					    6 36 LOAD_FAST 2 ( rem )					  
							      40 BINARY_SUBSCR						    38 LOAD_FAST 4 ( l )					  
							      42 CALL_FUNCTION 1					    40 LOAD_FAST 3 ( i )					  
							      44 BINARY_ADD						    42 STORE_SUBSCR						  
							      46 STORE_FAST 4 ( num )					    								  
							      								    7 44 LOAD_FAST 2 ( rem )					  
							      6 48 LOAD_FAST 4 ( num )					    46 LOAD_FAST 4 ( l )					  
							      50 LOAD_CONST 3 ( 11 )					    48 LOAD_FAST 3 ( i )					  
							      52 BINARY_MODULO						    50 STORE_SUBSCR						  
							      54 STORE_FAST 2 ( rem )					    								  
							      56 JUMP_ABSOLUTE 24					    8 52 LOAD_FAST 2 ( rem )					  
							      >> 58 POP_BLOCK						    54 LOAD_FAST 3 ( i )					  
							      								    56 STORE_SUBSCR						  
							      7 >> 60 LOAD_FAST 2 ( rem )				    58 JUMP_ABSOLUTE 24						  
							      62 RETURN_VALUE NEW_LINE					    >> 60 POP_BLOCK						  
							      								    								  
							      								    9 >> 62 LOAD_FAST 2 ( rem )					  
							      								    64 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7f33e2653f60, file "<dis Disassembly of <code object fib at 0x7f2b01639660, file "<dis script_not_found : None
    if n < 6 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return f [ n ]					      2 LOAD_CONST 1 ( 6 )					    2 LOAD_CONST 1 ( 6 )					  
    t = 5						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    fn = 5						      6 POP_JUMP_IF_FALSE 16					    6 POP_JUMP_IF_FALSE 12					  
    while t < n :					      								    								  
	fn = round ( fn * PHI )				      3 8 LOAD_GLOBAL 0 ( f )					    3 8 LOAD_FAST 0 ( n )					  
	t += 1						      10 LOAD_FAST 0 ( n )					    10 LOAD_CONST 2 ( 1 )					  
    return fn						      12 BINARY_SUBSCR						    12 INPLACE_ADD						  
							      14 RETURN_VALUE						    14 STORE_FAST 0 ( n )					  
							      								    								  
							      4 >> 16 LOAD_CONST 2 ( 5 )				    4 16 LOAD_CONST 3 ( 5 )					  
							      18 STORE_FAST 1 ( t )					    18 STORE_FAST 0 ( n )					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 5 )					    5 20 SETUP_LOOP 50 ( to 70 )				  
							      22 STORE_FAST 2 ( fn )					    >> 22 LOAD_FAST 0 ( n )					  
							      								    24 LOAD_CONST 1 ( 6 )					  
							      6 24 SETUP_LOOP 32 ( to 58 )				    26 COMPARE_OP 0 ( < )					  
							      >> 26 LOAD_FAST 1 ( t )					    28 POP_JUMP_IF_FALSE 48					  
							      28 LOAD_FAST 0 ( n )					    								  
							      30 COMPARE_OP 0 ( < )					    6 30 LOAD_FAST 0 ( n )					  
							      32 POP_JUMP_IF_FALSE 56					    32 LOAD_CONST 1 ( 6 )					  
							      								    34 BINARY_MODULO						  
							      7 34 LOAD_GLOBAL 1 ( round )				    36 STORE_FAST 0 ( n )					  
							      36 LOAD_FAST 2 ( fn )					    								  
							      38 LOAD_GLOBAL 2 ( PHI )					    7 38 LOAD_FAST 0 ( n )					  
							      40 BINARY_MULTIPLY					    40 LOAD_CONST 1 ( 6 )					  
							      42 CALL_FUNCTION 1					    42 INPLACE_ADD						  
							      44 STORE_FAST 2 ( fn )					    44 STORE_FAST 0 ( n )					  
							      								    46 JUMP_ABSOLUTE 22						  
							      8 46 LOAD_FAST 1 ( t )					    								  
							      48 LOAD_CONST 3 ( 1 )					    8 >> 48 LOAD_FAST 0 ( n )					  
							      50 INPLACE_ADD						    50 LOAD_CONST 1 ( 6 )					  
							      52 STORE_FAST 1 ( t )					    52 BINARY_MODULO						  
							      54 JUMP_ABSOLUTE 26					    54 STORE_FAST 0 ( n )					  
							      >> 56 POP_BLOCK						    								  
							      								    9 56 LOAD_FAST 0 ( n )					  
							      9 >> 58 LOAD_FAST 2 ( fn )				    58 LOAD_CONST 1 ( 6 )					  
							      60 RETURN_VALUE NEW_LINE					    60 BINARY_MODULO						  
							      								    62 INPLACE_ADD						  
							      								    64 STORE_FAST 0 ( n )					  
							      								    								  
							      								    10 66 LOAD_FAST 0 ( n )					  
							      								    68 LOAD_CONST 1 ( 6 )					  
							      								    70 INPLACE_ADD						  
							      								    72 STORE_FAST 0 ( n )					  
							      								    								  
							      								    11 74 LOAD_FAST 0 ( n )					  
							      								    76 LOAD_CONST 1 ( 6 )					  
							      								    78 INPLACE_ADD						  
							      								    80 STORE_FAST 0 ( n )					  
							      								    								  
							      								    12 82 LOAD_FAST 0 ( n )					  
							      								    84 LOAD_CONST 1 ( 6 )					  
							      								    86 INPLACE_ADD						  
							      								    88 STORE_FAST 0 ( n )					  
							      								    								  
							      								    13 90 LOAD_FAST 0 ( n )					  
							      								    92 LOAD_CONST 1 ( 6 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 0 ( n )					  
							      								    								  
							      								    14 98 LOAD_FAST 0 ( n )					  
							      								    100 LOAD_CONST 1 ( 6 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 0 ( n )					  
							      								    								  
							      								    15 106 LOAD_FAST 0 ( n )					  
							      								    108 LOAD_CONST 1 ( 6 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 0 ( n )					  
							      								    114 JUMP_ABSOLUTE 22					  
							      								    >> 116 POP_BLOCK						  
							      								    								  
							      								    16 >> 118 LOAD_FAST 0 ( n )					  
							      								    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	      CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION	    CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION		  CALCULATING_FACTORIALS_USING_STIRLING_<unk> IMATION
--							      --							    --								  --
def stirlingFactorial ( n ) :				      Disassembly of <code object stirlingFactorial at 0x7f33e26491 Disassembly of <code object stirlingFactorial at 0x7f2b016396 script_not_found : None
    if ( n == 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1 ;					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    e = 2.71 ;						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    z = ( math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , 6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    return math.floor ( z ) ;				      								    								  
							      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_CONST 2 ( 2.71 )				    4 >> 12 LOAD_CONST 2 ( 2.71 )				  
							      14 STORE_FAST 1 ( e )					    14 RETURN_VALUE						  
							      								    								  
							      5 16 LOAD_GLOBAL 0 ( math )				    5 >> 16 LOAD_CONST 3 ( 2.71 )				  
							      18 LOAD_METHOD 1 ( sqrt )					    18 RETURN_VALUE						  
							      20 LOAD_CONST 3 ( 6.28 )					    20 LOAD_CONST 0 ( None )					  
							      22 LOAD_FAST 0 ( n )					    22 RETURN_VALUE						  
							      24 BINARY_MULTIPLY					    24 LOAD_CONST 0 ( None )					  
							      26 CALL_METHOD 1						    26 RETURN_VALUE NEW_LINE					  
							      28 LOAD_GLOBAL 0 ( math )					    								  
							      30 LOAD_METHOD 2 ( pow )					    								  
							      32 LOAD_FAST 0 ( n )					    								  
							      34 LOAD_FAST 1 ( e )					    								  
							      36 BINARY_TRUE_DIVIDE					    								  
							      38 LOAD_FAST 0 ( n )					    								  
							      40 CALL_METHOD 2						    								  
							      42 BINARY_MULTIPLY					    								  
							      44 STORE_FAST 2 ( z )					    								  
							      								    								  
							      6 46 LOAD_GLOBAL 0 ( math )				    								  
							      48 LOAD_METHOD 3 ( floor )				    								  
							      50 LOAD_FAST 2 ( z )					    								  
							      52 CALL_METHOD 1						    								  
							      54 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_<unk> ASI
--							      --							    --								  --
def findMaximum ( arr , low , high ) :			      Disassembly of <code object findMaximum at 0x7f33e26494b0, fi Disassembly of <code object findMaximum at 0x7f2b0163dc90, fi script_not_found : None
    max = arr [ low ]					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    i = low						      2 LOAD_FAST 1 ( low )					    2 LOAD_FAST 1 ( low )					  
    for i in range ( high + 1 ) :			      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
	if arr [ i ] > max :				      6 STORE_FAST 3 ( max )					    6 STORE_FAST 2 ( max )					  
	    max = arr [ i ]				      								    								  
    return max						      3 8 LOAD_FAST 1 ( low )					    3 8 LOAD_FAST 2 ( max )					  
							      10 STORE_FAST 4 ( i )					    10 LOAD_FAST 2 ( max )					  
							      								    12 LOAD_FAST 3 ( high )					  
							      4 12 SETUP_LOOP 40 ( to 54 )				    14 BINARY_SUBSCR						  
							      14 LOAD_GLOBAL 0 ( range )				    16 STORE_FAST 4 ( max )					  
							      16 LOAD_FAST 2 ( high )					    								  
							      18 LOAD_CONST 1 ( 1 )					    4 18 SETUP_LOOP 64 ( to 76 )				  
							      20 BINARY_ADD						    20 LOAD_GLOBAL 0 ( range )					  
							      22 CALL_FUNCTION 1					    22 LOAD_FAST 2 ( max )					  
							      24 GET_ITER						    24 LOAD_FAST 3 ( high )					  
							      >> 26 FOR_ITER 24 ( to 52 )				    26 CALL_FUNCTION 2						  
							      28 STORE_FAST 4 ( i )					    28 GET_ITER							  
							      								    >> 30 FOR_ITER 48 ( to 74 )					  
							      5 30 LOAD_FAST 0 ( arr )					    32 STORE_FAST 5 ( i )					  
							      32 LOAD_FAST 4 ( i )					    								  
							      34 BINARY_SUBSCR						    5 34 LOAD_FAST 0 ( arr )					  
							      36 LOAD_FAST 3 ( max )					    36 LOAD_FAST 5 ( i )					  
							      38 COMPARE_OP 4 ( > )					    38 BINARY_SUBSCR						  
							      40 POP_JUMP_IF_FALSE 26					    40 LOAD_FAST 1 ( low )					  
							      								    42 BINARY_SUBSCR						  
							      6 42 LOAD_FAST 0 ( arr )					    44 LOAD_FAST 2 ( max )					  
							      44 LOAD_FAST 4 ( i )					    46 LOAD_FAST 3 ( high )					  
							      46 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      48 STORE_FAST 3 ( max )					    50 LOAD_FAST 1 ( low )					  
							      50 JUMP_ABSOLUTE 26					    52 BINARY_SUBSCR						  
							      >> 52 POP_BLOCK						    54 LOAD_FAST 1 ( high )					  
							      								    56 LOAD_FAST 2 ( max )					  
							      7 >> 54 LOAD_FAST 3 ( max )				    58 LOAD_FAST 3 ( high )					  
							      56 RETURN_VALUE NEW_LINE					    60 BINARY_SUBSCR						  
							      								    62 LOAD_FAST 4 ( max )					  
							      								    64 LOAD_FAST 3 ( high )					  
							      								    66 BINARY_SUBSCR						  
							      								    68 LOAD_FAST 4 ( max )					  
							      								    70 LOAD_FAST 3 ( high )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_FAST 4 ( max )					  
							      								    76 LOAD_FAST 3 ( high )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 4 ( max )					  
							      								    82 LOAD_FAST 3 ( high )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 5 ( i )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 4 ( max )					  
							      								    92 LOAD_FAST 3 ( high )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 4 ( max )					  
							      								    98 LOAD_FAST 3 ( high )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    6 102 LOAD_FAST 4 ( max )					  
							      								    104 LOAD_FAST 3 ( high )					  
							      								    106 LOAD_FAST 3 ( high )					  
							      								    108 STORE_SUBSCR						  
							      								    								  
							      								    7 110 LOAD_FAST 4 ( max )					  
							      								    112 LOAD_FAST 3 ( high )					  
							      								    114 STORE_SUBSCR						  
							      								    116 JUMP_ABSOLUTE 30					  
							      								    >> 118 POP_BLOCK						  
							      								    								  
							      								    8 >> 120 LOAD_FAST 2 ( max )				  
							      								    122 LOAD_FAST 3 ( high )					  
							      								    124 LOAD_FAST 3 ( high )					  
							      								    126 STORE_SUBSCR						  
							      								    								  
							      								    9 128 LOAD_FAST 2 ( max )					  
							      								    130 LOAD_FAST 3 ( high )					  
							      								    132 LOAD_FAST 3 ( high )					  
							      								    134 STORE_SUBSCR						  
							      								    								  
							      								    10 136 LOAD_FAST 2 ( max )					  
							      								    138 LOAD_FAST 3 ( high )					  
							      								    140 STORE_SUBSCR						  
							      								    142 JUMP_ABSOLUTE 30					  
							      								    >> 144 POP_BLOCK						  
							      								    								  
							      								    11 >> 146 LOAD_FAST 2 ( max )				  
							      								    148 LOAD_FAST 3 ( high )					  
							      								    150 STORE_SUBSCR						  
							      								    								  
							      								    12 152 LOAD_FAST 2 ( max )					  
							      								    154 LOAD_FAST 3 ( high )					  
							      								    156 STORE_SUBSCR						  
							      								    								  
							      								    13 154 LOAD_FAST 2 ( max )					  
							      								    156 LOAD_FAST 3 ( high )					  
							      								    158 STORE_SUBSCR						  
							      								    								  
							      								    14 160 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
def MaximumHeight ( a , n ) :				      Disassembly of <code object MaximumHeight at 0x7f33e2649a50,  Disassembly of <code object MaximumHeight at 0x7f2b0163dc90,  error : Traceback (most recent call last):   File
    result = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 1 , n ) :				      2 STORE_FAST 2 ( result )					    2 STORE_FAST 2 ( result )					  (item)   File "main.py", line 35, in <module>	  Fi
	y = ( i * ( i + 1 ) ) / 2			      								    								  le "<dis>", line 2, in MaximumHeight TypeError: 'l
	if ( y < n ) :					      3 4 SETUP_LOOP 50 ( to 56 )				    3 4 SETUP_LOOP 74 ( to 76 )					  ist' object cannot be interpreted as an integer
	    result = i					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	else :						      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
	    break					      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( a )					  
    return result					      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 36 ( to 54 )				    >> 16 FOR_ITER 74 ( to 74 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 3 ( i )					    4 20 LOAD_FAST 3 ( i )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 1 ( n )					  
							      24 LOAD_CONST 1 ( 1 )					    24 COMPARE_OP 0 ( < )					  
							      26 BINARY_ADD						    26 POP_JUMP_IF_FALSE 32					  
							      28 BINARY_MULTIPLY					    								  
							      30 LOAD_CONST 2 ( 2 )					    5 28 LOAD_FAST 2 ( result )					  
							      32 BINARY_TRUE_DIVIDE					    30 LOAD_FAST 3 ( i )					  
							      34 STORE_FAST 4 ( y )					    32 BINARY_SUBSCR						  
							      								    34 STORE_FAST 2 ( result )					  
							      5 36 LOAD_FAST 4 ( y )					    								  
							      38 LOAD_FAST 1 ( n )					    6 >> 36 LOAD_FAST 2 ( result )				  
							      40 COMPARE_OP 0 ( < )					    38 LOAD_FAST 1 ( n )					  
							      42 POP_JUMP_IF_FALSE 50					    40 COMPARE_OP 0 ( < )					  
							      								    42 POP_JUMP_IF_FALSE 16					  
							      6 44 LOAD_FAST 3 ( i )					    								  
							      46 STORE_FAST 2 ( result )				    7 44 LOAD_FAST 2 ( result )					  
							      48 JUMP_ABSOLUTE 16					    46 LOAD_FAST 3 ( i )					  
							      								    48 BINARY_SUBSCR						  
							      8 >> 50 BREAK_LOOP					    50 STORE_FAST 2 ( result )					  
							      52 JUMP_ABSOLUTE 16					    								  
							      >> 54 POP_BLOCK						    8 52 LOAD_FAST 2 ( result )					  
							      								    54 LOAD_FAST 3 ( i )					  
							      9 >> 56 LOAD_FAST 2 ( result )				    56 BINARY_SUBSCR						  
							      58 RETURN_VALUE NEW_LINE					    58 LOAD_FAST 2 ( result )					  
							      								    60 COMPARE_OP 4 ( > )					  
							      								    62 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    9 64 LOAD_FAST 2 ( result )					  
							      								    66 LOAD_FAST 3 ( i )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 2 ( result )					  
							      								    72 LOAD_FAST 3 ( i )					  
							      								    74 STORE_SUBSCR						  
							      								    76 JUMP_ABSOLUTE 16						  
							      								    >> 78 POP_BLOCK						  
							      								    								  
							      								    10 >> 80 LOAD_FAST 2 ( result )				  
							      								    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
def floorSqrt ( x ) :					      Disassembly of <code object floorSqrt at 0x7f33e2644f60, file Disassembly of <code object floorSqrt at 0x7f2b0163dc90, file error : /bin/bash: line 1: 11914 Segmentation faul
    if ( x == 0 or x == 1 ) :				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return x					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    i = 1 ; result = 1					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    while ( result <= x ) :				      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  24/eval_scripts/python_sa-dis_sa.valid/SQUARE_ROOT
	i += 1						      8 LOAD_FAST 0 ( x )					    								  _OF_AN_INTEGER.dis
	result = i * i					      10 LOAD_CONST 2 ( 1 )					    3 8 LOAD_FAST 0 ( x )					  
    return i - 1					      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_FAST 0 ( x )					  
							      3 >> 16 LOAD_FAST 0 ( x )					    14 LOAD_CONST 2 ( 1 )					  
							      18 RETURN_VALUE						    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 24					  
							      4 >> 20 LOAD_CONST 2 ( 1 )				    								  
							      22 STORE_FAST 1 ( i )					    5 20 LOAD_FAST 0 ( x )					  
							      24 LOAD_CONST 2 ( 1 )					    22 RETURN_VALUE						  
							      26 STORE_FAST 2 ( result )				    								  
							      								    6 >> 24 LOAD_CONST 3 ( 1 )					  
							      5 28 SETUP_LOOP 28 ( to 58 )				    26 RETURN_VALUE						  
							      >> 30 LOAD_FAST 2 ( result )				    								  
							      32 LOAD_FAST 0 ( x )					    7 >> 28 LOAD_CONST 1 ( 0 )					  
							      34 COMPARE_OP 1 ( <= )					    30 RETURN_VALUE						  
							      36 POP_JUMP_IF_FALSE 56					    32 LOAD_CONST 0 ( None )					  
							      								    34 RETURN_VALUE NEW_LINE					  
							      6 38 LOAD_FAST 1 ( i )					    								  
							      40 LOAD_CONST 2 ( 1 )					    								  
							      42 INPLACE_ADD						    								  
							      44 STORE_FAST 1 ( i )					    								  
							      								    								  
							      7 46 LOAD_FAST 1 ( i )					    								  
							      48 LOAD_FAST 1 ( i )					    								  
							      50 BINARY_MULTIPLY					    								  
							      52 STORE_FAST 2 ( result )				    								  
							      54 JUMP_ABSOLUTE 30					    								  
							      >> 56 POP_BLOCK						    								  
							      								    								  
							      8 >> 58 LOAD_FAST 1 ( i )					    								  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 BINARY_SUBTRACT					    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      Disassembly of <code object nextPowerOf2 at 0x7f33e26494b0, f Disassembly of <code object nextPowerOf2 at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    count = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    if ( n and not ( n & ( n - 1 ) ) ) :		      2 STORE_FAST 1 ( count )					    2 STORE_FAST 1 ( count )					  (item)   File "main.py", line 34, in <module>	  Fi
	return n					      								    								  le "<dis>", line 2, in nextPowerOf2 NameError: nam
    while ( n != 0 ) :					      3 4 LOAD_FAST 0 ( n )					    3 4 LOAD_FAST 0 ( n )					  e '( n' is not defined
	n >>= 1						      6 POP_JUMP_IF_FALSE 24					    6 POP_JUMP_IF_FALSE 32					  
	count += 1					      8 LOAD_FAST 0 ( n )					    								  
    return 1 << count ;					      10 LOAD_FAST 0 ( n )					    4 8 LOAD_GLOBAL 0 ( ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    10 LOAD_FAST 0 ( n )					  
							      14 BINARY_SUBTRACT					    12 LOAD_CONST 2 ( 1 )					  
							      16 BINARY_AND						    14 BINARY_SUBTRACT						  
							      18 POP_JUMP_IF_TRUE 24					    16 CALL_FUNCTION 1						  
							      								    18 STORE_FAST 1 ( count )					  
							      4 20 LOAD_FAST 0 ( n )					    								  
							      22 RETURN_VALUE						    5 20 LOAD_FAST 1 ( count )					  
							      								    22 LOAD_CONST 3 ( 0 )					  
							      5 >> 24 SETUP_LOOP 28 ( to 54 )				    24 COMPARE_OP 3 ( != )					  
							      >> 26 LOAD_FAST 0 ( n )					    26 POP_JUMP_IF_FALSE 32					  
							      28 LOAD_CONST 1 ( 0 )					    								  
							      30 COMPARE_OP 3 ( != )					    6 28 LOAD_CONST 1 ( 0 )					  
							      32 POP_JUMP_IF_FALSE 52					    30 RETURN_VALUE						  
							      								    								  
							      6 34 LOAD_FAST 0 ( n )					    7 >> 32 LOAD_FAST 1 ( count )				  
							      36 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 3 ( 0 )					  
							      38 INPLACE_RSHIFT						    36 COMPARE_OP 3 ( != )					  
							      40 STORE_FAST 0 ( n )					    38 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      7 42 LOAD_FAST 1 ( count )				    8 40 LOAD_CONST 1 ( 0 )					  
							      44 LOAD_CONST 2 ( 1 )					    42 RETURN_VALUE						  
							      46 INPLACE_ADD						    								  
							      48 STORE_FAST 1 ( count )					    9 >> 44 LOAD_FAST 1 ( count )				  
							      50 JUMP_ABSOLUTE 26					    46 LOAD_CONST 3 ( 0 )					  
							      >> 52 POP_BLOCK						    48 COMPARE_OP 3 ( != )					  
							      								    50 POP_JUMP_IF_FALSE 64					  
							      8 >> 54 LOAD_CONST 2 ( 1 )				    								  
							      56 LOAD_FAST 1 ( count )					    10 52 LOAD_CONST 1 ( 0 )					  
							      58 BINARY_LSHIFT						    54 RETURN_VALUE						  
							      60 RETURN_VALUE NEW_LINE					    								  
							      								    11 >> 56 LOAD_CONST 1 ( 0 )					  
							      								    58 RETURN_VALUE						  
							      								    								  
							      								    12 >> 60 LOAD_CONST 1 ( 0 )					  
							      								    62 RETURN_VALUE						  
							      								    								  
							      								    13 >> 64 LOAD_CONST 1 ( 0 )					  
							      								    66 RETURN_VALUE						  
							      								    68 LOAD_CONST 0 ( None )					  
							      								    70 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
def isTriangular ( num ) :				      Disassembly of <code object isTriangular at 0x7f33e2649a50, f Disassembly of <code object isTriangular at 0x7f2b01639660, f failure : #Results: 1, 10
    if ( num < 0 ) :					      2 0 LOAD_FAST 0 ( num )					    2 0 LOAD_FAST 0 ( num )					  
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    sum , n = 0 , 1					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    while ( sum <= num ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	sum = sum + n					      								    								  
	if ( sum == num ) :				      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
	    return True					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	n += 1						      								    								  
    return False					      4 >> 12 LOAD_CONST 3 ( ( 0 , 1 ) )			    4 >> 12 LOAD_FAST 0 ( num )					  
							      14 UNPACK_SEQUENCE 2					    14 LOAD_CONST 1 ( 0 )					  
							      16 STORE_FAST 1 ( sum )					    16 COMPARE_OP 0 ( < )					  
							      18 STORE_FAST 2 ( n )					    18 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      5 20 SETUP_LOOP 40 ( to 62 )				    5 20 LOAD_CONST 3 ( False )					  
							      >> 22 LOAD_FAST 1 ( sum )					    22 RETURN_VALUE						  
							      24 LOAD_FAST 0 ( num )					    								  
							      26 COMPARE_OP 1 ( <= )					    6 >> 24 LOAD_FAST 0 ( num )					  
							      28 POP_JUMP_IF_FALSE 60					    26 LOAD_CONST 1 ( 0 )					  
							      								    28 COMPARE_OP 0 ( < )					  
							      6 30 LOAD_FAST 1 ( sum )					    30 POP_JUMP_IF_FALSE 36					  
							      32 LOAD_FAST 2 ( n )					    								  
							      34 BINARY_ADD						    7 32 LOAD_CONST 4 ( True )					  
							      36 STORE_FAST 1 ( sum )					    34 RETURN_VALUE						  
							      								    								  
							      7 38 LOAD_FAST 1 ( sum )					    8 >> 36 LOAD_FAST 0 ( num )					  
							      40 LOAD_FAST 0 ( num )					    38 LOAD_CONST 1 ( 0 )					  
							      42 COMPARE_OP 2 ( == )					    40 COMPARE_OP 0 ( < )					  
							      44 POP_JUMP_IF_FALSE 50					    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      8 46 LOAD_CONST 4 ( True )				    9 44 LOAD_CONST 5 ( False )					  
							      48 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      9 >> 50 LOAD_FAST 2 ( n )					    10 >> 48 LOAD_FAST 0 ( num )				  
							      52 LOAD_CONST 5 ( 1 )					    50 LOAD_CONST 1 ( 0 )					  
							      54 INPLACE_ADD						    52 COMPARE_OP 0 ( < )					  
							      56 STORE_FAST 2 ( n )					    54 POP_JUMP_IF_FALSE 64					  
							      58 JUMP_ABSOLUTE 22					    								  
							      >> 60 POP_BLOCK						    11 56 LOAD_CONST 6 ( True )					  
							      								    58 RETURN_VALUE						  
							      10 >> 62 LOAD_CONST 2 ( False )				    								  
							      64 RETURN_VALUE NEW_LINE					    12 >> 60 LOAD_FAST 0 ( num )				  
							      								    62 LOAD_CONST 1 ( 0 )					  
							      								    64 COMPARE_OP 0 ( < )					  
							      								    66 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      								    13 68 LOAD_CONST 7 ( True )					  
							      								    70 RETURN_VALUE						  
							      								    								  
							      								    14 >> 72 LOAD_CONST 8 ( False )				  
							      								    74 RETURN_VALUE						  
							      								    76 LOAD_CONST 0 ( None )					  
							      								    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2  SUM_MATRIX_ELEMENT_<unk> UTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
def findSum ( n ) :					      Disassembly of <code object findSum at 0x7f33e26494b0, file " Disassembly of <code object findSum at 0x7f2b01639660, file " script_not_found : None
    n -= 1						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_CONST 1 ( 0 )					  
    sum = 0						      2 LOAD_CONST 1 ( 1 )					    2 STORE_FAST 1 ( n )					  
    sum += ( n * ( n + 1 ) ) / 2			      4 INPLACE_SUBTRACT					    								  
    sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6	      6 STORE_FAST 0 ( n )					    3 4 LOAD_CONST 1 ( 0 )					  
    return int ( sum )					      								    6 STORE_FAST 2 ( n )					  
							      3 8 LOAD_CONST 2 ( 0 )					    								  
							      10 STORE_FAST 1 ( sum )					    4 8 LOAD_GLOBAL 0 ( sum )					  
							      								    10 LOAD_FAST 0 ( n )					  
							      4 12 LOAD_FAST 1 ( sum )					    12 LOAD_FAST 1 ( n )					  
							      14 LOAD_FAST 0 ( n )					    14 LOAD_CONST 2 ( 1 )					  
							      16 LOAD_FAST 0 ( n )					    16 BINARY_ADD						  
							      18 LOAD_CONST 1 ( 1 )					    18 CALL_FUNCTION 2						  
							      20 BINARY_ADD						    20 LOAD_FAST 2 ( n )					  
							      22 BINARY_MULTIPLY					    22 LOAD_CONST 2 ( 1 )					  
							      24 LOAD_CONST 3 ( 2 )					    24 BINARY_SUBTRACT						  
							      26 BINARY_TRUE_DIVIDE					    26 BINARY_MULTIPLY						  
							      28 INPLACE_ADD						    28 LOAD_FAST 0 ( n )					  
							      30 STORE_FAST 1 ( sum )					    30 LOAD_CONST 2 ( 1 )					  
							      								    32 BINARY_SUBTRACT						  
							      5 32 LOAD_FAST 1 ( sum )					    34 BINARY_MULTIPLY						  
							      34 LOAD_FAST 0 ( n )					    36 LOAD_FAST 0 ( n )					  
							      36 LOAD_FAST 0 ( n )					    38 LOAD_CONST 2 ( 1 )					  
							      38 LOAD_CONST 1 ( 1 )					    40 BINARY_SUBTRACT						  
							      40 BINARY_ADD						    42 BINARY_MULTIPLY						  
							      42 BINARY_MULTIPLY					    44 BINARY_SUBTRACT						  
							      44 LOAD_CONST 3 ( 2 )					    46 LOAD_FAST 0 ( n )					  
							      46 LOAD_FAST 0 ( n )					    48 LOAD_CONST 2 ( 1 )					  
							      48 BINARY_MULTIPLY					    50 BINARY_SUBTRACT						  
							      50 LOAD_CONST 1 ( 1 )					    52 BINARY_MULTIPLY						  
							      52 BINARY_ADD						    54 LOAD_FAST 0 ( n )					  
							      54 BINARY_MULTIPLY					    56 LOAD_CONST 2 ( 1 )					  
							      56 LOAD_CONST 4 ( 6 )					    58 BINARY_SUBTRACT						  
							      58 BINARY_TRUE_DIVIDE					    60 BINARY_MULTIPLY						  
							      60 INPLACE_ADD						    62 BINARY_SUBTRACT						  
							      62 STORE_FAST 1 ( sum )					    64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_CONST 2 ( 1 )					  
							      6 64 LOAD_GLOBAL 0 ( int )				    68 BINARY_SUBTRACT						  
							      66 LOAD_FAST 1 ( sum )					    70 BINARY_MULTIPLY						  
							      68 CALL_FUNCTION 1					    72 BINARY_SUBTRACT						  
							      70 RETURN_VALUE NEW_LINE					    74 LOAD_FAST 0 ( n )					  
							      								    76 LOAD_CONST 2 ( 1 )					  
							      								    78 BINARY_SUBTRACT						  
							      								    80 BINARY_MULTIPLY						  
							      								    82 BINARY_SUBTRACT						  
							      								    84 LOAD_FAST 0 ( n )					  
							      								    86 LOAD_CONST 2 ( 1 )					  
							      								    88 BINARY_SUBTRACT						  
							      								    90 BINARY_MULTIPLY						  
							      								    92 BINARY_SUBTRACT						  
							      								    94 LOAD_FAST 0 ( n )					  
							      								    96 LOAD_CONST 2 ( 1 )					  
							      								    98 BINARY_SUBTRACT						  
							      								    100 BINARY_MULTIPLY						  
							      								    102 BINARY_SUBTRACT						  
							      								    104 LOAD_FAST 0 ( n )					  
							      								    106 LOAD_CONST 2 ( 1 )					  
							      								    108 BINARY_SUBTRACT						  
							      								    110 BINARY_MULTIPLY						  
							      								    112 BINARY_SUBTRACT						  
							      								    114 LOAD_FAST 0 ( n )					  
							      								    116 LOAD_CONST 2 ( 1 )					  
							      								    118 BINARY_SUBTRACT						  
							      								    120 BINARY_MULTIPLY						  
							      								    122 BINARY_SUBTRACT						  
							      								    124 LOAD_FAST 0 ( n )					  
							      								    126 LOAD_CONST 2 ( 1 )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 BINARY_MULTIPLY						  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 0 ( n )					  
							      								    136 LOAD_CONST 2 ( 1 )					  
							      								    138 BINARY_SUBTRACT						  
							      								    140 BINARY_MULTIPLY						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 0 ( n )					  
							      								    146 LOAD_CONST 2 ( 1 )					  
							      								    148 BINARY_SUBTRACT						  
							      								    150 BINARY_MULTIPLY						  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 0 ( n )					  
							      								    156 LOAD_CONST 2 ( 1 )					  
							      								    158 BINARY_SUBTRACT						  
							      								    160 BINARY_TRUE_DIVIDE					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 LOAD_FAST 0 ( n )					  
							      								    166 LOAD_CONST 2 ( 1 )					  
							      								    168 BINARY_SUBTRACT						  
							      								    170 BINARY_TRUE_DIVIDE					  
							      								    172 BINARY_SUBTRACT						  
							      								    174 LOAD_FAST 0 ( n )					  
							      								    176 LOAD_CONST 2 ( 1 )					  
							      								    178 BINARY_SUBTRACT						  
							      								    180 LOAD_FAST 0 ( n )					  
							      								    182 LOAD_CONST 2 ( 1 )					  
							      								    184 BINARY_SUBTRACT						  
							      								    186 BINARY_SUBTRACT						  
							      								    188 LOAD_FAST 0 ( n )					  
							      								    190 LOAD_FAST 1 ( n )					  
							      								    192 LOAD_CONST 2 ( 1 )					  
							      								    194 BINARY_SUBTRACT						  
							      								    196 BINARY_MULTIPLY						  
							      								    198 BINARY_SUBTRACT						  
							      								    200 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
def isDivisible ( str , k ) :				      Disassembly of <code object isDivisible at 0x7f33e2644930, fi Disassembly of <code object isDivisible at 0x7f2b0163dc90, fi script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    c = 0						      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    for i in range ( 0 , k ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	if ( str [ n - i - 1 ] == '0' ) :		      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  
	    c += 1					      								    								  
    return ( c == k )					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 STORE_FAST 3 ( c )					    10 STORE_FAST 3 ( c )					  
							      								    								  
							      4 12 SETUP_LOOP 46 ( to 60 )				    4 12 SETUP_LOOP 64 ( to 78 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
							      18 LOAD_FAST 1 ( k )					    18 LOAD_FAST 1 ( k )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 32 ( to 58 )				    >> 24 FOR_ITER 48 ( to 76 )					  
							      26 STORE_FAST 4 ( i )					    26 STORE_FAST 4 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 0 ( str )					    5 28 LOAD_FAST 0 ( str )					  
							      30 LOAD_FAST 2 ( n )					    30 LOAD_FAST 4 ( i )					  
							      32 LOAD_FAST 4 ( i )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBTRACT					    34 LOAD_METHOD 2 ( lower )					  
							      36 LOAD_CONST 2 ( 1 )					    36 CALL_METHOD 0						  
							      38 BINARY_SUBTRACT					    38 COMPARE_OP 6 ( in )					  
							      40 BINARY_SUBSCR						    40 POP_JUMP_IF_FALSE 24					  
							      42 LOAD_CONST 3 ( '0' )					    								  
							      44 COMPARE_OP 2 ( == )					    6 42 LOAD_FAST 0 ( str )					  
							      46 POP_JUMP_IF_FALSE 24					    44 LOAD_FAST 4 ( i )					  
							      								    46 BINARY_SUBSCR						  
							      6 48 LOAD_FAST 3 ( c )					    48 LOAD_METHOD 2 ( lower )					  
							      50 LOAD_CONST 2 ( 1 )					    50 CALL_METHOD 0						  
							      52 INPLACE_ADD						    52 LOAD_FAST 4 ( i )					  
							      54 STORE_FAST 3 ( c )					    54 BINARY_SUBSCR						  
							      56 JUMP_ABSOLUTE 24					    56 LOAD_METHOD 2 ( lower )					  
							      >> 58 POP_BLOCK						    58 CALL_METHOD 0						  
							      								    60 LOAD_FAST 4 ( i )					  
							      7 >> 60 LOAD_FAST 3 ( c )					    62 BINARY_SUBSCR						  
							      62 LOAD_FAST 1 ( k )					    64 LOAD_METHOD 2 ( lower )					  
							      64 COMPARE_OP 2 ( == )					    66 CALL_METHOD 0						  
							      66 RETURN_VALUE NEW_LINE					    68 COMPARE_OP 6 ( in )					  
							      								    70 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    7 72 LOAD_FAST 0 ( str )					  
							      								    74 LOAD_FAST 4 ( i )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_METHOD 2 ( lower )					  
							      								    80 CALL_METHOD 0						  
							      								    82 LOAD_FAST 4 ( i )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_METHOD 2 ( lower )					  
							      								    88 CALL_METHOD 0						  
							      								    90 LOAD_FAST 4 ( i )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_METHOD 2 ( lower )					  
							      								    96 CALL_METHOD 0						  
							      								    98 COMPARE_OP 6 ( in )					  
							      								    100 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    8 102 LOAD_FAST 0 ( str )					  
							      								    104 LOAD_FAST 4 ( i )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_METHOD 2 ( lower )					  
							      								    110 CALL_METHOD 0						  
							      								    112 LOAD_FAST 4 ( i )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_METHOD 2 ( lower )					  
							      								    118 CALL_METHOD 0						  
							      								    120 COMPARE_OP 6 ( in )					  
							      								    122 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    9 124 LOAD_FAST 0 ( str )					  
							      								    126 LOAD_FAST 4 ( i )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_METHOD 2 ( lower )					  
							      								    132 CALL_METHOD 0						  
							      								    134 LOAD_FAST 4 ( i )					  
							      								    136 STORE_SUBSCR						  
							      								    138 JUMP_ABSOLUTE 24					  
							      								    >> 140 POP_BLOCK						  
							      								    								  
							      								    10 >> 142 LOAD_FAST 3 ( c )					  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED     MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PR<unk> CT_TWO_<unk> YS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
def minValue ( A , B , n ) :				      Disassembly of <code object minValue at 0x7f33e2653ed0, file  Disassembly of <code object minValue at 0x7f2b0163dc90, file  script_not_found : None
    sorted ( A )					      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  
    sorted ( B )					      2 LOAD_FAST 0 ( A )					    2 LOAD_FAST 0 ( A )						  
    result = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( n ) :				      6 POP_TOP							    6 STORE_FAST 1 ( sorted )					  
	result += ( A [ i ] * B [ n - i - 1 ] )		      								    								  
    return result					      3 8 LOAD_GLOBAL 0 ( sorted )				    3 8 LOAD_GLOBAL 1 ( sorted )				  
							      10 LOAD_FAST 1 ( B )					    10 LOAD_FAST 1 ( sorted )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 POP_TOP						    14 STORE_FAST 2 ( result )					  
							      								    								  
							      4 16 LOAD_CONST 1 ( 0 )					    4 16 SETUP_LOOP 40 ( to 56 )				  
							      18 STORE_FAST 3 ( result )				    >> 18 LOAD_FAST 2 ( result )				  
							      								    20 POP_JUMP_IF_FALSE 54					  
							      5 20 SETUP_LOOP 44 ( to 66 )				    								  
							      22 LOAD_GLOBAL 1 ( range )				    5 22 LOAD_FAST 1 ( sorted )					  
							      24 LOAD_FAST 2 ( n )					    24 LOAD_FAST 0 ( A )					  
							      26 CALL_FUNCTION 1					    26 BINARY_SUBSCR						  
							      28 GET_ITER						    28 LOAD_FAST 1 ( sorted )					  
							      >> 30 FOR_ITER 32 ( to 64 )				    30 COMPARE_OP 6 ( in )					  
							      32 STORE_FAST 4 ( i )					    32 POP_JUMP_IF_FALSE 54					  
							      								    								  
							      6 34 LOAD_FAST 3 ( result )				    6 34 LOAD_FAST 1 ( sorted )					  
							      36 LOAD_FAST 0 ( A )					    36 LOAD_FAST 2 ( result )					  
							      38 LOAD_FAST 4 ( i )					    38 BINARY_SUBSCR						  
							      40 BINARY_SUBSCR						    40 LOAD_FAST 1 ( sorted )					  
							      42 LOAD_FAST 1 ( B )					    42 LOAD_FAST 2 ( result )					  
							      44 LOAD_FAST 2 ( n )					    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 4 ( i )					    46 LOAD_FAST 1 ( sorted )					  
							      48 BINARY_SUBTRACT					    48 LOAD_FAST 2 ( result )					  
							      50 LOAD_CONST 2 ( 1 )					    50 BINARY_SUBSCR						  
							      52 BINARY_SUBTRACT					    52 LOAD_FAST 1 ( sorted )					  
							      54 BINARY_SUBSCR						    54 LOAD_FAST 2 ( result )					  
							      56 BINARY_MULTIPLY					    56 BINARY_SUBSCR						  
							      58 INPLACE_ADD						    58 LOAD_FAST 1 ( sorted )					  
							      60 STORE_FAST 3 ( result )				    60 LOAD_FAST 2 ( result )					  
							      62 JUMP_ABSOLUTE 30					    62 BINARY_SUBSCR						  
							      >> 64 POP_BLOCK						    64 LOAD_FAST 1 ( sorted )					  
							      								    66 LOAD_FAST 2 ( result )					  
							      7 >> 66 LOAD_FAST 3 ( result )				    68 BINARY_SUBSCR						  
							      68 RETURN_VALUE NEW_LINE					    70 LOAD_FAST 1 ( sorted )					  
							      								    72 LOAD_FAST 2 ( result )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 1 ( sorted )					  
							      								    78 LOAD_FAST 2 ( result )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 1 ( sorted )					  
							      								    84 LOAD_FAST 2 ( result )					  
							      								    86 STORE_SUBSCR						  
							      								    								  
							      								    7 88 LOAD_FAST 1 ( sorted )					  
							      								    90 LOAD_FAST 2 ( result )					  
							      								    92 LOAD_FAST 1 ( sorted )					  
							      								    94 LOAD_FAST 2 ( result )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 1 ( sorted )					  
							      								    100 LOAD_FAST 2 ( result )					  
							      								    102 STORE_SUBSCR						  
							      								    104 JUMP_ABSOLUTE 18					  
							      								    >> 106 POP_BLOCK						  
							      								    								  
							      								    8 >> 108 LOAD_FAST 1 ( sorted )				  
							      								    110 LOAD_FAST 1 ( sorted )					  
							      								    112 LOAD_FAST 2 ( result )					  
							      								    114 CALL_FUNCTION 1						  
							      								    116 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
def isReversible ( str ) :				      Disassembly of <code object isReversible at 0x7f33e2644930, f Disassembly of <code object isReversible at 0x7f2b0163dc90, f error : /bin/bash: line 1: 11945 Segmentation faul
    i = 0 ; j = len ( str ) - 1 ;			      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    while ( i < j ) :					      2 STORE_FAST 1 ( i )					    2 STORE_FAST 1 ( i )					  ataset/bin/python XLM/dis_script.py --script_path
	if ( str [ i ] != str [ j ] ) :			      4 LOAD_GLOBAL 0 ( len )					    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	    return False ;				      6 LOAD_FAST 0 ( str )					    3 4 LOAD_GLOBAL 0 ( len )					  24/eval_scripts/python_sa-dis_sa.valid/PERFECT_REV
	i += 1 ;					      8 CALL_FUNCTION 1						    6 LOAD_FAST 0 ( str )					  ERSIBLE_STRING.dis
	j -= 1 ;					      10 LOAD_CONST 2 ( 1 )					    8 CALL_FUNCTION 1						  
    return True ;					      12 BINARY_SUBTRACT					    10 LOAD_CONST 2 ( 1 )					  
							      14 STORE_FAST 2 ( j )					    12 BINARY_SUBTRACT						  
							      								    14 STORE_FAST 2 ( i )					  
							      3 16 SETUP_LOOP 48 ( to 66 )				    								  
							      >> 18 LOAD_FAST 1 ( i )					    4 16 SETUP_LOOP 64 ( to 76 )				  
							      20 LOAD_FAST 2 ( j )					    >> 18 LOAD_FAST 0 ( str )					  
							      22 COMPARE_OP 0 ( < )					    20 LOAD_FAST 1 ( i )					  
							      24 POP_JUMP_IF_FALSE 64					    22 COMPARE_OP 3 ( != )					  
							      								    24 POP_JUMP_IF_FALSE 74					  
							      4 26 LOAD_FAST 0 ( str )					    								  
							      28 LOAD_FAST 1 ( i )					    5 26 LOAD_FAST 0 ( str )					  
							      30 BINARY_SUBSCR						    28 LOAD_FAST 1 ( i )					  
							      32 LOAD_FAST 0 ( str )					    30 BINARY_SUBSCR						  
							      34 LOAD_FAST 2 ( j )					    32 LOAD_CONST 3 ( ' ' )					  
							      36 BINARY_SUBSCR						    34 COMPARE_OP 3 ( != )					  
							      38 COMPARE_OP 3 ( != )					    36 POP_JUMP_IF_FALSE 46					  
							      40 POP_JUMP_IF_FALSE 46					    								  
							      								    6 38 LOAD_FAST 0 ( str )					  
							      5 42 LOAD_CONST 3 ( False )				    40 LOAD_FAST 1 ( i )					  
							      44 RETURN_VALUE						    42 BINARY_SUBSCR						  
							      								    44 LOAD_CONST 4 ( ' ' )					  
							      6 >> 46 LOAD_FAST 1 ( i )					    46 COMPARE_OP 3 ( != )					  
							      48 LOAD_CONST 2 ( 1 )					    48 POP_JUMP_IF_FALSE 74					  
							      50 INPLACE_ADD						    								  
							      52 STORE_FAST 1 ( i )					    7 50 LOAD_FAST 0 ( str )					  
							      								    52 LOAD_FAST 1 ( i )					  
							      7 54 LOAD_FAST 2 ( j )					    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 5 ( ' ' )					  
							      58 INPLACE_SUBTRACT					    58 COMPARE_OP 3 ( != )					  
							      60 STORE_FAST 2 ( j )					    60 POP_JUMP_IF_FALSE 74					  
							      62 JUMP_ABSOLUTE 18					    								  
							      >> 64 POP_BLOCK						    8 62 LOAD_FAST 0 ( str )					  
							      								    64 LOAD_FAST 1 ( i )					  
							      8 >> 66 LOAD_CONST 4 ( True )				    66 BINARY_SUBSCR						  
							      68 RETURN_VALUE NEW_LINE					    68 LOAD_CONST 6 ( ' ' )					  
							      								    70 COMPARE_OP 3 ( != )					  
							      								    72 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      								    9 >> 74 LOAD_FAST 0 ( str )					  
							      								    76 LOAD_FAST 1 ( i )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 7 ( ' ' )					  
							      								    82 COMPARE_OP 3 ( != )					  
							      								    84 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    10 86 LOAD_FAST 0 ( str )					  
							      								    88 LOAD_FAST 1 ( i )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 8 ( ' ' )					  
							      								    94 COMPARE_OP 3 ( != )					  
							      								    96 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    11 98 LOAD_FAST 0 ( str )					  
							      								    100 LOAD_FAST 1 ( i )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 9 ( ' ' )					  
							      								    106 COMPARE_OP 3 ( != )					  
							      								    108 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    12 110 LOAD_FAST 0 ( str )					  
							      								    112 LOAD_FAST 1 ( i )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 10 ( ' ' )					  
							      								    118 COMPARE_OP 3 ( != )					  
							      								    120 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    13 122 LOAD_FAST 0 ( str )					  
							      								    124 LOAD_FAST 1 ( i )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 11 ( ' ' )					  
							      								    130 COMPARE_OP 3 ( != )					  
							      								    132 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    14 134 LOAD_FAST 0 ( str )					  
							      								    136 LOAD_FAST 1 ( i )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_CONST 12 ( ' ' )					  
							      								    142 COMPARE_OP 3 ( != )					  
							      								    144 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    15 146 LOAD_FAST 0 ( str )					  
							      								    148 LOAD_FAST 1 ( i )					  
							      								    150 BINARY_SUBSCR NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
def decToBinary ( n ) :					      Disassembly of <code object decToBinary at 0x7f33e2649a50, fi Disassembly of <code object decToBinary at 0x7f2b0163dc90, fi script_not_found : None
    for i in range ( 31 , - 1 , - 1 ) :			      2 0 SETUP_LOOP 62 ( to 64 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	k = n >> i ;					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	if ( k & 1 ) :					      4 LOAD_CONST 1 ( 31 )					    4 LOAD_CONST 1 ( 31 )					  
	    print ( "1" , end = "" ) ;			      6 LOAD_CONST 2 ( - 1 )					    6 LOAD_CONST 2 ( - 1 )					  
	else :						      8 LOAD_CONST 2 ( - 1 )					    8 LOAD_CONST 3 ( - 1 )					  
	    print ( "0" , end = "" ) ;			      10 CALL_FUNCTION 3					    10 CALL_FUNCTION 3						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 46 ( to 62 )				    >> 14 FOR_ITER 48 ( to 64 )					  
							      16 STORE_FAST 1 ( i )					    16 STORE_FAST 0 ( n )					  
							      								    								  
							      3 18 LOAD_FAST 0 ( n )					    3 18 LOAD_FAST 0 ( n )					  
							      20 LOAD_FAST 1 ( i )					    20 LOAD_CONST 1 ( 31 )					  
							      22 BINARY_RSHIFT						    22 COMPARE_OP 2 ( == )					  
							      24 STORE_FAST 2 ( k )					    24 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      4 26 LOAD_FAST 2 ( k )					    4 26 LOAD_GLOBAL 1 ( print )				  
							      28 LOAD_CONST 3 ( 1 )					    28 LOAD_CONST 4 ( "1" )					  
							      30 BINARY_AND						    30 CALL_FUNCTION 1						  
							      32 POP_JUMP_IF_FALSE 48					    32 POP_TOP							  
							      								    34 JUMP_ABSOLUTE 14						  
							      5 34 LOAD_GLOBAL 1 ( print )				    >> 36 POP_BLOCK						  
							      36 LOAD_CONST 4 ( '1' )					    								  
							      38 LOAD_CONST 5 ( '' )					    5 >> 38 LOAD_GLOBAL 2 ( print )				  
							      40 LOAD_CONST 6 ( ( 'end' , ) )				    40 LOAD_CONST 5 ( "						  
							      42 CALL_FUNCTION_KW 2					    								  
							      44 POP_TOP						    								  
							      46 JUMP_ABSOLUTE 14					    								  
							      								    								  
							      7 >> 48 LOAD_GLOBAL 1 ( print )				    								  
							      50 LOAD_CONST 7 ( '0' )					    								  
							      52 LOAD_CONST 5 ( '' )					    								  
							      54 LOAD_CONST 6 ( ( 'end' , ) )				    								  
							      56 CALL_FUNCTION_KW 2					    								  
							      58 POP_TOP						    								  
							      60 JUMP_ABSOLUTE 14					    								  
							      >> 62 POP_BLOCK						    								  
							      >> 64 LOAD_CONST 0 ( None )				    								  
							      66 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
def recSearch ( arr , l , r , x ) :			      Disassembly of <code object recSearch at 0x7f33e2653f60, file Disassembly of <code object recSearch at 0x7f2b0163dc90, file error : Traceback (most recent call last):   File
    if r < l :						      2 0 LOAD_FAST 2 ( r )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
	return - 1					      2 LOAD_FAST 1 ( l )					    2 LOAD_FAST 1 ( l )						  item in run_dis_script():   File "XLM/dis_script.p
    if arr [ l ] == x :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  y", line 54, in run_dis_script     hyp_co = mco.to
	return l					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    if arr [ r ] == x :					      								    								  assembler.py", line 81, in to_co     co_consts.app
	return r					      3 8 LOAD_CONST 1 ( - 1 )					    3 8 LOAD_CONST 1 ( - 1 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    return recSearch ( arr , l + 1 , r - 1 , x )	      10 RETURN_VALUE						    10 RETURN_VALUE						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      								    								  co	 self.co_cellvars, ValueError: code: varname
							      4 >> 12 LOAD_FAST 0 ( arr )				    4 >> 12 LOAD_FAST 0 ( arr )					  s is too small
							      14 LOAD_FAST 1 ( l )					    14 LOAD_FAST 1 ( l )					  
							      16 BINARY_SUBSCR						    16 COMPARE_OP 2 ( == )					  
							      18 LOAD_FAST 3 ( x )					    18 POP_JUMP_IF_FALSE 24					  
							      20 COMPARE_OP 2 ( == )					    								  
							      22 POP_JUMP_IF_FALSE 28					    5 20 LOAD_FAST 0 ( arr )					  
							      								    22 LOAD_FAST 1 ( l )					  
							      5 24 LOAD_FAST 1 ( l )					    24 BINARY_SUBSCR						  
							      26 RETURN_VALUE						    26 RETURN_VALUE						  
							      								    								  
							      6 >> 28 LOAD_FAST 0 ( arr )				    7 >> 28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 2 ( r )					    30 LOAD_FAST 1 ( l )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 3 ( x )					    34 RETURN_VALUE						  
							      36 COMPARE_OP 2 ( == )					    36 LOAD_CONST 0 ( None )					  
							      38 POP_JUMP_IF_FALSE 44					    38 RETURN_VALUE NEW_LINE					  
							      								    								  
							      7 40 LOAD_FAST 2 ( r )					    								  
							      42 RETURN_VALUE						    								  
							      								    								  
							      8 >> 44 LOAD_GLOBAL 0 ( recSearch )			    								  
							      46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_FAST 1 ( l )					    								  
							      50 LOAD_CONST 2 ( 1 )					    								  
							      52 BINARY_ADD						    								  
							      54 LOAD_FAST 2 ( r )					    								  
							      56 LOAD_CONST 2 ( 1 )					    								  
							      58 BINARY_SUBTRACT					    								  
							      60 LOAD_FAST 3 ( x )					    								  
							      62 CALL_FUNCTION 4					    								  
							      64 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
def findStep ( n ) :					      Disassembly of <code object findStep at 0x7f33e2653f60, file  Disassembly of <code object findStep at 0x7f2b0163dc90, file  script_not_found : None
    if ( n == 1 or n == 0 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    elif ( n == 2 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 2					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
    else :						      8 LOAD_FAST 0 ( n )					    								  
	return findStep ( n - 3 ) + findStep ( n - 2 ) + find 10 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_FAST 0 ( n )					  
							      3 >> 16 LOAD_CONST 1 ( 1 )				    14 LOAD_CONST 1 ( 1 )					  
							      18 RETURN_VALUE						    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 24					  
							      4 >> 20 LOAD_FAST 0 ( n )					    								  
							      22 LOAD_CONST 3 ( 2 )					    5 20 LOAD_CONST 2 ( 1 )					  
							      24 COMPARE_OP 2 ( == )					    22 RETURN_VALUE						  
							      26 POP_JUMP_IF_FALSE 32					    								  
							      								    6 >> 24 LOAD_GLOBAL 0 ( findStep )				  
							      5 28 LOAD_CONST 3 ( 2 )					    26 LOAD_FAST 0 ( n )					  
							      30 RETURN_VALUE						    28 LOAD_CONST 1 ( 1 )					  
							      								    30 BINARY_SUBTRACT						  
							      7 >> 32 LOAD_GLOBAL 0 ( findStep )			    32 CALL_FUNCTION 1						  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_GLOBAL 0 ( findStep )				  
							      36 LOAD_CONST 4 ( 3 )					    36 LOAD_FAST 0 ( n )					  
							      38 BINARY_SUBTRACT					    38 LOAD_CONST 1 ( 1 )					  
							      40 CALL_FUNCTION 1					    40 BINARY_SUBTRACT						  
							      42 LOAD_GLOBAL 0 ( findStep )				    42 CALL_FUNCTION 1						  
							      44 LOAD_FAST 0 ( n )					    44 LOAD_GLOBAL 0 ( findStep )				  
							      46 LOAD_CONST 3 ( 2 )					    46 LOAD_FAST 0 ( n )					  
							      48 BINARY_SUBTRACT					    48 LOAD_CONST 1 ( 1 )					  
							      50 CALL_FUNCTION 1					    50 BINARY_SUBTRACT						  
							      52 BINARY_ADD						    52 CALL_FUNCTION 1						  
							      54 LOAD_GLOBAL 0 ( findStep )				    54 LOAD_GLOBAL 0 ( findStep )				  
							      56 LOAD_FAST 0 ( n )					    56 LOAD_FAST 0 ( n )					  
							      58 LOAD_CONST 1 ( 1 )					    58 LOAD_CONST 1 ( 1 )					  
							      60 BINARY_SUBTRACT					    60 BINARY_SUBTRACT						  
							      62 CALL_FUNCTION 1					    62 CALL_FUNCTION 1						  
							      64 BINARY_ADD						    64 LOAD_GLOBAL 0 ( findStep )				  
							      66 RETURN_VALUE						    66 LOAD_FAST 0 ( n )					  
							      68 LOAD_CONST 0 ( None )					    68 LOAD_CONST 1 ( 1 )					  
							      70 RETURN_VALUE NEW_LINE					    70 BINARY_SUBTRACT						  
							      								    72 CALL_FUNCTION 1						  
							      								    74 LOAD_GLOBAL 0 ( findStep )				  
							      								    76 LOAD_FAST 0 ( n )					  
							      								    78 LOAD_CONST 1 ( 1 )					  
							      								    80 BINARY_SUBTRACT						  
							      								    82 CALL_FUNCTION 1						  
							      								    84 BINARY_SUBTRACT						  
							      								    86 LOAD_GLOBAL 0 ( findStep )				  
							      								    88 LOAD_FAST 0 ( n )					  
							      								    90 LOAD_CONST 1 ( 1 )					  
							      								    92 BINARY_SUBTRACT						  
							      								    94 CALL_FUNCTION 1						  
							      								    96 BINARY_MULTIPLY						  
							      								    98 BINARY_SUBTRACT						  
							      								    100 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
def maxProd ( n ) :					      Disassembly of <code object maxProd at 0x7f33e2649a50, file " Disassembly of <code object maxProd at 0x7f2b0163dc90, file " error : /bin/bash: line 1: 11966 Segmentation faul
    if ( n == 2 or n == 3 ) :				      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return ( n - 1 )				      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  ataset/bin/python XLM/dis_script.py --script_path
    res = 1						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    while ( n > 4 ) :					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 14					  24/eval_scripts/python_sa-dis_sa.valid/DYNAMIC_PRO
	n -= 3 ;					      8 LOAD_FAST 0 ( n )					    								  GRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1.d
	res *= 3 ;					      10 LOAD_CONST 2 ( 3 )					    3 8 LOAD_FAST 0 ( n )					  is
    return ( n * res )					      12 COMPARE_OP 2 ( == )					    10 LOAD_CONST 2 ( 3 )					  
							      14 POP_JUMP_IF_FALSE 24					    12 LOAD_CONST 1 ( 2 )					  
							      								    14 BINARY_FLOOR_DIVIDE					  
							      3 >> 16 LOAD_FAST 0 ( n )					    16 STORE_FAST 0 ( n )					  
							      18 LOAD_CONST 3 ( 1 )					    								  
							      20 BINARY_SUBTRACT					    4 >> 18 LOAD_CONST 1 ( 2 )					  
							      22 RETURN_VALUE						    20 LOAD_FAST 0 ( n )					  
							      								    22 LOAD_CONST 2 ( 3 )					  
							      4 >> 24 LOAD_CONST 3 ( 1 )				    24 BINARY_FLOOR_DIVIDE					  
							      26 STORE_FAST 1 ( res )					    26 COMPARE_OP 4 ( > )					  
							      								    28 POP_JUMP_IF_FALSE 48					  
							      5 28 SETUP_LOOP 28 ( to 58 )				    								  
							      >> 30 LOAD_FAST 0 ( n )					    5 30 LOAD_FAST 0 ( n )					  
							      32 LOAD_CONST 4 ( 4 )					    32 LOAD_CONST 2 ( 3 )					  
							      34 COMPARE_OP 4 ( > )					    34 BINARY_MODULO						  
							      36 POP_JUMP_IF_FALSE 56					    36 STORE_FAST 0 ( n )					  
							      								    								  
							      6 38 LOAD_FAST 0 ( n )					    6 38 LOAD_FAST 0 ( n )					  
							      40 LOAD_CONST 2 ( 3 )					    40 LOAD_CONST 2 ( 3 )					  
							      42 INPLACE_SUBTRACT					    42 BINARY_MODULO						  
							      44 STORE_FAST 0 ( n )					    44 STORE_FAST 1 ( n )					  
							      								    46 JUMP_FORWARD 32 ( to 78 )				  
							      7 46 LOAD_FAST 1 ( res )					    								  
							      48 LOAD_CONST 2 ( 3 )					    8 >> 48 LOAD_FAST 0 ( n )					  
							      50 INPLACE_MULTIPLY					    50 LOAD_CONST 2 ( 3 )					  
							      52 STORE_FAST 1 ( res )					    52 BINARY_MODULO						  
							      54 JUMP_ABSOLUTE 30					    54 STORE_FAST 0 ( n )					  
							      >> 56 POP_BLOCK						    								  
							      								    9 >> 56 LOAD_FAST 0 ( n )					  
							      8 >> 58 LOAD_FAST 0 ( n )					    58 LOAD_CONST 2 ( 3 )					  
							      60 LOAD_FAST 1 ( res )					    60 BINARY_MODULO						  
							      62 BINARY_MULTIPLY					    62 LOAD_FAST 1 ( n )					  
							      64 RETURN_VALUE NEW_LINE					    64 LOAD_CONST 2 ( 3 )					  
							      								    66 BINARY_MODULO						  
							      								    68 INPLACE_ADD						  
							      								    70 STORE_FAST 0 ( n )					  
							      								    								  
							      								    10 72 LOAD_FAST 0 ( n )					  
							      								    74 LOAD_CONST 2 ( 3 )					  
							      								    76 BINARY_MODULO						  
							      								    78 INPLACE_ADD						  
							      								    80 STORE_FAST 0 ( n )					  
							      								    								  
							      								    11 82 LOAD_FAST 0 ( n )					  
							      								    84 LOAD_CONST 2 ( 3 )					  
							      								    86 COMPARE_OP 2 ( == )					  
							      								    88 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      								    12 90 LOAD_FAST 0 ( n )					  
							      								    92 LOAD_CONST 2 ( 3 )					  
							      								    94 BINARY_MODULO						  
							      								    96 INPLACE_ADD						  
							      								    98 STORE_FAST 0 ( n )					  
							      								    								  
							      								    13 >> 100 LOAD_FAST 0 ( n )					  
							      								    102 LOAD_CONST 2 ( 3 )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 112					  
							      								    								  
							      								    14 108 LOAD_FAST 0 ( n )					  
							      								    110 LOAD_CONST 2 ( 3 )					  
							      								    112 BINARY_MODULO						  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 0 ( n )					  
							      								    								  
							      								    15 >> 118 LOAD_FAST 0 ( n )					  
							      								    120 LOAD_CONST 2 ( 3 )					  
							      								    122 BINARY_MODULO						  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 0 ( n )					  
							      								    								  
							      								    16 >> 128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 2 ( 3 )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 0 ( n )					  
							      								    								  
							      								    17 >> 136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 2 ( 3 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 148					  
							      								    								  
							      								    18 144 LOAD_FAST 0 ( n )					  
							      								    146 LOAD_CONST 2 ( 3 )					  
							      								    148 BINARY_MODULO						  
							      								    150 INPLACE_ADD						  
							      								    152 STORE_FAST 0 ( n )					  
							      								    								  
							      								    19 154 LOAD_FAST 0 ( n )					  
							      								    156 RETURN_VALUE						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING	      CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		    CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		  CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING
--							      --							    --								  --
def findSum ( str1 ) :					      Disassembly of <code object findSum at 0x7f33e2644f60, file " Disassembly of <code object findSum at 0x7f2b01639660, file " script_not_found : None
    temp = ""						      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    Sum = 0						      2 STORE_FAST 1 ( temp )					    2 STORE_FAST 1 ( temp )					  
    for ch in str1 :					      								    								  
	if ( ch.isdigit ( ) ) :				      3 4 LOAD_CONST 2 ( 0 )					    3 4 LOAD_CONST 2 ( 0 )					  
	    temp += ch					      6 STORE_FAST 2 ( Sum )					    6 STORE_FAST 2 ( temp )					  
	else :						      								    								  
	    Sum += int ( temp )				      4 8 SETUP_LOOP 46 ( to 56 )				    4 8 SETUP_LOOP 64 ( to 76 )					  
	    temp = "0"					      10 LOAD_FAST 0 ( str1 )					    10 LOAD_FAST 0 ( str1 )					  
    return Sum + int ( temp )				      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 38 ( to 54 )				    >> 14 FOR_ITER 64 ( to 74 )					  
							      16 STORE_FAST 3 ( ch )					    16 STORE_FAST 3 ( ch )					  
							      								    								  
							      5 18 LOAD_FAST 3 ( ch )					    5 18 LOAD_FAST 2 ( temp )					  
							      20 LOAD_METHOD 0 ( isdigit )				    20 LOAD_METHOD 0 ( isdigit )				  
							      22 CALL_METHOD 0						    22 CALL_METHOD 0						  
							      24 POP_JUMP_IF_FALSE 36					    24 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      6 26 LOAD_FAST 1 ( temp )					    6 26 LOAD_FAST 2 ( temp )					  
							      28 LOAD_FAST 3 ( ch )					    28 LOAD_CONST 3 ( 1 )					  
							      30 INPLACE_ADD						    30 INPLACE_ADD						  
							      32 STORE_FAST 1 ( temp )					    32 STORE_FAST 2 ( temp )					  
							      34 JUMP_ABSOLUTE 14					    34 JUMP_ABSOLUTE 14						  
							      								    								  
							      8 >> 36 LOAD_FAST 2 ( Sum )				    7 >> 36 LOAD_FAST 2 ( temp )				  
							      38 LOAD_GLOBAL 1 ( int )					    38 LOAD_METHOD 0 ( isdigit )				  
							      40 LOAD_FAST 1 ( temp )					    40 CALL_METHOD 0						  
							      42 CALL_FUNCTION 1					    42 POP_JUMP_IF_FALSE 14					  
							      44 INPLACE_ADD						    								  
							      46 STORE_FAST 2 ( Sum )					    8 44 LOAD_FAST 2 ( temp )					  
							      								    46 LOAD_METHOD 0 ( isdigit )				  
							      9 48 LOAD_CONST 3 ( '0' )					    48 CALL_METHOD 0						  
							      50 STORE_FAST 1 ( temp )					    50 POP_JUMP_IF_FALSE 14					  
							      52 JUMP_ABSOLUTE 14					    								  
							      >> 54 POP_BLOCK						    9 52 LOAD_FAST 2 ( temp )					  
							      								    54 LOAD_METHOD 0 ( isdigit )				  
							      10 >> 56 LOAD_FAST 2 ( Sum )				    56 CALL_METHOD 0						  
							      58 LOAD_GLOBAL 1 ( int )					    58 POP_JUMP_IF_FALSE 14					  
							      60 LOAD_FAST 1 ( temp )					    								  
							      62 CALL_FUNCTION 1					    10 60 LOAD_FAST 2 ( temp )					  
							      64 BINARY_ADD						    62 LOAD_METHOD 0 ( isdigit )				  
							      66 RETURN_VALUE NEW_LINE					    64 CALL_METHOD 0						  
							      								    66 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    11 68 LOAD_FAST 2 ( temp )					  
							      								    70 LOAD_METHOD 0 ( isdigit )				  
							      								    72 CALL_METHOD 0						  
							      								    74 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    12 76 LOAD_FAST 2 ( temp )					  
							      								    78 LOAD_METHOD 0 ( isdigit )				  
							      								    80 CALL_METHOD 0						  
							      								    82 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    13 84 LOAD_FAST 2 ( temp )					  
							      								    86 LOAD_METHOD 0 ( isdigit )				  
							      								    88 CALL_METHOD 0						  
							      								    90 POP_JUMP_IF_FALSE 14					  
							      								    92 JUMP_ABSOLUTE 14						  
							      								    >> 94 POP_BLOCK						  
							      								    >> 96 JUMP_ABSOLUTE 14					  
							      								    >> 98 POP_BLOCK						  
							      								    								  
							      								    14 >> 100 LOAD_FAST 2 ( temp )				  
							      								    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
def count ( n , x ) :					      Disassembly of <code object count at 0x7f33e2644f60, file "<d Disassembly of <code object count at 0x7f2b0163dc90, file "<d error : /bin/bash: line 1: 11965 Segmentation faul
    cnt = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 1 , n + 1 ) :			      2 STORE_FAST 2 ( cnt )					    2 STORE_FAST 1 ( cnt )					  ataset/bin/python XLM/dis_script.py --script_path
	if i <= x :					      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	    if x // i <= n and x % i == 0 :		      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 SETUP_LOOP 64 ( to 66 )					  24/eval_scripts/python_sa-dis_sa.valid/COUNT_ENTRI
		cnt += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  ES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX.dis
    return cnt						      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
							      10 LOAD_FAST 0 ( n )					    10 LOAD_FAST 0 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    12 LOAD_CONST 2 ( 1 )					  
							      14 BINARY_ADD						    14 BINARY_ADD						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 44 ( to 66 )				    >> 20 FOR_ITER 48 ( to 64 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 2 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 3 ( i )					    4 24 LOAD_FAST 1 ( cnt )					  
							      26 LOAD_FAST 1 ( x )					    26 LOAD_FAST 2 ( i )					  
							      28 COMPARE_OP 1 ( <= )					    28 DUP_TOP							  
							      30 POP_JUMP_IF_FALSE 20					    30 ROT_THREE						  
							      								    32 COMPARE_OP 1 ( <= )					  
							      5 32 LOAD_FAST 1 ( x )					    34 POP_JUMP_IF_FALSE 48					  
							      34 LOAD_FAST 3 ( i )					    36 LOAD_FAST 1 ( cnt )					  
							      36 BINARY_FLOOR_DIVIDE					    38 LOAD_CONST 3 ( 1 )					  
							      38 LOAD_FAST 0 ( n )					    40 INPLACE_ADD						  
							      40 COMPARE_OP 1 ( <= )					    42 ROT_THREE						  
							      42 POP_JUMP_IF_FALSE 20					    44 STORE_SUBSCR						  
							      44 LOAD_FAST 1 ( x )					    46 JUMP_ABSOLUTE 20						  
							      46 LOAD_FAST 3 ( i )					    >> 48 POP_BLOCK						  
							      48 BINARY_MODULO						    								  
							      50 LOAD_CONST 1 ( 0 )					    5 >> 50 LOAD_FAST 1 ( cnt )					  
							      52 COMPARE_OP 2 ( == )					    52 RETURN_VALUE NEW_LINE					  
							      54 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      6 56 LOAD_FAST 2 ( cnt )					    								  
							      58 LOAD_CONST 2 ( 1 )					    								  
							      60 INPLACE_ADD						    								  
							      62 STORE_FAST 2 ( cnt )					    								  
							      64 JUMP_ABSOLUTE 20					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      7 >> 68 LOAD_FAST 2 ( cnt )				    								  
							      70 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
def maxTasks ( high , low , n ) :			      Disassembly of <code object maxTasks at 0x7f33e26494b0, file  Disassembly of <code object maxTasks at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    if ( n <= 0 ) :					      2 0 LOAD_FAST 2 ( n )					    2 0 LOAD_FAST 0 ( low )					  "XLM/dis_script.py", line 59, in <module>	for
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    return max ( high [ n - 1 ] + maxTasks ( high , low , ( n 4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  y", line 54, in run_dis_script     hyp_co = mco.to
							      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
							      								    								  assembler.py", line 81, in to_co     co_consts.app
							      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 2 ( 1 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      10 RETURN_VALUE						    10 RETURN_VALUE						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      								    								  co	 self.co_cellvars, ValueError: code: varname
							      4 >> 12 LOAD_GLOBAL 0 ( max )				    4 >> 12 LOAD_GLOBAL 0 ( max )				  s is too small
							      14 LOAD_FAST 0 ( high )					    14 LOAD_FAST 0 ( low )					  
							      16 LOAD_FAST 2 ( n )					    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_CONST 2 ( 1 )					    18 BINARY_SUBSCR						  
							      20 BINARY_SUBTRACT					    20 LOAD_FAST 0 ( low )					  
							      22 BINARY_SUBSCR						    22 LOAD_CONST 1 ( 0 )					  
							      24 LOAD_GLOBAL 1 ( maxTasks )				    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 0 ( high )					    26 BINARY_SUBTRACT						  
							      28 LOAD_FAST 1 ( low )					    28 CALL_FUNCTION 1						  
							      30 LOAD_FAST 2 ( n )					    30 LOAD_FAST 0 ( low )					  
							      32 LOAD_CONST 3 ( 2 )					    32 LOAD_CONST 1 ( 0 )					  
							      34 BINARY_SUBTRACT					    34 BINARY_SUBSCR						  
							      36 CALL_FUNCTION 3					    36 BINARY_SUBTRACT						  
							      38 BINARY_ADD						    38 CALL_FUNCTION 1						  
							      40 LOAD_FAST 1 ( low )					    40 LOAD_FAST 0 ( low )					  
							      42 LOAD_FAST 2 ( n )					    42 LOAD_CONST 1 ( 0 )					  
							      44 LOAD_CONST 2 ( 1 )					    44 BINARY_SUBSCR						  
							      46 BINARY_SUBTRACT					    46 BINARY_SUBTRACT						  
							      48 BINARY_SUBSCR						    48 LOAD_FAST 0 ( low )					  
							      50 LOAD_GLOBAL 1 ( maxTasks )				    50 LOAD_CONST 1 ( 0 )					  
							      52 LOAD_FAST 0 ( high )					    52 BINARY_SUBSCR						  
							      54 LOAD_FAST 1 ( low )					    54 BINARY_SUBTRACT						  
							      56 LOAD_FAST 2 ( n )					    56 CALL_FUNCTION 1						  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_FAST 0 ( low )					  
							      60 BINARY_SUBTRACT					    60 LOAD_CONST 1 ( 0 )					  
							      62 CALL_FUNCTION 3					    62 BINARY_SUBSCR						  
							      64 BINARY_ADD						    64 BINARY_SUBTRACT						  
							      66 CALL_FUNCTION 2					    66 LOAD_FAST 0 ( low )					  
							      68 RETURN_VALUE NEW_LINE					    68 LOAD_CONST 1 ( 0 )					  
							      								    70 BINARY_SUBSCR						  
							      								    72 BINARY_SUBTRACT						  
							      								    74 CALL_FUNCTION 1						  
							      								    76 LOAD_FAST 0 ( low )					  
							      								    78 LOAD_CONST 1 ( 0 )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 BINARY_SUBTRACT						  
							      								    84 LOAD_FAST 0 ( low )					  
							      								    86 LOAD_CONST 1 ( 0 )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 BINARY_SUBTRACT						  
							      								    92 LOAD_FAST 0 ( low )					  
							      								    94 LOAD_CONST 1 ( 0 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 BINARY_SUBTRACT						  
							      								    100 LOAD_FAST 0 ( low )					  
							      								    102 LOAD_CONST 1 ( 0 )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 BINARY_SUBTRACT						  
							      								    108 LOAD_FAST 0 ( low )					  
							      								    110 LOAD_CONST 1 ( 0 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 BINARY_SUBTRACT						  
							      								    116 LOAD_FAST 0 ( low )					  
							      								    118 LOAD_CONST 1 ( 0 )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 BINARY_SUBTRACT						  
							      								    124 LOAD_FAST 0 ( low )					  
							      								    126 LOAD_CONST 1 ( 0 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 BINARY_SUBTRACT						  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 0 ( low )					  
							      								    136 LOAD_CONST 1 ( 0 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 BINARY_SUBTRACT						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 0 ( low )					  
							      								    146 LOAD_CONST 1 ( 0 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 0 ( low )					  
							      								    154 LOAD_CONST 1 ( 0 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 BINARY_SUBTRACT						  
							      								    160 BINARY_SUBTRACT						  
							      								    162 LOAD_FAST 0 ( low )					  
							      								    164 LOAD_CONST 1 ( 0 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 BINARY_SUBTRACT						  
							      								    170 LOAD_FAST 0 ( low )					  
							      								    172 LOAD_CONST 1 ( 0 )					  
							      								    174 BINARY_SUBSCR						  
							      								    176 BINARY_SUBTRACT						  
							      								    178 LOAD_FAST 0 ( low )					  
							      								    180 LOAD_CONST 1 ( 0 )					  
							      								    182 BINARY_SUBSCR						  
							      								    184 BINARY_SUBTRACT						  
							      								    186 LOAD_FAST 0 ( low )					  
							      								    188 LOAD_CONST 1 ( 0 )					  
							      								    160 BINARY_SUBSCR						  
							      								    162 BINARY_SUBTRACT						  
							      								    164 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
def findS ( s ) :					      Disassembly of <code object findS at 0x7f33e2653f60, file "<d Disassembly of <code object findS at 0x7f2b0163dc90, file "<d error : Traceback (most recent call last):   File
    _sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    n = 1						      2 STORE_FAST 1 ( _sum )					    2 STORE_FAST 1 ( _sum )					  (item)   File "main.py", line 36, in <module>	  Fi
    while ( _sum < s ) :				      								    								  le "<dis>", line 2, in findS TypeError: 'int' obje
	_sum += n * n * n				      3 4 LOAD_CONST 2 ( 1 )					    3 4 LOAD_CONST 1 ( 0 )					  ct is not iterable
	n += 1						      6 STORE_FAST 2 ( n )					    6 STORE_FAST 2 ( n )					  
    n -= 1						      								    								  
    if _sum == s :					      4 8 SETUP_LOOP 36 ( to 46 )				    4 8 SETUP_LOOP 64 ( to 76 )					  
	return n					      >> 10 LOAD_FAST 1 ( _sum )				    10 LOAD_FAST 0 ( s )					  
    return - 1						      12 LOAD_FAST 0 ( s )					    12 GET_ITER							  
							      14 COMPARE_OP 0 ( < )					    >> 14 FOR_ITER 64 ( to 74 )					  
							      16 POP_JUMP_IF_FALSE 44					    16 STORE_FAST 3 ( n )					  
							      								    								  
							      5 18 LOAD_FAST 1 ( _sum )					    5 18 LOAD_FAST 3 ( n )					  
							      20 LOAD_FAST 2 ( n )					    20 LOAD_FAST 1 ( _sum )					  
							      22 LOAD_FAST 2 ( n )					    22 COMPARE_OP 0 ( < )					  
							      24 BINARY_MULTIPLY					    24 POP_JUMP_IF_FALSE 38					  
							      26 LOAD_FAST 2 ( n )					    								  
							      28 BINARY_MULTIPLY					    6 26 LOAD_FAST 2 ( n )					  
							      30 INPLACE_ADD						    28 LOAD_FAST 1 ( _sum )					  
							      32 STORE_FAST 1 ( _sum )					    30 INPLACE_ADD						  
							      								    32 STORE_FAST 2 ( n )					  
							      6 34 LOAD_FAST 2 ( n )					    								  
							      36 LOAD_CONST 2 ( 1 )					    7 34 LOAD_FAST 2 ( n )					  
							      38 INPLACE_ADD						    36 LOAD_FAST 1 ( _sum )					  
							      40 STORE_FAST 2 ( n )					    38 INPLACE_ADD						  
							      42 JUMP_ABSOLUTE 10					    40 STORE_FAST 2 ( n )					  
							      >> 44 POP_BLOCK						    								  
							      								    8 >> 42 LOAD_FAST 2 ( n )					  
							      7 >> 46 LOAD_FAST 2 ( n )					    44 LOAD_FAST 1 ( _sum )					  
							      48 LOAD_CONST 2 ( 1 )					    46 INPLACE_ADD						  
							      50 INPLACE_SUBTRACT					    48 STORE_FAST 2 ( n )					  
							      52 STORE_FAST 2 ( n )					    50 JUMP_ABSOLUTE 14						  
							      								    >> 52 POP_BLOCK						  
							      8 54 LOAD_FAST 1 ( _sum )					    								  
							      56 LOAD_FAST 0 ( s )					    9 >> 54 LOAD_FAST 1 ( _sum )				  
							      58 COMPARE_OP 2 ( == )					    56 RETURN_VALUE NEW_LINE					  
							      60 POP_JUMP_IF_FALSE 66					    								  
							      								    								  
							      9 62 LOAD_FAST 2 ( n )					    								  
							      64 RETURN_VALUE						    								  
							      								    								  
							      10 >> 66 LOAD_CONST 3 ( - 1 )				    								  
							      68 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
def isOneFlip ( str ) :					      Disassembly of <code object isOneFlip at 0x7f33e2649150, file Disassembly of <code object isOneFlip at 0x7f2b0163dc90, file script_not_found : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    n = len ( str )					      2 STORE_FAST 1 ( sum )					    2 STORE_FAST 1 ( sum )					  
    for i in range ( 0 , n ) :				      								    								  
	sum += int ( str [ i ] ) - int ( '0' )		      3 4 LOAD_GLOBAL 0 ( len )					    3 4 LOAD_GLOBAL 0 ( len )					  
    return ( sum == n - 1 or sum == 1 )			      6 LOAD_FAST 0 ( str )					    6 LOAD_FAST 0 ( str )					  
							      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
							      10 STORE_FAST 2 ( n )					    10 STORE_FAST 2 ( n )					  
							      								    								  
							      4 12 SETUP_LOOP 42 ( to 56 )				    4 12 SETUP_LOOP 74 ( to 92 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
							      18 LOAD_FAST 2 ( n )					    18 LOAD_FAST 1 ( sum )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 28 ( to 54 )				    >> 24 FOR_ITER 74 ( to 90 )					  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 1 ( sum )					    5 28 LOAD_FAST 2 ( n )					  
							      30 LOAD_GLOBAL 2 ( int )					    30 LOAD_FAST 3 ( i )					  
							      32 LOAD_FAST 0 ( str )					    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 0 ( str )					  
							      36 BINARY_SUBSCR						    36 COMPARE_OP 2 ( == )					  
							      38 CALL_FUNCTION 1					    38 POP_JUMP_IF_FALSE 48					  
							      40 LOAD_GLOBAL 2 ( int )					    								  
							      42 LOAD_CONST 2 ( '0' )					    6 40 LOAD_FAST 2 ( n )					  
							      44 CALL_FUNCTION 1					    42 LOAD_FAST 3 ( i )					  
							      46 BINARY_SUBTRACT					    44 BINARY_SUBSCR						  
							      48 INPLACE_ADD						    46 LOAD_FAST 0 ( str )					  
							      50 STORE_FAST 1 ( sum )					    48 COMPARE_OP 2 ( == )					  
							      52 JUMP_ABSOLUTE 24					    50 POP_JUMP_IF_FALSE 24					  
							      >> 54 POP_BLOCK						    								  
							      								    7 52 LOAD_FAST 2 ( n )					  
							      6 >> 56 LOAD_FAST 1 ( sum )				    54 LOAD_FAST 3 ( i )					  
							      58 LOAD_FAST 2 ( n )					    56 BINARY_SUBSCR						  
							      60 LOAD_CONST 3 ( 1 )					    58 STORE_FAST 1 ( sum )					  
							      62 BINARY_SUBTRACT					    								  
							      64 COMPARE_OP 2 ( == )					    8 >> 60 LOAD_FAST 2 ( n )					  
							      66 JUMP_IF_TRUE_OR_POP 74					    62 LOAD_FAST 3 ( i )					  
							      68 LOAD_FAST 1 ( sum )					    64 BINARY_SUBSCR						  
							      70 LOAD_CONST 3 ( 1 )					    66 LOAD_FAST 0 ( str )					  
							      72 COMPARE_OP 2 ( == )					    68 COMPARE_OP 2 ( == )					  
							      >> 74 RETURN_VALUE NEW_LINE				    70 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    9 72 LOAD_FAST 2 ( n )					  
							      								    74 LOAD_FAST 3 ( i )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 0 ( str )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    10 84 LOAD_FAST 2 ( n )					  
							      								    86 LOAD_FAST 3 ( i )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 0 ( str )					  
							      								    92 LOAD_FAST 3 ( i )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 0 ( str )					  
							      								    98 BINARY_ADD						  
							      								    100 LOAD_FAST 1 ( sum )					  
							      								    102 LOAD_FAST 2 ( n )					  
							      								    104 STORE_SUBSCR						  
							      								    								  
							      								    11 >> 106 LOAD_FAST 1 ( sum )				  
							      								    108 LOAD_FAST 2 ( n )					  
							      								    110 LOAD_FAST 3 ( i )					  
							      								    112 STORE_SUBSCR						  
							      								    114 JUMP_ABSOLUTE 24					  
							      								    >> 116 POP_BLOCK						  
							      								    								  
							      								    12 >> 118 LOAD_FAST 1 ( sum )				  
							      								    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			      FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			    FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			  FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
def subArrayExists ( arr , n ) :			      Disassembly of <code object subArrayExists at 0x7f33e2644930, Disassembly of <code object subArrayExists at 0x7f2b0163dc90, script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    sum = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for i in range ( n ) :				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 1 ( s )					  
	sum += arr [ i ]				      								    								  
	if sum == 0 or sum in s :			      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	    return True					      8 STORE_FAST 3 ( sum )					    8 STORE_FAST 2 ( sum )					  
	s.add ( sum )					      								    								  
    return False					      4 10 SETUP_LOOP 58 ( to 70 )				    4 10 SETUP_LOOP 64 ( to 76 )				  
							      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 0 ( arr )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 46 ( to 68 )				    >> 20 FOR_ITER 56 ( to 74 )					  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      5 24 LOAD_FAST 3 ( sum )					    5 24 LOAD_FAST 1 ( s )					  
							      26 LOAD_FAST 0 ( arr )					    26 LOAD_FAST 2 ( sum )					  
							      28 LOAD_FAST 4 ( i )					    28 COMPARE_OP 2 ( == )					  
							      30 BINARY_SUBSCR						    30 POP_JUMP_IF_FALSE 48					  
							      32 INPLACE_ADD						    								  
							      34 STORE_FAST 3 ( sum )					    6 32 LOAD_FAST 1 ( s )					  
							      								    34 LOAD_FAST 2 ( sum )					  
							      6 36 LOAD_FAST 3 ( sum )					    36 LOAD_FAST 3 ( i )					  
							      38 LOAD_CONST 1 ( 0 )					    38 BINARY_SUBSCR						  
							      40 COMPARE_OP 2 ( == )					    40 LOAD_FAST 2 ( sum )					  
							      42 POP_JUMP_IF_TRUE 52					    42 COMPARE_OP 2 ( == )					  
							      44 LOAD_FAST 3 ( sum )					    44 POP_JUMP_IF_FALSE 48					  
							      46 LOAD_FAST 2 ( s )					    								  
							      48 COMPARE_OP 6 ( in )					    7 46 LOAD_FAST 1 ( s )					  
							      50 POP_JUMP_IF_FALSE 56					    48 LOAD_FAST 2 ( sum )					  
							      								    50 LOAD_FAST 3 ( i )					  
							      7 >> 52 LOAD_CONST 2 ( True )				    52 BINARY_SUBSCR						  
							      54 RETURN_VALUE						    54 LOAD_FAST 2 ( sum )					  
							      								    56 LOAD_FAST 3 ( i )					  
							      8 >> 56 LOAD_FAST 2 ( s )					    58 BINARY_SUBSCR						  
							      58 LOAD_METHOD 2 ( add )					    60 LOAD_FAST 2 ( sum )					  
							      60 LOAD_FAST 3 ( sum )					    62 LOAD_FAST 3 ( i )					  
							      62 CALL_METHOD 1						    64 BINARY_SUBSCR						  
							      64 POP_TOP						    66 LOAD_FAST 2 ( sum )					  
							      66 JUMP_ABSOLUTE 20					    68 LOAD_FAST 3 ( i )					  
							      >> 68 POP_BLOCK						    70 STORE_SUBSCR						  
							      								    72 JUMP_ABSOLUTE 20						  
							      9 >> 70 LOAD_CONST 3 ( False )				    >> 74 POP_BLOCK						  
							      72 RETURN_VALUE NEW_LINE					    								  
							      								    8 >> 76 LOAD_FAST 2 ( sum )					  
							      								    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER  MAXIMUM<unk> TH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
def maxPrefix ( s , t ) :				      Disassembly of <code object maxPrefix at 0x7f33e2644f60, file Disassembly of <code object maxPrefix at 0x7f2b0163dc90, file script_not_found : None
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , len ( t ) ) :			      2 STORE_FAST 2 ( count )					    2 STORE_FAST 2 ( count )					  
	if ( count == len ( s ) ) :			      								    								  
	    break					      3 4 SETUP_LOOP 60 ( to 66 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
	if ( t [ i ] == s [ count ] ) :			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    count = count + 1				      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
    return count					      10 LOAD_GLOBAL 1 ( len )					    10 LOAD_GLOBAL 1 ( len )					  
							      12 LOAD_FAST 1 ( t )					    12 LOAD_FAST 0 ( s )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 42 ( to 64 )				    >> 20 FOR_ITER 48 ( to 64 )					  
							      22 STORE_FAST 3 ( i )					    22 STORE_FAST 3 ( i )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( count )				    4 24 LOAD_FAST 2 ( count )					  
							      26 LOAD_GLOBAL 1 ( len )					    26 LOAD_CONST 3 ( 1 )					  
							      28 LOAD_FAST 0 ( s )					    28 COMPARE_OP 2 ( == )					  
							      30 CALL_FUNCTION 1					    30 POP_JUMP_IF_FALSE 44					  
							      32 COMPARE_OP 2 ( == )					    								  
							      34 POP_JUMP_IF_FALSE 38					    5 32 LOAD_FAST 2 ( count )					  
							      								    34 LOAD_CONST 3 ( 1 )					  
							      5 36 BREAK_LOOP						    36 INPLACE_ADD						  
							      								    38 STORE_FAST 2 ( count )					  
							      6 >> 38 LOAD_FAST 1 ( t )					    								  
							      40 LOAD_FAST 3 ( i )					    6 40 LOAD_FAST 2 ( count )					  
							      42 BINARY_SUBSCR						    42 LOAD_CONST 3 ( 1 )					  
							      44 LOAD_FAST 0 ( s )					    44 INPLACE_ADD						  
							      46 LOAD_FAST 2 ( count )					    46 STORE_FAST 2 ( count )					  
							      48 BINARY_SUBSCR						    								  
							      50 COMPARE_OP 2 ( == )					    7 >> 48 LOAD_FAST 2 ( count )				  
							      52 POP_JUMP_IF_FALSE 20					    50 LOAD_CONST 4 ( 2 )					  
							      								    52 INPLACE_ADD						  
							      7 54 LOAD_FAST 2 ( count )				    54 STORE_FAST 2 ( count )					  
							      56 LOAD_CONST 2 ( 1 )					    								  
							      58 BINARY_ADD						    8 56 LOAD_FAST 1 ( s )					  
							      60 STORE_FAST 2 ( count )					    58 LOAD_CONST 5 ( ' ' )					  
							      62 JUMP_ABSOLUTE 20					    60 INPLACE_ADD						  
							      >> 64 POP_BLOCK						    62 STORE_FAST 2 ( count )					  
							      								    								  
							      8 >> 66 LOAD_FAST 2 ( count )				    9 64 LOAD_FAST 2 ( count )					  
							      68 RETURN_VALUE NEW_LINE					    66 LOAD_CONST 6 ( 2 )					  
							      								    68 INPLACE_ADD						  
							      								    70 STORE_FAST 2 ( count )					  
							      								    								  
							      								    10 72 LOAD_FAST 2 ( count )					  
							      								    74 LOAD_CONST 7 ( 2 )					  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 2 ( count )					  
							      								    								  
							      								    11 80 LOAD_FAST 2 ( count )					  
							      								    82 LOAD_CONST 3 ( 1 )					  
							      								    84 INPLACE_ADD						  
							      								    86 STORE_FAST 2 ( count )					  
							      								    								  
							      								    12 88 BREAK_LOOP						  
							      								    >> 90 JUMP_ABSOLUTE 20					  
							      								    >> 92 POP_BLOCK						  
							      								    								  
							      								    13 >> 94 LOAD_FAST 2 ( count )				  
							      								    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
def kthdigit ( a , b , k ) :				      Disassembly of <code object kthdigit at 0x7f33e2644f60, file  Disassembly of <code object kthdigit at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    p = a ** b						      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
    count = 0						      2 LOAD_FAST 1 ( b )					    2 LOAD_FAST 1 ( b )						  item in run_dis_script():   File "XLM/dis_script.p
    while ( p > 0 and count < k ) :			      4 BINARY_POWER						    4 LOAD_FAST 2 ( k )						  y", line 47, in run_dis_script     co_code, co_nlo
	rem = p % 10					      6 STORE_FAST 3 ( p )					    6 BINARY_MULTIPLY						  cals, co_varnames, co_names, co_consts, co_linesta
	count = count + 1				      								    8 LOAD_CONST 1 ( 0 )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	if ( count == k ) :				      3 8 LOAD_CONST 1 ( 0 )					    10 COMPARE_OP 4 ( > )					  /TransCoder/XLM/src/dis_assembler.py", line 233, i
	    return rem					      10 STORE_FAST 4 ( count )					    12 POP_JUMP_IF_FALSE 20					  n parse     code.append(arg) ValueError: byte must
	p = p / 10 ;					      								    								   be in range(0, 256)
							      4 12 SETUP_LOOP 56 ( to 70 )				    3 14 LOAD_CONST 2 ( 1 )					  
							      >> 14 LOAD_FAST 3 ( p )					    16 STORE_FAST 3 ( rem )					  
							      16 LOAD_CONST 1 ( 0 )					    18 JUMP_FORWARD 4 ( to 26 )					  
							      18 COMPARE_OP 4 ( > )					    								  
							      20 POP_JUMP_IF_FALSE 68					    5 >> 20 LOAD_CONST 3 ( '' )					  
							      22 LOAD_FAST 4 ( count )					    22 STORE_FAST 3 ( rem )					  
							      24 LOAD_FAST 2 ( k )					    								  
							      26 COMPARE_OP 0 ( < )					    6 24 LOAD_FAST 3 ( rem )					  
							      28 POP_JUMP_IF_FALSE 68					    26 LOAD_CONST 4 ( 1 )					  
							      								    28 COMPARE_OP 4 ( > )					  
							      5 30 LOAD_FAST 3 ( p )					    30 POP_JUMP_IF_FALSE 36					  
							      32 LOAD_CONST 2 ( 10 )					    								  
							      34 BINARY_MODULO						    7 32 LOAD_FAST 3 ( rem )					  
							      36 STORE_FAST 5 ( rem )					    34 LOAD_CONST 5 ( 2 )					  
							      								    36 INPLACE_ADD						  
							      6 38 LOAD_FAST 4 ( count )				    38 STORE_FAST 3 ( rem )					  
							      40 LOAD_CONST 3 ( 1 )					    40 JUMP_FORWARD 4 ( to 48 )					  
							      42 BINARY_ADD						    								  
							      44 STORE_FAST 4 ( count )					    8 >> 42 LOAD_FAST 3 ( rem )					  
							      								    44 LOAD_CONST 6 ( - 1 )					  
							      7 46 LOAD_FAST 4 ( count )				    46 INPLACE_SUBTRACT						  
							      48 LOAD_FAST 2 ( k )					    >> 48 STORE_FAST 3 ( rem )					  
							      50 COMPARE_OP 2 ( == )					    50 JUMP_FORWARD 4 ( to 48 )					  
							      52 POP_JUMP_IF_FALSE 58					    								  
							      								    10 >> 52 LOAD_FAST 3 ( rem )				  
							      8 54 LOAD_FAST 5 ( rem )					    54 LOAD_CONST 7 ( - 1 )					  
							      56 RETURN_VALUE						    56 INPLACE_SUBTRACT						  
							      								    58 STORE_FAST 3 ( rem )					  
							      9 >> 58 LOAD_FAST 3 ( p )					    								  
							      60 LOAD_CONST 2 ( 10 )					    11 >> 60 LOAD_FAST 3 ( rem )				  
							      62 BINARY_TRUE_DIVIDE					    62 LOAD_CONST 8 ( - 1 )					  
							      64 STORE_FAST 3 ( p )					    64 INPLACE_SUBTRACT						  
							      66 JUMP_ABSOLUTE 14					    66 STORE_FAST 3 ( rem )					  
							      >> 68 POP_BLOCK						    								  
							      >> 70 LOAD_CONST 0 ( None )				    12 68 LOAD_FAST 3 ( rem )					  
							      72 RETURN_VALUE NEW_LINE					    70 LOAD_CONST 9 ( - 1 )					  
							      								    72 INPLACE_SUBTRACT						  
							      								    74 STORE_FAST 3 ( rem )					  
							      								    								  
							      								    13 76 LOAD_FAST 3 ( rem )					  
							      								    78 LOAD_CONST 10 ( - 1 )					  
							      								    80 INPLACE_SUBTRACT						  
							      								    82 STORE_FAST 3 ( rem )					  
							      								    								  
							      								    14 84 LOAD_FAST 3 ( rem )					  
							      								    86 LOAD_CONST 11 ( - 1 )					  
							      								    88 INPLACE_SUBTRACT						  
							      								    90 STORE_FAST 3 ( rem )					  
							      								    								  
							      								    15 92 LOAD_FAST 3 ( rem )					  
							      								    94 LOAD_CONST 12 ( - 1 )					  
							      								    96 INPLACE_SUBTRACT						  
							      								    98 STORE_FAST 3 ( rem )					  
							      								    								  
							      								    16 100 LOAD_FAST 3 ( rem )					  
							      								    102 LOAD_FAST 3 ( rem )					  
							      								    104 LOAD_FAST 3 ( rem )					  
							      								    106 STORE_SUBSCR						  
							      								    								  
							      								    17 108 LOAD_FAST 3 ( rem )					  
							      								    110 LOAD_CONST 13 ( - 1 )					  
							      								    112 INPLACE_SUBTRACT					  
							      								    114 STORE_FAST 3 ( rem )					  
							      								    								  
							      								    18 116 LOAD_FAST 3 ( rem )					  
							      								    118 LOAD_CONST 14 ( - 1 )					  
							      								    120 INPLACE_SUBTRACT					  
							      								    122 STORE_FAST 3 ( rem )					  
							      								    								  
							      								    19 124 LOAD_FAST 3 ( rem )					  
							      								    126 LOAD_FAST 3 ( rem )					  
							      								    128 LOAD_FAST 3 ( rem )					  
							      								    130 STORE_SUBSCR						  
							      								    132 JUMP_ABSOLUTE 18					  
							      								    >> 134 POP_BLOCK						  
							      								    								  
							      								    20 >> 136 LOAD_FAST 3 ( rem )				  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE			  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
def recursiveReverse ( str ) :				      Disassembly of <code object recursiveReverse at 0x7f33e2644f6 Disassembly of <code object recurAPPLICATION_Reverse at 0x7f2 error : Traceback (most recent call last):   File
    stack = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( len ( str ) ) :			      2 STORE_FAST 1 ( stack )					    2 STORE_FAST 1 ( stack )					  (item)   File "main.py", line 44, in <module>	  Fi
	stack.append ( str [ i ] )			      								    								  le "<dis>", line 2, in recursiveReverse TypeError:
    for i in range ( len ( str ) ) :			      3 4 SETUP_LOOP 34 ( to 40 )				    3 4 SETUP_LOOP 64 ( to 66 )					   'range_iterator' object is not callable
	str [ i ] = stack.pop ( )			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_GLOBAL 1 ( len )					  
							      10 LOAD_FAST 0 ( str )					    10 LOAD_FAST 0 ( str )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 18 ( to 38 )				    >> 18 FOR_ITER 48 ( to 64 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 1 ( stack )				    4 22 LOAD_FAST 1 ( stack )					  
							      24 LOAD_METHOD 2 ( append )				    24 LOAD_METHOD 2 ( append )					  
							      26 LOAD_FAST 0 ( str )					    26 LOAD_GLOBAL 3 ( str )					  
							      28 LOAD_FAST 2 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 BINARY_SUBSCR						    30 CALL_FUNCTION 1						  
							      32 CALL_METHOD 1						    32 CALL_METHOD 1						  
							      34 POP_TOP						    34 POP_TOP							  
							      36 JUMP_ABSOLUTE 18					    								  
							      >> 38 POP_BLOCK						    5 36 SETUP_LOOP 40 ( to 62 )				  
							      								    38 LOAD_GLOBAL 0 ( range )					  
							      5 >> 40 SETUP_LOOP 32 ( to 74 )				    40 LOAD_GLOBAL 1 ( len )					  
							      42 LOAD_GLOBAL 0 ( range )				    42 LOAD_FAST 0 ( str )					  
							      44 LOAD_GLOBAL 1 ( len )					    44 CALL_FUNCTION 1						  
							      46 LOAD_FAST 0 ( str )					    46 CALL_FUNCTION 1						  
							      48 CALL_FUNCTION 1					    48 GET_ITER							  
							      50 CALL_FUNCTION 1					    >> 50 FOR_ITER 24 ( to 60 )					  
							      52 GET_ITER						    52 STORE_FAST 3 ( i )					  
							      >> 54 FOR_ITER 16 ( to 72 )				    								  
							      56 STORE_FAST 2 ( i )					    6 54 LOAD_FAST 1 ( stack )					  
							      								    56 LOAD_METHOD 2 ( append )					  
							      6 58 LOAD_FAST 1 ( stack )				    58 LOAD_GLOBAL 3 ( str )					  
							      60 LOAD_METHOD 3 ( pop )					    60 LOAD_FAST 2 ( i )					  
							      62 CALL_METHOD 0						    62 CALL_FUNCTION 1						  
							      64 LOAD_FAST 0 ( str )					    64 CALL_METHOD 1						  
							      66 LOAD_FAST 2 ( i )					    66 POP_TOP							  
							      68 STORE_SUBSCR						    								  
							      70 JUMP_ABSOLUTE 54					    7 68 LOAD_FAST 1 ( stack )					  
							      >> 72 POP_BLOCK						    70 LOAD_METHOD 2 ( append )					  
							      >> 74 LOAD_CONST 0 ( None )				    72 LOAD_GLOBAL 3 ( str )					  
							      76 RETURN_VALUE NEW_LINE					    74 LOAD_FAST 3 ( i )					  
							      								    76 CALL_FUNCTION 1						  
							      								    78 CALL_METHOD 1						  
							      								    80 POP_TOP							  
							      								    								  
							      								    8 82 LOAD_FAST 1 ( stack )					  
							      								    84 LOAD_METHOD 2 ( append )					  
							      								    86 LOAD_GLOBAL 3 ( str )					  
							      								    88 LOAD_FAST 2 ( i )					  
							      								    90 CALL_FUNCTION 1						  
							      								    92 CALL_METHOD 1						  
							      								    94 POP_TOP							  
							      								    								  
							      								    9 96 LOAD_FAST 1 ( stack )					  
							      								    98 LOAD_METHOD 2 ( append )					  
							      								    100 LOAD_GLOBAL 3 ( str )					  
							      								    102 LOAD_FAST 3 ( i )					  
							      								    104 CALL_FUNCTION 1						  
							      								    106 CALL_METHOD 1						  
							      								    108 POP_TOP							  
							      								    110 JUMP_ABSOLUTE 50					  
							      								    >> 112 POP_BLOCK						  
							      								    >> 114 JUMP_ABSOLUTE 18					  
							      								    >> 116 POP_BLOCK						  
							      								    								  
							      								    10 >> 118 LOAD_FAST 1 ( stack )				  
							      								    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_<unk> S				      NUMBER_TRIANGLES_N_<unk> S				    NUMBER_TRIANGLES_N_<unk> S					  NUMBER_TRIANGLES_N_<unk> S
--							      --							    --								  --
def numberOfTriangles ( n ) :				      Disassembly of <code object numberOfTriangles at 0x7f33e2653e Disassembly of <code object numberOfTriangles at 0x7f2b0163dc script_not_found : None
    answer = [ None ] * ( n + 1 ) ;			      2 0 LOAD_CONST 0 ( None )					    2 0 LOAD_CONST 0 ( None )					  
    answer [ 0 ] = 1 ;					      2 BUILD_LIST 1						    2 LOAD_CONST 0 ( None )					  
    i = 1						      4 LOAD_FAST 0 ( n )					    4 BUILD_SLICE 2						  
    while i <= n :					      6 LOAD_CONST 1 ( 1 )					    6 BINARY_SUBSCR						  
	answer [ i ] = answer [ i - 1 ] * 3 + 2 ;	      8 BINARY_ADD						    8 STORE_FAST 1 ( answer )					  
	i = i + 1					      10 BINARY_MULTIPLY					    								  
    return answer [ n ] ;				      12 STORE_FAST 1 ( answer )				    3 10 LOAD_CONST 1 ( 0 )					  
							      								    12 LOAD_CONST 0 ( None )					  
							      3 14 LOAD_CONST 1 ( 1 )					    14 BUILD_SLICE 2						  
							      16 LOAD_FAST 1 ( answer )					    16 BINARY_SUBSCR						  
							      18 LOAD_CONST 2 ( 0 )					    18 STORE_FAST 2 ( answer )					  
							      20 STORE_SUBSCR						    								  
							      								    4 20 LOAD_CONST 1 ( 0 )					  
							      4 22 LOAD_CONST 1 ( 1 )					    22 STORE_FAST 3 ( i )					  
							      24 STORE_FAST 2 ( i )					    								  
							      								    5 24 SETUP_LOOP 64 ( to 108 )				  
							      5 26 SETUP_LOOP 44 ( to 72 )				    26 LOAD_FAST 0 ( n )					  
							      >> 28 LOAD_FAST 2 ( i )					    28 GET_ITER							  
							      30 LOAD_FAST 0 ( n )					    >> 30 FOR_ITER 64 ( to 106 )				  
							      32 COMPARE_OP 1 ( <= )					    32 STORE_FAST 4 ( i )					  
							      34 POP_JUMP_IF_FALSE 70					    								  
							      								    6 34 LOAD_FAST 1 ( answer )					  
							      6 36 LOAD_FAST 1 ( answer )				    36 LOAD_FAST 4 ( i )					  
							      38 LOAD_FAST 2 ( i )					    38 BINARY_SUBSCR						  
							      40 LOAD_CONST 1 ( 1 )					    40 LOAD_CONST 2 ( 1 )					  
							      42 BINARY_SUBTRACT					    42 COMPARE_OP 2 ( == )					  
							      44 BINARY_SUBSCR						    44 POP_JUMP_IF_FALSE 48					  
							      46 LOAD_CONST 3 ( 3 )					    								  
							      48 BINARY_MULTIPLY					    7 46 LOAD_FAST 1 ( answer )					  
							      50 LOAD_CONST 4 ( 2 )					    48 LOAD_FAST 4 ( i )					  
							      52 BINARY_ADD						    50 BINARY_SUBSCR						  
							      54 LOAD_FAST 1 ( answer )					    52 LOAD_CONST 2 ( 1 )					  
							      56 LOAD_FAST 2 ( i )					    54 COMPARE_OP 2 ( == )					  
							      58 STORE_SUBSCR						    56 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      7 60 LOAD_FAST 2 ( i )					    8 58 LOAD_FAST 1 ( answer )					  
							      62 LOAD_CONST 1 ( 1 )					    60 LOAD_FAST 4 ( i )					  
							      64 BINARY_ADD						    62 BINARY_SUBSCR						  
							      66 STORE_FAST 2 ( i )					    64 LOAD_CONST 2 ( 1 )					  
							      68 JUMP_ABSOLUTE 28					    66 COMPARE_OP 2 ( == )					  
							      >> 70 POP_BLOCK						    68 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      8 >> 72 LOAD_FAST 1 ( answer )				    9 70 LOAD_FAST 1 ( answer )					  
							      74 LOAD_FAST 0 ( n )					    72 LOAD_FAST 4 ( i )					  
							      76 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      78 RETURN_VALUE NEW_LINE					    76 LOAD_CONST 2 ( 1 )					  
							      								    78 INPLACE_ADD						  
							      								    80 STORE_FAST 1 ( answer )					  
							      								    								  
							      								    10 82 LOAD_FAST 1 ( answer )				  
							      								    84 LOAD_FAST 4 ( i )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_CONST 2 ( 1 )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      								    92 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    11 94 LOAD_FAST 1 ( answer )				  
							      								    96 LOAD_FAST 4 ( i )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_CONST 2 ( 1 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 1 ( answer )					  
							      								    								  
							      								    12 >> 106 LOAD_FAST 1 ( answer )				  
							      								    108 LOAD_FAST 4 ( i )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 1 ( answer )					  
							      								    								  
							      								    13 118 LOAD_FAST 1 ( answer )				  
							      								    120 LOAD_FAST 4 ( i )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 2 ( 1 )					  
							      								    126 INPLACE_ADD						  
							      								    128 STORE_FAST 1 ( answer )					  
							      								    								  
							      								    14 130 LOAD_FAST 1 ( answer )				  
							      								    132 LOAD_FAST 2 ( answer )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    15 138 LOAD_FAST 1 ( answer )				  
							      								    140 LOAD_FAST 4 ( i )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 LOAD_CONST 2 ( 1 )					  
							      								    146 INPLACE_ADD						  
							      								    148 STORE_FAST 1 ( answer )					  
							      								    								  
							      								    17 150 LOAD_FAST 1 ( answer )				  
							      								    152 LOAD_FAST 2 ( answer )					  
							      								    154 LOAD_FAST 2 ( answer )					  
							      								    156 STORE_SUBSCR						  
							      								    								  
							      								    18 158 LOAD_FAST 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
def countPairs ( arr , n ) :				      Disassembly of <code object countPairs at 0x7f33e2653ed0, fil Disassembly of <code object countPairs at 0x7f2b01639660, fil error : Traceback (most recent call last):   File
    ans = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( ans )					    2 STORE_FAST 2 ( ans )					  (item)   File "main.py", line 33, in <module>	  Fi
	for j in range ( i + 1 , n ) :			      								    								  le "<dis>", line 2, in countPairs TypeError: 'list
	    if ( arr [ i ] == arr [ j ] ) :		      3 4 SETUP_LOOP 66 ( to 72 )				    3 4 SETUP_LOOP 64 ( to 66 )					  ' object cannot be interpreted as an integer
		ans += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return ans						      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( arr )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 52 ( to 70 )				    >> 16 FOR_ITER 48 ( to 64 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 46 ( to 68 )				    4 20 LOAD_FAST 2 ( ans )					  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_FAST 3 ( i )					  
							      24 LOAD_FAST 3 ( i )					    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 1 ( n )					  
							      28 BINARY_ADD						    28 COMPARE_OP 4 ( > )					  
							      30 LOAD_FAST 1 ( n )					    30 POP_JUMP_IF_FALSE 16					  
							      32 CALL_FUNCTION 2					    								  
							      34 GET_ITER						    5 32 LOAD_FAST 2 ( ans )					  
							      >> 36 FOR_ITER 28 ( to 66 )				    34 LOAD_FAST 3 ( i )					  
							      38 STORE_FAST 4 ( j )					    36 BINARY_SUBSCR						  
							      								    38 LOAD_FAST 1 ( n )					  
							      5 40 LOAD_FAST 0 ( arr )					    40 COMPARE_OP 4 ( > )					  
							      42 LOAD_FAST 3 ( i )					    42 POP_JUMP_IF_FALSE 16					  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_FAST 0 ( arr )					    6 44 LOAD_FAST 2 ( ans )					  
							      48 LOAD_FAST 4 ( j )					    46 LOAD_FAST 3 ( i )					  
							      50 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      52 COMPARE_OP 2 ( == )					    50 LOAD_FAST 1 ( n )					  
							      54 POP_JUMP_IF_FALSE 36					    52 COMPARE_OP 4 ( > )					  
							      								    54 POP_JUMP_IF_FALSE 16					  
							      6 56 LOAD_FAST 2 ( ans )					    								  
							      58 LOAD_CONST 2 ( 1 )					    7 56 LOAD_FAST 2 ( ans )					  
							      60 INPLACE_ADD						    58 LOAD_FAST 3 ( i )					  
							      62 STORE_FAST 2 ( ans )					    60 BINARY_SUBSCR						  
							      64 JUMP_ABSOLUTE 36					    62 LOAD_FAST 1 ( n )					  
							      >> 66 POP_BLOCK						    64 COMPARE_OP 4 ( > )					  
							      >> 68 JUMP_ABSOLUTE 16					    66 POP_JUMP_IF_FALSE 16					  
							      >> 70 POP_BLOCK						    								  
							      								    8 68 LOAD_FAST 2 ( ans )					  
							      7 >> 72 LOAD_FAST 2 ( ans )				    70 LOAD_FAST 3 ( i )					  
							      74 RETURN_VALUE NEW_LINE					    72 BINARY_SUBSCR						  
							      								    74 LOAD_FAST 1 ( n )					  
							      								    76 COMPARE_OP 4 ( > )					  
							      								    78 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    9 80 LOAD_FAST 2 ( ans )					  
							      								    82 LOAD_FAST 3 ( i )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 1 ( n )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 1 ( n )					  
							      								    92 STORE_SUBSCR						  
							      								    94 JUMP_ABSOLUTE 16						  
							      								    >> 96 POP_BLOCK						  
							      								    >> 98 LOAD_CONST 0 ( None )					  
							      								    100 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
def interchangeFirstLast ( mat , n , m ) :		      Disassembly of <code object interchangeFirstLast at 0x7f33e26 Disassembly of <code object interchangeFirstLast at 0x7f2b016 script_not_found : None
    rows = n						      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 0 ( mat )					  
    for i in range ( n ) :				      2 STORE_FAST 3 ( rows )					    2 STORE_FAST 2 ( rows )					  
	t = mat [ 0 ] [ i ]				      								    								  
	mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]	      3 4 SETUP_LOOP 68 ( to 74 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
	mat [ rows - 1 ] [ i ] = t			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
							      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 56 ( to 72 )				    >> 14 FOR_ITER 56 ( to 64 )					  
							      16 STORE_FAST 4 ( i )					    16 STORE_FAST 3 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 0 ( mat )					    4 18 LOAD_FAST 2 ( rows )					  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_FAST 3 ( i )					  
							      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
							      24 LOAD_FAST 4 ( i )					    24 LOAD_FAST 1 ( n )					  
							      26 BINARY_SUBSCR						    26 COMPARE_OP 4 ( > )					  
							      28 STORE_FAST 5 ( t )					    28 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      5 30 LOAD_FAST 0 ( mat )					    5 30 LOAD_FAST 2 ( rows )					  
							      32 LOAD_FAST 3 ( rows )					    32 LOAD_FAST 3 ( i )					  
							      34 LOAD_CONST 2 ( 1 )					    34 BINARY_SUBSCR						  
							      36 BINARY_SUBTRACT					    36 STORE_FAST 2 ( rows )					  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 4 ( i )					    6 38 LOAD_FAST 2 ( rows )					  
							      42 BINARY_SUBSCR						    40 LOAD_FAST 3 ( i )					  
							      44 LOAD_FAST 0 ( mat )					    42 BINARY_SUBSCR						  
							      46 LOAD_CONST 1 ( 0 )					    44 LOAD_FAST 1 ( n )					  
							      48 BINARY_SUBSCR						    46 COMPARE_OP 4 ( > )					  
							      50 LOAD_FAST 4 ( i )					    48 POP_JUMP_IF_FALSE 14					  
							      52 STORE_SUBSCR						    								  
							      								    7 50 LOAD_FAST 2 ( rows )					  
							      6 54 LOAD_FAST 5 ( t )					    52 LOAD_FAST 3 ( i )					  
							      56 LOAD_FAST 0 ( mat )					    54 BINARY_SUBSCR						  
							      58 LOAD_FAST 3 ( rows )					    56 LOAD_FAST 1 ( n )					  
							      60 LOAD_CONST 2 ( 1 )					    58 BINARY_SUBSCR						  
							      62 BINARY_SUBTRACT					    60 LOAD_FAST 1 ( n )					  
							      64 BINARY_SUBSCR						    62 COMPARE_OP 4 ( > )					  
							      66 LOAD_FAST 4 ( i )					    64 POP_JUMP_IF_FALSE 14					  
							      68 STORE_SUBSCR						    								  
							      70 JUMP_ABSOLUTE 14					    8 66 LOAD_FAST 2 ( rows )					  
							      >> 72 POP_BLOCK						    68 LOAD_FAST 3 ( i )					  
							      >> 74 LOAD_CONST 0 ( None )				    70 BINARY_SUBSCR						  
							      76 RETURN_VALUE NEW_LINE					    72 LOAD_FAST 1 ( n )					  
							      								    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 1 ( n )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 1 ( n )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 1 ( n )					  
							      								    86 STORE_SUBSCR						  
							      								    								  
							      								    9 88 LOAD_FAST 2 ( rows )					  
							      								    90 LOAD_FAST 3 ( i )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_FAST 1 ( n )					  
							      								    96 STORE_SUBSCR						  
							      								    98 JUMP_ABSOLUTE 14						  
							      								    >> 100 POP_BLOCK						  
							      								    								  
							      								    10 >> 102 LOAD_FAST 2 ( rows )				  
							      								    104 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_BITS_IN_A_GIVEN_NUMBER				      SWAP_BITS_IN_A_GIVEN_NUMBER				    SWAP_BITS_IN_A_GIVEN_NUMBER					  SWAP_BITS_IN_A_GIVEN_NUMBER
--							      --							    --								  --
def swapBits ( x , p1 , p2 , n ) :			      Disassembly of <code object swapBits at 0x7f33e26494b0, file  Disassembly of <code object swapBits at 0x7f2b01639660, file  error : Traceback (most recent call last):   File
    set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 )		      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_GLOBAL 0 ( set1 )					  "XLM/dis_script.py", line 59, in <module>	for
    set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 )		      2 LOAD_FAST 1 ( p1 )					    2 LOAD_FAST 0 ( x )						  item in run_dis_script():   File "XLM/dis_script.p
    xor = ( set1 ^ set2 )				      4 BINARY_RSHIFT						    4 LOAD_FAST 1 ( p1 )					  y", line 54, in run_dis_script     hyp_co = mco.to
    xor = ( xor << p1 ) | ( xor << p2 )			      6 LOAD_CONST 1 ( 1 )					    6 CALL_FUNCTION 2						  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    result = x ^ xor					      8 LOAD_FAST 3 ( n )					    8 POP_TOP							  assembler.py", line 81, in to_co     co_consts.app
    return result					      10 BINARY_LSHIFT						    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 LOAD_CONST 1 ( 1 )					    3 10 LOAD_GLOBAL 0 ( set1 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 BINARY_SUBTRACT					    12 LOAD_FAST 0 ( x )					  co	 self.co_cellvars, ValueError: code: varname
							      16 BINARY_AND						    14 LOAD_FAST 1 ( p1 )					  s is too small
							      18 STORE_FAST 4 ( set1 )					    16 CALL_FUNCTION 2						  
							      								    18 POP_TOP							  
							      3 20 LOAD_FAST 0 ( x )					    								  
							      22 LOAD_FAST 2 ( p2 )					    4 20 LOAD_GLOBAL 0 ( set1 )					  
							      24 BINARY_RSHIFT						    22 LOAD_FAST 0 ( x )					  
							      26 LOAD_CONST 1 ( 1 )					    24 LOAD_FAST 1 ( p1 )					  
							      28 LOAD_FAST 3 ( n )					    26 CALL_FUNCTION 2						  
							      30 BINARY_LSHIFT						    28 POP_TOP							  
							      32 LOAD_CONST 1 ( 1 )					    								  
							      34 BINARY_SUBTRACT					    5 30 LOAD_GLOBAL 0 ( set1 )					  
							      36 BINARY_AND						    32 LOAD_FAST 0 ( x )					  
							      38 STORE_FAST 5 ( set2 )					    34 LOAD_FAST 1 ( p1 )					  
							      								    36 CALL_FUNCTION 2						  
							      4 40 LOAD_FAST 4 ( set1 )					    38 POP_TOP							  
							      42 LOAD_FAST 5 ( set2 )					    								  
							      44 BINARY_XOR						    6 40 LOAD_GLOBAL 0 ( set1 )					  
							      46 STORE_FAST 6 ( xor )					    42 LOAD_FAST 0 ( x )					  
							      								    44 LOAD_FAST 1 ( p1 )					  
							      5 48 LOAD_FAST 6 ( xor )					    46 CALL_FUNCTION 2						  
							      50 LOAD_FAST 1 ( p1 )					    48 POP_TOP							  
							      52 BINARY_LSHIFT						    								  
							      54 LOAD_FAST 6 ( xor )					    7 50 LOAD_GLOBAL 0 ( set1 )					  
							      56 LOAD_FAST 2 ( p2 )					    52 LOAD_FAST 0 ( x )					  
							      58 BINARY_LSHIFT						    54 LOAD_FAST 1 ( p1 )					  
							      60 BINARY_OR						    56 CALL_FUNCTION 2						  
							      62 STORE_FAST 6 ( xor )					    58 POP_TOP							  
							      								    								  
							      6 64 LOAD_FAST 0 ( x )					    8 60 LOAD_GLOBAL 0 ( set1 )					  
							      66 LOAD_FAST 6 ( xor )					    62 LOAD_FAST 0 ( x )					  
							      68 BINARY_XOR						    64 LOAD_FAST 1 ( p1 )					  
							      70 STORE_FAST 7 ( result )				    66 CALL_FUNCTION 2						  
							      								    68 POP_TOP							  
							      7 72 LOAD_FAST 7 ( result )				    								  
							      74 RETURN_VALUE NEW_LINE					    9 70 LOAD_GLOBAL 0 ( set1 )					  
							      								    72 LOAD_FAST 0 ( x )					  
							      								    74 LOAD_FAST 1 ( p1 )					  
							      								    76 CALL_FUNCTION 2						  
							      								    78 POP_TOP							  
							      								    								  
							      								    10 80 LOAD_GLOBAL 0 ( set1 )				  
							      								    82 LOAD_FAST 0 ( x )					  
							      								    84 LOAD_FAST 1 ( p1 )					  
							      								    86 CALL_FUNCTION 2						  
							      								    88 POP_TOP							  
							      								    								  
							      								    11 90 LOAD_GLOBAL 0 ( set1 )				  
							      								    92 LOAD_FAST 0 ( x )					  
							      								    94 LOAD_FAST 1 ( p1 )					  
							      								    96 CALL_FUNCTION 2						  
							      								    98 POP_TOP							  
							      								    								  
							      								    12 100 LOAD_GLOBAL 0 ( set1 )				  
							      								    102 LOAD_FAST 0 ( x )					  
							      								    104 LOAD_FAST 1 ( p1 )					  
							      								    106 CALL_FUNCTION 2						  
							      								    108 POP_TOP							  
							      								    								  
							      								    13 110 LOAD_GLOBAL 0 ( set1 )				  
							      								    112 LOAD_FAST 0 ( x )					  
							      								    114 LOAD_FAST 1 ( p1 )					  
							      								    116 CALL_FUNCTION 2						  
							      								    118 POP_TOP							  
							      								    120 LOAD_CONST 0 ( None )					  
							      								    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE
--							      --							    --								  --
def search ( arr , n , x ) :				      Disassembly of <code object search at 0x7f33e2653ed0, file "< Disassembly of <code object search at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( i < n ) :					      2 STORE_FAST 3 ( i )					    2 STORE_FAST 2 ( i )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( arr [ i ] == x ) :				      								    								  le "<dis>", line 2, in search IndexError: list ind
	    return i					      3 4 SETUP_LOOP 48 ( to 54 )				    3 4 SETUP_LOOP 64 ( to 66 )					  ex out of range
	i = i + abs ( arr [ i ] - x )			      >> 6 LOAD_FAST 3 ( i )					    6 LOAD_FAST 0 ( arr )					  
    print ( "number is not present!" )			      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
    return - 1						      10 COMPARE_OP 0 ( < )					    10 BINARY_SUBSCR						  
							      12 POP_JUMP_IF_FALSE 52					    12 GET_ITER							  
							      								    >> 14 FOR_ITER 56 ( to 64 )					  
							      4 14 LOAD_FAST 0 ( arr )					    16 STORE_FAST 3 ( i )					  
							      16 LOAD_FAST 3 ( i )					    								  
							      18 BINARY_SUBSCR						    4 18 LOAD_FAST 2 ( i )					  
							      20 LOAD_FAST 2 ( x )					    20 LOAD_FAST 3 ( i )					  
							      22 COMPARE_OP 2 ( == )					    22 BINARY_SUBSCR						  
							      24 POP_JUMP_IF_FALSE 30					    24 LOAD_FAST 1 ( n )					  
							      								    26 COMPARE_OP 2 ( == )					  
							      5 26 LOAD_FAST 3 ( i )					    28 POP_JUMP_IF_FALSE 36					  
							      28 RETURN_VALUE						    								  
							      								    5 30 LOAD_FAST 2 ( i )					  
							      6 >> 30 LOAD_FAST 3 ( i )					    32 LOAD_FAST 3 ( i )					  
							      32 LOAD_GLOBAL 0 ( abs )					    34 BINARY_SUBSCR						  
							      34 LOAD_FAST 0 ( arr )					    36 STORE_FAST 2 ( i )					  
							      36 LOAD_FAST 3 ( i )					    38 JUMP_ABSOLUTE 14						  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 2 ( x )					    7 >> 40 LOAD_FAST 2 ( i )					  
							      42 BINARY_SUBTRACT					    42 LOAD_FAST 3 ( i )					  
							      44 CALL_FUNCTION 1					    44 BINARY_SUBSCR						  
							      46 BINARY_ADD						    46 STORE_FAST 4 ( j )					  
							      48 STORE_FAST 3 ( i )					    								  
							      50 JUMP_ABSOLUTE 6					    8 48 LOAD_FAST 2 ( i )					  
							      >> 52 POP_BLOCK						    50 LOAD_FAST 3 ( i )					  
							      								    52 BINARY_SUBSCR						  
							      7 >> 54 LOAD_GLOBAL 1 ( print )				    54 LOAD_FAST 4 ( j )					  
							      56 LOAD_CONST 2 ( 'number is not present!' )		    56 COMPARE_OP 2 ( == )					  
							      58 CALL_FUNCTION 1					    58 POP_JUMP_IF_FALSE 14					  
							      60 POP_TOP						    								  
							      								    9 60 LOAD_FAST 2 ( i )					  
							      8 62 LOAD_CONST 3 ( - 1 )					    62 LOAD_FAST 3 ( i )					  
							      64 RETURN_VALUE NEW_LINE					    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 4 ( j )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 4 ( j )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_FAST 4 ( j )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 4 ( j )					  
							      								    80 STORE_SUBSCR						  
							      								    								  
							      								    10 82 LOAD_FAST 2 ( i )					  
							      								    84 LOAD_FAST 3 ( i )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 4 ( j )					  
							      								    90 STORE_SUBSCR						  
							      								    								  
							      								    11 92 LOAD_FAST 2 ( i )					  
							      								    94 LOAD_FAST 3 ( i )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 4 ( j )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    12 102 LOAD_FAST 2 ( i )					  
							      								    104 LOAD_FAST 3 ( i )					  
							      								    106 STORE_SUBSCR						  
							      								    								  
							      								    13 108 LOAD_FAST 2 ( i )					  
							      								    110 LOAD_FAST 3 ( i )					  
							      								    112 STORE_SUBSCR						  
							      								    114 JUMP_ABSOLUTE 14					  
							      								    >> 116 POP_BLOCK						  
							      								    								  
							      								    14 >> 118 LOAD_FAST 2 ( i )					  
							      								    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
def minimumflip ( mat , n ) :				      Disassembly of <code object minimumflip at 0x7f33e2653ed0, fi Disassembly of <code object minimumflip at 0x7f2b0163dc90, fi error : /bin/bash: line 1: 12044 Segmentation faul
    flip = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( n ) :				      2 STORE_FAST 2 ( flip )					    2 STORE_FAST 2 ( flip )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( i ) :				      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	    if mat [ i ] [ j ] != mat [ j ] [ i ] :	      3 4 SETUP_LOOP 66 ( to 72 )				    3 4 SETUP_LOOP 76 ( to 80 )					  24/eval_scripts/python_sa-dis_sa.valid/MINIMUM_FLI
		flip += 1				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  P_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1.dis
    return flip						      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 54 ( to 70 )				    >> 14 FOR_ITER 74 ( to 78 )					  
							      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
							      								    								  
							      4 18 SETUP_LOOP 48 ( to 68 )				    4 18 SETUP_LOOP 76 ( to 76 )				  
							      20 LOAD_GLOBAL 0 ( range )				    20 LOAD_GLOBAL 1 ( range )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 2 ( flip )					  
							      24 CALL_FUNCTION 1					    24 CALL_FUNCTION 1						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 36 ( to 66 )				    >> 28 FOR_ITER 54 ( to 74 )					  
							      30 STORE_FAST 4 ( j )					    30 STORE_FAST 4 ( i )					  
							      								    								  
							      5 32 LOAD_FAST 0 ( mat )					    5 32 LOAD_FAST 0 ( mat )					  
							      34 LOAD_FAST 3 ( i )					    34 LOAD_FAST 4 ( i )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 4 ( j )					    38 LOAD_FAST 1 ( n )					  
							      40 BINARY_SUBSCR						    40 COMPARE_OP 3 ( != )					  
							      42 LOAD_FAST 0 ( mat )					    42 POP_JUMP_IF_FALSE 28					  
							      44 LOAD_FAST 4 ( j )					    								  
							      46 BINARY_SUBSCR						    6 44 LOAD_FAST 2 ( flip )					  
							      48 LOAD_FAST 3 ( i )					    46 LOAD_FAST 4 ( i )					  
							      50 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      52 COMPARE_OP 3 ( != )					    50 LOAD_FAST 1 ( n )					  
							      54 POP_JUMP_IF_FALSE 28					    52 LOAD_FAST 4 ( i )					  
							      								    54 BINARY_SUBSCR						  
							      6 56 LOAD_FAST 2 ( flip )					    56 LOAD_FAST 1 ( n )					  
							      58 LOAD_CONST 2 ( 1 )					    58 BINARY_SUBSCR						  
							      60 INPLACE_ADD						    60 LOAD_FAST 1 ( n )					  
							      62 STORE_FAST 2 ( flip )					    62 BINARY_SUBSCR						  
							      64 JUMP_ABSOLUTE 28					    64 LOAD_FAST 1 ( n )					  
							      >> 66 POP_BLOCK						    66 COMPARE_OP 3 ( != )					  
							      >> 68 JUMP_ABSOLUTE 14					    68 POP_JUMP_IF_FALSE 28					  
							      >> 70 POP_BLOCK						    								  
							      								    7 70 LOAD_FAST 2 ( flip )					  
							      7 >> 72 LOAD_FAST 2 ( flip )				    72 LOAD_FAST 4 ( i )					  
							      74 RETURN_VALUE NEW_LINE					    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 1 ( n )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 1 ( n )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 1 ( n )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_FAST 1 ( n )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_FAST 1 ( n )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( n )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 1 ( n )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_FAST 1 ( n )					  
							      								    106 STORE_SUBSCR						  
							      								    								  
							      								    8 >> 108 LOAD_FAST 2 ( flip )				  
							      								    110 LOAD_FAST 2 ( flip )					  
							      								    112 LOAD_FAST 2 ( flip )					  
							      								    114 LOAD_FAST 2 ( flip )					  
							      								    116 LOAD_FAST 2 ( flip )					  
							      								    118 LOAD_FAST 3 ( i )					  
							      								    120 STORE_SUBSCR						  
							      								    122 JUMP_ABSOLUTE 28					  
							      								    >> 124 POP_BLOCK						  
							      								    >> 126 JUMP_ABSOLUTE 14					  
							      								    >> 128 POP_BLOCK						  
							      								    >> 130 LOAD_CONST 0 ( None )				  
							      								    132 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
def countPairs ( a , n ) :				      Disassembly of <code object countPairs at 0x7f33e2653f60, fil Disassembly of <code object countPairs at 0x7f2b01639660, fil error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( count )					    2 STORE_FAST 2 ( count )					  (item)   File "main.py", line 33, in <module>	  Fi
	for j in range ( i + 1 , n ) :			      								    								  le "<dis>", line 2, in countPairs TypeError: 'list
	    if ( a [ i ] & a [ j ] ) == 0 :		      3 4 SETUP_LOOP 70 ( to 76 )				    3 4 SETUP_LOOP 64 ( to 66 )					  ' object cannot be interpreted as an integer
		count += 2				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return count					      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( a )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 56 ( to 74 )				    >> 16 FOR_ITER 48 ( to 64 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 50 ( to 72 )				    4 20 SETUP_LOOP 40 ( to 62 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_CONST 2 ( 0 )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 1 ( n )					  
							      28 BINARY_ADD						    28 CALL_FUNCTION 2						  
							      30 LOAD_FAST 1 ( n )					    30 GET_ITER							  
							      32 CALL_FUNCTION 2					    >> 32 FOR_ITER 24 ( to 60 )					  
							      34 GET_ITER						    34 STORE_FAST 4 ( i )					  
							      >> 36 FOR_ITER 32 ( to 70 )				    								  
							      38 STORE_FAST 4 ( j )					    5 36 LOAD_FAST 2 ( count )					  
							      								    38 LOAD_FAST 3 ( i )					  
							      5 40 LOAD_FAST 0 ( a )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 3 ( i )					    42 STORE_FAST 5 ( count )					  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_FAST 0 ( a )					    6 44 LOAD_FAST 2 ( count )					  
							      48 LOAD_FAST 4 ( j )					    46 LOAD_FAST 3 ( i )					  
							      50 BINARY_SUBSCR						    48 BINARY_SUBSCR						  
							      52 BINARY_AND						    50 LOAD_FAST 5 ( count )					  
							      54 LOAD_CONST 1 ( 0 )					    52 COMPARE_OP 4 ( > )					  
							      56 COMPARE_OP 2 ( == )					    54 POP_JUMP_IF_FALSE 32					  
							      58 POP_JUMP_IF_FALSE 36					    								  
							      								    7 56 LOAD_FAST 2 ( count )					  
							      6 60 LOAD_FAST 2 ( count )				    58 LOAD_FAST 3 ( i )					  
							      62 LOAD_CONST 3 ( 2 )					    60 BINARY_SUBSCR						  
							      64 INPLACE_ADD						    62 LOAD_FAST 5 ( count )					  
							      66 STORE_FAST 2 ( count )					    64 COMPARE_OP 4 ( > )					  
							      68 JUMP_ABSOLUTE 36					    66 POP_JUMP_IF_FALSE 32					  
							      >> 70 POP_BLOCK						    								  
							      >> 72 JUMP_ABSOLUTE 16					    8 68 LOAD_FAST 2 ( count )					  
							      >> 74 POP_BLOCK						    70 LOAD_FAST 3 ( i )					  
							      								    72 BINARY_SUBSCR						  
							      7 >> 76 LOAD_FAST 2 ( count )				    74 LOAD_FAST 5 ( count )					  
							      78 RETURN_VALUE NEW_LINE					    76 INPLACE_ADD						  
							      								    78 STORE_FAST 2 ( count )					  
							      								    								  
							      								    9 80 LOAD_FAST 2 ( count )					  
							      								    82 LOAD_FAST 3 ( i )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 5 ( count )					  
							      								    88 STORE_SUBSCR						  
							      								    								  
							      								    10 90 LOAD_FAST 2 ( count )					  
							      								    92 LOAD_FAST 3 ( i )					  
							      								    94 STORE_SUBSCR						  
							      								    96 JUMP_ABSOLUTE 32						  
							      								    >> 98 POP_BLOCK						  
							      								    								  
							      								    11 >> 100 LOAD_FAST 2 ( count )				  
							      								    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			      CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			    CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT			  CHECK_IF_TWO_<unk> YS_ARE_EQUAL_OR_NOT
--							      --							    --								  --
def areEqual ( arr1 , arr2 , n , m ) :			      Disassembly of <code object areEqual at 0x7f33e2644f60, file  Disassembly of <code object areEqual at 0x7f2b0163dc90, file  script_not_found : None
    if ( n != m ) :					      2 0 LOAD_FAST 2 ( n )					    2 0 LOAD_FAST 0 ( arr1 )					  
	return False ;					      2 LOAD_FAST 3 ( m )					    2 LOAD_FAST 1 ( arr2 )					  
    arr1.sort ( ) ;					      4 COMPARE_OP 3 ( != )					    4 COMPARE_OP 3 ( != )					  
    arr2.sort ( ) ;					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    for i in range ( 0 , n - 1 ) :			      								    								  
	if ( arr1 [ i ] != arr2 [ i ] ) :		      3 8 LOAD_CONST 1 ( False )				    3 8 LOAD_CONST 1 ( False )					  
	    return False ;				      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return True ;					      								    								  
							      4 >> 12 LOAD_FAST 0 ( arr1 )				    4 >> 12 LOAD_FAST 0 ( arr1 )				  
							      14 LOAD_METHOD 0 ( sort )					    14 LOAD_FAST 1 ( arr2 )					  
							      16 CALL_METHOD 0						    16 COMPARE_OP 3 ( != )					  
							      18 POP_TOP						    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_FAST 1 ( arr2 )					    5 20 LOAD_FAST 0 ( arr1 )					  
							      22 LOAD_METHOD 0 ( sort )					    22 LOAD_FAST 1 ( arr2 )					  
							      24 CALL_METHOD 0						    24 BINARY_SUBTRACT						  
							      26 POP_TOP						    26 STORE_FAST 2 ( arr2 )					  
							      								    								  
							      6 28 SETUP_LOOP 42 ( to 72 )				    6 >> 28 LOAD_CONST 2 ( True )				  
							      30 LOAD_GLOBAL 1 ( range )				    30 RETURN_VALUE						  
							      32 LOAD_CONST 2 ( 0 )					    								  
							      34 LOAD_FAST 2 ( n )					    7 >> 32 LOAD_CONST 3 ( False )				  
							      36 LOAD_CONST 3 ( 1 )					    34 RETURN_VALUE						  
							      38 BINARY_SUBTRACT					    36 LOAD_CONST 0 ( None )					  
							      40 CALL_FUNCTION 2					    38 RETURN_VALUE NEW_LINE					  
							      42 GET_ITER						    								  
							      >> 44 FOR_ITER 24 ( to 70 )				    								  
							      46 STORE_FAST 4 ( i )					    								  
							      								    								  
							      7 48 LOAD_FAST 0 ( arr1 )					    								  
							      50 LOAD_FAST 4 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 1 ( arr2 )					    								  
							      56 LOAD_FAST 4 ( i )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 COMPARE_OP 3 ( != )					    								  
							      62 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      8 64 LOAD_CONST 1 ( False )				    								  
							      66 RETURN_VALUE						    								  
							      68 JUMP_ABSOLUTE 44					    								  
							      >> 70 POP_BLOCK						    								  
							      								    								  
							      9 >> 72 LOAD_CONST 4 ( True )				    								  
							      74 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X	  COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X
--							      --							    --								  --
def countPairs ( arr1 , arr2 , m , n , x ) :		      Disassembly of <code object countPairs at 0x7f33e26499c0, fil Disassembly of <code object countPairs at 0x7f2b01639660, fil error : Traceback (most recent call last):   File
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( m ) :				      2 STORE_FAST 5 ( count )					    2 STORE_FAST 2 ( count )					  (item)   File "main.py", line 33, in <module>	  Fi
	for j in range ( n ) :				      								    								  le "<dis>", line 2, in countPairs TypeError: 'list
	    if arr1 [ i ] + arr2 [ j ] == x :		      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 LOAD_CONST 2 ( 1 )					  ' object cannot be interpreted as an integer
		count = count + 1			      6 LOAD_GLOBAL 0 ( range )					    6 STORE_FAST 3 ( count )					  
    return count					      8 LOAD_FAST 2 ( m )					    								  
							      10 CALL_FUNCTION 1					    4 8 SETUP_LOOP 64 ( to 76 )					  
							      12 GET_ITER						    10 LOAD_GLOBAL 0 ( range )					  
							      >> 14 FOR_ITER 50 ( to 66 )				    12 LOAD_FAST 1 ( arr2 )					  
							      16 STORE_FAST 6 ( i )					    14 CALL_FUNCTION 1						  
							      								    16 GET_ITER							  
							      4 18 SETUP_LOOP 44 ( to 64 )				    >> 18 FOR_ITER 48 ( to 74 )					  
							      20 LOAD_GLOBAL 0 ( range )				    20 STORE_FAST 4 ( i )					  
							      22 LOAD_FAST 3 ( n )					    								  
							      24 CALL_FUNCTION 1					    5 22 SETUP_LOOP 48 ( to 72 )				  
							      26 GET_ITER						    24 LOAD_GLOBAL 0 ( range )					  
							      >> 28 FOR_ITER 32 ( to 62 )				    26 LOAD_FAST 1 ( arr2 )					  
							      30 STORE_FAST 7 ( j )					    28 CALL_FUNCTION 1						  
							      								    30 GET_ITER							  
							      5 32 LOAD_FAST 0 ( arr1 )					    >> 32 FOR_ITER 40 ( to 70 )					  
							      34 LOAD_FAST 6 ( i )					    34 STORE_FAST 5 ( i )					  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_FAST 1 ( arr2 )					    6 36 LOAD_FAST 2 ( count )					  
							      40 LOAD_FAST 7 ( j )					    38 LOAD_FAST 3 ( count )					  
							      42 BINARY_SUBSCR						    40 COMPARE_OP 2 ( == )					  
							      44 BINARY_ADD						    42 POP_JUMP_IF_FALSE 48					  
							      46 LOAD_FAST 4 ( x )					    								  
							      48 COMPARE_OP 2 ( == )					    7 44 LOAD_FAST 2 ( count )					  
							      50 POP_JUMP_IF_FALSE 28					    46 LOAD_FAST 3 ( count )					  
							      								    48 BINARY_SUBSCR						  
							      6 52 LOAD_FAST 5 ( count )				    50 STORE_FAST 2 ( count )					  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_ADD						    8 52 LOAD_FAST 2 ( count )					  
							      58 STORE_FAST 5 ( count )					    54 LOAD_FAST 3 ( count )					  
							      60 JUMP_ABSOLUTE 28					    56 BINARY_SUBSCR						  
							      >> 62 POP_BLOCK						    58 LOAD_FAST 2 ( count )					  
							      >> 64 JUMP_ABSOLUTE 14					    60 COMPARE_OP 2 ( == )					  
							      >> 66 POP_BLOCK						    62 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      7 >> 68 LOAD_FAST 5 ( count )				    9 64 LOAD_FAST 2 ( count )					  
							      70 RETURN_VALUE NEW_LINE					    66 LOAD_FAST 3 ( count )					  
							      								    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 2 ( count )					  
							      								    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 90					  
							      								    								  
							      								    10 76 LOAD_FAST 2 ( count )					  
							      								    78 LOAD_FAST 3 ( count )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 2 ( count )					  
							      								    84 STORE_SUBSCR						  
							      								    								  
							      								    11 >> 86 LOAD_FAST 2 ( count )				  
							      								    88 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
def findMinDiff ( arr , n ) :				      Disassembly of <code object findMinDiff at 0x7f33e2653ed0, fi Disassembly of <code object findMinDiff at 0x7f2b0163dc90, fi error : /bin/bash: line 1: 12075 Segmentation faul
    arr = sorted ( arr )				      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    diff = 10 ** 20					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  ataset/bin/python XLM/dis_script.py --script_path
    for i in range ( n - 1 ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	if arr [ i + 1 ] - arr [ i ] < diff :		      6 STORE_FAST 0 ( arr )					    6 STORE_FAST 1 ( arr )					  24/eval_scripts/python_sa-dis_sa.valid/FIND_MINIMU
	    diff = arr [ i + 1 ] - arr [ i ]		      								    								  M_DIFFERENCE_PAIR_1.dis
    return diff						      3 8 LOAD_CONST 1 ( 100000000000000000000 )		    3 8 LOAD_CONST 1 ( 10 )					  
							      10 STORE_FAST 2 ( diff )					    10 LOAD_CONST 2 ( 20 )					  
							      								    12 LOAD_CONST 3 ( 20 )					  
							      4 12 SETUP_LOOP 64 ( to 78 )				    14 LOAD_CONST 4 ( ( 'n' , 'n' ) )				  
							      14 LOAD_GLOBAL 1 ( range )				    16 CALL_FUNCTION_KW 2					  
							      16 LOAD_FAST 1 ( n )					    18 STORE_FAST 2 ( diff )					  
							      18 LOAD_CONST 2 ( 1 )					    								  
							      20 BINARY_SUBTRACT					    4 20 SETUP_LOOP 64 ( to 102 )				  
							      22 CALL_FUNCTION 1					    22 LOAD_GLOBAL 1 ( range )					  
							      24 GET_ITER						    24 LOAD_CONST 5 ( 1 )					  
							      >> 26 FOR_ITER 48 ( to 76 )				    26 LOAD_CONST 6 ( 2 )					  
							      28 STORE_FAST 3 ( i )					    28 CALL_FUNCTION 2						  
							      								    30 GET_ITER							  
							      5 30 LOAD_FAST 0 ( arr )					    >> 32 FOR_ITER 64 ( to 100 )				  
							      32 LOAD_FAST 3 ( i )					    34 STORE_FAST 3 ( i )					  
							      34 LOAD_CONST 2 ( 1 )					    								  
							      36 BINARY_ADD						    5 36 LOAD_FAST 1 ( arr )					  
							      38 BINARY_SUBSCR						    38 LOAD_FAST 3 ( i )					  
							      40 LOAD_FAST 0 ( arr )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_METHOD 2 ( append )					  
							      44 BINARY_SUBSCR						    44 LOAD_FAST 2 ( diff )					  
							      46 BINARY_SUBTRACT					    46 CALL_METHOD 1						  
							      48 LOAD_FAST 2 ( diff )					    48 POP_TOP							  
							      50 COMPARE_OP 0 ( < )					    								  
							      52 POP_JUMP_IF_FALSE 26					    6 50 LOAD_FAST 1 ( arr )					  
							      								    52 LOAD_FAST 3 ( i )					  
							      6 54 LOAD_FAST 0 ( arr )					    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 3 ( i )					    56 LOAD_METHOD 2 ( append )					  
							      58 LOAD_CONST 2 ( 1 )					    58 LOAD_FAST 2 ( diff )					  
							      60 BINARY_ADD						    60 CALL_METHOD 1						  
							      62 BINARY_SUBSCR						    62 POP_TOP							  
							      64 LOAD_FAST 0 ( arr )					    								  
							      66 LOAD_FAST 3 ( i )					    7 64 LOAD_FAST 1 ( arr )					  
							      68 BINARY_SUBSCR						    66 LOAD_FAST 3 ( i )					  
							      70 BINARY_SUBTRACT					    68 BINARY_SUBSCR						  
							      72 STORE_FAST 2 ( diff )					    70 LOAD_METHOD 2 ( append )					  
							      74 JUMP_ABSOLUTE 26					    72 LOAD_FAST 2 ( diff )					  
							      >> 76 POP_BLOCK						    74 CALL_METHOD 1						  
							      								    76 POP_TOP							  
							      7 >> 78 LOAD_FAST 2 ( diff )				    								  
							      80 RETURN_VALUE NEW_LINE					    8 78 LOAD_FAST 1 ( arr )					  
							      								    80 LOAD_FAST 3 ( i )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_METHOD 2 ( append )					  
							      								    86 LOAD_FAST 2 ( diff )					  
							      								    88 CALL_METHOD 1						  
							      								    90 POP_TOP							  
							      								    92 JUMP_ABSOLUTE 32						  
							      								    >> 94 POP_BLOCK						  
							      								    >> 96 JUMP_ABSOLUTE 32					  
							      								    >> 98 POP_BLOCK						  
							      								    								  
							      								    9 >> 100 LOAD_FAST 1 ( arr )				  
							      								    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
def swap ( xp , yp ) :					      Disassembly of <code object swap at 0x7f33e26499c0, file "<di Disassembly of <code object swap at 0x7f2b01639660, file "<di script_not_found : None
    if ( xp [ 0 ] == yp [ 0 ] ) :			      2 0 LOAD_FAST 0 ( xp )					    2 0 LOAD_FAST 0 ( xp )					  
	return						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_FAST 0 ( xp )					  
    xp [ 0 ] = xp [ 0 ] + yp [ 0 ]			      4 BINARY_SUBSCR						    4 LOAD_CONST 1 ( 0 )					  
    yp [ 0 ] = xp [ 0 ] - yp [ 0 ]			      6 LOAD_FAST 1 ( yp )					    6 BINARY_SUBSCR						  
    xp [ 0 ] = xp [ 0 ] - yp [ 0 ]			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_FAST 0 ( xp )					  
							      10 BINARY_SUBSCR						    10 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    12 BINARY_SUBSCR						  
							      14 POP_JUMP_IF_FALSE 20					    14 BINARY_SUBTRACT						  
							      								    16 COMPARE_OP 2 ( == )					  
							      3 16 LOAD_CONST 0 ( None )				    18 POP_JUMP_IF_FALSE 32					  
							      18 RETURN_VALUE						    								  
							      								    3 20 LOAD_FAST 0 ( xp )					  
							      4 >> 20 LOAD_FAST 0 ( xp )				    22 LOAD_FAST 0 ( xp )					  
							      22 LOAD_CONST 1 ( 0 )					    24 LOAD_CONST 1 ( 0 )					  
							      24 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      26 LOAD_FAST 1 ( yp )					    28 LOAD_FAST 0 ( xp )					  
							      28 LOAD_CONST 1 ( 0 )					    30 LOAD_CONST 1 ( 0 )					  
							      30 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      32 BINARY_ADD						    34 BINARY_SUBTRACT						  
							      34 LOAD_FAST 0 ( xp )					    36 BINARY_SUBSCR						  
							      36 LOAD_CONST 1 ( 0 )					    38 RETURN_VALUE						  
							      38 STORE_SUBSCR						    								  
							      								    4 >> 40 LOAD_FAST 0 ( xp )					  
							      5 40 LOAD_FAST 0 ( xp )					    42 LOAD_FAST 0 ( xp )					  
							      42 LOAD_CONST 1 ( 0 )					    44 LOAD_CONST 1 ( 0 )					  
							      44 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      46 LOAD_FAST 1 ( yp )					    48 LOAD_FAST 0 ( xp )					  
							      48 LOAD_CONST 1 ( 0 )					    50 LOAD_CONST 1 ( 0 )					  
							      50 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      52 BINARY_SUBTRACT					    54 BINARY_SUBTRACT						  
							      54 LOAD_FAST 1 ( yp )					    56 LOAD_FAST 0 ( xp )					  
							      56 LOAD_CONST 1 ( 0 )					    58 LOAD_CONST 1 ( 0 )					  
							      58 STORE_SUBSCR						    60 BINARY_SUBSCR						  
							      								    62 BINARY_SUBTRACT						  
							      6 60 LOAD_FAST 0 ( xp )					    64 BINARY_MULTIPLY						  
							      62 LOAD_CONST 1 ( 0 )					    66 RETURN_VALUE NEW_LINE					  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 1 ( yp )					    								  
							      68 LOAD_CONST 1 ( 0 )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 BINARY_SUBTRACT					    								  
							      74 LOAD_FAST 0 ( xp )					    								  
							      76 LOAD_CONST 1 ( 0 )					    								  
							      78 STORE_SUBSCR						    								  
							      80 LOAD_CONST 0 ( None )					    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def reverseStr ( str ) :				      Disassembly of <code object reverseStr at 0x7f33e26494b0, fil Disassembly of <code object reverseStr at 0x7f2b01639660, fil script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    i , j = 0 , n - 1					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    while i < j :					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	str [ i ] , str [ j ] = str [ j ] , str [ i ]	      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	i += 1						      								    								  
	j -= 1						      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 LOAD_FAST 1 ( n )					    10 STORE_FAST 2 ( n )					  
							      12 LOAD_CONST 2 ( 1 )					    								  
							      14 BINARY_SUBTRACT					    4 12 SETUP_LOOP 64 ( to 76 )				  
							      16 ROT_TWO						    14 LOAD_FAST 0 ( str )					  
							      18 STORE_FAST 2 ( i )					    16 GET_ITER							  
							      20 STORE_FAST 3 ( j )					    >> 18 FOR_ITER 64 ( to 74 )					  
							      								    20 STORE_FAST 3 ( i )					  
							      4 22 SETUP_LOOP 54 ( to 78 )				    								  
							      >> 24 LOAD_FAST 2 ( i )					    5 22 LOAD_GLOBAL 1 ( str )					  
							      26 LOAD_FAST 3 ( j )					    24 LOAD_FAST 3 ( i )					  
							      28 COMPARE_OP 0 ( < )					    26 LOAD_FAST 1 ( n )					  
							      30 POP_JUMP_IF_FALSE 76					    28 BINARY_SUBSCR						  
							      								    30 LOAD_METHOD 2 ( split )					  
							      5 32 LOAD_FAST 0 ( str )					    32 LOAD_CONST 2 ( ',' )					  
							      34 LOAD_FAST 3 ( j )					    34 CALL_METHOD 1						  
							      36 BINARY_SUBSCR						    36 LOAD_CONST 3 ( 1 )					  
							      38 LOAD_FAST 0 ( str )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 2 ( i )					    40 STORE_FAST 4 ( i )					  
							      42 BINARY_SUBSCR						    								  
							      44 ROT_TWO						    6 42 LOAD_FAST 1 ( n )					  
							      46 LOAD_FAST 0 ( str )					    44 LOAD_FAST 2 ( n )					  
							      48 LOAD_FAST 2 ( i )					    46 COMPARE_OP 4 ( > )					  
							      50 STORE_SUBSCR						    48 POP_JUMP_IF_FALSE 18					  
							      52 LOAD_FAST 0 ( str )					    								  
							      54 LOAD_FAST 3 ( j )					    7 50 LOAD_FAST 1 ( n )					  
							      56 STORE_SUBSCR						    52 LOAD_FAST 2 ( n )					  
							      								    54 BINARY_SUBSCR						  
							      6 58 LOAD_FAST 2 ( i )					    56 STORE_FAST 1 ( n )					  
							      60 LOAD_CONST 2 ( 1 )					    58 JUMP_ABSOLUTE 18						  
							      62 INPLACE_ADD						    >> 60 POP_BLOCK						  
							      64 STORE_FAST 2 ( i )					    								  
							      								    8 >> 62 LOAD_FAST 2 ( n )					  
							      7 66 LOAD_FAST 3 ( j )					    64 RETURN_VALUE NEW_LINE					  
							      68 LOAD_CONST 2 ( 1 )					    								  
							      70 INPLACE_SUBTRACT					    								  
							      72 STORE_FAST 3 ( j )					    								  
							      74 JUMP_ABSOLUTE 24					    								  
							      >> 76 POP_BLOCK						    								  
							      >> 78 LOAD_CONST 0 ( None )				    								  
							      80 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS		      MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			    MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			  MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS
--							      --							    --								  --
def minDifferenceAmongMaxMin ( arr , N , K ) :		      Disassembly of <code object minDifferenceAmongMaxMin at 0x7f3 Disassembly of <code object minDifferenceAmongMaxMin at 0x7f2 error : Traceback (most recent call last):   File
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
    res = 2147483647					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( ( N - K ) + 1 ) :			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  y", line 47, in run_dis_script     co_code, co_nlo
	curSeqDiff = arr [ i + K - 1 ] - arr [ i ]	      6 POP_TOP							    6 STORE_FAST 1 ( res )					  cals, co_varnames, co_names, co_consts, co_linesta
	res = min ( res , curSeqDiff )			      								    								  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
    return res						      3 8 LOAD_CONST 1 ( 2147483647 )				    3 8 LOAD_CONST 1 ( 2147483647 )				  /TransCoder/XLM/src/dis_assembler.py", line 212, i
							      10 STORE_FAST 3 ( res )					    10 STORE_FAST 2 ( res )					  n parse     constants[arg] = ast.literal_eval(argr
							      								    								  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      4 12 SETUP_LOOP 58 ( to 72 )				    4 12 SETUP_LOOP 64 ( to 78 )				  ib/python3.7/ast.py", line 91, in literal_eval
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					   return _convert(node_or_string)   File "/home/ubu
							      16 LOAD_FAST 1 ( N )					    16 LOAD_CONST 2 ( ( N - K ) )				  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      18 LOAD_FAST 2 ( K )					    18 LOAD_CONST 3 ( 1 )					  line 83, in _convert	   left = _convert_signed_nu
							      20 BINARY_SUBTRACT					    20 BINARY_ADD						  m(node.left)	 File "/home/ubuntu/anaconda3/envs/d
							      22 LOAD_CONST 2 ( 1 )					    22 CALL_FUNCTION 2						  ataset/lib/python3.7/ast.py", line 63, in _convert
							      24 BINARY_ADD						    24 GET_ITER							  _signed_num	  return _convert_num(node)   File "
							      26 CALL_FUNCTION 1					    >> 26 FOR_ITER 48 ( to 76 )					  /home/ubuntu/anaconda3/envs/dataset/lib/python3.7/
							      28 GET_ITER						    28 STORE_FAST 3 ( i )					  ast.py", line 55, in _convert_num	raise ValueE
							      >> 30 FOR_ITER 38 ( to 70 )				    								  rror('malformed node or string: ' + repr(node)) Va
							      32 STORE_FAST 4 ( i )					    5 30 LOAD_FAST 3 ( i )					  lueError: malformed node or string: <_ast.Name obj
							      								    32 LOAD_FAST 2 ( res )					  ect at 0x7f282fccf810>
							      5 34 LOAD_FAST 0 ( arr )					    34 LOAD_FAST 3 ( i )					  
							      36 LOAD_FAST 4 ( i )					    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 2 ( K )					    38 LOAD_FAST 1 ( res )					  
							      40 BINARY_ADD						    40 LOAD_FAST 3 ( i )					  
							      42 LOAD_CONST 2 ( 1 )					    42 STORE_SUBSCR						  
							      44 BINARY_SUBTRACT					    								  
							      46 BINARY_SUBSCR						    6 44 LOAD_FAST 1 ( res )					  
							      48 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 3 ( i )					  
							      50 LOAD_FAST 4 ( i )					    48 BINARY_SUBSCR						  
							      52 BINARY_SUBSCR						    50 LOAD_FAST 1 ( res )					  
							      54 BINARY_SUBTRACT					    52 LOAD_FAST 3 ( i )					  
							      56 STORE_FAST 5 ( curSeqDiff )				    54 STORE_SUBSCR						  
							      								    								  
							      6 58 LOAD_GLOBAL 2 ( min )				    7 56 LOAD_FAST 1 ( res )					  
							      60 LOAD_FAST 3 ( res )					    58 LOAD_FAST 3 ( i )					  
							      62 LOAD_FAST 5 ( curSeqDiff )				    60 BINARY_SUBSCR						  
							      64 CALL_FUNCTION 2					    62 LOAD_FAST 1 ( res )					  
							      66 STORE_FAST 3 ( res )					    64 LOAD_FAST 3 ( i )					  
							      68 JUMP_ABSOLUTE 30					    66 STORE_SUBSCR						  
							      >> 70 POP_BLOCK						    68 JUMP_ABSOLUTE 26						  
							      								    >> 70 POP_BLOCK						  
							      7 >> 72 LOAD_FAST 3 ( res )				    								  
							      74 RETURN_VALUE NEW_LINE					    8 >> 72 LOAD_FAST 1 ( res )					  
							      								    74 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
def countRect ( n ) :					      Disassembly of <code object countRect at 0x7f33e26494b0, file Disassembly of <code object countRect at 0x7f2b01639660, file error : /bin/bash: line 1: 12091 Segmentation faul
    ans = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 2 STORE_FAST 1 ( ans )					    2 STORE_FAST 1 ( ans )					  ataset/bin/python XLM/dis_script.py --script_path
	height = length					      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	while ( height * length <= n ) :		      3 4 SETUP_LOOP 70 ( to 76 )				    3 4 SETUP_LOOP 64 ( to 76 )					  24/eval_scripts/python_sa-dis_sa.valid/NUMBER_UNIQ
	    ans += 1					      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  UE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES.dis
	    height += 1					      8 LOAD_CONST 2 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
    return ans						      10 LOAD_GLOBAL 1 ( int )					    10 LOAD_GLOBAL 1 ( int )					  
							      12 LOAD_GLOBAL 2 ( math )					    12 LOAD_FAST 0 ( n )					  
							      14 LOAD_METHOD 3 ( sqrt )					    14 CALL_FUNCTION 1						  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_CONST 2 ( 1 )					  
							      18 CALL_METHOD 1						    18 BINARY_ADD						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 2						  
							      22 LOAD_CONST 2 ( 1 )					    22 GET_ITER							  
							      24 BINARY_ADD						    >> 24 FOR_ITER 48 ( to 74 )					  
							      26 CALL_FUNCTION 2					    26 STORE_FAST 2 ( i )					  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 42 ( to 74 )				    4 28 LOAD_FAST 2 ( i )					  
							      32 STORE_FAST 2 ( length )				    30 LOAD_CONST 3 ( 1 )					  
							      								    32 INPLACE_ADD						  
							      4 34 LOAD_FAST 2 ( length )				    34 STORE_FAST 1 ( ans )					  
							      36 STORE_FAST 3 ( height )				    								  
							      								    5 36 LOAD_FAST 1 ( ans )					  
							      5 38 SETUP_LOOP 32 ( to 72 )				    38 LOAD_FAST 2 ( i )					  
							      >> 40 LOAD_FAST 3 ( height )				    40 INPLACE_ADD						  
							      42 LOAD_FAST 2 ( length )					    42 STORE_FAST 1 ( ans )					  
							      44 BINARY_MULTIPLY					    								  
							      46 LOAD_FAST 0 ( n )					    6 44 LOAD_FAST 1 ( ans )					  
							      48 COMPARE_OP 1 ( <= )					    46 LOAD_FAST 2 ( i )					  
							      50 POP_JUMP_IF_FALSE 70					    48 INPLACE_ADD						  
							      								    50 STORE_FAST 1 ( ans )					  
							      6 52 LOAD_FAST 1 ( ans )					    								  
							      54 LOAD_CONST 2 ( 1 )					    7 52 LOAD_FAST 1 ( ans )					  
							      56 INPLACE_ADD						    54 LOAD_FAST 2 ( i )					  
							      58 STORE_FAST 1 ( ans )					    56 INPLACE_ADD						  
							      								    58 STORE_FAST 1 ( ans )					  
							      7 60 LOAD_FAST 3 ( height )				    								  
							      62 LOAD_CONST 2 ( 1 )					    8 60 LOAD_FAST 1 ( ans )					  
							      64 INPLACE_ADD						    62 LOAD_FAST 2 ( i )					  
							      66 STORE_FAST 3 ( height )				    64 INPLACE_ADD						  
							      68 JUMP_ABSOLUTE 40					    66 STORE_FAST 1 ( ans )					  
							      >> 70 POP_BLOCK						    68 JUMP_ABSOLUTE 24						  
							      >> 72 JUMP_ABSOLUTE 30					    >> 70 POP_BLOCK						  
							      >> 74 POP_BLOCK						    								  
							      								    9 >> 72 LOAD_FAST 1 ( ans )					  
							      8 >> 76 LOAD_FAST 1 ( ans )				    74 RETURN_VALUE NEW_LINE					  
							      78 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
def isLucky ( n ) :					      Disassembly of <code object isLucky at 0x7f33e2644930, file " Disassembly of <code object isLucky at 0x7f2b0163dc90, file " script_not_found : None
    next_position = n					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
    if isLucky.counter > n :				      2 STORE_FAST 1 ( next_position )				    2 POP_JUMP_IF_FALSE 8					  
	return 1					      								    4 LOAD_FAST 1 ( t )						  
    if n % isLucky.counter == 0 :			      3 4 LOAD_GLOBAL 0 ( isLucky )				    6 STORE_FAST 1 ( t )					  
	return 0					      6 LOAD_ATTR 1 ( counter )					    								  
    next_position = next_position - next_position / isLucky.c 8 LOAD_FAST 0 ( n )					    3 >> 8 LOAD_GLOBAL 0 ( isLucky )				  
    isLucky.counter = isLucky.counter + 1		      10 COMPARE_OP 4 ( > )					    10 LOAD_FAST 1 ( t )					  
    return isLucky ( next_position )			      12 POP_JUMP_IF_FALSE 18					    12 CALL_FUNCTION 1						  
							      								    14 POP_JUMP_IF_FALSE 20					  
							      4 14 LOAD_CONST 1 ( 1 )					    								  
							      16 RETURN_VALUE						    4 16 LOAD_CONST 1 ( 1 )					  
							      								    18 RETURN_VALUE						  
							      5 >> 18 LOAD_FAST 0 ( n )					    								  
							      20 LOAD_GLOBAL 0 ( isLucky )				    5 >> 20 LOAD_FAST 0 ( n )					  
							      22 LOAD_ATTR 1 ( counter )				    22 LOAD_CONST 2 ( 0 )					  
							      24 BINARY_MODULO						    24 COMPARE_OP 4 ( > )					  
							      26 LOAD_CONST 2 ( 0 )					    26 POP_JUMP_IF_FALSE 48					  
							      28 COMPARE_OP 2 ( == )					    								  
							      30 POP_JUMP_IF_FALSE 36					    6 28 LOAD_CONST 1 ( 1 )					  
							      								    30 RETURN_VALUE						  
							      6 32 LOAD_CONST 2 ( 0 )					    								  
							      34 RETURN_VALUE						    7 >> 32 LOAD_FAST 0 ( n )					  
							      								    34 LOAD_CONST 2 ( 0 )					  
							      7 >> 36 LOAD_FAST 1 ( next_position )			    36 COMPARE_OP 4 ( > )					  
							      38 LOAD_FAST 1 ( next_position )				    38 POP_JUMP_IF_FALSE 48					  
							      40 LOAD_GLOBAL 0 ( isLucky )				    								  
							      42 LOAD_ATTR 1 ( counter )				    8 40 LOAD_CONST 1 ( 1 )					  
							      44 BINARY_TRUE_DIVIDE					    42 RETURN_VALUE						  
							      46 BINARY_SUBTRACT					    								  
							      48 STORE_FAST 1 ( next_position )				    9 >> 44 LOAD_FAST 0 ( n )					  
							      								    46 LOAD_CONST 2 ( 0 )					  
							      8 50 LOAD_GLOBAL 0 ( isLucky )				    48 COMPARE_OP 4 ( > )					  
							      52 LOAD_ATTR 1 ( counter )				    50 POP_JUMP_IF_FALSE 48					  
							      54 LOAD_CONST 1 ( 1 )					    								  
							      56 BINARY_ADD						    10 52 LOAD_CONST 1 ( 1 )					  
							      58 LOAD_GLOBAL 0 ( isLucky )				    54 RETURN_VALUE						  
							      60 STORE_ATTR 1 ( counter )				    								  
							      								    11 >> 56 LOAD_CONST 1 ( 1 )					  
							      9 62 LOAD_GLOBAL 0 ( isLucky )				    58 RETURN_VALUE						  
							      64 LOAD_FAST 1 ( next_position )				    								  
							      66 CALL_FUNCTION 1					    12 >> 60 LOAD_FAST 0 ( n )					  
							      68 RETURN_VALUE NEW_LINE					    62 LOAD_CONST 2 ( 0 )					  
							      								    64 COMPARE_OP 4 ( > )					  
							      								    66 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      								    13 68 LOAD_CONST 1 ( 1 )					  
							      								    70 RETURN_VALUE						  
							      								    								  
							      								    14 >> 72 LOAD_CONST 1 ( 1 )					  
							      								    74 RETURN_VALUE						  
							      								    								  
							      								    15 >> 76 LOAD_CONST 1 ( 1 )					  
							      								    78 RETURN_VALUE						  
							      								    80 LOAD_CONST 0 ( None )					  
							      								    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING_1			      GENERATE_ROTATIONS_GIVEN_STRING_1				    GENERATE_ROTATIONS_GIVEN_STRING_1				  GENERATE_ROTATIONS_GIVEN_STRING_1
--							      --							    --								  --
def printRotatedString ( string ) :			      Disassembly of <code object printRotatedString at 0x7f33e2644 Disassembly of <code object printRotatedString at 0x7f2b0163d script_not_found : None
    n = len ( string )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    temp = string + string				      2 LOAD_FAST 0 ( string )					    2 LOAD_FAST 0 ( string )					  
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	for j in range ( n ) :				      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    print ( temp [ i + j ] , end = "" )		      								    								  
	print ( )					      3 8 LOAD_FAST 0 ( string )				    3 8 LOAD_FAST 0 ( string )					  
							      10 LOAD_FAST 0 ( string )					    10 LOAD_FAST 1 ( n )					  
							      12 BINARY_ADD						    12 BINARY_ADD						  
							      14 STORE_FAST 2 ( temp )					    14 STORE_FAST 2 ( temp )					  
							      								    								  
							      4 16 SETUP_LOOP 60 ( to 78 )				    4 16 SETUP_LOOP 64 ( to 76 )				  
							      18 LOAD_GLOBAL 1 ( range )				    >> 18 LOAD_FAST 1 ( n )					  
							      20 LOAD_FAST 1 ( n )					    20 POP_JUMP_IF_FALSE 74					  
							      22 CALL_FUNCTION 1					    								  
							      24 GET_ITER						    5 22 SETUP_LOOP 48 ( to 74 )				  
							      >> 26 FOR_ITER 48 ( to 76 )				    24 LOAD_GLOBAL 1 ( range )					  
							      28 STORE_FAST 3 ( i )					    26 LOAD_FAST 0 ( string )					  
							      								    28 CALL_FUNCTION 1						  
							      5 30 SETUP_LOOP 36 ( to 68 )				    30 GET_ITER							  
							      32 LOAD_GLOBAL 1 ( range )				    >> 32 FOR_ITER 48 ( to 72 )					  
							      34 LOAD_FAST 1 ( n )					    34 STORE_FAST 3 ( j )					  
							      36 CALL_FUNCTION 1					    								  
							      38 GET_ITER						    6 36 LOAD_FAST 2 ( temp )					  
							      >> 40 FOR_ITER 24 ( to 66 )				    38 LOAD_FAST 3 ( j )					  
							      42 STORE_FAST 4 ( j )					    40 BINARY_SUBSCR						  
							      								    42 STORE_FAST 4 ( j )					  
							      6 44 LOAD_GLOBAL 2 ( print )				    								  
							      46 LOAD_FAST 2 ( temp )					    7 44 LOAD_FAST 2 ( temp )					  
							      48 LOAD_FAST 3 ( i )					    46 LOAD_FAST 4 ( j )					  
							      50 LOAD_FAST 4 ( j )					    48 BINARY_SUBSCR						  
							      52 BINARY_ADD						    50 STORE_FAST 5 ( j )					  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_CONST 1 ( '' )					    8 52 LOAD_FAST 4 ( j )					  
							      58 LOAD_CONST 2 ( ( 'end' , ) )				    54 LOAD_FAST 5 ( j )					  
							      60 CALL_FUNCTION_KW 2					    56 BINARY_SUBSCR						  
							      62 POP_TOP						    58 LOAD_FAST 5 ( j )					  
							      64 JUMP_ABSOLUTE 40					    60 COMPARE_OP 4 ( > )					  
							      >> 66 POP_BLOCK						    62 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      7 >> 68 LOAD_GLOBAL 2 ( print )				    9 64 LOAD_FAST 5 ( j )					  
							      70 CALL_FUNCTION 0					    66 LOAD_FAST 4 ( j )					  
							      72 POP_TOP						    68 BINARY_SUBSCR						  
							      74 JUMP_ABSOLUTE 26					    70 LOAD_FAST 5 ( j )					  
							      >> 76 POP_BLOCK						    72 BINARY_SUBSCR						  
							      >> 78 LOAD_CONST 0 ( None )				    74 LOAD_FAST 5 ( j )					  
							      80 RETURN_VALUE NEW_LINE					    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 5 ( j )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 5 ( j )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 5 ( j )					  
							      								    88 STORE_SUBSCR						  
							      								    								  
							      								    10 >> 90 LOAD_FAST 5 ( j )					  
							      								    92 LOAD_FAST 4 ( j )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 5 ( j )					  
							      								    98 COMPARE_OP 4 ( > )					  
							      								    100 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      								    11 102 LOAD_FAST 5 ( j )					  
							      								    104 LOAD_FAST 4 ( j )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 5 ( j )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_FAST 5 ( j )					  
							      								    114 STORE_SUBSCR						  
							      								    								  
							      								    12 116 LOAD_FAST 5 ( j )					  
							      								    118 LOAD_FAST 4 ( j )					  
							      								    120 STORE_SUBSCR						  
							      								    								  
							      								    13 122 LOAD_FAST 5 ( j )					  
							      								    124 LOAD_FAST 4 ( j )					  
							      								    126 STORE_SUBSCR						  
							      								    128 JUMP_ABSOLUTE 32					  
							      								    >> 130 POP_BLOCK						  
							      								    >> 132 JUMP_ABSOLUTE 18					  
							      								    >> 134 POP_BLOCK						  
							      								    >> 136 LOAD_CONST 0 ( None )				  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
def printDistinct ( arr , n ) :				      Disassembly of <code object printDistinct at 0x7f33e2649a50,  Disassembly of <code object printDistinct at 0x7f2b0163dc90,  script_not_found : None
    s = dict ( ) ;					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	if ( arr [ i ] not in s.keys ( ) ) :		      4 STORE_FAST 2 ( s )					    4 STORE_FAST 2 ( s )					  
	    s [ arr [ i ] ] = arr [ i ] ;		      								    								  
	    print ( arr [ i ] , end = " " ) ;		      3 6 SETUP_LOOP 64 ( to 72 )				    3 6 SETUP_LOOP 64 ( to 70 )					  
							      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
							      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( arr )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 52 ( to 70 )				    >> 16 FOR_ITER 56 ( to 68 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 0 ( arr )					    4 20 LOAD_FAST 2 ( s )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 2 ( s )					    26 POP_JUMP_IF_TRUE 16					  
							      28 LOAD_METHOD 2 ( keys )					    								  
							      30 CALL_METHOD 0						    5 28 LOAD_FAST 2 ( s )					  
							      32 COMPARE_OP 7 ( not in )				    30 LOAD_FAST 3 ( i )					  
							      34 POP_JUMP_IF_FALSE 16					    32 BINARY_SUBSCR						  
							      								    34 LOAD_FAST 1 ( n )					  
							      5 36 LOAD_FAST 0 ( arr )					    36 COMPARE_OP 7 ( not in )					  
							      38 LOAD_FAST 3 ( i )					    38 POP_JUMP_IF_FALSE 16					  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 2 ( s )					    6 40 LOAD_FAST 2 ( s )					  
							      44 LOAD_FAST 0 ( arr )					    42 LOAD_FAST 3 ( i )					  
							      46 LOAD_FAST 3 ( i )					    44 BINARY_SUBSCR						  
							      48 BINARY_SUBSCR						    46 LOAD_FAST 1 ( n )					  
							      50 STORE_SUBSCR						    48 COMPARE_OP 4 ( > )					  
							      								    50 POP_JUMP_IF_FALSE 16					  
							      6 52 LOAD_GLOBAL 3 ( print )				    								  
							      54 LOAD_FAST 0 ( arr )					    7 52 LOAD_FAST 2 ( s )					  
							      56 LOAD_FAST 3 ( i )					    54 LOAD_FAST 3 ( i )					  
							      58 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      60 LOAD_CONST 1 ( ' ' )					    58 LOAD_FAST 1 ( n )					  
							      62 LOAD_CONST 2 ( ( 'end' , ) )				    60 COMPARE_OP 4 ( > )					  
							      64 CALL_FUNCTION_KW 2					    62 POP_JUMP_IF_FALSE 16					  
							      66 POP_TOP						    								  
							      68 JUMP_ABSOLUTE 16					    8 64 LOAD_FAST 2 ( s )					  
							      >> 70 POP_BLOCK						    66 LOAD_FAST 3 ( i )					  
							      >> 72 LOAD_CONST 0 ( None )				    68 BINARY_SUBSCR						  
							      74 RETURN_VALUE NEW_LINE					    70 LOAD_FAST 1 ( n )					  
							      								    72 BINARY_SUBSCR						  
							      								    74 LOAD_FAST 1 ( n )					  
							      								    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 1 ( n )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 1 ( n )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 1 ( n )					  
							      								    88 STORE_SUBSCR						  
							      								    								  
							      								    9 >> 90 LOAD_FAST 2 ( s )					  
							      								    92 LOAD_FAST 3 ( i )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( n )					  
							      								    98 STORE_SUBSCR						  
							      								    								  
							      								    10 100 LOAD_FAST 2 ( s )					  
							      								    102 LOAD_FAST 3 ( i )					  
							      								    104 STORE_SUBSCR						  
							      								    								  
							      								    11 106 LOAD_FAST 2 ( s )					  
							      								    108 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
def ispalindrome ( s ) :				      Disassembly of <code object ispalindrome at 0x7f33e2644f60, f Disassembly of <code object ispalindrome at 0x7f2b0163dc90, f error : /bin/bash: line 1: 12103 Segmentation faul
    l = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    i = 0						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  ataset/bin/python XLM/dis_script.py --script_path
    j = l - 1						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    while i <= j :					      6 STORE_FAST 1 ( l )					    6 STORE_FAST 1 ( l )					  24/eval_scripts/python_sa-dis_sa.valid/MINIMUM_CHA
	if ( s [ i ] != s [ j ] ) :			      								    								  RACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME.dis
	    return False				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	i += 1						      10 STORE_FAST 2 ( i )					    10 STORE_FAST 2 ( l )					  
	j -= 1						      								    								  
    return True						      4 12 LOAD_FAST 1 ( l )					    4 12 LOAD_CONST 2 ( 1 )					  
							      14 LOAD_CONST 2 ( 1 )					    14 STORE_FAST 3 ( l )					  
							      16 BINARY_SUBTRACT					    								  
							      18 STORE_FAST 3 ( j )					    5 16 LOAD_FAST 1 ( l )					  
							      								    18 LOAD_CONST 2 ( 1 )					  
							      5 20 SETUP_LOOP 48 ( to 70 )				    20 COMPARE_OP 3 ( != )					  
							      >> 22 LOAD_FAST 2 ( i )					    22 POP_JUMP_IF_FALSE 32					  
							      24 LOAD_FAST 3 ( j )					    								  
							      26 COMPARE_OP 1 ( <= )					    6 24 LOAD_FAST 1 ( l )					  
							      28 POP_JUMP_IF_FALSE 68					    26 LOAD_CONST 2 ( 1 )					  
							      								    28 INPLACE_ADD						  
							      6 30 LOAD_FAST 0 ( s )					    30 STORE_FAST 1 ( l )					  
							      32 LOAD_FAST 2 ( i )					    								  
							      34 BINARY_SUBSCR						    7 >> 32 LOAD_FAST 2 ( l )					  
							      36 LOAD_FAST 0 ( s )					    34 LOAD_CONST 2 ( 1 )					  
							      38 LOAD_FAST 3 ( j )					    36 INPLACE_ADD						  
							      40 BINARY_SUBSCR						    38 STORE_FAST 2 ( l )					  
							      42 COMPARE_OP 3 ( != )					    								  
							      44 POP_JUMP_IF_FALSE 50					    8 40 LOAD_FAST 3 ( l )					  
							      								    42 LOAD_CONST 2 ( 1 )					  
							      7 46 LOAD_CONST 3 ( False )				    44 INPLACE_ADD						  
							      48 RETURN_VALUE						    46 STORE_FAST 2 ( l )					  
							      								    								  
							      8 >> 50 LOAD_FAST 2 ( i )					    9 48 LOAD_FAST 2 ( l )					  
							      52 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 2 ( 1 )					  
							      54 INPLACE_ADD						    52 INPLACE_ADD						  
							      56 STORE_FAST 2 ( i )					    54 STORE_FAST 2 ( l )					  
							      								    								  
							      9 58 LOAD_FAST 3 ( j )					    10 56 LOAD_FAST 2 ( l )					  
							      60 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 2 ( 1 )					  
							      62 INPLACE_SUBTRACT					    60 INPLACE_ADD						  
							      64 STORE_FAST 3 ( j )					    62 STORE_FAST 2 ( l )					  
							      66 JUMP_ABSOLUTE 22					    								  
							      >> 68 POP_BLOCK						    11 64 LOAD_FAST 2 ( l )					  
							      								    66 LOAD_CONST 2 ( 1 )					  
							      10 >> 70 LOAD_CONST 4 ( True )				    68 INPLACE_ADD						  
							      72 RETURN_VALUE NEW_LINE					    70 STORE_FAST 2 ( l )					  
							      								    								  
							      								    12 72 LOAD_FAST 2 ( l )					  
							      								    74 LOAD_CONST 2 ( 1 )					  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 2 ( l )					  
							      								    								  
							      								    13 80 LOAD_FAST 2 ( l )					  
							      								    82 LOAD_CONST 2 ( 1 )					  
							      								    84 INPLACE_ADD						  
							      								    86 STORE_FAST 2 ( l )					  
							      								    								  
							      								    14 88 LOAD_FAST 2 ( l )					  
							      								    90 LOAD_CONST 2 ( 1 )					  
							      								    92 INPLACE_ADD						  
							      								    94 STORE_FAST 2 ( l )					  
							      								    								  
							      								    15 96 LOAD_FAST 2 ( l )					  
							      								    98 LOAD_CONST 2 ( 1 )					  
							      								    100 INPLACE_ADD						  
							      								    102 STORE_FAST 2 ( l )					  
							      								    								  
							      								    16 104 LOAD_FAST 2 ( l )					  
							      								    106 LOAD_CONST 2 ( 1 )					  
							      								    108 INPLACE_ADD						  
							      								    110 STORE_FAST 2 ( l )					  
							      								    								  
							      								    17 112 LOAD_FAST 2 ( l )					  
							      								    114 LOAD_CONST 2 ( 1 )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 2 ( l )					  
							      								    120 JUMP_ABSOLUTE 14					  
							      								    >> 122 POP_BLOCK						  
							      								    								  
							      								    18 >> 124 LOAD_FAST 2 ( l )					  
							      								    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
def getMissingNo ( a , n ) :				      Disassembly of <code object getMissingNo at 0x7f33e2649150, f Disassembly of <code object getMissingNo at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    x1 = a [ 0 ]					      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  "XLM/dis_script.py", line 59, in <module>	for
    x2 = 1						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 1 , n ) :				      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  y", line 47, in run_dis_script     co_code, co_nlo
	x1 = x1 ^ a [ i ]				      6 STORE_FAST 2 ( x1 )					    6 STORE_FAST 2 ( x1 )					  cals, co_varnames, co_names, co_consts, co_linesta
    for i in range ( 2 , n + 2 ) :			      								    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
	x2 = x2 ^ i					      3 8 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 2 ( 1 )					  pack non-iterable NoneType object
    return x1 ^ x2					      10 STORE_FAST 3 ( x2 )					    10 STORE_FAST 3 ( x2 )					  
							      								    								  
							      4 12 SETUP_LOOP 30 ( to 44 )				    4 12 SETUP_LOOP 74 ( to 92 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 1 ( 1 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 2 ( x1 )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 16 ( to 42 )				    >> 24 FOR_ITER 74 ( to 90 )					  
							      26 STORE_FAST 4 ( i )					    26 STORE_FAST 4 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 2 ( x1 )					    5 28 LOAD_FAST 0 ( a )					  
							      30 LOAD_FAST 0 ( a )					    30 LOAD_FAST 4 ( i )					  
							      32 LOAD_FAST 4 ( i )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 LOAD_FAST 1 ( n )					  
							      36 BINARY_XOR						    36 COMPARE_OP 2 ( == )					  
							      38 STORE_FAST 2 ( x1 )					    38 POP_JUMP_IF_FALSE 48					  
							      40 JUMP_ABSOLUTE 24					    								  
							      >> 42 POP_BLOCK						    6 40 LOAD_FAST 3 ( x2 )					  
							      								    42 LOAD_FAST 4 ( i )					  
							      6 >> 44 SETUP_LOOP 30 ( to 76 )				    44 BINARY_SUBSCR						  
							      46 LOAD_GLOBAL 0 ( range )				    46 LOAD_FAST 1 ( n )					  
							      48 LOAD_CONST 3 ( 2 )					    48 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 1 ( n )					    50 POP_JUMP_IF_FALSE 24					  
							      52 LOAD_CONST 3 ( 2 )					    								  
							      54 BINARY_ADD						    7 52 LOAD_FAST 3 ( x2 )					  
							      56 CALL_FUNCTION 2					    54 LOAD_FAST 4 ( i )					  
							      58 GET_ITER						    56 BINARY_SUBSCR						  
							      >> 60 FOR_ITER 12 ( to 74 )				    58 STORE_FAST 3 ( x2 )					  
							      62 STORE_FAST 4 ( i )					    								  
							      								    8 >> 60 LOAD_FAST 0 ( a )					  
							      7 64 LOAD_FAST 3 ( x2 )					    62 LOAD_FAST 4 ( i )					  
							      66 LOAD_FAST 4 ( i )					    64 BINARY_SUBSCR						  
							      68 BINARY_XOR						    66 LOAD_FAST 1 ( n )					  
							      70 STORE_FAST 3 ( x2 )					    68 COMPARE_OP 2 ( == )					  
							      72 JUMP_ABSOLUTE 60					    70 POP_JUMP_IF_FALSE 24					  
							      >> 74 POP_BLOCK						    								  
							      								    9 72 LOAD_FAST 3 ( x2 )					  
							      8 >> 76 LOAD_FAST 2 ( x1 )				    74 LOAD_FAST 4 ( i )					  
							      78 LOAD_FAST 3 ( x2 )					    76 BINARY_SUBSCR						  
							      80 BINARY_XOR						    78 LOAD_FAST 1 ( n )					  
							      82 RETURN_VALUE NEW_LINE					    80 COMPARE_OP 2 ( == )					  
							      								    82 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    10 84 LOAD_FAST 3 ( x2 )					  
							      								    86 LOAD_FAST 4 ( i )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 1 ( n )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_FAST 1 ( n )					  
							      								    96 COMPARE_OP 2 ( == )					  
							      								    98 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    11 100 LOAD_FAST 3 ( x2 )					  
							      								    102 LOAD_FAST 4 ( i )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_FAST 1 ( n )					  
							      								    108 COMPARE_OP 4 ( > )					  
							      								    110 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    12 112 LOAD_FAST 3 ( x2 )					  
							      								    114 LOAD_FAST 4 ( i )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_FAST 1 ( n )					  
							      								    120 COMPARE_OP 4 ( > )					  
							      								    122 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    13 124 LOAD_FAST 3 ( x2 )					  
							      								    126 LOAD_FAST 4 ( i )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_FAST 1 ( n )					  
							      								    132 COMPARE_OP 4 ( > )					  
							      								    134 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    14 136 LOAD_FAST 3 ( x2 )					  
							      								    138 LOAD_FAST 4 ( i )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 LOAD_FAST 1 ( n )					  
							      								    144 COMPARE_OP 4 ( > )					  
							      								    146 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    15 148 LOAD_FAST 3 ( x2 )					  
							      								    150 LOAD_FAST 2 ( x1 )					  
							      								    152 LOAD_FAST 2 ( x2 )					  
							      								    154 STORE_SUBSCR						  
							      								    								  
							      								    16 156 LOAD_FAST 3 ( x2					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
def recursiveReverse ( str , i = 0 ) :			      Disassembly of <code object recursiveReverse at 0x7f33e2653ed Disassembly of <code object recurAPPLICATION_Reverse at 0x7f2 script_not_found : None
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    if i == n // 2 :					      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
	return						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] , str [ 6 STORE_FAST 2 ( n )					    6 STORE_FAST 1 ( n )					  
    recursiveReverse ( str , i + 1 )			      								    								  
							      3 8 LOAD_FAST 1 ( i )					    3 8 LOAD_FAST 1 ( n )					  
							      10 LOAD_FAST 2 ( n )					    10 LOAD_CONST 1 ( 2 )					  
							      12 LOAD_CONST 1 ( 2 )					    12 COMPARE_OP 2 ( == )					  
							      14 BINARY_FLOOR_DIVIDE					    14 POP_JUMP_IF_FALSE 20					  
							      16 COMPARE_OP 2 ( == )					    								  
							      18 POP_JUMP_IF_FALSE 24					    4 16 LOAD_FAST 0 ( str )					  
							      								    18 LOAD_FAST 1 ( n )					  
							      4 20 LOAD_CONST 0 ( None )				    20 LOAD_CONST 2 ( 1 )					  
							      22 RETURN_VALUE						    22 BINARY_SUBTRACT						  
							      								    24 BINARY_SUBSCR						  
							      5 >> 24 LOAD_FAST 0 ( str )				    26 STORE_FAST 2 ( sep )					  
							      26 LOAD_FAST 2 ( n )					    								  
							      28 LOAD_FAST 1 ( i )					    5 28 LOAD_GLOBAL 1 ( recurrecurReverse )			  
							      30 BINARY_SUBTRACT					    30 LOAD_FAST 0 ( str )					  
							      32 LOAD_CONST 2 ( 1 )					    32 LOAD_FAST 1 ( n )					  
							      34 BINARY_SUBTRACT					    34 LOAD_CONST 2 ( 1 )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBTRACT						  
							      38 LOAD_FAST 0 ( str )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 1 ( i )					    40 CALL_FUNCTION 1						  
							      42 BINARY_SUBSCR						    42 STORE_FAST 3 ( sep )					  
							      44 ROT_TWO						    								  
							      46 LOAD_FAST 0 ( str )					    6 44 LOAD_FAST 2 ( sep )					  
							      48 LOAD_FAST 1 ( i )					    46 LOAD_CONST 0 ( None )					  
							      50 STORE_SUBSCR						    48 COMPARE_OP 8 ( is )					  
							      52 LOAD_FAST 0 ( str )					    50 POP_JUMP_IF_FALSE 64					  
							      54 LOAD_FAST 2 ( n )					    								  
							      56 LOAD_FAST 1 ( i )					    7 52 LOAD_FAST 0 ( str )					  
							      58 BINARY_SUBTRACT					    54 LOAD_FAST 1 ( n )					  
							      60 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_SUBTRACT					    58 BINARY_ADD						  
							      64 STORE_SUBSCR						    60 BINARY_SUBSCR						  
							      								    62 RETURN_VALUE						  
							      6 66 LOAD_GLOBAL 1 ( recursiveReverse )			    								  
							      68 LOAD_FAST 0 ( str )					    8 >> 64 LOAD_GLOBAL 2 ( recurrecurReverse )			  
							      70 LOAD_FAST 1 ( i )					    66 LOAD_FAST 0 ( str )					  
							      72 LOAD_CONST 2 ( 1 )					    68 LOAD_FAST 1 ( n )					  
							      74 BINARY_ADD						    70 LOAD_CONST 2 ( 1 )					  
							      76 CALL_FUNCTION 2					    72 BINARY_ADD						  
							      78 POP_TOP						    74 BINARY_SUBSCR						  
							      80 LOAD_CONST 0 ( None )					    76 CALL_FUNCTION 1						  
							      82 RETURN_VALUE NEW_LINE					    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I
--							      --							    --								  --
def squareRoot ( n , p ) :				      Disassembly of <code object squareRoot at 0x7f33e2644f60, fil Disassembly of <code object squareRoot at 0x7f2b01639660, fil script_not_found : None
    n = n % p						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
    for x in range ( 2 , p ) :				      2 LOAD_FAST 1 ( p )					    2 LOAD_FAST 1 ( p )						  
	if ( ( x * x ) % p == n ) :			      4 BINARY_MODULO						    4 BINARY_MODULO						  
	    print ( "Square root is " , x )		      6 STORE_FAST 0 ( n )					    6 STORE_FAST 2 ( n )					  
	    return					      								    								  
    print ( "Square root doesn't exist" )		      3 8 SETUP_LOOP 48 ( to 58 )				    3 8 SETUP_LOOP 64 ( to 70 )					  
							      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
							      12 LOAD_CONST 1 ( 2 )					    12 LOAD_CONST 1 ( 2 )					  
							      14 LOAD_FAST 1 ( p )					    14 LOAD_FAST 1 ( p )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 34 ( to 56 )				    >> 20 FOR_ITER 56 ( to 68 )					  
							      22 STORE_FAST 2 ( x )					    22 STORE_FAST 3 ( x )					  
							      								    								  
							      4 24 LOAD_FAST 2 ( x )					    4 24 LOAD_GLOBAL 0 ( range )				  
							      26 LOAD_FAST 2 ( x )					    26 LOAD_FAST 2 ( n )					  
							      28 BINARY_MULTIPLY					    28 LOAD_FAST 1 ( p )					  
							      30 LOAD_FAST 1 ( p )					    30 CALL_FUNCTION 2						  
							      32 BINARY_MODULO						    32 LOAD_FAST 2 ( n )					  
							      34 LOAD_FAST 0 ( n )					    34 COMPARE_OP 2 ( == )					  
							      36 COMPARE_OP 2 ( == )					    36 POP_JUMP_IF_FALSE 20					  
							      38 POP_JUMP_IF_FALSE 20					    								  
							      								    5 38 LOAD_GLOBAL 0 ( range )				  
							      5 40 LOAD_GLOBAL 1 ( print )				    40 LOAD_FAST 2 ( n )					  
							      42 LOAD_CONST 2 ( 'Square root is ' )			    42 LOAD_FAST 1 ( p )					  
							      44 LOAD_FAST 2 ( x )					    44 CALL_FUNCTION 2						  
							      46 CALL_FUNCTION 2					    46 LOAD_FAST 2 ( n )					  
							      48 POP_TOP						    48 BINARY_ADD						  
							      								    50 CALL_FUNCTION 2						  
							      6 50 LOAD_CONST 0 ( None )				    52 STORE_FAST 2 ( n )					  
							      52 RETURN_VALUE						    								  
							      54 JUMP_ABSOLUTE 20					    6 54 LOAD_FAST 2 ( n )					  
							      >> 56 POP_BLOCK						    56 LOAD_FAST 1 ( p )					  
							      								    58 LOAD_FAST 2 ( n )					  
							      7 >> 58 LOAD_GLOBAL 1 ( print )				    60 STORE_SUBSCR						  
							      60 LOAD_CONST 3 ( "Square root doesn't exist" )		    62 JUMP_ABSOLUTE 20						  
							      62 CALL_FUNCTION 1					    >> 64 POP_BLOCK						  
							      64 POP_TOP						    								  
							      66 LOAD_CONST 0 ( None )					    7 >> 66 LOAD_FAST 2 ( n )					  
							      68 RETURN_VALUE NEW_LINE					    68 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
def findDigits ( n ) :					      Disassembly of <code object findDigits at 0x7f33e2644f60, fil Disassembly of <code object findDigits at 0x7f2b0163dc90, fil error : /bin/bash: line 1: 12119 Segmentation faul
    if ( n < 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return 0 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    if ( n <= 1 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	return 1 ;					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  24/eval_scripts/python_sa-dis_sa.valid/COUNT_DIGIT
    x = ( ( n * math.log10 ( n / math.e ) + math.log10 ( 2 *  								    								  S_FACTORIAL_SET_2.dis
    return math.floor ( x ) + 1 ;			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
							      10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 1 )					    5 20 LOAD_CONST 1 ( 0 )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_FAST 0 ( n )					    6 >> 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_GLOBAL 0 ( math )					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_METHOD 1 ( log10 )				    28 COMPARE_OP 1 ( <= )					  
							      30 LOAD_FAST 0 ( n )					    30 POP_JUMP_IF_FALSE 40					  
							      32 LOAD_GLOBAL 0 ( math )					    								  
							      34 LOAD_ATTR 2 ( e )					    7 32 LOAD_CONST 1 ( 0 )					  
							      36 BINARY_TRUE_DIVIDE					    34 RETURN_VALUE						  
							      38 CALL_METHOD 1						    								  
							      40 BINARY_MULTIPLY					    8 >> 36 LOAD_FAST 0 ( n )					  
							      42 LOAD_GLOBAL 0 ( math )					    38 LOAD_CONST 1 ( 0 )					  
							      44 LOAD_METHOD 1 ( log10 )				    40 COMPARE_OP 1 ( <= )					  
							      46 LOAD_CONST 3 ( 2 )					    42 POP_JUMP_IF_FALSE 48					  
							      48 LOAD_GLOBAL 0 ( math )					    44 LOAD_CONST 1 ( 0 )					  
							      50 LOAD_ATTR 3 ( pi )					    46 RETURN_VALUE						  
							      52 BINARY_MULTIPLY					    								  
							      54 LOAD_FAST 0 ( n )					    9 >> 48 LOAD_FAST 0 ( n )					  
							      56 BINARY_MULTIPLY					    50 LOAD_CONST 2 ( 1 )					  
							      58 CALL_METHOD 1						    52 BINARY_SUBTRACT						  
							      60 LOAD_CONST 4 ( 2.0 )					    54 LOAD_FAST 0 ( n )					  
							      62 BINARY_TRUE_DIVIDE					    56 LOAD_CONST 2 ( 1 )					  
							      64 BINARY_ADD						    58 BINARY_SUBTRACT						  
							      66 STORE_FAST 1 ( x )					    60 BINARY_SUBTRACT						  
							      								    62 LOAD_FAST 0 ( n )					  
							      7 68 LOAD_GLOBAL 0 ( math )				    64 LOAD_CONST 2 ( 1 )					  
							      70 LOAD_METHOD 4 ( floor )				    66 BINARY_SUBTRACT						  
							      72 LOAD_FAST 1 ( x )					    68 BINARY_SUBTRACT						  
							      74 CALL_METHOD 1						    70 LOAD_FAST 0 ( n )					  
							      76 LOAD_CONST 2 ( 1 )					    72 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_ADD						    74 BINARY_SUBTRACT						  
							      80 RETURN_VALUE NEW_LINE					    76 BINARY_SUBTRACT						  
							      								    78 LOAD_FAST 0 ( n )					  
							      								    80 LOAD_CONST 2 ( 1 )					  
							      								    82 BINARY_SUBTRACT						  
							      								    84 BINARY_SUBTRACT						  
							      								    86 LOAD_FAST 0 ( n )					  
							      								    88 LOAD_CONST 3 ( 2 )					  
							      								    90 BINARY_SUBTRACT						  
							      								    92 LOAD_FAST 0 ( n )					  
							      								    94 LOAD_CONST 2 ( 1 )					  
							      								    96 BINARY_SUBTRACT						  
							      								    98 BINARY_SUBTRACT						  
							      								    100 BINARY_SUBTRACT						  
							      								    102 LOAD_FAST 0 ( n )					  
							      								    104 LOAD_CONST 2 ( 1 )					  
							      								    106 BINARY_SUBTRACT						  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_FAST 0 ( n )					  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 BINARY_SUBTRACT						  
							      								    116 BINARY_SUBTRACT						  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 2 ( 1 )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 BINARY_SUBTRACT						  
							      								    128 LOAD_FAST 0 ( n )					  
							      								    130 LOAD_CONST 3 ( 2 )					  
							      								    132 BINARY_SUBTRACT						  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 0 ( n )					  
							      								    138 LOAD_CONST 3 ( 2 )					  
							      								    140 BINARY_SUBTRACT						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 0 ( n )					  
							      								    146 LOAD_CONST 3 ( 2 )					  
							      								    148 BINARY_SUBTRACT						  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 0 ( n )					  
							      								    154 LOAD_CONST 3 ( 2 )					  
							      								    156 BINARY_SUBTRACT						  
							      								    158 BINARY_SUBTRACT						  
							      								    160 LOAD_FAST 0 ( n )					  
							      								    162 LOAD_CONST 4 ( ( 'n' , 'n' ) )				  
							      								    164 CALL_FUNCTION_KW 3					  
							      								    166 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
def maxSum ( arr , n ) :				      Disassembly of <code object maxSum at 0x7f33e2649150, file "< Disassembly of <code object maxSum at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    arr.sort ( )					      2 STORE_FAST 2 ( sum )					    2 STORE_FAST 1 ( sum )					  (item)   File "main.py", line 33, in <module>	  Fi
    for i in range ( 0 , int ( n / 2 ) ) :		      								    								  le "<dis>", line 2, in maxSum UnboundLocalError: l
	sum -= ( 2 * arr [ i ] )			      3 4 LOAD_FAST 0 ( arr )					    3 4 LOAD_FAST 0 ( arr )					  ocal variable 'i' referenced before assignment
	sum += ( 2 * arr [ n - i - 1 ] )		      6 LOAD_METHOD 0 ( sort )					    6 LOAD_METHOD 0 ( sort )					  
    return sum						      8 CALL_METHOD 0						    8 CALL_METHOD 0						  
							      10 POP_TOP						    10 POP_TOP							  
							      								    								  
							      4 12 SETUP_LOOP 66 ( to 80 )				    4 12 SETUP_LOOP 64 ( to 76 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_GLOBAL 2 ( int )					    18 LOAD_CONST 2 ( 1 )					  
							      20 LOAD_FAST 1 ( n )					    20 CALL_FUNCTION 2						  
							      22 LOAD_CONST 2 ( 2 )					    22 GET_ITER							  
							      24 BINARY_TRUE_DIVIDE					    >> 24 FOR_ITER 48 ( to 74 )					  
							      26 CALL_FUNCTION 1					    26 STORE_FAST 2 ( i )					  
							      28 CALL_FUNCTION 2					    								  
							      30 GET_ITER						    5 28 LOAD_FAST 1 ( sum )					  
							      >> 32 FOR_ITER 44 ( to 78 )				    30 LOAD_FAST 2 ( i )					  
							      34 STORE_FAST 3 ( i )					    32 BINARY_SUBSCR						  
							      								    34 LOAD_FAST 0 ( arr )					  
							      5 36 LOAD_FAST 2 ( sum )					    36 LOAD_FAST 2 ( i )					  
							      38 LOAD_CONST 2 ( 2 )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 0 ( arr )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 BINARY_MULTIPLY					    46 BINARY_SUBTRACT						  
							      48 INPLACE_SUBTRACT					    48 BINARY_MULTIPLY						  
							      50 STORE_FAST 2 ( sum )					    50 STORE_FAST 3 ( j )					  
							      								    								  
							      6 52 LOAD_FAST 2 ( sum )					    6 52 LOAD_FAST 1 ( sum )					  
							      54 LOAD_CONST 2 ( 2 )					    54 LOAD_FAST 3 ( j )					  
							      56 LOAD_FAST 0 ( arr )					    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 1 ( n )					    58 LOAD_FAST 0 ( arr )					  
							      60 LOAD_FAST 3 ( i )					    60 LOAD_FAST 2 ( i )					  
							      62 BINARY_SUBTRACT					    62 BINARY_SUBSCR						  
							      64 LOAD_CONST 3 ( 1 )					    64 LOAD_FAST 0 ( arr )					  
							      66 BINARY_SUBTRACT					    66 LOAD_FAST 2 ( i )					  
							      68 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      70 BINARY_MULTIPLY					    70 BINARY_SUBTRACT						  
							      72 INPLACE_ADD						    72 BINARY_MULTIPLY						  
							      74 STORE_FAST 2 ( sum )					    74 LOAD_FAST 0 ( arr )					  
							      76 JUMP_ABSOLUTE 32					    76 LOAD_FAST 2 ( i )					  
							      >> 78 POP_BLOCK						    78 BINARY_SUBSCR						  
							      								    80 BINARY_SUBTRACT						  
							      7 >> 80 LOAD_FAST 2 ( sum )				    82 LOAD_FAST 0 ( arr )					  
							      82 RETURN_VALUE NEW_LINE					    84 LOAD_FAST 2 ( i )					  
							      								    86 STORE_SUBSCR						  
							      								    								  
							      								    7 88 LOAD_FAST 1 ( sum )					  
							      								    90 LOAD_FAST 3 ( j )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_FAST 0 ( arr )					  
							      								    96 LOAD_FAST 2 ( i )					  
							      								    98 STORE_SUBSCR						  
							      								    								  
							      								    8 100 LOAD_FAST 1 ( sum )					  
							      								    102 LOAD_FAST 3 ( j )					  
							      								    104 BINARY_SUBSCR						  
							      								    106 LOAD_FAST 0 ( arr )					  
							      								    108 LOAD_FAST 2 ( i )					  
							      								    110 STORE_SUBSCR						  
							      								    								  
							      								    9 112 LOAD_FAST 1 ( sum )					  
							      								    114 LOAD_FAST 3 ( j )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_FAST 0 ( arr )					  
							      								    120 LOAD_FAST 2 ( i )					  
							      								    122 STORE_SUBSCR						  
							      								    124 JUMP_ABSOLUTE 24					  
							      								    >> 126 POP_BLOCK						  
							      								    								  
							      								    10 >> 128 LOAD_FAST 1 ( sum )				  
							      								    130 LOAD_FAST 3 ( j )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
def findDigits ( n ) :					      Disassembly of <code object findDigits at 0x7f33e26494b0, fil Disassembly of <code object findDigits at 0x7f2b0163dc90, fil failure : #Results: 0, 10
    if ( n < 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 0 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( n <= 1 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
	return 1 ;					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    digits = 0 ;					      								    								  
    for i in range ( 2 , n + 1 ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	digits += math.log10 ( i ) ;			      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return math.floor ( digits ) + 1 ;			      								    								  
							      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 1 )					    5 20 LOAD_CONST 1 ( 0 )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_CONST 1 ( 0 )				    6 >> 24 LOAD_CONST 1 ( 0 )					  
							      26 STORE_FAST 1 ( digits )				    26 RETURN_VALUE						  
							      								    								  
							      7 28 SETUP_LOOP 36 ( to 66 )				    7 >> 28 SETUP_LOOP 64 ( to 94 )				  
							      30 LOAD_GLOBAL 0 ( range )				    30 LOAD_GLOBAL 0 ( range )					  
							      32 LOAD_CONST 3 ( 2 )					    32 LOAD_CONST 2 ( 1 )					  
							      34 LOAD_FAST 0 ( n )					    34 LOAD_CONST 2 ( 1 )					  
							      36 LOAD_CONST 2 ( 1 )					    36 CALL_FUNCTION 2						  
							      38 BINARY_ADD						    38 GET_ITER							  
							      40 CALL_FUNCTION 2					    >> 40 FOR_ITER 48 ( to 92 )					  
							      42 GET_ITER						    42 STORE_FAST 1 ( i )					  
							      >> 44 FOR_ITER 18 ( to 64 )				    								  
							      46 STORE_FAST 2 ( i )					    8 44 LOAD_FAST 0 ( n )					  
							      								    46 LOAD_CONST 2 ( 1 )					  
							      8 48 LOAD_FAST 1 ( digits )				    48 INPLACE_ADD						  
							      50 LOAD_GLOBAL 1 ( math )					    50 STORE_FAST 0 ( n )					  
							      52 LOAD_METHOD 2 ( log10 )				    								  
							      54 LOAD_FAST 2 ( i )					    9 52 LOAD_FAST 0 ( n )					  
							      56 CALL_METHOD 1						    54 LOAD_CONST 2 ( 1 )					  
							      58 INPLACE_ADD						    56 INPLACE_ADD						  
							      60 STORE_FAST 1 ( digits )				    58 STORE_FAST 0 ( n )					  
							      62 JUMP_ABSOLUTE 44					    								  
							      >> 64 POP_BLOCK						    10 60 LOAD_FAST 0 ( n )					  
							      								    62 LOAD_CONST 2 ( 1 )					  
							      9 >> 66 LOAD_GLOBAL 1 ( math )				    64 INPLACE_ADD						  
							      68 LOAD_METHOD 3 ( floor )				    66 STORE_FAST 0 ( n )					  
							      70 LOAD_FAST 1 ( digits )					    								  
							      72 CALL_METHOD 1						    11 68 LOAD_FAST 0 ( n )					  
							      74 LOAD_CONST 2 ( 1 )					    70 LOAD_CONST 2 ( 1 )					  
							      76 BINARY_ADD						    72 INPLACE_ADD						  
							      78 RETURN_VALUE NEW_LINE					    74 STORE_FAST 0 ( n )					  
							      								    								  
							      								    12 76 LOAD_FAST 0 ( n )					  
							      								    78 LOAD_CONST 2 ( 1 )					  
							      								    80 INPLACE_ADD						  
							      								    82 STORE_FAST 0 ( n )					  
							      								    								  
							      								    13 84 LOAD_FAST 0 ( n )					  
							      								    86 LOAD_CONST 2 ( 1 )					  
							      								    88 INPLACE_ADD						  
							      								    90 STORE_FAST 0 ( n )					  
							      								    								  
							      								    14 92 LOAD_FAST 0 ( n )					  
							      								    94 LOAD_CONST 2 ( 1 )					  
							      								    96 INPLACE_ADD						  
							      								    98 STORE_FAST 0 ( n )					  
							      								    								  
							      								    15 100 LOAD_FAST 0 ( n )					  
							      								    102 LOAD_CONST 2 ( 1 )					  
							      								    104 INPLACE_ADD						  
							      								    106 STORE_FAST 0 ( n )					  
							      								    108 JUMP_ABSOLUTE 40					  
							      								    >> 110 POP_BLOCK						  
							      								    								  
							      								    16 >> 112 LOAD_FAST 0 ( n )					  
							      								    114 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
def isPrime ( p ) :					      Disassembly of <code object isPrime at 0x7f33e2653ed0, file " Disassembly of <code object isPrime at 0x7f2b01639660, file " error : Traceback (most recent call last):   File
    checkNumber = 2 ** p - 1				      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_FAST 0 ( p )					  "XLM/dis_script.py", line 59, in <module>	for
    nextval = 4 % checkNumber				      2 LOAD_FAST 0 ( p )					    2 LOAD_CONST 1 ( 2 )					  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( 1 , p - 1 ) :			      4 BINARY_POWER						    4 LOAD_CONST 2 ( 1 )					  y", line 47, in run_dis_script     co_code, co_nlo
	nextval = ( nextval * nextval - 2 ) % checkNumber     6 LOAD_CONST 2 ( 1 )					    6 BINARY_SUBTRACT						  cals, co_varnames, co_names, co_consts, co_linesta
    if ( nextval == 0 ) : return True			      8 BINARY_SUBTRACT						    8 LOAD_CONST 3 ( 2 )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
    else : return False					      10 STORE_FAST 1 ( checkNumber )				    10 BINARY_POWER						  pack non-iterable NoneType object
							      								    12 STORE_FAST 1 ( nextval )					  
							      3 12 LOAD_CONST 3 ( 4 )					    								  
							      14 LOAD_FAST 1 ( checkNumber )				    3 14 SETUP_LOOP 64 ( to 74 )				  
							      16 BINARY_MODULO						    16 LOAD_GLOBAL 0 ( range )					  
							      18 STORE_FAST 2 ( nextval )				    18 LOAD_CONST 1 ( 1 )					  
							      								    20 LOAD_FAST 1 ( nextval )					  
							      4 20 SETUP_LOOP 38 ( to 60 )				    22 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_GLOBAL 0 ( range )				    24 BINARY_SUBTRACT						  
							      24 LOAD_CONST 2 ( 1 )					    26 CALL_FUNCTION 2						  
							      26 LOAD_FAST 0 ( p )					    28 GET_ITER							  
							      28 LOAD_CONST 2 ( 1 )					    >> 30 FOR_ITER 48 ( to 72 )					  
							      30 BINARY_SUBTRACT					    32 STORE_FAST 2 ( i )					  
							      32 CALL_FUNCTION 2					    								  
							      34 GET_ITER						    4 34 LOAD_FAST 0 ( p )					  
							      >> 36 FOR_ITER 20 ( to 58 )				    36 LOAD_CONST 1 ( 2 )					  
							      38 STORE_FAST 3 ( i )					    38 BINARY_POWER						  
							      								    40 LOAD_FAST 2 ( i )					  
							      5 40 LOAD_FAST 2 ( nextval )				    42 LOAD_CONST 2 ( 1 )					  
							      42 LOAD_FAST 2 ( nextval )				    44 BINARY_SUBTRACT						  
							      44 BINARY_MULTIPLY					    46 BINARY_MODULO						  
							      46 LOAD_CONST 1 ( 2 )					    48 STORE_FAST 0 ( p )					  
							      48 BINARY_SUBTRACT					    								  
							      50 LOAD_FAST 1 ( checkNumber )				    5 50 LOAD_FAST 0 ( p )					  
							      52 BINARY_MODULO						    52 LOAD_CONST 1 ( 2 )					  
							      54 STORE_FAST 2 ( nextval )				    54 BINARY_POWER						  
							      56 JUMP_ABSOLUTE 36					    56 LOAD_FAST 2 ( i )					  
							      >> 58 POP_BLOCK						    58 LOAD_CONST 2 ( 1 )					  
							      								    60 BINARY_SUBTRACT						  
							      6 >> 60 LOAD_FAST 2 ( nextval )				    62 BINARY_POWER						  
							      62 LOAD_CONST 4 ( 0 )					    64 LOAD_FAST 0 ( p )					  
							      64 COMPARE_OP 2 ( == )					    66 LOAD_CONST 1 ( 2 )					  
							      66 POP_JUMP_IF_FALSE 72					    68 BINARY_SUBTRACT						  
							      68 LOAD_CONST 5 ( True )					    70 BINARY_POWER						  
							      70 RETURN_VALUE						    72 LOAD_FAST 0 ( p )					  
							      								    74 LOAD_CONST 1 ( 2 )					  
							      7 >> 72 LOAD_CONST 6 ( False )				    76 BINARY_SUBTRACT						  
							      74 RETURN_VALUE						    78 BINARY_POWER						  
							      76 LOAD_CONST 0 ( None )					    80 LOAD_FAST 0 ( p )					  
							      78 RETURN_VALUE NEW_LINE					    82 LOAD_CONST 1 ( 2 )					  
							      								    84 BINARY_SUBTRACT						  
							      								    86 BINARY_POWER						  
							      								    88 BINARY_MULTIPLY						  
							      								    90 BINARY_SUBTRACT						  
							      								    92 LOAD_FAST 0 ( p )					  
							      								    94 LOAD_CONST 1 ( 2 )					  
							      								    96 BINARY_SUBTRACT						  
							      								    98 BINARY_POWER						  
							      								    100 LOAD_FAST 0 ( p )					  
							      								    102 LOAD_CONST 1 ( 2 )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 BINARY_POWER						  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_FAST 0 ( p )					  
							      								    112 LOAD_CONST 1 ( 2 )					  
							      								    114 BINARY_SUBTRACT						  
							      								    116 BINARY_POWER						  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_FAST 0 ( p )					  
							      								    122 LOAD_CONST 1 ( 2 )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 BINARY_POWER						  
							      								    128 LOAD_FAST 0 ( p )					  
							      								    130 LOAD_CONST 1 ( 2 )					  
							      								    132 BINARY_SUBTRACT						  
							      								    134 BINARY_POWER						  
							      								    136 LOAD_FAST 0 ( p )					  
							      								    138 LOAD_CONST 1 ( 2 )					  
							      								    140 BINARY_SUBTRACT						  
							      								    142 BINARY_POWER						  
							      								    144 LOAD_FAST 0 ( p )					  
							      								    146 LOAD_CONST 1 ( 2 )					  
							      								    148 BINARY_SUBTRACT						  
							      								    150 BINARY_MULTIPLY						  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 0 ( p )					  
							      								    156 LOAD_CONST 1 ( 2 )					  
							      								    158 BINARY_SUBTRACT						  
							      								    160 BINARY_TRUE_DIVIDE					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 LOAD_FAST 0 ( p )					  
							      								    166 LOAD_CONST 1 ( 2 )					  
							      								    168 BINARY_SUBTRACT						  
							      								    170 LOAD_FAST 0 ( p )					  
							      								    172 LOAD_CONST 1 ( 2 )					  
							      								    174 BINARY_SUBTRACT						  
							      								    176 LOAD_FAST 0 ( p )					  
							      								    178 LOAD_CONST 1 ( 2 )					  
							      								    180 BINARY_SUBTRACT						  
							      								    178 BINARY_TRUE_DIVIDE					  
							      								    176 BINARY_SUBTRACT						  
							      								    174 LOAD_FAST 0 ( p )					  
							      								    176 LOAD_CONST 1 ( 2					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW
--							      --							    --								  --
def minCost ( coin , n , k ) :				      Disassembly of <code object minCost at 0x7f33e26494b0, file " Disassembly of <code object minCost at 0x7f2b0163dc90, file " error : Traceback (most recent call last):   File
    coin.sort ( )					      2 0 LOAD_FAST 0 ( coin )					    2 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) ) ;	      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  (item)   File "main.py", line 35, in <module>	  Fi
    ans = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  le "<dis>", line 2, in minCost AttributeError: 'in
    for i in range ( coins_needed - 1 + 1 ) :		      6 POP_TOP							    6 POP_TOP							  t' object has no attribute 'sort'
	ans += coin [ i ]				      								    								  
    return ans						      3 8 LOAD_GLOBAL 1 ( math )				    3 8 LOAD_GLOBAL 1 ( math )					  
							      10 LOAD_METHOD 2 ( ceil )					    10 LOAD_METHOD 2 ( ceil )					  
							      12 LOAD_CONST 1 ( 1.0 )					    12 LOAD_CONST 1 ( 1.0 )					  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 0 ( coin )					  
							      16 BINARY_MULTIPLY					    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_FAST 2 ( k )					    18 BINARY_ADD						  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 3 ( 2 )					  
							      22 BINARY_ADD						    22 BINARY_ADD						  
							      24 BINARY_FLOOR_DIVIDE					    24 CALL_METHOD 2						  
							      26 CALL_METHOD 1						    26 STORE_FAST 2 ( ans )					  
							      28 STORE_FAST 3 ( coins_needed )				    								  
							      								    4 28 SETUP_LOOP 64 ( to 104 )				  
							      4 30 LOAD_CONST 3 ( 0 )					    30 LOAD_GLOBAL 3 ( range )					  
							      32 STORE_FAST 4 ( ans )					    32 LOAD_CONST 1 ( 1.0 )					  
							      								    34 LOAD_FAST 0 ( coin )					  
							      5 34 SETUP_LOOP 36 ( to 72 )				    36 LOAD_CONST 2 ( 1 )					  
							      36 LOAD_GLOBAL 3 ( range )				    38 BINARY_ADD						  
							      38 LOAD_FAST 3 ( coins_needed )				    40 CALL_FUNCTION 2						  
							      40 LOAD_CONST 2 ( 1 )					    42 GET_ITER							  
							      42 BINARY_SUBTRACT					    >> 44 FOR_ITER 48 ( to 102 )				  
							      44 LOAD_CONST 2 ( 1 )					    46 STORE_FAST 3 ( i )					  
							      46 BINARY_ADD						    								  
							      48 CALL_FUNCTION 1					    5 48 LOAD_GLOBAL 4 ( int )					  
							      50 GET_ITER						    50 LOAD_FAST 3 ( i )					  
							      >> 52 FOR_ITER 16 ( to 70 )				    52 LOAD_CONST 2 ( 1 )					  
							      54 STORE_FAST 5 ( i )					    54 BINARY_ADD						  
							      								    56 CALL_FUNCTION 1						  
							      6 56 LOAD_FAST 4 ( ans )					    58 STORE_FAST 4 ( ans )					  
							      58 LOAD_FAST 0 ( coin )					    								  
							      60 LOAD_FAST 5 ( i )					    6 60 LOAD_FAST 4 ( ans )					  
							      62 BINARY_SUBSCR						    62 LOAD_CONST 2 ( 1 )					  
							      64 INPLACE_ADD						    64 BINARY_ADD						  
							      66 STORE_FAST 4 ( ans )					    66 STORE_FAST 5 ( ans )					  
							      68 JUMP_ABSOLUTE 52					    								  
							      >> 70 POP_BLOCK						    7 68 LOAD_FAST 4 ( ans )					  
							      								    70 LOAD_FAST 5 ( ans )					  
							      7 >> 72 LOAD_FAST 4 ( ans )				    72 LOAD_CONST 2 ( 1 )					  
							      74 RETURN_VALUE NEW_LINE					    74 BINARY_ADD						  
							      								    76 INPLACE_ADD						  
							      								    78 STORE_FAST 4 ( ans )					  
							      								    								  
							      								    8 80 LOAD_FAST 4 ( ans )					  
							      								    82 LOAD_CONST 2 ( 1 )					  
							      								    84 BINARY_SUBTRACT						  
							      								    86 LOAD_FAST 5 ( ans )					  
							      								    88 LOAD_CONST 2 ( 1 )					  
							      								    90 BINARY_SUBTRACT						  
							      								    92 LOAD_FAST 5 ( ans )					  
							      								    94 LOAD_CONST 2 ( 1 )					  
							      								    96 BINARY_SUBTRACT						  
							      								    98 LOAD_FAST 5 ( ans )					  
							      								    100 LOAD_CONST 2 ( 1 )					  
							      								    102 BINARY_SUBTRACT						  
							      								    104 LOAD_FAST 5 ( ans )					  
							      								    106 LOAD_CONST 2 ( 1 )					  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_FAST 5 ( ans )					  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 BINARY_SUBTRACT						  
							      								    116 LOAD_FAST 5 ( ans )					  
							      								    118 LOAD_CONST 2 ( 1 )					  
							      								    120 BINARY_SUBTRACT						  
							      								    122 LOAD_FAST 5 ( ans )					  
							      								    124 LOAD_CONST 3 ( 2 )					  
							      								    126 BINARY_SUBTRACT						  
							      								    128 BINARY_TRUE_DIVIDE					  
							      								    130 BINARY_ADD						  
							      								    132 LOAD_FAST 5 ( ans )					  
							      								    134 LOAD_CONST 2 ( 1 )					  
							      								    136 BINARY_SUBTRACT						  
							      								    138 LOAD_FAST 5 ( ans )					  
							      								    140 LOAD_CONST 2 ( 1 )					  
							      								    142 BINARY_SUBTRACT						  
							      								    144 BINARY_SUBTRACT						  
							      								    146 LOAD_FAST 5 ( ans )					  
							      								    148 LOAD_CONST 2 ( 1 )					  
							      								    150 BINARY_SUBTRACT						  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 5 ( ans )					  
							      								    156 LOAD_CONST 2 ( 1 )					  
							      								    158 BINARY_SUBTRACT						  
							      								    160 BINARY_TRUE_DIVIDE					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 STORE_FAST 5 ( ans )					  
							      								    								  
							      								    9 166 LOAD_FAST 5 ( ans )					  
							      								    168 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_ARRAY_ADJACENT_DIFFER_K			      SEARCHING_ARRAY_ADJACENT_DIFFER_K				    SEARCHING_ARRAY_ADJACENT_DIFFER_K				  SEARCHING_ARRAY_ADJACENT_DIFFER_K
--							      --							    --								  --
def search ( arr , n , x , k ) :			      Disassembly of <code object search at 0x7f33e2644f60, file "< Disassembly of <code object search at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    while ( i < n ) :					      2 STORE_FAST 4 ( i )					    2 STORE_FAST 2 ( i )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( arr [ i ] == x ) :				      								    								  le "<dis>", line 2, in search TypeError: 'int' obj
	    return i					      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 SETUP_LOOP 64 ( to 66 )					  ect is not iterable
	i = i + max ( 1 , int ( abs ( arr [ i ] - x ) / k ) ) >> 6 LOAD_FAST 4 ( i )					    6 LOAD_FAST 0 ( arr )					  
    print ( "number is not present!" )			      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
    return - 1						      10 COMPARE_OP 0 ( < )					    10 BINARY_SUBSCR						  
							      12 POP_JUMP_IF_FALSE 66					    12 GET_ITER							  
							      								    >> 14 FOR_ITER 56 ( to 64 )					  
							      4 14 LOAD_FAST 0 ( arr )					    16 STORE_FAST 3 ( i )					  
							      16 LOAD_FAST 4 ( i )					    								  
							      18 BINARY_SUBSCR						    4 18 LOAD_FAST 2 ( i )					  
							      20 LOAD_FAST 2 ( x )					    20 LOAD_FAST 3 ( i )					  
							      22 COMPARE_OP 2 ( == )					    22 BINARY_SUBSCR						  
							      24 POP_JUMP_IF_FALSE 30					    24 LOAD_FAST 3 ( i )					  
							      								    26 COMPARE_OP 2 ( == )					  
							      5 26 LOAD_FAST 4 ( i )					    28 POP_JUMP_IF_FALSE 36					  
							      28 RETURN_VALUE						    								  
							      								    5 30 LOAD_FAST 2 ( i )					  
							      6 >> 30 LOAD_FAST 4 ( i )					    32 LOAD_FAST 3 ( i )					  
							      32 LOAD_GLOBAL 0 ( max )					    34 BINARY_SUBSCR						  
							      34 LOAD_CONST 2 ( 1 )					    36 LOAD_FAST 3 ( i )					  
							      36 LOAD_GLOBAL 1 ( int )					    38 COMPARE_OP 2 ( == )					  
							      38 LOAD_GLOBAL 2 ( abs )					    40 POP_JUMP_IF_FALSE 14					  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 4 ( i )					    6 42 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBSCR						    44 LOAD_FAST 3 ( i )					  
							      46 LOAD_FAST 2 ( x )					    46 BINARY_SUBSCR						  
							      48 BINARY_SUBTRACT					    48 LOAD_FAST 3 ( i )					  
							      50 CALL_FUNCTION 1					    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 3 ( k )					    52 LOAD_FAST 3 ( i )					  
							      54 BINARY_TRUE_DIVIDE					    54 BINARY_SUBSCR						  
							      56 CALL_FUNCTION 1					    56 LOAD_FAST 3 ( i )					  
							      58 CALL_FUNCTION 2					    58 STORE_SUBSCR						  
							      60 BINARY_ADD						    								  
							      62 STORE_FAST 4 ( i )					    7 60 LOAD_FAST 2 ( i )					  
							      64 JUMP_ABSOLUTE 6					    62 LOAD_FAST 3 ( i )					  
							      >> 66 POP_BLOCK						    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 3 ( i )					  
							      7 >> 68 LOAD_GLOBAL 3 ( print )				    68 STORE_SUBSCR						  
							      70 LOAD_CONST 3 ( 'number is not present!' )		    								  
							      72 CALL_FUNCTION 1					    8 70 LOAD_FAST 2 ( i )					  
							      74 POP_TOP						    72 LOAD_FAST 3 ( i )					  
							      								    74 BINARY_SUBSCR						  
							      8 76 LOAD_CONST 4 ( - 1 )					    76 LOAD_FAST 3 ( i )					  
							      78 RETURN_VALUE NEW_LINE					    78 STORE_SUBSCR						  
							      								    80 JUMP_ABSOLUTE 14						  
							      								    >> 82 POP_BLOCK						  
							      								    >> 84 LOAD_CONST 0 ( None )					  
							      								    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	      FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	    FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	  FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE
--							      --							    --								  --
def minRadius ( k , x , y , n ) :			      Disassembly of <code object minRadius at 0x7f33e2644930, file Disassembly of <code object minRadius at 0x7f2b0163dc90, file script_not_found : None
    dis = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'n' , ) )				  
	dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]     4 LOAD_FAST 3 ( n )					    4 IMPORT_NAME 0 ( dis )					  
    dis.sort ( )					      6 BINARY_MULTIPLY						    6 IMPORT_FROM 1 ( n )					  
    return dis [ k - 1 ]				      8 STORE_FAST 4 ( dis )					    8 STORE_FAST 2 ( dis )					  
							      								    10 POP_TOP							  
							      3 10 SETUP_LOOP 54 ( to 66 )				    								  
							      12 LOAD_GLOBAL 0 ( range )				    3 12 SETUP_LOOP 26 ( to 40 )				  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_GLOBAL 2 ( range )					  
							      16 LOAD_FAST 3 ( n )					    16 LOAD_CONST 1 ( 0 )					  
							      18 CALL_FUNCTION 2					    18 LOAD_CONST 2 ( ( 'n' , ) )				  
							      20 GET_ITER						    20 CALL_FUNCTION_KW 1					  
							      >> 22 FOR_ITER 40 ( to 64 )				    22 GET_ITER							  
							      24 STORE_FAST 5 ( i )					    >> 24 FOR_ITER 18 ( to 38 )					  
							      								    26 STORE_FAST 3 ( i )					  
							      4 26 LOAD_FAST 1 ( x )					    								  
							      28 LOAD_FAST 5 ( i )					    4 28 LOAD_FAST 2 ( dis )					  
							      30 BINARY_SUBSCR						    30 LOAD_FAST 3 ( i )					  
							      32 LOAD_FAST 1 ( x )					    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 5 ( i )					    34 LOAD_FAST 1 ( x )					  
							      36 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      38 BINARY_MULTIPLY					    38 LOAD_FAST 1 ( x )					  
							      40 LOAD_FAST 2 ( y )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 5 ( i )					    42 LOAD_FAST 1 ( x )					  
							      44 BINARY_SUBSCR						    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 2 ( y )					    46 LOAD_FAST 1 ( x )					  
							      48 LOAD_FAST 5 ( i )					    48 BINARY_SUBSCR						  
							      50 BINARY_SUBSCR						    50 LOAD_FAST 1 ( x )					  
							      52 BINARY_MULTIPLY					    52 BINARY_SUBSCR						  
							      54 BINARY_ADD						    54 LOAD_FAST 1 ( x )					  
							      56 LOAD_FAST 4 ( dis )					    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 5 ( i )					    58 LOAD_FAST 1 ( x )					  
							      60 STORE_SUBSCR						    60 BINARY_SUBSCR						  
							      62 JUMP_ABSOLUTE 22					    62 LOAD_FAST 1 ( x )					  
							      >> 64 POP_BLOCK						    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 1 ( x )					  
							      5 >> 66 LOAD_FAST 4 ( dis )				    68 BINARY_SUBSCR						  
							      68 LOAD_METHOD 1 ( sort )					    70 LOAD_FAST 1 ( x )					  
							      70 CALL_METHOD 0						    72 BINARY_SUBSCR						  
							      72 POP_TOP						    74 LOAD_FAST 1 ( x )					  
							      								    76 BINARY_SUBSCR						  
							      6 74 LOAD_FAST 4 ( dis )					    78 LOAD_FAST 1 ( x )					  
							      76 LOAD_FAST 0 ( k )					    80 BINARY_SUBSCR						  
							      78 LOAD_CONST 2 ( 1 )					    82 LOAD_FAST 1 ( x )					  
							      80 BINARY_SUBTRACT					    84 BINARY_SUBSCR						  
							      82 BINARY_SUBSCR						    86 LOAD_FAST 1 ( x )					  
							      84 RETURN_VALUE NEW_LINE					    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 1 ( x )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_FAST 1 ( x )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 1 ( x )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    5 102 LOAD_FAST 2 ( dis )					  
							      								    104 RETURN_VALUE						  
							      								    >> 106 POP_BLOCK						  
							      								    108 JUMP_ABSOLUTE 24					  
							      								    >> 110 POP_BLOCK						  
							      								    								  
							      								    6 >> 112 LOAD_FAST 2 ( dis )				  
							      								    114 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
def countSubstringWithEqualEnds ( s ) :			      Disassembly of <code object countSubstringWithEqualEnds at 0x Disassembly of <code object countSubstringWithEqualds at 0x7f error : Traceback (most recent call last):   File
    result = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    n = len ( s ) ;					      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  (item)   File "main.py", line 34, in <module>	  Fi
    for i in range ( n ) :				      								    								  le "<dis>", line 2, in countSubstringWithEqualEnds
	for j in range ( i , n ) :			      3 4 LOAD_GLOBAL 0 ( len )					    3 4 LOAD_GLOBAL 0 ( len )					   IndexError: string index out of range
	    if ( s [ i ] == s [ j ] ) :			      6 LOAD_FAST 0 ( s )					    6 LOAD_FAST 0 ( s )						  
		result = result + 1			      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
    return result					      10 STORE_FAST 2 ( n )					    10 STORE_FAST 2 ( result )					  
							      								    								  
							      4 12 SETUP_LOOP 60 ( to 74 )				    4 12 SETUP_LOOP 54 ( to 68 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_FAST 2 ( n )					    16 LOAD_FAST 2 ( result )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 48 ( to 72 )				    >> 22 FOR_ITER 46 ( to 66 )					  
							      24 STORE_FAST 3 ( i )					    24 STORE_FAST 3 ( i )					  
							      								    								  
							      5 26 SETUP_LOOP 42 ( to 70 )				    5 26 SETUP_LOOP 40 ( to 64 )				  
							      28 LOAD_GLOBAL 1 ( range )				    28 LOAD_GLOBAL 2 ( range )					  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 2 ( result )					  
							      32 LOAD_FAST 2 ( n )					    32 CALL_FUNCTION 1						  
							      34 CALL_FUNCTION 2					    34 GET_ITER							  
							      36 GET_ITER						    >> 36 FOR_ITER 28 ( to 62 )					  
							      >> 38 FOR_ITER 28 ( to 68 )				    38 STORE_FAST 4 ( j )					  
							      40 STORE_FAST 4 ( j )					    								  
							      								    6 40 LOAD_FAST 0 ( s )					  
							      6 42 LOAD_FAST 0 ( s )					    42 LOAD_FAST 4 ( j )					  
							      44 LOAD_FAST 3 ( i )					    44 BINARY_SUBSCR						  
							      46 BINARY_SUBSCR						    46 LOAD_FAST 4 ( j )					  
							      48 LOAD_FAST 0 ( s )					    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 4 ( j )					    50 LOAD_FAST 1 ( result )					  
							      52 BINARY_SUBSCR						    52 COMPARE_OP 2 ( == )					  
							      54 COMPARE_OP 2 ( == )					    54 POP_JUMP_IF_FALSE 36					  
							      56 POP_JUMP_IF_FALSE 38					    								  
							      								    7 56 LOAD_FAST 1 ( result )					  
							      7 58 LOAD_FAST 1 ( result )				    58 LOAD_FAST 4 ( j )					  
							      60 LOAD_CONST 2 ( 1 )					    60 BINARY_SUBSCR						  
							      62 BINARY_ADD						    62 LOAD_FAST 1 ( result )					  
							      64 STORE_FAST 1 ( result )				    64 LOAD_FAST 4 ( j )					  
							      66 JUMP_ABSOLUTE 38					    66 BINARY_SUBSCR						  
							      >> 68 POP_BLOCK						    68 LOAD_FAST 1 ( result )					  
							      >> 70 JUMP_ABSOLUTE 22					    70 COMPARE_OP 2 ( == )					  
							      >> 72 POP_BLOCK						    72 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      8 >> 74 LOAD_FAST 1 ( result )				    8 74 LOAD_FAST 1 ( result )					  
							      76 RETURN_VALUE NEW_LINE					    76 LOAD_FAST 4 ( j )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 1 ( result )					  
							      								    82 LOAD_FAST 4 ( j )					  
							      								    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 1 ( result )					  
							      								    88 LOAD_FAST 4 ( j )					  
							      								    90 STORE_SUBSCR						  
							      								    92 JUMP_ABSOLUTE 36						  
							      								    >> 94 POP_BLOCK						  
							      								    								  
							      								    9 >> 96 LOAD_FAST 1 ( result )				  
							      								    98 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION	  SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION
--							      --							    --								  --
def printSorted ( a , b , c ) :				      Disassembly of <code object printSorted at 0x7f33e2644f60, fi Disassembly of <code object printSorted at 0x7f2b0163dc90, fi script_not_found : None
    get_max = max ( a , max ( b , c ) )			      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
    get_min = - max ( - a , max ( - b , - c ) )		      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
    get_mid = ( a + b + c ) - ( get_max + get_min )	      4 LOAD_GLOBAL 0 ( max )					    4 LOAD_FAST 1 ( b )						  
    print ( get_min , " " , get_mid , " " , get_max )	      6 LOAD_FAST 1 ( b )					    6 LOAD_FAST 2 ( c )						  
							      8 LOAD_FAST 2 ( c )					    8 CALL_FUNCTION 3						  
							      10 CALL_FUNCTION 2					    10 STORE_FAST 3 ( min )					  
							      12 CALL_FUNCTION 2					    								  
							      14 STORE_FAST 3 ( get_max )				    3 12 LOAD_GLOBAL 1 ( max )					  
							      								    14 LOAD_FAST 0 ( a )					  
							      3 16 LOAD_GLOBAL 0 ( max )				    16 LOAD_FAST 1 ( b )					  
							      18 LOAD_FAST 0 ( a )					    18 LOAD_FAST 2 ( c )					  
							      20 UNARY_NEGATIVE						    20 CALL_FUNCTION 3						  
							      22 LOAD_GLOBAL 0 ( max )					    22 STORE_FAST 4 ( mid )					  
							      24 LOAD_FAST 1 ( b )					    								  
							      26 UNARY_NEGATIVE						    4 24 LOAD_GLOBAL 2 ( print )				  
							      28 LOAD_FAST 2 ( c )					    26 LOAD_FAST 3 ( min )					  
							      30 UNARY_NEGATIVE						    28 LOAD_FAST 4 ( mid )					  
							      32 CALL_FUNCTION 2					    30 CALL_FUNCTION 2						  
							      34 CALL_FUNCTION 2					    32 POP_TOP							  
							      36 UNARY_NEGATIVE						    								  
							      38 STORE_FAST 4 ( get_min )				    5 34 LOAD_GLOBAL 2 ( print )				  
							      								    36 LOAD_FAST 3 ( min )					  
							      4 40 LOAD_FAST 0 ( a )					    38 LOAD_FAST 4 ( mid )					  
							      42 LOAD_FAST 1 ( b )					    40 CALL_FUNCTION 2						  
							      44 BINARY_ADD						    42 POP_TOP							  
							      46 LOAD_FAST 2 ( c )					    								  
							      48 BINARY_ADD						    6 44 LOAD_GLOBAL 2 ( print )				  
							      50 LOAD_FAST 3 ( get_max )				    46 LOAD_FAST 3 ( max )					  
							      52 LOAD_FAST 4 ( get_min )				    48 CALL_FUNCTION 1						  
							      54 BINARY_ADD						    50 POP_TOP							  
							      56 BINARY_SUBTRACT					    								  
							      58 STORE_FAST 5 ( get_mid )				    7 52 LOAD_GLOBAL 2 ( print )				  
							      								    54 LOAD_FAST 3 ( max )					  
							      5 60 LOAD_GLOBAL 1 ( print )				    56 CALL_FUNCTION 1						  
							      62 LOAD_FAST 4 ( get_min )				    58 POP_TOP							  
							      64 LOAD_CONST 1 ( ' ' )					    								  
							      66 LOAD_FAST 5 ( get_mid )				    8 60 LOAD_GLOBAL 2 ( print )				  
							      68 LOAD_CONST 1 ( ' ' )					    62 LOAD_FAST 3 ( max )					  
							      70 LOAD_FAST 3 ( get_max )				    64 CALL_FUNCTION 1						  
							      72 CALL_FUNCTION 5					    66 POP_TOP							  
							      74 POP_TOP						    								  
							      76 LOAD_CONST 0 ( None )					    9 68 LOAD_GLOBAL 2 ( print )				  
							      78 RETURN_VALUE NEW_LINE					    70 LOAD_FAST 3 ( max )					  
							      								    72 CALL_FUNCTION 1						  
							      								    74 POP_TOP							  
							      								    76 LOAD_CONST 0 ( None )					  
							      								    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
def seiresSum ( n , a ) :				      Disassembly of <code object seiresSum at 0x7f33e2653ed0, file Disassembly of <code object seiresSum at 0x7f2b01639660, file script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , 2 * n ) :			      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  
	if ( i % 2 == 0 ) :				      								    								  
	    res += a [ i ] * a [ i ]			      3 4 SETUP_LOOP 76 ( to 82 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    res -= a [ i ] * a [ i ]			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
    return res						      10 LOAD_CONST 2 ( 2 )					    10 LOAD_FAST 2 ( res )					  
							      12 LOAD_FAST 0 ( n )					    12 CALL_FUNCTION 2						  
							      14 BINARY_MULTIPLY					    14 GET_ITER							  
							      16 CALL_FUNCTION 2					    >> 16 FOR_ITER 48 ( to 64 )					  
							      18 GET_ITER						    18 STORE_FAST 3 ( i )					  
							      >> 20 FOR_ITER 58 ( to 80 )				    								  
							      22 STORE_FAST 3 ( i )					    4 20 LOAD_FAST 2 ( res )					  
							      								    22 LOAD_CONST 3 ( 1 )					  
							      4 24 LOAD_FAST 3 ( i )					    24 COMPARE_OP 2 ( == )					  
							      26 LOAD_CONST 2 ( 2 )					    26 POP_JUMP_IF_FALSE 40					  
							      28 BINARY_MODULO						    								  
							      30 LOAD_CONST 1 ( 0 )					    5 28 LOAD_FAST 2 ( res )					  
							      32 COMPARE_OP 2 ( == )					    30 LOAD_CONST 4 ( 2 )					  
							      34 POP_JUMP_IF_FALSE 58					    32 BINARY_MODULO						  
							      								    34 STORE_FAST 2 ( res )					  
							      5 36 LOAD_FAST 2 ( res )					    								  
							      38 LOAD_FAST 1 ( a )					    6 36 LOAD_FAST 2 ( res )					  
							      40 LOAD_FAST 3 ( i )					    38 LOAD_CONST 5 ( 3 )					  
							      42 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      44 LOAD_FAST 1 ( a )					    42 STORE_FAST 4 ( res )					  
							      46 LOAD_FAST 3 ( i )					    								  
							      48 BINARY_SUBSCR						    7 44 LOAD_FAST 2 ( res )					  
							      50 BINARY_MULTIPLY					    46 LOAD_CONST 6 ( 4 )					  
							      52 INPLACE_ADD						    48 BINARY_SUBSCR						  
							      54 STORE_FAST 2 ( res )					    50 STORE_FAST 5 ( res )					  
							      56 JUMP_ABSOLUTE 20					    								  
							      								    8 52 LOAD_FAST 2 ( res )					  
							      7 >> 58 LOAD_FAST 2 ( res )				    54 LOAD_CONST 7 ( 4 )					  
							      60 LOAD_FAST 1 ( a )					    56 BINARY_SUBSCR						  
							      62 LOAD_FAST 3 ( i )					    58 LOAD_FAST 1 ( a )					  
							      64 BINARY_SUBSCR						    60 LOAD_FAST 5 ( res )					  
							      66 LOAD_FAST 1 ( a )					    62 LOAD_CONST 8 ( 5 )					  
							      68 LOAD_FAST 3 ( i )					    64 BINARY_SUBSCR						  
							      70 BINARY_SUBSCR						    66 COMPARE_OP 2 ( == )					  
							      72 BINARY_MULTIPLY					    68 POP_JUMP_IF_FALSE 16					  
							      74 INPLACE_SUBTRACT					    								  
							      76 STORE_FAST 2 ( res )					    9 70 LOAD_FAST 2 ( res )					  
							      78 JUMP_ABSOLUTE 20					    72 LOAD_CONST 9 ( 6 )					  
							      >> 80 POP_BLOCK						    74 BINARY_SUBSCR						  
							      								    76 STORE_FAST 2 ( res )					  
							      8 >> 82 LOAD_FAST 2 ( res )				    								  
							      84 RETURN_VALUE NEW_LINE					    10 78 LOAD_FAST 2 ( res )					  
							      								    80 LOAD_CONST 10 ( 6 )					  
							      								    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 1 ( a )					  
							      								    86 LOAD_FAST 5 ( res )					  
							      								    88 LOAD_CONST 11 ( 4 )					  
							      								    90 STORE_SUBSCR						  
							      								    								  
							      								    11 92 LOAD_FAST 2 ( res )					  
							      								    94 LOAD_CONST 12 ( 6 )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 1 ( a )					  
							      								    100 LOAD_FAST 5 ( res )					  
							      								    102 LOAD_CONST 13 ( 7 )					  
							      								    104 STORE_SUBSCR						  
							      								    								  
							      								    12 106 LOAD_FAST 2 ( res )					  
							      								    108 LOAD_CONST 13 ( 7 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_FAST 1 ( a )					  
							      								    114 LOAD_FAST 5 ( res )					  
							      								    116 LOAD_CONST 14 ( 8 )					  
							      								    118 STORE_SUBSCR						  
							      								    								  
							      								    13 120 LOAD_FAST 2 ( res )					  
							      								    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
def checkMarkov ( m ) :					      Disassembly of <code object checkMarkov at 0x7f33e2653ed0, fi Disassembly of <code object checkMarkov at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    for i in range ( 0 , len ( m ) ) :			      2 0 SETUP_LOOP 82 ( to 84 )				    2 0 SETUP_LOOP 76 ( to 78 )					  "XLM/dis_script.py", line 60, in <module>	exec
	sm = 0						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  (item)   File "main.py", line 34, in <module>	  Fi
	for j in range ( 0 , len ( m [ i ] ) ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in checkMarkov AttributeError:
	    sm = sm + m [ i ] [ j ]			      6 LOAD_GLOBAL 1 ( len )					    6 LOAD_GLOBAL 1 ( len )					   'list' object has no attribute 'group'
	if ( sm != 1 ) :				      8 LOAD_FAST 0 ( m )					    8 LOAD_FAST 0 ( m )						  
	    return False				      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    return True						      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 64 ( to 82 )				    >> 16 FOR_ITER 54 ( to 76 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 2 ( i )					  
							      								    								  
							      3 20 LOAD_CONST 1 ( 0 )					    3 20 SETUP_LOOP 40 ( to 60 )				  
							      22 STORE_FAST 2 ( sm )					    22 LOAD_GLOBAL 2 ( range )					  
							      								    24 LOAD_CONST 1 ( 0 )					  
							      4 24 SETUP_LOOP 42 ( to 68 )				    26 LOAD_GLOBAL 1 ( len )					  
							      26 LOAD_GLOBAL 0 ( range )				    28 LOAD_FAST 0 ( m )					  
							      28 LOAD_CONST 1 ( 0 )					    30 CALL_FUNCTION 1						  
							      30 LOAD_GLOBAL 1 ( len )					    32 CALL_FUNCTION 2						  
							      32 LOAD_FAST 0 ( m )					    34 GET_ITER							  
							      34 LOAD_FAST 1 ( i )					    >> 36 FOR_ITER 24 ( to 58 )					  
							      36 BINARY_SUBSCR						    38 STORE_FAST 3 ( j )					  
							      38 CALL_FUNCTION 1					    								  
							      40 CALL_FUNCTION 2					    4 40 LOAD_FAST 0 ( m )					  
							      42 GET_ITER						    42 LOAD_METHOD 3 ( group )					  
							      >> 44 FOR_ITER 20 ( to 66 )				    44 LOAD_CONST 2 ( 1 )					  
							      46 STORE_FAST 3 ( j )					    46 CALL_METHOD 1						  
							      								    48 STORE_FAST 4 ( m )					  
							      5 48 LOAD_FAST 2 ( sm )					    								  
							      50 LOAD_FAST 0 ( m )					    5 50 LOAD_FAST 0 ( m )					  
							      52 LOAD_FAST 1 ( i )					    52 LOAD_METHOD 3 ( group )					  
							      54 BINARY_SUBSCR						    54 LOAD_CONST 3 ( 2 )					  
							      56 LOAD_FAST 3 ( j )					    56 CALL_METHOD 1						  
							      58 BINARY_SUBSCR						    58 STORE_FAST 5 ( m )					  
							      60 BINARY_ADD						    								  
							      62 STORE_FAST 2 ( sm )					    6 60 LOAD_FAST 0 ( m )					  
							      64 JUMP_ABSOLUTE 44					    62 LOAD_METHOD 3 ( group )					  
							      >> 66 POP_BLOCK						    64 LOAD_CONST 4 ( 1 )					  
							      								    66 CALL_METHOD 1						  
							      6 >> 68 LOAD_FAST 2 ( sm )				    68 STORE_FAST 6 ( m )					  
							      70 LOAD_CONST 2 ( 1 )					    								  
							      72 COMPARE_OP 3 ( != )					    7 70 LOAD_FAST 5 ( m )					  
							      74 POP_JUMP_IF_FALSE 16					    72 LOAD_METHOD 3 ( group )					  
							      								    74 LOAD_CONST 5 ( 2 )					  
							      7 76 LOAD_CONST 3 ( False )				    76 CALL_METHOD 1						  
							      78 RETURN_VALUE						    78 STORE_FAST 7 ( m )					  
							      80 JUMP_ABSOLUTE 16					    								  
							      >> 82 POP_BLOCK						    8 80 LOAD_FAST 6 ( m )					  
							      								    82 LOAD_METHOD 3 ( group )					  
							      8 >> 84 LOAD_CONST 4 ( True )				    84 LOAD_CONST 6 ( 2 )					  
							      86 RETURN_VALUE NEW_LINE					    86 CALL_METHOD 1						  
							      								    88 STORE_FAST 8 ( m )					  
							      								    								  
							      								    9 90 LOAD_FAST 2 ( i )					  
							      								    92 LOAD_FAST 7 ( m )					  
							      								    94 COMPARE_OP 4 ( > )					  
							      								    96 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      								    10 98 LOAD_FAST 6 ( m )					  
							      								    100 LOAD_METHOD 3 ( group )					  
							      								    102 LOAD_CONST 7 ( 3 )					  
							      								    104 CALL_METHOD 1						  
							      								    106 STORE_FAST 9 ( m )					  
							      								    108 JUMP_ABSOLUTE 36					  
							      								    >> 110 POP_BLOCK						  
							      								    >> 112 JUMP_ABSOLUTE 16					  
							      								    >> 114 POP_BLOCK						  
							      								    >> 116 JUMP_ABSOLUTE 16					  
							      								    >> 118 POP_BLOCK						  
							      								    >> 120 JUMP_ABSOLUTE 16					  
							      								    >> 122 POP_BLOCK						  
							      								    								  
							      								    11 >> 124 LOAD_FAST 1 ( checkcheckkov )			  
							      								    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
def sequence ( n ) :					      Disassembly of <code object sequence at 0x7f33e2644930, file  Disassembly of <code object sequence at 0x7f2b01639660, file  script_not_found : None
    f = array.array ( 'i' , [ 0 , 1 , 1 ] )		      2 0 LOAD_GLOBAL 0 ( array )				    2 0 LOAD_GLOBAL 0 ( array )					  
    for i in range ( 3 , n + 1 ) :			      2 LOAD_METHOD 0 ( array )					    2 LOAD_METHOD 1 ( array )					  
	r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]	      4 LOAD_CONST 1 ( 'i' )					    4 LOAD_CONST 1 ( 'i' )					  
	f.append ( r ) ;				      6 LOAD_CONST 2 ( 0 )					    6 LOAD_CONST 2 ( 0 )					  
    return r						      8 LOAD_CONST 3 ( 1 )					    8 LOAD_CONST 3 ( 1 )					  
							      10 LOAD_CONST 3 ( 1 )					    10 LOAD_CONST 4 ( 2 )					  
							      12 BUILD_LIST 3						    12 LOAD_CONST 5 ( 1 )					  
							      14 CALL_METHOD 2						    14 BUILD_LIST 3						  
							      16 STORE_FAST 1 ( f )					    16 CALL_METHOD 2						  
							      								    18 STORE_FAST 0 ( n )					  
							      3 18 SETUP_LOOP 68 ( to 88 )				    								  
							      20 LOAD_GLOBAL 1 ( range )				    3 20 SETUP_LOOP 64 ( to 92 )				  
							      22 LOAD_CONST 4 ( 3 )					    22 LOAD_GLOBAL 2 ( range )					  
							      24 LOAD_FAST 0 ( n )					    24 LOAD_CONST 1 ( 3 )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_CONST 6 ( 3 )					  
							      28 BINARY_ADD						    28 CALL_FUNCTION 2						  
							      30 CALL_FUNCTION 2					    30 GET_ITER							  
							      32 GET_ITER						    >> 32 FOR_ITER 48 ( to 90 )					  
							      >> 34 FOR_ITER 50 ( to 86 )				    34 STORE_FAST 1 ( i )					  
							      36 STORE_FAST 2 ( i )					    								  
							      								    4 36 LOAD_FAST 0 ( n )					  
							      4 38 LOAD_FAST 1 ( f )					    38 LOAD_FAST 1 ( i )					  
							      40 LOAD_FAST 1 ( f )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_METHOD 3 ( append )					  
							      44 LOAD_CONST 3 ( 1 )					    44 LOAD_FAST 0 ( n )					  
							      46 BINARY_SUBTRACT					    46 CALL_METHOD 1						  
							      48 BINARY_SUBSCR						    48 POP_TOP							  
							      50 BINARY_SUBSCR						    								  
							      52 LOAD_FAST 1 ( f )					    5 50 LOAD_FAST 0 ( n )					  
							      54 LOAD_FAST 2 ( i )					    52 LOAD_FAST 1 ( i )					  
							      56 LOAD_FAST 1 ( f )					    54 BINARY_SUBSCR						  
							      58 LOAD_FAST 2 ( i )					    56 LOAD_METHOD 3 ( append )					  
							      60 LOAD_CONST 3 ( 1 )					    58 LOAD_FAST 0 ( n )					  
							      62 BINARY_SUBTRACT					    60 CALL_METHOD 1						  
							      64 BINARY_SUBSCR						    62 POP_TOP							  
							      66 BINARY_SUBTRACT					    64 JUMP_ABSOLUTE 32						  
							      68 BINARY_SUBSCR						    >> 66 POP_BLOCK						  
							      70 BINARY_ADD						    								  
							      72 STORE_FAST 3 ( r )					    6 >> 68 LOAD_FAST 0 ( n )					  
							      								    70 RETURN_VALUE NEW_LINE					  
							      5 74 LOAD_FAST 1 ( f )					    								  
							      76 LOAD_METHOD 2 ( append )				    								  
							      78 LOAD_FAST 3 ( r )					    								  
							      80 CALL_METHOD 1						    								  
							      82 POP_TOP						    								  
							      84 JUMP_ABSOLUTE 34					    								  
							      >> 86 POP_BLOCK						    								  
							      								    								  
							      6 >> 88 LOAD_FAST 3 ( r )					    								  
							      90 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
def countWays ( n , k ) :				      Disassembly of <code object countWays at 0x7f33e2653f60, file Disassembly of <code object countWays at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    total = k						      2 0 LOAD_FAST 1 ( k )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    mod = 1000000007					      2 STORE_FAST 2 ( total )					    2 STORE_FAST 1 ( total )					  (item)   File "main.py", line 36, in <module>	  Fi
    same , diff = 0 , k					      								    								  le "<dis>", line 2, in countWays TypeError: 'int'
    for i in range ( 2 , n + 1 ) :			      3 4 LOAD_CONST 1 ( 1000000007 )				    3 4 LOAD_CONST 1 ( 1000000007 )				  object is not subscriptable
	same = diff					      6 STORE_FAST 3 ( mod )					    6 STORE_FAST 2 ( total )					  
	diff = total * ( k - 1 )			      								    								  
	diff = diff % mod				      4 8 LOAD_CONST 2 ( 0 )					    4 8 LOAD_CONST 2 ( 0 )					  
	total = ( same + diff ) % mod			      10 LOAD_FAST 1 ( k )					    10 STORE_FAST 3 ( diff )					  
    return total					      12 ROT_TWO						    								  
							      14 STORE_FAST 4 ( same )					    5 12 SETUP_LOOP 64 ( to 76 )				  
							      16 STORE_FAST 5 ( diff )					    14 LOAD_GLOBAL 0 ( range )					  
							      								    16 LOAD_CONST 2 ( 2 )					  
							      5 18 SETUP_LOOP 58 ( to 78 )				    18 LOAD_FAST 1 ( total )					  
							      20 LOAD_GLOBAL 0 ( range )				    20 CALL_FUNCTION 2						  
							      22 LOAD_CONST 3 ( 2 )					    22 GET_ITER							  
							      24 LOAD_FAST 0 ( n )					    >> 24 FOR_ITER 56 ( to 74 )					  
							      26 LOAD_CONST 4 ( 1 )					    26 STORE_FAST 4 ( i )					  
							      28 BINARY_ADD						    								  
							      30 CALL_FUNCTION 2					    6 28 LOAD_FAST 2 ( total )					  
							      32 GET_ITER						    30 LOAD_FAST 3 ( diff )					  
							      >> 34 FOR_ITER 40 ( to 76 )				    32 LOAD_FAST 4 ( i )					  
							      36 STORE_FAST 6 ( i )					    34 BINARY_SUBSCR						  
							      								    36 COMPARE_OP 2 ( == )					  
							      6 38 LOAD_FAST 5 ( diff )					    38 POP_JUMP_IF_FALSE 24					  
							      40 STORE_FAST 4 ( same )					    								  
							      								    7 40 LOAD_FAST 2 ( total )					  
							      7 42 LOAD_FAST 2 ( total )				    42 LOAD_FAST 3 ( diff )					  
							      44 LOAD_FAST 1 ( k )					    44 LOAD_FAST 4 ( i )					  
							      46 LOAD_CONST 4 ( 1 )					    46 BINARY_SUBSCR						  
							      48 BINARY_SUBTRACT					    48 COMPARE_OP 2 ( == )					  
							      50 BINARY_MULTIPLY					    50 POP_JUMP_IF_FALSE 24					  
							      52 STORE_FAST 5 ( diff )					    								  
							      								    8 52 LOAD_FAST 2 ( total )					  
							      8 54 LOAD_FAST 5 ( diff )					    54 LOAD_FAST 3 ( diff )					  
							      56 LOAD_FAST 3 ( mod )					    56 LOAD_FAST 4 ( i )					  
							      58 BINARY_MODULO						    58 BINARY_SUBSCR						  
							      60 STORE_FAST 5 ( diff )					    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 24					  
							      9 62 LOAD_FAST 4 ( same )					    								  
							      64 LOAD_FAST 5 ( diff )					    9 64 LOAD_FAST 2 ( total )					  
							      66 BINARY_ADD						    66 LOAD_FAST 3 ( diff )					  
							      68 LOAD_FAST 3 ( mod )					    68 LOAD_FAST 4 ( i )					  
							      70 BINARY_MODULO						    70 BINARY_SUBSCR						  
							      72 STORE_FAST 2 ( total )					    72 INPLACE_ADD						  
							      74 JUMP_ABSOLUTE 34					    74 STORE_FAST 2 ( total )					  
							      >> 76 POP_BLOCK						    76 JUMP_ABSOLUTE 24						  
							      								    >> 78 POP_BLOCK						  
							      10 >> 78 LOAD_FAST 2 ( total )				    								  
							      80 RETURN_VALUE NEW_LINE					    10 >> 80 LOAD_FAST 2 ( total )				  
							      								    82 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
def countP ( n , k ) :					      Disassembly of <code object countP at 0x7f33e2644f60, file "< Disassembly of <code object countP at 0x7f2b01639660, file "< script_not_found : None
    if ( n == 0 or k == 0 or k > n ) :			      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( k == 1 or k == n ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 1					      6 POP_JUMP_IF_TRUE 24					    6 POP_JUMP_IF_FALSE 12					  
    return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k -  8 LOAD_FAST 1 ( k )					    								  
							      10 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_TRUE 24					    								  
							      16 LOAD_FAST 1 ( k )					    4 >> 12 LOAD_FAST 0 ( n )					  
							      18 LOAD_FAST 0 ( n )					    14 LOAD_CONST 1 ( 0 )					  
							      20 COMPARE_OP 4 ( > )					    16 COMPARE_OP 2 ( == )					  
							      22 POP_JUMP_IF_FALSE 28					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      3 >> 24 LOAD_CONST 1 ( 0 )				    5 20 LOAD_CONST 2 ( 1 )					  
							      26 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      4 >> 28 LOAD_FAST 1 ( k )					    6 >> 24 LOAD_FAST 0 ( n )					  
							      30 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 1 ( 0 )					  
							      32 COMPARE_OP 2 ( == )					    28 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_TRUE 44					    30 POP_JUMP_IF_FALSE 36					  
							      36 LOAD_FAST 1 ( k )					    								  
							      38 LOAD_FAST 0 ( n )					    7 32 LOAD_CONST 2 ( 1 )					  
							      40 COMPARE_OP 2 ( == )					    34 RETURN_VALUE						  
							      42 POP_JUMP_IF_FALSE 48					    								  
							      								    8 >> 36 LOAD_FAST 0 ( n )					  
							      5 >> 44 LOAD_CONST 2 ( 1 )				    38 LOAD_CONST 1 ( 0 )					  
							      46 RETURN_VALUE						    40 COMPARE_OP 2 ( == )					  
							      								    42 POP_JUMP_IF_FALSE 48					  
							      6 >> 48 LOAD_FAST 1 ( k )					    								  
							      50 LOAD_GLOBAL 0 ( countP )				    9 44 LOAD_CONST 2 ( 1 )					  
							      52 LOAD_FAST 0 ( n )					    46 RETURN_VALUE						  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    10 >> 48 LOAD_FAST 0 ( n )					  
							      58 LOAD_FAST 1 ( k )					    50 LOAD_CONST 1 ( 0 )					  
							      60 CALL_FUNCTION 2					    52 COMPARE_OP 2 ( == )					  
							      62 BINARY_MULTIPLY					    54 POP_JUMP_IF_FALSE 64					  
							      64 LOAD_GLOBAL 0 ( countP )				    								  
							      66 LOAD_FAST 0 ( n )					    11 56 LOAD_CONST 2 ( 1 )					  
							      68 LOAD_CONST 2 ( 1 )					    58 RETURN_VALUE						  
							      70 BINARY_SUBTRACT					    								  
							      72 LOAD_FAST 1 ( k )					    12 >> 60 LOAD_FAST 0 ( n )					  
							      74 LOAD_CONST 2 ( 1 )					    62 LOAD_CONST 1 ( 0 )					  
							      76 BINARY_SUBTRACT					    64 COMPARE_OP 2 ( == )					  
							      78 CALL_FUNCTION 2					    66 POP_JUMP_IF_FALSE 74					  
							      80 BINARY_ADD						    								  
							      82 RETURN_VALUE NEW_LINE					    13 68 LOAD_CONST 2 ( 1 )					  
							      								    70 RETURN_VALUE						  
							      								    								  
							      								    14 >> 72 LOAD_CONST 2 ( 1 )					  
							      								    74 RETURN_VALUE						  
							      								    76 LOAD_CONST 0 ( None )					  
							      								    78 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
def power ( x , y ) :					      Disassembly of <code object power at 0x7f33e2653f60, file "<d Disassembly of <code object power at 0x7f2b01639660, file "<d error : Traceback (most recent call last):   File
    if ( y == 0 ) : return 1				      2 0 LOAD_FAST 1 ( y )					    2 0 LOAD_FAST 0 ( x )					  "XLM/dis_script.py", line 60, in <module>	exec
    temp = power ( x , int ( y / 2 ) )			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 34, in <module>	  Fi
    if ( y % 2 == 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  le "<dis>", line 2, in power TypeError: unsupporte
	return temp * temp				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  d operand type(s) for *: 'function' and 'float'
    else :						      8 LOAD_CONST 2 ( 1 )					    								  
	if ( y > 0 ) : return x * temp * temp		      10 RETURN_VALUE						    3 8 LOAD_CONST 1 ( 1 )					  
	else : return ( temp * temp ) / x		      								    10 RETURN_VALUE						  
							      3 >> 12 LOAD_GLOBAL 0 ( power )				    								  
							      14 LOAD_FAST 0 ( x )					    4 >> 12 LOAD_GLOBAL 0 ( power )				  
							      16 LOAD_GLOBAL 1 ( int )					    14 LOAD_FAST 0 ( x )					  
							      18 LOAD_FAST 1 ( y )					    16 LOAD_CONST 2 ( 2 )					  
							      20 LOAD_CONST 3 ( 2 )					    18 BINARY_POWER						  
							      22 BINARY_TRUE_DIVIDE					    20 LOAD_FAST 1 ( y )					  
							      24 CALL_FUNCTION 1					    22 LOAD_CONST 2 ( 2 )					  
							      26 CALL_FUNCTION 2					    24 BINARY_POWER						  
							      28 STORE_FAST 2 ( temp )					    26 LOAD_FAST 1 ( y )					  
							      								    28 LOAD_CONST 2 ( 2 )					  
							      4 30 LOAD_FAST 1 ( y )					    30 BINARY_POWER						  
							      32 LOAD_CONST 3 ( 2 )					    32 LOAD_FAST 1 ( y )					  
							      34 BINARY_MODULO						    34 LOAD_CONST 2 ( 2 )					  
							      36 LOAD_CONST 1 ( 0 )					    36 BINARY_POWER						  
							      38 COMPARE_OP 2 ( == )					    38 BINARY_SUBTRACT						  
							      40 POP_JUMP_IF_FALSE 50					    40 LOAD_FAST 1 ( y )					  
							      								    42 LOAD_CONST 2 ( 2 )					  
							      5 42 LOAD_FAST 2 ( temp )					    44 BINARY_POWER						  
							      44 LOAD_FAST 2 ( temp )					    46 BINARY_SUBTRACT						  
							      46 BINARY_MULTIPLY					    48 LOAD_FAST 1 ( y )					  
							      48 RETURN_VALUE						    50 LOAD_CONST 2 ( 2 )					  
							      								    52 BINARY_POWER						  
							      7 >> 50 LOAD_FAST 1 ( y )					    54 BINARY_SUBTRACT						  
							      52 LOAD_CONST 1 ( 0 )					    56 LOAD_FAST 1 ( y )					  
							      54 COMPARE_OP 4 ( > )					    58 LOAD_CONST 2 ( 2 )					  
							      56 POP_JUMP_IF_FALSE 70					    60 BINARY_POWER						  
							      58 LOAD_FAST 0 ( x )					    62 BINARY_SUBTRACT						  
							      60 LOAD_FAST 2 ( temp )					    64 BINARY_MULTIPLY						  
							      62 BINARY_MULTIPLY					    66 LOAD_FAST 1 ( y )					  
							      64 LOAD_FAST 2 ( temp )					    68 LOAD_CONST 2 ( 2 )					  
							      66 BINARY_MULTIPLY					    70 BINARY_POWER						  
							      68 RETURN_VALUE						    72 BINARY_MULTIPLY						  
							      								    74 LOAD_FAST 1 ( y )					  
							      8 >> 70 LOAD_FAST 2 ( temp )				    76 LOAD_CONST 2 ( 2 )					  
							      72 LOAD_FAST 2 ( temp )					    78 BINARY_POWER						  
							      74 BINARY_MULTIPLY					    80 BINARY_MULTIPLY						  
							      76 LOAD_FAST 0 ( x )					    82 BINARY_ADD						  
							      78 BINARY_TRUE_DIVIDE					    84 LOAD_FAST 1 ( y )					  
							      80 RETURN_VALUE						    86 LOAD_CONST 2 ( 2 )					  
							      82 LOAD_CONST 0 ( None )					    88 BINARY_POWER						  
							      84 RETURN_VALUE NEW_LINE					    90 BINARY_SUBTRACT						  
							      								    92 BINARY_MULTIPLY						  
							      								    94 BINARY_ADD						  
							      								    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
def minimumSquare ( a , b ) :				      Disassembly of <code object minimumSquare at 0x7f33e2649a50,  Disassembly of <code object minimumSquare at 0x7f2b0163dc90,  error : /bin/bash: line 1: 12214 Segmentation faul
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    rem = 0						      2 STORE_FAST 2 ( result )					    2 STORE_FAST 2 ( result )					  ataset/bin/python XLM/dis_script.py --script_path
    if ( a < b ) :					      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	a , b = b , a					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  24/eval_scripts/python_sa-dis_sa.valid/PAPER_CUT_M
    while ( b > 0 ) :					      6 STORE_FAST 3 ( rem )					    6 STORE_FAST 3 ( rem )					  INIMUM_NUMBER_SQUARES.dis
	result += int ( a / b )				      								    								  
	rem = int ( a % b )				      4 8 LOAD_FAST 0 ( a )					    4 8 LOAD_FAST 0 ( a )					  
	a = b						      10 LOAD_FAST 1 ( b )					    10 LOAD_FAST 1 ( b )					  
	b = rem						      12 COMPARE_OP 0 ( < )					    12 COMPARE_OP 0 ( < )					  
    return result					      14 POP_JUMP_IF_FALSE 26					    14 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      5 16 LOAD_FAST 1 ( b )					    5 16 LOAD_FAST 2 ( result )					  
							      18 LOAD_FAST 0 ( a )					    18 LOAD_FAST 1 ( b )					  
							      20 ROT_TWO						    20 COMPARE_OP 4 ( > )					  
							      22 STORE_FAST 0 ( a )					    22 POP_JUMP_IF_FALSE 32					  
							      24 STORE_FAST 1 ( b )					    								  
							      								    6 24 LOAD_FAST 2 ( result )					  
							      6 >> 26 SETUP_LOOP 48 ( to 76 )				    26 LOAD_FAST 1 ( b )					  
							      >> 28 LOAD_FAST 1 ( b )					    28 BINARY_SUBTRACT						  
							      30 LOAD_CONST 1 ( 0 )					    30 STORE_FAST 2 ( result )					  
							      32 COMPARE_OP 4 ( > )					    								  
							      34 POP_JUMP_IF_FALSE 74					    7 >> 32 LOAD_GLOBAL 0 ( int )				  
							      								    34 LOAD_FAST 2 ( result )					  
							      7 36 LOAD_FAST 2 ( result )				    36 CALL_FUNCTION 1						  
							      38 LOAD_GLOBAL 0 ( int )					    38 STORE_FAST 4 ( a )					  
							      40 LOAD_FAST 0 ( a )					    								  
							      42 LOAD_FAST 1 ( b )					    8 40 LOAD_FAST 3 ( rem )					  
							      44 BINARY_TRUE_DIVIDE					    42 LOAD_FAST 4 ( a )					  
							      46 CALL_FUNCTION 1					    44 BINARY_SUBTRACT						  
							      48 INPLACE_ADD						    46 STORE_FAST 5 ( b )					  
							      50 STORE_FAST 2 ( result )				    								  
							      								    9 48 LOAD_FAST 5 ( b )					  
							      8 52 LOAD_GLOBAL 0 ( int )				    50 LOAD_FAST 4 ( a )					  
							      54 LOAD_FAST 0 ( a )					    52 BINARY_SUBTRACT						  
							      56 LOAD_FAST 1 ( b )					    54 STORE_FAST 6 ( b )					  
							      58 BINARY_MODULO						    								  
							      60 CALL_FUNCTION 1					    10 56 LOAD_FAST 5 ( b )					  
							      62 STORE_FAST 3 ( rem )					    58 LOAD_FAST 6 ( b )					  
							      								    60 BINARY_SUBTRACT						  
							      9 64 LOAD_FAST 1 ( b )					    62 STORE_FAST 7 ( a )					  
							      66 STORE_FAST 0 ( a )					    								  
							      								    11 64 LOAD_FAST 2 ( result )				  
							      10 68 LOAD_FAST 3 ( rem )					    66 LOAD_FAST 6 ( b )					  
							      70 STORE_FAST 1 ( b )					    68 BINARY_SUBTRACT						  
							      72 JUMP_ABSOLUTE 28					    70 LOAD_FAST 3 ( rem )					  
							      >> 74 POP_BLOCK						    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 4 ( a )					  
							      11 >> 76 LOAD_FAST 2 ( result )				    76 BINARY_SUBTRACT						  
							      78 RETURN_VALUE NEW_LINE					    78 LOAD_FAST 5 ( b )					  
							      								    80 BINARY_SUBTRACT						  
							      								    82 LOAD_FAST 7 ( a )					  
							      								    84 BINARY_SUBTRACT						  
							      								    86 STORE_FAST 8 ( b )					  
							      								    								  
							      								    12 88 LOAD_FAST 6 ( b )					  
							      								    90 LOAD_FAST 8 ( b )					  
							      								    92 BINARY_SUBTRACT						  
							      								    94 LOAD_FAST 8 ( b )					  
							      								    96 BINARY_SUBTRACT						  
							      								    98 LOAD_FAST 7 ( a )					  
							      								    100 BINARY_SUBTRACT						  
							      								    102 LOAD_FAST 8 ( b )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 STORE_FAST 9 ( a )					  
							      								    								  
							      								    13 108 LOAD_FAST 9 ( a )					  
							      								    110 LOAD_FAST 6 ( b )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 LOAD_FAST 9 ( a )					  
							      								    116 BINARY_SUBTRACT						  
							      								    118 LOAD_FAST 10 ( b )					  
							      								    120 BINARY_SUBTRACT						  
							      								    122 LOAD_FAST 9 ( a )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 LOAD_FAST 10 ( b )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 LOAD_FAST 11 ( a )					  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 11 ( b )					  
							      								    136 BINARY_SUBTRACT						  
							      								    138 LOAD_FAST 10 ( b )					  
							      								    140 BINARY_SUBTRACT						  
							      								    142 LOAD_FAST 11 ( b )					  
							      								    144 BINARY_SUBTRACT						  
							      								    146 LOAD_FAST 12 ( b )					  
							      								    148 BINARY_SUBTRACT						  
							      								    150 LOAD_FAST 11 ( a )					  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 10 ( b )					  
							      								    156 BINARY_SUBTRACT						  
							      								    158 BINARY_MULTIPLY						  
							      								    160 BINARY_SUBTRACT						  
							      								    162 LOAD_FAST 10 ( b )					  
							      								    164 BINARY_SUBTRACT						  
							      								    166 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
def countSubStr ( st , n ) :				      Disassembly of <code object countSubStr at 0x7f33e2649a50, fi Disassembly of <code object countSubStr at 0x7f2b01639660, fi script_not_found : None
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  
	if ( st [ i ] == '1' ) :			      								    								  
	    for j in range ( i + 1 , n ) :		      3 4 SETUP_LOOP 74 ( to 80 )				    3 4 SETUP_LOOP 64 ( to 76 )					  
		if ( st [ j ] == '1' ) :		      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
		    res = res + 1			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
    return res						      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( st )					  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 60 ( to 78 )				    >> 16 FOR_ITER 48 ( to 74 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 0 ( st )					    4 20 LOAD_FAST 2 ( res )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 2 ( '1' )					    26 LOAD_CONST 3 ( '1' )					  
							      28 COMPARE_OP 2 ( == )					    28 COMPARE_OP 2 ( == )					  
							      30 POP_JUMP_IF_FALSE 16					    30 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      5 32 SETUP_LOOP 42 ( to 76 )				    5 32 JUMP_ABSOLUTE 16					  
							      34 LOAD_GLOBAL 0 ( range )				    								  
							      36 LOAD_FAST 3 ( i )					    6 >> 34 LOAD_FAST 2 ( res )					  
							      38 LOAD_CONST 3 ( 1 )					    36 LOAD_FAST 3 ( i )					  
							      40 BINARY_ADD						    38 BINARY_SUBSCR						  
							      42 LOAD_FAST 1 ( n )					    40 LOAD_CONST 4 ( ' ' )					  
							      44 CALL_FUNCTION 2					    42 COMPARE_OP 2 ( == )					  
							      46 GET_ITER						    44 POP_JUMP_IF_FALSE 16					  
							      >> 48 FOR_ITER 24 ( to 74 )				    								  
							      50 STORE_FAST 4 ( j )					    7 46 JUMP_ABSOLUTE 16					  
							      								    								  
							      6 52 LOAD_FAST 0 ( st )					    8 >> 48 LOAD_FAST 2 ( res )					  
							      54 LOAD_FAST 4 ( j )					    50 LOAD_FAST 3 ( i )					  
							      56 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      58 LOAD_CONST 2 ( '1' )					    54 LOAD_CONST 5 ( ' ' )					  
							      60 COMPARE_OP 2 ( == )					    56 COMPARE_OP 2 ( == )					  
							      62 POP_JUMP_IF_FALSE 48					    58 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      7 64 LOAD_FAST 2 ( res )					    9 60 JUMP_ABSOLUTE 16					  
							      66 LOAD_CONST 3 ( 1 )					    62 JUMP_ABSOLUTE 16						  
							      68 BINARY_ADD						    								  
							      70 STORE_FAST 2 ( res )					    11 >> 64 LOAD_FAST 2 ( res )				  
							      72 JUMP_ABSOLUTE 48					    66 LOAD_FAST 3 ( i )					  
							      >> 74 POP_BLOCK						    68 BINARY_SUBSCR						  
							      >> 76 JUMP_ABSOLUTE 16					    70 LOAD_CONST 6 ( ' ' )					  
							      >> 78 POP_BLOCK						    72 COMPARE_OP 2 ( == )					  
							      								    74 POP_JUMP_IF_FALSE 16					  
							      8 >> 80 LOAD_FAST 2 ( res )				    								  
							      82 RETURN_VALUE NEW_LINE					    12 76 LOAD_FAST 2 ( res )					  
							      								    78 LOAD_FAST 3 ( i )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_CONST 7 ( ' ' )					  
							      								    84 COMPARE_OP 2 ( == )					  
							      								    86 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    13 88 JUMP_ABSOLUTE 16					  
							      								    >> 90 POP_BLOCK						  
							      								    								  
							      								    14 >> 92 LOAD_FAST 2 ( res )				  
							      								    94 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	      MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	    MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL		  MINIMUM_<unk> MENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL
--							      --							    --								  --
def minOps ( arr , n , k ) :				      Disassembly of <code object minOps at 0x7f33e2644930, file "< Disassembly of <code object minOps at 0x7f2b0163dc90, file "< script_not_found : None
    max1 = max ( arr )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
    res = 0						      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    for i in range ( 0 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	if ( ( max1 - arr [ i ] ) % k != 0 ) :		      6 STORE_FAST 3 ( max1 )					    6 STORE_FAST 2 ( max1 )					  
	    return - 1					      								    								  
	else :						      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    res += ( max1 - arr [ i ] ) / k		      10 STORE_FAST 4 ( res )					    10 STORE_FAST 3 ( res )					  
    return int ( res )					      								    								  
							      4 12 SETUP_LOOP 62 ( to 76 )				    4 12 SETUP_LOOP 64 ( to 76 )				  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 2 ( 0 )					  
							      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 1 ( n )					  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 48 ( to 74 )				    >> 24 FOR_ITER 48 ( to 74 )					  
							      26 STORE_FAST 5 ( i )					    26 STORE_FAST 4 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 3 ( max1 )					    5 28 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 0 ( arr )					    30 LOAD_FAST 4 ( i )					  
							      32 LOAD_FAST 5 ( i )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 LOAD_FAST 4 ( i )					  
							      36 BINARY_SUBTRACT					    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 2 ( k )					    38 LOAD_FAST 4 ( i )					  
							      40 BINARY_MODULO						    40 COMPARE_OP 4 ( > )					  
							      42 LOAD_CONST 1 ( 0 )					    42 POP_JUMP_IF_FALSE 24					  
							      44 COMPARE_OP 3 ( != )					    								  
							      46 POP_JUMP_IF_FALSE 52					    6 44 LOAD_FAST 0 ( arr )					  
							      								    46 LOAD_FAST 4 ( i )					  
							      6 48 LOAD_CONST 2 ( - 1 )					    48 BINARY_SUBSCR						  
							      50 RETURN_VALUE						    50 LOAD_FAST 4 ( i )					  
							      								    52 BINARY_SUBSCR						  
							      8 >> 52 LOAD_FAST 4 ( res )				    54 LOAD_FAST 4 ( i )					  
							      54 LOAD_FAST 3 ( max1 )					    56 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( arr )					    58 LOAD_FAST 4 ( i )					  
							      58 LOAD_FAST 5 ( i )					    60 BINARY_SUBSCR						  
							      60 BINARY_SUBSCR						    62 LOAD_FAST 4 ( i )					  
							      62 BINARY_SUBTRACT					    64 BINARY_SUBSCR						  
							      64 LOAD_FAST 2 ( k )					    66 LOAD_FAST 4 ( i )					  
							      66 BINARY_TRUE_DIVIDE					    68 BINARY_SUBSCR						  
							      68 INPLACE_ADD						    70 LOAD_FAST 4 ( i )					  
							      70 STORE_FAST 4 ( res )					    72 BINARY_SUBSCR						  
							      72 JUMP_ABSOLUTE 24					    74 LOAD_FAST 4 ( i )					  
							      >> 74 POP_BLOCK						    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 4 ( i )					  
							      9 >> 76 LOAD_GLOBAL 2 ( int )				    80 BINARY_SUBSCR						  
							      78 LOAD_FAST 4 ( res )					    82 LOAD_FAST 4 ( i )					  
							      80 CALL_FUNCTION 1					    84 STORE_SUBSCR						  
							      82 RETURN_VALUE NEW_LINE					    								  
							      								    7 86 LOAD_FAST 0 ( arr )					  
							      								    88 LOAD_FAST 4 ( i )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_FAST 4 ( i )					  
							      								    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 4 ( i )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 4 ( i )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_FAST 4 ( i )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 4 ( i )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_FAST 4 ( i )					  
							      								    114 STORE_SUBSCR						  
							      								    								  
							      								    8 116 LOAD_FAST 0 ( arr )					  
							      								    118 LOAD_FAST 4 ( i )					  
							      								    120 BINARY_SUBSCR						  
							      								    122 LOAD_FAST 4 ( i )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_FAST 4 ( i )					  
							      								    128 STORE_SUBSCR						  
							      								    130 JUMP_ABSOLUTE 24					  
							      								    >> 132 POP_BLOCK						  
							      								    								  
							      								    9 >> 134 LOAD_FAST 3 ( res )				  
							      								    136 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		      AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		    AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		  AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES
--							      --							    --								  --
def polygonArea ( X , Y , n ) :				      Disassembly of <code object polygonArea at 0x7f33e2653f60, fi Disassembly of <code object polygonArea at 0x7f2b0163dc90, fi script_not_found : None
    area = 0.0						      2 0 LOAD_CONST 1 ( 0.0 )					    2 0 LOAD_CONST 1 ( 0.0 )					  
    j = n - 1						      2 STORE_FAST 3 ( area )					    2 STORE_FAST 2 ( area )					  
    for i in range ( 0 , n ) :				      								    								  
	area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) 3 4 LOAD_FAST 2 ( n )					    3 4 LOAD_CONST 2 ( 0.0 )					  
	j = i						      6 LOAD_CONST 2 ( 1 )					    6 STORE_FAST 3 ( area )					  
    return int ( abs ( area / 2.0 ) )			      8 BINARY_SUBTRACT						    								  
							      10 STORE_FAST 4 ( j )					    4 8 LOAD_CONST 3 ( - 1 )					  
							      								    10 STORE_FAST 4 ( area )					  
							      4 12 SETUP_LOOP 58 ( to 72 )				    								  
							      14 LOAD_GLOBAL 0 ( range )				    5 12 SETUP_LOOP 64 ( to 76 )				  
							      16 LOAD_CONST 3 ( 0 )					    14 LOAD_GLOBAL 0 ( range )					  
							      18 LOAD_FAST 2 ( n )					    16 LOAD_CONST 4 ( 0 )					  
							      20 CALL_FUNCTION 2					    18 LOAD_FAST 2 ( area )					  
							      22 GET_ITER						    20 CALL_FUNCTION 2						  
							      >> 24 FOR_ITER 44 ( to 70 )				    22 GET_ITER							  
							      26 STORE_FAST 5 ( i )					    >> 24 FOR_ITER 48 ( to 74 )					  
							      								    26 STORE_FAST 5 ( i )					  
							      5 28 LOAD_FAST 3 ( area )					    								  
							      30 LOAD_FAST 0 ( X )					    6 28 LOAD_FAST 4 ( area )					  
							      32 LOAD_FAST 4 ( j )					    30 LOAD_FAST 5 ( i )					  
							      34 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      36 LOAD_FAST 0 ( X )					    34 LOAD_FAST 1 ( Y )					  
							      38 LOAD_FAST 5 ( i )					    36 LOAD_FAST 2 ( area )					  
							      40 BINARY_SUBSCR						    38 BINARY_SUBTRACT						  
							      42 BINARY_ADD						    40 BINARY_SUBSCR						  
							      44 LOAD_FAST 1 ( Y )					    42 LOAD_FAST 1 ( Y )					  
							      46 LOAD_FAST 4 ( j )					    44 LOAD_FAST 2 ( area )					  
							      48 BINARY_SUBSCR						    46 BINARY_SUBTRACT						  
							      50 LOAD_FAST 1 ( Y )					    48 BINARY_SUBSCR						  
							      52 LOAD_FAST 5 ( i )					    50 LOAD_FAST 1 ( Y )					  
							      54 BINARY_SUBSCR						    52 LOAD_FAST 2 ( area )					  
							      56 BINARY_SUBTRACT					    54 BINARY_SUBTRACT						  
							      58 BINARY_MULTIPLY					    56 BINARY_SUBSCR						  
							      60 INPLACE_ADD						    58 BINARY_SUBTRACT						  
							      62 STORE_FAST 3 ( area )					    60 LOAD_FAST 1 ( Y )					  
							      								    62 LOAD_FAST 2 ( area )					  
							      6 64 LOAD_FAST 5 ( i )					    64 BINARY_SUBTRACT						  
							      66 STORE_FAST 4 ( j )					    66 BINARY_SUBSCR						  
							      68 JUMP_ABSOLUTE 24					    68 BINARY_SUBTRACT						  
							      >> 70 POP_BLOCK						    70 LOAD_FAST 1 ( Y )					  
							      								    72 LOAD_FAST 2 ( area )					  
							      7 >> 72 LOAD_GLOBAL 1 ( int )				    74 BINARY_SUBTRACT						  
							      74 LOAD_GLOBAL 2 ( abs )					    76 BINARY_SUBSCR						  
							      76 LOAD_FAST 3 ( area )					    78 BINARY_SUBTRACT						  
							      78 LOAD_CONST 4 ( 2.0 )					    80 LOAD_FAST 1 ( Y )					  
							      80 BINARY_TRUE_DIVIDE					    82 LOAD_FAST 2 ( area )					  
							      82 CALL_FUNCTION 1					    84 BINARY_SUBTRACT						  
							      84 CALL_FUNCTION 1					    86 BINARY_SUBSCR						  
							      86 RETURN_VALUE NEW_LINE					    88 BINARY_SUBTRACT						  
							      								    90 LOAD_FAST 1 ( Y )					  
							      								    92 LOAD_FAST 2 ( area )					  
							      								    94 BINARY_SUBTRACT						  
							      								    96 BINARY_SUBSCR						  
							      								    98 BINARY_SUBTRACT						  
							      								    100 STORE_FAST 1 ( Y )					  
							      								    								  
							      								    7 102 LOAD_FAST 1 ( Y )					  
							      								    104 LOAD_FAST 2 ( area )					  
							      								    106 BINARY_SUBTRACT						  
							      								    108 LOAD_FAST 1 ( Y )					  
							      								    110 LOAD_FAST 2 ( area )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 BINARY_SUBSCR						  
							      								    116 BINARY_SUBTRACT						  
							      								    118 STORE_FAST 2 ( area )					  
							      								    								  
							      								    8 120 LOAD_FAST 1 ( Y )					  
							      								    122 LOAD_FAST 2 ( area )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 LOAD_FAST 1 ( Y )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 LOAD_FAST 2 ( area )					  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 1 ( Y )					  
							      								    136 LOAD_FAST 2 ( area )					  
							      								    138 BINARY_SUBTRACT						  
							      								    140 STORE_SUBSCR						  
							      								    								  
							      								    9 142 LOAD_FAST 1 ( Y )					  
							      								    144 LOAD_FAST 2 ( area )					  
							      								    146 LOAD_FAST 3 ( area )					  
							      								    148 BINARY_SUBTRACT						  
							      								    150 LOAD_FAST 1 ( Y )					  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 2 ( area )					  
							      								    156 BINARY_SUBTRACT						  
							      								    158 LOAD_FAST 3 ( area )					  
							      								    160 BINARY_SUBTRACT						  
							      								    162 BINARY_MULTIPLY						  
							      								    164 BINARY_SUBTRACT						  
							      								    166 LOAD_FAST 1 ( Y )					  
							      								    168 LOAD_FAST 2 ( area )					  
							      								    170 BINARY_SUBTRACT						  
							      								    172 BINARY_MULTIPLY						  
							      								    174 BINARY_SUBTRACT						  
							      								    176 LOAD_FAST 1 ( Y )					  
							      								    178 LOAD_FAST 2 ( area )					  
							      								    180 BINARY_SUBTRACT						  
							      								    182 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE MINIMUM_ROOMS_FOR_M_EVENTS_OF_<unk> TCHES_WITH_GIVEN_SCHEDULE
--							      --							    --								  --
def findMinRooms ( slots , n , m ) :			      Disassembly of <code object findMinRooms at 0x7f33e2653ed0, f Disassembly of <code object findMinRooms at 0x7f2b0163dc90, f script_not_found : None
    counts = [ 0 ] * m ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'min' , ) )				  
	for j in range ( m ) :				      4 LOAD_FAST 2 ( m )					    4 IMPORT_NAME 0 ( counts )					  
	    if ( slots [ i ] [ j ] == '1' ) :		      6 BINARY_MULTIPLY						    6 IMPORT_FROM 1 ( min )					  
		counts [ j ] += 1 ;			      8 STORE_FAST 3 ( counts )					    8 STORE_FAST 2 ( min )					  
    return max ( counts ) ;				      								    10 POP_TOP							  
							      3 10 SETUP_LOOP 66 ( to 78 )				    								  
							      12 LOAD_GLOBAL 0 ( range )				    3 12 SETUP_LOOP 26 ( to 40 )				  
							      14 LOAD_FAST 1 ( n )					    14 LOAD_GLOBAL 2 ( range )					  
							      16 CALL_FUNCTION 1					    16 LOAD_FAST 0 ( slots )					  
							      18 GET_ITER						    18 CALL_FUNCTION 1						  
							      >> 20 FOR_ITER 54 ( to 76 )				    20 GET_ITER							  
							      22 STORE_FAST 4 ( i )					    >> 22 FOR_ITER 18 ( to 38 )					  
							      								    24 STORE_FAST 3 ( i )					  
							      4 24 SETUP_LOOP 48 ( to 74 )				    								  
							      26 LOAD_GLOBAL 0 ( range )				    4 26 LOAD_FAST 3 ( i )					  
							      28 LOAD_FAST 2 ( m )					    28 LOAD_FAST 1 ( n )					  
							      30 CALL_FUNCTION 1					    30 COMPARE_OP 4 ( > )					  
							      32 GET_ITER						    32 POP_JUMP_IF_FALSE 22					  
							      >> 34 FOR_ITER 36 ( to 72 )				    								  
							      36 STORE_FAST 5 ( j )					    5 34 LOAD_FAST 2 ( min )					  
							      								    36 LOAD_FAST 1 ( n )					  
							      5 38 LOAD_FAST 0 ( slots )				    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 4 ( i )					    40 STORE_FAST 4 ( v )					  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 5 ( j )					    6 42 LOAD_FAST 1 ( n )					  
							      46 BINARY_SUBSCR						    44 LOAD_FAST 1 ( n )					  
							      48 LOAD_CONST 2 ( '1' )					    46 COMPARE_OP 4 ( > )					  
							      50 COMPARE_OP 2 ( == )					    48 POP_JUMP_IF_FALSE 22					  
							      52 POP_JUMP_IF_FALSE 34					    								  
							      								    7 50 LOAD_FAST 2 ( min )					  
							      6 54 LOAD_FAST 3 ( counts )				    52 LOAD_FAST 1 ( n )					  
							      56 LOAD_FAST 5 ( j )					    54 BINARY_SUBSCR						  
							      58 DUP_TOP_TWO						    56 STORE_FAST 2 ( min )					  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_CONST 3 ( 1 )					    8 58 LOAD_FAST 2 ( min )					  
							      64 INPLACE_ADD						    60 LOAD_FAST 1 ( n )					  
							      66 ROT_THREE						    62 BINARY_SUBSCR						  
							      68 STORE_SUBSCR						    64 LOAD_FAST 2 ( min )					  
							      70 JUMP_ABSOLUTE 34					    66 LOAD_FAST 1 ( n )					  
							      >> 72 POP_BLOCK						    68 BINARY_SUBSCR						  
							      >> 74 JUMP_ABSOLUTE 20					    70 LOAD_FAST 2 ( max )					  
							      >> 76 POP_BLOCK						    72 LOAD_FAST 1 ( n )					  
							      								    74 BINARY_SUBSCR						  
							      7 >> 78 LOAD_GLOBAL 1 ( max )				    76 LOAD_FAST 2 ( min )					  
							      80 LOAD_FAST 3 ( counts )					    78 LOAD_FAST 1 ( n )					  
							      82 CALL_FUNCTION 1					    80 BINARY_SUBSCR						  
							      84 RETURN_VALUE NEW_LINE					    82 LOAD_FAST 3 ( i )					  
							      								    84 STORE_SUBSCR						  
							      								    								  
							      								    9 86 LOAD_FAST 2 ( min )					  
							      								    88 LOAD_FAST 1 ( n )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_FAST 2 ( max )					  
							      								    94 LOAD_FAST 1 ( n )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 2 ( max )					  
							      								    100 LOAD_FAST 1 ( n )					  
							      								    102 STORE_SUBSCR						  
							      								    104 JUMP_ABSOLUTE 22					  
							      								    >> 106 POP_BLOCK						  
							      								    								  
							      								    10 >> 108 LOAD_FAST 2 ( min )				  
							      								    110 LOAD_FAST 1 ( n )					  
							      								    112 LOAD_FAST 1 ( n )					  
							      								    114 STORE_SUBSCR						  
							      								    								  
							      								    11 116 LOAD_FAST 2 ( min )					  
							      								    118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_FAST 1 ( n )					  
							      								    122 STORE_SUBSCR						  
							      								    								  
							      								    12 124 LOAD_FAST 2 ( min )					  
							      								    126 LOAD_FAST 1 ( n )					  
							      								    128 LOAD_FAST 1 ( n )					  
							      								    130 STORE_SUBSCR						  
							      								    132 JUMP_ABSOLUTE 22					  
							      								    >> 134 POP_BLOCK						  
							      								    								  
							      								    13 >> 136 LOAD_FAST 2 ( min )				  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 LOAD_FAST 1 ( n )					  
							      								    142 STORE_SUBSCR						  
							      								    144 JUMP_ABSOLUTE 22					  
							      								    >> 146 POP_BLOCK						  
							      								    								  
							      								    13 >> 148 LOAD_FAST 2 ( min )				  
							      								    150 LOAD_FAST 1 ( n )					  
							      								    152 LOAD_FAST 1 ( n )					  
							      								    154 STORE_SUBSCR						  
							      								    156 LOAD_CONST 0 ( None )					  
							      								    158 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
def canMakeAllSame ( str ) :				      Disassembly of <code object canMakeAllSame at 0x7f33e2649a50, Disassembly of <code object canMakeAllSame at 0x7f2b01639660, error : Traceback (most recent call last):   File
    zeros = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    ones = 0						      2 STORE_FAST 1 ( zeros )					    2 STORE_FAST 1 ( zeros )					  (item)   File "main.py", line 36, in <module>	  Fi
    for i in range ( 0 , len ( str ) ) :		      								    								  le "<dis>", line 2, in canMakeAllSame TypeError: s
	ch = str [ i ] ;				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  tring indices must be integers
	if ( ch == '0' ) :				      6 STORE_FAST 2 ( ones )					    6 STORE_FAST 2 ( zeros )					  
	    zeros = zeros + 1				      								    								  
	else :						      4 8 SETUP_LOOP 56 ( to 66 )				    4 8 SETUP_LOOP 76 ( to 84 )					  
	    ones = ones + 1				      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
    return ( zeros == 1 or ones == 1 ) ;		      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
							      14 LOAD_GLOBAL 1 ( len )					    14 LOAD_GLOBAL 1 ( len )					  
							      16 LOAD_FAST 0 ( str )					    16 LOAD_FAST 0 ( str )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 CALL_FUNCTION 2					    20 CALL_FUNCTION 2						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 38 ( to 64 )				    >> 24 FOR_ITER 76 ( to 82 )					  
							      26 STORE_FAST 3 ( i )					    26 STORE_FAST 3 ( i )					  
							      								    								  
							      5 28 LOAD_FAST 0 ( str )					    5 28 LOAD_FAST 0 ( str )					  
							      30 LOAD_FAST 3 ( i )					    30 LOAD_FAST 3 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 STORE_FAST 4 ( ch )					    34 LOAD_METHOD 2 ( split )					  
							      								    36 LOAD_CONST 2 ( ',' )					  
							      6 36 LOAD_FAST 4 ( ch )					    38 CALL_METHOD 1						  
							      38 LOAD_CONST 2 ( '0' )					    40 STORE_FAST 4 ( n )					  
							      40 COMPARE_OP 2 ( == )					    								  
							      42 POP_JUMP_IF_FALSE 54					    6 42 LOAD_FAST 0 ( str )					  
							      								    44 LOAD_FAST 4 ( n )					  
							      7 44 LOAD_FAST 1 ( zeros )				    46 BINARY_SUBSCR						  
							      46 LOAD_CONST 3 ( 1 )					    48 LOAD_METHOD 2 ( split )					  
							      48 BINARY_ADD						    50 LOAD_CONST 3 ( ',' )					  
							      50 STORE_FAST 1 ( zeros )					    52 CALL_METHOD 1						  
							      52 JUMP_ABSOLUTE 24					    54 STORE_FAST 5 ( s )					  
							      								    								  
							      9 >> 54 LOAD_FAST 2 ( ones )				    7 56 LOAD_FAST 1 ( zeros )					  
							      56 LOAD_CONST 3 ( 1 )					    58 LOAD_FAST 2 ( zeros )					  
							      58 BINARY_ADD						    60 LOAD_FAST 3 ( i )					  
							      60 STORE_FAST 2 ( ones )					    62 BINARY_SUBSCR						  
							      62 JUMP_ABSOLUTE 24					    64 LOAD_METHOD 2 ( split )					  
							      >> 64 POP_BLOCK						    66 LOAD_CONST 4 ( ',' )					  
							      								    68 CALL_METHOD 1						  
							      10 >> 66 LOAD_FAST 1 ( zeros )				    70 LOAD_CONST 5 ( 1 )					  
							      68 LOAD_CONST 3 ( 1 )					    72 BINARY_SUBSCR						  
							      70 COMPARE_OP 2 ( == )					    74 LOAD_FAST 1 ( zeros )					  
							      72 JUMP_IF_TRUE_OR_POP 80					    76 LOAD_FAST 2 ( zeros )					  
							      74 LOAD_FAST 2 ( ones )					    78 LOAD_FAST 3 ( i )					  
							      76 LOAD_CONST 3 ( 1 )					    80 BINARY_SUBSCR						  
							      78 COMPARE_OP 2 ( == )					    82 LOAD_METHOD 2 ( split )					  
							      >> 80 RETURN_VALUE NEW_LINE				    84 LOAD_CONST 6 ( ',' )					  
							      								    86 CALL_METHOD 1						  
							      								    88 BINARY_ADD						  
							      								    90 STORE_FAST 1 ( zeros )					  
							      								    								  
							      								    8 92 LOAD_FAST 1 ( zeros )					  
							      								    94 LOAD_FAST 4 ( n )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 1 ( zeros )					  
							      								    100 LOAD_FAST 3 ( i )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_METHOD 2 ( split )					  
							      								    106 LOAD_CONST 7 ( ',' )					  
							      								    108 CALL_METHOD 1						  
							      								    110 BINARY_ADD						  
							      								    112 STORE_FAST 1 ( zeros )					  
							      								    								  
							      								    9 114 LOAD_FAST 1 ( zeros )					  
							      								    116 LOAD_FAST 2 ( zeros )					  
							      								    118 LOAD_FAST 3 ( i )					  
							      								    120 STORE_SUBSCR						  
							      								    								  
							      								    10 122 LOAD_FAST 1 ( zeros )				  
							      								    124 LOAD_FAST 2 ( zeros )					  
							      								    126 LOAD_FAST 3 ( i )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_FAST 1 ( zeros )					  
							      								    132 BUILD_TUPLE 2						  
							      								    134 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			      SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			    SORTING_ARRAY_REVERSE_AROUND_<unk> DLE			  SORTING_ARRAY_REVERSE_AROUND_<unk> DLE
--							      --							    --								  --
def ifPossible ( arr , n ) :				      Disassembly of <code object ifPossible at 0x7f33e2653f60, fil Disassembly of <code object ifPossible at 0x7f2b01639660, fil script_not_found : None
    cp = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    cp = arr						      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'n' , ) )				  
    cp.sort ( )						      4 LOAD_FAST 1 ( n )					    4 IMPORT_NAME 0 ( cp )					  
    for i in range ( 0 , n ) :				      6 BINARY_MULTIPLY						    6 IMPORT_FROM 1 ( n )					  
	if ( not ( arr [ i ] == cp [ i ] ) and not ( arr [ n  8 STORE_FAST 2 ( cp )					    8 STORE_FAST 2 ( n )					  
	    return False				      								    10 POP_TOP							  
    return True						      3 10 LOAD_FAST 0 ( arr )					    								  
							      12 STORE_FAST 2 ( cp )					    3 12 LOAD_FAST 2 ( n )					  
							      								    14 LOAD_METHOD 2 ( sort )					  
							      4 14 LOAD_FAST 2 ( cp )					    16 CALL_METHOD 0						  
							      16 LOAD_METHOD 0 ( sort )					    18 POP_TOP							  
							      18 CALL_METHOD 0						    								  
							      20 POP_TOP						    4 20 SETUP_LOOP 26 ( to 44 )				  
							      								    22 LOAD_GLOBAL 3 ( range )					  
							      5 22 SETUP_LOOP 62 ( to 86 )				    24 LOAD_CONST 3 ( 0 )					  
							      24 LOAD_GLOBAL 1 ( range )				    26 LOAD_CONST 2 ( ( 'n' , ) )				  
							      26 LOAD_CONST 1 ( 0 )					    28 CALL_FUNCTION_KW 1					  
							      28 LOAD_FAST 1 ( n )					    30 GET_ITER							  
							      30 CALL_FUNCTION 2					    >> 32 FOR_ITER 14 ( to 42 )					  
							      32 GET_ITER						    34 STORE_FAST 3 ( i )					  
							      >> 34 FOR_ITER 48 ( to 84 )				    								  
							      36 STORE_FAST 3 ( i )					    5 36 LOAD_FAST 3 ( i )					  
							      								    38 LOAD_FAST 0 ( arr )					  
							      6 38 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 3 ( i )					  
							      40 LOAD_FAST 3 ( i )					    42 BINARY_SUBSCR						  
							      42 BINARY_SUBSCR						    44 LOAD_FAST 1 ( n )					  
							      44 LOAD_FAST 2 ( cp )					    46 BINARY_SUBSCR						  
							      46 LOAD_FAST 3 ( i )					    48 LOAD_FAST 1 ( n )					  
							      48 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      50 COMPARE_OP 2 ( == )					    52 LOAD_FAST 1 ( n )					  
							      52 POP_JUMP_IF_TRUE 34					    54 BINARY_SUBSCR						  
							      54 LOAD_FAST 0 ( arr )					    56 LOAD_FAST 1 ( n )					  
							      56 LOAD_FAST 1 ( n )					    58 BINARY_SUBSCR						  
							      58 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 1 ( n )					  
							      60 BINARY_SUBTRACT					    62 BINARY_SUBSCR						  
							      62 LOAD_FAST 3 ( i )					    64 LOAD_FAST 1 ( n )					  
							      64 BINARY_SUBTRACT					    66 BINARY_SUBSCR						  
							      66 BINARY_SUBSCR						    68 LOAD_FAST 1 ( n )					  
							      68 LOAD_FAST 2 ( cp )					    70 BINARY_SUBSCR						  
							      70 LOAD_FAST 3 ( i )					    72 LOAD_FAST 2 ( n )					  
							      72 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      74 COMPARE_OP 2 ( == )					    76 LOAD_FAST 1 ( n )					  
							      76 POP_JUMP_IF_TRUE 34					    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 1 ( n )					  
							      7 78 LOAD_CONST 3 ( False )				    82 BINARY_SUBSCR						  
							      80 RETURN_VALUE						    84 LOAD_FAST 2 ( n )					  
							      82 JUMP_ABSOLUTE 34					    86 BINARY_SUBSCR						  
							      >> 84 POP_BLOCK						    88 LOAD_FAST 1 ( n )					  
							      								    90 BINARY_SUBSCR						  
							      8 >> 86 LOAD_CONST 4 ( True )				    92 LOAD_FAST 1 ( n )					  
							      88 RETURN_VALUE NEW_LINE					    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( n )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 1 ( n )					  
							      								    102 STORE_SUBSCR						  
							      								    								  
							      								    6 104 LOAD_FAST 2 ( n )					  
							      								    106 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
def binaryToDecimal ( n ) :				      Disassembly of <code object binaryToDecimal at 0x7f33e2653ed0 Disassembly of <code object binaryToDecimal at 0x7f2b0163dc90 error : Traceback (most recent call last):   File
    num = n ;						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
    dec_value = 0 ;					      2 STORE_FAST 1 ( num )					    2 STORE_FAST 1 ( num )					  (item)   File "main.py", line 36, in <module>	  Fi
    base1 = 1 ;						      								    								  le "<dis>", line 2, in binaryToDecimal TypeError:
    len1 = len ( num ) ;				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  'str' object cannot be interpreted as an integer
    for i in range ( len1 - 1 , - 1 , - 1 ) :		      6 STORE_FAST 2 ( dec_value )				    6 STORE_FAST 2 ( num )					  
	if ( num [ i ] == '1' ) :			      								    								  
	    dec_value += base1 ;			      4 8 LOAD_CONST 2 ( 1 )					    4 8 LOAD_CONST 1 ( 0 )					  
	base1 = base1 * 2 ;				      10 STORE_FAST 3 ( base1 )					    10 STORE_FAST 3 ( grams )					  
    return dec_value ;					      								    								  
							      5 12 LOAD_GLOBAL 0 ( len )				    5 12 SETUP_LOOP 64 ( to 76 )				  
							      14 LOAD_FAST 1 ( num )					    14 LOAD_GLOBAL 0 ( range )					  
							      16 CALL_FUNCTION 1					    16 LOAD_FAST 1 ( num )					  
							      18 STORE_FAST 4 ( len1 )					    18 CALL_FUNCTION 1						  
							      								    20 GET_ITER							  
							      6 20 SETUP_LOOP 52 ( to 74 )				    >> 22 FOR_ITER 64 ( to 74 )					  
							      22 LOAD_GLOBAL 1 ( range )				    24 STORE_FAST 4 ( i )					  
							      24 LOAD_FAST 4 ( len1 )					    								  
							      26 LOAD_CONST 2 ( 1 )					    6 26 LOAD_FAST 2 ( num )					  
							      28 BINARY_SUBTRACT					    28 LOAD_FAST 4 ( i )					  
							      30 LOAD_CONST 3 ( - 1 )					    30 BINARY_SUBSCR						  
							      32 LOAD_CONST 3 ( - 1 )					    32 LOAD_CONST 2 ( '' )					  
							      34 CALL_FUNCTION 3					    34 COMPARE_OP 2 ( == )					  
							      36 GET_ITER						    36 POP_JUMP_IF_FALSE 42					  
							      >> 38 FOR_ITER 32 ( to 72 )				    								  
							      40 STORE_FAST 5 ( i )					    7 38 LOAD_FAST 2 ( num )					  
							      								    40 LOAD_FAST 4 ( i )					  
							      7 42 LOAD_FAST 1 ( num )					    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 5 ( i )					    44 LOAD_CONST 2 ( '' )					  
							      46 BINARY_SUBSCR						    46 COMPARE_OP 2 ( == )					  
							      48 LOAD_CONST 4 ( '1' )					    48 POP_JUMP_IF_FALSE 22					  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 POP_JUMP_IF_FALSE 62					    8 50 LOAD_FAST 2 ( num )					  
							      								    52 LOAD_FAST 4 ( i )					  
							      8 54 LOAD_FAST 2 ( dec_value )				    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 3 ( base1 )					    56 LOAD_CONST 2 ( '' )					  
							      58 INPLACE_ADD						    58 COMPARE_OP 2 ( == )					  
							      60 STORE_FAST 2 ( dec_value )				    60 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      9 >> 62 LOAD_FAST 3 ( base1 )				    9 62 LOAD_FAST 2 ( num )					  
							      64 LOAD_CONST 5 ( 2 )					    64 LOAD_FAST 4 ( i )					  
							      66 BINARY_MULTIPLY					    66 BINARY_SUBSCR						  
							      68 STORE_FAST 3 ( base1 )					    68 LOAD_CONST 2 ( '' )					  
							      70 JUMP_ABSOLUTE 38					    70 COMPARE_OP 2 ( == )					  
							      >> 72 POP_BLOCK						    72 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      10 >> 74 LOAD_FAST 2 ( dec_value )			    10 74 LOAD_FAST 2 ( num )					  
							      76 RETURN_VALUE NEW_LINE					    76 LOAD_FAST 4 ( i )					  
							      								    78 BINARY_SUBSCR						  
							      								    80 LOAD_CONST 2 ( '' )					  
							      								    82 COMPARE_OP 2 ( == )					  
							      								    84 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    11 86 LOAD_FAST 2 ( num )					  
							      								    88 LOAD_FAST 4 ( i )					  
							      								    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 2 ( '' )					  
							      								    94 COMPARE_OP 2 ( == )					  
							      								    96 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    12 98 LOAD_FAST 2 ( num )					  
							      								    100 LOAD_FAST 4 ( i )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 2 ( '' )					  
							      								    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    13 110 LOAD_FAST 2 ( num )					  
							      								    112 LOAD_FAST 4 ( i )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 2 ( '' )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    14 122 LOAD_FAST 2 ( num )					  
							      								    124 LOAD_FAST 4 ( i )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 2 ( '' )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    15 134 LOAD_FAST 2 ( num )					  
							      								    136 LOAD_FAST 4 ( i )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 RETURN_VALUE						  
							      								    								  
							      								    16 >> 142 LOAD_FAST 2 ( num )				  
							      								    144 LOAD_FAST 3 ( grams )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
def sortString ( str , n ) :				      Disassembly of <code object sortString at 0x7f33e2644f60, fil Disassembly of <code object sortString at 0x7f2b01639660, fil script_not_found : None
    new_str = ""					      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	      2 STORE_FAST 2 ( new_str )				    2 STORE_FAST 1 ( new_str )					  
	for j in range ( n ) :				      								    								  
	    if ( str [ j ] == chr ( i ) ) :		      3 4 SETUP_LOOP 76 ( to 82 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
		new_str += str [ j ]			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    return new_str					      8 LOAD_GLOBAL 1 ( ord )					    8 LOAD_CONST 2 ( 'a' )					  
							      10 LOAD_CONST 2 ( 'a' )					    10 LOAD_CONST 3 ( 1 )					  
							      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 2						  
							      14 LOAD_GLOBAL 1 ( ord )					    14 GET_ITER							  
							      16 LOAD_CONST 3 ( 'z' )					    >> 16 FOR_ITER 48 ( to 64 )					  
							      18 CALL_FUNCTION 1					    18 STORE_FAST 2 ( i )					  
							      20 LOAD_CONST 4 ( 1 )					    								  
							      22 BINARY_ADD						    4 20 LOAD_GLOBAL 1 ( print )				  
							      24 CALL_FUNCTION 2					    22 LOAD_FAST 0 ( str )					  
							      26 GET_ITER						    24 LOAD_FAST 2 ( i )					  
							      >> 28 FOR_ITER 50 ( to 80 )				    26 CALL_FUNCTION 1						  
							      30 STORE_FAST 3 ( i )					    28 POP_TOP							  
							      								    								  
							      4 32 SETUP_LOOP 44 ( to 78 )				    5 30 SETUP_LOOP 48 ( to 62 )				  
							      34 LOAD_GLOBAL 0 ( range )				    32 LOAD_GLOBAL 2 ( range )					  
							      36 LOAD_FAST 1 ( n )					    34 LOAD_CONST 2 ( 'a' )					  
							      38 CALL_FUNCTION 1					    36 CALL_FUNCTION 1						  
							      40 GET_ITER						    38 GET_ITER							  
							      >> 42 FOR_ITER 32 ( to 76 )				    >> 40 FOR_ITER 40 ( to 60 )					  
							      44 STORE_FAST 4 ( j )					    42 STORE_FAST 3 ( i )					  
							      								    								  
							      5 46 LOAD_FAST 0 ( str )					    6 44 LOAD_GLOBAL 1 ( print )				  
							      48 LOAD_FAST 4 ( j )					    46 LOAD_FAST 0 ( str )					  
							      50 BINARY_SUBSCR						    48 LOAD_FAST 3 ( i )					  
							      52 LOAD_GLOBAL 2 ( chr )					    50 CALL_FUNCTION 1						  
							      54 LOAD_FAST 3 ( i )					    52 POP_TOP							  
							      56 CALL_FUNCTION 1					    54 JUMP_ABSOLUTE 40						  
							      58 COMPARE_OP 2 ( == )					    >> 56 POP_BLOCK						  
							      60 POP_JUMP_IF_FALSE 42					    >> 58 JUMP_ABSOLUTE 16					  
							      								    >> 60 POP_BLOCK						  
							      6 62 LOAD_FAST 2 ( new_str )				    								  
							      64 LOAD_FAST 0 ( str )					    7 >> 62 LOAD_FAST 1 ( new_str )				  
							      66 LOAD_FAST 4 ( j )					    64 RETURN_VALUE NEW_LINE					  
							      68 BINARY_SUBSCR						    								  
							      70 INPLACE_ADD						    								  
							      72 STORE_FAST 2 ( new_str )				    								  
							      74 JUMP_ABSOLUTE 42					    								  
							      >> 76 POP_BLOCK						    								  
							      >> 78 JUMP_ABSOLUTE 28					    								  
							      >> 80 POP_BLOCK						    								  
							      								    								  
							      7 >> 82 LOAD_FAST 2 ( new_str )				    								  
							      84 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
def countFact ( low , high ) :				      Disassembly of <code object countFact at 0x7f33e2649a50, file Disassembly of <code object countFact at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    fact = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    x = 1						      2 STORE_FAST 2 ( fact )					    2 STORE_FAST 2 ( fact )					  (item)   File "main.py", line 38, in <module>	  Fi
    while ( fact < low ) :				      								    								  le "<dis>", line 2, in countFact TypeError: 'int'
	fact = fact * x					      3 4 LOAD_CONST 1 ( 1 )					    3 4 LOAD_CONST 1 ( 1 )					  object is not iterable
	x += 1						      6 STORE_FAST 3 ( x )					    6 STORE_FAST 3 ( x )					  
    res = 0						      								    								  
    while ( fact <= high ) :				      4 8 SETUP_LOOP 28 ( to 38 )				    4 8 SETUP_LOOP 64 ( to 76 )					  
	res += 1					      >> 10 LOAD_FAST 2 ( fact )				    10 LOAD_FAST 0 ( low )					  
	fact = fact * x					      12 LOAD_FAST 0 ( low )					    12 GET_ITER							  
	x += 1						      14 COMPARE_OP 0 ( < )					    >> 14 FOR_ITER 64 ( to 74 )					  
    return res						      16 POP_JUMP_IF_FALSE 36					    16 STORE_FAST 4 ( n )					  
							      								    								  
							      5 18 LOAD_FAST 2 ( fact )					    5 18 LOAD_FAST 2 ( fact )					  
							      20 LOAD_FAST 3 ( x )					    20 LOAD_FAST 3 ( x )					  
							      22 BINARY_MULTIPLY					    22 BINARY_SUBSCR						  
							      24 STORE_FAST 2 ( fact )					    24 LOAD_FAST 1 ( high )					  
							      								    26 COMPARE_OP 0 ( < )					  
							      6 26 LOAD_FAST 3 ( x )					    28 POP_JUMP_IF_FALSE 14					  
							      28 LOAD_CONST 1 ( 1 )					    								  
							      30 INPLACE_ADD						    6 30 LOAD_FAST 2 ( fact )					  
							      32 STORE_FAST 3 ( x )					    32 LOAD_FAST 3 ( x )					  
							      34 JUMP_ABSOLUTE 10					    34 BINARY_SUBSCR						  
							      >> 36 POP_BLOCK						    36 STORE_FAST 5 ( fact )					  
							      								    								  
							      7 >> 38 LOAD_CONST 2 ( 0 )				    7 38 LOAD_FAST 2 ( fact )					  
							      40 STORE_FAST 4 ( res )					    40 LOAD_FAST 4 ( n )					  
							      								    42 BINARY_SUBSCR						  
							      8 42 SETUP_LOOP 36 ( to 80 )				    44 INPLACE_ADD						  
							      >> 44 LOAD_FAST 2 ( fact )				    46 STORE_FAST 2 ( fact )					  
							      46 LOAD_FAST 1 ( high )					    								  
							      48 COMPARE_OP 1 ( <= )					    8 48 LOAD_FAST 2 ( fact )					  
							      50 POP_JUMP_IF_FALSE 78					    50 LOAD_FAST 4 ( n )					  
							      								    52 BINARY_SUBSCR						  
							      9 52 LOAD_FAST 4 ( res )					    54 LOAD_FAST 1 ( high )					  
							      54 LOAD_CONST 1 ( 1 )					    56 COMPARE_OP 0 ( < )					  
							      56 INPLACE_ADD						    58 POP_JUMP_IF_FALSE 14					  
							      58 STORE_FAST 4 ( res )					    								  
							      								    9 60 LOAD_FAST 2 ( fact )					  
							      10 60 LOAD_FAST 2 ( fact )				    62 LOAD_FAST 4 ( n )					  
							      62 LOAD_FAST 3 ( x )					    64 BINARY_SUBSCR						  
							      64 BINARY_MULTIPLY					    66 INPLACE_ADD						  
							      66 STORE_FAST 2 ( fact )					    68 STORE_FAST 2 ( fact )					  
							      								    								  
							      11 68 LOAD_FAST 3 ( x )					    10 70 LOAD_FAST 2 ( fact )					  
							      70 LOAD_CONST 1 ( 1 )					    72 LOAD_FAST 4 ( n )					  
							      72 INPLACE_ADD						    74 BINARY_SUBSCR						  
							      74 STORE_FAST 3 ( x )					    76 INPLACE_ADD						  
							      76 JUMP_ABSOLUTE 44					    78 STORE_FAST 2 ( fact )					  
							      >> 78 POP_BLOCK						    80 JUMP_ABSOLUTE 14						  
							      								    >> 82 POP_BLOCK						  
							      12 >> 80 LOAD_FAST 4 ( res )				    								  
							      82 RETURN_VALUE NEW_LINE					    11 >> 84 LOAD_FAST 2 ( fact )				  
							      								    86 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTR<unk> CTION
--							      --							    --								  --
def findMinX ( num , rem , k ) :			      Disassembly of <code object findMinX at 0x7f33e2653f60, file  Disassembly of <code object findMinX at 0x7f2b0163dc90, file  script_not_found : None
    x = 1 ;						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    while ( True ) :					      2 STORE_FAST 3 ( x )					    2 STORE_FAST 2 ( x )					  
	j = 0 ;						      								    								  
	while ( j < k ) :				      3 4 SETUP_LOOP 72 ( to 78 )				    3 4 LOAD_CONST 1 ( 1 )					  
	    if ( x % num [ j ] != rem [ j ] ) :		      								    6 STORE_FAST 3 ( x )					  
		break ;					      4 >> 6 LOAD_CONST 2 ( 0 )					    								  
	    j += 1 ;					      8 STORE_FAST 4 ( j )					    4 8 SETUP_LOOP 64 ( to 76 )					  
	if ( j == k ) :					      								    10 LOAD_FAST 0 ( num )					  
	    return x ;					      5 10 SETUP_LOOP 42 ( to 54 )				    12 GET_ITER							  
	x += 1 ;					      >> 12 LOAD_FAST 4 ( j )					    >> 14 FOR_ITER 64 ( to 74 )					  
							      14 LOAD_FAST 2 ( k )					    16 STORE_FAST 4 ( i )					  
							      16 COMPARE_OP 0 ( < )					    								  
							      18 POP_JUMP_IF_FALSE 52					    5 18 LOAD_FAST 4 ( i )					  
							      								    20 LOAD_FAST 1 ( rem )					  
							      6 20 LOAD_FAST 3 ( x )					    22 COMPARE_OP 3 ( != )					  
							      22 LOAD_FAST 0 ( num )					    24 POP_JUMP_IF_FALSE 38					  
							      24 LOAD_FAST 4 ( j )					    								  
							      26 BINARY_SUBSCR						    6 26 LOAD_FAST 2 ( x )					  
							      28 BINARY_MODULO						    28 LOAD_FAST 4 ( i )					  
							      30 LOAD_FAST 1 ( rem )					    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 4 ( j )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBSCR						    34 COMPARE_OP 3 ( != )					  
							      36 COMPARE_OP 3 ( != )					    36 POP_JUMP_IF_FALSE 14					  
							      38 POP_JUMP_IF_FALSE 42					    								  
							      								    7 38 LOAD_FAST 2 ( x )					  
							      7 40 BREAK_LOOP						    40 LOAD_FAST 4 ( i )					  
							      								    42 BINARY_SUBSCR						  
							      8 >> 42 LOAD_FAST 4 ( j )					    44 STORE_FAST 5 ( j )					  
							      44 LOAD_CONST 1 ( 1 )					    								  
							      46 INPLACE_ADD						    8 46 LOAD_FAST 1 ( rem )					  
							      48 STORE_FAST 4 ( j )					    48 LOAD_FAST 5 ( j )					  
							      50 JUMP_ABSOLUTE 12					    50 BINARY_SUBSCR						  
							      >> 52 POP_BLOCK						    52 LOAD_FAST 4 ( i )					  
							      								    54 COMPARE_OP 3 ( != )					  
							      9 >> 54 LOAD_FAST 4 ( j )					    56 POP_JUMP_IF_FALSE 14					  
							      56 LOAD_FAST 2 ( k )					    								  
							      58 COMPARE_OP 2 ( == )					    9 58 LOAD_FAST 2 ( x )					  
							      60 POP_JUMP_IF_FALSE 66					    60 LOAD_FAST 4 ( i )					  
							      								    62 BINARY_SUBSCR						  
							      10 62 LOAD_FAST 3 ( x )					    64 LOAD_FAST 4 ( i )					  
							      64 RETURN_VALUE						    66 BINARY_SUBSCR						  
							      								    68 LOAD_FAST 4 ( i )					  
							      11 >> 66 LOAD_FAST 3 ( x )				    70 BINARY_SUBSCR						  
							      68 LOAD_CONST 1 ( 1 )					    72 LOAD_FAST 4 ( i )					  
							      70 INPLACE_ADD						    74 BINARY_SUBSCR						  
							      72 STORE_FAST 3 ( x )					    76 LOAD_FAST 4 ( i )					  
							      74 JUMP_ABSOLUTE 6					    78 BINARY_SUBSCR						  
							      76 POP_BLOCK						    80 LOAD_FAST 4 ( i )					  
							      >> 78 LOAD_CONST 0 ( None )				    82 BINARY_SUBSCR						  
							      80 RETURN_VALUE NEW_LINE					    84 LOAD_FAST 4 ( i )					  
							      								    86 STORE_SUBSCR						  
							      								    								  
							      								    10 88 LOAD_FAST 2 ( x )					  
							      								    90 LOAD_FAST 4 ( i )					  
							      								    92 BINARY_SUBSCR						  
							      								    94 LOAD_FAST 4 ( i )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 4 ( i )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    11 102 LOAD_FAST 2 ( x )					  
							      								    104 LOAD_FAST 4 ( i )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 4 ( i )					  
							      								    110 STORE_SUBSCR						  
							      								    								  
							      								    12 112 LOAD_FAST 2 ( x )					  
							      								    114 LOAD_FAST 4 ( i )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_FAST 4 ( i )					  
							      								    120 STORE_SUBSCR						  
							      								    								  
							      								    13 122 LOAD_FAST 2 ( x )					  
							      								    124 LOAD_FAST 4 ( i )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 4 ( i )					  
							      								    130 STORE_SUBSCR						  
							      								    								  
							      								    14 130 LOAD_FAST 2 ( x )					  
							      								    132 LOAD_FAST 4 ( i )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_FAST 4 ( i )					  
							      								    138 STORE_SUBSCR						  
							      								    								  
							      								    15 140 LOAD_FAST 2 ( x )					  
							      								    142 LOAD_FAST 4 ( i )					  
							      								    144 STORE_SUBSCR						  
							      								    								  
							      								    16 146 LOAD_FAST 2 ( x )					  
							      								    148 LOAD_FAST 4 ( i )					  
							      								    150 STORE_SUBSCR						  
							      								    								  
							      								    17 152 LOAD_FAST 2 ( x )					  
							      								    154 LOAD_FAST 4 ( i )					  
							      								    156 STORE_SUBSCR						  
							      								    >> 158 POP_BLOCK						  
							      								    								  
							      								    18 >> 160 LOAD_FAST 2 ( x )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2
--							      --							    --								  --
def minSum ( a , n ) :					      Disassembly of <code object minSum at 0x7f33e2644f60, file "< Disassembly of <code object minSum at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    a = sorted ( a )					      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  "XLM/dis_script.py", line 60, in <module>	exec
    num1 , num2 = 0 , 0					      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  (item)   File "main.py", line 35, in <module>	  Fi
    for i in range ( n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in minSum TypeError: 'list' ob
	if i % 2 == 0 :					      6 STORE_FAST 0 ( a )					    6 STORE_FAST 2 ( a )					  ject cannot be interpreted as an integer
	    num1 = num1 * 10 + a [ i ]			      								    								  
	else :						      3 8 LOAD_CONST 1 ( ( 0 , 0 ) )				    3 8 LOAD_CONST 1 ( 0 )					  
	    num2 = num2 * 10 + a [ i ]			      10 UNPACK_SEQUENCE 2					    10 STORE_FAST 3 ( num1 )					  
    return num2 + num1					      12 STORE_FAST 2 ( num1 )					    								  
							      14 STORE_FAST 3 ( num2 )					    4 12 SETUP_LOOP 64 ( to 76 )				  
							      								    14 LOAD_GLOBAL 1 ( range )					  
							      4 16 SETUP_LOOP 62 ( to 80 )				    16 LOAD_FAST 2 ( a )					  
							      18 LOAD_GLOBAL 1 ( range )				    18 CALL_FUNCTION 1						  
							      20 LOAD_FAST 1 ( n )					    20 GET_ITER							  
							      22 CALL_FUNCTION 1					    >> 22 FOR_ITER 48 ( to 74 )					  
							      24 GET_ITER						    24 STORE_FAST 4 ( i )					  
							      >> 26 FOR_ITER 50 ( to 78 )				    								  
							      28 STORE_FAST 4 ( i )					    5 26 LOAD_FAST 4 ( i )					  
							      								    28 LOAD_CONST 2 ( 1 )					  
							      5 30 LOAD_FAST 4 ( i )					    30 COMPARE_OP 2 ( == )					  
							      32 LOAD_CONST 2 ( 2 )					    32 POP_JUMP_IF_FALSE 42					  
							      34 BINARY_MODULO						    								  
							      36 LOAD_CONST 3 ( 0 )					    6 34 LOAD_FAST 4 ( i )					  
							      38 COMPARE_OP 2 ( == )					    36 LOAD_CONST 2 ( 1 )					  
							      40 POP_JUMP_IF_FALSE 60					    38 INPLACE_ADD						  
							      								    40 STORE_FAST 4 ( i )					  
							      6 42 LOAD_FAST 2 ( num1 )					    								  
							      44 LOAD_CONST 4 ( 10 )					    7 >> 42 LOAD_FAST 1 ( n )					  
							      46 BINARY_MULTIPLY					    44 LOAD_CONST 2 ( 1 )					  
							      48 LOAD_FAST 0 ( a )					    46 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 4 ( i )					    48 POP_JUMP_IF_FALSE 22					  
							      52 BINARY_SUBSCR						    								  
							      54 BINARY_ADD						    8 50 LOAD_FAST 1 ( n )					  
							      56 STORE_FAST 2 ( num1 )					    52 LOAD_CONST 2 ( 1 )					  
							      58 JUMP_ABSOLUTE 26					    54 INPLACE_SUBTRACT						  
							      								    56 STORE_FAST 1 ( n )					  
							      8 >> 60 LOAD_FAST 3 ( num2 )				    58 JUMP_ABSOLUTE 22						  
							      62 LOAD_CONST 4 ( 10 )					    >> 60 POP_BLOCK						  
							      64 BINARY_MULTIPLY					    								  
							      66 LOAD_FAST 0 ( a )					    9 >> 62 LOAD_FAST 2 ( a )					  
							      68 LOAD_FAST 4 ( i )					    64 LOAD_CONST 2 ( 1 )					  
							      70 BINARY_SUBSCR						    66 INPLACE_SUBTRACT						  
							      72 BINARY_ADD						    68 STORE_FAST 2 ( a )					  
							      74 STORE_FAST 3 ( num2 )					    								  
							      76 JUMP_ABSOLUTE 26					    10 70 LOAD_FAST 2 ( a )					  
							      >> 78 POP_BLOCK						    72 LOAD_CONST 2 ( 1 )					  
							      								    74 INPLACE_SUBTRACT						  
							      9 >> 80 LOAD_FAST 3 ( num2 )				    76 STORE_FAST 2 ( a )					  
							      82 LOAD_FAST 2 ( num1 )					    								  
							      84 BINARY_ADD						    11 78 LOAD_FAST 2 ( a )					  
							      86 RETURN_VALUE NEW_LINE					    80 LOAD_CONST 2 ( 1 )					  
							      								    82 INPLACE_SUBTRACT						  
							      								    84 STORE_FAST 2 ( a )					  
							      								    								  
							      								    12 86 LOAD_FAST 2 ( a )					  
							      								    88 LOAD_CONST 2 ( 1 )					  
							      								    90 INPLACE_SUBTRACT						  
							      								    92 STORE_FAST 2 ( a )					  
							      								    94 JUMP_ABSOLUTE 22						  
							      								    >> 96 POP_BLOCK						  
							      								    								  
							      								    13 >> 98 LOAD_FAST 2 ( a )					  
							      								    100 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1			  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
def binarySearch ( arr , low , high ) :			      Disassembly of <code object binarySearch at 0x7f33e2649a50, f Disassembly of <code object binarySearch at 0x7f2b0163dc90, f script_not_found : None
    if high >= low :					      2 0 LOAD_FAST 2 ( high )					    2 0 LOAD_FAST 1 ( low )					  
	mid = ( low + high ) // 2			      2 LOAD_FAST 1 ( low )					    2 LOAD_FAST 2 ( high )					  
    if mid is arr [ mid ] :				      4 COMPARE_OP 5 ( >= )					    4 COMPARE_OP 5 ( >= )					  
	return mid					      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 20					  
    if mid > arr [ mid ] :				      								    								  
	return binarySearch ( arr , ( mid + 1 ) , high )      3 8 LOAD_FAST 1 ( low )					    3 8 LOAD_FAST 0 ( arr )					  
    else :						      10 LOAD_FAST 2 ( high )					    10 LOAD_FAST 1 ( low )					  
	return binarySearch ( arr , low , ( mid - 1 ) )	      12 BINARY_ADD						    12 BINARY_SUBTRACT						  
    return - 1						      14 LOAD_CONST 1 ( 2 )					    14 LOAD_CONST 1 ( 2 )					  
							      16 BINARY_FLOOR_DIVIDE					    16 BINARY_FLOOR_DIVIDE					  
							      18 STORE_FAST 3 ( mid )					    18 STORE_FAST 3 ( mid )					  
							      								    								  
							      4 >> 20 LOAD_FAST 3 ( mid )				    4 >> 20 LOAD_FAST 3 ( mid )					  
							      22 LOAD_FAST 0 ( arr )					    22 LOAD_FAST 2 ( high )					  
							      24 LOAD_FAST 3 ( mid )					    24 COMPARE_OP 5 ( >= )					  
							      26 BINARY_SUBSCR						    26 POP_JUMP_IF_FALSE 32					  
							      28 COMPARE_OP 8 ( is )					    								  
							      30 POP_JUMP_IF_FALSE 36					    5 28 LOAD_FAST 0 ( arr )					  
							      								    30 LOAD_FAST 3 ( mid )					  
							      5 32 LOAD_FAST 3 ( mid )					    32 BINARY_SUBTRACT						  
							      34 RETURN_VALUE						    34 STORE_FAST 2 ( high )					  
							      								    								  
							      6 >> 36 LOAD_FAST 3 ( mid )				    6 36 LOAD_FAST 0 ( arr )					  
							      38 LOAD_FAST 0 ( arr )					    38 LOAD_FAST 3 ( mid )					  
							      40 LOAD_FAST 3 ( mid )					    40 BINARY_SUBTRACT						  
							      42 BINARY_SUBSCR						    42 STORE_FAST 4 ( mid )					  
							      44 COMPARE_OP 4 ( > )					    								  
							      46 POP_JUMP_IF_FALSE 64					    7 44 LOAD_FAST 0 ( arr )					  
							      								    46 LOAD_FAST 3 ( mid )					  
							      7 48 LOAD_GLOBAL 0 ( binarySearch )			    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 3 ( mid )					    52 LOAD_FAST 3 ( mid )					  
							      54 LOAD_CONST 2 ( 1 )					    54 BINARY_SUBSCR						  
							      56 BINARY_ADD						    56 BINARY_SUBTRACT						  
							      58 LOAD_FAST 2 ( high )					    58 RETURN_VALUE NEW_LINE					  
							      60 CALL_FUNCTION 3					    								  
							      62 RETURN_VALUE						    								  
							      								    								  
							      9 >> 64 LOAD_GLOBAL 0 ( binarySearch )			    								  
							      66 LOAD_FAST 0 ( arr )					    								  
							      68 LOAD_FAST 1 ( low )					    								  
							      70 LOAD_FAST 3 ( mid )					    								  
							      72 LOAD_CONST 2 ( 1 )					    								  
							      74 BINARY_SUBTRACT					    								  
							      76 CALL_FUNCTION 3					    								  
							      78 RETURN_VALUE						    								  
							      								    								  
							      10 80 LOAD_CONST 3 ( - 1 )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
def check ( st ) :					      Disassembly of <code object check at 0x7f33e2653ed0, file "<d Disassembly of <code object check at 0x7f2b01639660, file "<d script_not_found : None
    n = len ( st )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    if ( ( ( int ) ( st [ n - 1 ] ) % 2 ) != 0 ) :	      2 LOAD_FAST 0 ( st )					    2 LOAD_FAST 0 ( st )					  
	return False					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    digitSum = 0					      6 STORE_FAST 1 ( n )					    6 LOAD_GLOBAL 1 ( len )					  
    for i in range ( 0 , n ) :				      								    8 LOAD_FAST 0 ( st )					  
	digitSum = digitSum + ( int ) ( st [ i ] )	      3 8 LOAD_GLOBAL 1 ( int )					    10 CALL_FUNCTION 1						  
    return ( digitSum % 3 == 0 )			      10 LOAD_FAST 0 ( st )					    12 LOAD_CONST 1 ( 2 )					  
							      12 LOAD_FAST 1 ( n )					    14 COMPARE_OP 2 ( == )					  
							      14 LOAD_CONST 1 ( 1 )					    16 POP_JUMP_IF_FALSE 26					  
							      16 BINARY_SUBTRACT					    								  
							      18 BINARY_SUBSCR						    3 18 LOAD_CONST 2 ( False )					  
							      20 CALL_FUNCTION 1					    20 RETURN_VALUE						  
							      22 LOAD_CONST 2 ( 2 )					    								  
							      24 BINARY_MODULO						    4 >> 22 LOAD_CONST 3 ( 0 )					  
							      26 LOAD_CONST 3 ( 0 )					    24 RETURN_VALUE						  
							      28 COMPARE_OP 3 ( != )					    								  
							      30 POP_JUMP_IF_FALSE 36					    5 >> 26 SETUP_LOOP 68 ( to 100 )				  
							      								    28 LOAD_GLOBAL 2 ( range )					  
							      4 32 LOAD_CONST 4 ( False )				    30 LOAD_CONST 1 ( 2 )					  
							      34 RETURN_VALUE						    32 LOAD_FAST 0 ( st )					  
							      								    34 CALL_FUNCTION 1						  
							      5 >> 36 LOAD_CONST 3 ( 0 )				    36 GET_ITER							  
							      38 STORE_FAST 2 ( digitSum )				    >> 38 FOR_ITER 58 ( to 98 )					  
							      								    40 STORE_FAST 1 ( i )					  
							      6 40 SETUP_LOOP 34 ( to 76 )				    								  
							      42 LOAD_GLOBAL 2 ( range )				    6 42 LOAD_GLOBAL 3 ( print )				  
							      44 LOAD_CONST 3 ( 0 )					    44 LOAD_FAST 0 ( st )					  
							      46 LOAD_FAST 1 ( n )					    46 LOAD_FAST 1 ( i )					  
							      48 CALL_FUNCTION 2					    48 BINARY_SUBSCR						  
							      50 GET_ITER						    50 LOAD_METHOD 4 ( split )					  
							      >> 52 FOR_ITER 20 ( to 74 )				    52 LOAD_CONST 4 ( ',' )					  
							      54 STORE_FAST 3 ( i )					    54 CALL_METHOD 1						  
							      								    56 LOAD_CONST 5 ( 1 )					  
							      7 56 LOAD_FAST 2 ( digitSum )				    58 BINARY_SUBSCR						  
							      58 LOAD_GLOBAL 1 ( int )					    60 STORE_FAST 2 ( val )					  
							      60 LOAD_FAST 0 ( st )					    								  
							      62 LOAD_FAST 3 ( i )					    7 62 LOAD_FAST 2 ( val )					  
							      64 BINARY_SUBSCR						    64 LOAD_CONST 6 ( 1 )					  
							      66 CALL_FUNCTION 1					    66 BINARY_SUBSCR						  
							      68 BINARY_ADD						    68 STORE_FAST 3 ( start )					  
							      70 STORE_FAST 2 ( digitSum )				    								  
							      72 JUMP_ABSOLUTE 52					    8 70 LOAD_FAST 2 ( val )					  
							      >> 74 POP_BLOCK						    72 LOAD_CONST 6 ( 1 )					  
							      								    74 BINARY_SUBSCR						  
							      8 >> 76 LOAD_FAST 2 ( digitSum )				    76 LOAD_CONST 7 ( '' )					  
							      78 LOAD_CONST 5 ( 3 )					    78 COMPARE_OP 2 ( == )					  
							      80 BINARY_MODULO						    80 POP_JUMP_IF_FALSE 38					  
							      82 LOAD_CONST 3 ( 0 )					    								  
							      84 COMPARE_OP 2 ( == )					    9 82 LOAD_FAST 2 ( val )					  
							      86 RETURN_VALUE NEW_LINE					    84 LOAD_CONST 6 ( 1 )					  
							      								    86 BINARY_SUBSCR						  
							      								    88 LOAD_CONST 8 ( '' )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      								    92 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      								    10 94 LOAD_CONST 2 ( False )				  
							      								    96 RETURN_VALUE						  
							      								    								  
							      								    11 >> 98 LOAD_FAST 2 ( val )				  
							      								    100 LOAD_CONST 6 ( 1 )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_CONST 9 ( '' )					  
							      								    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 38					  
							      								    								  
							      								    12 110 LOAD_CONST 2 ( False )				  
							      								    112 RETURN_VALUE						  
							      								    								  
							      								    13 >> 114 LOAD_GLOBAL 5 ( print )				  
							      								    116 LOAD_FAST 0 ( st )					  
							      								    118 CALL_FUNCTION 1						  
							      								    120 POP_TOP							  
							      								    								  
							      								    14 122 LOAD_CONST 10 ( True )				  
							      								    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND
--							      --							    --								  --
def isSubSequence ( string1 , string2 , m , n ) :	      Disassembly of <code object isSubSequence at 0x7f33e26494b0,  Disassembly of <code object isSubSequence at 0x7f2b0163dc90,  script_not_found : None
    if m == 0 : return True				      2 0 LOAD_FAST 2 ( m )					    2 0 LOAD_FAST 0 ( string1 )					  
    if n == 0 : return False				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if string1 [ m - 1 ] == string2 [ n - 1 ] :		      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return isSubSequence ( string1 , string2 , m - 1 , n  6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    return isSubSequence ( string1 , string2 , m , n - 1 )    8 LOAD_CONST 2 ( True )					    								  
							      10 RETURN_VALUE						    3 8 LOAD_CONST 2 ( True )					  
							      								    10 RETURN_VALUE						  
							      3 >> 12 LOAD_FAST 3 ( n )					    								  
							      14 LOAD_CONST 1 ( 0 )					    4 >> 12 LOAD_FAST 0 ( string1 )				  
							      16 COMPARE_OP 2 ( == )					    14 LOAD_CONST 1 ( 0 )					  
							      18 POP_JUMP_IF_FALSE 24					    16 COMPARE_OP 2 ( == )					  
							      20 LOAD_CONST 3 ( False )					    18 POP_JUMP_IF_FALSE 24					  
							      22 RETURN_VALUE						    								  
							      								    5 20 LOAD_CONST 3 ( False )					  
							      4 >> 24 LOAD_FAST 0 ( string1 )				    22 RETURN_VALUE						  
							      26 LOAD_FAST 2 ( m )					    								  
							      28 LOAD_CONST 4 ( 1 )					    6 >> 24 LOAD_GLOBAL 0 ( len )				  
							      30 BINARY_SUBTRACT					    26 LOAD_FAST 0 ( string1 )					  
							      32 BINARY_SUBSCR						    28 CALL_FUNCTION 1						  
							      34 LOAD_FAST 1 ( string2 )				    30 LOAD_CONST 4 ( 1 )					  
							      36 LOAD_FAST 3 ( n )					    32 COMPARE_OP 2 ( == )					  
							      38 LOAD_CONST 4 ( 1 )					    34 POP_JUMP_IF_FALSE 40					  
							      40 BINARY_SUBTRACT					    								  
							      42 BINARY_SUBSCR						    7 36 LOAD_CONST 5 ( False )					  
							      44 COMPARE_OP 2 ( == )					    38 RETURN_VALUE						  
							      46 POP_JUMP_IF_FALSE 70					    								  
							      								    8 >> 40 LOAD_CONST 6 ( '' )					  
							      5 48 LOAD_GLOBAL 0 ( isSubSequence )			    42 RETURN_VALUE						  
							      50 LOAD_FAST 0 ( string1 )				    								  
							      52 LOAD_FAST 1 ( string2 )				    9 >> 44 LOAD_CONST 7 ( '' )					  
							      54 LOAD_FAST 2 ( m )					    46 RETURN_VALUE						  
							      56 LOAD_CONST 4 ( 1 )					    48 LOAD_CONST 0 ( None )					  
							      58 BINARY_SUBTRACT					    50 RETURN_VALUE NEW_LINE					  
							      60 LOAD_FAST 3 ( n )					    								  
							      62 LOAD_CONST 4 ( 1 )					    								  
							      64 BINARY_SUBTRACT					    								  
							      66 CALL_FUNCTION 4					    								  
							      68 RETURN_VALUE						    								  
							      								    								  
							      6 >> 70 LOAD_GLOBAL 0 ( isSubSequence )			    								  
							      72 LOAD_FAST 0 ( string1 )				    								  
							      74 LOAD_FAST 1 ( string2 )				    								  
							      76 LOAD_FAST 2 ( m )					    								  
							      78 LOAD_FAST 3 ( n )					    								  
							      80 LOAD_CONST 4 ( 1 )					    								  
							      82 BINARY_SUBTRACT					    								  
							      84 CALL_FUNCTION 4					    								  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
def countLattice ( r ) :				      Disassembly of <code object countLattice at 0x7f33e2653f60, f Disassembly of <code object countLattice at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    if ( r <= 0 ) :					      2 0 LOAD_FAST 0 ( r )					    2 0 LOAD_FAST 0 ( r )					  "XLM/dis_script.py", line 60, in <module>	exec
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  (item)   File "main.py", line 38, in <module>	  Fi
    result = 4						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  le "<dis>", line 2, in countLattice TypeError: 'in
    for x in range ( 1 , r ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  t' object is not subscriptable
	ySquare = r * r - x * x				      								    								  
	y = int ( math.sqrt ( ySquare ) )		      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 2 ( 1 )					  
	if ( y * y == ySquare ) :			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	    result += 4					      								    								  
    return result					      4 >> 12 LOAD_CONST 2 ( 4 )				    4 >> 12 LOAD_CONST 3 ( 4 )					  
							      14 STORE_FAST 1 ( result )				    14 STORE_FAST 1 ( result )					  
							      								    								  
							      5 16 SETUP_LOOP 68 ( to 86 )				    5 16 SETUP_LOOP 74 ( to 92 )				  
							      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_GLOBAL 0 ( range )					  
							      20 LOAD_CONST 3 ( 1 )					    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_FAST 0 ( r )					    22 LOAD_FAST 1 ( result )					  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 54 ( to 84 )				    >> 28 FOR_ITER 74 ( to 90 )					  
							      30 STORE_FAST 2 ( x )					    30 STORE_FAST 2 ( x )					  
							      								    								  
							      6 32 LOAD_FAST 0 ( r )					    6 32 LOAD_FAST 2 ( x )					  
							      34 LOAD_FAST 0 ( r )					    34 LOAD_FAST 0 ( r )					  
							      36 BINARY_MULTIPLY					    36 LOAD_FAST 2 ( x )					  
							      38 LOAD_FAST 2 ( x )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 2 ( x )					    40 LOAD_FAST 2 ( x )					  
							      42 BINARY_MULTIPLY					    42 BINARY_SUBSCR						  
							      44 BINARY_SUBTRACT					    44 LOAD_FAST 2 ( x )					  
							      46 STORE_FAST 3 ( ySquare )				    46 BINARY_SUBSCR						  
							      								    48 LOAD_FAST 2 ( x )					  
							      7 48 LOAD_GLOBAL 1 ( int )				    50 BINARY_SUBSCR						  
							      50 LOAD_GLOBAL 2 ( math )					    52 LOAD_FAST 2 ( x )					  
							      52 LOAD_METHOD 3 ( sqrt )					    54 BINARY_SUBSCR						  
							      54 LOAD_FAST 3 ( ySquare )				    56 LOAD_FAST 2 ( x )					  
							      56 CALL_METHOD 1						    58 BINARY_SUBSCR						  
							      58 CALL_FUNCTION 1					    60 LOAD_FAST 2 ( x )					  
							      60 STORE_FAST 4 ( y )					    62 BINARY_SUBSCR						  
							      								    64 LOAD_FAST 2 ( x )					  
							      8 62 LOAD_FAST 4 ( y )					    66 BINARY_SUBSCR						  
							      64 LOAD_FAST 4 ( y )					    68 LOAD_FAST 2 ( x )					  
							      66 BINARY_MULTIPLY					    70 BINARY_SUBSCR						  
							      68 LOAD_FAST 3 ( ySquare )				    72 LOAD_FAST 2 ( x )					  
							      70 COMPARE_OP 2 ( == )					    74 BINARY_SUBSCR						  
							      72 POP_JUMP_IF_FALSE 28					    76 LOAD_FAST 2 ( x )					  
							      								    78 BINARY_SUBSCR						  
							      9 74 LOAD_FAST 1 ( result )				    80 LOAD_FAST 2 ( x )					  
							      76 LOAD_CONST 2 ( 4 )					    82 BINARY_SUBSCR						  
							      78 INPLACE_ADD						    84 LOAD_FAST 2 ( x )					  
							      80 STORE_FAST 1 ( result )				    86 BINARY_SUBSCR						  
							      82 JUMP_ABSOLUTE 28					    88 LOAD_FAST 2 ( x )					  
							      >> 84 POP_BLOCK						    90 BINARY_SUBSCR						  
							      								    92 LOAD_FAST 2 ( x )					  
							      10 >> 86 LOAD_FAST 1 ( result )				    94 BINARY_SUBSCR						  
							      88 RETURN_VALUE NEW_LINE					    96 LOAD_FAST 2 ( x )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 2 ( x )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_FAST 2 ( x )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 2 ( x )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_FAST 2 ( x )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_FAST 2 ( x )					  
							      								    118 STORE_SUBSCR						  
							      								    120 JUMP_ABSOLUTE 28					  
							      								    >> 122 POP_BLOCK						  
							      								    >> 124 JUMP_ABSOLUTE 28					  
							      								    >> 126 POP_BLOCK						  
							      								    								  
							      								    7 >> 128 LOAD_FAST 1 ( result )				  
							      								    130 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1
--							      --							    --								  --
def getOddOccurrence ( arr , size ) :			      Disassembly of <code object getOddOccurrence at 0x7f33e2644f6 Disassembly of <code object getOddOcOcOcOcOcOcOcOcOcOcOcOcOcO error : Traceback (most recent call last):   File
    Hash = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    								  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( size ) :				      2 CALL_FUNCTION 0						    								  item in run_dis_script():   File "XLM/dis_script.p
	Hash [ arr [ i ] ] = Hash.get ( arr [ i ] , 0 ) + 1 ; 4 STORE_FAST 2 ( Hash )					    								  y", line 54, in run_dis_script     hyp_co = mco.to
    for i in Hash :					      								    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	if ( Hash [ i ] % 2 != 0 ) :			      3 6 SETUP_LOOP 44 ( to 52 )				    								  assembler.py", line 81, in to_co     co_consts.app
	    return i					      8 LOAD_GLOBAL 1 ( range )					    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    return - 1						      10 LOAD_FAST 1 ( size )					    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      12 CALL_FUNCTION 1					    								  co	 self.co_cellvars, ValueError: code: varname
							      14 GET_ITER						    								  s is too small
							      >> 16 FOR_ITER 32 ( to 50 )				    								  
							      18 STORE_FAST 3 ( i )					    								  
							      								    								  
							      4 20 LOAD_FAST 2 ( Hash )					    								  
							      22 LOAD_METHOD 2 ( get )					    								  
							      24 LOAD_FAST 0 ( arr )					    								  
							      26 LOAD_FAST 3 ( i )					    								  
							      28 BINARY_SUBSCR						    								  
							      30 LOAD_CONST 1 ( 0 )					    								  
							      32 CALL_METHOD 2						    								  
							      34 LOAD_CONST 2 ( 1 )					    								  
							      36 BINARY_ADD						    								  
							      38 LOAD_FAST 2 ( Hash )					    								  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 STORE_SUBSCR						    								  
							      48 JUMP_ABSOLUTE 16					    								  
							      >> 50 POP_BLOCK						    								  
							      								    								  
							      5 >> 52 SETUP_LOOP 32 ( to 86 )				    								  
							      54 LOAD_FAST 2 ( Hash )					    								  
							      56 GET_ITER						    								  
							      >> 58 FOR_ITER 24 ( to 84 )				    								  
							      60 STORE_FAST 3 ( i )					    								  
							      								    								  
							      6 62 LOAD_FAST 2 ( Hash )					    								  
							      64 LOAD_FAST 3 ( i )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 LOAD_CONST 3 ( 2 )					    								  
							      70 BINARY_MODULO						    								  
							      72 LOAD_CONST 1 ( 0 )					    								  
							      74 COMPARE_OP 3 ( != )					    								  
							      76 POP_JUMP_IF_FALSE 58					    								  
							      								    								  
							      7 78 LOAD_FAST 3 ( i )					    								  
							      80 RETURN_VALUE						    								  
							      82 JUMP_ABSOLUTE 58					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      8 >> 86 LOAD_CONST 4 ( - 1 )				    								  
							      88 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		      FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		    FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		  FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B
--							      --							    --								  --
def computeLastDigit ( A , B ) :			      Disassembly of <code object computeLastDigit at 0x7f33e26494b Disassembly of <code object computeLastDigit at 0x7f2b0163dc9 error : /bin/bash: line 1: 12278 Segmentation faul
    variable = 1					      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    if ( A == B ) :					      2 STORE_FAST 2 ( variable )				    2 STORE_FAST 2 ( variable )					  ataset/bin/python XLM/dis_script.py --script_path
	return 1					      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    elif ( ( B - A ) >= 5 ) :				      3 4 LOAD_FAST 0 ( A )					    3 4 LOAD_FAST 0 ( A )					  24/eval_scripts/python_sa-dis_sa.valid/FIND_LAST_D
	return 0					      6 LOAD_FAST 1 ( B )					    6 LOAD_FAST 2 ( variable )					  IGIT_FACTORIAL_DIVIDES_FACTORIAL_B.dis
    else :						      8 COMPARE_OP 2 ( == )					    8 COMPARE_OP 2 ( == )					  
	for i in range ( A + 1 , B + 1 ) :		      10 POP_JUMP_IF_FALSE 16					    10 POP_JUMP_IF_FALSE 20					  
	    variable = ( variable * ( i % 10 ) ) % 10	      								    								  
	return variable % 10				      4 12 LOAD_CONST 1 ( 1 )					    4 12 LOAD_CONST 1 ( 1 )					  
							      14 RETURN_VALUE						    14 RETURN_VALUE						  
							      								    								  
							      5 >> 16 LOAD_FAST 1 ( B )					    5 >> 16 LOAD_FAST 0 ( A )					  
							      18 LOAD_FAST 0 ( A )					    18 LOAD_FAST 2 ( variable )					  
							      20 BINARY_SUBTRACT					    20 COMPARE_OP 2 ( == )					  
							      22 LOAD_CONST 2 ( 5 )					    22 POP_JUMP_IF_FALSE 28					  
							      24 COMPARE_OP 5 ( >= )					    								  
							      26 POP_JUMP_IF_FALSE 32					    6 24 LOAD_CONST 2 ( 0 )					  
							      								    26 RETURN_VALUE						  
							      6 28 LOAD_CONST 3 ( 0 )					    								  
							      30 RETURN_VALUE						    6 >> 28 SETUP_LOOP 64 ( to 100 )				  
							      								    30 LOAD_GLOBAL 0 ( range )					  
							      8 >> 32 SETUP_LOOP 42 ( to 76 )				    32 LOAD_FAST 1 ( B )					  
							      34 LOAD_GLOBAL 0 ( range )				    34 LOAD_CONST 3 ( 10 )					  
							      36 LOAD_FAST 0 ( A )					    36 CALL_FUNCTION 2						  
							      38 LOAD_CONST 1 ( 1 )					    38 GET_ITER							  
							      40 BINARY_ADD						    >> 40 FOR_ITER 48 ( to 98 )					  
							      42 LOAD_FAST 1 ( B )					    42 STORE_FAST 3 ( i )					  
							      44 LOAD_CONST 1 ( 1 )					    								  
							      46 BINARY_ADD						    7 44 LOAD_FAST 2 ( variable )				  
							      48 CALL_FUNCTION 2					    46 LOAD_FAST 3 ( i )					  
							      50 GET_ITER						    48 BINARY_SUBSCR						  
							      >> 52 FOR_ITER 20 ( to 74 )				    50 LOAD_FAST 0 ( A )					  
							      54 STORE_FAST 3 ( i )					    52 LOAD_FAST 3 ( i )					  
							      								    54 BINARY_SUBSCR						  
							      9 56 LOAD_FAST 2 ( variable )				    56 LOAD_FAST 0 ( A )					  
							      58 LOAD_FAST 3 ( i )					    58 LOAD_FAST 3 ( i )					  
							      60 LOAD_CONST 4 ( 10 )					    60 BINARY_SUBSCR						  
							      62 BINARY_MODULO						    62 LOAD_FAST 0 ( A )					  
							      64 BINARY_MULTIPLY					    64 LOAD_FAST 3 ( i )					  
							      66 LOAD_CONST 4 ( 10 )					    66 BINARY_SUBSCR						  
							      68 BINARY_MODULO						    68 LOAD_FAST 0 ( A )					  
							      70 STORE_FAST 2 ( variable )				    70 LOAD_FAST 3 ( i )					  
							      72 JUMP_ABSOLUTE 52					    72 BINARY_SUBSCR						  
							      >> 74 POP_BLOCK						    74 LOAD_FAST 0 ( A )					  
							      								    76 LOAD_FAST 3 ( i )					  
							      10 >> 76 LOAD_FAST 2 ( variable )				    78 BINARY_SUBSCR						  
							      78 LOAD_CONST 4 ( 10 )					    80 LOAD_FAST 0 ( A )					  
							      80 BINARY_MODULO						    82 LOAD_FAST 3 ( i )					  
							      82 RETURN_VALUE						    84 BINARY_SUBSCR						  
							      84 LOAD_CONST 0 ( None )					    86 LOAD_FAST 0 ( A )					  
							      86 RETURN_VALUE NEW_LINE					    88 LOAD_FAST 3 ( i )					  
							      								    90 STORE_SUBSCR						  
							      								    92 JUMP_ABSOLUTE 40						  
							      								    >> 94 POP_BLOCK						  
							      								    >> 96 JUMP_ABSOLUTE 40					  
							      								    >> 98 POP_BLOCK						  
							      								    								  
							      								    8 >> 100 LOAD_FAST 2 ( variable )				  
							      								    102 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
def lexNext ( s , n ) :					      Disassembly of <code object lexNext at 0x7f33e2653f60, file " Disassembly of <code object lexNext at 0x7f2b0163dc90, file " script_not_found : None
    for i in range ( n - 1 , - 1 , - 1 ) :		      2 0 SETUP_LOOP 82 ( to 84 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	if s [ i ] != 'z' :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    k = ord ( s [ i ] )				      4 LOAD_FAST 1 ( n )					    4 LOAD_CONST 1 ( 1 )					  
	    s [ i ] = chr ( k + 1 )			      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 2 ( - 1 )					  
	    return ''.join ( s )			      8 BINARY_SUBTRACT						    8 LOAD_CONST 3 ( - 1 )					  
	s [ i ] = 'a'					      10 LOAD_CONST 2 ( - 1 )					    10 CALL_FUNCTION 2						  
							      12 LOAD_CONST 2 ( - 1 )					    12 GET_ITER							  
							      14 CALL_FUNCTION 3					    >> 14 FOR_ITER 48 ( to 64 )					  
							      16 GET_ITER						    16 STORE_FAST 1 ( i )					  
							      >> 18 FOR_ITER 62 ( to 82 )				    								  
							      20 STORE_FAST 2 ( i )					    3 18 LOAD_FAST 0 ( s )					  
							      								    20 LOAD_FAST 1 ( i )					  
							      3 22 LOAD_FAST 0 ( s )					    22 BINARY_SUBSCR						  
							      24 LOAD_FAST 2 ( i )					    24 LOAD_CONST 4 ( 'z' )					  
							      26 BINARY_SUBSCR						    26 COMPARE_OP 3 ( != )					  
							      28 LOAD_CONST 3 ( 'z' )					    28 POP_JUMP_IF_FALSE 14					  
							      30 COMPARE_OP 3 ( != )					    								  
							      32 POP_JUMP_IF_FALSE 72					    4 30 LOAD_GLOBAL 1 ( ord )					  
							      								    32 LOAD_FAST 0 ( s )					  
							      4 34 LOAD_GLOBAL 1 ( ord )				    34 LOAD_CONST 5 ( 'z' )					  
							      36 LOAD_FAST 0 ( s )					    36 BINARY_SUBSCR						  
							      38 LOAD_FAST 2 ( i )					    38 CALL_FUNCTION 1						  
							      40 BINARY_SUBSCR						    40 LOAD_CONST 4 ( 'z' )					  
							      42 CALL_FUNCTION 1					    42 COMPARE_OP 3 ( != )					  
							      44 STORE_FAST 3 ( k )					    44 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      5 46 LOAD_GLOBAL 2 ( chr )				    5 46 LOAD_GLOBAL 1 ( ord )					  
							      48 LOAD_FAST 3 ( k )					    48 LOAD_FAST 0 ( s )					  
							      50 LOAD_CONST 1 ( 1 )					    50 LOAD_CONST 6 ( 'z' )					  
							      52 BINARY_ADD						    52 BINARY_SUBSCR						  
							      54 CALL_FUNCTION 1					    54 CALL_FUNCTION 1						  
							      56 LOAD_FAST 0 ( s )					    56 LOAD_CONST 4 ( 'z' )					  
							      58 LOAD_FAST 2 ( i )					    58 COMPARE_OP 3 ( != )					  
							      60 STORE_SUBSCR						    60 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      6 62 LOAD_CONST 4 ( '' )					    6 62 LOAD_GLOBAL 1 ( ord )					  
							      64 LOAD_METHOD 3 ( join )					    64 LOAD_FAST 0 ( s )					  
							      66 LOAD_FAST 0 ( s )					    66 LOAD_CONST 7 ( 'z' )					  
							      68 CALL_METHOD 1						    68 BINARY_SUBSCR						  
							      70 RETURN_VALUE						    70 CALL_FUNCTION 1						  
							      								    72 LOAD_CONST 4 ( 'z' )					  
							      7 >> 72 LOAD_CONST 5 ( 'a' )				    74 COMPARE_OP 3 ( != )					  
							      74 LOAD_FAST 0 ( s )					    76 POP_JUMP_IF_FALSE 14					  
							      76 LOAD_FAST 2 ( i )					    								  
							      78 STORE_SUBSCR						    7 78 LOAD_GLOBAL 1 ( ord )					  
							      80 JUMP_ABSOLUTE 18					    80 LOAD_FAST 0 ( s )					  
							      >> 82 POP_BLOCK						    82 LOAD_CONST 8 ( 'z' )					  
							      >> 84 LOAD_CONST 0 ( None )				    84 BINARY_SUBSCR						  
							      86 RETURN_VALUE NEW_LINE					    86 CALL_FUNCTION 1						  
							      								    88 LOAD_CONST 4 ( 'z' )					  
							      								    90 COMPARE_OP 3 ( != )					  
							      								    92 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    8 94 LOAD_GLOBAL 1 ( ord )					  
							      								    96 LOAD_FAST 0 ( s )					  
							      								    98 LOAD_CONST 9 ( - 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 CALL_FUNCTION 1						  
							      								    104 LOAD_CONST 4 ( 'z' )					  
							      								    106 COMPARE_OP 3 ( != )					  
							      								    108 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    9 110 LOAD_GLOBAL 1 ( ord )					  
							      								    112 LOAD_FAST 0 ( s )					  
							      								    114 LOAD_CONST 10 ( 'z' )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 CALL_FUNCTION 1						  
							      								    120 LOAD_CONST 4 ( 'z' )					  
							      								    122 COMPARE_OP 3 ( != )					  
							      								    124 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    10 126 LOAD_GLOBAL 1 ( ord )				  
							      								    128 LOAD_FAST 0 ( s )					  
							      								    130 LOAD_CONST 11 ( 'z' )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 CALL_FUNCTION 1						  
							      								    136 RETURN_VALUE						  
							      								    >> 138 JUMP_ABSOLUTE 14					  
							      								    >> 140 POP_BLOCK						  
							      								    >> 142 LOAD_CONST 0 ( None )				  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
def printPascal ( n ) :					      Disassembly of <code object printPascal at 0x7f33e2653f60, fi Disassembly of <code object printPascal at 0x7f2b0163dc90, fi script_not_found : None
    for line in range ( 1 , n + 1 ) :			      2 0 SETUP_LOOP 90 ( to 92 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	C = 1 ;						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for i in range ( 1 , line + 1 ) :		      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
	    print ( C , end = "" ) ;			      6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  
	    C = int ( C * ( line - i ) / i ) ;		      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
	print ( "" ) ;					      10 BINARY_ADD						    10 BINARY_ADD						  
							      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 72 ( to 90 )				    >> 16 FOR_ITER 76 ( to 76 )					  
							      18 STORE_FAST 1 ( line )					    18 STORE_FAST 1 ( line )					  
							      								    								  
							      3 20 LOAD_CONST 1 ( 1 )					    3 20 SETUP_LOOP 54 ( to 74 )				  
							      22 STORE_FAST 2 ( C )					    22 LOAD_GLOBAL 1 ( range )					  
							      								    24 LOAD_CONST 1 ( 1 )					  
							      4 24 SETUP_LOOP 54 ( to 80 )				    26 LOAD_FAST 0 ( n )					  
							      26 LOAD_GLOBAL 0 ( range )				    28 LOAD_CONST 2 ( 1 )					  
							      28 LOAD_CONST 1 ( 1 )					    30 BINARY_ADD						  
							      30 LOAD_FAST 1 ( line )					    32 CALL_FUNCTION 2						  
							      32 LOAD_CONST 1 ( 1 )					    34 GET_ITER							  
							      34 BINARY_ADD						    >> 36 FOR_ITER 48 ( to 72 )					  
							      36 CALL_FUNCTION 2					    38 STORE_FAST 2 ( i )					  
							      38 GET_ITER						    								  
							      >> 40 FOR_ITER 36 ( to 78 )				    4 40 LOAD_GLOBAL 2 ( print )				  
							      42 STORE_FAST 3 ( i )					    42 LOAD_FAST 2 ( i )					  
							      								    44 LOAD_CONST 2 ( 1 )					  
							      5 44 LOAD_GLOBAL 1 ( print )				    46 BINARY_ADD						  
							      46 LOAD_FAST 2 ( C )					    48 CALL_FUNCTION 1						  
							      48 LOAD_CONST 2 ( '' )					    50 POP_TOP							  
							      50 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      52 CALL_FUNCTION_KW 2					    5 52 LOAD_GLOBAL 2 ( print )				  
							      54 POP_TOP						    54 LOAD_FAST 2 ( i )					  
							      								    56 LOAD_CONST 2 ( 1 )					  
							      6 56 LOAD_GLOBAL 2 ( int )				    58 BINARY_ADD						  
							      58 LOAD_FAST 2 ( C )					    60 CALL_FUNCTION 2						  
							      60 LOAD_FAST 1 ( line )					    62 POP_TOP							  
							      62 LOAD_FAST 3 ( i )					    								  
							      64 BINARY_SUBTRACT					    6 64 LOAD_GLOBAL 2 ( print )				  
							      66 BINARY_MULTIPLY					    66 LOAD_FAST 2 ( i )					  
							      68 LOAD_FAST 3 ( i )					    68 LOAD_CONST 2 ( 1 )					  
							      70 BINARY_TRUE_DIVIDE					    70 BINARY_ADD						  
							      72 CALL_FUNCTION 1					    72 CALL_FUNCTION 2						  
							      74 STORE_FAST 2 ( C )					    74 POP_TOP							  
							      76 JUMP_ABSOLUTE 40					    76 JUMP_ABSOLUTE 36						  
							      >> 78 POP_BLOCK						    >> 78 POP_BLOCK						  
							      								    >> 80 LOAD_CONST 0 ( None )					  
							      7 >> 80 LOAD_GLOBAL 1 ( print )				    82 RETURN_VALUE NEW_LINE					  
							      82 LOAD_CONST 2 ( '' )					    								  
							      84 CALL_FUNCTION 1					    								  
							      86 POP_TOP						    								  
							      88 JUMP_ABSOLUTE 16					    								  
							      >> 90 POP_BLOCK						    								  
							      >> 92 LOAD_CONST 0 ( None )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	      WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	    WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	  WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS
--							      --							    --								  --
def CountWays ( n ) :					      Disassembly of <code object CountWays at 0x7f33e2644930, file Disassembly of <code object CountWays at 0x7f2b0163dc90, file script_not_found : None
    table = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    table [ 0 ] = 1					      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'n' , ) )				  
    for i in range ( 1 , n ) :				      4 LOAD_FAST 0 ( n )					    4 IMPORT_NAME 0 ( table )					  
	for j in range ( i , n + 1 ) :			      6 LOAD_CONST 2 ( 1 )					    6 IMPORT_FROM 1 ( n )					  
	    table [ j ] += table [ j - i ]		      8 BINARY_ADD						    8 STORE_FAST 1 ( table )					  
    return table [ n ]					      10 BINARY_MULTIPLY					    10 POP_TOP							  
							      12 STORE_FAST 1 ( table )					    								  
							      								    3 12 LOAD_CONST 1 ( 0 )					  
							      3 14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( ( 'n' , ) )				  
							      16 LOAD_FAST 1 ( table )					    16 IMPORT_NAME 2 ( table )					  
							      18 LOAD_CONST 1 ( 0 )					    18 IMPORT_FROM 3 ( n )					  
							      20 STORE_SUBSCR						    20 STORE_FAST 2 ( table )					  
							      								    22 POP_TOP							  
							      4 22 SETUP_LOOP 66 ( to 90 )				    								  
							      24 LOAD_GLOBAL 0 ( range )				    4 24 SETUP_LOOP 26 ( to 44 )				  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_GLOBAL 4 ( range )					  
							      28 LOAD_FAST 0 ( n )					    28 LOAD_CONST 3 ( 1 )					  
							      30 CALL_FUNCTION 2					    30 LOAD_CONST 4 ( 1 )					  
							      32 GET_ITER						    32 LOAD_CONST 5 ( ( 'n' , ) )				  
							      >> 34 FOR_ITER 52 ( to 88 )				    34 CALL_FUNCTION_KW 2					  
							      36 STORE_FAST 2 ( i )					    36 GET_ITER							  
							      								    >> 38 FOR_ITER 18 ( to 42 )					  
							      5 38 SETUP_LOOP 46 ( to 86 )				    40 STORE_FAST 3 ( i )					  
							      40 LOAD_GLOBAL 0 ( range )				    								  
							      42 LOAD_FAST 2 ( i )					    5 42 LOAD_FAST 0 ( n )					  
							      44 LOAD_FAST 0 ( n )					    44 LOAD_FAST 3 ( i )					  
							      46 LOAD_CONST 2 ( 1 )					    46 BINARY_SUBSCR						  
							      48 BINARY_ADD						    48 LOAD_FAST 0 ( n )					  
							      50 CALL_FUNCTION 2					    50 COMPARE_OP 4 ( > )					  
							      52 GET_ITER						    52 POP_JUMP_IF_FALSE 38					  
							      >> 54 FOR_ITER 28 ( to 84 )				    								  
							      56 STORE_FAST 3 ( j )					    6 54 LOAD_FAST 0 ( n )					  
							      								    56 LOAD_FAST 3 ( i )					  
							      6 58 LOAD_FAST 1 ( table )				    58 BINARY_SUBSCR						  
							      60 LOAD_FAST 3 ( j )					    60 LOAD_FAST 0 ( n )					  
							      62 DUP_TOP_TWO						    62 COMPARE_OP 4 ( > )					  
							      64 BINARY_SUBSCR						    64 POP_JUMP_IF_FALSE 38					  
							      66 LOAD_FAST 1 ( table )					    								  
							      68 LOAD_FAST 3 ( j )					    7 66 LOAD_FAST 0 ( n )					  
							      70 LOAD_FAST 2 ( i )					    68 LOAD_FAST 3 ( i )					  
							      72 BINARY_SUBTRACT					    70 BINARY_SUBSCR						  
							      74 BINARY_SUBSCR						    72 LOAD_FAST 0 ( n )					  
							      76 INPLACE_ADD						    74 LOAD_FAST 3 ( i )					  
							      78 ROT_THREE						    76 BINARY_SUBSCR						  
							      80 STORE_SUBSCR						    78 LOAD_FAST 0 ( n )					  
							      82 JUMP_ABSOLUTE 54					    80 COMPARE_OP 4 ( > )					  
							      >> 84 POP_BLOCK						    82 POP_JUMP_IF_FALSE 38					  
							      >> 86 JUMP_ABSOLUTE 34					    								  
							      >> 88 POP_BLOCK						    8 84 LOAD_FAST 0 ( n )					  
							      								    86 LOAD_FAST 3 ( i )					  
							      7 >> 90 LOAD_FAST 1 ( table )				    88 BINARY_SUBSCR						  
							      92 LOAD_FAST 0 ( n )					    90 LOAD_FAST 0 ( n )					  
							      94 BINARY_SUBSCR						    92 LOAD_FAST 3 ( i )					  
							      96 RETURN_VALUE NEW_LINE					    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 0 ( n )					  
							      								    98 STORE_SUBSCR						  
							      								    >> 100 JUMP_ABSOLUTE 38					  
							      								    >> 102 POP_BLOCK						  
							      								    								  
							      								    9 >> 104 LOAD_FAST 0 ( n )					  
							      								    106 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N
--							      --							    --								  --
def getMinSquares ( n ) :				      Disassembly of <code object getMinSquares at 0x7f33e2653f60,  Disassembly of <code object getMinSquares at 0x7f2b0163dc90,  script_not_found : None
    if n <= 3 :						      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return n ;					      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  
    res = n						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    for x in range ( 1 , n + 1 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	temp = x * x ;					      								    								  
	if temp > n :					      3 8 LOAD_FAST 0 ( n )					    3 8 LOAD_FAST 0 ( n )					  
	    break					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	else :						      								    								  
	    res = min ( res , 1 + getMinSquares ( n - temp )  4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_CONST 2 ( 0 )					  
    return res ;					      14 STORE_FAST 1 ( res )					    14 STORE_FAST 1 ( n )					  
							      								    								  
							      5 16 SETUP_LOOP 64 ( to 82 )				    5 16 SETUP_LOOP 64 ( to 76 )				  
							      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_GLOBAL 0 ( range )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_CONST 1 ( 3 )					  
							      22 LOAD_FAST 0 ( n )					    22 LOAD_FAST 1 ( n )					  
							      24 LOAD_CONST 2 ( 1 )					    24 LOAD_CONST 1 ( 3 )					  
							      26 BINARY_ADD						    26 BINARY_ADD						  
							      28 CALL_FUNCTION 2					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 46 ( to 80 )				    >> 32 FOR_ITER 48 ( to 74 )					  
							      34 STORE_FAST 2 ( x )					    34 STORE_FAST 2 ( i )					  
							      								    								  
							      6 36 LOAD_FAST 2 ( x )					    6 36 LOAD_FAST 0 ( n )					  
							      38 LOAD_FAST 2 ( x )					    38 LOAD_CONST 3 ( 1 )					  
							      40 BINARY_MULTIPLY					    40 INPLACE_ADD						  
							      42 STORE_FAST 3 ( temp )					    42 STORE_FAST 0 ( n )					  
							      								    								  
							      7 44 LOAD_FAST 3 ( temp )					    7 44 LOAD_FAST 0 ( n )					  
							      46 LOAD_FAST 0 ( n )					    46 LOAD_CONST 4 ( 2 )					  
							      48 COMPARE_OP 4 ( > )					    48 INPLACE_ADD						  
							      50 POP_JUMP_IF_FALSE 56					    50 STORE_FAST 0 ( n )					  
							      								    								  
							      8 52 BREAK_LOOP						    8 52 LOAD_FAST 0 ( n )					  
							      54 JUMP_ABSOLUTE 32					    54 LOAD_CONST 4 ( 2 )					  
							      								    56 INPLACE_ADD						  
							      10 >> 56 LOAD_GLOBAL 1 ( min )				    58 STORE_FAST 0 ( n )					  
							      58 LOAD_FAST 1 ( res )					    								  
							      60 LOAD_CONST 2 ( 1 )					    9 60 LOAD_FAST 0 ( n )					  
							      62 LOAD_GLOBAL 2 ( getMinSquares )			    62 LOAD_CONST 4 ( 2 )					  
							      64 LOAD_FAST 0 ( n )					    64 INPLACE_ADD						  
							      66 LOAD_FAST 3 ( temp )					    66 STORE_FAST 0 ( n )					  
							      68 BINARY_SUBTRACT					    68 JUMP_ABSOLUTE 32						  
							      70 CALL_FUNCTION 1					    >> 70 POP_BLOCK						  
							      72 BINARY_ADD						    								  
							      74 CALL_FUNCTION 2					    10 >> 72 LOAD_FAST 1 ( n )					  
							      76 STORE_FAST 1 ( res )					    74 RETURN_VALUE NEW_LINE					  
							      78 JUMP_ABSOLUTE 32					    								  
							      >> 80 POP_BLOCK						    								  
							      								    								  
							      11 >> 82 LOAD_FAST 1 ( res )				    								  
							      84 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_EXTRA_CHARACTER_STRING_1			      FIND_ONE_EXTRA_CHARACTER_STRING_1				    FIND_ONE_EXTRA_CHARACTER_STRING_1				  FIND_ONE_EXTRA_CHARACTER_STRING_1
--							      --							    --								  --
def findExtraCharcter ( strA , strB ) :			      Disassembly of <code object findExtraCharcter at 0x7f33e2649a Disassembly of <code object findeeeeeeeeeeeeeeeeeeeeeeeeeeeee error : /bin/bash: line 1: 12293 Segmentation faul
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , len ( strA ) ) :		      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  ataset/bin/python XLM/dis_script.py --script_path
	res = res ^ ( ord ) ( strA [ i ] )		      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    for i in range ( 0 , len ( strB ) ) :		      3 4 SETUP_LOOP 38 ( to 44 )				    3 4 LOAD_CONST 1 ( 0 )					  24/eval_scripts/python_sa-dis_sa.valid/FIND_ONE_EX
	res = res ^ ( ord ) ( strB [ i ] )		      6 LOAD_GLOBAL 0 ( range )					    6 STORE_FAST 3 ( res )					  TRA_CHARACTER_STRING_1.dis
    return ( ( chr ) ( res ) ) ;			      8 LOAD_CONST 1 ( 0 )					    								  
							      10 LOAD_GLOBAL 1 ( len )					    4 8 SETUP_LOOP 64 ( to 76 )					  
							      12 LOAD_FAST 0 ( strA )					    10 LOAD_GLOBAL 0 ( range )					  
							      14 CALL_FUNCTION 1					    12 LOAD_CONST 2 ( 0 )					  
							      16 CALL_FUNCTION 2					    14 LOAD_GLOBAL 1 ( len )					  
							      18 GET_ITER						    16 LOAD_FAST 0 ( strA )					  
							      >> 20 FOR_ITER 20 ( to 42 )				    18 CALL_FUNCTION 1						  
							      22 STORE_FAST 3 ( i )					    20 CALL_FUNCTION 2						  
							      								    22 GET_ITER							  
							      4 24 LOAD_FAST 2 ( res )					    >> 24 FOR_ITER 48 ( to 74 )					  
							      26 LOAD_GLOBAL 2 ( ord )					    26 STORE_FAST 4 ( i )					  
							      28 LOAD_FAST 0 ( strA )					    								  
							      30 LOAD_FAST 3 ( i )					    5 28 LOAD_FAST 0 ( strA )					  
							      32 BINARY_SUBSCR						    30 LOAD_FAST 4 ( i )					  
							      34 CALL_FUNCTION 1					    32 BINARY_SUBSCR						  
							      36 BINARY_XOR						    34 LOAD_FAST 1 ( strB )					  
							      38 STORE_FAST 2 ( res )					    36 COMPARE_OP 2 ( == )					  
							      40 JUMP_ABSOLUTE 20					    38 POP_JUMP_IF_FALSE 48					  
							      >> 42 POP_BLOCK						    								  
							      								    6 40 LOAD_FAST 2 ( res )					  
							      5 >> 44 SETUP_LOOP 38 ( to 84 )				    42 LOAD_FAST 4 ( i )					  
							      46 LOAD_GLOBAL 0 ( range )				    44 BINARY_SUBSCR						  
							      48 LOAD_CONST 1 ( 0 )					    46 LOAD_FAST 1 ( strB )					  
							      50 LOAD_GLOBAL 1 ( len )					    48 COMPARE_OP 2 ( == )					  
							      52 LOAD_FAST 1 ( strB )					    50 POP_JUMP_IF_FALSE 24					  
							      54 CALL_FUNCTION 1					    								  
							      56 CALL_FUNCTION 2					    7 52 LOAD_FAST 2 ( res )					  
							      58 GET_ITER						    54 LOAD_FAST 4 ( i )					  
							      >> 60 FOR_ITER 20 ( to 82 )				    56 BINARY_SUBSCR						  
							      62 STORE_FAST 3 ( i )					    58 STORE_FAST 2 ( res )					  
							      								    								  
							      6 64 LOAD_FAST 2 ( res )					    8 >> 60 LOAD_FAST 2 ( res )					  
							      66 LOAD_GLOBAL 2 ( ord )					    62 LOAD_FAST 4 ( i )					  
							      68 LOAD_FAST 1 ( strB )					    64 BINARY_SUBSCR						  
							      70 LOAD_FAST 3 ( i )					    66 LOAD_FAST 1 ( strB )					  
							      72 BINARY_SUBSCR						    68 COMPARE_OP 2 ( == )					  
							      74 CALL_FUNCTION 1					    70 POP_JUMP_IF_FALSE 24					  
							      76 BINARY_XOR						    								  
							      78 STORE_FAST 2 ( res )					    9 72 LOAD_FAST 2 ( res )					  
							      80 JUMP_ABSOLUTE 60					    74 LOAD_FAST 4 ( i )					  
							      >> 82 POP_BLOCK						    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 1 ( strB )					  
							      7 >> 84 LOAD_GLOBAL 3 ( chr )				    80 COMPARE_OP 2 ( == )					  
							      86 LOAD_FAST 2 ( res )					    82 POP_JUMP_IF_FALSE 24					  
							      88 CALL_FUNCTION 1					    								  
							      90 RETURN_VALUE NEW_LINE					    10 84 LOAD_FAST 2 ( res )					  
							      								    86 LOAD_FAST 4 ( i )					  
							      								    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 1 ( strB )					  
							      								    92 COMPARE_OP 2 ( == )					  
							      								    94 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    11 96 LOAD_FAST 2 ( res )					  
							      								    98 LOAD_FAST 4 ( i )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 1 ( strB )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    12 108 LOAD_FAST 2 ( res )					  
							      								    110 LOAD_FAST 4 ( i )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 1 ( strB )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    13 120 LOAD_FAST 2 ( res )					  
							      								    122 LOAD_FAST 4 ( i )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_FAST 1 ( strB )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    14 132 LOAD_FAST 2 ( res )					  
							      								    134 LOAD_FAST 4 ( i )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 1 ( strB )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    15 144 LOAD_FAST 2 ( res )					  
							      								    146 RETURN_VALUE						  
							      								    								  
							      								    17 >> 148 LOAD_FAST 2 ( res )				  
							      								    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUM_CONTIGUOUS_SUBARRAY			      SMALLEST_SUM_CONTIGUOUS_SUBARRAY				    SMALLEST_SUM_CONTIGUOUS_SUBARRAY				  SMALLEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
def <<unk>> stSumSubarr ( arr , n ) :			      Disassembly of <code object <<unk>> stSumSubarr at 0x7f33e264 Disassembly of <code object esearch_results stSumSubarr at 0x error : Traceback (most recent call last):   File
    min_ending_here = sys.maxsize			      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_GLOBAL 0 ( sys )					  "XLM/dis_script.py", line 60, in <module>	exec
    min_so_far = sys.maxsize				      2 LOAD_ATTR 1 ( maxsize )					    2 LOAD_ATTR 1 ( maxsize )					  (item)   File "main.py", line 38, in <module>	  Fi
    for i in range ( n ) :				      4 STORE_FAST 2 ( min_ending_here )			    4 STORE_FAST 1 ( min_min_here )				  le "<dis>", line 2, in smallestSumSubarr TypeError
	if ( min_ending_here > 0 ) :			      								    								  : 'int' object is not subscriptable
	    min_ending_here = arr [ i ]			      3 6 LOAD_GLOBAL 0 ( sys )					    3 6 LOAD_GLOBAL 0 ( sys )					  
	else :						      8 LOAD_ATTR 1 ( maxsize )					    8 LOAD_ATTR 1 ( maxsize )					  
	    min_ending_here += arr [ i ]		      10 STORE_FAST 3 ( min_so_far )				    10 STORE_FAST 2 ( min_so_far )				  
	min_so_far = min ( min_so_far , min_ending_here )     								    								  
    return min_so_far					      4 12 SETUP_LOOP 56 ( to 70 )				    4 12 SETUP_LOOP 74 ( to 92 )				  
							      14 LOAD_GLOBAL 2 ( range )				    14 LOAD_GLOBAL 2 ( range )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( min_min_here )				  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 44 ( to 68 )				    >> 22 FOR_ITER 74 ( to 90 )					  
							      24 STORE_FAST 4 ( i )					    24 STORE_FAST 3 ( i )					  
							      								    								  
							      5 26 LOAD_FAST 2 ( min_ending_here )			    5 26 LOAD_FAST 2 ( min_so_far )				  
							      28 LOAD_CONST 1 ( 0 )					    28 LOAD_FAST 3 ( i )					  
							      30 COMPARE_OP 4 ( > )					    30 BINARY_SUBSCR						  
							      32 POP_JUMP_IF_FALSE 44					    32 LOAD_FAST 0 ( arr )					  
							      								    34 COMPARE_OP 7 ( not in )					  
							      6 34 LOAD_FAST 0 ( arr )					    36 POP_JUMP_IF_FALSE 22					  
							      36 LOAD_FAST 4 ( i )					    								  
							      38 BINARY_SUBSCR						    6 38 LOAD_FAST 2 ( min_so_far )				  
							      40 STORE_FAST 2 ( min_ending_here )			    40 LOAD_FAST 3 ( i )					  
							      42 JUMP_FORWARD 12 ( to 56 )				    42 BINARY_SUBSCR						  
							      								    44 LOAD_FAST 0 ( arr )					  
							      8 >> 44 LOAD_FAST 2 ( min_ending_here )			    46 COMPARE_OP 7 ( not in )					  
							      46 LOAD_FAST 0 ( arr )					    48 POP_JUMP_IF_FALSE 22					  
							      48 LOAD_FAST 4 ( i )					    								  
							      50 BINARY_SUBSCR						    7 50 LOAD_FAST 2 ( min_so_far )				  
							      52 INPLACE_ADD						    52 LOAD_FAST 3 ( i )					  
							      54 STORE_FAST 2 ( min_ending_here )			    54 BINARY_SUBSCR						  
							      								    56 LOAD_FAST 0 ( arr )					  
							      9 >> 56 LOAD_GLOBAL 3 ( min )				    58 COMPARE_OP 7 ( not in )					  
							      58 LOAD_FAST 3 ( min_so_far )				    60 POP_JUMP_IF_FALSE 22					  
							      60 LOAD_FAST 2 ( min_ending_here )			    								  
							      62 CALL_FUNCTION 2					    8 62 LOAD_FAST 2 ( min_so_far )				  
							      64 STORE_FAST 3 ( min_so_far )				    64 LOAD_FAST 3 ( i )					  
							      66 JUMP_ABSOLUTE 22					    66 BINARY_SUBSCR						  
							      >> 68 POP_BLOCK						    68 LOAD_FAST 0 ( arr )					  
							      								    70 COMPARE_OP 7 ( not in )					  
							      10 >> 70 LOAD_FAST 3 ( min_so_far )			    72 POP_JUMP_IF_FALSE 22					  
							      72 RETURN_VALUE NEW_LINE					    								  
							      								    9 74 LOAD_FAST 2 ( min_so_far )				  
							      								    76 LOAD_FAST 0 ( arr )					  
							      								    78 LOAD_FAST 3 ( i )					  
							      								    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 0 ( arr )					  
							      								    84 LOAD_FAST 3 ( i )					  
							      								    86 STORE_SUBSCR						  
							      								    88 JUMP_ABSOLUTE 22						  
							      								    >> 90 POP_BLOCK						  
							      								    								  
							      								    10 >> 92 LOAD_FAST 2 ( min_so_far )				  
							      								    94 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
def ceilSearch ( arr , low , high , x ) :		      Disassembly of <code object ceilSearch at 0x7f33e2644f60, fil Disassembly of <code object ceilSearch at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    if x <= arr [ low ] :				      2 0 LOAD_FAST 3 ( x )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
	return low					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 1 ( low )					  item in run_dis_script():   File "XLM/dis_script.p
    i = low						      4 LOAD_FAST 1 ( low )					    4 COMPARE_OP 1 ( <= )					  y", line 54, in run_dis_script     hyp_co = mco.to
    for i in range ( high ) :				      6 BINARY_SUBSCR						    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
	if arr [ i ] == x :				      8 COMPARE_OP 1 ( <= )					    								  assembler.py", line 81, in to_co     co_consts.app
	    return i					      10 POP_JUMP_IF_FALSE 16					    3 8 LOAD_FAST 0 ( arr )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	if arr [ i ] < x and arr [ i + 1 ] >= x :	      								    10 LOAD_FAST 1 ( low )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    return i + 1				      3 12 LOAD_FAST 1 ( low )					    12 BINARY_SUBSCR						  co	 self.co_cellvars, ValueError: code: varname
    return - 1						      14 RETURN_VALUE						    14 RETURN_VALUE						  s is too small
							      								    								  
							      4 >> 16 LOAD_FAST 1 ( low )				    4 >> 16 LOAD_FAST 0 ( arr )					  
							      18 STORE_FAST 4 ( i )					    18 LOAD_FAST 1 ( low )					  
							      								    20 BINARY_SUBSCR						  
							      5 20 SETUP_LOOP 68 ( to 90 )				    22 RETURN_VALUE NEW_LINE					  
							      22 LOAD_GLOBAL 0 ( range )				    								  
							      24 LOAD_FAST 2 ( high )					    								  
							      26 CALL_FUNCTION 1					    								  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 56 ( to 88 )				    								  
							      32 STORE_FAST 4 ( i )					    								  
							      								    								  
							      6 34 LOAD_FAST 0 ( arr )					    								  
							      36 LOAD_FAST 4 ( i )					    								  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_FAST 3 ( x )					    								  
							      42 COMPARE_OP 2 ( == )					    								  
							      44 POP_JUMP_IF_FALSE 50					    								  
							      								    								  
							      7 46 LOAD_FAST 4 ( i )					    								  
							      48 RETURN_VALUE						    								  
							      								    								  
							      8 >> 50 LOAD_FAST 0 ( arr )				    								  
							      52 LOAD_FAST 4 ( i )					    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_FAST 3 ( x )					    								  
							      58 COMPARE_OP 0 ( < )					    								  
							      60 POP_JUMP_IF_FALSE 30					    								  
							      62 LOAD_FAST 0 ( arr )					    								  
							      64 LOAD_FAST 4 ( i )					    								  
							      66 LOAD_CONST 1 ( 1 )					    								  
							      68 BINARY_ADD						    								  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_FAST 3 ( x )					    								  
							      74 COMPARE_OP 5 ( >= )					    								  
							      76 POP_JUMP_IF_FALSE 30					    								  
							      								    								  
							      9 78 LOAD_FAST 4 ( i )					    								  
							      80 LOAD_CONST 1 ( 1 )					    								  
							      82 BINARY_ADD						    								  
							      84 RETURN_VALUE						    								  
							      86 JUMP_ABSOLUTE 30					    								  
							      >> 88 POP_BLOCK						    								  
							      								    								  
							      10 >> 90 LOAD_CONST 2 ( - 1 )				    								  
							      92 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	      CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER	    CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER		  CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER
--							      --							    --								  --
def areAnagram ( str1 , str2 ) :			      Disassembly of <code object areAnagram at 0x7f33e2653f60, fil Disassembly of <code object areAnagram at 0x7f2b0163dc90, fil error : /bin/bash: line 1: 12321 Segmentation faul
    n1 = len ( str1 )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    n2 = len ( str2 )					      2 LOAD_FAST 0 ( str1 )					    2 LOAD_FAST 0 ( str1 )					  ataset/bin/python XLM/dis_script.py --script_path
    if n1 != n2 :					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	return 0					      6 STORE_FAST 2 ( n1 )					    6 STORE_FAST 2 ( n1 )					  24/eval_scripts/python_sa-dis_sa.valid/CHECK_WHETH
    str1 = sorted ( str1 )				      								    								  ER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER.dis
    str2 = sorted ( str2 )				      3 8 LOAD_GLOBAL 0 ( len )					    3 8 LOAD_GLOBAL 0 ( len )					  
    for i in range ( 0 , n1 ) :				      10 LOAD_FAST 1 ( str2 )					    10 LOAD_FAST 0 ( str1 )					  
	if str1 [ i ] != str2 [ i ] :			      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	    return 0					      14 STORE_FAST 3 ( n2 )					    14 LOAD_FAST 2 ( n1 )					  
    return 1						      								    16 COMPARE_OP 3 ( != )					  
							      4 16 LOAD_FAST 2 ( n1 )					    18 POP_JUMP_IF_FALSE 32					  
							      18 LOAD_FAST 3 ( n2 )					    								  
							      20 COMPARE_OP 3 ( != )					    4 20 LOAD_CONST 1 ( 0 )					  
							      22 POP_JUMP_IF_FALSE 28					    22 RETURN_VALUE						  
							      								    								  
							      5 24 LOAD_CONST 1 ( 0 )					    5 >> 24 LOAD_GLOBAL 0 ( len )				  
							      26 RETURN_VALUE						    26 LOAD_FAST 0 ( str1 )					  
							      								    28 CALL_FUNCTION 1						  
							      6 >> 28 LOAD_GLOBAL 1 ( sorted )				    30 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_FAST 0 ( str1 )					    32 COMPARE_OP 3 ( != )					  
							      32 CALL_FUNCTION 1					    34 POP_JUMP_IF_FALSE 40					  
							      34 STORE_FAST 0 ( str1 )					    								  
							      								    6 36 LOAD_CONST 1 ( 0 )					  
							      7 36 LOAD_GLOBAL 1 ( sorted )				    38 RETURN_VALUE						  
							      38 LOAD_FAST 1 ( str2 )					    								  
							      40 CALL_FUNCTION 1					    7 >> 40 LOAD_CONST 1 ( 0 )					  
							      42 STORE_FAST 1 ( str2 )					    42 RETURN_VALUE						  
							      								    								  
							      8 44 SETUP_LOOP 38 ( to 84 )				    8 >> 44 LOAD_CONST 1 ( 0 )					  
							      46 LOAD_GLOBAL 2 ( range )				    46 RETURN_VALUE NEW_LINE					  
							      48 LOAD_CONST 1 ( 0 )					    								  
							      50 LOAD_FAST 2 ( n1 )					    								  
							      52 CALL_FUNCTION 2					    								  
							      54 GET_ITER						    								  
							      >> 56 FOR_ITER 24 ( to 82 )				    								  
							      58 STORE_FAST 4 ( i )					    								  
							      								    								  
							      9 60 LOAD_FAST 0 ( str1 )					    								  
							      62 LOAD_FAST 4 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 1 ( str2 )					    								  
							      68 LOAD_FAST 4 ( i )					    								  
							      70 BINARY_SUBSCR						    								  
							      72 COMPARE_OP 3 ( != )					    								  
							      74 POP_JUMP_IF_FALSE 56					    								  
							      								    								  
							      10 76 LOAD_CONST 1 ( 0 )					    								  
							      78 RETURN_VALUE						    								  
							      80 JUMP_ABSOLUTE 56					    								  
							      >> 82 POP_BLOCK						    								  
							      								    								  
							      11 >> 84 LOAD_CONST 2 ( 1 )				    								  
							      86 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
--							      --							    --								  --
def getOddOccurrence ( arr , arr_size ) :		      Disassembly of <code object getOddOccurrence at 0x7f33e26494b Disassembly of <code object getOddOcOcOcOcOcOcOcOcOcOcOcOcOcO error : Traceback (most recent call last):   File
    for i in range ( 0 , arr_size ) :			      2 0 SETUP_LOOP 86 ( to 88 )				    								  "XLM/dis_script.py", line 59, in <module>	for
	count = 0					      2 LOAD_GLOBAL 0 ( range )					    								  item in run_dis_script():   File "XLM/dis_script.p
	for j in range ( 0 , arr_size ) :		      4 LOAD_CONST 1 ( 0 )					    								  y", line 54, in run_dis_script     hyp_co = mco.to
	    if arr [ i ] == arr [ j ] :			      6 LOAD_FAST 1 ( arr_size )				    								  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
		count += 1				      8 CALL_FUNCTION 2						    								  assembler.py", line 81, in to_co     co_consts.app
	if ( count % 2 != 0 ) :				      10 GET_ITER						    								  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	    return arr [ i ]				      >> 12 FOR_ITER 72 ( to 86 )				    								  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    return - 1						      14 STORE_FAST 2 ( i )					    								  co	 self.co_cellvars, ValueError: code: varname
							      								    								  s is too small
							      3 16 LOAD_CONST 1 ( 0 )					    								  
							      18 STORE_FAST 3 ( count )					    								  
							      								    								  
							      4 20 SETUP_LOOP 42 ( to 64 )				    								  
							      22 LOAD_GLOBAL 0 ( range )				    								  
							      24 LOAD_CONST 1 ( 0 )					    								  
							      26 LOAD_FAST 1 ( arr_size )				    								  
							      28 CALL_FUNCTION 2					    								  
							      30 GET_ITER						    								  
							      >> 32 FOR_ITER 28 ( to 62 )				    								  
							      34 STORE_FAST 4 ( j )					    								  
							      								    								  
							      5 36 LOAD_FAST 0 ( arr )					    								  
							      38 LOAD_FAST 2 ( i )					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 4 ( j )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 COMPARE_OP 2 ( == )					    								  
							      50 POP_JUMP_IF_FALSE 32					    								  
							      								    								  
							      6 52 LOAD_FAST 3 ( count )				    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 INPLACE_ADD						    								  
							      58 STORE_FAST 3 ( count )					    								  
							      60 JUMP_ABSOLUTE 32					    								  
							      >> 62 POP_BLOCK						    								  
							      								    								  
							      7 >> 64 LOAD_FAST 3 ( count )				    								  
							      66 LOAD_CONST 3 ( 2 )					    								  
							      68 BINARY_MODULO						    								  
							      70 LOAD_CONST 1 ( 0 )					    								  
							      72 COMPARE_OP 3 ( != )					    								  
							      74 POP_JUMP_IF_FALSE 12					    								  
							      								    								  
							      8 76 LOAD_FAST 0 ( arr )					    								  
							      78 LOAD_FAST 2 ( i )					    								  
							      80 BINARY_SUBSCR						    								  
							      82 RETURN_VALUE						    								  
							      84 JUMP_ABSOLUTE 12					    								  
							      >> 86 POP_BLOCK						    								  
							      								    								  
							      9 >> 88 LOAD_CONST 4 ( - 1 )				    								  
							      90 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_<unk> CATION			      CHECK_INTEGER_OVERFLOW_<unk> CATION			    CHECK_INTEGER_OVERFLOW_<unk> CATION				  CHECK_INTEGER_OVERFLOW_<unk> CATION
--							      --							    --								  --
def isOverflow ( a , b ) :				      Disassembly of <code object isOverflow at 0x7f33e26494b0, fil Disassembly of <code object isOverflow at 0x7f2b0163dc90, fil script_not_found : None
    if ( a == 0 or b == 0 ) :				      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
	return False					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    result = a * b					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    if ( result >= 9223372036854775807 or result <= - 9223372 6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 14					  
	result = 0					      8 LOAD_FAST 1 ( b )					    8 LOAD_FAST 0 ( a )						  
    if ( a == ( result // b ) ) :			      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
	print ( result // b )				      12 COMPARE_OP 2 ( == )					    12 COMPARE_OP 2 ( == )					  
	return False					      14 POP_JUMP_IF_FALSE 20					    >> 14 RETURN_VALUE NEW_LINE					  
    else :						      								    								  
	return True					      3 >> 16 LOAD_CONST 2 ( False )				    								  
							      18 RETURN_VALUE						    								  
							      								    								  
							      4 >> 20 LOAD_FAST 0 ( a )					    								  
							      22 LOAD_FAST 1 ( b )					    								  
							      24 BINARY_MULTIPLY					    								  
							      26 STORE_FAST 2 ( result )				    								  
							      								    								  
							      5 28 LOAD_FAST 2 ( result )				    								  
							      30 LOAD_CONST 3 ( 9223372036854775807 )			    								  
							      32 COMPARE_OP 5 ( >= )					    								  
							      34 POP_JUMP_IF_TRUE 44					    								  
							      36 LOAD_FAST 2 ( result )					    								  
							      38 LOAD_CONST 4 ( - 9223372036854775808 )			    								  
							      40 COMPARE_OP 1 ( <= )					    								  
							      42 POP_JUMP_IF_FALSE 48					    								  
							      								    								  
							      6 >> 44 LOAD_CONST 1 ( 0 )				    								  
							      46 STORE_FAST 2 ( result )				    								  
							      								    								  
							      7 >> 48 LOAD_FAST 0 ( a )					    								  
							      50 LOAD_FAST 2 ( result )					    								  
							      52 LOAD_FAST 1 ( b )					    								  
							      54 BINARY_FLOOR_DIVIDE					    								  
							      56 COMPARE_OP 2 ( == )					    								  
							      58 POP_JUMP_IF_FALSE 76					    								  
							      								    								  
							      8 60 LOAD_GLOBAL 0 ( print )				    								  
							      62 LOAD_FAST 2 ( result )					    								  
							      64 LOAD_FAST 1 ( b )					    								  
							      66 BINARY_FLOOR_DIVIDE					    								  
							      68 CALL_FUNCTION 1					    								  
							      70 POP_TOP						    								  
							      								    								  
							      9 72 LOAD_CONST 2 ( False )				    								  
							      74 RETURN_VALUE						    								  
							      								    								  
							      11 >> 76 LOAD_CONST 5 ( True )				    								  
							      78 RETURN_VALUE						    								  
							      80 LOAD_CONST 0 ( None )					    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
def findElements ( arr , n ) :				      Disassembly of <code object findElements at 0x7f33e26494b0, f Disassembly of <code object findElements at 0x7f2b0163dc90, f script_not_found : None
    for i in range ( n ) :				      2 0 SETUP_LOOP 88 ( to 90 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	count = 0					      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for j in range ( 0 , n ) :			      4 LOAD_FAST 1 ( n )					    4 LOAD_FAST 1 ( n )						  
	    if arr [ j ] > arr [ i ] :			      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
		count = count + 1			      8 GET_ITER						    8 GET_ITER							  
	if count >= 2 :					      >> 10 FOR_ITER 76 ( to 88 )				    >> 10 FOR_ITER 56 ( to 64 )					  
	    print ( arr [ i ] , end = " " )		      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 LOAD_CONST 1 ( 0 )					    3 14 SETUP_LOOP 48 ( to 62 )				  
							      16 STORE_FAST 3 ( count )					    16 LOAD_GLOBAL 1 ( range )					  
							      								    18 LOAD_CONST 1 ( 0 )					  
							      4 18 SETUP_LOOP 42 ( to 62 )				    20 LOAD_FAST 2 ( i )					  
							      20 LOAD_GLOBAL 0 ( range )				    22 CALL_FUNCTION 2						  
							      22 LOAD_CONST 1 ( 0 )					    24 GET_ITER							  
							      24 LOAD_FAST 1 ( n )					    >> 26 FOR_ITER 40 ( to 60 )					  
							      26 CALL_FUNCTION 2					    28 STORE_FAST 3 ( j )					  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 28 ( to 60 )				    4 30 LOAD_FAST 3 ( j )					  
							      32 STORE_FAST 4 ( j )					    32 LOAD_FAST 2 ( i )					  
							      								    34 COMPARE_OP 4 ( > )					  
							      5 34 LOAD_FAST 0 ( arr )					    36 POP_JUMP_IF_FALSE 26					  
							      36 LOAD_FAST 4 ( j )					    								  
							      38 BINARY_SUBSCR						    5 38 LOAD_FAST 3 ( j )					  
							      40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 2 ( i )					  
							      42 LOAD_FAST 2 ( i )					    42 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    44 STORE_FAST 4 ( j )					  
							      46 COMPARE_OP 4 ( > )					    								  
							      48 POP_JUMP_IF_FALSE 30					    6 46 LOAD_FAST 3 ( j )					  
							      								    48 LOAD_FAST 2 ( i )					  
							      6 50 LOAD_FAST 3 ( count )				    50 BINARY_SUBSCR						  
							      52 LOAD_CONST 2 ( 1 )					    52 LOAD_FAST 4 ( j )					  
							      54 BINARY_ADD						    54 BINARY_SUBSCR						  
							      56 STORE_FAST 3 ( count )					    56 LOAD_FAST 4 ( j )					  
							      58 JUMP_ABSOLUTE 30					    58 BINARY_SUBSCR						  
							      >> 60 POP_BLOCK						    60 LOAD_FAST 4 ( j )					  
							      								    62 BINARY_SUBSCR						  
							      7 >> 62 LOAD_FAST 3 ( count )				    64 LOAD_FAST 4 ( j )					  
							      64 LOAD_CONST 3 ( 2 )					    66 BINARY_SUBSCR						  
							      66 COMPARE_OP 5 ( >= )					    68 LOAD_FAST 4 ( j )					  
							      68 POP_JUMP_IF_FALSE 10					    70 BINARY_SUBSCR						  
							      								    72 LOAD_FAST 4 ( j )					  
							      8 70 LOAD_GLOBAL 1 ( print )				    74 BINARY_SUBSCR						  
							      72 LOAD_FAST 0 ( arr )					    76 LOAD_FAST 4 ( j )					  
							      74 LOAD_FAST 2 ( i )					    78 BINARY_SUBSCR						  
							      76 BINARY_SUBSCR						    80 LOAD_FAST 4 ( j )					  
							      78 LOAD_CONST 4 ( ' ' )					    82 BINARY_SUBSCR						  
							      80 LOAD_CONST 5 ( ( 'end' , ) )				    84 LOAD_FAST 4 ( j )					  
							      82 CALL_FUNCTION_KW 2					    86 STORE_SUBSCR						  
							      84 POP_TOP						    								  
							      86 JUMP_ABSOLUTE 10					    7 88 LOAD_FAST 3 ( j )					  
							      >> 88 POP_BLOCK						    90 LOAD_FAST 4 ( j )					  
							      >> 90 LOAD_CONST 0 ( None )				    92 BINARY_SUBSCR						  
							      92 RETURN_VALUE NEW_LINE					    94 LOAD_FAST 4 ( j )					  
							      								    96 BINARY_SUBSCR						  
							      								    98 LOAD_FAST 4 ( j )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    8 102 LOAD_FAST 3 ( j )					  
							      								    104 LOAD_FAST 4 ( j )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 4 ( j )					  
							      								    110 STORE_SUBSCR						  
							      								    								  
							      								    9 110 LOAD_FAST 3 ( j )					  
							      								    112 LOAD_FAST 4 ( j )					  
							      								    114 STORE_SUBSCR						  
							      								    116 JUMP_ABSOLUTE 26					  
							      								    >> 118 POP_BLOCK						  
							      								    								  
							      								    10 >> 120 LOAD_FAST 3 ( j )					  
							      								    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER					      SUM_FACTORS_NUMBER					    SUM_FACTORS_NUMBER						  SUM_FACTORS_NUMBER
--							      --							    --								  --
def divSum ( n ) :					      Disassembly of <code object divSum at 0x7f33e2653ed0, file "< Disassembly of <code object divSum at 0x7f2b01639660, file "< error : /bin/bash: line 1: 12334 Segmentation faul
    result = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :  2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  ataset/bin/python XLM/dis_script.py --script_path
	if ( n % i == 0 ) :				      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	    if ( i == ( n / i ) ) :			      3 4 SETUP_LOOP 82 ( to 88 )				    3 4 SETUP_LOOP 74 ( to 76 )					  24/eval_scripts/python_sa-dis_sa.valid/SUM_FACTORS
		result = result + i			      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  _NUMBER.dis
	    else :					      8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 2 )					  
		result = result + ( i + n // i )	      10 LOAD_GLOBAL 1 ( int )					    10 LOAD_GLOBAL 1 ( int )					  
    return ( result + n + 1 )				      12 LOAD_GLOBAL 2 ( math )					    12 LOAD_FAST 0 ( n )					  
							      14 LOAD_METHOD 3 ( sqrt )					    14 CALL_FUNCTION 1						  
							      16 LOAD_FAST 0 ( n )					    16 LOAD_CONST 2 ( 2 )					  
							      18 CALL_METHOD 1						    18 BINARY_FLOOR_DIVIDE					  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 2						  
							      22 LOAD_CONST 3 ( 1 )					    22 GET_ITER							  
							      24 BINARY_ADD						    >> 24 FOR_ITER 74 ( to 74 )					  
							      26 CALL_FUNCTION 2					    26 STORE_FAST 2 ( i )					  
							      28 GET_ITER						    								  
							      >> 30 FOR_ITER 54 ( to 86 )				    4 28 LOAD_FAST 0 ( n )					  
							      32 STORE_FAST 2 ( i )					    30 LOAD_CONST 3 ( 1 )					  
							      								    32 BINARY_SUBTRACT						  
							      4 34 LOAD_FAST 0 ( n )					    34 STORE_FAST 1 ( result )					  
							      36 LOAD_FAST 2 ( i )					    								  
							      38 BINARY_MODULO						    5 36 LOAD_FAST 1 ( result )					  
							      40 LOAD_CONST 1 ( 0 )					    38 LOAD_CONST 4 ( 2 )					  
							      42 COMPARE_OP 2 ( == )					    40 BINARY_MODULO						  
							      44 POP_JUMP_IF_FALSE 30					    42 STORE_FAST 1 ( result )					  
							      								    								  
							      5 46 LOAD_FAST 2 ( i )					    6 44 LOAD_FAST 1 ( result )					  
							      48 LOAD_FAST 0 ( n )					    46 LOAD_CONST 5 ( 3 )					  
							      50 LOAD_FAST 2 ( i )					    48 BINARY_MODULO						  
							      52 BINARY_TRUE_DIVIDE					    50 STORE_FAST 1 ( result )					  
							      54 COMPARE_OP 2 ( == )					    								  
							      56 POP_JUMP_IF_FALSE 68					    7 52 LOAD_FAST 1 ( result )					  
							      								    54 LOAD_CONST 6 ( 4 )					  
							      6 58 LOAD_FAST 1 ( result )				    56 BINARY_MODULO						  
							      60 LOAD_FAST 2 ( i )					    58 STORE_FAST 1 ( result )					  
							      62 BINARY_ADD						    								  
							      64 STORE_FAST 1 ( result )				    8 60 LOAD_FAST 1 ( result )					  
							      66 JUMP_ABSOLUTE 30					    62 LOAD_CONST 7 ( 4 )					  
							      								    64 BINARY_MODULO						  
							      8 >> 68 LOAD_FAST 1 ( result )				    66 STORE_FAST 1 ( result )					  
							      70 LOAD_FAST 2 ( i )					    								  
							      72 LOAD_FAST 0 ( n )					    9 68 LOAD_FAST 1 ( result )					  
							      74 LOAD_FAST 2 ( i )					    70 LOAD_CONST 8 ( 5 )					  
							      76 BINARY_FLOOR_DIVIDE					    72 BINARY_MODULO						  
							      78 BINARY_ADD						    74 STORE_FAST 1 ( result )					  
							      80 BINARY_ADD						    76 JUMP_ABSOLUTE 24						  
							      82 STORE_FAST 1 ( result )				    >> 78 POP_BLOCK						  
							      84 JUMP_ABSOLUTE 30					    								  
							      >> 86 POP_BLOCK						    10 >> 80 LOAD_FAST 1 ( result )				  
							      								    82 RETURN_VALUE NEW_LINE					  
							      9 >> 88 LOAD_FAST 1 ( result )				    								  
							      90 LOAD_FAST 0 ( n )					    								  
							      92 BINARY_ADD						    								  
							      94 LOAD_CONST 3 ( 1 )					    								  
							      96 BINARY_ADD						    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH						      BINARY_SEARCH						    BINARY_SEARCH						  BINARY_SEARCH
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      Disassembly of <code object binarySearch at 0x7f33e26494b0, f Disassembly of <code object binarySearch at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    if r >= l :						      2 0 LOAD_FAST 2 ( r )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
	mid = l + ( r - l ) // 2			      2 LOAD_FAST 1 ( l )					    2 LOAD_FAST 1 ( l )						  (item)   File "main.py", line 37, in <module>	  Fi
	if arr [ mid ] == x :				      4 COMPARE_OP 5 ( >= )					    4 COMPARE_OP 5 ( >= )					  le "<dis>", line 2, in binarySearch TypeError: '>=
	    return mid					      6 POP_JUMP_IF_FALSE 90					    6 POP_JUMP_IF_FALSE 22					  ' not supported between instances of 'list' and 'i
	elif arr [ mid ] > x :				      								    								  nt'
	    return binarySearch ( arr , l , mid - 1 , x )     3 8 LOAD_FAST 1 ( l )					    3 8 LOAD_FAST 0 ( arr )					  
	else :						      10 LOAD_FAST 2 ( r )					    10 LOAD_FAST 1 ( l )					  
	    return binarySearch ( arr , mid + 1 , r , x )     12 LOAD_FAST 1 ( l )					    12 BINARY_SUBTRACT						  
    else :						      14 BINARY_SUBTRACT					    14 LOAD_CONST 1 ( 2 )					  
	return - 1					      16 LOAD_CONST 1 ( 2 )					    16 BINARY_FLOOR_DIVIDE					  
							      18 BINARY_FLOOR_DIVIDE					    18 STORE_FAST 2 ( mid )					  
							      20 BINARY_ADD						    20 JUMP_FORWARD 4 ( to 30 )					  
							      22 STORE_FAST 4 ( mid )					    								  
							      								    5 >> 22 LOAD_GLOBAL 0 ( binarySearch )			  
							      4 24 LOAD_FAST 0 ( arr )					    24 LOAD_FAST 0 ( arr )					  
							      26 LOAD_FAST 4 ( mid )					    26 LOAD_FAST 1 ( l )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBTRACT						  
							      30 LOAD_FAST 3 ( x )					    30 LOAD_CONST 2 ( 1 )					  
							      32 COMPARE_OP 2 ( == )					    32 BINARY_SUBTRACT						  
							      34 POP_JUMP_IF_FALSE 40					    34 LOAD_FAST 2 ( mid )					  
							      								    36 LOAD_CONST 3 ( ( 'end' , ) )				  
							      5 36 LOAD_FAST 4 ( mid )					    38 CALL_FUNCTION_KW 2					  
							      38 RETURN_VALUE						    40 STORE_FAST 3 ( end )					  
							      								    								  
							      6 >> 40 LOAD_FAST 0 ( arr )				    6 42 LOAD_FAST 3 ( end )					  
							      42 LOAD_FAST 4 ( mid )					    44 LOAD_CONST 4 ( 0 )					  
							      44 BINARY_SUBSCR						    46 COMPARE_OP 5 ( >= )					  
							      46 LOAD_FAST 3 ( x )					    48 POP_JUMP_IF_FALSE 50					  
							      48 COMPARE_OP 4 ( > )					    								  
							      50 POP_JUMP_IF_FALSE 70					    7 50 LOAD_FAST 0 ( arr )					  
							      								    52 LOAD_FAST 1 ( l )					  
							      7 52 LOAD_GLOBAL 0 ( binarySearch )			    54 BINARY_SUBTRACT						  
							      54 LOAD_FAST 0 ( arr )					    56 LOAD_CONST 2 ( 1 )					  
							      56 LOAD_FAST 1 ( l )					    58 BINARY_SUBTRACT						  
							      58 LOAD_FAST 4 ( mid )					    60 STORE_FAST 2 ( mid )					  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 BINARY_SUBTRACT					    8 >> 62 LOAD_GLOBAL 1 ( binarySearch )			  
							      64 LOAD_FAST 3 ( x )					    64 LOAD_FAST 0 ( arr )					  
							      66 CALL_FUNCTION 4					    66 LOAD_FAST 1 ( l )					  
							      68 RETURN_VALUE						    68 BINARY_SUBTRACT						  
							      								    70 LOAD_CONST 2 ( 1 )					  
							      9 >> 70 LOAD_GLOBAL 0 ( binarySearch )			    72 BINARY_SUBTRACT						  
							      72 LOAD_FAST 0 ( arr )					    74 LOAD_FAST 2 ( mid )					  
							      74 LOAD_FAST 4 ( mid )					    76 BINARY_SUBTRACT						  
							      76 LOAD_CONST 2 ( 1 )					    78 LOAD_CONST 2 ( 1 )					  
							      78 BINARY_ADD						    80 BINARY_SUBTRACT						  
							      80 LOAD_FAST 2 ( r )					    82 LOAD_FAST 2 ( mid )					  
							      82 LOAD_FAST 3 ( x )					    84 BINARY_SUBTRACT						  
							      84 CALL_FUNCTION 4					    86 LOAD_CONST 2 ( 1 )					  
							      86 RETURN_VALUE						    88 BINARY_SUBTRACT						  
							      88 JUMP_FORWARD 4 ( to 94 )				    90 LOAD_FAST 2 ( mid )					  
							      								    92 BINARY_SUBTRACT						  
							      11 >> 90 LOAD_CONST 3 ( - 1 )				    94 LOAD_CONST 2 ( 1 )					  
							      92 RETURN_VALUE						    96 BINARY_SUBTRACT						  
							      >> 94 LOAD_CONST 0 ( None )				    98 LOAD_FAST 2 ( mid )					  
							      96 RETURN_VALUE NEW_LINE					    100 BINARY_SUBTRACT						  
							      								    102 LOAD_CONST 2 ( 1 )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 LOAD_FAST 2 ( mid )					  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_CONST 2 ( 1 )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 LOAD_FAST 2 ( mid )					  
							      								    116 BINARY_SUBTRACT						  
							      								    118 LOAD_CONST 2 ( 1 )					  
							      								    120 BINARY_SUBTRACT						  
							      								    122 LOAD_FAST 2 ( mid )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 LOAD_CONST 2 ( 1 )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 LOAD_FAST 2 ( mid )					  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_CONST 2 ( 1 )					  
							      								    136 BINARY_SUBTRACT						  
							      								    138 LOAD_FAST 2 ( mid )					  
							      								    140 BINARY_SUBTRACT						  
							      								    142 LOAD_CONST 2 ( 1 )					  
							      								    144 BINARY_SUBTRACT						  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 2 ( mid )					  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_CONST 2 ( 1 )					  
							      								    154 BINARY_SUBTRACT						  
							      								    156 LOAD_FAST 2 ( mid )					  
							      								    158 BINARY_SUBTRACT						  
							      								    160 LOAD_CONST 2 ( 1 )					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 LOAD_FAST 2 ( mid )					  
							      								    166 BINARY_SUBTRACT						  
							      								    168 BINARY_TRUE_DIVIDE					  
							      								    170 BINARY_SUBTRACT						  
							      								    172 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1
--							      --							    --								  --
def findExtra ( arr1 , arr2 , n ) :			      Disassembly of <code object findExtra at 0x7f33e2649a50, file Disassembly of <code object findExtra at 0x7f2b0163dc90, file error : Traceback (most recent call last):   File
    index = n						      2 0 LOAD_FAST 2 ( n )					    2 0 LOAD_FAST 0 ( arr1 )					  "XLM/dis_script.py", line 60, in <module>	exec
    left = 0						      2 STORE_FAST 3 ( index )					    2 STORE_FAST 2 ( index )					  (item)   File "main.py", line 38, in <module>	  Fi
    right = n - 1					      								    								  le "<dis>", line 2, in findExtra TypeError: '<=' n
    while ( left <= right ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  ot supported between instances of 'list' and 'int'
	mid = ( int ) ( ( left + right ) / 2 )		      6 STORE_FAST 4 ( left )					    6 STORE_FAST 3 ( left )					  
	if ( arr2 [ mid ] == arr1 [ mid ] ) :		      								    								  
	    left = mid + 1				      4 8 LOAD_FAST 2 ( n )					    4 8 LOAD_CONST 2 ( 1 )					  
	else :						      10 LOAD_CONST 2 ( 1 )					    10 STORE_FAST 4 ( right )					  
	    index = mid					      12 BINARY_SUBTRACT					    								  
	    right = mid - 1				      14 STORE_FAST 5 ( right )					    5 12 SETUP_LOOP 64 ( to 76 )				  
    return index					      								    14 LOAD_FAST 1 ( arr2 )					  
							      5 16 SETUP_LOOP 66 ( to 84 )				    16 GET_ITER							  
							      >> 18 LOAD_FAST 4 ( left )				    >> 18 FOR_ITER 64 ( to 74 )					  
							      20 LOAD_FAST 5 ( right )					    20 STORE_FAST 5 ( i )					  
							      22 COMPARE_OP 1 ( <= )					    								  
							      24 POP_JUMP_IF_FALSE 82					    6 22 LOAD_FAST 2 ( index )					  
							      								    24 LOAD_FAST 3 ( left )					  
							      6 26 LOAD_GLOBAL 0 ( int )				    26 COMPARE_OP 1 ( <= )					  
							      28 LOAD_FAST 4 ( left )					    28 POP_JUMP_IF_FALSE 42					  
							      30 LOAD_FAST 5 ( right )					    								  
							      32 BINARY_ADD						    7 30 LOAD_FAST 4 ( right )					  
							      34 LOAD_CONST 3 ( 2 )					    32 LOAD_FAST 3 ( left )					  
							      36 BINARY_TRUE_DIVIDE					    34 BINARY_SUBTRACT						  
							      38 CALL_FUNCTION 1					    36 STORE_FAST 4 ( right )					  
							      40 STORE_FAST 6 ( mid )					    								  
							      								    8 38 LOAD_FAST 2 ( index )					  
							      7 42 LOAD_FAST 1 ( arr2 )					    40 LOAD_FAST 3 ( right )					  
							      44 LOAD_FAST 6 ( mid )					    42 BINARY_SUBTRACT						  
							      46 BINARY_SUBSCR						    44 STORE_FAST 3 ( left )					  
							      48 LOAD_FAST 0 ( arr1 )					    								  
							      50 LOAD_FAST 6 ( mid )					    9 46 LOAD_FAST 2 ( index )					  
							      52 BINARY_SUBSCR						    48 LOAD_FAST 3 ( right )					  
							      54 COMPARE_OP 2 ( == )					    50 BINARY_SUBTRACT						  
							      56 POP_JUMP_IF_FALSE 68					    52 LOAD_FAST 4 ( right )					  
							      								    54 BINARY_SUBTRACT						  
							      8 58 LOAD_FAST 6 ( mid )					    56 STORE_FAST 2 ( index )					  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 BINARY_ADD						    10 58 LOAD_FAST 2 ( index )					  
							      64 STORE_FAST 4 ( left )					    60 LOAD_FAST 3 ( right )					  
							      66 JUMP_ABSOLUTE 18					    62 BINARY_SUBTRACT						  
							      								    64 LOAD_FAST 4 ( right )					  
							      10 >> 68 LOAD_FAST 6 ( mid )				    66 BINARY_SUBTRACT						  
							      70 STORE_FAST 3 ( index )					    68 STORE_FAST 3 ( left )					  
							      								    								  
							      11 72 LOAD_FAST 6 ( mid )					    11 70 LOAD_FAST 2 ( index )					  
							      74 LOAD_CONST 2 ( 1 )					    72 LOAD_FAST 3 ( right )					  
							      76 BINARY_SUBTRACT					    74 BINARY_SUBTRACT						  
							      78 STORE_FAST 5 ( right )					    76 LOAD_FAST 3 ( right )					  
							      80 JUMP_ABSOLUTE 18					    78 BINARY_SUBTRACT						  
							      >> 82 POP_BLOCK						    80 LOAD_FAST 4 ( right )					  
							      								    82 BINARY_SUBTRACT						  
							      12 >> 84 LOAD_FAST 3 ( index )				    84 LOAD_FAST 3 ( right )					  
							      86 RETURN_VALUE NEW_LINE					    86 BINARY_SUBTRACT						  
							      								    88 LOAD_FAST 4 ( right )					  
							      								    90 BINARY_SUBTRACT						  
							      								    92 LOAD_FAST 3 ( right )					  
							      								    94 BINARY_SUBTRACT						  
							      								    96 BINARY_MULTIPLY						  
							      								    98 STORE_FAST 2 ( index )					  
							      								    								  
							      								    12 100 LOAD_FAST 2 ( index )				  
							      								    102 LOAD_FAST 3 ( right )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 STORE_FAST 3 ( left )					  
							      								    								  
							      								    13 108 LOAD_FAST 2 ( index )				  
							      								    110 LOAD_FAST 3 ( right )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 LOAD_FAST 4 ( right )					  
							      								    116 BINARY_SUBTRACT						  
							      								    118 STORE_FAST 3 ( right )					  
							      								    120 JUMP_ABSOLUTE 18					  
							      								    >> 122 POP_BLOCK						  
							      								    								  
							      								    14 >> 124 LOAD_FAST 2 ( index )				  
							      								    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV MINIMUM_TIME_TO_<unk> H_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIV
--							      --							    --								  --
def minTime ( arr , n ) :				      Disassembly of <code object minTime at 0x7f33e2644f60, file " Disassembly of <code object minTime at 0x7f2b0163dc90, file " script_not_found : None
    if ( n <= 0 ) : return 0				      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 0 ( arr )					  
    incl = arr [ 0 ]					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    excl = 0						      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    for i in range ( 1 , n ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	incl_new = arr [ i ] + min ( excl , incl )	      8 LOAD_CONST 1 ( 0 )					    								  
	excl_new = incl					      10 RETURN_VALUE						    3 8 LOAD_CONST 2 ( 0 )					  
	incl = incl_new					      								    10 RETURN_VALUE						  
	excl = excl_new					      3 >> 12 LOAD_FAST 0 ( arr )				    								  
    return min ( incl , excl )				      14 LOAD_CONST 1 ( 0 )					    4 >> 12 LOAD_FAST 0 ( arr )					  
							      16 BINARY_SUBSCR						    14 LOAD_CONST 1 ( 0 )					  
							      18 STORE_FAST 2 ( incl )					    16 BINARY_SUBSCR						  
							      								    18 STORE_FAST 1 ( excl )					  
							      4 20 LOAD_CONST 1 ( 0 )					    								  
							      22 STORE_FAST 3 ( excl )					    5 20 SETUP_LOOP 48 ( to 64 )				  
							      								    22 LOAD_GLOBAL 0 ( range )					  
							      5 24 SETUP_LOOP 48 ( to 74 )				    24 LOAD_CONST 1 ( 1 )					  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_FAST 1 ( excl )					  
							      28 LOAD_CONST 2 ( 1 )					    28 CALL_FUNCTION 2						  
							      30 LOAD_FAST 1 ( n )					    30 GET_ITER							  
							      32 CALL_FUNCTION 2					    >> 32 FOR_ITER 48 ( to 62 )					  
							      34 GET_ITER						    34 STORE_FAST 2 ( i )					  
							      >> 36 FOR_ITER 34 ( to 72 )				    								  
							      38 STORE_FAST 4 ( i )					    6 36 LOAD_FAST 0 ( arr )					  
							      								    38 LOAD_FAST 2 ( i )					  
							      6 40 LOAD_FAST 0 ( arr )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 4 ( i )					    42 STORE_FAST 3 ( newpath )					  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_GLOBAL 1 ( min )					    7 44 LOAD_FAST 0 ( arr )					  
							      48 LOAD_FAST 3 ( excl )					    46 LOAD_FAST 3 ( newpath )					  
							      50 LOAD_FAST 2 ( incl )					    48 COMPARE_OP 1 ( <= )					  
							      52 CALL_FUNCTION 2					    50 POP_JUMP_IF_FALSE 32					  
							      54 BINARY_ADD						    								  
							      56 STORE_FAST 5 ( incl_new )				    8 52 LOAD_FAST 0 ( arr )					  
							      								    54 LOAD_FAST 3 ( newpath )					  
							      7 58 LOAD_FAST 2 ( incl )					    56 COMPARE_OP 1 ( <= )					  
							      60 STORE_FAST 6 ( excl_new )				    58 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      8 62 LOAD_FAST 5 ( incl_new )				    9 60 LOAD_FAST 0 ( arr )					  
							      64 STORE_FAST 2 ( incl )					    62 LOAD_FAST 3 ( newpath )					  
							      								    64 STORE_SUBSCR						  
							      9 66 LOAD_FAST 6 ( excl_new )				    66 JUMP_ABSOLUTE 32						  
							      68 STORE_FAST 3 ( excl )					    >> 68 POP_BLOCK						  
							      70 JUMP_ABSOLUTE 36					    								  
							      >> 72 POP_BLOCK						    10 >> 70 LOAD_FAST 0 ( arr )				  
							      								    72 RETURN_VALUE NEW_LINE					  
							      10 >> 74 LOAD_GLOBAL 1 ( min )				    								  
							      76 LOAD_FAST 2 ( incl )					    								  
							      78 LOAD_FAST 3 ( excl )					    								  
							      80 CALL_FUNCTION 2					    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS	      COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		    COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		  COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS
--							      --							    --								  --
def countWords ( stri , n ) :				      Disassembly of <code object countWords at 0x7f33e2644930, fil Disassembly of <code object countWords at 0x7f2b01639660, fil error : Traceback (most recent call last):   File
    m = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  (item)   File "main.py", line 35, in <module>	  Fi
	m [ stri [ i ] ] = m.get ( stri [ i ] , 0 ) + 1	      4 STORE_FAST 2 ( m )					    4 STORE_FAST 2 ( m )					  le "<dis>", line 2, in countWords TypeError: 'list
    res = 0						      								    								  ' object cannot be interpreted as an integer
    for i in m.values ( ) :				      3 6 SETUP_LOOP 44 ( to 52 )				    3 6 SETUP_LOOP 64 ( to 70 )					  
	if i == 2 :					      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	    res += 1					      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( stri )					  
    return res						      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 32 ( to 50 )				    >> 16 FOR_ITER 48 ( to 68 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 2 ( m )					    4 20 LOAD_FAST 2 ( m )					  
							      22 LOAD_METHOD 2 ( get )					    22 LOAD_FAST 3 ( i )					  
							      24 LOAD_FAST 0 ( stri )					    24 BINARY_SUBSCR						  
							      26 LOAD_FAST 3 ( i )					    26 LOAD_FAST 1 ( n )					  
							      28 BINARY_SUBSCR						    28 COMPARE_OP 4 ( > )					  
							      30 LOAD_CONST 1 ( 0 )					    30 POP_JUMP_IF_FALSE 16					  
							      32 CALL_METHOD 2						    								  
							      34 LOAD_CONST 2 ( 1 )					    5 32 LOAD_FAST 2 ( m )					  
							      36 BINARY_ADD						    34 LOAD_FAST 3 ( i )					  
							      38 LOAD_FAST 2 ( m )					    36 BINARY_SUBSCR						  
							      40 LOAD_FAST 0 ( stri )					    38 LOAD_FAST 1 ( n )					  
							      42 LOAD_FAST 3 ( i )					    40 COMPARE_OP 4 ( > )					  
							      44 BINARY_SUBSCR						    42 POP_JUMP_IF_FALSE 16					  
							      46 STORE_SUBSCR						    								  
							      48 JUMP_ABSOLUTE 16					    6 44 LOAD_FAST 2 ( m )					  
							      >> 50 POP_BLOCK						    46 LOAD_FAST 3 ( i )					  
							      								    48 BINARY_SUBSCR						  
							      5 >> 52 LOAD_CONST 1 ( 0 )				    50 LOAD_FAST 1 ( n )					  
							      54 STORE_FAST 4 ( res )					    52 COMPARE_OP 4 ( > )					  
							      								    54 POP_JUMP_IF_FALSE 16					  
							      6 56 SETUP_LOOP 32 ( to 90 )				    								  
							      58 LOAD_FAST 2 ( m )					    7 56 LOAD_FAST 2 ( m )					  
							      60 LOAD_METHOD 3 ( values )				    58 LOAD_FAST 3 ( i )					  
							      62 CALL_METHOD 0						    60 BINARY_SUBSCR						  
							      64 GET_ITER						    62 LOAD_FAST 1 ( n )					  
							      >> 66 FOR_ITER 20 ( to 88 )				    64 BINARY_SUBSCR						  
							      68 STORE_FAST 3 ( i )					    66 LOAD_FAST 1 ( n )					  
							      								    68 BINARY_SUBSCR						  
							      7 70 LOAD_FAST 3 ( i )					    70 LOAD_FAST 1 ( n )					  
							      72 LOAD_CONST 3 ( 2 )					    72 BINARY_SUBSCR						  
							      74 COMPARE_OP 2 ( == )					    74 LOAD_FAST 1 ( n )					  
							      76 POP_JUMP_IF_FALSE 66					    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 1 ( n )					  
							      8 78 LOAD_FAST 4 ( res )					    80 BINARY_SUBSCR						  
							      80 LOAD_CONST 2 ( 1 )					    82 LOAD_FAST 1 ( n )					  
							      82 INPLACE_ADD						    84 BINARY_SUBSCR						  
							      84 STORE_FAST 4 ( res )					    86 LOAD_FAST 1 ( n )					  
							      86 JUMP_ABSOLUTE 66					    88 STORE_SUBSCR						  
							      >> 88 POP_BLOCK						    								  
							      								    8 >> 90 LOAD_FAST 2 ( m )					  
							      9 >> 90 LOAD_FAST 4 ( res )				    92 LOAD_FAST 3 ( i )					  
							      92 RETURN_VALUE NEW_LINE					    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( n )					  
							      								    98 STORE_SUBSCR						  
							      								    								  
							      								    9 100 LOAD_FAST 2 ( m )					  
							      								    102 LOAD_FAST 3 ( i )					  
							      								    104 STORE_SUBSCR						  
							      								    								  
							      								    10 106 LOAD_FAST 2 ( m )					  
							      								    108 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
def countPairsWithDiffK ( arr , n , k ) :		      Disassembly of <code object countPairsWithDiffK at 0x7f33e264 Disassembly of <code object countPairsWithDiffK at 0x7f2b0163 error : /bin/bash: line 1: 12372 Segmentation faul
    count = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    for i in range ( 0 , n ) :				      2 STORE_FAST 3 ( count )					    2 STORE_FAST 2 ( count )					  ataset/bin/python XLM/dis_script.py --script_path
	for j in range ( i + 1 , n ) :			      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	    if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  3 4 SETUP_LOOP 90 ( to 96 )				    3 4 LOAD_CONST 2 ( 0 )					  24/eval_scripts/python_sa-dis_sa.valid/COUNT_PAIRS
		count += 1				      6 LOAD_GLOBAL 0 ( range )					    6 STORE_FAST 3 ( count )					  _DIFFERENCE_EQUAL_K.dis
    return count					      8 LOAD_CONST 1 ( 0 )					    								  
							      10 LOAD_FAST 1 ( n )					    4 8 SETUP_LOOP 64 ( to 76 )					  
							      12 CALL_FUNCTION 2					    10 LOAD_GLOBAL 0 ( range )					  
							      14 GET_ITER						    12 LOAD_CONST 2 ( 0 )					  
							      >> 16 FOR_ITER 76 ( to 94 )				    14 LOAD_FAST 3 ( count )					  
							      18 STORE_FAST 4 ( i )					    16 CALL_FUNCTION 2						  
							      								    18 GET_ITER							  
							      4 20 SETUP_LOOP 70 ( to 92 )				    >> 20 FOR_ITER 64 ( to 74 )					  
							      22 LOAD_GLOBAL 0 ( range )				    22 STORE_FAST 4 ( i )					  
							      24 LOAD_FAST 4 ( i )					    								  
							      26 LOAD_CONST 2 ( 1 )					    5 24 SETUP_LOOP 48 ( to 72 )				  
							      28 BINARY_ADD						    26 LOAD_GLOBAL 0 ( range )					  
							      30 LOAD_FAST 1 ( n )					    28 LOAD_CONST 2 ( 0 )					  
							      32 CALL_FUNCTION 2					    30 LOAD_FAST 3 ( count )					  
							      34 GET_ITER						    32 CALL_FUNCTION 2						  
							      >> 36 FOR_ITER 52 ( to 90 )				    34 GET_ITER							  
							      38 STORE_FAST 5 ( j )					    >> 36 FOR_ITER 48 ( to 70 )					  
							      								    38 STORE_FAST 5 ( j )					  
							      5 40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 4 ( i )					    6 40 LOAD_FAST 4 ( i )					  
							      44 BINARY_SUBSCR						    42 LOAD_FAST 5 ( j )					  
							      46 LOAD_FAST 0 ( arr )					    44 BINARY_SUBSCR						  
							      48 LOAD_FAST 5 ( j )					    46 LOAD_FAST 5 ( j )					  
							      50 BINARY_SUBSCR						    48 COMPARE_OP 2 ( == )					  
							      52 BINARY_SUBTRACT					    50 POP_JUMP_IF_FALSE 36					  
							      54 LOAD_FAST 2 ( k )					    								  
							      56 COMPARE_OP 2 ( == )					    7 52 LOAD_FAST 2 ( count )					  
							      58 POP_JUMP_IF_TRUE 80					    54 LOAD_CONST 3 ( 1 )					  
							      60 LOAD_FAST 0 ( arr )					    56 INPLACE_ADD						  
							      62 LOAD_FAST 5 ( j )					    58 STORE_FAST 2 ( count )					  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 0 ( arr )					    8 60 LOAD_FAST 2 ( count )					  
							      68 LOAD_FAST 4 ( i )					    62 LOAD_CONST 3 ( 1 )					  
							      70 BINARY_SUBSCR						    64 INPLACE_ADD						  
							      72 BINARY_SUBTRACT					    66 STORE_FAST 2 ( count )					  
							      74 LOAD_FAST 2 ( k )					    68 JUMP_ABSOLUTE 36						  
							      76 COMPARE_OP 2 ( == )					    >> 70 POP_BLOCK						  
							      78 POP_JUMP_IF_FALSE 36					    								  
							      								    9 >> 72 LOAD_FAST 2 ( count )				  
							      6 >> 80 LOAD_FAST 3 ( count )				    74 RETURN_VALUE NEW_LINE					  
							      82 LOAD_CONST 2 ( 1 )					    								  
							      84 INPLACE_ADD						    								  
							      86 STORE_FAST 3 ( count )					    								  
							      88 JUMP_ABSOLUTE 36					    								  
							      >> 90 POP_BLOCK						    								  
							      >> 92 JUMP_ABSOLUTE 16					    								  
							      >> 94 POP_BLOCK						    								  
							      								    								  
							      7 >> 96 LOAD_FAST 3 ( count )				    								  
							      98 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVEN_FIBONACCI_NUMBERS_SUM				      EVEN_FIBONACCI_NUMBERS_SUM				    EVEN_FIBONACCI_NUMBERS_SUM					  EVEN_FIBONACCI_NUMBERS_SUM
--							      --							    --								  --
def evenFibSum ( limit ) :				      Disassembly of <code object evenFibSum at 0x7f33e2649a50, fil Disassembly of <code object evenFibSum at 0x7f2b0163dc90, fil failure : #Results: 0, 10
    if ( limit < 2 ) :					      2 0 LOAD_FAST 0 ( limit )					    2 0 LOAD_FAST 0 ( limit )					  
	return 0					      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  
    ef1 = 0						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    ef2 = 2						      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    sm = ef1 + ef2					      								    								  
    while ( ef2 <= limit ) :				      3 8 LOAD_CONST 2 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
	ef3 = 4 * ef2 + ef1				      10 RETURN_VALUE						    10 RETURN_VALUE						  
	if ( ef3 > limit ) :				      								    								  
	    break					      4 >> 12 LOAD_CONST 2 ( 0 )				    4 >> 12 LOAD_CONST 3 ( 0 )					  
	ef1 = ef2					      14 STORE_FAST 1 ( ef1 )					    14 RETURN_VALUE NEW_LINE					  
	ef2 = ef3					      								    								  
	sm = sm + ef2					      5 16 LOAD_CONST 1 ( 2 )					    								  
    return sm						      18 STORE_FAST 2 ( ef2 )					    								  
							      								    								  
							      6 20 LOAD_FAST 1 ( ef1 )					    								  
							      22 LOAD_FAST 2 ( ef2 )					    								  
							      24 BINARY_ADD						    								  
							      26 STORE_FAST 3 ( sm )					    								  
							      								    								  
							      7 28 SETUP_LOOP 50 ( to 80 )				    								  
							      >> 30 LOAD_FAST 2 ( ef2 )					    								  
							      32 LOAD_FAST 0 ( limit )					    								  
							      34 COMPARE_OP 1 ( <= )					    								  
							      36 POP_JUMP_IF_FALSE 78					    								  
							      								    								  
							      8 38 LOAD_CONST 3 ( 4 )					    								  
							      40 LOAD_FAST 2 ( ef2 )					    								  
							      42 BINARY_MULTIPLY					    								  
							      44 LOAD_FAST 1 ( ef1 )					    								  
							      46 BINARY_ADD						    								  
							      48 STORE_FAST 4 ( ef3 )					    								  
							      								    								  
							      9 50 LOAD_FAST 4 ( ef3 )					    								  
							      52 LOAD_FAST 0 ( limit )					    								  
							      54 COMPARE_OP 4 ( > )					    								  
							      56 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      10 58 BREAK_LOOP						    								  
							      								    								  
							      11 >> 60 LOAD_FAST 2 ( ef2 )				    								  
							      62 STORE_FAST 1 ( ef1 )					    								  
							      								    								  
							      12 64 LOAD_FAST 4 ( ef3 )					    								  
							      66 STORE_FAST 2 ( ef2 )					    								  
							      								    								  
							      13 68 LOAD_FAST 3 ( sm )					    								  
							      70 LOAD_FAST 2 ( ef2 )					    								  
							      72 BINARY_ADD						    								  
							      74 STORE_FAST 3 ( sm )					    								  
							      76 JUMP_ABSOLUTE 30					    								  
							      >> 78 POP_BLOCK						    								  
							      								    								  
							      14 >> 80 LOAD_FAST 3 ( sm )				    								  
							      82 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER
--							      --							    --								  --
def flipsPossible ( a , n ) :				      Disassembly of <code object flipsPossible at 0x7f33e2644930,  Disassembly of <code object flipsPossible at 0x7f2b0163dc90,  error : Traceback (most recent call last):   File
    count_odd = 0 ; count_even = 0 ;			      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( n ) :				      2 STORE_FAST 2 ( count_odd )				    2 STORE_FAST 2 ( count_even )				  (item)   File "main.py", line 37, in <module>	  Fi
	if ( a [ i ] & 1 ) :				      4 LOAD_CONST 1 ( 0 )					    								  le "<dis>", line 2, in flipsPossible TypeError: 'i
	    count_odd += 1 ;				      6 STORE_FAST 3 ( count_even )				    3 4 LOAD_CONST 1 ( 0 )					  nt' object is not subscriptable
	else :						      								    6 STORE_FAST 3 ( count_even )				  
	    count_even += 1 ;				      3 8 SETUP_LOOP 46 ( to 56 )				    								  
    if ( count_odd % 2 and count_even % 2 ) :		      10 LOAD_GLOBAL 0 ( range )				    4 8 SETUP_LOOP 64 ( to 76 )					  
	return False ;					      12 LOAD_FAST 1 ( n )					    10 LOAD_GLOBAL 0 ( range )					  
    else :						      14 CALL_FUNCTION 1					    12 LOAD_FAST 1 ( n )					  
	return True ;					      16 GET_ITER						    14 CALL_FUNCTION 1						  
							      >> 18 FOR_ITER 34 ( to 54 )				    16 GET_ITER							  
							      20 STORE_FAST 4 ( i )					    >> 18 FOR_ITER 64 ( to 74 )					  
							      								    20 STORE_FAST 4 ( i )					  
							      4 22 LOAD_FAST 0 ( a )					    								  
							      24 LOAD_FAST 4 ( i )					    5 22 LOAD_FAST 2 ( count_even )				  
							      26 BINARY_SUBSCR						    24 LOAD_FAST 4 ( i )					  
							      28 LOAD_CONST 2 ( 1 )					    26 BINARY_SUBSCR						  
							      30 BINARY_AND						    28 LOAD_FAST 0 ( a )					  
							      32 POP_JUMP_IF_FALSE 44					    30 LOAD_FAST 4 ( i )					  
							      								    32 BINARY_SUBSCR						  
							      5 34 LOAD_FAST 2 ( count_odd )				    34 LOAD_FAST 0 ( a )					  
							      36 LOAD_CONST 2 ( 1 )					    36 LOAD_FAST 4 ( i )					  
							      38 INPLACE_ADD						    38 BINARY_SUBSCR						  
							      40 STORE_FAST 2 ( count_odd )				    40 LOAD_FAST 0 ( a )					  
							      42 JUMP_ABSOLUTE 18					    42 LOAD_FAST 4 ( i )					  
							      								    44 BINARY_SUBSCR						  
							      7 >> 44 LOAD_FAST 3 ( count_even )			    46 LOAD_FAST 0 ( a )					  
							      46 LOAD_CONST 2 ( 1 )					    48 LOAD_FAST 4 ( i )					  
							      48 INPLACE_ADD						    50 BINARY_SUBSCR						  
							      50 STORE_FAST 3 ( count_even )				    52 LOAD_FAST 0 ( a )					  
							      52 JUMP_ABSOLUTE 18					    54 LOAD_FAST 4 ( i )					  
							      >> 54 POP_BLOCK						    56 BINARY_SUBSCR						  
							      								    58 LOAD_FAST 0 ( a )					  
							      8 >> 56 LOAD_FAST 2 ( count_odd )				    60 LOAD_FAST 4 ( i )					  
							      58 LOAD_CONST 3 ( 2 )					    62 BINARY_SUBSCR						  
							      60 BINARY_MODULO						    64 STORE_SUBSCR						  
							      62 POP_JUMP_IF_FALSE 76					    								  
							      64 LOAD_FAST 3 ( count_even )				    6 66 LOAD_FAST 2 ( count_even )				  
							      66 LOAD_CONST 3 ( 2 )					    68 LOAD_FAST 3 ( count_even )				  
							      68 BINARY_MODULO						    70 LOAD_FAST 0 ( a )					  
							      70 POP_JUMP_IF_FALSE 76					    72 LOAD_FAST 4 ( i )					  
							      								    74 BINARY_SUBSCR						  
							      9 72 LOAD_CONST 4 ( False )				    76 LOAD_FAST 0 ( a )					  
							      74 RETURN_VALUE						    78 LOAD_FAST 4 ( i )					  
							      								    80 BINARY_SUBSCR						  
							      11 >> 76 LOAD_CONST 5 ( True )				    82 LOAD_FAST 0 ( a )					  
							      78 RETURN_VALUE						    84 LOAD_FAST 4 ( i )					  
							      80 LOAD_CONST 0 ( None )					    86 STORE_SUBSCR						  
							      82 RETURN_VALUE NEW_LINE					    88 JUMP_ABSOLUTE 18						  
							      								    >> 90 POP_BLOCK						  
							      								    >> 92 JUMP_ABSOLUTE 18					  
							      								    >> 94 POP_BLOCK						  
							      								    >> 96 LOAD_CONST 0 ( None )					  
							      								    98 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_ELEMENT_ROW_MATRIX				      FIND_MAXIMUM_ELEMENT_ROW_MATRIX				    FIND_MAXIMUM_ELEMENT_ROW_MATRIX				  FIND_MAXIMUM_ELEMENT_ROW_MATRIX
--							      --							    --								  --
def maxelement ( arr ) :				      Disassembly of <code object maxelement at 0x7f33e2653f60, fil Disassembly of <code object maxelement at 0x7f2b0163dc90, fil script_not_found : None
    no_of_rows = len ( arr )				      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    no_of_column = len ( arr [ 0 ] )			      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    for i in range ( no_of_rows ) :			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	max1 = 0					      6 STORE_FAST 1 ( no_of_rows )				    6 STORE_FAST 1 ( no_column )				  
	for j in range ( no_of_column ) :		      								    								  
	    if arr [ i ] [ j ] > max1 :			      3 8 LOAD_GLOBAL 0 ( len )					    3 8 LOAD_GLOBAL 0 ( len )					  
		max1 = arr [ i ] [ j ]			      10 LOAD_FAST 0 ( arr )					    10 LOAD_FAST 0 ( arr )					  
	print ( max1 )					      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
							      14 BINARY_SUBSCR						    14 BINARY_SUBSCR						  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 STORE_FAST 2 ( no_of_column )				    18 STORE_FAST 2 ( cols )					  
							      								    								  
							      4 20 SETUP_LOOP 74 ( to 96 )				    4 20 SETUP_LOOP 54 ( to 72 )				  
							      22 LOAD_GLOBAL 1 ( range )				    22 LOAD_GLOBAL 1 ( range )					  
							      24 LOAD_FAST 1 ( no_of_rows )				    24 LOAD_FAST 1 ( no_column )				  
							      26 CALL_FUNCTION 1					    26 CALL_FUNCTION 1						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 62 ( to 94 )				    >> 30 FOR_ITER 48 ( to 70 )					  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 3 ( j )					  
							      								    								  
							      5 34 LOAD_CONST 1 ( 0 )					    5 34 LOAD_FAST 0 ( arr )					  
							      36 STORE_FAST 4 ( max1 )					    36 LOAD_FAST 3 ( j )					  
							      								    38 BINARY_SUBSCR						  
							      6 38 SETUP_LOOP 44 ( to 84 )				    40 STORE_FAST 4 ( j )					  
							      40 LOAD_GLOBAL 1 ( range )				    								  
							      42 LOAD_FAST 2 ( no_of_column )				    6 42 LOAD_FAST 0 ( arr )					  
							      44 CALL_FUNCTION 1					    44 LOAD_FAST 3 ( j )					  
							      46 GET_ITER						    46 BINARY_SUBSCR						  
							      >> 48 FOR_ITER 32 ( to 82 )				    48 STORE_FAST 5 ( arr )					  
							      50 STORE_FAST 5 ( j )					    								  
							      								    7 50 LOAD_FAST 0 ( arr )					  
							      7 52 LOAD_FAST 0 ( arr )					    52 LOAD_FAST 3 ( j )					  
							      54 LOAD_FAST 3 ( i )					    54 BINARY_SUBSCR						  
							      56 BINARY_SUBSCR						    56 STORE_FAST 6 ( arr )					  
							      58 LOAD_FAST 5 ( j )					    								  
							      60 BINARY_SUBSCR						    8 58 LOAD_FAST 0 ( arr )					  
							      62 LOAD_FAST 4 ( max1 )					    60 LOAD_FAST 3 ( j )					  
							      64 COMPARE_OP 4 ( > )					    62 BINARY_SUBSCR						  
							      66 POP_JUMP_IF_FALSE 48					    64 LOAD_FAST 5 ( arr )					  
							      								    66 LOAD_FAST 3 ( j )					  
							      8 68 LOAD_FAST 0 ( arr )					    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 3 ( i )					    70 LOAD_FAST 5 ( arr )					  
							      72 BINARY_SUBSCR						    72 LOAD_FAST 4 ( j )					  
							      74 LOAD_FAST 5 ( j )					    74 BINARY_SUBSCR						  
							      76 BINARY_SUBSCR						    76 LOAD_FAST 6 ( arr )					  
							      78 STORE_FAST 4 ( max1 )					    78 LOAD_FAST 4 ( j )					  
							      80 JUMP_ABSOLUTE 48					    80 STORE_SUBSCR						  
							      >> 82 POP_BLOCK						    								  
							      								    9 82 LOAD_FAST 0 ( arr )					  
							      9 >> 84 LOAD_GLOBAL 2 ( print )				    84 LOAD_FAST 3 ( j )					  
							      86 LOAD_FAST 4 ( max1 )					    86 BINARY_SUBSCR						  
							      88 CALL_FUNCTION 1					    88 LOAD_FAST 5 ( arr )					  
							      90 POP_TOP						    90 LOAD_FAST 3 ( j )					  
							      92 JUMP_ABSOLUTE 30					    92 STORE_SUBSCR						  
							      >> 94 POP_BLOCK						    								  
							      >> 96 LOAD_CONST 0 ( None )				    10 >> 94 LOAD_FAST 0 ( arr )				  
							      98 RETURN_VALUE NEW_LINE					    96 LOAD_FAST 3 ( j )					  
							      								    98 STORE_SUBSCR						  
							      								    								  
							      								    11 100 LOAD_FAST 0 ( arr )					  
							      								    102 LOAD_FAST 3 ( j )					  
							      								    104 STORE_SUBSCR						  
							      								    								  
							      								    12 106 LOAD_FAST 0 ( arr )					  
							      								    108 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT						      BUBBLE_SORT						    BUBBLE_SORT							  BUBBLE_SORT
--							      --							    --								  --
def bubbleSort ( arr ) :				      Disassembly of <code object bubbleSort at 0x7f33e2644930, fil Disassembly of <code object bubbleSort at 0x7f2b0163dc90, fil script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for i in range ( n ) :				      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
	for j in range ( 0 , n - i - 1 ) :		      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    if arr [ j ] > arr [ j + 1 ] :		      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
		arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 								    								  
							      3 8 SETUP_LOOP 98 ( to 108 )				    3 8 SETUP_LOOP 64 ( to 76 )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 86 ( to 106 )				    >> 18 FOR_ITER 56 ( to 74 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 SETUP_LOOP 80 ( to 104 )				    4 22 SETUP_LOOP 48 ( to 72 )				  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_GLOBAL 2 ( range )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_FAST 1 ( n )					    28 LOAD_FAST 2 ( i )					  
							      30 LOAD_FAST 2 ( i )					    30 CALL_FUNCTION 2						  
							      32 BINARY_SUBTRACT					    32 GET_ITER							  
							      34 LOAD_CONST 2 ( 1 )					    >> 34 FOR_ITER 40 ( to 70 )					  
							      36 BINARY_SUBTRACT					    36 STORE_FAST 3 ( i )					  
							      38 CALL_FUNCTION 2					    								  
							      40 GET_ITER						    5 38 LOAD_FAST 0 ( arr )					  
							      >> 42 FOR_ITER 58 ( to 102 )				    40 LOAD_METHOD 3 ( append )					  
							      44 STORE_FAST 3 ( j )					    42 LOAD_FAST 3 ( i )					  
							      								    44 CALL_METHOD 1						  
							      5 46 LOAD_FAST 0 ( arr )					    46 POP_TOP							  
							      48 LOAD_FAST 3 ( j )					    								  
							      50 BINARY_SUBSCR						    6 48 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 0 ( arr )					    50 LOAD_METHOD 3 ( append )					  
							      54 LOAD_FAST 3 ( j )					    52 LOAD_FAST 3 ( i )					  
							      56 LOAD_CONST 2 ( 1 )					    54 CALL_METHOD 1						  
							      58 BINARY_ADD						    56 POP_TOP							  
							      60 BINARY_SUBSCR						    58 JUMP_ABSOLUTE 34						  
							      62 COMPARE_OP 4 ( > )					    >> 60 POP_BLOCK						  
							      64 POP_JUMP_IF_FALSE 42					    								  
							      								    7 >> 62 LOAD_FAST 1 ( n )					  
							      6 66 LOAD_FAST 0 ( arr )					    64 RETURN_VALUE NEW_LINE					  
							      68 LOAD_FAST 3 ( j )					    								  
							      70 LOAD_CONST 2 ( 1 )					    								  
							      72 BINARY_ADD						    								  
							      74 BINARY_SUBSCR						    								  
							      76 LOAD_FAST 0 ( arr )					    								  
							      78 LOAD_FAST 3 ( j )					    								  
							      80 BINARY_SUBSCR						    								  
							      82 ROT_TWO						    								  
							      84 LOAD_FAST 0 ( arr )					    								  
							      86 LOAD_FAST 3 ( j )					    								  
							      88 STORE_SUBSCR						    								  
							      90 LOAD_FAST 0 ( arr )					    								  
							      92 LOAD_FAST 3 ( j )					    								  
							      94 LOAD_CONST 2 ( 1 )					    								  
							      96 BINARY_ADD						    								  
							      98 STORE_SUBSCR						    								  
							      100 JUMP_ABSOLUTE 42					    								  
							      >> 102 POP_BLOCK						    								  
							      >> 104 JUMP_ABSOLUTE 18					    								  
							      >> 106 POP_BLOCK						    								  
							      >> 108 LOAD_CONST 0 ( None )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS		      FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			    FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS			  FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS
--							      --							    --								  --
def findElement ( arr , ranges , rotations , index ) :	      Disassembly of <code object findElement at 0x7f33e26494b0, fi Disassembly of <code object findElement at 0x7f2b0163dc90, fi script_not_found : None
    for i in range ( rotations - 1 , - 1 , - 1 ) :	      2 0 SETUP_LOOP 86 ( to 88 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	left = ranges [ i ] [ 0 ]			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	right = ranges [ i ] [ 1 ]			      4 LOAD_FAST 2 ( rotations )				    4 LOAD_GLOBAL 1 ( rotations )				  
	if ( left <= index and right >= index ) :	      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    if ( index == left ) :			      8 BINARY_SUBTRACT						    8 LOAD_CONST 2 ( - 1 )					  
		index = right				      10 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 3 ( - 1 )					  
	    else :					      12 LOAD_CONST 2 ( - 1 )					    12 CALL_FUNCTION 3						  
		index = index - 1			      14 CALL_FUNCTION 3					    14 GET_ITER							  
    return arr [ index ]				      16 GET_ITER						    >> 16 FOR_ITER 76 ( to 76 )					  
							      >> 18 FOR_ITER 66 ( to 86 )				    18 STORE_FAST 2 ( i )					  
							      20 STORE_FAST 4 ( i )					    								  
							      								    3 20 LOAD_FAST 2 ( i )					  
							      3 22 LOAD_FAST 1 ( ranges )				    22 LOAD_CONST 4 ( 0 )					  
							      24 LOAD_FAST 4 ( i )					    24 BINARY_SUBSCR						  
							      26 BINARY_SUBSCR						    26 STORE_FAST 3 ( left )					  
							      28 LOAD_CONST 3 ( 0 )					    								  
							      30 BINARY_SUBSCR						    4 28 LOAD_FAST 2 ( i )					  
							      32 STORE_FAST 5 ( left )					    30 LOAD_CONST 4 ( 0 )					  
							      								    32 BINARY_SUBSCR						  
							      4 34 LOAD_FAST 1 ( ranges )				    34 STORE_FAST 4 ( left )					  
							      36 LOAD_FAST 4 ( i )					    								  
							      38 BINARY_SUBSCR						    5 36 LOAD_FAST 1 ( c )					  
							      40 LOAD_CONST 1 ( 1 )					    38 LOAD_CONST 5 ( 1 )					  
							      42 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      44 STORE_FAST 6 ( right )					    42 LOAD_FAST 3 ( right )					  
							      								    44 COMPARE_OP 2 ( == )					  
							      5 46 LOAD_FAST 5 ( left )					    46 POP_JUMP_IF_FALSE 16					  
							      48 LOAD_FAST 3 ( index )					    								  
							      50 COMPARE_OP 1 ( <= )					    6 48 LOAD_FAST 1 ( c )					  
							      52 POP_JUMP_IF_FALSE 18					    50 LOAD_CONST 6 ( 0 )					  
							      54 LOAD_FAST 6 ( right )					    52 BINARY_SUBSCR						  
							      56 LOAD_FAST 3 ( index )					    54 LOAD_FAST 3 ( right )					  
							      58 COMPARE_OP 5 ( >= )					    56 COMPARE_OP 2 ( == )					  
							      60 POP_JUMP_IF_FALSE 18					    58 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      6 62 LOAD_FAST 3 ( index )				    7 60 LOAD_FAST 1 ( c )					  
							      64 LOAD_FAST 5 ( left )					    62 LOAD_CONST 7 ( 0 )					  
							      66 COMPARE_OP 2 ( == )					    64 BINARY_SUBSCR						  
							      68 POP_JUMP_IF_FALSE 76					    66 LOAD_FAST 3 ( right )					  
							      								    68 COMPARE_OP 2 ( == )					  
							      7 70 LOAD_FAST 6 ( right )				    70 POP_JUMP_IF_FALSE 16					  
							      72 STORE_FAST 3 ( index )					    								  
							      74 JUMP_ABSOLUTE 18					    8 72 LOAD_FAST 1 ( c )					  
							      								    74 LOAD_CONST 8 ( 1 )					  
							      9 >> 76 LOAD_FAST 3 ( index )				    76 BINARY_SUBSCR						  
							      78 LOAD_CONST 1 ( 1 )					    78 LOAD_FAST 3 ( right )					  
							      80 BINARY_SUBTRACT					    80 COMPARE_OP 2 ( == )					  
							      82 STORE_FAST 3 ( index )					    82 POP_JUMP_IF_FALSE 16					  
							      84 JUMP_ABSOLUTE 18					    								  
							      >> 86 POP_BLOCK						    9 84 LOAD_FAST 1 ( c )					  
							      								    86 LOAD_CONST 9 ( 1 )					  
							      10 >> 88 LOAD_FAST 0 ( arr )				    88 BINARY_SUBSCR						  
							      90 LOAD_FAST 3 ( index )					    90 LOAD_FAST 3 ( right )					  
							      92 BINARY_SUBSCR						    92 COMPARE_OP 2 ( == )					  
							      94 RETURN_VALUE NEW_LINE					    94 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    10 96 LOAD_FAST 1 ( c )					  
							      								    98 LOAD_CONST 10 ( 1 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 3 ( right )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    11 108 LOAD_FAST 1 ( c )					  
							      								    110 LOAD_CONST 11 ( 0 )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 3 ( right )					  
							      								    116 COMPARE_OP 2 ( == )					  
							      								    118 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    12 120 LOAD_FAST 1 ( c )					  
							      								    122 LOAD_CONST 12 ( 1 )					  
							      								    124 BINARY_SUBSCR						  
							      								    126 LOAD_FAST 3 ( right )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    13 132 LOAD_FAST 1 ( c )					  
							      								    134 LOAD_CONST 13 ( 1 )					  
							      								    136 BINARY_SUBSCR						  
							      								    138 LOAD_FAST 3 ( right )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      								    14 144 LOAD_FAST 1 ( c )					  
							      								    146 LOAD_CONST 14 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 LOAD_FAST 3 ( right )					  
							      								    152 BUILD_TUPLE 2						  
							      								    154 RETURN_VALUE						  
							      								    >> 156 JUMP_ABSOLUTE 16					  
							      								    >> 158 POP_BLOCK						  
							      								    >> 160							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T SUB<unk> YSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_T
--							      --							    --								  --
def printSubsequences ( arr , n ) :			      Disassembly of <code object printSubsequences at 0x7f33e2649a Disassembly of <code object printSubsequences at 0x7f2b0163dc script_not_found : None
    opsize = math.pow ( 2 , n )				      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
    for counter in range ( 1 , ( int ) ( opsize ) ) :	      2 LOAD_METHOD 1 ( pow )					    2 LOAD_METHOD 1 ( pow )					  
	for j in range ( 0 , n ) :			      4 LOAD_CONST 1 ( 2 )					    4 LOAD_CONST 1 ( 2 )					  
	    if ( counter & ( 1 << j ) ) :		      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 0 ( arr )					  
		print ( arr [ j ] , end = " " )		      8 CALL_METHOD 2						    8 CALL_METHOD 2						  
	print ( )					      10 STORE_FAST 2 ( opsize )				    10 STORE_FAST 2 ( opsize )					  
							      								    								  
							      3 12 SETUP_LOOP 76 ( to 90 )				    3 12 SETUP_LOOP 74 ( to 80 )				  
							      14 LOAD_GLOBAL 2 ( range )				    14 LOAD_GLOBAL 2 ( range )					  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 2 ( 1 )					  
							      18 LOAD_GLOBAL 3 ( int )					    18 LOAD_GLOBAL 0 ( math )					  
							      20 LOAD_FAST 2 ( opsize )					    20 LOAD_METHOD 3 ( sqrt )					  
							      22 CALL_FUNCTION 1					    22 LOAD_CONST 1 ( 2 )					  
							      24 CALL_FUNCTION 2					    24 LOAD_FAST 0 ( arr )					  
							      26 GET_ITER						    26 CALL_METHOD 2						  
							      >> 28 FOR_ITER 58 ( to 88 )				    28 CALL_FUNCTION 1						  
							      30 STORE_FAST 3 ( counter )				    30 GET_ITER							  
							      								    >> 32 FOR_ITER 58 ( to 78 )					  
							      4 32 SETUP_LOOP 46 ( to 80 )				    34 STORE_FAST 3 ( j )					  
							      34 LOAD_GLOBAL 2 ( range )				    								  
							      36 LOAD_CONST 3 ( 0 )					    4 36 LOAD_FAST 2 ( opsize )					  
							      38 LOAD_FAST 1 ( n )					    38 LOAD_FAST 3 ( j )					  
							      40 CALL_FUNCTION 2					    40 COMPARE_OP 2 ( == )					  
							      42 GET_ITER						    42 POP_JUMP_IF_FALSE 32					  
							      >> 44 FOR_ITER 32 ( to 78 )				    								  
							      46 STORE_FAST 4 ( j )					    5 44 LOAD_FAST 2 ( opsize )					  
							      								    46 LOAD_FAST 3 ( j )					  
							      5 48 LOAD_FAST 3 ( counter )				    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 2 ( 1 )					    50 STORE_FAST 4 ( j )					  
							      52 LOAD_FAST 4 ( j )					    								  
							      54 BINARY_LSHIFT						    6 52 LOAD_FAST 4 ( j )					  
							      56 BINARY_AND						    54 LOAD_FAST 3 ( j )					  
							      58 POP_JUMP_IF_FALSE 44					    56 BINARY_SUBSCR						  
							      								    58 LOAD_FAST 4 ( j )					  
							      6 60 LOAD_GLOBAL 4 ( print )				    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 4 ( j )					  
							      64 LOAD_FAST 4 ( j )					    64 BINARY_SUBSCR						  
							      66 BINARY_SUBSCR						    66 LOAD_FAST 4 ( j )					  
							      68 LOAD_CONST 4 ( ' ' )					    68 BINARY_SUBSCR						  
							      70 LOAD_CONST 5 ( ( 'end' , ) )				    70 LOAD_FAST 4 ( j )					  
							      72 CALL_FUNCTION_KW 2					    72 BINARY_SUBSCR						  
							      74 POP_TOP						    74 LOAD_FAST 4 ( j )					  
							      76 JUMP_ABSOLUTE 44					    76 BINARY_SUBSCR						  
							      >> 78 POP_BLOCK						    78 LOAD_FAST 4 ( j )					  
							      								    80 BINARY_SUBSCR						  
							      7 >> 80 LOAD_GLOBAL 4 ( print )				    82 LOAD_FAST 4 ( j )					  
							      82 CALL_FUNCTION 0					    84 BINARY_SUBSCR						  
							      84 POP_TOP						    86 LOAD_FAST 4 ( j )					  
							      86 JUMP_ABSOLUTE 28					    88 BINARY_SUBSCR						  
							      >> 88 POP_BLOCK						    90 LOAD_FAST 4 ( j )					  
							      >> 90 LOAD_CONST 0 ( None )				    92 STORE_SUBSCR						  
							      92 RETURN_VALUE NEW_LINE					    								  
							      								    7 94 LOAD_FAST 2 ( opsize )					  
							      								    96 LOAD_FAST 3 ( j )					  
							      								    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 4 ( j )					  
							      								    102 BINARY_SUBSCR						  
							      								    104 LOAD_FAST 4 ( j )					  
							      								    106 STORE_SUBSCR						  
							      								    								  
							      								    8 108 LOAD_FAST 2 ( opsize )				  
							      								    110 LOAD_FAST 3 ( j )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 4 ( j )					  
							      								    116 STORE_SUBSCR						  
							      								    								  
							      								    9 118 LOAD_FAST 2 ( opsize )				  
							      								    120 LOAD_FAST 3 ( j )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_ROOT_NUMBER					      N_TH_ROOT_NUMBER						    N_TH_ROOT_NUMBER						  N_TH_ROOT_NUMBER
--							      --							    --								  --
def nthRoot ( A , N ) :					      Disassembly of <code object nthRoot at 0x7f33e2644f60, file " Disassembly of <code object nthRoot at 0x7f2b0163dc90, file " script_not_found : None
    x<<unk>> = random.randint ( 1 , 101 ) % 10		      2 0 LOAD_GLOBAL 0 ( random )				    2 0 LOAD_GLOBAL 0 ( random )				  
    eps = 0.001						      2 LOAD_METHOD 1 ( randint )				    2 LOAD_METHOD 1 ( randint )					  
    delX = 2147483647					      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
    xK = 0.0						      6 LOAD_CONST 2 ( 101 )					    6 LOAD_CONST 2 ( 101 )					  
    while ( delX > eps ) :				      8 CALL_METHOD 2						    8 BINARY_MODULO						  
	xK = ( ( N - 1.0 ) * x<<unk>> + A / pow ( x<<unk>> ,  10 LOAD_CONST 3 ( 10 )					    10 CALL_METHOD 1						  
	delX = abs ( xK - x<<unk>> )			      12 BINARY_MODULO						    12 STORE_FAST 0 ( A )					  
	x<<unk>> = xK ;					      14 STORE_FAST 2 ( x<<unk>> )				    								  
    return xK						      								    3 14 LOAD_CONST 3 ( 2147483647 )				  
							      3 16 LOAD_CONST 4 ( 0.001 )				    16 STORE_FAST 1 ( x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x 
							      18 STORE_FAST 3 ( eps )					    								  
							      								    								  
							      4 20 LOAD_CONST 5 ( 2147483647 )				    								  
							      22 STORE_FAST 4 ( delX )					    								  
							      								    								  
							      5 24 LOAD_CONST 6 ( 0.0 )					    								  
							      26 STORE_FAST 5 ( xK )					    								  
							      								    								  
							      6 28 SETUP_LOOP 62 ( to 92 )				    								  
							      >> 30 LOAD_FAST 4 ( delX )				    								  
							      32 LOAD_FAST 3 ( eps )					    								  
							      34 COMPARE_OP 4 ( > )					    								  
							      36 POP_JUMP_IF_FALSE 90					    								  
							      								    								  
							      7 38 LOAD_FAST 1 ( N )					    								  
							      40 LOAD_CONST 7 ( 1.0 )					    								  
							      42 BINARY_SUBTRACT					    								  
							      44 LOAD_FAST 2 ( x<<unk>> )				    								  
							      46 BINARY_MULTIPLY					    								  
							      48 LOAD_FAST 0 ( A )					    								  
							      50 LOAD_GLOBAL 2 ( pow )					    								  
							      52 LOAD_FAST 2 ( x<<unk>> )				    								  
							      54 LOAD_FAST 1 ( N )					    								  
							      56 LOAD_CONST 1 ( 1 )					    								  
							      58 BINARY_SUBTRACT					    								  
							      60 CALL_FUNCTION 2					    								  
							      62 BINARY_TRUE_DIVIDE					    								  
							      64 BINARY_ADD						    								  
							      66 LOAD_FAST 1 ( N )					    								  
							      68 BINARY_TRUE_DIVIDE					    								  
							      70 STORE_FAST 5 ( xK )					    								  
							      								    								  
							      8 72 LOAD_GLOBAL 3 ( abs )				    								  
							      74 LOAD_FAST 5 ( xK )					    								  
							      76 LOAD_FAST 2 ( x<<unk>> )				    								  
							      78 BINARY_SUBTRACT					    								  
							      80 CALL_FUNCTION 1					    								  
							      82 STORE_FAST 4 ( delX )					    								  
							      								    								  
							      9 84 LOAD_FAST 5 ( xK )					    								  
							      86 STORE_FAST 2 ( x<<unk>> )				    								  
							      88 JUMP_ABSOLUTE 30					    								  
							      >> 90 POP_BLOCK						    								  
							      								    								  
							      10 >> 92 LOAD_FAST 5 ( xK )				    								  
							      94 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_CONSECUTIVE_DUPLICATES_STRING			      REMOVE_CONSECUTIVE_DUPLICATES_STRING			    REMOVE_CONSECUTIVE_DUPLICATES_STRING			  REMOVE_CONSECUTIVE_DUPLICATES_STRING
--							      --							    --								  --
def removeDuplicates ( S ) :				      Disassembly of <code object removeDuplicates at 0x7f33e2649a5 Disassembly of <code object removeDuplicates at 0x7f2b0163dc9 error : /bin/bash: line 1: 12400 Segmentation faul
    n = len ( S )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    if ( n < 2 ) :					      2 LOAD_FAST 0 ( S )					    2 LOAD_FAST 0 ( S )						  ataset/bin/python XLM/dis_script.py --script_path
	return						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    j = 0						      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  24/eval_scripts/python_sa-dis_sa.valid/REMOVE_CONS
    for i in range ( n ) :				      								    								  ECUTIVE_DUPLICATES_STRING.dis
	if ( S [ j ] != S [ i ] ) :			      3 8 LOAD_FAST 1 ( n )					    3 8 LOAD_FAST 1 ( n )					  
	    j += 1					      10 LOAD_CONST 1 ( 2 )					    10 LOAD_CONST 1 ( 2 )					  
	    S [ j ] = S [ i ]				      12 COMPARE_OP 0 ( < )					    12 COMPARE_OP 0 ( < )					  
    j += 1						      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 20					  
    S = S [ : j ]					      								    								  
    return S						      4 16 LOAD_CONST 0 ( None )				    4 16 LOAD_CONST 2 ( 0 )					  
							      18 RETURN_VALUE						    18 RETURN_VALUE						  
							      								    								  
							      5 >> 20 LOAD_CONST 2 ( 0 )				    5 >> 20 SETUP_LOOP 64 ( to 92 )				  
							      22 STORE_FAST 2 ( j )					    22 LOAD_GLOBAL 1 ( range )					  
							      								    24 LOAD_FAST 1 ( n )					  
							      6 24 SETUP_LOOP 52 ( to 78 )				    26 CALL_FUNCTION 1						  
							      26 LOAD_GLOBAL 1 ( range )				    28 GET_ITER							  
							      28 LOAD_FAST 1 ( n )					    >> 30 FOR_ITER 64 ( to 90 )					  
							      30 CALL_FUNCTION 1					    32 STORE_FAST 2 ( i )					  
							      32 GET_ITER						    								  
							      >> 34 FOR_ITER 40 ( to 76 )				    6 34 LOAD_FAST 2 ( i )					  
							      36 STORE_FAST 3 ( i )					    36 LOAD_CONST 1 ( 2 )					  
							      								    38 COMPARE_OP 3 ( != )					  
							      7 38 LOAD_FAST 0 ( S )					    40 POP_JUMP_IF_FALSE 48					  
							      40 LOAD_FAST 2 ( j )					    								  
							      42 BINARY_SUBSCR						    7 42 LOAD_FAST 0 ( S )					  
							      44 LOAD_FAST 0 ( S )					    44 LOAD_CONST 1 ( 2 )					  
							      46 LOAD_FAST 3 ( i )					    46 COMPARE_OP 2 ( == )					  
							      48 BINARY_SUBSCR						    48 POP_JUMP_IF_FALSE 30					  
							      50 COMPARE_OP 3 ( != )					    								  
							      52 POP_JUMP_IF_FALSE 34					    8 50 LOAD_FAST 0 ( S )					  
							      								    52 LOAD_CONST 1 ( 2 )					  
							      8 54 LOAD_FAST 2 ( j )					    54 COMPARE_OP 2 ( == )					  
							      56 LOAD_CONST 3 ( 1 )					    56 POP_JUMP_IF_FALSE 30					  
							      58 INPLACE_ADD						    								  
							      60 STORE_FAST 2 ( j )					    9 58 LOAD_FAST 0 ( S )					  
							      								    60 LOAD_CONST 1 ( 2 )					  
							      9 62 LOAD_FAST 0 ( S )					    62 COMPARE_OP 3 ( != )					  
							      64 LOAD_FAST 3 ( i )					    64 POP_JUMP_IF_FALSE 30					  
							      66 BINARY_SUBSCR						    								  
							      68 LOAD_FAST 0 ( S )					    10 66 LOAD_FAST 0 ( S )					  
							      70 LOAD_FAST 2 ( j )					    68 LOAD_CONST 1 ( 2 )					  
							      72 STORE_SUBSCR						    70 COMPARE_OP 2 ( == )					  
							      74 JUMP_ABSOLUTE 34					    72 POP_JUMP_IF_FALSE 30					  
							      >> 76 POP_BLOCK						    								  
							      								    11 74 LOAD_FAST 0 ( S )					  
							      10 >> 78 LOAD_FAST 2 ( j )				    76 LOAD_CONST 1 ( 2 )					  
							      80 LOAD_CONST 3 ( 1 )					    78 COMPARE_OP 2 ( == )					  
							      82 INPLACE_ADD						    80 POP_JUMP_IF_FALSE 30					  
							      84 STORE_FAST 2 ( j )					    								  
							      								    12 82 LOAD_FAST 0 ( S )					  
							      11 86 LOAD_FAST 0 ( S )					    84 LOAD_CONST 1 ( 2 )					  
							      88 LOAD_CONST 0 ( None )					    86 COMPARE_OP 2 ( == )					  
							      90 LOAD_FAST 2 ( j )					    88 POP_JUMP_IF_FALSE 30					  
							      92 BUILD_SLICE 2						    								  
							      94 BINARY_SUBSCR						    13 90 LOAD_FAST 0 ( S )					  
							      96 STORE_FAST 0 ( S )					    92 LOAD_CONST 1 ( 2 )					  
							      								    94 COMPARE_OP 2 ( == )					  
							      12 98 LOAD_FAST 0 ( S )					    96 POP_JUMP_IF_FALSE 106					  
							      100 RETURN_VALUE NEW_LINE					    								  
							      								    14 98 LOAD_FAST 0 ( S )					  
							      								    100 LOAD_CONST 1 ( 2 )					  
							      								    102 COMPARE_OP 2 ( == )					  
							      								    104 POP_JUMP_IF_FALSE 110					  
							      								    								  
							      								    15 106 LOAD_FAST 0 ( S )					  
							      								    108 LOAD_CONST 1 ( 2 )					  
							      								    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 118					  
							      								    								  
							      								    16 >> 114 LOAD_FAST 0 ( S )					  
							      								    116 LOAD_CONST 1 ( 2 )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    17 122 LOAD_FAST 0 ( S )					  
							      								    124 LOAD_CONST 1 ( 2 )					  
							      								    126 COMPARE_OP 2 ( == )					  
							      								    128 POP_JUMP_IF_FALSE 126					  
							      								    								  
							      								    18 130 LOAD_FAST 0 ( S )					  
							      								    132 LOAD_CONST 1 ( 2 )					  
							      								    134 COMPARE_OP 2 ( == )					  
							      								    136 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      								    19 138 LOAD_FAST 0 ( S )					  
							      								    140 RETURN_VALUE						  
							      								    								  
							      								    20 >> 142 LOAD_FAST 0 ( S )					  
							      								    144 RETURN_VALUE						  
							      								    								  
							      								    21 >> 146 LOAD_FAST 0 ( S )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		      EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		    EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION		  EXPONENTIAL_SQUARING_FAST_MODULO_<unk> CATION
--							      --							    --								  --
def exponentiation ( bas , exp ) :			      Disassembly of <code object exponentiation at 0x7f33e2644930, Disassembly of <code object exponentiation at 0x7f2b0163dc90, script_not_found : None
    if ( exp == 0 ) :					      2 0 LOAD_FAST 1 ( exp )					    2 0 LOAD_FAST 0 ( bas )					  
	return 1 ;					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( exp == 1 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return bas % N ;				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    t = exponentiation ( bas , int ( exp / 2 ) ) ;	      								    								  
    t = ( t * t ) % N ;					      3 8 LOAD_CONST 2 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
    if ( exp % 2 == 0 ) :				      10 RETURN_VALUE						    10 RETURN_VALUE						  
	return t ;					      								    								  
    else :						      4 >> 12 LOAD_FAST 1 ( exp )				    4 >> 12 LOAD_GLOBAL 0 ( exp )				  
	return ( ( bas % N ) * t ) % N ;		      14 LOAD_CONST 2 ( 1 )					    14 LOAD_FAST 0 ( bas )					  
							      16 COMPARE_OP 2 ( == )					    16 CALL_FUNCTION 1						  
							      18 POP_JUMP_IF_FALSE 28					    18 LOAD_CONST 2 ( 1 )					  
							      								    20 BINARY_SUBTRACT						  
							      5 20 LOAD_FAST 0 ( bas )					    22 STORE_FAST 1 ( s )					  
							      22 LOAD_GLOBAL 0 ( N )					    								  
							      24 BINARY_MODULO						    5 24 LOAD_GLOBAL 1 ( exponentiation )			  
							      26 RETURN_VALUE						    26 LOAD_FAST 1 ( s )					  
							      								    28 CALL_FUNCTION 1						  
							      6 >> 28 LOAD_GLOBAL 1 ( exponentiation )			    30 STORE_FAST 2 ( t )					  
							      30 LOAD_FAST 0 ( bas )					    								  
							      32 LOAD_GLOBAL 2 ( int )					    6 32 LOAD_FAST 2 ( t )					  
							      34 LOAD_FAST 1 ( exp )					    34 LOAD_CONST 0 ( None )					  
							      36 LOAD_CONST 3 ( 2 )					    36 COMPARE_OP 8 ( is )					  
							      38 BINARY_TRUE_DIVIDE					    38 POP_JUMP_IF_FALSE 48					  
							      40 CALL_FUNCTION 1					    								  
							      42 CALL_FUNCTION 2					    7 40 LOAD_GLOBAL 2 ( partial )				  
							      44 STORE_FAST 2 ( t )					    42 LOAD_FAST 2 ( t )					  
							      								    44 CALL_FUNCTION 1						  
							      7 46 LOAD_FAST 2 ( t )					    46 RETURN_VALUE						  
							      48 LOAD_FAST 2 ( t )					    								  
							      50 BINARY_MULTIPLY					    8 >> 48 LOAD_GLOBAL 0 ( exp )				  
							      52 LOAD_GLOBAL 0 ( N )					    50 LOAD_FAST 0 ( bas )					  
							      54 BINARY_MODULO						    52 CALL_FUNCTION 1						  
							      56 STORE_FAST 2 ( t )					    54 RETURN_VALUE						  
							      								    								  
							      8 58 LOAD_FAST 1 ( exp )					    9 >> 56 LOAD_GLOBAL 0 ( exp )				  
							      60 LOAD_CONST 3 ( 2 )					    58 LOAD_FAST 0 ( bas )					  
							      62 BINARY_MODULO						    60 CALL_FUNCTION 1						  
							      64 LOAD_CONST 1 ( 0 )					    62 RETURN_VALUE NEW_LINE					  
							      66 COMPARE_OP 2 ( == )					    								  
							      68 POP_JUMP_IF_FALSE 74					    								  
							      								    								  
							      9 70 LOAD_FAST 2 ( t )					    								  
							      72 RETURN_VALUE						    								  
							      								    								  
							      11 >> 74 LOAD_FAST 0 ( bas )				    								  
							      76 LOAD_GLOBAL 0 ( N )					    								  
							      78 BINARY_MODULO						    								  
							      80 LOAD_FAST 2 ( t )					    								  
							      82 BINARY_MULTIPLY					    								  
							      84 LOAD_GLOBAL 0 ( N )					    								  
							      86 BINARY_MODULO						    								  
							      88 RETURN_VALUE						    								  
							      90 LOAD_CONST 0 ( None )					    								  
							      92 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY
--							      --							    --								  --
def maxSum ( arr , n ) :				      Disassembly of <code object maxSum at 0x7f33e2653ed0, file "< Disassembly of <code object maxSum at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    res = - sys.maxsize					      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_CONST 1 ( - sys . maxsize )			  "XLM/dis_script.py", line 59, in <module>	for
    for i in range ( 0 , n ) :				      2 LOAD_ATTR 1 ( maxsize )					    2 STORE_FAST 2 ( res )					  item in run_dis_script():   File "XLM/dis_script.p
	curr_sum = 0					      4 UNARY_NEGATIVE						    								  y", line 47, in run_dis_script     co_code, co_nlo
	for j in range ( 0 , n ) :			      6 STORE_FAST 2 ( res )					    3 4 LOAD_CONST 2 ( - 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
	    index = int ( ( i + j ) % n )		      								    6 STORE_FAST 3 ( curr_sum )					  rts = dis_asm.parse(bytecode)	  File "/home/ubuntu
	    curr_sum += j * arr [ index ]		      3 8 SETUP_LOOP 84 ( to 94 )				    								  /TransCoder/XLM/src/dis_assembler.py", line 212, i
	res = max ( res , curr_sum )			      10 LOAD_GLOBAL 2 ( range )				    4 8 SETUP_LOOP 64 ( to 76 )					  n parse     constants[arg] = ast.literal_eval(argr
    return res						      12 LOAD_CONST 1 ( 0 )					    10 LOAD_GLOBAL 0 ( range )					  epr)	 File "/home/ubuntu/anaconda3/envs/dataset/l
							      14 LOAD_FAST 1 ( n )					    12 LOAD_CONST 3 ( 0 )					  ib/python3.7/ast.py", line 91, in literal_eval
							      16 CALL_FUNCTION 2					    14 LOAD_FAST 1 ( n )					   return _convert(node_or_string)   File "/home/ubu
							      18 GET_ITER						    16 CALL_FUNCTION 2						  ntu/anaconda3/envs/dataset/lib/python3.7/ast.py",
							      >> 20 FOR_ITER 70 ( to 92 )				    18 GET_ITER							  line 90, in _convert	   return _convert_signed_nu
							      22 STORE_FAST 3 ( i )					    >> 20 FOR_ITER 48 ( to 74 )					  m(node)   File "/home/ubuntu/anaconda3/envs/datase
							      								    22 STORE_FAST 4 ( i )					  t/lib/python3.7/ast.py", line 58, in _convert_sign
							      4 24 LOAD_CONST 1 ( 0 )					    								  ed_num     operand = _convert_num(node.operand)
							      26 STORE_FAST 4 ( curr_sum )				    5 24 LOAD_GLOBAL 1 ( int )					  File "/home/ubuntu/anaconda3/envs/dataset/lib/pyth
							      								    26 LOAD_FAST 0 ( arr )					  on3.7/ast.py", line 55, in _convert_num     raise
							      5 28 SETUP_LOOP 50 ( to 80 )				    28 LOAD_FAST 4 ( i )					  ValueError('malformed node or string: ' + repr(nod
							      30 LOAD_GLOBAL 2 ( range )				    30 BINARY_SUBSCR						  e)) ValueError: malformed node or string: <_ast.At
							      32 LOAD_CONST 1 ( 0 )					    32 CALL_FUNCTION 1						  tribute object at 0x7f5f46483090>
							      34 LOAD_FAST 1 ( n )					    34 STORE_FAST 5 ( curr_sum )				  
							      36 CALL_FUNCTION 2					    								  
							      38 GET_ITER						    6 36 LOAD_FAST 0 ( arr )					  
							      >> 40 FOR_ITER 36 ( to 78 )				    38 LOAD_FAST 4 ( i )					  
							      42 STORE_FAST 5 ( j )					    40 BINARY_SUBSCR						  
							      								    42 STORE_FAST 6 ( curr_sum )				  
							      6 44 LOAD_GLOBAL 3 ( int )				    								  
							      46 LOAD_FAST 3 ( i )					    7 44 LOAD_FAST 2 ( res )					  
							      48 LOAD_FAST 5 ( j )					    46 LOAD_FAST 6 ( curr_sum )					  
							      50 BINARY_ADD						    48 BINARY_SUBSCR						  
							      52 LOAD_FAST 1 ( n )					    50 LOAD_FAST 5 ( curr_sum )					  
							      54 BINARY_MODULO						    52 COMPARE_OP 4 ( > )					  
							      56 CALL_FUNCTION 1					    54 POP_JUMP_IF_FALSE 20					  
							      58 STORE_FAST 6 ( index )					    								  
							      								    8 56 LOAD_FAST 2 ( res )					  
							      7 60 LOAD_FAST 4 ( curr_sum )				    58 LOAD_FAST 6 ( curr_sum )					  
							      62 LOAD_FAST 5 ( j )					    60 BINARY_SUBSCR						  
							      64 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 5 ( curr_sum )					  
							      66 LOAD_FAST 6 ( index )					    64 BINARY_SUBSCR						  
							      68 BINARY_SUBSCR						    66 LOAD_FAST 5 ( curr_sum )					  
							      70 BINARY_MULTIPLY					    68 COMPARE_OP 4 ( > )					  
							      72 INPLACE_ADD						    70 POP_JUMP_IF_FALSE 20					  
							      74 STORE_FAST 4 ( curr_sum )				    								  
							      76 JUMP_ABSOLUTE 40					    9 72 LOAD_FAST 2 ( res )					  
							      >> 78 POP_BLOCK						    74 LOAD_FAST 6 ( curr_sum )					  
							      								    76 BINARY_SUBSCR						  
							      8 >> 80 LOAD_GLOBAL 4 ( max )				    78 LOAD_FAST 5 ( curr_sum )					  
							      82 LOAD_FAST 2 ( res )					    80 COMPARE_OP 4 ( > )					  
							      84 LOAD_FAST 4 ( curr_sum )				    82 POP_JUMP_IF_FALSE 20					  
							      86 CALL_FUNCTION 2					    								  
							      88 STORE_FAST 2 ( res )					    10 84 LOAD_FAST 2 ( res )					  
							      90 JUMP_ABSOLUTE 20					    86 LOAD_FAST 6 ( curr_sum )					  
							      >> 92 POP_BLOCK						    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 5 ( curr_sum )					  
							      9 >> 94 LOAD_FAST 2 ( res )				    92 BINARY_SUBSCR						  
							      96 RETURN_VALUE NEW_LINE					    94 LOAD_FAST 5 ( curr_sum )					  
							      								    96 STORE_SUBSCR						  
							      								    								  
							      								    11 98 LOAD_FAST 2 ( res )					  
							      								    100 RETURN_VALUE						  
							      								    >> 102 JUMP_ABSOLUTE 20					  
							      								    >> 104 POP_BLOCK						  
							      								    								  
							      								    12 >> 106 LOAD_FAST 2 ( res )				  
							      								    108 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN
--							      --							    --								  --
def power ( x , y ) :					      Disassembly of <code object power at 0x7f33e2644f60, file "<d Disassembly of <code object power at 0x7f2b01639660, file "<d error : Traceback (most recent call last):   File
    if ( y == 0 ) : return 1				      2 0 LOAD_FAST 1 ( y )					    2 0 LOAD_FAST 0 ( x )					  "XLM/dis_script.py", line 59, in <module>	for
    elif ( int ( y % 2 ) == 0 ) :			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
	return ( power ( x , int ( y / 2 ) ) * power ( x , in 4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  y", line 47, in run_dis_script     co_code, co_nlo
    else :						      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  cals, co_varnames, co_names, co_consts, co_linesta
	return ( x * power ( x , int ( y / 2 ) ) * power ( x  8 LOAD_CONST 2 ( 1 )					    								  rts = dis_asm.parse(bytecode) TypeError: cannot un
							      10 RETURN_VALUE						    3 8 LOAD_FAST 0 ( x )					  pack non-iterable NoneType object
							      								    10 LOAD_CONST 2 ( 1 )					  
							      3 >> 12 LOAD_GLOBAL 0 ( int )				    12 COMPARE_OP 2 ( == )					  
							      14 LOAD_FAST 1 ( y )					    14 POP_JUMP_IF_FALSE 20					  
							      16 LOAD_CONST 3 ( 2 )					    								  
							      18 BINARY_MODULO						    4 16 LOAD_FAST 0 ( x )					  
							      20 CALL_FUNCTION 1					    18 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_CONST 1 ( 0 )					    20 BINARY_SUBTRACT						  
							      24 COMPARE_OP 2 ( == )					    22 STORE_FAST 1 ( y )					  
							      26 POP_JUMP_IF_FALSE 64					    								  
							      								    5 >> 24 LOAD_FAST 0 ( x )					  
							      4 28 LOAD_GLOBAL 1 ( power )				    26 LOAD_CONST 3 ( 2 )					  
							      30 LOAD_FAST 0 ( x )					    28 BINARY_POWER						  
							      32 LOAD_GLOBAL 0 ( int )					    30 LOAD_FAST 1 ( y )					  
							      34 LOAD_FAST 1 ( y )					    32 LOAD_CONST 3 ( 2 )					  
							      36 LOAD_CONST 3 ( 2 )					    34 BINARY_POWER						  
							      38 BINARY_TRUE_DIVIDE					    36 BINARY_SUBTRACT						  
							      40 CALL_FUNCTION 1					    38 LOAD_FAST 1 ( y )					  
							      42 CALL_FUNCTION 2					    40 LOAD_CONST 3 ( 2 )					  
							      44 LOAD_GLOBAL 1 ( power )				    42 BINARY_POWER						  
							      46 LOAD_FAST 0 ( x )					    44 BINARY_SUBTRACT						  
							      48 LOAD_GLOBAL 0 ( int )					    46 LOAD_FAST 1 ( y )					  
							      50 LOAD_FAST 1 ( y )					    48 LOAD_CONST 3 ( 2 )					  
							      52 LOAD_CONST 3 ( 2 )					    50 BINARY_POWER						  
							      54 BINARY_TRUE_DIVIDE					    52 BINARY_SUBTRACT						  
							      56 CALL_FUNCTION 1					    54 LOAD_FAST 1 ( y )					  
							      58 CALL_FUNCTION 2					    56 LOAD_CONST 3 ( 2 )					  
							      60 BINARY_MULTIPLY					    58 BINARY_POWER						  
							      62 RETURN_VALUE						    60 BINARY_SUBTRACT						  
							      								    62 LOAD_FAST 1 ( y )					  
							      6 >> 64 LOAD_FAST 0 ( x )					    64 LOAD_CONST 3 ( 2 )					  
							      66 LOAD_GLOBAL 1 ( power )				    66 BINARY_POWER						  
							      68 LOAD_FAST 0 ( x )					    68 BINARY_SUBTRACT						  
							      70 LOAD_GLOBAL 0 ( int )					    70 LOAD_FAST 1 ( y )					  
							      72 LOAD_FAST 1 ( y )					    72 LOAD_CONST 3 ( 2 )					  
							      74 LOAD_CONST 3 ( 2 )					    74 BINARY_POWER						  
							      76 BINARY_TRUE_DIVIDE					    76 BINARY_SUBTRACT						  
							      78 CALL_FUNCTION 1					    78 LOAD_FAST 1 ( y )					  
							      80 CALL_FUNCTION 2					    80 LOAD_CONST 3 ( 2 )					  
							      82 BINARY_MULTIPLY					    82 BINARY_POWER						  
							      84 LOAD_GLOBAL 1 ( power )				    84 BINARY_SUBTRACT						  
							      86 LOAD_FAST 0 ( x )					    86 LOAD_FAST 1 ( y )					  
							      88 LOAD_GLOBAL 0 ( int )					    88 LOAD_CONST 3 ( 2 )					  
							      90 LOAD_FAST 1 ( y )					    90 BINARY_POWER						  
							      92 LOAD_CONST 3 ( 2 )					    92 BINARY_SUBTRACT						  
							      94 BINARY_TRUE_DIVIDE					    94 LOAD_FAST 1 ( y )					  
							      96 CALL_FUNCTION 1					    96 LOAD_CONST 3 ( 2 )					  
							      98 CALL_FUNCTION 2					    98 BINARY_POWER						  
							      100 BINARY_MULTIPLY					    100 BINARY_SUBTRACT						  
							      102 RETURN_VALUE						    102 LOAD_FAST 1 ( y )					  
							      104 LOAD_CONST 0 ( None )					    104 LOAD_CONST 3 ( 2 )					  
							      106 RETURN_VALUE NEW_LINE					    106 BINARY_POWER						  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_FAST 1 ( y )					  
							      								    112 LOAD_CONST 3 ( 2 )					  
							      								    114 BINARY_POWER						  
							      								    116 BINARY_SUBTRACT						  
							      								    118 LOAD_FAST 1 ( y )					  
							      								    120 LOAD_CONST 3 ( 2 )					  
							      								    122 BINARY_POWER						  
							      								    124 BINARY_SUBTRACT						  
							      								    126 LOAD_FAST 1 ( y )					  
							      								    128 LOAD_CONST 3 ( 2 )					  
							      								    130 BINARY_POWER						  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 1 ( y )					  
							      								    136 LOAD_CONST 3 ( 2 )					  
							      								    138 BINARY_POWER						  
							      								    140 LOAD_FAST 1 ( y )					  
							      								    142 LOAD_CONST 3 ( 2 )					  
							      								    144 BINARY_POWER						  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 1 ( y )					  
							      								    150 LOAD_CONST 3 ( 2 )					  
							      								    152 BINARY_POWER						  
							      								    154 BINARY_SUBTRACT						  
							      								    156 LOAD_FAST 1 ( y )					  
							      								    158 LOAD_CONST 3 ( 2 )					  
							      								    160 BINARY_POWER						  
							      								    162 BINARY_SUBTRACT						  
							      								    164 LOAD_FAST 1 ( y )					  
							      								    166 LOAD_CONST 3 ( 2 )					  
							      								    168 BINARY_POWER						  
							      								    170 BINARY_SUBTRACT						  
							      								    172 LOAD_FAST 1 ( y )					  
							      								    174 LOAD_CONST 3 ( 2 )					  
							      								    176 BINARY_POWER						  
							      								    178 BINARY_SUBTRACT						  
							      								    180 LOAD_FAST 1 ( y )					  
							      								    182 LOAD_CONST 3 ( 2 )					  
							      								    184 BINARY_POWER						  
							      								    186 BINARY_SUBTRACT						  
							      								    188 LOAD_FAST 1 (						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1		    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1
--							      --							    --								  --
def printCountDP ( dist ) :				      Disassembly of <code object printCountDP at 0x7f33e26494b0, f Disassembly of <code object printCountDP at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    count = [ 0 ] * ( dist + 1 )			      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    count [ 0 ] = 1					      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'dist' , ) )				  (item)   File "main.py", line 34, in <module>	  Fi
    count [ 1 ] = 1					      4 LOAD_FAST 0 ( dist )					    4 IMPORT_NAME 0 ( numpy )					  le "<dis>", line 2, in printCountDP	File "<froze
    count [ 2 ] = 2					      6 LOAD_CONST 2 ( 1 )					    6 IMPORT_FROM 1 ( dist )					  n importlib._bootstrap>", line 1020, in _handle_fr
    for i in range ( 3 , dist + 1 ) :			      8 BINARY_ADD						    8 STORE_FAST 0 ( dist )					  omlist TypeError: 'int' object is not iterable
	count [ i ] = ( count [ i - 1 ] + count [ i - 2 ] + c 10 BINARY_MULTIPLY					    10 POP_TOP							  
    return count [ dist ] ;				      12 STORE_FAST 1 ( count )					    								  
							      								    3 12 LOAD_CONST 1 ( 0 )					  
							      3 14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( ( 'dist' , ) )				  
							      16 LOAD_FAST 1 ( count )					    16 IMPORT_NAME 2 ( numpy )					  
							      18 LOAD_CONST 1 ( 0 )					    18 IMPORT_FROM 3 ( dist )					  
							      20 STORE_SUBSCR						    20 STORE_FAST 1 ( dist )					  
							      								    22 POP_TOP							  
							      4 22 LOAD_CONST 2 ( 1 )					    								  
							      24 LOAD_FAST 1 ( count )					    4 24 SETUP_LOOP 26 ( to 46 )				  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 0 ( dist )					  
							      28 STORE_SUBSCR						    28 GET_ITER							  
							      								    >> 30 FOR_ITER 18 ( to 44 )					  
							      5 30 LOAD_CONST 3 ( 2 )					    32 STORE_FAST 2 ( i )					  
							      32 LOAD_FAST 1 ( count )					    								  
							      34 LOAD_CONST 3 ( 2 )					    5 34 LOAD_FAST 1 ( dist )					  
							      36 STORE_SUBSCR						    36 LOAD_METHOD 4 ( append )					  
							      								    38 LOAD_FAST 2 ( i )					  
							      6 38 SETUP_LOOP 62 ( to 102 )				    40 CALL_METHOD 1						  
							      40 LOAD_GLOBAL 0 ( range )				    42 POP_TOP							  
							      42 LOAD_CONST 4 ( 3 )					    								  
							      44 LOAD_FAST 0 ( dist )					    6 44 LOAD_FAST 1 ( dist )					  
							      46 LOAD_CONST 2 ( 1 )					    46 LOAD_METHOD 4 ( append )					  
							      48 BINARY_ADD						    48 LOAD_FAST 2 ( i )					  
							      50 CALL_FUNCTION 2					    50 CALL_METHOD 1						  
							      52 GET_ITER						    52 POP_TOP							  
							      >> 54 FOR_ITER 44 ( to 100 )				    								  
							      56 STORE_FAST 2 ( i )					    7 54 LOAD_FAST 1 ( dist )					  
							      								    56 LOAD_METHOD 4 ( append )					  
							      7 58 LOAD_FAST 1 ( count )				    58 LOAD_FAST 2 ( i )					  
							      60 LOAD_FAST 2 ( i )					    60 CALL_METHOD 1						  
							      62 LOAD_CONST 2 ( 1 )					    62 POP_TOP							  
							      64 BINARY_SUBTRACT					    64 JUMP_ABSOLUTE 30						  
							      66 BINARY_SUBSCR						    >> 66 POP_BLOCK						  
							      68 LOAD_FAST 1 ( count )					    								  
							      70 LOAD_FAST 2 ( i )					    8 >> 68 LOAD_FAST 0 ( dist )				  
							      72 LOAD_CONST 3 ( 2 )					    70 LOAD_METHOD 4 ( append )					  
							      74 BINARY_SUBTRACT					    72 LOAD_FAST 1 ( dist )					  
							      76 BINARY_SUBSCR						    74 CALL_METHOD 1						  
							      78 BINARY_ADD						    76 POP_TOP							  
							      80 LOAD_FAST 1 ( count )					    								  
							      82 LOAD_FAST 2 ( i )					    9 78 LOAD_FAST 0 ( dist )					  
							      84 LOAD_CONST 4 ( 3 )					    80 LOAD_METHOD 4 ( append )					  
							      86 BINARY_SUBTRACT					    82 LOAD_FAST 2 ( i )					  
							      88 BINARY_SUBSCR						    84 CALL_METHOD 1						  
							      90 BINARY_ADD						    86 POP_TOP							  
							      92 LOAD_FAST 1 ( count )					    								  
							      94 LOAD_FAST 2 ( i )					    10 88 LOAD_FAST 0 ( dist )					  
							      96 STORE_SUBSCR						    90 LOAD_METHOD 4 ( append )					  
							      98 JUMP_ABSOLUTE 54					    92 LOAD_FAST 2 ( i )					  
							      >> 100 POP_BLOCK						    94 CALL_METHOD 1						  
							      								    96 POP_TOP							  
							      8 >> 102 LOAD_FAST 1 ( count )				    								  
							      104 LOAD_FAST 0 ( dist )					    11 98 LOAD_FAST 0 ( dist )					  
							      106 BINARY_SUBSCR						    100 LOAD_METHOD 4 ( append )				  
							      108 RETURN_VALUE NEW_LINE					    102 LOAD_FAST 2 ( i )					  
							      								    104 CALL_METHOD 1						  
							      								    106 POP_TOP							  
							      								    								  
							      								    12 108 LOAD_FAST 0 ( dist )					  
							      								    110 LOAD_METHOD 4 ( append )				  
							      								    112 LOAD_FAST 2 ( i )					  
							      								    114 CALL_METHOD 1						  
							      								    116 POP_TOP							  
							      								    								  
							      								    13 118 LOAD_FAST 0 ( dist )					  
							      								    120 LOAD_METHOD 4 ( append )				  
							      								    122 LOAD_FAST 2 ( i )					  
							      								    124 CALL_METHOD 1						  
							      								    126 POP_TOP							  
							      								    								  
							      								    14 128 LOAD_FAST 0 ( dist )					  
							      								    130 LOAD_METHOD 4 ( append )				  
							      								    132 LOAD_FAST 2 ( i )					  
							      								    134 CALL_METHOD 1						  
							      								    136 POP_TOP							  
							      								    138 JUMP_ABSOLUTE 30					  
							      								    >> 140 POP_BLOCK						  
							      								    								  
							      								    15 >> 142 LOAD_FAST 0 ( dist )				  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			      CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			    CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT				  CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT
--							      --							    --								  --
def checkJumbled ( num ) :				      Disassembly of <code object checkJumbled at 0x7f33e2644930, f Disassembly of <code object checkJumbled at 0x7f2b0163dc90, f failure : #Results: 5, 10
    if ( num / 10 == 0 ) :				      2 0 LOAD_FAST 0 ( num )					    2 0 LOAD_FAST 0 ( num )					  
	return True					      2 LOAD_CONST 1 ( 10 )					    2 LOAD_CONST 1 ( 10 )					  
    while ( num != 0 ) :				      4 BINARY_TRUE_DIVIDE					    4 COMPARE_OP 2 ( == )					  
	if ( num / 10 == 0 ) :				      6 LOAD_CONST 2 ( 0 )					    6 POP_JUMP_IF_FALSE 12					  
	    return True					      8 COMPARE_OP 2 ( == )					    								  
	digit1 = num % 10				      10 POP_JUMP_IF_FALSE 16					    3 8 LOAD_CONST 2 ( True )					  
	digit2 = ( num / 10 ) % 10			      								    10 RETURN_VALUE						  
	if ( abs ( digit2 - digit1 ) > 1 ) :		      3 12 LOAD_CONST 3 ( True )				    								  
	    return False				      14 RETURN_VALUE						    4 >> 12 LOAD_FAST 0 ( num )					  
	num = num / 10					      								    14 LOAD_CONST 3 ( 10 )					  
    return True						      4 >> 16 SETUP_LOOP 76 ( to 94 )				    16 COMPARE_OP 3 ( != )					  
							      >> 18 LOAD_FAST 0 ( num )					    18 POP_JUMP_IF_FALSE 24					  
							      20 LOAD_CONST 2 ( 0 )					    								  
							      22 COMPARE_OP 3 ( != )					    5 20 LOAD_CONST 4 ( False )					  
							      24 POP_JUMP_IF_FALSE 92					    22 RETURN_VALUE						  
							      								    								  
							      5 26 LOAD_FAST 0 ( num )					    6 >> 24 LOAD_CONST 5 ( '' )					  
							      28 LOAD_CONST 1 ( 10 )					    26 LOAD_FAST 0 ( num )					  
							      30 BINARY_TRUE_DIVIDE					    28 COMPARE_OP 3 ( != )					  
							      32 LOAD_CONST 2 ( 0 )					    30 POP_JUMP_IF_FALSE 48					  
							      34 COMPARE_OP 2 ( == )					    								  
							      36 POP_JUMP_IF_FALSE 42					    7 32 LOAD_CONST 6 ( False )					  
							      								    34 RETURN_VALUE						  
							      6 38 LOAD_CONST 3 ( True )				    								  
							      40 RETURN_VALUE						    8 >> 36 LOAD_CONST 7 ( '' )					  
							      								    38 LOAD_FAST 0 ( num )					  
							      7 >> 42 LOAD_FAST 0 ( num )				    40 COMPARE_OP 3 ( != )					  
							      44 LOAD_CONST 1 ( 10 )					    42 POP_JUMP_IF_FALSE 48					  
							      46 BINARY_MODULO						    								  
							      48 STORE_FAST 1 ( digit1 )				    9 44 LOAD_CONST 8 ( '' )					  
							      								    46 RETURN_VALUE						  
							      8 50 LOAD_FAST 0 ( num )					    								  
							      52 LOAD_CONST 1 ( 10 )					    10 >> 48 LOAD_CONST 9 ( '' )				  
							      54 BINARY_TRUE_DIVIDE					    50 LOAD_FAST 0 ( num )					  
							      56 LOAD_CONST 1 ( 10 )					    52 COMPARE_OP 3 ( != )					  
							      58 BINARY_MODULO						    54 POP_JUMP_IF_FALSE 64					  
							      60 STORE_FAST 2 ( digit2 )				    								  
							      								    11 56 LOAD_CONST 10 ( False )				  
							      9 62 LOAD_GLOBAL 0 ( abs )				    58 RETURN_VALUE						  
							      64 LOAD_FAST 2 ( digit2 )					    								  
							      66 LOAD_FAST 1 ( digit1 )					    12 >> 60 LOAD_CONST 11 ( '' )				  
							      68 BINARY_SUBTRACT					    62 LOAD_FAST 0 ( num )					  
							      70 CALL_FUNCTION 1					    64 COMPARE_OP 3 ( != )					  
							      72 LOAD_CONST 4 ( 1 )					    66 POP_JUMP_IF_FALSE 74					  
							      74 COMPARE_OP 4 ( > )					    								  
							      76 POP_JUMP_IF_FALSE 82					    13 68 LOAD_CONST 12 ( True )				  
							      								    70 RETURN_VALUE						  
							      10 78 LOAD_CONST 5 ( False )				    72 JUMP_FORWARD 4 ( to 76 )					  
							      80 RETURN_VALUE						    >> 74 LOAD_CONST 13 ( False )				  
							      								    >> 76 RETURN_VALUE NEW_LINE					  
							      11 >> 82 LOAD_FAST 0 ( num )				    								  
							      84 LOAD_CONST 1 ( 10 )					    								  
							      86 BINARY_TRUE_DIVIDE					    								  
							      88 STORE_FAST 0 ( num )					    								  
							      90 JUMP_ABSOLUTE 18					    								  
							      >> 92 POP_BLOCK						    								  
							      								    								  
							      12 >> 94 LOAD_CONST 3 ( True )				    								  
							      96 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CAESAR_CIPHER						      CAESAR_CIPHER						    CAESAR_CIPHER						  CAESAR_CIPHER
--							      --							    --								  --
def encrypt ( text , s ) :				      Disassembly of <code object encrypt at 0x7f33e2644f60, file " Disassembly of <code object encrypt at 0x7f2b01639660, file " error : Traceback (most recent call last):   File
    result = ""						      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( len ( text ) ) :			      2 STORE_FAST 2 ( result )					    2 STORE_FAST 1 ( result )					  (item)   File "main.py", line 35, in <module>	  Fi
	char = text [ i ]				      								    								  le "<dis>", line 2, in encrypt IndexError: string
	if ( char.isupper ( ) ) :			      3 4 SETUP_LOOP 102 ( to 108 )				    3 4 SETUP_LOOP 74 ( to 76 )					  index out of range
	    result += chr ( ( ord ( char ) + s - 65 ) % 26 +  6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	else :						      8 LOAD_GLOBAL 1 ( len )					    8 LOAD_GLOBAL 1 ( len )					  
	    result += chr ( ( ord ( char ) + s - 97 ) % 26 +  10 LOAD_FAST 0 ( text )					    10 LOAD_FAST 0 ( text )					  
    return result					      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 86 ( to 106 )				    >> 18 FOR_ITER 74 ( to 74 )					  
							      20 STORE_FAST 3 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( text )					    4 22 LOAD_FAST 0 ( text )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_FAST 2 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 STORE_FAST 4 ( char )					    28 LOAD_METHOD 2 ( isupper )				  
							      								    30 CALL_METHOD 0						  
							      5 30 LOAD_FAST 4 ( char )					    32 POP_JUMP_IF_FALSE 44					  
							      32 LOAD_METHOD 2 ( isupper )				    								  
							      34 CALL_METHOD 0						    5 34 LOAD_GLOBAL 3 ( chr )					  
							      36 POP_JUMP_IF_FALSE 72					    36 LOAD_FAST 0 ( text )					  
							      								    38 LOAD_FAST 2 ( i )					  
							      6 38 LOAD_FAST 2 ( result )				    40 BINARY_SUBSCR						  
							      40 LOAD_GLOBAL 3 ( chr )					    42 LOAD_METHOD 2 ( isupper )				  
							      42 LOAD_GLOBAL 4 ( ord )					    44 CALL_METHOD 0						  
							      44 LOAD_FAST 4 ( char )					    46 CALL_FUNCTION 1						  
							      46 CALL_FUNCTION 1					    48 POP_JUMP_IF_FALSE 18					  
							      48 LOAD_FAST 1 ( s )					    								  
							      50 BINARY_ADD						    6 50 LOAD_FAST 1 ( result )					  
							      52 LOAD_CONST 2 ( 65 )					    52 LOAD_FAST 2 ( i )					  
							      54 BINARY_SUBTRACT					    54 BINARY_SUBSCR						  
							      56 LOAD_CONST 3 ( 26 )					    56 LOAD_METHOD 2 ( isupper )				  
							      58 BINARY_MODULO						    58 CALL_METHOD 0						  
							      60 LOAD_CONST 2 ( 65 )					    60 POP_JUMP_IF_FALSE 18					  
							      62 BINARY_ADD						    								  
							      64 CALL_FUNCTION 1					    7 62 LOAD_FAST 1 ( result )					  
							      66 INPLACE_ADD						    64 RETURN_VALUE						  
							      68 STORE_FAST 2 ( result )				    								  
							      70 JUMP_ABSOLUTE 18					    8 >> 66 LOAD_FAST 1 ( result )				  
							      								    68 RETURN_VALUE						  
							      8 >> 72 LOAD_FAST 2 ( result )				    70 JUMP_ABSOLUTE 18						  
							      74 LOAD_GLOBAL 3 ( chr )					    >> 72 POP_BLOCK						  
							      76 LOAD_GLOBAL 4 ( ord )					    								  
							      78 LOAD_FAST 4 ( char )					    9 >> 74 LOAD_FAST 1 ( result )				  
							      80 CALL_FUNCTION 1					    76 RETURN_VALUE NEW_LINE					  
							      82 LOAD_FAST 1 ( s )					    								  
							      84 BINARY_ADD						    								  
							      86 LOAD_CONST 4 ( 97 )					    								  
							      88 BINARY_SUBTRACT					    								  
							      90 LOAD_CONST 3 ( 26 )					    								  
							      92 BINARY_MODULO						    								  
							      94 LOAD_CONST 4 ( 97 )					    								  
							      96 BINARY_ADD						    								  
							      98 CALL_FUNCTION 1					    								  
							      100 INPLACE_ADD						    								  
							      102 STORE_FAST 2 ( result )				    								  
							      104 JUMP_ABSOLUTE 18					    								  
							      >> 106 POP_BLOCK						    								  
							      								    								  
							      9 >> 108 LOAD_FAST 2 ( result )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING
--							      --							    --								  --
def twoWaySort ( arr , n ) :				      Disassembly of <code object twoWaySort at 0x7f33e2653f60, fil Disassembly of <code object twoWaySort at 0x7f2b0163dc90, fil error : /bin/bash: line 1: 12460 Segmentation faul
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 46 ( to 48 )				    2 0 SETUP_LOOP 76 ( to 78 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( arr [ i ] & 1 ) :				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    arr [ i ] *= - 1				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    arr.sort ( )					      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  24/eval_scripts/python_sa-dis_sa.valid/SORT_EVEN_N
    for i in range ( 0 , n ) :				      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  UMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING
	if ( arr [ i ] & 1 ) :				      10 GET_ITER						    10 GET_ITER							  _ORDER_1.dis
	    arr [ i ] *= - 1				      >> 12 FOR_ITER 32 ( to 46 )				    >> 12 FOR_ITER 76 ( to 76 )					  
							      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
							      								    								  
							      3 16 LOAD_FAST 0 ( arr )					    3 16 LOAD_FAST 2 ( i )					  
							      18 LOAD_FAST 2 ( i )					    18 LOAD_FAST 0 ( arr )					  
							      20 BINARY_SUBSCR						    20 LOAD_FAST 2 ( i )					  
							      22 LOAD_CONST 2 ( 1 )					    22 BINARY_SUBSCR						  
							      24 BINARY_AND						    24 BINARY_SUBTRACT						  
							      26 POP_JUMP_IF_FALSE 12					    26 LOAD_CONST 2 ( 1 )					  
							      								    28 BINARY_SUBTRACT						  
							      4 28 LOAD_FAST 0 ( arr )					    30 LOAD_FAST 0 ( arr )					  
							      30 LOAD_FAST 2 ( i )					    32 BINARY_SUBTRACT						  
							      32 DUP_TOP_TWO						    34 LOAD_CONST 2 ( 1 )					  
							      34 BINARY_SUBSCR						    36 BINARY_SUBTRACT						  
							      36 LOAD_CONST 3 ( - 1 )					    38 BINARY_SUBTRACT						  
							      38 INPLACE_MULTIPLY					    40 LOAD_CONST 2 ( 1 )					  
							      40 ROT_THREE						    42 BINARY_SUBTRACT						  
							      42 STORE_SUBSCR						    44 BINARY_MULTIPLY						  
							      44 JUMP_ABSOLUTE 12					    46 BINARY_ADD						  
							      >> 46 POP_BLOCK						    48 LOAD_FAST 0 ( arr )					  
							      								    50 LOAD_FAST 2 ( i )					  
							      5 >> 48 LOAD_FAST 0 ( arr )				    52 BINARY_SUBSCR						  
							      50 LOAD_METHOD 1 ( sort )					    54 BINARY_SUBTRACT						  
							      52 CALL_METHOD 0						    56 LOAD_CONST 2 ( 1 )					  
							      54 POP_TOP						    58 BINARY_SUBTRACT						  
							      								    60 LOAD_FAST 0 ( arr )					  
							      6 56 SETUP_LOOP 46 ( to 104 )				    62 BINARY_SUBTRACT						  
							      58 LOAD_GLOBAL 0 ( range )				    64 LOAD_CONST 2 ( 1 )					  
							      60 LOAD_CONST 1 ( 0 )					    66 BINARY_SUBTRACT						  
							      62 LOAD_FAST 1 ( n )					    68 BINARY_SUBTRACT						  
							      64 CALL_FUNCTION 2					    70 LOAD_FAST 0 ( arr )					  
							      66 GET_ITER						    72 BINARY_SUBTRACT						  
							      >> 68 FOR_ITER 32 ( to 102 )				    74 LOAD_CONST 2 ( 1 )					  
							      70 STORE_FAST 2 ( i )					    76 BINARY_SUBTRACT						  
							      								    78 LOAD_FAST 0 ( arr )					  
							      7 72 LOAD_FAST 0 ( arr )					    80 BINARY_SUBTRACT						  
							      74 LOAD_FAST 2 ( i )					    82 LOAD_CONST 2 ( 1 )					  
							      76 BINARY_SUBSCR						    84 BINARY_SUBTRACT						  
							      78 LOAD_CONST 2 ( 1 )					    86 LOAD_FAST 0 ( arr )					  
							      80 BINARY_AND						    88 BINARY_SUBTRACT						  
							      82 POP_JUMP_IF_FALSE 68					    90 LOAD_CONST 2 ( 1 )					  
							      								    92 BINARY_SUBTRACT						  
							      8 84 LOAD_FAST 0 ( arr )					    94 LOAD_FAST 0 ( arr )					  
							      86 LOAD_FAST 2 ( i )					    96 BINARY_SUBTRACT						  
							      88 DUP_TOP_TWO						    98 LOAD_CONST 2 ( 1 )					  
							      90 BINARY_SUBSCR						    100 BINARY_SUBTRACT						  
							      92 LOAD_CONST 3 ( - 1 )					    102 BINARY_SUBTRACT						  
							      94 INPLACE_MULTIPLY					    104 LOAD_CONST 2 ( 1 )					  
							      96 ROT_THREE						    106 BINARY_SUBTRACT						  
							      98 STORE_SUBSCR						    108 LOAD_FAST 0 ( arr )					  
							      100 JUMP_ABSOLUTE 68					    110 BINARY_SUBTRACT						  
							      >> 102 POP_BLOCK						    112 LOAD_CONST 2 ( 1 )					  
							      >> 104 LOAD_CONST 0 ( None )				    114 BINARY_SUBTRACT						  
							      106 RETURN_VALUE NEW_LINE					    116 BINARY_MULTIPLY						  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_CONST 2 ( 1 )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 LOAD_FAST 0 ( arr )					  
							      								    126 BINARY_SUBTRACT						  
							      								    128 LOAD_CONST 2 ( 1 )					  
							      								    130 BINARY_SUBTRACT						  
							      								    132 BINARY_MULTIPLY						  
							      								    134 BINARY_ADD						  
							      								    136 STORE_FAST 0 ( arr )					  
							      								    								  
							      								    4 134 LOAD_FAST 0 ( arr )					  
							      								    136 LOAD_FAST 0 ( arr )					  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 STORE_SUBSCR						  
							      								    								  
							      								    5 142 LOAD_FAST 0 ( arr )					  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1
--							      --							    --								  --
def isHeap ( arr , n ) :				      Disassembly of <code object isHeap at 0x7f33e2644f60, file "< Disassembly of <code object isHeap at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :	      2 0 SETUP_LOOP 104 ( to 106 )				    2 0 SETUP_LOOP 76 ( to 78 )					  "XLM/dis_script.py", line 60, in <module>	exec
	if arr [ 2 * i + 1 ] > arr [ i ] :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  (item)   File "main.py", line 33, in <module>	  Fi
	    return False				      4 LOAD_GLOBAL 1 ( int )					    4 LOAD_GLOBAL 1 ( int )					  le "<dis>", line 2, in isHeap TypeError: int() can
	if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ]  6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 0 ( arr )					  't convert non-string with explicit base
	    return False				      8 LOAD_CONST 1 ( 2 )					    8 LOAD_CONST 1 ( 2 )					  
    return True						      10 BINARY_SUBTRACT					    10 CALL_FUNCTION 2						  
							      12 LOAD_CONST 1 ( 2 )					    12 CALL_FUNCTION 1						  
							      14 BINARY_TRUE_DIVIDE					    14 LOAD_CONST 2 ( 1 )					  
							      16 CALL_FUNCTION 1					    16 BINARY_ADD						  
							      18 LOAD_CONST 2 ( 1 )					    18 CALL_FUNCTION 1						  
							      20 BINARY_ADD						    20 GET_ITER							  
							      22 CALL_FUNCTION 1					    >> 22 FOR_ITER 68 ( to 76 )					  
							      24 GET_ITER						    24 STORE_FAST 2 ( i )					  
							      >> 26 FOR_ITER 76 ( to 104 )				    								  
							      28 STORE_FAST 2 ( i )					    3 26 LOAD_FAST 0 ( arr )					  
							      								    28 LOAD_CONST 2 ( 1 )					  
							      3 30 LOAD_FAST 0 ( arr )					    30 BINARY_SUBSCR						  
							      32 LOAD_CONST 1 ( 2 )					    32 LOAD_CONST 3 ( 2 )					  
							      34 LOAD_FAST 2 ( i )					    34 COMPARE_OP 2 ( == )					  
							      36 BINARY_MULTIPLY					    36 POP_JUMP_IF_FALSE 42					  
							      38 LOAD_CONST 2 ( 1 )					    								  
							      40 BINARY_ADD						    4 38 LOAD_FAST 0 ( arr )					  
							      42 BINARY_SUBSCR						    40 LOAD_CONST 2 ( 1 )					  
							      44 LOAD_FAST 0 ( arr )					    42 BINARY_SUBSCR						  
							      46 LOAD_FAST 2 ( i )					    44 LOAD_CONST 3 ( 2 )					  
							      48 BINARY_SUBSCR						    46 COMPARE_OP 2 ( == )					  
							      50 COMPARE_OP 4 ( > )					    48 POP_JUMP_IF_FALSE 22					  
							      52 POP_JUMP_IF_FALSE 58					    								  
							      								    5 50 LOAD_FAST 0 ( arr )					  
							      4 54 LOAD_CONST 3 ( False )				    52 LOAD_CONST 2 ( 1 )					  
							      56 RETURN_VALUE						    54 BINARY_SUBSCR						  
							      								    56 LOAD_CONST 3 ( 2 )					  
							      5 >> 58 LOAD_CONST 1 ( 2 )				    58 COMPARE_OP 2 ( == )					  
							      60 LOAD_FAST 2 ( i )					    60 POP_JUMP_IF_FALSE 22					  
							      62 BINARY_MULTIPLY					    								  
							      64 LOAD_CONST 1 ( 2 )					    6 62 LOAD_FAST 0 ( arr )					  
							      66 BINARY_ADD						    64 LOAD_CONST 2 ( 1 )					  
							      68 LOAD_FAST 1 ( n )					    66 BINARY_SUBSCR						  
							      70 COMPARE_OP 0 ( < )					    68 LOAD_CONST 3 ( 2 )					  
							      72 POP_JUMP_IF_FALSE 26					    70 COMPARE_OP 2 ( == )					  
							      74 LOAD_FAST 0 ( arr )					    72 POP_JUMP_IF_FALSE 22					  
							      76 LOAD_CONST 1 ( 2 )					    								  
							      78 LOAD_FAST 2 ( i )					    7 74 LOAD_FAST 0 ( arr )					  
							      80 BINARY_MULTIPLY					    76 LOAD_CONST 2 ( 1 )					  
							      82 LOAD_CONST 1 ( 2 )					    78 BINARY_SUBSCR						  
							      84 BINARY_ADD						    80 LOAD_CONST 3 ( 2 )					  
							      86 BINARY_SUBSCR						    82 COMPARE_OP 2 ( == )					  
							      88 LOAD_FAST 0 ( arr )					    84 POP_JUMP_IF_FALSE 22					  
							      90 LOAD_FAST 2 ( i )					    								  
							      92 BINARY_SUBSCR						    8 86 LOAD_FAST 0 ( arr )					  
							      94 COMPARE_OP 4 ( > )					    88 LOAD_CONST 2 ( 1 )					  
							      96 POP_JUMP_IF_FALSE 26					    90 BINARY_SUBSCR						  
							      								    92 LOAD_CONST 3 ( 2 )					  
							      6 98 LOAD_CONST 3 ( False )				    94 COMPARE_OP 2 ( == )					  
							      100 RETURN_VALUE						    96 POP_JUMP_IF_FALSE 22					  
							      102 JUMP_ABSOLUTE 26					    								  
							      >> 104 POP_BLOCK						    9 98 LOAD_FAST 0 ( arr )					  
							      								    100 LOAD_CONST 2 ( 1 )					  
							      7 >> 106 LOAD_CONST 4 ( True )				    102 BINARY_SUBSCR						  
							      108 RETURN_VALUE NEW_LINE					    104 LOAD_CONST 3 ( 2 )					  
							      								    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    10 110 LOAD_FAST 0 ( arr )					  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_CONST 3 ( 2 )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    11 122 LOAD_FAST 0 ( arr )					  
							      								    124 LOAD_CONST 2 ( 1 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_CONST 3 ( 2 )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    12 134 LOAD_FAST 0 ( arr )					  
							      								    136 RETURN_VALUE						  
							      								    >> 138 JUMP_ABSOLUTE 22					  
							      								    >> 140 POP_BLOCK						  
							      								    >> 142 LOAD_CONST 0 ( None )				  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S K_TH_MISSING_ELEMENT_<unk> ASING_SEQUENCE_NOT_PRESENT_GIVEN_S
--							      --							    --								  --
def find ( a , b , k , n1 , n2 ) :			      Disassembly of <code object find at 0x7f33e2653f60, file "<di Disassembly of <code object find at 0x7f2b0163dc90, file "<di script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    for i in range ( n2 ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	s.add ( b [ i ] )				      4 STORE_FAST 5 ( s )					    4 STORE_FAST 2 ( s )					  
    missing = 0						      								    								  
    for i in range ( n1 ) :				      3 6 SETUP_LOOP 30 ( to 38 )				    3 6 LOAD_GLOBAL 1 ( set )					  
	if a [ i ] not in s :				      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_FAST 0 ( a )						  
	    missing += 1				      10 LOAD_FAST 4 ( n2 )					    10 CALL_FUNCTION 1						  
	if missing == k :				      12 CALL_FUNCTION 1					    12 STORE_FAST 3 ( s )					  
	    return a [ i ]				      14 GET_ITER						    								  
    return - 1						      >> 16 FOR_ITER 18 ( to 36 )				    4 14 SETUP_LOOP 64 ( to 76 )				  
							      18 STORE_FAST 6 ( i )					    16 LOAD_GLOBAL 2 ( range )					  
							      								    18 LOAD_FAST 1 ( b )					  
							      4 20 LOAD_FAST 5 ( s )					    20 CALL_FUNCTION 1						  
							      22 LOAD_METHOD 2 ( add )					    22 GET_ITER							  
							      24 LOAD_FAST 1 ( b )					    >> 24 FOR_ITER 48 ( to 74 )					  
							      26 LOAD_FAST 6 ( i )					    26 STORE_FAST 4 ( i )					  
							      28 BINARY_SUBSCR						    								  
							      30 CALL_METHOD 1						    5 28 LOAD_FAST 2 ( s )					  
							      32 POP_TOP						    30 LOAD_FAST 3 ( s )					  
							      34 JUMP_ABSOLUTE 16					    32 COMPARE_OP 7 ( not in )					  
							      >> 36 POP_BLOCK						    34 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 >> 38 LOAD_CONST 1 ( 0 )				    6 36 LOAD_FAST 2 ( s )					  
							      40 STORE_FAST 7 ( missing )				    38 LOAD_FAST 3 ( s )					  
							      								    40 COMPARE_OP 7 ( not in )					  
							      6 42 SETUP_LOOP 52 ( to 96 )				    42 POP_JUMP_IF_FALSE 24					  
							      44 LOAD_GLOBAL 1 ( range )				    								  
							      46 LOAD_FAST 3 ( n1 )					    7 44 LOAD_FAST 2 ( s )					  
							      48 CALL_FUNCTION 1					    46 LOAD_FAST 3 ( s )					  
							      50 GET_ITER						    48 LOAD_FAST 3 ( s )					  
							      >> 52 FOR_ITER 40 ( to 94 )				    50 BINARY_SUBSCR						  
							      54 STORE_FAST 6 ( i )					    52 COMPARE_OP 6 ( in )					  
							      								    54 POP_JUMP_IF_FALSE 24					  
							      7 56 LOAD_FAST 0 ( a )					    								  
							      58 LOAD_FAST 6 ( i )					    8 56 LOAD_FAST 2 ( s )					  
							      60 BINARY_SUBSCR						    58 LOAD_FAST 3 ( s )					  
							      62 LOAD_FAST 5 ( s )					    60 BINARY_SUBSCR						  
							      64 COMPARE_OP 7 ( not in )				    62 LOAD_FAST 3 ( s )					  
							      66 POP_JUMP_IF_FALSE 76					    64 BINARY_SUBSCR						  
							      								    66 LOAD_FAST 3 ( s )					  
							      8 68 LOAD_FAST 7 ( missing )				    68 BINARY_SUBSCR						  
							      70 LOAD_CONST 2 ( 1 )					    70 LOAD_FAST 3 ( s )					  
							      72 INPLACE_ADD						    72 BINARY_SUBSCR						  
							      74 STORE_FAST 7 ( missing )				    74 LOAD_FAST 3 ( s )					  
							      								    76 BINARY_SUBSCR						  
							      9 >> 76 LOAD_FAST 7 ( missing )				    78 LOAD_FAST 3 ( s )					  
							      78 LOAD_FAST 2 ( k )					    80 BINARY_SUBSCR						  
							      80 COMPARE_OP 2 ( == )					    82 COMPARE_OP 6 ( in )					  
							      82 POP_JUMP_IF_FALSE 52					    84 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      10 84 LOAD_FAST 0 ( a )					    9 86 LOAD_FAST 2 ( s )					  
							      86 LOAD_FAST 6 ( i )					    88 LOAD_FAST 3 ( s )					  
							      88 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      90 RETURN_VALUE						    92 LOAD_FAST 3 ( s )					  
							      92 JUMP_ABSOLUTE 52					    94 BINARY_SUBSCR						  
							      >> 94 POP_BLOCK						    96 LOAD_FAST 3 ( s )					  
							      								    98 BINARY_SUBSCR						  
							      11 >> 96 LOAD_CONST 3 ( - 1 )				    100 LOAD_FAST 3 ( s )					  
							      98 RETURN_VALUE NEW_LINE					    102 BINARY_SUBSCR						  
							      								    104 LOAD_FAST 3 ( s )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 3 ( s )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 STORE_SUBSCR						  
							      								    								  
							      								    10 114 LOAD_FAST 2 ( s )					  
							      								    116 LOAD_FAST 3 ( s )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_FAST 3 ( s )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_FAST 3 ( s )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 3 ( s )					  
							      								    130 STORE_SUBSCR						  
							      								    								  
							      								    11 132 LOAD_FAST 2 ( s )					  
							      								    134 LOAD_FAST 3 ( s )					  
							      								    136 LOAD_FAST 3 ( s )					  
							      								    138 STORE_SUBSCR						  
							      								    								  
							      								    12 140 LOAD_FAST 2 ( s )					  
							      								    142 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	      COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	    COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE	  COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE
--							      --							    --								  --
def findCountOfSolutions ( n , p ) :			      Disassembly of <code object findCountOfSolutions at 0x7f33e26 Disassembly of <code object findCountOfSolutions at 0x7f2b016 error : Traceback (most recent call last):   File
    ans = 0 ;						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    for x in range ( 1 , p ) :				      2 STORE_FAST 2 ( ans )					    2 STORE_FAST 1 ( ans )					  (item)   File "main.py", line 35, in <module>	  Fi
	if ( ( x * x ) % p == 1 ) :			      								    								  le "<dis>", line 2, in findCountOfSolutions TypeEr
	    last = x + p * ( n / p ) ;			      3 4 SETUP_LOOP 86 ( to 92 )				    3 4 LOAD_CONST 1 ( 0 )					  ror: argument of type 'int' is not iterable
	    if ( last > n ) :				      6 LOAD_GLOBAL 0 ( range )					    6 STORE_FAST 2 ( ans )					  
		last -= p ;				      8 LOAD_CONST 2 ( 1 )					    								  
	    ans += ( ( last - x ) / p + 1 ) ;		      10 LOAD_FAST 1 ( p )					    4 8 SETUP_LOOP 64 ( to 76 )					  
    return int ( ans ) ;				      12 CALL_FUNCTION 2					    10 LOAD_GLOBAL 0 ( range )					  
							      14 GET_ITER						    12 LOAD_CONST 2 ( 1 )					  
							      >> 16 FOR_ITER 72 ( to 90 )				    14 LOAD_FAST 0 ( n )					  
							      18 STORE_FAST 3 ( x )					    16 CALL_FUNCTION 2						  
							      								    18 GET_ITER							  
							      4 20 LOAD_FAST 3 ( x )					    >> 20 FOR_ITER 64 ( to 74 )					  
							      22 LOAD_FAST 3 ( x )					    22 STORE_FAST 3 ( x )					  
							      24 BINARY_MULTIPLY					    								  
							      26 LOAD_FAST 1 ( p )					    5 24 LOAD_FAST 3 ( x )					  
							      28 BINARY_MODULO						    26 LOAD_FAST 1 ( ans )					  
							      30 LOAD_CONST 2 ( 1 )					    28 COMPARE_OP 6 ( in )					  
							      32 COMPARE_OP 2 ( == )					    30 POP_JUMP_IF_FALSE 20					  
							      34 POP_JUMP_IF_FALSE 16					    								  
							      								    6 32 LOAD_FAST 2 ( ans )					  
							      5 36 LOAD_FAST 3 ( x )					    34 LOAD_FAST 1 ( ans )					  
							      38 LOAD_FAST 1 ( p )					    36 LOAD_FAST 3 ( x )					  
							      40 LOAD_FAST 0 ( n )					    38 BINARY_SUBTRACT						  
							      42 LOAD_FAST 1 ( p )					    40 LOAD_FAST 1 ( ans )					  
							      44 BINARY_TRUE_DIVIDE					    42 BINARY_SUBTRACT						  
							      46 BINARY_MULTIPLY					    44 LOAD_FAST 1 ( ans )					  
							      48 BINARY_ADD						    46 BINARY_SUBTRACT						  
							      50 STORE_FAST 4 ( last )					    48 LOAD_FAST 1 ( ans )					  
							      								    50 BINARY_SUBTRACT						  
							      6 52 LOAD_FAST 4 ( last )					    52 LOAD_FAST 2 ( ans )					  
							      54 LOAD_FAST 0 ( n )					    54 BINARY_SUBTRACT						  
							      56 COMPARE_OP 4 ( > )					    56 LOAD_FAST 1 ( ans )					  
							      58 POP_JUMP_IF_FALSE 68					    58 BINARY_SUBTRACT						  
							      								    60 LOAD_FAST 2 ( ans )					  
							      7 60 LOAD_FAST 4 ( last )					    62 BINARY_SUBTRACT						  
							      62 LOAD_FAST 1 ( p )					    64 LOAD_FAST 3 ( x )					  
							      64 INPLACE_SUBTRACT					    66 BINARY_SUBTRACT						  
							      66 STORE_FAST 4 ( last )					    68 LOAD_FAST 1 ( ans )					  
							      								    70 BINARY_SUBTRACT						  
							      8 >> 68 LOAD_FAST 2 ( ans )				    72 LOAD_FAST 2 ( ans )					  
							      70 LOAD_FAST 4 ( last )					    74 BINARY_SUBTRACT						  
							      72 LOAD_FAST 3 ( x )					    76 LOAD_FAST 1 ( ans )					  
							      74 BINARY_SUBTRACT					    78 BINARY_SUBTRACT						  
							      76 LOAD_FAST 1 ( p )					    80 BINARY_SUBTRACT						  
							      78 BINARY_TRUE_DIVIDE					    82 LOAD_FAST 2 ( ans )					  
							      80 LOAD_CONST 2 ( 1 )					    84 BINARY_SUBTRACT						  
							      82 BINARY_ADD						    86 LOAD_FAST 1 ( ans )					  
							      84 INPLACE_ADD						    88 BINARY_SUBTRACT						  
							      86 STORE_FAST 2 ( ans )					    90 LOAD_FAST 2 ( ans )					  
							      88 JUMP_ABSOLUTE 16					    92 BINARY_SUBTRACT						  
							      >> 90 POP_BLOCK						    94 LOAD_FAST 1 ( ans )					  
							      								    96 BINARY_SUBTRACT						  
							      9 >> 92 LOAD_GLOBAL 1 ( int )				    98 LOAD_FAST 3 ( x )					  
							      94 LOAD_FAST 2 ( ans )					    100 BINARY_SUBTRACT						  
							      96 CALL_FUNCTION 1					    102 LOAD_FAST 2 ( ans )					  
							      98 RETURN_VALUE NEW_LINE					    104 BINARY_SUBTRACT						  
							      								    106 LOAD_FAST 1 ( ans )					  
							      								    108 BINARY_SUBTRACT						  
							      								    110 LOAD_FAST 2 ( ans )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 LOAD_FAST 3 ( x )					  
							      								    116 BINARY_SUBTRACT						  
							      								    118 BINARY_SUBTRACT						  
							      								    120 LOAD_FAST 1 ( ans )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 LOAD_FAST 2 ( ans )					  
							      								    126 BINARY_SUBTRACT						  
							      								    128 LOAD_FAST 2 ( ans )					  
							      								    130 BINARY_SUBTRACT						  
							      								    132 RETURN_VALUE						  
							      								    >> 134 JUMP_ABSOLUTE 20					  
							      								    >> 136 POP_BLOCK						  
							      								    >> 138 JUMP_ABSOLUTE 20					  
							      								    >> 140 POP_BLOCK						  
							      								    								  
							      								    7 >> 142 LOAD_FAST 1 ( ans )				  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
def to_upper ( string ) :				      Disassembly of <code object to_upper at 0x7f33e26494b0, file  Disassembly of <code object to_upper at 0x7f2b0163dc90, file  script_not_found : None
    for i in range ( len ( string ) ) :			      2 0 SETUP_LOOP 108 ( to 110 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	if ( 'a' <= string [ i ] <= 'z' ) :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    string = ( string [ 0 : i ] + chr ( ord ( string  4 LOAD_GLOBAL 1 ( len )					    4 LOAD_GLOBAL 1 ( len )					  
    return string ;					      6 LOAD_FAST 0 ( string )					    6 LOAD_FAST 0 ( string )					  
							      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
							      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
							      12 GET_ITER						    12 GET_ITER							  
							      >> 14 FOR_ITER 92 ( to 108 )				    >> 14 FOR_ITER 54 ( to 76 )					  
							      16 STORE_FAST 1 ( i )					    16 STORE_FAST 1 ( i )					  
							      								    								  
							      3 18 LOAD_CONST 1 ( 'a' )					    3 18 LOAD_GLOBAL 2 ( ord )					  
							      20 LOAD_FAST 0 ( string )					    20 LOAD_FAST 1 ( i )					  
							      22 LOAD_FAST 1 ( i )					    22 CALL_FUNCTION 1						  
							      24 BINARY_SUBSCR						    24 LOAD_CONST 1 ( 0 )					  
							      26 DUP_TOP						    26 COMPARE_OP 4 ( > )					  
							      28 ROT_THREE						    28 POP_JUMP_IF_FALSE 14					  
							      30 COMPARE_OP 1 ( <= )					    								  
							      32 POP_JUMP_IF_FALSE 42					    4 30 LOAD_FAST 1 ( i )					  
							      34 LOAD_CONST 2 ( 'z' )					    32 LOAD_CONST 2 ( 1 )					  
							      36 COMPARE_OP 1 ( <= )					    34 INPLACE_ADD						  
							      38 POP_JUMP_IF_FALSE 14					    36 STORE_FAST 1 ( i )					  
							      40 JUMP_FORWARD 4 ( to 46 )				    38 JUMP_ABSOLUTE 14						  
							      >> 42 POP_TOP						    >> 40 POP_BLOCK						  
							      44 JUMP_ABSOLUTE 14					    								  
							      								    5 >> 42 LOAD_FAST 1 ( i )					  
							      4 >> 46 LOAD_FAST 0 ( string )				    44 RETURN_VALUE NEW_LINE					  
							      48 LOAD_CONST 3 ( 0 )					    								  
							      50 LOAD_FAST 1 ( i )					    								  
							      52 BUILD_SLICE 2						    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_GLOBAL 2 ( chr )					    								  
							      58 LOAD_GLOBAL 3 ( ord )					    								  
							      60 LOAD_FAST 0 ( string )					    								  
							      62 LOAD_FAST 1 ( i )					    								  
							      64 BINARY_SUBSCR						    								  
							      66 CALL_FUNCTION 1					    								  
							      68 LOAD_GLOBAL 3 ( ord )					    								  
							      70 LOAD_CONST 1 ( 'a' )					    								  
							      72 CALL_FUNCTION 1					    								  
							      74 BINARY_SUBTRACT					    								  
							      76 LOAD_GLOBAL 3 ( ord )					    								  
							      78 LOAD_CONST 4 ( 'A' )					    								  
							      80 CALL_FUNCTION 1					    								  
							      82 BINARY_ADD						    								  
							      84 CALL_FUNCTION 1					    								  
							      86 BINARY_ADD						    								  
							      88 LOAD_FAST 0 ( string )					    								  
							      90 LOAD_FAST 1 ( i )					    								  
							      92 LOAD_CONST 5 ( 1 )					    								  
							      94 BINARY_ADD						    								  
							      96 LOAD_CONST 0 ( None )					    								  
							      98 BUILD_SLICE 2						    								  
							      100 BINARY_SUBSCR						    								  
							      102 BINARY_ADD						    								  
							      104 STORE_FAST 0 ( string )				    								  
							      106 JUMP_ABSOLUTE 14					    								  
							      >> 108 POP_BLOCK						    								  
							      								    								  
							      5 >> 110 LOAD_FAST 0 ( string )				    								  
							      112 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PANGRAM_CHECKING					      PANGRAM_CHECKING						    PANGRAM_CHECKING						  PANGRAM_CHECKING
--							      --							    --								  --
def checkPangram ( s ) :				      Disassembly of <code object checkPangram at 0x7f33e2653f60, f Disassembly of <code object checkPangram at 0x7f2b0163dc90, f script_not_found : None
    List = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    for i in range ( 26 ) :				      2 STORE_FAST 1 ( List )					    2 STORE_FAST 1 ( List )					  
	List.append ( False )				      								    								  
    for c in s.lower ( ) :				      3 4 SETUP_LOOP 26 ( to 32 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
	if not c == " " :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    List [ ord ( c ) - ord ( 'a' ) ] = True	      8 LOAD_CONST 1 ( 26 )					    8 LOAD_CONST 1 ( 26 )					  
    for ch in List :					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
	if ch == False :				      12 GET_ITER						    12 GET_ITER							  
	    return False				      >> 14 FOR_ITER 14 ( to 30 )				    >> 14 FOR_ITER 48 ( to 64 )					  
    return True						      16 STORE_FAST 2 ( i )					    16 STORE_FAST 2 ( i )					  
							      								    								  
							      4 18 LOAD_FAST 1 ( List )					    4 18 SETUP_LOOP 48 ( to 62 )				  
							      20 LOAD_METHOD 1 ( append )				    20 LOAD_GLOBAL 1 ( range )					  
							      22 LOAD_CONST 2 ( False )					    22 LOAD_CONST 2 ( 26 )					  
							      24 CALL_METHOD 1						    24 CALL_FUNCTION 1						  
							      26 POP_TOP						    26 GET_ITER							  
							      28 JUMP_ABSOLUTE 14					    >> 28 FOR_ITER 40 ( to 60 )					  
							      >> 30 POP_BLOCK						    30 STORE_FAST 3 ( c )					  
							      								    								  
							      5 >> 32 SETUP_LOOP 44 ( to 78 )				    5 32 LOAD_FAST 0 ( s )					  
							      34 LOAD_FAST 0 ( s )					    34 LOAD_METHOD 2 ( append )					  
							      36 LOAD_METHOD 2 ( lower )				    36 LOAD_FAST 1 ( List )					  
							      38 CALL_METHOD 0						    38 CALL_METHOD 1						  
							      40 GET_ITER						    40 POP_TOP							  
							      >> 42 FOR_ITER 32 ( to 76 )				    								  
							      44 STORE_FAST 3 ( c )					    6 42 LOAD_FAST 0 ( s )					  
							      								    44 LOAD_METHOD 2 ( append )					  
							      6 46 LOAD_FAST 3 ( c )					    46 LOAD_FAST 1 ( List )					  
							      48 LOAD_CONST 3 ( ' ' )					    48 CALL_METHOD 1						  
							      50 COMPARE_OP 2 ( == )					    50 POP_TOP							  
							      52 POP_JUMP_IF_TRUE 42					    								  
							      								    7 52 LOAD_FAST 1 ( List )					  
							      7 54 LOAD_CONST 4 ( True )				    54 LOAD_METHOD 2 ( append )					  
							      56 LOAD_FAST 1 ( List )					    56 LOAD_FAST 2 ( i )					  
							      58 LOAD_GLOBAL 3 ( ord )					    58 CALL_METHOD 1						  
							      60 LOAD_FAST 3 ( c )					    60 POP_TOP							  
							      62 CALL_FUNCTION 1					    62 JUMP_ABSOLUTE 28						  
							      64 LOAD_GLOBAL 3 ( ord )					    >> 64 POP_BLOCK						  
							      66 LOAD_CONST 5 ( 'a' )					    >> 66 JUMP_ABSOLUTE 14					  
							      68 CALL_FUNCTION 1					    >> 68 POP_BLOCK						  
							      70 BINARY_SUBTRACT					    								  
							      72 STORE_SUBSCR						    8 >> 70 LOAD_FAST 1 ( List )				  
							      74 JUMP_ABSOLUTE 42					    72 LOAD_METHOD 2 ( append )					  
							      >> 76 POP_BLOCK						    74 LOAD_FAST 2 ( i )					  
							      								    76 CALL_METHOD 1						  
							      8 >> 78 SETUP_LOOP 24 ( to 104 )				    78 POP_TOP							  
							      80 LOAD_FAST 1 ( List )					    80 JUMP_ABSOLUTE 14						  
							      82 GET_ITER						    >> 82 POP_BLOCK						  
							      >> 84 FOR_ITER 16 ( to 102 )				    								  
							      86 STORE_FAST 4 ( ch )					    9 >> 84 LOAD_FAST 1 ( List )				  
							      								    86 LOAD_METHOD 2 ( append )					  
							      9 88 LOAD_FAST 4 ( ch )					    88 LOAD_FAST 2 ( i )					  
							      90 LOAD_CONST 2 ( False )					    90 CALL_METHOD 1						  
							      92 COMPARE_OP 2 ( == )					    92 POP_TOP							  
							      94 POP_JUMP_IF_FALSE 84					    94 LOAD_CONST 0 ( None )					  
							      								    96 RETURN_VALUE NEW_LINE					  
							      10 96 LOAD_CONST 2 ( False )				    								  
							      98 RETURN_VALUE						    								  
							      100 JUMP_ABSOLUTE 84					    								  
							      >> 102 POP_BLOCK						    								  
							      								    								  
							      11 >> 104 LOAD_CONST 4 ( True )				    								  
							      106 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>	      MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		    MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>		  MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_T<unk>
--							      --							    --								  --
def calculate ( a , n ) :				      Disassembly of <code object calculate at 0x7f33e26494b0, file Disassembly of <code object calculate at 0x7f2b01639660, file script_not_found : None
    a.sort ( ) ;					      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    s = [ ] ;						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    i = 0 ;						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
    j = n - 1 ;						      6 POP_TOP							    6 POP_TOP							  
    while ( i < j ) :					      								    								  
	s.append ( ( a [ i ] + a [ j ] ) ) ;		      3 8 BUILD_LIST 0						    3 8 LOAD_CONST 1 ( 0 )					  
	i += 1 ;					      10 STORE_FAST 2 ( s )					    10 STORE_FAST 2 ( s )					  
	j -= 1 ;					      								    								  
    mini = min ( s ) ;					      4 12 LOAD_CONST 1 ( 0 )					    4 12 LOAD_CONST 2 ( 1 )					  
    maxi = max ( s ) ;					      14 STORE_FAST 3 ( i )					    14 STORE_FAST 3 ( i )					  
    return abs ( maxi - mini ) ;			      								    								  
							      5 16 LOAD_FAST 1 ( n )					    5 16 LOAD_CONST 3 ( 0 )					  
							      18 LOAD_CONST 2 ( 1 )					    18 STORE_FAST 4 ( n )					  
							      20 BINARY_SUBTRACT					    								  
							      22 STORE_FAST 4 ( j )					    6 20 SETUP_LOOP 54 ( to 72 )				  
							      								    22 LOAD_FAST 1 ( n )					  
							      6 24 SETUP_LOOP 50 ( to 76 )				    24 GET_ITER							  
							      >> 26 LOAD_FAST 3 ( i )					    >> 26 FOR_ITER 48 ( to 70 )					  
							      28 LOAD_FAST 4 ( j )					    28 STORE_FAST 5 ( i )					  
							      30 COMPARE_OP 0 ( < )					    								  
							      32 POP_JUMP_IF_FALSE 74					    7 30 LOAD_FAST 2 ( s )					  
							      								    32 LOAD_FAST 5 ( i )					  
							      7 34 LOAD_FAST 2 ( s )					    34 BINARY_SUBSCR						  
							      36 LOAD_METHOD 1 ( append )				    36 LOAD_FAST 5 ( i )					  
							      38 LOAD_FAST 0 ( a )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 5 ( i )					  
							      42 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 0 ( a )					    44 LOAD_FAST 5 ( i )					  
							      46 LOAD_FAST 4 ( j )					    46 BINARY_SUBSCR						  
							      48 BINARY_SUBSCR						    48 LOAD_FAST 5 ( i )					  
							      50 BINARY_ADD						    50 BINARY_SUBSCR						  
							      52 CALL_METHOD 1						    52 LOAD_FAST 5 ( i )					  
							      54 POP_TOP						    54 BINARY_SUBSCR						  
							      								    56 LOAD_FAST 5 ( i )					  
							      8 56 LOAD_FAST 3 ( i )					    58 BINARY_SUBSCR						  
							      58 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 5 ( i )					  
							      60 INPLACE_ADD						    62 BINARY_SUBSCR						  
							      62 STORE_FAST 3 ( i )					    64 LOAD_FAST 5 ( i )					  
							      								    66 BINARY_SUBSCR						  
							      9 64 LOAD_FAST 4 ( j )					    68 LOAD_FAST 5 ( i )					  
							      66 LOAD_CONST 2 ( 1 )					    70 BINARY_SUBSCR						  
							      68 INPLACE_SUBTRACT					    72 LOAD_FAST 5 ( i )					  
							      70 STORE_FAST 4 ( j )					    74 BINARY_SUBSCR						  
							      72 JUMP_ABSOLUTE 26					    76 LOAD_FAST 5 ( i )					  
							      >> 74 POP_BLOCK						    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 5 ( i )					  
							      10 >> 76 LOAD_GLOBAL 2 ( min )				    82 BINARY_SUBSCR						  
							      78 LOAD_FAST 2 ( s )					    84 LOAD_FAST 5 ( i )					  
							      80 CALL_FUNCTION 1					    86 STORE_SUBSCR						  
							      82 STORE_FAST 5 ( mini )					    88 JUMP_ABSOLUTE 26						  
							      								    >> 90 POP_BLOCK						  
							      11 84 LOAD_GLOBAL 3 ( max )				    >> 92 JUMP_ABSOLUTE 26					  
							      86 LOAD_FAST 2 ( s )					    >> 94 POP_BLOCK						  
							      88 CALL_FUNCTION 1					    								  
							      90 STORE_FAST 6 ( maxi )					    8 >> 96 LOAD_FAST 2 ( s )					  
							      								    98 RETURN_VALUE NEW_LINE					  
							      12 92 LOAD_GLOBAL 4 ( abs )				    								  
							      94 LOAD_FAST 6 ( maxi )					    								  
							      96 LOAD_FAST 5 ( mini )					    								  
							      98 BINARY_SUBTRACT					    								  
							      100 CALL_FUNCTION 1					    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	      GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1	    GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1		  GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1
--							      --							    --								  --
def findPairs ( arr1 , arr2 , n , m , x ) :		      Disassembly of <code object findPairs at 0x7f33e2644930, file Disassembly of <code object findPairs at 0x7f2b0163dc90, file script_not_found : None
    s = set ( )						      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    for i in range ( 0 , n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	s.add ( arr1 [ i ] )				      4 STORE_FAST 5 ( s )					    4 STORE_FAST 2 ( s )					  
    for j in range ( 0 , m ) :				      								    								  
	if ( ( x - arr2 [ j ] ) in s ) :		      3 6 SETUP_LOOP 32 ( to 40 )				    3 6 LOAD_GLOBAL 1 ( set )					  
	    print ( ( x - arr2 [ j ] ) , '' , arr2 [ j ] )    8 LOAD_GLOBAL 1 ( range )					    8 LOAD_FAST 0 ( arr1 )					  
							      10 LOAD_CONST 1 ( 0 )					    10 LOAD_FAST 1 ( arr2 )					  
							      12 LOAD_FAST 2 ( n )					    12 BINARY_SUBSCR						  
							      14 CALL_FUNCTION 2					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 STORE_FAST 3 ( s )					  
							      >> 18 FOR_ITER 18 ( to 38 )				    								  
							      20 STORE_FAST 6 ( i )					    4 18 SETUP_LOOP 64 ( to 78 )				  
							      								    20 LOAD_GLOBAL 2 ( range )					  
							      4 22 LOAD_FAST 5 ( s )					    22 LOAD_FAST 2 ( s )					  
							      24 LOAD_METHOD 2 ( add )					    24 LOAD_FAST 1 ( arr2 )					  
							      26 LOAD_FAST 0 ( arr1 )					    26 CALL_FUNCTION 2						  
							      28 LOAD_FAST 6 ( i )					    28 GET_ITER							  
							      30 BINARY_SUBSCR						    >> 30 FOR_ITER 48 ( to 76 )					  
							      32 CALL_METHOD 1						    32 STORE_FAST 4 ( i )					  
							      34 POP_TOP						    								  
							      36 JUMP_ABSOLUTE 18					    5 34 LOAD_FAST 2 ( s )					  
							      >> 38 POP_BLOCK						    36 LOAD_FAST 4 ( i )					  
							      								    38 BINARY_SUBSCR						  
							      5 >> 40 SETUP_LOOP 58 ( to 100 )				    40 STORE_FAST 5 ( suffix )					  
							      42 LOAD_GLOBAL 1 ( range )				    								  
							      44 LOAD_CONST 1 ( 0 )					    6 42 LOAD_FAST 5 ( suffix )					  
							      46 LOAD_FAST 3 ( m )					    44 LOAD_FAST 4 ( i )					  
							      48 CALL_FUNCTION 2					    46 BINARY_SUBSCR						  
							      50 GET_ITER						    48 STORE_FAST 6 ( suffix )					  
							      >> 52 FOR_ITER 44 ( to 98 )				    								  
							      54 STORE_FAST 7 ( j )					    7 50 LOAD_FAST 5 ( suffix )					  
							      								    52 LOAD_FAST 6 ( suffix )					  
							      6 56 LOAD_FAST 4 ( x )					    54 BINARY_SUBSCR						  
							      58 LOAD_FAST 1 ( arr2 )					    56 STORE_FAST 7 ( suffix )					  
							      60 LOAD_FAST 7 ( j )					    								  
							      62 BINARY_SUBSCR						    8 58 LOAD_FAST 5 ( suffix )					  
							      64 BINARY_SUBTRACT					    60 LOAD_FAST 6 ( suffix )					  
							      66 LOAD_FAST 5 ( s )					    62 BINARY_SUBSCR						  
							      68 COMPARE_OP 6 ( in )					    64 LOAD_FAST 7 ( suffix )					  
							      70 POP_JUMP_IF_FALSE 52					    66 COMPARE_OP 6 ( in )					  
							      								    68 POP_JUMP_IF_FALSE 30					  
							      7 72 LOAD_GLOBAL 3 ( print )				    								  
							      74 LOAD_FAST 4 ( x )					    9 70 LOAD_FAST 5 ( suffix )					  
							      76 LOAD_FAST 1 ( arr2 )					    72 LOAD_FAST 6 ( suffix )					  
							      78 LOAD_FAST 7 ( j )					    74 BINARY_SUBSCR						  
							      80 BINARY_SUBSCR						    76 LOAD_FAST 7 ( suffix )					  
							      82 BINARY_SUBTRACT					    78 BINARY_SUBSCR						  
							      84 LOAD_CONST 2 ( '' )					    80 LOAD_FAST 7 ( suffix )					  
							      86 LOAD_FAST 1 ( arr2 )					    82 STORE_SUBSCR						  
							      88 LOAD_FAST 7 ( j )					    								  
							      90 BINARY_SUBSCR						    10 84 LOAD_FAST 5 ( suffix )				  
							      92 CALL_FUNCTION 3					    86 LOAD_FAST 6 ( suffix )					  
							      94 POP_TOP						    88 BINARY_SUBSCR						  
							      96 JUMP_ABSOLUTE 52					    90 LOAD_FAST 7 ( suffix )					  
							      >> 98 POP_BLOCK						    92 STORE_SUBSCR						  
							      >> 100 LOAD_CONST 0 ( None )				    								  
							      102 RETURN_VALUE NEW_LINE					    11 >> 94 LOAD_FAST 2 ( s )					  
							      								    96 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	    COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	  COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
def countZeroes ( mat ) :				      Disassembly of <code object countZeroes at 0x7f33e2644930, fi Disassembly of <code object countMOVIes at 0x7f2b01639660, fi script_not_found : None
    N = 5 ;						      2 0 LOAD_CONST 1 ( 5 )					    2 0 LOAD_CONST 1 ( 5 )					  
    row = N - 1 ;					      2 STORE_FAST 1 ( N )					    2 STORE_FAST 1 ( N )					  
    col = 0 ;						      								    								  
    count = 0 ;						      3 4 LOAD_FAST 1 ( N )					    3 4 LOAD_CONST 2 ( 0 )					  
    while ( col < N ) :					      6 LOAD_CONST 2 ( 1 )					    6 STORE_FAST 2 ( N )					  
	while ( mat [ row ] [ col ] ) :			      8 BINARY_SUBTRACT						    								  
	    if ( row < 0 ) :				      10 STORE_FAST 2 ( row )					    4 8 LOAD_CONST 1 ( 5 )					  
		return count ;				      								    10 STORE_FAST 3 ( count )					  
	    row = row - 1 ;				      4 12 LOAD_CONST 3 ( 0 )					    								  
	count = count + ( row + 1 ) ;			      14 STORE_FAST 3 ( col )					    5 12 LOAD_CONST 1 ( 5 )					  
	col = col + 1 ;					      								    14 STORE_FAST 4 ( count )					  
    return count ;					      5 16 LOAD_CONST 3 ( 0 )					    								  
							      18 STORE_FAST 4 ( count )					    6 16 SETUP_LOOP 64 ( to 78 )				  
							      								    18 LOAD_FAST 0 ( mat )					  
							      6 20 SETUP_LOOP 70 ( to 92 )				    20 GET_ITER							  
							      >> 22 LOAD_FAST 3 ( col )					    >> 22 FOR_ITER 56 ( to 76 )					  
							      24 LOAD_FAST 1 ( N )					    24 STORE_FAST 5 ( i )					  
							      26 COMPARE_OP 0 ( < )					    								  
							      28 POP_JUMP_IF_FALSE 90					    7 26 LOAD_FAST 1 ( N )					  
							      								    28 LOAD_FAST 5 ( i )					  
							      7 30 SETUP_LOOP 36 ( to 68 )				    30 BINARY_SUBSCR						  
							      >> 32 LOAD_FAST 0 ( mat )					    32 STORE_FAST 6 ( j )					  
							      34 LOAD_FAST 2 ( row )					    								  
							      36 BINARY_SUBSCR						    8 34 LOAD_FAST 1 ( N )					  
							      38 LOAD_FAST 3 ( col )					    36 LOAD_FAST 6 ( j )					  
							      40 BINARY_SUBSCR						    38 BINARY_SUBSCR						  
							      42 POP_JUMP_IF_FALSE 66					    40 STORE_FAST 7 ( j )					  
							      								    								  
							      8 44 LOAD_FAST 2 ( row )					    9 42 LOAD_FAST 1 ( N )					  
							      46 LOAD_CONST 3 ( 0 )					    44 LOAD_FAST 7 ( j )					  
							      48 COMPARE_OP 0 ( < )					    46 BINARY_SUBSCR						  
							      50 POP_JUMP_IF_FALSE 56					    48 LOAD_FAST 6 ( j )					  
							      								    50 BINARY_SUBSCR						  
							      9 52 LOAD_FAST 4 ( count )				    52 LOAD_FAST 7 ( j )					  
							      54 RETURN_VALUE						    54 BINARY_SUBSCR						  
							      								    56 LOAD_FAST 6 ( j )					  
							      10 >> 56 LOAD_FAST 2 ( row )				    58 BINARY_SUBSCR						  
							      58 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 6 ( j )					  
							      60 BINARY_SUBTRACT					    62 BINARY_SUBSCR						  
							      62 STORE_FAST 2 ( row )					    64 LOAD_FAST 7 ( j )					  
							      64 JUMP_ABSOLUTE 32					    66 BINARY_SUBSCR						  
							      >> 66 POP_BLOCK						    68 LOAD_FAST 7 ( j )					  
							      								    70 BINARY_SUBSCR						  
							      11 >> 68 LOAD_FAST 4 ( count )				    72 LOAD_FAST 7 ( j )					  
							      70 LOAD_FAST 2 ( row )					    74 BINARY_SUBSCR						  
							      72 LOAD_CONST 2 ( 1 )					    76 LOAD_FAST 7 ( j )					  
							      74 BINARY_ADD						    78 BINARY_SUBSCR						  
							      76 BINARY_ADD						    80 LOAD_FAST 7 ( j )					  
							      78 STORE_FAST 4 ( count )					    82 BINARY_SUBSCR						  
							      								    84 LOAD_FAST 7 ( j )					  
							      12 80 LOAD_FAST 3 ( col )					    86 STORE_SUBSCR						  
							      82 LOAD_CONST 2 ( 1 )					    								  
							      84 BINARY_ADD						    10 88 LOAD_FAST 1 ( N )					  
							      86 STORE_FAST 3 ( col )					    90 LOAD_FAST 6 ( j )					  
							      88 JUMP_ABSOLUTE 22					    92 BINARY_SUBSCR						  
							      >> 90 POP_BLOCK						    94 LOAD_FAST 7 ( j )					  
							      								    96 BINARY_SUBSCR						  
							      13 >> 92 LOAD_FAST 4 ( count )				    98 LOAD_FAST 7 ( j )					  
							      94 RETURN_VALUE NEW_LINE					    100 STORE_SUBSCR						  
							      								    								  
							      								    11 102 LOAD_FAST 1 ( N )					  
							      								    104 LOAD_FAST 6 ( j )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 7 ( j )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_FAST 7 ( j )					  
							      								    114 STORE_SUBSCR						  
							      								    								  
							      								    12 116 LOAD_FAST 1 ( N )					  
							      								    118 LOAD_FAST 6 ( j )					  
							      								    120 STORE_SUBSCR						  
							      								    								  
							      								    13 122 LOAD_FAST 1 ( N )					  
							      								    124 LOAD_FAST 6 ( j )					  
							      								    126 STORE_SUBSCR						  
							      								    128 JUMP_ABSOLUTE 22					  
							      								    >> 130 POP_BLOCK						  
							      								    >> 132 JUMP_ABSOLUTE 22					  
							      								    >> 134 POP_BLOCK						  
							      								    								  
							      								    14 >> 136 LOAD_FAST 2 ( N )					  
							      								    138 LOAD_FAST 3 ( count )					  
							      								    140 COMPARE_OP 4 ( > )					  
							      								    142 POP_JUMP_IF_FALSE 148					  
							      								    								  
							      								    15 144 LOAD_FAST 1 ( N )					  
							      								    146 LOAD_FAST 6 ( j )					  
							      								    148 STORE_SUBSCR						  
							      								    								  
							      								    16 150 LOAD_FAST 1 ( N )					  
							      								    152 LOAD_FAST 6 ( j )					  
							      								    154 STORE_SUBSCR						  
							      								    								  
							      								    17 156 LOAD_FAST 1 ( N )					  
							      								    158 LOAD_FAST 2 ( N )					  
							      								    160 STORE_SUBSCR						  
							      								    								  
							      								    17 162 LOAD_FAST 1 ( N )					  
							      								    164								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
def decToBinary ( n ) :					      Disassembly of <code object decToBinary at 0x7f33e2653f60, fi Disassembly of <code object decToBinary at 0x7f2b01639660, fi script_not_found : None
    binaryNum = [ 0 ] * n ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_FAST 0 ( n )					  
    i = 0 ;						      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 0 )					  
    while ( n > 0 ) :					      4 LOAD_FAST 0 ( n )					    4 BINARY_SUBSCR						  
	binaryNum [ i ] = n % 2 ;			      6 BINARY_MULTIPLY						    6 LOAD_FAST 1 ( binaryNum )					  
	n = int ( n / 2 ) ;				      8 STORE_FAST 1 ( binaryNum )				    8 COMPARE_OP 4 ( > )					  
	i += 1 ;					      								    10 POP_JUMP_IF_FALSE 20					  
    for j in range ( i - 1 , - 1 , - 1 ) :		      3 10 LOAD_CONST 1 ( 0 )					    								  
	print ( binaryNum [ j ] , end = "" ) ;		      12 STORE_FAST 2 ( i )					    3 12 LOAD_CONST 2 ( 1 )					  
							      								    14 RETURN_VALUE						  
							      4 14 SETUP_LOOP 44 ( to 60 )				    								  
							      >> 16 LOAD_FAST 0 ( n )					    4 >> 16 SETUP_LOOP 64 ( to 78 )				  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_FAST 0 ( n )					  
							      20 COMPARE_OP 4 ( > )					    20 GET_ITER							  
							      22 POP_JUMP_IF_FALSE 58					    >> 22 FOR_ITER 56 ( to 76 )					  
							      								    24 STORE_FAST 2 ( line )					  
							      5 24 LOAD_FAST 0 ( n )					    								  
							      26 LOAD_CONST 2 ( 2 )					    5 26 LOAD_FAST 2 ( line )					  
							      28 BINARY_MODULO						    28 LOAD_CONST 3 ( '' )					  
							      30 LOAD_FAST 1 ( binaryNum )				    30 COMPARE_OP 2 ( == )					  
							      32 LOAD_FAST 2 ( i )					    32 POP_JUMP_IF_FALSE 42					  
							      34 STORE_SUBSCR						    								  
							      								    6 34 LOAD_FAST 2 ( line )					  
							      6 36 LOAD_GLOBAL 0 ( int )				    36 LOAD_CONST 4 ( '' )					  
							      38 LOAD_FAST 0 ( n )					    38 INPLACE_ADD						  
							      40 LOAD_CONST 2 ( 2 )					    40 STORE_FAST 2 ( line )					  
							      42 BINARY_TRUE_DIVIDE					    								  
							      44 CALL_FUNCTION 1					    7 >> 42 LOAD_FAST 2 ( line )				  
							      46 STORE_FAST 0 ( n )					    44 LOAD_CONST 5 ( '' )					  
							      								    46 COMPARE_OP 2 ( == )					  
							      7 48 LOAD_FAST 2 ( i )					    48 POP_JUMP_IF_FALSE 22					  
							      50 LOAD_CONST 3 ( 1 )					    								  
							      52 INPLACE_ADD						    8 50 LOAD_FAST 2 ( line )					  
							      54 STORE_FAST 2 ( i )					    52 LOAD_CONST 6 ( '' )					  
							      56 JUMP_ABSOLUTE 16					    54 INPLACE_ADD						  
							      >> 58 POP_BLOCK						    56 STORE_FAST 2 ( line )					  
							      								    								  
							      8 >> 60 SETUP_LOOP 40 ( to 102 )				    9 58 LOAD_FAST 2 ( line )					  
							      62 LOAD_GLOBAL 1 ( range )				    60 LOAD_CONST 7 ( '' )					  
							      64 LOAD_FAST 2 ( i )					    62 INPLACE_ADD						  
							      66 LOAD_CONST 3 ( 1 )					    64 STORE_FAST 2 ( line )					  
							      68 BINARY_SUBTRACT					    								  
							      70 LOAD_CONST 4 ( - 1 )					    10 66 LOAD_FAST 2 ( line )					  
							      72 LOAD_CONST 4 ( - 1 )					    68 LOAD_CONST 8 ( '' )					  
							      74 CALL_FUNCTION 3					    70 INPLACE_ADD						  
							      76 GET_ITER						    72 STORE_FAST 2 ( line )					  
							      >> 78 FOR_ITER 20 ( to 100 )				    74 JUMP_ABSOLUTE 22						  
							      80 STORE_FAST 3 ( j )					    >> 76 POP_BLOCK						  
							      								    								  
							      9 82 LOAD_GLOBAL 2 ( print )				    11 >> 78 LOAD_FAST 2 ( line )				  
							      84 LOAD_FAST 1 ( binaryNum )				    80 LOAD_CONST 9 ( '' )					  
							      86 LOAD_FAST 3 ( j )					    82 COMPARE_OP 2 ( == )					  
							      88 BINARY_SUBSCR						    84 POP_JUMP_IF_FALSE 90					  
							      90 LOAD_CONST 5 ( '' )					    								  
							      92 LOAD_CONST 6 ( ( 'end' , ) )				    12 86 LOAD_FAST 2 ( line )					  
							      94 CALL_FUNCTION_KW 2					    88 LOAD_CONST 10 ( '' )					  
							      96 POP_TOP						    90 INPLACE_ADD						  
							      98 JUMP_ABSOLUTE 78					    92 STORE_FAST 2 ( line )					  
							      >> 100 POP_BLOCK						    								  
							      >> 102 LOAD_CONST 0 ( None )				    13 >> 94 LOAD_FAST 2 ( line )				  
							      104 RETURN_VALUE NEW_LINE					    96 LOAD_CONST 11 ( '' )					  
							      								    98 INPLACE_ADD						  
							      								    100 STORE_FAST 2 ( line )					  
							      								    								  
							      								    14 102 LOAD_FAST 2 ( line )					  
							      								    104 LOAD_CONST 12 ( '' )					  
							      								    106 INPLACE_ADD						  
							      								    108 STORE_FAST 2 ( line )					  
							      								    								  
							      								    15 110 LOAD_FAST 2 ( line )					  
							      								    112 LOAD_CONST 13 ( '' )					  
							      								    114 INPLACE_ADD						  
							      								    116 STORE_FAST 2 ( line )					  
							      								    								  
							      								    16 118 LOAD_FAST 2 ( line )					  
							      								    120 LOAD_CONST 14 ( '' )					  
							      								    122 INPLACE_ADD						  
							      								    124 STORE_FAST 2 ( line )					  
							      								    								  
							      								    17 126 LOAD_FAST 2 ( line )					  
							      								    128 LOAD_CONST 15 ( '' )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 2 ( line )					  
							      								    134 JUMP_ABSOLUTE 22					  
							      								    >> 136 POP_BLOCK						  
							      								    >> 138 JUMP_ABSOLUTE 22					  
							      								    >> 140 POP_BLOCK						  
							      								    >> 142 LOAD_CONST 0 ( None )				  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER
--							      --							    --								  --
def overflow ( H , r , h , N , R ) :			      Disassembly of <code object overflow at 0x7f33e2644f60, file  Disassembly of <code object overflow at 0x7f2b01639660, file  script_not_found : None
    tank_cap = 3.14 * r * r * H				      2 0 LOAD_CONST 1 ( 3.14 )					    2 0 LOAD_CONST 1 ( 3.14 )					  
    water_vol = 3.14 * r * r * h			      2 LOAD_FAST 1 ( r )					    2 LOAD_FAST 0 ( H )						  
    balls_vol = N * ( 4 / 3 ) * 3.14 * R * R * R	      4 BINARY_MULTIPLY						    4 BINARY_MULTIPLY						  
    vol = water_vol + balls_vol				      6 LOAD_FAST 1 ( r )					    6 LOAD_FAST 1 ( r )						  
    if vol > tank_cap :					      8 BINARY_MULTIPLY						    8 LOAD_FAST 2 ( t )						  
	print ( "Overflow" )				      10 LOAD_FAST 0 ( H )					    10 BINARY_MULTIPLY						  
    else :						      12 BINARY_MULTIPLY					    12 BINARY_SUBTRACT						  
	print ( "Not in overflow state" )		      14 STORE_FAST 5 ( tank_cap )				    14 STORE_FAST 3 ( water_vol )				  
							      								    								  
							      3 16 LOAD_CONST 1 ( 3.14 )				    3 16 LOAD_CONST 2 ( 3.14 )					  
							      18 LOAD_FAST 1 ( r )					    18 LOAD_FAST 0 ( H )					  
							      20 BINARY_MULTIPLY					    20 BINARY_MULTIPLY						  
							      22 LOAD_FAST 1 ( r )					    22 STORE_FAST 4 ( dec_param )				  
							      24 BINARY_MULTIPLY					    								  
							      26 LOAD_FAST 2 ( h )					    4 24 LOAD_FAST 3 ( water_vol )				  
							      28 BINARY_MULTIPLY					    26 LOAD_FAST 4 ( dec_param )				  
							      30 STORE_FAST 6 ( water_vol )				    28 BINARY_SUBTRACT						  
							      								    30 LOAD_FAST 1 ( r )					  
							      4 32 LOAD_FAST 3 ( N )					    32 BINARY_MULTIPLY						  
							      34 LOAD_CONST 2 ( 1.3333333333333333 )			    34 LOAD_FAST 2 ( t )					  
							      36 BINARY_MULTIPLY					    36 BINARY_MULTIPLY						  
							      38 LOAD_CONST 1 ( 3.14 )					    38 LOAD_FAST 3 ( water_vol )				  
							      40 BINARY_MULTIPLY					    40 BINARY_MULTIPLY						  
							      42 LOAD_FAST 4 ( R )					    42 LOAD_FAST 4 ( dec_param )				  
							      44 BINARY_MULTIPLY					    44 BINARY_TRUE_DIVIDE					  
							      46 LOAD_FAST 4 ( R )					    46 LOAD_FAST 2 ( t )					  
							      48 BINARY_MULTIPLY					    48 BINARY_MULTIPLY						  
							      50 LOAD_FAST 4 ( R )					    50 LOAD_FAST 3 ( water_vol )				  
							      52 BINARY_MULTIPLY					    52 BINARY_TRUE_DIVIDE					  
							      54 STORE_FAST 7 ( balls_vol )				    54 LOAD_FAST 4 ( dec_param )				  
							      								    56 BINARY_TRUE_DIVIDE					  
							      5 56 LOAD_FAST 6 ( water_vol )				    58 STORE_FAST 5 ( dec_param )				  
							      58 LOAD_FAST 7 ( balls_vol )				    								  
							      60 BINARY_ADD						    5 60 LOAD_FAST 5 ( dec_param )				  
							      62 STORE_FAST 8 ( vol )					    62 LOAD_FAST 5 ( dec_param )				  
							      								    64 BINARY_TRUE_DIVIDE					  
							      6 64 LOAD_FAST 8 ( vol )					    66 STORE_FAST 6 ( dec_param )				  
							      66 LOAD_FAST 5 ( tank_cap )				    								  
							      68 COMPARE_OP 4 ( > )					    6 68 LOAD_FAST 6 ( dec_param )				  
							      70 POP_JUMP_IF_FALSE 82					    70 LOAD_FAST 6 ( dec_param )				  
							      								    72 BINARY_TRUE_DIVIDE					  
							      7 72 LOAD_GLOBAL 0 ( print )				    74 STORE_FAST 7 ( dec_param )				  
							      74 LOAD_CONST 3 ( 'Overflow' )				    								  
							      76 CALL_FUNCTION 1					    7 76 LOAD_FAST 7 ( dec_param )				  
							      78 POP_TOP						    78 LOAD_FAST 6 ( dec_param )				  
							      80 JUMP_FORWARD 8 ( to 90 )				    80 BINARY_TRUE_DIVIDE					  
							      								    82 STORE_FAST 8 ( dec_param )				  
							      9 >> 82 LOAD_GLOBAL 0 ( print )				    								  
							      84 LOAD_CONST 4 ( 'Not in overflow state' )		    8 84 LOAD_FAST 7 ( dec_param )				  
							      86 CALL_FUNCTION 1					    86 LOAD_FAST 8 ( dec_param )				  
							      88 POP_TOP						    88 BINARY_TRUE_DIVIDE					  
							      >> 90 LOAD_CONST 0 ( None )				    90 STORE_FAST 9 ( dec_param )				  
							      92 RETURN_VALUE NEW_LINE					    								  
							      								    9 92 LOAD_FAST 9 ( dec_param )				  
							      								    94 LOAD_FAST 7 ( dec_param )				  
							      								    96 BINARY_TRUE_DIVIDE					  
							      								    98 STORE_FAST 10 ( dec_param )				  
							      								    								  
							      								    10 100 LOAD_FAST 10 ( dec_param )				  
							      								    102 LOAD_FAST 9 ( dec_param )				  
							      								    104 BINARY_TRUE_DIVIDE					  
							      								    106 STORE_FAST 11 ( dec_param )				  
							      								    								  
							      								    11 108 LOAD_FAST 10 ( dec_param )				  
							      								    110 LOAD_FAST 11 ( dec_param )				  
							      								    112 BINARY_TRUE_DIVIDE					  
							      								    114 STORE_FAST 12 ( dec_param )				  
							      								    								  
							      								    12 116 LOAD_FAST 11 ( dec_param )				  
							      								    118 LOAD_FAST 12 ( dec_param )				  
							      								    120 LOAD_FAST 13 ( dec_param )				  
							      								    122 BINARY_TRUE_DIVIDE					  
							      								    124 LOAD_FAST 14 ( dec_param )				  
							      								    126 LOAD_FAST 15 ( dec_param )				  
							      								    128 BINARY_TRUE_DIVIDE					  
							      								    130 LOAD_FAST 10 ( dec_param )				  
							      								    132 LOAD_FAST 12 ( dec_param )				  
							      								    134 BINARY_TRUE_DIVIDE					  
							      								    136 LOAD_FAST 10 ( dec_param )				  
							      								    138 BINARY_TRUE_DIVIDE					  
							      								    140 LOAD_FAST 10 ( dec_param )				  
							      								    142 BINARY_TRUE_DIVIDE					  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIAGONALLY_DOMINANT_MATRIX				      DIAGONALLY_DOMINANT_MATRIX				    DIAGONALLY_DOMINANT_MATRIX					  DIAGONALLY_DOMINANT_MATRIX
--							      --							    --								  --
def isDDM ( m , n ) :					      Disassembly of <code object isDDM at 0x7f33e2644f60, file "<d Disassembly of <code object isDDM at 0x7f2b0163dc90, file "<d error : Traceback (most recent call last):   File
    for i in range ( 0 , n ) :				      2 0 SETUP_LOOP 106 ( to 108 )				    2 0 SETUP_LOOP 76 ( to 78 )					  "XLM/dis_script.py", line 60, in <module>	exec
	sum = 0						      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  (item)   File "main.py", line 35, in <module>	  Fi
	for j in range ( 0 , n ) :			      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in isDDM TypeError: 'list' obj
	    sum = sum + abs ( m [ i ] [ j ] )		      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 0 ( m )						  ect cannot be interpreted as an integer
	sum = sum - abs ( m [ i ] [ i ] )		      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
	if ( abs ( m [ i ] [ i ] ) < sum ) :		      10 GET_ITER						    10 GET_ITER							  
	    return False				      >> 12 FOR_ITER 92 ( to 106 )				    >> 12 FOR_ITER 76 ( to 76 )					  
    return True						      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
							      								    								  
							      3 16 LOAD_CONST 1 ( 0 )					    3 16 SETUP_LOOP 74 ( to 74 )				  
							      18 STORE_FAST 3 ( sum )					    18 LOAD_GLOBAL 1 ( range )					  
							      								    20 LOAD_CONST 1 ( 0 )					  
							      4 20 SETUP_LOOP 38 ( to 60 )				    22 LOAD_FAST 0 ( m )					  
							      22 LOAD_GLOBAL 0 ( range )				    24 CALL_FUNCTION 2						  
							      24 LOAD_CONST 1 ( 0 )					    26 GET_ITER							  
							      26 LOAD_FAST 1 ( n )					    >> 28 FOR_ITER 58 ( to 72 )					  
							      28 CALL_FUNCTION 2					    30 STORE_FAST 3 ( j )					  
							      30 GET_ITER						    								  
							      >> 32 FOR_ITER 24 ( to 58 )				    4 32 LOAD_FAST 2 ( i )					  
							      34 STORE_FAST 4 ( j )					    34 LOAD_FAST 1 ( n )					  
							      								    36 COMPARE_OP 2 ( == )					  
							      5 36 LOAD_FAST 3 ( sum )					    38 POP_JUMP_IF_FALSE 28					  
							      38 LOAD_GLOBAL 1 ( abs )					    								  
							      40 LOAD_FAST 0 ( m )					    5 40 LOAD_FAST 2 ( i )					  
							      42 LOAD_FAST 2 ( i )					    42 LOAD_FAST 1 ( n )					  
							      44 BINARY_SUBSCR						    44 COMPARE_OP 2 ( == )					  
							      46 LOAD_FAST 4 ( j )					    46 POP_JUMP_IF_FALSE 28					  
							      48 BINARY_SUBSCR						    								  
							      50 CALL_FUNCTION 1					    6 48 LOAD_FAST 2 ( i )					  
							      52 BINARY_ADD						    50 LOAD_FAST 1 ( n )					  
							      54 STORE_FAST 3 ( sum )					    52 COMPARE_OP 2 ( == )					  
							      56 JUMP_ABSOLUTE 32					    54 POP_JUMP_IF_FALSE 28					  
							      >> 58 POP_BLOCK						    								  
							      								    7 56 LOAD_FAST 2 ( i )					  
							      6 >> 60 LOAD_FAST 3 ( sum )				    58 LOAD_FAST 1 ( n )					  
							      62 LOAD_GLOBAL 1 ( abs )					    60 BINARY_SUBSCR						  
							      64 LOAD_FAST 0 ( m )					    62 LOAD_FAST 2 ( i )					  
							      66 LOAD_FAST 2 ( i )					    64 BINARY_SUBSCR						  
							      68 BINARY_SUBSCR						    66 LOAD_FAST 2 ( i )					  
							      70 LOAD_FAST 2 ( i )					    68 BINARY_SUBSCR						  
							      72 BINARY_SUBSCR						    70 LOAD_FAST 2 ( i )					  
							      74 CALL_FUNCTION 1					    72 BINARY_SUBSCR						  
							      76 BINARY_SUBTRACT					    74 LOAD_FAST 2 ( i )					  
							      78 STORE_FAST 3 ( sum )					    76 BINARY_SUBSCR						  
							      								    78 LOAD_FAST 2 ( i )					  
							      7 80 LOAD_GLOBAL 1 ( abs )				    80 BINARY_SUBSCR						  
							      82 LOAD_FAST 0 ( m )					    82 LOAD_FAST 2 ( i )					  
							      84 LOAD_FAST 2 ( i )					    84 BINARY_SUBSCR						  
							      86 BINARY_SUBSCR						    86 LOAD_FAST 2 ( i )					  
							      88 LOAD_FAST 2 ( i )					    88 BINARY_SUBSCR						  
							      90 BINARY_SUBSCR						    90 LOAD_FAST 2 ( i )					  
							      92 CALL_FUNCTION 1					    92 BINARY_SUBSCR						  
							      94 LOAD_FAST 3 ( sum )					    94 LOAD_FAST 2 ( i )					  
							      96 COMPARE_OP 0 ( < )					    96 BINARY_SUBSCR						  
							      98 POP_JUMP_IF_FALSE 12					    98 LOAD_FAST 2 ( i )					  
							      								    100 STORE_SUBSCR						  
							      8 100 LOAD_CONST 2 ( False )				    								  
							      102 RETURN_VALUE						    8 >> 102 LOAD_FAST 2 ( i )					  
							      104 JUMP_ABSOLUTE 12					    104 LOAD_FAST 1 ( n )					  
							      >> 106 POP_BLOCK						    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 114					  
							      9 >> 108 LOAD_CONST 3 ( True )				    								  
							      110 RETURN_VALUE NEW_LINE					    9 110 LOAD_FAST 2 ( i )					  
							      								    112 LOAD_FAST 1 ( n )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_FAST 2 ( i )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_FAST 2 ( i )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_FAST 2 ( i )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 2 ( i )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 LOAD_FAST 2 ( i )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_FAST 2 ( i )					  
							      								    138 STORE_SUBSCR						  
							      								    								  
							      								    10 >> 140 LOAD_FAST 2 ( i )					  
							      								    142 LOAD_FAST 1 ( n )					  
							      								    144 COMPARE_OP 2 ( == )					  
							      								    146 POP_JUMP_IF_FALSE 12					  
							      								    								  
							      								    11 148 LOAD_FAST 2 ( i )					  
							      								    150 LOAD_FAST 1 ( n )					  
							      								    152 LOAD_FAST 1 ( n )					  
							      								    154 STORE_SUBSCR						  
							      								    								  
							      								    12 >> 156 LOAD_FAST 2 ( i )					  
							      								    158 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT		      FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			    FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			  FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT
--							      --							    --								  --
def findDuplicateparenthesis ( string ) :		      Disassembly of <code object findDuplicateparenthesis at 0x7f3 Disassembly of <code object findDuplicatepdding at 0x7f2b0163 error : Traceback (most recent call last):   File
    Stack = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  "XLM/dis_script.py", line 60, in <module>	exec
    for ch in string :					      2 STORE_FAST 1 ( Stack )					    2 STORE_FAST 2 ( Stack )					  (item)   File "main.py", line 40, in <module>	  Fi
	if ch == ')' :					      								    								  le "<dis>", line 2, in findDuplicateparenthesis At
	    top = Stack.pop ( )				      3 4 SETUP_LOOP 86 ( to 92 )				    3 4 SETUP_LOOP 64 ( to 66 )					  tributeError: 'str_iterator' object has no attribu
	    elementsInside = 0				      6 LOAD_FAST 0 ( string )					    6 LOAD_FAST 0 ( string )					  te 'pop'
	    while top != '(' :				      8 GET_ITER						    8 GET_ITER							  
		elementsInside += 1			      >> 10 FOR_ITER 78 ( to 90 )				    >> 10 FOR_ITER 56 ( to 64 )					  
		top = Stack.pop ( )			      12 STORE_FAST 2 ( ch )					    12 STORE_FAST 3 ( ch )					  
	    if elementsInside < 1 :			      								    								  
		return True				      4 14 LOAD_FAST 2 ( ch )					    4 14 LOAD_FAST 3 ( ch )					  
	else :						      16 LOAD_CONST 1 ( ')' )					    16 LOAD_CONST 1 ( '' )					  
	    Stack.append ( ch )				      18 COMPARE_OP 2 ( == )					    18 COMPARE_OP 2 ( == )					  
    return False					      20 POP_JUMP_IF_FALSE 78					    20 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      5 22 LOAD_FAST 1 ( Stack )				    5 22 LOAD_FAST 3 ( ch )					  
							      24 LOAD_METHOD 0 ( pop )					    24 LOAD_METHOD 0 ( pop )					  
							      26 CALL_METHOD 0						    26 CALL_METHOD 0						  
							      28 STORE_FAST 3 ( top )					    28 STORE_FAST 4 ( ch )					  
							      								    								  
							      6 30 LOAD_CONST 2 ( 0 )					    6 30 LOAD_FAST 4 ( ch )					  
							      32 STORE_FAST 4 ( elementsInside )			    32 LOAD_CONST 2 ( 0 )					  
							      								    34 COMPARE_OP 2 ( == )					  
							      7 34 SETUP_LOOP 28 ( to 64 )				    36 POP_JUMP_IF_FALSE 40					  
							      >> 36 LOAD_FAST 3 ( top )					    								  
							      38 LOAD_CONST 3 ( '(' )					    7 38 LOAD_FAST 3 ( ch )					  
							      40 COMPARE_OP 3 ( != )					    40 LOAD_METHOD 0 ( pop )					  
							      42 POP_JUMP_IF_FALSE 62					    42 CALL_METHOD 0						  
							      								    44 STORE_FAST 5 ( ch )					  
							      8 44 LOAD_FAST 4 ( elementsInside )			    								  
							      46 LOAD_CONST 4 ( 1 )					    8 46 LOAD_FAST 4 ( ch )					  
							      48 INPLACE_ADD						    48 LOAD_METHOD 0 ( pop )					  
							      50 STORE_FAST 4 ( elementsInside )			    50 LOAD_CONST 3 ( 'ch' )					  
							      								    52 CALL_METHOD 1						  
							      9 52 LOAD_FAST 1 ( Stack )				    54 STORE_FAST 6 ( ch )					  
							      54 LOAD_METHOD 0 ( pop )					    								  
							      56 CALL_METHOD 0						    9 56 LOAD_FAST 5 ( ch )					  
							      58 STORE_FAST 3 ( top )					    58 LOAD_METHOD 0 ( pop )					  
							      60 JUMP_ABSOLUTE 36					    60 LOAD_CONST 3 ( 'ch' )					  
							      >> 62 POP_BLOCK						    62 CALL_METHOD 1						  
							      								    64 STORE_FAST 7 ( ch )					  
							      10 >> 64 LOAD_FAST 4 ( elementsInside )			    								  
							      66 LOAD_CONST 4 ( 1 )					    10 66 LOAD_FAST 6 ( ch )					  
							      68 COMPARE_OP 0 ( < )					    68 LOAD_METHOD 0 ( pop )					  
							      70 POP_JUMP_IF_FALSE 88					    70 LOAD_CONST 3 ( 'ch' )					  
							      								    72 CALL_METHOD 1						  
							      11 72 LOAD_CONST 5 ( True )				    74 STORE_FAST 8 ( ch )					  
							      74 RETURN_VALUE						    								  
							      76 JUMP_ABSOLUTE 10					    11 76 LOAD_FAST 7 ( ch )					  
							      								    78 LOAD_METHOD 0 ( pop )					  
							      13 >> 78 LOAD_FAST 1 ( Stack )				    80 LOAD_CONST 4 ( 'ch' )					  
							      80 LOAD_METHOD 1 ( append )				    82 CALL_METHOD 1						  
							      82 LOAD_FAST 2 ( ch )					    84 STORE_FAST 7 ( ch )					  
							      84 CALL_METHOD 1						    								  
							      86 POP_TOP						    12 86 LOAD_FAST 7 ( ch )					  
							      >> 88 JUMP_ABSOLUTE 10					    88 LOAD_METHOD 0 ( pop )					  
							      >> 90 POP_BLOCK						    90 LOAD_CONST 5 ( 'ch' )					  
							      								    92 CALL_METHOD 1						  
							      14 >> 92 LOAD_CONST 6 ( False )				    94 STORE_FAST 7 ( ch )					  
							      94 RETURN_VALUE NEW_LINE					    								  
							      								    13 96 LOAD_FAST 7 ( ch )					  
							      								    98 LOAD_METHOD 0 ( pop )					  
							      								    100 LOAD_CONST 6 ( 'ch' )					  
							      								    102 CALL_METHOD 1						  
							      								    104 STORE_FAST 7 ( ch )					  
							      								    								  
							      								    14 106 LOAD_FAST 7 ( ch )					  
							      								    108 LOAD_METHOD 0 ( pop )					  
							      								    110 LOAD_CONST 7 ( 'ch' )					  
							      								    112 CALL_METHOD 1						  
							      								    114 STORE_FAST 8 ( ch )					  
							      								    								  
							      								    15 116 LOAD_FAST 7 ( ch )					  
							      								    118 LOAD_METHOD 0 ( pop )					  
							      								    120 LOAD_CONST 8 ( 'ch' )					  
							      								    122 CALL_METHOD 1						  
							      								    124 STORE_FAST 7 ( ch )					  
							      								    								  
							      								    16 126 LOAD_FAST 7 ( ch )					  
							      								    128 LOAD_METHOD 0 ( pop )					  
							      								    130 LOAD_CONST 9 ( 'ch' )					  
							      								    132 CALL_METHOD 1						  
							      								    134 STORE_FAST 8 ( ch )					  
							      								    								  
							      								    17 136 LOAD_FAST 8 ( ch )					  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		      FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		    FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N			  FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N
--							      --							    --								  --
def findRepeatingElement ( arr , low , high ) :		      Disassembly of <code object findRepeatingElement at 0x7f33e26 Disassembly of <code object findRepeatingElement at 0x7f2b016 script_not_found : None
    if low > high :					      2 0 LOAD_FAST 1 ( low )					    2 0 LOAD_FAST 1 ( low )					  
	return - 1					      2 LOAD_FAST 2 ( high )					    2 LOAD_FAST 2 ( high )					  
    mid = ( low + high ) / 2				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
    if ( arr [ mid ] != mid + 1 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 20					  
	if ( mid > 0 and arr [ mid ] == arr [ mid - 1 ] ) :   								    								  
	    return mid					      3 8 LOAD_CONST 1 ( - 1 )					    3 8 LOAD_CONST 1 ( - 1 )					  
	return findRepeatingElement ( arr , low , mid - 1 )   10 RETURN_VALUE						    10 RETURN_VALUE						  
    return findRepeatingElement ( arr , mid + 1 , high )      								    								  
							      4 >> 12 LOAD_FAST 1 ( low )				    4 >> 12 LOAD_FAST 1 ( low )					  
							      14 LOAD_FAST 2 ( high )					    14 LOAD_FAST 2 ( high )					  
							      16 BINARY_ADD						    16 COMPARE_OP 4 ( > )					  
							      18 LOAD_CONST 2 ( 2 )					    18 POP_JUMP_IF_FALSE 24					  
							      20 BINARY_TRUE_DIVIDE					    								  
							      22 STORE_FAST 3 ( mid )					    5 20 LOAD_FAST 1 ( low )					  
							      								    22 LOAD_FAST 2 ( high )					  
							      5 24 LOAD_FAST 0 ( arr )					    24 BINARY_SUBTRACT						  
							      26 LOAD_FAST 3 ( mid )					    26 LOAD_FAST 2 ( high )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBTRACT						  
							      30 LOAD_FAST 3 ( mid )					    30 RETURN_VALUE						  
							      32 LOAD_CONST 3 ( 1 )					    								  
							      34 BINARY_ADD						    6 >> 32 LOAD_GLOBAL 0 ( findRepeatingElement )		  
							      36 COMPARE_OP 3 ( != )					    34 LOAD_FAST 0 ( arr )					  
							      38 POP_JUMP_IF_FALSE 88					    36 LOAD_FAST 2 ( high )					  
							      								    38 BINARY_SUBTRACT						  
							      6 40 LOAD_FAST 3 ( mid )					    40 CALL_FUNCTION 1						  
							      42 LOAD_CONST 4 ( 0 )					    42 RETURN_VALUE NEW_LINE					  
							      44 COMPARE_OP 4 ( > )					    								  
							      46 POP_JUMP_IF_FALSE 72					    								  
							      48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 3 ( mid )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 3 ( mid )					    								  
							      58 LOAD_CONST 3 ( 1 )					    								  
							      60 BINARY_SUBTRACT					    								  
							      62 BINARY_SUBSCR						    								  
							      64 COMPARE_OP 2 ( == )					    								  
							      66 POP_JUMP_IF_FALSE 72					    								  
							      								    								  
							      7 68 LOAD_FAST 3 ( mid )					    								  
							      70 RETURN_VALUE						    								  
							      								    								  
							      8 >> 72 LOAD_GLOBAL 0 ( findRepeatingElement )		    								  
							      74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_FAST 1 ( low )					    								  
							      78 LOAD_FAST 3 ( mid )					    								  
							      80 LOAD_CONST 3 ( 1 )					    								  
							      82 BINARY_SUBTRACT					    								  
							      84 CALL_FUNCTION 3					    								  
							      86 RETURN_VALUE						    								  
							      								    								  
							      9 >> 88 LOAD_GLOBAL 0 ( findRepeatingElement )		    								  
							      90 LOAD_FAST 0 ( arr )					    								  
							      92 LOAD_FAST 3 ( mid )					    								  
							      94 LOAD_CONST 3 ( 1 )					    								  
							      96 BINARY_ADD						    								  
							      98 LOAD_FAST 2 ( high )					    								  
							      100 CALL_FUNCTION 3					    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			      MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			    MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			  MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK
--							      --							    --								  --
def minRotation ( input , unlock_code ) :		      Disassembly of <code object minRotation at 0x7f33e2644f60, fi Disassembly of <code object minRotation at 0x7f2b0163dc90, fi error : /bin/bash: line 1: 12506 Segmentation faul
    rotation = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    while ( input > 0 or unlock_code > 0 ) :		      2 STORE_FAST 2 ( rotation )				    2 STORE_FAST 2 ( rotation )					  ataset/bin/python XLM/dis_script.py --script_path
	input_digit = input % 10 ;			      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	code_digit = unlock_code % 10 ;			      3 4 SETUP_LOOP 94 ( to 100 )				    3 4 SETUP_LOOP 32 ( to 40 )					  24/eval_scripts/python_sa-dis_sa.valid/MINIMUM_ROT
	rotation += min ( abs ( input_digit - code_digit ) ,  >> 6 LOAD_FAST 0 ( input )				    6 LOAD_FAST 0 ( input )					  ATIONS_UNLOCK_CIRCULAR_LOCK.dis
	input = int ( input / 10 ) ;			      8 LOAD_CONST 1 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
	unlock_code = int ( unlock_code / 10 ) ;	      10 COMPARE_OP 4 ( > )					    10 COMPARE_OP 4 ( > )					  
    return rotation ;					      12 POP_JUMP_IF_TRUE 22					    12 POP_JUMP_IF_FALSE 38					  
							      14 LOAD_FAST 1 ( unlock_code )				    								  
							      16 LOAD_CONST 1 ( 0 )					    4 14 LOAD_FAST 2 ( rotation )				  
							      18 COMPARE_OP 4 ( > )					    16 LOAD_CONST 3 ( 10 )					  
							      20 POP_JUMP_IF_FALSE 98					    18 BINARY_MODULO						  
							      								    20 STORE_FAST 2 ( rotation )				  
							      4 >> 22 LOAD_FAST 0 ( input )				    								  
							      24 LOAD_CONST 2 ( 10 )					    5 22 LOAD_FAST 2 ( rotation )				  
							      26 BINARY_MODULO						    24 LOAD_CONST 4 ( 10 )					  
							      28 STORE_FAST 3 ( input_digit )				    26 COMPARE_OP 4 ( > )					  
							      								    28 POP_JUMP_IF_FALSE 38					  
							      5 30 LOAD_FAST 1 ( unlock_code )				    								  
							      32 LOAD_CONST 2 ( 10 )					    6 30 LOAD_FAST 2 ( rotation )				  
							      34 BINARY_MODULO						    32 LOAD_CONST 5 ( 10 )					  
							      36 STORE_FAST 4 ( code_digit )				    34 BINARY_MODULO						  
							      								    36 STORE_FAST 2 ( rotation )				  
							      6 38 LOAD_FAST 2 ( rotation )				    								  
							      40 LOAD_GLOBAL 0 ( min )					    7 >> 38 LOAD_FAST 2 ( rotation )				  
							      42 LOAD_GLOBAL 1 ( abs )					    40 LOAD_CONST 6 ( - 1 )					  
							      44 LOAD_FAST 3 ( input_digit )				    42 INPLACE_ADD						  
							      46 LOAD_FAST 4 ( code_digit )				    44 STORE_FAST 2 ( rotation )				  
							      48 BINARY_SUBTRACT					    								  
							      50 CALL_FUNCTION 1					    8 46 LOAD_FAST 2 ( rotation )				  
							      52 LOAD_CONST 2 ( 10 )					    48 LOAD_CONST 7 ( - 1 )					  
							      54 LOAD_GLOBAL 1 ( abs )					    50 INPLACE_ADD						  
							      56 LOAD_FAST 3 ( input_digit )				    52 STORE_FAST 2 ( rotation )				  
							      58 LOAD_FAST 4 ( code_digit )				    								  
							      60 BINARY_SUBTRACT					    9 54 LOAD_FAST 2 ( rotation )				  
							      62 CALL_FUNCTION 1					    56 RETURN_VALUE NEW_LINE					  
							      64 BINARY_SUBTRACT					    								  
							      66 CALL_FUNCTION 2					    								  
							      68 INPLACE_ADD						    								  
							      70 STORE_FAST 2 ( rotation )				    								  
							      								    								  
							      7 72 LOAD_GLOBAL 2 ( int )				    								  
							      74 LOAD_FAST 0 ( input )					    								  
							      76 LOAD_CONST 2 ( 10 )					    								  
							      78 BINARY_TRUE_DIVIDE					    								  
							      80 CALL_FUNCTION 1					    								  
							      82 STORE_FAST 0 ( input )					    								  
							      								    								  
							      8 84 LOAD_GLOBAL 2 ( int )				    								  
							      86 LOAD_FAST 1 ( unlock_code )				    								  
							      88 LOAD_CONST 2 ( 10 )					    								  
							      90 BINARY_TRUE_DIVIDE					    								  
							      92 CALL_FUNCTION 1					    								  
							      94 STORE_FAST 1 ( unlock_code )				    								  
							      96 JUMP_ABSOLUTE 6					    								  
							      >> 98 POP_BLOCK						    								  
							      								    								  
							      9 >> 100 LOAD_FAST 2 ( rotation )				    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW
--							      --							    --								  --
def checkForSorting ( arr , n ) :			      Disassembly of <code object checkForSorting at 0x7f33e26494b0 Disassembly of <code object checkForSorting at 0x7f2b0163dc90 error : /bin/bash: line 1: 12507 Segmentation faul
    for i in range ( 0 , n - 1 ) :			      2 0 SETUP_LOOP 106 ( to 108 )				    2 0 SETUP_LOOP 64 ( to 66 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( arr [ i ] > arr [ i + 1 ] ) :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    if ( arr [ i ] - arr [ i + 1 ] == 1 ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
		arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , a 6 LOAD_FAST 1 ( n )					    6 LOAD_CONST 2 ( - 1 )					  24/eval_scripts/python_sa-dis_sa.valid/CHECK_POSSI
	    else :					      8 LOAD_CONST 2 ( 1 )					    8 CALL_FUNCTION 2						  BLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOW
		return False				      10 BINARY_SUBTRACT					    10 GET_ITER							  ED.dis
    return True						      12 CALL_FUNCTION 2					    >> 12 FOR_ITER 48 ( to 64 )					  
							      14 GET_ITER						    14 STORE_FAST 2 ( i )					  
							      >> 16 FOR_ITER 88 ( to 106 )				    								  
							      18 STORE_FAST 2 ( i )					    3 16 LOAD_FAST 0 ( arr )					  
							      								    18 LOAD_FAST 2 ( i )					  
							      3 20 LOAD_FAST 0 ( arr )					    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 2 ( i )					    22 LOAD_FAST 1 ( n )					  
							      24 BINARY_SUBSCR						    24 COMPARE_OP 4 ( > )					  
							      26 LOAD_FAST 0 ( arr )					    26 POP_JUMP_IF_FALSE 12					  
							      28 LOAD_FAST 2 ( i )					    								  
							      30 LOAD_CONST 2 ( 1 )					    4 28 LOAD_FAST 0 ( arr )					  
							      32 BINARY_ADD						    30 LOAD_FAST 2 ( i )					  
							      34 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      36 COMPARE_OP 4 ( > )					    34 LOAD_FAST 1 ( n )					  
							      38 POP_JUMP_IF_FALSE 16					    36 COMPARE_OP 4 ( > )					  
							      								    38 POP_JUMP_IF_FALSE 12					  
							      4 40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 2 ( i )					    5 40 LOAD_FAST 0 ( arr )					  
							      44 BINARY_SUBSCR						    42 LOAD_FAST 2 ( i )					  
							      46 LOAD_FAST 0 ( arr )					    44 BINARY_SUBSCR						  
							      48 LOAD_FAST 2 ( i )					    46 LOAD_FAST 1 ( n )					  
							      50 LOAD_CONST 2 ( 1 )					    48 COMPARE_OP 4 ( > )					  
							      52 BINARY_ADD						    50 POP_JUMP_IF_FALSE 12					  
							      54 BINARY_SUBSCR						    								  
							      56 BINARY_SUBTRACT					    6 52 LOAD_FAST 0 ( arr )					  
							      58 LOAD_CONST 2 ( 1 )					    54 LOAD_FAST 2 ( i )					  
							      60 COMPARE_OP 2 ( == )					    56 BINARY_SUBSCR						  
							      62 POP_JUMP_IF_FALSE 100					    58 LOAD_FAST 1 ( n )					  
							      								    60 BINARY_SUBSCR						  
							      5 64 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 1 ( n )					  
							      66 LOAD_FAST 2 ( i )					    64 BINARY_SUBSCR						  
							      68 LOAD_CONST 2 ( 1 )					    66 LOAD_FAST 1 ( n )					  
							      70 BINARY_ADD						    68 BINARY_SUBSCR						  
							      72 BINARY_SUBSCR						    70 LOAD_FAST 1 ( n )					  
							      74 LOAD_FAST 0 ( arr )					    72 BINARY_SUBSCR						  
							      76 LOAD_FAST 2 ( i )					    74 LOAD_FAST 1 ( n )					  
							      78 BINARY_SUBSCR						    76 BINARY_SUBSCR						  
							      80 ROT_TWO						    78 LOAD_FAST 1 ( n )					  
							      82 LOAD_FAST 0 ( arr )					    80 BINARY_SUBSCR						  
							      84 LOAD_FAST 2 ( i )					    82 LOAD_FAST 1 ( n )					  
							      86 STORE_SUBSCR						    84 BINARY_SUBSCR						  
							      88 LOAD_FAST 0 ( arr )					    86 LOAD_FAST 1 ( n )					  
							      90 LOAD_FAST 2 ( i )					    88 STORE_SUBSCR						  
							      92 LOAD_CONST 2 ( 1 )					    								  
							      94 BINARY_ADD						    7 90 LOAD_FAST 0 ( arr )					  
							      96 STORE_SUBSCR						    92 LOAD_FAST 2 ( i )					  
							      98 JUMP_ABSOLUTE 16					    94 BINARY_SUBSCR						  
							      								    96 LOAD_FAST 1 ( n )					  
							      7 >> 100 LOAD_CONST 3 ( False )				    98 STORE_SUBSCR						  
							      102 RETURN_VALUE						    								  
							      104 JUMP_ABSOLUTE 16					    8 100 LOAD_FAST 0 ( arr )					  
							      >> 106 POP_BLOCK						    102 LOAD_FAST 2 ( i )					  
							      								    104 BINARY_SUBSCR						  
							      8 >> 108 LOAD_CONST 4 ( True )				    106 LOAD_FAST 1 ( n )					  
							      110 RETURN_VALUE NEW_LINE					    108 STORE_SUBSCR						  
							      								    								  
							      								    9 110 LOAD_FAST 0 ( arr )					  
							      								    112 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
def insertionSortRecursive ( arr , n ) :		      Disassembly of <code object insertionSortRecursive at 0x7f33e Disassembly of <code object insertionSortortsive at 0x7f2b016 error : Traceback (most recent call last):   File
    if n <= 1 :						      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 1 ( n )					  "XLM/dis_script.py", line 60, in <module>	exec
	return						      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  (item)   File "main.py", line 48, in <module>	  Fi
    insertionSortRecursive ( arr , n - 1 )		      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  le "<dis>", line 2, in insertionSortRecursive Name
    last = arr [ n - 1 ]				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  Error: name 'insertionSortortsive' is not defined
    j = n - 2						      								    								  
    while ( j >= 0 and arr [ j ] > last ) :		      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_CONST 2 ( 0 )					  
	arr [ j + 1 ] = arr [ j ]			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	j = j - 1					      								    								  
    arr [ j + 1 ] = last				      4 >> 12 LOAD_GLOBAL 0 ( insertionSortRecursive )		    4 >> 12 LOAD_GLOBAL 0 ( insertionSortortsive )		  
							      14 LOAD_FAST 0 ( arr )					    14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_CONST 1 ( 1 )					  
							      18 LOAD_CONST 1 ( 1 )					    18 BINARY_SUBTRACT						  
							      20 BINARY_SUBTRACT					    20 BINARY_SUBSCR						  
							      22 CALL_FUNCTION 2					    22 LOAD_FAST 1 ( n )					  
							      24 POP_TOP						    24 LOAD_CONST 1 ( 1 )					  
							      								    26 BINARY_SUBTRACT						  
							      5 26 LOAD_FAST 0 ( arr )					    28 BINARY_SUBSCR						  
							      28 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( n )					  
							      30 LOAD_CONST 1 ( 1 )					    32 LOAD_CONST 1 ( 1 )					  
							      32 BINARY_SUBTRACT					    34 BINARY_SUBTRACT						  
							      34 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      36 STORE_FAST 2 ( last )					    38 LOAD_FAST 1 ( n )					  
							      								    40 LOAD_CONST 1 ( 1 )					  
							      6 38 LOAD_FAST 1 ( n )					    42 BINARY_SUBTRACT						  
							      40 LOAD_CONST 2 ( 2 )					    44 BINARY_SUBSCR						  
							      42 BINARY_SUBTRACT					    46 LOAD_FAST 1 ( n )					  
							      44 STORE_FAST 3 ( j )					    48 LOAD_CONST 1 ( 1 )					  
							      								    50 BINARY_SUBTRACT						  
							      7 46 SETUP_LOOP 48 ( to 96 )				    52 BINARY_SUBSCR						  
							      >> 48 LOAD_FAST 3 ( j )					    54 LOAD_FAST 1 ( n )					  
							      50 LOAD_CONST 3 ( 0 )					    56 LOAD_CONST 1 ( 1 )					  
							      52 COMPARE_OP 5 ( >= )					    58 BINARY_SUBTRACT						  
							      54 POP_JUMP_IF_FALSE 94					    60 BINARY_SUBSCR						  
							      56 LOAD_FAST 0 ( arr )					    62 BINARY_SUBTRACT						  
							      58 LOAD_FAST 3 ( j )					    64 LOAD_FAST 1 ( n )					  
							      60 BINARY_SUBSCR						    66 LOAD_CONST 1 ( 1 )					  
							      62 LOAD_FAST 2 ( last )					    68 BINARY_SUBTRACT						  
							      64 COMPARE_OP 4 ( > )					    70 BINARY_SUBSCR						  
							      66 POP_JUMP_IF_FALSE 94					    72 BINARY_SUBTRACT						  
							      								    74 LOAD_FAST 1 ( n )					  
							      8 68 LOAD_FAST 0 ( arr )					    76 LOAD_CONST 1 ( 1 )					  
							      70 LOAD_FAST 3 ( j )					    78 BINARY_SUBTRACT						  
							      72 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      74 LOAD_FAST 0 ( arr )					    82 BINARY_SUBTRACT						  
							      76 LOAD_FAST 3 ( j )					    84 LOAD_FAST 1 ( n )					  
							      78 LOAD_CONST 1 ( 1 )					    86 LOAD_CONST 1 ( 1 )					  
							      80 BINARY_ADD						    88 BINARY_SUBTRACT						  
							      82 STORE_SUBSCR						    90 BINARY_SUBSCR						  
							      								    92 BINARY_SUBTRACT						  
							      9 84 LOAD_FAST 3 ( j )					    94 LOAD_FAST 1 ( n )					  
							      86 LOAD_CONST 1 ( 1 )					    96 LOAD_CONST 1 ( 1 )					  
							      88 BINARY_SUBTRACT					    98 BINARY_SUBTRACT						  
							      90 STORE_FAST 3 ( j )					    100 BINARY_SUBSCR						  
							      92 JUMP_ABSOLUTE 48					    102 BINARY_SUBTRACT						  
							      >> 94 POP_BLOCK						    104 STORE_FAST 1 ( n )					  
							      								    								  
							      10 >> 96 LOAD_FAST 2 ( last )				    5 106 LOAD_FAST 1 ( n )					  
							      98 LOAD_FAST 0 ( arr )					    108 LOAD_CONST 1 ( 1 )					  
							      100 LOAD_FAST 3 ( j )					    110 BINARY_SUBTRACT						  
							      102 LOAD_CONST 1 ( 1 )					    112 LOAD_FAST 1 ( n )					  
							      104 BINARY_ADD						    114 LOAD_CONST 1 ( 1 )					  
							      106 STORE_SUBSCR						    116 BINARY_SUBTRACT						  
							      108 LOAD_CONST 0 ( None )					    118 BINARY_SUBSCR						  
							      110 RETURN_VALUE NEW_LINE					    120 LOAD_FAST 1 ( n )					  
							      								    122 LOAD_CONST 1 ( 1 )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 BINARY_SUBSCR						  
							      								    128 BINARY_SUBTRACT						  
							      								    130 LOAD_FAST 1 ( n )					  
							      								    132 LOAD_CONST 1 ( 1 )					  
							      								    134 BINARY_SUBTRACT						  
							      								    136 BINARY_SUBSCR						  
							      								    138 BINARY_SUBTRACT						  
							      								    140 LOAD_FAST 1 ( n )					  
							      								    142 LOAD_CONST 1 ( 1 )					  
							      								    144 BINARY_SUBTRACT						  
							      								    146 BINARY_SUBSCR						  
							      								    148 BINARY_SUBTRACT						  
							      								    150 LOAD_FAST 1 ( n )					  
							      								    152 LOAD_CONST 1 ( 1 )					  
							      								    154 BINARY_SUBTRACT						  
							      								    156 BINARY_SUBTRACT						  
							      								    158 LOAD_FAST 1 ( n )					  
							      								    160 LOAD_CONST 1 ( 1 )					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 BINARY_SUBTRACT						  
							      								    166 LOAD_FAST 1 ( n )					  
							      								    168 LOAD_CONST 1 ( 1 )					  
							      								    170 BINARY_SUBTRACT						  
							      								    172 BINARY_SUBTRACT						  
							      								    174 LOAD_FAST 1 ( n )					  
							      								    176 LOAD_CONST 1 ( 1 )					  
							      								    178 BINARY_SUBTRACT						  
							      								    180 BINARY_TRUE_DIVIDE					  
							      								    182 BINARY_SUBTRACT						  
							      								    184 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSTRING_1				      LONGEST_COMMON_SUBSTRING_1				    LONGEST_COMMON_SUBSTRING_1					  LONGEST_COMMON_SUBSTRING_1
--							      --							    --								  --
def lcs ( i , j , count ) :				      Disassembly of <code object lcs at 0x7f33e2649a50, file "<dis Disassembly of <code object lcs at 0x7f2b0163dc90, file "<dis script_not_found : None
    if ( i == 0 or j == 0 ) :				      2 0 LOAD_FAST 0 ( i )					    2 0 LOAD_FAST 0 ( i )					  
	return count					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( X [ i - 1 ] == Y [ j - 1 ] ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	count = lcs ( i - 1 , j - 1 , count + 1 )	      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_TRUE 12					  
    count = max ( count , max ( lcs ( i , j - 1 , 0 ) , lcs ( 8 LOAD_FAST 1 ( j )					    8 LOAD_FAST 0 ( i )						  
    return count					      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
							      12 COMPARE_OP 2 ( == )					    >> 12 COMPARE_OP 2 ( == )					  
							      14 POP_JUMP_IF_FALSE 20					    14 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      3 >> 16 LOAD_FAST 2 ( count )				    3 16 LOAD_FAST 0 ( i )					  
							      18 RETURN_VALUE						    18 LOAD_CONST 1 ( 0 )					  
							      								    20 BINARY_SUBSCR						  
							      4 >> 20 LOAD_GLOBAL 0 ( X )				    22 RETURN_VALUE						  
							      22 LOAD_FAST 0 ( i )					    								  
							      24 LOAD_CONST 2 ( 1 )					    4 >> 24 LOAD_FAST 0 ( i )					  
							      26 BINARY_SUBTRACT					    26 LOAD_CONST 1 ( 0 )					  
							      28 BINARY_SUBSCR						    28 COMPARE_OP 2 ( == )					  
							      30 LOAD_GLOBAL 1 ( Y )					    30 POP_JUMP_IF_FALSE 36					  
							      32 LOAD_FAST 1 ( j )					    								  
							      34 LOAD_CONST 2 ( 1 )					    5 32 LOAD_FAST 0 ( i )					  
							      36 BINARY_SUBTRACT					    34 LOAD_CONST 1 ( 0 )					  
							      38 BINARY_SUBSCR						    36 BINARY_SUBSCR						  
							      40 COMPARE_OP 2 ( == )					    38 RETURN_VALUE						  
							      42 POP_JUMP_IF_FALSE 68					    								  
							      								    6 >> 40 LOAD_FAST 0 ( i )					  
							      5 44 LOAD_GLOBAL 2 ( lcs )				    42 LOAD_CONST 1 ( 0 )					  
							      46 LOAD_FAST 0 ( i )					    44 COMPARE_OP 2 ( == )					  
							      48 LOAD_CONST 2 ( 1 )					    46 POP_JUMP_IF_FALSE 48					  
							      50 BINARY_SUBTRACT					    								  
							      52 LOAD_FAST 1 ( j )					    7 48 LOAD_FAST 0 ( i )					  
							      54 LOAD_CONST 2 ( 1 )					    50 LOAD_CONST 1 ( 0 )					  
							      56 BINARY_SUBTRACT					    52 BINARY_SUBSCR						  
							      58 LOAD_FAST 2 ( count )					    54 RETURN_VALUE						  
							      60 LOAD_CONST 2 ( 1 )					    								  
							      62 BINARY_ADD						    8 >> 56 LOAD_FAST 0 ( i )					  
							      64 CALL_FUNCTION 3					    58 LOAD_CONST 1 ( 0 )					  
							      66 STORE_FAST 2 ( count )					    60 COMPARE_OP 2 ( == )					  
							      								    62 POP_JUMP_IF_FALSE 64					  
							      6 >> 68 LOAD_GLOBAL 3 ( max )				    								  
							      70 LOAD_FAST 2 ( count )					    9 64 LOAD_FAST 0 ( i )					  
							      72 LOAD_GLOBAL 3 ( max )					    66 LOAD_CONST 1 ( 0 )					  
							      74 LOAD_GLOBAL 2 ( lcs )					    68 BINARY_SUBSCR						  
							      76 LOAD_FAST 0 ( i )					    70 RETURN_VALUE						  
							      78 LOAD_FAST 1 ( j )					    								  
							      80 LOAD_CONST 2 ( 1 )					    10 >> 72 LOAD_FAST 0 ( i )					  
							      82 BINARY_SUBTRACT					    74 LOAD_CONST 1 ( 0 )					  
							      84 LOAD_CONST 1 ( 0 )					    76 COMPARE_OP 2 ( == )					  
							      86 CALL_FUNCTION 3					    78 POP_JUMP_IF_FALSE 84					  
							      88 LOAD_GLOBAL 2 ( lcs )					    								  
							      90 LOAD_FAST 0 ( i )					    11 80 LOAD_FAST 0 ( i )					  
							      92 LOAD_CONST 2 ( 1 )					    82 LOAD_CONST 1 ( 0 )					  
							      94 BINARY_SUBTRACT					    84 BINARY_SUBSCR						  
							      96 LOAD_FAST 1 ( j )					    86 RETURN_VALUE						  
							      98 LOAD_CONST 1 ( 0 )					    								  
							      100 CALL_FUNCTION 3					    13 >> 88 LOAD_FAST 0 ( i )					  
							      102 CALL_FUNCTION 2					    90 LOAD_CONST 1 ( 0 )					  
							      104 CALL_FUNCTION 2					    92 COMPARE_OP 2 ( == )					  
							      106 STORE_FAST 2 ( count )				    94 POP_JUMP_IF_FALSE 98					  
							      								    								  
							      7 108 LOAD_FAST 2 ( count )				    14 96 LOAD_FAST 0 ( i )					  
							      110 RETURN_VALUE NEW_LINE					    98 LOAD_CONST 1 ( 0 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 RETURN_VALUE						  
							      								    								  
							      								    15 >> 104 LOAD_FAST 0 ( i )					  
							      								    106 LOAD_CONST 1 ( 0 )					  
							      								    108 COMPARE_OP 2 ( == )					  
							      								    110 POP_JUMP_IF_FALSE 122					  
							      								    								  
							      								    16 112 LOAD_FAST 0 ( i )					  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 RETURN_VALUE						  
							      								    								  
							      								    17 >> 120 LOAD_FAST 0 ( i )					  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 122					  
							      								    								  
							      								    18 128 LOAD_FAST 0 ( i )					  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 RETURN_VALUE						  
							      								    								  
							      								    19 >> 136 LOAD_FAST 0 ( i )					  
							      								    138 LOAD_CONST 1 ( 0 )					  
							      								    140 COMPARE_OP 2 ( == )					  
							      								    142 POP_JUMP_IF_FALSE 148					  
							      								    								  
							      								    20 144 LOAD_FAST 0 ( i )					  
							      								    146 LOAD_CONST 1 ( 0 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 RETURN_VALUE						  
							      								    								  
							      								    21 >> 152 LOAD_FAST 0 ( i )					  
							      								    154 LOAD_CONST 2 ( 1 )					  
							      								    156 COMPARE_OP 2 ( == )					  
							      								    158								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			      CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			    CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX				  CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX
--							      --							    --								  --
def areSumSame ( a , n , m ) :				      Disassembly of <code object areSumSame at 0x7f33e2644930, fil Disassembly of <code object areSumSame at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    sum1 = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    sum2 = 0						      2 STORE_FAST 3 ( sum1 )					    2 STORE_FAST 2 ( sum1 )					  (item)   File "main.py", line 38, in <module>	  Fi
    for i in range ( 0 , n ) :				      								    								  le "<dis>", line 2, in areSumSame UnboundLocalErro
	sum1 = 0					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  r: local variable 'sum2' referenced before assignm
	sum2 = 0					      6 STORE_FAST 4 ( sum2 )					    6 STORE_FAST 3 ( sum2 )					  ent
	for j in range ( 0 , m ) :			      								    								  
	    sum1 += a [ i ] [ j ]			      4 8 SETUP_LOOP 90 ( to 100 )				    4 8 LOAD_CONST 2 ( 1 )					  
	    sum2 += a [ j ] [ i ]			      10 LOAD_GLOBAL 0 ( range )				    10 STORE_FAST 4 ( sum2 )					  
	if ( sum1 == sum2 ) :				      12 LOAD_CONST 1 ( 0 )					    								  
	    return 1					      14 LOAD_FAST 1 ( n )					    5 12 SETUP_LOOP 26 ( to 44 )				  
    return 0						      16 CALL_FUNCTION 2					    14 LOAD_GLOBAL 0 ( range )					  
							      18 GET_ITER						    16 LOAD_CONST 1 ( 0 )					  
							      >> 20 FOR_ITER 76 ( to 98 )				    18 LOAD_FAST 2 ( sum1 )					  
							      22 STORE_FAST 5 ( i )					    20 CALL_FUNCTION 2						  
							      								    22 GET_ITER							  
							      5 24 LOAD_CONST 1 ( 0 )					    >> 24 FOR_ITER 18 ( to 42 )					  
							      26 STORE_FAST 3 ( sum1 )					    26 STORE_FAST 5 ( i )					  
							      								    								  
							      6 28 LOAD_CONST 1 ( 0 )					    6 28 LOAD_FAST 4 ( sum2 )					  
							      30 STORE_FAST 4 ( sum2 )					    30 LOAD_FAST 5 ( i )					  
							      								    32 BINARY_SUBSCR						  
							      7 32 SETUP_LOOP 50 ( to 84 )				    34 STORE_FAST 6 ( sum2 )					  
							      34 LOAD_GLOBAL 0 ( range )				    								  
							      36 LOAD_CONST 1 ( 0 )					    7 36 LOAD_FAST 0 ( a )					  
							      38 LOAD_FAST 2 ( m )					    38 LOAD_FAST 6 ( sum2 )					  
							      40 CALL_FUNCTION 2					    40 BINARY_SUBSCR						  
							      42 GET_ITER						    42 STORE_FAST 7 ( sum2 )					  
							      >> 44 FOR_ITER 36 ( to 82 )				    								  
							      46 STORE_FAST 6 ( j )					    8 44 LOAD_FAST 0 ( a )					  
							      								    46 LOAD_FAST 7 ( sum2 )					  
							      8 48 LOAD_FAST 3 ( sum1 )					    48 BINARY_SUBSCR						  
							      50 LOAD_FAST 0 ( a )					    50 STORE_FAST 8 ( sum2 )					  
							      52 LOAD_FAST 5 ( i )					    								  
							      54 BINARY_SUBSCR						    9 52 LOAD_FAST 0 ( a )					  
							      56 LOAD_FAST 6 ( j )					    54 LOAD_FAST 7 ( sum2 )					  
							      58 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      60 INPLACE_ADD						    58 STORE_FAST 9 ( sum2 )					  
							      62 STORE_FAST 3 ( sum1 )					    								  
							      								    10 60 LOAD_FAST 0 ( a )					  
							      9 64 LOAD_FAST 4 ( sum2 )					    62 LOAD_FAST 7 ( sum2 )					  
							      66 LOAD_FAST 0 ( a )					    64 BINARY_SUBSCR						  
							      68 LOAD_FAST 6 ( j )					    66 LOAD_FAST 8 ( sum2 )					  
							      70 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      72 LOAD_FAST 5 ( i )					    70 LOAD_FAST 9 ( sum2 )					  
							      74 BINARY_SUBSCR						    72 BINARY_SUBSCR						  
							      76 INPLACE_ADD						    74 LOAD_FAST 9 ( sum2 )					  
							      78 STORE_FAST 4 ( sum2 )					    76 BINARY_SUBSCR						  
							      80 JUMP_ABSOLUTE 44					    78 LOAD_FAST 9 ( sum2 )					  
							      >> 82 POP_BLOCK						    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 9 ( sum2 )					  
							      10 >> 84 LOAD_FAST 3 ( sum1 )				    84 STORE_SUBSCR						  
							      86 LOAD_FAST 4 ( sum2 )					    								  
							      88 COMPARE_OP 2 ( == )					    11 86 LOAD_FAST 0 ( a )					  
							      90 POP_JUMP_IF_FALSE 20					    88 LOAD_FAST 7 ( sum2 )					  
							      								    90 BINARY_SUBSCR						  
							      11 92 LOAD_CONST 2 ( 1 )					    92 LOAD_FAST 9 ( sum2 )					  
							      94 RETURN_VALUE						    94 STORE_SUBSCR						  
							      96 JUMP_ABSOLUTE 20					    								  
							      >> 98 POP_BLOCK						    12 96 LOAD_FAST 0 ( a )					  
							      								    98 LOAD_FAST 7 ( sum2 )					  
							      12 >> 100 LOAD_CONST 1 ( 0 )				    100 STORE_SUBSCR						  
							      102 RETURN_VALUE NEW_LINE					    								  
							      								    13 102 LOAD_FAST 0 ( a )					  
							      								    104 LOAD_FAST 7 ( sum2 )					  
							      								    106 STORE_SUBSCR						  
							      								    								  
							      								    14 108 LOAD_FAST 0 ( a )					  
							      								    110 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			  LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1
--							      --							    --								  --
def maxLength ( s , n ) :				      Disassembly of <code object maxLength at 0x7f33e2644f60, file Disassembly of <code object maxLength at 0x7f2b01639660, file script_not_found : None
    invalidOpenBraces = 0 ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_FAST 0 ( s )					  
    invalidCloseBraces = 0 ;				      2 STORE_FAST 2 ( invalidOpenBraces )			    2 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      								    4 INPLACE_ADD						  
	if ( s [ i ] == '(' ) :				      3 4 LOAD_CONST 1 ( 0 )					    6 STORE_FAST 0 ( s )					  
	    invalidOpenBraces += 1			      6 STORE_FAST 3 ( invalidCloseBraces )			    								  
	else :						      								    3 8 LOAD_CONST 1 ( 0 )					  
	    if ( invalidOpenBraces == 0 ) :		      4 8 SETUP_LOOP 64 ( to 74 )				    10 STORE_FAST 1 ( ininBracBraces )				  
		invalidCloseBraces += 1			      10 LOAD_GLOBAL 0 ( range )				    								  
	    else :					      12 LOAD_FAST 1 ( n )					    4 12 SETUP_LOOP 54 ( to 68 )				  
		invalidOpenBraces -= 1			      14 CALL_FUNCTION 1					    14 LOAD_GLOBAL 0 ( range )					  
    return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) 16 GET_ITER						    16 LOAD_FAST 1 ( ininBraces )				  
							      >> 18 FOR_ITER 52 ( to 72 )				    18 CALL_FUNCTION 1						  
							      20 STORE_FAST 4 ( i )					    20 GET_ITER							  
							      								    >> 22 FOR_ITER 46 ( to 66 )					  
							      5 22 LOAD_FAST 0 ( s )					    24 STORE_FAST 2 ( i )					  
							      24 LOAD_FAST 4 ( i )					    								  
							      26 BINARY_SUBSCR						    5 26 LOAD_FAST 2 ( i )					  
							      28 LOAD_CONST 2 ( '(' )					    28 LOAD_CONST 1 ( 0 )					  
							      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 44					    32 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      6 34 LOAD_FAST 2 ( invalidOpenBraces )			    6 34 LOAD_FAST 2 ( i )					  
							      36 LOAD_CONST 3 ( 1 )					    36 LOAD_CONST 1 ( 0 )					  
							      38 INPLACE_ADD						    38 BINARY_SUBSCR						  
							      40 STORE_FAST 2 ( invalidOpenBraces )			    40 STORE_FAST 2 ( i )					  
							      42 JUMP_ABSOLUTE 18					    								  
							      								    7 >> 42 LOAD_FAST 2 ( i )					  
							      8 >> 44 LOAD_FAST 2 ( invalidOpenBraces )			    44 LOAD_CONST 2 ( 1 )					  
							      46 LOAD_CONST 1 ( 0 )					    46 INPLACE_ADD						  
							      48 COMPARE_OP 2 ( == )					    48 STORE_FAST 2 ( i )					  
							      50 POP_JUMP_IF_FALSE 62					    								  
							      								    8 50 LOAD_FAST 2 ( i )					  
							      9 52 LOAD_FAST 3 ( invalidCloseBraces )			    52 LOAD_CONST 1 ( 0 )					  
							      54 LOAD_CONST 3 ( 1 )					    54 COMPARE_OP 2 ( == )					  
							      56 INPLACE_ADD						    56 POP_JUMP_IF_FALSE 22					  
							      58 STORE_FAST 3 ( invalidCloseBraces )			    								  
							      60 JUMP_ABSOLUTE 18					    9 58 LOAD_FAST 2 ( i )					  
							      								    60 LOAD_CONST 1 ( 0 )					  
							      11 >> 62 LOAD_FAST 2 ( invalidOpenBraces )		    62 COMPARE_OP 2 ( == )					  
							      64 LOAD_CONST 3 ( 1 )					    64 POP_JUMP_IF_FALSE 22					  
							      66 INPLACE_SUBTRACT					    								  
							      68 STORE_FAST 2 ( invalidOpenBraces )			    10 66 LOAD_FAST 2 ( i )					  
							      70 JUMP_ABSOLUTE 18					    68 LOAD_CONST 1 ( 0 )					  
							      >> 72 POP_BLOCK						    70 BINARY_SUBSCR						  
							      								    72 STORE_FAST 2 ( i )					  
							      12 >> 74 LOAD_FAST 1 ( n )				    								  
							      76 LOAD_FAST 2 ( invalidOpenBraces )			    11 74 LOAD_FAST 2 ( i )					  
							      78 LOAD_FAST 3 ( invalidCloseBraces )			    76 LOAD_CONST 1 ( 0 )					  
							      80 BINARY_ADD						    78 COMPARE_OP 2 ( == )					  
							      82 BINARY_SUBTRACT					    80 POP_JUMP_IF_FALSE 22					  
							      84 RETURN_VALUE NEW_LINE					    								  
							      								    12 82 LOAD_FAST 2 ( i )					  
							      								    84 LOAD_CONST 1 ( 0 )					  
							      								    86 COMPARE_OP 2 ( == )					  
							      								    88 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    13 90 LOAD_FAST 2 ( i )					  
							      								    92 LOAD_CONST 1 ( 0 )					  
							      								    94 INPLACE_ADD						  
							      								    96 STORE_FAST 2 ( i )					  
							      								    98 JUMP_ABSOLUTE 22						  
							      								    >> 100 POP_BLOCK						  
							      								    								  
							      								    14 >> 102 LOAD_FAST 1 ( ininBracBraces )			  
							      								    104 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	      GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	    GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	  GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT
--							      --							    --								  --
def findSymPairs ( arr , row ) :			      Disassembly of <code object findSymPairs at 0x7f33e2644f60, f Disassembly of <code object findSymPairs at 0x7f2b0163dc90, f script_not_found : None
    hM = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    for i in range ( row ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	first = arr [ i ] [ 0 ]				      4 STORE_FAST 2 ( hM )					    4 STORE_FAST 2 ( hM )					  
	sec = arr [ i ] [ 1 ]				      								    								  
	if ( sec in hM.keys ( ) and hM [ sec ] == first ) :   3 6 SETUP_LOOP 90 ( to 98 )				    3 6 SETUP_LOOP 64 ( to 70 )					  
	    print ( "(" , sec , "," , first , ")" )	      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	else :						      10 LOAD_FAST 1 ( row )					    10 LOAD_FAST 0 ( arr )					  
	    hM [ first ] = sec				      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 78 ( to 96 )				    >> 16 FOR_ITER 56 ( to 68 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 LOAD_FAST 0 ( arr )					    4 20 LOAD_FAST 3 ( i )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_CONST 1 ( 0 )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 1 ( 0 )					    26 STORE_FAST 4 ( n )					  
							      28 BINARY_SUBSCR						    								  
							      30 STORE_FAST 4 ( first )					    5 28 LOAD_FAST 1 ( row )					  
							      								    30 LOAD_FAST 4 ( n )					  
							      5 32 LOAD_FAST 0 ( arr )					    32 BINARY_SUBSCR						  
							      34 LOAD_FAST 3 ( i )					    34 STORE_FAST 5 ( row )					  
							      36 BINARY_SUBSCR						    								  
							      38 LOAD_CONST 2 ( 1 )					    6 36 LOAD_FAST 1 ( row )					  
							      40 BINARY_SUBSCR						    38 LOAD_FAST 4 ( n )					  
							      42 STORE_FAST 5 ( sec )					    40 BINARY_SUBSCR						  
							      								    42 STORE_FAST 6 ( row )					  
							      6 44 LOAD_FAST 5 ( sec )					    								  
							      46 LOAD_FAST 2 ( hM )					    7 44 LOAD_FAST 1 ( row )					  
							      48 LOAD_METHOD 2 ( keys )					    46 LOAD_FAST 4 ( n )					  
							      50 CALL_METHOD 0						    48 BINARY_SUBSCR						  
							      52 COMPARE_OP 6 ( in )					    50 LOAD_FAST 6 ( row )					  
							      54 POP_JUMP_IF_FALSE 86					    52 LOAD_FAST 4 ( n )					  
							      56 LOAD_FAST 2 ( hM )					    54 BINARY_SUBSCR						  
							      58 LOAD_FAST 5 ( sec )					    56 LOAD_FAST 5 ( row )					  
							      60 BINARY_SUBSCR						    58 COMPARE_OP 4 ( > )					  
							      62 LOAD_FAST 4 ( first )					    60 POP_JUMP_IF_FALSE 16					  
							      64 COMPARE_OP 2 ( == )					    								  
							      66 POP_JUMP_IF_FALSE 86					    8 62 LOAD_FAST 1 ( row )					  
							      								    64 LOAD_FAST 4 ( n )					  
							      7 68 LOAD_GLOBAL 3 ( print )				    66 BINARY_SUBSCR						  
							      70 LOAD_CONST 3 ( '(' )					    68 LOAD_FAST 6 ( row )					  
							      72 LOAD_FAST 5 ( sec )					    70 LOAD_FAST 4 ( n )					  
							      74 LOAD_CONST 4 ( ',' )					    72 BINARY_SUBSCR						  
							      76 LOAD_FAST 4 ( first )					    74 LOAD_FAST 6 ( row )					  
							      78 LOAD_CONST 5 ( ')' )					    76 LOAD_FAST 4 ( n )					  
							      80 CALL_FUNCTION 5					    78 STORE_SUBSCR						  
							      82 POP_TOP						    								  
							      84 JUMP_ABSOLUTE 16					    9 80 LOAD_FAST 1 ( row )					  
							      								    82 LOAD_FAST 4 ( n )					  
							      9 >> 86 LOAD_FAST 5 ( sec )				    84 BINARY_SUBSCR						  
							      88 LOAD_FAST 2 ( hM )					    86 LOAD_FAST 6 ( row )					  
							      90 LOAD_FAST 4 ( first )					    88 STORE_SUBSCR						  
							      92 STORE_SUBSCR						    								  
							      94 JUMP_ABSOLUTE 16					    10 >> 90 LOAD_FAST 2 ( hM )					  
							      >> 96 POP_BLOCK						    92 LOAD_FAST 4 ( n )					  
							      >> 98 LOAD_CONST 0 ( None )				    94 BINARY_SUBSCR						  
							      100 RETURN_VALUE NEW_LINE					    96 LOAD_FAST 6 ( row )					  
							      								    98 LOAD_FAST 4 ( n )					  
							      								    100 STORE_SUBSCR						  
							      								    								  
							      								    11 102 LOAD_FAST 2 ( hM )					  
							      								    104 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PAIRS_ARRAY_XOR_0				      FIND_NUMBER_PAIRS_ARRAY_XOR_0				    FIND_NUMBER_PAIRS_ARRAY_XOR_0				  FIND_NUMBER_PAIRS_ARRAY_XOR_0
--							      --							    --								  --
def calculate ( a ) :					      Disassembly of <code object calculate at 0x7f33e26499c0, file Disassembly of <code object calculate at 0x7f2b01639660, file script_not_found : None
    a.sort ( )						      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    count = 1						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    answer = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
    for i in range ( 1 , len ( a ) ) :			      6 POP_TOP							    6 POP_TOP							  
	if a [ i ] == a [ i - 1 ] :			      								    								  
	    count += 1					      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 0 )					  
	else :						      10 STORE_FAST 1 ( count )					    10 STORE_FAST 1 ( answer )					  
	    answer = answer + count * ( count - 1 ) // 2      								    								  
	    count = 1					      4 12 LOAD_CONST 2 ( 0 )					    4 12 SETUP_LOOP 64 ( to 80 )				  
    answer = answer + count * ( count - 1 ) // 2	      14 STORE_FAST 2 ( answer )				    14 LOAD_GLOBAL 1 ( range )					  
    return answer					      								    16 LOAD_CONST 2 ( 1 )					  
							      5 16 SETUP_LOOP 76 ( to 94 )				    18 LOAD_GLOBAL 2 ( len )					  
							      18 LOAD_GLOBAL 1 ( range )				    20 LOAD_FAST 0 ( a )					  
							      20 LOAD_CONST 1 ( 1 )					    22 CALL_FUNCTION 1						  
							      22 LOAD_GLOBAL 2 ( len )					    24 CALL_FUNCTION 2						  
							      24 LOAD_FAST 0 ( a )					    26 GET_ITER							  
							      26 CALL_FUNCTION 1					    >> 28 FOR_ITER 48 ( to 78 )					  
							      28 CALL_FUNCTION 2					    30 STORE_FAST 2 ( i )					  
							      30 GET_ITER						    								  
							      >> 32 FOR_ITER 58 ( to 92 )				    5 32 LOAD_FAST 0 ( a )					  
							      34 STORE_FAST 3 ( i )					    34 LOAD_FAST 2 ( i )					  
							      								    36 BINARY_SUBSCR						  
							      6 36 LOAD_FAST 0 ( a )					    38 LOAD_FAST 1 ( answer )					  
							      38 LOAD_FAST 3 ( i )					    40 LOAD_FAST 2 ( i )					  
							      40 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( a )					    44 LOAD_FAST 1 ( answer )					  
							      44 LOAD_FAST 3 ( i )					    46 LOAD_FAST 2 ( i )					  
							      46 LOAD_CONST 1 ( 1 )					    48 BINARY_SUBSCR						  
							      48 BINARY_SUBTRACT					    50 LOAD_FAST 1 ( answer )					  
							      50 BINARY_SUBSCR						    52 LOAD_FAST 2 ( i )					  
							      52 COMPARE_OP 2 ( == )					    54 BINARY_SUBSCR						  
							      54 POP_JUMP_IF_FALSE 66					    56 LOAD_FAST 1 ( answer )					  
							      								    58 LOAD_FAST 2 ( i )					  
							      7 56 LOAD_FAST 1 ( count )				    60 BINARY_SUBSCR						  
							      58 LOAD_CONST 1 ( 1 )					    62 LOAD_FAST 1 ( answer )					  
							      60 INPLACE_ADD						    64 LOAD_FAST 2 ( i )					  
							      62 STORE_FAST 1 ( count )					    66 BINARY_SUBSCR						  
							      64 JUMP_ABSOLUTE 32					    68 LOAD_FAST 1 ( answer )					  
							      								    70 LOAD_FAST 2 ( i )					  
							      9 >> 66 LOAD_FAST 2 ( answer )				    72 BINARY_SUBSCR						  
							      68 LOAD_FAST 1 ( count )					    74 LOAD_FAST 1 ( answer )					  
							      70 LOAD_FAST 1 ( count )					    76 LOAD_FAST 2 ( i )					  
							      72 LOAD_CONST 1 ( 1 )					    78 STORE_SUBSCR						  
							      74 BINARY_SUBTRACT					    80 JUMP_ABSOLUTE 28						  
							      76 BINARY_MULTIPLY					    >> 82 POP_BLOCK						  
							      78 LOAD_CONST 3 ( 2 )					    >> 84 LOAD_CONST 0 ( None )					  
							      80 BINARY_FLOOR_DIVIDE					    86 RETURN_VALUE NEW_LINE					  
							      82 BINARY_ADD						    								  
							      84 STORE_FAST 2 ( answer )				    								  
							      								    								  
							      10 86 LOAD_CONST 1 ( 1 )					    								  
							      88 STORE_FAST 1 ( count )					    								  
							      90 JUMP_ABSOLUTE 32					    								  
							      >> 92 POP_BLOCK						    								  
							      								    								  
							      11 >> 94 LOAD_FAST 2 ( answer )				    								  
							      96 LOAD_FAST 1 ( count )					    								  
							      98 LOAD_FAST 1 ( count )					    								  
							      100 LOAD_CONST 1 ( 1 )					    								  
							      102 BINARY_SUBTRACT					    								  
							      104 BINARY_MULTIPLY					    								  
							      106 LOAD_CONST 3 ( 2 )					    								  
							      108 BINARY_FLOOR_DIVIDE					    								  
							      110 BINARY_ADD						    								  
							      112 STORE_FAST 2 ( answer )				    								  
							      								    								  
							      12 114 LOAD_FAST 2 ( answer )				    								  
							      116 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1
--							      --							    --								  --
def breakSum ( n ) :					      Disassembly of <code object breakSum at 0x7f33e2644930, file  Disassembly of <code object breakSum at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    dp = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    dp [ 0 ] = 0					      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'n' , ) )				  (item)   File "main.py", line 33, in <module>	  Fi
    dp [ 1 ] = 1					      4 LOAD_FAST 0 ( n )					    4 IMPORT_NAME 0 ( dp )					  le "<dis>", line 2, in breakSum ModuleNotFoundErro
    for i in range ( 2 , n + 1 ) :			      6 LOAD_CONST 2 ( 1 )					    6 IMPORT_FROM 1 ( n )					  r: No module named 'dp'
	dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i  8 BINARY_ADD						    8 STORE_FAST 0 ( dp )					  
    return dp [ n ]					      10 BINARY_MULTIPLY					    10 POP_TOP							  
							      12 STORE_FAST 1 ( dp )					    								  
							      								    3 12 LOAD_CONST 1 ( 0 )					  
							      3 14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 2 ( ( 'n' , ) )				  
							      16 LOAD_FAST 1 ( dp )					    16 IMPORT_NAME 2 ( max )					  
							      18 LOAD_CONST 1 ( 0 )					    18 IMPORT_FROM 3 ( max )					  
							      20 STORE_SUBSCR						    20 STORE_FAST 1 ( n )					  
							      								    22 POP_TOP							  
							      4 22 LOAD_CONST 2 ( 1 )					    								  
							      24 LOAD_FAST 1 ( dp )					    4 24 SETUP_LOOP 26 ( to 44 )				  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 0 ( dp )					  
							      28 STORE_SUBSCR						    28 GET_ITER							  
							      								    >> 30 FOR_ITER 18 ( to 42 )					  
							      5 30 SETUP_LOOP 80 ( to 112 )				    32 STORE_FAST 2 ( i )					  
							      32 LOAD_GLOBAL 0 ( range )				    								  
							      34 LOAD_CONST 3 ( 2 )					    5 34 LOAD_FAST 1 ( n )					  
							      36 LOAD_FAST 0 ( n )					    36 LOAD_FAST 2 ( i )					  
							      38 LOAD_CONST 2 ( 1 )					    38 BINARY_SUBSCR						  
							      40 BINARY_ADD						    40 LOAD_FAST 1 ( n )					  
							      42 CALL_FUNCTION 2					    42 COMPARE_OP 4 ( > )					  
							      44 GET_ITER						    44 POP_JUMP_IF_FALSE 30					  
							      >> 46 FOR_ITER 62 ( to 110 )				    								  
							      48 STORE_FAST 2 ( i )					    6 46 LOAD_FAST 1 ( n )					  
							      								    48 LOAD_FAST 2 ( i )					  
							      6 50 LOAD_GLOBAL 1 ( max )				    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 1 ( dp )					    52 LOAD_FAST 1 ( n )					  
							      54 LOAD_GLOBAL 2 ( int )					    54 LOAD_FAST 2 ( i )					  
							      56 LOAD_FAST 2 ( i )					    56 BINARY_SUBSCR						  
							      58 LOAD_CONST 3 ( 2 )					    58 LOAD_FAST 1 ( n )					  
							      60 BINARY_TRUE_DIVIDE					    60 COMPARE_OP 4 ( > )					  
							      62 CALL_FUNCTION 1					    62 POP_JUMP_IF_FALSE 30					  
							      64 BINARY_SUBSCR						    								  
							      66 LOAD_FAST 1 ( dp )					    7 64 LOAD_FAST 1 ( n )					  
							      68 LOAD_GLOBAL 2 ( int )					    66 LOAD_FAST 2 ( i )					  
							      70 LOAD_FAST 2 ( i )					    68 BINARY_SUBSCR						  
							      72 LOAD_CONST 4 ( 3 )					    70 LOAD_FAST 1 ( n )					  
							      74 BINARY_TRUE_DIVIDE					    72 COMPARE_OP 4 ( > )					  
							      76 CALL_FUNCTION 1					    74 POP_JUMP_IF_FALSE 30					  
							      78 BINARY_SUBSCR						    								  
							      80 BINARY_ADD						    8 76 LOAD_FAST 1 ( n )					  
							      82 LOAD_FAST 1 ( dp )					    78 LOAD_FAST 2 ( i )					  
							      84 LOAD_GLOBAL 2 ( int )					    80 BINARY_SUBSCR						  
							      86 LOAD_FAST 2 ( i )					    82 LOAD_FAST 1 ( n )					  
							      88 LOAD_CONST 5 ( 4 )					    84 BINARY_SUBSCR						  
							      90 BINARY_TRUE_DIVIDE					    86 LOAD_FAST 1 ( n )					  
							      92 CALL_FUNCTION 1					    88 STORE_SUBSCR						  
							      94 BINARY_SUBSCR						    								  
							      96 BINARY_ADD						    9 90 LOAD_FAST 1 ( n )					  
							      98 LOAD_FAST 2 ( i )					    92 LOAD_FAST 2 ( i )					  
							      100 CALL_FUNCTION 2					    94 BINARY_SUBSCR						  
							      102 LOAD_FAST 1 ( dp )					    96 LOAD_FAST 1 ( n )					  
							      104 LOAD_FAST 2 ( i )					    98 LOAD_FAST 2 ( i )					  
							      106 STORE_SUBSCR						    100 STORE_SUBSCR						  
							      108 JUMP_ABSOLUTE 46					    								  
							      >> 110 POP_BLOCK						    10 102 LOAD_FAST 1 ( n )					  
							      								    104 LOAD_FAST 2 ( i )					  
							      7 >> 112 LOAD_FAST 1 ( dp )				    106 STORE_SUBSCR						  
							      114 LOAD_FAST 0 ( n )					    								  
							      116 BINARY_SUBSCR						    11 108 LOAD_FAST 1 ( n )					  
							      118 RETURN_VALUE NEW_LINE					    110 LOAD_FAST 2 ( i )					  
							      								    112 STORE_SUBSCR						  
							      								    114 JUMP_ABSOLUTE 30					  
							      								    >> 116 POP_BLOCK						  
							      								    								  
							      								    12 >> 118 LOAD_FAST 1 ( n )					  
							      								    120 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM
--							      --							    --								  --
def isSubsetSum ( set , n , sum ) :			      Disassembly of <code object isSubsetSum at 0x7f33e26494b0, fi Disassembly of <code object isSubsetSum at 0x7f2b0163dc90, fi script_not_found : None
    if ( sum == 0 ) :					      2 0 LOAD_FAST 2 ( sum )					    2 0 LOAD_FAST 0 ( set )					  
	return True					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( n == 0 and sum != 0 ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return False					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    if ( set [ n - 1 ] > sum ) :			      								    								  
	return isSubsetSum ( set , n - 1 , sum ) ;	      3 8 LOAD_CONST 2 ( True )					    3 8 LOAD_CONST 2 ( True )					  
    return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( 10 RETURN_VALUE						    10 RETURN_VALUE						  
							      								    								  
							      4 >> 12 LOAD_FAST 1 ( n )					    4 >> 12 LOAD_FAST 1 ( n )					  
							      14 LOAD_CONST 1 ( 0 )					    14 LOAD_CONST 1 ( 0 )					  
							      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
							      18 POP_JUMP_IF_FALSE 32					    18 POP_JUMP_IF_FALSE 24					  
							      20 LOAD_FAST 2 ( sum )					    								  
							      22 LOAD_CONST 1 ( 0 )					    5 20 LOAD_CONST 2 ( True )					  
							      24 COMPARE_OP 3 ( != )					    22 RETURN_VALUE						  
							      26 POP_JUMP_IF_FALSE 32					    								  
							      								    6 >> 24 LOAD_CONST 3 ( False )				  
							      5 28 LOAD_CONST 3 ( False )				    26 RETURN_VALUE NEW_LINE					  
							      30 RETURN_VALUE						    								  
							      								    								  
							      6 >> 32 LOAD_FAST 0 ( set )				    								  
							      34 LOAD_FAST 1 ( n )					    								  
							      36 LOAD_CONST 4 ( 1 )					    								  
							      38 BINARY_SUBTRACT					    								  
							      40 BINARY_SUBSCR						    								  
							      42 LOAD_FAST 2 ( sum )					    								  
							      44 COMPARE_OP 4 ( > )					    								  
							      46 POP_JUMP_IF_FALSE 64					    								  
							      								    								  
							      7 48 LOAD_GLOBAL 0 ( isSubsetSum )			    								  
							      50 LOAD_FAST 0 ( set )					    								  
							      52 LOAD_FAST 1 ( n )					    								  
							      54 LOAD_CONST 4 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 LOAD_FAST 2 ( sum )					    								  
							      60 CALL_FUNCTION 3					    								  
							      62 RETURN_VALUE						    								  
							      								    								  
							      8 >> 64 LOAD_GLOBAL 0 ( isSubsetSum )			    								  
							      66 LOAD_FAST 0 ( set )					    								  
							      68 LOAD_FAST 1 ( n )					    								  
							      70 LOAD_CONST 4 ( 1 )					    								  
							      72 BINARY_SUBTRACT					    								  
							      74 LOAD_FAST 2 ( sum )					    								  
							      76 CALL_FUNCTION 3					    								  
							      78 JUMP_IF_TRUE_OR_POP 106				    								  
							      80 LOAD_GLOBAL 0 ( isSubsetSum )				    								  
							      82 LOAD_FAST 0 ( set )					    								  
							      84 LOAD_FAST 1 ( n )					    								  
							      86 LOAD_CONST 4 ( 1 )					    								  
							      88 BINARY_SUBTRACT					    								  
							      90 LOAD_FAST 2 ( sum )					    								  
							      92 LOAD_FAST 0 ( set )					    								  
							      94 LOAD_FAST 1 ( n )					    								  
							      96 LOAD_CONST 4 ( 1 )					    								  
							      98 BINARY_SUBTRACT					    								  
							      100 BINARY_SUBSCR						    								  
							      102 BINARY_SUBTRACT					    								  
							      104 CALL_FUNCTION 3					    								  
							      >> 106 RETURN_VALUE NEW_LINE				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1
--							      --							    --								  --
def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :	      Disassembly of <code object maxSumPairWithDifferenceLessThanK Disassembly of <code object maxSumPairWithDifferenceLessK at  error : Traceback (most recent call last):   File
    maxSum = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    arr.sort ( ) ;					      2 STORE_FAST 3 ( maxSum )					    2 STORE_FAST 2 ( maxSum )					  (item)   File "main.py", line 37, in <module>	  Fi
    i = N - 1 ;						      								    								  le "<dis>", line 2, in maxSumPairWithDifferenceLes
    while ( i >= 0 ) :					      3 4 LOAD_FAST 0 ( arr )					    3 4 LOAD_CONST 1 ( 0 )					  sThanK TypeError: 'int' object is not iterable
	if ( arr [ i ] - arr [ i - 1 ] < k ) :		      6 LOAD_METHOD 0 ( sort )					    6 STORE_FAST 3 ( maxSum )					  
	    maxSum += arr [ i ] ;			      8 CALL_METHOD 0						    								  
	    maxSum += arr [ i - 1 ] ;			      10 POP_TOP						    4 8 LOAD_FAST 2 ( maxSum )					  
	    i -= 1 ;					      								    10 LOAD_CONST 2 ( 1 )					  
	i -= 1 ;					      4 12 LOAD_FAST 1 ( N )					    12 INPLACE_ADD						  
    return maxSum ;					      14 LOAD_CONST 2 ( 1 )					    14 STORE_FAST 2 ( maxSum )					  
							      16 BINARY_SUBTRACT					    								  
							      18 STORE_FAST 4 ( i )					    5 16 SETUP_LOOP 64 ( to 92 )				  
							      								    18 LOAD_FAST 2 ( maxSum )					  
							      5 20 SETUP_LOOP 80 ( to 102 )				    20 GET_ITER							  
							      >> 22 LOAD_FAST 4 ( i )					    >> 22 FOR_ITER 56 ( to 90 )					  
							      24 LOAD_CONST 1 ( 0 )					    24 STORE_FAST 4 ( i )					  
							      26 COMPARE_OP 5 ( >= )					    								  
							      28 POP_JUMP_IF_FALSE 100					    6 26 LOAD_FAST 4 ( i )					  
							      								    28 LOAD_CONST 3 ( 0 )					  
							      6 30 LOAD_FAST 0 ( arr )					    30 COMPARE_OP 4 ( > )					  
							      32 LOAD_FAST 4 ( i )					    32 POP_JUMP_IF_FALSE 42					  
							      34 BINARY_SUBSCR						    								  
							      36 LOAD_FAST 0 ( arr )					    7 34 LOAD_FAST 3 ( maxSum )					  
							      38 LOAD_FAST 4 ( i )					    36 LOAD_CONST 4 ( 1 )					  
							      40 LOAD_CONST 2 ( 1 )					    38 INPLACE_ADD						  
							      42 BINARY_SUBTRACT					    40 STORE_FAST 3 ( maxSum )					  
							      44 BINARY_SUBSCR						    								  
							      46 BINARY_SUBTRACT					    8 >> 42 LOAD_FAST 3 ( maxSum )				  
							      48 LOAD_FAST 2 ( k )					    44 LOAD_CONST 5 ( 2 )					  
							      50 COMPARE_OP 0 ( < )					    46 INPLACE_ADD						  
							      52 POP_JUMP_IF_FALSE 90					    48 STORE_FAST 3 ( maxSum )					  
							      								    								  
							      7 54 LOAD_FAST 3 ( maxSum )				    9 50 LOAD_FAST 3 ( maxSum )					  
							      56 LOAD_FAST 0 ( arr )					    52 LOAD_CONST 6 ( 1 )					  
							      58 LOAD_FAST 4 ( i )					    54 INPLACE_ADD						  
							      60 BINARY_SUBSCR						    56 STORE_FAST 3 ( maxSum )					  
							      62 INPLACE_ADD						    								  
							      64 STORE_FAST 3 ( maxSum )				    10 58 LOAD_FAST 3 ( maxSum )				  
							      								    60 LOAD_CONST 7 ( 2 )					  
							      8 66 LOAD_FAST 3 ( maxSum )				    62 INPLACE_ADD						  
							      68 LOAD_FAST 0 ( arr )					    64 STORE_FAST 3 ( maxSum )					  
							      70 LOAD_FAST 4 ( i )					    								  
							      72 LOAD_CONST 2 ( 1 )					    11 66 LOAD_FAST 3 ( maxSum )				  
							      74 BINARY_SUBTRACT					    68 LOAD_CONST 8 ( 2 )					  
							      76 BINARY_SUBSCR						    70 INPLACE_ADD						  
							      78 INPLACE_ADD						    72 STORE_FAST 3 ( maxSum )					  
							      80 STORE_FAST 3 ( maxSum )				    								  
							      								    12 74 LOAD_FAST 3 ( maxSum )				  
							      9 82 LOAD_FAST 4 ( i )					    76 LOAD_CONST 9 ( 1 )					  
							      84 LOAD_CONST 2 ( 1 )					    78 INPLACE_ADD						  
							      86 INPLACE_SUBTRACT					    80 STORE_FAST 3 ( maxSum )					  
							      88 STORE_FAST 4 ( i )					    								  
							      								    13 82 LOAD_FAST 3 ( maxSum )				  
							      10 >> 90 LOAD_FAST 4 ( i )				    84 LOAD_CONST 10 ( 1 )					  
							      92 LOAD_CONST 2 ( 1 )					    86 INPLACE_ADD						  
							      94 INPLACE_SUBTRACT					    88 STORE_FAST 3 ( maxSum )					  
							      96 STORE_FAST 4 ( i )					    								  
							      98 JUMP_ABSOLUTE 22					    14 90 LOAD_FAST 3 ( maxSum )				  
							      >> 100 POP_BLOCK						    92 LOAD_CONST 11 ( 2 )					  
							      								    94 INPLACE_ADD						  
							      11 >> 102 LOAD_FAST 3 ( maxSum )				    96 STORE_FAST 3 ( maxSum )					  
							      104 RETURN_VALUE NEW_LINE					    								  
							      								    15 98 LOAD_FAST 3 ( maxSum )				  
							      								    100 LOAD_CONST 12 ( 2 )					  
							      								    102 INPLACE_ADD						  
							      								    104 STORE_FAST 3 ( maxSum )					  
							      								    								  
							      								    16 106 LOAD_FAST 3 ( maxSum )				  
							      								    108 LOAD_CONST 13 ( 2 )					  
							      								    110 INPLACE_ADD						  
							      								    112 STORE_FAST 3 ( maxSum )					  
							      								    114 JUMP_ABSOLUTE 22					  
							      								    >> 116 POP_BLOCK						  
							      								    								  
							      								    17 >> 118 LOAD_FAST 2 ( maxSum )				  
							      								    120 LOAD_FAST 3 ( maxSum )					  
							      								    122 COMPARE_OP 4 ( > )					  
							      								    124 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    18 126 LOAD_FAST 2 ( maxSum )				  
							      								    128 LOAD_FAST 3 ( maxSum )					  
							      								    130 INPLACE_ADD						  
							      								    132 STORE_FAST 3 ( maxSum )					  
							      								    134 JUMP_ABSOLUTE 22					  
							      								    >> 136 POP_BLOCK						  
							      								    >> 138 LOAD_CONST 0 ( None )				  
							      								    140 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			      REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			    REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			  REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S
--							      --							    --								  --
def replace ( s , c1 , c2 ) :				      Disassembly of <code object replace at 0x7f33e2649a50, file " Disassembly of <code object replace at 0x7f2b0163dc90, file " error : Traceback (most recent call last):   File
    l = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( l ) :				      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  (item)   File "main.py", line 34, in <module>	  Fi
	if ( s [ i ] == c1 ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in replace TypeError: 'range_i
	    s = s [ 0 : i ] + c2 + s [ i + 1 : ]	      6 STORE_FAST 3 ( l )					    6 STORE_FAST 2 ( l )					  terator' object is not subscriptable
	elif ( s [ i ] == c2 ) :			      								    								  
	    s = s [ 0 : i ] + c1 + s [ i + 1 : ]	      3 8 SETUP_LOOP 106 ( to 116 )				    3 8 SETUP_LOOP 64 ( to 76 )					  
    return s						      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 3 ( l )					    12 LOAD_FAST 2 ( l )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 94 ( to 114 )				    >> 18 FOR_ITER 56 ( to 74 )					  
							      20 STORE_FAST 4 ( i )					    20 STORE_FAST 3 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( s )					    4 22 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 4 ( i )					    24 LOAD_FAST 3 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_FAST 1 ( c1 )					    28 LOAD_FAST 1 ( c2 )					  
							      30 COMPARE_OP 2 ( == )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 68					    32 POP_JUMP_IF_FALSE 42					  
							      								    								  
							      5 34 LOAD_FAST 0 ( s )					    5 34 LOAD_FAST 0 ( s )					  
							      36 LOAD_CONST 1 ( 0 )					    36 LOAD_FAST 3 ( i )					  
							      38 LOAD_FAST 4 ( i )					    38 BINARY_SUBSCR						  
							      40 BUILD_SLICE 2						    40 STORE_FAST 4 ( ret )					  
							      42 BINARY_SUBSCR						    								  
							      44 LOAD_FAST 2 ( c2 )					    6 >> 42 LOAD_FAST 0 ( s )					  
							      46 BINARY_ADD						    44 LOAD_FAST 3 ( i )					  
							      48 LOAD_FAST 0 ( s )					    46 BINARY_SUBSCR						  
							      50 LOAD_FAST 4 ( i )					    48 LOAD_FAST 1 ( c2 )					  
							      52 LOAD_CONST 2 ( 1 )					    50 COMPARE_OP 2 ( == )					  
							      54 BINARY_ADD						    52 POP_JUMP_IF_FALSE 56					  
							      56 LOAD_CONST 0 ( None )					    								  
							      58 BUILD_SLICE 2						    7 54 LOAD_FAST 0 ( s )					  
							      60 BINARY_SUBSCR						    56 LOAD_FAST 3 ( i )					  
							      62 BINARY_ADD						    58 BINARY_SUBSCR						  
							      64 STORE_FAST 0 ( s )					    60 STORE_FAST 1 ( c2 )					  
							      66 JUMP_ABSOLUTE 18					    								  
							      								    8 62 LOAD_FAST 0 ( s )					  
							      6 >> 68 LOAD_FAST 0 ( s )					    64 LOAD_FAST 3 ( i )					  
							      70 LOAD_FAST 4 ( i )					    66 BINARY_SUBSCR						  
							      72 BINARY_SUBSCR						    68 LOAD_FAST 1 ( c2 )					  
							      74 LOAD_FAST 2 ( c2 )					    70 COMPARE_OP 2 ( == )					  
							      76 COMPARE_OP 2 ( == )					    72 POP_JUMP_IF_FALSE 18					  
							      78 POP_JUMP_IF_FALSE 18					    								  
							      								    9 74 LOAD_FAST 0 ( s )					  
							      7 80 LOAD_FAST 0 ( s )					    76 LOAD_FAST 3 ( i )					  
							      82 LOAD_CONST 1 ( 0 )					    78 BINARY_SUBSCR						  
							      84 LOAD_FAST 4 ( i )					    80 LOAD_FAST 1 ( c2 )					  
							      86 BUILD_SLICE 2						    82 COMPARE_OP 2 ( == )					  
							      88 BINARY_SUBSCR						    84 POP_JUMP_IF_FALSE 18					  
							      90 LOAD_FAST 1 ( c1 )					    								  
							      92 BINARY_ADD						    10 86 LOAD_FAST 0 ( s )					  
							      94 LOAD_FAST 0 ( s )					    88 LOAD_FAST 3 ( i )					  
							      96 LOAD_FAST 4 ( i )					    90 BINARY_SUBSCR						  
							      98 LOAD_CONST 2 ( 1 )					    92 LOAD_FAST 1 ( c2 )					  
							      100 BINARY_ADD						    94 COMPARE_OP 2 ( == )					  
							      102 LOAD_CONST 0 ( None )					    96 POP_JUMP_IF_FALSE 18					  
							      104 BUILD_SLICE 2						    								  
							      106 BINARY_SUBSCR						    11 98 LOAD_FAST 0 ( s )					  
							      108 BINARY_ADD						    100 LOAD_FAST 3 ( i )					  
							      110 STORE_FAST 0 ( s )					    102 BINARY_SUBSCR						  
							      112 JUMP_ABSOLUTE 18					    104 LOAD_FAST 1 ( c2 )					  
							      >> 114 POP_BLOCK						    106 COMPARE_OP 2 ( == )					  
							      								    108 POP_JUMP_IF_FALSE 18					  
							      8 >> 116 LOAD_FAST 0 ( s )				    								  
							      118 RETURN_VALUE NEW_LINE					    12 110 LOAD_FAST 0 ( s )					  
							      								    112 LOAD_FAST 3 ( i )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_FAST 1 ( c2 )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    13 122 LOAD_FAST 0 ( s )					  
							      								    124 LOAD_FAST 3 ( i )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 1 ( c2 )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    14 134 LOAD_FAST 0 ( s )					  
							      								    136 LOAD_FAST 3 ( i )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 RETURN_VALUE						  
							      								    								  
							      								    15 >> 142 LOAD_FAST 0 ( s )					  
							      								    144 LOAD_FAST 3 ( i )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER_1				      SQUARE_ROOT_OF_AN_INTEGER_1				    SQUARE_ROOT_OF_AN_INTEGER_1					  SQUARE_ROOT_OF_AN_INTEGER_1
--							      --							    --								  --
def floorSqrt ( x ) :					      Disassembly of <code object floorSqrt at 0x7f33e2649a50, file Disassembly of <code object floorSqrt at 0x7f2b01639660, file error : /bin/bash: line 1: 12563 Segmentation faul
    if ( x == 0 or x == 1 ) :				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return x					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  ataset/bin/python XLM/dis_script.py --script_path
    start = 1						      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    end = x						      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  24/eval_scripts/python_sa-dis_sa.valid/SQUARE_ROOT
    while ( start <= end ) :				      8 LOAD_FAST 0 ( x )					    								  _OF_AN_INTEGER_1.dis
	mid = ( start + end ) // 2			      10 LOAD_CONST 2 ( 1 )					    3 8 LOAD_FAST 0 ( x )					  
	if ( mid * mid == x ) :				      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
	    return mid					      14 POP_JUMP_IF_FALSE 20					    								  
	if ( mid * mid < x ) :				      								    4 >> 12 LOAD_FAST 0 ( x )					  
	    start = mid + 1				      3 >> 16 LOAD_FAST 0 ( x )					    14 LOAD_CONST 2 ( 1 )					  
	    ans = mid					      18 RETURN_VALUE						    16 COMPARE_OP 2 ( == )					  
	else :						      								    18 POP_JUMP_IF_FALSE 24					  
	    end = mid - 1				      4 >> 20 LOAD_CONST 2 ( 1 )				    								  
    return ans						      22 STORE_FAST 1 ( start )					    5 20 LOAD_FAST 0 ( x )					  
							      								    22 RETURN_VALUE						  
							      5 24 LOAD_FAST 0 ( x )					    								  
							      26 STORE_FAST 2 ( end )					    6 >> 24 LOAD_FAST 0 ( x )					  
							      								    26 LOAD_CONST 3 ( 2 )					  
							      6 28 SETUP_LOOP 74 ( to 104 )				    28 COMPARE_OP 2 ( == )					  
							      >> 30 LOAD_FAST 1 ( start )				    30 POP_JUMP_IF_FALSE 36					  
							      32 LOAD_FAST 2 ( end )					    								  
							      34 COMPARE_OP 1 ( <= )					    7 32 LOAD_FAST 0 ( x )					  
							      36 POP_JUMP_IF_FALSE 102					    34 RETURN_VALUE						  
							      								    								  
							      7 38 LOAD_FAST 1 ( start )				    8 >> 36 LOAD_FAST 0 ( x )					  
							      40 LOAD_FAST 2 ( end )					    38 LOAD_CONST 4 ( 3 )					  
							      42 BINARY_ADD						    40 COMPARE_OP 2 ( == )					  
							      44 LOAD_CONST 3 ( 2 )					    42 POP_JUMP_IF_FALSE 48					  
							      46 BINARY_FLOOR_DIVIDE					    								  
							      48 STORE_FAST 3 ( mid )					    9 44 LOAD_FAST 0 ( x )					  
							      								    46 RETURN_VALUE						  
							      8 50 LOAD_FAST 3 ( mid )					    								  
							      52 LOAD_FAST 3 ( mid )					    10 >> 48 LOAD_FAST 0 ( x )					  
							      54 BINARY_MULTIPLY					    50 LOAD_CONST 5 ( 4 )					  
							      56 LOAD_FAST 0 ( x )					    52 COMPARE_OP 2 ( == )					  
							      58 COMPARE_OP 2 ( == )					    54 POP_JUMP_IF_FALSE 64					  
							      60 POP_JUMP_IF_FALSE 66					    								  
							      								    11 56 LOAD_FAST 0 ( x )					  
							      9 62 LOAD_FAST 3 ( mid )					    58 RETURN_VALUE						  
							      64 RETURN_VALUE						    								  
							      								    12 >> 60 LOAD_FAST 0 ( x )					  
							      10 >> 66 LOAD_FAST 3 ( mid )				    62 LOAD_CONST 6 ( 5 )					  
							      68 LOAD_FAST 3 ( mid )					    64 COMPARE_OP 2 ( == )					  
							      70 BINARY_MULTIPLY					    66 POP_JUMP_IF_FALSE 74					  
							      72 LOAD_FAST 0 ( x )					    								  
							      74 COMPARE_OP 0 ( < )					    13 68 LOAD_FAST 0 ( x )					  
							      76 POP_JUMP_IF_FALSE 92					    70 RETURN_VALUE						  
							      								    								  
							      11 78 LOAD_FAST 3 ( mid )					    14 >> 72 LOAD_FAST 0 ( x )					  
							      80 LOAD_CONST 2 ( 1 )					    74 LOAD_CONST 7 ( 3 )					  
							      82 BINARY_ADD						    76 COMPARE_OP 2 ( == )					  
							      84 STORE_FAST 1 ( start )					    78 POP_JUMP_IF_FALSE 92					  
							      								    								  
							      12 86 LOAD_FAST 3 ( mid )					    15 80 LOAD_FAST 0 ( x )					  
							      88 STORE_FAST 4 ( ans )					    82 RETURN_VALUE						  
							      90 JUMP_ABSOLUTE 30					    								  
							      								    16 >> 84 LOAD_FAST 0 ( x )					  
							      14 >> 92 LOAD_FAST 3 ( mid )				    86 LOAD_CONST 8 ( 6 )					  
							      94 LOAD_CONST 2 ( 1 )					    88 COMPARE_OP 2 ( == )					  
							      96 BINARY_SUBTRACT					    90 POP_JUMP_IF_FALSE 92					  
							      98 STORE_FAST 2 ( end )					    								  
							      100 JUMP_ABSOLUTE 30					    17 92 LOAD_FAST 0 ( x )					  
							      >> 102 POP_BLOCK						    94 RETURN_VALUE						  
							      								    								  
							      15 >> 104 LOAD_FAST 4 ( ans )				    18 >> 96 LOAD_FAST 0 ( x )					  
							      106 RETURN_VALUE NEW_LINE					    98 LOAD_CONST 9 ( 7 )					  
							      								    100 COMPARE_OP 2 ( == )					  
							      								    102 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    19 104 LOAD_FAST 0 ( x )					  
							      								    106 RETURN_VALUE						  
							      								    								  
							      								    19 >> 108 LOAD_FAST 0 ( x )					  
							      								    110 LOAD_CONST 10 ( 8 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    20 116 LOAD_FAST 0 ( x )					  
							      								    118 RETURN_VALUE						  
							      								    								  
							      								    22 >> 120 LOAD_FAST 0 ( x )					  
							      								    122 RETURN_VALUE						  
							      								    								  
							      								    19 >> 124 LOAD_FAST 0 ( x )					  
							      								    126 LOAD_CONST 11 ( 8 )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 132					  
							      								    								  
							      								    20 132 LOAD_FAST 0 ( x )					  
							      								    134 RETURN_VALUE						  
							      								    								  
							      								    21 >> 136 LOAD_FAST 0 ( x )					  
							      								    138 RETURN_VALUE						  
							      								    								  
							      								    22 >> 140 LOAD_FAST 0 ( x )					  
							      								    142 RETURN_VALUE						  
							      								    144 LOAD_CONST 0 ( None )					  
							      								    146 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	      CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	    CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	  CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING
--							      --							    --								  --
def calcMaxValue ( str ) :				      Disassembly of <code object calcMaxValue at 0x7f33e2644930, f Disassembly of <code object calcMaxValue at 0x7f2b01639660, f error : Traceback (most recent call last):   File
    res = ord ( str [ 0 ] ) - 48			      2 0 LOAD_GLOBAL 0 ( ord )					    2 0 LOAD_GLOBAL 0 ( ord )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( 1 , len ( str ) ) :		      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  (item)   File "main.py", line 34, in <module>	  Fi
	if ( str [ i ] == '0' or str [ i ] == '1' or res < 2  4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  le "<dis>", line 2, in calcMaxValue TypeError: 'in
	    res += ord ( str [ i ] ) - 48		      6 BINARY_SUBSCR						    6 BINARY_SUBSCR						  t' object is not subscriptable
	else :						      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
	    res *= ord ( str [ i ] ) - 48		      10 LOAD_CONST 2 ( 48 )					    10 LOAD_CONST 2 ( 48 )					  
    return res						      12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
							      14 STORE_FAST 1 ( res )					    14 STORE_FAST 1 ( res )					  
							      								    								  
							      3 16 SETUP_LOOP 96 ( to 114 )				    3 16 SETUP_LOOP 48 ( to 64 )				  
							      18 LOAD_GLOBAL 1 ( range )				    >> 18 LOAD_FAST 1 ( res )					  
							      20 LOAD_CONST 3 ( 1 )					    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_GLOBAL 2 ( len )					    22 BINARY_SUBSCR						  
							      24 LOAD_FAST 0 ( str )					    24 LOAD_CONST 2 ( 48 )					  
							      26 CALL_FUNCTION 1					    26 COMPARE_OP 2 ( == )					  
							      28 CALL_FUNCTION 2					    28 POP_JUMP_IF_FALSE 46					  
							      30 GET_ITER						    								  
							      >> 32 FOR_ITER 78 ( to 112 )				    4 30 LOAD_FAST 1 ( res )					  
							      34 STORE_FAST 2 ( i )					    32 LOAD_CONST 1 ( 0 )					  
							      								    34 BINARY_SUBSCR						  
							      4 36 LOAD_FAST 0 ( str )					    36 LOAD_CONST 2 ( 48 )					  
							      38 LOAD_FAST 2 ( i )					    38 COMPARE_OP 2 ( == )					  
							      40 BINARY_SUBSCR						    40 POP_JUMP_IF_FALSE 46					  
							      42 LOAD_CONST 4 ( '0' )					    								  
							      44 COMPARE_OP 2 ( == )					    5 42 LOAD_FAST 1 ( res )					  
							      46 POP_JUMP_IF_TRUE 68					    44 LOAD_CONST 1 ( 0 )					  
							      48 LOAD_FAST 0 ( str )					    46 BINARY_SUBSCR						  
							      50 LOAD_FAST 2 ( i )					    48 LOAD_CONST 2 ( 48 )					  
							      52 BINARY_SUBSCR						    50 COMPARE_OP 2 ( == )					  
							      54 LOAD_CONST 5 ( '1' )					    52 POP_JUMP_IF_FALSE 56					  
							      56 COMPARE_OP 2 ( == )					    								  
							      58 POP_JUMP_IF_TRUE 68					    6 54 LOAD_FAST 1 ( res )					  
							      60 LOAD_FAST 1 ( res )					    56 LOAD_CONST 1 ( 0 )					  
							      62 LOAD_CONST 6 ( 2 )					    58 BINARY_SUBSCR						  
							      64 COMPARE_OP 0 ( < )					    60 LOAD_CONST 2 ( 48 )					  
							      66 POP_JUMP_IF_FALSE 90					    62 COMPARE_OP 2 ( == )					  
							      								    64 POP_JUMP_IF_FALSE 70					  
							      5 >> 68 LOAD_FAST 1 ( res )				    								  
							      70 LOAD_GLOBAL 0 ( ord )					    7 66 LOAD_FAST 1 ( res )					  
							      72 LOAD_FAST 0 ( str )					    68 LOAD_CONST 1 ( 0 )					  
							      74 LOAD_FAST 2 ( i )					    70 BINARY_SUBSCR						  
							      76 BINARY_SUBSCR						    72 LOAD_CONST 2 ( 48 )					  
							      78 CALL_FUNCTION 1					    74 COMPARE_OP 2 ( == )					  
							      80 LOAD_CONST 2 ( 48 )					    76 POP_JUMP_IF_FALSE 80					  
							      82 BINARY_SUBTRACT					    								  
							      84 INPLACE_ADD						    8 78 LOAD_FAST 1 ( res )					  
							      86 STORE_FAST 1 ( res )					    80 LOAD_CONST 1 ( 0 )					  
							      88 JUMP_ABSOLUTE 32					    82 BINARY_SUBSCR						  
							      								    84 LOAD_CONST 2 ( 48 )					  
							      7 >> 90 LOAD_FAST 1 ( res )				    86 COMPARE_OP 2 ( == )					  
							      92 LOAD_GLOBAL 0 ( ord )					    88 POP_JUMP_IF_FALSE 90					  
							      94 LOAD_FAST 0 ( str )					    								  
							      96 LOAD_FAST 2 ( i )					    9 >> 90 LOAD_FAST 1 ( res )					  
							      98 BINARY_SUBSCR						    92 LOAD_CONST 1 ( 0 )					  
							      100 CALL_FUNCTION 1					    94 BINARY_SUBSCR						  
							      102 LOAD_CONST 2 ( 48 )					    96 LOAD_CONST 2 ( 48 )					  
							      104 BINARY_SUBTRACT					    98 COMPARE_OP 2 ( == )					  
							      106 INPLACE_MULTIPLY					    100 POP_JUMP_IF_FALSE 112					  
							      108 STORE_FAST 1 ( res )					    								  
							      110 JUMP_ABSOLUTE 32					    10 102 LOAD_FAST 1 ( res )					  
							      >> 112 POP_BLOCK						    104 LOAD_CONST 1 ( 0 )					  
							      								    106 BINARY_SUBSCR						  
							      8 >> 114 LOAD_FAST 1 ( res )				    108 LOAD_CONST 2 ( 48 )					  
							      116 RETURN_VALUE NEW_LINE					    110 COMPARE_OP 2 ( == )					  
							      								    112 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    11 114 LOAD_FAST 1 ( res )					  
							      								    116 LOAD_CONST 1 ( 0 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 LOAD_CONST 2 ( 48 )					  
							      								    122 COMPARE_OP 2 ( == )					  
							      								    124 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    12 126 LOAD_FAST 1 ( res )					  
							      								    128 RETURN_VALUE						  
							      								    								  
							      								    13 >> 130 LOAD_FAST 1 ( res )				  
							      								    132 RETURN_VALUE						  
							      								    134 JUMP_ABSOLUTE 18					  
							      								    >> 136 POP_BLOCK						  
							      								    								  
							      								    14 >> 138 LOAD_FAST 1 ( res )				  
							      								    140 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP
--							      --							    --								  --
def isHeap ( arr , i , n ) :				      Disassembly of <code object isHeap at 0x7f33e26494b0, file "< Disassembly of <code object isHeap at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    if i > int ( ( n - 2 ) / 2 ) :			      2 0 LOAD_FAST 1 ( i )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
	return True					      2 LOAD_GLOBAL 0 ( int )					    2 LOAD_GLOBAL 0 ( int )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr  4 LOAD_FAST 2 ( n )					    4 LOAD_FAST 1 ( i )						  y", line 54, in run_dis_script     hyp_co = mco.to
	return True					      6 LOAD_CONST 1 ( 2 )					    6 LOAD_CONST 1 ( 2 )					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    return False					      8 BINARY_SUBTRACT						    8 BINARY_TRUE_DIVIDE					  assembler.py", line 81, in to_co     co_consts.app
							      10 LOAD_CONST 1 ( 2 )					    10 CALL_FUNCTION 1						  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
							      12 BINARY_TRUE_DIVIDE					    12 LOAD_CONST 2 ( 2 )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
							      14 CALL_FUNCTION 1					    14 BINARY_TRUE_DIVIDE					  co	 self.co_cellvars, ValueError: code: varname
							      16 COMPARE_OP 4 ( > )					    16 CALL_FUNCTION 1						  s is too small
							      18 POP_JUMP_IF_FALSE 24					    18 LOAD_CONST 2 ( 2 )					  
							      								    20 BINARY_TRUE_DIVIDE					  
							      3 20 LOAD_CONST 2 ( True )				    22 RETURN_VALUE NEW_LINE					  
							      22 RETURN_VALUE						    								  
							      								    								  
							      4 >> 24 LOAD_FAST 0 ( arr )				    								  
							      26 LOAD_FAST 1 ( i )					    								  
							      28 BINARY_SUBSCR						    								  
							      30 LOAD_FAST 0 ( arr )					    								  
							      32 LOAD_CONST 1 ( 2 )					    								  
							      34 LOAD_FAST 1 ( i )					    								  
							      36 BINARY_MULTIPLY					    								  
							      38 LOAD_CONST 3 ( 1 )					    								  
							      40 BINARY_ADD						    								  
							      42 BINARY_SUBSCR						    								  
							      44 COMPARE_OP 5 ( >= )					    								  
							      46 POP_JUMP_IF_FALSE 116					    								  
							      48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 1 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_CONST 1 ( 2 )					    								  
							      58 LOAD_FAST 1 ( i )					    								  
							      60 BINARY_MULTIPLY					    								  
							      62 LOAD_CONST 1 ( 2 )					    								  
							      64 BINARY_ADD						    								  
							      66 BINARY_SUBSCR						    								  
							      68 COMPARE_OP 5 ( >= )					    								  
							      70 POP_JUMP_IF_FALSE 116					    								  
							      72 LOAD_GLOBAL 1 ( isHeap )				    								  
							      74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_CONST 1 ( 2 )					    								  
							      78 LOAD_FAST 1 ( i )					    								  
							      80 BINARY_MULTIPLY					    								  
							      82 LOAD_CONST 3 ( 1 )					    								  
							      84 BINARY_ADD						    								  
							      86 LOAD_FAST 2 ( n )					    								  
							      88 CALL_FUNCTION 3					    								  
							      90 POP_JUMP_IF_FALSE 116					    								  
							      92 LOAD_GLOBAL 1 ( isHeap )				    								  
							      94 LOAD_FAST 0 ( arr )					    								  
							      96 LOAD_CONST 1 ( 2 )					    								  
							      98 LOAD_FAST 1 ( i )					    								  
							      100 BINARY_MULTIPLY					    								  
							      102 LOAD_CONST 1 ( 2 )					    								  
							      104 BINARY_ADD						    								  
							      106 LOAD_FAST 2 ( n )					    								  
							      108 CALL_FUNCTION 3					    								  
							      110 POP_JUMP_IF_FALSE 116					    								  
							      								    								  
							      5 112 LOAD_CONST 2 ( True )				    								  
							      114 RETURN_VALUE						    								  
							      								    								  
							      6 >> 116 LOAD_CONST 4 ( False )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE
--							      --							    --								  --
def minCoins ( coins , m , V ) :			      Disassembly of <code object minCoins at 0x7f33e2644930, file  Disassembly of <code object minCoins at 0x7f2b0163dc90, file  script_not_found : None
    if ( V == 0 ) :					      2 0 LOAD_FAST 2 ( V )					    2 0 LOAD_FAST 0 ( coins )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    res = sys.maxsize					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    for i in range ( 0 , m ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	if ( coins [ i ] <= V ) :			      								    								  
	    sub_res = minCoins ( coins , m , V - coins [ i ]  3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
	    if ( sub_res != sys.maxsize and sub_res + 1 < res 10 RETURN_VALUE						    10 RETURN_VALUE						  
		res = sub_res + 1			      								    								  
    return res						      4 >> 12 LOAD_GLOBAL 0 ( sys )				    4 >> 12 LOAD_GLOBAL 0 ( sys )				  
							      14 LOAD_ATTR 1 ( maxsize )				    14 LOAD_ATTR 1 ( maxsize )					  
							      16 STORE_FAST 3 ( res )					    16 STORE_FAST 1 ( i )					  
							      								    								  
							      5 18 SETUP_LOOP 80 ( to 100 )				    5 18 SETUP_LOOP 54 ( to 72 )				  
							      20 LOAD_GLOBAL 2 ( range )				    20 LOAD_GLOBAL 2 ( range )					  
							      22 LOAD_CONST 1 ( 0 )					    22 LOAD_CONST 1 ( 0 )					  
							      24 LOAD_FAST 1 ( m )					    24 LOAD_FAST 1 ( i )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 66 ( to 98 )				    >> 30 FOR_ITER 46 ( to 70 )					  
							      32 STORE_FAST 4 ( i )					    32 STORE_FAST 2 ( i )					  
							      								    								  
							      6 34 LOAD_FAST 0 ( coins )				    6 34 LOAD_FAST 2 ( i )					  
							      36 LOAD_FAST 4 ( i )					    36 LOAD_CONST 1 ( 0 )					  
							      38 BINARY_SUBSCR						    38 COMPARE_OP 2 ( == )					  
							      40 LOAD_FAST 2 ( V )					    40 POP_JUMP_IF_FALSE 30					  
							      42 COMPARE_OP 1 ( <= )					    								  
							      44 POP_JUMP_IF_FALSE 30					    7 42 LOAD_FAST 1 ( i )					  
							      								    44 LOAD_CONST 1 ( 0 )					  
							      7 46 LOAD_GLOBAL 3 ( minCoins )				    46 BINARY_SUBSCR						  
							      48 LOAD_FAST 0 ( coins )					    48 STORE_FAST 2 ( i )					  
							      50 LOAD_FAST 1 ( m )					    								  
							      52 LOAD_FAST 2 ( V )					    8 50 LOAD_FAST 2 ( i )					  
							      54 LOAD_FAST 0 ( coins )					    52 LOAD_CONST 1 ( 0 )					  
							      56 LOAD_FAST 4 ( i )					    54 COMPARE_OP 2 ( == )					  
							      58 BINARY_SUBSCR						    56 POP_JUMP_IF_FALSE 30					  
							      60 BINARY_SUBTRACT					    								  
							      62 CALL_FUNCTION 3					    9 58 LOAD_FAST 1 ( i )					  
							      64 STORE_FAST 5 ( sub_res )				    60 LOAD_CONST 1 ( 0 )					  
							      								    62 BINARY_SUBSCR						  
							      8 66 LOAD_FAST 5 ( sub_res )				    64 STORE_FAST 2 ( i )					  
							      68 LOAD_GLOBAL 0 ( sys )					    								  
							      70 LOAD_ATTR 1 ( maxsize )				    10 66 LOAD_FAST 2 ( i )					  
							      72 COMPARE_OP 3 ( != )					    68 LOAD_CONST 1 ( 0 )					  
							      74 POP_JUMP_IF_FALSE 30					    70 COMPARE_OP 2 ( == )					  
							      76 LOAD_FAST 5 ( sub_res )				    72 POP_JUMP_IF_FALSE 30					  
							      78 LOAD_CONST 2 ( 1 )					    								  
							      80 BINARY_ADD						    11 74 LOAD_FAST 1 ( i )					  
							      82 LOAD_FAST 3 ( res )					    76 LOAD_CONST 1 ( 0 )					  
							      84 COMPARE_OP 0 ( < )					    78 BINARY_SUBSCR						  
							      86 POP_JUMP_IF_FALSE 30					    80 STORE_FAST 2 ( i )					  
							      								    								  
							      9 88 LOAD_FAST 5 ( sub_res )				    12 82 LOAD_FAST 1 ( i )					  
							      90 LOAD_CONST 2 ( 1 )					    84 LOAD_CONST 1 ( 0 )					  
							      92 BINARY_ADD						    86 COMPARE_OP 2 ( == )					  
							      94 STORE_FAST 3 ( res )					    88 POP_JUMP_IF_FALSE 92					  
							      96 JUMP_ABSOLUTE 30					    								  
							      >> 98 POP_BLOCK						    13 90 LOAD_FAST 1 ( i )					  
							      								    92 LOAD_CONST 1 ( 0 )					  
							      10 >> 100 LOAD_FAST 3 ( res )				    94 BINARY_SUBSCR						  
							      102 RETURN_VALUE NEW_LINE					    96 LOAD_FAST 2 ( i )					  
							      								    98 LOAD_CONST 1 ( 0 )					  
							      								    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 2 ( i )					  
							      								    104 LOAD_CONST 1 ( 0 )					  
							      								    106 BINARY_SUBSCR						  
							      								    108 LOAD_FAST 2 ( i )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 LOAD_FAST 2 ( i )					  
							      								    114 LOAD_CONST 1 ( 0 )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_FAST 2 ( i )					  
							      								    120 LOAD_CONST 1 ( 0 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_FAST 2 ( i )					  
							      								    126 LOAD_CONST 1 ( 0 )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_FAST 2 ( i )					  
							      								    132 LOAD_CONST 1 ( 0 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_FAST 2 ( i )					  
							      								    138 LOAD_CONST 1 ( 0 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 2 ( i )					  
							      								    146 LOAD_CONST 1 ( 0 )					  
							      								    148 STORE_SUBSCR						  
							      								    								  
							      								    14 150 LOAD_FAST 1 ( i )					  
							      								    152 LOAD_CONST 1 ( 0 )					  
							      								    154 COMPARE_OP 2 ( == )					  
							      								    156 POP_JUMP_IF_FALSE 30					  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		      UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		    UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		  UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1
--							      --							    --								  --
def printIntersection ( arr1 , arr2 , m , n ) :		      Disassembly of <code object printIntersection at 0x7f33e2649a Disassembly of <code object printIntersection at 0x7f2b0163dc script_not_found : None
    i , j = 0 , 0					      2 0 LOAD_CONST 1 ( ( 0 , 0 ) )				    2 0 LOAD_FAST 1 ( arr2 )					  
    while i < m and j < n :				      2 UNPACK_SEQUENCE 2					    2 LOAD_CONST 1 ( 0 )					  
	if arr1 [ i ] < arr2 [ j ] :			      4 STORE_FAST 4 ( i )					    4 COMPARE_OP 4 ( > )					  
	    i += 1					      6 STORE_FAST 5 ( j )					    6 POP_JUMP_IF_FALSE 20					  
	elif arr2 [ j ] < arr1 [ i ] :			      								    								  
	    j += 1					      3 8 SETUP_LOOP 100 ( to 110 )				    3 8 LOAD_FAST 1 ( arr2 )					  
	else :						      >> 10 LOAD_FAST 4 ( i )					    10 LOAD_CONST 1 ( 0 )					  
	    print ( arr2 [ j ] )			      12 LOAD_FAST 2 ( m )					    12 COMPARE_OP 4 ( > )					  
	    j += 1					      14 COMPARE_OP 0 ( < )					    14 POP_JUMP_IF_FALSE 20					  
	    i += 1					      16 POP_JUMP_IF_FALSE 108					    								  
							      18 LOAD_FAST 5 ( j )					    4 16 LOAD_FAST 1 ( arr2 )					  
							      20 LOAD_FAST 3 ( n )					    18 LOAD_CONST 1 ( 0 )					  
							      22 COMPARE_OP 0 ( < )					    20 COMPARE_OP 4 ( > )					  
							      24 POP_JUMP_IF_FALSE 108					    22 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      4 26 LOAD_FAST 0 ( arr1 )					    5 24 LOAD_FAST 1 ( arr2 )					  
							      28 LOAD_FAST 4 ( i )					    26 LOAD_CONST 1 ( 0 )					  
							      30 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      32 LOAD_FAST 1 ( arr2 )					    30 STORE_FAST 1 ( arr2 )					  
							      34 LOAD_FAST 5 ( j )					    								  
							      36 BINARY_SUBSCR						    6 32 LOAD_FAST 1 ( arr2 )					  
							      38 COMPARE_OP 0 ( < )					    34 LOAD_CONST 1 ( 0 )					  
							      40 POP_JUMP_IF_FALSE 52					    36 COMPARE_OP 4 ( > )					  
							      								    38 POP_JUMP_IF_FALSE 48					  
							      5 42 LOAD_FAST 4 ( i )					    								  
							      44 LOAD_CONST 2 ( 1 )					    7 40 LOAD_FAST 1 ( arr2 )					  
							      46 INPLACE_ADD						    42 LOAD_CONST 1 ( 0 )					  
							      48 STORE_FAST 4 ( i )					    44 BINARY_SUBSCR						  
							      50 JUMP_ABSOLUTE 10					    46 STORE_FAST 1 ( arr2 )					  
							      								    								  
							      6 >> 52 LOAD_FAST 1 ( arr2 )				    8 >> 48 LOAD_FAST 1 ( arr2 )				  
							      54 LOAD_FAST 5 ( j )					    50 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_SUBSCR						    52 COMPARE_OP 4 ( > )					  
							      58 LOAD_FAST 0 ( arr1 )					    54 POP_JUMP_IF_FALSE 64					  
							      60 LOAD_FAST 4 ( i )					    								  
							      62 BINARY_SUBSCR						    9 56 LOAD_FAST 1 ( arr2 )					  
							      64 COMPARE_OP 0 ( < )					    58 LOAD_CONST 1 ( 0 )					  
							      66 POP_JUMP_IF_FALSE 78					    60 BINARY_SUBSCR						  
							      								    62 STORE_FAST 1 ( arr2 )					  
							      7 68 LOAD_FAST 5 ( j )					    								  
							      70 LOAD_CONST 2 ( 1 )					    10 >> 64 LOAD_FAST 1 ( arr2 )				  
							      72 INPLACE_ADD						    66 LOAD_CONST 2 ( 1 )					  
							      74 STORE_FAST 5 ( j )					    68 COMPARE_OP 4 ( > )					  
							      76 JUMP_ABSOLUTE 10					    70 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      9 >> 78 LOAD_GLOBAL 0 ( print )				    11 72 LOAD_FAST 1 ( arr2 )					  
							      80 LOAD_FAST 1 ( arr2 )					    74 LOAD_CONST 2 ( 1 )					  
							      82 LOAD_FAST 5 ( j )					    76 BINARY_SUBSCR						  
							      84 BINARY_SUBSCR						    78 STORE_FAST 2 ( arr2 )					  
							      86 CALL_FUNCTION 1					    								  
							      88 POP_TOP						    12 >> 80 LOAD_FAST 2 ( arr2 )				  
							      								    82 LOAD_CONST 1 ( 0 )					  
							      10 90 LOAD_FAST 5 ( j )					    84 COMPARE_OP 4 ( > )					  
							      92 LOAD_CONST 2 ( 1 )					    86 POP_JUMP_IF_FALSE 98					  
							      94 INPLACE_ADD						    								  
							      96 STORE_FAST 5 ( j )					    13 88 LOAD_FAST 1 ( arr2 )					  
							      								    90 LOAD_CONST 2 ( 1 )					  
							      11 98 LOAD_FAST 4 ( i )					    92 BINARY_SUBSCR						  
							      100 LOAD_CONST 2 ( 1 )					    94 STORE_FAST 2 ( arr2 )					  
							      102 INPLACE_ADD						    96 JUMP_FORWARD 4 ( to 108 )				  
							      104 STORE_FAST 4 ( i )					    								  
							      106 JUMP_ABSOLUTE 10					    14 >> 98 LOAD_FAST 1 ( arr2 )				  
							      >> 108 POP_BLOCK						    100 LOAD_CONST 2 ( 1 )					  
							      >> 110 LOAD_CONST 0 ( None )				    102 BINARY_SUBSCR						  
							      112 RETURN_VALUE NEW_LINE					    104 STORE_FAST 2 ( arr2 )					  
							      								    								  
							      								    15 106 LOAD_FAST 2 ( arr2 )					  
							      								    108 LOAD_CONST 2 ( 1 )					  
							      								    110 BINARY_SUBSCR						  
							      								    112 STORE_FAST 2 ( arr2 )					  
							      								    								  
							      								    16 114 LOAD_FAST 2 ( arr2 )					  
							      								    116 LOAD_CONST 2 ( 1 )					  
							      								    118 COMPARE_OP 4 ( > )					  
							      								    120 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    17 122 LOAD_FAST 2 ( arr2 )					  
							      								    124 LOAD_CONST 2 ( 1 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 STORE_FAST 2 ( arr2 )					  
							      								    								  
							      								    18 130 LOAD_FAST 2 ( arr2 )					  
							      								    132 LOAD_FAST 2 ( arr2 )					  
							      								    134 COMPARE_OP 4 ( > )					  
							      								    136 POP_JUMP_IF_FALSE 108					  
							      								    								  
							      								    19 138 LOAD_FAST 2 ( arr2 )					  
							      								    140 LOAD_FAST 2 ( arr2 )					  
							      								    142 BINARY_ADD						  
							      								    144 STORE_FAST 2 ( arr2 )					  
							      								    								  
							      								    20 >> 146 LOAD_FAST 2 ( arr2 ) NEW_LINE			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
<unk> CATIVE_INVERSE_UNDER_MODULO_M_1			      <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			    <unk> CATIVE_INVERSE_UNDER_MODULO_M_1			  <unk> CATIVE_INVERSE_UNDER_MODULO_M_1
--							      --							    --								  --
def modInverse ( a , m ) :				      Disassembly of <code object modInverse at 0x7f33e26494b0, fil Disassembly of <code object modInverse at 0x7f2b0163dc90, fil script_not_found : None
    m0 = m						      2 0 LOAD_FAST 1 ( m )					    2 0 LOAD_CONST 1 ( 0 )					  
    y = 0						      2 STORE_FAST 2 ( m0 )					    2 STORE_FAST 2 ( m0 )					  
    x = 1						      								    								  
    if ( m == 1 ) :					      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	return 0					      6 STORE_FAST 3 ( y )					    6 STORE_FAST 3 ( x )					  
    while ( a > 1 ) :					      								    								  
	q = a // m					      4 8 LOAD_CONST 2 ( 1 )					    4 8 LOAD_CONST 1 ( 0 )					  
	t = m						      10 STORE_FAST 4 ( x )					    10 STORE_FAST 4 ( y )					  
	m = a % m					      								    								  
	a = t						      5 12 LOAD_FAST 1 ( m )					    5 12 LOAD_FAST 1 ( m )					  
	t = y						      14 LOAD_CONST 2 ( 1 )					    14 LOAD_CONST 2 ( 1 )					  
	y = x - q * y					      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 2 ( == )					  
	x = t						      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 32					  
    if ( x < 0 ) :					      								    								  
	x = x + m0					      6 20 LOAD_CONST 1 ( 0 )					    6 20 LOAD_CONST 1 ( 0 )					  
    return x						      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      7 >> 24 SETUP_LOOP 56 ( to 82 )				    7 >> 24 LOAD_CONST 1 ( 0 )					  
							      >> 26 LOAD_FAST 0 ( a )					    26 STORE_FAST 5 ( a )					  
							      28 LOAD_CONST 2 ( 1 )					    28 JUMP_FORWARD 4 ( to 36 )					  
							      30 COMPARE_OP 4 ( > )					    								  
							      32 POP_JUMP_IF_FALSE 80					    8 >> 30 LOAD_CONST 1 ( 0 )					  
							      								    32 STORE_FAST 6 ( a )					  
							      8 34 LOAD_FAST 0 ( a )					    34 JUMP_FORWARD 4 ( to 36 )					  
							      36 LOAD_FAST 1 ( m )					    								  
							      38 BINARY_FLOOR_DIVIDE					    10 >> 36 LOAD_CONST 1 ( 0 )					  
							      40 STORE_FAST 5 ( q )					    38 STORE_FAST 6 ( a )					  
							      								    								  
							      9 42 LOAD_FAST 1 ( m )					    11 40 LOAD_CONST 1 ( 0 )					  
							      44 STORE_FAST 6 ( t )					    42 STORE_FAST 7 ( a )					  
							      								    								  
							      10 46 LOAD_FAST 0 ( a )					    12 >> 44 LOAD_FAST 4 ( y )					  
							      48 LOAD_FAST 1 ( m )					    46 LOAD_CONST 1 ( 0 )					  
							      50 BINARY_MODULO						    48 COMPARE_OP 4 ( > )					  
							      52 STORE_FAST 1 ( m )					    50 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      11 54 LOAD_FAST 6 ( t )					    13 52 LOAD_CONST 1 ( 0 )					  
							      56 STORE_FAST 0 ( a )					    54 RETURN_VALUE						  
							      								    								  
							      12 58 LOAD_FAST 3 ( y )					    14 >> 56 LOAD_CONST 1 ( 0 )					  
							      60 STORE_FAST 6 ( t )					    58 RETURN_VALUE						  
							      								    								  
							      13 62 LOAD_FAST 4 ( x )					    15 >> 60 LOAD_CONST 1 ( 0 )					  
							      64 LOAD_FAST 5 ( q )					    62 RETURN_VALUE NEW_LINE					  
							      66 LOAD_FAST 3 ( y )					    								  
							      68 BINARY_MULTIPLY					    								  
							      70 BINARY_SUBTRACT					    								  
							      72 STORE_FAST 3 ( y )					    								  
							      								    								  
							      14 74 LOAD_FAST 6 ( t )					    								  
							      76 STORE_FAST 4 ( x )					    								  
							      78 JUMP_ABSOLUTE 26					    								  
							      >> 80 POP_BLOCK						    								  
							      								    								  
							      15 >> 82 LOAD_FAST 4 ( x )				    								  
							      84 LOAD_CONST 1 ( 0 )					    								  
							      86 COMPARE_OP 0 ( < )					    								  
							      88 POP_JUMP_IF_FALSE 98					    								  
							      								    								  
							      16 90 LOAD_FAST 4 ( x )					    								  
							      92 LOAD_FAST 2 ( m0 )					    								  
							      94 BINARY_ADD						    								  
							      96 STORE_FAST 4 ( x )					    								  
							      								    								  
							      17 >> 98 LOAD_FAST 4 ( x )				    								  
							      100 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES			  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES
--							      --							    --								  --
def fib ( n ) :						      Disassembly of <code object fib at 0x7f33e2653f60, file "<dis Disassembly of <code object fib at 0x7f2b01639660, file "<dis script_not_found : None
    a = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    b = 1						      2 STORE_FAST 1 ( a )					    2 STORE_FAST 1 ( a )					  
    if ( n >= 0 ) :					      								    								  
	print ( a , end = ' ' )				      3 4 LOAD_CONST 2 ( 1 )					    3 4 LOAD_CONST 1 ( 0 )					  
    if ( n >= 1 ) :					      6 STORE_FAST 2 ( b )					    6 STORE_FAST 2 ( b )					  
	print ( b , end = ' ' )				      								    								  
    for i in range ( 2 , n + 1 ) :			      4 8 LOAD_FAST 0 ( n )					    4 8 LOAD_FAST 0 ( n )					  
	c = a + b					      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 2 ( 1 )					  
	print ( c , end = ' ' )				      12 COMPARE_OP 5 ( >= )					    12 COMPARE_OP 5 ( >= )					  
	a = b						      14 POP_JUMP_IF_FALSE 28					    14 POP_JUMP_IF_FALSE 26					  
	b = c						      								    								  
							      5 16 LOAD_GLOBAL 0 ( print )				    5 16 LOAD_GLOBAL 0 ( print )				  
							      18 LOAD_FAST 1 ( a )					    18 LOAD_FAST 1 ( a )					  
							      20 LOAD_CONST 3 ( ' ' )					    20 LOAD_CONST 3 ( ' ' )					  
							      22 LOAD_CONST 4 ( ( 'end' , ) )				    22 CALL_FUNCTION 2						  
							      24 CALL_FUNCTION_KW 2					    24 POP_TOP							  
							      26 POP_TOP						    								  
							      								    6 >> 26 SETUP_LOOP 48 ( to 80 )				  
							      6 >> 28 LOAD_FAST 0 ( n )					    28 LOAD_GLOBAL 1 ( range )					  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_CONST 2 ( 1 )					  
							      32 COMPARE_OP 5 ( >= )					    32 LOAD_CONST 1 ( 0 )					  
							      34 POP_JUMP_IF_FALSE 48					    34 CALL_FUNCTION 2						  
							      								    36 GET_ITER							  
							      7 36 LOAD_GLOBAL 0 ( print )				    >> 38 FOR_ITER 40 ( to 78 )					  
							      38 LOAD_FAST 2 ( b )					    40 STORE_FAST 3 ( i )					  
							      40 LOAD_CONST 3 ( ' ' )					    								  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    7 42 LOAD_GLOBAL 0 ( print )				  
							      44 CALL_FUNCTION_KW 2					    44 LOAD_FAST 1 ( a )					  
							      46 POP_TOP						    46 LOAD_CONST 3 ( ' ' )					  
							      								    48 CALL_FUNCTION 2						  
							      8 >> 48 SETUP_LOOP 50 ( to 100 )				    50 POP_TOP							  
							      50 LOAD_GLOBAL 1 ( range )				    								  
							      52 LOAD_CONST 5 ( 2 )					    8 52 LOAD_GLOBAL 0 ( print )				  
							      54 LOAD_FAST 0 ( n )					    54 LOAD_FAST 1 ( a )					  
							      56 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 3 ( ' ' )					  
							      58 BINARY_ADD						    58 CALL_FUNCTION 2						  
							      60 CALL_FUNCTION 2					    60 POP_TOP							  
							      62 GET_ITER						    62 JUMP_ABSOLUTE 38						  
							      >> 64 FOR_ITER 32 ( to 98 )				    >> 64 POP_BLOCK						  
							      66 STORE_FAST 3 ( i )					    >> 66 JUMP_ABSOLUTE 38					  
							      								    >> 68 POP_BLOCK						  
							      9 68 LOAD_FAST 1 ( a )					    								  
							      70 LOAD_FAST 2 ( b )					    9 >> 70 LOAD_FAST 1 ( a )					  
							      72 BINARY_ADD						    72 RETURN_VALUE NEW_LINE					  
							      74 STORE_FAST 4 ( c )					    								  
							      								    								  
							      10 76 LOAD_GLOBAL 0 ( print )				    								  
							      78 LOAD_FAST 4 ( c )					    								  
							      80 LOAD_CONST 3 ( ' ' )					    								  
							      82 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      84 CALL_FUNCTION_KW 2					    								  
							      86 POP_TOP						    								  
							      								    								  
							      11 88 LOAD_FAST 2 ( b )					    								  
							      90 STORE_FAST 1 ( a )					    								  
							      								    								  
							      12 92 LOAD_FAST 4 ( c )					    								  
							      94 STORE_FAST 2 ( b )					    								  
							      96 JUMP_ABSOLUTE 64					    								  
							      >> 98 POP_BLOCK						    								  
							      >> 100 LOAD_CONST 0 ( None )				    								  
							      102 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		      FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY		    FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY			  FIND_THE_LARGEST_<unk> ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
def find3largest ( arr , n ) :				      Disassembly of <code object find3largest at 0x7f33e2649a50, f Disassembly of <code object find3largest at 0x7f2b0163dc90, f script_not_found : None
    arr = sorted ( arr )				      2 0 LOAD_GLOBAL 0 ( sorted )				    2 0 LOAD_GLOBAL 0 ( sorted )				  
    check = 0						      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    count = 1						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 1 , n + 1 ) :			      6 STORE_FAST 0 ( arr )					    6 STORE_FAST 1 ( arr )					  
	if ( count < 4 ) :				      								    								  
	    if ( check != arr [ n - i ] ) :		      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
		print ( arr [ n - i ] , end = " " )	      10 STORE_FAST 2 ( check )					    10 STORE_FAST 2 ( count )					  
		check = arr [ n - i ]			      								    								  
		count += 1				      4 12 LOAD_CONST 2 ( 1 )					    4 12 LOAD_CONST 1 ( 0 )					  
	else :						      14 STORE_FAST 3 ( count )					    14 STORE_FAST 3 ( count )					  
	    break					      								    								  
							      5 16 SETUP_LOOP 90 ( to 108 )				    5 16 SETUP_LOOP 64 ( to 76 )				  
							      18 LOAD_GLOBAL 1 ( range )				    >> 18 LOAD_FAST 1 ( arr )					  
							      20 LOAD_CONST 2 ( 1 )					    20 LOAD_METHOD 1 ( keys )					  
							      22 LOAD_FAST 1 ( n )					    22 CALL_METHOD 0						  
							      24 LOAD_CONST 2 ( 1 )					    24 STORE_FAST 4 ( keys )					  
							      26 BINARY_ADD						    								  
							      28 CALL_FUNCTION 2					    6 26 SETUP_LOOP 64 ( to 74 )				  
							      30 GET_ITER						    28 LOAD_GLOBAL 2 ( range )					  
							      >> 32 FOR_ITER 72 ( to 106 )				    30 LOAD_CONST 2 ( 1 )					  
							      34 STORE_FAST 4 ( i )					    32 LOAD_FAST 0 ( arr )					  
							      								    34 CALL_FUNCTION 2						  
							      6 36 LOAD_FAST 3 ( count )				    36 GET_ITER							  
							      38 LOAD_CONST 3 ( 4 )					    >> 38 FOR_ITER 48 ( to 72 )					  
							      40 COMPARE_OP 0 ( < )					    40 STORE_FAST 5 ( i )					  
							      42 POP_JUMP_IF_FALSE 102					    								  
							      								    7 42 LOAD_FAST 1 ( arr )					  
							      7 44 LOAD_FAST 2 ( check )				    44 LOAD_METHOD 3 ( append )					  
							      46 LOAD_FAST 0 ( arr )					    46 LOAD_FAST 4 ( keys )					  
							      48 LOAD_FAST 1 ( n )					    48 CALL_METHOD 1						  
							      50 LOAD_FAST 4 ( i )					    50 POP_TOP							  
							      52 BINARY_SUBTRACT					    								  
							      54 BINARY_SUBSCR						    8 52 LOAD_FAST 2 ( count )					  
							      56 COMPARE_OP 3 ( != )					    54 LOAD_CONST 3 ( 1 )					  
							      58 POP_JUMP_IF_FALSE 104					    56 INPLACE_ADD						  
							      								    58 STORE_FAST 2 ( count )					  
							      8 60 LOAD_GLOBAL 2 ( print )				    								  
							      62 LOAD_FAST 0 ( arr )					    9 60 LOAD_FAST 2 ( count )					  
							      64 LOAD_FAST 1 ( n )					    62 LOAD_CONST 3 ( 1 )					  
							      66 LOAD_FAST 4 ( i )					    64 INPLACE_ADD						  
							      68 BINARY_SUBTRACT					    66 STORE_FAST 2 ( count )					  
							      70 BINARY_SUBSCR						    								  
							      72 LOAD_CONST 4 ( ' ' )					    10 68 LOAD_FAST 2 ( count )					  
							      74 LOAD_CONST 5 ( ( 'end' , ) )				    70 LOAD_CONST 3 ( 1 )					  
							      76 CALL_FUNCTION_KW 2					    72 INPLACE_ADD						  
							      78 POP_TOP						    74 STORE_FAST 2 ( count )					  
							      								    								  
							      9 80 LOAD_FAST 0 ( arr )					    11 >> 76 LOAD_FAST 2 ( count )				  
							      82 LOAD_FAST 1 ( n )					    78 LOAD_CONST 3 ( 1 )					  
							      84 LOAD_FAST 4 ( i )					    80 INPLACE_ADD						  
							      86 BINARY_SUBTRACT					    82 STORE_FAST 2 ( count )					  
							      88 BINARY_SUBSCR						    								  
							      90 STORE_FAST 2 ( check )					    12 84 LOAD_FAST 2 ( count )					  
							      								    86 LOAD_CONST 3 ( 1 )					  
							      10 92 LOAD_FAST 3 ( count )				    88 INPLACE_ADD						  
							      94 LOAD_CONST 2 ( 1 )					    90 STORE_FAST 2 ( count )					  
							      96 INPLACE_ADD						    								  
							      98 STORE_FAST 3 ( count )					    13 92 LOAD_FAST 2 ( count )					  
							      100 JUMP_ABSOLUTE 32					    94 LOAD_CONST 3 ( 1 )					  
							      								    96 INPLACE_ADD						  
							      12 >> 102 BREAK_LOOP					    98 STORE_FAST 2 ( count )					  
							      >> 104 JUMP_ABSOLUTE 32					    								  
							      >> 106 POP_BLOCK						    14 100 LOAD_FAST 2 ( count )				  
							      >> 108 LOAD_CONST 0 ( None )				    102 LOAD_CONST 3 ( 1 )					  
							      110 RETURN_VALUE NEW_LINE					    104 INPLACE_ADD						  
							      								    106 STORE_FAST 2 ( count )					  
							      								    108 JUMP_ABSOLUTE 38					  
							      								    >> 110 POP_BLOCK						  
							      								    								  
							      								    15 >> 112 LOAD_FAST 2 ( count )				  
							      								    114 LOAD_CONST 3 ( 1 )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 2 ( count )					  
							      								    								  
							      								    16 120 LOAD_FAST 2 ( count )				  
							      								    122 LOAD_CONST 3 ( 1 )					  
							      								    124 INPLACE_ADD						  
							      								    126 STORE_FAST 2 ( count )					  
							      								    								  
							      								    17 128 LOAD_FAST 2 ( count )				  
							      								    130 LOAD_CONST 3 ( 1 )					  
							      								    132 INPLACE_ADD						  
							      								    134 STORE_FAST 2 ( count )					  
							      								    								  
							      								    18 136 LOAD_FAST 2 ( count )				  
							      								    138 LOAD_FAST 3 ( count )					  
							      								    140 LOAD_CONST 3 ( 1 )					  
							      								    142 BINARY_SUBTRACT						  
							      								    144 INPLACE_ADD						  
							      								    146 STORE_FAST 2 ( count )					  
							      								    								  
							      								    19 148 LOAD_FAST 2 ( count )				  
							      								    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPOSITE_NUMBER					      COMPOSITE_NUMBER						    COMPOSITE_NUMBER						  COMPOSITE_NUMBER
--							      --							    --								  --
def isComposite ( n ) :					      Disassembly of <code object isComposite at 0x7f33e26494b0, fi Disassembly of <code object isComposite at 0x7f2b01639660, fi error : /bin/bash: line 1: 12599 Segmentation faul
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return False					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  ataset/bin/python XLM/dis_script.py --script_path
    if ( n <= 3 ) :					      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	return False					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 14					  24/eval_scripts/python_sa-dis_sa.valid/COMPOSITE_N
    if ( n % 2 == 0 or n % 3 == 0 ) :			      								    								  UMBER.dis
	return True					      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
    i = 5						      10 RETURN_VALUE						    10 RETURN_VALUE						  
    while ( i * i <= n ) :				      								    								  
	if ( n % i == 0 or n % ( i + 2 ) == 0 ) :	      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
	    return True					      14 LOAD_CONST 3 ( 3 )					    14 LOAD_CONST 1 ( 1 )					  
	i = i + 6					      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
    return False					      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( False )				    5 20 LOAD_CONST 3 ( False )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_FAST 0 ( n )					    6 >> 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 4 ( 2 )					    26 LOAD_CONST 1 ( 1 )					  
							      28 BINARY_MODULO						    28 COMPARE_OP 1 ( <= )					  
							      30 LOAD_CONST 5 ( 0 )					    30 POP_JUMP_IF_FALSE 40					  
							      32 COMPARE_OP 2 ( == )					    								  
							      34 POP_JUMP_IF_TRUE 48					    7 32 LOAD_CONST 4 ( False )					  
							      36 LOAD_FAST 0 ( n )					    34 RETURN_VALUE						  
							      38 LOAD_CONST 3 ( 3 )					    								  
							      40 BINARY_MODULO						    8 >> 36 LOAD_FAST 0 ( n )					  
							      42 LOAD_CONST 5 ( 0 )					    38 LOAD_CONST 1 ( 1 )					  
							      44 COMPARE_OP 2 ( == )					    40 COMPARE_OP 1 ( <= )					  
							      46 POP_JUMP_IF_FALSE 52					    42 POP_JUMP_IF_FALSE 48					  
							      								    44 LOAD_CONST 5 ( 0 )					  
							      7 >> 48 LOAD_CONST 6 ( True )				    46 RETURN_VALUE						  
							      50 RETURN_VALUE						    								  
							      								    9 >> 48 LOAD_FAST 0 ( n )					  
							      8 >> 52 LOAD_CONST 7 ( 5 )				    50 LOAD_CONST 1 ( 1 )					  
							      54 STORE_FAST 1 ( i )					    52 COMPARE_OP 1 ( <= )					  
							      								    54 POP_JUMP_IF_FALSE 60					  
							      9 56 SETUP_LOOP 56 ( to 114 )				    56 LOAD_CONST 6 ( 0 )					  
							      >> 58 LOAD_FAST 1 ( i )					    58 RETURN_VALUE						  
							      60 LOAD_FAST 1 ( i )					    								  
							      62 BINARY_MULTIPLY					    10 >> 60 LOAD_FAST 0 ( n )					  
							      64 LOAD_FAST 0 ( n )					    62 LOAD_CONST 1 ( 1 )					  
							      66 COMPARE_OP 1 ( <= )					    64 COMPARE_OP 1 ( <= )					  
							      68 POP_JUMP_IF_FALSE 112					    66 POP_JUMP_IF_FALSE 76					  
							      								    								  
							      10 70 LOAD_FAST 0 ( n )					    11 68 LOAD_CONST 7 ( True )					  
							      72 LOAD_FAST 1 ( i )					    70 RETURN_VALUE						  
							      74 BINARY_MODULO						    								  
							      76 LOAD_CONST 5 ( 0 )					    12 >> 72 LOAD_FAST 0 ( n )					  
							      78 COMPARE_OP 2 ( == )					    74 LOAD_CONST 1 ( 1 )					  
							      80 POP_JUMP_IF_TRUE 98					    76 COMPARE_OP 1 ( <= )					  
							      82 LOAD_FAST 0 ( n )					    78 POP_JUMP_IF_FALSE 84					  
							      84 LOAD_FAST 1 ( i )					    								  
							      86 LOAD_CONST 4 ( 2 )					    13 80 LOAD_CONST 8 ( 0 )					  
							      88 BINARY_ADD						    82 RETURN_VALUE						  
							      90 BINARY_MODULO						    								  
							      92 LOAD_CONST 5 ( 0 )					    14 >> 84 LOAD_FAST 0 ( n )					  
							      94 COMPARE_OP 2 ( == )					    86 LOAD_CONST 9 ( 1 )					  
							      96 POP_JUMP_IF_FALSE 102					    88 COMPARE_OP 1 ( <= )					  
							      								    90 POP_JUMP_IF_FALSE 100					  
							      11 >> 98 LOAD_CONST 6 ( True )				    92 LOAD_CONST 10 ( False )					  
							      100 RETURN_VALUE						    94 RETURN_VALUE						  
							      								    								  
							      12 >> 102 LOAD_FAST 1 ( i )				    15 >> 96 LOAD_FAST 0 ( n )					  
							      104 LOAD_CONST 8 ( 6 )					    98 LOAD_CONST 11 ( 2 )					  
							      106 BINARY_ADD						    100 COMPARE_OP 1 ( <= )					  
							      108 STORE_FAST 1 ( i )					    102 POP_JUMP_IF_FALSE 114					  
							      110 JUMP_ABSOLUTE 58					    104 LOAD_CONST 12 ( True )					  
							      >> 112 POP_BLOCK						    106 RETURN_VALUE						  
							      								    								  
							      13 >> 114 LOAD_CONST 2 ( False )				    16 >> 108 LOAD_FAST 0 ( n )					  
							      116 RETURN_VALUE NEW_LINE					    110 LOAD_CONST 13 ( 0 )					  
							      								    112 COMPARE_OP 1 ( <= )					  
							      								    114 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      								    17 116 LOAD_CONST 14 ( True )				  
							      								    118 RETURN_VALUE						  
							      								    								  
							      								    18 >> 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 13 ( 0 )					  
							      								    124 COMPARE_OP 1 ( <= )					  
							      								    126 POP_JUMP_IF_FALSE 148					  
							      								    								  
							      								    19 128 LOAD_CONST 15 ( True )				  
							      								    130 RETURN_VALUE						  
							      								    								  
							      								    19 >> 132 LOAD_FAST 0 ( n )					  
							      								    134 LOAD_CONST 16 ( 1 )					  
							      								    136 COMPARE_OP 1 ( <= )					  
							      								    138 POP_JUMP_IF_FALSE 148					  
							      								    								  
							      								    20 140 LOAD_CONST 17 ( True )				  
							      								    142 RETURN_VALUE						  
							      								    								  
							      								    21 >> 144 LOAD_FAST 0 ( n )					  
							      								    146 RETURN_VALUE						  
							      								    148 LOAD_CONST 0 ( None )					  
							      								    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SUM_COSX_SERIES					      PROGRAM_SUM_COSX_SERIES					    PROGRAM_SUM_COSX_SERIES					  PROGRAM_SUM_COSX_SERIES
--							      --							    --								  --
def cosXSertiesSum ( x , n ) :				      Disassembly of <code object cosXSertiesSum at 0x7f33e2653ed0, Disassembly of <code object cosXSertiesSum at 0x7f2b01639660, script_not_found : None
    x = x * ( PI / 180.0 ) ;				      2 0 LOAD_FAST 0 ( x )					    2 0 LOAD_FAST 0 ( x )					  
    res = 1 ;						      2 LOAD_GLOBAL 0 ( PI )					    2 LOAD_FAST 1 ( n )						  
    sign = 1 ;						      4 LOAD_CONST 1 ( 180.0 )					    4 BINARY_MULTIPLY						  
    fact = 1 ;						      6 BINARY_TRUE_DIVIDE					    6 LOAD_CONST 1 ( 1 )					  
    pow = 1 ;						      8 BINARY_MULTIPLY						    8 BINARY_ADD						  
    for i in range ( 1 , 5 ) :				      10 STORE_FAST 0 ( x )					    10 STORE_FAST 2 ( x )					  
	sign = sign * - 1 ;				      								    								  
	fact = fact * ( 2 * i - 1 ) * ( 2 * i ) ;	      3 12 LOAD_CONST 2 ( 1 )					    3 12 LOAD_CONST 1 ( 1 )					  
	pow = pow * x * x ;				      14 STORE_FAST 2 ( res )					    14 STORE_FAST 3 ( n )					  
	res = res + sign * pow / fact ;			      								    								  
    return res ;					      4 16 LOAD_CONST 2 ( 1 )					    4 16 LOAD_CONST 1 ( 1 )					  
							      18 STORE_FAST 3 ( sign )					    18 STORE_FAST 4 ( n )					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 1 )					    5 20 SETUP_LOOP 64 ( to 94 )				  
							      22 STORE_FAST 4 ( fact )					    22 LOAD_GLOBAL 0 ( range )					  
							      								    24 LOAD_CONST 2 ( 1 )					  
							      6 24 LOAD_CONST 2 ( 1 )					    26 LOAD_FAST 1 ( n )					  
							      26 STORE_FAST 5 ( pow )					    28 CALL_FUNCTION 2						  
							      								    30 GET_ITER							  
							      7 28 SETUP_LOOP 78 ( to 108 )				    >> 32 FOR_ITER 48 ( to 92 )					  
							      30 LOAD_GLOBAL 1 ( range )				    34 STORE_FAST 5 ( i )					  
							      32 LOAD_CONST 2 ( 1 )					    								  
							      34 LOAD_CONST 3 ( 5 )					    6 36 LOAD_FAST 0 ( x )					  
							      36 CALL_FUNCTION 2					    38 LOAD_FAST 5 ( i )					  
							      38 GET_ITER						    40 BINARY_SUBSCR						  
							      >> 40 FOR_ITER 64 ( to 106 )				    42 LOAD_FAST 1 ( n )					  
							      42 STORE_FAST 6 ( i )					    44 COMPARE_OP 4 ( > )					  
							      								    46 POP_JUMP_IF_FALSE 32					  
							      8 44 LOAD_FAST 3 ( sign )					    								  
							      46 LOAD_CONST 4 ( - 1 )					    7 48 LOAD_FAST 0 ( x )					  
							      48 BINARY_MULTIPLY					    50 LOAD_FAST 5 ( i )					  
							      50 STORE_FAST 3 ( sign )					    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 1 ( n )					  
							      9 52 LOAD_FAST 4 ( fact )					    56 COMPARE_OP 4 ( > )					  
							      54 LOAD_CONST 5 ( 2 )					    58 POP_JUMP_IF_FALSE 32					  
							      56 LOAD_FAST 6 ( i )					    								  
							      58 BINARY_MULTIPLY					    8 60 LOAD_FAST 0 ( x )					  
							      60 LOAD_CONST 2 ( 1 )					    62 LOAD_FAST 5 ( i )					  
							      62 BINARY_SUBTRACT					    64 BINARY_SUBSCR						  
							      64 BINARY_MULTIPLY					    66 LOAD_FAST 1 ( n )					  
							      66 LOAD_CONST 5 ( 2 )					    68 COMPARE_OP 4 ( > )					  
							      68 LOAD_FAST 6 ( i )					    70 POP_JUMP_IF_FALSE 32					  
							      70 BINARY_MULTIPLY					    								  
							      72 BINARY_MULTIPLY					    9 72 LOAD_FAST 0 ( x )					  
							      74 STORE_FAST 4 ( fact )					    74 LOAD_FAST 5 ( i )					  
							      								    76 BINARY_SUBSCR						  
							      10 76 LOAD_FAST 5 ( pow )					    78 LOAD_FAST 1 ( n )					  
							      78 LOAD_FAST 0 ( x )					    80 COMPARE_OP 4 ( > )					  
							      80 BINARY_MULTIPLY					    82 POP_JUMP_IF_FALSE 32					  
							      82 LOAD_FAST 0 ( x )					    								  
							      84 BINARY_MULTIPLY					    10 84 LOAD_FAST 0 ( x )					  
							      86 STORE_FAST 5 ( pow )					    86 LOAD_FAST 5 ( i )					  
							      								    88 BINARY_SUBSCR						  
							      11 88 LOAD_FAST 2 ( res )					    90 LOAD_FAST 1 ( n )					  
							      90 LOAD_FAST 3 ( sign )					    92 INPLACE_ADD						  
							      92 LOAD_FAST 5 ( pow )					    94 STORE_FAST 1 ( n )					  
							      94 BINARY_MULTIPLY					    								  
							      96 LOAD_FAST 4 ( fact )					    11 96 LOAD_FAST 0 ( x )					  
							      98 BINARY_TRUE_DIVIDE					    98 LOAD_FAST 5 ( i )					  
							      100 BINARY_ADD						    100 BINARY_SUBSCR						  
							      102 STORE_FAST 2 ( res )					    102 LOAD_FAST 1 ( n )					  
							      104 JUMP_ABSOLUTE 40					    104 COMPARE_OP 4 ( > )					  
							      >> 106 POP_BLOCK						    106 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      12 >> 108 LOAD_FAST 2 ( res )				    12 108 LOAD_FAST 0 ( x )					  
							      110 RETURN_VALUE NEW_LINE					    110 LOAD_FAST 5 ( i )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 1 ( n )					  
							      								    116 INPLACE_ADD						  
							      								    118 STORE_FAST 0 ( x )					  
							      								    120 JUMP_ABSOLUTE 32					  
							      								    >> 122 POP_BLOCK						  
							      								    								  
							      								    13 >> 124 LOAD_FAST 3 ( n )					  
							      								    126 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	      DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION	    DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION		  DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_<unk> CATION
--							      --							    --								  --
def MatrixChainOrder ( p , i , j ) :			      Disassembly of <code object MatrixChainOrder at 0x7f33e26494b Disassembly of <code object MatrixChainOrder at 0x7f2b0163966 script_not_found : None
    if i == j :						      2 0 LOAD_FAST 1 ( i )					    2 0 LOAD_FAST 0 ( p )					  
	return 0					      2 LOAD_FAST 2 ( j )					    2 LOAD_FAST 1 ( i )						  
    _min = sys.maxsize					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
    for k in range ( i , j ) :				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	count = ( MatrixChainOrder ( p , i , k ) + MatrixChai 								    								  
	if count < _min :				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    _min = count ;				      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return _min ;					      								    								  
							      4 >> 12 LOAD_GLOBAL 0 ( sys )				    4 >> 12 LOAD_GLOBAL 0 ( sys )				  
							      14 LOAD_ATTR 1 ( maxsize )				    14 LOAD_ATTR 1 ( maxsize )					  
							      16 STORE_FAST 3 ( _min )					    16 STORE_FAST 2 ( _min )					  
							      								    								  
							      5 18 SETUP_LOOP 86 ( to 106 )				    5 18 SETUP_LOOP 64 ( to 80 )				  
							      20 LOAD_GLOBAL 2 ( range )				    20 LOAD_GLOBAL 2 ( range )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 2 ( _min )					  
							      24 LOAD_FAST 2 ( j )					    24 CALL_FUNCTION 1						  
							      26 CALL_FUNCTION 2					    26 GET_ITER							  
							      28 GET_ITER						    >> 28 FOR_ITER 48 ( to 78 )					  
							      >> 30 FOR_ITER 72 ( to 104 )				    30 STORE_FAST 3 ( k )					  
							      32 STORE_FAST 4 ( k )					    								  
							      								    6 32 LOAD_FAST 3 ( k )					  
							      6 34 LOAD_GLOBAL 3 ( MatrixChainOrder )			    34 LOAD_FAST 1 ( i )					  
							      36 LOAD_FAST 0 ( p )					    36 COMPARE_OP 2 ( == )					  
							      38 LOAD_FAST 1 ( i )					    38 POP_JUMP_IF_FALSE 28					  
							      40 LOAD_FAST 4 ( k )					    								  
							      42 CALL_FUNCTION 3					    7 40 LOAD_FAST 2 ( _min )					  
							      44 LOAD_GLOBAL 3 ( MatrixChainOrder )			    42 LOAD_FAST 1 ( i )					  
							      46 LOAD_FAST 0 ( p )					    44 BINARY_SUBSCR						  
							      48 LOAD_FAST 4 ( k )					    46 STORE_FAST 4 ( _min )					  
							      50 LOAD_CONST 2 ( 1 )					    								  
							      52 BINARY_ADD						    8 48 LOAD_FAST 1 ( i )					  
							      54 LOAD_FAST 2 ( j )					    50 LOAD_FAST 1 ( i )					  
							      56 CALL_FUNCTION 3					    52 COMPARE_OP 2 ( == )					  
							      58 BINARY_ADD						    54 POP_JUMP_IF_FALSE 64					  
							      60 LOAD_FAST 0 ( p )					    								  
							      62 LOAD_FAST 1 ( i )					    9 56 LOAD_FAST 2 ( _min )					  
							      64 LOAD_CONST 2 ( 1 )					    58 LOAD_FAST 1 ( i )					  
							      66 BINARY_SUBTRACT					    60 BINARY_SUBSCR						  
							      68 BINARY_SUBSCR						    62 STORE_FAST 2 ( _min )					  
							      70 LOAD_FAST 0 ( p )					    								  
							      72 LOAD_FAST 4 ( k )					    10 >> 64 LOAD_FAST 2 ( _min )				  
							      74 BINARY_SUBSCR						    66 LOAD_FAST 1 ( i )					  
							      76 BINARY_MULTIPLY					    68 COMPARE_OP 2 ( == )					  
							      78 LOAD_FAST 0 ( p )					    70 POP_JUMP_IF_FALSE 88					  
							      80 LOAD_FAST 2 ( j )					    								  
							      82 BINARY_SUBSCR						    11 72 LOAD_FAST 2 ( _min )					  
							      84 BINARY_MULTIPLY					    74 LOAD_FAST 1 ( i )					  
							      86 BINARY_ADD						    76 BINARY_SUBSCR						  
							      88 STORE_FAST 5 ( count )					    78 LOAD_FAST 1 ( i )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      7 90 LOAD_FAST 5 ( count )				    82 POP_JUMP_IF_FALSE 88					  
							      92 LOAD_FAST 3 ( _min )					    								  
							      94 COMPARE_OP 0 ( < )					    12 84 LOAD_FAST 2 ( _min )					  
							      96 POP_JUMP_IF_FALSE 30					    86 LOAD_FAST 1 ( i )					  
							      								    88 BINARY_SUBSCR						  
							      8 98 LOAD_FAST 5 ( count )				    90 LOAD_FAST 1 ( i )					  
							      100 STORE_FAST 3 ( _min )					    92 COMPARE_OP 2 ( == )					  
							      102 JUMP_ABSOLUTE 30					    94 POP_JUMP_IF_FALSE 28					  
							      >> 104 POP_BLOCK						    								  
							      								    13 96 LOAD_FAST 2 ( _min )					  
							      9 >> 106 LOAD_FAST 3 ( _min )				    98 LOAD_FAST 1 ( i )					  
							      108 RETURN_VALUE NEW_LINE					    100 BINARY_SUBSCR						  
							      								    102 LOAD_FAST 1 ( i )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    14 108 LOAD_FAST 2 ( _min )					  
							      								    110 LOAD_FAST 1 ( i )					  
							      								    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 1 ( i )					  
							      								    116 BINARY_SUBSCR						  
							      								    118 LOAD_FAST 1 ( i )					  
							      								    120 STORE_SUBSCR						  
							      								    								  
							      								    15 122 LOAD_FAST 2 ( _min )					  
							      								    124 LOAD_FAST 1 ( i )					  
							      								    126 STORE_SUBSCR						  
							      								    								  
							      								    16 >> 128 LOAD_FAST 2 ( _min )				  
							      								    130 LOAD_FAST 1 ( i )					  
							      								    132 STORE_SUBSCR						  
							      								    134 JUMP_ABSOLUTE 28					  
							      								    >> 136 POP_BLOCK						  
							      								    >> 138 JUMP_ABSOLUTE 28					  
							      								    >> 140 POP_BLOCK						  
							      								    >> 142 LOAD_CONST 0 ( None )				  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			      FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			    FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX			  FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX
--							      --							    --								  --
def freq ( ar , m , n ) :				      Disassembly of <code object freq at 0x7f33e2649a50, file "<di Disassembly of <code object freq at 0x7f2b0163dc90, file "<di success : None
    even = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    odd = 0						      2 STORE_FAST 3 ( even )					    2 STORE_FAST 2 ( even )					  
    for i in range ( m ) :				      								    								  
	for j in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	    if ( ( ar [ i ] [ j ] % 2 ) == 0 ) :	      6 STORE_FAST 4 ( odd )					    6 STORE_FAST 3 ( odd )					  
		even += 1				      								    								  
	    else :					      4 8 SETUP_LOOP 72 ( to 82 )				    4 8 SETUP_LOOP 64 ( to 76 )					  
		odd += 1				      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
    print ( " Frequency of odd number =" , odd )	      12 LOAD_FAST 1 ( m )					    12 LOAD_FAST 1 ( m )					  
    print ( " Frequency of even number =" , even )	      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 60 ( to 80 )				    >> 18 FOR_ITER 64 ( to 74 )					  
							      20 STORE_FAST 5 ( i )					    20 STORE_FAST 4 ( j )					  
							      								    								  
							      5 22 SETUP_LOOP 54 ( to 78 )				    5 22 SETUP_LOOP 48 ( to 72 )				  
							      24 LOAD_GLOBAL 0 ( range )				    24 LOAD_GLOBAL 0 ( range )					  
							      26 LOAD_FAST 2 ( n )					    26 LOAD_FAST 1 ( m )					  
							      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 1						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 42 ( to 76 )				    >> 32 FOR_ITER 40 ( to 70 )					  
							      34 STORE_FAST 6 ( j )					    34 STORE_FAST 5 ( j )					  
							      								    								  
							      6 36 LOAD_FAST 0 ( ar )					    6 36 LOAD_FAST 0 ( ar )					  
							      38 LOAD_FAST 5 ( i )					    38 LOAD_FAST 5 ( j )					  
							      40 BINARY_SUBSCR						    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 6 ( j )					    42 LOAD_FAST 0 ( ar )					  
							      44 BINARY_SUBSCR						    44 LOAD_FAST 5 ( j )					  
							      46 LOAD_CONST 2 ( 2 )					    46 BINARY_SUBSCR						  
							      48 BINARY_MODULO						    48 LOAD_FAST 0 ( ar )					  
							      50 LOAD_CONST 1 ( 0 )					    50 LOAD_FAST 5 ( j )					  
							      52 COMPARE_OP 2 ( == )					    52 BINARY_SUBSCR						  
							      54 POP_JUMP_IF_FALSE 66					    54 LOAD_FAST 0 ( ar )					  
							      								    56 LOAD_FAST 5 ( j )					  
							      7 56 LOAD_FAST 3 ( even )					    58 STORE_SUBSCR						  
							      58 LOAD_CONST 3 ( 1 )					    								  
							      60 INPLACE_ADD						    7 60 LOAD_FAST 2 ( even )					  
							      62 STORE_FAST 3 ( even )					    62 LOAD_FAST 3 ( odd )					  
							      64 JUMP_ABSOLUTE 32					    64 COMPARE_OP 2 ( == )					  
							      								    66 POP_JUMP_IF_FALSE 32					  
							      9 >> 66 LOAD_FAST 4 ( odd )				    								  
							      68 LOAD_CONST 3 ( 1 )					    8 68 LOAD_FAST 2 ( even )					  
							      70 INPLACE_ADD						    70 LOAD_FAST 3 ( odd )					  
							      72 STORE_FAST 4 ( odd )					    72 COMPARE_OP 2 ( == )					  
							      74 JUMP_ABSOLUTE 32					    74 POP_JUMP_IF_FALSE 32					  
							      >> 76 POP_BLOCK						    								  
							      >> 78 JUMP_ABSOLUTE 18					    9 76 LOAD_FAST 2 ( even )					  
							      >> 80 POP_BLOCK						    78 LOAD_FAST 3 ( odd )					  
							      								    80 COMPARE_OP 2 ( == )					  
							      10 >> 82 LOAD_GLOBAL 1 ( print )				    82 POP_JUMP_IF_FALSE 32					  
							      84 LOAD_CONST 4 ( ' Frequency of odd number =' )		    								  
							      86 LOAD_FAST 4 ( odd )					    10 84 LOAD_FAST 2 ( even )					  
							      88 CALL_FUNCTION 2					    86 LOAD_FAST 3 ( odd )					  
							      90 POP_TOP						    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 32					  
							      11 92 LOAD_GLOBAL 1 ( print )				    								  
							      94 LOAD_CONST 5 ( ' Frequency of even number =' )		    11 92 LOAD_FAST 2 ( even )					  
							      96 LOAD_FAST 3 ( even )					    94 LOAD_FAST 3 ( odd )					  
							      98 CALL_FUNCTION 2					    96 COMPARE_OP 2 ( == )					  
							      100 POP_TOP						    98 POP_JUMP_IF_FALSE 32					  
							      102 LOAD_CONST 0 ( None )					    								  
							      104 RETURN_VALUE NEW_LINE					    12 100 LOAD_FAST 2 ( even )					  
							      								    102 LOAD_FAST 3 ( odd )					  
							      								    104 COMPARE_OP 2 ( == )					  
							      								    106 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      								    13 108 LOAD_FAST 2 ( even )					  
							      								    110 LOAD_FAST 3 ( odd )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      								    14 116 LOAD_FAST 2 ( even )					  
							      								    118 LOAD_FAST 3 ( odd )					  
							      								    120 COMPARE_OP 2 ( == )					  
							      								    122 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      								    15 124 LOAD_FAST 2 ( even )					  
							      								    126 LOAD_FAST 3 ( odd )					  
							      								    128 COMPARE_OP 2 ( == )					  
							      								    130 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      								    16 132 LOAD_FAST 2 ( even )					  
							      								    134 LOAD_FAST 3 ( odd )					  
							      								    136 LOAD_FAST 3 ( odd )					  
							      								    138 COMPARE_OP 2 ( == )					  
							      								    140 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      								    17 142 LOAD_FAST 2 ( even )					  
							      								    144 RETURN_VALUE						  
							      								    >> 146 JUMP_ABSOLUTE 18					  
							      								    >> 148 POP_BLOCK						  
							      								    >> 150 LOAD_CONST 0 ( None )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR DIFFERENCE_BETWEEN_<unk> HEST_AND_LEAST_FREQUENCIES_IN_AN_ARR
--							      --							    --								  --
def findDiff ( arr , n ) :				      Disassembly of <code object findDiff at 0x7f33e26494b0, file  Disassembly of <code object findDiff at 0x7f2b0163dc90, file  script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    count = 0 ; max_count = 0 ; min_count = n		      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( 0 , ( n - 1 ) ) :			      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
	if arr [ i ] == arr [ i + 1 ] :			      6 POP_TOP							    6 POP_TOP							  
	    count += 1					      								    								  
	    continue					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	else :						      10 STORE_FAST 2 ( count )					    10 STORE_FAST 1 ( max_count )				  
	    max_count = max ( max_count , count )	      12 LOAD_CONST 1 ( 0 )					    								  
	    min_count = min ( min_count , count )	      14 STORE_FAST 3 ( max_count )				    4 12 LOAD_CONST 1 ( 0 )					  
	    count = 0					      16 LOAD_FAST 1 ( n )					    14 STORE_FAST 2 ( max_count )				  
    return max_count - min_count			      18 STORE_FAST 4 ( min_count )				    								  
							      								    5 16 SETUP_LOOP 64 ( to 76 )				  
							      4 20 SETUP_LOOP 78 ( to 100 )				    >> 18 LOAD_FAST 1 ( max_count )				  
							      22 LOAD_GLOBAL 1 ( range )				    20 LOAD_CONST 2 ( 1 )					  
							      24 LOAD_CONST 1 ( 0 )					    22 BINARY_SUBTRACT						  
							      26 LOAD_FAST 1 ( n )					    24 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_CONST 2 ( 1 )					    26 COMPARE_OP 4 ( > )					  
							      30 BINARY_SUBTRACT					    28 POP_JUMP_IF_FALSE 74					  
							      32 CALL_FUNCTION 2					    								  
							      34 GET_ITER						    6 30 LOAD_FAST 1 ( max_count )				  
							      >> 36 FOR_ITER 60 ( to 98 )				    32 LOAD_CONST 2 ( 1 )					  
							      38 STORE_FAST 5 ( i )					    34 BINARY_SUBTRACT						  
							      								    36 STORE_FAST 1 ( max_count )				  
							      5 40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 5 ( i )					    7 38 LOAD_FAST 1 ( max_count )				  
							      44 BINARY_SUBSCR						    40 LOAD_CONST 2 ( 1 )					  
							      46 LOAD_FAST 0 ( arr )					    42 BINARY_SUBTRACT						  
							      48 LOAD_FAST 5 ( i )					    44 STORE_FAST 2 ( max_count )				  
							      50 LOAD_CONST 2 ( 1 )					    								  
							      52 BINARY_ADD						    8 46 LOAD_FAST 2 ( max_count )				  
							      54 BINARY_SUBSCR						    48 LOAD_CONST 2 ( 1 )					  
							      56 COMPARE_OP 2 ( == )					    50 BINARY_SUBTRACT						  
							      58 POP_JUMP_IF_FALSE 72					    52 STORE_FAST 3 ( max_count )				  
							      								    								  
							      6 60 LOAD_FAST 2 ( count )				    9 54 LOAD_FAST 2 ( max_count )				  
							      62 LOAD_CONST 2 ( 1 )					    56 LOAD_CONST 2 ( 1 )					  
							      64 INPLACE_ADD						    58 BINARY_SUBTRACT						  
							      66 STORE_FAST 2 ( count )					    60 STORE_FAST 4 ( max_count )				  
							      								    								  
							      7 68 JUMP_ABSOLUTE 36					    10 62 LOAD_FAST 2 ( max_count )				  
							      70 JUMP_ABSOLUTE 36					    64 LOAD_CONST 2 ( 1 )					  
							      								    66 BINARY_SUBTRACT						  
							      9 >> 72 LOAD_GLOBAL 2 ( max )				    68 STORE_FAST 5 ( max_count )				  
							      74 LOAD_FAST 3 ( max_count )				    								  
							      76 LOAD_FAST 2 ( count )					    11 70 LOAD_FAST 2 ( max_count )				  
							      78 CALL_FUNCTION 2					    72 LOAD_CONST 2 ( 1 )					  
							      80 STORE_FAST 3 ( max_count )				    74 BINARY_SUBTRACT						  
							      								    76 STORE_FAST 6 ( max_count )				  
							      10 82 LOAD_GLOBAL 3 ( min )				    								  
							      84 LOAD_FAST 4 ( min_count )				    12 78 LOAD_FAST 3 ( max_count )				  
							      86 LOAD_FAST 2 ( count )					    80 LOAD_CONST 2 ( 1 )					  
							      88 CALL_FUNCTION 2					    82 BINARY_SUBTRACT						  
							      90 STORE_FAST 4 ( min_count )				    84 STORE_FAST 7 ( max_count )				  
							      								    								  
							      11 92 LOAD_CONST 1 ( 0 )					    13 86 LOAD_FAST 4 ( max_count )				  
							      94 STORE_FAST 2 ( count )					    88 LOAD_CONST 2 ( 1 )					  
							      96 JUMP_ABSOLUTE 36					    90 BINARY_SUBTRACT						  
							      >> 98 POP_BLOCK						    92 STORE_FAST 8 ( max_count )				  
							      								    								  
							      12 >> 100 LOAD_FAST 3 ( max_count )			    14 94 LOAD_FAST 2 ( max_count )				  
							      102 LOAD_FAST 4 ( min_count )				    96 LOAD_CONST 2 ( 1 )					  
							      104 BINARY_SUBTRACT					    98 BINARY_SUBTRACT						  
							      106 RETURN_VALUE NEW_LINE					    100 STORE_FAST 7 ( max_count )				  
							      								    								  
							      								    15 102 LOAD_FAST 3 ( max_count )				  
							      								    104 LOAD_CONST 2 ( 1 )					  
							      								    106 BINARY_SUBTRACT						  
							      								    108 STORE_FAST 8 ( max_count )				  
							      								    								  
							      								    16 110 LOAD_FAST 2 ( max_count )				  
							      								    112 LOAD_CONST 2 ( 1 )					  
							      								    114 BINARY_SUBTRACT						  
							      								    116 STORE_FAST 9 ( max_count )				  
							      								    								  
							      								    17 118 LOAD_FAST 3 ( max_count )				  
							      								    120 LOAD_CONST 2 ( 1 )					  
							      								    122 BINARY_SUBTRACT						  
							      								    124 STORE_FAST 10 ( max_count )				  
							      								    								  
							      								    18 126 LOAD_FAST 4 ( max_count )				  
							      								    128 LOAD_FAST 6 ( max_count )				  
							      								    130 LOAD_FAST 10 ( max_count )				  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 1 ( max_count )				  
							      								    136 BINARY_SUBTRACT						  
							      								    138 LOAD_FAST 11 ( max_count )				  
							      								    140 LOAD_FAST 10 ( max_count )				  
							      								    142 BINARY_SUBTRACT						  
							      								    144								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			      FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			    FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			  FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE
--							      --							    --								  --
def findDimen ( H , A ) :				      Disassembly of <code object findDimen at 0x7f33e2653f60, file Disassembly of <code object findDimen at 0x7f2b0163dc90, file script_not_found : None
    if H * H < 4 * A :					      2 0 LOAD_FAST 0 ( H )					    2 0 LOAD_FAST 0 ( H )					  
	print ( "Not Possible" )			      2 LOAD_FAST 0 ( H )					    2 LOAD_CONST 1 ( 4 )					  
	return						      4 BINARY_MULTIPLY						    4 COMPARE_OP 0 ( < )					  
    apb = sqrt ( H * H + 4 * A )			      6 LOAD_CONST 1 ( 4 )					    6 POP_JUMP_IF_FALSE 20					  
    asb = sqrt ( H * H - 4 * A )			      8 LOAD_FAST 1 ( A )					    								  
    print ( "P = " , "%.2f" % ( ( apb - asb ) / 2.0 ) )	      10 BINARY_MULTIPLY					    3 8 LOAD_GLOBAL 0 ( print )					  
    print ( "B = " , "%.2f" % ( ( apb + asb ) / 2.0 ) )	      12 COMPARE_OP 0 ( < )					    10 LOAD_CONST 2 ( 'Not Possible' )				  
							      14 POP_JUMP_IF_FALSE 28					    12 CALL_FUNCTION 1						  
							      								    14 POP_TOP							  
							      3 16 LOAD_GLOBAL 0 ( print )				    								  
							      18 LOAD_CONST 2 ( 'Not Possible' )			    4 16 LOAD_GLOBAL 1 ( print )				  
							      20 CALL_FUNCTION 1					    18 LOAD_CONST 3 ( ' ' )					  
							      22 POP_TOP						    20 CALL_FUNCTION 1						  
							      								    22 POP_TOP							  
							      4 24 LOAD_CONST 0 ( None )				    								  
							      26 RETURN_VALUE						    5 24 LOAD_GLOBAL 2 ( print )				  
							      								    26 LOAD_CONST 4 ( ' ' )					  
							      5 >> 28 LOAD_GLOBAL 1 ( sqrt )				    28 CALL_FUNCTION 1						  
							      30 LOAD_FAST 0 ( H )					    30 POP_TOP							  
							      32 LOAD_FAST 0 ( H )					    								  
							      34 BINARY_MULTIPLY					    6 32 LOAD_GLOBAL 2 ( print )				  
							      36 LOAD_CONST 1 ( 4 )					    34 LOAD_CONST 5 ( ' ' )					  
							      38 LOAD_FAST 1 ( A )					    36 CALL_FUNCTION 1						  
							      40 BINARY_MULTIPLY					    38 POP_TOP							  
							      42 BINARY_ADD						    								  
							      44 CALL_FUNCTION 1					    7 40 LOAD_GLOBAL 2 ( print )				  
							      46 STORE_FAST 2 ( apb )					    42 LOAD_CONST 6 ( ' ' )					  
							      								    44 CALL_FUNCTION 1						  
							      6 48 LOAD_GLOBAL 1 ( sqrt )				    46 POP_TOP							  
							      50 LOAD_FAST 0 ( H )					    								  
							      52 LOAD_FAST 0 ( H )					    8 48 LOAD_GLOBAL 2 ( print )				  
							      54 BINARY_MULTIPLY					    50 LOAD_CONST 7 ( ' ' )					  
							      56 LOAD_CONST 1 ( 4 )					    52 CALL_FUNCTION 1						  
							      58 LOAD_FAST 1 ( A )					    54 POP_TOP							  
							      60 BINARY_MULTIPLY					    								  
							      62 BINARY_SUBTRACT					    9 56 LOAD_GLOBAL 2 ( print )				  
							      64 CALL_FUNCTION 1					    58 LOAD_CONST 8 ( ' ' )					  
							      66 STORE_FAST 3 ( asb )					    60 CALL_FUNCTION 1						  
							      								    62 POP_TOP							  
							      7 68 LOAD_GLOBAL 0 ( print )				    								  
							      70 LOAD_CONST 3 ( 'P = ' )				    10 64 LOAD_GLOBAL 2 ( print )				  
							      72 LOAD_CONST 4 ( '%.2f' )				    66 LOAD_CONST 9 ( ' ' )					  
							      74 LOAD_FAST 2 ( apb )					    68 CALL_FUNCTION 1						  
							      76 LOAD_FAST 3 ( asb )					    70 POP_TOP							  
							      78 BINARY_SUBTRACT					    								  
							      80 LOAD_CONST 5 ( 2.0 )					    11 72 LOAD_GLOBAL 2 ( print )				  
							      82 BINARY_TRUE_DIVIDE					    74 LOAD_CONST 10 ( ' ' )					  
							      84 BINARY_MODULO						    76 CALL_FUNCTION 1						  
							      86 CALL_FUNCTION 2					    78 POP_TOP							  
							      88 POP_TOP						    								  
							      								    12 80 LOAD_GLOBAL 2 ( print )				  
							      8 90 LOAD_GLOBAL 0 ( print )				    82 LOAD_CONST 11 ( ' ' )					  
							      92 LOAD_CONST 6 ( 'B = ' )				    84 CALL_FUNCTION 1						  
							      94 LOAD_CONST 4 ( '%.2f' )				    86 POP_TOP							  
							      96 LOAD_FAST 2 ( apb )					    								  
							      98 LOAD_FAST 3 ( asb )					    13 88 LOAD_GLOBAL 2 ( print )				  
							      100 BINARY_ADD						    90 LOAD_CONST 12 ( ' ' )					  
							      102 LOAD_CONST 5 ( 2.0 )					    92 CALL_FUNCTION 1						  
							      104 BINARY_TRUE_DIVIDE					    94 POP_TOP							  
							      106 BINARY_MODULO						    96 LOAD_CONST 0 ( None )					  
							      108 CALL_FUNCTION 2					    98 RETURN_VALUE NEW_LINE					  
							      110 POP_TOP						    								  
							      112 LOAD_CONST 0 ( None )					    								  
							      114 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			      KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			    KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			  KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT
--							      --							    --								  --
def printkthnode ( adj , wt , n , k ) :			      Disassembly of <code object printkthnode at 0x7f33e2644f60, f Disassembly of <code object printkthnode at 0x7f2b0163dc90, f script_not_found : None
    for i in range ( n ) :				      2 0 SETUP_LOOP 28 ( to 30 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	adj [ i ].sort ( )				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
    for i in range ( n ) :				      4 LOAD_FAST 2 ( n )					    4 LOAD_FAST 1 ( wt )					  
	if ( len ( adj [ i ] ) >= k ) :			      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
	    print ( adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] 8 GET_ITER						    8 GET_ITER							  
	else :						      >> 10 FOR_ITER 16 ( to 28 )				    >> 10 FOR_ITER 76 ( to 76 )					  
	    print ( "-1" , end = " " )			      12 STORE_FAST 4 ( i )					    12 STORE_FAST 2 ( i )					  
							      								    								  
							      3 14 LOAD_FAST 0 ( adj )					    3 14 LOAD_FAST 0 ( adj )					  
							      16 LOAD_FAST 4 ( i )					    16 LOAD_FAST 2 ( i )					  
							      18 BINARY_SUBSCR						    18 BINARY_SUBSCR						  
							      20 LOAD_METHOD 1 ( sort )					    20 LOAD_METHOD 1 ( sort )					  
							      22 CALL_METHOD 0						    22 CALL_METHOD 0						  
							      24 POP_TOP						    24 GET_ITER							  
							      26 JUMP_ABSOLUTE 10					    >> 26 FOR_ITER 54 ( to 74 )					  
							      >> 28 POP_BLOCK						    28 STORE_FAST 3 ( i )					  
							      								    								  
							      4 >> 30 SETUP_LOOP 82 ( to 114 )				    4 30 LOAD_FAST 0 ( adj )					  
							      32 LOAD_GLOBAL 0 ( range )				    32 LOAD_FAST 3 ( i )					  
							      34 LOAD_FAST 2 ( n )					    34 BINARY_SUBSCR						  
							      36 CALL_FUNCTION 1					    36 LOAD_METHOD 1 ( sort )					  
							      38 GET_ITER						    38 CALL_METHOD 0						  
							      >> 40 FOR_ITER 70 ( to 112 )				    40 COMPARE_OP 2 ( == )					  
							      42 STORE_FAST 4 ( i )					    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      5 44 LOAD_GLOBAL 2 ( len )				    5 44 LOAD_FAST 0 ( adj )					  
							      46 LOAD_FAST 0 ( adj )					    46 LOAD_FAST 3 ( i )					  
							      48 LOAD_FAST 4 ( i )					    48 BINARY_SUBSCR						  
							      50 BINARY_SUBSCR						    50 LOAD_METHOD 1 ( sort )					  
							      52 CALL_FUNCTION 1					    52 CALL_METHOD 0						  
							      54 LOAD_FAST 3 ( k )					    54 POP_TOP							  
							      56 COMPARE_OP 5 ( >= )					    								  
							      58 POP_JUMP_IF_FALSE 98					    6 >> 56 LOAD_FAST 0 ( adj )					  
							      								    58 LOAD_FAST 3 ( i )					  
							      6 60 LOAD_GLOBAL 3 ( print )				    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 0 ( adj )					    62 LOAD_METHOD 1 ( sort )					  
							      64 LOAD_FAST 4 ( i )					    64 CALL_METHOD 0						  
							      66 BINARY_SUBSCR						    66 POP_TOP							  
							      68 LOAD_GLOBAL 2 ( len )					    68 JUMP_ABSOLUTE 26						  
							      70 LOAD_FAST 0 ( adj )					    >> 70 POP_BLOCK						  
							      72 LOAD_FAST 4 ( i )					    >> 72 JUMP_ABSOLUTE 10					  
							      74 BINARY_SUBSCR						    >> 74 POP_BLOCK						  
							      76 CALL_FUNCTION 1					    								  
							      78 LOAD_FAST 3 ( k )					    7 >> 76 LOAD_FAST 0 ( adj )					  
							      80 BINARY_SUBTRACT					    78 LOAD_FAST 3 ( i )					  
							      82 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      84 LOAD_CONST 1 ( 1 )					    82 LOAD_METHOD 1 ( sort )					  
							      86 BINARY_SUBSCR						    84 CALL_METHOD 0						  
							      88 LOAD_CONST 2 ( ' ' )					    86 POP_TOP							  
							      90 LOAD_CONST 3 ( ( 'end' , ) )				    88 JUMP_ABSOLUTE 10						  
							      92 CALL_FUNCTION_KW 2					    >> 90 POP_BLOCK						  
							      94 POP_TOP						    >> 92 LOAD_CONST 0 ( None )					  
							      96 JUMP_ABSOLUTE 40					    94 RETURN_VALUE NEW_LINE					  
							      								    								  
							      8 >> 98 LOAD_GLOBAL 3 ( print )				    								  
							      100 LOAD_CONST 4 ( '-1' )					    								  
							      102 LOAD_CONST 2 ( ' ' )					    								  
							      104 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      106 CALL_FUNCTION_KW 2					    								  
							      108 POP_TOP						    								  
							      110 JUMP_ABSOLUTE 40					    								  
							      >> 112 POP_BLOCK						    								  
							      >> 114 LOAD_CONST 0 ( None )				    								  
							      116 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SERIES_REVERSE_ORDER			      PRINT_FIBONACCI_SERIES_REVERSE_ORDER			    PRINT_FIBONACCI_SERIES_REVERSE_ORDER			  PRINT_FIBONACCI_SERIES_REVERSE_ORDER
--							      --							    --								  --
def reverseFibonacci ( n ) :				      Disassembly of <code object reverseFibonacci at 0x7f33e2653ed Disassembly of <code object reverseFibonacci at 0x7f2b0163966 script_not_found : None
    a = [ 0 ] * n					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    a [ 0 ] = 0						      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( 1 )					  
    a [ 1 ] = 1						      4 LOAD_FAST 0 ( n )					    4 LOAD_CONST 2 ( 1 )					  
    for i in range ( 2 , n ) :				      6 BINARY_MULTIPLY						    6 LOAD_CONST 2 ( 1 )					  
	a [ i ] = a [ i - 2 ] + a [ i - 1 ]		      8 STORE_FAST 1 ( a )					    8 LOAD_CONST 2 ( 1 )					  
    for i in range ( n - 1 , - 1 , - 1 ) :		      								    10 LOAD_CONST 2 ( 1 )					  
	print ( a [ i ] , end = " " )			      3 10 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 2 ( 1 )					  
							      12 LOAD_FAST 1 ( a )					    14 LOAD_CONST 2 ( 1 )					  
							      14 LOAD_CONST 1 ( 0 )					    16 LOAD_CONST 2 ( 1 )					  
							      16 STORE_SUBSCR						    18 LOAD_CONST 2 ( 1 )					  
							      								    20 LOAD_CONST 2 ( 1 )					  
							      4 18 LOAD_CONST 2 ( 1 )					    22 LOAD_CONST 2 ( 1 )					  
							      20 LOAD_FAST 1 ( a )					    24 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      24 STORE_SUBSCR						    28 LOAD_CONST 2 ( 1 )					  
							      								    30 LOAD_CONST 2 ( 1 )					  
							      5 26 SETUP_LOOP 46 ( to 74 )				    32 LOAD_CONST 2 ( 1 )					  
							      28 LOAD_GLOBAL 0 ( range )				    34 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_CONST 3 ( 2 )					    36 LOAD_CONST 2 ( 1 )					  
							      32 LOAD_FAST 0 ( n )					    38 LOAD_CONST 2 ( 1 )					  
							      34 CALL_FUNCTION 2					    40 LOAD_CONST 2 ( 1 )					  
							      36 GET_ITER						    42 LOAD_CONST 2 ( 1 )					  
							      >> 38 FOR_ITER 32 ( to 72 )				    44 LOAD_CONST 2 ( 1 )					  
							      40 STORE_FAST 2 ( i )					    46 LOAD_CONST 2 ( 1 )					  
							      								    48 LOAD_CONST 2 ( 1 )					  
							      6 42 LOAD_FAST 1 ( a )					    50 LOAD_CONST 2 ( 1 )					  
							      44 LOAD_FAST 2 ( i )					    52 LOAD_CONST 2 ( 1 )					  
							      46 LOAD_CONST 3 ( 2 )					    54 LOAD_CONST 2 ( 1 )					  
							      48 BINARY_SUBTRACT					    56 LOAD_CONST 2 ( 1 )					  
							      50 BINARY_SUBSCR						    58 LOAD_CONST 2 ( 1 )					  
							      52 LOAD_FAST 1 ( a )					    60 LOAD_CONST 2 ( 1 )					  
							      54 LOAD_FAST 2 ( i )					    62 LOAD_CONST 2 ( 1 )					  
							      56 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 2 ( 1 )					  
							      58 BINARY_SUBTRACT					    66 LOAD_CONST 2 ( 1 )					  
							      60 BINARY_SUBSCR						    68 LOAD_CONST 2 ( 1 )					  
							      62 BINARY_ADD						    70 LOAD_CONST 2 ( 1 )					  
							      64 LOAD_FAST 1 ( a )					    72 LOAD_CONST 2 ( 1 )					  
							      66 LOAD_FAST 2 ( i )					    74 LOAD_CONST 2 ( 1 )					  
							      68 STORE_SUBSCR						    76 LOAD_CONST 2 ( 1 )					  
							      70 JUMP_ABSOLUTE 38					    78 LOAD_CONST 2 ( 1 )					  
							      >> 72 POP_BLOCK						    80 LOAD_CONST 2 ( 1 )					  
							      								    82 LOAD_CONST 2 ( 1 )					  
							      7 >> 74 SETUP_LOOP 40 ( to 116 )				    84 LOAD_CONST 2 ( 1 )					  
							      76 LOAD_GLOBAL 0 ( range )				    86 LOAD_CONST 2 ( 1 )					  
							      78 LOAD_FAST 0 ( n )					    88 LOAD_CONST 2 ( 1 )					  
							      80 LOAD_CONST 2 ( 1 )					    90 LOAD_CONST 2 ( 1 )					  
							      82 BINARY_SUBTRACT					    92 LOAD_CONST 2 ( 1 )					  
							      84 LOAD_CONST 4 ( - 1 )					    94 LOAD_CONST 2 ( 1 )					  
							      86 LOAD_CONST 4 ( - 1 )					    96 LOAD_CONST 2 ( 1 )					  
							      88 CALL_FUNCTION 3					    98 LOAD_CONST 2 ( 1 )					  
							      90 GET_ITER						    100 LOAD_CONST 2 ( 1 )					  
							      >> 92 FOR_ITER 20 ( to 114 )				    102 LOAD_CONST 2 ( 1 )					  
							      94 STORE_FAST 2 ( i )					    104 LOAD_CONST 2 ( 1 )					  
							      								    106 LOAD_CONST 2 ( 1 )					  
							      8 96 LOAD_GLOBAL 1 ( print )				    108 LOAD_CONST 2 ( 1 )					  
							      98 LOAD_FAST 1 ( a )					    110 LOAD_CONST 2 ( 1 )					  
							      100 LOAD_FAST 2 ( i )					    112 LOAD_CONST 2 ( 1 )					  
							      102 BINARY_SUBSCR						    114 LOAD_CONST 2 ( 1 )					  
							      104 LOAD_CONST 5 ( ' ' )					    116 LOAD_CONST 2 ( 1 )					  
							      106 LOAD_CONST 6 ( ( 'end' , ) )				    118 LOAD_CONST 2 ( 1 )					  
							      108 CALL_FUNCTION_KW 2					    120 LOAD_CONST 2 ( 1 )					  
							      110 POP_TOP						    122 LOAD_CONST 2 ( 1 )					  
							      112 JUMP_ABSOLUTE 92					    124 LOAD_CONST 2 ( 1 )					  
							      >> 114 POP_BLOCK						    126 LOAD_CONST 2 ( 1 )					  
							      >> 116 LOAD_CONST 0 ( None )				    128 LOAD_CONST 2 ( 1 )					  
							      118 RETURN_VALUE NEW_LINE					    130 LOAD_CONST 2 ( 1 )					  
							      								    132 LOAD_CONST 2 ( 1 )					  
							      								    134 LOAD_CONST 2 ( 1 )					  
							      								    136 LOAD_CONST 2 ( 1 )					  
							      								    138 LOAD_CONST 2 ( 1 )					  
							      								    140 LOAD_CONST 2 ( 1 )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM					      KNAPSACK_PROBLEM						    KNAPSACK_PROBLEM						  KNAPSACK_PROBLEM
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      Disassembly of <code object knapSack at 0x7f33e2649a50, file  Disassembly of <code object set_global_apSack at 0x7f2b0163dc script_not_found : None
    if n == 0 or W == 0 :				      2 0 LOAD_FAST 3 ( n )					    2 0 LOAD_FAST 0 ( W )					  
	return 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( wt [ n - 1 ] > W ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return knapSack ( W , wt , val , n - 1 )	      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
    else :						      8 LOAD_FAST 0 ( W )					    								  
	return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  10 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
							      12 COMPARE_OP 2 ( == )					    10 RETURN_VALUE						  
							      14 POP_JUMP_IF_FALSE 20					    								  
							      								    4 >> 12 LOAD_FAST 0 ( W )					  
							      3 >> 16 LOAD_CONST 1 ( 0 )				    14 LOAD_CONST 1 ( 0 )					  
							      18 RETURN_VALUE						    16 COMPARE_OP 2 ( == )					  
							      								    18 POP_JUMP_IF_FALSE 24					  
							      4 >> 20 LOAD_FAST 1 ( wt )				    								  
							      22 LOAD_FAST 3 ( n )					    5 20 LOAD_CONST 2 ( 0 )					  
							      24 LOAD_CONST 2 ( 1 )					    22 RETURN_VALUE						  
							      26 BINARY_SUBTRACT					    								  
							      28 BINARY_SUBSCR						    6 >> 24 LOAD_GLOBAL 0 ( max )				  
							      30 LOAD_FAST 0 ( W )					    26 LOAD_FAST 0 ( W )					  
							      32 COMPARE_OP 4 ( > )					    28 LOAD_CONST 1 ( 0 )					  
							      34 POP_JUMP_IF_FALSE 54					    30 BINARY_SUBSCR						  
							      								    32 CALL_FUNCTION 1						  
							      5 36 LOAD_GLOBAL 0 ( knapSack )				    34 STORE_FAST 1 ( h )					  
							      38 LOAD_FAST 0 ( W )					    								  
							      40 LOAD_FAST 1 ( wt )					    7 36 LOAD_FAST 1 ( h )					  
							      42 LOAD_FAST 2 ( val )					    38 LOAD_CONST 1 ( 0 )					  
							      44 LOAD_FAST 3 ( n )					    40 COMPARE_OP 2 ( == )					  
							      46 LOAD_CONST 2 ( 1 )					    42 POP_JUMP_IF_FALSE 48					  
							      48 BINARY_SUBTRACT					    								  
							      50 CALL_FUNCTION 4					    8 44 LOAD_CONST 2 ( 0 )					  
							      52 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      7 >> 54 LOAD_GLOBAL 1 ( max )				    9 >> 48 LOAD_FAST 0 ( W )					  
							      56 LOAD_FAST 2 ( val )					    50 LOAD_CONST 1 ( 0 )					  
							      58 LOAD_FAST 3 ( n )					    52 COMPARE_OP 2 ( == )					  
							      60 LOAD_CONST 2 ( 1 )					    54 POP_JUMP_IF_FALSE 64					  
							      62 BINARY_SUBTRACT					    								  
							      64 BINARY_SUBSCR						    10 56 LOAD_CONST 2 ( 0 )					  
							      66 LOAD_GLOBAL 0 ( knapSack )				    58 RETURN_VALUE						  
							      68 LOAD_FAST 0 ( W )					    								  
							      70 LOAD_FAST 1 ( wt )					    11 >> 60 LOAD_GLOBAL 1 ( print )				  
							      72 LOAD_FAST 3 ( n )					    62 LOAD_FAST 0 ( W )					  
							      74 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 1 ( 0 )					  
							      76 BINARY_SUBTRACT					    66 BINARY_SUBSCR						  
							      78 BINARY_SUBSCR						    68 CALL_FUNCTION 1						  
							      80 BINARY_SUBTRACT					    70 POP_TOP							  
							      82 LOAD_FAST 1 ( wt )					    								  
							      84 LOAD_FAST 2 ( val )					    12 72 LOAD_CONST 2 ( 0 )					  
							      86 LOAD_FAST 3 ( n )					    74 RETURN_VALUE						  
							      88 LOAD_CONST 2 ( 1 )					    76 LOAD_CONST 0 ( None )					  
							      90 BINARY_SUBTRACT					    78 RETURN_VALUE NEW_LINE					  
							      92 CALL_FUNCTION 4					    								  
							      94 BINARY_ADD						    								  
							      96 LOAD_GLOBAL 0 ( knapSack )				    								  
							      98 LOAD_FAST 0 ( W )					    								  
							      100 LOAD_FAST 1 ( wt )					    								  
							      102 LOAD_FAST 2 ( val )					    								  
							      104 LOAD_FAST 3 ( n )					    								  
							      106 LOAD_CONST 2 ( 1 )					    								  
							      108 BINARY_SUBTRACT					    								  
							      110 CALL_FUNCTION 4					    								  
							      112 CALL_FUNCTION 2					    								  
							      114 RETURN_VALUE						    								  
							      116 LOAD_CONST 0 ( None )					    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1	      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1
--							      --							    --								  --
def findArea ( arr , n ) :				      Disassembly of <code object findArea at 0x7f33e2653f60, file  Disassembly of <code object findArea at 0x7f2b0163dc90, file  error : /bin/bash: line 1: 12618 Segmentation faul
    s = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    first = 0						      2 STORE_FAST 2 ( s )					    2 STORE_FAST 2 ( s )					  ataset/bin/python XLM/dis_script.py --script_path
    second = 0						      								    								  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  24/eval_scripts/python_sa-dis_sa.valid/MAXIMUM_ARE
	if arr [ i ] not in s :				      6 STORE_FAST 3 ( first )					    6 STORE_FAST 3 ( first )					  A_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1.dis
	    s.append ( arr [ i ] )			      								    								  
	    continue					      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 2 ( 1 )					  
	if ( arr [ i ] > first ) :			      10 STORE_FAST 4 ( second )				    10 STORE_FAST 4 ( first )					  
	    second = first				      								    								  
	    first = arr [ i ]				      5 12 SETUP_LOOP 90 ( to 104 )				    5 12 SETUP_LOOP 64 ( to 76 )				  
	elif ( arr [ i ] > second ) :			      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
	    second = arr [ i ]				      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
    return ( first * second )				      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 78 ( to 102 )				    >> 22 FOR_ITER 48 ( to 74 )					  
							      24 STORE_FAST 5 ( i )					    24 STORE_FAST 5 ( i )					  
							      								    								  
							      6 26 LOAD_FAST 0 ( arr )					    6 26 LOAD_FAST 2 ( s )					  
							      28 LOAD_FAST 5 ( i )					    28 LOAD_FAST 0 ( arr )					  
							      30 BINARY_SUBSCR						    30 COMPARE_OP 7 ( not in )					  
							      32 LOAD_FAST 2 ( s )					    32 POP_JUMP_IF_FALSE 42					  
							      34 COMPARE_OP 7 ( not in )				    								  
							      36 POP_JUMP_IF_FALSE 54					    7 34 LOAD_FAST 2 ( s )					  
							      								    36 LOAD_FAST 0 ( arr )					  
							      7 38 LOAD_FAST 2 ( s )					    38 LOAD_FAST 5 ( i )					  
							      40 LOAD_METHOD 1 ( append )				    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( arr )					    42 STORE_FAST 6 ( r )					  
							      44 LOAD_FAST 5 ( i )					    44 JUMP_ABSOLUTE 22						  
							      46 BINARY_SUBSCR						    								  
							      48 CALL_METHOD 1						    8 >> 46 LOAD_FAST 2 ( s )					  
							      50 POP_TOP						    48 LOAD_FAST 0 ( arr )					  
							      								    50 LOAD_FAST 5 ( i )					  
							      8 52 JUMP_ABSOLUTE 22					    52 BINARY_SUBSCR						  
							      								    54 STORE_FAST 7 ( r )					  
							      9 >> 54 LOAD_FAST 0 ( arr )				    								  
							      56 LOAD_FAST 5 ( i )					    9 56 LOAD_FAST 2 ( s )					  
							      58 BINARY_SUBSCR						    58 LOAD_FAST 3 ( first )					  
							      60 LOAD_FAST 3 ( first )					    60 COMPARE_OP 7 ( not in )					  
							      62 COMPARE_OP 4 ( > )					    62 POP_JUMP_IF_FALSE 22					  
							      64 POP_JUMP_IF_FALSE 80					    								  
							      								    10 64 LOAD_FAST 2 ( s )					  
							      10 66 LOAD_FAST 3 ( first )				    66 LOAD_FAST 3 ( first )					  
							      68 STORE_FAST 4 ( second )				    68 COMPARE_OP 4 ( > )					  
							      								    70 POP_JUMP_IF_FALSE 22					  
							      11 70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 5 ( i )					    11 72 LOAD_FAST 2 ( s )					  
							      74 BINARY_SUBSCR						    74 LOAD_FAST 3 ( first )					  
							      76 STORE_FAST 3 ( first )					    76 LOAD_FAST 4 ( first )					  
							      78 JUMP_ABSOLUTE 22					    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 6 ( r )					  
							      12 >> 80 LOAD_FAST 0 ( arr )				    82 LOAD_FAST 5 ( i )					  
							      82 LOAD_FAST 5 ( i )					    84 BINARY_SUBSCR						  
							      84 BINARY_SUBSCR						    86 LOAD_FAST 6 ( r )					  
							      86 LOAD_FAST 4 ( second )					    88 LOAD_FAST 7 ( r )					  
							      88 COMPARE_OP 4 ( > )					    90 STORE_SUBSCR						  
							      90 POP_JUMP_IF_FALSE 22					    								  
							      								    12 92 LOAD_FAST 2 ( s )					  
							      13 92 LOAD_FAST 0 ( arr )					    94 LOAD_FAST 3 ( first )					  
							      94 LOAD_FAST 5 ( i )					    96 BINARY_SUBSCR						  
							      96 BINARY_SUBSCR						    98 LOAD_FAST 6 ( r )					  
							      98 STORE_FAST 4 ( second )				    100 STORE_SUBSCR						  
							      100 JUMP_ABSOLUTE 22					    								  
							      >> 102 POP_BLOCK						    13 102 LOAD_FAST 2 ( s )					  
							      								    104 LOAD_FAST 3 ( first )					  
							      14 >> 104 LOAD_FAST 3 ( first )				    106 STORE_SUBSCR						  
							      106 LOAD_FAST 4 ( second )				    								  
							      108 BINARY_MULTIPLY					    14 108 LOAD_FAST 2 ( s )					  
							      110 RETURN_VALUE NEW_LINE					    110 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		      ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		    ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		  ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE
--							      --							    --								  --
def solveQuery ( start , end , arr ) :			      Disassembly of <code object solveQuery at 0x7f33e2644f60, fil Disassembly of <code object solveQuery at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    frequency = dict ( )				      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 60, in <module>	exec
    for i in range ( start , end + 1 ) :		      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  (item)   File "main.py", line 38, in <module>	  Fi
	if arr [ i ] in frequency.keys ( ) :		      4 STORE_FAST 3 ( frequency )				    4 STORE_FAST 2 ( frequency )				  le "<dis>", line 2, in solveQuery KeyError: 0
	    frequency [ arr [ i ] ] += 1		      								    								  
	else :						      3 6 SETUP_LOOP 72 ( to 80 )				    3 6 SETUP_LOOP 64 ( to 70 )					  
	    frequency [ arr [ i ] ] = 1			      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
    count = 0						      10 LOAD_FAST 0 ( start )					    10 LOAD_FAST 0 ( start )					  
    for x in frequency :				      12 LOAD_FAST 1 ( end )					    12 LOAD_FAST 1 ( end )					  
	if x == frequency [ x ] :			      14 LOAD_CONST 1 ( 1 )					    14 LOAD_CONST 1 ( 1 )					  
	    count += 1					      16 BINARY_ADD						    16 BINARY_ADD						  
    return count					      18 CALL_FUNCTION 2					    18 CALL_FUNCTION 2						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 54 ( to 78 )				    >> 22 FOR_ITER 48 ( to 68 )					  
							      24 STORE_FAST 4 ( i )					    24 STORE_FAST 3 ( i )					  
							      								    								  
							      4 26 LOAD_FAST 2 ( arr )					    4 26 LOAD_FAST 2 ( frequency )				  
							      28 LOAD_FAST 4 ( i )					    28 LOAD_FAST 3 ( i )					  
							      30 BINARY_SUBSCR						    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 3 ( frequency )				    32 LOAD_FAST 1 ( end )					  
							      34 LOAD_METHOD 2 ( keys )					    34 COMPARE_OP 6 ( in )					  
							      36 CALL_METHOD 0						    36 POP_JUMP_IF_FALSE 42					  
							      38 COMPARE_OP 6 ( in )					    								  
							      40 POP_JUMP_IF_FALSE 64					    5 38 LOAD_FAST 2 ( frequency )				  
							      								    40 LOAD_FAST 3 ( i )					  
							      5 42 LOAD_FAST 3 ( frequency )				    42 BINARY_SUBSCR						  
							      44 LOAD_FAST 2 ( arr )					    44 STORE_FAST 4 ( num )					  
							      46 LOAD_FAST 4 ( i )					    								  
							      48 BINARY_SUBSCR						    6 >> 46 LOAD_FAST 2 ( frequency )				  
							      50 DUP_TOP_TWO						    48 LOAD_FAST 4 ( num )					  
							      52 BINARY_SUBSCR						    50 BINARY_SUBSCR						  
							      54 LOAD_CONST 1 ( 1 )					    52 LOAD_FAST 1 ( end )					  
							      56 INPLACE_ADD						    54 COMPARE_OP 4 ( > )					  
							      58 ROT_THREE						    56 POP_JUMP_IF_FALSE 22					  
							      60 STORE_SUBSCR						    								  
							      62 JUMP_ABSOLUTE 22					    7 58 LOAD_FAST 2 ( frequency )				  
							      								    60 LOAD_FAST 3 ( i )					  
							      7 >> 64 LOAD_CONST 1 ( 1 )				    62 BINARY_SUBSCR						  
							      66 LOAD_FAST 3 ( frequency )				    64 LOAD_FAST 1 ( end )					  
							      68 LOAD_FAST 2 ( arr )					    66 BINARY_SUBSCR						  
							      70 LOAD_FAST 4 ( i )					    68 LOAD_FAST 1 ( end )					  
							      72 BINARY_SUBSCR						    70 STORE_SUBSCR						  
							      74 STORE_SUBSCR						    								  
							      76 JUMP_ABSOLUTE 22					    8 72 LOAD_FAST 2 ( frequency )				  
							      >> 78 POP_BLOCK						    74 LOAD_FAST 3 ( i )					  
							      								    76 BINARY_SUBSCR						  
							      8 >> 80 LOAD_CONST 2 ( 0 )				    78 LOAD_FAST 1 ( end )					  
							      82 STORE_FAST 5 ( count )					    80 STORE_SUBSCR						  
							      								    								  
							      9 84 SETUP_LOOP 32 ( to 118 )				    9 82 LOAD_FAST 2 ( frequency )				  
							      86 LOAD_FAST 3 ( frequency )				    84 LOAD_FAST 3 ( i )					  
							      88 GET_ITER						    86 STORE_SUBSCR						  
							      >> 90 FOR_ITER 24 ( to 116 )				    								  
							      92 STORE_FAST 6 ( x )					    10 88 LOAD_FAST 2 ( frequency )				  
							      								    90 LOAD_FAST 3 ( i )					  
							      10 94 LOAD_FAST 6 ( x )					    92 STORE_SUBSCR						  
							      96 LOAD_FAST 3 ( frequency )				    								  
							      98 LOAD_FAST 6 ( x )					    11 94 LOAD_FAST 2 ( frequency )				  
							      100 BINARY_SUBSCR						    96 LOAD_FAST 3 ( i )					  
							      102 COMPARE_OP 2 ( == )					    98 STORE_SUBSCR						  
							      104 POP_JUMP_IF_FALSE 90					    								  
							      								    12 100 LOAD_FAST 2 ( frequency )				  
							      11 106 LOAD_FAST 5 ( count )				    102 LOAD_FAST 3 ( i )					  
							      108 LOAD_CONST 1 ( 1 )					    104 STORE_SUBSCR						  
							      110 INPLACE_ADD						    								  
							      112 STORE_FAST 5 ( count )				    13 106 LOAD_FAST 2 ( frequency )				  
							      114 JUMP_ABSOLUTE 90					    108 LOAD_FAST 3 ( i )					  
							      >> 116 POP_BLOCK						    110 STORE_SUBSCR						  
							      								    								  
							      12 >> 118 LOAD_FAST 5 ( count )				    14 112 LOAD_FAST 2 ( frequency )				  
							      120 RETURN_VALUE NEW_LINE					    114 LOAD_FAST 3 ( i )					  
							      								    116 STORE_SUBSCR						  
							      								    								  
							      								    15 118 LOAD_FAST 2 ( frequency )				  
							      								    120 LOAD_FAST 3 ( i )					  
							      								    122 STORE_SUBSCR						  
							      								    								  
							      								    16 124 LOAD_FAST 2 ( frequency )				  
							      								    126 LOAD_FAST 3 ( i )					  
							      								    128 STORE_SUBSCR						  
							      								    130 JUMP_ABSOLUTE 22					  
							      								    >> 132 POP_BLOCK						  
							      								    								  
							      								    17 >> 134 LOAD_FAST 2 ( frequency )				  
							      								    136 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_BONACCI_NUMBERS					      N_BONACCI_NUMBERS						    N_BONACCI_NUMBERS						  N_BONACCI_NUMBERS
--							      --							    --								  --
def bonacciseries ( n , m ) :				      Disassembly of <code object bonacciseries at 0x7f33e2644f60,  Disassembly of <code object bonacciscreateObjBuilders at 0x7f script_not_found : None
    a = [ 0 ] * m					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    a [ n - 1 ] = 1					      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( 'min' , ) )				  
    for i in range ( n , m ) :				      4 LOAD_FAST 1 ( m )					    4 IMPORT_NAME 0 ( numpy )					  
	for j in range ( i - n , i ) :			      6 BINARY_MULTIPLY						    6 IMPORT_FROM 1 ( min )					  
	    a [ i ] = a [ i ] + a [ j ]			      8 STORE_FAST 2 ( a )					    8 STORE_FAST 2 ( min )					  
    for i in range ( 0 , m ) :				      								    10 POP_TOP							  
	print ( a [ i ] , end = " " )			      3 10 LOAD_CONST 2 ( 1 )					    								  
							      12 LOAD_FAST 2 ( a )					    3 12 LOAD_FAST 2 ( max )					  
							      14 LOAD_FAST 0 ( n )					    14 LOAD_CONST 3 ( 1 )					  
							      16 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 4 ( ( 'max' , ) )				  
							      18 BINARY_SUBTRACT					    18 CALL_FUNCTION_KW 1					  
							      20 STORE_SUBSCR						    20 STORE_FAST 3 ( num )					  
							      								    								  
							      4 22 SETUP_LOOP 62 ( to 86 )				    4 22 SETUP_LOOP 64 ( to 104 )				  
							      24 LOAD_GLOBAL 0 ( range )				    24 LOAD_GLOBAL 2 ( range )					  
							      26 LOAD_FAST 0 ( n )					    26 LOAD_FAST 0 ( n )					  
							      28 LOAD_FAST 1 ( m )					    28 LOAD_CONST 5 ( 1 )					  
							      30 CALL_FUNCTION 2					    30 LOAD_CONST 4 ( ( 'max' , ) )				  
							      32 GET_ITER						    32 CALL_FUNCTION_KW 2					  
							      >> 34 FOR_ITER 48 ( to 84 )				    34 GET_ITER							  
							      36 STORE_FAST 3 ( i )					    >> 36 FOR_ITER 48 ( to 102 )				  
							      								    38 STORE_FAST 4 ( i )					  
							      5 38 SETUP_LOOP 42 ( to 82 )				    								  
							      40 LOAD_GLOBAL 0 ( range )				    5 40 LOAD_FAST 2 ( max )					  
							      42 LOAD_FAST 3 ( i )					    42 LOAD_CONST 6 ( 0 )					  
							      44 LOAD_FAST 0 ( n )					    44 BINARY_SUBSCR						  
							      46 BINARY_SUBTRACT					    46 LOAD_FAST 4 ( i )					  
							      48 LOAD_FAST 3 ( i )					    48 LOAD_CONST 7 ( 1 )					  
							      50 CALL_FUNCTION 2					    50 BINARY_SUBSCR						  
							      52 GET_ITER						    52 LOAD_FAST 4 ( i )					  
							      >> 54 FOR_ITER 24 ( to 80 )				    54 LOAD_CONST 8 ( 2 )					  
							      56 STORE_FAST 4 ( j )					    56 BINARY_SUBSCR						  
							      								    58 LOAD_FAST 4 ( i )					  
							      6 58 LOAD_FAST 2 ( a )					    60 LOAD_CONST 9 ( 1 )					  
							      60 LOAD_FAST 3 ( i )					    62 BINARY_SUBSCR						  
							      62 BINARY_SUBSCR						    64 BINARY_SUBTRACT						  
							      64 LOAD_FAST 2 ( a )					    66 LOAD_FAST 4 ( i )					  
							      66 LOAD_FAST 4 ( j )					    68 LOAD_CONST 10 ( 1 )					  
							      68 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      70 BINARY_ADD						    72 BINARY_SUBTRACT						  
							      72 LOAD_FAST 2 ( a )					    74 LOAD_FAST 4 ( i )					  
							      74 LOAD_FAST 3 ( i )					    76 LOAD_CONST 11 ( 1 )					  
							      76 STORE_SUBSCR						    78 BINARY_SUBSCR						  
							      78 JUMP_ABSOLUTE 54					    80 BINARY_SUBTRACT						  
							      >> 80 POP_BLOCK						    82 LOAD_FAST 4 ( i )					  
							      >> 82 JUMP_ABSOLUTE 34					    84 LOAD_CONST 12 ( 2 )					  
							      >> 84 POP_BLOCK						    86 BINARY_SUBSCR						  
							      								    88 BINARY_SUBTRACT						  
							      7 >> 86 SETUP_LOOP 34 ( to 122 )				    90 LOAD_FAST 4 ( i )					  
							      88 LOAD_GLOBAL 0 ( range )				    92 LOAD_CONST 13 ( 1 )					  
							      90 LOAD_CONST 1 ( 0 )					    94 BINARY_SUBSCR						  
							      92 LOAD_FAST 1 ( m )					    96 BINARY_SUBTRACT						  
							      94 CALL_FUNCTION 2					    98 LOAD_FAST 4 ( i )					  
							      96 GET_ITER						    100 LOAD_CONST 14 ( 2 )					  
							      >> 98 FOR_ITER 20 ( to 120 )				    102 BINARY_SUBSCR						  
							      100 STORE_FAST 3 ( i )					    104 LOAD_FAST 4 ( i )					  
							      								    106 LOAD_CONST 15 ( 2 )					  
							      8 102 LOAD_GLOBAL 1 ( print )				    108 BINARY_SUBSCR						  
							      104 LOAD_FAST 2 ( a )					    110 BINARY_SUBTRACT						  
							      106 LOAD_FAST 3 ( i )					    112 LOAD_FAST 4 ( i )					  
							      108 BINARY_SUBSCR						    114 LOAD_CONST 16 ( 2 )					  
							      110 LOAD_CONST 3 ( ' ' )					    116 BINARY_SUBSCR						  
							      112 LOAD_CONST 4 ( ( 'end' , ) )				    118 BINARY_SUBTRACT						  
							      114 CALL_FUNCTION_KW 2					    120 LOAD_FAST 4 ( i )					  
							      116 POP_TOP						    122 LOAD_CONST 15 ( 2 )					  
							      118 JUMP_ABSOLUTE 98					    124 BINARY_SUBSCR						  
							      >> 120 POP_BLOCK						    126 BINARY_SUBTRACT						  
							      >> 122 LOAD_CONST 0 ( None )				    128 LOAD_FAST 4 ( i )					  
							      124 RETURN_VALUE NEW_LINE					    130 LOAD_CONST 16 ( 2 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 4 ( i )					  
							      								    138 LOAD_CONST 17 ( 1 )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 4 ( i )					  
							      								    146 LOAD_CONST 17 ( 1 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 4 ( i )					  
							      								    154 LOAD_CONST 16 ( 2 )					  
							      								    156 STORE_SUBSCR						  
							      								    								  
							      								    5 158 LOAD_FAST 2 ( max )					  
							      								    160 LOAD_CONST 17 ( 1 )					  
							      								    162 BINARY_SUBSCR						  
							      								    164 LOAD_FAST 4 ( i )					  
							      								    166 LOAD_CONST 17 ( 1 )					  
							      								    168 BINARY_SUBSCR						  
							      								    170 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
def nobleInteger ( arr ) :				      Disassembly of <code object nobleInteger at 0x7f33e2644f60, f Disassembly of <code object nobleInteger at 0x7f2b0163dc90, f script_not_found : None
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    n = len ( arr )					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    for i in range ( n - 1 ) :				      4 CALL_METHOD 0						    4 CALL_METHOD 0						  
	if arr [ i ] == arr [ i + 1 ] :			      6 POP_TOP							    6 POP_TOP							  
	    continue					      								    								  
	if arr [ i ] == n - i - 1 :			      3 8 LOAD_GLOBAL 1 ( len )					    3 8 LOAD_GLOBAL 1 ( len )					  
	    return arr [ i ]				      10 LOAD_FAST 0 ( arr )					    10 LOAD_FAST 0 ( arr )					  
    if arr [ n - 1 ] == 0 :				      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	return arr [ n - 1 ]				      14 STORE_FAST 1 ( n )					    14 LOAD_CONST 1 ( 1 )					  
    return - 1						      								    16 COMPARE_OP 2 ( == )					  
							      4 16 SETUP_LOOP 70 ( to 88 )				    18 POP_JUMP_IF_FALSE 32					  
							      18 LOAD_GLOBAL 2 ( range )				    								  
							      20 LOAD_FAST 1 ( n )					    4 20 LOAD_GLOBAL 2 ( print )				  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_FAST 0 ( arr )					  
							      24 BINARY_SUBTRACT					    24 LOAD_CONST 2 ( - 1 )					  
							      26 CALL_FUNCTION 1					    26 BINARY_SUBSCR						  
							      28 GET_ITER						    28 CALL_FUNCTION 1						  
							      >> 30 FOR_ITER 54 ( to 86 )				    30 POP_TOP							  
							      32 STORE_FAST 2 ( i )					    								  
							      								    5 >> 32 LOAD_FAST 0 ( arr )					  
							      5 34 LOAD_FAST 0 ( arr )					    34 LOAD_CONST 1 ( 1 )					  
							      36 LOAD_FAST 2 ( i )					    36 BINARY_SUBTRACT						  
							      38 BINARY_SUBSCR						    38 LOAD_CONST 1 ( 1 )					  
							      40 LOAD_FAST 0 ( arr )					    40 BINARY_SUBTRACT						  
							      42 LOAD_FAST 2 ( i )					    42 STORE_FAST 1 ( arr )					  
							      44 LOAD_CONST 1 ( 1 )					    								  
							      46 BINARY_ADD						    6 44 SETUP_LOOP 36 ( to 92 )				  
							      48 BINARY_SUBSCR						    46 LOAD_GLOBAL 3 ( range )					  
							      50 COMPARE_OP 2 ( == )					    48 LOAD_FAST 0 ( arr )					  
							      52 POP_JUMP_IF_FALSE 56					    50 LOAD_CONST 2 ( - 1 )					  
							      								    52 BINARY_SUBSCR						  
							      6 54 JUMP_ABSOLUTE 30					    54 CALL_FUNCTION 1						  
							      								    56 GET_ITER							  
							      7 >> 56 LOAD_FAST 0 ( arr )				    >> 58 FOR_ITER 22 ( to 90 )					  
							      58 LOAD_FAST 2 ( i )					    60 STORE_FAST 2 ( i )					  
							      60 BINARY_SUBSCR						    								  
							      62 LOAD_FAST 1 ( n )					    7 62 LOAD_FAST 1 ( arr )					  
							      64 LOAD_FAST 2 ( i )					    64 LOAD_CONST 2 ( - 1 )					  
							      66 BINARY_SUBTRACT					    66 BINARY_SUBSCR						  
							      68 LOAD_CONST 1 ( 1 )					    68 LOAD_FAST 1 ( arr )					  
							      70 BINARY_SUBTRACT					    70 LOAD_CONST 2 ( - 1 )					  
							      72 COMPARE_OP 2 ( == )					    72 BINARY_SUBSCR						  
							      74 POP_JUMP_IF_FALSE 30					    74 LOAD_FAST 1 ( arr )					  
							      								    76 LOAD_CONST 2 ( - 1 )					  
							      8 76 LOAD_FAST 0 ( arr )					    78 BINARY_SUBSCR						  
							      78 LOAD_FAST 2 ( i )					    80 BINARY_SUBTRACT						  
							      80 BINARY_SUBSCR						    82 LOAD_FAST 1 ( arr )					  
							      82 RETURN_VALUE						    84 LOAD_CONST 2 ( - 1 )					  
							      84 JUMP_ABSOLUTE 30					    86 BINARY_SUBSCR						  
							      >> 86 POP_BLOCK						    88 BINARY_SUBTRACT						  
							      								    90 LOAD_FAST 1 ( arr )					  
							      9 >> 88 LOAD_FAST 0 ( arr )				    92 LOAD_CONST 2 ( - 1 )					  
							      90 LOAD_FAST 1 ( n )					    94 BINARY_SUBSCR						  
							      92 LOAD_CONST 1 ( 1 )					    96 BINARY_SUBTRACT						  
							      94 BINARY_SUBTRACT					    98 LOAD_FAST 1 ( arr )					  
							      96 BINARY_SUBSCR						    100 LOAD_CONST 2 ( - 1 )					  
							      98 LOAD_CONST 2 ( 0 )					    102 BINARY_SUBSCR						  
							      100 COMPARE_OP 2 ( == )					    104 BINARY_SUBTRACT						  
							      102 POP_JUMP_IF_FALSE 116					    106 LOAD_FAST 1 ( arr )					  
							      								    108 LOAD_CONST 2 ( - 1 )					  
							      10 104 LOAD_FAST 0 ( arr )				    110 BINARY_SUBSCR						  
							      106 LOAD_FAST 1 ( n )					    112 BINARY_SUBTRACT						  
							      108 LOAD_CONST 1 ( 1 )					    114 LOAD_FAST 1 ( arr )					  
							      110 BINARY_SUBTRACT					    116 LOAD_CONST 2 ( - 1 )					  
							      112 BINARY_SUBSCR						    118 BINARY_SUBSCR						  
							      114 RETURN_VALUE						    120 BINARY_SUBTRACT						  
							      								    122 LOAD_FAST 1 ( arr )					  
							      11 >> 116 LOAD_CONST 3 ( - 1 )				    124 LOAD_CONST 2 ( - 1 )					  
							      118 RETURN_VALUE NEW_LINE					    126 BINARY_SUBSCR						  
							      								    128 BINARY_SUBTRACT						  
							      								    130 LOAD_FAST 1 ( arr )					  
							      								    132 LOAD_CONST 2 ( - 1 )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 BINARY_SUBTRACT						  
							      								    138 LOAD_FAST 1 ( arr )					  
							      								    140 LOAD_CONST 2 ( - 1 )					  
							      								    142 BINARY_SUBSCR						  
							      								    144 BINARY_SUBTRACT						  
							      								    146 LOAD_FAST 1 ( arr )					  
							      								    148 LOAD_CONST 2 ( - 1 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 1 ( arr )					  
							      								    156 LOAD_CONST 2 ( - 1 )					  
							      								    158 BINARY_SUBSCR						  
							      								    160 BINARY_SUBTRACT						  
							      								    162 LOAD_FAST 1 ( arr )					  
							      								    164 LOAD_CONST 2 ( - 1 )					  
							      								    166 BINARY_SUBSCR						  
							      								    168 BINARY_SUBTRACT						  
							      								    170 LOAD_FAST 1 ( arr )					  
							      								    172 LOAD_CONST 2 ( - 1 )					  
							      								    174 STORE_SUBSCR						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PATTERNS_101_GIVEN_STRING				      FIND_PATTERNS_101_GIVEN_STRING				    FIND_PATTERNS_101_GIVEN_STRING				  FIND_PATTERNS_101_GIVEN_STRING
--							      --							    --								  --
def patternCount ( str ) :				      Disassembly of <code object patternCount at 0x7f33e2644f60, f Disassembly of <code object patternCount at 0x7f2b01639660, f script_not_found : None
    last = str [ 0 ]					      2 0 LOAD_FAST 0 ( str )					    2 0 LOAD_FAST 0 ( str )					  
    i = 1 ; counter = 0					      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    while ( i < len ( str ) ) :				      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
	if ( str [ i ] == '0' and last == '1' ) :	      6 STORE_FAST 1 ( last )					    6 LOAD_CONST 2 ( 1 )					  
	    while ( str [ i ] == '0' ) :		      								    8 INPLACE_ADD						  
		i += 1					      3 8 LOAD_CONST 2 ( 1 )					    10 STORE_FAST 0 ( str )					  
		if ( str [ i ] == '1' ) :		      10 STORE_FAST 2 ( i )					    								  
		    counter += 1			      12 LOAD_CONST 1 ( 0 )					    3 12 LOAD_CONST 1 ( 0 )					  
	last = str [ i ]				      14 STORE_FAST 3 ( counter )				    14 STORE_FAST 1 ( last )					  
	i += 1						      								    								  
    return counter					      4 16 SETUP_LOOP 98 ( to 116 )				    4 16 SETUP_LOOP 64 ( to 80 )				  
							      >> 18 LOAD_FAST 2 ( i )					    >> 18 LOAD_FAST 0 ( str )					  
							      20 LOAD_GLOBAL 0 ( len )					    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_FAST 0 ( str )					    22 BINARY_SUBSCR						  
							      24 CALL_FUNCTION 1					    24 LOAD_CONST 2 ( 1 )					  
							      26 COMPARE_OP 0 ( < )					    26 COMPARE_OP 0 ( < )					  
							      28 POP_JUMP_IF_FALSE 114					    28 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      5 30 LOAD_FAST 0 ( str )					    5 30 LOAD_FAST 0 ( str )					  
							      32 LOAD_FAST 2 ( i )					    32 LOAD_CONST 1 ( 0 )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 3 ( '0' )					    36 LOAD_CONST 2 ( 1 )					  
							      38 COMPARE_OP 2 ( == )					    38 INPLACE_ADD						  
							      40 POP_JUMP_IF_FALSE 96					    40 STORE_FAST 0 ( str )					  
							      42 LOAD_FAST 1 ( last )					    								  
							      44 LOAD_CONST 4 ( '1' )					    6 42 LOAD_FAST 1 ( last )					  
							      46 COMPARE_OP 2 ( == )					    44 LOAD_CONST 1 ( 0 )					  
							      48 POP_JUMP_IF_FALSE 96					    46 COMPARE_OP 4 ( > )					  
							      								    48 POP_JUMP_IF_FALSE 56					  
							      6 50 SETUP_LOOP 44 ( to 96 )				    								  
							      >> 52 LOAD_FAST 0 ( str )					    7 50 LOAD_FAST 0 ( str )					  
							      54 LOAD_FAST 2 ( i )					    52 LOAD_CONST 1 ( 0 )					  
							      56 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      58 LOAD_CONST 3 ( '0' )					    56 LOAD_CONST 2 ( 1 )					  
							      60 COMPARE_OP 2 ( == )					    58 INPLACE_ADD						  
							      62 POP_JUMP_IF_FALSE 94					    60 STORE_FAST 0 ( str )					  
							      								    								  
							      7 64 LOAD_FAST 2 ( i )					    8 >> 62 LOAD_FAST 1 ( last )				  
							      66 LOAD_CONST 2 ( 1 )					    64 LOAD_CONST 1 ( 0 )					  
							      68 INPLACE_ADD						    66 COMPARE_OP 4 ( > )					  
							      70 STORE_FAST 2 ( i )					    68 POP_JUMP_IF_FALSE 78					  
							      								    								  
							      8 72 LOAD_FAST 0 ( str )					    9 70 LOAD_FAST 0 ( str )					  
							      74 LOAD_FAST 2 ( i )					    72 LOAD_CONST 1 ( 0 )					  
							      76 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      78 LOAD_CONST 4 ( '1' )					    76 LOAD_CONST 2 ( 1 )					  
							      80 COMPARE_OP 2 ( == )					    78 INPLACE_ADD						  
							      82 POP_JUMP_IF_FALSE 52					    80 STORE_FAST 0 ( str )					  
							      								    								  
							      9 84 LOAD_FAST 3 ( counter )				    10 >> 82 LOAD_FAST 1 ( last )				  
							      86 LOAD_CONST 2 ( 1 )					    84 LOAD_CONST 1 ( 0 )					  
							      88 INPLACE_ADD						    86 COMPARE_OP 4 ( > )					  
							      90 STORE_FAST 3 ( counter )				    88 POP_JUMP_IF_FALSE 100					  
							      92 JUMP_ABSOLUTE 52					    								  
							      >> 94 POP_BLOCK						    11 90 LOAD_FAST 0 ( str )					  
							      								    92 LOAD_CONST 1 ( 0 )					  
							      10 >> 96 LOAD_FAST 0 ( str )				    94 BINARY_SUBSCR						  
							      98 LOAD_FAST 2 ( i )					    96 LOAD_CONST 2 ( 1 )					  
							      100 BINARY_SUBSCR						    98 INPLACE_ADD						  
							      102 STORE_FAST 1 ( last )					    100 STORE_FAST 0 ( str )					  
							      								    102 JUMP_ABSOLUTE 18					  
							      11 104 LOAD_FAST 2 ( i )					    								  
							      106 LOAD_CONST 2 ( 1 )					    12 >> 104 LOAD_FAST 1 ( last )				  
							      108 INPLACE_ADD						    106 LOAD_CONST 1 ( 0 )					  
							      110 STORE_FAST 2 ( i )					    108 COMPARE_OP 4 ( > )					  
							      112 JUMP_ABSOLUTE 18					    110 POP_JUMP_IF_FALSE 120					  
							      >> 114 POP_BLOCK						    								  
							      								    13 112 LOAD_FAST 0 ( str )					  
							      12 >> 116 LOAD_FAST 3 ( counter )				    114 LOAD_CONST 1 ( 0 )					  
							      118 RETURN_VALUE NEW_LINE					    116 BINARY_SUBSCR						  
							      								    118 STORE_FAST 0 ( str )					  
							      								    								  
							      								    14 >> 120 LOAD_FAST 0 ( str )				  
							      								    122 LOAD_CONST 1 ( 0 )					  
							      								    124 COMPARE_OP 4 ( > )					  
							      								    126 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    15 128 LOAD_FAST 0 ( str )					  
							      								    130 LOAD_CONST 1 ( 0 )					  
							      								    132 BINARY_SUBSCR						  
							      								    134 LOAD_CONST 2 ( 1 )					  
							      								    136 INPLACE_ADD						  
							      								    138 STORE_FAST 0 ( str )					  
							      								    								  
							      								    16 >> 140 LOAD_FAST 1 ( last )				  
							      								    142 LOAD_CONST 1 ( 0 )					  
							      								    144 COMPARE_OP 4 ( > )					  
							      								    146 POP_JUMP_IF_FALSE 148					  
							      								    148 LOAD_FAST 0 ( str )					  
							      								    150 LOAD_CONST 1 ( 0 )					  
							      								    152 BINARY_SUBSCR						  
							      								    154 RETURN_VALUE						  
							      								    								  
							      								    17 >> 156 LOAD_FAST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUB<unk> YS_DISTINCT_ELEMENTS				      SUB<unk> YS_DISTINCT_ELEMENTS				    SUB<unk> YS_DISTINCT_ELEMENTS				  SUB<unk> YS_DISTINCT_ELEMENTS
--							      --							    --								  --
def sumoflength ( arr , n ) :				      Disassembly of <code object sumoflength at 0x7f33e2644930, fi Disassembly of <code object sumoflength at 0x7f2b0163dc90, fi script_not_found : None
    s = [ ]						      2 0 BUILD_LIST 0						    2 0 BUILD_LIST 0						  
    j = 0						      2 STORE_FAST 2 ( s )					    2 STORE_FAST 2 ( s )					  
    ans = 0						      								    								  
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	while ( j < n and ( arr [ j ] not in s ) ) :	      6 STORE_FAST 3 ( j )					    6 STORE_FAST 3 ( ans )					  
	    s.append ( arr [ j ] )			      								    								  
	    j += 1					      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 2 ( 0 )					  
	ans += ( ( j - i ) * ( j - i + 1 ) ) // 2	      10 STORE_FAST 4 ( ans )					    10 STORE_FAST 4 ( ans )					  
	s.remove ( arr [ i ] )				      								    								  
    return ans						      5 12 SETUP_LOOP 106 ( to 120 )				    5 12 SETUP_LOOP 64 ( to 76 )				  
							      14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
							      16 LOAD_FAST 1 ( n )					    16 LOAD_FAST 1 ( n )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 94 ( to 118 )				    >> 22 FOR_ITER 64 ( to 74 )					  
							      24 STORE_FAST 5 ( i )					    24 STORE_FAST 5 ( i )					  
							      								    								  
							      6 26 SETUP_LOOP 46 ( to 74 )				    6 26 LOAD_FAST 2 ( s )					  
							      >> 28 LOAD_FAST 3 ( j )					    28 LOAD_FAST 5 ( i )					  
							      30 LOAD_FAST 1 ( n )					    30 BINARY_SUBSCR						  
							      32 COMPARE_OP 0 ( < )					    32 LOAD_FAST 0 ( arr )					  
							      34 POP_JUMP_IF_FALSE 72					    34 COMPARE_OP 7 ( not in )					  
							      36 LOAD_FAST 0 ( arr )					    36 POP_JUMP_IF_FALSE 22					  
							      38 LOAD_FAST 3 ( j )					    								  
							      40 BINARY_SUBSCR						    7 38 LOAD_FAST 2 ( s )					  
							      42 LOAD_FAST 2 ( s )					    40 LOAD_FAST 5 ( i )					  
							      44 COMPARE_OP 7 ( not in )				    42 BINARY_SUBSCR						  
							      46 POP_JUMP_IF_FALSE 72					    44 LOAD_FAST 0 ( arr )					  
							      								    46 COMPARE_OP 7 ( not in )					  
							      7 48 LOAD_FAST 2 ( s )					    48 POP_JUMP_IF_FALSE 22					  
							      50 LOAD_METHOD 1 ( append )				    								  
							      52 LOAD_FAST 0 ( arr )					    8 50 LOAD_FAST 2 ( s )					  
							      54 LOAD_FAST 3 ( j )					    52 LOAD_FAST 5 ( i )					  
							      56 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      58 CALL_METHOD 1						    56 LOAD_FAST 0 ( arr )					  
							      60 POP_TOP						    58 COMPARE_OP 7 ( not in )					  
							      								    60 POP_JUMP_IF_FALSE 22					  
							      8 62 LOAD_FAST 3 ( j )					    								  
							      64 LOAD_CONST 2 ( 1 )					    9 62 LOAD_FAST 2 ( s )					  
							      66 INPLACE_ADD						    64 LOAD_FAST 5 ( i )					  
							      68 STORE_FAST 3 ( j )					    66 BINARY_SUBSCR						  
							      70 JUMP_ABSOLUTE 28					    68 LOAD_FAST 0 ( arr )					  
							      >> 72 POP_BLOCK						    70 LOAD_FAST 5 ( i )					  
							      								    72 BINARY_SUBSCR						  
							      9 >> 74 LOAD_FAST 4 ( ans )				    74 LOAD_FAST 0 ( arr )					  
							      76 LOAD_FAST 3 ( j )					    76 LOAD_FAST 5 ( i )					  
							      78 LOAD_FAST 5 ( i )					    78 BINARY_SUBSCR						  
							      80 BINARY_SUBTRACT					    80 LOAD_FAST 0 ( arr )					  
							      82 LOAD_FAST 3 ( j )					    82 LOAD_FAST 5 ( i )					  
							      84 LOAD_FAST 5 ( i )					    84 STORE_SUBSCR						  
							      86 BINARY_SUBTRACT					    								  
							      88 LOAD_CONST 2 ( 1 )					    10 86 LOAD_FAST 2 ( s )					  
							      90 BINARY_ADD						    88 LOAD_FAST 4 ( ans )					  
							      92 BINARY_MULTIPLY					    90 LOAD_FAST 0 ( arr )					  
							      94 LOAD_CONST 3 ( 2 )					    92 STORE_SUBSCR						  
							      96 BINARY_FLOOR_DIVIDE					    94 JUMP_ABSOLUTE 22						  
							      98 INPLACE_ADD						    >> 96 POP_BLOCK						  
							      100 STORE_FAST 4 ( ans )					    								  
							      								    11 >> 98 LOAD_FAST 2 ( s )					  
							      10 102 LOAD_FAST 2 ( s )					    100 RETURN_VALUE NEW_LINE					  
							      104 LOAD_METHOD 2 ( remove )				    								  
							      106 LOAD_FAST 0 ( arr )					    								  
							      108 LOAD_FAST 5 ( i )					    								  
							      110 BINARY_SUBSCR						    								  
							      112 CALL_METHOD 1						    								  
							      114 POP_TOP						    								  
							      116 JUMP_ABSOLUTE 22					    								  
							      >> 118 POP_BLOCK						    								  
							      								    								  
							      11 >> 120 LOAD_FAST 4 ( ans )				    								  
							      122 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_<unk> CATIVE_INVERSE_1_N			      MODULAR_<unk> CATIVE_INVERSE_1_N				    MODULAR_<unk> CATIVE_INVERSE_1_N				  MODULAR_<unk> CATIVE_INVERSE_1_N
--							      --							    --								  --
def modularInverse ( n , prime ) :			      Disassembly of <code object modularInverse at 0x7f33e26494b0, Disassembly of <code object modularInverse at 0x7f2b0163dc90, script_not_found : None
    dp = [ 0 ] * ( n + 1 )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_FAST 0 ( n )					  
    dp [ 0 ] = dp [ 1 ] = 1				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 0 )					  
    for i in range ( 2 , n + 1 ) :			      4 LOAD_FAST 0 ( n )					    4 BINARY_SUBSCR						  
	dp [ i ] = dp [ prime % i ] * ( prime - prime // i )  6 LOAD_CONST 2 ( 1 )					    6 LOAD_FAST 1 ( prime )					  
    for i in range ( 1 , n + 1 ) :			      8 BINARY_ADD						    8 LOAD_CONST 2 ( 1 )					  
	print ( dp [ i ] , end = " " )			      10 BINARY_MULTIPLY					    10 BINARY_ADD						  
							      12 STORE_FAST 2 ( dp )					    12 BINARY_SUBSCR						  
							      								    14 LOAD_FAST 1 ( prime )					  
							      3 14 LOAD_CONST 2 ( 1 )					    16 LOAD_CONST 1 ( 0 )					  
							      16 DUP_TOP						    18 BINARY_SUBSCR						  
							      18 LOAD_FAST 2 ( dp )					    20 BINARY_SUBTRACT						  
							      20 LOAD_CONST 1 ( 0 )					    22 STORE_FAST 2 ( dp )					  
							      22 STORE_SUBSCR						    								  
							      24 LOAD_FAST 2 ( dp )					    3 24 SETUP_LOOP 64 ( to 92 )				  
							      26 LOAD_CONST 2 ( 1 )					    >> 26 LOAD_FAST 2 ( dp )					  
							      28 STORE_SUBSCR						    28 LOAD_CONST 1 ( 0 )					  
							      								    30 BINARY_SUBSCR						  
							      4 30 SETUP_LOOP 54 ( to 86 )				    32 LOAD_FAST 1 ( prime )					  
							      32 LOAD_GLOBAL 0 ( range )				    34 LOAD_CONST 1 ( 0 )					  
							      34 LOAD_CONST 3 ( 2 )					    36 BINARY_SUBSCR						  
							      36 LOAD_FAST 0 ( n )					    38 BINARY_SUBTRACT						  
							      38 LOAD_CONST 2 ( 1 )					    40 LOAD_FAST 1 ( prime )					  
							      40 BINARY_ADD						    42 LOAD_CONST 1 ( 0 )					  
							      42 CALL_FUNCTION 2					    44 BINARY_SUBSCR						  
							      44 GET_ITER						    46 BINARY_SUBTRACT						  
							      >> 46 FOR_ITER 36 ( to 84 )				    48 BINARY_MULTIPLY						  
							      48 STORE_FAST 3 ( i )					    50 LOAD_FAST 2 ( dp )					  
							      								    52 LOAD_CONST 1 ( 0 )					  
							      5 50 LOAD_FAST 2 ( dp )					    54 BINARY_SUBSCR						  
							      52 LOAD_FAST 1 ( prime )					    56 BINARY_SUBTRACT						  
							      54 LOAD_FAST 3 ( i )					    58 LOAD_FAST 1 ( prime )					  
							      56 BINARY_MODULO						    60 LOAD_CONST 1 ( 0 )					  
							      58 BINARY_SUBSCR						    62 BINARY_SUBSCR						  
							      60 LOAD_FAST 1 ( prime )					    64 BINARY_SUBTRACT						  
							      62 LOAD_FAST 1 ( prime )					    66 BINARY_MULTIPLY						  
							      64 LOAD_FAST 3 ( i )					    68 LOAD_FAST 2 ( dp )					  
							      66 BINARY_FLOOR_DIVIDE					    70 LOAD_CONST 1 ( 0 )					  
							      68 BINARY_SUBTRACT					    72 BINARY_SUBSCR						  
							      70 BINARY_MULTIPLY					    74 BINARY_SUBTRACT						  
							      72 LOAD_FAST 1 ( prime )					    76 LOAD_FAST 2 ( dp )					  
							      74 BINARY_MODULO						    78 LOAD_CONST 1 ( 0 )					  
							      76 LOAD_FAST 2 ( dp )					    80 BINARY_SUBSCR						  
							      78 LOAD_FAST 3 ( i )					    82 BINARY_SUBTRACT						  
							      80 STORE_SUBSCR						    84 BINARY_MULTIPLY						  
							      82 JUMP_ABSOLUTE 46					    86 LOAD_FAST 2 ( dp )					  
							      >> 84 POP_BLOCK						    88 LOAD_CONST 1 ( 0 )					  
							      								    90 BINARY_SUBSCR						  
							      6 >> 86 SETUP_LOOP 38 ( to 126 )				    92 BINARY_SUBTRACT						  
							      88 LOAD_GLOBAL 0 ( range )				    94 BINARY_MULTIPLY						  
							      90 LOAD_CONST 2 ( 1 )					    96 LOAD_FAST 2 ( dp )					  
							      92 LOAD_FAST 0 ( n )					    98 LOAD_CONST 1 ( 0 )					  
							      94 LOAD_CONST 2 ( 1 )					    100 BINARY_SUBSCR						  
							      96 BINARY_ADD						    102 BINARY_SUBTRACT						  
							      98 CALL_FUNCTION 2					    104 BINARY_MULTIPLY						  
							      100 GET_ITER						    106 LOAD_FAST 2 ( dp )					  
							      >> 102 FOR_ITER 20 ( to 124 )				    108 LOAD_CONST 1 ( 0 )					  
							      104 STORE_FAST 3 ( i )					    110 BINARY_SUBSCR						  
							      								    112 BINARY_SUBTRACT						  
							      7 106 LOAD_GLOBAL 1 ( print )				    114 LOAD_FAST 2 ( dp )					  
							      108 LOAD_FAST 2 ( dp )					    116 LOAD_CONST 1 ( 0 )					  
							      110 LOAD_FAST 3 ( i )					    118 BINARY_SUBSCR						  
							      112 BINARY_SUBSCR						    120 BINARY_SUBTRACT						  
							      114 LOAD_CONST 4 ( ' ' )					    122 LOAD_FAST 2 ( dp )					  
							      116 LOAD_CONST 5 ( ( 'end' , ) )				    124 LOAD_CONST 1 ( 0 )					  
							      118 CALL_FUNCTION_KW 2					    126 BINARY_SUBSCR						  
							      120 POP_TOP						    128 BINARY_SUBTRACT						  
							      122 JUMP_ABSOLUTE 102					    130 BINARY_MULTIPLY						  
							      >> 124 POP_BLOCK						    132 LOAD_FAST 2 ( dp )					  
							      >> 126 LOAD_CONST 0 ( None )				    134 LOAD_CONST 1 ( 0 )					  
							      128 RETURN_VALUE NEW_LINE					    136 BINARY_SUBSCR						  
							      								    138 BINARY_SUBTRACT						  
							      								    140 BINARY_MULTIPLY						  
							      								    142 BINARY_ADD						  
							      								    144 STORE_FAST 2 ( dp )					  
							      								    								  
							      								    4 146 LOAD_FAST 2 ( dp )					  
							      								    148 LOAD_CONST 1 ( 0 )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_FAST 2 ( dp )					  
							      								    154 LOAD_CONST 1 ( 0 )					  
							      								    156 BINARY_SUBSCR						  
							      								    158 LOAD_FAST 2 ( dp )					  
							      								    160 LOAD_CONST 1 ( 0 )					  
							      								    162 BINARY_SUBSCR						  
							      								    164 BINARY_SUBTRACT						  
							      								    166 BINARY_MULTIPLY						  
							      								    168 LOAD_FAST 2 ( dp )					  
							      								    170 LOAD_CONST 1 ( 0 )					  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_FAST 2 ( dp )					  
							      								    176 LOAD_CONST 1 ( 0 )					  
							      								    178 BINARY_SUBSCR						  
							      								    180 BINARY_SUBTRACT						  
							      								    158 BINARY_MULTIPLY						  
							      								    160 BINARY_ADD						  
							      								    162 STORE_FAST 2 ( dp )					  
							      								    								  
							      								    5 164 LOAD_FAST 2 ( dp )					  
							      								    166 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1	      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1
--							      --							    --								  --
def maxRepeating ( str ) :				      Disassembly of <code object maxRepeating at 0x7f33e2644930, f Disassembly of <code object maxRepeating at 0x7f2b0163dc90, f failure : #Results: 0, 10
    n = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    count = 0						      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
    res = str [ 0 ]					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    cur_count = 1					      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
    for i in range ( n ) :				      								    								  
	if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) :     3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    cur_count += 1				      10 STORE_FAST 2 ( count )					    10 STORE_FAST 2 ( count )					  
	else :						      								    								  
	    if cur_count > count :			      4 12 LOAD_FAST 0 ( str )					    4 12 LOAD_CONST 2 ( 1 )					  
		count = cur_count			      14 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 3 ( cur_count )				  
		res = str [ i ]				      16 BINARY_SUBSCR						    								  
	    cur_count = 1				      18 STORE_FAST 3 ( res )					    5 16 SETUP_LOOP 64 ( to 76 )				  
    return res						      								    18 LOAD_GLOBAL 1 ( range )					  
							      5 20 LOAD_CONST 2 ( 1 )					    20 LOAD_FAST 1 ( n )					  
							      22 STORE_FAST 4 ( cur_count )				    22 CALL_FUNCTION 1						  
							      								    24 GET_ITER							  
							      6 24 SETUP_LOOP 82 ( to 108 )				    >> 26 FOR_ITER 48 ( to 74 )					  
							      26 LOAD_GLOBAL 1 ( range )				    28 STORE_FAST 4 ( i )					  
							      28 LOAD_FAST 1 ( n )					    								  
							      30 CALL_FUNCTION 1					    6 30 LOAD_FAST 2 ( count )					  
							      32 GET_ITER						    32 LOAD_CONST 2 ( 1 )					  
							      >> 34 FOR_ITER 70 ( to 106 )				    34 COMPARE_OP 2 ( == )					  
							      36 STORE_FAST 5 ( i )					    36 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      7 38 LOAD_FAST 5 ( i )					    7 38 LOAD_FAST 2 ( count )					  
							      40 LOAD_FAST 1 ( n )					    40 LOAD_CONST 2 ( 1 )					  
							      42 LOAD_CONST 2 ( 1 )					    42 INPLACE_ADD						  
							      44 BINARY_SUBTRACT					    44 STORE_FAST 2 ( count )					  
							      46 COMPARE_OP 0 ( < )					    46 JUMP_ABSOLUTE 26						  
							      48 POP_JUMP_IF_FALSE 80					    								  
							      50 LOAD_FAST 0 ( str )					    8 >> 48 LOAD_FAST 2 ( count )				  
							      52 LOAD_FAST 5 ( i )					    50 LOAD_CONST 2 ( 1 )					  
							      54 BINARY_SUBSCR						    52 INPLACE_ADD						  
							      56 LOAD_FAST 0 ( str )					    54 STORE_FAST 2 ( count )					  
							      58 LOAD_FAST 5 ( i )					    								  
							      60 LOAD_CONST 2 ( 1 )					    9 56 LOAD_FAST 2 ( count )					  
							      62 BINARY_ADD						    58 LOAD_CONST 2 ( 1 )					  
							      64 BINARY_SUBSCR						    60 INPLACE_ADD						  
							      66 COMPARE_OP 2 ( == )					    62 STORE_FAST 2 ( count )					  
							      68 POP_JUMP_IF_FALSE 80					    								  
							      								    10 64 LOAD_FAST 2 ( count )					  
							      8 70 LOAD_FAST 4 ( cur_count )				    66 LOAD_CONST 2 ( 1 )					  
							      72 LOAD_CONST 2 ( 1 )					    68 INPLACE_ADD						  
							      74 INPLACE_ADD						    70 STORE_FAST 2 ( count )					  
							      76 STORE_FAST 4 ( cur_count )				    72 JUMP_ABSOLUTE 26						  
							      78 JUMP_ABSOLUTE 34					    >> 74 POP_BLOCK						  
							      								    								  
							      10 >> 80 LOAD_FAST 4 ( cur_count )			    11 >> 76 LOAD_FAST 2 ( count )				  
							      82 LOAD_FAST 2 ( count )					    78 RETURN_VALUE NEW_LINE					  
							      84 COMPARE_OP 4 ( > )					    								  
							      86 POP_JUMP_IF_FALSE 100					    								  
							      								    								  
							      11 88 LOAD_FAST 4 ( cur_count )				    								  
							      90 STORE_FAST 2 ( count )					    								  
							      								    								  
							      12 92 LOAD_FAST 0 ( str )					    								  
							      94 LOAD_FAST 5 ( i )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 STORE_FAST 3 ( res )					    								  
							      								    								  
							      13 >> 100 LOAD_CONST 2 ( 1 )				    								  
							      102 STORE_FAST 4 ( cur_count )				    								  
							      104 JUMP_ABSOLUTE 34					    								  
							      >> 106 POP_BLOCK						    								  
							      								    								  
							      14 >> 108 LOAD_FAST 3 ( res )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1
--							      --							    --								  --
def countSubstringWithEqualEnds ( s ) :			      Disassembly of <code object countSubstringWithEqualEnds at 0x Disassembly of <code object countSubstringWithEqualds at 0x7f script_not_found : None
    result = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    n = len ( s ) ;					      2 STORE_FAST 1 ( result )					    2 STORE_FAST 1 ( result )					  
    count = [ 0 ] * MAX_CHAR ;				      								    								  
    for i in range ( n ) :				      3 4 LOAD_GLOBAL 0 ( len )					    3 4 LOAD_GLOBAL 0 ( len )					  
	count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1 ;	      6 LOAD_FAST 0 ( s )					    6 LOAD_FAST 0 ( s )						  
    for i in range ( MAX_CHAR ) :			      8 CALL_FUNCTION 1						    8 CALL_FUNCTION 1						  
	result += ( count [ i ] * ( count [ i ] + 1 ) / 2 ) ; 10 STORE_FAST 2 ( n )					    10 LOAD_CONST 2 ( 1 )					  
    return result ;					      								    12 BINARY_SUBTRACT						  
							      4 12 LOAD_CONST 1 ( 0 )					    14 STORE_FAST 2 ( count )					  
							      14 BUILD_LIST 1						    								  
							      16 LOAD_GLOBAL 1 ( MAX_CHAR )				    4 16 LOAD_CONST 3 ( 0 )					  
							      18 BINARY_MULTIPLY					    18 STORE_FAST 3 ( count )					  
							      20 STORE_FAST 3 ( count )					    								  
							      								    5 20 SETUP_LOOP 64 ( to 102 )				  
							      5 22 SETUP_LOOP 48 ( to 72 )				    22 LOAD_GLOBAL 1 ( range )					  
							      24 LOAD_GLOBAL 2 ( range )				    24 LOAD_FAST 0 ( s )					  
							      26 LOAD_FAST 2 ( n )					    26 LOAD_CONST 4 ( 2 )					  
							      28 CALL_FUNCTION 1					    28 CALL_FUNCTION 2						  
							      30 GET_ITER						    30 GET_ITER							  
							      >> 32 FOR_ITER 36 ( to 70 )				    >> 32 FOR_ITER 48 ( to 100 )				  
							      34 STORE_FAST 4 ( i )					    34 STORE_FAST 4 ( i )					  
							      								    								  
							      6 36 LOAD_FAST 3 ( count )				    6 36 LOAD_FAST 0 ( s )					  
							      38 LOAD_GLOBAL 3 ( ord )					    38 LOAD_FAST 4 ( i )					  
							      40 LOAD_FAST 0 ( s )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 4 ( i )					    42 STORE_FAST 5 ( j )					  
							      44 BINARY_SUBSCR						    								  
							      46 CALL_FUNCTION 1					    7 44 LOAD_FAST 1 ( result )					  
							      48 LOAD_GLOBAL 3 ( ord )					    46 LOAD_FAST 5 ( j )					  
							      50 LOAD_CONST 2 ( 'a' )					    48 BINARY_SUBSCR						  
							      52 CALL_FUNCTION 1					    50 LOAD_FAST 5 ( j )					  
							      54 BINARY_SUBTRACT					    52 BINARY_SUBSCR						  
							      56 DUP_TOP_TWO						    54 LOAD_FAST 5 ( j )					  
							      58 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      60 LOAD_CONST 3 ( 1 )					    58 LOAD_FAST 5 ( j )					  
							      62 INPLACE_ADD						    60 BINARY_SUBSCR						  
							      64 ROT_THREE						    62 LOAD_FAST 5 ( j )					  
							      66 STORE_SUBSCR						    64 BINARY_SUBSCR						  
							      68 JUMP_ABSOLUTE 32					    66 LOAD_FAST 5 ( j )					  
							      >> 70 POP_BLOCK						    68 BINARY_SUBSCR						  
							      								    70 LOAD_FAST 5 ( j )					  
							      7 >> 72 SETUP_LOOP 44 ( to 118 )				    72 BINARY_SUBSCR						  
							      74 LOAD_GLOBAL 2 ( range )				    74 LOAD_FAST 5 ( j )					  
							      76 LOAD_GLOBAL 1 ( MAX_CHAR )				    76 BINARY_SUBSCR						  
							      78 CALL_FUNCTION 1					    78 LOAD_FAST 5 ( j )					  
							      80 GET_ITER						    80 BINARY_SUBSCR						  
							      >> 82 FOR_ITER 32 ( to 116 )				    82 LOAD_FAST 5 ( j )					  
							      84 STORE_FAST 4 ( i )					    84 BINARY_SUBSCR						  
							      								    86 LOAD_FAST 5 ( j )					  
							      8 86 LOAD_FAST 1 ( result )				    88 BINARY_SUBSCR						  
							      88 LOAD_FAST 3 ( count )					    90 LOAD_FAST 5 ( j )					  
							      90 LOAD_FAST 4 ( i )					    92 BINARY_SUBSCR						  
							      92 BINARY_SUBSCR						    94 LOAD_FAST 5 ( j )					  
							      94 LOAD_FAST 3 ( count )					    96 BINARY_SUBSCR						  
							      96 LOAD_FAST 4 ( i )					    98 LOAD_FAST 5 ( j )					  
							      98 BINARY_SUBSCR						    100 STORE_SUBSCR						  
							      100 LOAD_CONST 3 ( 1 )					    102 JUMP_ABSOLUTE 32					  
							      102 BINARY_ADD						    >> 104 POP_BLOCK						  
							      104 BINARY_MULTIPLY					    								  
							      106 LOAD_CONST 4 ( 2 )					    8 >> 106 LOAD_FAST 1 ( result )				  
							      108 BINARY_TRUE_DIVIDE					    108 RETURN_VALUE NEW_LINE					  
							      110 INPLACE_ADD						    								  
							      112 STORE_FAST 1 ( result )				    								  
							      114 JUMP_ABSOLUTE 82					    								  
							      >> 116 POP_BLOCK						    								  
							      								    								  
							      9 >> 118 LOAD_FAST 1 ( result )				    								  
							      120 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_BRACKET_NUMBER					      PRINT_BRACKET_NUMBER					    PRINT_BRACKET_NUMBER					  PRINT_BRACKET_NUMBER
--							      --							    --								  --
def printBracketNumber ( exp , n ) :			      Disassembly of <code object printBracketNumber at 0x7f33e2649 Disassembly of <code object printBracketNumber at 0x7f2b01639 script_not_found : None
    left_bnum = 1					      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    right_bnum = list ( )				      2 STORE_FAST 2 ( left_bnum )				    2 STORE_FAST 2 ( left_bnum )				  
    for i in range ( n ) :				      								    								  
	if exp [ i ] == '(' :				      3 4 LOAD_GLOBAL 0 ( list )				    3 4 LOAD_GLOBAL 0 ( list )					  
	    print ( left_bnum , end = " " )		      6 CALL_FUNCTION 0						    6 CALL_FUNCTION 0						  
	    right_bnum.append ( left_bnum )		      8 STORE_FAST 3 ( right_bnum )				    8 STORE_FAST 3 ( left_num )					  
	    left_bnum += 1				      								    								  
	elif exp [ i ] == ')' :				      4 10 SETUP_LOOP 96 ( to 108 )				    4 10 SETUP_LOOP 64 ( to 76 )				  
	    print ( right_bnum [ - 1 ] , end = " " )	      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
	    right_bnum.pop ( )				      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 2 ( left_bnum )				  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 84 ( to 106 )				    >> 20 FOR_ITER 48 ( to 74 )					  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 LOAD_FAST 0 ( exp )					    5 24 LOAD_FAST 0 ( exp )					  
							      26 LOAD_FAST 4 ( i )					    26 LOAD_FAST 4 ( i )					  
							      28 BINARY_SUBSCR						    28 BINARY_SUBSCR						  
							      30 LOAD_CONST 2 ( '(' )					    30 LOAD_FAST 1 ( n )					  
							      32 COMPARE_OP 2 ( == )					    32 COMPARE_OP 2 ( == )					  
							      34 POP_JUMP_IF_FALSE 68					    34 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      6 36 LOAD_GLOBAL 2 ( print )				    6 36 LOAD_GLOBAL 2 ( print )				  
							      38 LOAD_FAST 2 ( left_bnum )				    38 LOAD_CONST 2 ( '						  
							      40 LOAD_CONST 3 ( ' ' )					    								  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      44 CALL_FUNCTION_KW 2					    								  
							      46 POP_TOP						    								  
							      								    								  
							      7 48 LOAD_FAST 3 ( right_bnum )				    								  
							      50 LOAD_METHOD 3 ( append )				    								  
							      52 LOAD_FAST 2 ( left_bnum )				    								  
							      54 CALL_METHOD 1						    								  
							      56 POP_TOP						    								  
							      								    								  
							      8 58 LOAD_FAST 2 ( left_bnum )				    								  
							      60 LOAD_CONST 1 ( 1 )					    								  
							      62 INPLACE_ADD						    								  
							      64 STORE_FAST 2 ( left_bnum )				    								  
							      66 JUMP_ABSOLUTE 20					    								  
							      								    								  
							      9 >> 68 LOAD_FAST 0 ( exp )				    								  
							      70 LOAD_FAST 4 ( i )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 LOAD_CONST 5 ( ')' )					    								  
							      76 COMPARE_OP 2 ( == )					    								  
							      78 POP_JUMP_IF_FALSE 20					    								  
							      								    								  
							      10 80 LOAD_GLOBAL 2 ( print )				    								  
							      82 LOAD_FAST 3 ( right_bnum )				    								  
							      84 LOAD_CONST 6 ( - 1 )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 LOAD_CONST 3 ( ' ' )					    								  
							      90 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      92 CALL_FUNCTION_KW 2					    								  
							      94 POP_TOP						    								  
							      								    								  
							      11 96 LOAD_FAST 3 ( right_bnum )				    								  
							      98 LOAD_METHOD 4 ( pop )					    								  
							      100 CALL_METHOD 0						    								  
							      102 POP_TOP						    								  
							      104 JUMP_ABSOLUTE 20					    								  
							      >> 106 POP_BLOCK						    								  
							      >> 108 LOAD_CONST 0 ( None )				    								  
							      110 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_CONSECUTIVE_SUBSEQUENCE				      LONGEST_CONSECUTIVE_SUBSEQUENCE				    LONGEST_CONSECUTIVE_SUBSEQUENCE				  LONGEST_CONSECUTIVE_SUBSEQUENCE
--							      --							    --								  --
def findLongestConseqSubseq ( arr , n ) :		      Disassembly of <code object findLongestConseqSubseq at 0x7f33 Disassembly of <code object findpeakgestgestSubseq at 0x7f2b0 script_not_found : None
    s = Set ( )						      2 0 LOAD_GLOBAL 0 ( Set )					    2 0 LOAD_GLOBAL 0 ( Set )					  
    ans = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    for ele in arr :					      4 STORE_FAST 2 ( s )					    4 STORE_FAST 1 ( s )					  
	s.add ( ele )					      								    								  
    for i in range ( n ) :				      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	if ( arr [ i ] - 1 ) not in s :			      8 STORE_FAST 3 ( ans )					    8 STORE_FAST 2 ( ans )					  
	    j = arr [ i ]				      								    								  
	    while ( j in s ) :				      4 10 SETUP_LOOP 22 ( to 34 )				    4 10 SETUP_LOOP 64 ( to 74 )				  
		j += 1					      12 LOAD_FAST 0 ( arr )					    12 LOAD_FAST 0 ( arr )					  
	    ans = max ( ans , j - arr [ i ] )		      14 GET_ITER						    14 GET_ITER							  
    return ans						      >> 16 FOR_ITER 14 ( to 32 )				    >> 16 FOR_ITER 64 ( to 72 )					  
							      18 STORE_FAST 4 ( ele )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      5 20 LOAD_FAST 2 ( s )					    5 20 LOAD_FAST 1 ( s )					  
							      22 LOAD_METHOD 1 ( add )					    22 LOAD_METHOD 1 ( add )					  
							      24 LOAD_FAST 4 ( ele )					    24 LOAD_FAST 3 ( i )					  
							      26 CALL_METHOD 1						    26 CALL_METHOD 1						  
							      28 POP_TOP						    28 POP_TOP							  
							      30 JUMP_ABSOLUTE 16					    								  
							      >> 32 POP_BLOCK						    6 30 LOAD_FAST 1 ( s )					  
							      								    32 LOAD_METHOD 2 ( append )					  
							      6 >> 34 SETUP_LOOP 80 ( to 116 )				    34 LOAD_FAST 2 ( ans )					  
							      36 LOAD_GLOBAL 2 ( range )				    36 CALL_METHOD 1						  
							      38 LOAD_FAST 1 ( n )					    38 POP_TOP							  
							      40 CALL_FUNCTION 1					    40 JUMP_ABSOLUTE 16						  
							      42 GET_ITER						    >> 42 POP_BLOCK						  
							      >> 44 FOR_ITER 68 ( to 114 )				    								  
							      46 STORE_FAST 5 ( i )					    7 >> 44 LOAD_FAST 1 ( s )					  
							      								    46 RETURN_VALUE NEW_LINE					  
							      7 48 LOAD_FAST 0 ( arr )					    								  
							      50 LOAD_FAST 5 ( i )					    								  
							      52 BINARY_SUBSCR						    								  
							      54 LOAD_CONST 2 ( 1 )					    								  
							      56 BINARY_SUBTRACT					    								  
							      58 LOAD_FAST 2 ( s )					    								  
							      60 COMPARE_OP 7 ( not in )				    								  
							      62 POP_JUMP_IF_FALSE 44					    								  
							      								    								  
							      8 64 LOAD_FAST 0 ( arr )					    								  
							      66 LOAD_FAST 5 ( i )					    								  
							      68 BINARY_SUBSCR						    								  
							      70 STORE_FAST 6 ( j )					    								  
							      								    								  
							      9 72 SETUP_LOOP 20 ( to 94 )				    								  
							      >> 74 LOAD_FAST 6 ( j )					    								  
							      76 LOAD_FAST 2 ( s )					    								  
							      78 COMPARE_OP 6 ( in )					    								  
							      80 POP_JUMP_IF_FALSE 92					    								  
							      								    								  
							      10 82 LOAD_FAST 6 ( j )					    								  
							      84 LOAD_CONST 2 ( 1 )					    								  
							      86 INPLACE_ADD						    								  
							      88 STORE_FAST 6 ( j )					    								  
							      90 JUMP_ABSOLUTE 74					    								  
							      >> 92 POP_BLOCK						    								  
							      								    								  
							      11 >> 94 LOAD_GLOBAL 3 ( max )				    								  
							      96 LOAD_FAST 3 ( ans )					    								  
							      98 LOAD_FAST 6 ( j )					    								  
							      100 LOAD_FAST 0 ( arr )					    								  
							      102 LOAD_FAST 5 ( i )					    								  
							      104 BINARY_SUBSCR						    								  
							      106 BINARY_SUBTRACT					    								  
							      108 CALL_FUNCTION 2					    								  
							      110 STORE_FAST 3 ( ans )					    								  
							      112 JUMP_ABSOLUTE 44					    								  
							      >> 114 POP_BLOCK						    								  
							      								    								  
							      12 >> 116 LOAD_FAST 3 ( ans )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1      PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	    PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1	  PRIMALITY_TEST_SET_1_INTR<unk> CTION_AND_SCHOOL_METHOD_1
--							      --							    --								  --
def isPrime ( n ) :					      Disassembly of <code object isPrime at 0x7f33e2653ed0, file " Disassembly of <code object isPrime at 0x7f2b01639660, file " script_not_found : None
    if ( n <= 1 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return False					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n <= 3 ) :					      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
	return True					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    if ( n % 2 == 0 or n % 3 == 0 ) :			      								    								  
	return False					      3 8 LOAD_CONST 2 ( False )				    3 8 LOAD_CONST 2 ( False )					  
    i = 5						      10 RETURN_VALUE						    10 RETURN_VALUE						  
    while ( i * i <= n ) :				      								    								  
	if ( n % i == 0 or n % ( i + 2 ) == 0 ) :	      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
	    return False				      14 LOAD_CONST 3 ( 3 )					    14 LOAD_CONST 3 ( 3 )					  
	i = i + 6					      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
    return True						      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 4 ( True )				    5 20 LOAD_CONST 4 ( True )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_FAST 0 ( n )					    6 >> 24 LOAD_FAST 0 ( n )					  
							      26 LOAD_CONST 5 ( 2 )					    26 LOAD_CONST 5 ( 0 )					  
							      28 BINARY_MODULO						    28 COMPARE_OP 1 ( <= )					  
							      30 LOAD_CONST 6 ( 0 )					    30 POP_JUMP_IF_FALSE 36					  
							      32 COMPARE_OP 2 ( == )					    								  
							      34 POP_JUMP_IF_TRUE 48					    7 32 LOAD_CONST 6 ( False )					  
							      36 LOAD_FAST 0 ( n )					    34 RETURN_VALUE						  
							      38 LOAD_CONST 3 ( 3 )					    								  
							      40 BINARY_MODULO						    8 >> 36 LOAD_FAST 0 ( n )					  
							      42 LOAD_CONST 6 ( 0 )					    38 LOAD_CONST 7 ( 1 )					  
							      44 COMPARE_OP 2 ( == )					    40 COMPARE_OP 2 ( == )					  
							      46 POP_JUMP_IF_FALSE 52					    42 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      7 >> 48 LOAD_CONST 2 ( False )				    9 44 LOAD_CONST 8 ( False )					  
							      50 RETURN_VALUE						    46 RETURN_VALUE						  
							      								    								  
							      8 >> 52 LOAD_CONST 7 ( 5 )				    10 >> 48 LOAD_FAST 0 ( n )					  
							      54 STORE_FAST 1 ( i )					    50 LOAD_CONST 9 ( 2 )					  
							      								    52 COMPARE_OP 0 ( < )					  
							      9 56 SETUP_LOOP 56 ( to 114 )				    54 POP_JUMP_IF_FALSE 64					  
							      >> 58 LOAD_FAST 1 ( i )					    								  
							      60 LOAD_FAST 1 ( i )					    11 56 LOAD_CONST 10 ( False )				  
							      62 BINARY_MULTIPLY					    58 RETURN_VALUE						  
							      64 LOAD_FAST 0 ( n )					    								  
							      66 COMPARE_OP 1 ( <= )					    13 >> 60 LOAD_CONST 11 ( True )				  
							      68 POP_JUMP_IF_FALSE 112					    62 RETURN_VALUE						  
							      								    								  
							      10 70 LOAD_FAST 0 ( n )					    14 >> 64 LOAD_CONST 12 ( False )				  
							      72 LOAD_FAST 1 ( i )					    66 RETURN_VALUE NEW_LINE					  
							      74 BINARY_MODULO						    								  
							      76 LOAD_CONST 6 ( 0 )					    								  
							      78 COMPARE_OP 2 ( == )					    								  
							      80 POP_JUMP_IF_TRUE 98					    								  
							      82 LOAD_FAST 0 ( n )					    								  
							      84 LOAD_FAST 1 ( i )					    								  
							      86 LOAD_CONST 5 ( 2 )					    								  
							      88 BINARY_ADD						    								  
							      90 BINARY_MODULO						    								  
							      92 LOAD_CONST 6 ( 0 )					    								  
							      94 COMPARE_OP 2 ( == )					    								  
							      96 POP_JUMP_IF_FALSE 102					    								  
							      								    								  
							      11 >> 98 LOAD_CONST 2 ( False )				    								  
							      100 RETURN_VALUE						    								  
							      								    								  
							      12 >> 102 LOAD_FAST 1 ( i )				    								  
							      104 LOAD_CONST 8 ( 6 )					    								  
							      106 BINARY_ADD						    								  
							      108 STORE_FAST 1 ( i )					    								  
							      110 JUMP_ABSOLUTE 58					    								  
							      >> 112 POP_BLOCK						    								  
							      								    								  
							      13 >> 114 LOAD_CONST 4 ( True )				    								  
							      116 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1
--							      --							    --								  --
def printDistinct ( arr , n ) :				      Disassembly of <code object printDistinct at 0x7f33e26494b0,  Disassembly of <code object printDistinct at 0x7f2b0163dc90,  script_not_found : None
    arr.sort ( ) ;					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  
    for i in range ( n ) :				      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
	if ( i < n - 1 and arr [ i ] == arr [ i + 1 ] ) :     4 CALL_METHOD 0						    4 CALL_METHOD 0						  
	    while ( i < n - 1 and ( arr [ i ] == arr [ i + 1  6 POP_TOP							    6 POP_TOP							  
		i += 1 ;				      								    								  
	else :						      3 8 SETUP_LOOP 112 ( to 122 )				    3 8 SETUP_LOOP 64 ( to 70 )					  
	    print ( arr [ i ] , end = " " ) ;		      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( n )					    12 LOAD_FAST 1 ( n )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 100 ( to 120 )				    >> 18 FOR_ITER 48 ( to 68 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 2 ( i )					    4 22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_CONST 1 ( 0 )					  
							      26 LOAD_CONST 1 ( 1 )					    26 COMPARE_OP 0 ( < )					  
							      28 BINARY_SUBTRACT					    28 POP_JUMP_IF_FALSE 44					  
							      30 COMPARE_OP 0 ( < )					    								  
							      32 POP_JUMP_IF_FALSE 102					    5 30 LOAD_FAST 2 ( i )					  
							      34 LOAD_FAST 0 ( arr )					    32 LOAD_CONST 1 ( 0 )					  
							      36 LOAD_FAST 2 ( i )					    34 COMPARE_OP 0 ( < )					  
							      38 BINARY_SUBSCR						    36 POP_JUMP_IF_FALSE 42					  
							      40 LOAD_FAST 0 ( arr )					    								  
							      42 LOAD_FAST 2 ( i )					    6 38 LOAD_FAST 2 ( i )					  
							      44 LOAD_CONST 1 ( 1 )					    40 LOAD_CONST 1 ( 0 )					  
							      46 BINARY_ADD						    42 COMPARE_OP 0 ( < )					  
							      48 BINARY_SUBSCR						    >> 44 RETURN_VALUE						  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 POP_JUMP_IF_FALSE 102					    8 >> 46 LOAD_FAST 0 ( arr )					  
							      								    48 LOAD_CONST 2 ( 1 )					  
							      5 54 SETUP_LOOP 62 ( to 118 )				    50 COMPARE_OP 0 ( < )					  
							      >> 56 LOAD_FAST 2 ( i )					    52 POP_JUMP_IF_FALSE 56					  
							      58 LOAD_FAST 1 ( n )					    54 LOAD_FAST 2 ( i )					  
							      60 LOAD_CONST 1 ( 1 )					    56 LOAD_CONST 1 ( 0 )					  
							      62 BINARY_SUBTRACT					    58 COMPARE_OP 0 ( < )					  
							      64 COMPARE_OP 0 ( < )					    60 POP_JUMP_IF_FALSE 18					  
							      66 POP_JUMP_IF_FALSE 98					    								  
							      68 LOAD_FAST 0 ( arr )					    9 62 LOAD_FAST 2 ( i )					  
							      70 LOAD_FAST 2 ( i )					    64 LOAD_CONST 1 ( 0 )					  
							      72 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      74 LOAD_FAST 0 ( arr )					    68 STORE_FAST 2 ( i )					  
							      76 LOAD_FAST 2 ( i )					    								  
							      78 LOAD_CONST 1 ( 1 )					    10 70 LOAD_FAST 2 ( i )					  
							      80 BINARY_ADD						    72 LOAD_CONST 1 ( 0 )					  
							      82 BINARY_SUBSCR						    74 COMPARE_OP 0 ( < )					  
							      84 COMPARE_OP 2 ( == )					    76 POP_JUMP_IF_FALSE 18					  
							      86 POP_JUMP_IF_FALSE 98					    								  
							      								    11 78 LOAD_FAST 2 ( i )					  
							      6 88 LOAD_FAST 2 ( i )					    80 LOAD_CONST 1 ( 0 )					  
							      90 LOAD_CONST 1 ( 1 )					    82 BINARY_SUBSCR						  
							      92 INPLACE_ADD						    84 LOAD_FAST 2 ( i )					  
							      94 STORE_FAST 2 ( i )					    86 LOAD_CONST 1 ( 0 )					  
							      96 JUMP_ABSOLUTE 56					    88 BINARY_SUBSCR						  
							      >> 98 POP_BLOCK						    90 BINARY_SUBTRACT						  
							      100 JUMP_ABSOLUTE 18					    92 STORE_FAST 2 ( i )					  
							      								    								  
							      8 >> 102 LOAD_GLOBAL 2 ( print )				    12 94 LOAD_FAST 2 ( i )					  
							      104 LOAD_FAST 0 ( arr )					    96 LOAD_CONST 1 ( 0 )					  
							      106 LOAD_FAST 2 ( i )					    98 COMPARE_OP 4 ( > )					  
							      108 BINARY_SUBSCR						    100 POP_JUMP_IF_FALSE 18					  
							      110 LOAD_CONST 2 ( ' ' )					    								  
							      112 LOAD_CONST 3 ( ( 'end' , ) )				    13 102 LOAD_FAST 2 ( i )					  
							      114 CALL_FUNCTION_KW 2					    104 LOAD_CONST 1 ( 0 )					  
							      116 POP_TOP						    106 COMPARE_OP 4 ( > )					  
							      >> 118 JUMP_ABSOLUTE 18					    108 POP_JUMP_IF_FALSE 120					  
							      >> 120 POP_BLOCK						    								  
							      >> 122 LOAD_CONST 0 ( None )				    14 110 LOAD_FAST 2 ( i )					  
							      124 RETURN_VALUE NEW_LINE					    112 LOAD_CONST 1 ( 0 )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 STORE_FAST 2 ( i )					  
							      								    118 JUMP_ABSOLUTE 18					  
							      								    >> 120 POP_BLOCK						  
							      								    								  
							      								    15 >> 122 LOAD_FAST 0 ( arr )				  
							      								    124 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY		      FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			    FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			  FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY
--							      --							    --								  --
def findSubarraySum ( arr , n ) :			      Disassembly of <code object findSubarraySum at 0x7f33e2644f60 Disassembly of <code object findSubarraySum at 0x7f2b0163dc90 error : Traceback (most recent call last):   File
    res = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    m = dict ( )					      2 STORE_FAST 2 ( res )					    2 STORE_FAST 2 ( res )					  (item)   File "main.py", line 38, in <module>	  Fi
    for i in range ( n ) :				      								    								  le "<dis>", line 2, in findSubarraySum TypeError:
	Sum = 0						      3 4 LOAD_GLOBAL 0 ( dict )				    3 4 LOAD_GLOBAL 0 ( dict )					  'list' object cannot be interpreted as an integer
	for j in range ( i , n ) :			      6 CALL_FUNCTION 0						    6 CALL_FUNCTION 0						  
	    Sum += arr [ j ]				      8 STORE_FAST 3 ( m )					    8 STORE_FAST 3 ( res )					  
	    m [ Sum ] = m.get ( Sum , 0 ) + 1		      								    								  
    for x in m :					      4 10 SETUP_LOOP 72 ( to 84 )				    4 10 SETUP_LOOP 64 ( to 76 )				  
	if m [ x ] == 1 :				      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
	    res += x					      14 LOAD_FAST 1 ( n )					    14 LOAD_FAST 0 ( arr )					  
    return res						      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 60 ( to 82 )				    >> 20 FOR_ITER 64 ( to 74 )					  
							      22 STORE_FAST 4 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 LOAD_CONST 1 ( 0 )					    5 24 LOAD_FAST 2 ( res )					  
							      26 STORE_FAST 5 ( Sum )					    26 LOAD_FAST 4 ( i )					  
							      								    28 BINARY_SUBSCR						  
							      6 28 SETUP_LOOP 50 ( to 80 )				    30 STORE_FAST 5 ( j )					  
							      30 LOAD_GLOBAL 1 ( range )				    								  
							      32 LOAD_FAST 4 ( i )					    6 32 LOAD_FAST 2 ( res )					  
							      34 LOAD_FAST 1 ( n )					    34 LOAD_FAST 4 ( i )					  
							      36 CALL_FUNCTION 2					    36 BINARY_SUBSCR						  
							      38 GET_ITER						    38 STORE_FAST 6 ( j )					  
							      >> 40 FOR_ITER 36 ( to 78 )				    								  
							      42 STORE_FAST 6 ( j )					    7 40 LOAD_FAST 2 ( res )					  
							      								    42 LOAD_FAST 5 ( j )					  
							      7 44 LOAD_FAST 5 ( Sum )					    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( arr )					    46 STORE_FAST 7 ( j )					  
							      48 LOAD_FAST 6 ( j )					    								  
							      50 BINARY_SUBSCR						    8 48 LOAD_FAST 2 ( res )					  
							      52 INPLACE_ADD						    50 LOAD_FAST 6 ( j )					  
							      54 STORE_FAST 5 ( Sum )					    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 4 ( i )					  
							      8 56 LOAD_FAST 3 ( m )					    56 BINARY_SUBSCR						  
							      58 LOAD_METHOD 2 ( get )					    58 LOAD_FAST 5 ( j )					  
							      60 LOAD_FAST 5 ( Sum )					    60 BINARY_SUBSCR						  
							      62 LOAD_CONST 1 ( 0 )					    62 LOAD_FAST 4 ( i )					  
							      64 CALL_METHOD 2						    64 BINARY_SUBSCR						  
							      66 LOAD_CONST 2 ( 1 )					    66 LOAD_FAST 5 ( j )					  
							      68 BINARY_ADD						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 3 ( m )					    70 LOAD_FAST 4 ( i )					  
							      72 LOAD_FAST 5 ( Sum )					    72 BINARY_SUBSCR						  
							      74 STORE_SUBSCR						    74 LOAD_FAST 5 ( j )					  
							      76 JUMP_ABSOLUTE 40					    76 BINARY_SUBSCR						  
							      >> 78 POP_BLOCK						    78 LOAD_FAST 4 ( i )					  
							      >> 80 JUMP_ABSOLUTE 20					    80 BINARY_SUBSCR						  
							      >> 82 POP_BLOCK						    82 LOAD_FAST 4 ( i )					  
							      								    84 BINARY_SUBSCR						  
							      9 >> 84 SETUP_LOOP 32 ( to 118 )				    86 LOAD_FAST 4 ( i )					  
							      86 LOAD_FAST 3 ( m )					    88 BINARY_SUBSCR						  
							      88 GET_ITER						    90 LOAD_FAST 6 ( j )					  
							      >> 90 FOR_ITER 24 ( to 116 )				    92 BINARY_SUBSCR						  
							      92 STORE_FAST 7 ( x )					    94 LOAD_FAST 7 ( j )					  
							      								    96 STORE_SUBSCR						  
							      10 94 LOAD_FAST 3 ( m )					    								  
							      96 LOAD_FAST 7 ( x )					    9 98 LOAD_FAST 2 ( res )					  
							      98 BINARY_SUBSCR						    100 RETURN_VALUE NEW_LINE					  
							      100 LOAD_CONST 2 ( 1 )					    								  
							      102 COMPARE_OP 2 ( == )					    								  
							      104 POP_JUMP_IF_FALSE 90					    								  
							      								    								  
							      11 106 LOAD_FAST 2 ( res )				    								  
							      108 LOAD_FAST 7 ( x )					    								  
							      110 INPLACE_ADD						    								  
							      112 STORE_FAST 2 ( res )					    								  
							      114 JUMP_ABSOLUTE 90					    								  
							      >> 116 POP_BLOCK						    								  
							      								    								  
							      12 >> 118 LOAD_FAST 2 ( res )				    								  
							      120 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_PRIME_FACTOR_NUMBER			      FIND_LARGEST_PRIME_FACTOR_NUMBER				    FIND_LARGEST_PRIME_FACTOR_NUMBER				  FIND_LARGEST_PRIME_FACTOR_NUMBER
--							      --							    --								  --
def maxPrimeFactors ( n ) :				      Disassembly of <code object maxPrimeFactors at 0x7f33e26494b0 Disassembly of <code object maxPrimesition at 0x7f2b01639660, error : Traceback (most recent call last):   File
    maxPrime = - 1					      2 0 LOAD_CONST 1 ( - 1 )					    2 0 LOAD_CONST 1 ( - 1 )					  "XLM/dis_script.py", line 59, in <module>	for
    while n % 2 == 0 :					      2 STORE_FAST 1 ( maxPrime )				    2 STORE_FAST 1 ( maxPrime )					  item in run_dis_script():   File "XLM/dis_script.p
	maxPrime = 2					      								    								  y", line 47, in run_dis_script     co_code, co_nlo
	n >>= 1						      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 LOAD_CONST 2 ( - 1 )					  cals, co_varnames, co_names, co_consts, co_linesta
    for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :  >> 6 LOAD_FAST 0 ( n )					    6 LOAD_FAST 0 ( n )						  rts = dis_asm.parse(bytecode) TypeError: cannot un
	while n % i == 0 :				      8 LOAD_CONST 2 ( 2 )					    8 COMPARE_OP 2 ( == )					  pack non-iterable NoneType object
	    maxPrime = i				      10 BINARY_MODULO						    10 POP_JUMP_IF_FALSE 20					  
	    n = n / i					      12 LOAD_CONST 3 ( 0 )					    								  
    if n > 2 :						      14 COMPARE_OP 2 ( == )					    4 12 LOAD_CONST 3 ( 2 )					  
	maxPrime = n					      16 POP_JUMP_IF_FALSE 32					    14 >>= 1							  
    return int ( maxPrime )				      								    16 STORE_FAST 1 ( maxPrime )				  
							      4 18 LOAD_CONST 2 ( 2 )					    18 JUMP_FORWARD 4 ( to 26 )					  
							      20 STORE_FAST 1 ( maxPrime )				    								  
							      								    6 >> 20 LOAD_CONST 4 ( 0 )					  
							      5 22 LOAD_FAST 0 ( n )					    22 STORE_FAST 1 ( maxPrime )				  
							      24 LOAD_CONST 4 ( 1 )					    								  
							      26 INPLACE_RSHIFT						    7 24 SETUP_LOOP 26 ( to 44 )				  
							      28 STORE_FAST 0 ( n )					    >> 26 LOAD_FAST 1 ( maxPrime )				  
							      30 JUMP_ABSOLUTE 6					    28 LOAD_CONST 5 ( 1 )					  
							      >> 32 POP_BLOCK						    30 COMPARE_OP 2 ( == )					  
							      								    32 POP_JUMP_IF_FALSE 42					  
							      6 >> 34 SETUP_LOOP 64 ( to 100 )				    								  
							      36 LOAD_GLOBAL 0 ( range )				    8 34 LOAD_FAST 1 ( maxPrime )				  
							      38 LOAD_CONST 5 ( 3 )					    36 LOAD_CONST 6 ( 2 )					  
							      40 LOAD_GLOBAL 1 ( int )					    38 BINARY_MODULO						  
							      42 LOAD_GLOBAL 2 ( math )					    40 STORE_FAST 1 ( maxPrime )				  
							      44 LOAD_METHOD 3 ( sqrt )					    								  
							      46 LOAD_FAST 0 ( n )					    9 >> 42 LOAD_FAST 1 ( maxPrime )				  
							      48 CALL_METHOD 1						    44 LOAD_CONST 7 ( 2 )					  
							      50 CALL_FUNCTION 1					    46 BINARY_MODULO						  
							      52 LOAD_CONST 4 ( 1 )					    48 STORE_FAST 2 ( maxPrime )				  
							      54 BINARY_ADD						    								  
							      56 LOAD_CONST 2 ( 2 )					    10 50 LOAD_FAST 2 ( maxPrime )				  
							      58 CALL_FUNCTION 3					    52 LOAD_CONST 8 ( 3 )					  
							      60 GET_ITER						    54 BINARY_MODULO						  
							      >> 62 FOR_ITER 34 ( to 98 )				    56 STORE_FAST 3 ( maxPrime )				  
							      64 STORE_FAST 2 ( i )					    								  
							      								    11 58 LOAD_FAST 3 ( maxPrime )				  
							      7 66 SETUP_LOOP 28 ( to 96 )				    60 LOAD_FAST 2 ( maxPrime )					  
							      >> 68 LOAD_FAST 0 ( n )					    62 COMPARE_OP 2 ( == )					  
							      70 LOAD_FAST 2 ( i )					    64 POP_JUMP_IF_FALSE 74					  
							      72 BINARY_MODULO						    								  
							      74 LOAD_CONST 3 ( 0 )					    12 66 LOAD_FAST 3 ( maxPrime )				  
							      76 COMPARE_OP 2 ( == )					    68 LOAD_FAST 2 ( maxPrime )					  
							      78 POP_JUMP_IF_FALSE 94					    70 LOAD_FAST 3 ( maxPrime )					  
							      								    72 BINARY_SUBTRACT						  
							      8 80 LOAD_FAST 2 ( i )					    74 BINARY_MODULO						  
							      82 STORE_FAST 1 ( maxPrime )				    76 RETURN_VALUE						  
							      								    								  
							      9 84 LOAD_FAST 0 ( n )					    13 >> 78 LOAD_FAST 1 ( maxPrime )				  
							      86 LOAD_FAST 2 ( i )					    80 LOAD_FAST 2 ( maxPrime )					  
							      88 BINARY_TRUE_DIVIDE					    82 COMPARE_OP 2 ( == )					  
							      90 STORE_FAST 0 ( n )					    84 POP_JUMP_IF_FALSE 98					  
							      92 JUMP_ABSOLUTE 68					    								  
							      >> 94 POP_BLOCK						    14 86 LOAD_FAST 3 ( maxPrime )				  
							      >> 96 JUMP_ABSOLUTE 62					    88 RETURN_VALUE						  
							      >> 98 POP_BLOCK						    								  
							      								    15 >> 90 LOAD_FAST 1 ( maxPrime )				  
							      10 >> 100 LOAD_FAST 0 ( n )				    92 RETURN_VALUE NEW_LINE					  
							      102 LOAD_CONST 2 ( 2 )					    								  
							      104 COMPARE_OP 4 ( > )					    								  
							      106 POP_JUMP_IF_FALSE 112					    								  
							      								    								  
							      11 108 LOAD_FAST 0 ( n )					    								  
							      110 STORE_FAST 1 ( maxPrime )				    								  
							      								    								  
							      12 >> 112 LOAD_GLOBAL 1 ( int )				    								  
							      114 LOAD_FAST 1 ( maxPrime )				    								  
							      116 CALL_FUNCTION 1					    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		    SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX		  SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
def search ( mat , n , x ) :				      Disassembly of <code object search at 0x7f33e2653ed0, file "< Disassembly of <code object search at 0x7f2b0163dc90, file "< error : Traceback (most recent call last):   File
    i = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  "XLM/dis_script.py", line 60, in <module>	exec
    j = n - 1						      2 STORE_FAST 3 ( i )					    2 STORE_FAST 2 ( i )					  (item)   File "main.py", line 39, in <module>	  Fi
    while ( i < n and j >= 0 ) :			      								    								  le "<dis>", line 2, in search TypeError: '>=' not
	if ( mat [ i ] [ j ] == x ) :			      3 4 LOAD_FAST 1 ( n )					    3 4 LOAD_CONST 2 ( 1 )					  supported between instances of 'int' and 'list'
	    print ( "n Found at " , i , ", " , j )	      6 LOAD_CONST 2 ( 1 )					    6 STORE_FAST 3 ( j )					  
	    return 1					      8 BINARY_SUBTRACT						    								  
	if ( mat [ i ] [ j ] > x ) :			      10 STORE_FAST 4 ( j )					    4 8 SETUP_LOOP 64 ( to 76 )					  
	    j -= 1					      								    10 LOAD_FAST 0 ( mat )					  
	else :						      4 12 SETUP_LOOP 88 ( to 102 )				    12 GET_ITER							  
	    i += 1					      >> 14 LOAD_FAST 3 ( i )					    >> 14 FOR_ITER 64 ( to 74 )					  
    print ( "Element not found" )			      16 LOAD_FAST 1 ( n )					    16 STORE_FAST 4 ( i )					  
    return 0						      18 COMPARE_OP 0 ( < )					    								  
							      20 POP_JUMP_IF_FALSE 100					    5 18 LOAD_FAST 1 ( n )					  
							      22 LOAD_FAST 4 ( j )					    20 LOAD_FAST 4 ( i )					  
							      24 LOAD_CONST 1 ( 0 )					    22 COMPARE_OP 5 ( >= )					  
							      26 COMPARE_OP 5 ( >= )					    24 POP_JUMP_IF_FALSE 30					  
							      28 POP_JUMP_IF_FALSE 100					    								  
							      								    6 26 LOAD_FAST 1 ( n )					  
							      5 30 LOAD_FAST 0 ( mat )					    28 LOAD_FAST 4 ( i )					  
							      32 LOAD_FAST 3 ( i )					    30 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    32 STORE_FAST 5 ( j )					  
							      36 LOAD_FAST 4 ( j )					    								  
							      38 BINARY_SUBSCR						    7 34 LOAD_FAST 1 ( n )					  
							      40 LOAD_FAST 2 ( x )					    36 LOAD_FAST 4 ( i )					  
							      42 COMPARE_OP 2 ( == )					    38 BINARY_SUBSCR						  
							      44 POP_JUMP_IF_FALSE 64					    40 STORE_FAST 6 ( j )					  
							      								    								  
							      6 46 LOAD_GLOBAL 0 ( print )				    8 42 LOAD_FAST 1 ( n )					  
							      48 LOAD_CONST 3 ( 'n Found at ' )				    44 LOAD_FAST 4 ( i )					  
							      50 LOAD_FAST 3 ( i )					    46 BINARY_SUBSCR						  
							      52 LOAD_CONST 4 ( ', ' )					    48 LOAD_FAST 5 ( j )					  
							      54 LOAD_FAST 4 ( j )					    50 COMPARE_OP 0 ( < )					  
							      56 CALL_FUNCTION 4					    52 POP_JUMP_IF_FALSE 14					  
							      58 POP_TOP						    								  
							      								    9 54 LOAD_FAST 1 ( n )					  
							      7 60 LOAD_CONST 2 ( 1 )					    56 LOAD_FAST 4 ( i )					  
							      62 RETURN_VALUE						    58 BINARY_SUBSCR						  
							      								    60 LOAD_FAST 5 ( j )					  
							      8 >> 64 LOAD_FAST 0 ( mat )				    62 BINARY_SUBSCR						  
							      66 LOAD_FAST 3 ( i )					    64 LOAD_FAST 5 ( j )					  
							      68 BINARY_SUBSCR						    66 BINARY_SUBSCR						  
							      70 LOAD_FAST 4 ( j )					    68 LOAD_FAST 5 ( j )					  
							      72 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      74 LOAD_FAST 2 ( x )					    72 LOAD_FAST 5 ( j )					  
							      76 COMPARE_OP 4 ( > )					    74 BINARY_SUBSCR						  
							      78 POP_JUMP_IF_FALSE 90					    76 LOAD_FAST 5 ( j )					  
							      								    78 BINARY_SUBSCR						  
							      9 80 LOAD_FAST 4 ( j )					    80 LOAD_FAST 5 ( j )					  
							      82 LOAD_CONST 2 ( 1 )					    82 BINARY_SUBSCR						  
							      84 INPLACE_SUBTRACT					    84 LOAD_FAST 5 ( j )					  
							      86 STORE_FAST 4 ( j )					    86 STORE_SUBSCR						  
							      88 JUMP_ABSOLUTE 14					    								  
							      								    10 88 LOAD_FAST 1 ( n )					  
							      11 >> 90 LOAD_FAST 3 ( i )				    90 LOAD_FAST 4 ( i )					  
							      92 LOAD_CONST 2 ( 1 )					    92 BINARY_SUBSCR						  
							      94 INPLACE_ADD						    94 LOAD_FAST 5 ( j )					  
							      96 STORE_FAST 3 ( i )					    96 STORE_SUBSCR						  
							      98 JUMP_ABSOLUTE 14					    								  
							      >> 100 POP_BLOCK						    11 98 LOAD_FAST 1 ( n )					  
							      								    100 LOAD_FAST 4 ( i )					  
							      12 >> 102 LOAD_GLOBAL 0 ( print )				    102 BINARY_SUBSCR						  
							      104 LOAD_CONST 5 ( 'Element not found' )			    104 LOAD_FAST 5 ( j )					  
							      106 CALL_FUNCTION 1					    106 STORE_SUBSCR						  
							      108 POP_TOP						    								  
							      								    12 108 LOAD_FAST 1 ( n )					  
							      13 110 LOAD_CONST 1 ( 0 )					    110 LOAD_FAST 4 ( i )					  
							      112 RETURN_VALUE NEW_LINE					    112 BINARY_SUBSCR						  
							      								    114 LOAD_FAST 5 ( j )					  
							      								    116 STORE_SUBSCR						  
							      								    								  
							      								    13 118 LOAD_FAST 1 ( n )					  
							      								    120 LOAD_FAST 4 ( i )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_FAST 5 ( j )					  
							      								    126 STORE_SUBSCR						  
							      								    128 JUMP_ABSOLUTE 14					  
							      								    >> 130 POP_BLOCK						  
							      								    >> 132 JUMP_ABSOLUTE 14					  
							      								    >> 134 POP_BLOCK						  
							      								    								  
							      								    14 >> 136 LOAD_FAST 2 ( i )					  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	      SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M	    SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M		  SUBSEQUENCES_SIZE_<unk> ARRAY_WHOSE_SUM_DIVISIBLE_M
--							      --							    --								  --
def coutSubSeq ( A , N , M ) :				      Disassembly of <code object coutSubSeq at 0x7f33e2649a50, fil Disassembly of <code object coutSubSeq at 0x7f2b01639660, fil script_not_found : None
    sum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    ans = 0						      2 STORE_FAST 3 ( sum )					    2 STORE_FAST 2 ( ans )					  
    for i in range ( 0 , N ) :				      								    								  
	for j in range ( i + 1 , N ) :			      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 2 ( 0 )					  
	    for k in range ( j + 1 , N ) :		      6 STORE_FAST 4 ( ans )					    6 STORE_FAST 3 ( ans )					  
		sum = A [ i ] + A [ j ] + A [ k ]	      								    								  
		if ( sum % M == 0 ) :			      4 8 SETUP_LOOP 110 ( to 120 )				    4 8 SETUP_LOOP 64 ( to 76 )					  
		    ans = ans + 1			      10 LOAD_GLOBAL 0 ( range )				    10 LOAD_GLOBAL 0 ( range )					  
    return ans						      12 LOAD_CONST 1 ( 0 )					    12 LOAD_CONST 1 ( 0 )					  
							      14 LOAD_FAST 1 ( N )					    14 LOAD_FAST 0 ( A )					  
							      16 CALL_FUNCTION 2					    16 CALL_FUNCTION 2						  
							      18 GET_ITER						    18 GET_ITER							  
							      >> 20 FOR_ITER 96 ( to 118 )				    >> 20 FOR_ITER 64 ( to 74 )					  
							      22 STORE_FAST 5 ( i )					    22 STORE_FAST 4 ( i )					  
							      								    								  
							      5 24 SETUP_LOOP 90 ( to 116 )				    5 24 SETUP_LOOP 48 ( to 72 )				  
							      26 LOAD_GLOBAL 0 ( range )				    26 LOAD_GLOBAL 0 ( range )					  
							      28 LOAD_FAST 5 ( i )					    28 LOAD_CONST 1 ( 0 )					  
							      30 LOAD_CONST 2 ( 1 )					    30 LOAD_FAST 1 ( N )					  
							      32 BINARY_ADD						    32 CALL_FUNCTION 2						  
							      34 LOAD_FAST 1 ( N )					    34 GET_ITER							  
							      36 CALL_FUNCTION 2					    >> 36 FOR_ITER 40 ( to 70 )					  
							      38 GET_ITER						    38 STORE_FAST 5 ( j )					  
							      >> 40 FOR_ITER 72 ( to 114 )				    								  
							      42 STORE_FAST 6 ( j )					    6 40 LOAD_FAST 2 ( ans )					  
							      								    42 LOAD_METHOD 1 ( append )					  
							      6 44 SETUP_LOOP 66 ( to 112 )				    44 LOAD_FAST 4 ( i )					  
							      46 LOAD_GLOBAL 0 ( range )				    46 LOAD_FAST 5 ( j )					  
							      48 LOAD_FAST 6 ( j )					    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 2 ( 1 )					    50 CALL_METHOD 1						  
							      52 BINARY_ADD						    52 POP_TOP							  
							      54 LOAD_FAST 1 ( N )					    								  
							      56 CALL_FUNCTION 2					    7 54 LOAD_FAST 2 ( ans )					  
							      58 GET_ITER						    56 LOAD_METHOD 1 ( append )					  
							      >> 60 FOR_ITER 48 ( to 110 )				    58 LOAD_FAST 4 ( i )					  
							      62 STORE_FAST 7 ( k )					    60 LOAD_FAST 5 ( j )					  
							      								    62 BINARY_SUBSCR						  
							      7 64 LOAD_FAST 0 ( A )					    64 CALL_METHOD 1						  
							      66 LOAD_FAST 5 ( i )					    66 POP_TOP							  
							      68 BINARY_SUBSCR						    68 JUMP_ABSOLUTE 36						  
							      70 LOAD_FAST 0 ( A )					    >> 70 POP_BLOCK						  
							      72 LOAD_FAST 6 ( j )					    >> 72 JUMP_ABSOLUTE 20					  
							      74 BINARY_SUBSCR						    >> 74 POP_BLOCK						  
							      76 BINARY_ADD						    								  
							      78 LOAD_FAST 0 ( A )					    8 >> 76 LOAD_FAST 2 ( ans )					  
							      80 LOAD_FAST 7 ( k )					    78 RETURN_VALUE NEW_LINE					  
							      82 BINARY_SUBSCR						    								  
							      84 BINARY_ADD						    								  
							      86 STORE_FAST 3 ( sum )					    								  
							      								    								  
							      8 88 LOAD_FAST 3 ( sum )					    								  
							      90 LOAD_FAST 2 ( M )					    								  
							      92 BINARY_MODULO						    								  
							      94 LOAD_CONST 1 ( 0 )					    								  
							      96 COMPARE_OP 2 ( == )					    								  
							      98 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      9 100 LOAD_FAST 4 ( ans )					    								  
							      102 LOAD_CONST 2 ( 1 )					    								  
							      104 BINARY_ADD						    								  
							      106 STORE_FAST 4 ( ans )					    								  
							      108 JUMP_ABSOLUTE 60					    								  
							      >> 110 POP_BLOCK						    								  
							      >> 112 JUMP_ABSOLUTE 40					    								  
							      >> 114 POP_BLOCK						    								  
							      >> 116 JUMP_ABSOLUTE 20					    								  
							      >> 118 POP_BLOCK						    								  
							      								    								  
							      10 >> 120 LOAD_FAST 4 ( ans )				    								  
							      122 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		      CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		    CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		  CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE
--							      --							    --								  --
def convertOpposite ( str ) :				      Disassembly of <code object convertOpposite at 0x7f33e2644930 Disassembly of <code object convertOpposite at 0x7f2b0163dc90 script_not_found : None
    ln = len ( str )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for i in range ( ln ) :				      2 LOAD_FAST 0 ( str )					    2 LOAD_FAST 0 ( str )					  
	if str [ i ] >= 'a' and str [ i ] <= 'z' :	      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    str [ i ] = chr ( ord ( str [ i ] ) - 32 )	      6 STORE_FAST 1 ( ln )					    6 STORE_FAST 1 ( ln )					  
	elif str [ i ] >= 'A' and str [ i ] <= 'Z' :	      								    								  
	    str [ i ] = chr ( ord ( str [ i ] ) + 32 )	      3 8 SETUP_LOOP 114 ( to 124 )				    3 8 SETUP_LOOP 64 ( to 76 )					  
							      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
							      12 LOAD_FAST 1 ( ln )					    12 LOAD_FAST 1 ( ln )					  
							      14 CALL_FUNCTION 1					    14 CALL_FUNCTION 1						  
							      16 GET_ITER						    16 GET_ITER							  
							      >> 18 FOR_ITER 102 ( to 122 )				    >> 18 FOR_ITER 56 ( to 74 )					  
							      20 STORE_FAST 2 ( i )					    20 STORE_FAST 2 ( i )					  
							      								    								  
							      4 22 LOAD_FAST 0 ( str )					    4 22 LOAD_FAST 0 ( str )					  
							      24 LOAD_FAST 2 ( i )					    24 LOAD_FAST 2 ( i )					  
							      26 BINARY_SUBSCR						    26 BINARY_SUBSCR						  
							      28 LOAD_CONST 1 ( 'a' )					    28 LOAD_CONST 1 ( 'a' )					  
							      30 COMPARE_OP 5 ( >= )					    30 COMPARE_OP 2 ( == )					  
							      32 POP_JUMP_IF_FALSE 72					    32 POP_JUMP_IF_FALSE 42					  
							      34 LOAD_FAST 0 ( str )					    								  
							      36 LOAD_FAST 2 ( i )					    5 34 LOAD_FAST 0 ( str )					  
							      38 BINARY_SUBSCR						    36 LOAD_FAST 2 ( i )					  
							      40 LOAD_CONST 2 ( 'z' )					    38 BINARY_SUBSCR						  
							      42 COMPARE_OP 1 ( <= )					    40 LOAD_CONST 2 ( 'a' )					  
							      44 POP_JUMP_IF_FALSE 72					    42 COMPARE_OP 2 ( == )					  
							      								    44 POP_JUMP_IF_FALSE 18					  
							      5 46 LOAD_GLOBAL 2 ( chr )				    								  
							      48 LOAD_GLOBAL 3 ( ord )					    6 46 LOAD_FAST 0 ( str )					  
							      50 LOAD_FAST 0 ( str )					    48 LOAD_FAST 2 ( i )					  
							      52 LOAD_FAST 2 ( i )					    50 BINARY_SUBSCR						  
							      54 BINARY_SUBSCR						    52 LOAD_CONST 2 ( 'a' )					  
							      56 CALL_FUNCTION 1					    54 COMPARE_OP 2 ( == )					  
							      58 LOAD_CONST 3 ( 32 )					    56 POP_JUMP_IF_FALSE 18					  
							      60 BINARY_SUBTRACT					    								  
							      62 CALL_FUNCTION 1					    7 58 LOAD_FAST 0 ( str )					  
							      64 LOAD_FAST 0 ( str )					    60 LOAD_FAST 2 ( i )					  
							      66 LOAD_FAST 2 ( i )					    62 BINARY_SUBSCR						  
							      68 STORE_SUBSCR						    64 LOAD_CONST 2 ( 'a' )					  
							      70 JUMP_ABSOLUTE 18					    66 COMPARE_OP 2 ( == )					  
							      								    68 POP_JUMP_IF_FALSE 18					  
							      6 >> 72 LOAD_FAST 0 ( str )				    								  
							      74 LOAD_FAST 2 ( i )					    8 70 LOAD_FAST 0 ( str )					  
							      76 BINARY_SUBSCR						    72 LOAD_FAST 2 ( i )					  
							      78 LOAD_CONST 4 ( 'A' )					    74 BINARY_SUBSCR						  
							      80 COMPARE_OP 5 ( >= )					    76 LOAD_CONST 2 ( 'a' )					  
							      82 POP_JUMP_IF_FALSE 18					    78 COMPARE_OP 2 ( == )					  
							      84 LOAD_FAST 0 ( str )					    80 POP_JUMP_IF_FALSE 18					  
							      86 LOAD_FAST 2 ( i )					    								  
							      88 BINARY_SUBSCR						    9 82 LOAD_FAST 0 ( str )					  
							      90 LOAD_CONST 5 ( 'Z' )					    84 LOAD_FAST 2 ( i )					  
							      92 COMPARE_OP 1 ( <= )					    86 BINARY_SUBSCR						  
							      94 POP_JUMP_IF_FALSE 18					    88 LOAD_CONST 2 ( 'a' )					  
							      								    90 COMPARE_OP 2 ( == )					  
							      7 96 LOAD_GLOBAL 2 ( chr )				    92 POP_JUMP_IF_FALSE 18					  
							      98 LOAD_GLOBAL 3 ( ord )					    								  
							      100 LOAD_FAST 0 ( str )					    10 94 LOAD_FAST 0 ( str )					  
							      102 LOAD_FAST 2 ( i )					    96 LOAD_FAST 2 ( i )					  
							      104 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      106 CALL_FUNCTION 1					    100 LOAD_CONST 2 ( 'a' )					  
							      108 LOAD_CONST 3 ( 32 )					    102 COMPARE_OP 2 ( == )					  
							      110 BINARY_ADD						    104 POP_JUMP_IF_FALSE 18					  
							      112 CALL_FUNCTION 1					    								  
							      114 LOAD_FAST 0 ( str )					    11 106 LOAD_FAST 0 ( str )					  
							      116 LOAD_FAST 2 ( i )					    108 LOAD_FAST 2 ( i )					  
							      118 STORE_SUBSCR						    110 BINARY_SUBSCR						  
							      120 JUMP_ABSOLUTE 18					    112 LOAD_CONST 2 ( 'a' )					  
							      >> 122 POP_BLOCK						    114 COMPARE_OP 2 ( == )					  
							      >> 124 LOAD_CONST 0 ( None )				    116 POP_JUMP_IF_FALSE 18					  
							      126 RETURN_VALUE NEW_LINE					    								  
							      								    12 118 LOAD_FAST 0 ( str )					  
							      								    120 LOAD_FAST 2 ( i )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 LOAD_CONST 2 ( 'a' )					  
							      								    126 COMPARE_OP 2 ( == )					  
							      								    128 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    13 130 LOAD_FAST 0 ( str )					  
							      								    132 LOAD_FAST 2 ( i )					  
							      								    134 BINARY_SUBSCR						  
							      								    136 LOAD_CONST 2 ( 'a' )					  
							      								    138 COMPARE_OP 2 ( == )					  
							      								    140 POP_JUMP_IF_FALSE 18					  
							      								    								  
							      								    14 142 LOAD_FAST 0 ( str )					  
							      								    144 LOAD_FAST 2 ( i )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 RETURN_VALUE						  
							      								    >> 150 JUMP_ABSOLUTE 18					  
							      								    >> 152 POP_BLOCK						  
							      								    >> 154 LOAD_CONST						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			      SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			    SMALLEST_SUBSET_SUM_GREATER_ELEMENTS			  SMALLEST_SUBSET_SUM_GREATER_ELEMENTS
--							      --							    --								  --
def minElements ( arr , n ) :				      Disassembly of <code object minElements at 0x7f33e2644930, fi Disassembly of <code object minElements at 0x7f2b0163dc90, fi script_not_found : None
    halfSum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( halfSum )				    2 STORE_FAST 2 ( halfSum )					  
	halfSum = halfSum + arr [ i ]			      								    								  
    halfSum = int ( halfSum / 2 )			      3 4 SETUP_LOOP 28 ( to 34 )				    3 4 SETUP_LOOP 76 ( to 80 )					  
    arr.sort ( reverse = True )				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
    res = 0						      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
    curr_sum = 0					      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    for i in range ( n ) :				      12 GET_ITER						    12 GET_ITER							  
	curr_sum += arr [ i ]				      >> 14 FOR_ITER 16 ( to 32 )				    >> 14 FOR_ITER 76 ( to 78 )					  
	res += 1					      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
	if curr_sum > halfSum :				      								    								  
	    return res					      4 18 LOAD_FAST 2 ( halfSum )				    4 18 LOAD_FAST 3 ( i )					  
    return res						      20 LOAD_FAST 0 ( arr )					    20 LOAD_FAST 0 ( arr )					  
							      22 LOAD_FAST 3 ( i )					    22 LOAD_FAST 3 ( i )					  
							      24 BINARY_SUBSCR						    24 BINARY_SUBSCR						  
							      26 BINARY_ADD						    26 INPLACE_ADD						  
							      28 STORE_FAST 2 ( halfSum )				    28 STORE_FAST 4 ( curr_left )				  
							      30 JUMP_ABSOLUTE 14					    								  
							      >> 32 POP_BLOCK						    5 30 LOAD_FAST 2 ( halfSum )				  
							      								    32 LOAD_FAST 3 ( i )					  
							      5 >> 34 LOAD_GLOBAL 1 ( int )				    34 BINARY_SUBSCR						  
							      36 LOAD_FAST 2 ( halfSum )				    36 STORE_FAST 5 ( curr_left )				  
							      38 LOAD_CONST 2 ( 2 )					    								  
							      40 BINARY_TRUE_DIVIDE					    6 38 LOAD_FAST 4 ( curr_left )				  
							      42 CALL_FUNCTION 1					    40 LOAD_FAST 5 ( curr_left )				  
							      44 STORE_FAST 2 ( halfSum )				    42 BINARY_SUBSCR						  
							      								    44 STORE_FAST 6 ( curr_left )				  
							      6 46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_ATTR 2 ( sort )					    7 46 LOAD_FAST 6 ( curr_left )				  
							      50 LOAD_CONST 3 ( True )					    48 LOAD_FAST 6 ( curr_left )				  
							      52 LOAD_CONST 4 ( ( 'reverse' , ) )			    50 BINARY_SUBSCR						  
							      54 CALL_FUNCTION_KW 1					    52 LOAD_FAST 5 ( curr_left )				  
							      56 POP_TOP						    54 COMPARE_OP 4 ( > )					  
							      								    56 POP_JUMP_IF_FALSE 14					  
							      7 58 LOAD_CONST 1 ( 0 )					    								  
							      60 STORE_FAST 4 ( res )					    8 58 LOAD_FAST 6 ( curr_left )				  
							      								    60 LOAD_FAST 5 ( curr_left )				  
							      8 62 LOAD_CONST 1 ( 0 )					    62 BINARY_SUBSCR						  
							      64 STORE_FAST 5 ( curr_sum )				    64 LOAD_FAST 5 ( curr_left )				  
							      								    66 BINARY_SUBSCR						  
							      9 66 SETUP_LOOP 48 ( to 116 )				    68 LOAD_FAST 5 ( curr_left )				  
							      68 LOAD_GLOBAL 0 ( range )				    70 STORE_SUBSCR						  
							      70 LOAD_FAST 1 ( n )					    								  
							      72 CALL_FUNCTION 1					    9 72 LOAD_FAST 6 ( curr_left )				  
							      74 GET_ITER						    74 LOAD_FAST 6 ( curr_left )				  
							      >> 76 FOR_ITER 36 ( to 114 )				    76 BINARY_SUBSCR						  
							      78 STORE_FAST 3 ( i )					    78 LOAD_FAST 5 ( curr_left )				  
							      								    80 STORE_SUBSCR						  
							      10 80 LOAD_FAST 5 ( curr_sum )				    								  
							      82 LOAD_FAST 0 ( arr )					    10 82 LOAD_FAST 6 ( curr_left )				  
							      84 LOAD_FAST 3 ( i )					    84 LOAD_FAST 4 ( curr_left )				  
							      86 BINARY_SUBSCR						    86 STORE_SUBSCR						  
							      88 INPLACE_ADD						    88 JUMP_ABSOLUTE 14						  
							      90 STORE_FAST 5 ( curr_sum )				    >> 90 POP_BLOCK						  
							      								    								  
							      11 92 LOAD_FAST 4 ( res )					    11 >> 92 LOAD_FAST 2 ( halfSum )				  
							      94 LOAD_CONST 5 ( 1 )					    94 LOAD_FAST 6 ( curr_left )				  
							      96 INPLACE_ADD						    96 STORE_SUBSCR						  
							      98 STORE_FAST 4 ( res )					    98 LOAD_CONST 0 ( None )					  
							      								    100 RETURN_VALUE NEW_LINE					  
							      12 100 LOAD_FAST 5 ( curr_sum )				    								  
							      102 LOAD_FAST 2 ( halfSum )				    								  
							      104 COMPARE_OP 4 ( > )					    								  
							      106 POP_JUMP_IF_FALSE 76					    								  
							      								    								  
							      13 108 LOAD_FAST 4 ( res )				    								  
							      110 RETURN_VALUE						    								  
							      112 JUMP_ABSOLUTE 76					    								  
							      >> 114 POP_BLOCK						    								  
							      								    								  
							      14 >> 116 LOAD_FAST 4 ( res )				    								  
							      118 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			      PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			    PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			  PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
def sequence ( n ) :					      Disassembly of <code object sequence at 0x7f33e2653f60, file  Disassembly of <code object sequence at 0x7f2b0163dc90, file  script_not_found : None
    f = [ 0 , 1 , 1 ]					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    print ( f [ 1 ] , end = " " ) ,			      2 LOAD_CONST 2 ( 1 )					    2 LOAD_CONST 2 ( ( '' , ) )					  
    print ( f [ 2 ] , end = " " ) ,			      4 LOAD_CONST 2 ( 1 )					    4 IMPORT_NAME 0 ( print )					  
    for i in range ( 3 , n + 1 ) :			      6 BUILD_LIST 3						    6 IMPORT_FROM 1 ( f )					  
	f.append ( f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  8 STORE_FAST 1 ( f )					    8 STORE_FAST 0 ( f )					  
	print ( f [ i ] , end = " " ) ,			      								    10 POP_TOP							  
							      3 10 LOAD_GLOBAL 0 ( print )				    								  
							      12 LOAD_FAST 1 ( f )					    3 12 LOAD_GLOBAL 2 ( print )				  
							      14 LOAD_CONST 2 ( 1 )					    14 LOAD_FAST 0 ( f )					  
							      16 BINARY_SUBSCR						    16 LOAD_CONST 1 ( 0 )					  
							      18 LOAD_CONST 3 ( ' ' )					    18 BINARY_SUBSCR						  
							      20 LOAD_CONST 4 ( ( 'end' , ) )				    20 CALL_FUNCTION 1						  
							      22 CALL_FUNCTION_KW 2					    22 POP_TOP							  
							      24 BUILD_TUPLE 1						    								  
							      26 POP_TOP						    4 24 LOAD_GLOBAL 2 ( print )				  
							      								    26 LOAD_FAST 0 ( n )					  
							      4 28 LOAD_GLOBAL 0 ( print )				    28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_FAST 1 ( f )					    30 BINARY_SUBSCR						  
							      32 LOAD_CONST 5 ( 2 )					    32 CALL_FUNCTION 1						  
							      34 BINARY_SUBSCR						    34 POP_TOP							  
							      36 LOAD_CONST 3 ( ' ' )					    								  
							      38 LOAD_CONST 4 ( ( 'end' , ) )				    5 36 LOAD_GLOBAL 2 ( print )				  
							      40 CALL_FUNCTION_KW 2					    38 LOAD_FAST 0 ( n )					  
							      42 BUILD_TUPLE 1						    40 LOAD_CONST 2 ( 1 )					  
							      44 POP_TOP						    42 BINARY_SUBSCR						  
							      								    44 CALL_FUNCTION 1						  
							      5 46 SETUP_LOOP 82 ( to 130 )				    46 POP_TOP							  
							      48 LOAD_GLOBAL 1 ( range )				    								  
							      50 LOAD_CONST 6 ( 3 )					    6 48 LOAD_GLOBAL 2 ( print )				  
							      52 LOAD_FAST 0 ( n )					    50 LOAD_FAST 0 ( n )					  
							      54 LOAD_CONST 2 ( 1 )					    52 LOAD_CONST 2 ( 1 )					  
							      56 BINARY_ADD						    54 BINARY_SUBSCR						  
							      58 CALL_FUNCTION 2					    56 CALL_FUNCTION 1						  
							      60 GET_ITER						    58 POP_TOP							  
							      >> 62 FOR_ITER 64 ( to 128 )				    								  
							      64 STORE_FAST 2 ( i )					    7 60 LOAD_GLOBAL 2 ( print )				  
							      								    62 LOAD_FAST 0 ( n )					  
							      6 66 LOAD_FAST 1 ( f )					    64 LOAD_CONST 2 ( 1 )					  
							      68 LOAD_METHOD 2 ( append )				    66 BINARY_SUBSCR						  
							      70 LOAD_FAST 1 ( f )					    68 CALL_FUNCTION 1						  
							      72 LOAD_FAST 1 ( f )					    70 POP_TOP							  
							      74 LOAD_FAST 2 ( i )					    								  
							      76 LOAD_CONST 2 ( 1 )					    8 72 LOAD_GLOBAL 2 ( print )				  
							      78 BINARY_SUBTRACT					    74 LOAD_FAST 0 ( n )					  
							      80 BINARY_SUBSCR						    76 LOAD_CONST 2 ( 1 )					  
							      82 BINARY_SUBSCR						    78 BINARY_SUBSCR						  
							      84 LOAD_FAST 1 ( f )					    80 CALL_FUNCTION 1						  
							      86 LOAD_FAST 2 ( i )					    82 POP_TOP							  
							      88 LOAD_FAST 1 ( f )					    								  
							      90 LOAD_FAST 2 ( i )					    9 84 LOAD_GLOBAL 2 ( print )				  
							      92 LOAD_CONST 2 ( 1 )					    86 LOAD_FAST 0 ( n )					  
							      94 BINARY_SUBTRACT					    88 LOAD_CONST 2 ( 1 )					  
							      96 BINARY_SUBSCR						    90 BINARY_SUBSCR						  
							      98 BINARY_SUBTRACT					    92 CALL_FUNCTION 1						  
							      100 BINARY_SUBSCR						    94 POP_TOP							  
							      102 BINARY_ADD						    								  
							      104 CALL_METHOD 1						    10 96 LOAD_GLOBAL 2 ( print )				  
							      106 POP_TOP						    98 LOAD_FAST 0 ( n )					  
							      								    100 LOAD_CONST 2 ( 1 )					  
							      7 108 LOAD_GLOBAL 0 ( print )				    102 BINARY_SUBSCR						  
							      110 LOAD_FAST 1 ( f )					    104 CALL_FUNCTION 1						  
							      112 LOAD_FAST 2 ( i )					    106 POP_TOP							  
							      114 BINARY_SUBSCR						    								  
							      116 LOAD_CONST 3 ( ' ' )					    11 108 LOAD_GLOBAL 2 ( print )				  
							      118 LOAD_CONST 4 ( ( 'end' , ) )				    110 LOAD_FAST 0 ( n )					  
							      120 CALL_FUNCTION_KW 2					    112 LOAD_CONST 2 ( 1 )					  
							      122 BUILD_TUPLE 1						    114 BINARY_SUBSCR						  
							      124 POP_TOP						    116 CALL_FUNCTION 1						  
							      126 JUMP_ABSOLUTE 62					    118 POP_TOP							  
							      >> 128 POP_BLOCK						    								  
							      >> 130 LOAD_CONST 0 ( None )				    12 120 LOAD_GLOBAL 2 ( print )				  
							      132 RETURN_VALUE NEW_LINE					    122 LOAD_FAST 0 ( n )					  
							      								    124 LOAD_CONST 2 ( 1 )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 CALL_FUNCTION 1						  
							      								    130 POP_TOP							  
							      								    								  
							      								    13 132 LOAD_GLOBAL 2 ( print )				  
							      								    134 LOAD_FAST 0 ( n )					  
							      								    136 CALL_FUNCTION 1						  
							      								    138 POP_TOP							  
							      								    								  
							      								    14 140 LOAD_GLOBAL 2 ( print )				  
							      								    142 LOAD_FAST 0 ( n )					  
							      								    144 CALL_FUNCTION 1						  
							      								    146 POP_TOP							  
							      								    								  
							      								    15 148 LOAD_FAST 0 ( n )					  
							      								    150 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE
--							      --							    --								  --
def eggDrop ( n , k ) :					      Disassembly of <code object eggDrop at 0x7f33e2653f60, file " Disassembly of <code object eggDrop at 0x7f2b01639660, file " script_not_found : None
    if ( k == 1 or k == 0 ) :				      2 0 LOAD_FAST 1 ( k )					    2 0 LOAD_FAST 0 ( n )					  
	return k					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n == 1 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return k					      6 POP_JUMP_IF_TRUE 16					    6 POP_JUMP_IF_FALSE 12					  
    min = sys.maxsize					      8 LOAD_FAST 1 ( k )					    								  
    for x in range ( 1 , k + 1 ) :			      10 LOAD_CONST 2 ( 0 )					    3 8 LOAD_FAST 0 ( n )					  
	res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , 12 COMPARE_OP 2 ( == )					    10 LOAD_CONST 2 ( 0 )					  
	if ( res < min ) :				      14 POP_JUMP_IF_FALSE 20					    10 COMPARE_OP 2 ( == )					  
	    min = res					      								    12 POP_JUMP_IF_FALSE 20					  
    return min + 1					      3 >> 16 LOAD_FAST 1 ( k )					    								  
							      18 RETURN_VALUE						    4 14 LOAD_FAST 0 ( n )					  
							      								    16 LOAD_CONST 1 ( 1 )					  
							      4 >> 20 LOAD_FAST 0 ( n )					    18 COMPARE_OP 2 ( == )					  
							      22 LOAD_CONST 1 ( 1 )					    >> 20 RETURN_VALUE						  
							      24 COMPARE_OP 2 ( == )					    								  
							      26 POP_JUMP_IF_FALSE 32					    5 >> 22 LOAD_GLOBAL 0 ( sys )				  
							      								    24 LOAD_ATTR 1 ( maxsize )					  
							      5 28 LOAD_FAST 1 ( k )					    26 LOAD_CONST 3 ( 2 )					  
							      30 RETURN_VALUE						    28 COMPARE_OP 2 ( == )					  
							      								    30 POP_JUMP_IF_FALSE 36					  
							      6 >> 32 LOAD_GLOBAL 0 ( sys )				    								  
							      34 LOAD_ATTR 1 ( maxsize )				    6 32 LOAD_FAST 0 ( n )					  
							      36 STORE_FAST 2 ( min )					    34 LOAD_CONST 1 ( 1 )					  
							      								    >> 36 COMPARE_OP 2 ( == )					  
							      7 38 SETUP_LOOP 68 ( to 108 )				    38 POP_JUMP_IF_FALSE 48					  
							      40 LOAD_GLOBAL 2 ( range )				    								  
							      42 LOAD_CONST 1 ( 1 )					    7 40 LOAD_FAST 0 ( n )					  
							      44 LOAD_FAST 1 ( k )					    42 LOAD_CONST 2 ( 0 )					  
							      46 LOAD_CONST 1 ( 1 )					    44 COMPARE_OP 2 ( == )					  
							      48 BINARY_ADD						    46 POP_JUMP_IF_FALSE 48					  
							      50 CALL_FUNCTION 2					    								  
							      52 GET_ITER						    8 8 LOAD_FAST 0 ( n )					  
							      >> 54 FOR_ITER 50 ( to 106 )				    50 LOAD_CONST 2 ( 0 )					  
							      56 STORE_FAST 3 ( x )					    52 BINARY_SUBSCR						  
							      								    54 RETURN_VALUE						  
							      8 58 LOAD_GLOBAL 3 ( max )				    								  
							      60 LOAD_GLOBAL 4 ( eggDrop )				    9 >> 56 LOAD_FAST 0 ( n )					  
							      62 LOAD_FAST 0 ( n )					    58 LOAD_CONST 2 ( 0 )					  
							      64 LOAD_CONST 1 ( 1 )					    60 COMPARE_OP 2 ( == )					  
							      66 BINARY_SUBTRACT					    62 POP_JUMP_IF_FALSE 74					  
							      68 LOAD_FAST 3 ( x )					    								  
							      70 LOAD_CONST 1 ( 1 )					    10 64 LOAD_FAST 0 ( n )					  
							      72 BINARY_SUBTRACT					    66 LOAD_CONST 2 ( 0 )					  
							      74 CALL_FUNCTION 2					    68 BINARY_SUBSCR						  
							      76 LOAD_GLOBAL 4 ( eggDrop )				    70 RETURN_VALUE						  
							      78 LOAD_FAST 0 ( n )					    								  
							      80 LOAD_FAST 1 ( k )					    11 >> 72 LOAD_FAST 0 ( n )					  
							      82 LOAD_FAST 3 ( x )					    74 LOAD_CONST 2 ( 0 )					  
							      84 BINARY_SUBTRACT					    76 COMPARE_OP 2 ( == )					  
							      86 CALL_FUNCTION 2					    78 POP_JUMP_IF_FALSE 92					  
							      88 CALL_FUNCTION 2					    								  
							      90 STORE_FAST 4 ( res )					    12 80 LOAD_FAST 0 ( n )					  
							      								    82 RETURN_VALUE						  
							      9 92 LOAD_FAST 4 ( res )					    								  
							      94 LOAD_FAST 2 ( min )					    13 >> 84 LOAD_FAST 0 ( n )					  
							      96 COMPARE_OP 0 ( < )					    86 LOAD_CONST 2 ( 0 )					  
							      98 POP_JUMP_IF_FALSE 54					    88 COMPARE_OP 2 ( == )					  
							      								    90 POP_JUMP_IF_FALSE 92					  
							      10 100 LOAD_FAST 4 ( res )				    								  
							      102 STORE_FAST 2 ( min )					    14 92 LOAD_FAST 0 ( n )					  
							      104 JUMP_ABSOLUTE 54					    94 RETURN_VALUE						  
							      >> 106 POP_BLOCK						    								  
							      								    15 >> 96 LOAD_FAST 0 ( n )					  
							      11 >> 108 LOAD_FAST 2 ( min )				    98 LOAD_CONST 2 ( 0 )					  
							      110 LOAD_CONST 1 ( 1 )					    100 COMPARE_OP 2 ( == )					  
							      112 BINARY_ADD						    102 POP_JUMP_IF_FALSE 120					  
							      114 RETURN_VALUE NEW_LINE					    								  
							      								    16 104 LOAD_FAST 0 ( n )					  
							      								    106 RETURN_VALUE						  
							      								    								  
							      								    17 >> 108 LOAD_FAST 0 ( n )					  
							      								    110 LOAD_CONST 2 ( 0 )					  
							      								    112 COMPARE_OP 2 ( == )					  
							      								    114 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    18 116 LOAD_FAST 0 ( n )					  
							      								    118 RETURN_VALUE						  
							      								    								  
							      								    19 >> 120 LOAD_FAST 0 ( n )					  
							      								    122 LOAD_CONST 2 ( 0 )					  
							      								    124 COMPARE_OP 2 ( == )					  
							      								    126 POP_JUMP_IF_FALSE 120					  
							      								    								  
							      								    20 128 LOAD_FAST 0 ( n )					  
							      								    130 RETURN_VALUE						  
							      								    								  
							      								    21 >> 132 LOAD_GLOBAL 2 ( sys )				  
							      								    134 LOAD_METHOD 3 ( exit )					  
							      								    136 LOAD_CONST 3 ( 2 )					  
							      								    138 CALL_METHOD 1						  
							      								    140 POP_TOP							  
							      								    								  
							      								    22 22 LOAD_FAST 0 ( n )					  
							      								    142 RETURN_VALUE						  
							      								    >> 144 LOAD_CONST 0 ( None )				  
							      								    146 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS     RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	    RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	  RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS
--							      --							    --								  --
def countSubstrs ( str , i , j , n ) :			      Disassembly of <code object countSubstrs at 0x7f33e2644f60, f Disassembly of <code object countSubstrs at 0x7f2b01639660, f script_not_found : None
    if ( n == 1 ) :					      2 0 LOAD_FAST 3 ( n )					    2 0 LOAD_FAST 0 ( str )					  
	return 1					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    if ( n <= 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return 0					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    res = ( countSubstrs ( str , i + 1 , j , n - 1 ) + countS 								    								  
    if ( str [ i ] == str [ j ] ) :			      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
	res += 1					      10 RETURN_VALUE						    10 RETURN_VALUE						  
    return res						      								    								  
							      4 >> 12 LOAD_FAST 3 ( n )					    4 >> 12 LOAD_FAST 0 ( str )					  
							      14 LOAD_CONST 2 ( 0 )					    14 LOAD_CONST 2 ( 0 )					  
							      16 COMPARE_OP 1 ( <= )					    16 COMPARE_OP 1 ( <= )					  
							      18 POP_JUMP_IF_FALSE 24					    18 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 20 LOAD_CONST 2 ( 0 )					    5 20 LOAD_CONST 1 ( 1 )					  
							      22 RETURN_VALUE						    22 RETURN_VALUE						  
							      								    								  
							      6 >> 24 LOAD_GLOBAL 0 ( countSubstrs )			    6 >> 24 LOAD_FAST 0 ( str )					  
							      26 LOAD_FAST 0 ( str )					    26 LOAD_CONST 2 ( 0 )					  
							      28 LOAD_FAST 1 ( i )					    28 COMPARE_OP 1 ( <= )					  
							      30 LOAD_CONST 1 ( 1 )					    30 POP_JUMP_IF_FALSE 36					  
							      32 BINARY_ADD						    								  
							      34 LOAD_FAST 2 ( j )					    7 32 LOAD_CONST 1 ( 1 )					  
							      36 LOAD_FAST 3 ( n )					    34 RETURN_VALUE						  
							      38 LOAD_CONST 1 ( 1 )					    								  
							      40 BINARY_SUBTRACT					    8 >> 36 LOAD_FAST 0 ( str )					  
							      42 CALL_FUNCTION 4					    38 LOAD_CONST 2 ( 0 )					  
							      44 LOAD_GLOBAL 0 ( countSubstrs )				    40 BINARY_SUBSCR						  
							      46 LOAD_FAST 0 ( str )					    42 LOAD_CONST 3 ( ' ' )					  
							      48 LOAD_FAST 1 ( i )					    44 COMPARE_OP 2 ( == )					  
							      50 LOAD_FAST 2 ( j )					    46 POP_JUMP_IF_FALSE 48					  
							      52 LOAD_CONST 1 ( 1 )					    								  
							      54 BINARY_SUBTRACT					    9 48 LOAD_CONST 1 ( 1 )					  
							      56 LOAD_FAST 3 ( n )					    50 RETURN_VALUE						  
							      58 LOAD_CONST 1 ( 1 )					    								  
							      60 BINARY_SUBTRACT					    10 >> 52 LOAD_CONST 1 ( 1 )					  
							      62 CALL_FUNCTION 4					    54 RETURN_VALUE						  
							      64 BINARY_ADD						    								  
							      66 LOAD_GLOBAL 0 ( countSubstrs )				    11 >> 56 LOAD_CONST 4 ( ' ' )				  
							      68 LOAD_FAST 0 ( str )					    58 RETURN_VALUE						  
							      70 LOAD_FAST 1 ( i )					    60 LOAD_CONST 0 ( None )					  
							      72 LOAD_CONST 1 ( 1 )					    62 RETURN_VALUE NEW_LINE					  
							      74 BINARY_ADD						    								  
							      76 LOAD_FAST 2 ( j )					    								  
							      78 LOAD_CONST 1 ( 1 )					    								  
							      80 BINARY_SUBTRACT					    								  
							      82 LOAD_FAST 3 ( n )					    								  
							      84 LOAD_CONST 3 ( 2 )					    								  
							      86 BINARY_SUBTRACT					    								  
							      88 CALL_FUNCTION 4					    								  
							      90 BINARY_SUBTRACT					    								  
							      92 STORE_FAST 4 ( res )					    								  
							      								    								  
							      7 94 LOAD_FAST 0 ( str )					    								  
							      96 LOAD_FAST 1 ( i )					    								  
							      98 BINARY_SUBSCR						    								  
							      100 LOAD_FAST 0 ( str )					    								  
							      102 LOAD_FAST 2 ( j )					    								  
							      104 BINARY_SUBSCR						    								  
							      106 COMPARE_OP 2 ( == )					    								  
							      108 POP_JUMP_IF_FALSE 118					    								  
							      								    								  
							      8 110 LOAD_FAST 4 ( res )					    								  
							      112 LOAD_CONST 1 ( 1 )					    								  
							      114 INPLACE_ADD						    								  
							      116 STORE_FAST 4 ( res )					    								  
							      								    								  
							      9 >> 118 LOAD_FAST 4 ( res )				    								  
							      120 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	      COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	    COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		  COUNT_<unk> YS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES
--							      --							    --								  --
def countarray ( n , k , x ) :				      Disassembly of <code object countarray at 0x7f33e2653f60, fil Disassembly of <code object countarray at 0x7f2b0163dc90, fil script_not_found : None
    dp = list ( )					      2 0 LOAD_GLOBAL 0 ( list )				    2 0 LOAD_GLOBAL 0 ( list )					  
    dp.append ( 0 )					      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    dp.append ( 1 )					      4 STORE_FAST 3 ( dp )					    4 STORE_FAST 2 ( dp )					  
    i = 2						      								    								  
    while i < n :					      3 6 LOAD_FAST 3 ( dp )					    3 6 LOAD_FAST 2 ( dp )					  
	dp.append ( ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp 8 LOAD_METHOD 1 ( append )				    8 LOAD_METHOD 1 ( append )					  
	i = i + 1					      10 LOAD_CONST 1 ( 0 )					    10 LOAD_CONST 1 ( 0 )					  
    return ( ( k - 1 ) * dp [ n - 2 ] if x == 1 else dp [ n - 12 CALL_METHOD 1						    12 CALL_METHOD 1						  
							      14 POP_TOP						    14 POP_TOP							  
							      								    								  
							      4 16 LOAD_FAST 3 ( dp )					    4 16 SETUP_LOOP 64 ( to 78 )				  
							      18 LOAD_METHOD 1 ( append )				    18 LOAD_FAST 2 ( dp )					  
							      20 LOAD_CONST 2 ( 1 )					    20 GET_ITER							  
							      22 CALL_METHOD 1						    >> 22 FOR_ITER 64 ( to 76 )					  
							      24 POP_TOP						    24 STORE_FAST 3 ( i )					  
							      								    								  
							      5 26 LOAD_CONST 3 ( 2 )					    5 26 LOAD_FAST 3 ( i )					  
							      28 STORE_FAST 4 ( i )					    28 LOAD_FAST 3 ( i )					  
							      								    30 BINARY_SUBSCR						  
							      6 30 SETUP_LOOP 66 ( to 98 )				    32 STORE_FAST 4 ( value )					  
							      >> 32 LOAD_FAST 4 ( i )					    								  
							      34 LOAD_FAST 0 ( n )					    6 34 LOAD_FAST 4 ( value )					  
							      36 COMPARE_OP 0 ( < )					    36 LOAD_FAST 4 ( value )					  
							      38 POP_JUMP_IF_FALSE 96					    38 COMPARE_OP 2 ( == )					  
							      								    40 POP_JUMP_IF_FALSE 22					  
							      7 40 LOAD_FAST 3 ( dp )					    								  
							      42 LOAD_METHOD 1 ( append )				    7 42 LOAD_FAST 2 ( dp )					  
							      44 LOAD_FAST 1 ( k )					    44 LOAD_FAST 4 ( value )					  
							      46 LOAD_CONST 3 ( 2 )					    46 BINARY_SUBSCR						  
							      48 BINARY_SUBTRACT					    48 STORE_FAST 5 ( value )					  
							      50 LOAD_FAST 3 ( dp )					    								  
							      52 LOAD_FAST 4 ( i )					    8 50 LOAD_FAST 3 ( i )					  
							      54 LOAD_CONST 2 ( 1 )					    52 LOAD_FAST 4 ( value )					  
							      56 BINARY_SUBTRACT					    54 COMPARE_OP 2 ( == )					  
							      58 BINARY_SUBSCR						    56 POP_JUMP_IF_FALSE 22					  
							      60 BINARY_MULTIPLY					    								  
							      62 LOAD_FAST 1 ( k )					    9 58 LOAD_FAST 1 ( value )					  
							      64 LOAD_CONST 2 ( 1 )					    60 LOAD_FAST 4 ( value )					  
							      66 BINARY_SUBTRACT					    62 BINARY_SUBSCR						  
							      68 LOAD_FAST 3 ( dp )					    64 STORE_FAST 5 ( value )					  
							      70 LOAD_FAST 4 ( i )					    								  
							      72 LOAD_CONST 3 ( 2 )					    10 66 LOAD_FAST 5 ( value )					  
							      74 BINARY_SUBTRACT					    68 LOAD_FAST 4 ( value )					  
							      76 BINARY_SUBSCR						    70 COMPARE_OP 2 ( == )					  
							      78 BINARY_MULTIPLY					    72 POP_JUMP_IF_FALSE 22					  
							      80 BINARY_ADD						    								  
							      82 CALL_METHOD 1						    11 74 LOAD_FAST 1 ( value )					  
							      84 POP_TOP						    76 LOAD_FAST 4 ( value )					  
							      								    78 BINARY_SUBSCR						  
							      8 86 LOAD_FAST 4 ( i )					    80 LOAD_FAST 5 ( value )					  
							      88 LOAD_CONST 2 ( 1 )					    82 COMPARE_OP 2 ( == )					  
							      90 BINARY_ADD						    84 POP_JUMP_IF_FALSE 22					  
							      92 STORE_FAST 4 ( i )					    								  
							      94 JUMP_ABSOLUTE 32					    12 86 LOAD_FAST 1 ( value )					  
							      >> 96 POP_BLOCK						    88 LOAD_FAST 4 ( value )					  
							      								    90 BINARY_SUBSCR						  
							      9 >> 98 LOAD_FAST 2 ( x )					    92 STORE_FAST 5 ( value )					  
							      100 LOAD_CONST 2 ( 1 )					    								  
							      102 COMPARE_OP 2 ( == )					    13 94 LOAD_FAST 1 ( value )					  
							      104 POP_JUMP_IF_FALSE 126					    96 LOAD_FAST 4 ( value )					  
							      106 LOAD_FAST 1 ( k )					    98 STORE_SUBSCR						  
							      108 LOAD_CONST 2 ( 1 )					    								  
							      110 BINARY_SUBTRACT					    14 100 LOAD_FAST 1 ( value )				  
							      112 LOAD_FAST 3 ( dp )					    102 LOAD_FAST 4 ( value )					  
							      114 LOAD_FAST 0 ( n )					    104 STORE_SUBSCR						  
							      116 LOAD_CONST 3 ( 2 )					    								  
							      118 BINARY_SUBTRACT					    15 106 LOAD_FAST 1 ( value )				  
							      120 BINARY_SUBSCR						    108 LOAD_FAST 4 ( value )					  
							      122 BINARY_MULTIPLY					    110 STORE_SUBSCR						  
							      124 RETURN_VALUE						    								  
							      >> 126 LOAD_FAST 3 ( dp )					    16 112 LOAD_FAST 1 ( value )				  
							      128 LOAD_FAST 0 ( n )					    114 LOAD_FAST 4 ( value )					  
							      130 LOAD_CONST 2 ( 1 )					    116 STORE_SUBSCR						  
							      132 BINARY_SUBTRACT					    								  
							      134 BINARY_SUBSCR						    17 118 LOAD_FAST 1 ( value )				  
							      136 RETURN_VALUE NEW_LINE					    120 LOAD_FAST 4 ( value )					  
							      								    122 STORE_SUBSCR						  
							      								    124 JUMP_ABSOLUTE 22					  
							      								    >> 126 POP_BLOCK						  
							      								    								  
							      								    18 >> 128 LOAD_FAST 2 ( dp )				  
							      								    130 LOAD_FAST 0 ( n )					  
							      								    132 LOAD_FAST 4 ( value )					  
							      								    134 STORE_SUBSCR						  
							      								    								  
							      								    18 136 LOAD_FAST 1 ( value )				  
							      								    138 LOAD_FAST 4 ( value )					  
							      								    140 STORE_SUBSCR						  
							      								    142 LOAD_CONST 0 ( None )					  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1
--							      --							    --								  --
def isScalarMatrix ( mat ) :				      Disassembly of <code object isScalarMatrix at 0x7f33e2644f60, Disassembly of <code object isScalarMatrix at 0x7f2b01639660, script_not_found : None
    for i in range ( 0 , N ) :				      2 0 SETUP_LOOP 66 ( to 68 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	for j in range ( 0 , N ) :			      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
		return False				      6 LOAD_GLOBAL 1 ( N )					    6 LOAD_GLOBAL 1 ( N )					  
    for i in range ( 0 , N - 1 ) :			      8 CALL_FUNCTION 2						    8 CALL_FUNCTION 2						  
	if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) :   10 GET_ITER						    10 GET_ITER							  
	    return False				      >> 12 FOR_ITER 52 ( to 66 )				    >> 12 FOR_ITER 48 ( to 64 )					  
    return True						      14 STORE_FAST 1 ( i )					    14 STORE_FAST 2 ( i )					  
							      								    								  
							      3 16 SETUP_LOOP 46 ( to 64 )				    3 16 SETUP_LOOP 48 ( to 62 )				  
							      18 LOAD_GLOBAL 0 ( range )				    18 LOAD_GLOBAL 2 ( range )					  
							      20 LOAD_CONST 1 ( 0 )					    20 LOAD_CONST 1 ( 0 )					  
							      22 LOAD_GLOBAL 1 ( N )					    22 LOAD_FAST 0 ( mat )					  
							      24 CALL_FUNCTION 2					    24 CALL_FUNCTION 2						  
							      26 GET_ITER						    26 GET_ITER							  
							      >> 28 FOR_ITER 32 ( to 62 )				    >> 28 FOR_ITER 40 ( to 60 )					  
							      30 STORE_FAST 2 ( j )					    30 STORE_FAST 3 ( j )					  
							      								    								  
							      4 32 LOAD_FAST 1 ( i )					    4 32 LOAD_FAST 2 ( i )					  
							      34 LOAD_FAST 2 ( j )					    34 LOAD_FAST 1 ( N )					  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 28					    38 POP_JUMP_IF_FALSE 28					  
							      40 LOAD_FAST 0 ( mat )					    								  
							      42 LOAD_FAST 1 ( i )					    5 40 LOAD_FAST 2 ( i )					  
							      44 BINARY_SUBSCR						    42 LOAD_FAST 1 ( N )					  
							      46 LOAD_FAST 2 ( j )					    44 COMPARE_OP 3 ( != )					  
							      48 BINARY_SUBSCR						    46 POP_JUMP_IF_FALSE 28					  
							      50 LOAD_CONST 1 ( 0 )					    								  
							      52 COMPARE_OP 3 ( != )					    6 48 LOAD_FAST 2 ( i )					  
							      54 POP_JUMP_IF_FALSE 28					    50 LOAD_FAST 1 ( N )					  
							      								    52 COMPARE_OP 3 ( != )					  
							      5 56 LOAD_CONST 2 ( False )				    54 POP_JUMP_IF_FALSE 64					  
							      58 RETURN_VALUE						    								  
							      60 JUMP_ABSOLUTE 28					    7 56 JUMP_ABSOLUTE 28					  
							      >> 62 POP_BLOCK						    								  
							      >> 64 JUMP_ABSOLUTE 12					    8 >> 58 LOAD_FAST 2 ( i )					  
							      >> 66 POP_BLOCK						    60 LOAD_FAST 1 ( N )					  
							      								    62 COMPARE_OP 3 ( != )					  
							      6 >> 68 SETUP_LOOP 58 ( to 128 )				    64 POP_JUMP_IF_FALSE 12					  
							      70 LOAD_GLOBAL 0 ( range )				    								  
							      72 LOAD_CONST 1 ( 0 )					    9 66 LOAD_FAST 2 ( i )					  
							      74 LOAD_GLOBAL 1 ( N )					    68 LOAD_FAST 1 ( N )					  
							      76 LOAD_CONST 3 ( 1 )					    70 COMPARE_OP 3 ( != )					  
							      78 BINARY_SUBTRACT					    72 POP_JUMP_IF_FALSE 90					  
							      80 CALL_FUNCTION 2					    								  
							      82 GET_ITER						    10 74 LOAD_FAST 2 ( i )					  
							      >> 84 FOR_ITER 40 ( to 126 )				    76 LOAD_FAST 1 ( N )					  
							      86 STORE_FAST 1 ( i )					    78 INPLACE_ADD						  
							      								    80 STORE_FAST 2 ( i )					  
							      7 88 LOAD_FAST 0 ( mat )					    								  
							      90 LOAD_FAST 1 ( i )					    11 >> 82 LOAD_FAST 2 ( i )					  
							      92 BINARY_SUBSCR						    84 LOAD_FAST 1 ( N )					  
							      94 LOAD_FAST 1 ( i )					    86 COMPARE_OP 3 ( != )					  
							      96 BINARY_SUBSCR						    88 POP_JUMP_IF_FALSE 114					  
							      98 LOAD_FAST 0 ( mat )					    								  
							      100 LOAD_FAST 1 ( i )					    12 90 LOAD_FAST 2 ( i )					  
							      102 LOAD_CONST 3 ( 1 )					    92 LOAD_FAST 1 ( N )					  
							      104 BINARY_ADD						    94 INPLACE_ADD						  
							      106 BINARY_SUBSCR						    96 STORE_FAST 2 ( i )					  
							      108 LOAD_FAST 1 ( i )					    								  
							      110 LOAD_CONST 3 ( 1 )					    13 >> 98 LOAD_FAST 2 ( i )					  
							      112 BINARY_ADD						    100 LOAD_FAST 1 ( N )					  
							      114 BINARY_SUBSCR						    102 INPLACE_ADD						  
							      116 COMPARE_OP 3 ( != )					    104 STORE_FAST 2 ( i )					  
							      118 POP_JUMP_IF_FALSE 84					    								  
							      								    14 >> 106 LOAD_FAST 2 ( i )					  
							      8 120 LOAD_CONST 2 ( False )				    108 LOAD_FAST 1 ( N )					  
							      122 RETURN_VALUE						    110 BINARY_SUBTRACT						  
							      124 JUMP_ABSOLUTE 84					    112 LOAD_FAST 1 ( N )					  
							      >> 126 POP_BLOCK						    114 BINARY_SUBTRACT						  
							      								    116 STORE_FAST 2 ( i )					  
							      9 >> 128 LOAD_CONST 4 ( True )				    								  
							      130 RETURN_VALUE NEW_LINE					    15 118 LOAD_FAST 2 ( i )					  
							      								    120 LOAD_FAST 1 ( N )					  
							      								    122 COMPARE_OP 3 ( != )					  
							      								    124 POP_JUMP_IF_FALSE 28					  
							      								    								  
							      								    16 126 JUMP_ABSOLUTE 12					  
							      								    >> 128 POP_BLOCK						  
							      								    								  
							      								    17 >> 130 LOAD_FAST 2 ( i )					  
							      								    132 LOAD_FAST 1 ( N )					  
							      								    134 COMPARE_OP 3 ( != )					  
							      								    136 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    18 138 LOAD_FAST 2 ( i )					  
							      								    140 LOAD_FAST 1 ( N )					  
							      								    142 BINARY_SUBTRACT						  
							      								    144 RETURN_VALUE						  
							      								    								  
							      								    19 >> 146 LOAD_FAST 2 ( i )					  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE     REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	    REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE	  REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE
--							      --							    --								  --
def translate ( st ) :					      Disassembly of <code object translate at 0x7f33e2653ed0, file Disassembly of <code object translate at 0x7f2b01639660, file error : /bin/bash: line 1: 12666 Segmentation faul
    for i in range ( 1 , len ( st ) ) :			      2 0 SETUP_LOOP 122 ( to 124 )				    2 0 SETUP_LOOP 76 ( to 78 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	if ( st [ i - 1 ] == 'A' and st [ i ] == 'B' ) :      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    st [ i - 1 ] = 'C'				      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
	    for j in range ( i , len ( st ) - 1 ) :	      6 LOAD_GLOBAL 1 ( len )					    6 LOAD_GLOBAL 1 ( len )					  24/eval_scripts/python_sa-dis_sa.valid/REPLACE_OCC
		st [ j ] = st [ j + 1 ]			      8 LOAD_FAST 0 ( st )					    8 LOAD_FAST 0 ( st )					  URRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE.dis
	    st [ len ( st ) - 1 ] = ' '			      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    return						      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 104 ( to 122 )				    >> 16 FOR_ITER 54 ( to 76 )					  
							      18 STORE_FAST 1 ( i )					    18 STORE_FAST 1 ( i )					  
							      								    								  
							      3 20 LOAD_FAST 0 ( st )					    3 20 LOAD_FAST 0 ( st )					  
							      22 LOAD_FAST 1 ( i )					    22 LOAD_FAST 1 ( i )					  
							      24 LOAD_CONST 1 ( 1 )					    24 BINARY_SUBSCR						  
							      26 BINARY_SUBTRACT					    26 LOAD_CONST 2 ( 'A' )					  
							      28 BINARY_SUBSCR						    28 COMPARE_OP 2 ( == )					  
							      30 LOAD_CONST 2 ( 'A' )					    30 POP_JUMP_IF_FALSE 16					  
							      32 COMPARE_OP 2 ( == )					    								  
							      34 POP_JUMP_IF_FALSE 16					    4 32 LOAD_FAST 0 ( st )					  
							      36 LOAD_FAST 0 ( st )					    34 LOAD_FAST 1 ( i )					  
							      38 LOAD_FAST 1 ( i )					    36 BINARY_SUBSCR						  
							      40 BINARY_SUBSCR						    38 LOAD_CONST 2 ( 'A' )					  
							      42 LOAD_CONST 3 ( 'B' )					    40 COMPARE_OP 2 ( == )					  
							      44 COMPARE_OP 2 ( == )					    42 POP_JUMP_IF_FALSE 16					  
							      46 POP_JUMP_IF_FALSE 16					    								  
							      								    5 44 LOAD_FAST 0 ( st )					  
							      4 48 LOAD_CONST 4 ( 'C' )					    46 LOAD_FAST 1 ( i )					  
							      50 LOAD_FAST 0 ( st )					    48 BINARY_SUBSCR						  
							      52 LOAD_FAST 1 ( i )					    50 LOAD_CONST 2 ( 'A' )					  
							      54 LOAD_CONST 1 ( 1 )					    52 COMPARE_OP 2 ( == )					  
							      56 BINARY_SUBTRACT					    54 POP_JUMP_IF_FALSE 16					  
							      58 STORE_SUBSCR						    								  
							      								    6 56 LOAD_FAST 0 ( st )					  
							      5 60 SETUP_LOOP 42 ( to 104 )				    58 LOAD_FAST 1 ( i )					  
							      62 LOAD_GLOBAL 0 ( range )				    60 BINARY_SUBSCR						  
							      64 LOAD_FAST 1 ( i )					    62 LOAD_CONST 2 ( 'A' )					  
							      66 LOAD_GLOBAL 1 ( len )					    64 COMPARE_OP 2 ( == )					  
							      68 LOAD_FAST 0 ( st )					    66 POP_JUMP_IF_FALSE 16					  
							      70 CALL_FUNCTION 1					    								  
							      72 LOAD_CONST 1 ( 1 )					    7 68 LOAD_FAST 0 ( st )					  
							      74 BINARY_SUBTRACT					    70 LOAD_FAST 1 ( i )					  
							      76 CALL_FUNCTION 2					    72 BINARY_SUBSCR						  
							      78 GET_ITER						    74 LOAD_CONST 2 ( 'A' )					  
							      >> 80 FOR_ITER 20 ( to 102 )				    76 COMPARE_OP 2 ( == )					  
							      82 STORE_FAST 2 ( j )					    78 POP_JUMP_IF_FALSE 16					  
							      								    								  
							      6 84 LOAD_FAST 0 ( st )					    8 80 LOAD_FAST 0 ( st )					  
							      86 LOAD_FAST 2 ( j )					    82 LOAD_FAST 1 ( i )					  
							      88 LOAD_CONST 1 ( 1 )					    84 BINARY_SUBSCR						  
							      90 BINARY_ADD						    86 LOAD_CONST 2 ( 'A' )					  
							      92 BINARY_SUBSCR						    88 COMPARE_OP 2 ( == )					  
							      94 LOAD_FAST 0 ( st )					    90 POP_JUMP_IF_FALSE 16					  
							      96 LOAD_FAST 2 ( j )					    								  
							      98 STORE_SUBSCR						    9 92 LOAD_FAST 0 ( st )					  
							      100 JUMP_ABSOLUTE 80					    94 LOAD_FAST 1 ( i )					  
							      >> 102 POP_BLOCK						    96 BINARY_SUBSCR						  
							      								    98 LOAD_CONST 2 ( 'A' )					  
							      7 >> 104 LOAD_CONST 5 ( ' ' )				    100 COMPARE_OP 2 ( == )					  
							      106 LOAD_FAST 0 ( st )					    102 POP_JUMP_IF_FALSE 16					  
							      108 LOAD_GLOBAL 1 ( len )					    104 LOAD_FAST 0 ( st )					  
							      110 LOAD_FAST 0 ( st )					    106 LOAD_FAST 1 ( i )					  
							      112 CALL_FUNCTION 1					    108 BINARY_SUBSCR						  
							      114 LOAD_CONST 1 ( 1 )					    110 LOAD_CONST 2 ( 'A' )					  
							      116 BINARY_SUBTRACT					    112 COMPARE_OP 2 ( == )					  
							      118 STORE_SUBSCR						    114 POP_JUMP_IF_FALSE 16					  
							      120 JUMP_ABSOLUTE 16					    								  
							      >> 122 POP_BLOCK						    10 116 LOAD_FAST 0 ( st )					  
							      								    118 LOAD_FAST 1 ( i )					  
							      8 >> 124 LOAD_CONST 0 ( None )				    120 BINARY_SUBSCR						  
							      126 RETURN_VALUE NEW_LINE					    122 RETURN_VALUE						  
							      								    								  
							      								    11 >> 124 LOAD_FAST 0 ( st )				  
							      								    126 LOAD_FAST 1 ( i )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 RETURN_VALUE						  
							      								    132 JUMP_ABSOLUTE 16					  
							      								    >> 134 POP_BLOCK						  
							      								    >> 136 LOAD_CONST 0 ( None )				  
							      								    138 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			      NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			    NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			  NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS
--							      --							    --								  --
def numberOfPermWithKInversion ( N , K ) :		      Disassembly of <code object numberOfPermWithKInversion at 0x7 Disassembly of <code object numberOfPermWithKInInversion at 0 script_not_found : None
    if ( N == 0 ) : return 0				      2 0 LOAD_FAST 0 ( N )					    2 0 LOAD_FAST 0 ( N )					  
    if ( K == 0 ) : return 1				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( memo [ N ] [ K ] != 0 ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return memo [ N ] [ K ]				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 14					  
    sum = 0						      8 LOAD_CONST 1 ( 0 )					    								  
    for i in range ( K + 1 ) :				      10 RETURN_VALUE						    3 8 LOAD_FAST 0 ( N )					  
	if ( i <= N - 1 ) :				      								    10 LOAD_CONST 2 ( 1 )					  
	    sum += numberOfPermWithKInversion ( N - 1 , K - i 3 >> 12 LOAD_FAST 1 ( K )					    12 COMPARE_OP 2 ( == )					  
    memo [ N ] [ K ] = sum				      14 LOAD_CONST 1 ( 0 )					    14 POP_JUMP_IF_FALSE 28					  
    return sum						      16 COMPARE_OP 2 ( == )					    								  
							      18 POP_JUMP_IF_FALSE 24					    4 16 LOAD_FAST 0 ( N )					  
							      20 LOAD_CONST 2 ( 1 )					    18 LOAD_CONST 1 ( 0 )					  
							      22 RETURN_VALUE						    20 COMPARE_OP 3 ( != )					  
							      								    22 POP_JUMP_IF_FALSE 28					  
							      4 >> 24 LOAD_GLOBAL 0 ( memo )				    								  
							      26 LOAD_FAST 0 ( N )					    5 24 LOAD_FAST 0 ( N )					  
							      28 BINARY_SUBSCR						    26 LOAD_CONST 1 ( 0 )					  
							      30 LOAD_FAST 1 ( K )					    28 BINARY_SUBSCR						  
							      32 BINARY_SUBSCR						    30 STORE_FAST 0 ( N )					  
							      34 LOAD_CONST 1 ( 0 )					    								  
							      36 COMPARE_OP 3 ( != )					    6 >> 32 LOAD_FAST 0 ( N )					  
							      38 POP_JUMP_IF_FALSE 52					    34 LOAD_CONST 1 ( 0 )					  
							      								    36 COMPARE_OP 3 ( != )					  
							      5 40 LOAD_GLOBAL 0 ( memo )				    38 POP_JUMP_IF_FALSE 48					  
							      42 LOAD_FAST 0 ( N )					    								  
							      44 BINARY_SUBSCR						    7 40 LOAD_FAST 0 ( N )					  
							      46 LOAD_FAST 1 ( K )					    42 LOAD_CONST 1 ( 0 )					  
							      48 BINARY_SUBSCR						    44 COMPARE_OP 3 ( != )					  
							      50 RETURN_VALUE						    46 POP_JUMP_IF_FALSE 48					  
							      								    								  
							      6 >> 52 LOAD_CONST 1 ( 0 )				    8 >> 48 LOAD_FAST 0 ( N )					  
							      54 STORE_FAST 2 ( sum )					    50 LOAD_CONST 1 ( 0 )					  
							      								    52 COMPARE_OP 3 ( != )					  
							      7 56 SETUP_LOOP 54 ( to 112 )				    54 POP_JUMP_IF_FALSE 64					  
							      58 LOAD_GLOBAL 1 ( range )				    								  
							      60 LOAD_FAST 1 ( K )					    9 56 LOAD_FAST 0 ( N )					  
							      62 LOAD_CONST 2 ( 1 )					    58 LOAD_CONST 1 ( 0 )					  
							      64 BINARY_ADD						    60 BINARY_SUBSCR						  
							      66 CALL_FUNCTION 1					    62 STORE_FAST 0 ( N )					  
							      68 GET_ITER						    								  
							      >> 70 FOR_ITER 38 ( to 110 )				    10 >> 64 LOAD_FAST 0 ( N )					  
							      72 STORE_FAST 3 ( i )					    66 LOAD_CONST 1 ( 0 )					  
							      								    68 COMPARE_OP 3 ( != )					  
							      8 74 LOAD_FAST 3 ( i )					    70 POP_JUMP_IF_FALSE 84					  
							      76 LOAD_FAST 0 ( N )					    								  
							      78 LOAD_CONST 2 ( 1 )					    11 72 LOAD_FAST 0 ( N )					  
							      80 BINARY_SUBTRACT					    74 LOAD_CONST 1 ( 0 )					  
							      82 COMPARE_OP 1 ( <= )					    76 COMPARE_OP 3 ( != )					  
							      84 POP_JUMP_IF_FALSE 70					    78 POP_JUMP_IF_FALSE 84					  
							      								    								  
							      9 86 LOAD_FAST 2 ( sum )					    12 80 LOAD_FAST 0 ( N )					  
							      88 LOAD_GLOBAL 2 ( numberOfPermWithKInversion )		    82 LOAD_CONST 1 ( 0 )					  
							      90 LOAD_FAST 0 ( N )					    84 BINARY_SUBSCR						  
							      92 LOAD_CONST 2 ( 1 )					    86 STORE_FAST 0 ( N )					  
							      94 BINARY_SUBTRACT					    								  
							      96 LOAD_FAST 1 ( K )					    13 88 LOAD_FAST 0 ( N )					  
							      98 LOAD_FAST 3 ( i )					    90 LOAD_CONST 1 ( 0 )					  
							      100 BINARY_SUBTRACT					    92 COMPARE_OP 3 ( != )					  
							      102 CALL_FUNCTION 2					    94 POP_JUMP_IF_FALSE 98					  
							      104 INPLACE_ADD						    								  
							      106 STORE_FAST 2 ( sum )					    14 96 LOAD_FAST 0 ( N )					  
							      108 JUMP_ABSOLUTE 70					    98 LOAD_CONST 1 ( 0 )					  
							      >> 110 POP_BLOCK						    100 BINARY_SUBSCR						  
							      								    102 STORE_FAST 0 ( N )					  
							      10 >> 112 LOAD_FAST 2 ( sum )				    104 JUMP_FORWARD 4 ( to 108 )				  
							      114 LOAD_GLOBAL 0 ( memo )				    								  
							      116 LOAD_FAST 0 ( N )					    15 >> 106 LOAD_FAST 0 ( N )					  
							      118 BINARY_SUBSCR						    108 LOAD_CONST 1 ( 0 )					  
							      120 LOAD_FAST 1 ( K )					    110 COMPARE_OP 3 ( != )					  
							      122 STORE_SUBSCR						    112 POP_JUMP_IF_FALSE 114					  
							      								    								  
							      11 124 LOAD_FAST 2 ( sum )				    16 114 LOAD_FAST 0 ( N )					  
							      126 RETURN_VALUE NEW_LINE					    116 LOAD_CONST 1 ( 0 )					  
							      								    118 BINARY_SUBSCR						  
							      								    120 STORE_FAST 0 ( N )					  
							      								    								  
							      								    17 >> 122 LOAD_FAST 0 ( N )					  
							      								    124 LOAD_CONST 1 ( 0 )					  
							      								    126 COMPARE_OP 3 ( != )					  
							      								    128 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    18 130 LOAD_FAST 0 ( N )					  
							      								    132 LOAD_CONST 1 ( 0 )					  
							      								    134 COMPARE_OP 3 ( != )					  
							      								    136 POP_JUMP_IF_FALSE 138					  
							      								    								  
							      								    19 138 LOAD_FAST 0 ( N )					  
							      								    140 RETURN_VALUE						  
							      								    								  
							      								    20 >> 142 LOAD_FAST 0 ( N )					  
							      								    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS  PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS
--							      --							    --								  --
def printDistinct ( str ) :				      Disassembly of <code object printDistinct at 0x7f33e2649a50,  Disassembly of <code object printDistinct at 0x7f2b01639660,  script_not_found : None
    count = [ 0 ] * NO_OF_CHARS				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for i in range ( len ( str ) ) :			      2 BUILD_LIST 1						    2 BINARY_SUBSCR						  
	if ( str [ i ] != ' ' ) :			      4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				    4 LOAD_GLOBAL 0 ( NO_OF_CHARS )				  
	    count [ ord ( str [ i ] ) ] += 1		      6 BINARY_MULTIPLY						    6 COMPARE_OP 6 ( in )					  
    n = i						      8 STORE_FAST 1 ( count )					    8 POP_JUMP_IF_FALSE 28					  
    for i in range ( n ) :				      								    								  
	if ( count [ ord ( str [ i ] ) ] == 1 ) :	      3 10 SETUP_LOOP 56 ( to 68 )				    3 10 SETUP_LOOP 26 ( to 36 )				  
	    print ( str [ i ] , end = "" )		      12 LOAD_GLOBAL 1 ( range )				    12 LOAD_GLOBAL 1 ( range )					  
							      14 LOAD_GLOBAL 2 ( len )					    14 LOAD_GLOBAL 2 ( len )					  
							      16 LOAD_FAST 0 ( str )					    16 LOAD_FAST 0 ( str )					  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 CALL_FUNCTION 1					    20 CALL_FUNCTION 1						  
							      22 GET_ITER						    22 GET_ITER							  
							      >> 24 FOR_ITER 40 ( to 66 )				    >> 24 FOR_ITER 14 ( to 34 )					  
							      26 STORE_FAST 2 ( i )					    26 STORE_FAST 1 ( i )					  
							      								    								  
							      4 28 LOAD_FAST 0 ( str )					    4 28 LOAD_FAST 0 ( str )					  
							      30 LOAD_FAST 2 ( i )					    30 LOAD_FAST 1 ( i )					  
							      32 BINARY_SUBSCR						    32 BINARY_SUBSCR						  
							      34 LOAD_CONST 2 ( ' ' )					    34 LOAD_CONST 2 ( ' ' )					  
							      36 COMPARE_OP 3 ( != )					    36 COMPARE_OP 3 ( != )					  
							      38 POP_JUMP_IF_FALSE 24					    38 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      5 40 LOAD_FAST 1 ( count )				    5 40 LOAD_FAST 0 ( str )					  
							      42 LOAD_GLOBAL 3 ( ord )					    42 LOAD_FAST 1 ( i )					  
							      44 LOAD_FAST 0 ( str )					    44 BINARY_SUBSCR						  
							      46 LOAD_FAST 2 ( i )					    46 LOAD_CONST 2 ( ' ' )					  
							      48 BINARY_SUBSCR						    48 COMPARE_OP 3 ( != )					  
							      50 CALL_FUNCTION 1					    50 POP_JUMP_IF_FALSE 24					  
							      52 DUP_TOP_TWO						    								  
							      54 BINARY_SUBSCR						    6 52 LOAD_FAST 0 ( str )					  
							      56 LOAD_CONST 3 ( 1 )					    54 LOAD_FAST 1 ( i )					  
							      58 INPLACE_ADD						    56 BINARY_SUBSCR						  
							      60 ROT_THREE						    58 LOAD_CONST 2 ( ' ' )					  
							      62 STORE_SUBSCR						    60 COMPARE_OP 3 ( != )					  
							      64 JUMP_ABSOLUTE 24					    62 POP_JUMP_IF_FALSE 24					  
							      >> 66 POP_BLOCK						    								  
							      								    7 64 LOAD_FAST 0 ( str )					  
							      6 >> 68 LOAD_FAST 2 ( i )					    66 LOAD_FAST 1 ( i )					  
							      70 STORE_FAST 3 ( n )					    68 BINARY_SUBSCR						  
							      								    70 LOAD_CONST 2 ( ' ' )					  
							      7 72 SETUP_LOOP 52 ( to 126 )				    72 COMPARE_OP 3 ( != )					  
							      74 LOAD_GLOBAL 1 ( range )				    74 POP_JUMP_IF_FALSE 24					  
							      76 LOAD_FAST 3 ( n )					    								  
							      78 CALL_FUNCTION 1					    8 76 LOAD_FAST 0 ( str )					  
							      80 GET_ITER						    78 LOAD_FAST 1 ( i )					  
							      >> 82 FOR_ITER 40 ( to 124 )				    80 BINARY_SUBSCR						  
							      84 STORE_FAST 2 ( i )					    82 LOAD_CONST 2 ( ' ' )					  
							      								    84 COMPARE_OP 3 ( != )					  
							      8 86 LOAD_FAST 1 ( count )				    86 POP_JUMP_IF_FALSE 24					  
							      88 LOAD_GLOBAL 3 ( ord )					    								  
							      90 LOAD_FAST 0 ( str )					    9 88 LOAD_FAST 0 ( str )					  
							      92 LOAD_FAST 2 ( i )					    90 LOAD_FAST 1 ( i )					  
							      94 BINARY_SUBSCR						    92 BINARY_SUBSCR						  
							      96 CALL_FUNCTION 1					    94 LOAD_CONST 2 ( ' ' )					  
							      98 BINARY_SUBSCR						    96 COMPARE_OP 3 ( != )					  
							      100 LOAD_CONST 3 ( 1 )					    98 POP_JUMP_IF_FALSE 24					  
							      102 COMPARE_OP 2 ( == )					    								  
							      104 POP_JUMP_IF_FALSE 82					    10 100 LOAD_FAST 0 ( str )					  
							      								    102 LOAD_FAST 1 ( i )					  
							      9 106 LOAD_GLOBAL 4 ( print )				    104 BINARY_SUBSCR						  
							      108 LOAD_FAST 0 ( str )					    106 LOAD_CONST 2 ( ' ' )					  
							      110 LOAD_FAST 2 ( i )					    108 COMPARE_OP 3 ( != )					  
							      112 BINARY_SUBSCR						    110 POP_JUMP_IF_FALSE 24					  
							      114 LOAD_CONST 4 ( '' )					    								  
							      116 LOAD_CONST 5 ( ( 'end' , ) )				    11 112 LOAD_FAST 0 ( str )					  
							      118 CALL_FUNCTION_KW 2					    114 LOAD_FAST 1 ( i )					  
							      120 POP_TOP						    116 BINARY_SUBSCR						  
							      122 JUMP_ABSOLUTE 82					    118 LOAD_CONST 2 ( ' ' )					  
							      >> 124 POP_BLOCK						    120 COMPARE_OP 3 ( != )					  
							      >> 126 LOAD_CONST 0 ( None )				    122 POP_JUMP_IF_FALSE 24					  
							      128 RETURN_VALUE NEW_LINE					    								  
							      								    12 124 LOAD_FAST 0 ( str )					  
							      								    126 LOAD_FAST 1 ( i )					  
							      								    128 BINARY_SUBSCR						  
							      								    130 LOAD_CONST 2 ( ' ' )					  
							      								    132 COMPARE_OP 3 ( != )					  
							      								    134 POP_JUMP_IF_FALSE 24					  
							      								    								  
							      								    13 136 LOAD_FAST 0 ( str )					  
							      								    138 LOAD_FAST 1 ( i )					  
							      								    140 BINARY_SUBSCR						  
							      								    142 RETURN_VALUE						  
							      								    >> 144 JUMP_ABSOLUTE 24					  
							      								    >> 146 POP_BLOCK						  
							      								    								  
							      								    14 >> 148 LOAD_FAST 0 ( str )				  
							      								    150 LOAD_FAST 1 ( i )					  
							      								    152 BINARY_ADD						  
							      								    154 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BRESENHAMS_LINE_GENERATION_ALGORITHM			      BRESENHAMS_LINE_GENERATION_ALGORITHM			    BRESENHAMS_LINE_GENERATION_ALGORITHM			  BRESENHAMS_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
def bresenham ( x1 , y1 , x2 , y2 ) :			      Disassembly of <code object bresenham at 0x7f33e26494b0, file Disassembly of <code object bresenham at 0x7f2b0163dc90, file script_not_found : None
    m_new = 2 * ( y2 - y1 )				      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
    slope_error_new = m_new - ( x2 - x1 )		      2 LOAD_FAST 3 ( y2 )					    2 LOAD_FAST 2 ( x1 )					  
    y = y1						      4 LOAD_FAST 1 ( y1 )					    4 LOAD_FAST 3 ( x2 )					  
    for x in range ( x1 , x2 + 1 ) :			      6 BINARY_SUBTRACT						    6 BINARY_SUBTRACT						  
	print ( "(" , x , "," , y , ")\n" )		      8 BINARY_MULTIPLY						    8 BINARY_MULTIPLY						  
	slope_error_new = slope_error_new + m_new	      10 STORE_FAST 4 ( m_new )					    10 STORE_FAST 4 ( m_new )					  
	if ( slope_error_new >= 0 ) :			      								    								  
	    y = y + 1					      3 12 LOAD_FAST 4 ( m_new )				    3 12 LOAD_FAST 0 ( x1 )					  
	    slope_error_new = slope_error_new - 2 * ( x2 - x1 14 LOAD_FAST 2 ( x2 )					    14 LOAD_FAST 3 ( x2 )					  
							      16 LOAD_FAST 0 ( x1 )					    16 BINARY_SUBTRACT						  
							      18 BINARY_SUBTRACT					    18 STORE_FAST 5 ( y )					  
							      20 BINARY_SUBTRACT					    								  
							      22 STORE_FAST 5 ( slope_error_new )			    4 20 SETUP_LOOP 48 ( to 64 )				  
							      								    22 LOAD_GLOBAL 0 ( range )					  
							      4 24 LOAD_FAST 1 ( y1 )					    24 LOAD_FAST 1 ( x1 )					  
							      26 STORE_FAST 6 ( y )					    26 LOAD_FAST 3 ( x2 )					  
							      								    28 CALL_FUNCTION 2						  
							      5 28 SETUP_LOOP 78 ( to 108 )				    30 GET_ITER							  
							      30 LOAD_GLOBAL 0 ( range )				    >> 32 FOR_ITER 48 ( to 62 )					  
							      32 LOAD_FAST 0 ( x1 )					    34 STORE_FAST 6 ( x )					  
							      34 LOAD_FAST 2 ( x2 )					    								  
							      36 LOAD_CONST 2 ( 1 )					    5 36 LOAD_FAST 0 ( x1 )					  
							      38 BINARY_ADD						    38 LOAD_FAST 3 ( x2 )					  
							      40 CALL_FUNCTION 2					    40 LOAD_FAST 4 ( m_new )					  
							      42 GET_ITER						    42 BINARY_SUBTRACT						  
							      >> 44 FOR_ITER 60 ( to 106 )				    44 STORE_FAST 7 ( y )					  
							      46 STORE_FAST 7 ( x )					    								  
							      								    6 46 LOAD_FAST 0 ( x1 )					  
							      6 48 LOAD_GLOBAL 1 ( print )				    48 LOAD_FAST 3 ( x2 )					  
							      50 LOAD_CONST 3 ( '(' )					    50 BINARY_SUBTRACT						  
							      52 LOAD_FAST 7 ( x )					    52 LOAD_FAST 5 ( y )					  
							      54 LOAD_CONST 4 ( ',' )					    54 LOAD_FAST 4 ( m_new )					  
							      56 LOAD_FAST 6 ( y )					    56 BINARY_SUBTRACT						  
							      58 LOAD_CONST 5 ( ')\n' )					    58 BINARY_MULTIPLY						  
							      60 CALL_FUNCTION 5					    60 LOAD_FAST 0 ( x1 )					  
							      62 POP_TOP						    62 LOAD_FAST 3 ( x2 )					  
							      								    64 BINARY_SUBTRACT						  
							      7 64 LOAD_FAST 5 ( slope_error_new )			    66 BINARY_MULTIPLY						  
							      66 LOAD_FAST 4 ( m_new )					    68 LOAD_FAST 0 ( x1 )					  
							      68 BINARY_ADD						    70 LOAD_FAST 3 ( x2 )					  
							      70 STORE_FAST 5 ( slope_error_new )			    72 BINARY_SUBTRACT						  
							      								    74 BINARY_MULTIPLY						  
							      8 72 LOAD_FAST 5 ( slope_error_new )			    76 LOAD_FAST 0 ( x1 )					  
							      74 LOAD_CONST 6 ( 0 )					    78 LOAD_FAST 3 ( x2 )					  
							      76 COMPARE_OP 5 ( >= )					    80 BINARY_SUBTRACT						  
							      78 POP_JUMP_IF_FALSE 44					    82 BINARY_MULTIPLY						  
							      								    84 BINARY_SUBTRACT						  
							      9 80 LOAD_FAST 6 ( y )					    86 STORE_FAST 8 ( y )					  
							      82 LOAD_CONST 2 ( 1 )					    								  
							      84 BINARY_ADD						    7 88 LOAD_FAST 0 ( x1 )					  
							      86 STORE_FAST 6 ( y )					    90 LOAD_FAST 3 ( x2 )					  
							      								    92 LOAD_FAST 4 ( m_new )					  
							      10 88 LOAD_FAST 5 ( slope_error_new )			    94 BINARY_SUBTRACT						  
							      90 LOAD_CONST 1 ( 2 )					    96 BINARY_MULTIPLY						  
							      92 LOAD_FAST 2 ( x2 )					    98 LOAD_FAST 0 ( x1 )					  
							      94 LOAD_FAST 0 ( x1 )					    100 LOAD_FAST 3 ( x2 )					  
							      96 BINARY_SUBTRACT					    102 BINARY_SUBTRACT						  
							      98 BINARY_MULTIPLY					    104 LOAD_FAST 0 ( x1 )					  
							      100 BINARY_SUBTRACT					    106 LOAD_FAST 3 ( x2 )					  
							      102 STORE_FAST 5 ( slope_error_new )			    108 BINARY_SUBTRACT						  
							      104 JUMP_ABSOLUTE 44					    110 BINARY_MULTIPLY						  
							      >> 106 POP_BLOCK						    112 BINARY_SUBTRACT						  
							      >> 108 LOAD_CONST 0 ( None )				    114 STORE_FAST 9 ( y )					  
							      110 RETURN_VALUE NEW_LINE					    								  
							      								    8 116 LOAD_FAST 0 ( x1 )					  
							      								    118 LOAD_FAST 3 ( x2 )					  
							      								    120 BINARY_SUBTRACT						  
							      								    122 LOAD_FAST 5 ( y )					  
							      								    124 BINARY_SUBTRACT						  
							      								    126 LOAD_FAST 6 ( x )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 LOAD_FAST 7 ( y )					  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 8 ( y )					  
							      								    136 BINARY_SUBTRACT						  
							      								    138 BINARY_MULTIPLY						  
							      								    140 LOAD_FAST 9 ( y )					  
							      								    142 BINARY_ADD						  
							      								    144 LOAD_FAST 10 ( y_new )					  
							      								    146 BINARY_ADD						  
							      								    148 LOAD_FAST 11 ( y )					  
							      								    150 BINARY_ADD						  
							      								    152 LOAD_FAST 4 ( m_new )					  
							      								    154 BINARY_ADD						  
							      								    156 LOAD_FAST 5 ( y )					  
							      								    158 BINARY_ADD						  
							      								    160 BINARY_MULTIPLY						  
							      								    162 BINARY_ADD						  
							      								    164 STORE_FAST 10 ( y_new )					  
							      								    								  
							      								    9 166 LOAD_FAST 10 ( y_new )				  
							      								    168 LOAD_FAST 10 ( y_new )					  
							      								    170 BUILD_TUPLE 2						  
							      								    172 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		      FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		    FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY		  FIND_MAXIMUM_PR<unk> CT_OF_A_TRIPLET_IN_ARRAY
--							      --							    --								  --
def maxProduct ( arr , n ) :				      Disassembly of <code object maxProduct at 0x7f33e2649a50, fil Disassembly of <code object maxProduct at 0x7f2b0163dc90, fil script_not_found : None
    if n < 3 :						      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 0 ( arr )					  
	return - 1					      2 LOAD_CONST 1 ( 3 )					    2 LOAD_CONST 1 ( 3 )					  
    max_product = - ( sys.maxsize - 1 )			      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    for i in range ( 0 , n - 2 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	for j in range ( i + 1 , n - 1 ) :		      								    								  
	    for k in range ( j + 1 , n ) :		      3 8 LOAD_CONST 2 ( - 1 )					    3 8 LOAD_CONST 2 ( - 1 )					  
		max_product = max ( max_product , arr [ i ] * 10 RETURN_VALUE						    10 RETURN_VALUE						  
    return max_product					      								    								  
							      4 >> 12 LOAD_GLOBAL 0 ( sys )				    4 >> 12 LOAD_GLOBAL 0 ( max_product )			  
							      14 LOAD_ATTR 1 ( maxsize )				    14 LOAD_FAST 0 ( arr )					  
							      16 LOAD_CONST 3 ( 1 )					    16 LOAD_CONST 1 ( 3 )					  
							      18 BINARY_SUBTRACT					    18 BINARY_SUBTRACT						  
							      20 UNARY_NEGATIVE						    20 BINARY_SUBSCR						  
							      22 STORE_FAST 2 ( max_product )				    22 STORE_FAST 1 ( max_product )				  
							      								    								  
							      5 24 SETUP_LOOP 104 ( to 130 )				    5 24 SETUP_LOOP 64 ( to 104 )				  
							      26 LOAD_GLOBAL 2 ( range )				    26 LOAD_GLOBAL 1 ( range )					  
							      28 LOAD_CONST 4 ( 0 )					    28 LOAD_CONST 1 ( 3 )					  
							      30 LOAD_FAST 1 ( n )					    30 LOAD_FAST 1 ( max_product )				  
							      32 LOAD_CONST 5 ( 2 )					    32 CALL_FUNCTION 2						  
							      34 BINARY_SUBTRACT					    34 GET_ITER							  
							      36 CALL_FUNCTION 2					    >> 36 FOR_ITER 48 ( to 102 )				  
							      38 GET_ITER						    38 STORE_FAST 2 ( i )					  
							      >> 40 FOR_ITER 86 ( to 128 )				    								  
							      42 STORE_FAST 3 ( i )					    6 40 LOAD_GLOBAL 2 ( int )					  
							      								    42 LOAD_FAST 0 ( arr )					  
							      6 44 SETUP_LOOP 80 ( to 126 )				    44 LOAD_CONST 1 ( 3 )					  
							      46 LOAD_GLOBAL 2 ( range )				    46 BINARY_SUBTRACT						  
							      48 LOAD_FAST 3 ( i )					    48 BINARY_SUBSCR						  
							      50 LOAD_CONST 3 ( 1 )					    50 LOAD_FAST 2 ( i )					  
							      52 BINARY_ADD						    52 LOAD_CONST 1 ( 3 )					  
							      54 LOAD_FAST 1 ( n )					    54 BINARY_SUBTRACT						  
							      56 LOAD_CONST 3 ( 1 )					    56 BINARY_SUBSCR						  
							      58 BINARY_SUBTRACT					    58 LOAD_FAST 2 ( i )					  
							      60 CALL_FUNCTION 2					    60 LOAD_CONST 1 ( 3 )					  
							      62 GET_ITER						    62 BINARY_SUBTRACT						  
							      >> 64 FOR_ITER 58 ( to 124 )				    64 BINARY_SUBSCR						  
							      66 STORE_FAST 4 ( j )					    66 LOAD_FAST 2 ( i )					  
							      								    68 LOAD_CONST 1 ( 3 )					  
							      7 68 SETUP_LOOP 52 ( to 122 )				    70 BINARY_SUBTRACT						  
							      70 LOAD_GLOBAL 2 ( range )				    72 BINARY_SUBSCR						  
							      72 LOAD_FAST 4 ( j )					    74 LOAD_FAST 2 ( i )					  
							      74 LOAD_CONST 3 ( 1 )					    76 LOAD_CONST 1 ( 3 )					  
							      76 BINARY_ADD						    78 BINARY_SUBTRACT						  
							      78 LOAD_FAST 1 ( n )					    80 BINARY_SUBSCR						  
							      80 CALL_FUNCTION 2					    82 LOAD_FAST 2 ( i )					  
							      82 GET_ITER						    84 LOAD_CONST 1 ( 3 )					  
							      >> 84 FOR_ITER 34 ( to 120 )				    86 BINARY_SUBTRACT						  
							      86 STORE_FAST 5 ( k )					    88 BINARY_SUBSCR						  
							      								    90 LOAD_FAST 2 ( i )					  
							      8 88 LOAD_GLOBAL 3 ( max )				    92 LOAD_CONST 1 ( 3 )					  
							      90 LOAD_FAST 2 ( max_product )				    94 BINARY_SUBTRACT						  
							      92 LOAD_FAST 0 ( arr )					    96 BINARY_SUBSCR						  
							      94 LOAD_FAST 3 ( i )					    98 LOAD_FAST 2 ( i )					  
							      96 BINARY_SUBSCR						    100 LOAD_CONST 1 ( 3 )					  
							      98 LOAD_FAST 0 ( arr )					    102 BINARY_SUBTRACT						  
							      100 LOAD_FAST 4 ( j )					    104 BINARY_SUBSCR						  
							      102 BINARY_SUBSCR						    106 LOAD_FAST 2 ( i )					  
							      104 BINARY_MULTIPLY					    108 LOAD_CONST 1 ( 3 )					  
							      106 LOAD_FAST 0 ( arr )					    110 BINARY_SUBTRACT						  
							      108 LOAD_FAST 5 ( k )					    112 BINARY_SUBSCR						  
							      110 BINARY_SUBSCR						    114 LOAD_FAST 2 ( i )					  
							      112 BINARY_MULTIPLY					    116 LOAD_CONST 1 ( 3 )					  
							      114 CALL_FUNCTION 2					    118 BINARY_SUBTRACT						  
							      116 STORE_FAST 2 ( max_product )				    120 BINARY_SUBSCR						  
							      118 JUMP_ABSOLUTE 84					    122 BINARY_SUBTRACT						  
							      >> 120 POP_BLOCK						    124 LOAD_FAST 2 ( i )					  
							      >> 122 JUMP_ABSOLUTE 64					    126 LOAD_CONST 1 ( 3 )					  
							      >> 124 POP_BLOCK						    128 BINARY_SUBTRACT						  
							      >> 126 JUMP_ABSOLUTE 40					    130 BINARY_SUBSCR						  
							      >> 128 POP_BLOCK						    132 LOAD_FAST 2 ( i )					  
							      								    134 LOAD_CONST 1 ( 3 )					  
							      9 >> 130 LOAD_FAST 2 ( max_product )			    136 BINARY_SUBTRACT						  
							      132 RETURN_VALUE NEW_LINE					    138 BINARY_SUBSCR						  
							      								    140 LOAD_FAST 2 ( i )					  
							      								    142 LOAD_CONST 1 ( 3 )					  
							      								    144 BINARY_SUBTRACT						  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_FAST 2 ( i )					  
							      								    150 LOAD_CONST 1 ( 3 )					  
							      								    152 BINARY_SUBTRACT						  
							      								    154 BINARY_SUBSCR						  
							      								    156 BINARY_SUBTRACT						  
							      								    158 LOAD_FAST 2 ( i )					  
							      								    160 LOAD_CONST 1 ( 3 )					  
							      								    162 BINARY_SUBTRACT						  
							      								    164 LOAD_FAST 2 ( i )					  
							      								    166 LOAD_CONST 1 ( 3 )					  
							      								    168 BINARY_SUBTRACT						  
							      								    170 STORE_SUBSCR						  
							      								    								  
							      								    6 172 LOAD_FAST 1 ( max_product )				  
							      								    174 LOAD_FAST 2 ( i )					  
							      								    176 LOAD_CONST 1 ( 3 )					  
							      								    178 BINARY_SUBTRACT						  
							      								    180 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GOOGLE_CASE_GIVEN_SENTENCE				      GOOGLE_CASE_GIVEN_SENTENCE				    GOOGLE_CASE_GIVEN_SENTENCE					  GOOGLE_CASE_GIVEN_SENTENCE
--							      --							    --								  --
def convert ( s ) :					      Disassembly of <code object convert at 0x7f33e2649a50, file " Disassembly of <code object convert at 0x7f2b0163dc90, file " error : Traceback (most recent call last):   File
    n = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    s1 = ""						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  (item)   File "main.py", line 39, in <module>	  Fi
    s1 = s1 + s [ 0 ].lower ( )				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in convert IndexError: string
    i = 1						      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  index out of range
    while i < n :					      								    								  
	if ( s [ i ] == ' ' and i <= n ) :		      3 8 LOAD_CONST 1 ( '' )					    3 8 LOAD_CONST 1 ( '' )					  
	    s1 = s1 + " " + ( s [ i + 1 ] ).lower ( )	      10 STORE_FAST 2 ( s1 )					    10 STORE_FAST 2 ( s1 )					  
	    i = i + 1					      								    								  
	else :						      4 12 LOAD_FAST 2 ( s1 )					    4 12 LOAD_FAST 0 ( s )					  
	    s1 = s1 + ( s [ i ] ).upper ( )		      14 LOAD_FAST 0 ( s )					    14 LOAD_FAST 1 ( n )					  
	i = i + 1					      16 LOAD_CONST 2 ( 0 )					    16 BINARY_SUBSCR						  
    return s1						      18 BINARY_SUBSCR						    18 LOAD_METHOD 1 ( lower )					  
							      20 LOAD_METHOD 1 ( lower )				    20 CALL_METHOD 0						  
							      22 CALL_METHOD 0						    22 STORE_FAST 3 ( s1 )					  
							      24 BINARY_ADD						    								  
							      26 STORE_FAST 2 ( s1 )					    5 24 SETUP_LOOP 64 ( to 104 )				  
							      								    26 LOAD_FAST 0 ( s )					  
							      5 28 LOAD_CONST 3 ( 1 )					    28 GET_ITER							  
							      30 STORE_FAST 3 ( i )					    >> 30 FOR_ITER 56 ( to 102 )				  
							      								    32 STORE_FAST 4 ( i )					  
							      6 32 SETUP_LOOP 90 ( to 124 )				    								  
							      >> 34 LOAD_FAST 3 ( i )					    6 34 LOAD_FAST 1 ( n )					  
							      36 LOAD_FAST 1 ( n )					    36 LOAD_FAST 1 ( n )					  
							      38 COMPARE_OP 0 ( < )					    38 COMPARE_OP 4 ( > )					  
							      40 POP_JUMP_IF_FALSE 122					    40 POP_JUMP_IF_FALSE 30					  
							      								    								  
							      7 42 LOAD_FAST 0 ( s )					    7 42 LOAD_FAST 2 ( s1 )					  
							      44 LOAD_FAST 3 ( i )					    44 LOAD_FAST 1 ( n )					  
							      46 BINARY_SUBSCR						    46 BINARY_SUBSCR						  
							      48 LOAD_CONST 4 ( ' ' )					    48 STORE_FAST 2 ( s1 )					  
							      50 COMPARE_OP 2 ( == )					    								  
							      52 POP_JUMP_IF_FALSE 96					    8 50 LOAD_FAST 1 ( n )					  
							      54 LOAD_FAST 3 ( i )					    52 LOAD_FAST 1 ( n )					  
							      56 LOAD_FAST 1 ( n )					    54 COMPARE_OP 4 ( > )					  
							      58 COMPARE_OP 1 ( <= )					    56 POP_JUMP_IF_FALSE 30					  
							      60 POP_JUMP_IF_FALSE 96					    								  
							      								    9 58 LOAD_FAST 2 ( s1 )					  
							      8 62 LOAD_FAST 2 ( s1 )					    60 LOAD_FAST 1 ( n )					  
							      64 LOAD_CONST 4 ( ' ' )					    62 BINARY_SUBSCR						  
							      66 BINARY_ADD						    64 STORE_FAST 2 ( s1 )					  
							      68 LOAD_FAST 0 ( s )					    								  
							      70 LOAD_FAST 3 ( i )					    10 66 LOAD_FAST 2 ( s1 )					  
							      72 LOAD_CONST 3 ( 1 )					    68 LOAD_FAST 1 ( n )					  
							      74 BINARY_ADD						    70 BINARY_SUBSCR						  
							      76 BINARY_SUBSCR						    72 LOAD_FAST 1 ( n )					  
							      78 LOAD_METHOD 1 ( lower )				    74 COMPARE_OP 4 ( > )					  
							      80 CALL_METHOD 0						    76 POP_JUMP_IF_FALSE 30					  
							      82 BINARY_ADD						    								  
							      84 STORE_FAST 2 ( s1 )					    11 78 LOAD_FAST 2 ( s1 )					  
							      								    80 LOAD_FAST 1 ( n )					  
							      9 86 LOAD_FAST 3 ( i )					    82 BINARY_SUBSCR						  
							      88 LOAD_CONST 3 ( 1 )					    84 LOAD_FAST 2 ( s1 )					  
							      90 BINARY_ADD						    86 LOAD_FAST 1 ( n )					  
							      92 STORE_FAST 3 ( i )					    88 STORE_SUBSCR						  
							      94 JUMP_FORWARD 16 ( to 112 )				    								  
							      								    12 90 LOAD_FAST 2 ( s1 )					  
							      11 >> 96 LOAD_FAST 2 ( s1 )				    92 LOAD_FAST 1 ( n )					  
							      98 LOAD_FAST 0 ( s )					    94 BINARY_SUBSCR						  
							      100 LOAD_FAST 3 ( i )					    96 LOAD_FAST 1 ( n )					  
							      102 BINARY_SUBSCR						    98 STORE_SUBSCR						  
							      104 LOAD_METHOD 2 ( upper )				    100 JUMP_ABSOLUTE 30					  
							      106 CALL_METHOD 0						    >> 102 POP_BLOCK						  
							      108 BINARY_ADD						    								  
							      110 STORE_FAST 2 ( s1 )					    13 >> 104 LOAD_FAST 2 ( s1 )				  
							      								    106 RETURN_VALUE NEW_LINE					  
							      12 >> 112 LOAD_FAST 3 ( i )				    								  
							      114 LOAD_CONST 3 ( 1 )					    								  
							      116 BINARY_ADD						    								  
							      118 STORE_FAST 3 ( i )					    								  
							      120 JUMP_ABSOLUTE 34					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      13 >> 124 LOAD_FAST 2 ( s1 )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY				      EQUILIBRIUM_INDEX_OF_AN_ARRAY				    EQUILIBRIUM_INDEX_OF_AN_ARRAY				  EQUILIBRIUM_INDEX_OF_AN_ARRAY
--							      --							    --								  --
def equilibrium ( arr ) :				      Disassembly of <code object equilibrium at 0x7f33e2653ed0, fi Disassembly of <code object equilibrium at 0x7f2b0163dc90, fi script_not_found : None
    leftsum = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    rightsum = 0					      2 STORE_FAST 1 ( leftsum )				    2 STORE_FAST 1 ( leftsum )					  
    n = len ( arr )					      								    								  
    for i in range ( n ) :				      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_GLOBAL 0 ( len )					  
	leftsum = 0					      6 STORE_FAST 2 ( rightsum )				    6 LOAD_FAST 0 ( arr )					  
	rightsum = 0					      								    8 CALL_FUNCTION 1						  
	for j in range ( i ) :				      4 8 LOAD_GLOBAL 0 ( len )					    10 STORE_FAST 2 ( leftsum )					  
	    leftsum += arr [ j ]			      10 LOAD_FAST 0 ( arr )					    								  
	for j in range ( i + 1 , n ) :			      12 CALL_FUNCTION 1					    4 12 SETUP_LOOP 76 ( to 92 )				  
	    rightsum += arr [ j ]			      14 STORE_FAST 3 ( n )					    14 LOAD_GLOBAL 1 ( range )					  
	if leftsum == rightsum :			      								    16 LOAD_FAST 2 ( leftsum )					  
	    return i					      5 16 SETUP_LOOP 102 ( to 120 )				    18 CALL_FUNCTION 1						  
    return - 1						      18 LOAD_GLOBAL 1 ( range )				    20 GET_ITER							  
							      20 LOAD_FAST 3 ( n )					    >> 22 FOR_ITER 76 ( to 90 )					  
							      22 CALL_FUNCTION 1					    24 STORE_FAST 3 ( i )					  
							      24 GET_ITER						    								  
							      >> 26 FOR_ITER 90 ( to 118 )				    5 26 LOAD_FAST 3 ( i )					  
							      28 STORE_FAST 4 ( i )					    28 LOAD_FAST 1 ( leftsum )					  
							      								    30 COMPARE_OP 0 ( < )					  
							      6 30 LOAD_CONST 1 ( 0 )					    32 POP_JUMP_IF_FALSE 42					  
							      32 STORE_FAST 1 ( leftsum )				    								  
							      								    6 34 LOAD_FAST 3 ( i )					  
							      7 34 LOAD_CONST 1 ( 0 )					    36 LOAD_FAST 1 ( leftsum )					  
							      36 STORE_FAST 2 ( rightsum )				    38 COMPARE_OP 0 ( < )					  
							      								    40 POP_JUMP_IF_FALSE 22					  
							      8 38 SETUP_LOOP 28 ( to 68 )				    								  
							      40 LOAD_GLOBAL 1 ( range )				    7 42 LOAD_FAST 3 ( i )					  
							      42 LOAD_FAST 4 ( i )					    44 LOAD_FAST 1 ( leftsum )					  
							      44 CALL_FUNCTION 1					    46 LOAD_FAST 2 ( leftsum )					  
							      46 GET_ITER						    48 BINARY_SUBTRACT						  
							      >> 48 FOR_ITER 16 ( to 66 )				    50 LOAD_FAST 3 ( i )					  
							      50 STORE_FAST 5 ( j )					    52 BINARY_MULTIPLY						  
							      								    54 LOAD_FAST 2 ( leftsum )					  
							      9 52 LOAD_FAST 1 ( leftsum )				    56 BINARY_SUBTRACT						  
							      54 LOAD_FAST 0 ( arr )					    58 LOAD_FAST 3 ( i )					  
							      56 LOAD_FAST 5 ( j )					    60 BINARY_MULTIPLY						  
							      58 BINARY_SUBSCR						    62 BINARY_SUBTRACT						  
							      60 INPLACE_ADD						    64 LOAD_FAST 3 ( i )					  
							      62 STORE_FAST 1 ( leftsum )				    66 LOAD_FAST 1 ( leftsum )					  
							      64 JUMP_ABSOLUTE 48					    68 BINARY_SUBTRACT						  
							      >> 66 POP_BLOCK						    70 BINARY_MULTIPLY						  
							      								    72 LOAD_FAST 3 ( i )					  
							      10 >> 68 SETUP_LOOP 34 ( to 104 )				    74 LOAD_FAST 1 ( leftsum )					  
							      70 LOAD_GLOBAL 1 ( range )				    76 BINARY_SUBTRACT						  
							      72 LOAD_FAST 4 ( i )					    78 BINARY_MULTIPLY						  
							      74 LOAD_CONST 2 ( 1 )					    80 LOAD_FAST 3 ( i )					  
							      76 BINARY_ADD						    82 BINARY_MULTIPLY						  
							      78 LOAD_FAST 3 ( n )					    84 BINARY_SUBTRACT						  
							      80 CALL_FUNCTION 2					    86 LOAD_FAST 3 ( i )					  
							      82 GET_ITER						    88 BINARY_MULTIPLY						  
							      >> 84 FOR_ITER 16 ( to 102 )				    90 BINARY_SUBTRACT						  
							      86 STORE_FAST 5 ( j )					    92 LOAD_FAST 3 ( i )					  
							      								    94 LOAD_FAST 1 ( leftsum )					  
							      11 88 LOAD_FAST 2 ( rightsum )				    96 BINARY_SUBTRACT						  
							      90 LOAD_FAST 0 ( arr )					    98 BINARY_MULTIPLY						  
							      92 LOAD_FAST 5 ( j )					    100 LOAD_FAST 2 ( leftsum )					  
							      94 BINARY_SUBSCR						    102 LOAD_FAST 3 ( i )					  
							      96 INPLACE_ADD						    104 BINARY_MULTIPLY						  
							      98 STORE_FAST 2 ( rightsum )				    106 LOAD_FAST 2 ( leftsum )					  
							      100 JUMP_ABSOLUTE 84					    108 BINARY_SUBTRACT						  
							      >> 102 POP_BLOCK						    110 LOAD_FAST 3 ( i )					  
							      								    112 BINARY_MULTIPLY						  
							      12 >> 104 LOAD_FAST 1 ( leftsum )				    114 BINARY_SUBTRACT						  
							      106 LOAD_FAST 2 ( rightsum )				    116 LOAD_FAST 2 ( leftsum )					  
							      108 COMPARE_OP 2 ( == )					    118 BINARY_SUBTRACT						  
							      110 POP_JUMP_IF_FALSE 26					    120 LOAD_FAST 3 ( i )					  
							      								    122 BINARY_MULTIPLY						  
							      13 112 LOAD_FAST 4 ( i )					    124 BINARY_ADD						  
							      114 RETURN_VALUE						    126 LOAD_FAST 2 ( leftsum )					  
							      116 JUMP_ABSOLUTE 26					    128 BINARY_SUBTRACT						  
							      >> 118 POP_BLOCK						    130 LOAD_FAST 3 ( i )					  
							      								    132 BINARY_MULTIPLY						  
							      14 >> 120 LOAD_CONST 3 ( - 1 )				    134 LOAD_FAST 2 ( leftsum )					  
							      122 RETURN_VALUE NEW_LINE					    136 BINARY_SUBTRACT						  
							      								    138 LOAD_FAST 3 ( i )					  
							      								    140 BINARY_MULTIPLY						  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 2 ( leftsum )					  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 3 ( i )					  
							      								    150 BINARY_MULTIPLY						  
							      								    152 BINARY_SUBTRACT						  
							      								    154 LOAD_FAST 2 ( leftsum )					  
							      								    156 BINARY_SUBTRACT						  
							      								    158 LOAD_FAST 2 ( leftsum )					  
							      								    160 BINARY_SUBTRACT						  
							      								    162 LOAD_FAST 3 ( i )					  
							      								    164 BINARY_TRUE_DIVIDE					  
							      								    166 BINARY_SUBTRACT						  
							      								    168 LOAD_FAST 2 ( leftsum )					  
							      								    170 BINARY_SUBTRACT						  
							      								    172 LOAD_FAST 3 ( i )					  
							      								    174 BINARY_SUBTRACT						  
							      								    176 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PALINDROME_K_DIGITS					      NTH_PALINDROME_K_DIGITS					    NTH_PALINDROME_K_DIGITS					  NTH_PALINDROME_K_DIGITS
--							      --							    --								  --
def nthPalindrome ( n , k ) :				      Disassembly of <code object nthPalindrome at 0x7f33e2653f60,  Disassembly of <code object nthPalindrome at 0x7f2b0163dc90,  script_not_found : None
    if ( k & 1 ) :					      2 0 LOAD_FAST 1 ( k )					    2 0 LOAD_FAST 0 ( n )					  
	temp = k // 2					      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    else :						      4 BINARY_AND						    4 COMPARE_OP 2 ( == )					  
	temp = k // 2 - 1				      6 POP_JUMP_IF_FALSE 18					    6 POP_JUMP_IF_FALSE 20					  
    palindrome = 10 ** temp				      								    								  
    palindrome = palindrome + n - 1			      3 8 LOAD_FAST 1 ( k )					    3 8 LOAD_FAST 0 ( n )					  
    print ( palindrome , end = "" )			      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
    if ( k & 1 ) :					      12 BINARY_FLOOR_DIVIDE					    12 BINARY_MODULO						  
	palindrome = palindrome // 10			      14 STORE_FAST 2 ( temp )					    14 STORE_FAST 1 ( temp )					  
    while ( palindrome ) :				      16 JUMP_FORWARD 12 ( to 30 )				    								  
	print ( palindrome % 10 , end = "" )		      								    4 16 LOAD_FAST 1 ( temp )					  
	palindrome = palindrome // 10			      5 >> 18 LOAD_FAST 1 ( k )					    18 LOAD_CONST 2 ( 2 )					  
							      20 LOAD_CONST 2 ( 2 )					    20 BINARY_MODULO						  
							      22 BINARY_FLOOR_DIVIDE					    22 STORE_FAST 2 ( palpalpalpalpalpalpalpalpalpalpalpalpalpalp 
							      24 LOAD_CONST 1 ( 1 )					    								  
							      26 BINARY_SUBTRACT					    								  
							      28 STORE_FAST 2 ( temp )					    								  
							      								    								  
							      6 >> 30 LOAD_CONST 3 ( 10 )				    								  
							      32 LOAD_FAST 2 ( temp )					    								  
							      34 BINARY_POWER						    								  
							      36 STORE_FAST 3 ( palindrome )				    								  
							      								    								  
							      7 38 LOAD_FAST 3 ( palindrome )				    								  
							      40 LOAD_FAST 0 ( n )					    								  
							      42 BINARY_ADD						    								  
							      44 LOAD_CONST 1 ( 1 )					    								  
							      46 BINARY_SUBTRACT					    								  
							      48 STORE_FAST 3 ( palindrome )				    								  
							      								    								  
							      8 50 LOAD_GLOBAL 0 ( print )				    								  
							      52 LOAD_FAST 3 ( palindrome )				    								  
							      54 LOAD_CONST 4 ( '' )					    								  
							      56 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      58 CALL_FUNCTION_KW 2					    								  
							      60 POP_TOP						    								  
							      								    								  
							      9 62 LOAD_FAST 1 ( k )					    								  
							      64 LOAD_CONST 1 ( 1 )					    								  
							      66 BINARY_AND						    								  
							      68 POP_JUMP_IF_FALSE 78					    								  
							      								    								  
							      10 70 LOAD_FAST 3 ( palindrome )				    								  
							      72 LOAD_CONST 3 ( 10 )					    								  
							      74 BINARY_FLOOR_DIVIDE					    								  
							      76 STORE_FAST 3 ( palindrome )				    								  
							      								    								  
							      11 >> 78 SETUP_LOOP 32 ( to 112 )				    								  
							      >> 80 LOAD_FAST 3 ( palindrome )				    								  
							      82 POP_JUMP_IF_FALSE 110					    								  
							      								    								  
							      12 84 LOAD_GLOBAL 0 ( print )				    								  
							      86 LOAD_FAST 3 ( palindrome )				    								  
							      88 LOAD_CONST 3 ( 10 )					    								  
							      90 BINARY_MODULO						    								  
							      92 LOAD_CONST 4 ( '' )					    								  
							      94 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      96 CALL_FUNCTION_KW 2					    								  
							      98 POP_TOP						    								  
							      								    								  
							      13 100 LOAD_FAST 3 ( palindrome )				    								  
							      102 LOAD_CONST 3 ( 10 )					    								  
							      104 BINARY_FLOOR_DIVIDE					    								  
							      106 STORE_FAST 3 ( palindrome )				    								  
							      108 JUMP_ABSOLUTE 80					    								  
							      >> 110 POP_BLOCK						    								  
							      >> 112 LOAD_CONST 0 ( None )				    								  
							      114 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			      CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			    CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			  CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND
--							      --							    --								  --
def calcAngle ( h , m ) :				      Disassembly of <code object calcAngle at 0x7f33e2644930, file Disassembly of <code object calcAngle at 0x7f2b01639660, file error : Traceback (most recent call last):   File
    if ( h < 0 or m < 0 or h > 12 or m > 60 ) :		      2 0 LOAD_FAST 0 ( h )					    2 0 LOAD_FAST 0 ( h )					  "XLM/dis_script.py", line 59, in <module>	for
	print ( 'Wrong input' )				      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( h == 12 ) :					      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  y", line 54, in run_dis_script     hyp_co = mco.to
	h = 0						      6 POP_JUMP_IF_TRUE 32					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    if ( m == 60 ) :					      8 LOAD_FAST 1 ( m )					    								  assembler.py", line 81, in to_co     co_consts.app
	m = 0						      10 LOAD_CONST 1 ( 0 )					    3 8 LOAD_GLOBAL 0 ( print )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
    hour_angle = 0.5 * ( h * 60 + m )			      12 COMPARE_OP 0 ( < )					    10 LOAD_CONST 2 ( 'Wrong input' )				  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    minute_angle = 6 * m				      14 POP_JUMP_IF_TRUE 32					    12 CALL_FUNCTION 1						  co	 self.co_cellvars, ValueError: code: varname
    angle = abs ( hour_angle - minute_angle )		      16 LOAD_FAST 0 ( h )					    14 POP_TOP							  s is too small
    angle = min ( 360 - angle , angle )			      18 LOAD_CONST 2 ( 12 )					    								  
    return angle					      20 COMPARE_OP 4 ( > )					    4 16 LOAD_GLOBAL 0 ( print )				  
							      22 POP_JUMP_IF_TRUE 32					    18 LOAD_CONST 3 ( 'Wrong input' )				  
							      24 LOAD_FAST 1 ( m )					    20 CALL_FUNCTION 1						  
							      26 LOAD_CONST 3 ( 60 )					    22 POP_TOP							  
							      28 COMPARE_OP 4 ( > )					    								  
							      30 POP_JUMP_IF_FALSE 40					    5 24 LOAD_GLOBAL 0 ( print )				  
							      								    26 LOAD_CONST 4 ( 'Wrong input' )				  
							      3 >> 32 LOAD_GLOBAL 0 ( print )				    28 CALL_FUNCTION 1						  
							      34 LOAD_CONST 4 ( 'Wrong input' )				    30 POP_TOP							  
							      36 CALL_FUNCTION 1					    								  
							      38 POP_TOP						    6 32 LOAD_GLOBAL 0 ( print )				  
							      								    34 LOAD_CONST 5 ( 'Wrong input ' )				  
							      4 >> 40 LOAD_FAST 0 ( h )					    36 CALL_FUNCTION 1						  
							      42 LOAD_CONST 2 ( 12 )					    38 POP_TOP							  
							      44 COMPARE_OP 2 ( == )					    								  
							      46 POP_JUMP_IF_FALSE 52					    7 40 LOAD_GLOBAL 0 ( print )				  
							      								    42 LOAD_CONST 6 ( 'Wrong input ' )				  
							      5 48 LOAD_CONST 1 ( 0 )					    44 CALL_FUNCTION 1						  
							      50 STORE_FAST 0 ( h )					    46 POP_TOP							  
							      								    								  
							      6 >> 52 LOAD_FAST 1 ( m )					    8 48 LOAD_GLOBAL 0 ( print )				  
							      54 LOAD_CONST 3 ( 60 )					    50 LOAD_CONST 7 ( 'Wrong input ' )				  
							      56 COMPARE_OP 2 ( == )					    52 CALL_FUNCTION 1						  
							      58 POP_JUMP_IF_FALSE 64					    54 POP_TOP							  
							      								    								  
							      7 60 LOAD_CONST 1 ( 0 )					    9 56 LOAD_GLOBAL 0 ( print )				  
							      62 STORE_FAST 1 ( m )					    58 LOAD_CONST 8 ( 'Wrong input ' )				  
							      								    60 CALL_FUNCTION 1						  
							      8 >> 64 LOAD_CONST 5 ( 0.5 )				    62 POP_TOP							  
							      66 LOAD_FAST 0 ( h )					    								  
							      68 LOAD_CONST 3 ( 60 )					    10 64 LOAD_GLOBAL 0 ( print )				  
							      70 BINARY_MULTIPLY					    66 LOAD_CONST 9 ( 'Wrong input ' )				  
							      72 LOAD_FAST 1 ( m )					    68 CALL_FUNCTION 1						  
							      74 BINARY_ADD						    70 POP_TOP							  
							      76 BINARY_MULTIPLY					    								  
							      78 STORE_FAST 2 ( hour_angle )				    11 72 LOAD_GLOBAL 0 ( print )				  
							      								    74 LOAD_CONST 10 ( 'Wrong input ' )				  
							      9 80 LOAD_CONST 6 ( 6 )					    76 CALL_FUNCTION 1						  
							      82 LOAD_FAST 1 ( m )					    78 POP_TOP							  
							      84 BINARY_MULTIPLY					    								  
							      86 STORE_FAST 3 ( minute_angle )				    12 80 LOAD_GLOBAL 0 ( print )				  
							      								    82 LOAD_CONST 11 ( 'Wrong input ' )				  
							      10 88 LOAD_GLOBAL 1 ( abs )				    84 CALL_FUNCTION 1						  
							      90 LOAD_FAST 2 ( hour_angle )				    86 POP_TOP							  
							      92 LOAD_FAST 3 ( minute_angle )				    								  
							      94 BINARY_SUBTRACT					    13 88 LOAD_GLOBAL 0 ( print )				  
							      96 CALL_FUNCTION 1					    90 LOAD_CONST 12 ( 'Wrong input ' )				  
							      98 STORE_FAST 4 ( angle )					    92 CALL_FUNCTION 1						  
							      								    94 POP_TOP							  
							      11 100 LOAD_GLOBAL 2 ( min )				    								  
							      102 LOAD_CONST 7 ( 360 )					    14 96 LOAD_GLOBAL 0 ( print )				  
							      104 LOAD_FAST 4 ( angle )					    98 LOAD_CONST 13 ( 'Wrong input ' )				  
							      106 BINARY_SUBTRACT					    100 CALL_FUNCTION 1						  
							      108 LOAD_FAST 4 ( angle )					    102 POP_TOP							  
							      110 CALL_FUNCTION 2					    104 LOAD_CONST 0 ( None )					  
							      112 STORE_FAST 4 ( angle )				    106 RETURN_VALUE NEW_LINE					  
							      								    								  
							      12 114 LOAD_FAST 4 ( angle )				    								  
							      116 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION			      SORTING_USING_TRIVIAL_HASH_FUNCTION			    SORTING_USING_TRIVIAL_HASH_FUNCTION				  SORTING_USING_TRIVIAL_HASH_FUNCTION
--							      --							    --								  --
def sortUsingHash ( a , n ) :				      Disassembly of <code object sortUsingHash at 0x7f33e2653f60,  Disassembly of <code object sortUsingHash at 0x7f2b0163dc90,  script_not_found : None
    Max = max ( a )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  
    Hash = [ 0 ] * ( Max + 1 )				      2 LOAD_FAST 0 ( a )					    2 LOAD_FAST 0 ( a )						  
    for i in range ( 0 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	Hash [ a [ i ] ] += 1				      6 STORE_FAST 2 ( Max )					    6 STORE_FAST 2 ( Max )					  
    for i in range ( 0 , Max + 1 ) :			      								    								  
	if Hash [ i ] != 0 :				      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
	    for j in range ( 0 , Hash [ i ] ) :		      10 BUILD_LIST 1						    10 LOAD_CONST 2 ( 1 )					  
		print ( i , end = " " )			      12 LOAD_FAST 2 ( Max )					    12 BINARY_SUBTRACT						  
							      14 LOAD_CONST 2 ( 1 )					    14 BINARY_MULTIPLY						  
							      16 BINARY_ADD						    16 STORE_FAST 3 ( ans )					  
							      18 BINARY_MULTIPLY					    								  
							      20 STORE_FAST 3 ( Hash )					    4 18 SETUP_LOOP 64 ( to 76 )				  
							      								    20 LOAD_GLOBAL 1 ( range )					  
							      4 22 SETUP_LOOP 38 ( to 62 )				    22 LOAD_FAST 0 ( a )					  
							      24 LOAD_GLOBAL 1 ( range )				    24 LOAD_CONST 1 ( 0 )					  
							      26 LOAD_CONST 1 ( 0 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 LOAD_FAST 1 ( n )					    28 CALL_FUNCTION 2						  
							      30 CALL_FUNCTION 2					    30 GET_ITER							  
							      32 GET_ITER						    >> 32 FOR_ITER 48 ( to 74 )					  
							      >> 34 FOR_ITER 24 ( to 60 )				    34 STORE_FAST 4 ( i )					  
							      36 STORE_FAST 4 ( i )					    								  
							      								    5 36 LOAD_FAST 3 ( ans )					  
							      5 38 LOAD_FAST 3 ( Hash )					    38 LOAD_FAST 4 ( i )					  
							      40 LOAD_FAST 0 ( a )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 4 ( i )					    42 LOAD_FAST 1 ( n )					  
							      44 BINARY_SUBSCR						    44 COMPARE_OP 3 ( != )					  
							      46 DUP_TOP_TWO						    46 POP_JUMP_IF_FALSE 32					  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_CONST 2 ( 1 )					    6 48 LOAD_FAST 2 ( Max )					  
							      52 INPLACE_ADD						    50 LOAD_FAST 1 ( n )					  
							      54 ROT_THREE						    52 BINARY_SUBSCR						  
							      56 STORE_SUBSCR						    54 LOAD_FAST 1 ( n )					  
							      58 JUMP_ABSOLUTE 34					    56 COMPARE_OP 4 ( > )					  
							      >> 60 POP_BLOCK						    58 POP_JUMP_IF_FALSE 32					  
							      								    								  
							      6 >> 62 SETUP_LOOP 70 ( to 134 )				    7 60 LOAD_FAST 2 ( Max )					  
							      64 LOAD_GLOBAL 1 ( range )				    62 LOAD_FAST 1 ( n )					  
							      66 LOAD_CONST 1 ( 0 )					    64 BINARY_SUBSCR						  
							      68 LOAD_FAST 2 ( Max )					    66 LOAD_FAST 2 ( Max )					  
							      70 LOAD_CONST 2 ( 1 )					    68 LOAD_FAST 1 ( n )					  
							      72 BINARY_ADD						    70 BINARY_SUBSCR						  
							      74 CALL_FUNCTION 2					    72 LOAD_FAST 2 ( Max )					  
							      76 GET_ITER						    74 LOAD_FAST 1 ( n )					  
							      >> 78 FOR_ITER 52 ( to 132 )				    76 STORE_SUBSCR						  
							      80 STORE_FAST 4 ( i )					    								  
							      								    8 78 LOAD_FAST 2 ( Max )					  
							      7 82 LOAD_FAST 3 ( Hash )					    80 LOAD_FAST 1 ( n )					  
							      84 LOAD_FAST 4 ( i )					    82 BINARY_SUBSCR						  
							      86 BINARY_SUBSCR						    84 LOAD_FAST 2 ( Max )					  
							      88 LOAD_CONST 1 ( 0 )					    86 LOAD_FAST 1 ( n )					  
							      90 COMPARE_OP 3 ( != )					    88 STORE_SUBSCR						  
							      92 POP_JUMP_IF_FALSE 78					    								  
							      								    9 90 LOAD_FAST 2 ( Max )					  
							      8 94 SETUP_LOOP 34 ( to 130 )				    92 LOAD_FAST 1 ( n )					  
							      96 LOAD_GLOBAL 1 ( range )				    94 BINARY_SUBSCR						  
							      98 LOAD_CONST 1 ( 0 )					    96 LOAD_FAST 2 ( Max )					  
							      100 LOAD_FAST 3 ( Hash )					    98 LOAD_FAST 1 ( n )					  
							      102 LOAD_FAST 4 ( i )					    100 STORE_SUBSCR						  
							      104 BINARY_SUBSCR						    								  
							      106 CALL_FUNCTION 2					    10 102 LOAD_FAST 2 ( Max )					  
							      108 GET_ITER						    104 LOAD_FAST 1 ( n )					  
							      >> 110 FOR_ITER 16 ( to 128 )				    106 STORE_SUBSCR						  
							      112 STORE_FAST 5 ( j )					    								  
							      								    11 108 LOAD_FAST 2 ( Max )					  
							      9 114 LOAD_GLOBAL 2 ( print )				    110 LOAD_FAST 1 ( n )					  
							      116 LOAD_FAST 4 ( i )					    112 STORE_SUBSCR						  
							      118 LOAD_CONST 3 ( ' ' )					    								  
							      120 LOAD_CONST 4 ( ( 'end' , ) )				    12 114 LOAD_FAST 2 ( Max )					  
							      122 CALL_FUNCTION_KW 2					    116 LOAD_FAST 1 ( n )					  
							      124 POP_TOP						    118 STORE_SUBSCR						  
							      126 JUMP_ABSOLUTE 110					    120 JUMP_ABSOLUTE 32					  
							      >> 128 POP_BLOCK						    >> 122 POP_BLOCK						  
							      >> 130 JUMP_ABSOLUTE 78					    								  
							      >> 132 POP_BLOCK						    13 >> 124 LOAD_FAST 2 ( Max )				  
							      >> 134 LOAD_CONST 0 ( None )				    126 LOAD_FAST 1 ( n )					  
							      136 RETURN_VALUE NEW_LINE					    128 STORE_SUBSCR						  
							      								    								  
							      								    14 130 LOAD_FAST 2 ( Max )					  
							      								    132 LOAD_FAST 1 ( n )					  
							      								    134 STORE_SUBSCR						  
							      								    								  
							      								    15 136 LOAD_FAST 2 ( Max )					  
							      								    138 LOAD_FAST 1 ( n )					  
							      								    140 STORE_SUBSCR						  
							      								    								  
							      								    16 142 LOAD_FAST 2 ( Max )					  
							      								    144 LOAD_FAST 1 ( n )					  
							      								    146 STORE_SUBSCR						  
							      								    								  
							      								    17 148 LOAD_FAST 2 ( Max )					  
							      								    150 LOAD_FAST 1 ( n )					  
							      								    152 STORE_SUBSCR						  
							      								    								  
							      								    18 154 LOAD_FAST 2 ( Max )					  
							      								    156 LOAD_FAST 1 ( n )					  
							      								    158 STORE_SUBSCR						  
							      								    								  
							      								    17								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			      FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			    FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT				  FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT
--							      --							    --								  --
def possibleOrNot ( a1 , a2 , b1 , b2 , c1 , c2 ) :	      Disassembly of <code object possibleOrNot at 0x7f33e2644f60,  Disassembly of <code object possibleOrNot at 0x7f2b0163dc90,  script_not_found : None
    dis1 = ( pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 ) )      2 0 LOAD_GLOBAL 0 ( pow )					    2 0 LOAD_GLOBAL 0 ( pow )					  
    dis2 = ( pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 ) )      2 LOAD_FAST 2 ( b1 )					    2 LOAD_FAST 0 ( a1 )					  
    if ( dis1 != dis2 ) :				      4 LOAD_FAST 0 ( a1 )					    4 LOAD_FAST 1 ( a1 )					  
	print ( "No" )					      6 BINARY_SUBTRACT						    6 LOAD_FAST 2 ( b1 )					  
    elif ( b1 == ( ( a1 + c1 ) // 2.0 ) and b2 == ( ( a2 + c2 8 LOAD_CONST 1 ( 2 )					    8 LOAD_FAST 3 ( b1 )					  
	print ( "No" )					      10 CALL_FUNCTION 2					    10 CALL_FUNCTION 3						  
    else :						      12 LOAD_GLOBAL 0 ( pow )					    12 LOAD_GLOBAL 0 ( pow )					  
	print ( "Yes" )					      14 LOAD_FAST 3 ( b2 )					    14 LOAD_FAST 1 ( a1 )					  
							      16 LOAD_FAST 1 ( a2 )					    16 LOAD_FAST 2 ( b1 )					  
							      18 BINARY_SUBTRACT					    18 CALL_FUNCTION 2						  
							      20 LOAD_CONST 1 ( 2 )					    20 LOAD_GLOBAL 0 ( pow )					  
							      22 CALL_FUNCTION 2					    22 LOAD_FAST 1 ( a1 )					  
							      24 BINARY_ADD						    24 LOAD_FAST 2 ( b1 )					  
							      26 STORE_FAST 6 ( dis1 )					    26 CALL_FUNCTION 2						  
							      								    28 BINARY_MULTIPLY						  
							      3 28 LOAD_GLOBAL 0 ( pow )				    30 CALL_FUNCTION 1						  
							      30 LOAD_FAST 4 ( c1 )					    32 STORE_FAST 4 ( b1 )					  
							      32 LOAD_FAST 2 ( b1 )					    								  
							      34 BINARY_SUBTRACT					    3 34 LOAD_GLOBAL 0 ( pow )					  
							      36 LOAD_CONST 1 ( 2 )					    36 LOAD_FAST 0 ( a1 )					  
							      38 CALL_FUNCTION 2					    38 LOAD_FAST 1 ( a1 )					  
							      40 LOAD_GLOBAL 0 ( pow )					    40 LOAD_FAST 3 ( b1 )					  
							      42 LOAD_FAST 5 ( c2 )					    42 CALL_FUNCTION 3						  
							      44 LOAD_FAST 3 ( b2 )					    44 STORE_FAST 5 ( a )					  
							      46 BINARY_SUBTRACT					    								  
							      48 LOAD_CONST 1 ( 2 )					    4 46 LOAD_GLOBAL 0 ( pow )					  
							      50 CALL_FUNCTION 2					    48 LOAD_FAST 0 ( a1 )					  
							      52 BINARY_ADD						    50 LOAD_FAST 1 ( a1 )					  
							      54 STORE_FAST 7 ( dis2 )					    52 LOAD_FAST 2 ( b1 )					  
							      								    54 CALL_FUNCTION 3						  
							      4 56 LOAD_FAST 6 ( dis1 )					    56 STORE_FAST 6 ( a )					  
							      58 LOAD_FAST 7 ( dis2 )					    								  
							      60 COMPARE_OP 3 ( != )					    5 58 LOAD_GLOBAL 0 ( pow )					  
							      62 POP_JUMP_IF_FALSE 74					    60 LOAD_FAST 0 ( a1 )					  
							      								    62 LOAD_FAST 1 ( a1 )					  
							      5 64 LOAD_GLOBAL 1 ( print )				    64 LOAD_FAST 2 ( b1 )					  
							      66 LOAD_CONST 2 ( 'No' )					    66 CALL_FUNCTION 3						  
							      68 CALL_FUNCTION 1					    68 STORE_FAST 7 ( a )					  
							      70 POP_TOP						    								  
							      72 JUMP_FORWARD 50 ( to 124 )				    6 70 LOAD_GLOBAL 0 ( pow )					  
							      								    72 LOAD_FAST 0 ( a1 )					  
							      6 >> 74 LOAD_FAST 2 ( b1 )				    74 LOAD_FAST 1 ( a1 )					  
							      76 LOAD_FAST 0 ( a1 )					    76 LOAD_FAST 2 ( b1 )					  
							      78 LOAD_FAST 4 ( c1 )					    78 CALL_FUNCTION 3						  
							      80 BINARY_ADD						    80 STORE_FAST 8 ( b )					  
							      82 LOAD_CONST 3 ( 2.0 )					    								  
							      84 BINARY_FLOOR_DIVIDE					    7 82 LOAD_GLOBAL 0 ( pow )					  
							      86 COMPARE_OP 2 ( == )					    84 LOAD_FAST 0 ( a1 )					  
							      88 POP_JUMP_IF_FALSE 116					    86 LOAD_FAST 1 ( a1 )					  
							      90 LOAD_FAST 3 ( b2 )					    88 LOAD_FAST 2 ( b1 )					  
							      92 LOAD_FAST 1 ( a2 )					    90 CALL_FUNCTION 3						  
							      94 LOAD_FAST 5 ( c2 )					    92 STORE_FAST 9 ( b )					  
							      96 BINARY_ADD						    								  
							      98 LOAD_CONST 3 ( 2.0 )					    8 94 LOAD_GLOBAL 0 ( pow )					  
							      100 BINARY_FLOOR_DIVIDE					    96 LOAD_FAST 0 ( a1 )					  
							      102 COMPARE_OP 2 ( == )					    98 LOAD_FAST 1 ( a1 )					  
							      104 POP_JUMP_IF_FALSE 116					    100 LOAD_FAST 2 ( b1 )					  
							      								    102 CALL_FUNCTION 3						  
							      7 106 LOAD_GLOBAL 1 ( print )				    104 STORE_FAST 10 ( a )					  
							      108 LOAD_CONST 2 ( 'No' )					    								  
							      110 CALL_FUNCTION 1					    9 106 LOAD_GLOBAL 0 ( pow )					  
							      112 POP_TOP						    108 LOAD_FAST 0 ( a1 )					  
							      114 JUMP_FORWARD 8 ( to 124 )				    110 LOAD_FAST 3 ( b1 )					  
							      								    112 CALL_FUNCTION 2						  
							      9 >> 116 LOAD_GLOBAL 1 ( print )				    114 STORE_FAST 11 ( b )					  
							      118 LOAD_CONST 4 ( 'Yes' )				    								  
							      120 CALL_FUNCTION 1					    10 116 LOAD_GLOBAL 0 ( pow )				  
							      122 POP_TOP						    118 LOAD_FAST 0 ( a1 )					  
							      >> 124 LOAD_CONST 0 ( None )				    120 LOAD_FAST 3 ( b1 )					  
							      126 RETURN_VALUE NEW_LINE					    122 CALL_FUNCTION 3						  
							      								    124 STORE_FAST 12 ( a )					  
							      								    								  
							      								    11 126 LOAD_GLOBAL 0 ( pow )				  
							      								    128 LOAD_FAST 0 ( a1 )					  
							      								    130 LOAD_FAST 5 ( a )					  
							      								    132 LOAD_FAST 2 ( b1 )					  
							      								    134 CALL_FUNCTION 3						  
							      								    136 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	      MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	    MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION	  MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION
--							      --							    --								  --
def findPlatform ( arr , dep , n ) :			      Disassembly of <code object findPlatform at 0x7f33e26494b0, f Disassembly of <code object findPlatform at 0x7f2b0163dc90, f error : /bin/bash: line 1: 12696 Segmentation faul
    arr.sort ( )					      2 0 LOAD_FAST 0 ( arr )					    2 0 LOAD_FAST 0 ( arr )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
    dep.sort ( )					      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  ataset/bin/python XLM/dis_script.py --script_path
    plat_needed = 1					      4 CALL_METHOD 0						    4 CALL_METHOD 0						  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    result = 1						      6 POP_TOP							    6 POP_TOP							  24/eval_scripts/python_sa-dis_sa.valid/MINIMUM_NUM
    i = 1						      								    								  BER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION.dis
    j = 0						      3 8 LOAD_FAST 1 ( dep )					    3 8 LOAD_FAST 0 ( arr )					  
    while ( i < n and j < n ) :				      10 LOAD_METHOD 0 ( sort )					    10 LOAD_METHOD 0 ( sort )					  
	if ( arr [ i ] < dep [ j ] ) :			      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
	    plat_needed += 1				      14 POP_TOP						    14 POP_TOP							  
	    i += 1					      								    								  
	    if ( plat_needed > result ) :		      4 16 LOAD_CONST 1 ( 1 )					    4 16 LOAD_CONST 1 ( 1 )					  
		result = plat_needed			      18 STORE_FAST 3 ( plat_needed )				    18 STORE_FAST 2 ( i )					  
	else :						      								    								  
	    plat_needed -= 1				      5 20 LOAD_CONST 1 ( 1 )					    5 20 LOAD_CONST 1 ( 1 )					  
	    j += 1					      22 STORE_FAST 4 ( result )				    22 STORE_FAST 3 ( i )					  
    return result					      								    								  
							      6 24 LOAD_CONST 1 ( 1 )					    6 24 SETUP_LOOP 64 ( to 104 )				  
							      26 STORE_FAST 5 ( i )					    26 LOAD_FAST 0 ( arr )					  
							      								    28 GET_ITER							  
							      7 28 LOAD_CONST 2 ( 0 )					    >> 30 FOR_ITER 64 ( to 102 )				  
							      30 STORE_FAST 6 ( j )					    32 STORE_FAST 4 ( i )					  
							      								    								  
							      8 32 SETUP_LOOP 82 ( to 116 )				    7 34 LOAD_FAST 4 ( i )					  
							      >> 34 LOAD_FAST 5 ( i )					    36 LOAD_CONST 2 ( 0 )					  
							      36 LOAD_FAST 2 ( n )					    38 COMPARE_OP 4 ( > )					  
							      38 COMPARE_OP 0 ( < )					    40 POP_JUMP_IF_FALSE 30					  
							      40 POP_JUMP_IF_FALSE 114					    								  
							      42 LOAD_FAST 6 ( j )					    8 42 LOAD_FAST 1 ( dep )					  
							      44 LOAD_FAST 2 ( n )					    44 LOAD_METHOD 0 ( sort )					  
							      46 COMPARE_OP 0 ( < )					    46 CALL_METHOD 0						  
							      48 POP_JUMP_IF_FALSE 114					    48 POP_TOP							  
							      								    								  
							      9 50 LOAD_FAST 0 ( arr )					    9 50 LOAD_FAST 1 ( dep )					  
							      52 LOAD_FAST 5 ( i )					    52 LOAD_METHOD 0 ( sort )					  
							      54 BINARY_SUBSCR						    54 CALL_METHOD 0						  
							      56 LOAD_FAST 1 ( dep )					    56 POP_TOP							  
							      58 LOAD_FAST 6 ( j )					    								  
							      60 BINARY_SUBSCR						    10 58 LOAD_FAST 1 ( dep )					  
							      62 COMPARE_OP 0 ( < )					    60 LOAD_METHOD 0 ( sort )					  
							      64 POP_JUMP_IF_FALSE 96					    62 CALL_METHOD 0						  
							      								    64 POP_TOP							  
							      10 66 LOAD_FAST 3 ( plat_needed )				    								  
							      68 LOAD_CONST 1 ( 1 )					    11 66 LOAD_FAST 1 ( dep )					  
							      70 INPLACE_ADD						    68 LOAD_METHOD 0 ( sort )					  
							      72 STORE_FAST 3 ( plat_needed )				    70 CALL_METHOD 0						  
							      								    72 POP_TOP							  
							      11 74 LOAD_FAST 5 ( i )					    								  
							      76 LOAD_CONST 1 ( 1 )					    12 74 LOAD_FAST 1 ( dep )					  
							      78 INPLACE_ADD						    76 LOAD_METHOD 0 ( sort )					  
							      80 STORE_FAST 5 ( i )					    78 CALL_METHOD 0						  
							      								    80 POP_TOP							  
							      12 82 LOAD_FAST 3 ( plat_needed )				    								  
							      84 LOAD_FAST 4 ( result )					    13 82 LOAD_FAST 1 ( dep )					  
							      86 COMPARE_OP 4 ( > )					    84 LOAD_METHOD 0 ( sort )					  
							      88 POP_JUMP_IF_FALSE 112					    86 CALL_METHOD 0						  
							      								    88 POP_TOP							  
							      13 90 LOAD_FAST 3 ( plat_needed )				    								  
							      92 STORE_FAST 4 ( result )				    14 90 LOAD_FAST 1 ( dep )					  
							      94 JUMP_ABSOLUTE 34					    92 LOAD_METHOD 0 ( sort )					  
							      								    94 CALL_METHOD 0						  
							      15 >> 96 LOAD_FAST 3 ( plat_needed )			    96 POP_TOP							  
							      98 LOAD_CONST 1 ( 1 )					    								  
							      100 INPLACE_SUBTRACT					    15 98 LOAD_FAST 1 ( dep )					  
							      102 STORE_FAST 3 ( plat_needed )				    100 LOAD_METHOD 0 ( sort )					  
							      								    102 CALL_METHOD 0						  
							      16 104 LOAD_FAST 6 ( j )					    104 POP_TOP							  
							      106 LOAD_CONST 1 ( 1 )					    								  
							      108 INPLACE_ADD						    16 106 LOAD_FAST 1 ( dep )					  
							      110 STORE_FAST 6 ( j )					    108 LOAD_METHOD 0 ( sort )					  
							      >> 112 JUMP_ABSOLUTE 34					    110 CALL_METHOD 0						  
							      >> 114 POP_BLOCK						    112 POP_TOP							  
							      								    								  
							      17 >> 116 LOAD_FAST 4 ( result )				    17 114 LOAD_FAST 1 ( dep )					  
							      118 RETURN_VALUE NEW_LINE					    116 LOAD_METHOD 0 ( sort )					  
							      								    118 CALL_METHOD 0						  
							      								    120 POP_TOP							  
							      								    								  
							      								    18 122 LOAD_FAST 1 ( dep )					  
							      								    124 LOAD_METHOD 0 ( sort )					  
							      								    126 CALL_METHOD 0						  
							      								    128 POP_TOP							  
							      								    								  
							      								    19 130 LOAD_FAST 1 ( dep )					  
							      								    132 LOAD_METHOD 0 ( sort )					  
							      								    134 CALL_METHOD 0						  
							      								    136 POP_TOP							  
							      								    138 JUMP_ABSOLUTE 30					  
							      								    >> 140 POP_BLOCK						  
							      								    >> 142 JUMP_ABSOLUTE 30					  
							      								    >> 144 POP_BLOCK						  
							      								    								  
							      								    20 >> 146 LOAD_FAST 2 ( i )					  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY     FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	    FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY
--							      --							    --								  --
def printPrevSmaller ( arr , n ) :			      Disassembly of <code object printPrevSmaller at 0x7f33e264493 Disassembly of <code object printPrevSmaller at 0x7f2b0163dc9 script_not_found : None
    print ( "_, " , end = "" )				      2 0 LOAD_GLOBAL 0 ( print )				    2 0 LOAD_GLOBAL 0 ( print )					  
    for i in range ( 1 , n ) :				      2 LOAD_CONST 1 ( '_, ' )					    2 LOAD_CONST 1 ( ' ' )					  
	for j in range ( i - 1 , - 2 , - 1 ) :		      4 LOAD_CONST 2 ( '' )					    4 LOAD_FAST 0 ( arr )					  
	    if ( arr [ j ] < arr [ i ] ) :		      6 LOAD_CONST 3 ( ( 'end' , ) )				    6 CALL_FUNCTION 2						  
		print ( arr [ j ] , ", " , end = "" )	      8 CALL_FUNCTION_KW 2					    8 POP_TOP							  
		break					      10 POP_TOP						    								  
	if ( j == - 1 ) :				      								    3 10 SETUP_LOOP 64 ( to 76 )				  
	    print ( "_, " , end = "" )			      3 12 SETUP_LOOP 100 ( to 114 )				    12 LOAD_GLOBAL 1 ( range )					  
							      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_CONST 2 ( 1 )					  
							      16 LOAD_CONST 4 ( 1 )					    16 CALL_FUNCTION 1						  
							      18 LOAD_FAST 1 ( n )					    18 GET_ITER							  
							      20 CALL_FUNCTION 2					    >> 20 FOR_ITER 48 ( to 74 )					  
							      22 GET_ITER						    22 STORE_FAST 2 ( i )					  
							      >> 24 FOR_ITER 86 ( to 112 )				    								  
							      26 STORE_FAST 2 ( i )					    4 24 SETUP_LOOP 48 ( to 72 )				  
							      								    26 LOAD_GLOBAL 1 ( range )					  
							      4 28 SETUP_LOOP 60 ( to 90 )				    28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_GLOBAL 1 ( range )				    30 CALL_FUNCTION 1						  
							      32 LOAD_FAST 2 ( i )					    32 GET_ITER							  
							      34 LOAD_CONST 4 ( 1 )					    >> 34 FOR_ITER 48 ( to 70 )					  
							      36 BINARY_SUBTRACT					    36 STORE_FAST 3 ( j )					  
							      38 LOAD_CONST 5 ( - 2 )					    								  
							      40 LOAD_CONST 6 ( - 1 )					    5 38 LOAD_FAST 2 ( i )					  
							      42 CALL_FUNCTION 3					    40 LOAD_FAST 3 ( j )					  
							      44 GET_ITER						    42 BINARY_SUBSCR						  
							      >> 46 FOR_ITER 40 ( to 88 )				    44 LOAD_FAST 1 ( n )					  
							      48 STORE_FAST 3 ( j )					    46 COMPARE_OP 2 ( == )					  
							      								    48 POP_JUMP_IF_FALSE 34					  
							      5 50 LOAD_FAST 0 ( arr )					    								  
							      52 LOAD_FAST 3 ( j )					    6 50 LOAD_FAST 2 ( i )					  
							      54 BINARY_SUBSCR						    52 LOAD_FAST 3 ( j )					  
							      56 LOAD_FAST 0 ( arr )					    54 BINARY_SUBSCR						  
							      58 LOAD_FAST 2 ( i )					    56 LOAD_FAST 1 ( n )					  
							      60 BINARY_SUBSCR						    58 COMPARE_OP 2 ( == )					  
							      62 COMPARE_OP 0 ( < )					    60 POP_JUMP_IF_FALSE 34					  
							      64 POP_JUMP_IF_FALSE 46					    								  
							      								    7 62 LOAD_FAST 2 ( i )					  
							      6 66 LOAD_GLOBAL 0 ( print )				    64 LOAD_FAST 3 ( j )					  
							      68 LOAD_FAST 0 ( arr )					    66 BINARY_SUBSCR						  
							      70 LOAD_FAST 3 ( j )					    68 LOAD_FAST 1 ( n )					  
							      72 BINARY_SUBSCR						    70 COMPARE_OP 2 ( == )					  
							      74 LOAD_CONST 7 ( ', ' )					    72 POP_JUMP_IF_FALSE 34					  
							      76 LOAD_CONST 2 ( '' )					    								  
							      78 LOAD_CONST 3 ( ( 'end' , ) )				    8 74 LOAD_FAST 2 ( i )					  
							      80 CALL_FUNCTION_KW 3					    76 LOAD_FAST 3 ( j )					  
							      82 POP_TOP						    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 1 ( n )					  
							      7 84 BREAK_LOOP						    82 COMPARE_OP 2 ( == )					  
							      86 JUMP_ABSOLUTE 46					    84 POP_JUMP_IF_FALSE 34					  
							      >> 88 POP_BLOCK						    								  
							      								    9 86 LOAD_FAST 2 ( i )					  
							      8 >> 90 LOAD_FAST 3 ( j )					    88 LOAD_FAST 3 ( j )					  
							      92 LOAD_CONST 6 ( - 1 )					    90 BINARY_SUBSCR						  
							      94 COMPARE_OP 2 ( == )					    92 LOAD_FAST 1 ( n )					  
							      96 POP_JUMP_IF_FALSE 24					    94 COMPARE_OP 2 ( == )					  
							      								    96 POP_JUMP_IF_FALSE 34					  
							      9 98 LOAD_GLOBAL 0 ( print )				    								  
							      100 LOAD_CONST 1 ( '_, ' )				    10 98 LOAD_FAST 2 ( i )					  
							      102 LOAD_CONST 2 ( '' )					    100 LOAD_FAST 3 ( j )					  
							      104 LOAD_CONST 3 ( ( 'end' , ) )				    102 BINARY_SUBSCR						  
							      106 CALL_FUNCTION_KW 2					    104 LOAD_FAST 1 ( n )					  
							      108 POP_TOP						    106 COMPARE_OP 2 ( == )					  
							      110 JUMP_ABSOLUTE 24					    108 POP_JUMP_IF_FALSE 34					  
							      >> 112 POP_BLOCK						    								  
							      >> 114 LOAD_CONST 0 ( None )				    11 110 LOAD_FAST 2 ( i )					  
							      116 RETURN_VALUE NEW_LINE					    112 LOAD_FAST 3 ( j )					  
							      								    114 BINARY_SUBSCR						  
							      								    116 LOAD_FAST 1 ( n )					  
							      								    118 COMPARE_OP 2 ( == )					  
							      								    120 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      								    12 122 LOAD_FAST 2 ( i )					  
							      								    124 LOAD_FAST 3 ( j )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 1 ( n )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 20					  
							      								    								  
							      								    13 134 JUMP_ABSOLUTE 34					  
							      								    >> 136 POP_BLOCK						  
							      								    >> 138 JUMP_ABSOLUTE 20					  
							      								    >> 140 POP_BLOCK						  
							      								    >> 142 JUMP_ABSOLUTE 20					  
							      								    >> 144 POP_BLOCK						  
							      								    >> 146 LOAD_CONST 0 ( None )				  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_ARRI					      REARRANGE_ARRAY_ARRI					    REARRANGE_ARRAY_ARRI					  REARRANGE_ARRAY_ARRI
--							      --							    --								  --
def fix ( A , len ) :					      Disassembly of <code object fix at 0x7f33e2653f60, file "<dis Disassembly of <code object fix at 0x7f2b0163dc90, file "<dis script_not_found : None
    for i in range ( 0 , len ) :			      2 0 SETUP_LOOP 128 ( to 130 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	if ( A [ i ] != - 1 and A [ i ] != i ) :	      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    x = A [ i ] ;				      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  
	    while ( A [ x ] != - 1 and A [ x ] != x ) :	      6 LOAD_FAST 1 ( len )					    6 LOAD_GLOBAL 1 ( len )					  
		y = A [ x ]				      8 CALL_FUNCTION 2						    8 LOAD_FAST 0 ( A )						  
		A [ x ] = x				      10 GET_ITER						    10 CALL_FUNCTION 1						  
		x = y					      >> 12 FOR_ITER 114 ( to 128 )				    12 CALL_FUNCTION 2						  
	    A [ x ] = x ;				      14 STORE_FAST 2 ( i )					    14 GET_ITER							  
	    if ( A [ i ] != i ) :			      								    >> 16 FOR_ITER 58 ( to 76 )					  
		A [ i ] = - 1 ;				      3 16 LOAD_FAST 0 ( A )					    18 STORE_FAST 2 ( i )					  
							      18 LOAD_FAST 2 ( i )					    								  
							      20 BINARY_SUBSCR						    3 20 LOAD_FAST 2 ( i )					  
							      22 LOAD_CONST 2 ( - 1 )					    22 LOAD_CONST 2 ( 1 )					  
							      24 COMPARE_OP 3 ( != )					    24 COMPARE_OP 3 ( != )					  
							      26 POP_JUMP_IF_FALSE 12					    26 POP_JUMP_IF_FALSE 32					  
							      28 LOAD_FAST 0 ( A )					    								  
							      30 LOAD_FAST 2 ( i )					    4 28 LOAD_FAST 2 ( i )					  
							      32 BINARY_SUBSCR						    30 LOAD_CONST 2 ( 1 )					  
							      34 LOAD_FAST 2 ( i )					    32 INPLACE_ADD						  
							      36 COMPARE_OP 3 ( != )					    34 STORE_FAST 2 ( i )					  
							      38 POP_JUMP_IF_FALSE 12					    								  
							      								    5 >> 36 LOAD_FAST 2 ( i )					  
							      4 40 LOAD_FAST 0 ( A )					    38 LOAD_CONST 2 ( 1 )					  
							      42 LOAD_FAST 2 ( i )					    40 INPLACE_ADD						  
							      44 BINARY_SUBSCR						    42 STORE_FAST 2 ( i )					  
							      46 STORE_FAST 3 ( x )					    								  
							      								    6 44 LOAD_FAST 2 ( i )					  
							      5 48 SETUP_LOOP 48 ( to 98 )				    46 LOAD_CONST 2 ( 1 )					  
							      >> 50 LOAD_FAST 0 ( A )					    48 INPLACE_ADD						  
							      52 LOAD_FAST 3 ( x )					    50 STORE_FAST 2 ( i )					  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_CONST 2 ( - 1 )					    7 52 LOAD_FAST 2 ( i )					  
							      58 COMPARE_OP 3 ( != )					    54 LOAD_CONST 2 ( 1 )					  
							      60 POP_JUMP_IF_FALSE 96					    56 INPLACE_ADD						  
							      62 LOAD_FAST 0 ( A )					    58 STORE_FAST 2 ( i )					  
							      64 LOAD_FAST 3 ( x )					    60 JUMP_ABSOLUTE 16						  
							      66 BINARY_SUBSCR						    >> 62 POP_BLOCK						  
							      68 LOAD_FAST 3 ( x )					    								  
							      70 COMPARE_OP 3 ( != )					    8 >> 64 LOAD_FAST 2 ( i )					  
							      72 POP_JUMP_IF_FALSE 96					    66 RETURN_VALUE NEW_LINE					  
							      								    								  
							      6 74 LOAD_FAST 0 ( A )					    								  
							      76 LOAD_FAST 3 ( x )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 STORE_FAST 4 ( y )					    								  
							      								    								  
							      7 82 LOAD_FAST 3 ( x )					    								  
							      84 LOAD_FAST 0 ( A )					    								  
							      86 LOAD_FAST 3 ( x )					    								  
							      88 STORE_SUBSCR						    								  
							      								    								  
							      8 90 LOAD_FAST 4 ( y )					    								  
							      92 STORE_FAST 3 ( x )					    								  
							      94 JUMP_ABSOLUTE 50					    								  
							      >> 96 POP_BLOCK						    								  
							      								    								  
							      9 >> 98 LOAD_FAST 3 ( x )					    								  
							      100 LOAD_FAST 0 ( A )					    								  
							      102 LOAD_FAST 3 ( x )					    								  
							      104 STORE_SUBSCR						    								  
							      								    								  
							      10 106 LOAD_FAST 0 ( A )					    								  
							      108 LOAD_FAST 2 ( i )					    								  
							      110 BINARY_SUBSCR						    								  
							      112 LOAD_FAST 2 ( i )					    								  
							      114 COMPARE_OP 3 ( != )					    								  
							      116 POP_JUMP_IF_FALSE 12					    								  
							      								    								  
							      11 118 LOAD_CONST 2 ( - 1 )				    								  
							      120 LOAD_FAST 0 ( A )					    								  
							      122 LOAD_FAST 2 ( i )					    								  
							      124 STORE_SUBSCR						    								  
							      126 JUMP_ABSOLUTE 12					    								  
							      >> 128 POP_BLOCK						    								  
							      >> 130 LOAD_CONST 0 ( None )				    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT	      REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		    REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT		  REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PR<unk> CT
--							      --							    --								  --
def solve ( dp , a , low , high , turn ) :		      Disassembly of <code object solve at 0x7f33e2644f60, file "<d Disassembly of <code object solve at 0x7f2b0164d4b0, file "<d script_not_found : None
    if ( low == high ) :				      2 0 LOAD_FAST 2 ( low )					    2 0 LOAD_FAST 0 ( dp )					  
	return a [ low ] * turn				      2 LOAD_FAST 3 ( high )					    2 LOAD_FAST 1 ( low )					  
    if ( dp [ low ] [ high ] != 0 ) :			      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return dp [ low ] [ high ]			      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 12					  
    dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp 								    								  
    return dp [ low ] [ high ]				      3 8 LOAD_FAST 1 ( a )					    3 8 LOAD_FAST 0 ( dp )					  
							      10 LOAD_FAST 2 ( low )					    10 LOAD_FAST 2 ( low )					  
							      12 BINARY_SUBSCR						    12 COMPARE_OP 2 ( == )					  
							      14 LOAD_FAST 4 ( turn )					    14 POP_JUMP_IF_FALSE 20					  
							      16 BINARY_MULTIPLY					    								  
							      18 RETURN_VALUE						    4 16 LOAD_FAST 0 ( dp )					  
							      								    18 LOAD_FAST 2 ( low )					  
							      4 >> 20 LOAD_FAST 0 ( dp )				    20 BINARY_SUBSCR						  
							      22 LOAD_FAST 2 ( low )					    22 RETURN_VALUE						  
							      24 BINARY_SUBSCR						    								  
							      26 LOAD_FAST 3 ( high )					    5 >> 24 LOAD_GLOBAL 0 ( max )				  
							      28 BINARY_SUBSCR						    26 LOAD_FAST 0 ( dp )					  
							      30 LOAD_CONST 1 ( 0 )					    28 LOAD_FAST 1 ( low )					  
							      32 COMPARE_OP 3 ( != )					    30 LOAD_CONST 1 ( 0 )					  
							      34 POP_JUMP_IF_FALSE 48					    32 BINARY_SUBSCR						  
							      								    34 CALL_FUNCTION 2						  
							      5 36 LOAD_FAST 0 ( dp )					    36 RETURN_VALUE						  
							      38 LOAD_FAST 2 ( low )					    38 LOAD_CONST 0 ( None )					  
							      40 BINARY_SUBSCR						    40 RETURN_VALUE NEW_LINE					  
							      42 LOAD_FAST 3 ( high )					    								  
							      44 BINARY_SUBSCR						    								  
							      46 RETURN_VALUE						    								  
							      								    								  
							      6 >> 48 LOAD_GLOBAL 0 ( max )				    								  
							      50 LOAD_FAST 1 ( a )					    								  
							      52 LOAD_FAST 2 ( low )					    								  
							      54 BINARY_SUBSCR						    								  
							      56 LOAD_FAST 4 ( turn )					    								  
							      58 BINARY_MULTIPLY					    								  
							      60 LOAD_GLOBAL 1 ( solve )				    								  
							      62 LOAD_FAST 0 ( dp )					    								  
							      64 LOAD_FAST 1 ( a )					    								  
							      66 LOAD_FAST 2 ( low )					    								  
							      68 LOAD_CONST 2 ( 1 )					    								  
							      70 BINARY_ADD						    								  
							      72 LOAD_FAST 3 ( high )					    								  
							      74 LOAD_FAST 4 ( turn )					    								  
							      76 LOAD_CONST 2 ( 1 )					    								  
							      78 BINARY_ADD						    								  
							      80 CALL_FUNCTION 5					    								  
							      82 BINARY_ADD						    								  
							      84 LOAD_FAST 1 ( a )					    								  
							      86 LOAD_FAST 3 ( high )					    								  
							      88 BINARY_SUBSCR						    								  
							      90 LOAD_FAST 4 ( turn )					    								  
							      92 BINARY_MULTIPLY					    								  
							      94 LOAD_GLOBAL 1 ( solve )				    								  
							      96 LOAD_FAST 0 ( dp )					    								  
							      98 LOAD_FAST 1 ( a )					    								  
							      100 LOAD_FAST 2 ( low )					    								  
							      102 LOAD_FAST 3 ( high )					    								  
							      104 LOAD_CONST 2 ( 1 )					    								  
							      106 BINARY_SUBTRACT					    								  
							      108 LOAD_FAST 4 ( turn )					    								  
							      110 LOAD_CONST 2 ( 1 )					    								  
							      112 BINARY_ADD						    								  
							      114 CALL_FUNCTION 5					    								  
							      116 BINARY_ADD						    								  
							      118 CALL_FUNCTION 2					    								  
							      120 LOAD_FAST 0 ( dp )					    								  
							      122 LOAD_FAST 2 ( low )					    								  
							      124 BINARY_SUBSCR						    								  
							      126 LOAD_FAST 3 ( high )					    								  
							      128 STORE_SUBSCR						    								  
							      								    								  
							      7 130 LOAD_FAST 0 ( dp )					    								  
							      132 LOAD_FAST 2 ( low )					    								  
							      134 BINARY_SUBSCR						    								  
							      136 LOAD_FAST 3 ( high )					    								  
							      138 BINARY_SUBSCR						    								  
							      140 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY
--							      --							    --								  --
def findPair ( arr , n ) :				      Disassembly of <code object findPair at 0x7f33e2644930, file  Disassembly of <code object findPair at 0x7f2b0163dc90, file  script_not_found : None
    found = False					      2 0 LOAD_CONST 1 ( False )				    2 0 LOAD_CONST 1 ( False )					  
    for i in range ( 0 , n ) :				      2 STORE_FAST 2 ( found )					    2 STORE_FAST 2 ( found )					  
	for j in range ( i + 1 , n ) :			      								    								  
	    for k in range ( 0 , n ) :			      3 4 SETUP_LOOP 108 ( to 114 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
		if ( arr [ i ] + arr [ j ] == arr [ k ] ) :   6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
		    print ( arr [ i ] , arr [ j ] )	      8 LOAD_CONST 2 ( 0 )					    8 LOAD_CONST 2 ( 0 )					  
		    found = True			      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( arr )					  
    if ( found == False ) :				      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
	print ( "Not exist" )				      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 94 ( to 112 )				    >> 16 FOR_ITER 64 ( to 64 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 3 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 88 ( to 110 )				    4 20 SETUP_LOOP 48 ( to 62 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_CONST 2 ( 0 )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_FAST 1 ( n )					  
							      28 BINARY_ADD						    28 CALL_FUNCTION 2						  
							      30 LOAD_FAST 1 ( n )					    30 GET_ITER							  
							      32 CALL_FUNCTION 2					    >> 32 FOR_ITER 40 ( to 60 )					  
							      34 GET_ITER						    34 STORE_FAST 4 ( i )					  
							      >> 36 FOR_ITER 70 ( to 108 )				    								  
							      38 STORE_FAST 4 ( j )					    5 36 LOAD_FAST 0 ( arr )					  
							      								    38 LOAD_FAST 4 ( i )					  
							      5 40 SETUP_LOOP 64 ( to 106 )				    40 BINARY_SUBSCR						  
							      42 LOAD_GLOBAL 0 ( range )				    42 STORE_FAST 5 ( j )					  
							      44 LOAD_CONST 2 ( 0 )					    								  
							      46 LOAD_FAST 1 ( n )					    6 44 LOAD_FAST 0 ( arr )					  
							      48 CALL_FUNCTION 2					    46 LOAD_FAST 4 ( i )					  
							      50 GET_ITER						    48 BINARY_SUBSCR						  
							      >> 52 FOR_ITER 50 ( to 104 )				    50 LOAD_FAST 5 ( j )					  
							      54 STORE_FAST 5 ( k )					    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 5 ( j )					  
							      6 56 LOAD_FAST 0 ( arr )					    56 BINARY_SUBSCR						  
							      58 LOAD_FAST 3 ( i )					    58 LOAD_FAST 5 ( j )					  
							      60 BINARY_SUBSCR						    60 BINARY_SUBSCR						  
							      62 LOAD_FAST 0 ( arr )					    62 LOAD_FAST 5 ( j )					  
							      64 LOAD_FAST 4 ( j )					    64 BINARY_SUBSCR						  
							      66 BINARY_SUBSCR						    66 LOAD_FAST 5 ( j )					  
							      68 BINARY_ADD						    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 0 ( arr )					    70 LOAD_FAST 5 ( j )					  
							      72 LOAD_FAST 5 ( k )					    72 BINARY_SUBSCR						  
							      74 BINARY_SUBSCR						    74 LOAD_FAST 5 ( j )					  
							      76 COMPARE_OP 2 ( == )					    76 BINARY_SUBSCR						  
							      78 POP_JUMP_IF_FALSE 52					    78 LOAD_FAST 5 ( j )					  
							      								    80 BINARY_SUBSCR						  
							      7 80 LOAD_GLOBAL 1 ( print )				    82 LOAD_FAST 5 ( j )					  
							      82 LOAD_FAST 0 ( arr )					    84 BINARY_SUBSCR						  
							      84 LOAD_FAST 3 ( i )					    86 LOAD_FAST 5 ( j )					  
							      86 BINARY_SUBSCR						    88 BINARY_SUBSCR						  
							      88 LOAD_FAST 0 ( arr )					    90 LOAD_FAST 5 ( j )					  
							      90 LOAD_FAST 4 ( j )					    92 BINARY_SUBSCR						  
							      92 BINARY_SUBSCR						    94 LOAD_FAST 5 ( j )					  
							      94 CALL_FUNCTION 2					    96 BINARY_SUBSCR						  
							      96 POP_TOP						    98 LOAD_FAST 5 ( j )					  
							      								    100 STORE_SUBSCR						  
							      8 98 LOAD_CONST 4 ( True )				    								  
							      100 STORE_FAST 2 ( found )				    7 102 LOAD_FAST 0 ( arr )					  
							      102 JUMP_ABSOLUTE 52					    104 LOAD_FAST 4 ( i )					  
							      >> 104 POP_BLOCK						    106 BINARY_SUBSCR						  
							      >> 106 JUMP_ABSOLUTE 36					    108 LOAD_FAST 5 ( j )					  
							      >> 108 POP_BLOCK						    110 BINARY_SUBSCR						  
							      >> 110 JUMP_ABSOLUTE 16					    112 LOAD_FAST 5 ( j )					  
							      >> 112 POP_BLOCK						    114 STORE_SUBSCR						  
							      								    								  
							      9 >> 114 LOAD_FAST 2 ( found )				    8 116 LOAD_FAST 0 ( arr )					  
							      116 LOAD_CONST 1 ( False )				    118 LOAD_FAST 4 ( i )					  
							      118 COMPARE_OP 2 ( == )					    120 BINARY_SUBSCR						  
							      120 POP_JUMP_IF_FALSE 130					    122 LOAD_FAST 5 ( j )					  
							      								    124 STORE_SUBSCR						  
							      10 122 LOAD_GLOBAL 1 ( print )				    126 JUMP_ABSOLUTE 32					  
							      124 LOAD_CONST 5 ( 'Not exist' )				    >> 128 POP_BLOCK						  
							      126 CALL_FUNCTION 1					    								  
							      128 POP_TOP						    9 >> 130 LOAD_FAST 2 ( found )				  
							      >> 130 LOAD_CONST 0 ( None )				    132 RETURN_VALUE NEW_LINE					  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT					      MAJORITY_ELEMENT						    MAJORITY_ELEMENT						  MAJORITY_ELEMENT
--							      --							    --								  --
def findMajority ( arr , n ) :				      Disassembly of <code object findMajority at 0x7f33e26494b0, f Disassembly of <code object findMajens at 0x7f2b0163dc90, fil script_not_found : None
    maxCount = 0 ;					      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    index = - 1						      2 STORE_FAST 2 ( maxCount )				    2 STORE_FAST 1 ( maxCount )					  
    for i in range ( n ) :				      								    								  
	count = 0					      3 4 LOAD_CONST 2 ( - 1 )					    3 4 LOAD_CONST 1 ( 0 )					  
	for j in range ( n ) :				      6 STORE_FAST 3 ( index )					    6 STORE_FAST 2 ( index )					  
	    if ( arr [ i ] == arr [ j ] ) :		      								    								  
		count += 1				      4 8 SETUP_LOOP 78 ( to 88 )				    4 8 LOAD_CONST 2 ( - 1 )					  
	if ( count > maxCount ) :			      10 LOAD_GLOBAL 0 ( range )				    10 STORE_FAST 3 ( index )					  
	    maxCount = count				      12 LOAD_FAST 1 ( n )					    								  
	    index = i					      14 CALL_FUNCTION 1					    5 12 SETUP_LOOP 64 ( to 76 )				  
    if ( maxCount > n // 2 ) :				      16 GET_ITER						    14 LOAD_GLOBAL 0 ( range )					  
	print ( arr [ index ] )				      >> 18 FOR_ITER 66 ( to 86 )				    16 LOAD_FAST 1 ( maxCount )					  
    else :						      20 STORE_FAST 4 ( i )					    18 CALL_FUNCTION 1						  
	print ( "No Majority Element" )			      								    20 GET_ITER							  
							      5 22 LOAD_CONST 1 ( 0 )					    >> 22 FOR_ITER 48 ( to 74 )					  
							      24 STORE_FAST 5 ( count )					    24 STORE_FAST 4 ( i )					  
							      								    								  
							      6 26 SETUP_LOOP 40 ( to 68 )				    6 26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_GLOBAL 0 ( range )				    28 LOAD_FAST 4 ( i )					  
							      30 LOAD_FAST 1 ( n )					    30 BINARY_SUBSCR						  
							      32 CALL_FUNCTION 1					    32 LOAD_FAST 1 ( maxCount )					  
							      34 GET_ITER						    34 COMPARE_OP 4 ( > )					  
							      >> 36 FOR_ITER 28 ( to 66 )				    36 POP_JUMP_IF_FALSE 22					  
							      38 STORE_FAST 6 ( j )					    								  
							      								    7 38 LOAD_FAST 0 ( arr )					  
							      7 40 LOAD_FAST 0 ( arr )					    40 LOAD_FAST 4 ( i )					  
							      42 LOAD_FAST 4 ( i )					    42 BINARY_SUBSCR						  
							      44 BINARY_SUBSCR						    44 STORE_FAST 5 ( maxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxmaxm 
							      46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_FAST 6 ( j )					    								  
							      50 BINARY_SUBSCR						    								  
							      52 COMPARE_OP 2 ( == )					    								  
							      54 POP_JUMP_IF_FALSE 36					    								  
							      								    								  
							      8 56 LOAD_FAST 5 ( count )				    								  
							      58 LOAD_CONST 3 ( 1 )					    								  
							      60 INPLACE_ADD						    								  
							      62 STORE_FAST 5 ( count )					    								  
							      64 JUMP_ABSOLUTE 36					    								  
							      >> 66 POP_BLOCK						    								  
							      								    								  
							      9 >> 68 LOAD_FAST 5 ( count )				    								  
							      70 LOAD_FAST 2 ( maxCount )				    								  
							      72 COMPARE_OP 4 ( > )					    								  
							      74 POP_JUMP_IF_FALSE 18					    								  
							      								    								  
							      10 76 LOAD_FAST 5 ( count )				    								  
							      78 STORE_FAST 2 ( maxCount )				    								  
							      								    								  
							      11 80 LOAD_FAST 4 ( i )					    								  
							      82 STORE_FAST 3 ( index )					    								  
							      84 JUMP_ABSOLUTE 18					    								  
							      >> 86 POP_BLOCK						    								  
							      								    								  
							      12 >> 88 LOAD_FAST 2 ( maxCount )				    								  
							      90 LOAD_FAST 1 ( n )					    								  
							      92 LOAD_CONST 4 ( 2 )					    								  
							      94 BINARY_FLOOR_DIVIDE					    								  
							      96 COMPARE_OP 4 ( > )					    								  
							      98 POP_JUMP_IF_FALSE 114					    								  
							      								    								  
							      13 100 LOAD_GLOBAL 1 ( print )				    								  
							      102 LOAD_FAST 0 ( arr )					    								  
							      104 LOAD_FAST 3 ( index )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 CALL_FUNCTION 1					    								  
							      110 POP_TOP						    								  
							      112 JUMP_FORWARD 8 ( to 122 )				    								  
							      								    								  
							      15 >> 114 LOAD_GLOBAL 1 ( print )				    								  
							      116 LOAD_CONST 5 ( 'No Majority Element' )		    								  
							      118 CALL_FUNCTION 1					    								  
							      120 POP_TOP						    								  
							      >> 122 LOAD_CONST 0 ( None )				    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS    COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS	  COUNT_WAYS_DIVIDE_CIR<unk> USING_N_NON_INTERSECTING_CHORDS
--							      --							    --								  --
def chordCnt ( A ) :					      Disassembly of <code object chordCnt at 0x7f33e2653ed0, file  Disassembly of <code object chordCnt at 0x7f2b01639660, file  script_not_found : None
    n = 2 * A						      2 0 LOAD_CONST 1 ( 2 )					    2 0 LOAD_CONST 1 ( 2 )					  
    dpArray = [ 0 ] * ( n + 1 )				      2 LOAD_FAST 0 ( A )					    2 STORE_FAST 1 ( n )					  
    dpArray [ 0 ] = 1					      4 BINARY_MULTIPLY						    								  
    dpArray [ 2 ] = 1					      6 STORE_FAST 1 ( n )					    3 4 LOAD_GLOBAL 0 ( dpArray )				  
    for i in range ( 4 , n + 1 , 2 ) :			      								    6 LOAD_CONST 2 ( 0 )					  
	for j in range ( 0 , i - 1 , 2 ) :		      3 8 LOAD_CONST 2 ( 0 )					    8 BINARY_SUBSCR						  
	    dpArray [ i ] += ( dpArray [ j ] * dpArray [ i -  10 BUILD_LIST 1						    10 LOAD_FAST 0 ( A )					  
    return int ( dpArray [ n ] )			      12 LOAD_FAST 1 ( n )					    12 LOAD_CONST 1 ( 2 )					  
							      14 LOAD_CONST 3 ( 1 )					    14 BINARY_SUBSCR						  
							      16 BINARY_ADD						    16 LOAD_FAST 0 ( A )					  
							      18 BINARY_MULTIPLY					    18 LOAD_CONST 1 ( 2 )					  
							      20 STORE_FAST 2 ( dpArray )				    20 BINARY_SUBSCR						  
							      								    22 LOAD_FAST 0 ( A )					  
							      4 22 LOAD_CONST 3 ( 1 )					    24 LOAD_CONST 1 ( 2 )					  
							      24 LOAD_FAST 2 ( dpArray )				    26 BINARY_SUBSCR						  
							      26 LOAD_CONST 2 ( 0 )					    28 LOAD_FAST 0 ( A )					  
							      28 STORE_SUBSCR						    30 LOAD_CONST 1 ( 2 )					  
							      								    32 BINARY_SUBSCR						  
							      5 30 LOAD_CONST 3 ( 1 )					    34 LOAD_FAST 0 ( A )					  
							      32 LOAD_FAST 2 ( dpArray )				    36 LOAD_CONST 1 ( 2 )					  
							      34 LOAD_CONST 1 ( 2 )					    38 BINARY_SUBSCR						  
							      36 STORE_SUBSCR						    40 LOAD_FAST 0 ( A )					  
							      								    42 LOAD_CONST 1 ( 2 )					  
							      6 38 SETUP_LOOP 86 ( to 126 )				    44 BINARY_SUBSCR						  
							      40 LOAD_GLOBAL 0 ( range )				    46 LOAD_FAST 0 ( A )					  
							      42 LOAD_CONST 4 ( 4 )					    48 LOAD_CONST 1 ( 2 )					  
							      44 LOAD_FAST 1 ( n )					    50 BINARY_SUBSCR						  
							      46 LOAD_CONST 3 ( 1 )					    52 LOAD_FAST 0 ( A )					  
							      48 BINARY_ADD						    54 LOAD_CONST 1 ( 2 )					  
							      50 LOAD_CONST 1 ( 2 )					    56 BINARY_SUBSCR						  
							      52 CALL_FUNCTION 3					    58 LOAD_FAST 0 ( A )					  
							      54 GET_ITER						    60 LOAD_CONST 1 ( 2 )					  
							      >> 56 FOR_ITER 66 ( to 124 )				    62 BINARY_SUBSCR						  
							      58 STORE_FAST 3 ( i )					    64 LOAD_FAST 0 ( A )					  
							      								    66 LOAD_CONST 1 ( 2 )					  
							      7 60 SETUP_LOOP 60 ( to 122 )				    68 BINARY_SUBSCR						  
							      62 LOAD_GLOBAL 0 ( range )				    70 LOAD_FAST 0 ( A )					  
							      64 LOAD_CONST 2 ( 0 )					    72 LOAD_CONST 1 ( 2 )					  
							      66 LOAD_FAST 3 ( i )					    74 BINARY_SUBSCR						  
							      68 LOAD_CONST 3 ( 1 )					    76 LOAD_FAST 0 ( A )					  
							      70 BINARY_SUBTRACT					    78 LOAD_CONST 1 ( 2 )					  
							      72 LOAD_CONST 1 ( 2 )					    80 BINARY_SUBSCR						  
							      74 CALL_FUNCTION 3					    82 LOAD_FAST 0 ( A )					  
							      76 GET_ITER						    84 LOAD_CONST 1 ( 2 )					  
							      >> 78 FOR_ITER 40 ( to 120 )				    86 BINARY_SUBSCR						  
							      80 STORE_FAST 4 ( j )					    88 LOAD_FAST 0 ( A )					  
							      								    90 LOAD_CONST 1 ( 2 )					  
							      8 82 LOAD_FAST 2 ( dpArray )				    92 BINARY_SUBSCR						  
							      84 LOAD_FAST 3 ( i )					    94 LOAD_FAST 0 ( A )					  
							      86 DUP_TOP_TWO						    96 LOAD_CONST 1 ( 2 )					  
							      88 BINARY_SUBSCR						    98 BINARY_SUBSCR						  
							      90 LOAD_FAST 2 ( dpArray )				    100 LOAD_FAST 0 ( A )					  
							      92 LOAD_FAST 4 ( j )					    102 LOAD_CONST 1 ( 2 )					  
							      94 BINARY_SUBSCR						    104 BINARY_SUBSCR						  
							      96 LOAD_FAST 2 ( dpArray )				    106 LOAD_FAST 0 ( A )					  
							      98 LOAD_FAST 3 ( i )					    108 LOAD_CONST 1 ( 2 )					  
							      100 LOAD_CONST 1 ( 2 )					    110 BINARY_SUBSCR						  
							      102 BINARY_SUBTRACT					    112 LOAD_FAST 0 ( A )					  
							      104 LOAD_FAST 4 ( j )					    114 LOAD_CONST 1 ( 2 )					  
							      106 BINARY_SUBTRACT					    116 BINARY_SUBSCR						  
							      108 BINARY_SUBSCR						    118 LOAD_FAST 0 ( A )					  
							      110 BINARY_MULTIPLY					    120 LOAD_CONST 1 ( 2 )					  
							      112 INPLACE_ADD						    122 BINARY_SUBSCR						  
							      114 ROT_THREE						    124 LOAD_FAST 0 ( A )					  
							      116 STORE_SUBSCR						    126 LOAD_CONST 1 ( 2 )					  
							      118 JUMP_ABSOLUTE 78					    128 STORE_SUBSCR						  
							      >> 120 POP_BLOCK						    								  
							      >> 122 JUMP_ABSOLUTE 56					    4 130 LOAD_FAST 0 ( A )					  
							      >> 124 POP_BLOCK						    132 LOAD_FAST 0 ( A )					  
							      								    134 LOAD_CONST 1 ( 2 )					  
							      9 >> 126 LOAD_GLOBAL 1 ( int )				    136 BINARY_SUBSCR						  
							      128 LOAD_FAST 2 ( dpArray )				    138 LOAD_FAST 0 ( A )					  
							      130 LOAD_FAST 1 ( n )					    140 LOAD_CONST 1 ( 2 )					  
							      132 BINARY_SUBSCR						    142 STORE_SUBSCR						  
							      134 CALL_FUNCTION 1					    								  
							      136 RETURN_VALUE NEW_LINE					    5 144 LOAD_FAST 1 ( n )					  
							      								    146 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED   CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED	  CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED
--							      --							    --								  --
def areElementsContiguous ( arr , n ) :			      Disassembly of <code object areElementsContiguous at 0x7f33e2 Disassembly of <code object areElementstitititious at 0x7f2b0 error : Traceback (most recent call last):   File
    max1 = max ( arr )					      2 0 LOAD_GLOBAL 0 ( max )					    2 0 LOAD_GLOBAL 0 ( max )					  "XLM/dis_script.py", line 60, in <module>	exec
    min1 = min ( arr )					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  (item)   File "main.py", line 39, in <module>	  Fi
    m = max1 - min1 + 1					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in areElementsContiguous TypeE
    if ( m > n ) :					      6 STORE_FAST 2 ( max1 )					    6 STORE_FAST 1 ( max1 )					  rror: 'int' object is not iterable
	return False					      								    								  
    visited = [ 0 ] * m					      3 8 LOAD_GLOBAL 1 ( min )					    3 8 LOAD_GLOBAL 0 ( max )					  
    for i in range ( 0 , n ) :				      10 LOAD_FAST 0 ( arr )					    10 LOAD_FAST 1 ( max1 )					  
	visited [ arr [ i ] - min1 ] = True		      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
    for i in range ( 0 , m ) :				      14 STORE_FAST 3 ( min1 )					    14 STORE_FAST 2 ( m )					  
	if ( visited [ i ] == False ) :			      								    								  
	    return False				      4 16 LOAD_FAST 2 ( max1 )					    4 16 LOAD_FAST 2 ( m )					  
    return True						      18 LOAD_FAST 3 ( min1 )					    18 LOAD_CONST 1 ( 0 )					  
							      20 BINARY_SUBTRACT					    20 COMPARE_OP 4 ( > )					  
							      22 LOAD_CONST 1 ( 1 )					    22 POP_JUMP_IF_FALSE 28					  
							      24 BINARY_ADD						    								  
							      26 STORE_FAST 4 ( m )					    5 24 LOAD_CONST 2 ( False )					  
							      								    26 RETURN_VALUE						  
							      5 28 LOAD_FAST 4 ( m )					    								  
							      30 LOAD_FAST 1 ( n )					    7 >> 28 LOAD_FAST 2 ( m )					  
							      32 COMPARE_OP 4 ( > )					    30 LOAD_CONST 1 ( 0 )					  
							      34 POP_JUMP_IF_FALSE 40					    32 COMPARE_OP 4 ( > )					  
							      								    34 POP_JUMP_IF_FALSE 48					  
							      6 36 LOAD_CONST 2 ( False )				    								  
							      38 RETURN_VALUE						    8 36 LOAD_CONST 2 ( False )					  
							      								    38 RETURN_VALUE						  
							      7 >> 40 LOAD_CONST 3 ( 0 )				    								  
							      42 BUILD_LIST 1						    9 >> 40 LOAD_FAST 2 ( m )					  
							      44 LOAD_FAST 4 ( m )					    42 LOAD_CONST 1 ( 0 )					  
							      46 BINARY_MULTIPLY					    44 COMPARE_OP 4 ( > )					  
							      48 STORE_FAST 5 ( visited )				    46 POP_JUMP_IF_FALSE 64					  
							      								    								  
							      8 50 SETUP_LOOP 34 ( to 86 )				    10 48 LOAD_CONST 2 ( False )				  
							      52 LOAD_GLOBAL 2 ( range )				    50 RETURN_VALUE						  
							      54 LOAD_CONST 3 ( 0 )					    								  
							      56 LOAD_FAST 1 ( n )					    11 >> 52 LOAD_CONST 2 ( False )				  
							      58 CALL_FUNCTION 2					    54 RETURN_VALUE						  
							      60 GET_ITER						    								  
							      >> 62 FOR_ITER 20 ( to 84 )				    12 >> 56 LOAD_CONST 3 ( False )				  
							      64 STORE_FAST 6 ( i )					    58 RETURN_VALUE						  
							      								    								  
							      9 66 LOAD_CONST 4 ( True )				    13 >> 60 LOAD_CONST 4 ( False )				  
							      68 LOAD_FAST 5 ( visited )				    62 RETURN_VALUE NEW_LINE					  
							      70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 6 ( i )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 LOAD_FAST 3 ( min1 )					    								  
							      78 BINARY_SUBTRACT					    								  
							      80 STORE_SUBSCR						    								  
							      82 JUMP_ABSOLUTE 62					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 SETUP_LOOP 34 ( to 122 )				    								  
							      88 LOAD_GLOBAL 2 ( range )				    								  
							      90 LOAD_CONST 3 ( 0 )					    								  
							      92 LOAD_FAST 4 ( m )					    								  
							      94 CALL_FUNCTION 2					    								  
							      96 GET_ITER						    								  
							      >> 98 FOR_ITER 20 ( to 120 )				    								  
							      100 STORE_FAST 6 ( i )					    								  
							      								    								  
							      11 102 LOAD_FAST 5 ( visited )				    								  
							      104 LOAD_FAST 6 ( i )					    								  
							      106 BINARY_SUBSCR						    								  
							      108 LOAD_CONST 2 ( False )				    								  
							      110 COMPARE_OP 2 ( == )					    								  
							      112 POP_JUMP_IF_FALSE 98					    								  
							      								    								  
							      12 114 LOAD_CONST 2 ( False )				    								  
							      116 RETURN_VALUE						    								  
							      118 JUMP_ABSOLUTE 98					    								  
							      >> 120 POP_BLOCK						    								  
							      								    								  
							      13 >> 122 LOAD_CONST 4 ( True )				    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1
--							      --							    --								  --
def maxLen ( arr ) :					      Disassembly of <code object maxLen at 0x7f33e2653ed0, file "< Disassembly of <code object maxLen at 0x7f2b01639660, file "< script_not_found : None
    hash_map = { }					      2 0 BUILD_MAP 0						    2 0 BUILD_MAP 0						  
    max_len = 0						      2 STORE_FAST 1 ( hash_map )				    2 STORE_FAST 1 ( hash_map )					  
    curr_sum = 0					      								    								  
    for i in range ( len ( arr ) ) :			      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
	curr_sum += arr [ i ]				      6 STORE_FAST 2 ( max_len )				    6 STORE_FAST 2 ( hash_map )					  
	if arr [ i ] is 0 and max_len is 0 :		      								    								  
	    max_len = 1					      4 8 LOAD_CONST 1 ( 0 )					    4 8 LOAD_CONST 2 ( 0 )					  
	if curr_sum is 0 :				      10 STORE_FAST 3 ( curr_sum )				    10 STORE_FAST 3 ( curr_sum )				  
	    max_len = i + 1				      								    								  
	if curr_sum in hash_map :			      5 12 SETUP_LOOP 108 ( to 122 )				    5 12 SETUP_LOOP 64 ( to 76 )				  
	    max_len = max ( max_len , i - hash_map [ curr_sum 14 LOAD_GLOBAL 0 ( range )				    14 LOAD_GLOBAL 0 ( range )					  
	else :						      16 LOAD_GLOBAL 1 ( len )					    16 LOAD_FAST 0 ( arr )					  
	    hash_map [ curr_sum ] = i			      18 LOAD_FAST 0 ( arr )					    18 CALL_FUNCTION 1						  
    return max_len					      20 CALL_FUNCTION 1					    20 GET_ITER							  
							      22 CALL_FUNCTION 1					    >> 22 FOR_ITER 48 ( to 74 )					  
							      24 GET_ITER						    24 STORE_FAST 4 ( i )					  
							      >> 26 FOR_ITER 92 ( to 120 )				    								  
							      28 STORE_FAST 4 ( i )					    6 26 LOAD_FAST 4 ( i )					  
							      								    28 LOAD_FAST 1 ( hash_map )					  
							      6 30 LOAD_FAST 3 ( curr_sum )				    30 COMPARE_OP 7 ( not in )					  
							      32 LOAD_FAST 0 ( arr )					    32 POP_JUMP_IF_FALSE 22					  
							      34 LOAD_FAST 4 ( i )					    								  
							      36 BINARY_SUBSCR						    7 34 LOAD_FAST 1 ( hash_map )				  
							      38 INPLACE_ADD						    36 LOAD_FAST 4 ( i )					  
							      40 STORE_FAST 3 ( curr_sum )				    38 BINARY_SUBSCR						  
							      								    40 STORE_FAST 5 ( offset )					  
							      7 42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 4 ( i )					    8 42 LOAD_FAST 1 ( hash_map )				  
							      46 BINARY_SUBSCR						    44 LOAD_FAST 5 ( offset )					  
							      48 LOAD_CONST 1 ( 0 )					    46 BINARY_SUBSCR						  
							      50 COMPARE_OP 8 ( is )					    48 STORE_FAST 6 ( offset )					  
							      52 POP_JUMP_IF_FALSE 66					    								  
							      54 LOAD_FAST 2 ( max_len )				    9 50 LOAD_FAST 2 ( hash_map )				  
							      56 LOAD_CONST 1 ( 0 )					    52 LOAD_FAST 6 ( offset )					  
							      58 COMPARE_OP 8 ( is )					    54 BINARY_SUBSCR						  
							      60 POP_JUMP_IF_FALSE 66					    56 STORE_FAST 7 ( offset )					  
							      								    								  
							      8 62 LOAD_CONST 2 ( 1 )					    10 58 LOAD_FAST 2 ( hash_map )				  
							      64 STORE_FAST 2 ( max_len )				    60 LOAD_FAST 6 ( offset )					  
							      								    62 BINARY_SUBSCR						  
							      9 >> 66 LOAD_FAST 3 ( curr_sum )				    64 STORE_FAST 8 ( offset )					  
							      68 LOAD_CONST 1 ( 0 )					    								  
							      70 COMPARE_OP 8 ( is )					    11 66 LOAD_FAST 2 ( hash_map )				  
							      72 POP_JUMP_IF_FALSE 82					    68 LOAD_FAST 7 ( offset )					  
							      								    70 BINARY_SUBSCR						  
							      10 74 LOAD_FAST 4 ( i )					    72 LOAD_FAST 8 ( offset )					  
							      76 LOAD_CONST 2 ( 1 )					    74 BINARY_SUBSCR						  
							      78 BINARY_ADD						    76 LOAD_FAST 8 ( offset )					  
							      80 STORE_FAST 2 ( max_len )				    78 BINARY_SUBSCR						  
							      								    80 LOAD_FAST 8 ( offset )					  
							      11 >> 82 LOAD_FAST 3 ( curr_sum )				    82 BINARY_SUBSCR						  
							      84 LOAD_FAST 1 ( hash_map )				    84 LOAD_FAST 8 ( offset )					  
							      86 COMPARE_OP 6 ( in )					    86 STORE_SUBSCR						  
							      88 POP_JUMP_IF_FALSE 110					    88 JUMP_ABSOLUTE 22						  
							      								    >> 90 POP_BLOCK						  
							      12 90 LOAD_GLOBAL 2 ( max )				    								  
							      92 LOAD_FAST 2 ( max_len )				    12 >> 92 LOAD_FAST 1 ( hash_map )				  
							      94 LOAD_FAST 4 ( i )					    94 LOAD_FAST 2 ( hash_map )					  
							      96 LOAD_FAST 1 ( hash_map )				    96 LOAD_FAST 7 ( offset )					  
							      98 LOAD_FAST 3 ( curr_sum )				    98 STORE_SUBSCR						  
							      100 BINARY_SUBSCR						    								  
							      102 BINARY_SUBTRACT					    13 100 LOAD_FAST 1 ( hash_map )				  
							      104 CALL_FUNCTION 2					    102 LOAD_FAST 6 ( offset )					  
							      106 STORE_FAST 2 ( max_len )				    104 STORE_SUBSCR						  
							      108 JUMP_ABSOLUTE 26					    106 JUMP_ABSOLUTE 22					  
							      								    >> 108 POP_BLOCK						  
							      14 >> 110 LOAD_FAST 4 ( i )				    								  
							      112 LOAD_FAST 1 ( hash_map )				    14 >> 110 LOAD_FAST 1 ( hash_map )				  
							      114 LOAD_FAST 3 ( curr_sum )				    112 RETURN_VALUE NEW_LINE					  
							      116 STORE_SUBSCR						    								  
							      118 JUMP_ABSOLUTE 26					    								  
							      >> 120 POP_BLOCK						    								  
							      								    								  
							      15 >> 122 LOAD_FAST 2 ( max_len )				    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1   FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1	  FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1
--							      --							    --								  --
def printPrevSmaller ( arr , n ) :			      Disassembly of <code object printPrevSmaller at 0x7f33e264493 Disassembly of <code object printPrevSmaller at 0x7f2b0163dc9 script_not_found : None
    S = list ( )					      2 0 LOAD_GLOBAL 0 ( list )				    2 0 LOAD_GLOBAL 0 ( list )					  
    for i in range ( n ) :				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
	while ( len ( S ) > 0 and S [ - 1 ] >= arr [ i ] ) :  4 STORE_FAST 2 ( S )					    4 STORE_FAST 1 ( S )					  
	    S.pop ( )					      								    								  
	if ( len ( S ) == 0 ) :				      3 6 SETUP_LOOP 114 ( to 122 )				    3 6 SETUP_LOOP 64 ( to 76 )					  
	    print ( "_, " , end = "" )			      8 LOAD_GLOBAL 1 ( range )					    8 LOAD_GLOBAL 1 ( range )					  
	else :						      10 LOAD_FAST 1 ( n )					    10 LOAD_FAST 0 ( arr )					  
	    print ( S [ - 1 ] , end = ", " )		      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
	S.append ( arr [ i ] )				      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 102 ( to 120 )				    >> 16 FOR_ITER 64 ( to 74 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 2 ( i )					  
							      								    								  
							      4 20 SETUP_LOOP 40 ( to 62 )				    4 20 LOAD_GLOBAL 2 ( len )					  
							      >> 22 LOAD_GLOBAL 2 ( len )				    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 2 ( S )					    24 CALL_FUNCTION 1						  
							      26 CALL_FUNCTION 1					    26 LOAD_CONST 1 ( 0 )					  
							      28 LOAD_CONST 1 ( 0 )					    28 COMPARE_OP 4 ( > )					  
							      30 COMPARE_OP 4 ( > )					    30 POP_JUMP_IF_FALSE 40					  
							      32 POP_JUMP_IF_FALSE 60					    								  
							      34 LOAD_FAST 2 ( S )					    5 32 LOAD_GLOBAL 3 ( print )				  
							      36 LOAD_CONST 2 ( - 1 )					    34 LOAD_CONST 2 ( ' ' )					  
							      38 BINARY_SUBSCR						    36 CALL_FUNCTION 1						  
							      40 LOAD_FAST 0 ( arr )					    38 POP_TOP							  
							      42 LOAD_FAST 3 ( i )					    								  
							      44 BINARY_SUBSCR						    6 >> 40 LOAD_GLOBAL 4 ( print )				  
							      46 COMPARE_OP 5 ( >= )					    42 LOAD_CONST 3 ( ' ' )					  
							      48 POP_JUMP_IF_FALSE 60					    44 CALL_FUNCTION 1						  
							      								    46 POP_TOP							  
							      5 50 LOAD_FAST 2 ( S )					    								  
							      52 LOAD_METHOD 3 ( pop )					    7 48 LOAD_GLOBAL 5 ( print )				  
							      54 CALL_METHOD 0						    50 LOAD_CONST 4 ( ' ' )					  
							      56 POP_TOP						    52 CALL_FUNCTION 1						  
							      58 JUMP_ABSOLUTE 22					    54 POP_TOP							  
							      >> 60 POP_BLOCK						    								  
							      								    8 56 LOAD_GLOBAL 6 ( print )				  
							      6 >> 62 LOAD_GLOBAL 2 ( len )				    58 LOAD_CONST 5 ( ' ' )					  
							      64 LOAD_FAST 2 ( S )					    60 CALL_FUNCTION 1						  
							      66 CALL_FUNCTION 1					    62 POP_TOP							  
							      68 LOAD_CONST 1 ( 0 )					    								  
							      70 COMPARE_OP 2 ( == )					    9 64 LOAD_GLOBAL 7 ( print )				  
							      72 POP_JUMP_IF_FALSE 88					    66 LOAD_CONST 6 ( ' ' )					  
							      								    68 CALL_FUNCTION 1						  
							      7 74 LOAD_GLOBAL 4 ( print )				    70 POP_TOP							  
							      76 LOAD_CONST 3 ( '_, ' )					    72 JUMP_ABSOLUTE 16						  
							      78 LOAD_CONST 4 ( '' )					    >> 74 POP_BLOCK						  
							      80 LOAD_CONST 5 ( ( 'end' , ) )				    >> 76 LOAD_CONST 0 ( None )					  
							      82 CALL_FUNCTION_KW 2					    78 RETURN_VALUE NEW_LINE					  
							      84 POP_TOP						    								  
							      86 JUMP_FORWARD 16 ( to 104 )				    								  
							      								    								  
							      9 >> 88 LOAD_GLOBAL 4 ( print )				    								  
							      90 LOAD_FAST 2 ( S )					    								  
							      92 LOAD_CONST 2 ( - 1 )					    								  
							      94 BINARY_SUBSCR						    								  
							      96 LOAD_CONST 6 ( ', ' )					    								  
							      98 LOAD_CONST 5 ( ( 'end' , ) )				    								  
							      100 CALL_FUNCTION_KW 2					    								  
							      102 POP_TOP						    								  
							      								    								  
							      10 >> 104 LOAD_FAST 2 ( S )				    								  
							      106 LOAD_METHOD 5 ( append )				    								  
							      108 LOAD_FAST 0 ( arr )					    								  
							      110 LOAD_FAST 3 ( i )					    								  
							      112 BINARY_SUBSCR						    								  
							      114 CALL_METHOD 1						    								  
							      116 POP_TOP						    								  
							      118 JUMP_ABSOLUTE 16					    								  
							      >> 120 POP_BLOCK						    								  
							      >> 122 LOAD_CONST 0 ( None )				    								  
							      124 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1
--							      --							    --								  --
def areElementsContiguous ( arr ) :			      Disassembly of <code object areElementsContiguous at 0x7f33e2 Disassembly of <code object areElementstitititious at 0x7f2b0 script_not_found : None
    us = set ( )					      2 0 LOAD_GLOBAL 0 ( set )					    2 0 LOAD_GLOBAL 0 ( set )					  
    for i in arr : us.add ( i )				      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    count = 1						      4 STORE_FAST 1 ( us )					    4 STORE_FAST 1 ( us )					  
    curr_ele = arr [ 0 ] - 1				      								    								  
    while curr_ele in us :				      3 6 SETUP_LOOP 22 ( to 30 )				    3 6 SETUP_LOOP 26 ( to 36 )					  
	count += 1					      8 LOAD_FAST 0 ( arr )					    8 LOAD_FAST 0 ( arr )					  
	curr_ele -= 1					      10 GET_ITER						    10 GET_ITER							  
    curr_ele = arr [ 0 ] + 1				      >> 12 FOR_ITER 14 ( to 28 )				    >> 12 FOR_ITER 18 ( to 34 )					  
    while curr_ele in us :				      14 STORE_FAST 2 ( i )					    14 STORE_FAST 2 ( i )					  
	count += 1					      16 LOAD_FAST 1 ( us )					    								  
	curr_ele += 1					      18 LOAD_METHOD 1 ( add )					    4 16 LOAD_CONST 1 ( 1 )					  
    return ( count == len ( us ) )			      20 LOAD_FAST 2 ( i )					    18 STORE_FAST 3 ( curr_curr_1 )				  
							      22 CALL_METHOD 1						    								  
							      24 POP_TOP						    5 20 LOAD_FAST 3 ( curr_curr_1 )				  
							      26 JUMP_ABSOLUTE 12					    22 LOAD_CONST 2 ( 0 )					  
							      >> 28 POP_BLOCK						    24 BINARY_SUBSCR						  
							      								    26 STORE_FAST 4 ( curr_curr_2 )				  
							      4 >> 30 LOAD_CONST 1 ( 1 )				    								  
							      32 STORE_FAST 3 ( count )					    6 28 LOAD_FAST 1 ( us )					  
							      								    30 LOAD_CONST 3 ( 1 )					  
							      5 34 LOAD_FAST 0 ( arr )					    32 BINARY_SUBSCR						  
							      36 LOAD_CONST 2 ( 0 )					    34 STORE_FAST 5 ( curr_curr_2 )				  
							      38 BINARY_SUBSCR						    								  
							      40 LOAD_CONST 1 ( 1 )					    7 36 LOAD_FAST 1 ( us )					  
							      42 BINARY_SUBTRACT					    38 LOAD_CONST 4 ( 2 )					  
							      44 STORE_FAST 4 ( curr_ele )				    40 BINARY_SUBSCR						  
							      								    42 STORE_FAST 6 ( curr_curr_2 )				  
							      6 46 SETUP_LOOP 28 ( to 76 )				    								  
							      >> 48 LOAD_FAST 4 ( curr_ele )				    8 44 LOAD_FAST 1 ( us )					  
							      50 LOAD_FAST 1 ( us )					    46 LOAD_CONST 5 ( 1 )					  
							      52 COMPARE_OP 6 ( in )					    48 BINARY_SUBSCR						  
							      54 POP_JUMP_IF_FALSE 74					    50 STORE_FAST 7 ( curr_curr_2 )				  
							      								    								  
							      7 56 LOAD_FAST 3 ( count )				    9 52 LOAD_FAST 2 ( i )					  
							      58 LOAD_CONST 1 ( 1 )					    54 LOAD_CONST 6 ( 2 )					  
							      60 INPLACE_ADD						    56 BINARY_SUBSCR						  
							      62 STORE_FAST 3 ( count )					    58 STORE_FAST 8 ( curr_curr_2 )				  
							      								    								  
							      8 64 LOAD_FAST 4 ( curr_ele )				    10 60 LOAD_FAST 6 ( curr_curr_2 )				  
							      66 LOAD_CONST 1 ( 1 )					    62 LOAD_CONST 7 ( 2 )					  
							      68 INPLACE_SUBTRACT					    64 BINARY_SUBSCR						  
							      70 STORE_FAST 4 ( curr_ele )				    66 LOAD_FAST 7 ( curr_curr_2 )				  
							      72 JUMP_ABSOLUTE 48					    68 LOAD_CONST 8 ( 3 )					  
							      >> 74 POP_BLOCK						    70 BINARY_SUBSCR						  
							      								    72 LOAD_FAST 7 ( curr_curr_2 )				  
							      9 >> 76 LOAD_FAST 0 ( arr )				    74 LOAD_CONST 9 ( 3 )					  
							      78 LOAD_CONST 2 ( 0 )					    76 BINARY_SUBSCR						  
							      80 BINARY_SUBSCR						    78 LOAD_FAST 7 ( curr_curr_2 )				  
							      82 LOAD_CONST 1 ( 1 )					    80 STORE_SUBSCR						  
							      84 BINARY_ADD						    								  
							      86 STORE_FAST 4 ( curr_ele )				    11 82 LOAD_FAST 6 ( curr_curr_2 )				  
							      								    84 LOAD_CONST 10 ( 1 )					  
							      10 88 SETUP_LOOP 28 ( to 118 )				    86 BINARY_SUBSCR						  
							      >> 90 LOAD_FAST 4 ( curr_ele )				    88 LOAD_FAST 7 ( curr_curr_2 )				  
							      92 LOAD_FAST 1 ( us )					    90 STORE_SUBSCR						  
							      94 COMPARE_OP 6 ( in )					    								  
							      96 POP_JUMP_IF_FALSE 116					    12 92 LOAD_FAST 6 ( curr_curr_2 )				  
							      								    94 RETURN_VALUE NEW_LINE					  
							      11 98 LOAD_FAST 3 ( count )				    								  
							      100 LOAD_CONST 1 ( 1 )					    								  
							      102 INPLACE_ADD						    								  
							      104 STORE_FAST 3 ( count )				    								  
							      								    								  
							      12 106 LOAD_FAST 4 ( curr_ele )				    								  
							      108 LOAD_CONST 1 ( 1 )					    								  
							      110 INPLACE_ADD						    								  
							      112 STORE_FAST 4 ( curr_ele )				    								  
							      114 JUMP_ABSOLUTE 90					    								  
							      >> 116 POP_BLOCK						    								  
							      								    								  
							      13 >> 118 LOAD_FAST 3 ( count )				    								  
							      120 LOAD_GLOBAL 2 ( len )					    								  
							      122 LOAD_FAST 1 ( us )					    								  
							      124 CALL_FUNCTION 1					    								  
							      126 COMPARE_OP 2 ( == )					    								  
							      128 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS			      SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				    SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS				  SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS
--							      --							    --								  --
def count ( n ) :					      Disassembly of <code object count at 0x7f33e2644f60, file "<d Disassembly of <code object count at 0x7f2b01639660, file "<d error : /bin/bash: line 1: 12715 Segmentation faul
    if ( n < 4 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	return - 1					      2 LOAD_CONST 1 ( 4 )					    2 LOAD_CONST 1 ( 4 )					  ataset/bin/python XLM/dis_script.py --script_path
    rem = n % 4						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
    if ( rem == 0 ) :					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  24/eval_scripts/python_sa-dis_sa.valid/SPLIT_N_MAX
	return n // 4					      								    								  IMUM_COMPOSITE_NUMBERS.dis
    if ( rem == 1 ) :					      3 8 LOAD_CONST 2 ( - 1 )					    3 8 LOAD_CONST 2 ( - 1 )					  
	if ( n < 9 ) :					      10 RETURN_VALUE						    10 RETURN_VALUE						  
	    return - 1					      								    								  
	return ( n - 9 ) // 4 + 1			      4 >> 12 LOAD_FAST 0 ( n )					    4 >> 12 LOAD_FAST 0 ( n )					  
    if ( rem == 2 ) :					      14 LOAD_CONST 1 ( 4 )					    14 LOAD_CONST 1 ( 4 )					  
	return ( n - 6 ) // 4 + 1			      16 BINARY_MODULO						    16 COMPARE_OP 2 ( == )					  
    if ( rem == 3 ) :					      18 STORE_FAST 1 ( rem )					    18 POP_JUMP_IF_FALSE 32					  
	if ( n < 15 ) :					      								    								  
	    return - 1					      5 20 LOAD_FAST 1 ( rem )					    5 20 LOAD_FAST 0 ( n )					  
	return ( n - 15 ) // 4 + 2			      22 LOAD_CONST 3 ( 0 )					    22 LOAD_CONST 1 ( 4 )					  
							      24 COMPARE_OP 2 ( == )					    24 BINARY_MODULO						  
							      26 POP_JUMP_IF_FALSE 36					    26 STORE_FAST 1 ( n )					  
							      								    								  
							      6 28 LOAD_FAST 0 ( n )					    6 28 LOAD_FAST 1 ( n )					  
							      30 LOAD_CONST 1 ( 4 )					    30 LOAD_CONST 1 ( 4 )					  
							      32 BINARY_FLOOR_DIVIDE					    32 BINARY_MODULO						  
							      34 RETURN_VALUE						    34 STORE_FAST 2 ( count )					  
							      								    								  
							      7 >> 36 LOAD_FAST 1 ( rem )				    7 36 LOAD_FAST 1 ( n )					  
							      38 LOAD_CONST 4 ( 1 )					    38 LOAD_CONST 1 ( 4 )					  
							      40 COMPARE_OP 2 ( == )					    40 BINARY_MODULO						  
							      42 POP_JUMP_IF_FALSE 72					    42 STORE_FAST 3 ( count )					  
							      								    								  
							      8 44 LOAD_FAST 0 ( n )					    8 44 LOAD_FAST 1 ( n )					  
							      46 LOAD_CONST 5 ( 9 )					    46 LOAD_CONST 1 ( 4 )					  
							      48 COMPARE_OP 0 ( < )					    48 BINARY_MODULO						  
							      50 POP_JUMP_IF_FALSE 56					    50 STORE_FAST 4 ( count )					  
							      								    								  
							      9 52 LOAD_CONST 2 ( - 1 )					    9 52 LOAD_FAST 1 ( n )					  
							      54 RETURN_VALUE						    54 LOAD_CONST 1 ( 4 )					  
							      								    56 BINARY_MODULO						  
							      10 >> 56 LOAD_FAST 0 ( n )				    58 STORE_FAST 5 ( count )					  
							      58 LOAD_CONST 5 ( 9 )					    								  
							      60 BINARY_SUBTRACT					    10 60 LOAD_FAST 1 ( n )					  
							      62 LOAD_CONST 1 ( 4 )					    62 LOAD_CONST 1 ( 4 )					  
							      64 BINARY_FLOOR_DIVIDE					    64 BINARY_MODULO						  
							      66 LOAD_CONST 4 ( 1 )					    66 STORE_FAST 6 ( count )					  
							      68 BINARY_ADD						    								  
							      70 RETURN_VALUE						    11 68 LOAD_FAST 2 ( count )					  
							      								    70 LOAD_CONST 1 ( 4 )					  
							      11 >> 72 LOAD_FAST 1 ( rem )				    72 BINARY_MODULO						  
							      74 LOAD_CONST 6 ( 2 )					    74 LOAD_FAST 3 ( count )					  
							      76 COMPARE_OP 2 ( == )					    76 LOAD_CONST 1 ( 4 )					  
							      78 POP_JUMP_IF_FALSE 96					    78 BINARY_MODULO						  
							      								    80 INPLACE_ADD						  
							      12 80 LOAD_FAST 0 ( n )					    82 STORE_FAST 2 ( count )					  
							      82 LOAD_CONST 7 ( 6 )					    								  
							      84 BINARY_SUBTRACT					    12 84 LOAD_FAST 1 ( n )					  
							      86 LOAD_CONST 1 ( 4 )					    86 LOAD_CONST 1 ( 4 )					  
							      88 BINARY_FLOOR_DIVIDE					    88 BINARY_MODULO						  
							      90 LOAD_CONST 4 ( 1 )					    90 INPLACE_ADD						  
							      92 BINARY_ADD						    92 STORE_FAST 2 ( count )					  
							      94 RETURN_VALUE						    								  
							      								    13 94 LOAD_FAST 1 ( n )					  
							      13 >> 96 LOAD_FAST 1 ( rem )				    96 LOAD_CONST 1 ( 4 )					  
							      98 LOAD_CONST 8 ( 3 )					    98 BINARY_MODULO						  
							      100 COMPARE_OP 2 ( == )					    100 INPLACE_ADD						  
							      102 POP_JUMP_IF_FALSE 132					    102 STORE_FAST 1 ( n )					  
							      								    								  
							      14 104 LOAD_FAST 0 ( n )					    14 104 LOAD_FAST 1 ( n )					  
							      106 LOAD_CONST 9 ( 15 )					    106 LOAD_CONST 1 ( 4 )					  
							      108 COMPARE_OP 0 ( < )					    108 BINARY_MODULO						  
							      110 POP_JUMP_IF_FALSE 116					    110 INPLACE_ADD						  
							      								    112 STORE_FAST 1 ( n )					  
							      15 112 LOAD_CONST 2 ( - 1 )				    								  
							      114 RETURN_VALUE						    15 >> 114 LOAD_FAST 1 ( n )					  
							      								    116 LOAD_CONST 1 ( 4 )					  
							      16 >> 116 LOAD_FAST 0 ( n )				    118 BINARY_MODULO						  
							      118 LOAD_CONST 9 ( 15 )					    120 STORE_FAST 1 ( n )					  
							      120 BINARY_SUBTRACT					    								  
							      122 LOAD_CONST 1 ( 4 )					    16 122 LOAD_FAST 1 ( n )					  
							      124 BINARY_FLOOR_DIVIDE					    124 LOAD_CONST 1 ( 4 )					  
							      126 LOAD_CONST 6 ( 2 )					    126 INPLACE_ADD						  
							      128 BINARY_ADD						    128 STORE_FAST 1 ( n )					  
							      130 RETURN_VALUE						    								  
							      >> 132 LOAD_CONST 0 ( None )				    17 130 LOAD_FAST 1 ( n )					  
							      134 RETURN_VALUE NEW_LINE					    132 LOAD_CONST 1 ( 4 )					  
							      								    134 INPLACE_ADD						  
							      								    136 STORE_FAST 1 ( n )					  
							      								    								  
							      								    18 138 LOAD_FAST 1 ( n )					  
							      								    140 LOAD_CONST 1 ( 4 )					  
							      								    142 INPLACE_ADD						  
							      								    144 STORE_FAST 1 ( n )					  
							      								    								  
							      								    19 146 LOAD_FAST 1 ( n )					  
							      								    148 LOAD_CONST 1 ( 4 )					  
							      								    150 INPLACE_ADD						  
							      								    152 STORE_FAST 1 ( n )					  
							      								    								  
							      								    20 154 LOAD_FAST 1 ( n )					  
							      								    156 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE_1					      RECAMANS_SEQUENCE_1					    RECAMANS_SEQUENCE_1						  RECAMANS_SEQUENCE_1
--							      --							    --								  --
def recaman ( n ) :					      Disassembly of <code object recaman at 0x7f33e26494b0, file " Disassembly of <code object recaman at 0x7f2b0163dc90, file " script_not_found : None
    if ( n <= 0 ) :					      2 0 LOAD_FAST 0 ( n )					    2 0 LOAD_FAST 0 ( n )					  
	return						      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    print ( 0 , "," , end = '' )			      4 COMPARE_OP 1 ( <= )					    4 COMPARE_OP 1 ( <= )					  
    s = set ( [ ] )					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    s.add ( 0 )						      								    								  
    prev = 0						      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_GLOBAL 0 ( print )					  
    for i in range ( 1 , n ) :				      10 RETURN_VALUE						    10 LOAD_CONST 2 ( ',' )					  
	curr = prev - i					      								    12 LOAD_CONST 3 ( '' )					  
	if ( curr < 0 or curr in s ) :			      4 >> 12 LOAD_GLOBAL 0 ( print )				    14 CALL_FUNCTION 2						  
	    curr = prev + i				      14 LOAD_CONST 1 ( 0 )					    16 POP_TOP							  
	s.add ( curr )					      16 LOAD_CONST 2 ( ',' )					    								  
	print ( curr , "," , end = '' )			      18 LOAD_CONST 3 ( '' )					    4 18 LOAD_GLOBAL 1 ( set )					  
	prev = curr					      20 LOAD_CONST 4 ( ( 'end' , ) )				    20 LOAD_FAST 0 ( n )					  
							      22 CALL_FUNCTION_KW 3					    22 CALL_FUNCTION 1						  
							      24 POP_TOP						    24 STORE_FAST 1 ( s )					  
							      								    								  
							      5 26 LOAD_GLOBAL 1 ( set )				    5 26 SETUP_LOOP 64 ( to 92 )				  
							      28 BUILD_LIST 0						    28 LOAD_GLOBAL 2 ( range )					  
							      30 CALL_FUNCTION 1					    30 LOAD_CONST 4 ( 1 )					  
							      32 STORE_FAST 1 ( s )					    32 LOAD_CONST 5 ( 1 )					  
							      								    34 CALL_FUNCTION 2						  
							      6 34 LOAD_FAST 1 ( s )					    36 GET_ITER							  
							      36 LOAD_METHOD 2 ( add )					    >> 38 FOR_ITER 48 ( to 90 )					  
							      38 LOAD_CONST 1 ( 0 )					    40 STORE_FAST 2 ( i )					  
							      40 CALL_METHOD 1						    								  
							      42 POP_TOP						    6 42 LOAD_GLOBAL 3 ( set )					  
							      								    44 LOAD_FAST 0 ( n )					  
							      7 44 LOAD_CONST 1 ( 0 )					    46 CALL_FUNCTION 1						  
							      46 STORE_FAST 2 ( prev )					    48 LOAD_METHOD 4 ( set )					  
							      								    50 CALL_METHOD 0						  
							      8 48 SETUP_LOOP 78 ( to 128 )				    52 LOAD_FAST 1 ( s )					  
							      50 LOAD_GLOBAL 3 ( range )				    54 LOAD_METHOD 4 ( set )					  
							      52 LOAD_CONST 5 ( 1 )					    56 CALL_METHOD 0						  
							      54 LOAD_FAST 0 ( n )					    58 LOAD_FAST 1 ( s )					  
							      56 CALL_FUNCTION 2					    60 LOAD_METHOD 4 ( set )					  
							      58 GET_ITER						    62 CALL_METHOD 0						  
							      >> 60 FOR_ITER 64 ( to 126 )				    64 LOAD_FAST 1 ( s )					  
							      62 STORE_FAST 3 ( i )					    66 LOAD_METHOD 4 ( set )					  
							      								    68 CALL_METHOD 0						  
							      9 64 LOAD_FAST 2 ( prev )					    70 LOAD_FAST 1 ( s )					  
							      66 LOAD_FAST 3 ( i )					    72 LOAD_METHOD 4 ( set )					  
							      68 BINARY_SUBTRACT					    74 CALL_METHOD 0						  
							      70 STORE_FAST 4 ( curr )					    76 LOAD_FAST 1 ( s )					  
							      								    78 LOAD_METHOD 4 ( set )					  
							      10 72 LOAD_FAST 4 ( curr )				    80 CALL_METHOD 0						  
							      74 LOAD_CONST 1 ( 0 )					    82 LOAD_FAST 1 ( s )					  
							      76 COMPARE_OP 0 ( < )					    84 LOAD_METHOD 4 ( set )					  
							      78 POP_JUMP_IF_TRUE 88					    86 CALL_METHOD 0						  
							      80 LOAD_FAST 4 ( curr )					    88 LOAD_FAST 1 ( s )					  
							      82 LOAD_FAST 1 ( s )					    90 LOAD_METHOD 4 ( set )					  
							      84 COMPARE_OP 6 ( in )					    92 CALL_METHOD 0						  
							      86 POP_JUMP_IF_FALSE 96					    94 LOAD_FAST 1 ( s )					  
							      								    96 LOAD_METHOD 4 ( set )					  
							      11 >> 88 LOAD_FAST 2 ( prev )				    98 CALL_METHOD 0						  
							      90 LOAD_FAST 3 ( i )					    100 LOAD_FAST 1 ( s )					  
							      92 BINARY_ADD						    102 LOAD_METHOD 4 ( set )					  
							      94 STORE_FAST 4 ( curr )					    104 CALL_METHOD 0						  
							      								    106 LOAD_FAST 1 ( s )					  
							      12 >> 96 LOAD_FAST 1 ( s )				    108 LOAD_METHOD 4 ( set )					  
							      98 LOAD_METHOD 2 ( add )					    110 CALL_METHOD 0						  
							      100 LOAD_FAST 4 ( curr )					    112 LOAD_FAST 1 ( s )					  
							      102 CALL_METHOD 1						    114 LOAD_METHOD 4 ( set )					  
							      104 POP_TOP						    116 CALL_METHOD 0						  
							      								    118 LOAD_FAST 1 ( s )					  
							      13 106 LOAD_GLOBAL 0 ( print )				    120 LOAD_METHOD 4 ( set )					  
							      108 LOAD_FAST 4 ( curr )					    122 CALL_METHOD 0						  
							      110 LOAD_CONST 2 ( ',' )					    124 CALL_FUNCTION 2						  
							      112 LOAD_CONST 3 ( '' )					    126 LOAD_FAST 1 ( s )					  
							      114 LOAD_CONST 4 ( ( 'end' , ) )				    128 LOAD_METHOD 4 ( set )					  
							      116 CALL_FUNCTION_KW 3					    130 CALL_METHOD 0						  
							      118 POP_TOP						    132 LOAD_FAST 1 ( s )					  
							      								    134 LOAD_METHOD 4 ( set )					  
							      14 120 LOAD_FAST 4 ( curr )				    136 CALL_METHOD 0						  
							      122 STORE_FAST 2 ( prev )					    138 LOAD_FAST 1 ( s )					  
							      124 JUMP_ABSOLUTE 60					    140 LOAD_METHOD 4 ( set )					  
							      >> 126 POP_BLOCK						    142 CALL_METHOD 0						  
							      >> 128 LOAD_CONST 0 ( None )				    144 LOAD_FAST 1 ( s )					  
							      130 RETURN_VALUE NEW_LINE					    146 LOAD_METHOD 4 ( set )					  
							      								    148 CALL_METHOD 0						  
							      								    150 LOAD_FAST 1 ( s )					  
							      								    152 LOAD_METHOD 4 ( set )					  
							      								    154 CALL_METHOD 0						  
							      								    156 BUILD_TUPLE 3						  
							      								    158 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUPER_PRIME						      SUPER_PRIME						    SUPER_PRIME							  SUPER_PRIME
--							      --							    --								  --
def SieveOfEratosthenes ( n , isPrime ) :		      Disassembly of <code object SieveOfEratosthenes at 0x7f33e264 Disassembly of <code object combineveOfOfatoatoes at 0x7f2b01 script_not_found : None
    isPrime [ 0 ] = isPrime [ 1 ] = False		      2 0 LOAD_CONST 1 ( False )				    2 0 LOAD_FAST 0 ( n )					  
    for i in range ( 2 , n + 1 ) :			      2 DUP_TOP							    2 LOAD_CONST 1 ( 0 )					  
	isPrime [ i ] = True				      4 LOAD_FAST 1 ( isPrime )					    4 BINARY_SUBSCR						  
    for p in range ( 2 , n + 1 ) :			      6 LOAD_CONST 2 ( 0 )					    6 STORE_FAST 1 ( isPrime )					  
	if ( p * p <= n and isPrime [ p ] == True ) :	      8 STORE_SUBSCR						    								  
	    for i in range ( p * 2 , n + 1 , p ) :	      10 LOAD_FAST 1 ( isPrime )				    3 8 LOAD_FAST 0 ( n )					  
		isPrime [ i ] = False			      12 LOAD_CONST 3 ( 1 )					    10 LOAD_CONST 2 ( 1 )					  
		p += 1					      14 STORE_SUBSCR						    12 LOAD_CONST 3 ( 2 )					  
							      								    14 BINARY_FLOOR_DIVIDE					  
							      3 16 SETUP_LOOP 30 ( to 48 )				    16 STORE_FAST 2 ( p )					  
							      18 LOAD_GLOBAL 0 ( range )				    								  
							      20 LOAD_CONST 4 ( 2 )					    4 18 SETUP_LOOP 64 ( to 92 )				  
							      22 LOAD_FAST 0 ( n )					    20 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_CONST 3 ( 1 )					    22 LOAD_CONST 1 ( 2 )					  
							      26 BINARY_ADD						    24 LOAD_FAST 2 ( p )					  
							      28 CALL_FUNCTION 2					    26 LOAD_CONST 1 ( 2 )					  
							      30 GET_ITER						    28 BINARY_FLOOR_DIVIDE					  
							      >> 32 FOR_ITER 12 ( to 46 )				    30 CALL_FUNCTION 2						  
							      34 STORE_FAST 2 ( i )					    32 GET_ITER							  
							      								    >> 34 FOR_ITER 48 ( to 90 )					  
							      4 36 LOAD_CONST 5 ( True )				    36 STORE_FAST 3 ( p )					  
							      38 LOAD_FAST 1 ( isPrime )				    								  
							      40 LOAD_FAST 2 ( i )					    5 38 LOAD_FAST 0 ( n )					  
							      42 STORE_SUBSCR						    40 LOAD_FAST 3 ( p )					  
							      44 JUMP_ABSOLUTE 32					    42 LOAD_CONST 2 ( 1 )					  
							      >> 46 POP_BLOCK						    44 BINARY_SUBTRACT						  
							      								    46 BINARY_MODULO						  
							      5 >> 48 SETUP_LOOP 92 ( to 142 )				    48 LOAD_FAST 1 ( isPrime )					  
							      50 LOAD_GLOBAL 0 ( range )				    50 LOAD_FAST 2 ( p )					  
							      52 LOAD_CONST 4 ( 2 )					    52 LOAD_CONST 2 ( 1 )					  
							      54 LOAD_FAST 0 ( n )					    54 BINARY_SUBTRACT						  
							      56 LOAD_CONST 3 ( 1 )					    56 CALL_FUNCTION 2						  
							      58 BINARY_ADD						    58 GET_ITER							  
							      60 CALL_FUNCTION 2					    >> 60 FOR_ITER 48 ( to 88 )					  
							      62 GET_ITER						    62 STORE_FAST 4 ( p )					  
							      >> 64 FOR_ITER 74 ( to 140 )				    								  
							      66 STORE_FAST 3 ( p )					    6 64 LOAD_FAST 0 ( n )					  
							      								    66 LOAD_FAST 3 ( p )					  
							      6 68 LOAD_FAST 3 ( p )					    68 LOAD_CONST 2 ( 1 )					  
							      70 LOAD_FAST 3 ( p )					    70 BINARY_SUBTRACT						  
							      72 BINARY_MULTIPLY					    72 COMPARE_OP 0 ( < )					  
							      74 LOAD_FAST 0 ( n )					    74 POP_JUMP_IF_FALSE 60					  
							      76 COMPARE_OP 1 ( <= )					    								  
							      78 POP_JUMP_IF_FALSE 64					    7 76 LOAD_FAST 0 ( n )					  
							      80 LOAD_FAST 1 ( isPrime )				    78 LOAD_FAST 3 ( p )					  
							      82 LOAD_FAST 3 ( p )					    80 LOAD_CONST 2 ( 1 )					  
							      84 BINARY_SUBSCR						    82 BINARY_SUBTRACT						  
							      86 LOAD_CONST 5 ( True )					    84 COMPARE_OP 0 ( < )					  
							      88 COMPARE_OP 2 ( == )					    86 POP_JUMP_IF_FALSE 60					  
							      90 POP_JUMP_IF_FALSE 64					    								  
							      								    8 88 LOAD_FAST 0 ( n )					  
							      7 92 SETUP_LOOP 44 ( to 138 )				    90 LOAD_FAST 3 ( p )					  
							      94 LOAD_GLOBAL 0 ( range )				    92 LOAD_CONST 2 ( 1 )					  
							      96 LOAD_FAST 3 ( p )					    94 BINARY_SUBTRACT						  
							      98 LOAD_CONST 4 ( 2 )					    96 BINARY_SUBSCR						  
							      100 BINARY_MULTIPLY					    98 LOAD_FAST 1 ( isPrime )					  
							      102 LOAD_FAST 0 ( n )					    100 LOAD_FAST 2 ( p )					  
							      104 LOAD_CONST 3 ( 1 )					    102 LOAD_CONST 2 ( 1 )					  
							      106 BINARY_ADD						    104 BINARY_SUBTRACT						  
							      108 LOAD_FAST 3 ( p )					    106 CALL_FUNCTION 2						  
							      110 CALL_FUNCTION 3					    108 LOAD_FAST 1 ( isPrime )					  
							      112 GET_ITER						    110 LOAD_FAST 2 ( p )					  
							      >> 114 FOR_ITER 20 ( to 136 )				    112 LOAD_CONST 2 ( 1 )					  
							      116 STORE_FAST 2 ( i )					    114 BINARY_SUBTRACT						  
							      								    116 CALL_FUNCTION 2						  
							      8 118 LOAD_CONST 1 ( False )				    118 LOAD_FAST 1 ( isPrime )					  
							      120 LOAD_FAST 1 ( isPrime )				    120 LOAD_FAST 2 ( p )					  
							      122 LOAD_FAST 2 ( i )					    122 LOAD_CONST 2 ( 1 )					  
							      124 STORE_SUBSCR						    124 BINARY_SUBTRACT						  
							      								    126 CALL_FUNCTION 2						  
							      9 126 LOAD_FAST 3 ( p )					    128 LOAD_FAST 1 ( isPrime )					  
							      128 LOAD_CONST 3 ( 1 )					    130 LOAD_FAST 2 ( p )					  
							      130 INPLACE_ADD						    132 LOAD_CONST 2 ( 1 )					  
							      132 STORE_FAST 3 ( p )					    134 BINARY_SUBTRACT						  
							      134 JUMP_ABSOLUTE 114					    136 CALL_FUNCTION 2						  
							      >> 136 POP_BLOCK						    138 LOAD_FAST 1 ( isPrime )					  
							      >> 138 JUMP_ABSOLUTE 64					    140 LOAD_FAST 2 ( p )					  
							      >> 140 POP_BLOCK						    142 LOAD_CONST 2 ( 1 )					  
							      >> 142 LOAD_CONST 0 ( None )				    144 BINARY_SUBTRACT						  
							      144 RETURN_VALUE NEW_LINE					    146 CALL_FUNCTION 2						  
							      								    148 POP_TOP							  
							      								    								  
							      								    9 150 LOAD_FAST 1 ( isPrime )				  
							      								    152 LOAD_FAST 2 ( p )					  
							      								    154 LOAD_CONST 2 ( 1 )					  
							      								    156 BINARY_SUBTRACT						  
							      								    158 CALL_FUNCTION 2						  
							      								    160 POP_TOP							  
							      								    								  
							      								    10 162 LOAD_FAST 1 ( isPrime )				  
							      								    164 LOAD_FAST 2 ( p ) NEW_LINE				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			      PROGRAM_BINOMIAL_COEFFICIENTS_TABLE			    PROGRAM_BINOMIAL_COEFFICIENTS_TABLE				  PROGRAM_BINOMIAL_COEFFICIENTS_TABLE
--							      --							    --								  --
def printbinomial ( max ) :				      Disassembly of <code object printbinomial at 0x7f33e2649a50,  Disassembly of <code object printbinbinbinbinbinbinbinbinbinb script_not_found : None
    for m in range ( max + 1 ) :			      2 0 SETUP_LOOP 126 ( to 128 )				    								  
	print ( '% 2d' % m , end = '' )			      2 LOAD_GLOBAL 0 ( range )					    								  
	binom = 1					      4 LOAD_FAST 0 ( max )					    								  
	for x in range ( m + 1 ) :			      6 LOAD_CONST 1 ( 1 )					    								  
	    if m != 0 and x != 0 :			      8 BINARY_ADD						    								  
		binom = binom * ( m - x + 1 ) / x	      10 CALL_FUNCTION 1					    								  
	    print ( '% 4d' % binom , end = '' )		      12 GET_ITER						    								  
	print ( "\n" , end = '' )			      >> 14 FOR_ITER 110 ( to 126 )				    								  
							      16 STORE_FAST 1 ( m )					    								  
							      								    								  
							      3 18 LOAD_GLOBAL 1 ( print )				    								  
							      20 LOAD_CONST 2 ( '% 2d' )				    								  
							      22 LOAD_FAST 1 ( m )					    								  
							      24 BINARY_MODULO						    								  
							      26 LOAD_CONST 3 ( '' )					    								  
							      28 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      30 CALL_FUNCTION_KW 2					    								  
							      32 POP_TOP						    								  
							      								    								  
							      4 34 LOAD_CONST 1 ( 1 )					    								  
							      36 STORE_FAST 2 ( binom )					    								  
							      								    								  
							      5 38 SETUP_LOOP 72 ( to 112 )				    								  
							      40 LOAD_GLOBAL 0 ( range )				    								  
							      42 LOAD_FAST 1 ( m )					    								  
							      44 LOAD_CONST 1 ( 1 )					    								  
							      46 BINARY_ADD						    								  
							      48 CALL_FUNCTION 1					    								  
							      50 GET_ITER						    								  
							      >> 52 FOR_ITER 56 ( to 110 )				    								  
							      54 STORE_FAST 3 ( x )					    								  
							      								    								  
							      6 56 LOAD_FAST 1 ( m )					    								  
							      58 LOAD_CONST 5 ( 0 )					    								  
							      60 COMPARE_OP 3 ( != )					    								  
							      62 POP_JUMP_IF_FALSE 92					    								  
							      64 LOAD_FAST 3 ( x )					    								  
							      66 LOAD_CONST 5 ( 0 )					    								  
							      68 COMPARE_OP 3 ( != )					    								  
							      70 POP_JUMP_IF_FALSE 92					    								  
							      								    								  
							      7 72 LOAD_FAST 2 ( binom )				    								  
							      74 LOAD_FAST 1 ( m )					    								  
							      76 LOAD_FAST 3 ( x )					    								  
							      78 BINARY_SUBTRACT					    								  
							      80 LOAD_CONST 1 ( 1 )					    								  
							      82 BINARY_ADD						    								  
							      84 BINARY_MULTIPLY					    								  
							      86 LOAD_FAST 3 ( x )					    								  
							      88 BINARY_TRUE_DIVIDE					    								  
							      90 STORE_FAST 2 ( binom )					    								  
							      								    								  
							      8 >> 92 LOAD_GLOBAL 1 ( print )				    								  
							      94 LOAD_CONST 6 ( '% 4d' )				    								  
							      96 LOAD_FAST 2 ( binom )					    								  
							      98 BINARY_MODULO						    								  
							      100 LOAD_CONST 3 ( '' )					    								  
							      102 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      104 CALL_FUNCTION_KW 2					    								  
							      106 POP_TOP						    								  
							      108 JUMP_ABSOLUTE 52					    								  
							      >> 110 POP_BLOCK						    								  
							      								    								  
							      9 >> 112 LOAD_GLOBAL 1 ( print )				    								  
							      114 LOAD_CONST 7 ( '\n' )					    								  
							      116 LOAD_CONST 3 ( '' )					    								  
							      118 LOAD_CONST 4 ( ( 'end' , ) )				    								  
							      120 CALL_FUNCTION_KW 2					    								  
							      122 POP_TOP						    								  
							      124 JUMP_ABSOLUTE 14					    								  
							      >> 126 POP_BLOCK						    								  
							      >> 128 LOAD_CONST 0 ( None )				    								  
							      130 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			      COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			    COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1			  COUNT_SUB<unk> YS_EQUAL_NUMBER_1S_0S_1
--							      --							    --								  --
def countSubarrWithEqualZeroAndOne ( arr , n ) :	      Disassembly of <code object countSubarrWithEqualZeroAndOne at Disassembly of <code object countSubarrWithEqualqualAndOne at script_not_found : None
    mp = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  
    Sum = 0						      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  
    count = 0						      4 STORE_FAST 2 ( mp )					    4 STORE_FAST 2 ( mp )					  
    for i in range ( n ) :				      								    								  
	if ( arr [ i ] == 0 ) :				      3 6 LOAD_CONST 1 ( 0 )					    3 6 LOAD_CONST 1 ( 0 )					  
	    arr [ i ] = - 1				      8 STORE_FAST 3 ( Sum )					    8 STORE_FAST 3 ( count )					  
	Sum += arr [ i ]				      								    								  
	if ( Sum == 0 ) :				      4 10 LOAD_CONST 1 ( 0 )					    4 10 LOAD_CONST 2 ( 1 )					  
	    count += 1					      12 STORE_FAST 4 ( count )					    12 STORE_FAST 4 ( count )					  
	if ( Sum in mp.keys ( ) ) :			      								    								  
	    count += mp [ Sum ]				      5 14 SETUP_LOOP 108 ( to 124 )				    5 14 SETUP_LOOP 64 ( to 76 )				  
	mp [ Sum ] = mp.get ( Sum , 0 ) + 1		      16 LOAD_GLOBAL 1 ( range )				    >> 16 LOAD_FAST 1 ( n )					  
    return count					      18 LOAD_FAST 1 ( n )					    18 LOAD_FAST 2 ( mp )					  
							      20 CALL_FUNCTION 1					    20 LOAD_ATTR 1 ( keys )					  
							      22 GET_ITER						    22 COMPARE_OP 6 ( in )					  
							      >> 24 FOR_ITER 96 ( to 122 )				    24 POP_JUMP_IF_FALSE 74					  
							      26 STORE_FAST 5 ( i )					    								  
							      								    6 26 LOAD_FAST 3 ( count )					  
							      6 28 LOAD_FAST 0 ( arr )					    28 LOAD_FAST 2 ( mp )					  
							      30 LOAD_FAST 5 ( i )					    30 LOAD_ATTR 2 ( mp )					  
							      32 BINARY_SUBSCR						    32 LOAD_ATTR 3 ( undo )					  
							      34 LOAD_CONST 1 ( 0 )					    34 COMPARE_OP 6 ( in )					  
							      36 COMPARE_OP 2 ( == )					    36 POP_JUMP_IF_FALSE 42					  
							      38 POP_JUMP_IF_FALSE 48					    								  
							      								    7 38 LOAD_FAST 3 ( count )					  
							      7 40 LOAD_CONST 2 ( - 1 )					    40 LOAD_FAST 2 ( mp )					  
							      42 LOAD_FAST 0 ( arr )					    42 LOAD_ATTR 4 ( undo )					  
							      44 LOAD_FAST 5 ( i )					    44 BINARY_SUBSCR						  
							      46 STORE_SUBSCR						    46 STORE_FAST 5 ( undo )					  
							      								    								  
							      8 >> 48 LOAD_FAST 3 ( Sum )				    8 48 LOAD_FAST 4 ( count )					  
							      50 LOAD_FAST 0 ( arr )					    50 LOAD_CONST 3 ( 1 )					  
							      52 LOAD_FAST 5 ( i )					    52 INPLACE_ADD						  
							      54 BINARY_SUBSCR						    54 STORE_FAST 3 ( count )					  
							      56 INPLACE_ADD						    								  
							      58 STORE_FAST 3 ( Sum )					    9 56 LOAD_FAST 3 ( count )					  
							      								    58 LOAD_CONST 4 ( 2 )					  
							      9 60 LOAD_FAST 3 ( Sum )					    60 INPLACE_ADD						  
							      62 LOAD_CONST 1 ( 0 )					    62 STORE_FAST 3 ( count )					  
							      64 COMPARE_OP 2 ( == )					    								  
							      66 POP_JUMP_IF_FALSE 76					    10 64 LOAD_FAST 3 ( count )					  
							      								    66 LOAD_CONST 5 ( 2 )					  
							      10 68 LOAD_FAST 4 ( count )				    68 INPLACE_ADD						  
							      70 LOAD_CONST 3 ( 1 )					    70 STORE_FAST 3 ( count )					  
							      72 INPLACE_ADD						    72 JUMP_ABSOLUTE 16						  
							      74 STORE_FAST 4 ( count )					    >> 74 POP_BLOCK						  
							      								    								  
							      11 >> 76 LOAD_FAST 3 ( Sum )				    11 >> 76 LOAD_FAST 3 ( count )				  
							      78 LOAD_FAST 2 ( mp )					    78 RETURN_VALUE NEW_LINE					  
							      80 LOAD_METHOD 2 ( keys )					    								  
							      82 CALL_METHOD 0						    								  
							      84 COMPARE_OP 6 ( in )					    								  
							      86 POP_JUMP_IF_FALSE 100					    								  
							      								    								  
							      12 88 LOAD_FAST 4 ( count )				    								  
							      90 LOAD_FAST 2 ( mp )					    								  
							      92 LOAD_FAST 3 ( Sum )					    								  
							      94 BINARY_SUBSCR						    								  
							      96 INPLACE_ADD						    								  
							      98 STORE_FAST 4 ( count )					    								  
							      								    								  
							      13 >> 100 LOAD_FAST 2 ( mp )				    								  
							      102 LOAD_METHOD 3 ( get )					    								  
							      104 LOAD_FAST 3 ( Sum )					    								  
							      106 LOAD_CONST 1 ( 0 )					    								  
							      108 CALL_METHOD 2						    								  
							      110 LOAD_CONST 3 ( 1 )					    								  
							      112 BINARY_ADD						    								  
							      114 LOAD_FAST 2 ( mp )					    								  
							      116 LOAD_FAST 3 ( Sum )					    								  
							      118 STORE_SUBSCR						    								  
							      120 JUMP_ABSOLUTE 24					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      14 >> 124 LOAD_FAST 4 ( count )				    								  
							      126 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	      WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	    WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	  WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER
--							      --							    --								  --
def countWays ( s ) :					      Disassembly of <code object countWays at 0x7f33e2649a50, file Disassembly of <code object countWays at 0x7f2b01639660, file script_not_found : None
    count = [ 0 ] * 26 ;				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    for x in s :					      2 BUILD_LIST 1						    2 LOAD_CONST 2 ( ( '' , ) )					  
	count [ ord ( x ) - ord ( 'a' ) ] = ( count [ ord ( x 4 LOAD_CONST 2 ( 26 )					    4 IMPORT_NAME 0 ( math )					  
    count [ ord ( s [ 0 ] ) - ord ( 'a' ) ] = 1 ;	      6 BINARY_MULTIPLY						    6 IMPORT_FROM 1 ( 26 )					  
    ans = 1 ;						      8 STORE_FAST 1 ( count )					    8 STORE_FAST 1 ( count )					  
    for i in range ( 26 ) :				      								    10 POP_TOP							  
	if ( count [ i ] != 0 ) :			      3 10 SETUP_LOOP 52 ( to 64 )				    								  
	    ans *= count [ i ] ;			      12 LOAD_FAST 0 ( s )					    3 12 SETUP_LOOP 26 ( to 36 )				  
    return ans ;					      14 GET_ITER						    14 LOAD_FAST 0 ( s )					  
							      >> 16 FOR_ITER 44 ( to 62 )				    16 GET_ITER							  
							      18 STORE_FAST 2 ( x )					    >> 18 FOR_ITER 18 ( to 34 )					  
							      								    20 STORE_FAST 2 ( x )					  
							      4 20 LOAD_FAST 1 ( count )				    								  
							      22 LOAD_GLOBAL 0 ( ord )					    4 22 LOAD_FAST 2 ( x )					  
							      24 LOAD_FAST 2 ( x )					    24 LOAD_CONST 3 ( 1 )					  
							      26 CALL_FUNCTION 1					    26 BINARY_SUBSCR						  
							      28 LOAD_GLOBAL 0 ( ord )					    28 LOAD_FAST 1 ( count )					  
							      30 LOAD_CONST 3 ( 'a' )					    30 LOAD_CONST 4 ( 2 )					  
							      32 CALL_FUNCTION 1					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBTRACT					    34 LOAD_FAST 1 ( count )					  
							      36 BINARY_SUBSCR						    36 LOAD_CONST 4 ( 2 )					  
							      38 LOAD_CONST 4 ( 1 )					    38 BINARY_SUBSCR						  
							      40 BINARY_ADD						    40 COMPARE_OP 4 ( > )					  
							      42 LOAD_FAST 1 ( count )					    42 POP_JUMP_IF_FALSE 18					  
							      44 LOAD_GLOBAL 0 ( ord )					    								  
							      46 LOAD_FAST 2 ( x )					    5 44 LOAD_FAST 1 ( count )					  
							      48 CALL_FUNCTION 1					    46 LOAD_CONST 5 ( 2 )					  
							      50 LOAD_GLOBAL 0 ( ord )					    48 BINARY_SUBSCR						  
							      52 LOAD_CONST 3 ( 'a' )					    50 LOAD_FAST 1 ( count )					  
							      54 CALL_FUNCTION 1					    52 LOAD_CONST 4 ( 2 )					  
							      56 BINARY_SUBTRACT					    54 BINARY_SUBSCR						  
							      58 STORE_SUBSCR						    56 LOAD_FAST 1 ( count )					  
							      60 JUMP_ABSOLUTE 16					    58 LOAD_CONST 4 ( 2 )					  
							      >> 62 POP_BLOCK						    60 BINARY_SUBSCR						  
							      								    62 BINARY_SUBTRACT						  
							      5 >> 64 LOAD_CONST 4 ( 1 )				    64 LOAD_FAST 1 ( count )					  
							      66 LOAD_FAST 1 ( count )					    66 LOAD_CONST 4 ( 2 )					  
							      68 LOAD_GLOBAL 0 ( ord )					    68 BINARY_SUBSCR						  
							      70 LOAD_FAST 0 ( s )					    70 BINARY_SUBTRACT						  
							      72 LOAD_CONST 1 ( 0 )					    72 LOAD_FAST 1 ( count )					  
							      74 BINARY_SUBSCR						    74 LOAD_CONST 4 ( 2 )					  
							      76 CALL_FUNCTION 1					    76 BINARY_SUBSCR						  
							      78 LOAD_GLOBAL 0 ( ord )					    78 BINARY_SUBTRACT						  
							      80 LOAD_CONST 3 ( 'a' )					    80 LOAD_FAST 1 ( count )					  
							      82 CALL_FUNCTION 1					    82 LOAD_CONST 4 ( 2 )					  
							      84 BINARY_SUBTRACT					    84 BINARY_SUBSCR						  
							      86 STORE_SUBSCR						    86 BINARY_SUBTRACT						  
							      								    88 LOAD_FAST 1 ( count )					  
							      6 88 LOAD_CONST 4 ( 1 )					    90 LOAD_CONST 4 ( 2 )					  
							      90 STORE_FAST 3 ( ans )					    92 BINARY_SUBSCR						  
							      								    94 BINARY_SUBTRACT						  
							      7 92 SETUP_LOOP 40 ( to 134 )				    96 LOAD_FAST 1 ( count )					  
							      94 LOAD_GLOBAL 1 ( range )				    98 LOAD_CONST 4 ( 2 )					  
							      96 LOAD_CONST 2 ( 26 )					    100 BINARY_SUBSCR						  
							      98 CALL_FUNCTION 1					    102 BINARY_SUBTRACT						  
							      100 GET_ITER						    104 LOAD_FAST 1 ( count )					  
							      >> 102 FOR_ITER 28 ( to 132 )				    106 LOAD_CONST 4 ( 2 )					  
							      104 STORE_FAST 4 ( i )					    108 BINARY_SUBSCR						  
							      								    110 BINARY_SUBTRACT						  
							      8 106 LOAD_FAST 1 ( count )				    112 LOAD_FAST 1 ( count )					  
							      108 LOAD_FAST 4 ( i )					    114 LOAD_CONST 4 ( 2 )					  
							      110 BINARY_SUBSCR						    116 BINARY_SUBSCR						  
							      112 LOAD_CONST 1 ( 0 )					    118 BINARY_SUBTRACT						  
							      114 COMPARE_OP 3 ( != )					    120 LOAD_FAST 1 ( count )					  
							      116 POP_JUMP_IF_FALSE 102					    122 LOAD_CONST 4 ( 2 )					  
							      								    124 BINARY_SUBSCR						  
							      9 118 LOAD_FAST 3 ( ans )					    126 BINARY_SUBTRACT						  
							      120 LOAD_FAST 1 ( count )					    128 LOAD_FAST 1 ( count )					  
							      122 LOAD_FAST 4 ( i )					    130 LOAD_CONST 4 ( 2 )					  
							      124 BINARY_SUBSCR						    132 BINARY_SUBSCR						  
							      126 INPLACE_MULTIPLY					    134 BINARY_SUBTRACT						  
							      128 STORE_FAST 3 ( ans )					    136 LOAD_FAST 1 ( count )					  
							      130 JUMP_ABSOLUTE 102					    138 LOAD_CONST 4 ( 2 )					  
							      >> 132 POP_BLOCK						    140 BINARY_SUBSCR						  
							      								    142 BINARY_SUBTRACT						  
							      10 >> 134 LOAD_FAST 3 ( ans )				    144 LOAD_FAST 1 ( count )					  
							      136 RETURN_VALUE NEW_LINE					    146 LOAD_CONST 4 ( 2 )					  
							      								    148 BINARY_SUBSCR						  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 1 ( count )					  
							      								    154 LOAD_CONST 4 ( 2 )					  
							      								    156 STORE_SUBSCR						  
							      								    								  
							      								    5 158 LOAD_FAST 1 ( count )					  
							      								    160 LOAD_CONST 4 ( 2 )					  
							      								    162 STORE_SUBSCR						  
							      								    								  
							      								    6 164 LOAD_FAST 1 ( count )					  
							      								    166 LOAD_CONST 4 ( 2 )					  
							      								    168 STORE_SUBSCR						  
							      								    								  
							      								    7 170 LOAD_FAST 1 ( count )					  
							      								    172 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT< MAKING_ELEMENTS_OF_TWO_<unk> YS_SAME_WITH_MINIMUM_<unk> MENT<
--							      --							    --								  --
def MinOperation ( a , b , n ) :			      Disassembly of <code object MinOperation at 0x7f33e2644930, f Disassembly of <code object MinOperation at 0x7f2b0163dc90, f script_not_found : None
    a.sort ( reverse = False )				      2 0 LOAD_FAST 0 ( a )					    2 0 LOAD_FAST 0 ( a )					  
    b.sort ( reverse = False )				      2 LOAD_ATTR 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  
    result = 0						      4 LOAD_CONST 1 ( False )					    4 LOAD_CONST 1 ( False )					  
    for i in range ( 0 , n , 1 ) :			      6 LOAD_CONST 2 ( ( 'reverse' , ) )			    6 CALL_METHOD 1						  
	if ( a [ i ] > b [ i ] ) :			      8 CALL_FUNCTION_KW 1					    8 POP_TOP							  
	    result = result + abs ( a [ i ] - b [ i ] )	      10 POP_TOP						    								  
	elif ( a [ i ] < b [ i ] ) :			      								    3 10 LOAD_FAST 0 ( a )					  
	    result = result + abs ( a [ i ] - b [ i ] )	      3 12 LOAD_FAST 1 ( b )					    12 LOAD_METHOD 0 ( sort )					  
    return result					      14 LOAD_ATTR 0 ( sort )					    14 LOAD_CONST 2 ( False )					  
							      16 LOAD_CONST 1 ( False )					    16 CALL_METHOD 1						  
							      18 LOAD_CONST 2 ( ( 'reverse' , ) )			    18 POP_TOP							  
							      20 CALL_FUNCTION_KW 1					    								  
							      22 POP_TOP						    4 20 LOAD_CONST 3 ( 0 )					  
							      								    22 STORE_FAST 2 ( result )					  
							      4 24 LOAD_CONST 3 ( 0 )					    								  
							      26 STORE_FAST 3 ( result )				    5 24 SETUP_LOOP 64 ( to 104 )				  
							      								    26 LOAD_GLOBAL 1 ( range )					  
							      5 28 SETUP_LOOP 102 ( to 132 )				    28 LOAD_CONST 1 ( 0 )					  
							      30 LOAD_GLOBAL 1 ( range )				    30 LOAD_FAST 2 ( result )					  
							      32 LOAD_CONST 3 ( 0 )					    32 CALL_FUNCTION 2						  
							      34 LOAD_FAST 2 ( n )					    34 GET_ITER							  
							      36 LOAD_CONST 4 ( 1 )					    >> 36 FOR_ITER 48 ( to 102 )				  
							      38 CALL_FUNCTION 3					    38 STORE_FAST 3 ( i )					  
							      40 GET_ITER						    								  
							      >> 42 FOR_ITER 86 ( to 130 )				    6 40 LOAD_FAST 0 ( a )					  
							      44 STORE_FAST 4 ( i )					    42 LOAD_METHOD 0 ( sort )					  
							      								    44 LOAD_CONST 4 ( 1 )					  
							      6 46 LOAD_FAST 0 ( a )					    46 CALL_METHOD 1						  
							      48 LOAD_FAST 4 ( i )					    48 POP_TOP							  
							      50 BINARY_SUBSCR						    								  
							      52 LOAD_FAST 1 ( b )					    7 50 LOAD_FAST 0 ( a )					  
							      54 LOAD_FAST 4 ( i )					    52 LOAD_METHOD 0 ( sort )					  
							      56 BINARY_SUBSCR						    54 LOAD_CONST 5 ( 1 )					  
							      58 COMPARE_OP 4 ( > )					    56 CALL_METHOD 1						  
							      60 POP_JUMP_IF_FALSE 88					    58 POP_TOP							  
							      								    								  
							      7 62 LOAD_FAST 3 ( result )				    8 60 LOAD_FAST 0 ( a )					  
							      64 LOAD_GLOBAL 2 ( abs )					    62 LOAD_METHOD 0 ( sort )					  
							      66 LOAD_FAST 0 ( a )					    64 LOAD_CONST 6 ( 1 )					  
							      68 LOAD_FAST 4 ( i )					    66 CALL_METHOD 1						  
							      70 BINARY_SUBSCR						    68 POP_TOP							  
							      72 LOAD_FAST 1 ( b )					    								  
							      74 LOAD_FAST 4 ( i )					    9 70 LOAD_FAST 0 ( a )					  
							      76 BINARY_SUBSCR						    72 LOAD_METHOD 0 ( sort )					  
							      78 BINARY_SUBTRACT					    74 LOAD_CONST 7 ( 1 )					  
							      80 CALL_FUNCTION 1					    76 CALL_METHOD 1						  
							      82 BINARY_ADD						    78 POP_TOP							  
							      84 STORE_FAST 3 ( result )				    								  
							      86 JUMP_ABSOLUTE 42					    10 80 LOAD_FAST 0 ( a )					  
							      								    82 LOAD_METHOD 0 ( sort )					  
							      8 >> 88 LOAD_FAST 0 ( a )					    84 LOAD_CONST 8 ( 2 )					  
							      90 LOAD_FAST 4 ( i )					    86 CALL_METHOD 1						  
							      92 BINARY_SUBSCR						    88 POP_TOP							  
							      94 LOAD_FAST 1 ( b )					    								  
							      96 LOAD_FAST 4 ( i )					    11 90 LOAD_FAST 0 ( a )					  
							      98 BINARY_SUBSCR						    92 LOAD_METHOD 0 ( sort )					  
							      100 COMPARE_OP 0 ( < )					    94 LOAD_CONST 9 ( True )					  
							      102 POP_JUMP_IF_FALSE 42					    96 CALL_METHOD 1						  
							      								    98 POP_TOP							  
							      9 104 LOAD_FAST 3 ( result )				    100 JUMP_ABSOLUTE 36					  
							      106 LOAD_GLOBAL 2 ( abs )					    >> 102 POP_BLOCK						  
							      108 LOAD_FAST 0 ( a )					    >> 104 JUMP_ABSOLUTE 36					  
							      110 LOAD_FAST 4 ( i )					    >> 106 POP_BLOCK						  
							      112 BINARY_SUBSCR						    >> 108 LOAD_CONST 0 ( None )				  
							      114 LOAD_FAST 1 ( b )					    110 RETURN_VALUE NEW_LINE					  
							      116 LOAD_FAST 4 ( i )					    								  
							      118 BINARY_SUBSCR						    								  
							      120 BINARY_SUBTRACT					    								  
							      122 CALL_FUNCTION 1					    								  
							      124 BINARY_ADD						    								  
							      126 STORE_FAST 3 ( result )				    								  
							      128 JUMP_ABSOLUTE 42					    								  
							      >> 130 POP_BLOCK						    								  
							      								    								  
							      10 >> 132 LOAD_FAST 3 ( result )				    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
def solve ( i , par , a , n , k , current_ans ) :	      Disassembly of <code object solve at 0x7f33e2644f60, file "<d Disassembly of <code object solve at 0x7f2b01639660, file "<d script_not_found : None
    if ( par > k ) :					      2 0 LOAD_FAST 1 ( par )					    2 0 LOAD_FAST 0 ( i )					  
	return 0					      2 LOAD_FAST 4 ( k )					    2 LOAD_FAST 1 ( par )					  
    global ans						      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  
    if ( par == k and i == n - 1 ) :			      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
	ans = min ( ans , current_ans )			      								    								  
	return 0					      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 1 ( 0 )					  
    for j in range ( i + 1 , n ) :			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	solve ( j , par + 1 , a , n , k , current_ans + ( a [ 								    								  
							      5 >> 12 LOAD_FAST 1 ( par )				    4 >> 12 LOAD_FAST 0 ( i )					  
							      14 LOAD_FAST 4 ( k )					    14 LOAD_FAST 1 ( par )					  
							      16 COMPARE_OP 2 ( == )					    16 COMPARE_OP 4 ( > )					  
							      18 POP_JUMP_IF_FALSE 46					    18 POP_JUMP_IF_FALSE 24					  
							      20 LOAD_FAST 0 ( i )					    								  
							      22 LOAD_FAST 3 ( n )					    5 20 LOAD_CONST 1 ( 0 )					  
							      24 LOAD_CONST 2 ( 1 )					    22 RETURN_VALUE						  
							      26 BINARY_SUBTRACT					    								  
							      28 COMPARE_OP 2 ( == )					    6 >> 24 LOAD_GLOBAL 0 ( min )				  
							      30 POP_JUMP_IF_FALSE 46					    26 LOAD_FAST 0 ( i )					  
							      								    28 LOAD_FAST 1 ( par )					  
							      6 32 LOAD_GLOBAL 0 ( min )				    30 LOAD_FAST 2 ( n )					  
							      34 LOAD_GLOBAL 1 ( ans )					    32 BINARY_SUBTRACT						  
							      36 LOAD_FAST 5 ( current_ans )				    34 CALL_FUNCTION 1						  
							      38 CALL_FUNCTION 2					    36 STORE_FAST 3 ( ans )					  
							      40 STORE_GLOBAL 1 ( ans )					    								  
							      								    7 38 LOAD_FAST 3 ( ans )					  
							      7 42 LOAD_CONST 1 ( 0 )					    40 LOAD_FAST 0 ( i )					  
							      44 RETURN_VALUE						    42 BINARY_SUBSCR						  
							      								    44 STORE_FAST 4 ( ans )					  
							      8 >> 46 SETUP_LOOP 84 ( to 132 )				    								  
							      48 LOAD_GLOBAL 2 ( range )				    8 46 LOAD_FAST 0 ( i )					  
							      50 LOAD_FAST 0 ( i )					    48 LOAD_FAST 1 ( par )					  
							      52 LOAD_CONST 2 ( 1 )					    50 COMPARE_OP 4 ( > )					  
							      54 BINARY_ADD						    52 POP_JUMP_IF_FALSE 92					  
							      56 LOAD_FAST 3 ( n )					    								  
							      58 CALL_FUNCTION 2					    9 54 LOAD_FAST 3 ( ans )					  
							      60 GET_ITER						    56 LOAD_FAST 4 ( ans )					  
							      >> 62 FOR_ITER 66 ( to 130 )				    58 BINARY_SUBSCR						  
							      64 STORE_FAST 6 ( j )					    60 STORE_FAST 5 ( ans )					  
							      								    								  
							      9 66 LOAD_GLOBAL 3 ( solve )				    10 62 LOAD_FAST 5 ( ans )					  
							      68 LOAD_FAST 6 ( j )					    64 LOAD_FAST 1 ( par )					  
							      70 LOAD_FAST 1 ( par )					    66 COMPARE_OP 4 ( > )					  
							      72 LOAD_CONST 2 ( 1 )					    68 POP_JUMP_IF_FALSE 92					  
							      74 BINARY_ADD						    								  
							      76 LOAD_FAST 2 ( a )					    11 70 LOAD_FAST 5 ( ans )					  
							      78 LOAD_FAST 3 ( n )					    72 LOAD_FAST 2 ( n )					  
							      80 LOAD_FAST 4 ( k )					    74 BINARY_SUBSCR						  
							      82 LOAD_FAST 5 ( current_ans )				    76 LOAD_FAST 5 ( ans )					  
							      84 LOAD_FAST 2 ( a )					    78 INPLACE_ADD						  
							      86 LOAD_FAST 6 ( j )					    80 STORE_FAST 5 ( ans )					  
							      88 BINARY_SUBSCR						    								  
							      90 LOAD_FAST 2 ( a )					    12 82 LOAD_FAST 5 ( ans )					  
							      92 LOAD_FAST 0 ( i )					    84 LOAD_FAST 2 ( n )					  
							      94 LOAD_CONST 2 ( 1 )					    86 BINARY_SUBSCR						  
							      96 BINARY_ADD						    88 LOAD_FAST 5 ( ans )					  
							      98 BINARY_SUBSCR						    90 INPLACE_ADD						  
							      100 BINARY_SUBTRACT					    92 STORE_FAST 5 ( ans )					  
							      102 LOAD_FAST 2 ( a )					    94 JUMP_FORWARD 10 ( to 108 )				  
							      104 LOAD_FAST 6 ( j )					    								  
							      106 BINARY_SUBSCR						    13 >> 96 LOAD_FAST 5 ( ans )				  
							      108 LOAD_FAST 2 ( a )					    98 LOAD_FAST 2 ( n )					  
							      110 LOAD_FAST 0 ( i )					    100 BINARY_SUBSCR						  
							      112 LOAD_CONST 2 ( 1 )					    102 LOAD_FAST 5 ( ans )					  
							      114 BINARY_ADD						    104 COMPARE_OP 4 ( > )					  
							      116 BINARY_SUBSCR						    106 POP_JUMP_IF_FALSE 112					  
							      118 BINARY_SUBTRACT					    								  
							      120 BINARY_MULTIPLY					    14 108 LOAD_FAST 5 ( ans )					  
							      122 BINARY_ADD						    110 LOAD_FAST 2 ( n )					  
							      124 CALL_FUNCTION 6					    112 BINARY_SUBSCR						  
							      126 POP_TOP						    114 LOAD_FAST 5 ( ans )					  
							      128 JUMP_ABSOLUTE 62					    116 LOAD_FAST 2 ( n )					  
							      >> 130 POP_BLOCK						    118 STORE_SUBSCR						  
							      >> 132 LOAD_CONST 0 ( None )				    								  
							      134 RETURN_VALUE NEW_LINE					    15 >> 120 LOAD_FAST 3 ( ans )				  
							      								    122 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	      FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2	    FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2		  FIND_ELEMENTS_<unk> Y_LEAST_TWO_GREATER_ELEMENTS_2
--							      --							    --								  --
def findElements ( arr , n ) :				      Disassembly of <code object findElements at 0x7f33e2644f60, f Disassembly of <code object findElements at 0x7f2b0163dc90, f script_not_found : None
    first = - sys.maxsize				      2 0 LOAD_GLOBAL 0 ( sys )					    2 0 LOAD_CONST 1 ( - sys . maxsize )			  
    second = - sys.maxsize				      2 LOAD_ATTR 1 ( maxsize )					    2 STORE_FAST 1 ( first )					  
    for i in range ( 0 , n ) :				      4 UNARY_NEGATIVE						    								  
	if ( arr [ i ] > first ) :			      6 STORE_FAST 2 ( first )					    3 4 LOAD_CONST 2 ( - 1 )					  
	    second = first				      								    6 STORE_FAST 2 ( first )					  
	    first = arr [ i ]				      3 8 LOAD_GLOBAL 0 ( sys )					    								  
	elif ( arr [ i ] > second ) :			      10 LOAD_ATTR 1 ( maxsize )				    4 8 LOAD_CONST 3 ( - 1 )					  
	    second = arr [ i ]				      12 UNARY_NEGATIVE						    10 STORE_FAST 3 ( first )					  
    for i in range ( 0 , n ) :				      14 STORE_FAST 3 ( second )				    								  
	if ( arr [ i ] < second ) :			      								    5 12 SETUP_LOOP 64 ( to 78 )				  
	    print ( arr [ i ] , end = " " )		      4 16 SETUP_LOOP 64 ( to 82 )				    14 LOAD_GLOBAL 0 ( range )					  
							      18 LOAD_GLOBAL 2 ( range )				    16 LOAD_CONST 4 ( 0 )					  
							      20 LOAD_CONST 1 ( 0 )					    18 LOAD_FAST 2 ( first )					  
							      22 LOAD_FAST 1 ( n )					    20 CALL_FUNCTION 2						  
							      24 CALL_FUNCTION 2					    22 GET_ITER							  
							      26 GET_ITER						    >> 24 FOR_ITER 64 ( to 76 )					  
							      >> 28 FOR_ITER 50 ( to 80 )				    26 STORE_FAST 4 ( i )					  
							      30 STORE_FAST 4 ( i )					    								  
							      								    6 28 LOAD_FAST 0 ( arr )					  
							      5 32 LOAD_FAST 0 ( arr )					    30 LOAD_FAST 4 ( i )					  
							      34 LOAD_FAST 4 ( i )					    32 BINARY_SUBSCR						  
							      36 BINARY_SUBSCR						    34 LOAD_METHOD 1 ( append )					  
							      38 LOAD_FAST 2 ( first )					    36 LOAD_FAST 0 ( arr )					  
							      40 COMPARE_OP 4 ( > )					    38 LOAD_FAST 4 ( i )					  
							      42 POP_JUMP_IF_FALSE 58					    40 BINARY_SUBSCR						  
							      								    42 CALL_METHOD 1						  
							      6 44 LOAD_FAST 2 ( first )				    44 POP_TOP							  
							      46 STORE_FAST 3 ( second )				    								  
							      								    7 46 LOAD_FAST 0 ( arr )					  
							      7 48 LOAD_FAST 0 ( arr )					    48 LOAD_FAST 4 ( i )					  
							      50 LOAD_FAST 4 ( i )					    50 BINARY_SUBSCR						  
							      52 BINARY_SUBSCR						    52 LOAD_METHOD 2 ( append )					  
							      54 STORE_FAST 2 ( first )					    54 LOAD_FAST 0 ( arr )					  
							      56 JUMP_ABSOLUTE 28					    56 LOAD_FAST 4 ( i )					  
							      								    58 BINARY_SUBSCR						  
							      8 >> 58 LOAD_FAST 0 ( arr )				    60 CALL_METHOD 1						  
							      60 LOAD_FAST 4 ( i )					    62 POP_TOP							  
							      62 BINARY_SUBSCR						    64 JUMP_ABSOLUTE 24						  
							      64 LOAD_FAST 3 ( second )					    >> 66 POP_BLOCK						  
							      66 COMPARE_OP 4 ( > )					    								  
							      68 POP_JUMP_IF_FALSE 28					    8 >> 68 LOAD_FAST 1 ( first )				  
							      								    70 RETURN_VALUE NEW_LINE					  
							      9 70 LOAD_FAST 0 ( arr )					    								  
							      72 LOAD_FAST 4 ( i )					    								  
							      74 BINARY_SUBSCR						    								  
							      76 STORE_FAST 3 ( second )				    								  
							      78 JUMP_ABSOLUTE 28					    								  
							      >> 80 POP_BLOCK						    								  
							      								    								  
							      10 >> 82 SETUP_LOOP 46 ( to 130 )				    								  
							      84 LOAD_GLOBAL 2 ( range )				    								  
							      86 LOAD_CONST 1 ( 0 )					    								  
							      88 LOAD_FAST 1 ( n )					    								  
							      90 CALL_FUNCTION 2					    								  
							      92 GET_ITER						    								  
							      >> 94 FOR_ITER 32 ( to 128 )				    								  
							      96 STORE_FAST 4 ( i )					    								  
							      								    								  
							      11 98 LOAD_FAST 0 ( arr )					    								  
							      100 LOAD_FAST 4 ( i )					    								  
							      102 BINARY_SUBSCR						    								  
							      104 LOAD_FAST 3 ( second )				    								  
							      106 COMPARE_OP 0 ( < )					    								  
							      108 POP_JUMP_IF_FALSE 94					    								  
							      								    								  
							      12 110 LOAD_GLOBAL 3 ( print )				    								  
							      112 LOAD_FAST 0 ( arr )					    								  
							      114 LOAD_FAST 4 ( i )					    								  
							      116 BINARY_SUBSCR						    								  
							      118 LOAD_CONST 2 ( ' ' )					    								  
							      120 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      122 CALL_FUNCTION_KW 2					    								  
							      124 POP_TOP						    								  
							      126 JUMP_ABSOLUTE 94					    								  
							      >> 128 POP_BLOCK						    								  
							      >> 130 LOAD_CONST 0 ( None )				    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	      SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	    SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS		  SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS
--							      --							    --								  --
def findSmallestDifference ( A , B , m , n ) :		      Disassembly of <code object findSmallestDifference at 0x7f33e Disassembly of <code object findSmallestDifference at 0x7f2b0 error : Traceback (most recent call last):   File
    A.sort ( )						      2 0 LOAD_FAST 0 ( A )					    2 0 LOAD_FAST 0 ( A )					  "XLM/dis_script.py", line 59, in <module>	for
    B.sort ( )						      2 LOAD_METHOD 0 ( sort )					    2 LOAD_METHOD 0 ( sort )					  item in run_dis_script():   File "XLM/dis_script.p
    a = 0						      4 CALL_METHOD 0						    4 CALL_METHOD 0						  y", line 54, in run_dis_script     hyp_co = mco.to
    b = 0						      6 POP_TOP							    6 POP_TOP							  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    result = sys.maxsize				      								    								  assembler.py", line 81, in to_co     co_consts.app
    while ( a < m and b < n ) :				      3 8 LOAD_FAST 1 ( B )					    3 8 LOAD_FAST 0 ( A )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	if ( abs ( A [ a ] - B [ b ] ) < result ) :	      10 LOAD_METHOD 0 ( sort )					    10 LOAD_METHOD 1 ( sort )					  sCoder/XLM/src/dis_assembler.py", line 100, in to_
	    result = abs ( A [ a ] - B [ b ] )		      12 CALL_METHOD 0						    12 CALL_METHOD 0						  co	 self.co_cellvars, ValueError: code: varname
	if ( A [ a ] < B [ b ] ) :			      14 POP_TOP						    14 POP_TOP							  s is too small
	    a += 1					      								    								  
	else :						      4 16 LOAD_CONST 1 ( 0 )					    4 16 LOAD_GLOBAL 2 ( sys )					  
	    b += 1					      18 STORE_FAST 4 ( a )					    18 LOAD_METHOD 3 ( exit )					  
    return result					      								    20 CALL_METHOD 0						  
							      5 20 LOAD_CONST 1 ( 0 )					    22 POP_TOP							  
							      22 STORE_FAST 5 ( b )					    								  
							      								    5 24 LOAD_GLOBAL 2 ( sys )					  
							      6 24 LOAD_GLOBAL 1 ( sys )				    26 LOAD_METHOD 3 ( exit )					  
							      26 LOAD_ATTR 2 ( maxsize )				    28 LOAD_CONST 1 ( 0 )					  
							      28 STORE_FAST 6 ( result )				    30 CALL_METHOD 1						  
							      								    32 POP_TOP							  
							      7 30 SETUP_LOOP 98 ( to 130 )				    								  
							      >> 32 LOAD_FAST 4 ( a )					    6 34 LOAD_GLOBAL 2 ( sys )					  
							      34 LOAD_FAST 2 ( m )					    36 LOAD_METHOD 3 ( exit )					  
							      36 COMPARE_OP 0 ( < )					    38 LOAD_CONST 2 ( 1 )					  
							      38 POP_JUMP_IF_FALSE 128					    40 CALL_METHOD 1						  
							      40 LOAD_FAST 5 ( b )					    42 POP_TOP							  
							      42 LOAD_FAST 3 ( n )					    								  
							      44 COMPARE_OP 0 ( < )					    7 44 LOAD_GLOBAL 2 ( sys )					  
							      46 POP_JUMP_IF_FALSE 128					    46 LOAD_METHOD 3 ( exit )					  
							      								    48 LOAD_CONST 3 ( 1 )					  
							      8 48 LOAD_GLOBAL 3 ( abs )				    50 CALL_METHOD 1						  
							      50 LOAD_FAST 0 ( A )					    52 POP_TOP							  
							      52 LOAD_FAST 4 ( a )					    								  
							      54 BINARY_SUBSCR						    8 54 LOAD_GLOBAL 2 ( sys )					  
							      56 LOAD_FAST 1 ( B )					    56 LOAD_METHOD 3 ( exit )					  
							      58 LOAD_FAST 5 ( b )					    58 LOAD_CONST 4 ( 2 )					  
							      60 BINARY_SUBSCR						    60 CALL_METHOD 1						  
							      62 BINARY_SUBTRACT					    62 POP_TOP							  
							      64 CALL_FUNCTION 1					    								  
							      66 LOAD_FAST 6 ( result )					    9 64 LOAD_GLOBAL 2 ( sys )					  
							      68 COMPARE_OP 0 ( < )					    66 LOAD_METHOD 3 ( exit )					  
							      70 POP_JUMP_IF_FALSE 92					    68 LOAD_CONST 5 ( 1 )					  
							      								    70 CALL_METHOD 1						  
							      9 72 LOAD_GLOBAL 3 ( abs )				    72 POP_TOP							  
							      74 LOAD_FAST 0 ( A )					    								  
							      76 LOAD_FAST 4 ( a )					    10 74 LOAD_GLOBAL 2 ( sys )					  
							      78 BINARY_SUBSCR						    76 LOAD_METHOD 3 ( exit )					  
							      80 LOAD_FAST 1 ( B )					    78 LOAD_CONST 6 ( 2 )					  
							      82 LOAD_FAST 5 ( b )					    80 CALL_METHOD 1						  
							      84 BINARY_SUBSCR						    82 POP_TOP							  
							      86 BINARY_SUBTRACT					    								  
							      88 CALL_FUNCTION 1					    11 84 LOAD_GLOBAL 2 ( sys )					  
							      90 STORE_FAST 6 ( result )				    86 LOAD_METHOD 3 ( exit )					  
							      								    88 LOAD_CONST 7 ( 2 )					  
							      10 >> 92 LOAD_FAST 0 ( A )				    90 CALL_METHOD 1						  
							      94 LOAD_FAST 4 ( a )					    92 POP_TOP							  
							      96 BINARY_SUBSCR						    								  
							      98 LOAD_FAST 1 ( B )					    12 94 LOAD_GLOBAL 2 ( sys )					  
							      100 LOAD_FAST 5 ( b )					    96 LOAD_METHOD 3 ( exit )					  
							      102 BINARY_SUBSCR						    98 LOAD_CONST 8 ( 3 )					  
							      104 COMPARE_OP 0 ( < )					    100 CALL_METHOD 1						  
							      106 POP_JUMP_IF_FALSE 118					    102 POP_TOP							  
							      								    104 LOAD_CONST 0 ( None )					  
							      11 108 LOAD_FAST 4 ( a )					    106 RETURN_VALUE NEW_LINE					  
							      110 LOAD_CONST 2 ( 1 )					    								  
							      112 INPLACE_ADD						    								  
							      114 STORE_FAST 4 ( a )					    								  
							      116 JUMP_ABSOLUTE 32					    								  
							      								    								  
							      13 >> 118 LOAD_FAST 5 ( b )				    								  
							      120 LOAD_CONST 2 ( 1 )					    								  
							      122 INPLACE_ADD						    								  
							      124 STORE_FAST 5 ( b )					    								  
							      126 JUMP_ABSOLUTE 32					    								  
							      >> 128 POP_BLOCK						    								  
							      								    								  
							      14 >> 130 LOAD_FAST 6 ( result )				    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		      CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		    CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT		  CHECK_WHETHER_POINT_EXISTS_CIR<unk> SECTOR_NOT
--							      --							    --								  --
def checkPoint ( radius , x , y , percent , startAngle ) :    Disassembly of <code object checkPoint at 0x7f33e2644f60, fil Disassembly of <code object checkPoint at 0x7f2b0163dc90, fil script_not_found : None
    endAngle = 360 / percent + startAngle		      2 0 LOAD_CONST 1 ( 360 )					    2 0 LOAD_FAST 2 ( endAngle )				  
    polarradius = math.sqrt ( x * x + y * y )		      2 LOAD_FAST 3 ( percent )					    2 LOAD_CONST 1 ( 360 )					  
    Angle = math.atan ( y / x )				      4 BINARY_TRUE_DIVIDE					    4 BINARY_ADD						  
    if ( Angle >= startAngle and Angle <= endAngle and polarr 6 LOAD_FAST 4 ( startAngle )				    6 LOAD_FAST 1 ( x )						  
	print ( "Point (" , x , "," , y , ") " "exist in the  8 BINARY_ADD						    8 BINARY_ADD						  
    else :						      10 STORE_FAST 5 ( endAngle )				    10 STORE_FAST 3 ( endAngle )				  
	print ( "Point (" , x , "," , y , ") " "does not exis 								    								  
							      3 12 LOAD_GLOBAL 0 ( math )				    3 12 LOAD_FAST 2 ( endAngle )				  
							      14 LOAD_METHOD 1 ( sqrt )					    14 LOAD_FAST 3 ( endAngle )					  
							      16 LOAD_FAST 1 ( x )					    16 BINARY_ADD						  
							      18 LOAD_FAST 1 ( x )					    18 STORE_FAST 4 ( endAngle )				  
							      20 BINARY_MULTIPLY					    								  
							      22 LOAD_FAST 2 ( y )					    4 20 LOAD_GLOBAL 0 ( math )					  
							      24 LOAD_FAST 2 ( y )					    22 LOAD_METHOD 1 ( sqrt )					  
							      26 BINARY_MULTIPLY					    24 LOAD_FAST 4 ( endAngle )					  
							      28 BINARY_ADD						    26 LOAD_FAST 3 ( endAngle )					  
							      30 CALL_METHOD 1						    28 BINARY_MULTIPLY						  
							      32 STORE_FAST 6 ( polarradius )				    30 CALL_METHOD 1						  
							      								    32 STORE_FAST 5 ( point )					  
							      4 34 LOAD_GLOBAL 0 ( math )				    								  
							      36 LOAD_METHOD 2 ( atan )					    5 34 LOAD_FAST 4 ( endAngle )				  
							      38 LOAD_FAST 2 ( y )					    36 LOAD_FAST 5 ( point )					  
							      40 LOAD_FAST 1 ( x )					    38 BINARY_SUBTRACT						  
							      42 BINARY_TRUE_DIVIDE					    40 STORE_FAST 6 ( point )					  
							      44 CALL_METHOD 1						    								  
							      46 STORE_FAST 7 ( Angle )					    6 42 LOAD_FAST 5 ( point )					  
							      								    44 LOAD_FAST 6 ( point )					  
							      5 48 LOAD_FAST 7 ( Angle )				    46 BINARY_SUBTRACT						  
							      50 LOAD_FAST 4 ( startAngle )				    48 STORE_FAST 7 ( point )					  
							      52 COMPARE_OP 5 ( >= )					    								  
							      54 POP_JUMP_IF_FALSE 90					    7 50 LOAD_FAST 6 ( point )					  
							      56 LOAD_FAST 7 ( Angle )					    52 LOAD_FAST 7 ( point )					  
							      58 LOAD_FAST 5 ( endAngle )				    54 BINARY_SUBTRACT						  
							      60 COMPARE_OP 1 ( <= )					    56 STORE_FAST 8 ( point )					  
							      62 POP_JUMP_IF_FALSE 90					    								  
							      64 LOAD_FAST 6 ( polarradius )				    8 58 LOAD_FAST 6 ( point )					  
							      66 LOAD_FAST 0 ( radius )					    60 LOAD_FAST 7 ( point )					  
							      68 COMPARE_OP 0 ( < )					    62 BINARY_SUBTRACT						  
							      70 POP_JUMP_IF_FALSE 90					    64 STORE_FAST 9 ( point )					  
							      								    								  
							      6 72 LOAD_GLOBAL 3 ( print )				    9 66 LOAD_FAST 6 ( point )					  
							      74 LOAD_CONST 2 ( 'Point (' )				    68 LOAD_FAST 7 ( point )					  
							      76 LOAD_FAST 1 ( x )					    70 BINARY_SUBTRACT						  
							      78 LOAD_CONST 3 ( ',' )					    72 STORE_FAST 10 ( point )					  
							      80 LOAD_FAST 2 ( y )					    								  
							      82 LOAD_CONST 4 ( ') exist in the circle sector' )	    10 74 LOAD_FAST 6 ( point )					  
							      84 CALL_FUNCTION 5					    76 LOAD_FAST 9 ( point )					  
							      86 POP_TOP						    78 BINARY_SUBTRACT						  
							      88 JUMP_FORWARD 16 ( to 106 )				    80 LOAD_FAST 10 ( point )					  
							      								    82 BINARY_SUBTRACT						  
							      8 >> 90 LOAD_GLOBAL 3 ( print )				    84 LOAD_FAST 10 ( point )					  
							      92 LOAD_CONST 2 ( 'Point (' )				    86 BINARY_SUBTRACT						  
							      94 LOAD_FAST 1 ( x )					    88 LOAD_FAST 11 ( point )					  
							      96 LOAD_CONST 3 ( ',' )					    90 BINARY_SUBTRACT						  
							      98 LOAD_FAST 2 ( y )					    92 LOAD_FAST 11 ( point )					  
							      100 LOAD_CONST 5 ( ') does not exist in the circle sector' )  94 BINARY_SUBTRACT						  
							      102 CALL_FUNCTION 5					    96 BINARY_MULTIPLY						  
							      104 POP_TOP						    98 STORE_FAST 11 ( point )					  
							      >> 106 LOAD_CONST 0 ( None )				    								  
							      108 RETURN_VALUE NEW_LINE					    11 100 LOAD_FAST 6 ( point )				  
							      								    102 LOAD_FAST 11 ( point )					  
							      								    104 BINARY_SUBTRACT						  
							      								    106 STORE_FAST 12 ( point )					  
							      								    								  
							      								    12 108 LOAD_FAST 6 ( point )				  
							      								    110 LOAD_FAST 11 ( point )					  
							      								    112 BINARY_SUBTRACT						  
							      								    114 STORE_FAST 13 ( point )					  
							      								    								  
							      								    13 116 LOAD_FAST 5 ( point )				  
							      								    118 LOAD_FAST 11 ( point )					  
							      								    120 BINARY_SUBTRACT						  
							      								    122 STORE_FAST 14 ( point )					  
							      								    								  
							      								    14 124 LOAD_FAST 6 ( point )				  
							      								    126 LOAD_FAST 11 ( point )					  
							      								    128 BINARY_SUBTRACT						  
							      								    130 STORE_FAST 15 ( point )					  
							      								    								  
							      								    15 132 LOAD_FAST 11 ( point )				  
							      								    134 LOAD_FAST 13 ( point )					  
							      								    136 LOAD_FAST 14 ( point )					  
							      								    138 BINARY_SUBTRACT						  
							      								    140 LOAD_FAST 15 ( point )					  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 16 ( point )					  
							      								    146 BINARY_SUBTRACT						  
							      								    148 STORE_FAST 16 ( point )					  
							      								    								  
							      								    16 150 LOAD_FAST 16 ( point )				  
							      								    152 LOAD_FAST 17 ( point )					  
							      								    154 BINARY_SUBTRACT						  
							      								    156 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT_1					      MAJORITY_ELEMENT_1					    MAJORITY_ELEMENT_1						  MAJORITY_ELEMENT_1
--							      --							    --								  --
def findMajority ( arr , size ) :			      Disassembly of <code object findMajority at 0x7f33e2653ed0, f Disassembly of <code object findMajens at 0x7f2b0163dc90, fil script_not_found : None
    m = { }						      2 0 BUILD_MAP 0						    2 0 BUILD_MAP 0						  
    for i in range ( size ) :				      2 STORE_FAST 2 ( m )					    2 STORE_FAST 2 ( m )					  
	if arr [ i ] in m :				      								    								  
	    m [ arr [ i ] ] += 1			      3 4 SETUP_LOOP 62 ( to 68 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
	else :						      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	    m [ arr [ i ] ] = 1				      8 LOAD_FAST 1 ( size )					    8 LOAD_FAST 1 ( size )					  
    count = 0						      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
    for key in m :					      12 GET_ITER						    12 GET_ITER							  
	if m [ key ] > size / 2 :			      >> 14 FOR_ITER 50 ( to 66 )				    >> 14 FOR_ITER 56 ( to 64 )					  
	    count = 1					      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
	    print ( "Majority found :-" , key )		      								    								  
	    break					      4 18 LOAD_FAST 0 ( arr )					    4 18 LOAD_FAST 0 ( arr )					  
    if ( count == 0 ) :					      20 LOAD_FAST 3 ( i )					    20 LOAD_FAST 3 ( i )					  
	print ( "No Majority element" )			      22 BINARY_SUBSCR						    22 BINARY_SUBSCR						  
							      24 LOAD_FAST 2 ( m )					    24 LOAD_FAST 1 ( size )					  
							      26 COMPARE_OP 6 ( in )					    26 COMPARE_OP 4 ( > )					  
							      28 POP_JUMP_IF_FALSE 52					    28 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      5 30 LOAD_FAST 2 ( m )					    5 30 LOAD_FAST 0 ( arr )					  
							      32 LOAD_FAST 0 ( arr )					    32 LOAD_FAST 3 ( i )					  
							      34 LOAD_FAST 3 ( i )					    34 BINARY_SUBSCR						  
							      36 BINARY_SUBSCR						    36 STORE_FAST 4 ( num )					  
							      38 DUP_TOP_TWO						    								  
							      40 BINARY_SUBSCR						    6 38 LOAD_FAST 0 ( arr )					  
							      42 LOAD_CONST 1 ( 1 )					    40 LOAD_FAST 3 ( i )					  
							      44 INPLACE_ADD						    42 BINARY_SUBSCR						  
							      46 ROT_THREE						    44 LOAD_FAST 1 ( size )					  
							      48 STORE_SUBSCR						    46 COMPARE_OP 4 ( > )					  
							      50 JUMP_ABSOLUTE 14					    48 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      7 >> 52 LOAD_CONST 1 ( 1 )				    7 50 LOAD_FAST 0 ( arr )					  
							      54 LOAD_FAST 2 ( m )					    52 LOAD_FAST 3 ( i )					  
							      56 LOAD_FAST 0 ( arr )					    54 BINARY_SUBSCR						  
							      58 LOAD_FAST 3 ( i )					    56 STORE_FAST 0 ( arr )					  
							      60 BINARY_SUBSCR						    								  
							      62 STORE_SUBSCR						    8 58 LOAD_FAST 0 ( arr )					  
							      64 JUMP_ABSOLUTE 14					    60 LOAD_FAST 3 ( i )					  
							      >> 66 POP_BLOCK						    62 BINARY_SUBSCR						  
							      								    64 LOAD_FAST 1 ( size )					  
							      8 >> 68 LOAD_CONST 2 ( 0 )				    66 COMPARE_OP 4 ( > )					  
							      70 STORE_FAST 4 ( count )					    68 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      9 72 SETUP_LOOP 44 ( to 118 )				    9 70 LOAD_FAST 0 ( arr )					  
							      74 LOAD_FAST 2 ( m )					    72 LOAD_FAST 3 ( i )					  
							      76 GET_ITER						    74 BINARY_SUBSCR						  
							      >> 78 FOR_ITER 36 ( to 116 )				    76 LOAD_FAST 1 ( size )					  
							      80 STORE_FAST 5 ( key )					    78 COMPARE_OP 4 ( > )					  
							      								    80 POP_JUMP_IF_FALSE 14					  
							      10 82 LOAD_FAST 2 ( m )					    								  
							      84 LOAD_FAST 5 ( key )					    10 82 LOAD_FAST 0 ( arr )					  
							      86 BINARY_SUBSCR						    84 LOAD_FAST 3 ( i )					  
							      88 LOAD_FAST 1 ( size )					    86 BINARY_SUBSCR						  
							      90 LOAD_CONST 3 ( 2 )					    88 LOAD_FAST 1 ( size )					  
							      92 BINARY_TRUE_DIVIDE					    90 COMPARE_OP 4 ( > )					  
							      94 COMPARE_OP 4 ( > )					    92 POP_JUMP_IF_FALSE 14					  
							      96 POP_JUMP_IF_FALSE 78					    								  
							      								    11 94 LOAD_FAST 0 ( arr )					  
							      11 98 LOAD_CONST 1 ( 1 )					    96 LOAD_FAST 3 ( i )					  
							      100 STORE_FAST 4 ( count )				    98 BINARY_SUBSCR						  
							      								    100 LOAD_FAST 1 ( size )					  
							      12 102 LOAD_GLOBAL 1 ( print )				    102 COMPARE_OP 4 ( > )					  
							      104 LOAD_CONST 4 ( 'Majority found :-' )			    104 POP_JUMP_IF_FALSE 14					  
							      106 LOAD_FAST 5 ( key )					    								  
							      108 CALL_FUNCTION 2					    12 106 LOAD_FAST 0 ( arr )					  
							      110 POP_TOP						    108 LOAD_FAST 3 ( i )					  
							      								    110 BINARY_SUBSCR						  
							      13 112 BREAK_LOOP						    112 LOAD_FAST 1 ( size )					  
							      114 JUMP_ABSOLUTE 78					    114 COMPARE_OP 4 ( > )					  
							      >> 116 POP_BLOCK						    116 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      14 >> 118 LOAD_FAST 4 ( count )				    13 118 LOAD_FAST 0 ( arr )					  
							      120 LOAD_CONST 2 ( 0 )					    120 LOAD_FAST 3 ( i )					  
							      122 COMPARE_OP 2 ( == )					    122 BINARY_SUBSCR						  
							      124 POP_JUMP_IF_FALSE 134					    124 LOAD_FAST 1 ( size )					  
							      								    126 COMPARE_OP 4 ( > )					  
							      15 126 LOAD_GLOBAL 1 ( print )				    128 POP_JUMP_IF_FALSE 14					  
							      128 LOAD_CONST 5 ( 'No Majority element' )		    								  
							      130 CALL_FUNCTION 1					    14 130 LOAD_FAST 0 ( arr )					  
							      132 POP_TOP						    132 LOAD_FAST 3 ( i )					  
							      >> 134 LOAD_CONST 0 ( None )				    134 BINARY_SUBSCR						  
							      136 RETURN_VALUE NEW_LINE					    136 LOAD_FAST 1 ( size )					  
							      								    138 COMPARE_OP 4 ( > )					  
							      								    140 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    15 142 LOAD_FAST 0 ( arr )					  
							      								    144 LOAD_FAST 3 ( i )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 LOAD_FAST 1 ( size )					  
							      								    150 COMPARE_OP 4 ( > )					  
							      								    152 POP_JUMP_IF_FALSE 14					  
							      								    								  
							      								    16 154 LOAD_FAST 0 ( arr )					  
							      								    156 RETURN_VALUE						  
							      								    >> 158 JUMP_ABSOLUTE 14					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS		      PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			    PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			  PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS
--							      --							    --								  --
def amendSentence ( string ) :				      Disassembly of <code object amendSentence at 0x7f33e26494b0,  Disassembly of <code object amendSentence at 0x7f2b0163dc90,  script_not_found : None
    string = list ( string )				      2 0 LOAD_GLOBAL 0 ( list )				    2 0 LOAD_GLOBAL 0 ( list )					  
    for i in range ( len ( string ) ) :			      2 LOAD_FAST 0 ( string )					    2 LOAD_FAST 0 ( string )					  
	if string [ i ] >= 'A' and string [ i ] <= 'Z' :      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    string [ i ] = chr ( ord ( string [ i ] ) + 32 )  6 STORE_FAST 0 ( string )					    6 STORE_FAST 1 ( string )					  
	    if i != 0 :					      								    								  
		print ( "" , end = "" )			      3 8 SETUP_LOOP 122 ( to 132 )				    3 8 SETUP_LOOP 64 ( to 76 )					  
	    print ( string [ i ] , end = "" )		      10 LOAD_GLOBAL 1 ( range )				    10 LOAD_GLOBAL 1 ( range )					  
	else :						      12 LOAD_GLOBAL 2 ( len )					    12 LOAD_GLOBAL 2 ( len )					  
	    print ( string [ i ] , end = "" )		      14 LOAD_FAST 0 ( string )					    14 LOAD_FAST 1 ( string )					  
							      16 CALL_FUNCTION 1					    16 CALL_FUNCTION 1						  
							      18 CALL_FUNCTION 1					    18 CALL_FUNCTION 1						  
							      20 GET_ITER						    20 GET_ITER							  
							      >> 22 FOR_ITER 106 ( to 130 )				    >> 22 FOR_ITER 48 ( to 74 )					  
							      24 STORE_FAST 1 ( i )					    24 STORE_FAST 2 ( i )					  
							      								    								  
							      4 26 LOAD_FAST 0 ( string )				    4 26 LOAD_FAST 1 ( string )					  
							      28 LOAD_FAST 1 ( i )					    28 LOAD_FAST 2 ( i )					  
							      30 BINARY_SUBSCR						    30 COMPARE_OP 5 ( >= )					  
							      32 LOAD_CONST 1 ( 'A' )					    32 POP_JUMP_IF_FALSE 42					  
							      34 COMPARE_OP 5 ( >= )					    								  
							      36 POP_JUMP_IF_FALSE 112					    5 34 LOAD_FAST 1 ( string )					  
							      38 LOAD_FAST 0 ( string )					    36 LOAD_FAST 2 ( i )					  
							      40 LOAD_FAST 1 ( i )					    38 BINARY_SUBSCR						  
							      42 BINARY_SUBSCR						    40 STORE_FAST 1 ( string )					  
							      44 LOAD_CONST 2 ( 'Z' )					    								  
							      46 COMPARE_OP 1 ( <= )					    6 >> 42 LOAD_FAST 1 ( string )				  
							      48 POP_JUMP_IF_FALSE 112					    44 LOAD_FAST 2 ( i )					  
							      								    46 BINARY_SUBSCR						  
							      5 50 LOAD_GLOBAL 3 ( chr )				    48 LOAD_FAST 1 ( string )					  
							      52 LOAD_GLOBAL 4 ( ord )					    50 COMPARE_OP 5 ( >= )					  
							      54 LOAD_FAST 0 ( string )					    52 POP_JUMP_IF_FALSE 22					  
							      56 LOAD_FAST 1 ( i )					    								  
							      58 BINARY_SUBSCR						    7 54 LOAD_FAST 1 ( string )					  
							      60 CALL_FUNCTION 1					    56 LOAD_FAST 2 ( i )					  
							      62 LOAD_CONST 3 ( 32 )					    58 BINARY_SUBSCR						  
							      64 BINARY_ADD						    60 STORE_FAST 1 ( string )					  
							      66 CALL_FUNCTION 1					    								  
							      68 LOAD_FAST 0 ( string )					    8 62 LOAD_FAST 1 ( string )					  
							      70 LOAD_FAST 1 ( i )					    64 LOAD_FAST 2 ( i )					  
							      72 STORE_SUBSCR						    66 BINARY_SUBSCR						  
							      								    68 LOAD_FAST 1 ( string )					  
							      6 74 LOAD_FAST 1 ( i )					    70 COMPARE_OP 5 ( >= )					  
							      76 LOAD_CONST 4 ( 0 )					    72 POP_JUMP_IF_FALSE 22					  
							      78 COMPARE_OP 3 ( != )					    								  
							      80 POP_JUMP_IF_FALSE 94					    9 74 LOAD_FAST 1 ( string )					  
							      								    76 LOAD_FAST 2 ( i )					  
							      7 82 LOAD_GLOBAL 5 ( print )				    78 BINARY_SUBSCR						  
							      84 LOAD_CONST 5 ( '' )					    80 LOAD_FAST 1 ( string )					  
							      86 LOAD_CONST 5 ( '' )					    82 COMPARE_OP 5 ( >= )					  
							      88 LOAD_CONST 6 ( ( 'end' , ) )				    84 POP_JUMP_IF_FALSE 22					  
							      90 CALL_FUNCTION_KW 2					    								  
							      92 POP_TOP						    10 86 LOAD_FAST 1 ( string )				  
							      								    88 LOAD_FAST 2 ( i )					  
							      8 >> 94 LOAD_GLOBAL 5 ( print )				    90 BINARY_SUBSCR						  
							      96 LOAD_FAST 0 ( string )					    92 LOAD_FAST 1 ( string )					  
							      98 LOAD_FAST 1 ( i )					    94 COMPARE_OP 5 ( >= )					  
							      100 BINARY_SUBSCR						    96 POP_JUMP_IF_FALSE 22					  
							      102 LOAD_CONST 5 ( '' )					    								  
							      104 LOAD_CONST 6 ( ( 'end' , ) )				    11 98 LOAD_FAST 1 ( string )				  
							      106 CALL_FUNCTION_KW 2					    100 LOAD_FAST 2 ( i )					  
							      108 POP_TOP						    102 BINARY_SUBSCR						  
							      110 JUMP_ABSOLUTE 22					    104 LOAD_FAST 1 ( string )					  
							      								    106 COMPARE_OP 5 ( >= )					  
							      10 >> 112 LOAD_GLOBAL 5 ( print )				    108 POP_JUMP_IF_FALSE 114					  
							      114 LOAD_FAST 0 ( string )				    								  
							      116 LOAD_FAST 1 ( i )					    12 110 LOAD_FAST 1 ( string )				  
							      118 BINARY_SUBSCR						    112 LOAD_FAST 2 ( i )					  
							      120 LOAD_CONST 5 ( '' )					    114 BINARY_SUBSCR						  
							      122 LOAD_CONST 6 ( ( 'end' , ) )				    116 LOAD_FAST 1 ( string )					  
							      124 CALL_FUNCTION_KW 2					    118 COMPARE_OP 5 ( >= )					  
							      126 POP_TOP						    120 POP_JUMP_IF_FALSE 126					  
							      128 JUMP_ABSOLUTE 22					    								  
							      >> 130 POP_BLOCK						    13 122 LOAD_FAST 1 ( string )				  
							      >> 132 LOAD_CONST 0 ( None )				    124 LOAD_FAST 2 ( i )					  
							      134 RETURN_VALUE NEW_LINE					    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 1 ( string )					  
							      								    130 COMPARE_OP 5 ( >= )					  
							      								    132 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    14 134 LOAD_FAST 1 ( string )				  
							      								    136 LOAD_FAST 2 ( i )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_FAST 1 ( string )					  
							      								    142 COMPARE_OP 5 ( >= )					  
							      								    144 POP_JUMP_IF_FALSE 22					  
							      								    								  
							      								    15 146 LOAD_FAST 1 ( string )				  
							      								    148 LOAD_FAST 2 ( i )					  
							      								    150 BINARY_SUBSCR						  
							      								    152 LOAD_FAST 1 ( string )					  
							      								    154 COMPARE_OP 5 ( >= )					  
							      								    156 POP_JUMP_IF_FALSE 22					  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		      MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE		    MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE			  MAXIMUM_PR<unk> CT_<unk> ASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr , n ) :					      Disassembly of <code object lis at 0x7f33e2644f60, file "<dis Disassembly of <code object lis at 0x7f2b01639660, file "<dis script_not_found : None
    mpis = [ 0 ] * ( n )				      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_FAST 0 ( arr )					  
    for i in range ( n ) :				      2 BUILD_LIST 1						    2 LOAD_CONST 1 ( 0 )					  
	mpis [ i ] = arr [ i ]				      4 LOAD_FAST 1 ( n )					    4 BINARY_SUBSCR						  
    for i in range ( 1 , n ) :				      6 BINARY_MULTIPLY						    6 LOAD_FAST 0 ( arr )					  
	for j in range ( i ) :				      8 STORE_FAST 2 ( mpis )					    8 LOAD_CONST 2 ( 1 )					  
	    if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpi 								    10 BINARY_SUBSCR						  
		mpis [ i ] = mpis [ j ] * arr [ i ]	      3 10 SETUP_LOOP 28 ( to 40 )				    12 BINARY_MULTIPLY						  
    return max ( mpis )					      12 LOAD_GLOBAL 0 ( range )				    14 LOAD_FAST 0 ( arr )					  
							      14 LOAD_FAST 1 ( n )					    16 LOAD_CONST 1 ( 0 )					  
							      16 CALL_FUNCTION 1					    18 BINARY_SUBSCR						  
							      18 GET_ITER						    20 BINARY_MULTIPLY						  
							      >> 20 FOR_ITER 16 ( to 38 )				    22 LOAD_FAST 0 ( arr )					  
							      22 STORE_FAST 3 ( i )					    24 LOAD_CONST 1 ( 0 )					  
							      								    26 BINARY_SUBSCR						  
							      4 24 LOAD_FAST 0 ( arr )					    28 BINARY_MULTIPLY						  
							      26 LOAD_FAST 3 ( i )					    30 INPLACE_ADD						  
							      28 BINARY_SUBSCR						    32 STORE_FAST 0 ( arr )					  
							      30 LOAD_FAST 2 ( mpis )					    								  
							      32 LOAD_FAST 3 ( i )					    3 34 SETUP_LOOP 64 ( to 92 )				  
							      34 STORE_SUBSCR						    36 LOAD_GLOBAL 0 ( range )					  
							      36 JUMP_ABSOLUTE 20					    38 LOAD_CONST 1 ( 0 )					  
							      >> 38 POP_BLOCK						    40 BINARY_SUBSCR						  
							      								    42 CALL_FUNCTION 1						  
							      5 >> 40 SETUP_LOOP 96 ( to 138 )				    44 GET_ITER							  
							      42 LOAD_GLOBAL 0 ( range )				    >> 46 FOR_ITER 48 ( to 90 )					  
							      44 LOAD_CONST 2 ( 1 )					    48 STORE_FAST 1 ( i )					  
							      46 LOAD_FAST 1 ( n )					    								  
							      48 CALL_FUNCTION 2					    4 50 LOAD_FAST 0 ( arr )					  
							      50 GET_ITER						    52 LOAD_FAST 1 ( i )					  
							      >> 52 FOR_ITER 82 ( to 136 )				    54 BINARY_SUBSCR						  
							      54 STORE_FAST 3 ( i )					    56 LOAD_FAST 0 ( arr )					  
							      								    58 LOAD_CONST 1 ( 0 )					  
							      6 56 SETUP_LOOP 76 ( to 134 )				    60 BINARY_SUBSCR						  
							      58 LOAD_GLOBAL 0 ( range )				    62 BINARY_SUBTRACT						  
							      60 LOAD_FAST 3 ( i )					    64 LOAD_FAST 0 ( arr )					  
							      62 CALL_FUNCTION 1					    66 LOAD_CONST 1 ( 0 )					  
							      64 GET_ITER						    68 BINARY_SUBSCR						  
							      >> 66 FOR_ITER 64 ( to 132 )				    70 BINARY_SUBTRACT						  
							      68 STORE_FAST 4 ( j )					    72 LOAD_FAST 0 ( arr )					  
							      								    74 LOAD_CONST 1 ( 0 )					  
							      7 70 LOAD_FAST 0 ( arr )					    76 BINARY_SUBSCR						  
							      72 LOAD_FAST 3 ( i )					    78 BINARY_SUBTRACT						  
							      74 BINARY_SUBSCR						    80 BINARY_MULTIPLY						  
							      76 LOAD_FAST 0 ( arr )					    82 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 4 ( j )					    84 LOAD_FAST 1 ( i )					  
							      80 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      82 COMPARE_OP 4 ( > )					    88 BINARY_MULTIPLY						  
							      84 POP_JUMP_IF_FALSE 66					    90 BINARY_SUBTRACT						  
							      86 LOAD_FAST 2 ( mpis )					    92 LOAD_FAST 0 ( arr )					  
							      88 LOAD_FAST 3 ( i )					    94 LOAD_CONST 1 ( 0 )					  
							      90 BINARY_SUBSCR						    96 BINARY_SUBSCR						  
							      92 LOAD_FAST 2 ( mpis )					    98 BINARY_SUBTRACT						  
							      94 LOAD_FAST 4 ( j )					    100 LOAD_FAST 0 ( arr )					  
							      96 BINARY_SUBSCR						    102 LOAD_CONST 1 ( 0 )					  
							      98 LOAD_FAST 0 ( arr )					    104 BINARY_SUBSCR						  
							      100 LOAD_FAST 3 ( i )					    106 BINARY_SUBTRACT						  
							      102 BINARY_SUBSCR						    108 BINARY_MULTIPLY						  
							      104 BINARY_MULTIPLY					    110 LOAD_FAST 0 ( arr )					  
							      106 COMPARE_OP 0 ( < )					    112 LOAD_CONST 1 ( 0 )					  
							      108 POP_JUMP_IF_FALSE 66					    114 BINARY_SUBSCR						  
							      								    116 BINARY_SUBTRACT						  
							      8 110 LOAD_FAST 2 ( mpis )				    118 LOAD_FAST 0 ( arr )					  
							      112 LOAD_FAST 4 ( j )					    120 LOAD_CONST 1 ( 0 )					  
							      114 BINARY_SUBSCR						    122 BINARY_SUBSCR						  
							      116 LOAD_FAST 0 ( arr )					    124 BINARY_SUBTRACT						  
							      118 LOAD_FAST 3 ( i )					    126 LOAD_FAST 0 ( arr )					  
							      120 BINARY_SUBSCR						    128 LOAD_CONST 1 ( 0 )					  
							      122 BINARY_MULTIPLY					    130 BINARY_SUBSCR						  
							      124 LOAD_FAST 2 ( mpis )					    132 BINARY_SUBTRACT						  
							      126 LOAD_FAST 3 ( i )					    134 BINARY_MULTIPLY						  
							      128 STORE_SUBSCR						    136 LOAD_FAST 0 ( arr )					  
							      130 JUMP_ABSOLUTE 66					    138 LOAD_CONST 1 ( 0 )					  
							      >> 132 POP_BLOCK						    140 BINARY_SUBSCR						  
							      >> 134 JUMP_ABSOLUTE 52					    142 BINARY_SUBTRACT						  
							      >> 136 POP_BLOCK						    144 LOAD_FAST 0 ( arr )					  
							      								    146 LOAD_CONST 1 ( 0 )					  
							      9 >> 138 LOAD_GLOBAL 1 ( max )				    148 BINARY_SUBSCR						  
							      140 LOAD_FAST 2 ( mpis )					    150 BINARY_SUBTRACT						  
							      142 CALL_FUNCTION 1					    152 BINARY_MULTIPLY						  
							      144 RETURN_VALUE NEW_LINE					    154 LOAD_FAST 0 ( arr )					  
							      								    156 LOAD_CONST 1 ( 0 )					  
							      								    158 BINARY_SUBSCR						  
							      								    160 BINARY_MULTIPLY						  
							      								    162 BINARY_SUBTRACT						  
							      								    164 STORE_FAST 0 ( arr )					  
							      								    								  
							      								    5 166 LOAD_FAST 0 ( arr )					  
							      								    168 LOAD_FAST 0 ( arr )					  
							      								    170 LOAD_CONST 1 ( 0 )					  
							      								    172 BINARY_SUBSCR						  
							      								    174 LOAD_FAST 0 ( arr )					  
							      								    176 LOAD_CONST 1 ( 0 )					  
							      								    178 BINARY_SUBSCR						  
							      								    180 BINARY_SUBTRACT						  
							      								    182 BINARY_MULTIPLY						  
							      								    184 BINARY_SUBTRACT						  
							      								    186 STORE_FAST 0 ( arr )					  
							      								    								  
							      								    6 >> 188 LOAD_FAST 0 ( arr )				  
							      								    190 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_LINE_PASSING_2_POINTS			      PROGRAM_FIND_LINE_PASSING_2_POINTS			    PROGRAM_FIND_LINE_PASSING_2_POINTS				  PROGRAM_FIND_LINE_PASSING_2_POINTS
--							      --							    --								  --
def lineFromPoints ( P , Q ) :				      Disassembly of <code object lineFromPoints at 0x7f33e2653ed0, Disassembly of <code object lineFromPoints at 0x7f2b01639660, script_not_found : None
    a = Q [ 1 ] - P [ 1 ]				      2 0 LOAD_FAST 1 ( Q )					    2 0 LOAD_FAST 0 ( P )					  
    b = P [ 0 ] - Q [ 0 ]				      2 LOAD_CONST 1 ( 1 )					    2 LOAD_CONST 1 ( 1 )					  
    c = a * ( P [ 0 ] ) + b * ( P [ 1 ] )		      4 BINARY_SUBSCR						    4 BINARY_SUBSCR						  
    if ( b < 0 ) :					      6 LOAD_FAST 0 ( P )					    6 LOAD_FAST 1 ( Q )						  
	print ( "The line passing through points P and Q is:" 8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 1 ( 1 )					  
    else :						      10 BINARY_SUBSCR						    10 BINARY_SUBSCR						  
	print ( "The line passing through points P and Q is:  12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
							      14 STORE_FAST 2 ( a )					    14 LOAD_FAST 1 ( Q )					  
							      								    16 LOAD_CONST 1 ( 1 )					  
							      3 16 LOAD_FAST 0 ( P )					    18 BINARY_SUBSCR						  
							      18 LOAD_CONST 2 ( 0 )					    20 BINARY_SUBTRACT						  
							      20 BINARY_SUBSCR						    22 LOAD_FAST 1 ( Q )					  
							      22 LOAD_FAST 1 ( Q )					    24 LOAD_CONST 1 ( 1 )					  
							      24 LOAD_CONST 2 ( 0 )					    26 BINARY_SUBSCR						  
							      26 BINARY_SUBSCR						    28 BINARY_SUBTRACT						  
							      28 BINARY_SUBTRACT					    30 LOAD_FAST 1 ( Q )					  
							      30 STORE_FAST 3 ( b )					    32 LOAD_CONST 1 ( 1 )					  
							      								    34 BINARY_SUBSCR						  
							      4 32 LOAD_FAST 2 ( a )					    36 BINARY_SUBTRACT						  
							      34 LOAD_FAST 0 ( P )					    38 LOAD_FAST 1 ( Q )					  
							      36 LOAD_CONST 2 ( 0 )					    40 LOAD_CONST 1 ( 1 )					  
							      38 BINARY_SUBSCR						    42 BINARY_SUBSCR						  
							      40 BINARY_MULTIPLY					    44 BINARY_SUBTRACT						  
							      42 LOAD_FAST 3 ( b )					    46 LOAD_FAST 1 ( Q )					  
							      44 LOAD_FAST 0 ( P )					    48 LOAD_CONST 1 ( 1 )					  
							      46 LOAD_CONST 1 ( 1 )					    50 BINARY_SUBSCR						  
							      48 BINARY_SUBSCR						    52 BINARY_SUBTRACT						  
							      50 BINARY_MULTIPLY					    54 LOAD_FAST 1 ( Q )					  
							      52 BINARY_ADD						    56 LOAD_CONST 1 ( 1 )					  
							      54 STORE_FAST 4 ( c )					    58 BINARY_SUBSCR						  
							      								    60 BINARY_SUBTRACT						  
							      5 56 LOAD_FAST 3 ( b )					    62 LOAD_FAST 1 ( Q )					  
							      58 LOAD_CONST 2 ( 0 )					    64 LOAD_CONST 1 ( 1 )					  
							      60 COMPARE_OP 0 ( < )					    66 BINARY_SUBSCR						  
							      62 POP_JUMP_IF_FALSE 86					    68 BINARY_SUBTRACT						  
							      								    70 LOAD_FAST 1 ( Q )					  
							      6 64 LOAD_GLOBAL 0 ( print )				    72 LOAD_CONST 1 ( 1 )					  
							      66 LOAD_CONST 3 ( 'The line passing through points P and Q is 74 BINARY_SUBSCR						  
							      68 LOAD_FAST 2 ( a )					    76 BINARY_SUBTRACT						  
							      70 LOAD_CONST 4 ( 'x ' )					    78 LOAD_FAST 1 ( Q )					  
							      72 LOAD_FAST 3 ( b )					    80 LOAD_CONST 1 ( 1 )					  
							      74 LOAD_CONST 5 ( 'y = ' )				    82 BINARY_SUBSCR						  
							      76 LOAD_FAST 4 ( c )					    84 BINARY_SUBTRACT						  
							      78 LOAD_CONST 6 ( '\n' )					    86 LOAD_FAST 1 ( Q )					  
							      80 CALL_FUNCTION 7					    88 LOAD_CONST 1 ( 1 )					  
							      82 POP_TOP						    90 BINARY_SUBSCR						  
							      84 JUMP_FORWARD 20 ( to 106 )				    92 BINARY_SUBTRACT						  
							      								    94 LOAD_FAST 1 ( Q )					  
							      8 >> 86 LOAD_GLOBAL 0 ( print )				    96 LOAD_CONST 1 ( 1 )					  
							      88 LOAD_CONST 7 ( 'The line passing through points P and Q is 98 BINARY_SUBSCR						  
							      90 LOAD_FAST 2 ( a )					    100 BINARY_SUBTRACT						  
							      92 LOAD_CONST 8 ( 'x + ' )				    102 LOAD_FAST 1 ( Q )					  
							      94 LOAD_FAST 3 ( b )					    104 LOAD_CONST 1 ( 1 )					  
							      96 LOAD_CONST 5 ( 'y = ' )				    106 BINARY_SUBSCR						  
							      98 LOAD_FAST 4 ( c )					    108 BINARY_SUBTRACT						  
							      100 LOAD_CONST 6 ( '\n' )					    110 LOAD_FAST 1 ( Q )					  
							      102 CALL_FUNCTION 7					    112 LOAD_CONST 1 ( 1 )					  
							      104 POP_TOP						    114 BINARY_SUBSCR						  
							      >> 106 LOAD_CONST 0 ( None )				    116 BINARY_SUBTRACT						  
							      108 RETURN_VALUE NEW_LINE					    118 LOAD_FAST 1 ( Q )					  
							      								    120 LOAD_CONST 1 ( 1 )					  
							      								    122 BINARY_SUBSCR						  
							      								    124 BINARY_SUBTRACT						  
							      								    126 LOAD_FAST 1 ( Q )					  
							      								    128 LOAD_CONST 1 ( 1 )					  
							      								    130 BINARY_SUBSCR						  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 1 ( Q )					  
							      								    136 LOAD_CONST 1 ( 1 )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 BINARY_SUBTRACT						  
							      								    142 LOAD_FAST 1 ( Q )					  
							      								    144 LOAD_CONST 1 ( 1 )					  
							      								    146 BINARY_SUBSCR						  
							      								    148 BINARY_SUBTRACT						  
							      								    150 LOAD_FAST 1 ( Q )					  
							      								    152 LOAD_CONST 1 ( 1 )					  
							      								    154 BINARY_SUBSCR						  
							      								    156 BINARY_SUBTRACT						  
							      								    158 LOAD_FAST 1 ( Q )					  
							      								    160 LOAD_CONST 1 ( 1 )					  
							      								    162 BINARY_SUBSCR						  
							      								    164 BINARY_SUBTRACT						  
							      								    166 LOAD_FAST 1 ( Q )					  
							      								    168 LOAD_CONST 1 ( 1 )					  
							      								    170 BINARY_SUBSCR						  
							      								    172 BINARY_SUBTRACT						  
							      								    174 LOAD_FAST 1 ( Q )					  
							      								    176 LOAD_CONST 1 ( 1 )					  
							      								    178 BINARY_SUBSCR						  
							      								    180 BINARY_SUBTRACT						  
							      								    182 LOAD_FAST 1 ( Q )					  
							      								    184 LOAD_CONST 1 ( 1 )					  
							      								    186 BINARY_SUBSCR						  
							      								    188 BINARY_SUBTRACT						  
							      								    156 LOAD_FAST 1 ( Q )					  
							      								    158 LOAD_CONST 1 ( 1 )					  
							      								    160 STORE_SUBSCR						  
							      								    								  
							      								    3 162							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MID_POINT_LINE_GENERATION_ALGORITHM			      MID_POINT_LINE_GENERATION_ALGORITHM			    MID_POINT_LINE_GENERATION_ALGORITHM				  MID_POINT_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
def midPoint ( X1 , Y1 , X2 , Y2 ) :			      Disassembly of <code object midPoint at 0x7f33e2653ed0, file  Disassembly of <code object midPoint at 0x7f2b01639660, file  script_not_found : None
    dx = X2 - X1					      2 0 LOAD_FAST 2 ( X2 )					    2 0 LOAD_FAST 1 ( Y1 )					  
    dy = Y2 - Y1					      2 LOAD_FAST 0 ( X1 )					    2 LOAD_FAST 2 ( X2 )					  
    d = dy - ( dx / 2 )					      4 BINARY_SUBTRACT						    4 BINARY_SUBTRACT						  
    x = X1						      6 STORE_FAST 4 ( dx )					    6 STORE_FAST 3 ( dx )					  
    y = Y1						      								    								  
    print ( x , "," , y , "\n" )			      3 8 LOAD_FAST 3 ( Y2 )					    3 8 LOAD_FAST 1 ( Y1 )					  
    while ( x < X2 ) :					      10 LOAD_FAST 1 ( Y1 )					    10 LOAD_FAST 3 ( dx )					  
	x = x + 1					      12 BINARY_SUBTRACT					    12 BINARY_SUBTRACT						  
	if ( d < 0 ) :					      14 STORE_FAST 5 ( dy )					    14 STORE_FAST 4 ( dy )					  
	    d = d + dy					      								    								  
	else :						      4 16 LOAD_FAST 5 ( dy )					    4 16 LOAD_FAST 4 ( dy )					  
	    d = d + ( dy - dx )				      18 LOAD_FAST 4 ( dx )					    18 LOAD_FAST 3 ( dx )					  
	    y = y + 1					      20 LOAD_CONST 1 ( 2 )					    20 BINARY_SUBTRACT						  
	print ( x , "," , y , "\n" )			      22 BINARY_TRUE_DIVIDE					    22 STORE_FAST 5 ( dy )					  
							      24 BINARY_SUBTRACT					    								  
							      26 STORE_FAST 6 ( d )					    5 24 LOAD_FAST 4 ( dy )					  
							      								    26 LOAD_FAST 5 ( dy )					  
							      5 28 LOAD_FAST 0 ( X1 )					    28 BINARY_SUBTRACT						  
							      30 STORE_FAST 7 ( x )					    30 STORE_FAST 6 ( dy )					  
							      								    								  
							      6 32 LOAD_FAST 1 ( Y1 )					    6 32 LOAD_FAST 4 ( dy )					  
							      34 STORE_FAST 8 ( y )					    34 LOAD_FAST 6 ( dy )					  
							      								    36 BINARY_SUBTRACT						  
							      7 36 LOAD_GLOBAL 0 ( print )				    38 STORE_FAST 7 ( dy )					  
							      38 LOAD_FAST 7 ( x )					    								  
							      40 LOAD_CONST 2 ( ',' )					    7 40 LOAD_FAST 6 ( dy )					  
							      42 LOAD_FAST 8 ( y )					    42 LOAD_FAST 7 ( dy )					  
							      44 LOAD_CONST 3 ( '\n' )					    44 BINARY_SUBTRACT						  
							      46 CALL_FUNCTION 4					    46 STORE_FAST 8 ( dy )					  
							      48 POP_TOP						    								  
							      								    8 48 LOAD_FAST 6 ( dy )					  
							      8 50 SETUP_LOOP 72 ( to 124 )				    50 LOAD_FAST 7 ( dy )					  
							      >> 52 LOAD_FAST 7 ( x )					    52 BINARY_SUBTRACT						  
							      54 LOAD_FAST 2 ( X2 )					    54 STORE_FAST 9 ( dy )					  
							      56 COMPARE_OP 0 ( < )					    								  
							      58 POP_JUMP_IF_FALSE 122					    9 56 LOAD_FAST 6 ( dy )					  
							      								    58 LOAD_FAST 8 ( dy )					  
							      9 60 LOAD_FAST 7 ( x )					    60 BINARY_SUBTRACT						  
							      62 LOAD_CONST 4 ( 1 )					    62 LOAD_FAST 9 ( dy )					  
							      64 BINARY_ADD						    64 BINARY_SUBTRACT						  
							      66 STORE_FAST 7 ( x )					    66 STORE_FAST 10 ( dy )					  
							      								    								  
							      10 68 LOAD_FAST 6 ( d )					    10 68 LOAD_FAST 6 ( dy )					  
							      70 LOAD_CONST 5 ( 0 )					    70 LOAD_FAST 10 ( dy )					  
							      72 COMPARE_OP 0 ( < )					    72 BINARY_SUBTRACT						  
							      74 POP_JUMP_IF_FALSE 86					    74 LOAD_FAST 9 ( dy )					  
							      								    76 BINARY_SUBTRACT						  
							      11 76 LOAD_FAST 6 ( d )					    78 LOAD_FAST 10 ( dy )					  
							      78 LOAD_FAST 5 ( dy )					    80 BINARY_SUBTRACT						  
							      80 BINARY_ADD						    82 LOAD_FAST 10 ( dy )					  
							      82 STORE_FAST 6 ( d )					    84 BINARY_SUBTRACT						  
							      84 JUMP_FORWARD 20 ( to 106 )				    86 LOAD_FAST 11 ( dy )					  
							      								    88 BINARY_SUBTRACT						  
							      13 >> 86 LOAD_FAST 6 ( d )				    90 LOAD_FAST 10 ( dy )					  
							      88 LOAD_FAST 5 ( dy )					    92 BINARY_SUBTRACT						  
							      90 LOAD_FAST 4 ( dx )					    94 LOAD_FAST 11 ( dy )					  
							      92 BINARY_SUBTRACT					    96 BINARY_SUBTRACT						  
							      94 BINARY_ADD						    98 BINARY_MULTIPLY						  
							      96 STORE_FAST 6 ( d )					    100 STORE_FAST 11 ( dy )					  
							      								    								  
							      14 98 LOAD_FAST 8 ( y )					    11 102 LOAD_FAST 6 ( dy )					  
							      100 LOAD_CONST 4 ( 1 )					    104 LOAD_FAST 9 ( dy )					  
							      102 BINARY_ADD						    106 BINARY_SUBTRACT						  
							      104 STORE_FAST 8 ( y )					    108 STORE_FAST 12 ( dy )					  
							      								    								  
							      15 >> 106 LOAD_GLOBAL 0 ( print )				    12 110 LOAD_FAST 6 ( dy )					  
							      108 LOAD_FAST 7 ( x )					    112 LOAD_FAST 11 ( dy )					  
							      110 LOAD_CONST 2 ( ',' )					    114 BINARY_SUBTRACT						  
							      112 LOAD_FAST 8 ( y )					    116 LOAD_FAST 12 ( dy )					  
							      114 LOAD_CONST 3 ( '\n' )					    118 BINARY_SUBTRACT						  
							      116 CALL_FUNCTION 4					    120 LOAD_FAST 13 ( dy )					  
							      118 POP_TOP						    122 BINARY_SUBTRACT						  
							      120 JUMP_ABSOLUTE 52					    124 LOAD_FAST 14 ( dy )					  
							      >> 122 POP_BLOCK						    126 BINARY_SUBTRACT						  
							      >> 124 LOAD_CONST 0 ( None )				    128 LOAD_FAST 15 ( dy )					  
							      126 RETURN_VALUE NEW_LINE					    130 BINARY_SUBTRACT						  
							      								    132 LOAD_FAST 16 ( dy )					  
							      								    134 BINARY_SUBTRACT						  
							      								    136 LOAD_FAST 17 ( dy )					  
							      								    138 BINARY_SUBTRACT						  
							      								    140 LOAD_FAST 17 ( dy )					  
							      								    142 BINARY_SUBTRACT						  
							      								    144 LOAD_FAST 18 ( dy )					  
							      								    146 BINARY_SUBTRACT						  
							      								    148 LOAD_FAST 18 ( dy )					  
							      								    150 BINARY_SUBTRACT						  
							      								    152 LOAD_FAST 19 ( dy )					  
							      								    154 BINARY_SUBTRACT						  
							      								    156 BINARY_MULTIPLY						  
							      								    158 STORE_FAST 19 ( dy )					  
							      								    								  
							      								    13 160 LOAD_FAST 19 ( dy )					  
							      								    162 LOAD_FAST 21 ( dy )					  
							      								    164 BINARY_SUBTRACT						  
							      								    166 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING	      COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		    COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING		  COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING
--							      --							    --								  --
def countPattern ( s ) :				      Disassembly of <code object countPattern at 0x7f33e2649a50, f Disassembly of <code object countPattern at 0x7f2b0163dc90, f error : Traceback (most recent call last):   File
    length = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  "XLM/dis_script.py", line 60, in <module>	exec
    oneSeen = False					      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  (item)   File "main.py", line 39, in <module>	  Fi
    count = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  le "<dis>", line 2, in countPattern TypeError: 'st
    for i in range ( length ) :				      6 STORE_FAST 1 ( length )					    6 STORE_FAST 1 ( length )					  r' object does not support item assignment
	if ( s [ i ] == '1' and oneSeen ) :		      								    								  
	    if ( s [ i - 1 ] == '0' ) :			      3 8 LOAD_CONST 1 ( False )				    3 8 LOAD_CONST 1 ( 0 )					  
		count += 1				      10 STORE_FAST 2 ( oneSeen )				    10 STORE_FAST 2 ( oneSeen )					  
	if ( s [ i ] == '1' and oneSeen == 0 ) :	      								    								  
	    oneSeen = True				      4 12 LOAD_CONST 2 ( 0 )					    4 12 LOAD_CONST 2 ( 1 )					  
	if ( s [ i ] != '0' and s [ i ] != '1' ) :	      14 STORE_FAST 3 ( count )					    14 STORE_FAST 3 ( count )					  
	    oneSeen = False				      								    								  
    return count					      5 16 SETUP_LOOP 108 ( to 126 )				    5 16 SETUP_LOOP 64 ( to 80 )				  
							      18 LOAD_GLOBAL 1 ( range )				    18 LOAD_GLOBAL 1 ( range )					  
							      20 LOAD_FAST 1 ( length )					    20 LOAD_FAST 1 ( length )					  
							      22 CALL_FUNCTION 1					    22 CALL_FUNCTION 1						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 96 ( to 124 )				    >> 26 FOR_ITER 64 ( to 78 )					  
							      28 STORE_FAST 4 ( i )					    28 STORE_FAST 4 ( i )					  
							      								    								  
							      6 30 LOAD_FAST 0 ( s )					    6 30 LOAD_FAST 0 ( s )					  
							      32 LOAD_FAST 4 ( i )					    32 LOAD_FAST 4 ( i )					  
							      34 BINARY_SUBSCR						    34 BINARY_SUBSCR						  
							      36 LOAD_CONST 3 ( '1' )					    36 STORE_FAST 5 ( word )					  
							      38 COMPARE_OP 2 ( == )					    								  
							      40 POP_JUMP_IF_FALSE 70					    7 38 LOAD_FAST 0 ( s )					  
							      42 LOAD_FAST 2 ( oneSeen )				    40 LOAD_FAST 4 ( i )					  
							      44 POP_JUMP_IF_FALSE 70					    42 BINARY_SUBSCR						  
							      								    44 LOAD_FAST 5 ( word )					  
							      7 46 LOAD_FAST 0 ( s )					    46 COMPARE_OP 2 ( == )					  
							      48 LOAD_FAST 4 ( i )					    48 POP_JUMP_IF_FALSE 26					  
							      50 LOAD_CONST 4 ( 1 )					    								  
							      52 BINARY_SUBTRACT					    8 50 LOAD_FAST 0 ( s )					  
							      54 BINARY_SUBSCR						    52 LOAD_FAST 4 ( i )					  
							      56 LOAD_CONST 5 ( '0' )					    54 BINARY_SUBSCR						  
							      58 COMPARE_OP 2 ( == )					    56 STORE_FAST 6 ( word )					  
							      60 POP_JUMP_IF_FALSE 70					    								  
							      								    9 58 LOAD_FAST 0 ( s )					  
							      8 62 LOAD_FAST 3 ( count )				    60 LOAD_FAST 4 ( i )					  
							      64 LOAD_CONST 4 ( 1 )					    62 BINARY_SUBSCR						  
							      66 INPLACE_ADD						    64 LOAD_FAST 5 ( word )					  
							      68 STORE_FAST 3 ( count )					    66 COMPARE_OP 2 ( == )					  
							      								    68 POP_JUMP_IF_FALSE 26					  
							      9 >> 70 LOAD_FAST 0 ( s )					    								  
							      72 LOAD_FAST 4 ( i )					    10 70 LOAD_FAST 0 ( s )					  
							      74 BINARY_SUBSCR						    72 LOAD_FAST 4 ( i )					  
							      76 LOAD_CONST 3 ( '1' )					    74 BINARY_SUBSCR						  
							      78 COMPARE_OP 2 ( == )					    76 STORE_FAST 6 ( word )					  
							      80 POP_JUMP_IF_FALSE 94					    								  
							      82 LOAD_FAST 2 ( oneSeen )				    11 78 LOAD_FAST 0 ( s )					  
							      84 LOAD_CONST 2 ( 0 )					    80 LOAD_FAST 4 ( i )					  
							      86 COMPARE_OP 2 ( == )					    82 BINARY_SUBSCR						  
							      88 POP_JUMP_IF_FALSE 94					    84 LOAD_FAST 6 ( word )					  
							      								    86 COMPARE_OP 2 ( == )					  
							      10 90 LOAD_CONST 6 ( True )				    88 POP_JUMP_IF_FALSE 26					  
							      92 STORE_FAST 2 ( oneSeen )				    								  
							      								    12 90 LOAD_FAST 0 ( s )					  
							      11 >> 94 LOAD_FAST 0 ( s )				    92 LOAD_FAST 4 ( i )					  
							      96 LOAD_FAST 4 ( i )					    94 BINARY_SUBSCR						  
							      98 BINARY_SUBSCR						    96 LOAD_FAST 6 ( word )					  
							      100 LOAD_CONST 5 ( '0' )					    98 COMPARE_OP 2 ( == )					  
							      102 COMPARE_OP 3 ( != )					    100 POP_JUMP_IF_FALSE 26					  
							      104 POP_JUMP_IF_FALSE 26					    								  
							      106 LOAD_FAST 0 ( s )					    13 102 LOAD_FAST 0 ( s )					  
							      108 LOAD_FAST 4 ( i )					    104 LOAD_FAST 4 ( i )					  
							      110 BINARY_SUBSCR						    106 BINARY_SUBSCR						  
							      112 LOAD_CONST 3 ( '1' )					    108 STORE_FAST 6 ( word )					  
							      114 COMPARE_OP 3 ( != )					    								  
							      116 POP_JUMP_IF_FALSE 26					    14 110 LOAD_FAST 0 ( s )					  
							      								    112 LOAD_FAST 4 ( i )					  
							      12 118 LOAD_CONST 1 ( False )				    114 BINARY_SUBSCR						  
							      120 STORE_FAST 2 ( oneSeen )				    116 LOAD_FAST 6 ( word )					  
							      122 JUMP_ABSOLUTE 26					    118 COMPARE_OP 2 ( == )					  
							      >> 124 POP_BLOCK						    120 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      13 >> 126 LOAD_FAST 3 ( count )				    15 122 LOAD_FAST 0 ( s )					  
							      128 RETURN_VALUE NEW_LINE					    124 LOAD_FAST 4 ( i )					  
							      								    126 BINARY_SUBSCR						  
							      								    128 LOAD_FAST 6 ( word )					  
							      								    130 COMPARE_OP 2 ( == )					  
							      								    132 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      								    16 134 LOAD_FAST 0 ( s )					  
							      								    136 LOAD_FAST 4 ( i )					  
							      								    138 BINARY_SUBSCR						  
							      								    140 LOAD_FAST 6 ( word )					  
							      								    142 COMPARE_OP 2 ( == )					  
							      								    144 POP_JUMP_IF_FALSE 26					  
							      								    								  
							      								    17 146 LOAD_FAST 0 ( s )					  
							      								    148 LOAD_FAST 4 ( i )					  
							      								    150 STORE_SUBSCR						  
							      								    >> 152 JUMP_ABSOLUTE 26					  
							      								    >> 154 POP_BLOCK						  
							      								    NEW_LINE							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		      SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N		    SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N			  SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N
--							      --							    --								  --
def digitsNum ( N ) :					      Disassembly of <code object digitsNum at 0x7f33e2653ed0, file Disassembly of <code object digitsNum at 0x7f2b01639660, file script_not_found : None
    if ( N == 0 ) :					      2 0 LOAD_FAST 0 ( N )					    2 0 LOAD_FAST 0 ( N )					  
	print ( "0" , end = "" )			      2 LOAD_CONST 1 ( 0 )					    2 LOAD_CONST 1 ( 0 )					  
    if ( N % 9 != 0 ) :					      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	print ( N % 9 , end = "" )			      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 14					  
    for i in range ( 1 , int ( N / 9 ) + 1 ) :		      								    								  
	print ( "9" , end = "" )			      3 8 LOAD_GLOBAL 0 ( print )				    3 8 LOAD_GLOBAL 0 ( print )					  
    for i in range ( 1 , N + 1 ) :			      10 LOAD_CONST 2 ( '0' )					    10 LOAD_CONST 2 ( "0" )					  
	print ( "0" , end = "" )			      12 LOAD_CONST 3 ( '' )					    12 LOAD_CONST 3 ( '' )					  
    print ( )						      14 LOAD_CONST 4 ( ( 'end' , ) )				    14 CALL_FUNCTION 2						  
							      16 CALL_FUNCTION_KW 2					    16 POP_TOP							  
							      18 POP_TOP						    								  
							      								    4 18 LOAD_GLOBAL 0 ( print )				  
							      4 >> 20 LOAD_FAST 0 ( N )					    20 LOAD_CONST 4 ( "', ')					  
							      22 LOAD_CONST 5 ( 9 )					    22CALL_FUNCTION1						  
							      24 BINARY_MODULO						    24POP_TOP							  
							      26 LOAD_CONST 1 ( 0 )					    								  
							      28 COMPARE_OP 3 ( != )					    526LOAD_GLOBAL0( print )					  
							      30 POP_JUMP_IF_FALSE 48					    28 LOAD_CONST 5 ( "', ')					  
							      								    30CALL_FUNCTION1						  
							      5 32 LOAD_GLOBAL 0 ( print )				    32POP_TOP							  
							      34 LOAD_FAST 0 ( N )					    								  
							      36 LOAD_CONST 5 ( 9 )					    634LOAD_GLOBAL0( print )					  
							      38 BINARY_MODULO						    36 LOAD_CONST 6 ( "', ')					  
							      40 LOAD_CONST 3 ( '' )					    38CALL_FUNCTION1						  
							      42 LOAD_CONST 4 ( ( 'end' , ) )				    40POP_TOP							  
							      44 CALL_FUNCTION_KW 2					    								  
							      46 POP_TOP						    742LOAD_GLOBAL0( print )					  
							      								    44 LOAD_CONST 7 ( "', ')					  
							      6 >> 48 SETUP_LOOP 42 ( to 92 )				    46CALL_FUNCTION1						  
							      50 LOAD_GLOBAL 1 ( range )				    48POP_TOP							  
							      52 LOAD_CONST 6 ( 1 )					    								  
							      54 LOAD_GLOBAL 2 ( int )					    850LOAD_GLOBAL0( print )					  
							      56 LOAD_FAST 0 ( N )					    52 LOAD_CONST 8 ( "', ')					  
							      58 LOAD_CONST 5 ( 9 )					    54CALL_FUNCTION1						  
							      60 BINARY_TRUE_DIVIDE					    56POP_TOP							  
							      62 CALL_FUNCTION 1					    								  
							      64 LOAD_CONST 6 ( 1 )					    958LOAD_GLOBAL0( print )					  
							      66 BINARY_ADD						    60 LOAD_CONST 9 ( "', ')					  
							      68 CALL_FUNCTION 2					    62CALL_FUNCTION1						  
							      70 GET_ITER						    64POP_TOP							  
							      >> 72 FOR_ITER 16 ( to 90 )				    								  
							      74 STORE_FAST 1 ( i )					    1066LOAD_GLOBAL0( print )					  
							      								    68 LOAD_CONST 10 ( "', ')					  
							      7 76 LOAD_GLOBAL 0 ( print )				    70CALL_FUNCTION1						  
							      78 LOAD_CONST 7 ( '9' )					    72POP_TOP							  
							      80 LOAD_CONST 3 ( '' )					    								  
							      82 LOAD_CONST 4 ( ( 'end' , ) )				    1174LOAD_GLOBAL0( print )					  
							      84 CALL_FUNCTION_KW 2					    76 LOAD_CONST 11 ( "', ')					  
							      86 POP_TOP						    78CALL_FUNCTION1						  
							      88 JUMP_ABSOLUTE 72					    80POP_TOP							  
							      >> 90 POP_BLOCK						    								  
							      								    1282LOAD_GLOBAL0( print )					  
							      8 >> 92 SETUP_LOOP 34 ( to 128 )				    84 LOAD_CONST 12 ( "', ')					  
							      94 LOAD_GLOBAL 1 ( range )				    86CALL_FUNCTION1						  
							      96 LOAD_CONST 6 ( 1 )					    88POP_TOP							  
							      98 LOAD_FAST 0 ( N )					    								  
							      100 LOAD_CONST 6 ( 1 )					    1390LOAD_GLOBAL0( print )					  
							      102 BINARY_ADD						    92 LOAD_CONST 13 ( "', ')					  
							      104 CALL_FUNCTION 2					    94CALL_FUNCTION1						  
							      106 GET_ITER						    96POP_TOP							  
							      >> 108 FOR_ITER 16 ( to 126 )				    								  
							      110 STORE_FAST 1 ( i )					    1498LOAD_GLOBAL0( print )					  
							      								    100 LOAD_CONST 13 ( "', ')					  
							      9 112 LOAD_GLOBAL 0 ( print )				    102CALL_FUNCTION1						  
							      114 LOAD_CONST 2 ( '0' )					    104POP_TOP							  
							      116 LOAD_CONST 3 ( '' )					    								  
							      118 LOAD_CONST 4 ( ( 'end' , ) )				    15106LOAD_GLOBAL0( print )					  
							      120 CALL_FUNCTION_KW 2					    108 LOAD_CONST 14 ( "', ')					  
							      122 POP_TOP						    110CALL_FUNCTION1						  
							      124 JUMP_ABSOLUTE 108					    112POP_TOP							  
							      >> 126 POP_BLOCK						    								  
							      								    16114LOAD_GLOBAL0( print )					  
							      10 >> 128 LOAD_GLOBAL 0 ( print )				    116 LOAD_CONST 15 ( "', ')					  
							      130 CALL_FUNCTION 0					    118CALL_FUNCTION1						  
							      132 POP_TOP						    120POP_TOP							  
							      134 LOAD_CONST 0 ( None )					    								  
							      136 RETURN_VALUE NEW_LINE					    17122LOAD_GLOBAL0( print )					  
							      								    124 LOAD_CONST 15 ( "', ')					  
							      								    126CALL_FUNCTION1						  
							      								    128POP_TOP							  
							      								    130LOAD_CONST0( None )					  
							      								    132 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE				    FIND_NUMBER_OF_TRIANGLES_POSSIBLE				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE
--							      --							    --								  --
def findnumberofTriangles ( arr ) :			      Disassembly of <code object findnumberofTriangles at 0x7f33e2 Disassembly of <code object findnumberofTriangles at 0x7f2b01 script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    arr.sort ( )					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    count = 0						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( 0 , n - 2 ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	k = i + 2					      								    								  
	for j in range ( i + 1 , n ) :			      3 8 LOAD_FAST 0 ( arr )					    3 8 LOAD_FAST 1 ( n )					  
	    while ( k < n and arr [ i ] + arr [ j ] > arr [ k 10 LOAD_METHOD 1 ( sort )					    10 LOAD_METHOD 1 ( sort )					  
		k += 1					      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
	    if ( k > j ) :				      14 POP_TOP						    14 POP_TOP							  
		count += k - j - 1			      								    								  
    return count					      4 16 LOAD_CONST 1 ( 0 )					    4 16 SETUP_LOOP 64 ( to 80 )				  
							      18 STORE_FAST 2 ( count )					    18 LOAD_GLOBAL 2 ( range )					  
							      								    20 LOAD_CONST 1 ( 0 )					  
							      5 20 SETUP_LOOP 124 ( to 146 )				    22 LOAD_CONST 2 ( 1 )					  
							      22 LOAD_GLOBAL 2 ( range )				    24 CALL_FUNCTION 2						  
							      24 LOAD_CONST 1 ( 0 )					    26 GET_ITER							  
							      26 LOAD_FAST 1 ( n )					    >> 28 FOR_ITER 48 ( to 78 )					  
							      28 LOAD_CONST 2 ( 2 )					    30 STORE_FAST 2 ( i )					  
							      30 BINARY_SUBTRACT					    								  
							      32 CALL_FUNCTION 2					    5 32 LOAD_FAST 1 ( n )					  
							      34 GET_ITER						    34 LOAD_FAST 2 ( i )					  
							      >> 36 FOR_ITER 106 ( to 144 )				    36 BINARY_SUBSCR						  
							      38 STORE_FAST 3 ( i )					    38 LOAD_FAST 1 ( n )					  
							      								    40 COMPARE_OP 4 ( > )					  
							      6 40 LOAD_FAST 3 ( i )					    42 POP_JUMP_IF_FALSE 28					  
							      42 LOAD_CONST 2 ( 2 )					    								  
							      44 BINARY_ADD						    6 44 LOAD_FAST 1 ( n )					  
							      46 STORE_FAST 4 ( k )					    46 LOAD_FAST 2 ( i )					  
							      								    48 BINARY_SUBSCR						  
							      7 48 SETUP_LOOP 92 ( to 142 )				    50 LOAD_FAST 1 ( n )					  
							      50 LOAD_GLOBAL 2 ( range )				    52 LOAD_FAST 2 ( i )					  
							      52 LOAD_FAST 3 ( i )					    54 BINARY_SUBSCR						  
							      54 LOAD_CONST 3 ( 1 )					    56 LOAD_FAST 1 ( n )					  
							      56 BINARY_ADD						    58 BINARY_SUBSCR						  
							      58 LOAD_FAST 1 ( n )					    60 LOAD_FAST 1 ( n )					  
							      60 CALL_FUNCTION 2					    62 BINARY_SUBSCR						  
							      62 GET_ITER						    64 LOAD_FAST 1 ( n )					  
							      >> 64 FOR_ITER 74 ( to 140 )				    66 BINARY_SUBSCR						  
							      66 STORE_FAST 5 ( j )					    68 LOAD_FAST 1 ( n )					  
							      								    70 BINARY_SUBSCR						  
							      8 68 SETUP_LOOP 44 ( to 114 )				    72 LOAD_FAST 1 ( n )					  
							      >> 70 LOAD_FAST 4 ( k )					    74 BINARY_SUBSCR						  
							      72 LOAD_FAST 1 ( n )					    76 LOAD_FAST 1 ( n )					  
							      74 COMPARE_OP 0 ( < )					    78 BINARY_SUBSCR						  
							      76 POP_JUMP_IF_FALSE 112					    80 LOAD_FAST 1 ( n )					  
							      78 LOAD_FAST 0 ( arr )					    82 BINARY_SUBSCR						  
							      80 LOAD_FAST 3 ( i )					    84 LOAD_FAST 1 ( n )					  
							      82 BINARY_SUBSCR						    86 STORE_SUBSCR						  
							      84 LOAD_FAST 0 ( arr )					    88 JUMP_ABSOLUTE 28						  
							      86 LOAD_FAST 5 ( j )					    >> 90 POP_BLOCK						  
							      88 BINARY_SUBSCR						    								  
							      90 BINARY_ADD						    7 >> 92 LOAD_FAST 1 ( n )					  
							      92 LOAD_FAST 0 ( arr )					    94 RETURN_VALUE NEW_LINE					  
							      94 LOAD_FAST 4 ( k )					    								  
							      96 BINARY_SUBSCR						    								  
							      98 COMPARE_OP 4 ( > )					    								  
							      100 POP_JUMP_IF_FALSE 112					    								  
							      								    								  
							      9 102 LOAD_FAST 4 ( k )					    								  
							      104 LOAD_CONST 3 ( 1 )					    								  
							      106 INPLACE_ADD						    								  
							      108 STORE_FAST 4 ( k )					    								  
							      110 JUMP_ABSOLUTE 70					    								  
							      >> 112 POP_BLOCK						    								  
							      								    								  
							      10 >> 114 LOAD_FAST 4 ( k )				    								  
							      116 LOAD_FAST 5 ( j )					    								  
							      118 COMPARE_OP 4 ( > )					    								  
							      120 POP_JUMP_IF_FALSE 64					    								  
							      								    								  
							      11 122 LOAD_FAST 2 ( count )				    								  
							      124 LOAD_FAST 4 ( k )					    								  
							      126 LOAD_FAST 5 ( j )					    								  
							      128 BINARY_SUBTRACT					    								  
							      130 LOAD_CONST 3 ( 1 )					    								  
							      132 BINARY_SUBTRACT					    								  
							      134 INPLACE_ADD						    								  
							      136 STORE_FAST 2 ( count )				    								  
							      138 JUMP_ABSOLUTE 64					    								  
							      >> 140 POP_BLOCK						    								  
							      >> 142 JUMP_ABSOLUTE 36					    								  
							      >> 144 POP_BLOCK						    								  
							      								    								  
							      12 >> 146 LOAD_FAST 2 ( count )				    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL		      MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			    MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			  MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL
--							      --							    --								  --
def moveSpaceInFront ( s ) :				      Disassembly of <code object moveSpaceInFront at 0x7f33e2653ed Disassembly of <code object moveSpaceInFront at 0x7f2b0163966 script_not_found : None
    i = len ( s ) - 1 ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for j in range ( i , - 1 , - 1 ) :			      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  
	if ( s [ j ] != ' ' ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    s = s [ : i ] + s [ j ] + s [ i + 1 : ]	      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 1 ( 1 )					  
	    i -= 1 ;					      8 BINARY_SUBTRACT						    8 BINARY_SUBTRACT						  
    while ( i >= 0 ) :					      10 STORE_FAST 1 ( i )					    10 STORE_FAST 1 ( i )					  
	s = s [ : i ] + ' ' + s [ i + 1 : ]		      								    								  
	i -= 1						      3 12 SETUP_LOOP 76 ( to 90 )				    3 12 SETUP_LOOP 64 ( to 78 )				  
    return s ;						      14 LOAD_GLOBAL 1 ( range )				    14 LOAD_GLOBAL 1 ( range )					  
							      16 LOAD_FAST 1 ( i )					    16 LOAD_FAST 1 ( i )					  
							      18 LOAD_CONST 2 ( - 1 )					    18 LOAD_CONST 2 ( 0 )					  
							      20 LOAD_CONST 2 ( - 1 )					    20 LOAD_CONST 3 ( - 1 )					  
							      22 CALL_FUNCTION 3					    22 CALL_FUNCTION 2						  
							      24 GET_ITER						    24 GET_ITER							  
							      >> 26 FOR_ITER 60 ( to 88 )				    >> 26 FOR_ITER 48 ( to 76 )					  
							      28 STORE_FAST 2 ( j )					    28 STORE_FAST 2 ( j )					  
							      								    								  
							      4 30 LOAD_FAST 0 ( s )					    4 30 LOAD_FAST 0 ( s )					  
							      32 LOAD_FAST 2 ( j )					    32 LOAD_FAST 2 ( j )					  
							      34 BINARY_SUBSCR						    34 COMPARE_OP 3 ( != )					  
							      36 LOAD_CONST 3 ( ' ' )					    36 POP_JUMP_IF_FALSE 26					  
							      38 COMPARE_OP 3 ( != )					    								  
							      40 POP_JUMP_IF_FALSE 26					    5 38 LOAD_FAST 0 ( s )					  
							      								    40 LOAD_FAST 2 ( j )					  
							      5 42 LOAD_FAST 0 ( s )					    42 BINARY_SUBSCR						  
							      44 LOAD_CONST 0 ( None )					    44 STORE_FAST 1 ( i )					  
							      46 LOAD_FAST 1 ( i )					    								  
							      48 BUILD_SLICE 2						    6 46 LOAD_FAST 0 ( s )					  
							      50 BINARY_SUBSCR						    48 LOAD_FAST 2 ( j )					  
							      52 LOAD_FAST 0 ( s )					    50 BINARY_SUBSCR						  
							      54 LOAD_FAST 2 ( j )					    52 LOAD_FAST 1 ( i )					  
							      56 BINARY_SUBSCR						    54 BINARY_SUBSCR						  
							      58 BINARY_ADD						    56 LOAD_FAST 1 ( i )					  
							      60 LOAD_FAST 0 ( s )					    58 BINARY_SUBSCR						  
							      62 LOAD_FAST 1 ( i )					    60 LOAD_FAST 1 ( i )					  
							      64 LOAD_CONST 1 ( 1 )					    62 BINARY_SUBSCR						  
							      66 BINARY_ADD						    64 LOAD_FAST 1 ( i )					  
							      68 LOAD_CONST 0 ( None )					    66 BINARY_SUBSCR						  
							      70 BUILD_SLICE 2						    68 LOAD_FAST 1 ( i )					  
							      72 BINARY_SUBSCR						    70 BINARY_SUBSCR						  
							      74 BINARY_ADD						    72 LOAD_FAST 1 ( i )					  
							      76 STORE_FAST 0 ( s )					    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 1 ( i )					  
							      6 78 LOAD_FAST 1 ( i )					    78 BINARY_SUBSCR						  
							      80 LOAD_CONST 1 ( 1 )					    80 LOAD_FAST 1 ( i )					  
							      82 INPLACE_SUBTRACT					    82 BINARY_SUBSCR						  
							      84 STORE_FAST 1 ( i )					    84 LOAD_FAST 1 ( i )					  
							      86 JUMP_ABSOLUTE 26					    86 BINARY_SUBSCR						  
							      >> 88 POP_BLOCK						    88 LOAD_FAST 1 ( i )					  
							      								    90 BINARY_SUBSCR						  
							      7 >> 90 SETUP_LOOP 52 ( to 144 )				    92 LOAD_FAST 1 ( i )					  
							      >> 92 LOAD_FAST 1 ( i )					    94 BINARY_SUBSCR						  
							      94 LOAD_CONST 4 ( 0 )					    96 LOAD_FAST 1 ( i )					  
							      96 COMPARE_OP 5 ( >= )					    98 BINARY_SUBSCR						  
							      98 POP_JUMP_IF_FALSE 142					    100 LOAD_FAST 1 ( i )					  
							      								    102 BINARY_SUBSCR						  
							      8 100 LOAD_FAST 0 ( s )					    104 LOAD_FAST 1 ( i )					  
							      102 LOAD_CONST 0 ( None )					    106 BINARY_SUBSCR						  
							      104 LOAD_FAST 1 ( i )					    108 LOAD_FAST 1 ( i )					  
							      106 BUILD_SLICE 2						    110 BINARY_SUBSCR						  
							      108 BINARY_SUBSCR						    112 LOAD_FAST 1 ( i )					  
							      110 LOAD_CONST 3 ( ' ' )					    114 STORE_SUBSCR						  
							      112 BINARY_ADD						    								  
							      114 LOAD_FAST 0 ( s )					    7 116 LOAD_FAST 0 ( s )					  
							      116 LOAD_FAST 1 ( i )					    118 LOAD_FAST 2 ( j )					  
							      118 LOAD_CONST 1 ( 1 )					    120 BINARY_SUBSCR						  
							      120 BINARY_ADD						    122 LOAD_FAST 1 ( i )					  
							      122 LOAD_CONST 0 ( None )					    124 BINARY_SUBSCR						  
							      124 BUILD_SLICE 2						    126 LOAD_FAST 1 ( i )					  
							      126 BINARY_SUBSCR						    128 BINARY_SUBSCR						  
							      128 BINARY_ADD						    130 LOAD_FAST 1 ( i )					  
							      130 STORE_FAST 0 ( s )					    132 STORE_SUBSCR						  
							      								    								  
							      9 132 LOAD_FAST 1 ( i )					    8 >> 134 LOAD_FAST 0 ( s )					  
							      134 LOAD_CONST 1 ( 1 )					    136 RETURN_VALUE NEW_LINE					  
							      136 INPLACE_SUBTRACT					    								  
							      138 STORE_FAST 1 ( i )					    								  
							      140 JUMP_ABSOLUTE 92					    								  
							      >> 142 POP_BLOCK						    								  
							      								    								  
							      10 >> 144 LOAD_FAST 0 ( s )				    								  
							      146 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE
--							      --							    --								  --
def find3Numbers ( A , arr_size , sum ) :		      Disassembly of <code object find3Numbers at 0x7f33e2649a50, f Disassembly of <code object find3Numbers at 0x7f2b0163dc90, f error : /bin/bash: line 1: 12739 Segmentation faul
    for i in range ( 0 , arr_size - 2 ) :		      2 0 SETUP_LOOP 136 ( to 138 )				    2 0 SETUP_LOOP 76 ( to 78 )					  t	 (core dumped) /home/ubuntu/anaconda3/envs/d
	for j in range ( i + 1 , arr_size - 1 ) :	      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  ataset/bin/python XLM/dis_script.py --script_path
	    for k in range ( j + 1 , arr_size ) :	      4 LOAD_CONST 1 ( 0 )					    4 LOAD_CONST 1 ( 0 )					  /home/ubuntu/TransCoder/models/eval/bt_sa/21z7a0p0
		if A [ i ] + A [ j ] + A [ k ] == sum :	      6 LOAD_FAST 1 ( arr_size )				    6 LOAD_FAST 1 ( arr_size )					  24/eval_scripts/python_sa-dis_sa.valid/FIND_A_TRIP
		    print ( "Triplet is" , A [ i ] , ", " , A 8 LOAD_CONST 2 ( 2 )					    8 LOAD_CONST 2 ( 1 )					  LET_THAT_SUM_TO_A_GIVEN_VALUE.dis
		    return True				      10 BINARY_SUBTRACT					    10 BINARY_SUBTRACT						  
    return False					      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
							      14 GET_ITER						    14 GET_ITER							  
							      >> 16 FOR_ITER 118 ( to 136 )				    >> 16 FOR_ITER 76 ( to 76 )					  
							      18 STORE_FAST 3 ( i )					    18 STORE_FAST 2 ( i )					  
							      								    								  
							      3 20 SETUP_LOOP 112 ( to 134 )				    3 20 SETUP_LOOP 64 ( to 74 )				  
							      22 LOAD_GLOBAL 0 ( range )				    22 LOAD_GLOBAL 0 ( range )					  
							      24 LOAD_FAST 3 ( i )					    24 LOAD_CONST 1 ( 0 )					  
							      26 LOAD_CONST 3 ( 1 )					    26 LOAD_FAST 2 ( i )					  
							      28 BINARY_ADD						    28 LOAD_CONST 2 ( 1 )					  
							      30 LOAD_FAST 1 ( arr_size )				    30 BINARY_SUBTRACT						  
							      32 LOAD_CONST 3 ( 1 )					    32 CALL_FUNCTION 2						  
							      34 BINARY_SUBTRACT					    34 GET_ITER							  
							      36 CALL_FUNCTION 2					    >> 36 FOR_ITER 48 ( to 72 )					  
							      38 GET_ITER						    38 STORE_FAST 3 ( i )					  
							      >> 40 FOR_ITER 90 ( to 132 )				    								  
							      42 STORE_FAST 4 ( j )					    4 40 LOAD_FAST 3 ( i )					  
							      								    42 LOAD_FAST 2 ( i )					  
							      4 44 SETUP_LOOP 84 ( to 130 )				    44 BINARY_SUBSCR						  
							      46 LOAD_GLOBAL 0 ( range )				    46 LOAD_METHOD 1 ( append )					  
							      48 LOAD_FAST 4 ( j )					    48 LOAD_FAST 3 ( i )					  
							      50 LOAD_CONST 3 ( 1 )					    50 LOAD_FAST 0 ( arr_size )					  
							      52 BINARY_ADD						    52 LOAD_CONST 2 ( 1 )					  
							      54 LOAD_FAST 1 ( arr_size )				    54 BINARY_SUBTRACT						  
							      56 CALL_FUNCTION 2					    56 BINARY_SUBSCR						  
							      58 GET_ITER						    58 CALL_METHOD 1						  
							      >> 60 FOR_ITER 66 ( to 128 )				    60 POP_TOP							  
							      62 STORE_FAST 5 ( k )					    								  
							      								    5 62 LOAD_FAST 3 ( i )					  
							      5 64 LOAD_FAST 0 ( A )					    64 LOAD_FAST 2 ( i )					  
							      66 LOAD_FAST 3 ( i )					    66 BINARY_SUBSCR						  
							      68 BINARY_SUBSCR						    68 LOAD_METHOD 1 ( append )					  
							      70 LOAD_FAST 0 ( A )					    70 LOAD_FAST 3 ( i )					  
							      72 LOAD_FAST 4 ( j )					    72 CALL_METHOD 1						  
							      74 BINARY_SUBSCR						    74 POP_TOP							  
							      76 BINARY_ADD						    								  
							      78 LOAD_FAST 0 ( A )					    6 76 LOAD_FAST 3 ( i )					  
							      80 LOAD_FAST 5 ( k )					    78 LOAD_FAST 2 ( i )					  
							      82 BINARY_SUBSCR						    80 BINARY_SUBSCR						  
							      84 BINARY_ADD						    82 LOAD_METHOD 1 ( append )					  
							      86 LOAD_FAST 2 ( sum )					    84 LOAD_FAST 3 ( i )					  
							      88 COMPARE_OP 2 ( == )					    86 LOAD_CONST 2 ( 1 )					  
							      90 POP_JUMP_IF_FALSE 60					    88 BINARY_SUBTRACT						  
							      								    90 BINARY_SUBSCR						  
							      6 92 LOAD_GLOBAL 1 ( print )				    92 CALL_METHOD 1						  
							      94 LOAD_CONST 4 ( 'Triplet is' )				    94 POP_TOP							  
							      96 LOAD_FAST 0 ( A )					    								  
							      98 LOAD_FAST 3 ( i )					    7 96 LOAD_FAST 3 ( i )					  
							      100 BINARY_SUBSCR						    98 LOAD_FAST 2 ( i )					  
							      102 LOAD_CONST 5 ( ', ' )					    100 BINARY_SUBSCR						  
							      104 LOAD_FAST 0 ( A )					    102 LOAD_METHOD 1 ( append )				  
							      106 LOAD_FAST 4 ( j )					    104 LOAD_FAST 3 ( i )					  
							      108 BINARY_SUBSCR						    106 CALL_METHOD 1						  
							      110 LOAD_CONST 5 ( ', ' )					    108 POP_TOP							  
							      112 LOAD_FAST 0 ( A )					    								  
							      114 LOAD_FAST 5 ( k )					    8 110 LOAD_FAST 3 ( i )					  
							      116 BINARY_SUBSCR						    112 LOAD_FAST 2 ( i )					  
							      118 CALL_FUNCTION 6					    114 BINARY_SUBSCR						  
							      120 POP_TOP						    116 LOAD_METHOD 1 ( append )				  
							      								    118 LOAD_FAST 3 ( i )					  
							      7 122 LOAD_CONST 6 ( True )				    120 LOAD_CONST 2 ( 1 )					  
							      124 RETURN_VALUE						    122 BINARY_SUBTRACT						  
							      126 JUMP_ABSOLUTE 60					    124 BINARY_SUBSCR						  
							      >> 128 POP_BLOCK						    126 LOAD_METHOD 1 ( append )				  
							      >> 130 JUMP_ABSOLUTE 40					    128 LOAD_FAST 3 ( i )					  
							      >> 132 POP_BLOCK						    130 CALL_METHOD 1						  
							      >> 134 JUMP_ABSOLUTE 16					    132 POP_TOP							  
							      >> 136 POP_BLOCK						    134 JUMP_ABSOLUTE 36					  
							      								    >> 136 POP_BLOCK						  
							      8 >> 138 LOAD_CONST 7 ( False )				    >> 138 JUMP_ABSOLUTE 16					  
							      140 RETURN_VALUE NEW_LINE					    >> 140 POP_BLOCK						  
							      								    >> 142 JUMP_ABSOLUTE 16					  
							      								    >> 144 POP_BLOCK						  
							      								    >> 146 LOAD_CONST 0 ( None )				  
							      								    148 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STOOGE_SORT						      STOOGE_SORT						    STOOGE_SORT							  STOOGE_SORT
--							      --							    --								  --
def stoogesort ( arr , l , h ) :			      Disassembly of <code object stoogesort at 0x7f33e2653f60, fil Disassembly of <code object stoogesort at 0x7f2b0163dc90, fil error : Traceback (most recent call last):   File
    if l >= h :						      2 0 LOAD_FAST 1 ( l )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 60, in <module>	exec
	return						      2 LOAD_FAST 2 ( h )					    2 LOAD_FAST 1 ( l )						  (item)   File "main.py", line 50, in <module>	  Fi
    if arr [ l ] > arr [ h ] :				      4 COMPARE_OP 5 ( >= )					    4 COMPARE_OP 5 ( >= )					  le "<dis>", line 2, in stoogesort TypeError: '>='
	t = arr [ l ]					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  not supported between instances of 'list' and 'int
	arr [ l ] = arr [ h ]				      								    								  '
	arr [ h ] = t					      3 8 LOAD_CONST 0 ( None )					    3 8 LOAD_FAST 0 ( arr )					  
    if h - l + 1 > 2 :					      10 RETURN_VALUE						    10 LOAD_FAST 1 ( l )					  
	t = ( int ) ( ( h - l + 1 ) / 3 )		      								    12 BINARY_SUBSCR						  
	stoogesort ( arr , l , ( h - t ) )		      4 >> 12 LOAD_FAST 0 ( arr )				    14 LOAD_CONST 1 ( 0 )					  
	stoogesort ( arr , l + t , ( h ) )		      14 LOAD_FAST 1 ( l )					    16 COMPARE_OP 4 ( > )					  
	stoogesort ( arr , l , ( h - t ) )		      16 BINARY_SUBSCR						    18 POP_JUMP_IF_FALSE 24					  
							      18 LOAD_FAST 0 ( arr )					    								  
							      20 LOAD_FAST 2 ( h )					    4 20 LOAD_FAST 0 ( arr )					  
							      22 BINARY_SUBSCR						    22 LOAD_FAST 1 ( l )					  
							      24 COMPARE_OP 4 ( > )					    24 BINARY_SUBSCR						  
							      26 POP_JUMP_IF_FALSE 56					    26 LOAD_CONST 2 ( 1 )					  
							      								    28 BINARY_SUBSCR						  
							      5 28 LOAD_FAST 0 ( arr )					    30 STORE_FAST 2 ( stoosort )				  
							      30 LOAD_FAST 1 ( l )					    								  
							      32 BINARY_SUBSCR						    5 32 LOAD_FAST 0 ( arr )					  
							      34 STORE_FAST 3 ( t )					    34 LOAD_FAST 1 ( l )					  
							      								    36 BINARY_SUBSCR						  
							      6 36 LOAD_FAST 0 ( arr )					    38 LOAD_CONST 3 ( 2 )					  
							      38 LOAD_FAST 2 ( h )					    40 BINARY_SUBSCR						  
							      40 BINARY_SUBSCR						    42 LOAD_CONST 4 ( 3 )					  
							      42 LOAD_FAST 0 ( arr )					    44 BINARY_SUBSCR						  
							      44 LOAD_FAST 1 ( l )					    46 LOAD_CONST 5 ( '' )					  
							      46 STORE_SUBSCR						    48 COMPARE_OP 2 ( == )					  
							      								    50 POP_JUMP_IF_FALSE 64					  
							      7 48 LOAD_FAST 3 ( t )					    								  
							      50 LOAD_FAST 0 ( arr )					    6 52 LOAD_FAST 0 ( arr )					  
							      52 LOAD_FAST 2 ( h )					    54 LOAD_FAST 1 ( l )					  
							      54 STORE_SUBSCR						    56 BINARY_SUBSCR						  
							      								    58 LOAD_CONST 6 ( 4 )					  
							      8 >> 56 LOAD_FAST 2 ( h )					    60 BINARY_SUBSCR						  
							      58 LOAD_FAST 1 ( l )					    62 LOAD_CONST 7 ( '' )					  
							      60 BINARY_SUBTRACT					    64 COMPARE_OP 2 ( == )					  
							      62 LOAD_CONST 1 ( 1 )					    66 POP_JUMP_IF_FALSE 64					  
							      64 BINARY_ADD						    								  
							      66 LOAD_CONST 2 ( 2 )					    7 68 LOAD_FAST 0 ( arr )					  
							      68 COMPARE_OP 4 ( > )					    70 LOAD_FAST 1 ( l )					  
							      70 POP_JUMP_IF_FALSE 140					    72 BINARY_SUBSCR						  
							      								    74 LOAD_CONST 8 ( '' )					  
							      9 72 LOAD_GLOBAL 0 ( int )				    76 COMPARE_OP 2 ( == )					  
							      74 LOAD_FAST 2 ( h )					    78 POP_JUMP_IF_FALSE 78					  
							      76 LOAD_FAST 1 ( l )					    								  
							      78 BINARY_SUBTRACT					    8 80 LOAD_FAST 0 ( arr )					  
							      80 LOAD_CONST 1 ( 1 )					    82 LOAD_FAST 1 ( l )					  
							      82 BINARY_ADD						    84 BINARY_SUBSCR						  
							      84 LOAD_CONST 3 ( 3 )					    86 LOAD_CONST 9 ( '' )					  
							      86 BINARY_TRUE_DIVIDE					    88 COMPARE_OP 2 ( == )					  
							      88 CALL_FUNCTION 1					    90 POP_JUMP_IF_FALSE 96					  
							      90 STORE_FAST 3 ( t )					    								  
							      								    9 92 LOAD_FAST 0 ( arr )					  
							      10 92 LOAD_GLOBAL 1 ( stoogesort )			    94 LOAD_FAST 1 ( l )					  
							      94 LOAD_FAST 0 ( arr )					    96 BINARY_SUBSCR						  
							      96 LOAD_FAST 1 ( l )					    98 LOAD_CONST 10 ( '' )					  
							      98 LOAD_FAST 2 ( h )					    100 COMPARE_OP 2 ( == )					  
							      100 LOAD_FAST 3 ( t )					    102 POP_JUMP_IF_FALSE 120					  
							      102 BINARY_SUBTRACT					    								  
							      104 CALL_FUNCTION 3					    10 104 LOAD_FAST 0 ( arr )					  
							      106 POP_TOP						    106 LOAD_FAST 1 ( l )					  
							      								    108 BINARY_SUBSCR						  
							      11 108 LOAD_GLOBAL 1 ( stoogesort )			    110 LOAD_CONST 11 ( '' )					  
							      110 LOAD_FAST 0 ( arr )					    112 COMPARE_OP 2 ( == )					  
							      112 LOAD_FAST 1 ( l )					    114 POP_JUMP_IF_FALSE 120					  
							      114 LOAD_FAST 3 ( t )					    								  
							      116 BINARY_ADD						    11 116 LOAD_FAST 0 ( arr )					  
							      118 LOAD_FAST 2 ( h )					    118 LOAD_FAST 1 ( l )					  
							      120 CALL_FUNCTION 3					    120 BINARY_SUBSCR						  
							      122 POP_TOP						    122 RETURN_VALUE						  
							      								    								  
							      12 124 LOAD_GLOBAL 1 ( stoogesort )			    12 >> 124 LOAD_FAST 0 ( arr )				  
							      126 LOAD_FAST 0 ( arr )					    126 LOAD_FAST 1 ( l )					  
							      128 LOAD_FAST 1 ( l )					    128 BINARY_SUBSCR						  
							      130 LOAD_FAST 2 ( h )					    130 RETURN_VALUE NEW_LINE					  
							      132 LOAD_FAST 3 ( t )					    								  
							      134 BINARY_SUBTRACT					    								  
							      136 CALL_FUNCTION 3					    								  
							      138 POP_TOP						    								  
							      >> 140 LOAD_CONST 0 ( None )				    								  
							      142 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			    FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1
--							      --							    --								  --
def CountTriangles ( A ) :				      Disassembly of <code object CountTriangles at 0x7f33e2653ed0, Disassembly of <code object CountTriangles at 0x7f2b0163dc90, script_not_found : None
    n = len ( A ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    A.sort ( ) ;					      2 LOAD_FAST 0 ( A )					    2 LOAD_FAST 0 ( A )						  
    count = 0 ;						      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
    for i in range ( n - 1 , 0 , - 1 ) :		      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	l = 0 ;						      								    								  
	r = i - 1 ;					      3 8 LOAD_FAST 0 ( A )					    3 8 LOAD_FAST 0 ( A )					  
	while ( l < r ) :				      10 LOAD_METHOD 1 ( sort )					    10 LOAD_METHOD 1 ( sort )					  
	    if ( A [ l ] + A [ r ] > A [ i ] ) :	      12 CALL_METHOD 0						    12 CALL_METHOD 0						  
		count += r - l ;			      14 POP_TOP						    14 POP_TOP							  
		r -= 1 ;				      								    								  
	    else :					      4 16 LOAD_CONST 1 ( 0 )					    4 16 LOAD_CONST 1 ( 0 )					  
		l += 1 ;				      18 STORE_FAST 2 ( count )					    18 STORE_FAST 2 ( count )					  
    print ( "No of possible solutions: " , count ) ;	      								    								  
							      5 20 SETUP_LOOP 104 ( to 126 )				    5 20 SETUP_LOOP 64 ( to 92 )				  
							      22 LOAD_GLOBAL 2 ( range )				    22 LOAD_GLOBAL 2 ( range )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 LOAD_CONST 2 ( 1 )					    26 LOAD_CONST 2 ( 1 )					  
							      28 BINARY_SUBTRACT					    28 BINARY_SUBTRACT						  
							      30 LOAD_CONST 1 ( 0 )					    30 CALL_FUNCTION 1						  
							      32 LOAD_CONST 3 ( - 1 )					    32 GET_ITER							  
							      34 CALL_FUNCTION 3					    >> 34 FOR_ITER 64 ( to 90 )					  
							      36 GET_ITER						    36 STORE_FAST 3 ( i )					  
							      >> 38 FOR_ITER 84 ( to 124 )				    								  
							      40 STORE_FAST 3 ( i )					    6 38 LOAD_FAST 0 ( A )					  
							      								    40 LOAD_FAST 3 ( i )					  
							      6 42 LOAD_CONST 1 ( 0 )					    42 BINARY_SUBSCR						  
							      44 STORE_FAST 4 ( l )					    44 LOAD_FAST 0 ( A )					  
							      								    46 LOAD_FAST 3 ( i )					  
							      7 46 LOAD_FAST 3 ( i )					    48 BINARY_SUBSCR						  
							      48 LOAD_CONST 2 ( 1 )					    50 LOAD_FAST 0 ( A )					  
							      50 BINARY_SUBTRACT					    52 LOAD_FAST 3 ( i )					  
							      52 STORE_FAST 5 ( r )					    54 BINARY_SUBSCR						  
							      								    56 BINARY_SUBTRACT						  
							      8 54 SETUP_LOOP 66 ( to 122 )				    58 LOAD_FAST 0 ( A )					  
							      >> 56 LOAD_FAST 4 ( l )					    60 LOAD_FAST 3 ( i )					  
							      58 LOAD_FAST 5 ( r )					    62 BINARY_SUBSCR						  
							      60 COMPARE_OP 0 ( < )					    64 BINARY_SUBTRACT						  
							      62 POP_JUMP_IF_FALSE 120					    66 LOAD_FAST 0 ( A )					  
							      								    68 LOAD_FAST 3 ( i )					  
							      9 64 LOAD_FAST 0 ( A )					    70 BINARY_SUBSCR						  
							      66 LOAD_FAST 4 ( l )					    72 BINARY_SUBTRACT						  
							      68 BINARY_SUBSCR						    74 LOAD_FAST 0 ( A )					  
							      70 LOAD_FAST 0 ( A )					    76 LOAD_FAST 3 ( i )					  
							      72 LOAD_FAST 5 ( r )					    78 BINARY_SUBSCR						  
							      74 BINARY_SUBSCR						    80 BINARY_SUBTRACT						  
							      76 BINARY_ADD						    82 LOAD_FAST 0 ( A )					  
							      78 LOAD_FAST 0 ( A )					    84 LOAD_FAST 3 ( i )					  
							      80 LOAD_FAST 3 ( i )					    86 BINARY_SUBSCR						  
							      82 BINARY_SUBSCR						    88 BINARY_SUBTRACT						  
							      84 COMPARE_OP 4 ( > )					    90 LOAD_FAST 0 ( A )					  
							      86 POP_JUMP_IF_FALSE 110					    92 LOAD_FAST 3 ( i )					  
							      								    94 BINARY_SUBSCR						  
							      10 88 LOAD_FAST 2 ( count )				    96 BINARY_SUBTRACT						  
							      90 LOAD_FAST 5 ( r )					    98 LOAD_FAST 0 ( A )					  
							      92 LOAD_FAST 4 ( l )					    100 LOAD_FAST 3 ( i )					  
							      94 BINARY_SUBTRACT					    102 BINARY_SUBSCR						  
							      96 INPLACE_ADD						    104 BINARY_SUBTRACT						  
							      98 STORE_FAST 2 ( count )					    106 LOAD_FAST 0 ( A )					  
							      								    108 LOAD_FAST 3 ( i )					  
							      11 100 LOAD_FAST 5 ( r )					    110 BINARY_SUBSCR						  
							      102 LOAD_CONST 2 ( 1 )					    112 BINARY_SUBTRACT						  
							      104 INPLACE_SUBTRACT					    114 LOAD_FAST 0 ( A )					  
							      106 STORE_FAST 5 ( r )					    116 LOAD_FAST 3 ( i )					  
							      108 JUMP_ABSOLUTE 56					    118 BINARY_SUBSCR						  
							      								    120 BINARY_SUBTRACT						  
							      13 >> 110 LOAD_FAST 4 ( l )				    122 LOAD_FAST 0 ( A )					  
							      112 LOAD_CONST 2 ( 1 )					    124 LOAD_FAST 3 ( i )					  
							      114 INPLACE_ADD						    126 BINARY_SUBSCR						  
							      116 STORE_FAST 4 ( l )					    128 BINARY_SUBTRACT						  
							      118 JUMP_ABSOLUTE 56					    130 LOAD_FAST 0 ( A )					  
							      >> 120 POP_BLOCK						    132 LOAD_FAST 3 ( i )					  
							      >> 122 JUMP_ABSOLUTE 38					    134 BINARY_SUBSCR						  
							      >> 124 POP_BLOCK						    136 BINARY_SUBTRACT						  
							      								    138 LOAD_FAST 0 ( A )					  
							      14 >> 126 LOAD_GLOBAL 3 ( print )				    140 LOAD_FAST 3 ( i )					  
							      128 LOAD_CONST 4 ( 'No of possible solutions: ' )		    142 STORE_SUBSCR						  
							      130 LOAD_FAST 2 ( count )					    								  
							      132 CALL_FUNCTION 2					    7 144 LOAD_FAST 0 ( A )					  
							      134 POP_TOP						    146 LOAD_FAST 3 ( i )					  
							      136 LOAD_CONST 0 ( None )					    148 BINARY_SUBSCR						  
							      138 RETURN_VALUE NEW_LINE					    150 LOAD_FAST 0 ( A )					  
							      								    152 LOAD_FAST 3 ( i )					  
							      								    154 STORE_SUBSCR						  
							      								    								  
							      								    8 156 LOAD_FAST 0 ( A )					  
							      								    158 LOAD_FAST 3 ( i )					  
							      								    160 STORE_SUBSCR						  
							      								    								  
							      								    9 162 LOAD_FAST 0 ( A )					  
							      								    164 LOAD_FAST 3 ( i )					  
							      								    166 STORE_SUBSCR						  
							      								    								  
							      								    10 168 LOAD_FAST 0 ( A )					  
							      								    170 LOAD_FAST 3 ( i )					  
							      								    172 STORE_SUBSCR						  
							      								    								  
							      								    11 174 LOAD_FAST 0 ( A )					  
							      								    176								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_REPEATING_AND_A_MISSING_NUMBER			      FIND_A_REPEATING_AND_A_MISSING_NUMBER			    FIND_A_REPEATING_AND_A_MISSING_NUMBER			  FIND_A_REPEATING_AND_A_MISSING_NUMBER
--							      --							    --								  --
def printTwoElements ( arr , size ) :			      Disassembly of <code object printTwoElements at 0x7f33e26494b Disassembly of <code object printTwoElements at 0x7f2b0163dc9 script_not_found : None
    for i in range ( size ) :				      2 0 SETUP_LOOP 98 ( to 100 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	if arr [ abs ( arr [ i ] ) - 1 ] > 0 :		      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	    arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr 4 LOAD_FAST 1 ( size )					    4 LOAD_FAST 1 ( size )					  
	else :						      6 CALL_FUNCTION 1						    6 CALL_FUNCTION 1						  
	    print ( "The repeating element is" , abs ( arr [  8 GET_ITER						    8 GET_ITER							  
    for i in range ( size ) :				      >> 10 FOR_ITER 86 ( to 98 )				    >> 10 FOR_ITER 68 ( to 76 )					  
	if arr [ i ] > 0 :				      12 STORE_FAST 2 ( i )					    12 STORE_FAST 2 ( i )					  
	    print ( "and the missing element is" , i + 1 )    								    								  
							      3 14 LOAD_FAST 0 ( arr )					    3 14 LOAD_FAST 2 ( i )					  
							      16 LOAD_GLOBAL 1 ( abs )					    16 LOAD_FAST 0 ( arr )					  
							      18 LOAD_FAST 0 ( arr )					    18 LOAD_FAST 2 ( i )					  
							      20 LOAD_FAST 2 ( i )					    20 BINARY_SUBSCR						  
							      22 BINARY_SUBSCR						    22 LOAD_CONST 1 ( 0 )					  
							      24 CALL_FUNCTION 1					    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 1 ( 1 )					    26 COMPARE_OP 4 ( > )					  
							      28 BINARY_SUBTRACT					    28 POP_JUMP_IF_FALSE 10					  
							      30 BINARY_SUBSCR						    								  
							      32 LOAD_CONST 2 ( 0 )					    4 30 LOAD_FAST 2 ( i )					  
							      34 COMPARE_OP 4 ( > )					    32 LOAD_FAST 0 ( arr )					  
							      36 POP_JUMP_IF_FALSE 78					    34 LOAD_FAST 2 ( i )					  
							      								    36 BINARY_SUBSCR						  
							      4 38 LOAD_FAST 0 ( arr )					    38 LOAD_CONST 2 ( 1 )					  
							      40 LOAD_GLOBAL 1 ( abs )					    40 BINARY_SUBSCR						  
							      42 LOAD_FAST 0 ( arr )					    42 COMPARE_OP 4 ( > )					  
							      44 LOAD_FAST 2 ( i )					    44 POP_JUMP_IF_FALSE 10					  
							      46 BINARY_SUBSCR						    								  
							      48 CALL_FUNCTION 1					    5 46 LOAD_FAST 2 ( i )					  
							      50 LOAD_CONST 1 ( 1 )					    48 LOAD_FAST 0 ( arr )					  
							      52 BINARY_SUBTRACT					    50 LOAD_FAST 2 ( i )					  
							      54 BINARY_SUBSCR						    52 BINARY_SUBSCR						  
							      56 UNARY_NEGATIVE						    54 LOAD_CONST 2 ( 1 )					  
							      58 LOAD_FAST 0 ( arr )					    56 BINARY_SUBSCR						  
							      60 LOAD_GLOBAL 1 ( abs )					    58 COMPARE_OP 4 ( > )					  
							      62 LOAD_FAST 0 ( arr )					    60 POP_JUMP_IF_FALSE 10					  
							      64 LOAD_FAST 2 ( i )					    								  
							      66 BINARY_SUBSCR						    6 62 LOAD_FAST 2 ( i )					  
							      68 CALL_FUNCTION 1					    64 LOAD_FAST 0 ( arr )					  
							      70 LOAD_CONST 1 ( 1 )					    66 LOAD_FAST 2 ( i )					  
							      72 BINARY_SUBTRACT					    68 BINARY_SUBSCR						  
							      74 STORE_SUBSCR						    70 LOAD_CONST 2 ( 1 )					  
							      76 JUMP_ABSOLUTE 10					    72 BINARY_SUBSCR						  
							      								    74 COMPARE_OP 4 ( > )					  
							      6 >> 78 LOAD_GLOBAL 2 ( print )				    76 POP_JUMP_IF_FALSE 10					  
							      80 LOAD_CONST 3 ( 'The repeating element is' )		    								  
							      82 LOAD_GLOBAL 1 ( abs )					    7 78 LOAD_FAST 2 ( i )					  
							      84 LOAD_FAST 0 ( arr )					    80 LOAD_FAST 0 ( arr )					  
							      86 LOAD_FAST 2 ( i )					    82 LOAD_FAST 2 ( i )					  
							      88 BINARY_SUBSCR						    84 BINARY_SUBSCR						  
							      90 CALL_FUNCTION 1					    86 LOAD_CONST 2 ( 1 )					  
							      92 CALL_FUNCTION 2					    88 BINARY_SUBSCR						  
							      94 POP_TOP						    90 COMPARE_OP 4 ( > )					  
							      96 JUMP_ABSOLUTE 10					    92 POP_JUMP_IF_FALSE 10					  
							      >> 98 POP_BLOCK						    								  
							      								    8 94 LOAD_FAST 2 ( i )					  
							      7 >> 100 SETUP_LOOP 42 ( to 144 )				    96 LOAD_FAST 0 ( arr )					  
							      102 LOAD_GLOBAL 0 ( range )				    98 LOAD_FAST 2 ( i )					  
							      104 LOAD_FAST 1 ( size )					    100 BINARY_SUBSCR						  
							      106 CALL_FUNCTION 1					    102 LOAD_CONST 2 ( 1 )					  
							      108 GET_ITER						    104 BINARY_SUBSCR						  
							      >> 110 FOR_ITER 30 ( to 142 )				    106 LOAD_FAST 2 ( i )					  
							      112 STORE_FAST 2 ( i )					    108 BINARY_SUBSCR						  
							      								    110 LOAD_CONST 2 ( 1 )					  
							      8 114 LOAD_FAST 0 ( arr )					    112 BINARY_SUBSCR						  
							      116 LOAD_FAST 2 ( i )					    114 LOAD_FAST 2 ( i )					  
							      118 BINARY_SUBSCR						    116 BINARY_SUBSCR						  
							      120 LOAD_CONST 2 ( 0 )					    118 LOAD_CONST 2 ( 1 )					  
							      122 COMPARE_OP 4 ( > )					    120 BINARY_SUBSCR						  
							      124 POP_JUMP_IF_FALSE 110					    122 LOAD_FAST 2 ( i )					  
							      								    124 BINARY_SUBSCR						  
							      9 126 LOAD_GLOBAL 2 ( print )				    126 LOAD_CONST 2 ( 1 )					  
							      128 LOAD_CONST 4 ( 'and the missing element is' )		    128 BINARY_SUBSCR						  
							      130 LOAD_FAST 2 ( i )					    130 LOAD_FAST 2 ( i )					  
							      132 LOAD_CONST 1 ( 1 )					    132 STORE_SUBSCR						  
							      134 BINARY_ADD						    								  
							      136 CALL_FUNCTION 2					    9 134 LOAD_FAST 2 ( i )					  
							      138 POP_TOP						    136 RETURN_VALUE						  
							      140 JUMP_ABSOLUTE 110					    >> 138 JUMP_ABSOLUTE 10					  
							      >> 142 POP_BLOCK						    >> 140 POP_BLOCK						  
							      >> 144 LOAD_CONST 0 ( None )				    >> 142 LOAD_CONST 0 ( None )				  
							      146 RETURN_VALUE NEW_LINE					    144 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
JUMP_SEARCH						      JUMP_SEARCH						    JUMP_SEARCH							  JUMP_SEARCH
--							      --							    --								  --
def jumpSearch ( arr , x , n ) :			      Disassembly of <code object jumpSearch at 0x7f33e2644930, fil Disassembly of <code object jumpSearch at 0x7f2b0163dc90, fil script_not_found : None
    step = math.sqrt ( n )				      2 0 LOAD_GLOBAL 0 ( math )				    2 0 LOAD_GLOBAL 0 ( math )					  
    prev = 0						      2 LOAD_METHOD 1 ( sqrt )					    2 LOAD_METHOD 1 ( sqrt )					  
    while arr [ int ( min ( step , n ) - 1 ) ] < x :	      4 LOAD_FAST 2 ( n )					    4 LOAD_FAST 0 ( arr )					  
	prev = step					      6 CALL_METHOD 1						    6 CALL_METHOD 1						  
	step += math.sqrt ( n )				      8 STORE_FAST 3 ( step )					    8 STORE_FAST 2 ( step )					  
	if prev >= n :					      								    								  
	    return - 1					      3 10 LOAD_CONST 1 ( 0 )					    3 10 LOAD_CONST 1 ( 0 )					  
    while arr [ int ( prev ) ] < x :			      12 STORE_FAST 4 ( prev )					    12 STORE_FAST 3 ( prev )					  
	prev += 1					      								    								  
	if prev == min ( step , n ) :			      4 14 SETUP_LOOP 60 ( to 76 )				    4 14 SETUP_LOOP 54 ( to 72 )				  
	    return - 1					      >> 16 LOAD_FAST 0 ( arr )					    >> 16 LOAD_FAST 2 ( step )					  
    if arr [ int ( prev ) ] == x :			      18 LOAD_GLOBAL 2 ( int )					    18 LOAD_GLOBAL 0 ( math )					  
	return prev					      20 LOAD_GLOBAL 3 ( min )					    20 LOAD_METHOD 1 ( sqrt )					  
    return - 1						      22 LOAD_FAST 3 ( step )					    22 LOAD_FAST 0 ( arr )					  
							      24 LOAD_FAST 2 ( n )					    24 LOAD_FAST 1 ( x )					  
							      26 CALL_FUNCTION 2					    26 CALL_METHOD 2						  
							      28 LOAD_CONST 2 ( 1 )					    28 CALL_FUNCTION 1						  
							      30 BINARY_SUBTRACT					    30 COMPARE_OP 0 ( < )					  
							      32 CALL_FUNCTION 1					    32 POP_JUMP_IF_FALSE 46					  
							      34 BINARY_SUBSCR						    								  
							      36 LOAD_FAST 1 ( x )					    5 34 LOAD_FAST 3 ( prev )					  
							      38 COMPARE_OP 0 ( < )					    36 LOAD_GLOBAL 0 ( math )					  
							      40 POP_JUMP_IF_FALSE 74					    38 LOAD_METHOD 1 ( sqrt )					  
							      								    40 LOAD_FAST 0 ( arr )					  
							      5 42 LOAD_FAST 3 ( step )					    42 LOAD_FAST 1 ( x )					  
							      44 STORE_FAST 4 ( prev )					    44 CALL_METHOD 2						  
							      								    46 CALL_FUNCTION 1						  
							      6 46 LOAD_FAST 3 ( step )					    48 INPLACE_ADD						  
							      48 LOAD_GLOBAL 0 ( math )					    50 STORE_FAST 3 ( prev )					  
							      50 LOAD_METHOD 1 ( sqrt )					    								  
							      52 LOAD_FAST 2 ( n )					    6 >> 52 LOAD_FAST 3 ( prev )				  
							      54 CALL_METHOD 1						    54 LOAD_GLOBAL 0 ( math )					  
							      56 INPLACE_ADD						    56 LOAD_METHOD 1 ( sqrt )					  
							      58 STORE_FAST 3 ( step )					    58 LOAD_FAST 0 ( arr )					  
							      								    60 LOAD_FAST 1 ( x )					  
							      7 60 LOAD_FAST 4 ( prev )					    62 CALL_METHOD 2						  
							      62 LOAD_FAST 2 ( n )					    64 INPLACE_ADD						  
							      64 COMPARE_OP 5 ( >= )					    66 STORE_FAST 3 ( prev )					  
							      66 POP_JUMP_IF_FALSE 16					    								  
							      								    7 68 LOAD_FAST 3 ( prev )					  
							      8 68 LOAD_CONST 3 ( - 1 )					    70 LOAD_GLOBAL 0 ( math )					  
							      70 RETURN_VALUE						    72 LOAD_METHOD 1 ( sqrt )					  
							      72 JUMP_ABSOLUTE 16					    74 LOAD_FAST 0 ( arr )					  
							      >> 74 POP_BLOCK						    76 LOAD_FAST 1 ( x )					  
							      								    78 CALL_METHOD 2						  
							      9 >> 76 SETUP_LOOP 46 ( to 124 )				    80 INPLACE_ADD						  
							      >> 78 LOAD_FAST 0 ( arr )					    82 STORE_FAST 3 ( prev )					  
							      80 LOAD_GLOBAL 2 ( int )					    84 JUMP_ABSOLUTE 16						  
							      82 LOAD_FAST 4 ( prev )					    >> 86 POP_BLOCK						  
							      84 CALL_FUNCTION 1					    								  
							      86 BINARY_SUBSCR						    8 >> 88 LOAD_FAST 3 ( prev )				  
							      88 LOAD_FAST 1 ( x )					    90 RETURN_VALUE NEW_LINE					  
							      90 COMPARE_OP 0 ( < )					    								  
							      92 POP_JUMP_IF_FALSE 122					    								  
							      								    								  
							      10 94 LOAD_FAST 4 ( prev )				    								  
							      96 LOAD_CONST 2 ( 1 )					    								  
							      98 INPLACE_ADD						    								  
							      100 STORE_FAST 4 ( prev )					    								  
							      								    								  
							      11 102 LOAD_FAST 4 ( prev )				    								  
							      104 LOAD_GLOBAL 3 ( min )					    								  
							      106 LOAD_FAST 3 ( step )					    								  
							      108 LOAD_FAST 2 ( n )					    								  
							      110 CALL_FUNCTION 2					    								  
							      112 COMPARE_OP 2 ( == )					    								  
							      114 POP_JUMP_IF_FALSE 78					    								  
							      								    								  
							      12 116 LOAD_CONST 3 ( - 1 )				    								  
							      118 RETURN_VALUE						    								  
							      120 JUMP_ABSOLUTE 78					    								  
							      >> 122 POP_BLOCK						    								  
							      								    								  
							      13 >> 124 LOAD_FAST 0 ( arr )				    								  
							      126 LOAD_GLOBAL 2 ( int )					    								  
							      128 LOAD_FAST 4 ( prev )					    								  
							      130 CALL_FUNCTION 1					    								  
							      132 BINARY_SUBSCR						    								  
							      134 LOAD_FAST 1 ( x )					    								  
							      136 COMPARE_OP 2 ( == )					    								  
							      138 POP_JUMP_IF_FALSE 144					    								  
							      								    								  
							      14 140 LOAD_FAST 4 ( prev )				    								  
							      142 RETURN_VALUE						    								  
							      								    								  
							      15 >> 144 LOAD_CONST 3 ( - 1 )				    								  
							      146 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			      CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			    CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS			  CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS
--							      --							    --								  --
def isPermutedMatrix ( mat , n ) :			      Disassembly of <code object isPermutedMatrix at 0x7f33e2644f6 Disassembly of <code object isPermutedMatrix at 0x7f2b0163966 script_not_found : None
    str_cat = ""					      2 0 LOAD_CONST 1 ( '' )					    2 0 LOAD_CONST 1 ( '' )					  
    for i in range ( n ) :				      2 STORE_FAST 2 ( str_cat )				    2 STORE_FAST 2 ( str_cat )					  
	str_cat = str_cat + "-" + str ( mat [ 0 ] [ i ] )     								    								  
    str_cat = str_cat + str_cat				      3 4 SETUP_LOOP 40 ( to 46 )				    3 4 SETUP_LOOP 64 ( to 66 )					  
    for i in range ( 1 , n ) :				      6 LOAD_GLOBAL 0 ( range )					    6 LOAD_GLOBAL 0 ( range )					  
	curr_str = ""					      8 LOAD_FAST 1 ( n )					    8 LOAD_FAST 1 ( n )						  
	for j in range ( n ) :				      10 CALL_FUNCTION 1					    10 CALL_FUNCTION 1						  
	    curr_str = curr_str + "-" + str ( mat [ i ] [ j ] 12 GET_ITER						    12 GET_ITER							  
	if ( str_cat.find ( curr_str ) ) :		      >> 14 FOR_ITER 28 ( to 44 )				    >> 14 FOR_ITER 64 ( to 64 )					  
	    return True					      16 STORE_FAST 3 ( i )					    16 STORE_FAST 3 ( i )					  
    return False					      								    								  
							      4 18 LOAD_FAST 2 ( str_cat )				    4 18 LOAD_FAST 0 ( mat )					  
							      20 LOAD_CONST 2 ( '-' )					    20 LOAD_FAST 3 ( i )					  
							      22 BINARY_ADD						    22 BINARY_SUBSCR						  
							      24 LOAD_GLOBAL 1 ( str )					    24 LOAD_CONST 2 ( '' )					  
							      26 LOAD_FAST 0 ( mat )					    26 COMPARE_OP 2 ( == )					  
							      28 LOAD_CONST 3 ( 0 )					    28 POP_JUMP_IF_FALSE 14					  
							      30 BINARY_SUBSCR						    								  
							      32 LOAD_FAST 3 ( i )					    5 30 LOAD_FAST 2 ( str_cat )				  
							      34 BINARY_SUBSCR						    32 LOAD_FAST 3 ( i )					  
							      36 CALL_FUNCTION 1					    34 BINARY_SUBSCR						  
							      38 BINARY_ADD						    36 STORE_FAST 4 ( cat )					  
							      40 STORE_FAST 2 ( str_cat )				    								  
							      42 JUMP_ABSOLUTE 14					    6 38 LOAD_FAST 0 ( mat )					  
							      >> 44 POP_BLOCK						    40 LOAD_FAST 3 ( i )					  
							      								    42 BINARY_SUBSCR						  
							      5 >> 46 LOAD_FAST 2 ( str_cat )				    44 STORE_FAST 5 ( cat )					  
							      48 LOAD_FAST 2 ( str_cat )				    								  
							      50 BINARY_ADD						    7 46 LOAD_FAST 0 ( mat )					  
							      52 STORE_FAST 2 ( str_cat )				    48 LOAD_FAST 5 ( cat )					  
							      								    50 BINARY_SUBSCR						  
							      6 54 SETUP_LOOP 78 ( to 134 )				    52 LOAD_CONST 3 ( '' )					  
							      56 LOAD_GLOBAL 0 ( range )				    54 COMPARE_OP 2 ( == )					  
							      58 LOAD_CONST 4 ( 1 )					    56 POP_JUMP_IF_FALSE 14					  
							      60 LOAD_FAST 1 ( n )					    								  
							      62 CALL_FUNCTION 2					    8 58 LOAD_FAST 0 ( mat )					  
							      64 GET_ITER						    60 LOAD_FAST 5 ( cat )					  
							      >> 66 FOR_ITER 64 ( to 132 )				    62 BINARY_SUBSCR						  
							      68 STORE_FAST 3 ( i )					    64 LOAD_CONST 4 ( '' )					  
							      								    66 COMPARE_OP 2 ( == )					  
							      7 70 LOAD_CONST 1 ( '' )					    68 POP_JUMP_IF_FALSE 14					  
							      72 STORE_FAST 4 ( curr_str )				    								  
							      								    9 70 LOAD_FAST 0 ( mat )					  
							      8 74 SETUP_LOOP 40 ( to 116 )				    72 LOAD_FAST 5 ( cat )					  
							      76 LOAD_GLOBAL 0 ( range )				    74 BINARY_SUBSCR						  
							      78 LOAD_FAST 1 ( n )					    76 LOAD_CONST 5 ( '' )					  
							      80 CALL_FUNCTION 1					    78 COMPARE_OP 2 ( == )					  
							      82 GET_ITER						    80 POP_JUMP_IF_FALSE 14					  
							      >> 84 FOR_ITER 28 ( to 114 )				    								  
							      86 STORE_FAST 5 ( j )					    10 82 LOAD_FAST 0 ( mat )					  
							      								    84 LOAD_FAST 5 ( cat )					  
							      9 88 LOAD_FAST 4 ( curr_str )				    86 BINARY_SUBSCR						  
							      90 LOAD_CONST 2 ( '-' )					    88 LOAD_CONST 6 ( '' )					  
							      92 BINARY_ADD						    90 COMPARE_OP 2 ( == )					  
							      94 LOAD_GLOBAL 1 ( str )					    92 POP_JUMP_IF_FALSE 14					  
							      96 LOAD_FAST 0 ( mat )					    								  
							      98 LOAD_FAST 3 ( i )					    11 94 LOAD_FAST 0 ( mat )					  
							      100 BINARY_SUBSCR						    96 LOAD_FAST 5 ( cat )					  
							      102 LOAD_FAST 5 ( j )					    98 BINARY_SUBSCR						  
							      104 BINARY_SUBSCR						    100 RETURN_VALUE						  
							      106 CALL_FUNCTION 1					    >> 102 JUMP_ABSOLUTE 14					  
							      108 BINARY_ADD						    >> 104 POP_BLOCK						  
							      110 STORE_FAST 4 ( curr_str )				    								  
							      112 JUMP_ABSOLUTE 84					    12 >> 106 LOAD_FAST 0 ( mat )				  
							      >> 114 POP_BLOCK						    108 RETURN_VALUE NEW_LINE					  
							      								    								  
							      10 >> 116 LOAD_FAST 2 ( str_cat )				    								  
							      118 LOAD_METHOD 2 ( find )				    								  
							      120 LOAD_FAST 4 ( curr_str )				    								  
							      122 CALL_METHOD 1						    								  
							      124 POP_JUMP_IF_FALSE 66					    								  
							      								    								  
							      11 126 LOAD_CONST 5 ( True )				    								  
							      128 RETURN_VALUE						    								  
							      130 JUMP_ABSOLUTE 66					    								  
							      >> 132 POP_BLOCK						    								  
							      								    								  
							      12 >> 134 LOAD_CONST 6 ( False )				    								  
							      136 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FITTING_SHELVES_PROBLEM					      FITTING_SHELVES_PROBLEM					    FITTING_SHELVES_PROBLEM					  FITTING_SHELVES_PROBLEM
--							      --							    --								  --
def minSpacePreferLarge ( w , m , n ) :			      Disassembly of <code object minSpacePreferLarge at 0x7f33e264 Disassembly of <code object minSpacePreferLLge at 0x7f2b0163d script_not_found : None
    num_m = 0						      2 0 LOAD_CONST 1 ( 0 )					    2 0 LOAD_CONST 1 ( 0 )					  
    num_n = 0						      2 STORE_FAST 3 ( num_m )					    2 STORE_FAST 2 ( num_count )				  
    rem = w						      								    								  
    p = 0						      3 4 LOAD_CONST 1 ( 0 )					    3 4 LOAD_CONST 1 ( 0 )					  
    q = 0						      6 STORE_FAST 4 ( num_n )					    6 STORE_FAST 3 ( p )					  
    r = 0						      								    								  
    while ( w >= n ) :					      4 8 LOAD_FAST 0 ( w )					    4 8 LOAD_CONST 1 ( 0 )					  
	p = w / m					      10 STORE_FAST 5 ( rem )					    10 STORE_FAST 4 ( q )					  
	r = w % m					      								    								  
	if ( r <= rem ) :				      5 12 LOAD_CONST 1 ( 0 )					    5 12 LOAD_CONST 1 ( 0 )					  
	    num_m = p					      14 STORE_FAST 6 ( p )					    14 STORE_FAST 5 ( q )					  
	    num_n = q					      								    								  
	    rem = r					      6 16 LOAD_CONST 1 ( 0 )					    6 16 SETUP_LOOP 64 ( to 98 )				  
	q += 1						      18 STORE_FAST 7 ( q )					    18 LOAD_FAST 0 ( w )					  
	w -= n						      								    20 GET_ITER							  
    print ( str ( int ( num_m ) ) + " " + str ( num_n ) + " " 7 20 LOAD_CONST 1 ( 0 )					    >> 22 FOR_ITER 64 ( to 96 )					  
							      22 STORE_FAST 8 ( r )					    24 STORE_FAST 6 ( i )					  
							      								    								  
							      8 24 SETUP_LOOP 64 ( to 90 )				    7 26 LOAD_FAST 1 ( p )					  
							      >> 26 LOAD_FAST 0 ( w )					    28 LOAD_FAST 6 ( i )					  
							      28 LOAD_FAST 2 ( n )					    30 COMPARE_OP 4 ( > )					  
							      30 COMPARE_OP 5 ( >= )					    32 POP_JUMP_IF_FALSE 42					  
							      32 POP_JUMP_IF_FALSE 88					    								  
							      								    8 34 LOAD_FAST 1 ( p )					  
							      9 34 LOAD_FAST 0 ( w )					    36 LOAD_FAST 6 ( i )					  
							      36 LOAD_FAST 1 ( m )					    38 BINARY_SUBSCR						  
							      38 BINARY_TRUE_DIVIDE					    40 STORE_FAST 7 ( p )					  
							      40 STORE_FAST 6 ( p )					    								  
							      								    9 >> 42 LOAD_FAST 1 ( p )					  
							      10 42 LOAD_FAST 0 ( w )					    44 LOAD_FAST 7 ( p )					  
							      44 LOAD_FAST 1 ( m )					    46 COMPARE_OP 4 ( > )					  
							      46 BINARY_MODULO						    48 POP_JUMP_IF_FALSE 22					  
							      48 STORE_FAST 8 ( r )					    								  
							      								    10 50 LOAD_FAST 1 ( p )					  
							      11 50 LOAD_FAST 8 ( r )					    52 LOAD_FAST 7 ( p )					  
							      52 LOAD_FAST 5 ( rem )					    54 COMPARE_OP 4 ( > )					  
							      54 COMPARE_OP 1 ( <= )					    56 POP_JUMP_IF_FALSE 22					  
							      56 POP_JUMP_IF_FALSE 70					    								  
							      								    11 58 LOAD_FAST 1 ( p )					  
							      12 58 LOAD_FAST 6 ( p )					    60 LOAD_FAST 7 ( p )					  
							      60 STORE_FAST 3 ( num_m )					    62 COMPARE_OP 4 ( > )					  
							      								    64 POP_JUMP_IF_FALSE 22					  
							      13 62 LOAD_FAST 7 ( q )					    								  
							      64 STORE_FAST 4 ( num_n )					    12 66 LOAD_FAST 1 ( p )					  
							      								    68 LOAD_FAST 7 ( p )					  
							      14 66 LOAD_FAST 8 ( r )					    70 INPLACE_ADD						  
							      68 STORE_FAST 5 ( rem )					    72 STORE_FAST 7 ( p )					  
							      								    								  
							      15 >> 70 LOAD_FAST 7 ( q )				    13 74 LOAD_FAST 1 ( p )					  
							      72 LOAD_CONST 2 ( 1 )					    76 LOAD_FAST 7 ( p )					  
							      74 INPLACE_ADD						    78 INPLACE_ADD						  
							      76 STORE_FAST 7 ( q )					    80 STORE_FAST 1 ( p )					  
							      								    								  
							      16 78 LOAD_FAST 0 ( w )					    14 82 LOAD_FAST 1 ( p )					  
							      80 LOAD_FAST 2 ( n )					    84 LOAD_FAST 7 ( p )					  
							      82 INPLACE_SUBTRACT					    86 INPLACE_ADD						  
							      84 STORE_FAST 0 ( w )					    88 STORE_FAST 1 ( p )					  
							      86 JUMP_ABSOLUTE 26					    								  
							      >> 88 POP_BLOCK						    15 90 LOAD_FAST 1 ( p )					  
							      								    92 LOAD_FAST 7 ( p )					  
							      17 >> 90 LOAD_GLOBAL 0 ( print )				    94 INPLACE_ADD						  
							      92 LOAD_GLOBAL 1 ( str )					    96 STORE_FAST 1 ( p )					  
							      94 LOAD_GLOBAL 2 ( int )					    98 JUMP_ABSOLUTE 22						  
							      96 LOAD_FAST 3 ( num_m )					    >> 100 POP_BLOCK						  
							      98 CALL_FUNCTION 1					    								  
							      100 CALL_FUNCTION 1					    16 >> 102 LOAD_FAST 2 ( num_count )				  
							      102 LOAD_CONST 3 ( ' ' )					    104 LOAD_FAST 3 ( p )					  
							      104 BINARY_ADD						    106 LOAD_FAST 4 ( q )					  
							      106 LOAD_GLOBAL 1 ( str )					    108 BINARY_SUBTRACT						  
							      108 LOAD_FAST 4 ( num_n )					    110 STORE_FAST 2 ( num_count )				  
							      110 CALL_FUNCTION 1					    								  
							      112 BINARY_ADD						    17 112 LOAD_FAST 3 ( p )					  
							      114 LOAD_CONST 3 ( ' ' )					    114 LOAD_FAST 4 ( q )					  
							      116 BINARY_ADD						    116 BINARY_SUBTRACT						  
							      118 LOAD_GLOBAL 1 ( str )					    118 STORE_FAST 3 ( p )					  
							      120 LOAD_FAST 5 ( rem )					    								  
							      122 CALL_FUNCTION 1					    18 120 LOAD_FAST 3 ( p )					  
							      124 BINARY_ADD						    122 LOAD_FAST 4 ( q )					  
							      126 CALL_FUNCTION 1					    124 BINARY_SUBTRACT						  
							      128 POP_TOP						    126 LOAD_FAST 1 ( p )					  
							      130 LOAD_CONST 0 ( None )					    128 BINARY_SUBTRACT						  
							      132 RETURN_VALUE NEW_LINE					    130 LOAD_FAST 2 ( num_count )				  
							      								    132 BINARY_SUBTRACT						  
							      								    134 LOAD_FAST 3 ( p )					  
							      								    136 BINARY_SUBTRACT						  
							      								    138 BINARY_MULTIPLY						  
							      								    140 BINARY_SUBTRACT						  
							      								    142 STORE_FAST 4 ( q )					  
							      								    								  
							      								    19 144 LOAD_FAST 3 ( p )					  
							      								    146 RETURN_VALUE NEW_LINE					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN
--							      --							    --								  --
def printMaxOfMin ( arr , n ) :				      Disassembly of <code object printMaxOfMin at 0x7f33e2653ed0,  Disassembly of <code object printMaxOfMin at 0x7f2b0163dc90,  script_not_found : None
    for k in range ( 1 , n + 1 ) :			      2 0 SETUP_LOOP 130 ( to 132 )				    2 0 SETUP_LOOP 64 ( to 66 )					  
	maxOfMin = INT_MIN ;				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	for i in range ( n - k + 1 ) :			      4 LOAD_CONST 1 ( 1 )					    4 LOAD_CONST 1 ( 1 )					  
	    min = arr [ i ]				      6 LOAD_FAST 1 ( n )					    6 LOAD_FAST 1 ( n )						  
	    for j in range ( k ) :			      8 LOAD_CONST 1 ( 1 )					    8 LOAD_CONST 2 ( 1 )					  
		if ( arr [ i + j ] < min ) :		      10 BINARY_ADD						    10 BINARY_ADD						  
		    min = arr [ i + j ]			      12 CALL_FUNCTION 2					    12 CALL_FUNCTION 2						  
	    if ( min > maxOfMin ) :			      14 GET_ITER						    14 GET_ITER							  
		maxOfMin = min				      >> 16 FOR_ITER 112 ( to 130 )				    >> 16 FOR_ITER 48 ( to 64 )					  
	print ( maxOfMin , end = " " )			      18 STORE_FAST 2 ( k )					    18 STORE_FAST 2 ( i )					  
							      								    								  
							      3 20 LOAD_GLOBAL 1 ( INT_MIN )				    3 20 SETUP_LOOP 40 ( to 62 )				  
							      22 STORE_FAST 3 ( maxOfMin )				    22 LOAD_GLOBAL 0 ( range )					  
							      								    24 LOAD_CONST 1 ( 1 )					  
							      4 24 SETUP_LOOP 90 ( to 116 )				    26 LOAD_FAST 2 ( i )					  
							      26 LOAD_GLOBAL 0 ( range )				    28 LOAD_CONST 2 ( 1 )					  
							      28 LOAD_FAST 1 ( n )					    30 BINARY_ADD						  
							      30 LOAD_FAST 2 ( k )					    32 CALL_FUNCTION 2						  
							      32 BINARY_SUBTRACT					    34 GET_ITER							  
							      34 LOAD_CONST 1 ( 1 )					    >> 36 FOR_ITER 24 ( to 60 )					  
							      36 BINARY_ADD						    38 STORE_FAST 3 ( i )					  
							      38 CALL_FUNCTION 1					    								  
							      40 GET_ITER						    4 40 LOAD_FAST 3 ( i )					  
							      >> 42 FOR_ITER 70 ( to 114 )				    42 LOAD_FAST 0 ( arr )					  
							      44 STORE_FAST 4 ( i )					    44 COMPARE_OP 4 ( > )					  
							      								    46 POP_JUMP_IF_FALSE 36					  
							      5 46 LOAD_FAST 0 ( arr )					    								  
							      48 LOAD_FAST 4 ( i )					    5 48 LOAD_FAST 0 ( arr )					  
							      50 BINARY_SUBSCR						    50 LOAD_FAST 3 ( i )					  
							      52 STORE_FAST 5 ( min )					    52 BINARY_SUBSCR						  
							      								    54 LOAD_FAST 0 ( arr )					  
							      6 54 SETUP_LOOP 44 ( to 100 )				    56 LOAD_FAST 3 ( i )					  
							      56 LOAD_GLOBAL 0 ( range )				    58 BINARY_SUBSCR						  
							      58 LOAD_FAST 2 ( k )					    60 LOAD_FAST 0 ( arr )					  
							      60 CALL_FUNCTION 1					    62 LOAD_FAST 3 ( i )					  
							      62 GET_ITER						    64 BINARY_SUBSCR						  
							      >> 64 FOR_ITER 32 ( to 98 )				    66 BINARY_SUBTRACT						  
							      66 STORE_FAST 6 ( j )					    68 STORE_SUBSCR						  
							      								    								  
							      7 68 LOAD_FAST 0 ( arr )					    6 70 LOAD_FAST 0 ( arr )					  
							      70 LOAD_FAST 4 ( i )					    72 LOAD_FAST 3 ( i )					  
							      72 LOAD_FAST 6 ( j )					    74 BINARY_SUBSCR						  
							      74 BINARY_ADD						    76 LOAD_FAST 0 ( arr )					  
							      76 BINARY_SUBSCR						    78 LOAD_FAST 3 ( i )					  
							      78 LOAD_FAST 5 ( min )					    80 STORE_SUBSCR						  
							      80 COMPARE_OP 0 ( < )					    								  
							      82 POP_JUMP_IF_FALSE 64					    7 82 LOAD_FAST 0 ( arr )					  
							      								    84 LOAD_FAST 3 ( i )					  
							      8 84 LOAD_FAST 0 ( arr )					    86 STORE_SUBSCR						  
							      86 LOAD_FAST 4 ( i )					    								  
							      88 LOAD_FAST 6 ( j )					    8 88 LOAD_FAST 0 ( arr )					  
							      90 BINARY_ADD						    90 RETURN_VALUE						  
							      92 BINARY_SUBSCR						    >> 92 JUMP_ABSOLUTE 16					  
							      94 STORE_FAST 5 ( min )					    >> 94 POP_BLOCK						  
							      96 JUMP_ABSOLUTE 64					    								  
							      >> 98 POP_BLOCK						    9 >> 96 LOAD_FAST 0 ( arr )					  
							      								    98 RETURN_VALUE NEW_LINE					  
							      9 >> 100 LOAD_FAST 5 ( min )				    								  
							      102 LOAD_FAST 3 ( maxOfMin )				    								  
							      104 COMPARE_OP 4 ( > )					    								  
							      106 POP_JUMP_IF_FALSE 42					    								  
							      								    								  
							      10 108 LOAD_FAST 5 ( min )				    								  
							      110 STORE_FAST 3 ( maxOfMin )				    								  
							      112 JUMP_ABSOLUTE 42					    								  
							      >> 114 POP_BLOCK						    								  
							      								    								  
							      11 >> 116 LOAD_GLOBAL 2 ( print )				    								  
							      118 LOAD_FAST 3 ( maxOfMin )				    								  
							      120 LOAD_CONST 2 ( ' ' )					    								  
							      122 LOAD_CONST 3 ( ( 'end' , ) )				    								  
							      124 CALL_FUNCTION_KW 2					    								  
							      126 POP_TOP						    								  
							      128 JUMP_ABSOLUTE 16					    								  
							      >> 130 POP_BLOCK						    								  
							      >> 132 LOAD_CONST 0 ( None )				    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY
--							      --							    --								  --
def minJumps ( arr , l , h ) :				      Disassembly of <code object minJumps at 0x7f33e2653ed0, file  Disassembly of <code object minJumps at 0x7f2b0163dc90, file  script_not_found : None
    if ( h == l ) :					      2 0 LOAD_FAST 2 ( h )					    2 0 LOAD_FAST 0 ( arr )					  
	return 0					      2 LOAD_FAST 1 ( l )					    2 LOAD_CONST 1 ( 0 )					  
    if ( arr [ l ] == 0 ) :				      4 COMPARE_OP 2 ( == )					    4 COMPARE_OP 2 ( == )					  
	return float ( 'inf' )				      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  
    min = float ( 'inf' )				      								    								  
    for i in range ( l + 1 , h + 1 ) :			      3 8 LOAD_CONST 1 ( 0 )					    3 8 LOAD_CONST 2 ( 0 )					  
	if ( i < l + arr [ l ] + 1 ) :			      10 RETURN_VALUE						    10 RETURN_VALUE						  
	    jumps = minJumps ( arr , i , h )		      								    								  
	    if ( jumps != float ( 'inf' ) and jumps + 1 < min 4 >> 12 LOAD_FAST 0 ( arr )				    4 >> 12 LOAD_FAST 0 ( arr )					  
		min = jumps + 1				      14 LOAD_FAST 1 ( l )					    14 LOAD_CONST 1 ( 0 )					  
    return min						      16 BINARY_SUBSCR						    16 BINARY_SUBSCR						  
							      18 LOAD_CONST 1 ( 0 )					    18 LOAD_CONST 3 ( 1 )					  
							      20 COMPARE_OP 2 ( == )					    20 COMPARE_OP 2 ( == )					  
							      22 POP_JUMP_IF_FALSE 32					    22 POP_JUMP_IF_FALSE 36					  
							      								    								  
							      5 24 LOAD_GLOBAL 0 ( float )				    5 24 LOAD_CONST 4 ( '%s' )					  
							      26 LOAD_CONST 2 ( 'inf' )					    26 LOAD_FAST 0 ( arr )					  
							      28 CALL_FUNCTION 1					    28 LOAD_CONST 1 ( 0 )					  
							      30 RETURN_VALUE						    30 BINARY_SUBSCR						  
							      								    32 BINARY_MODULO						  
							      6 >> 32 LOAD_GLOBAL 0 ( float )				    34 RETURN_VALUE						  
							      34 LOAD_CONST 2 ( 'inf' )					    								  
							      36 CALL_FUNCTION 1					    6 >> 36 LOAD_GLOBAL 0 ( len )				  
							      38 STORE_FAST 3 ( min )					    38 LOAD_FAST 0 ( arr )					  
							      								    40 CALL_FUNCTION 1						  
							      7 40 SETUP_LOOP 90 ( to 132 )				    42 LOAD_CONST 1 ( 0 )					  
							      42 LOAD_GLOBAL 1 ( range )				    44 COMPARE_OP 2 ( == )					  
							      44 LOAD_FAST 1 ( l )					    46 POP_JUMP_IF_FALSE 60					  
							      46 LOAD_CONST 3 ( 1 )					    								  
							      48 BINARY_ADD						    7 48 LOAD_CONST 5 ( '%s' )					  
							      50 LOAD_FAST 2 ( h )					    50 LOAD_FAST 0 ( arr )					  
							      52 LOAD_CONST 3 ( 1 )					    52 LOAD_CONST 1 ( 0 )					  
							      54 BINARY_ADD						    54 BINARY_SUBSCR						  
							      56 CALL_FUNCTION 2					    56 BINARY_MODULO						  
							      58 GET_ITER						    58 RETURN_VALUE						  
							      >> 60 FOR_ITER 68 ( to 130 )				    								  
							      62 STORE_FAST 4 ( i )					    8 >> 60 LOAD_GLOBAL 1 ( len )				  
							      								    62 LOAD_FAST 0 ( arr )					  
							      8 64 LOAD_FAST 4 ( i )					    64 LOAD_CONST 1 ( 0 )					  
							      66 LOAD_FAST 1 ( l )					    66 BINARY_SUBSCR						  
							      68 LOAD_FAST 0 ( arr )					    68 CALL_FUNCTION 1						  
							      70 LOAD_FAST 1 ( l )					    70 LOAD_CONST 1 ( 0 )					  
							      72 BINARY_SUBSCR						    72 COMPARE_OP 2 ( == )					  
							      74 BINARY_ADD						    74 POP_JUMP_IF_FALSE 84					  
							      76 LOAD_CONST 3 ( 1 )					    								  
							      78 BINARY_ADD						    9 76 LOAD_CONST 6 ( '%s' )					  
							      80 COMPARE_OP 0 ( < )					    78 LOAD_FAST 0 ( arr )					  
							      82 POP_JUMP_IF_FALSE 60					    80 LOAD_CONST 1 ( 0 )					  
							      								    82 BINARY_SUBSCR						  
							      9 84 LOAD_GLOBAL 2 ( minJumps )				    84 BINARY_MODULO						  
							      86 LOAD_FAST 0 ( arr )					    86 RETURN_VALUE						  
							      88 LOAD_FAST 4 ( i )					    								  
							      90 LOAD_FAST 2 ( h )					    10 >> 88 LOAD_FAST 0 ( arr )				  
							      92 CALL_FUNCTION 3					    90 LOAD_CONST 1 ( 0 )					  
							      94 STORE_FAST 5 ( jumps )					    92 BINARY_SUBSCR						  
							      								    94 LOAD_CONST 7 ( '%s' )					  
							      10 96 LOAD_FAST 5 ( jumps )				    96 LOAD_FAST 0 ( arr )					  
							      98 LOAD_GLOBAL 0 ( float )				    98 LOAD_CONST 1 ( 0 )					  
							      100 LOAD_CONST 2 ( 'inf' )				    100 BINARY_SUBSCR						  
							      102 CALL_FUNCTION 1					    102 BINARY_MODULO						  
							      104 COMPARE_OP 3 ( != )					    104 RETURN_VALUE NEW_LINE					  
							      106 POP_JUMP_IF_FALSE 60					    								  
							      108 LOAD_FAST 5 ( jumps )					    								  
							      110 LOAD_CONST 3 ( 1 )					    								  
							      112 BINARY_ADD						    								  
							      114 LOAD_FAST 3 ( min )					    								  
							      116 COMPARE_OP 0 ( < )					    								  
							      118 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      11 120 LOAD_FAST 5 ( jumps )				    								  
							      122 LOAD_CONST 3 ( 1 )					    								  
							      124 BINARY_ADD						    								  
							      126 STORE_FAST 3 ( min )					    								  
							      128 JUMP_ABSOLUTE 60					    								  
							      >> 130 POP_BLOCK						    								  
							      								    								  
							      12 >> 132 LOAD_FAST 3 ( min )				    								  
							      134 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		      PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		    PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		  PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N
--							      --							    --								  --
def findConsecutive ( N ) :				      Disassembly of <code object findConsecutive at 0x7f33e2649a50 Disassembly of <code object findConsecutive at 0x7f2b01639660 script_not_found : None
    start = 1						      2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    end = ( N + 1 ) // 2				      2 STORE_FAST 1 ( start )					    2 STORE_FAST 1 ( start )					  
    while ( start < end ) :				      								    								  
	Sum = 0						      3 4 LOAD_FAST 0 ( N )					    3 4 LOAD_CONST 2 ( 2 )					  
	for i in range ( start , end + 1 ) :		      6 LOAD_CONST 1 ( 1 )					    6 LOAD_FAST 0 ( N )						  
	    Sum = Sum + i				      8 BINARY_ADD						    8 BINARY_SUBTRACT						  
	    if ( Sum == N ) :				      10 LOAD_CONST 2 ( 2 )					    10 LOAD_CONST 2 ( 2 )					  
		for j in range ( start , i + 1 ) :	      12 BINARY_FLOOR_DIVIDE					    12 BINARY_FLOOR_DIVIDE					  
		    print ( j , end = " " )		      14 STORE_FAST 2 ( end )					    14 STORE_FAST 2 ( start )					  
		print ( )				      								    								  
		break					      4 16 SETUP_LOOP 122 ( to 140 )				    4 16 SETUP_LOOP 64 ( to 76 )				  
	    if ( Sum > N ) :				      >> 18 LOAD_FAST 1 ( start )				    >> 18 LOAD_FAST 1 ( start )					  
		break					      20 LOAD_FAST 2 ( end )					    20 POP_JUMP_IF_FALSE 74					  
	Sum = 0						      22 COMPARE_OP 0 ( < )					    								  
	start += 1					      24 POP_JUMP_IF_FALSE 138					    5 22 LOAD_FAST 2 ( start )					  
							      								    24 LOAD_CONST 3 ( 0 )					  
							      5 26 LOAD_CONST 3 ( 0 )					    26 COMPARE_OP 4 ( > )					  
							      28 STORE_FAST 3 ( Sum )					    28 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      6 30 SETUP_LOOP 92 ( to 124 )				    6 30 LOAD_FAST 2 ( start )					  
							      32 LOAD_GLOBAL 0 ( range )				    32 LOAD_CONST 4 ( 1 )					  
							      34 LOAD_FAST 1 ( start )					    34 BINARY_SUBTRACT						  
							      36 LOAD_FAST 2 ( end )					    36 STORE_FAST 2 ( start )					  
							      38 LOAD_CONST 1 ( 1 )					    								  
							      40 BINARY_ADD						    7 38 LOAD_FAST 2 ( start )					  
							      42 CALL_FUNCTION 2					    40 LOAD_CONST 5 ( 1 )					  
							      44 GET_ITER						    42 INPLACE_ADD						  
							      >> 46 FOR_ITER 74 ( to 122 )				    44 STORE_FAST 2 ( start )					  
							      48 STORE_FAST 4 ( i )					    								  
							      								    8 46 LOAD_FAST 2 ( start )					  
							      7 50 LOAD_FAST 3 ( Sum )					    48 LOAD_CONST 6 ( 1 )					  
							      52 LOAD_FAST 4 ( i )					    50 INPLACE_ADD						  
							      54 BINARY_ADD						    52 STORE_FAST 2 ( start )					  
							      56 STORE_FAST 3 ( Sum )					    								  
							      								    9 54 LOAD_FAST 2 ( start )					  
							      8 58 LOAD_FAST 3 ( Sum )					    56 LOAD_CONST 7 ( 2 )					  
							      60 LOAD_FAST 0 ( N )					    58 INPLACE_ADD						  
							      62 COMPARE_OP 2 ( == )					    60 STORE_FAST 2 ( start )					  
							      64 POP_JUMP_IF_FALSE 110					    62 JUMP_ABSOLUTE 18						  
							      								    >> 64 POP_BLOCK						  
							      9 66 SETUP_LOOP 34 ( to 102 )				    								  
							      68 LOAD_GLOBAL 0 ( range )				    10 >> 66 LOAD_FAST 1 ( start )				  
							      70 LOAD_FAST 1 ( start )					    68 RETURN_VALUE						  
							      72 LOAD_FAST 4 ( i )					    								  
							      74 LOAD_CONST 1 ( 1 )					    12 >> 70 LOAD_FAST 1 ( start )				  
							      76 BINARY_ADD						    72 LOAD_CONST 8 ( - 1 )					  
							      78 CALL_FUNCTION 2					    74 COMPARE_OP 4 ( > )					  
							      80 GET_ITER						    76 POP_JUMP_IF_FALSE 92					  
							      >> 82 FOR_ITER 16 ( to 100 )				    								  
							      84 STORE_FAST 5 ( j )					    13 78 LOAD_FAST 2 ( start )					  
							      								    80 LOAD_CONST 9 ( - 1 )					  
							      10 86 LOAD_GLOBAL 1 ( print )				    82 INPLACE_ADD						  
							      88 LOAD_FAST 5 ( j )					    84 STORE_FAST 2 ( start )					  
							      90 LOAD_CONST 4 ( ' ' )					    								  
							      92 LOAD_CONST 5 ( ( 'end' , ) )				    14 86 LOAD_FAST 2 ( start )					  
							      94 CALL_FUNCTION_KW 2					    88 LOAD_CONST 10 ( - 1 )					  
							      96 POP_TOP						    90 INPLACE_ADD						  
							      98 JUMP_ABSOLUTE 82					    92 STORE_FAST 2 ( start )					  
							      >> 100 POP_BLOCK						    94 JUMP_ABSOLUTE 18						  
							      								    								  
							      11 >> 102 LOAD_GLOBAL 1 ( print )				    15 >> 96 LOAD_FAST 2 ( start )				  
							      104 CALL_FUNCTION 0					    98 LOAD_CONST 11 ( - 1 )					  
							      106 POP_TOP						    100 INPLACE_ADD						  
							      								    102 STORE_FAST 2 ( start )					  
							      12 108 BREAK_LOOP						    								  
							      								    16 104 LOAD_FAST 1 ( start )				  
							      13 >> 110 LOAD_FAST 3 ( Sum )				    106 LOAD_CONST 12 ( - 1 )					  
							      112 LOAD_FAST 0 ( N )					    108 INPLACE_ADD						  
							      114 COMPARE_OP 4 ( > )					    110 STORE_FAST 2 ( start )					  
							      116 POP_JUMP_IF_FALSE 46					    								  
							      								    17 112 LOAD_FAST 1 ( start )				  
							      14 118 BREAK_LOOP						    114 LOAD_CONST 13 ( - 1 )					  
							      120 JUMP_ABSOLUTE 46					    116 INPLACE_ADD						  
							      >> 122 POP_BLOCK						    118 STORE_FAST 2 ( start )					  
							      								    120 JUMP_ABSOLUTE 18					  
							      15 >> 124 LOAD_CONST 3 ( 0 )				    >> 122 POP_BLOCK						  
							      126 STORE_FAST 3 ( Sum )					    								  
							      								    17 >> 124 LOAD_FAST 1 ( start )				  
							      16 128 LOAD_FAST 1 ( start )				    126 RETURN_VALUE NEW_LINE					  
							      130 LOAD_CONST 1 ( 1 )					    								  
							      132 INPLACE_ADD						    								  
							      134 STORE_FAST 1 ( start )				    								  
							      136 JUMP_ABSOLUTE 18					    								  
							      >> 138 POP_BLOCK						    								  
							      >> 140 LOAD_CONST 0 ( None )				    								  
							      142 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1   DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_<unk> ASING_SUBSEQUENCE_1
--							      --							    --								  --
def lis ( arr ) :					      Disassembly of <code object lis at 0x7f33e2644f60, file "<dis Disassembly of <code object lis at 0x7f2b0163dc90, file "<dis script_not_found : None
    n = len ( arr )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    lis = [ 1 ] * n					      2 LOAD_FAST 0 ( arr )					    2 LOAD_FAST 0 ( arr )					  
    for i in range ( 1 , n ) :				      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	for j in range ( 0 , i ) :			      6 STORE_FAST 1 ( n )					    6 STORE_FAST 1 ( n )					  
	    if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  								    								  
		lis [ i ] = lis [ j ] + 1		      3 8 LOAD_CONST 1 ( 1 )					    3 8 LOAD_CONST 1 ( 1 )					  
    maximum = 0						      10 BUILD_LIST 1						    10 LOAD_FAST 1 ( n )					  
    for i in range ( n ) :				      12 LOAD_FAST 1 ( n )					    12 BINARY_MULTIPLY						  
	maximum = max ( maximum , lis [ i ] )		      14 BINARY_MULTIPLY					    14 INPLACE_SUBTRACT						  
    return maximum					      16 STORE_FAST 2 ( lis )					    16 STORE_FAST 1 ( n )					  
							      								    								  
							      4 18 SETUP_LOOP 90 ( to 110 )				    4 18 SETUP_LOOP 64 ( to 94 )				  
							      20 LOAD_GLOBAL 1 ( range )				    20 LOAD_GLOBAL 1 ( range )					  
							      22 LOAD_CONST 1 ( 1 )					    22 LOAD_CONST 1 ( 1 )					  
							      24 LOAD_FAST 1 ( n )					    24 LOAD_FAST 1 ( n )					  
							      26 CALL_FUNCTION 2					    26 CALL_FUNCTION 2						  
							      28 GET_ITER						    28 GET_ITER							  
							      >> 30 FOR_ITER 76 ( to 108 )				    >> 30 FOR_ITER 48 ( to 92 )					  
							      32 STORE_FAST 3 ( i )					    32 STORE_FAST 2 ( i )					  
							      								    								  
							      5 34 SETUP_LOOP 70 ( to 106 )				    5 34 LOAD_FAST 1 ( n )					  
							      36 LOAD_GLOBAL 1 ( range )				    36 LOAD_FAST 2 ( i )					  
							      38 LOAD_CONST 2 ( 0 )					    38 BINARY_SUBSCR						  
							      40 LOAD_FAST 3 ( i )					    40 LOAD_FAST 1 ( n )					  
							      42 CALL_FUNCTION 2					    42 COMPARE_OP 2 ( == )					  
							      44 GET_ITER						    44 POP_JUMP_IF_FALSE 48					  
							      >> 46 FOR_ITER 56 ( to 104 )				    								  
							      48 STORE_FAST 4 ( j )					    6 46 LOAD_FAST 1 ( n )					  
							      								    48 LOAD_FAST 2 ( i )					  
							      6 50 LOAD_FAST 0 ( arr )					    50 BINARY_SUBSCR						  
							      52 LOAD_FAST 3 ( i )					    52 LOAD_FAST 1 ( n )					  
							      54 BINARY_SUBSCR						    54 COMPARE_OP 2 ( == )					  
							      56 LOAD_FAST 0 ( arr )					    56 POP_JUMP_IF_FALSE 30					  
							      58 LOAD_FAST 4 ( j )					    								  
							      60 BINARY_SUBSCR						    7 58 LOAD_FAST 1 ( n )					  
							      62 COMPARE_OP 4 ( > )					    60 LOAD_FAST 2 ( i )					  
							      64 POP_JUMP_IF_FALSE 46					    62 BINARY_SUBSCR						  
							      66 LOAD_FAST 2 ( lis )					    64 LOAD_FAST 1 ( n )					  
							      68 LOAD_FAST 3 ( i )					    66 LOAD_FAST 2 ( i )					  
							      70 BINARY_SUBSCR						    68 BINARY_SUBSCR						  
							      72 LOAD_FAST 2 ( lis )					    70 LOAD_FAST 1 ( n )					  
							      74 LOAD_FAST 4 ( j )					    72 STORE_SUBSCR						  
							      76 BINARY_SUBSCR						    								  
							      78 LOAD_CONST 1 ( 1 )					    8 >> 74 LOAD_FAST 1 ( n )					  
							      80 BINARY_ADD						    76 LOAD_FAST 2 ( i )					  
							      82 COMPARE_OP 0 ( < )					    78 DUP_TOP_TWO						  
							      84 POP_JUMP_IF_FALSE 46					    80 BINARY_SUBSCR						  
							      								    82 LOAD_FAST 1 ( n )					  
							      7 86 LOAD_FAST 2 ( lis )					    84 INPLACE_ADD						  
							      88 LOAD_FAST 4 ( j )					    86 ROT_THREE						  
							      90 BINARY_SUBSCR						    88 STORE_SUBSCR						  
							      92 LOAD_CONST 1 ( 1 )					    90 JUMP_ABSOLUTE 30						  
							      94 BINARY_ADD						    >> 92 POP_BLOCK						  
							      96 LOAD_FAST 2 ( lis )					    								  
							      98 LOAD_FAST 3 ( i )					    9 >> 94 LOAD_FAST 1 ( n )					  
							      100 STORE_SUBSCR						    96 RETURN_VALUE NEW_LINE					  
							      102 JUMP_ABSOLUTE 46					    								  
							      >> 104 POP_BLOCK						    								  
							      >> 106 JUMP_ABSOLUTE 30					    								  
							      >> 108 POP_BLOCK						    								  
							      								    								  
							      8 >> 110 LOAD_CONST 2 ( 0 )				    								  
							      112 STORE_FAST 5 ( maximum )				    								  
							      								    								  
							      9 114 SETUP_LOOP 30 ( to 146 )				    								  
							      116 LOAD_GLOBAL 1 ( range )				    								  
							      118 LOAD_FAST 1 ( n )					    								  
							      120 CALL_FUNCTION 1					    								  
							      122 GET_ITER						    								  
							      >> 124 FOR_ITER 18 ( to 144 )				    								  
							      126 STORE_FAST 3 ( i )					    								  
							      								    								  
							      10 128 LOAD_GLOBAL 2 ( max )				    								  
							      130 LOAD_FAST 5 ( maximum )				    								  
							      132 LOAD_FAST 2 ( lis )					    								  
							      134 LOAD_FAST 3 ( i )					    								  
							      136 BINARY_SUBSCR						    								  
							      138 CALL_FUNCTION 2					    								  
							      140 STORE_FAST 5 ( maximum )				    								  
							      142 JUMP_ABSOLUTE 124					    								  
							      >> 144 POP_BLOCK						    								  
							      								    								  
							      11 >> 146 LOAD_FAST 5 ( maximum )				    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A
--							      --							    --								  --
def findmin ( p , n ) :					      Disassembly of <code object findmin at 0x7f33e2644f60, file " Disassembly of <code object findmin at 0x7f2b0163dc90, file " script_not_found : None
    a , b , c , d = 0 , 0 , 0 , 0			      2 0 LOAD_CONST 1 ( ( 0 , 0 , 0 , 0 ) )			    2 0 LOAD_FAST 0 ( p )					  
    for i in range ( n ) :				      2 UNPACK_SEQUENCE 4					    2 LOAD_FAST 1 ( n )						  
	if ( p [ i ] [ 0 ] <= 0 ) :			      4 STORE_FAST 2 ( a )					    4 LOAD_CONST 1 ( 0 )					  
	    a += 1					      6 STORE_FAST 3 ( b )					    6 LOAD_CONST 2 ( ( 'min' , ) )				  
	elif ( p [ i ] [ 0 ] >= 0 ) :			      8 STORE_FAST 4 ( c )					    8 CALL_FUNCTION_KW 2					  
	    b += 1					      10 STORE_FAST 5 ( d )					    10 UNPACK_SEQUENCE 2					  
	if ( p [ i ] [ 1 ] >= 0 ) :			      								    12 STORE_FAST 2 ( i )					  
	    c += 1					      3 12 SETUP_LOOP 116 ( to 130 )				    14 STORE_FAST 3 ( min )					  
	elif ( p [ i ] [ 1 ] <= 0 ) :			      14 LOAD_GLOBAL 0 ( range )				    								  
	    d += 1					      16 LOAD_FAST 1 ( n )					    3 16 SETUP_LOOP 64 ( to 76 )				  
    return min ( [ a , b , c , d ] )			      18 CALL_FUNCTION 1					    >> 18 LOAD_FAST 2 ( i )					  
							      20 GET_ITER						    20 LOAD_CONST 1 ( 0 )					  
							      >> 22 FOR_ITER 104 ( to 128 )				    22 COMPARE_OP 0 ( < )					  
							      24 STORE_FAST 6 ( i )					    24 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      4 26 LOAD_FAST 0 ( p )					    4 26 LOAD_FAST 3 ( min )					  
							      28 LOAD_FAST 6 ( i )					    28 LOAD_FAST 0 ( p )					  
							      30 BINARY_SUBSCR						    30 LOAD_CONST 1 ( 0 )					  
							      32 LOAD_CONST 2 ( 0 )					    32 BINARY_SUBSCR						  
							      34 BINARY_SUBSCR						    34 COMPARE_OP 4 ( > )					  
							      36 LOAD_CONST 2 ( 0 )					    36 POP_JUMP_IF_FALSE 48					  
							      38 COMPARE_OP 1 ( <= )					    								  
							      40 POP_JUMP_IF_FALSE 52					    5 38 LOAD_FAST 3 ( min )					  
							      								    40 LOAD_FAST 0 ( p )					  
							      5 42 LOAD_FAST 2 ( a )					    42 LOAD_CONST 1 ( 0 )					  
							      44 LOAD_CONST 3 ( 1 )					    44 BINARY_SUBSCR						  
							      46 INPLACE_ADD						    46 COMPARE_OP 4 ( > )					  
							      48 STORE_FAST 2 ( a )					    48 POP_JUMP_IF_FALSE 60					  
							      50 JUMP_FORWARD 24 ( to 76 )				    								  
							      								    6 50 LOAD_FAST 3 ( min )					  
							      6 >> 52 LOAD_FAST 0 ( p )					    52 LOAD_FAST 0 ( p )					  
							      54 LOAD_FAST 6 ( i )					    54 LOAD_CONST 1 ( 0 )					  
							      56 BINARY_SUBSCR						    56 BINARY_SUBSCR						  
							      58 LOAD_CONST 2 ( 0 )					    58 LOAD_FAST 0 ( p )					  
							      60 BINARY_SUBSCR						    60 LOAD_CONST 1 ( 0 )					  
							      62 LOAD_CONST 2 ( 0 )					    62 BINARY_SUBSCR						  
							      64 COMPARE_OP 5 ( >= )					    64 COMPARE_OP 4 ( > )					  
							      66 POP_JUMP_IF_FALSE 76					    66 POP_JUMP_IF_FALSE 74					  
							      								    								  
							      7 68 LOAD_FAST 3 ( b )					    7 68 LOAD_FAST 3 ( min )					  
							      70 LOAD_CONST 3 ( 1 )					    70 LOAD_FAST 0 ( p )					  
							      72 INPLACE_ADD						    72 LOAD_CONST 1 ( 0 )					  
							      74 STORE_FAST 3 ( b )					    74 BINARY_SUBSCR						  
							      								    76 LOAD_FAST 0 ( p )					  
							      8 >> 76 LOAD_FAST 0 ( p )					    78 LOAD_CONST 1 ( 0 )					  
							      78 LOAD_FAST 6 ( i )					    80 BINARY_SUBSCR						  
							      80 BINARY_SUBSCR						    82 LOAD_FAST 0 ( p )					  
							      82 LOAD_CONST 3 ( 1 )					    84 LOAD_CONST 1 ( 0 )					  
							      84 BINARY_SUBSCR						    86 BINARY_SUBSCR						  
							      86 LOAD_CONST 2 ( 0 )					    88 LOAD_FAST 0 ( p )					  
							      88 COMPARE_OP 5 ( >= )					    90 LOAD_CONST 1 ( 0 )					  
							      90 POP_JUMP_IF_FALSE 102					    92 BINARY_SUBSCR						  
							      								    94 LOAD_FAST 0 ( p )					  
							      9 92 LOAD_FAST 4 ( c )					    96 LOAD_CONST 1 ( 0 )					  
							      94 LOAD_CONST 3 ( 1 )					    98 BINARY_SUBSCR						  
							      96 INPLACE_ADD						    100 LOAD_FAST 0 ( p )					  
							      98 STORE_FAST 4 ( c )					    102 LOAD_CONST 1 ( 0 )					  
							      100 JUMP_ABSOLUTE 22					    104 BINARY_SUBSCR						  
							      								    106 LOAD_FAST 0 ( p )					  
							      10 >> 102 LOAD_FAST 0 ( p )				    108 LOAD_CONST 1 ( 0 )					  
							      104 LOAD_FAST 6 ( i )					    110 BINARY_SUBSCR						  
							      106 BINARY_SUBSCR						    112 LOAD_FAST 0 ( p )					  
							      108 LOAD_CONST 3 ( 1 )					    114 LOAD_CONST 1 ( 0 )					  
							      110 BINARY_SUBSCR						    116 BINARY_SUBSCR						  
							      112 LOAD_CONST 2 ( 0 )					    118 LOAD_FAST 0 ( p )					  
							      114 COMPARE_OP 1 ( <= )					    120 LOAD_CONST 1 ( 0 )					  
							      116 POP_JUMP_IF_FALSE 22					    122 BINARY_SUBSCR						  
							      								    124 LOAD_FAST 0 ( p )					  
							      11 118 LOAD_FAST 5 ( d )					    126 LOAD_CONST 1 ( 0 )					  
							      120 LOAD_CONST 3 ( 1 )					    128 BINARY_SUBSCR						  
							      122 INPLACE_ADD						    130 LOAD_FAST 0 ( p )					  
							      124 STORE_FAST 5 ( d )					    132 LOAD_CONST 1 ( 0 )					  
							      126 JUMP_ABSOLUTE 22					    134 BINARY_SUBSCR						  
							      >> 128 POP_BLOCK						    136 LOAD_FAST 0 ( p )					  
							      								    138 LOAD_CONST 1 ( 0 )					  
							      12 >> 130 LOAD_GLOBAL 1 ( min )				    140 BINARY_SUBSCR						  
							      132 LOAD_FAST 2 ( a )					    142 LOAD_FAST 0 ( p )					  
							      134 LOAD_FAST 3 ( b )					    144 LOAD_CONST 1 ( 0 )					  
							      136 LOAD_FAST 4 ( c )					    146 BINARY_SUBSCR						  
							      138 LOAD_FAST 5 ( d )					    148 LOAD_FAST 0 ( p )					  
							      140 BUILD_LIST 4						    150 LOAD_CONST 1 ( 0 )					  
							      142 CALL_FUNCTION 1					    152 BINARY_SUBSCR						  
							      144 RETURN_VALUE NEW_LINE					    154 BUILD_TUPLE 4						  
							      								    156 RETURN_VALUE						  
							      								    								  
							      								    21 >> 158 LOAD_FAST 3 ( min )				  
							      								    160 LOAD_FAST 0 ( p )					  
							      								    162 LOAD_FAST 1 ( n )					  
							      								    164								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
def countNum ( arr , n ) :				      Disassembly of <code object countNum at 0x7f33e26494b0, file  Disassembly of <code object countNum at 0x7f2b0163dc90, file  error : Traceback (most recent call last):   File
    s = dict ( )					      2 0 LOAD_GLOBAL 0 ( dict )				    2 0 LOAD_GLOBAL 0 ( dict )					  "XLM/dis_script.py", line 59, in <module>	for
    count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9	      2 CALL_FUNCTION 0						    2 CALL_FUNCTION 0						  item in run_dis_script():   File "XLM/dis_script.p
    for i in range ( n ) :				      4 STORE_FAST 2 ( s )					    4 STORE_FAST 2 ( s )					  y", line 47, in run_dis_script     co_code, co_nlo
	s [ arr [ i ] ] = 1				      								    								  cals, co_varnames, co_names, co_consts, co_linesta
	if ( arr [ i ] < minm ) :			      3 6 LOAD_CONST 1 ( ( 0 , - 1000000000 , 1000000000 ) )	    3 6 LOAD_FAST 0 ( arr )					  rts = dis_asm.parse(bytecode) TypeError: cannot un
	    minm = arr [ i ]				      8 UNPACK_SEQUENCE 3					    8 LOAD_FAST 1 ( n )						  pack non-iterable NoneType object
	if ( arr [ i ] > maxm ) :			      10 STORE_FAST 3 ( count )					    10 LOAD_CONST 1 ( 2 )					  
	    maxm = arr [ i ]				      12 STORE_FAST 4 ( maxm )					    12 LOAD_CONST 2 ( - 10 )					  
    for i in range ( minm , maxm + 1 ) :		      14 STORE_FAST 5 ( minm )					    14 LOAD_CONST 3 ( 9 )					  
	if i not in s.keys ( ) :			      								    16 LOAD_CONST 4 ( 9 )					  
	    count += 1					      4 16 SETUP_LOOP 68 ( to 86 )				    18 LOAD_CONST 5 ( 10 )					  
    return count					      18 LOAD_GLOBAL 1 ( range )				    20 LOAD_CONST 6 ( 10 )					  
							      20 LOAD_FAST 1 ( n )					    22 LOAD_CONST 7 ( 12 )					  
							      22 CALL_FUNCTION 1					    24 LOAD_CONST 8 ( 14 )					  
							      24 GET_ITER						    26 LOAD_CONST 9 ( 16 )					  
							      >> 26 FOR_ITER 56 ( to 84 )				    28 LOAD_CONST 10 ( 18 )					  
							      28 STORE_FAST 6 ( i )					    30 LOAD_CONST 11 ( 20 )					  
							      								    32 LOAD_CONST 12 ( 22 )					  
							      5 30 LOAD_CONST 2 ( 1 )					    34 LOAD_CONST 13 ( 24 )					  
							      32 LOAD_FAST 2 ( s )					    36 LOAD_CONST 14 ( 26 )					  
							      34 LOAD_FAST 0 ( arr )					    38 LOAD_CONST 15 ( ( 'n' , 'n' , 'n' , 'n' , 'n' , 'n' , 'n'  
							      36 LOAD_FAST 6 ( i )					    								  
							      38 BINARY_SUBSCR						    								  
							      40 STORE_SUBSCR						    								  
							      								    								  
							      6 42 LOAD_FAST 0 ( arr )					    								  
							      44 LOAD_FAST 6 ( i )					    								  
							      46 BINARY_SUBSCR						    								  
							      48 LOAD_FAST 5 ( minm )					    								  
							      50 COMPARE_OP 0 ( < )					    								  
							      52 POP_JUMP_IF_FALSE 62					    								  
							      								    								  
							      7 54 LOAD_FAST 0 ( arr )					    								  
							      56 LOAD_FAST 6 ( i )					    								  
							      58 BINARY_SUBSCR						    								  
							      60 STORE_FAST 5 ( minm )					    								  
							      								    								  
							      8 >> 62 LOAD_FAST 0 ( arr )				    								  
							      64 LOAD_FAST 6 ( i )					    								  
							      66 BINARY_SUBSCR						    								  
							      68 LOAD_FAST 4 ( maxm )					    								  
							      70 COMPARE_OP 4 ( > )					    								  
							      72 POP_JUMP_IF_FALSE 26					    								  
							      								    								  
							      9 74 LOAD_FAST 0 ( arr )					    								  
							      76 LOAD_FAST 6 ( i )					    								  
							      78 BINARY_SUBSCR						    								  
							      80 STORE_FAST 4 ( maxm )					    								  
							      82 JUMP_ABSOLUTE 26					    								  
							      >> 84 POP_BLOCK						    								  
							      								    								  
							      10 >> 86 SETUP_LOOP 42 ( to 130 )				    								  
							      88 LOAD_GLOBAL 1 ( range )				    								  
							      90 LOAD_FAST 5 ( minm )					    								  
							      92 LOAD_FAST 4 ( maxm )					    								  
							      94 LOAD_CONST 2 ( 1 )					    								  
							      96 BINARY_ADD						    								  
							      98 CALL_FUNCTION 2					    								  
							      100 GET_ITER						    								  
							      >> 102 FOR_ITER 24 ( to 128 )				    								  
							      104 STORE_FAST 6 ( i )					    								  
							      								    								  
							      11 106 LOAD_FAST 6 ( i )					    								  
							      108 LOAD_FAST 2 ( s )					    								  
							      110 LOAD_METHOD 2 ( keys )				    								  
							      112 CALL_METHOD 0						    								  
							      114 COMPARE_OP 7 ( not in )				    								  
							      116 POP_JUMP_IF_FALSE 102					    								  
							      								    								  
							      12 118 LOAD_FAST 3 ( count )				    								  
							      120 LOAD_CONST 2 ( 1 )					    								  
							      122 INPLACE_ADD						    								  
							      124 STORE_FAST 3 ( count )				    								  
							      126 JUMP_ABSOLUTE 102					    								  
							      >> 128 POP_BLOCK						    								  
							      								    								  
							      13 >> 130 LOAD_FAST 3 ( count )				    								  
							      132 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS	      GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		    GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		  GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS
--							      --							    --								  --
def findMin ( V ) :					      Disassembly of <code object findMin at 0x7f33e2644f60, file " Disassembly of <code object findMin at 0x7f2b01639660, file " script_not_found : None
    deno = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ]    2 0 LOAD_CONST 1 ( 1 )					    2 0 LOAD_CONST 1 ( 1 )					  
    n = len ( deno )					      2 LOAD_CONST 2 ( 2 )					    2 LOAD_CONST 2 ( 2 )					  
    ans = [ ]						      4 LOAD_CONST 3 ( 5 )					    4 LOAD_CONST 3 ( 5 )					  
    i = n - 1						      6 LOAD_CONST 4 ( 10 )					    6 LOAD_CONST 4 ( 10 )					  
    while ( i >= 0 ) :					      8 LOAD_CONST 5 ( 20 )					    8 LOAD_CONST 5 ( 10 )					  
	while ( V >= deno [ i ] ) :			      10 LOAD_CONST 6 ( 50 )					    10 LOAD_CONST 6 ( ( 'n' , 'n' , 'n' , 'n' , 'n' , 'n' , 'n' , 
	    V -= deno [ i ]				      12 LOAD_CONST 7 ( 100 )					    								  
	    ans.append ( deno [ i ] )			      14 LOAD_CONST 8 ( 500 )					    								  
	i -= 1						      16 LOAD_CONST 9 ( 1000 )					    								  
    for i in range ( len ( ans ) ) :			      18 BUILD_LIST 9						    								  
	print ( ans [ i ] , end = " " )			      20 STORE_FAST 1 ( deno )					    								  
							      								    								  
							      3 22 LOAD_GLOBAL 0 ( len )				    								  
							      24 LOAD_FAST 1 ( deno )					    								  
							      26 CALL_FUNCTION 1					    								  
							      28 STORE_FAST 2 ( n )					    								  
							      								    								  
							      4 30 BUILD_LIST 0						    								  
							      32 STORE_FAST 3 ( ans )					    								  
							      								    								  
							      5 34 LOAD_FAST 2 ( n )					    								  
							      36 LOAD_CONST 1 ( 1 )					    								  
							      38 BINARY_SUBTRACT					    								  
							      40 STORE_FAST 4 ( i )					    								  
							      								    								  
							      6 42 SETUP_LOOP 64 ( to 108 )				    								  
							      >> 44 LOAD_FAST 4 ( i )					    								  
							      46 LOAD_CONST 10 ( 0 )					    								  
							      48 COMPARE_OP 5 ( >= )					    								  
							      50 POP_JUMP_IF_FALSE 106					    								  
							      								    								  
							      7 52 SETUP_LOOP 42 ( to 96 )				    								  
							      >> 54 LOAD_FAST 0 ( V )					    								  
							      56 LOAD_FAST 1 ( deno )					    								  
							      58 LOAD_FAST 4 ( i )					    								  
							      60 BINARY_SUBSCR						    								  
							      62 COMPARE_OP 5 ( >= )					    								  
							      64 POP_JUMP_IF_FALSE 94					    								  
							      								    								  
							      8 66 LOAD_FAST 0 ( V )					    								  
							      68 LOAD_FAST 1 ( deno )					    								  
							      70 LOAD_FAST 4 ( i )					    								  
							      72 BINARY_SUBSCR						    								  
							      74 INPLACE_SUBTRACT					    								  
							      76 STORE_FAST 0 ( V )					    								  
							      								    								  
							      9 78 LOAD_FAST 3 ( ans )					    								  
							      80 LOAD_METHOD 1 ( append )				    								  
							      82 LOAD_FAST 1 ( deno )					    								  
							      84 LOAD_FAST 4 ( i )					    								  
							      86 BINARY_SUBSCR						    								  
							      88 CALL_METHOD 1						    								  
							      90 POP_TOP						    								  
							      92 JUMP_ABSOLUTE 54					    								  
							      >> 94 POP_BLOCK						    								  
							      								    								  
							      10 >> 96 LOAD_FAST 4 ( i )				    								  
							      98 LOAD_CONST 1 ( 1 )					    								  
							      100 INPLACE_SUBTRACT					    								  
							      102 STORE_FAST 4 ( i )					    								  
							      104 JUMP_ABSOLUTE 44					    								  
							      >> 106 POP_BLOCK						    								  
							      								    								  
							      11 >> 108 SETUP_LOOP 36 ( to 146 )			    								  
							      110 LOAD_GLOBAL 2 ( range )				    								  
							      112 LOAD_GLOBAL 0 ( len )					    								  
							      114 LOAD_FAST 3 ( ans )					    								  
							      116 CALL_FUNCTION 1					    								  
							      118 CALL_FUNCTION 1					    								  
							      120 GET_ITER						    								  
							      >> 122 FOR_ITER 20 ( to 144 )				    								  
							      124 STORE_FAST 4 ( i )					    								  
							      								    								  
							      12 126 LOAD_GLOBAL 3 ( print )				    								  
							      128 LOAD_FAST 3 ( ans )					    								  
							      130 LOAD_FAST 4 ( i )					    								  
							      132 BINARY_SUBSCR						    								  
							      134 LOAD_CONST 11 ( ' ' )					    								  
							      136 LOAD_CONST 12 ( ( 'end' , ) )				    								  
							      138 CALL_FUNCTION_KW 2					    								  
							      140 POP_TOP						    								  
							      142 JUMP_ABSOLUTE 122					    								  
							      >> 144 POP_BLOCK						    								  
							      >> 146 LOAD_CONST 0 ( None )				    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECODE_MEDIAN_STRING_ORIGINAL_STRING			      DECODE_MEDIAN_STRING_ORIGINAL_STRING			    DECODE_MEDIAN_STRING_ORIGINAL_STRING			  DECODE_MEDIAN_STRING_ORIGINAL_STRING
--							      --							    --								  --
def decodeMedianString ( s ) :				      Disassembly of <code object decodeMedianString at 0x7f33e2649 Disassembly of <code object decodeMedianString at 0x7f2b0163d failure : #Results: 0, 10
    l = len ( s )					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    s1 = ""						      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  
    if ( l % 2 == 0 ) :					      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	isEven = True					      6 STORE_FAST 1 ( l )					    6 STORE_FAST 1 ( l )					  
    else :						      								    								  
	isEven = False					      3 8 LOAD_CONST 1 ( '' )					    3 8 LOAD_CONST 1 ( '' )					  
    for i in range ( 0 , l , 2 ) :			      10 STORE_FAST 2 ( s1 )					    10 STORE_FAST 2 ( s1 )					  
	if ( isEven ) :					      								    								  
	    s1 = s [ i ] + s1				      4 12 LOAD_FAST 1 ( l )					    4 12 LOAD_FAST 1 ( l )					  
	    s1 += s [ i + 1 ]				      14 LOAD_CONST 2 ( 2 )					    14 LOAD_CONST 2 ( 2 )					  
	else :						      16 BINARY_MODULO						    16 COMPARE_OP 2 ( == )					  
	    if ( l - i > 1 ) :				      18 LOAD_CONST 3 ( 0 )					    18 POP_JUMP_IF_FALSE 32					  
		s1 += s [ i ]				      20 COMPARE_OP 2 ( == )					    								  
		s1 = s [ i + 1 ] + s1			      22 POP_JUMP_IF_FALSE 30					    5 20 LOAD_CONST 3 ( False )					  
	    else :					      								    22 RETURN_VALUE						  
		s1 += s [ i ]				      5 24 LOAD_CONST 4 ( True )				    								  
    return s1						      26 STORE_FAST 3 ( isEven )				    6 >> 24 LOAD_FAST 0 ( s )					  
							      28 JUMP_FORWARD 4 ( to 34 )				    26 LOAD_CONST 4 ( 0 )					  
							      								    28 COMPARE_OP 2 ( == )					  
							      7 >> 30 LOAD_CONST 5 ( False )				    30 POP_JUMP_IF_FALSE 36					  
							      32 STORE_FAST 3 ( isEven )				    								  
							      								    7 32 LOAD_CONST 3 ( False )					  
							      8 >> 34 SETUP_LOOP 108 ( to 144 )				    34 RETURN_VALUE						  
							      36 LOAD_GLOBAL 1 ( range )				    								  
							      38 LOAD_CONST 3 ( 0 )					    8 >> 36 LOAD_FAST 0 ( s )					  
							      40 LOAD_FAST 1 ( l )					    38 LOAD_CONST 5 ( 1 )					  
							      42 LOAD_CONST 2 ( 2 )					    40 COMPARE_OP 2 ( == )					  
							      44 CALL_FUNCTION 3					    42 POP_JUMP_IF_FALSE 48					  
							      46 GET_ITER						    								  
							      >> 48 FOR_ITER 92 ( to 142 )				    9 44 LOAD_CONST 3 ( False )					  
							      50 STORE_FAST 4 ( i )					    46 RETURN_VALUE						  
							      								    								  
							      9 52 LOAD_FAST 3 ( isEven )				    10 >> 48 LOAD_FAST 0 ( s )					  
							      54 POP_JUMP_IF_FALSE 86					    50 LOAD_CONST 6 ( 1 )					  
							      								    52 COMPARE_OP 2 ( == )					  
							      10 56 LOAD_FAST 0 ( s )					    54 POP_JUMP_IF_FALSE 64					  
							      58 LOAD_FAST 4 ( i )					    								  
							      60 BINARY_SUBSCR						    11 56 LOAD_CONST 3 ( False )				  
							      62 LOAD_FAST 2 ( s1 )					    58 RETURN_VALUE						  
							      64 BINARY_ADD						    								  
							      66 STORE_FAST 2 ( s1 )					    12 >> 60 LOAD_FAST 0 ( s )					  
							      								    62 LOAD_CONST 7 ( 1 )					  
							      11 68 LOAD_FAST 2 ( s1 )					    64 COMPARE_OP 2 ( == )					  
							      70 LOAD_FAST 0 ( s )					    66 POP_JUMP_IF_FALSE 72					  
							      72 LOAD_FAST 4 ( i )					    								  
							      74 LOAD_CONST 6 ( 1 )					    13 68 LOAD_CONST 3 ( False )				  
							      76 BINARY_ADD						    70 RETURN_VALUE						  
							      78 BINARY_SUBSCR						    								  
							      80 INPLACE_ADD						    14 >> 72 LOAD_FAST 0 ( s )					  
							      82 STORE_FAST 2 ( s1 )					    74 LOAD_CONST 8 ( 2 )					  
							      84 JUMP_ABSOLUTE 48					    76 COMPARE_OP 2 ( == )					  
							      								    78 POP_JUMP_IF_FALSE 92					  
							      13 >> 86 LOAD_FAST 1 ( l )				    								  
							      88 LOAD_FAST 4 ( i )					    15 80 LOAD_CONST 3 ( False )				  
							      90 BINARY_SUBTRACT					    82 RETURN_VALUE						  
							      92 LOAD_CONST 6 ( 1 )					    								  
							      94 COMPARE_OP 4 ( > )					    16 >> 84 LOAD_FAST 0 ( s )					  
							      96 POP_JUMP_IF_FALSE 128					    86 LOAD_CONST 9 ( 4 )					  
							      								    88 COMPARE_OP 2 ( == )					  
							      14 98 LOAD_FAST 2 ( s1 )					    90 POP_JUMP_IF_FALSE 92					  
							      100 LOAD_FAST 0 ( s )					    								  
							      102 LOAD_FAST 4 ( i )					    17 92 LOAD_CONST 3 ( False )				  
							      104 BINARY_SUBSCR						    94 RETURN_VALUE						  
							      106 INPLACE_ADD						    								  
							      108 STORE_FAST 2 ( s1 )					    19 >> 96 LOAD_CONST 3 ( False )				  
							      								    98 RETURN_VALUE NEW_LINE					  
							      15 110 LOAD_FAST 0 ( s )					    								  
							      112 LOAD_FAST 4 ( i )					    								  
							      114 LOAD_CONST 6 ( 1 )					    								  
							      116 BINARY_ADD						    								  
							      118 BINARY_SUBSCR						    								  
							      120 LOAD_FAST 2 ( s1 )					    								  
							      122 BINARY_ADD						    								  
							      124 STORE_FAST 2 ( s1 )					    								  
							      126 JUMP_ABSOLUTE 48					    								  
							      								    								  
							      17 >> 128 LOAD_FAST 2 ( s1 )				    								  
							      130 LOAD_FAST 0 ( s )					    								  
							      132 LOAD_FAST 4 ( i )					    								  
							      134 BINARY_SUBSCR						    								  
							      136 INPLACE_ADD						    								  
							      138 STORE_FAST 2 ( s1 )					    								  
							      140 JUMP_ABSOLUTE 48					    								  
							      >> 142 POP_BLOCK						    								  
							      								    								  
							      18 >> 144 LOAD_FAST 2 ( s1 )				    								  
							      146 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			      MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			    MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE			  MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE
--							      --							    --								  --
def merge ( ar1 , ar2 , m , n ) :			      Disassembly of <code object merge at 0x7f33e2653ed0, file "<d Disassembly of <code object merge at 0x7f2b01639660, file "<d script_not_found : None
    for i in range ( n - 1 , - 1 , - 1 ) :		      2 0 SETUP_LOOP 146 ( to 148 )				    2 0 SETUP_LOOP 76 ( to 78 )					  
	last = ar1 [ m - 1 ]				      2 LOAD_GLOBAL 0 ( range )					    2 LOAD_GLOBAL 0 ( range )					  
	j = m - 2					      4 LOAD_FAST 3 ( n )					    4 LOAD_CONST 1 ( 1 )					  
	while ( j >= 0 and ar1 [ j ] > ar2 [ i ] ) :	      6 LOAD_CONST 1 ( 1 )					    6 LOAD_CONST 2 ( - 1 )					  
	    ar1 [ j + 1 ] = ar1 [ j ]			      8 BINARY_SUBTRACT						    8 LOAD_CONST 3 ( - 1 )					  
	    j -= 1					      10 LOAD_CONST 2 ( - 1 )					    10 LOAD_CONST 3 ( - 1 )					  
	if ( j != m - 2 or last > ar2 [ i ] ) :		      12 LOAD_CONST 2 ( - 1 )					    12 CALL_FUNCTION 3						  
	    ar1 [ j + 1 ] = ar2 [ i ]			      14 CALL_FUNCTION 3					    14 GET_ITER							  
	    ar2 [ i ] = last				      16 GET_ITER						    >> 16 FOR_ITER 76 ( to 76 )					  
							      >> 18 FOR_ITER 126 ( to 146 )				    18 STORE_FAST 2 ( i )					  
							      20 STORE_FAST 4 ( i )					    								  
							      								    3 20 LOAD_FAST 0 ( ar1 )					  
							      3 22 LOAD_FAST 0 ( ar1 )					    22 LOAD_FAST 2 ( i )					  
							      24 LOAD_FAST 2 ( m )					    24 BINARY_SUBSCR						  
							      26 LOAD_CONST 1 ( 1 )					    26 LOAD_FAST 1 ( ar2 )					  
							      28 BINARY_SUBTRACT					    28 COMPARE_OP 2 ( == )					  
							      30 BINARY_SUBSCR						    30 POP_JUMP_IF_FALSE 40					  
							      32 STORE_FAST 5 ( last )					    								  
							      								    4 32 LOAD_FAST 2 ( i )					  
							      4 34 LOAD_FAST 2 ( m )					    34 LOAD_FAST 1 ( ar2 )					  
							      36 LOAD_CONST 3 ( 2 )					    36 BINARY_SUBSCR						  
							      38 BINARY_SUBTRACT					    38 LOAD_FAST 2 ( i )					  
							      40 STORE_FAST 6 ( j )					    40 BINARY_SUBSCR						  
							      								    42 LOAD_FAST 1 ( ar2 )					  
							      5 42 SETUP_LOOP 52 ( to 96 )				    44 BINARY_SUBSCR						  
							      >> 44 LOAD_FAST 6 ( j )					    46 LOAD_FAST 2 ( i )					  
							      46 LOAD_CONST 4 ( 0 )					    48 BINARY_SUBSCR						  
							      48 COMPARE_OP 5 ( >= )					    50 LOAD_FAST 1 ( ar2 )					  
							      50 POP_JUMP_IF_FALSE 94					    52 BINARY_SUBSCR						  
							      52 LOAD_FAST 0 ( ar1 )					    54 LOAD_FAST 2 ( i )					  
							      54 LOAD_FAST 6 ( j )					    56 BINARY_SUBSCR						  
							      56 BINARY_SUBSCR						    58 LOAD_FAST 1 ( ar2 )					  
							      58 LOAD_FAST 1 ( ar2 )					    60 STORE_SUBSCR						  
							      60 LOAD_FAST 4 ( i )					    								  
							      62 BINARY_SUBSCR						    5 62 LOAD_FAST 0 ( ar1 )					  
							      64 COMPARE_OP 4 ( > )					    64 LOAD_FAST 2 ( i )					  
							      66 POP_JUMP_IF_FALSE 94					    66 BINARY_SUBSCR						  
							      								    68 LOAD_FAST 2 ( i )					  
							      6 68 LOAD_FAST 0 ( ar1 )					    70 BINARY_SUBSCR						  
							      70 LOAD_FAST 6 ( j )					    72 LOAD_FAST 2 ( i )					  
							      72 BINARY_SUBSCR						    74 BINARY_SUBSCR						  
							      74 LOAD_FAST 0 ( ar1 )					    76 LOAD_FAST 2 ( i )					  
							      76 LOAD_FAST 6 ( j )					    78 BINARY_SUBSCR						  
							      78 LOAD_CONST 1 ( 1 )					    80 LOAD_FAST 1 ( ar2 )					  
							      80 BINARY_ADD						    82 STORE_SUBSCR						  
							      82 STORE_SUBSCR						    								  
							      								    6 84 LOAD_FAST 0 ( ar1 )					  
							      7 84 LOAD_FAST 6 ( j )					    86 LOAD_FAST 2 ( i )					  
							      86 LOAD_CONST 1 ( 1 )					    88 BINARY_SUBSCR						  
							      88 INPLACE_SUBTRACT					    90 LOAD_FAST 1 ( ar2 )					  
							      90 STORE_FAST 6 ( j )					    92 STORE_SUBSCR						  
							      92 JUMP_ABSOLUTE 44					    								  
							      >> 94 POP_BLOCK						    7 94 LOAD_FAST 0 ( ar1 )					  
							      								    96 LOAD_FAST 2 ( i )					  
							      8 >> 96 LOAD_FAST 6 ( j )					    98 BINARY_SUBSCR						  
							      98 LOAD_FAST 2 ( m )					    100 LOAD_FAST 1 ( ar2 )					  
							      100 LOAD_CONST 3 ( 2 )					    102 STORE_SUBSCR						  
							      102 BINARY_SUBTRACT					    104 JUMP_ABSOLUTE 16					  
							      104 COMPARE_OP 3 ( != )					    >> 106 POP_BLOCK						  
							      106 POP_JUMP_IF_TRUE 120					    >> 108 JUMP_ABSOLUTE 16					  
							      108 LOAD_FAST 5 ( last )					    >> 110 POP_BLOCK						  
							      110 LOAD_FAST 1 ( ar2 )					    >> 112 LOAD_CONST 0 ( None )				  
							      112 LOAD_FAST 4 ( i )					    114 RETURN_VALUE NEW_LINE					  
							      114 BINARY_SUBSCR						    								  
							      116 COMPARE_OP 4 ( > )					    								  
							      118 POP_JUMP_IF_FALSE 18					    								  
							      								    								  
							      9 >> 120 LOAD_FAST 1 ( ar2 )				    								  
							      122 LOAD_FAST 4 ( i )					    								  
							      124 BINARY_SUBSCR						    								  
							      126 LOAD_FAST 0 ( ar1 )					    								  
							      128 LOAD_FAST 6 ( j )					    								  
							      130 LOAD_CONST 1 ( 1 )					    								  
							      132 BINARY_ADD						    								  
							      134 STORE_SUBSCR						    								  
							      								    								  
							      10 136 LOAD_FAST 5 ( last )				    								  
							      138 LOAD_FAST 1 ( ar2 )					    								  
							      140 LOAD_FAST 4 ( i )					    								  
							      142 STORE_SUBSCR						    								  
							      144 JUMP_ABSOLUTE 18					    								  
							      >> 146 POP_BLOCK						    								  
							      >> 148 LOAD_CONST 0 ( None )				    								  
							      150 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY_1				      FLOOR_IN_A_SORTED_ARRAY_1					    FLOOR_IN_A_SORTED_ARRAY_1					  FLOOR_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
def floorSearch ( arr , low , high , x ) :		      Disassembly of <code object floorSearch at 0x7f33e2644f60, fi Disassembly of <code object floorSearch at 0x7f2b0163dc90, fi error : Traceback (most recent call last):   File
    if ( low > high ) :					      2 0 LOAD_FAST 1 ( low )					    2 0 LOAD_FAST 0 ( arr )					  "XLM/dis_script.py", line 59, in <module>	for
	return - 1					      2 LOAD_FAST 2 ( high )					    2 LOAD_FAST 1 ( low )					  item in run_dis_script():   File "XLM/dis_script.p
    if ( x >= arr [ high ] ) :				      4 COMPARE_OP 4 ( > )					    4 COMPARE_OP 4 ( > )					  y", line 54, in run_dis_script     hyp_co = mco.to
	return high					      6 POP_JUMP_IF_FALSE 12					    6 POP_JUMP_IF_FALSE 12					  _co()	  File "/home/ubuntu/TransCoder/XLM/src/dis_
    mid = int ( ( low + high ) / 2 )			      								    								  assembler.py", line 81, in to_co     co_consts.app
    if ( arr [ mid ] == x ) :				      3 8 LOAD_CONST 1 ( - 1 )					    3 8 LOAD_CONST 1 ( - 1 )					  end(c.to_co(hexversion))   File "/home/ubuntu/Tran
	return mid					      10 RETURN_VALUE						    10 RETURN_VALUE						  sCoder/XLM/src/dis_assembler.py", line 100, in to_
    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 								    								  co	 self.co_cellvars, ValueError: code: varname
	return mid - 1					      4 >> 12 LOAD_FAST 3 ( x )					    4 >> 12 LOAD_FAST 0 ( arr )					  s is too small
    if ( x < arr [ mid ] ) :				      14 LOAD_FAST 0 ( arr )					    14 LOAD_FAST 1 ( low )					  
	return floorSearch ( arr , low , mid - 1 , x )	      16 LOAD_FAST 2 ( high )					    16 COMPARE_OP 5 ( >= )					  
    return floorSearch ( arr , mid + 1 , high , x )	      18 BINARY_SUBSCR						    18 POP_JUMP_IF_FALSE 24					  
							      20 COMPARE_OP 5 ( >= )					    								  
							      22 POP_JUMP_IF_FALSE 28					    5 20 LOAD_CONST 2 ( - 1 )					  
							      								    22 RETURN_VALUE						  
							      5 24 LOAD_FAST 2 ( high )					    								  
							      26 RETURN_VALUE						    6 >> 24 LOAD_GLOBAL 0 ( int )				  
							      								    26 LOAD_FAST 0 ( arr )					  
							      6 >> 28 LOAD_GLOBAL 0 ( int )				    28 LOAD_FAST 1 ( low )					  
							      30 LOAD_FAST 1 ( low )					    30 BINARY_SUBSCR						  
							      32 LOAD_FAST 2 ( high )					    32 CALL_FUNCTION 1						  
							      34 BINARY_ADD						    34 RETURN_VALUE						  
							      36 LOAD_CONST 2 ( 2 )					    								  
							      38 BINARY_TRUE_DIVIDE					    7 >> 36 LOAD_GLOBAL 1 ( ResSearch )				  
							      40 CALL_FUNCTION 1					    38 LOAD_FAST 0 ( arr )					  
							      42 STORE_FAST 4 ( mid )					    40 LOAD_FAST 1 ( low )					  
							      								    42 BINARY_SUBSCR						  
							      7 44 LOAD_FAST 0 ( arr )					    44 CALL_FUNCTION 1						  
							      46 LOAD_FAST 4 ( mid )					    46 RETURN_VALUE NEW_LINE					  
							      48 BINARY_SUBSCR						    								  
							      50 LOAD_FAST 3 ( x )					    								  
							      52 COMPARE_OP 2 ( == )					    								  
							      54 POP_JUMP_IF_FALSE 60					    								  
							      								    								  
							      8 56 LOAD_FAST 4 ( mid )					    								  
							      58 RETURN_VALUE						    								  
							      								    								  
							      9 >> 60 LOAD_FAST 4 ( mid )				    								  
							      62 LOAD_CONST 3 ( 0 )					    								  
							      64 COMPARE_OP 4 ( > )					    								  
							      66 POP_JUMP_IF_FALSE 104					    								  
							      68 LOAD_FAST 0 ( arr )					    								  
							      70 LOAD_FAST 4 ( mid )					    								  
							      72 LOAD_CONST 4 ( 1 )					    								  
							      74 BINARY_SUBTRACT					    								  
							      76 BINARY_SUBSCR						    								  
							      78 LOAD_FAST 3 ( x )					    								  
							      80 COMPARE_OP 1 ( <= )					    								  
							      82 POP_JUMP_IF_FALSE 104					    								  
							      84 LOAD_FAST 3 ( x )					    								  
							      86 LOAD_FAST 0 ( arr )					    								  
							      88 LOAD_FAST 4 ( mid )					    								  
							      90 BINARY_SUBSCR						    								  
							      92 COMPARE_OP 0 ( < )					    								  
							      94 POP_JUMP_IF_FALSE 104					    								  
							      								    								  
							      10 96 LOAD_FAST 4 ( mid )					    								  
							      98 LOAD_CONST 4 ( 1 )					    								  
							      100 BINARY_SUBTRACT					    								  
							      102 RETURN_VALUE						    								  
							      								    								  
							      11 >> 104 LOAD_FAST 3 ( x )				    								  
							      106 LOAD_FAST 0 ( arr )					    								  
							      108 LOAD_FAST 4 ( mid )					    								  
							      110 BINARY_SUBSCR						    								  
							      112 COMPARE_OP 0 ( < )					    								  
							      114 POP_JUMP_IF_FALSE 134					    								  
							      								    								  
							      12 116 LOAD_GLOBAL 1 ( floorSearch )			    								  
							      118 LOAD_FAST 0 ( arr )					    								  
							      120 LOAD_FAST 1 ( low )					    								  
							      122 LOAD_FAST 4 ( mid )					    								  
							      124 LOAD_CONST 4 ( 1 )					    								  
							      126 BINARY_SUBTRACT					    								  
							      128 LOAD_FAST 3 ( x )					    								  
							      130 CALL_FUNCTION 4					    								  
							      132 RETURN_VALUE						    								  
							      								    								  
							      13 >> 134 LOAD_GLOBAL 1 ( floorSearch )			    								  
							      136 LOAD_FAST 0 ( arr )					    								  
							      138 LOAD_FAST 4 ( mid )					    								  
							      140 LOAD_CONST 4 ( 1 )					    								  
							      142 BINARY_ADD						    								  
							      144 LOAD_FAST 2 ( high )					    								  
							      146 LOAD_FAST 3 ( x )					    								  
							      148 CALL_FUNCTION 4					    								  
							      150 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL			  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL
--							      --							    --								  --
def substringConversions ( s , k , b ) :		      Disassembly of <code object substringConversions at 0x7f33e26 Disassembly of <code object substringConversions at 0x7f2b016 script_not_found : None
    l = len ( s ) ;					      2 0 LOAD_GLOBAL 0 ( len )					    2 0 LOAD_GLOBAL 0 ( len )					  
    for i in range ( l ) :				      2 LOAD_FAST 0 ( s )					    2 LOAD_FAST 0 ( s )						  
	if ( ( i + k ) < l + 1 ) :			      4 CALL_FUNCTION 1						    4 CALL_FUNCTION 1						  
	    sub = s [ i : i + k ] ;			      6 STORE_FAST 3 ( l )					    6 STORE_FAST 2 ( l )					  
	    sum , counter = 0 , 0 ;			      								    								  
	    for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :  3 8 SETUP_LOOP 140 ( to 150 )				    3 8 LOAD_GLOBAL 1 ( len )					  
		sum = sum + ( ( ord ( sub [ i ] ) - ord ( '0' 10 LOAD_GLOBAL 1 ( range )				    10 LOAD_FAST 0 ( s )					  
		counter += 1 ;				      12 LOAD_FAST 3 ( l )					    12 CALL_FUNCTION 1						  
	    print ( sum , end = " " ) ;			      14 CALL_FUNCTION 1					    14 LOAD_CONST 1 ( 1 )					  
							      16 GET_ITER						    16 COMPARE_OP 0 ( < )					  
							      >> 18 FOR_ITER 128 ( to 148 )				    18 POP_JUMP_IF_FALSE 32					  
							      20 STORE_FAST 4 ( i )					    								  
							      								    4 20 LOAD_GLOBAL 2 ( len )					  
							      4 22 LOAD_FAST 4 ( i )					    22 LOAD_FAST 0 ( s )					  
							      24 LOAD_FAST 1 ( k )					    24 CALL_FUNCTION 1						  
							      26 BINARY_ADD						    26 LOAD_CONST 2 ( 0 )					  
							      28 LOAD_FAST 3 ( l )					    28 COMPARE_OP 4 ( > )					  
							      30 LOAD_CONST 1 ( 1 )					    30 POP_JUMP_IF_FALSE 32					  
							      32 BINARY_ADD						    								  
							      34 COMPARE_OP 0 ( < )					    5 >> 32 LOAD_GLOBAL 2 ( len )				  
							      36 POP_JUMP_IF_FALSE 18					    34 LOAD_FAST 0 ( s )					  
							      								    36 CALL_FUNCTION 1						  
							      5 38 LOAD_FAST 0 ( s )					    38 LOAD_CONST 2 ( 0 )					  
							      40 LOAD_FAST 4 ( i )					    40 COMPARE_OP 4 ( > )					  
							      42 LOAD_FAST 4 ( i )					    42 POP_JUMP_IF_FALSE 48					  
							      44 LOAD_FAST 1 ( k )					    								  
							      46 BINARY_ADD						    6 44 LOAD_GLOBAL 2 ( len )					  
							      48 BUILD_SLICE 2						    46 LOAD_FAST 0 ( s )					  
							      50 BINARY_SUBSCR						    48 CALL_FUNCTION 1						  
							      52 STORE_FAST 5 ( sub )					    50 LOAD_CONST 2 ( 0 )					  
							      								    52 COMPARE_OP 4 ( > )					  
							      6 54 LOAD_CONST 2 ( ( 0 , 0 ) )				    54 POP_JUMP_IF_FALSE 64					  
							      56 UNPACK_SEQUENCE 2					    								  
							      58 STORE_FAST 6 ( sum )					    7 56 LOAD_GLOBAL 2 ( len )					  
							      60 STORE_FAST 7 ( counter )				    58 LOAD_FAST 0 ( s )					  
							      								    60 CALL_FUNCTION 1						  
							      7 62 SETUP_LOOP 70 ( to 134 )				    62 LOAD_CONST 2 ( 0 )					  
							      64 LOAD_GLOBAL 1 ( range )				    64 COMPARE_OP 4 ( > )					  
							      66 LOAD_GLOBAL 0 ( len )					    66 POP_JUMP_IF_FALSE 64					  
							      68 LOAD_FAST 5 ( sub )					    								  
							      70 CALL_FUNCTION 1					    8 68 LOAD_GLOBAL 2 ( len )					  
							      72 LOAD_CONST 1 ( 1 )					    70 LOAD_FAST 0 ( s )					  
							      74 BINARY_SUBTRACT					    72 CALL_FUNCTION 1						  
							      76 LOAD_CONST 3 ( - 1 )					    74 LOAD_CONST 2 ( 0 )					  
							      78 LOAD_CONST 3 ( - 1 )					    76 COMPARE_OP 4 ( > )					  
							      80 CALL_FUNCTION 3					    78 POP_JUMP_IF_FALSE 96					  
							      82 GET_ITER						    								  
							      >> 84 FOR_ITER 46 ( to 132 )				    9 80 LOAD_GLOBAL 2 ( len )					  
							      86 STORE_FAST 4 ( i )					    82 LOAD_FAST 0 ( s )					  
							      								    84 CALL_FUNCTION 1						  
							      8 88 LOAD_FAST 6 ( sum )					    86 LOAD_CONST 2 ( 0 )					  
							      90 LOAD_GLOBAL 2 ( ord )					    88 COMPARE_OP 4 ( > )					  
							      92 LOAD_FAST 5 ( sub )					    90 POP_JUMP_IF_FALSE 96					  
							      94 LOAD_FAST 4 ( i )					    								  
							      96 BINARY_SUBSCR						    10 92 LOAD_GLOBAL 2 ( len )					  
							      98 CALL_FUNCTION 1					    94 LOAD_FAST 0 ( s )					  
							      100 LOAD_GLOBAL 2 ( ord )					    96 CALL_FUNCTION 1						  
							      102 LOAD_CONST 4 ( '0' )					    98 LOAD_CONST 2 ( 0 )					  
							      104 CALL_FUNCTION 1					    100 COMPARE_OP 4 ( > )					  
							      106 BINARY_SUBTRACT					    102 POP_JUMP_IF_FALSE 96					  
							      108 LOAD_GLOBAL 3 ( pow )					    								  
							      110 LOAD_FAST 2 ( b )					    11 104 LOAD_GLOBAL 2 ( len )				  
							      112 LOAD_FAST 7 ( counter )				    106 LOAD_FAST 0 ( s )					  
							      114 CALL_FUNCTION 2					    108 CALL_FUNCTION 1						  
							      116 BINARY_MULTIPLY					    110 LOAD_CONST 2 ( 0 )					  
							      118 BINARY_ADD						    112 COMPARE_OP 4 ( > )					  
							      120 STORE_FAST 6 ( sum )					    114 POP_JUMP_IF_FALSE 96					  
							      								    								  
							      9 122 LOAD_FAST 7 ( counter )				    12 116 LOAD_GLOBAL 2 ( len )				  
							      124 LOAD_CONST 1 ( 1 )					    118 LOAD_FAST 0 ( s )					  
							      126 INPLACE_ADD						    120 CALL_FUNCTION 1						  
							      128 STORE_FAST 7 ( counter )				    122 LOAD_CONST 2 ( 0 )					  
							      130 JUMP_ABSOLUTE 84					    124 COMPARE_OP 4 ( > )					  
							      >> 132 POP_BLOCK						    126 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      10 >> 134 LOAD_GLOBAL 4 ( print )				    13 128 LOAD_GLOBAL 2 ( len )				  
							      136 LOAD_FAST 6 ( sum )					    130 LOAD_FAST 0 ( s )					  
							      138 LOAD_CONST 5 ( ' ' )					    132 CALL_FUNCTION 1						  
							      140 LOAD_CONST 6 ( ( 'end' , ) )				    134 LOAD_CONST 2 ( 0 )					  
							      142 CALL_FUNCTION_KW 2					    136 COMPARE_OP 4 ( > )					  
							      144 POP_TOP						    138 POP_JUMP_IF_FALSE 128					  
							      146 JUMP_ABSOLUTE 18					    								  
							      >> 148 POP_BLOCK						    14 140 LOAD_GLOBAL 2 ( len )				  
							      >> 150 LOAD_CONST 0 ( None )				    142 LOAD_FAST 0 ( s )					  
							      152 RETURN_VALUE NEW_LINE					    144 CALL_FUNCTION 1						  
							      								    146 LOAD_CONST 2 ( 0 )					  
							      								    148 COMPARE_OP 4 ( > )					  
							      								    150 POP_JUMP_IF_FALSE 128					  
							      								    								  
							      								    15 152 LOAD_GLOBAL 2 ( len )				  
							      								    154 LOAD_FAST 0 ( s						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS    RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS	  RETURN_A_PAIR_WITH_MAXIMUM_PR<unk> CT_IN_ARRAY_OF_INTEGERS
--							      --							    --								  --
def maxProduct ( arr , n ) :				      Disassembly of <code object maxProduct at 0x7f33e2649a50, fil Disassembly of <code object maxProduct at 0x7f2b0163dc90, fil script_not_found : None
    if ( n < 2 ) :					      2 0 LOAD_FAST 1 ( n )					    2 0 LOAD_FAST 0 ( arr )					  
	print ( "No pairs exists" )			      2 LOAD_CONST 1 ( 2 )					    2 LOAD_CONST 1 ( 2 )					  
	return						      4 COMPARE_OP 0 ( < )					    4 COMPARE_OP 0 ( < )					  
    a = arr [ 0 ] ; b = arr [ 1 ]			      6 POP_JUMP_IF_FALSE 20					    6 POP_JUMP_IF_FALSE 12					  
    for i in range ( 0 , n ) :				      								    								  
	for j in range ( i + 1 , n ) :			      3 8 LOAD_GLOBAL 0 ( print )				    3 8 LOAD_GLOBAL 0 ( print )					  
	    if ( arr [ i ] * arr [ j ] > a * b ) :	      10 LOAD_CONST 2 ( 'No pairs exists' )			    10 LOAD_CONST 2 ( 'No pairs exists' )			  
		a = arr [ i ] ; b = arr [ j ]		      12 CALL_FUNCTION 1					    12 CALL_FUNCTION 1						  
    print ( "Max product pair is {" , a , "," , b , "}" , sep 14 POP_TOP						    14 POP_TOP							  
							      								    								  
							      4 16 LOAD_CONST 0 ( None )				    4 16 LOAD_FAST 0 ( arr )					  
							      18 RETURN_VALUE						    18 LOAD_CONST 1 ( 2 )					  
							      								    20 BINARY_SUBSCR						  
							      5 >> 20 LOAD_FAST 0 ( arr )				    22 STORE_FAST 1 ( b )					  
							      22 LOAD_CONST 3 ( 0 )					    								  
							      24 BINARY_SUBSCR						    5 24 SETUP_LOOP 64 ( to 104 )				  
							      26 STORE_FAST 2 ( a )					    >> 26 LOAD_FAST 0 ( arr )					  
							      28 LOAD_FAST 0 ( arr )					    28 LOAD_CONST 1 ( 2 )					  
							      30 LOAD_CONST 4 ( 1 )					    30 BINARY_SUBSCR						  
							      32 BINARY_SUBSCR						    32 GET_ITER							  
							      34 STORE_FAST 3 ( b )					    >> 34 FOR_ITER 48 ( to 102 )				  
							      								    36 STORE_FAST 2 ( i )					  
							      6 36 SETUP_LOOP 82 ( to 120 )				    								  
							      38 LOAD_GLOBAL 1 ( range )				    6 38 LOAD_FAST 1 ( b )					  
							      40 LOAD_CONST 3 ( 0 )					    40 LOAD_FAST 2 ( i )					  
							      42 LOAD_FAST 1 ( n )					    42 BINARY_SUBSCR						  
							      44 CALL_FUNCTION 2					    44 LOAD_FAST 1 ( b )					  
							      46 GET_ITER						    46 COMPARE_OP 4 ( > )					  
							      >> 48 FOR_ITER 68 ( to 118 )				    48 POP_JUMP_IF_FALSE 34					  
							      50 STORE_FAST 4 ( i )					    								  
							      								    7 50 LOAD_FAST 0 ( arr )					  
							      7 52 SETUP_LOOP 62 ( to 116 )				    52 LOAD_CONST 1 ( 2 )					  
							      54 LOAD_GLOBAL 1 ( range )				    54 BINARY_SUBSCR						  
							      56 LOAD_FAST 4 ( i )					    56 LOAD_FAST 1 ( b )					  
							      58 LOAD_CONST 4 ( 1 )					    58 COMPARE_OP 4 ( > )					  
							      60 BINARY_ADD						    60 POP_JUMP_IF_FALSE 34					  
							      62 LOAD_FAST 1 ( n )					    								  
							      64 CALL_FUNCTION 2					    8 62 LOAD_FAST 0 ( arr )					  
							      66 GET_ITER						    64 LOAD_CONST 1 ( 2 )					  
							      >> 68 FOR_ITER 44 ( to 114 )				    66 BINARY_SUBSCR						  
							      70 STORE_FAST 5 ( j )					    68 LOAD_FAST 1 ( b )					  
							      								    70 COMPARE_OP 4 ( > )					  
							      8 72 LOAD_FAST 0 ( arr )					    72 POP_JUMP_IF_FALSE 34					  
							      74 LOAD_FAST 4 ( i )					    								  
							      76 BINARY_SUBSCR						    9 74 LOAD_FAST 0 ( arr )					  
							      78 LOAD_FAST 0 ( arr )					    76 LOAD_CONST 1 ( 2 )					  
							      80 LOAD_FAST 5 ( j )					    78 BINARY_SUBSCR						  
							      82 BINARY_SUBSCR						    80 LOAD_FAST 1 ( b )					  
							      84 BINARY_MULTIPLY					    82 LOAD_FAST 2 ( i )					  
							      86 LOAD_FAST 2 ( a )					    84 BINARY_SUBSCR						  
							      88 LOAD_FAST 3 ( b )					    86 LOAD_FAST 1 ( b )					  
							      90 BINARY_MULTIPLY					    88 LOAD_FAST 2 ( i )					  
							      92 COMPARE_OP 4 ( > )					    90 STORE_SUBSCR						  
							      94 POP_JUMP_IF_FALSE 68					    92 JUMP_ABSOLUTE 34						  
							      								    >> 94 POP_BLOCK						  
							      9 96 LOAD_FAST 0 ( arr )					    								  
							      98 LOAD_FAST 4 ( i )					    10 >> 96 LOAD_FAST 0 ( arr )				  
							      100 BINARY_SUBSCR						    98 RETURN_VALUE NEW_LINE					  
							      102 STORE_FAST 2 ( a )					    								  
							      104 LOAD_FAST 0 ( arr )					    								  
							      106 LOAD_FAST 5 ( j )					    								  
							      108 BINARY_SUBSCR						    								  
							      110 STORE_FAST 3 ( b )					    								  
							      112 JUMP_ABSOLUTE 68					    								  
							      >> 114 POP_BLOCK						    								  
							      >> 116 JUMP_ABSOLUTE 48					    								  
							      >> 118 POP_BLOCK						    								  
							      								    								  
							      10 >> 120 LOAD_GLOBAL 0 ( print )				    								  
							      122 LOAD_CONST 5 ( 'Max product pair is {' )		    								  
							      124 LOAD_FAST 2 ( a )					    								  
							      126 LOAD_CONST 6 ( ',' )					    								  
							      128 LOAD_FAST 3 ( b )					    								  
							      130 LOAD_CONST 7 ( '}' )					    								  
							      132 LOAD_CONST 8 ( '' )					    								  
							      134 LOAD_CONST 9 ( ( 'sep' , ) )				    								  
							      136 CALL_FUNCTION_KW 6					    								  
							      138 POP_TOP						    								  
							      140 LOAD_CONST 0 ( None )					    								  
							      142 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE LONGEST_ALTERNATING_POSITIVE_<unk> TIVE_SUBARRAY_STARTING_EVE
--							      --							    --								  --
def longestAlternating ( arr , n ) :			      Disassembly of <code object longestAlternating at 0x7f33e2644 Disassembly of <code object longestAlternating at 0x7f2b01639 script_not_found : None
    count = [ None ] * n				      2 0 LOAD_CONST 0 ( None )					    2 0 LOAD_CONST 0 ( None )					  
    count [ n - 1 ] = 1					      2 BUILD_LIST 1						    2 LOAD_CONST 0 ( None )					  
    i = n - 2						      4 LOAD_FAST 1 ( n )					    4 BUILD_SLICE 2						  
    while i >= 0 :					      6 BINARY_MULTIPLY						    6 STORE_FAST 1 ( count )					  
	if ( arr [ i ] * arr [ i + 1 ] < 0 ) :		      8 STORE_FAST 2 ( count )					    								  
	    count [ i ] = count [ i + 1 ] + 1		      								    3 8 LOAD_FAST 1 ( count )					  
	else :						      3 10 LOAD_CONST 1 ( 1 )					    10 LOAD_CONST 1 ( - 1 )					  
	    count [ i ] = 1 ;				      12 LOAD_FAST 2 ( count )					    12 COMPARE_OP 2 ( == )					  
	i = i - 1					      14 LOAD_FAST 1 ( n )					    14 POP_JUMP_IF_FALSE 20					  
    i = 0						      16 LOAD_CONST 1 ( 1 )					    								  
    while i < n :					      18 BINARY_SUBTRACT					    4 16 LOAD_CONST 2 ( '' )					  
	print ( count [ i ] , end = " " )		      20 STORE_SUBSCR						    18 STORE_FAST 2 ( i )					  
	i = i + 1					      								    								  
							      4 22 LOAD_FAST 1 ( n )					    5 >> 20 LOAD_FAST 1 ( count )				  
							      24 LOAD_CONST 2 ( 2 )					    22 LOAD_CONST 1 ( - 1 )					  
							      26 BINARY_SUBTRACT					    24 COMPARE_OP 0 ( < )					  
							      28 STORE_FAST 3 ( i )					    26 POP_JUMP_IF_FALSE 40					  
							      								    								  
							      5 30 SETUP_LOOP 74 ( to 106 )				    6 28 LOAD_CONST 3 ( '' )					  
							      >> 32 LOAD_FAST 3 ( i )					    30 STORE_FAST 2 ( i )					  
							      34 LOAD_CONST 3 ( 0 )					    								  
							      36 COMPARE_OP 5 ( >= )					    7 32 SETUP_LOOP 40 ( to 64 )				  
							      38 POP_JUMP_IF_FALSE 104					    >> 34 LOAD_FAST 1 ( count )					  
							      								    36 LOAD_CONST 1 ( - 1 )					  
							      6 40 LOAD_FAST 0 ( arr )					    38 COMPARE_OP 0 ( < )					  
							      42 LOAD_FAST 3 ( i )					    40 POP_JUMP_IF_FALSE 56					  
							      44 BINARY_SUBSCR						    								  
							      46 LOAD_FAST 0 ( arr )					    8 42 LOAD_CONST 4 ( '' )					  
							      48 LOAD_FAST 3 ( i )					    44 STORE_FAST 2 ( i )					  
							      50 LOAD_CONST 1 ( 1 )					    								  
							      52 BINARY_ADD						    9 46 LOAD_FAST 2 ( i )					  
							      54 BINARY_SUBSCR						    48 LOAD_CONST 1 ( - 1 )					  
							      56 BINARY_MULTIPLY					    50 COMPARE_OP 0 ( < )					  
							      58 LOAD_CONST 3 ( 0 )					    52 POP_JUMP_IF_FALSE 56					  
							      60 COMPARE_OP 0 ( < )					    								  
							      62 POP_JUMP_IF_FALSE 86					    10 54 LOAD_CONST 5 ( '' )					  
							      								    56 STORE_FAST 2 ( i )					  
							      7 64 LOAD_FAST 2 ( count )				    58 JUMP_ABSOLUTE 34						  
							      66 LOAD_FAST 3 ( i )					    >> 60 POP_BLOCK						  
							      68 LOAD_CONST 1 ( 1 )					    								  
							      70 BINARY_ADD						    11 >> 62 LOAD_FAST 2 ( i )					  
							      72 BINARY_SUBSCR						    64 LOAD_CONST 1 ( - 1 )					  
							      74 LOAD_CONST 1 ( 1 )					    66 COMPARE_OP 0 ( < )					  
							      76 BINARY_ADD						    68 POP_JUMP_IF_FALSE 86					  
							      78 LOAD_FAST 2 ( count )					    								  
							      80 LOAD_FAST 3 ( i )					    12 70 LOAD_CONST 6 ( '' )					  
							      82 STORE_SUBSCR						    72 STORE_FAST 2 ( i )					  
							      84 JUMP_FORWARD 8 ( to 94 )				    								  
							      								    13 74 LOAD_FAST 2 ( i )					  
							      9 >> 86 LOAD_CONST 1 ( 1 )				    76 LOAD_CONST 1 ( - 1 )					  
							      88 LOAD_FAST 2 ( count )					    78 COMPARE_OP 2 ( == )					  
							      90 LOAD_FAST 3 ( i )					    80 POP_JUMP_IF_FALSE 92					  
							      92 STORE_SUBSCR						    								  
							      								    14 82 LOAD_CONST 7 ( '' )					  
							      10 >> 94 LOAD_FAST 3 ( i )				    84 LOAD_FAST 2 ( i )					  
							      96 LOAD_CONST 1 ( 1 )					    86 LOAD_CONST 1 ( - 1 )					  
							      98 BINARY_SUBTRACT					    88 BINARY_SUBSCR						  
							      100 STORE_FAST 3 ( i )					    90 LOAD_FAST 2 ( i )					  
							      102 JUMP_ABSOLUTE 32					    92 LOAD_CONST 1 ( - 1 )					  
							      >> 104 POP_BLOCK						    94 BINARY_SUBSCR						  
							      								    96 BINARY_ADD						  
							      11 >> 106 LOAD_CONST 3 ( 0 )				    98 STORE_FAST 2 ( i )					  
							      108 STORE_FAST 3 ( i )					    								  
							      								    15 >> 100 LOAD_FAST 2 ( i )					  
							      12 110 SETUP_LOOP 36 ( to 148 )				    102 LOAD_CONST 1 ( - 1 )					  
							      >> 112 LOAD_FAST 3 ( i )					    104 COMPARE_OP 0 ( < )					  
							      114 LOAD_FAST 1 ( n )					    106 POP_JUMP_IF_FALSE 120					  
							      116 COMPARE_OP 0 ( < )					    								  
							      118 POP_JUMP_IF_FALSE 146					    16 108 LOAD_CONST 8 ( '' )					  
							      								    110 LOAD_FAST 2 ( i )					  
							      13 120 LOAD_GLOBAL 0 ( print )				    112 LOAD_CONST 1 ( - 1 )					  
							      122 LOAD_FAST 2 ( count )					    114 BINARY_SUBSCR						  
							      124 LOAD_FAST 3 ( i )					    116 BINARY_ADD						  
							      126 BINARY_SUBSCR						    118 STORE_FAST 2 ( i )					  
							      128 LOAD_CONST 4 ( ' ' )					    								  
							      130 LOAD_CONST 5 ( ( 'end' , ) )				    17 >> 120 LOAD_FAST 2 ( i )					  
							      132 CALL_FUNCTION_KW 2					    122 LOAD_CONST 1 ( - 1 )					  
							      134 POP_TOP						    124 COMPARE_OP 0 ( < )					  
							      								    126 POP_JUMP_IF_FALSE 128					  
							      14 136 LOAD_FAST 3 ( i )					    								  
							      138 LOAD_CONST 1 ( 1 )					    18 128 LOAD_CONST 9 ( '' )					  
							      140 BINARY_ADD						    130 LOAD_FAST 2 ( i )					  
							      142 STORE_FAST 3 ( i )					    132 LOAD_CONST 1 ( - 1 )					  
							      144 JUMP_ABSOLUTE 112					    134 BINARY_SUBSCR						  
							      >> 146 POP_BLOCK						    136 BINARY_ADD						  
							      >> 148 LOAD_CONST 0 ( None )				    138 LOAD_FAST 2 ( i )					  
							      150 RETURN_VALUE NEW_LINE					    140 LOAD_CONST 1 ( - 1 )					  
							      								    142								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			      FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			    FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			  FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA
--							      --							    --								  --
def parabola ( a , b , c ) :				      Disassembly of <code object parabola at 0x7f33e2653f60, file  Disassembly of <code object parabola at 0x7f2b0163dc90, file  script_not_found : None
    print ( "Vertex: (" , ( - b / ( 2 * a ) ) , ", " , ( ( (  2 0 LOAD_GLOBAL 0 ( print )				    2 0 LOAD_GLOBAL 0 ( print )					  
    print ( "Focus: (" , ( - b / ( 2 * a ) ) , ", " , ( ( ( 4 2 LOAD_CONST 1 ( 'Vertex: (' )				    2 LOAD_CONST 1 ( 'Vertex: (")' )				  
    print ( "Directrix: y=" , c - ( ( b * b ) + 1 ) * 4 * a , 4 LOAD_FAST 1 ( b )					    4 LOAD_CONST 2 ( ( 'Vertex' , ) )				  
							      6 UNARY_NEGATIVE						    6 LOAD_CONST 3 ( ( 'Vertex' , ) )				  
							      8 LOAD_CONST 2 ( 2 )					    8 CALL_FUNCTION_KW 2					  
							      10 LOAD_FAST 0 ( a )					    10 POP_TOP							  
							      12 BINARY_MULTIPLY					    								  
							      14 BINARY_TRUE_DIVIDE					    3 12 LOAD_GLOBAL 0 ( print )				  
							      16 LOAD_CONST 3 ( ', ' )					    14 LOAD_CONST 4 ( 'Foimal: (")' )				  
							      18 LOAD_CONST 4 ( 4 )					    16 CALL_FUNCTION 1						  
							      20 LOAD_FAST 0 ( a )					    18 POP_TOP							  
							      22 BINARY_MULTIPLY					    								  
							      24 LOAD_FAST 2 ( c )					    4 20 LOAD_GLOBAL 0 ( print )				  
							      26 BINARY_MULTIPLY					    22 LOAD_CONST 5 ( 'Foimal: (")' )				  
							      28 LOAD_FAST 1 ( b )					    24 CALL_FUNCTION 1						  
							      30 LOAD_FAST 1 ( b )					    26 POP_TOP							  
							      32 BINARY_MULTIPLY					    								  
							      34 BINARY_SUBTRACT					    5 28 LOAD_GLOBAL 0 ( print )				  
							      36 LOAD_CONST 4 ( 4 )					    30 LOAD_CONST 6 ( 'Foimal: (")				  
							      38 LOAD_FAST 0 ( a )					    32CALL_FUNCTION1						  
							      40 BINARY_MULTIPLY					    34POP_TOP							  
							      42 BINARY_TRUE_DIVIDE					    								  
							      44 LOAD_CONST 5 ( ')' )					    636LOAD_GLOBAL0( print )					  
							      46 LOAD_CONST 6 ( '' )					    38 LOAD_CONST 7 ( ' ' )					  
							      48 LOAD_CONST 7 ( ( 'sep' , ) )				    40 CALL_FUNCTION 1						  
							      50 CALL_FUNCTION_KW 6					    42 POP_TOP							  
							      52 POP_TOP						    								  
							      								    7 44 LOAD_GLOBAL 0 ( print )				  
							      3 54 LOAD_GLOBAL 0 ( print )				    46 LOAD_CONST 8 ( ' ' )					  
							      56 LOAD_CONST 8 ( 'Focus: (' )				    48 CALL_FUNCTION 1						  
							      58 LOAD_FAST 1 ( b )					    50 POP_TOP							  
							      60 UNARY_NEGATIVE						    								  
							      62 LOAD_CONST 2 ( 2 )					    8 52 LOAD_GLOBAL 0 ( print )				  
							      64 LOAD_FAST 0 ( a )					    54 LOAD_CONST 9 ( ' ' )					  
							      66 BINARY_MULTIPLY					    56 CALL_FUNCTION 1						  
							      68 BINARY_TRUE_DIVIDE					    58 POP_TOP							  
							      70 LOAD_CONST 3 ( ', ' )					    								  
							      72 LOAD_CONST 4 ( 4 )					    9 60 LOAD_GLOBAL 0 ( print )				  
							      74 LOAD_FAST 0 ( a )					    62 LOAD_CONST 10 ( ' ' )					  
							      76 BINARY_MULTIPLY					    64 CALL_FUNCTION 1						  
							      78 LOAD_FAST 2 ( c )					    66 POP_TOP							  
							      80 BINARY_MULTIPLY					    68 LOAD_CONST 0 ( None )					  
							      82 LOAD_FAST 1 ( b )					    70 RETURN_VALUE NEW_LINE					  
							      84 LOAD_FAST 1 ( b )					    								  
							      86 BINARY_MULTIPLY					    								  
							      88 BINARY_SUBTRACT					    								  
							      90 LOAD_CONST 9 ( 1 )					    								  
							      92 BINARY_ADD						    								  
							      94 LOAD_CONST 4 ( 4 )					    								  
							      96 LOAD_FAST 0 ( a )					    								  
							      98 BINARY_MULTIPLY					    								  
							      100 BINARY_TRUE_DIVIDE					    								  
							      102 LOAD_CONST 5 ( ')' )					    								  
							      104 LOAD_CONST 6 ( '' )					    								  
							      106 LOAD_CONST 7 ( ( 'sep' , ) )				    								  
							      108 CALL_FUNCTION_KW 6					    								  
							      110 POP_TOP						    								  
							      								    								  
							      4 112 LOAD_GLOBAL 0 ( print )				    								  
							      114 LOAD_CONST 10 ( 'Directrix: y=' )			    								  
							      116 LOAD_FAST 2 ( c )					    								  
							      118 LOAD_FAST 1 ( b )					    								  
							      120 LOAD_FAST 1 ( b )					    								  
							      122 BINARY_MULTIPLY					    								  
							      124 LOAD_CONST 9 ( 1 )					    								  
							      126 BINARY_ADD						    								  
							      128 LOAD_CONST 4 ( 4 )					    								  
							      130 BINARY_MULTIPLY					    								  
							      132 LOAD_FAST 0 ( a )					    								  
							      134 BINARY_MULTIPLY					    								  
							      136 BINARY_SUBTRACT					    								  
							      138 LOAD_CONST 6 ( '' )					    								  
							      140 LOAD_CONST 7 ( ( 'sep' , ) )				    								  
							      142 CALL_FUNCTION_KW 3					    								  
							      144 POP_TOP						    								  
							      146 LOAD_CONST 0 ( None )					    								  
							      148 RETURN_VALUE NEW_LINE					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
